
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013cb0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08013f80  08013f80  00014f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014390  08014390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014398  08014398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801439c  0801439c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  080143a0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003354  240002cc  0801466c  000162cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003620  0801466c  00016620  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000162cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d687  00000000  00000000  000162fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000057be  00000000  00000000  00043981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023d0  00000000  00000000  00049140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001bc2  00000000  00000000  0004b510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009626  00000000  00000000  0004d0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00035b26  00000000  00000000  000566f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017005e  00000000  00000000  0008c21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fc27c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a9e8  00000000  00000000  001fc2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  00206ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013f68 	.word	0x08013f68

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	08013f68 	.word	0x08013f68

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b4:	f000 fe98 	bl	80013e8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f001 fe7e 	bl	80023b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f82e 	bl	800071c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006c0:	f000 f89c 	bl	80007fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 fd86 	bl	80011d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c8:	f000 fd64 	bl	8001194 <MX_DMA_Init>
  MX_DAC1_Init();
 80006cc:	f000 f9ac 	bl	8000a28 <MX_DAC1_Init>
  MX_I2C2_Init();
 80006d0:	f000 f9dc 	bl	8000a8c <MX_I2C2_Init>
  MX_SPI2_Init();
 80006d4:	f000 fa1a 	bl	8000b0c <MX_SPI2_Init>
  MX_SPI3_Init();
 80006d8:	f000 fa6e 	bl	8000bb8 <MX_SPI3_Init>
  MX_SPI4_Init();
 80006dc:	f000 fac2 	bl	8000c64 <MX_SPI4_Init>
  MX_TIM4_Init();
 80006e0:	f000 fc46 	bl	8000f70 <MX_TIM4_Init>
  MX_TIM3_Init();
 80006e4:	f000 fbb6 	bl	8000e54 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80006e8:	f000 fd08 	bl	80010fc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80006ec:	f000 fb10 	bl	8000d10 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006f0:	f000 fb62 	bl	8000db8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80006f4:	f000 f8b2 	bl	800085c <MX_ADC1_Init>
  MX_ADC2_Init();
 80006f8:	f000 f92c 	bl	8000954 <MX_ADC2_Init>
  MX_UART7_Init();
 80006fc:	f000 fcb0 	bl	8001060 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000700:	f010 f94e 	bl	80109a0 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  VibeCheck_Init(&vc, &htim3);
 8000704:	4903      	ldr	r1, [pc, #12]	@ (8000714 <main+0x64>)
 8000706:	4804      	ldr	r0, [pc, #16]	@ (8000718 <main+0x68>)
 8000708:	f001 fc3c 	bl	8001f84 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 800070c:	4802      	ldr	r0, [pc, #8]	@ (8000718 <main+0x68>)
 800070e:	f001 fc4d 	bl	8001fac <VibeCheck_Loop>
 8000712:	e7fb      	b.n	800070c <main+0x5c>
 8000714:	240006d8 	.word	0x240006d8
 8000718:	24000898 	.word	0x24000898

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b09c      	sub	sp, #112	@ 0x70
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000726:	224c      	movs	r2, #76	@ 0x4c
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f011 fbc1 	bl	8011eb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2220      	movs	r2, #32
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f011 fbbb 	bl	8011eb2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800073c:	2002      	movs	r0, #2
 800073e:	f006 ffa3 	bl	8007688 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b2c      	ldr	r3, [pc, #176]	@ (80007f8 <SystemClock_Config+0xdc>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a2b      	ldr	r2, [pc, #172]	@ (80007f8 <SystemClock_Config+0xdc>)
 800074c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <SystemClock_Config+0xdc>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800075e:	bf00      	nop
 8000760:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <SystemClock_Config+0xdc>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800076c:	d1f8      	bne.n	8000760 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800076e:	2321      	movs	r3, #33	@ 0x21
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000772:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000780:	2302      	movs	r3, #2
 8000782:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000788:	2328      	movs	r3, #40	@ 0x28
 800078a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800078c:	2301      	movs	r3, #1
 800078e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000798:	230c      	movs	r3, #12
 800079a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079c:	2300      	movs	r3, #0
 800079e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a8:	4618      	mov	r0, r3
 80007aa:	f006 ffb7 	bl	800771c <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007b4:	f000 fe44 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	233f      	movs	r3, #63	@ 0x3f
 80007ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2303      	movs	r3, #3
 80007be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c4:	2308      	movs	r3, #8
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c8:	2340      	movs	r3, #64	@ 0x40
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007cc:	2340      	movs	r3, #64	@ 0x40
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d6:	2340      	movs	r3, #64	@ 0x40
 80007d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2103      	movs	r1, #3
 80007de:	4618      	mov	r0, r3
 80007e0:	f007 fb76 	bl	8007ed0 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007ea:	f000 fe29 	bl	8001440 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3770      	adds	r7, #112	@ 0x70
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	58024800 	.word	0x58024800

080007fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0ae      	sub	sp, #184	@ 0xb8
 8000800:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	22b8      	movs	r2, #184	@ 0xb8
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f011 fb52 	bl	8011eb2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800080e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000812:	f04f 0300 	mov.w	r3, #0
 8000816:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800081e:	2310      	movs	r3, #16
 8000820:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800082e:	23c0      	movs	r3, #192	@ 0xc0
 8000830:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800083a:	2300      	movs	r3, #0
 800083c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	4618      	mov	r0, r3
 8000844:	f007 fed0 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800084e:	f000 fdf7 	bl	8001440 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	37b8      	adds	r7, #184	@ 0xb8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	@ 0x30
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2224      	movs	r2, #36	@ 0x24
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f011 fb1c 	bl	8011eb2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800087a:	4b32      	ldr	r3, [pc, #200]	@ (8000944 <MX_ADC1_Init+0xe8>)
 800087c:	4a32      	ldr	r2, [pc, #200]	@ (8000948 <MX_ADC1_Init+0xec>)
 800087e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000880:	4b30      	ldr	r3, [pc, #192]	@ (8000944 <MX_ADC1_Init+0xe8>)
 8000882:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000886:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000888:	4b2e      	ldr	r3, [pc, #184]	@ (8000944 <MX_ADC1_Init+0xe8>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088e:	4b2d      	ldr	r3, [pc, #180]	@ (8000944 <MX_ADC1_Init+0xe8>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000894:	4b2b      	ldr	r3, [pc, #172]	@ (8000944 <MX_ADC1_Init+0xe8>)
 8000896:	2204      	movs	r2, #4
 8000898:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800089a:	4b2a      	ldr	r3, [pc, #168]	@ (8000944 <MX_ADC1_Init+0xe8>)
 800089c:	2200      	movs	r2, #0
 800089e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008a0:	4b28      	ldr	r3, [pc, #160]	@ (8000944 <MX_ADC1_Init+0xe8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008a6:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <MX_ADC1_Init+0xe8>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ac:	4b25      	ldr	r3, [pc, #148]	@ (8000944 <MX_ADC1_Init+0xe8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b4:	4b23      	ldr	r3, [pc, #140]	@ (8000944 <MX_ADC1_Init+0xe8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ba:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <MX_ADC1_Init+0xe8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008c0:	4b20      	ldr	r3, [pc, #128]	@ (8000944 <MX_ADC1_Init+0xe8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_ADC1_Init+0xe8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_ADC1_Init+0xe8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_ADC1_Init+0xe8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80008da:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <MX_ADC1_Init+0xe8>)
 80008dc:	2201      	movs	r2, #1
 80008de:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e0:	4818      	ldr	r0, [pc, #96]	@ (8000944 <MX_ADC1_Init+0xe8>)
 80008e2:	f002 f865 	bl	80029b0 <HAL_ADC_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008ec:	f000 fda8 	bl	8001440 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	4812      	ldr	r0, [pc, #72]	@ (8000944 <MX_ADC1_Init+0xe8>)
 80008fc:	f003 f8a4 	bl	8003a48 <HAL_ADCEx_MultiModeConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000906:	f000 fd9b 	bl	8001440 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <MX_ADC1_Init+0xf0>)
 800090c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090e:	2306      	movs	r3, #6
 8000910:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_ADC1_Init+0xf4>)
 8000918:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800091a:	2304      	movs	r3, #4
 800091c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_ADC1_Init+0xe8>)
 800092e:	f002 fa47 	bl	8002dc0 <HAL_ADC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000938:	f000 fd82 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3730      	adds	r7, #48	@ 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	240002e8 	.word	0x240002e8
 8000948:	40022000 	.word	0x40022000
 800094c:	10c00010 	.word	0x10c00010
 8000950:	47ff0000 	.word	0x47ff0000

08000954 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	@ 0x28
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2224      	movs	r2, #36	@ 0x24
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f011 faa6 	bl	8011eb2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000966:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 8000968:	4a2c      	ldr	r2, [pc, #176]	@ (8000a1c <MX_ADC2_Init+0xc8>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800096c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 800096e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000972:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000974:	4b28      	ldr	r3, [pc, #160]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097a:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000980:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 8000982:	2204      	movs	r2, #4
 8000984:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000986:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 8000988:	2200      	movs	r2, #0
 800098a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800098c:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 800098e:	2200      	movs	r2, #0
 8000990:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000992:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 8000994:	2201      	movs	r2, #1
 8000996:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000998:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b2:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009b8:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80009be:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009cc:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 80009ce:	f001 ffef 	bl	80029b0 <HAL_ADC_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80009d8:	f000 fd32 	bl	8001440 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009dc:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <MX_ADC2_Init+0xcc>)
 80009de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e0:	2306      	movs	r3, #6
 80009e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_ADC2_Init+0xd0>)
 80009ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ec:	2304      	movs	r3, #4
 80009ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <MX_ADC2_Init+0xc4>)
 8000a00:	f002 f9de 	bl	8002dc0 <HAL_ADC_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000a0a:	f000 fd19 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	@ 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	24000358 	.word	0x24000358
 8000a1c:	40022100 	.word	0x40022100
 8000a20:	0c900008 	.word	0x0c900008
 8000a24:	47ff0000 	.word	0x47ff0000

08000a28 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2224      	movs	r2, #36	@ 0x24
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f011 fa3c 	bl	8011eb2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_DAC1_Init+0x5c>)
 8000a3c:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <MX_DAC1_Init+0x60>)
 8000a3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a40:	4810      	ldr	r0, [pc, #64]	@ (8000a84 <MX_DAC1_Init+0x5c>)
 8000a42:	f003 fa6b 	bl	8003f1c <HAL_DAC_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a4c:	f000 fcf8 	bl	8001440 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000a54:	2306      	movs	r3, #6
 8000a56:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4806      	ldr	r0, [pc, #24]	@ (8000a84 <MX_DAC1_Init+0x5c>)
 8000a6c:	f003 fa78 	bl	8003f60 <HAL_DAC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a76:	f000 fce3 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	@ 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	240003c8 	.word	0x240003c8
 8000a88:	40007400 	.word	0x40007400

08000a8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000a92:	4a1c      	ldr	r2, [pc, #112]	@ (8000b04 <MX_I2C2_Init+0x78>)
 8000a94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000a98:	4a1b      	ldr	r2, [pc, #108]	@ (8000b08 <MX_I2C2_Init+0x7c>)
 8000a9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ac6:	480e      	ldr	r0, [pc, #56]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000ac8:	f005 fa0c 	bl	8005ee4 <HAL_I2C_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ad2:	f000 fcb5 	bl	8001440 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4809      	ldr	r0, [pc, #36]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000ada:	f005 fa9f 	bl	800601c <HAL_I2CEx_ConfigAnalogFilter>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ae4:	f000 fcac 	bl	8001440 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_I2C2_Init+0x74>)
 8000aec:	f005 fae1 	bl	80060b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000af6:	f000 fca3 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	24000454 	.word	0x24000454
 8000b04:	40005800 	.word	0x40005800
 8000b08:	307075b1 	.word	0x307075b1

08000b0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b10:	4b27      	ldr	r3, [pc, #156]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b12:	4a28      	ldr	r2, [pc, #160]	@ (8000bb4 <MX_SPI2_Init+0xa8>)
 8000b14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b16:	4b26      	ldr	r3, [pc, #152]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b18:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1e:	4b24      	ldr	r3, [pc, #144]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b24:	4b22      	ldr	r3, [pc, #136]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b26:	2203      	movs	r2, #3
 8000b28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b30:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b36:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b38:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b50:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b56:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b62:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b88:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <MX_SPI2_Init+0xa4>)
 8000b9c:	f00a f90a 	bl	800adb4 <HAL_SPI_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000ba6:	f000 fc4b 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	240004a8 	.word	0x240004a8
 8000bb4:	40003800 	.word	0x40003800

08000bb8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bbc:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000bbe:	4a28      	ldr	r2, [pc, #160]	@ (8000c60 <MX_SPI3_Init+0xa8>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000bc4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bc8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bca:	4b24      	ldr	r3, [pc, #144]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000be4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000be8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000c0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c0e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <MX_SPI3_Init+0xa4>)
 8000c48:	f00a f8b4 	bl	800adb4 <HAL_SPI_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000c52:	f000 fbf5 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000530 	.word	0x24000530
 8000c60:	40003c00 	.word	0x40003c00

08000c64 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c68:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000c6a:	4a28      	ldr	r2, [pc, #160]	@ (8000d0c <MX_SPI4_Init+0xa8>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c6e:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000c70:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c74:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000c76:	4b24      	ldr	r3, [pc, #144]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c7c:	4b22      	ldr	r3, [pc, #136]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000c7e:	2203      	movs	r2, #3
 8000c80:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c82:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000c90:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c94:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000cae:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000cb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cba:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <MX_SPI4_Init+0xa4>)
 8000cf4:	f00a f85e 	bl	800adb4 <HAL_SPI_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000cfe:	f000 fb9f 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	240005b8 	.word	0x240005b8
 8000d0c:	40013400 	.word	0x40013400

08000d10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d2e:	4b20      	ldr	r3, [pc, #128]	@ (8000db0 <MX_TIM1_Init+0xa0>)
 8000d30:	4a20      	ldr	r2, [pc, #128]	@ (8000db4 <MX_TIM1_Init+0xa4>)
 8000d32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <MX_TIM1_Init+0xa0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <MX_TIM1_Init+0xa0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_TIM1_Init+0xa0>)
 8000d42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <MX_TIM1_Init+0xa0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <MX_TIM1_Init+0xa0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <MX_TIM1_Init+0xa0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d5a:	4815      	ldr	r0, [pc, #84]	@ (8000db0 <MX_TIM1_Init+0xa0>)
 8000d5c:	f00a f969 	bl	800b032 <HAL_TIM_Base_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d66:	f000 fb6b 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4619      	mov	r1, r3
 8000d76:	480e      	ldr	r0, [pc, #56]	@ (8000db0 <MX_TIM1_Init+0xa0>)
 8000d78:	f00a fb28 	bl	800b3cc <HAL_TIM_ConfigClockSource>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d82:	f000 fb5d 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d86:	2320      	movs	r3, #32
 8000d88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	@ (8000db0 <MX_TIM1_Init+0xa0>)
 8000d98:	f00b f836 	bl	800be08 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000da2:	f000 fb4d 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	24000640 	.word	0x24000640
 8000db4:	40010000 	.word	0x40010000

08000db8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e50 <MX_TIM2_Init+0x98>)
 8000dd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ddc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dde:	4b1c      	ldr	r3, [pc, #112]	@ (8000e50 <MX_TIM2_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <MX_TIM2_Init+0x98>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000dea:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <MX_TIM2_Init+0x98>)
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <MX_TIM2_Init+0x98>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df8:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <MX_TIM2_Init+0x98>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dfe:	4814      	ldr	r0, [pc, #80]	@ (8000e50 <MX_TIM2_Init+0x98>)
 8000e00:	f00a f917 	bl	800b032 <HAL_TIM_Base_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e0a:	f000 fb19 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <MX_TIM2_Init+0x98>)
 8000e1c:	f00a fad6 	bl	800b3cc <HAL_TIM_ConfigClockSource>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e26:	f000 fb0b 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <MX_TIM2_Init+0x98>)
 8000e38:	f00a ffe6 	bl	800be08 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e42:	f000 fafd 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2400068c 	.word	0x2400068c

08000e54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	@ 0x38
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e86:	4b38      	ldr	r3, [pc, #224]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000e88:	4a38      	ldr	r2, [pc, #224]	@ (8000f6c <MX_TIM3_Init+0x118>)
 8000e8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e8c:	4b36      	ldr	r3, [pc, #216]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b35      	ldr	r3, [pc, #212]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e98:	4b33      	ldr	r3, [pc, #204]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b31      	ldr	r3, [pc, #196]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eac:	482e      	ldr	r0, [pc, #184]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000eae:	f00a f8c0 	bl	800b032 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000eb8:	f000 fac2 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ec2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4827      	ldr	r0, [pc, #156]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000eca:	f00a fa7f 	bl	800b3cc <HAL_TIM_ConfigClockSource>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ed4:	f000 fab4 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ed8:	4823      	ldr	r0, [pc, #140]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000eda:	f00a f901 	bl	800b0e0 <HAL_TIM_PWM_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ee4:	f000 faac 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	481c      	ldr	r0, [pc, #112]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000ef8:	f00a ff86 	bl	800be08 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f02:	f000 fa9d 	bl	8001440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f06:	2360      	movs	r3, #96	@ 0x60
 8000f08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4812      	ldr	r0, [pc, #72]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000f1e:	f00a f941 	bl	800b1a4 <HAL_TIM_PWM_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f28:	f000 fa8a 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000f34:	f00a f936 	bl	800b1a4 <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000f3e:	f000 fa7f 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	2208      	movs	r2, #8
 8000f46:	4619      	mov	r1, r3
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000f4a:	f00a f92b 	bl	800b1a4 <HAL_TIM_PWM_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000f54:	f000 fa74 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <MX_TIM3_Init+0x114>)
 8000f5a:	f000 fd71 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 8000f5e:	bf00      	nop
 8000f60:	3738      	adds	r7, #56	@ 0x38
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	240006d8 	.word	0x240006d8
 8000f6c:	40000400 	.word	0x40000400

08000f70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	@ 0x38
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f90:	463b      	mov	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]
 8000f9e:	615a      	str	r2, [r3, #20]
 8000fa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8001058 <MX_TIM4_Init+0xe8>)
 8000fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800105c <MX_TIM4_Init+0xec>)
 8000fa6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8001058 <MX_TIM4_Init+0xe8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <MX_TIM4_Init+0xe8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fb4:	4b28      	ldr	r3, [pc, #160]	@ (8001058 <MX_TIM4_Init+0xe8>)
 8000fb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbc:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <MX_TIM4_Init+0xe8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc2:	4b25      	ldr	r3, [pc, #148]	@ (8001058 <MX_TIM4_Init+0xe8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fc8:	4823      	ldr	r0, [pc, #140]	@ (8001058 <MX_TIM4_Init+0xe8>)
 8000fca:	f00a f832 	bl	800b032 <HAL_TIM_Base_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000fd4:	f000 fa34 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481c      	ldr	r0, [pc, #112]	@ (8001058 <MX_TIM4_Init+0xe8>)
 8000fe6:	f00a f9f1 	bl	800b3cc <HAL_TIM_ConfigClockSource>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000ff0:	f000 fa26 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ff4:	4818      	ldr	r0, [pc, #96]	@ (8001058 <MX_TIM4_Init+0xe8>)
 8000ff6:	f00a f873 	bl	800b0e0 <HAL_TIM_PWM_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001000:	f000 fa1e 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4811      	ldr	r0, [pc, #68]	@ (8001058 <MX_TIM4_Init+0xe8>)
 8001014:	f00a fef8 	bl	800be08 <HAL_TIMEx_MasterConfigSynchronization>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800101e:	f000 fa0f 	bl	8001440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001022:	2360      	movs	r3, #96	@ 0x60
 8001024:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	4619      	mov	r1, r3
 8001038:	4807      	ldr	r0, [pc, #28]	@ (8001058 <MX_TIM4_Init+0xe8>)
 800103a:	f00a f8b3 	bl	800b1a4 <HAL_TIM_PWM_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001044:	f000 f9fc 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <MX_TIM4_Init+0xe8>)
 800104a:	f000 fcf9 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 800104e:	bf00      	nop
 8001050:	3738      	adds	r7, #56	@ 0x38
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	24000724 	.word	0x24000724
 800105c:	40000800 	.word	0x40000800

08001060 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001064:	4b23      	ldr	r3, [pc, #140]	@ (80010f4 <MX_UART7_Init+0x94>)
 8001066:	4a24      	ldr	r2, [pc, #144]	@ (80010f8 <MX_UART7_Init+0x98>)
 8001068:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800106a:	4b22      	ldr	r3, [pc, #136]	@ (80010f4 <MX_UART7_Init+0x94>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <MX_UART7_Init+0x94>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <MX_UART7_Init+0x94>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800107e:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <MX_UART7_Init+0x94>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_UART7_Init+0x94>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_UART7_Init+0x94>)
 800108c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001090:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_UART7_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_UART7_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_UART7_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <MX_UART7_Init+0x94>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80010aa:	4812      	ldr	r0, [pc, #72]	@ (80010f4 <MX_UART7_Init+0x94>)
 80010ac:	f00a ff48 	bl	800bf40 <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 80010b6:	f000 f9c3 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ba:	2100      	movs	r1, #0
 80010bc:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <MX_UART7_Init+0x94>)
 80010be:	f00c f854 	bl	800d16a <HAL_UARTEx_SetTxFifoThreshold>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80010c8:	f000 f9ba 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010cc:	2100      	movs	r1, #0
 80010ce:	4809      	ldr	r0, [pc, #36]	@ (80010f4 <MX_UART7_Init+0x94>)
 80010d0:	f00c f889 	bl	800d1e6 <HAL_UARTEx_SetRxFifoThreshold>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 80010da:	f000 f9b1 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_UART7_Init+0x94>)
 80010e0:	f00c f80a 	bl	800d0f8 <HAL_UARTEx_DisableFifoMode>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 80010ea:	f000 f9a9 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	24000770 	.word	0x24000770
 80010f8:	40007800 	.word	0x40007800

080010fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <MX_USART1_UART_Init+0x90>)
 8001102:	4a23      	ldr	r2, [pc, #140]	@ (8001190 <MX_USART1_UART_Init+0x94>)
 8001104:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <MX_USART1_UART_Init+0x90>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <MX_USART1_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <MX_USART1_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800111a:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <MX_USART1_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_USART1_UART_Init+0x90>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <MX_USART1_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_USART1_UART_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <MX_USART1_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_USART1_UART_Init+0x90>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_USART1_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001144:	4811      	ldr	r0, [pc, #68]	@ (800118c <MX_USART1_UART_Init+0x90>)
 8001146:	f00a fefb 	bl	800bf40 <HAL_UART_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001150:	f000 f976 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001154:	2100      	movs	r1, #0
 8001156:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_USART1_UART_Init+0x90>)
 8001158:	f00c f807 	bl	800d16a <HAL_UARTEx_SetTxFifoThreshold>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001162:	f000 f96d 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001166:	2100      	movs	r1, #0
 8001168:	4808      	ldr	r0, [pc, #32]	@ (800118c <MX_USART1_UART_Init+0x90>)
 800116a:	f00c f83c 	bl	800d1e6 <HAL_UARTEx_SetRxFifoThreshold>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001174:	f000 f964 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	@ (800118c <MX_USART1_UART_Init+0x90>)
 800117a:	f00b ffbd 	bl	800d0f8 <HAL_UARTEx_DisableFifoMode>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 f95c 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	24000804 	.word	0x24000804
 8001190:	40011000 	.word	0x40011000

08001194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119a:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <MX_DMA_Init+0x3c>)
 800119c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011a0:	4a0b      	ldr	r2, [pc, #44]	@ (80011d0 <MX_DMA_Init+0x3c>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_DMA_Init+0x3c>)
 80011ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	200b      	movs	r0, #11
 80011be:	f002 fe00 	bl	8003dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011c2:	200b      	movs	r0, #11
 80011c4:	f002 fe17 	bl	8003df6 <HAL_NVIC_EnableIRQ>

}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	58024400 	.word	0x58024400

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	@ 0x30
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ea:	4b79      	ldr	r3, [pc, #484]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f0:	4a77      	ldr	r2, [pc, #476]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011fa:	4b75      	ldr	r3, [pc, #468]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001208:	4b71      	ldr	r3, [pc, #452]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120e:	4a70      	ldr	r2, [pc, #448]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001218:	4b6d      	ldr	r3, [pc, #436]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	4b6a      	ldr	r3, [pc, #424]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122c:	4a68      	ldr	r2, [pc, #416]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 800122e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001236:	4b66      	ldr	r3, [pc, #408]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b62      	ldr	r3, [pc, #392]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124a:	4a61      	ldr	r2, [pc, #388]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001254:	4b5e      	ldr	r3, [pc, #376]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b5b      	ldr	r3, [pc, #364]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	4a59      	ldr	r2, [pc, #356]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001272:	4b57      	ldr	r3, [pc, #348]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001280:	4b53      	ldr	r3, [pc, #332]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001286:	4a52      	ldr	r2, [pc, #328]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001290:	4b4f      	ldr	r3, [pc, #316]	@ (80013d0 <MX_GPIO_Init+0x1fc>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2110      	movs	r1, #16
 80012a2:	484c      	ldr	r0, [pc, #304]	@ (80013d4 <MX_GPIO_Init+0x200>)
 80012a4:	f004 fe04 	bl	8005eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2104      	movs	r1, #4
 80012ac:	484a      	ldr	r0, [pc, #296]	@ (80013d8 <MX_GPIO_Init+0x204>)
 80012ae:	f004 fdff 	bl	8005eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	210b      	movs	r1, #11
 80012b6:	4849      	ldr	r0, [pc, #292]	@ (80013dc <MX_GPIO_Init+0x208>)
 80012b8:	f004 fdfa 	bl	8005eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 80012c2:	4847      	ldr	r0, [pc, #284]	@ (80013e0 <MX_GPIO_Init+0x20c>)
 80012c4:	f004 fdf4 	bl	8005eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2101      	movs	r1, #1
 80012cc:	4845      	ldr	r0, [pc, #276]	@ (80013e4 <MX_GPIO_Init+0x210>)
 80012ce:	f004 fdef 	bl	8005eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_INT1_Pin */
  GPIO_InitStruct.Pin = SPI4_INT1_Pin;
 80012d2:	2308      	movs	r3, #8
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI4_INT1_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	483b      	ldr	r0, [pc, #236]	@ (80013d4 <MX_GPIO_Init+0x200>)
 80012e6:	f004 fc3b 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80012ea:	2310      	movs	r3, #16
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4619      	mov	r1, r3
 8001300:	4834      	ldr	r0, [pc, #208]	@ (80013d4 <MX_GPIO_Init+0x200>)
 8001302:	f004 fc2d 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 DAC_EXT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DAC_EXT_Pin;
 8001306:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	482f      	ldr	r0, [pc, #188]	@ (80013d8 <MX_GPIO_Init+0x204>)
 800131c:	f004 fc20 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 8001320:	2304      	movs	r3, #4
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4828      	ldr	r0, [pc, #160]	@ (80013d8 <MX_GPIO_Init+0x204>)
 8001338:	f004 fc12 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 800133c:	230b      	movs	r3, #11
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4822      	ldr	r0, [pc, #136]	@ (80013dc <MX_GPIO_Init+0x208>)
 8001354:	f004 fc04 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 8001358:	f248 0304 	movw	r3, #32772	@ 0x8004
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	481b      	ldr	r0, [pc, #108]	@ (80013dc <MX_GPIO_Init+0x208>)
 800136e:	f004 fbf7 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_NCS1_Pin RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin;
 8001372:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4815      	ldr	r0, [pc, #84]	@ (80013e0 <MX_GPIO_Init+0x20c>)
 800138c:	f004 fbe8 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin SPI3_INT1_Pin SPI3_INT2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|SPI3_INT1_Pin|SPI3_INT2_Pin;
 8001390:	f240 3306 	movw	r3, #774	@ 0x306
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	480f      	ldr	r0, [pc, #60]	@ (80013e4 <MX_GPIO_Init+0x210>)
 80013a6:	f004 fbdb 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	4808      	ldr	r0, [pc, #32]	@ (80013e4 <MX_GPIO_Init+0x210>)
 80013c2:	f004 fbcd 	bl	8005b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c6:	bf00      	nop
 80013c8:	3730      	adds	r7, #48	@ 0x30
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58021000 	.word	0x58021000
 80013d8:	58020800 	.word	0x58020800
 80013dc:	58020000 	.word	0x58020000
 80013e0:	58020400 	.word	0x58020400
 80013e4:	58020c00 	.word	0x58020c00

080013e8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80013fa:	f002 fd17 	bl	8003e2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013fe:	2301      	movs	r3, #1
 8001400:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001402:	2300      	movs	r3, #0
 8001404:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800140a:	231f      	movs	r3, #31
 800140c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800140e:	2387      	movs	r3, #135	@ 0x87
 8001410:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001412:	2300      	movs	r3, #0
 8001414:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001416:	2300      	movs	r3, #0
 8001418:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800141a:	2301      	movs	r3, #1
 800141c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800141e:	2301      	movs	r3, #1
 8001420:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800142a:	463b      	mov	r3, r7
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fd35 	bl	8003e9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001432:	2004      	movs	r0, #4
 8001434:	f002 fd12 	bl	8003e5c <HAL_MPU_Enable>

}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <Error_Handler+0x8>

0800144c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_MspInit+0x30>)
 8001454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001458:	4a08      	ldr	r2, [pc, #32]	@ (800147c <HAL_MspInit+0x30>)
 800145a:	f043 0302 	orr.w	r3, r3, #2
 800145e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_MspInit+0x30>)
 8001464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	58024400 	.word	0x58024400

08001480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	@ 0x30
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a39      	ldr	r2, [pc, #228]	@ (8001584 <HAL_ADC_MspInit+0x104>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d133      	bne.n	800150a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014a2:	4b39      	ldr	r3, [pc, #228]	@ (8001588 <HAL_ADC_MspInit+0x108>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	4a37      	ldr	r2, [pc, #220]	@ (8001588 <HAL_ADC_MspInit+0x108>)
 80014aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014ac:	4b36      	ldr	r3, [pc, #216]	@ (8001588 <HAL_ADC_MspInit+0x108>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d10e      	bne.n	80014d2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014b4:	4b35      	ldr	r3, [pc, #212]	@ (800158c <HAL_ADC_MspInit+0x10c>)
 80014b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014ba:	4a34      	ldr	r2, [pc, #208]	@ (800158c <HAL_ADC_MspInit+0x10c>)
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014c4:	4b31      	ldr	r3, [pc, #196]	@ (800158c <HAL_ADC_MspInit+0x10c>)
 80014c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014ca:	f003 0320 	and.w	r3, r3, #32
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <HAL_ADC_MspInit+0x10c>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d8:	4a2c      	ldr	r2, [pc, #176]	@ (800158c <HAL_ADC_MspInit+0x10c>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e2:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <HAL_ADC_MspInit+0x10c>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014f0:	2330      	movs	r3, #48	@ 0x30
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f4:	2303      	movs	r3, #3
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	4823      	ldr	r0, [pc, #140]	@ (8001590 <HAL_ADC_MspInit+0x110>)
 8001504:	f004 fb2c 	bl	8005b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001508:	e037      	b.n	800157a <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a21      	ldr	r2, [pc, #132]	@ (8001594 <HAL_ADC_MspInit+0x114>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d132      	bne.n	800157a <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001514:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <HAL_ADC_MspInit+0x108>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	4a1b      	ldr	r2, [pc, #108]	@ (8001588 <HAL_ADC_MspInit+0x108>)
 800151c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <HAL_ADC_MspInit+0x108>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d10e      	bne.n	8001544 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001526:	4b19      	ldr	r3, [pc, #100]	@ (800158c <HAL_ADC_MspInit+0x10c>)
 8001528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800152c:	4a17      	ldr	r2, [pc, #92]	@ (800158c <HAL_ADC_MspInit+0x10c>)
 800152e:	f043 0320 	orr.w	r3, r3, #32
 8001532:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_ADC_MspInit+0x10c>)
 8001538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <HAL_ADC_MspInit+0x10c>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154a:	4a10      	ldr	r2, [pc, #64]	@ (800158c <HAL_ADC_MspInit+0x10c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001554:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <HAL_ADC_MspInit+0x10c>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001562:	23c0      	movs	r3, #192	@ 0xc0
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4808      	ldr	r0, [pc, #32]	@ (8001598 <HAL_ADC_MspInit+0x118>)
 8001576:	f004 faf3 	bl	8005b60 <HAL_GPIO_Init>
}
 800157a:	bf00      	nop
 800157c:	3730      	adds	r7, #48	@ 0x30
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40022000 	.word	0x40022000
 8001588:	240018a0 	.word	0x240018a0
 800158c:	58024400 	.word	0x58024400
 8001590:	58020800 	.word	0x58020800
 8001594:	40022100 	.word	0x40022100
 8001598:	58020000 	.word	0x58020000

0800159c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	@ 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a30      	ldr	r2, [pc, #192]	@ (800167c <HAL_DAC_MspInit+0xe0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d159      	bne.n	8001672 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80015be:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <HAL_DAC_MspInit+0xe4>)
 80015c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001680 <HAL_DAC_MspInit+0xe4>)
 80015c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001680 <HAL_DAC_MspInit+0xe4>)
 80015d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <HAL_DAC_MspInit+0xe4>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e2:	4a27      	ldr	r2, [pc, #156]	@ (8001680 <HAL_DAC_MspInit+0xe4>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ec:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <HAL_DAC_MspInit+0xe4>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015fa:	2310      	movs	r3, #16
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fe:	2303      	movs	r3, #3
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	481d      	ldr	r0, [pc, #116]	@ (8001684 <HAL_DAC_MspInit+0xe8>)
 800160e:	f004 faa7 	bl	8005b60 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001612:	4b1d      	ldr	r3, [pc, #116]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 8001614:	4a1d      	ldr	r2, [pc, #116]	@ (800168c <HAL_DAC_MspInit+0xf0>)
 8001616:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001618:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 800161a:	2243      	movs	r2, #67	@ 0x43
 800161c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800161e:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 8001620:	2240      	movs	r2, #64	@ 0x40
 8001622:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001624:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800162a:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 800162c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001630:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 8001634:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001638:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 800163c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001640:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 8001644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001648:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800164a:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001650:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001656:	480c      	ldr	r0, [pc, #48]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 8001658:	f002 fdc4 	bl	80041e4 <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001662:	f7ff feed 	bl	8001440 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a07      	ldr	r2, [pc, #28]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	4a06      	ldr	r2, [pc, #24]	@ (8001688 <HAL_DAC_MspInit+0xec>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	@ 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40007400 	.word	0x40007400
 8001680:	58024400 	.word	0x58024400
 8001684:	58020000 	.word	0x58020000
 8001688:	240003dc 	.word	0x240003dc
 800168c:	40020010 	.word	0x40020010

08001690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0b8      	sub	sp, #224	@ 0xe0
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	22b8      	movs	r2, #184	@ 0xb8
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f010 fbfe 	bl	8011eb2 <memset>
  if(hi2c->Instance==I2C2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a27      	ldr	r2, [pc, #156]	@ (8001758 <HAL_I2C_MspInit+0xc8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d146      	bne.n	800174e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016c0:	f04f 0208 	mov.w	r2, #8
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4618      	mov	r0, r3
 80016d8:	f006 ff86 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80016e2:	f7ff fead 	bl	8001440 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <HAL_I2C_MspInit+0xcc>)
 80016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ec:	4a1b      	ldr	r2, [pc, #108]	@ (800175c <HAL_I2C_MspInit+0xcc>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_I2C_MspInit+0xcc>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001704:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001708:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170c:	2312      	movs	r3, #18
 800170e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800171e:	2304      	movs	r3, #4
 8001720:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001728:	4619      	mov	r1, r3
 800172a:	480d      	ldr	r0, [pc, #52]	@ (8001760 <HAL_I2C_MspInit+0xd0>)
 800172c:	f004 fa18 	bl	8005b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001730:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_I2C_MspInit+0xcc>)
 8001732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001736:	4a09      	ldr	r2, [pc, #36]	@ (800175c <HAL_I2C_MspInit+0xcc>)
 8001738:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800173c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_I2C_MspInit+0xcc>)
 8001742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800174e:	bf00      	nop
 8001750:	37e0      	adds	r7, #224	@ 0xe0
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40005800 	.word	0x40005800
 800175c:	58024400 	.word	0x58024400
 8001760:	58020400 	.word	0x58020400

08001764 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0bc      	sub	sp, #240	@ 0xf0
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	22b8      	movs	r2, #184	@ 0xb8
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f010 fb94 	bl	8011eb2 <memset>
  if(hspi->Instance==SPI2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a72      	ldr	r2, [pc, #456]	@ (8001958 <HAL_SPI_MspInit+0x1f4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d146      	bne.n	8001822 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001794:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a4:	f107 0320 	add.w	r3, r7, #32
 80017a8:	4618      	mov	r0, r3
 80017aa:	f006 ff1d 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80017b4:	f7ff fe44 	bl	8001440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017b8:	4b68      	ldr	r3, [pc, #416]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 80017ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017be:	4a67      	ldr	r2, [pc, #412]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017c8:	4b64      	ldr	r3, [pc, #400]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 80017ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	4b61      	ldr	r3, [pc, #388]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017dc:	4a5f      	ldr	r2, [pc, #380]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e6:	4b5d      	ldr	r3, [pc, #372]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 80017f4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80017f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800180e:	2305      	movs	r3, #5
 8001810:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001818:	4619      	mov	r1, r3
 800181a:	4851      	ldr	r0, [pc, #324]	@ (8001960 <HAL_SPI_MspInit+0x1fc>)
 800181c:	f004 f9a0 	bl	8005b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001820:	e096      	b.n	8001950 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a4f      	ldr	r2, [pc, #316]	@ (8001964 <HAL_SPI_MspInit+0x200>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d146      	bne.n	80018ba <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800182c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001838:	2300      	movs	r3, #0
 800183a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800183c:	f107 0320 	add.w	r3, r7, #32
 8001840:	4618      	mov	r0, r3
 8001842:	f006 fed1 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 800184c:	f7ff fdf8 	bl	8001440 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001850:	4b42      	ldr	r3, [pc, #264]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 8001852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001856:	4a41      	ldr	r2, [pc, #260]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 8001858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800185c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001860:	4b3e      	ldr	r3, [pc, #248]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 8001862:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001866:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	4b3b      	ldr	r3, [pc, #236]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001874:	4a39      	ldr	r2, [pc, #228]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800187e:	4b37      	ldr	r3, [pc, #220]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800188c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001890:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018a6:	2306      	movs	r3, #6
 80018a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018b0:	4619      	mov	r1, r3
 80018b2:	482d      	ldr	r0, [pc, #180]	@ (8001968 <HAL_SPI_MspInit+0x204>)
 80018b4:	f004 f954 	bl	8005b60 <HAL_GPIO_Init>
}
 80018b8:	e04a      	b.n	8001950 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a2b      	ldr	r2, [pc, #172]	@ (800196c <HAL_SPI_MspInit+0x208>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d145      	bne.n	8001950 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80018c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018d6:	f107 0320 	add.w	r3, r7, #32
 80018da:	4618      	mov	r0, r3
 80018dc:	f006 fe84 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_SPI_MspInit+0x186>
      Error_Handler();
 80018e6:	f7ff fdab 	bl	8001440 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018ea:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 80018ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018f0:	4a1a      	ldr	r2, [pc, #104]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 80018f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 80018fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 800190a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190e:	4a13      	ldr	r2, [pc, #76]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 8001910:	f043 0310 	orr.w	r3, r3, #16
 8001914:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001918:	4b10      	ldr	r3, [pc, #64]	@ (800195c <HAL_SPI_MspInit+0x1f8>)
 800191a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001926:	2364      	movs	r3, #100	@ 0x64
 8001928:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800193e:	2305      	movs	r3, #5
 8001940:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001944:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001948:	4619      	mov	r1, r3
 800194a:	4809      	ldr	r0, [pc, #36]	@ (8001970 <HAL_SPI_MspInit+0x20c>)
 800194c:	f004 f908 	bl	8005b60 <HAL_GPIO_Init>
}
 8001950:	bf00      	nop
 8001952:	37f0      	adds	r7, #240	@ 0xf0
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40003800 	.word	0x40003800
 800195c:	58024400 	.word	0x58024400
 8001960:	58020400 	.word	0x58020400
 8001964:	40003c00 	.word	0x40003c00
 8001968:	58020800 	.word	0x58020800
 800196c:	40013400 	.word	0x40013400
 8001970:	58021000 	.word	0x58021000

08001974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2b      	ldr	r2, [pc, #172]	@ (8001a30 <HAL_TIM_Base_MspInit+0xbc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10f      	bne.n	80019a6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001986:	4b2b      	ldr	r3, [pc, #172]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 8001988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800198c:	4a29      	ldr	r2, [pc, #164]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001996:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 8001998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019a4:	e03d      	b.n	8001a22 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ae:	d10f      	bne.n	80019d0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b0:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 80019b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 80019c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
}
 80019ce:	e028      	b.n	8001a22 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a18      	ldr	r2, [pc, #96]	@ (8001a38 <HAL_TIM_Base_MspInit+0xc4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d10f      	bne.n	80019fa <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 80019dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019e0:	4a14      	ldr	r2, [pc, #80]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 80019e2:	f043 0302 	orr.w	r3, r3, #2
 80019e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 80019ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	e013      	b.n	8001a22 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0f      	ldr	r2, [pc, #60]	@ (8001a3c <HAL_TIM_Base_MspInit+0xc8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d10e      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a04:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 8001a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc0>)
 8001a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
}
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40010000 	.word	0x40010000
 8001a34:	58024400 	.word	0x58024400
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40000800 	.word	0x40000800

08001a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	@ 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a26      	ldr	r2, [pc, #152]	@ (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d120      	bne.n	8001aa4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	4b26      	ldr	r3, [pc, #152]	@ (8001afc <HAL_TIM_MspPostInit+0xbc>)
 8001a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a68:	4a24      	ldr	r2, [pc, #144]	@ (8001afc <HAL_TIM_MspPostInit+0xbc>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a72:	4b22      	ldr	r3, [pc, #136]	@ (8001afc <HAL_TIM_MspPostInit+0xbc>)
 8001a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8001a80:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a92:	2302      	movs	r3, #2
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4818      	ldr	r0, [pc, #96]	@ (8001b00 <HAL_TIM_MspPostInit+0xc0>)
 8001a9e:	f004 f85f 	bl	8005b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001aa2:	e024      	b.n	8001aee <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a16      	ldr	r2, [pc, #88]	@ (8001b04 <HAL_TIM_MspPostInit+0xc4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d11f      	bne.n	8001aee <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <HAL_TIM_MspPostInit+0xbc>)
 8001ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab4:	4a11      	ldr	r2, [pc, #68]	@ (8001afc <HAL_TIM_MspPostInit+0xbc>)
 8001ab6:	f043 0308 	orr.w	r3, r3, #8
 8001aba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001abe:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <HAL_TIM_MspPostInit+0xbc>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8001acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4807      	ldr	r0, [pc, #28]	@ (8001b08 <HAL_TIM_MspPostInit+0xc8>)
 8001aea:	f004 f839 	bl	8005b60 <HAL_GPIO_Init>
}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	@ 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40000400 	.word	0x40000400
 8001afc:	58024400 	.word	0x58024400
 8001b00:	58020800 	.word	0x58020800
 8001b04:	40000800 	.word	0x40000800
 8001b08:	58020c00 	.word	0x58020c00

08001b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0ba      	sub	sp, #232	@ 0xe8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b24:	f107 0318 	add.w	r3, r7, #24
 8001b28:	22b8      	movs	r2, #184	@ 0xb8
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f010 f9c0 	bl	8011eb2 <memset>
  if(huart->Instance==UART7)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a4d      	ldr	r2, [pc, #308]	@ (8001c6c <HAL_UART_MspInit+0x160>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d147      	bne.n	8001bcc <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001b3c:	f04f 0202 	mov.w	r2, #2
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4e:	f107 0318 	add.w	r3, r7, #24
 8001b52:	4618      	mov	r0, r3
 8001b54:	f006 fd48 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001b5e:	f7ff fc6f 	bl	8001440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001b62:	4b43      	ldr	r3, [pc, #268]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b68:	4a41      	ldr	r2, [pc, #260]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001b6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b72:	4b3f      	ldr	r3, [pc, #252]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b80:	4b3b      	ldr	r3, [pc, #236]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b86:	4a3a      	ldr	r2, [pc, #232]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001b88:	f043 0310 	orr.w	r3, r3, #16
 8001b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b90:	4b37      	ldr	r3, [pc, #220]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b9e:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001bb8:	2307      	movs	r3, #7
 8001bba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bbe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	482b      	ldr	r0, [pc, #172]	@ (8001c74 <HAL_UART_MspInit+0x168>)
 8001bc6:	f003 ffcb 	bl	8005b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bca:	e04a      	b.n	8001c62 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a29      	ldr	r2, [pc, #164]	@ (8001c78 <HAL_UART_MspInit+0x16c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d145      	bne.n	8001c62 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bd6:	f04f 0201 	mov.w	r2, #1
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be8:	f107 0318 	add.w	r3, r7, #24
 8001bec:	4618      	mov	r0, r3
 8001bee:	f006 fcfb 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001bf8:	f7ff fc22 	bl	8001440 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c02:	4a1b      	ldr	r2, [pc, #108]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c04:	f043 0310 	orr.w	r3, r3, #16
 8001c08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c20:	4a13      	ldr	r2, [pc, #76]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c2a:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001c38:	23c0      	movs	r3, #192	@ 0xc0
 8001c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c50:	2307      	movs	r3, #7
 8001c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c56:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4807      	ldr	r0, [pc, #28]	@ (8001c7c <HAL_UART_MspInit+0x170>)
 8001c5e:	f003 ff7f 	bl	8005b60 <HAL_GPIO_Init>
}
 8001c62:	bf00      	nop
 8001c64:	37e8      	adds	r7, #232	@ 0xe8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40007800 	.word	0x40007800
 8001c70:	58024400 	.word	0x58024400
 8001c74:	58021000 	.word	0x58021000
 8001c78:	40011000 	.word	0x40011000
 8001c7c:	58020400 	.word	0x58020400

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <NMI_Handler+0x4>

08001c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <MemManage_Handler+0x4>

08001c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd6:	f000 fbe1 	bl	800249c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <DMA1_Stream0_IRQHandler+0x10>)
 8001ce6:	f002 fdd5 	bl	8004894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	240003dc 	.word	0x240003dc

08001cf4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <OTG_HS_IRQHandler+0x10>)
 8001cfa:	f004 fb67 	bl	80063cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	24002dd0 	.word	0x24002dd0

08001d08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return 1;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_kill>:

int _kill(int pid, int sig)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d22:	f010 f919 	bl	8011f58 <__errno>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2216      	movs	r2, #22
 8001d2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_exit>:

void _exit (int status)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ffe7 	bl	8001d18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d4a:	bf00      	nop
 8001d4c:	e7fd      	b.n	8001d4a <_exit+0x12>

08001d4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e00a      	b.n	8001d76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d60:	f3af 8000 	nop.w
 8001d64:	4601      	mov	r1, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	60ba      	str	r2, [r7, #8]
 8001d6c:	b2ca      	uxtb	r2, r1
 8001d6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3301      	adds	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	dbf0      	blt.n	8001d60 <_read+0x12>
  }

  return len;
 8001d7e:	687b      	ldr	r3, [r7, #4]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e009      	b.n	8001dae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	60ba      	str	r2, [r7, #8]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	dbf1      	blt.n	8001d9a <_write+0x12>
  }
  return len;
 8001db6:	687b      	ldr	r3, [r7, #4]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_close>:

int _close(int file)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001de8:	605a      	str	r2, [r3, #4]
  return 0;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_isatty>:

int _isatty(int file)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e00:	2301      	movs	r3, #1
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b085      	sub	sp, #20
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e30:	4a14      	ldr	r2, [pc, #80]	@ (8001e84 <_sbrk+0x5c>)
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <_sbrk+0x60>)
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e3c:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <_sbrk+0x64>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <_sbrk+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d207      	bcs.n	8001e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e58:	f010 f87e 	bl	8011f58 <__errno>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	220c      	movs	r2, #12
 8001e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	e009      	b.n	8001e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6e:	4b07      	ldr	r3, [pc, #28]	@ (8001e8c <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <_sbrk+0x64>)
 8001e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	24050000 	.word	0x24050000
 8001e88:	00000400 	.word	0x00000400
 8001e8c:	240018a4 	.word	0x240018a4
 8001e90:	24003620 	.word	0x24003620

08001e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e98:	4b32      	ldr	r3, [pc, #200]	@ (8001f64 <SystemInit+0xd0>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9e:	4a31      	ldr	r2, [pc, #196]	@ (8001f64 <SystemInit+0xd0>)
 8001ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8001f68 <SystemInit+0xd4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	2b06      	cmp	r3, #6
 8001eb2:	d807      	bhi.n	8001ec4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f68 <SystemInit+0xd4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 030f 	bic.w	r3, r3, #15
 8001ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8001f68 <SystemInit+0xd4>)
 8001ebe:	f043 0307 	orr.w	r3, r3, #7
 8001ec2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ec4:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <SystemInit+0xd8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a28      	ldr	r2, [pc, #160]	@ (8001f6c <SystemInit+0xd8>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ed0:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <SystemInit+0xd8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ed6:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <SystemInit+0xd8>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4924      	ldr	r1, [pc, #144]	@ (8001f6c <SystemInit+0xd8>)
 8001edc:	4b24      	ldr	r3, [pc, #144]	@ (8001f70 <SystemInit+0xdc>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ee2:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <SystemInit+0xd4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001eee:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <SystemInit+0xd4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 030f 	bic.w	r3, r3, #15
 8001ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f68 <SystemInit+0xd4>)
 8001ef8:	f043 0307 	orr.w	r3, r3, #7
 8001efc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001efe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <SystemInit+0xd8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f04:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <SystemInit+0xd8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f0a:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <SystemInit+0xd8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f10:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <SystemInit+0xd8>)
 8001f12:	4a18      	ldr	r2, [pc, #96]	@ (8001f74 <SystemInit+0xe0>)
 8001f14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <SystemInit+0xd8>)
 8001f18:	4a17      	ldr	r2, [pc, #92]	@ (8001f78 <SystemInit+0xe4>)
 8001f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f1c:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <SystemInit+0xd8>)
 8001f1e:	4a17      	ldr	r2, [pc, #92]	@ (8001f7c <SystemInit+0xe8>)
 8001f20:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f22:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <SystemInit+0xd8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f28:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <SystemInit+0xd8>)
 8001f2a:	4a14      	ldr	r2, [pc, #80]	@ (8001f7c <SystemInit+0xe8>)
 8001f2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <SystemInit+0xd8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f34:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <SystemInit+0xd8>)
 8001f36:	4a11      	ldr	r2, [pc, #68]	@ (8001f7c <SystemInit+0xe8>)
 8001f38:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <SystemInit+0xd8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <SystemInit+0xd8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a09      	ldr	r2, [pc, #36]	@ (8001f6c <SystemInit+0xd8>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <SystemInit+0xd8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <SystemInit+0xec>)
 8001f54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001f58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00
 8001f68:	52002000 	.word	0x52002000
 8001f6c:	58024400 	.word	0x58024400
 8001f70:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f74:	02020200 	.word	0x02020200
 8001f78:	01ff0000 	.word	0x01ff0000
 8001f7c:	01010280 	.word	0x01010280
 8001f80:	52004000 	.word	0x52004000

08001f84 <VibeCheck_Init>:


#include "vibecheck.h"

void VibeCheck_Init(VibeCheck* vc, TIM_HandleTypeDef* htim_strobe)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
	VibeCheckUSB_Init(&vc->usb);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f817 	bl	8001fc4 <VibeCheckUSB_Init>
	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f603 73e8 	addw	r3, r3, #4072	@ 0xfe8
 8001f9c:	6839      	ldr	r1, [r7, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f932 	bl	8002208 <VibeCheckStrobe_Init>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	VibeCheckUSB_Update(&vc->usb);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f828 	bl	800200c <VibeCheckUSB_Update>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <VibeCheckUSB_Init>:

uint8_t usb_rx_buf[64];  /* see USB_DEVICE -> App -> usbd_cdc_if.c for implementation */
uint8_t usb_rx_ready = 0;  /* flag when USB data has been received */

void VibeCheckUSB_Init(VibeCheckUSB* usb)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	usb->rx_buf = usb_rx_buf;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <VibeCheckUSB_Init+0x40>)
 8001fd0:	601a      	str	r2, [r3, #0]
	usb->rx_ready = &usb_rx_ready;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <VibeCheckUSB_Init+0x44>)
 8001fd6:	605a      	str	r2, [r3, #4]

	usb->data_buf_head = 0;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f8c3 27d8 	str.w	r2, [r3, #2008]	@ 0x7d8
	usb->data_buf_tail = 0;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc
	usb->data_buf_count = 0;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0

	usb->data_str_ind = 0;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f8c3 2fe4 	str.w	r2, [r3, #4068]	@ 0xfe4
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	240018a8 	.word	0x240018a8
 8002008:	240018e8 	.word	0x240018e8

0800200c <VibeCheckUSB_Update>:

void VibeCheckUSB_Update(VibeCheckUSB* usb)  /* single function to call in main loop to update the USB class */
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

	/* process any commands that we have received from the host */
	VibeCheckUSB_ProcessCommand(usb);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f807 	bl	8002028 <VibeCheckUSB_ProcessCommand>

	/* encode any data in the data buffer, send to the host if the data packet is full */
	VibeCheckUSB_ProcessData(usb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f81e 	bl	800205c <VibeCheckUSB_ProcessData>

}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <VibeCheckUSB_ProcessCommand>:

uint32_t VibeCheckUSB_ProcessCommand(VibeCheckUSB* usb)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	/* return true if we have successfully processed a command */
	if (*usb->rx_ready)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <VibeCheckUSB_ProcessCommand+0x2a>
	{
		/* TODO: process the command */

		/* echo for testing */
		VibeCheckUSB_SendBlocking(usb->rx_buf, 64);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2140      	movs	r1, #64	@ 0x40
 8002040:	4618      	mov	r0, r3
 8002042:	f000 f8cd 	bl	80021e0 <VibeCheckUSB_SendBlocking>

		*usb->rx_ready = 0;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
		return 1;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <VibeCheckUSB_ProcessCommand+0x2c>
	}

	return 0;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <VibeCheckUSB_ProcessData>:
		usb->data_buf_head = 0;

}

void VibeCheckUSB_ProcessData(VibeCheckUSB* usb)
{
 800205c:	b5b0      	push	{r4, r5, r7, lr}
 800205e:	b08e      	sub	sp, #56	@ 0x38
 8002060:	af06      	add	r7, sp, #24
 8002062:	6078      	str	r0, [r7, #4]
	/* encode all of the elements in the data buffer and put them in the data string to send to the host */
	while (usb->data_buf_head != usb->data_buf_tail && usb->data_buf_count < VC_USB_DATA_BUF_LEN)  /* TODO: this breaks if the data buffer is full so don't let that happen */
 8002064:	e04e      	b.n	8002104 <VibeCheckUSB_ProcessData+0xa8>
	{
		VibeCheckUSBData data_to_encode = usb->data_buf[usb->data_buf_tail];
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	@ 0x7dc
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	3308      	adds	r3, #8
 800207a:	f107 040c 	add.w	r4, r7, #12
 800207e:	461d      	mov	r5, r3
 8002080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002084:	682b      	ldr	r3, [r5, #0]
 8002086:	6023      	str	r3, [r4, #0]

		/* encode the data here and add it to the data string */
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f203 72e4 	addw	r2, r3, #2020	@ 0x7e4
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8002094:	18d0      	adds	r0, r2, r3
				data_to_encode.id,
 8002096:	7b3b      	ldrb	r3, [r7, #12]
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 8002098:	461a      	mov	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
				data_to_encode.time,
				data_to_encode.x,
 800209c:	edd7 7a05 	vldr	s15, [r7, #20]
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 80020a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				data_to_encode.y,
 80020a4:	edd7 6a06 	vldr	s13, [r7, #24]
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 80020a8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				data_to_encode.z);
 80020ac:	edd7 5a07 	vldr	s11, [r7, #28]
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 80020b0:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80020b4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80020b8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80020bc:	ed8d 7b00 	vstr	d7, [sp]
 80020c0:	4944      	ldr	r1, [pc, #272]	@ (80021d4 <VibeCheckUSB_ProcessData+0x178>)
 80020c2:	f00f fe93 	bl	8011dec <siprintf>
 80020c6:	4602      	mov	r2, r0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 80020ce:	441a      	add	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8c3 2fe4 	str.w	r2, [r3, #4068]	@ 0xfe4

		usb->data_buf_count++;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0
		if (++usb->data_buf_tail == VC_USB_DATA_BUF_LEN)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	@ 0x7dc
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	@ 0x7dc
 80020f8:	2b64      	cmp	r3, #100	@ 0x64
 80020fa:	d103      	bne.n	8002104 <VibeCheckUSB_ProcessData+0xa8>
			usb->data_buf_tail = 0;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc
	while (usb->data_buf_head != usb->data_buf_tail && usb->data_buf_count < VC_USB_DATA_BUF_LEN)  /* TODO: this breaks if the data buffer is full so don't let that happen */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	@ 0x7d8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	@ 0x7dc
 8002110:	429a      	cmp	r2, r3
 8002112:	d004      	beq.n	800211e <VibeCheckUSB_ProcessData+0xc2>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 800211a:	2b63      	cmp	r3, #99	@ 0x63
 800211c:	d9a3      	bls.n	8002066 <VibeCheckUSB_ProcessData+0xa>
	}

	if (usb->data_buf_count == VC_USB_DATA_PER_PACKET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 8002124:	2b02      	cmp	r3, #2
 8002126:	d150      	bne.n	80021ca <VibeCheckUSB_ProcessData+0x16e>
	{
		/* we have a full data packet so send it */

		/* add a newline */
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind - 1, "\r\n");
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f203 72e4 	addw	r2, r3, #2020	@ 0x7e4
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8002134:	3b01      	subs	r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	4927      	ldr	r1, [pc, #156]	@ (80021d8 <VibeCheckUSB_ProcessData+0x17c>)
 800213a:	4618      	mov	r0, r3
 800213c:	f00f fe56 	bl	8011dec <siprintf>
 8002140:	4602      	mov	r2, r0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8002148:	441a      	add	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f8c3 2fe4 	str.w	r2, [r3, #4068]	@ 0xfe4

		if (usb->data_str_ind < VC_USB_DATA_STR_LEN / 2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215a:	d20f      	bcs.n	800217c <VibeCheckUSB_ProcessData+0x120>
		{
			/* send the first half buffer and prepare to fill the second half */
			VibeCheckUSB_SendBlocking((uint8_t*)&usb->data_str[0], usb->data_str_ind);  /* !!! blocking until the transmission starts successfully !!! */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f203 72e4 	addw	r2, r3, #2020	@ 0x7e4
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f000 f838 	bl	80021e0 <VibeCheckUSB_SendBlocking>
			usb->data_str_ind = VC_USB_DATA_STR_LEN / 2;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002176:	f8c3 2fe4 	str.w	r2, [r3, #4068]	@ 0xfe4
 800217a:	e00f      	b.n	800219c <VibeCheckUSB_ProcessData+0x140>
		}
		else
		{
			/* send the second half buffer and prepare to fill the first half */
			VibeCheckUSB_SendBlocking((uint8_t*)&usb->data_str[VC_USB_DATA_STR_LEN / 2], usb->data_str_ind - VC_USB_DATA_STR_LEN / 2);  /* !!! blocking until the transmission starts successfully !!! */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f603 32e4 	addw	r2, r3, #3044	@ 0xbe4
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8002188:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f000 f826 	bl	80021e0 <VibeCheckUSB_SendBlocking>
			usb->data_str_ind = 0;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f8c3 2fe4 	str.w	r2, [r3, #4068]	@ 0xfe4
		}

		/* prepare the next data packet */
		usb->data_buf_count = 0;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0

		/* write the header */
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, VC_USB_DATA_HEADER);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f203 72e4 	addw	r2, r3, #2020	@ 0x7e4
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 80021b0:	4413      	add	r3, r2
 80021b2:	490a      	ldr	r1, [pc, #40]	@ (80021dc <VibeCheckUSB_ProcessData+0x180>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	f00f fe19 	bl	8011dec <siprintf>
 80021ba:	4602      	mov	r2, r0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 80021c2:	441a      	add	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8c3 2fe4 	str.w	r2, [r3, #4068]	@ 0xfe4
	}
}
 80021ca:	bf00      	nop
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bdb0      	pop	{r4, r5, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	08013f80 	.word	0x08013f80
 80021d8:	08013f9c 	.word	0x08013f9c
 80021dc:	08013fa0 	.word	0x08013fa0

080021e0 <VibeCheckUSB_SendBlocking>:
	return CDC_Transmit_HS(data, len) == USBD_OK;
}

/* TODO: lifetime issue with the data pointer */
void VibeCheckUSB_SendBlocking(uint8_t* data, uint32_t len)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
	/* returns true if transmission started successfully */
	while(CDC_Transmit_HS(data, len) != USBD_OK);
 80021ea:	bf00      	nop
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	4619      	mov	r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f00e fcae 	bl	8010b54 <CDC_Transmit_HS>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f6      	bne.n	80021ec <VibeCheckUSB_SendBlocking+0xc>
}
 80021fe:	bf00      	nop
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800221e:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002226:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f640 125f 	movw	r2, #2399	@ 0x95f
 800223a:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002242:	eeb0 0a67 	vmov.f32	s0, s15
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f80c 	bl	8002264 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002252:	eeb0 0a67 	vmov.f32	s0, s15
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f83a 	bl	80022d0 <VibeCheckStrobe_SetExposure>

}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <VibeCheckStrobe_SetFrequency>:
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
}

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	ed87 0a00 	vstr	s0, [r7]
	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 8002270:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80022cc <VibeCheckStrobe_SetFrequency+0x68>
 8002274:	ed97 7a00 	vldr	s14, [r7]
 8002278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800227c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002280:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002288:	ee17 2a90 	vmov	r2, s15
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800229c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80022a4:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80022cc <VibeCheckStrobe_SetFrequency+0x68>
 80022a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6912      	ldr	r2, [r2, #16]
 80022bc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	47c35000 	.word	0x47c35000

080022d0 <VibeCheckStrobe_SetExposure>:
{
	return strobe->phase_deg;
}

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 80022dc:	edd7 7a00 	vldr	s15, [r7]
 80022e0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002354 <VibeCheckStrobe_SetExposure+0x84>
 80022e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002358 <VibeCheckStrobe_SetExposure+0x88>
 80022ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022f0:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 800235c <VibeCheckStrobe_SetExposure+0x8c>
 80022f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022fc:	ee17 3a90 	vmov	r3, s15
 8002300:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002358 <VibeCheckStrobe_SetExposure+0x88>
 8002310:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002314:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800235c <VibeCheckStrobe_SetExposure+0x8c>
 8002318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800231c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002360 <VibeCheckStrobe_SetExposure+0x90>
 8002320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	3a83126f 	.word	0x3a83126f
 8002358:	4d64e1c0 	.word	0x4d64e1c0
 800235c:	45160000 	.word	0x45160000
 8002360:	447a0000 	.word	0x447a0000

08002364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002364:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800239c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002368:	f7ff fd94 	bl	8001e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800236c:	480c      	ldr	r0, [pc, #48]	@ (80023a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800236e:	490d      	ldr	r1, [pc, #52]	@ (80023a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002370:	4a0d      	ldr	r2, [pc, #52]	@ (80023a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002384:	4c0a      	ldr	r4, [pc, #40]	@ (80023b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002392:	f00f fde7 	bl	8011f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002396:	f7fe f98b 	bl	80006b0 <main>
  bx  lr
 800239a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800239c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80023a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023a4:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 80023a8:	080143a0 	.word	0x080143a0
  ldr r2, =_sbss
 80023ac:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 80023b0:	24003620 	.word	0x24003620

080023b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC3_IRQHandler>
	...

080023b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023be:	2003      	movs	r0, #3
 80023c0:	f001 fcf4 	bl	8003dac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023c4:	f005 ff3a 	bl	800823c <HAL_RCC_GetSysClockFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <HAL_Init+0x68>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	4913      	ldr	r1, [pc, #76]	@ (8002424 <HAL_Init+0x6c>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
 80023e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <HAL_Init+0x68>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002424 <HAL_Init+0x6c>)
 80023ec:	5cd3      	ldrb	r3, [r2, r3]
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
 80023f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002428 <HAL_Init+0x70>)
 80023fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023fc:	4a0b      	ldr	r2, [pc, #44]	@ (800242c <HAL_Init+0x74>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002402:	200f      	movs	r0, #15
 8002404:	f000 f814 	bl	8002430 <HAL_InitTick>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e002      	b.n	8002418 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002412:	f7ff f81b 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	58024400 	.word	0x58024400
 8002424:	08013fdc 	.word	0x08013fdc
 8002428:	24000004 	.word	0x24000004
 800242c:	24000000 	.word	0x24000000

08002430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002438:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <HAL_InitTick+0x60>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e021      	b.n	8002488 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002444:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <HAL_InitTick+0x64>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HAL_InitTick+0x60>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4619      	mov	r1, r3
 800244e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002452:	fbb3 f3f1 	udiv	r3, r3, r1
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	4618      	mov	r0, r3
 800245c:	f001 fcd9 	bl	8003e12 <HAL_SYSTICK_Config>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e00e      	b.n	8002488 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b0f      	cmp	r3, #15
 800246e:	d80a      	bhi.n	8002486 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002470:	2200      	movs	r2, #0
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f001 fca3 	bl	8003dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800247c:	4a06      	ldr	r2, [pc, #24]	@ (8002498 <HAL_InitTick+0x68>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e000      	b.n	8002488 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	2400000c 	.word	0x2400000c
 8002494:	24000000 	.word	0x24000000
 8002498:	24000008 	.word	0x24000008

0800249c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024a0:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <HAL_IncTick+0x20>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <HAL_IncTick+0x24>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <HAL_IncTick+0x24>)
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	2400000c 	.word	0x2400000c
 80024c0:	240018ec 	.word	0x240018ec

080024c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return uwTick;
 80024c8:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <HAL_GetTick+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	240018ec 	.word	0x240018ec

080024dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7ff ffee 	bl	80024c4 <HAL_GetTick>
 80024e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d005      	beq.n	8002502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <HAL_Delay+0x44>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002502:	bf00      	nop
 8002504:	f7ff ffde 	bl	80024c4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	429a      	cmp	r2, r3
 8002512:	d8f7      	bhi.n	8002504 <HAL_Delay+0x28>
  {
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2400000c 	.word	0x2400000c

08002524 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	609a      	str	r2, [r3, #8]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3360      	adds	r3, #96	@ 0x60
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4a10      	ldr	r2, [pc, #64]	@ (80025ec <LL_ADC_SetOffset+0x60>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10b      	bne.n	80025c8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80025c6:	e00b      	b.n	80025e0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	430b      	orrs	r3, r1
 80025da:	431a      	orrs	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	601a      	str	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	58026000 	.word	0x58026000

080025f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3360      	adds	r3, #96	@ 0x60
 80025fe:	461a      	mov	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	431a      	orrs	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	611a      	str	r2, [r3, #16]
}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4a0c      	ldr	r2, [pc, #48]	@ (8002690 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00e      	beq.n	8002682 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3360      	adds	r3, #96	@ 0x60
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	431a      	orrs	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	601a      	str	r2, [r3, #0]
  }
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	58026000 	.word	0x58026000

08002694 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a0c      	ldr	r2, [pc, #48]	@ (80026d4 <LL_ADC_SetOffsetSaturation+0x40>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d10e      	bne.n	80026c6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3360      	adds	r3, #96	@ 0x60
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	58026000 	.word	0x58026000

080026d8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002718 <LL_ADC_SetOffsetSign+0x40>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d10e      	bne.n	800270a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3360      	adds	r3, #96	@ 0x60
 80026f0:	461a      	mov	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	431a      	orrs	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	58026000 	.word	0x58026000

0800271c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3360      	adds	r3, #96	@ 0x60
 800272c:	461a      	mov	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4a0c      	ldr	r2, [pc, #48]	@ (800276c <LL_ADC_SetOffsetState+0x50>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d108      	bne.n	8002750 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	431a      	orrs	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800274e:	e007      	b.n	8002760 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	431a      	orrs	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	601a      	str	r2, [r3, #0]
}
 8002760:	bf00      	nop
 8002762:	371c      	adds	r7, #28
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	58026000 	.word	0x58026000

08002770 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3330      	adds	r3, #48	@ 0x30
 8002780:	461a      	mov	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	4413      	add	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	211f      	movs	r1, #31
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	401a      	ands	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	0e9b      	lsrs	r3, r3, #26
 80027a8:	f003 011f 	and.w	r1, r3, #31
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	431a      	orrs	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3314      	adds	r3, #20
 80027d8:	461a      	mov	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	0e5b      	lsrs	r3, r3, #25
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	4413      	add	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	0d1b      	lsrs	r3, r3, #20
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	2107      	movs	r1, #7
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	401a      	ands	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	0d1b      	lsrs	r3, r3, #20
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	431a      	orrs	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a1a      	ldr	r2, [pc, #104]	@ (8002898 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d115      	bne.n	8002860 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002840:	43db      	mvns	r3, r3
 8002842:	401a      	ands	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0318 	and.w	r3, r3, #24
 800284a:	4914      	ldr	r1, [pc, #80]	@ (800289c <LL_ADC_SetChannelSingleDiff+0x7c>)
 800284c:	40d9      	lsrs	r1, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	400b      	ands	r3, r1
 8002852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002856:	431a      	orrs	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800285e:	e014      	b.n	800288a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800286c:	43db      	mvns	r3, r3
 800286e:	401a      	ands	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f003 0318 	and.w	r3, r3, #24
 8002876:	4909      	ldr	r1, [pc, #36]	@ (800289c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002878:	40d9      	lsrs	r1, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	400b      	ands	r3, r1
 800287e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002882:	431a      	orrs	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	58026000 	.word	0x58026000
 800289c:	000fffff 	.word	0x000fffff

080028a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6093      	str	r3, [r2, #8]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	5fffffc0 	.word	0x5fffffc0

080028c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028d8:	d101      	bne.n	80028de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	4b05      	ldr	r3, [pc, #20]	@ (8002910 <LL_ADC_EnableInternalRegulator+0x24>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	6fffffc0 	.word	0x6fffffc0

08002914 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002924:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002928:	d101      	bne.n	800292e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <LL_ADC_IsEnabled+0x18>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <LL_ADC_IsEnabled+0x1a>
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b04      	cmp	r3, #4
 8002974:	d101      	bne.n	800297a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b08      	cmp	r3, #8
 800299a:	d101      	bne.n	80029a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b089      	sub	sp, #36	@ 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e1ee      	b.n	8002da8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fe fd51 	bl	8001480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff67 	bl	80028c4 <LL_ADC_IsDeepPowerDownEnabled>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff4d 	bl	80028a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff82 	bl	8002914 <LL_ADC_IsInternalRegulatorEnabled>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d114      	bne.n	8002a40 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff66 	bl	80028ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a20:	4b8e      	ldr	r3, [pc, #568]	@ (8002c5c <HAL_ADC_Init+0x2ac>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	4a8e      	ldr	r2, [pc, #568]	@ (8002c60 <HAL_ADC_Init+0x2b0>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a32:	e002      	b.n	8002a3a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f9      	bne.n	8002a34 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff65 	bl	8002914 <LL_ADC_IsInternalRegulatorEnabled>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a54:	f043 0210 	orr.w	r2, r3, #16
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff76 	bl	8002962 <LL_ADC_REG_IsConversionOngoing>
 8002a76:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f040 8188 	bne.w	8002d96 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 8184 	bne.w	8002d96 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a92:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a96:	f043 0202 	orr.w	r2, r3, #2
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff4a 	bl	800293c <LL_ADC_IsEnabled>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d136      	bne.n	8002b1c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6c      	ldr	r2, [pc, #432]	@ (8002c64 <HAL_ADC_Init+0x2b4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_ADC_Init+0x112>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a6a      	ldr	r2, [pc, #424]	@ (8002c68 <HAL_ADC_Init+0x2b8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_ADC_Init+0x130>
 8002ac2:	4868      	ldr	r0, [pc, #416]	@ (8002c64 <HAL_ADC_Init+0x2b4>)
 8002ac4:	f7ff ff3a 	bl	800293c <LL_ADC_IsEnabled>
 8002ac8:	4604      	mov	r4, r0
 8002aca:	4867      	ldr	r0, [pc, #412]	@ (8002c68 <HAL_ADC_Init+0x2b8>)
 8002acc:	f7ff ff36 	bl	800293c <LL_ADC_IsEnabled>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4323      	orrs	r3, r4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e008      	b.n	8002af2 <HAL_ADC_Init+0x142>
 8002ae0:	4862      	ldr	r0, [pc, #392]	@ (8002c6c <HAL_ADC_Init+0x2bc>)
 8002ae2:	f7ff ff2b 	bl	800293c <LL_ADC_IsEnabled>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d012      	beq.n	8002b1c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a5a      	ldr	r2, [pc, #360]	@ (8002c64 <HAL_ADC_Init+0x2b4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d004      	beq.n	8002b0a <HAL_ADC_Init+0x15a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a58      	ldr	r2, [pc, #352]	@ (8002c68 <HAL_ADC_Init+0x2b8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_Init+0x15e>
 8002b0a:	4a59      	ldr	r2, [pc, #356]	@ (8002c70 <HAL_ADC_Init+0x2c0>)
 8002b0c:	e000      	b.n	8002b10 <HAL_ADC_Init+0x160>
 8002b0e:	4a59      	ldr	r2, [pc, #356]	@ (8002c74 <HAL_ADC_Init+0x2c4>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f7ff fd04 	bl	8002524 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a52      	ldr	r2, [pc, #328]	@ (8002c6c <HAL_ADC_Init+0x2bc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d129      	bne.n	8002b7a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7e5b      	ldrb	r3, [r3, #25]
 8002b2a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b30:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002b36:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d013      	beq.n	8002b68 <HAL_ADC_Init+0x1b8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	d00d      	beq.n	8002b64 <HAL_ADC_Init+0x1b4>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b1c      	cmp	r3, #28
 8002b4e:	d007      	beq.n	8002b60 <HAL_ADC_Init+0x1b0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b18      	cmp	r3, #24
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_Init+0x1ac>
 8002b58:	2318      	movs	r3, #24
 8002b5a:	e006      	b.n	8002b6a <HAL_ADC_Init+0x1ba>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e004      	b.n	8002b6a <HAL_ADC_Init+0x1ba>
 8002b60:	2310      	movs	r3, #16
 8002b62:	e002      	b.n	8002b6a <HAL_ADC_Init+0x1ba>
 8002b64:	2308      	movs	r3, #8
 8002b66:	e000      	b.n	8002b6a <HAL_ADC_Init+0x1ba>
 8002b68:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002b6a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b72:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	e00e      	b.n	8002b98 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7e5b      	ldrb	r3, [r3, #25]
 8002b7e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b84:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002b8a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b92:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d106      	bne.n	8002bb0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	045b      	lsls	r3, r3, #17
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a26      	ldr	r2, [pc, #152]	@ (8002c6c <HAL_ADC_Init+0x2bc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d115      	bne.n	8002c02 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	4b26      	ldr	r3, [pc, #152]	@ (8002c78 <HAL_ADC_Init+0x2c8>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	69b9      	ldr	r1, [r7, #24]
 8002be6:	430b      	orrs	r3, r1
 8002be8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	e009      	b.n	8002c16 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	4b1c      	ldr	r3, [pc, #112]	@ (8002c7c <HAL_ADC_Init+0x2cc>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	69b9      	ldr	r1, [r7, #24]
 8002c12:	430b      	orrs	r3, r1
 8002c14:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fea1 	bl	8002962 <LL_ADC_REG_IsConversionOngoing>
 8002c20:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff feae 	bl	8002988 <LL_ADC_INJ_IsConversionOngoing>
 8002c2c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 808e 	bne.w	8002d52 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f040 808a 	bne.w	8002d52 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a0a      	ldr	r2, [pc, #40]	@ (8002c6c <HAL_ADC_Init+0x2bc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d11b      	bne.n	8002c80 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7e1b      	ldrb	r3, [r3, #24]
 8002c4c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c54:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	e018      	b.n	8002c8e <HAL_ADC_Init+0x2de>
 8002c5c:	24000000 	.word	0x24000000
 8002c60:	053e2d63 	.word	0x053e2d63
 8002c64:	40022000 	.word	0x40022000
 8002c68:	40022100 	.word	0x40022100
 8002c6c:	58026000 	.word	0x58026000
 8002c70:	40022300 	.word	0x40022300
 8002c74:	58026300 	.word	0x58026300
 8002c78:	fff04007 	.word	0xfff04007
 8002c7c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7e1b      	ldrb	r3, [r3, #24]
 8002c84:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	4b46      	ldr	r3, [pc, #280]	@ (8002db0 <HAL_ADC_Init+0x400>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	69b9      	ldr	r1, [r7, #24]
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d137      	bne.n	8002d1c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a3f      	ldr	r2, [pc, #252]	@ (8002db4 <HAL_ADC_Init+0x404>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d116      	bne.n	8002cea <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8002db8 <HAL_ADC_Init+0x408>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002cce:	4311      	orrs	r1, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002cd4:	4311      	orrs	r1, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	611a      	str	r2, [r3, #16]
 8002ce8:	e020      	b.n	8002d2c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	4b32      	ldr	r3, [pc, #200]	@ (8002dbc <HAL_ADC_Init+0x40c>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cf8:	3a01      	subs	r2, #1
 8002cfa:	0411      	lsls	r1, r2, #16
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d00:	4311      	orrs	r1, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d06:	4311      	orrs	r1, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	611a      	str	r2, [r3, #16]
 8002d1a:	e007      	b.n	8002d2c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1b      	ldr	r2, [pc, #108]	@ (8002db4 <HAL_ADC_Init+0x404>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d002      	beq.n	8002d52 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fd67 	bl	8003820 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d10c      	bne.n	8002d74 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	f023 010f 	bic.w	r1, r3, #15
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	1e5a      	subs	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d72:	e007      	b.n	8002d84 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 020f 	bic.w	r2, r2, #15
 8002d82:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d88:	f023 0303 	bic.w	r3, r3, #3
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d94:	e007      	b.n	8002da6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9a:	f043 0210 	orr.w	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3724      	adds	r7, #36	@ 0x24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd90      	pop	{r4, r7, pc}
 8002db0:	ffffbffc 	.word	0xffffbffc
 8002db4:	58026000 	.word	0x58026000
 8002db8:	fc00f81f 	.word	0xfc00f81f
 8002dbc:	fc00f81e 	.word	0xfc00f81e

08002dc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b0b9      	sub	sp, #228	@ 0xe4
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dda:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4aab      	ldr	r2, [pc, #684]	@ (8003090 <HAL_ADC_ConfigChannel+0x2d0>)
 8002de2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x34>
 8002dee:	2302      	movs	r3, #2
 8002df0:	f000 bcfe 	b.w	80037f0 <HAL_ADC_ConfigChannel+0xa30>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fdae 	bl	8002962 <LL_ADC_REG_IsConversionOngoing>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 84e2 	bne.w	80037d2 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	db38      	blt.n	8002e88 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a9e      	ldr	r2, [pc, #632]	@ (8003094 <HAL_ADC_ConfigChannel+0x2d4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d033      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d108      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x7e>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	0e9b      	lsrs	r3, r3, #26
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	2201      	movs	r2, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	e01d      	b.n	8002e7a <HAL_ADC_ConfigChannel+0xba>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002e62:	2320      	movs	r3, #32
 8002e64:	e004      	b.n	8002e70 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002e66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	2201      	movs	r2, #1
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	69d1      	ldr	r1, [r2, #28]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	f7ff fc6b 	bl	8002770 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fd5f 	bl	8002962 <LL_ADC_REG_IsConversionOngoing>
 8002ea4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fd6b 	bl	8002988 <LL_ADC_INJ_IsConversionOngoing>
 8002eb2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 8270 	bne.w	80033a0 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ec0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f040 826b 	bne.w	80033a0 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f7ff fc76 	bl	80027c8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a6c      	ldr	r2, [pc, #432]	@ (8003094 <HAL_ADC_ConfigChannel+0x2d4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10d      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f00:	e032      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f02:	4b65      	ldr	r3, [pc, #404]	@ (8003098 <HAL_ADC_ConfigChannel+0x2d8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002f0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f0e:	d10b      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x168>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	e01d      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1a4>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x18e>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	e00a      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1a4>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d048      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6919      	ldr	r1, [r3, #16]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f80:	f7ff fb04 	bl	800258c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a42      	ldr	r2, [pc, #264]	@ (8003094 <HAL_ADC_ConfigChannel+0x2d4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d119      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6919      	ldr	r1, [r3, #16]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f7ff fb9c 	bl	80026d8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6919      	ldr	r1, [r3, #16]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d102      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x1f8>
 8002fb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fb6:	e000      	b.n	8002fba <HAL_ADC_ConfigChannel+0x1fa>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f7ff fb6a 	bl	8002694 <LL_ADC_SetOffsetSaturation>
 8002fc0:	e1ee      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6919      	ldr	r1, [r3, #16]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x21a>
 8002fd4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002fd8:	e000      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x21c>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f7ff fb37 	bl	8002650 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6919      	ldr	r1, [r3, #16]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	7e1b      	ldrb	r3, [r3, #24]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x238>
 8002ff2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ff6:	e000      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x23a>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f7ff fb0e 	bl	800261c <LL_ADC_SetDataRightShift>
 8003000:	e1ce      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a23      	ldr	r2, [pc, #140]	@ (8003094 <HAL_ADC_ConfigChannel+0x2d4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	f040 8181 	bne.w	8003310 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff faeb 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <HAL_ADC_ConfigChannel+0x27a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fae0 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8003030:	4603      	mov	r3, r0
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	e01e      	b.n	8003078 <HAL_ADC_ConfigChannel+0x2b8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fad5 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8003046:	4603      	mov	r3, r0
 8003048:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003058:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800305c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003060:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003068:	2320      	movs	r3, #32
 800306a:	e004      	b.n	8003076 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 800306c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10b      	bne.n	800309c <HAL_ADC_ConfigChannel+0x2dc>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	e01e      	b.n	80030ce <HAL_ADC_ConfigChannel+0x30e>
 8003090:	47ff0000 	.word	0x47ff0000
 8003094:	58026000 	.word	0x58026000
 8003098:	5c001000 	.word	0x5c001000
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80030b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80030b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	e004      	b.n	80030ce <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80030c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d106      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fb1e 	bl	800271c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fa82 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <HAL_ADC_ConfigChannel+0x34c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2101      	movs	r1, #1
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fa77 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	f003 021f 	and.w	r2, r3, #31
 800310a:	e01e      	b.n	800314a <HAL_ADC_ConfigChannel+0x38a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2101      	movs	r1, #1
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fa6c 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8003118:	4603      	mov	r3, r0
 800311a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800312a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800312e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	e004      	b.n	8003148 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800313e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003152:	2b00      	cmp	r3, #0
 8003154:	d105      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x3a2>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0e9b      	lsrs	r3, r3, #26
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	e018      	b.n	8003194 <HAL_ADC_ConfigChannel+0x3d4>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003176:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800317a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800317e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003186:	2320      	movs	r3, #32
 8003188:	e004      	b.n	8003194 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800318a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	429a      	cmp	r2, r3
 8003196:	d106      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2200      	movs	r2, #0
 800319e:	2101      	movs	r1, #1
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fabb 	bl	800271c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2102      	movs	r1, #2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fa1f 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x412>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2102      	movs	r1, #2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fa14 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 80031c8:	4603      	mov	r3, r0
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	e01e      	b.n	8003210 <HAL_ADC_ConfigChannel+0x450>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2102      	movs	r1, #2
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fa09 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 80031de:	4603      	mov	r3, r0
 80031e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80031f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80031f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003200:	2320      	movs	r3, #32
 8003202:	e004      	b.n	800320e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003204:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003208:	fab3 f383 	clz	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x468>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	e014      	b.n	8003252 <HAL_ADC_ConfigChannel+0x492>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003236:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003238:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800323c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e004      	b.n	8003252 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003248:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	429a      	cmp	r2, r3
 8003254:	d106      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2200      	movs	r2, #0
 800325c:	2102      	movs	r1, #2
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fa5c 	bl	800271c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2103      	movs	r1, #3
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff f9c0 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8003270:	4603      	mov	r3, r0
 8003272:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x4d0>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2103      	movs	r1, #3
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff f9b5 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	0e9b      	lsrs	r3, r3, #26
 800328a:	f003 021f 	and.w	r2, r3, #31
 800328e:	e017      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x500>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2103      	movs	r1, #3
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff f9aa 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 800329c:	4603      	mov	r3, r0
 800329e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80032a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032aa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80032ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80032b2:	2320      	movs	r3, #32
 80032b4:	e003      	b.n	80032be <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80032b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032b8:	fab3 f383 	clz	r3, r3
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x518>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	e011      	b.n	80032fc <HAL_ADC_ConfigChannel+0x53c>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80032e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80032ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80032f0:	2320      	movs	r3, #32
 80032f2:	e003      	b.n	80032fc <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80032f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d14f      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2200      	movs	r2, #0
 8003306:	2103      	movs	r1, #3
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fa07 	bl	800271c <LL_ADC_SetOffsetState>
 800330e:	e047      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	069b      	lsls	r3, r3, #26
 8003320:	429a      	cmp	r2, r3
 8003322:	d107      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003332:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800333a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	069b      	lsls	r3, r3, #26
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003356:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800335e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	069b      	lsls	r3, r3, #26
 8003368:	429a      	cmp	r2, r3
 800336a:	d107      	bne.n	800337c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800337a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003382:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	069b      	lsls	r3, r3, #26
 800338c:	429a      	cmp	r2, r3
 800338e:	d107      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800339e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fac9 	bl	800293c <LL_ADC_IsEnabled>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f040 8219 	bne.w	80037e4 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	461a      	mov	r2, r3
 80033c0:	f7ff fa2e 	bl	8002820 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4aa1      	ldr	r2, [pc, #644]	@ (8003650 <HAL_ADC_ConfigChannel+0x890>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f040 812e 	bne.w	800362c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10b      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x638>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0e9b      	lsrs	r3, r3, #26
 80033e6:	3301      	adds	r3, #1
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2b09      	cmp	r3, #9
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e019      	b.n	800342c <HAL_ADC_ConfigChannel+0x66c>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003400:	fa93 f3a3 	rbit	r3, r3
 8003404:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003408:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800340a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003410:	2320      	movs	r3, #32
 8003412:	e003      	b.n	800341c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003414:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	3301      	adds	r3, #1
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	2b09      	cmp	r3, #9
 8003424:	bf94      	ite	ls
 8003426:	2301      	movls	r3, #1
 8003428:	2300      	movhi	r3, #0
 800342a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800342c:	2b00      	cmp	r3, #0
 800342e:	d079      	beq.n	8003524 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003438:	2b00      	cmp	r3, #0
 800343a:	d107      	bne.n	800344c <HAL_ADC_ConfigChannel+0x68c>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	0e9b      	lsrs	r3, r3, #26
 8003442:	3301      	adds	r3, #1
 8003444:	069b      	lsls	r3, r3, #26
 8003446:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800344a:	e015      	b.n	8003478 <HAL_ADC_ConfigChannel+0x6b8>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800345a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800345c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800345e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003464:	2320      	movs	r3, #32
 8003466:	e003      	b.n	8003470 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8003468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	3301      	adds	r3, #1
 8003472:	069b      	lsls	r3, r3, #26
 8003474:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x6d8>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0e9b      	lsrs	r3, r3, #26
 800348a:	3301      	adds	r3, #1
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	2101      	movs	r1, #1
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	e017      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x708>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80034a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80034aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80034b0:	2320      	movs	r3, #32
 80034b2:	e003      	b.n	80034bc <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80034b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2101      	movs	r1, #1
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	ea42 0103 	orr.w	r1, r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x72e>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0e9b      	lsrs	r3, r3, #26
 80034de:	3301      	adds	r3, #1
 80034e0:	f003 021f 	and.w	r2, r3, #31
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	051b      	lsls	r3, r3, #20
 80034ec:	e018      	b.n	8003520 <HAL_ADC_ConfigChannel+0x760>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003506:	2320      	movs	r3, #32
 8003508:	e003      	b.n	8003512 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800350a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f003 021f 	and.w	r2, r3, #31
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003520:	430b      	orrs	r3, r1
 8003522:	e07e      	b.n	8003622 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800352c:	2b00      	cmp	r3, #0
 800352e:	d107      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x780>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	0e9b      	lsrs	r3, r3, #26
 8003536:	3301      	adds	r3, #1
 8003538:	069b      	lsls	r3, r3, #26
 800353a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800353e:	e015      	b.n	800356c <HAL_ADC_ConfigChannel+0x7ac>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e003      	b.n	8003564 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3301      	adds	r3, #1
 8003566:	069b      	lsls	r3, r3, #26
 8003568:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <HAL_ADC_ConfigChannel+0x7cc>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	0e9b      	lsrs	r3, r3, #26
 800357e:	3301      	adds	r3, #1
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	2101      	movs	r1, #1
 8003586:	fa01 f303 	lsl.w	r3, r1, r3
 800358a:	e017      	b.n	80035bc <HAL_ADC_ConfigChannel+0x7fc>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	61bb      	str	r3, [r7, #24]
  return result;
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80035a4:	2320      	movs	r3, #32
 80035a6:	e003      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	3301      	adds	r3, #1
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	2101      	movs	r1, #1
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	ea42 0103 	orr.w	r1, r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10d      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x828>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0e9b      	lsrs	r3, r3, #26
 80035d2:	3301      	adds	r3, #1
 80035d4:	f003 021f 	and.w	r2, r3, #31
 80035d8:	4613      	mov	r3, r2
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	4413      	add	r3, r2
 80035de:	3b1e      	subs	r3, #30
 80035e0:	051b      	lsls	r3, r3, #20
 80035e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035e6:	e01b      	b.n	8003620 <HAL_ADC_ConfigChannel+0x860>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	60fb      	str	r3, [r7, #12]
  return result;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003600:	2320      	movs	r3, #32
 8003602:	e003      	b.n	800360c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3301      	adds	r3, #1
 800360e:	f003 021f 	and.w	r2, r3, #31
 8003612:	4613      	mov	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4413      	add	r3, r2
 8003618:	3b1e      	subs	r3, #30
 800361a:	051b      	lsls	r3, r3, #20
 800361c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003620:	430b      	orrs	r3, r1
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	6892      	ldr	r2, [r2, #8]
 8003626:	4619      	mov	r1, r3
 8003628:	f7ff f8ce 	bl	80027c8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f280 80d7 	bge.w	80037e4 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a06      	ldr	r2, [pc, #24]	@ (8003654 <HAL_ADC_ConfigChannel+0x894>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_ADC_ConfigChannel+0x88a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a04      	ldr	r2, [pc, #16]	@ (8003658 <HAL_ADC_ConfigChannel+0x898>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10a      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x8a0>
 800364a:	4b04      	ldr	r3, [pc, #16]	@ (800365c <HAL_ADC_ConfigChannel+0x89c>)
 800364c:	e009      	b.n	8003662 <HAL_ADC_ConfigChannel+0x8a2>
 800364e:	bf00      	nop
 8003650:	47ff0000 	.word	0x47ff0000
 8003654:	40022000 	.word	0x40022000
 8003658:	40022100 	.word	0x40022100
 800365c:	40022300 	.word	0x40022300
 8003660:	4b65      	ldr	r3, [pc, #404]	@ (80037f8 <HAL_ADC_ConfigChannel+0xa38>)
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe ff84 	bl	8002570 <LL_ADC_GetCommonPathInternalCh>
 8003668:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a62      	ldr	r2, [pc, #392]	@ (80037fc <HAL_ADC_ConfigChannel+0xa3c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_ADC_ConfigChannel+0x8c0>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a61      	ldr	r2, [pc, #388]	@ (8003800 <HAL_ADC_ConfigChannel+0xa40>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10e      	bne.n	800369e <HAL_ADC_ConfigChannel+0x8de>
 8003680:	485e      	ldr	r0, [pc, #376]	@ (80037fc <HAL_ADC_ConfigChannel+0xa3c>)
 8003682:	f7ff f95b 	bl	800293c <LL_ADC_IsEnabled>
 8003686:	4604      	mov	r4, r0
 8003688:	485d      	ldr	r0, [pc, #372]	@ (8003800 <HAL_ADC_ConfigChannel+0xa40>)
 800368a:	f7ff f957 	bl	800293c <LL_ADC_IsEnabled>
 800368e:	4603      	mov	r3, r0
 8003690:	4323      	orrs	r3, r4
 8003692:	2b00      	cmp	r3, #0
 8003694:	bf0c      	ite	eq
 8003696:	2301      	moveq	r3, #1
 8003698:	2300      	movne	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	e008      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x8f0>
 800369e:	4859      	ldr	r0, [pc, #356]	@ (8003804 <HAL_ADC_ConfigChannel+0xa44>)
 80036a0:	f7ff f94c 	bl	800293c <LL_ADC_IsEnabled>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8084 	beq.w	80037be <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a53      	ldr	r2, [pc, #332]	@ (8003808 <HAL_ADC_ConfigChannel+0xa48>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d132      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x966>
 80036c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d12c      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003804 <HAL_ADC_ConfigChannel+0xa44>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	f040 8086 	bne.w	80037e4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a47      	ldr	r2, [pc, #284]	@ (80037fc <HAL_ADC_ConfigChannel+0xa3c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_ADC_ConfigChannel+0x92c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a46      	ldr	r2, [pc, #280]	@ (8003800 <HAL_ADC_ConfigChannel+0xa40>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d101      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x930>
 80036ec:	4a47      	ldr	r2, [pc, #284]	@ (800380c <HAL_ADC_ConfigChannel+0xa4c>)
 80036ee:	e000      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x932>
 80036f0:	4a41      	ldr	r2, [pc, #260]	@ (80037f8 <HAL_ADC_ConfigChannel+0xa38>)
 80036f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f7fe ff24 	bl	800254a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003702:	4b43      	ldr	r3, [pc, #268]	@ (8003810 <HAL_ADC_ConfigChannel+0xa50>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	099b      	lsrs	r3, r3, #6
 8003708:	4a42      	ldr	r2, [pc, #264]	@ (8003814 <HAL_ADC_ConfigChannel+0xa54>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	099b      	lsrs	r3, r3, #6
 8003710:	3301      	adds	r3, #1
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003716:	e002      	b.n	800371e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	3b01      	subs	r3, #1
 800371c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f9      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003724:	e05e      	b.n	80037e4 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a3b      	ldr	r2, [pc, #236]	@ (8003818 <HAL_ADC_ConfigChannel+0xa58>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d120      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x9b2>
 8003730:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003734:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d11a      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a30      	ldr	r2, [pc, #192]	@ (8003804 <HAL_ADC_ConfigChannel+0xa44>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d14e      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2c      	ldr	r2, [pc, #176]	@ (80037fc <HAL_ADC_ConfigChannel+0xa3c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_ADC_ConfigChannel+0x99a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2a      	ldr	r2, [pc, #168]	@ (8003800 <HAL_ADC_ConfigChannel+0xa40>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <HAL_ADC_ConfigChannel+0x99e>
 800375a:	4a2c      	ldr	r2, [pc, #176]	@ (800380c <HAL_ADC_ConfigChannel+0xa4c>)
 800375c:	e000      	b.n	8003760 <HAL_ADC_ConfigChannel+0x9a0>
 800375e:	4a26      	ldr	r2, [pc, #152]	@ (80037f8 <HAL_ADC_ConfigChannel+0xa38>)
 8003760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003764:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f7fe feed 	bl	800254a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003770:	e038      	b.n	80037e4 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a29      	ldr	r2, [pc, #164]	@ (800381c <HAL_ADC_ConfigChannel+0xa5c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d133      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0xa24>
 800377c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003780:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d12d      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <HAL_ADC_ConfigChannel+0xa44>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d128      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a19      	ldr	r2, [pc, #100]	@ (80037fc <HAL_ADC_ConfigChannel+0xa3c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_ADC_ConfigChannel+0x9e6>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a17      	ldr	r2, [pc, #92]	@ (8003800 <HAL_ADC_ConfigChannel+0xa40>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d101      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x9ea>
 80037a6:	4a19      	ldr	r2, [pc, #100]	@ (800380c <HAL_ADC_ConfigChannel+0xa4c>)
 80037a8:	e000      	b.n	80037ac <HAL_ADC_ConfigChannel+0x9ec>
 80037aa:	4a13      	ldr	r2, [pc, #76]	@ (80037f8 <HAL_ADC_ConfigChannel+0xa38>)
 80037ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f7fe fec7 	bl	800254a <LL_ADC_SetCommonPathInternalCh>
 80037bc:	e012      	b.n	80037e4 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c2:	f043 0220 	orr.w	r2, r3, #32
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80037d0:	e008      	b.n	80037e4 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80037ec:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	37e4      	adds	r7, #228	@ 0xe4
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd90      	pop	{r4, r7, pc}
 80037f8:	58026300 	.word	0x58026300
 80037fc:	40022000 	.word	0x40022000
 8003800:	40022100 	.word	0x40022100
 8003804:	58026000 	.word	0x58026000
 8003808:	c7520000 	.word	0xc7520000
 800380c:	40022300 	.word	0x40022300
 8003810:	24000000 	.word	0x24000000
 8003814:	053e2d63 	.word	0x053e2d63
 8003818:	c3210000 	.word	0xc3210000
 800381c:	cb840000 	.word	0xcb840000

08003820 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6c      	ldr	r2, [pc, #432]	@ (80039e0 <ADC_ConfigureBoostMode+0x1c0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <ADC_ConfigureBoostMode+0x1c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6b      	ldr	r2, [pc, #428]	@ (80039e4 <ADC_ConfigureBoostMode+0x1c4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d109      	bne.n	8003850 <ADC_ConfigureBoostMode+0x30>
 800383c:	4b6a      	ldr	r3, [pc, #424]	@ (80039e8 <ADC_ConfigureBoostMode+0x1c8>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf14      	ite	ne
 8003848:	2301      	movne	r3, #1
 800384a:	2300      	moveq	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e008      	b.n	8003862 <ADC_ConfigureBoostMode+0x42>
 8003850:	4b66      	ldr	r3, [pc, #408]	@ (80039ec <ADC_ConfigureBoostMode+0x1cc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf14      	ite	ne
 800385c:	2301      	movne	r3, #1
 800385e:	2300      	moveq	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01c      	beq.n	80038a0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003866:	f004 fe63 	bl	8008530 <HAL_RCC_GetHCLKFreq>
 800386a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003874:	d010      	beq.n	8003898 <ADC_ConfigureBoostMode+0x78>
 8003876:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800387a:	d873      	bhi.n	8003964 <ADC_ConfigureBoostMode+0x144>
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003880:	d002      	beq.n	8003888 <ADC_ConfigureBoostMode+0x68>
 8003882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003886:	d16d      	bne.n	8003964 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	60fb      	str	r3, [r7, #12]
        break;
 8003896:	e068      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	60fb      	str	r3, [r7, #12]
        break;
 800389e:	e064      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80038a0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80038a4:	f04f 0100 	mov.w	r1, #0
 80038a8:	f006 f83e 	bl	8009928 <HAL_RCCEx_GetPeriphCLKFreq>
 80038ac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80038b6:	d051      	beq.n	800395c <ADC_ConfigureBoostMode+0x13c>
 80038b8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80038bc:	d854      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 80038be:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80038c2:	d047      	beq.n	8003954 <ADC_ConfigureBoostMode+0x134>
 80038c4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80038c8:	d84e      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 80038ca:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80038ce:	d03d      	beq.n	800394c <ADC_ConfigureBoostMode+0x12c>
 80038d0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80038d4:	d848      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 80038d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038da:	d033      	beq.n	8003944 <ADC_ConfigureBoostMode+0x124>
 80038dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038e0:	d842      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 80038e2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80038e6:	d029      	beq.n	800393c <ADC_ConfigureBoostMode+0x11c>
 80038e8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80038ec:	d83c      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 80038ee:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80038f2:	d01a      	beq.n	800392a <ADC_ConfigureBoostMode+0x10a>
 80038f4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80038f8:	d836      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 80038fa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80038fe:	d014      	beq.n	800392a <ADC_ConfigureBoostMode+0x10a>
 8003900:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003904:	d830      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 8003906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800390a:	d00e      	beq.n	800392a <ADC_ConfigureBoostMode+0x10a>
 800390c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003910:	d82a      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 8003912:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003916:	d008      	beq.n	800392a <ADC_ConfigureBoostMode+0x10a>
 8003918:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800391c:	d824      	bhi.n	8003968 <ADC_ConfigureBoostMode+0x148>
 800391e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003922:	d002      	beq.n	800392a <ADC_ConfigureBoostMode+0x10a>
 8003924:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003928:	d11e      	bne.n	8003968 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	0c9b      	lsrs	r3, r3, #18
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	60fb      	str	r3, [r7, #12]
        break;
 800393a:	e016      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	60fb      	str	r3, [r7, #12]
        break;
 8003942:	e012      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	60fb      	str	r3, [r7, #12]
        break;
 800394a:	e00e      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	099b      	lsrs	r3, r3, #6
 8003950:	60fb      	str	r3, [r7, #12]
        break;
 8003952:	e00a      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	09db      	lsrs	r3, r3, #7
 8003958:	60fb      	str	r3, [r7, #12]
        break;
 800395a:	e006      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	60fb      	str	r3, [r7, #12]
        break;
 8003962:	e002      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003968:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a1f      	ldr	r2, [pc, #124]	@ (80039f0 <ADC_ConfigureBoostMode+0x1d0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d808      	bhi.n	800398a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003986:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003988:	e025      	b.n	80039d6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a19      	ldr	r2, [pc, #100]	@ (80039f4 <ADC_ConfigureBoostMode+0x1d4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d80a      	bhi.n	80039a8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039a4:	609a      	str	r2, [r3, #8]
}
 80039a6:	e016      	b.n	80039d6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4a13      	ldr	r2, [pc, #76]	@ (80039f8 <ADC_ConfigureBoostMode+0x1d8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d80a      	bhi.n	80039c6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c2:	609a      	str	r2, [r3, #8]
}
 80039c4:	e007      	b.n	80039d6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80039d4:	609a      	str	r2, [r3, #8]
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40022000 	.word	0x40022000
 80039e4:	40022100 	.word	0x40022100
 80039e8:	40022300 	.word	0x40022300
 80039ec:	58026300 	.word	0x58026300
 80039f0:	005f5e10 	.word	0x005f5e10
 80039f4:	00bebc20 	.word	0x00bebc20
 80039f8:	017d7840 	.word	0x017d7840

080039fc <LL_ADC_IsEnabled>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <LL_ADC_IsEnabled+0x18>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <LL_ADC_IsEnabled+0x1a>
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d101      	bne.n	8003a3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b0a3      	sub	sp, #140	@ 0x8c
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e0c1      	b.n	8003bea <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d102      	bne.n	8003a86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a80:	4b5d      	ldr	r3, [pc, #372]	@ (8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e001      	b.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10b      	bne.n	8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0a0      	b.n	8003bea <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff ffb9 	bl	8003a22 <LL_ADC_REG_IsConversionOngoing>
 8003ab0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ffb2 	bl	8003a22 <LL_ADC_REG_IsConversionOngoing>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f040 8081 	bne.w	8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ac6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d17c      	bne.n	8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a48      	ldr	r2, [pc, #288]	@ (8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a46      	ldr	r2, [pc, #280]	@ (8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003ae2:	4b46      	ldr	r3, [pc, #280]	@ (8003bfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ae4:	e000      	b.n	8003ae8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003ae6:	4b46      	ldr	r3, [pc, #280]	@ (8003c00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003ae8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d039      	beq.n	8003b66 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003af2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a3a      	ldr	r2, [pc, #232]	@ (8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a39      	ldr	r2, [pc, #228]	@ (8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10e      	bne.n	8003b36 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003b18:	4836      	ldr	r0, [pc, #216]	@ (8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b1a:	f7ff ff6f 	bl	80039fc <LL_ADC_IsEnabled>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4835      	ldr	r0, [pc, #212]	@ (8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b22:	f7ff ff6b 	bl	80039fc <LL_ADC_IsEnabled>
 8003b26:	4603      	mov	r3, r0
 8003b28:	4323      	orrs	r3, r4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bf0c      	ite	eq
 8003b2e:	2301      	moveq	r3, #1
 8003b30:	2300      	movne	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	e008      	b.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003b36:	4833      	ldr	r0, [pc, #204]	@ (8003c04 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003b38:	f7ff ff60 	bl	80039fc <LL_ADC_IsEnabled>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d047      	beq.n	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	4b2d      	ldr	r3, [pc, #180]	@ (8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	6811      	ldr	r1, [r2, #0]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	6892      	ldr	r2, [r2, #8]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b62:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b64:	e03a      	b.n	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003b66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b70:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d10e      	bne.n	8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003b86:	481b      	ldr	r0, [pc, #108]	@ (8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b88:	f7ff ff38 	bl	80039fc <LL_ADC_IsEnabled>
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	481a      	ldr	r0, [pc, #104]	@ (8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b90:	f7ff ff34 	bl	80039fc <LL_ADC_IsEnabled>
 8003b94:	4603      	mov	r3, r0
 8003b96:	4323      	orrs	r3, r4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e008      	b.n	8003bb6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003ba4:	4817      	ldr	r0, [pc, #92]	@ (8003c04 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003ba6:	f7ff ff29 	bl	80039fc <LL_ADC_IsEnabled>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d010      	beq.n	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003bba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003bc4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bc6:	e009      	b.n	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003bda:	e000      	b.n	8003bde <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003be6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	378c      	adds	r7, #140	@ 0x8c
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd90      	pop	{r4, r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40022100 	.word	0x40022100
 8003bfc:	40022300 	.word	0x40022300
 8003c00:	58026300 	.word	0x58026300
 8003c04:	58026000 	.word	0x58026000
 8003c08:	fffff0e0 	.word	0xfffff0e0

08003c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <__NVIC_SetPriorityGrouping+0x40>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c34:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <__NVIC_SetPriorityGrouping+0x44>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3a:	4a04      	ldr	r2, [pc, #16]	@ (8003c4c <__NVIC_SetPriorityGrouping+0x40>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	60d3      	str	r3, [r2, #12]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00
 8003c50:	05fa0000 	.word	0x05fa0000

08003c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c58:	4b04      	ldr	r3, [pc, #16]	@ (8003c6c <__NVIC_GetPriorityGrouping+0x18>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	f003 0307 	and.w	r3, r3, #7
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	db0b      	blt.n	8003c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	f003 021f 	and.w	r2, r3, #31
 8003c88:	4907      	ldr	r1, [pc, #28]	@ (8003ca8 <__NVIC_EnableIRQ+0x38>)
 8003c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2001      	movs	r0, #1
 8003c92:	fa00 f202 	lsl.w	r2, r0, r2
 8003c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000e100 	.word	0xe000e100

08003cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	6039      	str	r1, [r7, #0]
 8003cb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	db0a      	blt.n	8003cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	490c      	ldr	r1, [pc, #48]	@ (8003cf8 <__NVIC_SetPriority+0x4c>)
 8003cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cca:	0112      	lsls	r2, r2, #4
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	440b      	add	r3, r1
 8003cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cd4:	e00a      	b.n	8003cec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4908      	ldr	r1, [pc, #32]	@ (8003cfc <__NVIC_SetPriority+0x50>)
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	3b04      	subs	r3, #4
 8003ce4:	0112      	lsls	r2, r2, #4
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	440b      	add	r3, r1
 8003cea:	761a      	strb	r2, [r3, #24]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000e100 	.word	0xe000e100
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	@ 0x24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f1c3 0307 	rsb	r3, r3, #7
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	bf28      	it	cs
 8003d1e:	2304      	movcs	r3, #4
 8003d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3304      	adds	r3, #4
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d902      	bls.n	8003d30 <NVIC_EncodePriority+0x30>
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3b03      	subs	r3, #3
 8003d2e:	e000      	b.n	8003d32 <NVIC_EncodePriority+0x32>
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	401a      	ands	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d48:	f04f 31ff 	mov.w	r1, #4294967295
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	43d9      	mvns	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d58:	4313      	orrs	r3, r2
         );
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3724      	adds	r7, #36	@ 0x24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d78:	d301      	bcc.n	8003d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e00f      	b.n	8003d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003da8 <SysTick_Config+0x40>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d86:	210f      	movs	r1, #15
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	f7ff ff8e 	bl	8003cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d90:	4b05      	ldr	r3, [pc, #20]	@ (8003da8 <SysTick_Config+0x40>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d96:	4b04      	ldr	r3, [pc, #16]	@ (8003da8 <SysTick_Config+0x40>)
 8003d98:	2207      	movs	r2, #7
 8003d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	e000e010 	.word	0xe000e010

08003dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ff29 	bl	8003c0c <__NVIC_SetPriorityGrouping>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b086      	sub	sp, #24
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	4603      	mov	r3, r0
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dd0:	f7ff ff40 	bl	8003c54 <__NVIC_GetPriorityGrouping>
 8003dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	6978      	ldr	r0, [r7, #20]
 8003ddc:	f7ff ff90 	bl	8003d00 <NVIC_EncodePriority>
 8003de0:	4602      	mov	r2, r0
 8003de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ff5f 	bl	8003cac <__NVIC_SetPriority>
}
 8003dee:	bf00      	nop
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff33 	bl	8003c70 <__NVIC_EnableIRQ>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff ffa4 	bl	8003d68 <SysTick_Config>
 8003e20:	4603      	mov	r3, r0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003e30:	f3bf 8f5f 	dmb	sy
}
 8003e34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003e36:	4b07      	ldr	r3, [pc, #28]	@ (8003e54 <HAL_MPU_Disable+0x28>)
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	4a06      	ldr	r2, [pc, #24]	@ (8003e54 <HAL_MPU_Disable+0x28>)
 8003e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e40:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003e42:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <HAL_MPU_Disable+0x2c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	605a      	str	r2, [r3, #4]
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	e000ed00 	.word	0xe000ed00
 8003e58:	e000ed90 	.word	0xe000ed90

08003e5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003e64:	4a0b      	ldr	r2, [pc, #44]	@ (8003e94 <HAL_MPU_Enable+0x38>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e98 <HAL_MPU_Enable+0x3c>)
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	4a09      	ldr	r2, [pc, #36]	@ (8003e98 <HAL_MPU_Enable+0x3c>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e78:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003e7a:	f3bf 8f4f 	dsb	sy
}
 8003e7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e80:	f3bf 8f6f 	isb	sy
}
 8003e84:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	e000ed90 	.word	0xe000ed90
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	785a      	ldrb	r2, [r3, #1]
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f18 <HAL_MPU_ConfigRegion+0x7c>)
 8003eaa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003eac:	4b1a      	ldr	r3, [pc, #104]	@ (8003f18 <HAL_MPU_ConfigRegion+0x7c>)
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	4a19      	ldr	r2, [pc, #100]	@ (8003f18 <HAL_MPU_ConfigRegion+0x7c>)
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003eb8:	4a17      	ldr	r2, [pc, #92]	@ (8003f18 <HAL_MPU_ConfigRegion+0x7c>)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	7b1b      	ldrb	r3, [r3, #12]
 8003ec4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7adb      	ldrb	r3, [r3, #11]
 8003eca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ecc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	7a9b      	ldrb	r3, [r3, #10]
 8003ed2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ed4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7b5b      	ldrb	r3, [r3, #13]
 8003eda:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003edc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	7b9b      	ldrb	r3, [r3, #14]
 8003ee2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ee4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	7bdb      	ldrb	r3, [r3, #15]
 8003eea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003eec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	7a5b      	ldrb	r3, [r3, #9]
 8003ef2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003ef4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7a1b      	ldrb	r3, [r3, #8]
 8003efa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003efc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	7812      	ldrb	r2, [r2, #0]
 8003f02:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f04:	4a04      	ldr	r2, [pc, #16]	@ (8003f18 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f06:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f08:	6113      	str	r3, [r2, #16]
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	e000ed90 	.word	0xe000ed90

08003f1c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e014      	b.n	8003f58 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	791b      	ldrb	r3, [r3, #4]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd fb2c 	bl	800159c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	@ 0x28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_DAC_ConfigChannel+0x1e>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e12a      	b.n	80041d8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	795b      	ldrb	r3, [r3, #5]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_DAC_ConfigChannel+0x2e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e124      	b.n	80041d8 <HAL_DAC_ConfigChannel+0x278>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2202      	movs	r2, #2
 8003f98:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d17a      	bne.n	8004098 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003fa2:	f7fe fa8f 	bl	80024c4 <HAL_GetTick>
 8003fa6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d13d      	bne.n	800402a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fae:	e018      	b.n	8003fe2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003fb0:	f7fe fa88 	bl	80024c4 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d911      	bls.n	8003fe2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fc4:	4b86      	ldr	r3, [pc, #536]	@ (80041e0 <HAL_DAC_ConfigChannel+0x280>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f043 0208 	orr.w	r2, r3, #8
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2203      	movs	r2, #3
 8003fdc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e0fa      	b.n	80041d8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fe8:	4b7d      	ldr	r3, [pc, #500]	@ (80041e0 <HAL_DAC_ConfigChannel+0x280>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1df      	bne.n	8003fb0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	6992      	ldr	r2, [r2, #24]
 8003ff8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ffa:	e020      	b.n	800403e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ffc:	f7fe fa62 	bl	80024c4 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d90f      	bls.n	800402a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004010:	2b00      	cmp	r3, #0
 8004012:	da0a      	bge.n	800402a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f043 0208 	orr.w	r2, r3, #8
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2203      	movs	r2, #3
 8004024:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e0d6      	b.n	80041d8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004030:	2b00      	cmp	r3, #0
 8004032:	dbe3      	blt.n	8003ffc <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	6992      	ldr	r2, [r2, #24]
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800404e:	fa01 f303 	lsl.w	r3, r1, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	ea02 0103 	and.w	r1, r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	409a      	lsls	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	21ff      	movs	r1, #255	@ 0xff
 800407a:	fa01 f303 	lsl.w	r3, r1, r3
 800407e:	43db      	mvns	r3, r3
 8004080:	ea02 0103 	and.w	r1, r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6a1a      	ldr	r2, [r3, #32]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d11d      	bne.n	80040dc <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	221f      	movs	r2, #31
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2207      	movs	r2, #7
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4013      	ands	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d102      	bne.n	8004106 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004100:	2300      	movs	r3, #0
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24
 8004104:	e00f      	b.n	8004126 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d102      	bne.n	8004114 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800410e:	2301      	movs	r3, #1
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
 8004112:	e008      	b.n	8004126 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800411c:	2301      	movs	r3, #1
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004120:	e001      	b.n	8004126 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004122:	2300      	movs	r3, #0
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	4313      	orrs	r3, r2
 8004130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43da      	mvns	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	400a      	ands	r2, r1
 800416c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	43db      	mvns	r3, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	22c0      	movs	r2, #192	@ 0xc0
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	400a      	ands	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80041d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3728      	adds	r7, #40	@ 0x28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20008000 	.word	0x20008000

080041e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80041ec:	f7fe f96a 	bl	80024c4 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e312      	b.n	8004822 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a66      	ldr	r2, [pc, #408]	@ (800439c <HAL_DMA_Init+0x1b8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d04a      	beq.n	800429c <HAL_DMA_Init+0xb8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a65      	ldr	r2, [pc, #404]	@ (80043a0 <HAL_DMA_Init+0x1bc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d045      	beq.n	800429c <HAL_DMA_Init+0xb8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a63      	ldr	r2, [pc, #396]	@ (80043a4 <HAL_DMA_Init+0x1c0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d040      	beq.n	800429c <HAL_DMA_Init+0xb8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a62      	ldr	r2, [pc, #392]	@ (80043a8 <HAL_DMA_Init+0x1c4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d03b      	beq.n	800429c <HAL_DMA_Init+0xb8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a60      	ldr	r2, [pc, #384]	@ (80043ac <HAL_DMA_Init+0x1c8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d036      	beq.n	800429c <HAL_DMA_Init+0xb8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a5f      	ldr	r2, [pc, #380]	@ (80043b0 <HAL_DMA_Init+0x1cc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d031      	beq.n	800429c <HAL_DMA_Init+0xb8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a5d      	ldr	r2, [pc, #372]	@ (80043b4 <HAL_DMA_Init+0x1d0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d02c      	beq.n	800429c <HAL_DMA_Init+0xb8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a5c      	ldr	r2, [pc, #368]	@ (80043b8 <HAL_DMA_Init+0x1d4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d027      	beq.n	800429c <HAL_DMA_Init+0xb8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a5a      	ldr	r2, [pc, #360]	@ (80043bc <HAL_DMA_Init+0x1d8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d022      	beq.n	800429c <HAL_DMA_Init+0xb8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a59      	ldr	r2, [pc, #356]	@ (80043c0 <HAL_DMA_Init+0x1dc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d01d      	beq.n	800429c <HAL_DMA_Init+0xb8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a57      	ldr	r2, [pc, #348]	@ (80043c4 <HAL_DMA_Init+0x1e0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d018      	beq.n	800429c <HAL_DMA_Init+0xb8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a56      	ldr	r2, [pc, #344]	@ (80043c8 <HAL_DMA_Init+0x1e4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d013      	beq.n	800429c <HAL_DMA_Init+0xb8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a54      	ldr	r2, [pc, #336]	@ (80043cc <HAL_DMA_Init+0x1e8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00e      	beq.n	800429c <HAL_DMA_Init+0xb8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a53      	ldr	r2, [pc, #332]	@ (80043d0 <HAL_DMA_Init+0x1ec>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d009      	beq.n	800429c <HAL_DMA_Init+0xb8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a51      	ldr	r2, [pc, #324]	@ (80043d4 <HAL_DMA_Init+0x1f0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <HAL_DMA_Init+0xb8>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a50      	ldr	r2, [pc, #320]	@ (80043d8 <HAL_DMA_Init+0x1f4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d101      	bne.n	80042a0 <HAL_DMA_Init+0xbc>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <HAL_DMA_Init+0xbe>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 813c 	beq.w	8004520 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a37      	ldr	r2, [pc, #220]	@ (800439c <HAL_DMA_Init+0x1b8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d04a      	beq.n	8004358 <HAL_DMA_Init+0x174>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a36      	ldr	r2, [pc, #216]	@ (80043a0 <HAL_DMA_Init+0x1bc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d045      	beq.n	8004358 <HAL_DMA_Init+0x174>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a34      	ldr	r2, [pc, #208]	@ (80043a4 <HAL_DMA_Init+0x1c0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d040      	beq.n	8004358 <HAL_DMA_Init+0x174>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a33      	ldr	r2, [pc, #204]	@ (80043a8 <HAL_DMA_Init+0x1c4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d03b      	beq.n	8004358 <HAL_DMA_Init+0x174>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a31      	ldr	r2, [pc, #196]	@ (80043ac <HAL_DMA_Init+0x1c8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d036      	beq.n	8004358 <HAL_DMA_Init+0x174>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a30      	ldr	r2, [pc, #192]	@ (80043b0 <HAL_DMA_Init+0x1cc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d031      	beq.n	8004358 <HAL_DMA_Init+0x174>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a2e      	ldr	r2, [pc, #184]	@ (80043b4 <HAL_DMA_Init+0x1d0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d02c      	beq.n	8004358 <HAL_DMA_Init+0x174>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a2d      	ldr	r2, [pc, #180]	@ (80043b8 <HAL_DMA_Init+0x1d4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d027      	beq.n	8004358 <HAL_DMA_Init+0x174>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a2b      	ldr	r2, [pc, #172]	@ (80043bc <HAL_DMA_Init+0x1d8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d022      	beq.n	8004358 <HAL_DMA_Init+0x174>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a2a      	ldr	r2, [pc, #168]	@ (80043c0 <HAL_DMA_Init+0x1dc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d01d      	beq.n	8004358 <HAL_DMA_Init+0x174>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a28      	ldr	r2, [pc, #160]	@ (80043c4 <HAL_DMA_Init+0x1e0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d018      	beq.n	8004358 <HAL_DMA_Init+0x174>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a27      	ldr	r2, [pc, #156]	@ (80043c8 <HAL_DMA_Init+0x1e4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d013      	beq.n	8004358 <HAL_DMA_Init+0x174>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a25      	ldr	r2, [pc, #148]	@ (80043cc <HAL_DMA_Init+0x1e8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00e      	beq.n	8004358 <HAL_DMA_Init+0x174>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a24      	ldr	r2, [pc, #144]	@ (80043d0 <HAL_DMA_Init+0x1ec>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d009      	beq.n	8004358 <HAL_DMA_Init+0x174>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a22      	ldr	r2, [pc, #136]	@ (80043d4 <HAL_DMA_Init+0x1f0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d004      	beq.n	8004358 <HAL_DMA_Init+0x174>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a21      	ldr	r2, [pc, #132]	@ (80043d8 <HAL_DMA_Init+0x1f4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d108      	bne.n	800436a <HAL_DMA_Init+0x186>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e007      	b.n	800437a <HAL_DMA_Init+0x196>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800437a:	e02f      	b.n	80043dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800437c:	f7fe f8a2 	bl	80024c4 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b05      	cmp	r3, #5
 8004388:	d928      	bls.n	80043dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2203      	movs	r2, #3
 8004394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e242      	b.n	8004822 <HAL_DMA_Init+0x63e>
 800439c:	40020010 	.word	0x40020010
 80043a0:	40020028 	.word	0x40020028
 80043a4:	40020040 	.word	0x40020040
 80043a8:	40020058 	.word	0x40020058
 80043ac:	40020070 	.word	0x40020070
 80043b0:	40020088 	.word	0x40020088
 80043b4:	400200a0 	.word	0x400200a0
 80043b8:	400200b8 	.word	0x400200b8
 80043bc:	40020410 	.word	0x40020410
 80043c0:	40020428 	.word	0x40020428
 80043c4:	40020440 	.word	0x40020440
 80043c8:	40020458 	.word	0x40020458
 80043cc:	40020470 	.word	0x40020470
 80043d0:	40020488 	.word	0x40020488
 80043d4:	400204a0 	.word	0x400204a0
 80043d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1c8      	bne.n	800437c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4b83      	ldr	r3, [pc, #524]	@ (8004604 <HAL_DMA_Init+0x420>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004402:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800440e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800441a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	2b04      	cmp	r3, #4
 800442e:	d107      	bne.n	8004440 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004438:	4313      	orrs	r3, r2
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b28      	cmp	r3, #40	@ 0x28
 8004446:	d903      	bls.n	8004450 <HAL_DMA_Init+0x26c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b2e      	cmp	r3, #46	@ 0x2e
 800444e:	d91f      	bls.n	8004490 <HAL_DMA_Init+0x2ac>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b3e      	cmp	r3, #62	@ 0x3e
 8004456:	d903      	bls.n	8004460 <HAL_DMA_Init+0x27c>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b42      	cmp	r3, #66	@ 0x42
 800445e:	d917      	bls.n	8004490 <HAL_DMA_Init+0x2ac>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b46      	cmp	r3, #70	@ 0x46
 8004466:	d903      	bls.n	8004470 <HAL_DMA_Init+0x28c>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b48      	cmp	r3, #72	@ 0x48
 800446e:	d90f      	bls.n	8004490 <HAL_DMA_Init+0x2ac>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b4e      	cmp	r3, #78	@ 0x4e
 8004476:	d903      	bls.n	8004480 <HAL_DMA_Init+0x29c>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b52      	cmp	r3, #82	@ 0x52
 800447e:	d907      	bls.n	8004490 <HAL_DMA_Init+0x2ac>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b73      	cmp	r3, #115	@ 0x73
 8004486:	d905      	bls.n	8004494 <HAL_DMA_Init+0x2b0>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b77      	cmp	r3, #119	@ 0x77
 800448e:	d801      	bhi.n	8004494 <HAL_DMA_Init+0x2b0>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_DMA_Init+0x2b2>
 8004494:	2300      	movs	r3, #0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044a0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f023 0307 	bic.w	r3, r3, #7
 80044b8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d117      	bne.n	80044fc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00e      	beq.n	80044fc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f001 f9b4 	bl	800584c <DMA_CheckFifoParam>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2240      	movs	r2, #64	@ 0x40
 80044ee:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e192      	b.n	8004822 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f001 f8ef 	bl	80056e8 <DMA_CalcBaseAndBitshift>
 800450a:	4603      	mov	r3, r0
 800450c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	223f      	movs	r2, #63	@ 0x3f
 8004518:	409a      	lsls	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	609a      	str	r2, [r3, #8]
 800451e:	e0c8      	b.n	80046b2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a38      	ldr	r2, [pc, #224]	@ (8004608 <HAL_DMA_Init+0x424>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d022      	beq.n	8004570 <HAL_DMA_Init+0x38c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a37      	ldr	r2, [pc, #220]	@ (800460c <HAL_DMA_Init+0x428>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d01d      	beq.n	8004570 <HAL_DMA_Init+0x38c>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a35      	ldr	r2, [pc, #212]	@ (8004610 <HAL_DMA_Init+0x42c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d018      	beq.n	8004570 <HAL_DMA_Init+0x38c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a34      	ldr	r2, [pc, #208]	@ (8004614 <HAL_DMA_Init+0x430>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d013      	beq.n	8004570 <HAL_DMA_Init+0x38c>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a32      	ldr	r2, [pc, #200]	@ (8004618 <HAL_DMA_Init+0x434>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00e      	beq.n	8004570 <HAL_DMA_Init+0x38c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a31      	ldr	r2, [pc, #196]	@ (800461c <HAL_DMA_Init+0x438>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_DMA_Init+0x38c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a2f      	ldr	r2, [pc, #188]	@ (8004620 <HAL_DMA_Init+0x43c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_DMA_Init+0x38c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2e      	ldr	r2, [pc, #184]	@ (8004624 <HAL_DMA_Init+0x440>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_DMA_Init+0x390>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <HAL_DMA_Init+0x392>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 8092 	beq.w	80046a0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a21      	ldr	r2, [pc, #132]	@ (8004608 <HAL_DMA_Init+0x424>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d021      	beq.n	80045ca <HAL_DMA_Init+0x3e6>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a20      	ldr	r2, [pc, #128]	@ (800460c <HAL_DMA_Init+0x428>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d01c      	beq.n	80045ca <HAL_DMA_Init+0x3e6>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1e      	ldr	r2, [pc, #120]	@ (8004610 <HAL_DMA_Init+0x42c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d017      	beq.n	80045ca <HAL_DMA_Init+0x3e6>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <HAL_DMA_Init+0x430>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d012      	beq.n	80045ca <HAL_DMA_Init+0x3e6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004618 <HAL_DMA_Init+0x434>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00d      	beq.n	80045ca <HAL_DMA_Init+0x3e6>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1a      	ldr	r2, [pc, #104]	@ (800461c <HAL_DMA_Init+0x438>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d008      	beq.n	80045ca <HAL_DMA_Init+0x3e6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a18      	ldr	r2, [pc, #96]	@ (8004620 <HAL_DMA_Init+0x43c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <HAL_DMA_Init+0x3e6>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a17      	ldr	r2, [pc, #92]	@ (8004624 <HAL_DMA_Init+0x440>)
 80045c8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2202      	movs	r2, #2
 80045ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4b10      	ldr	r3, [pc, #64]	@ (8004628 <HAL_DMA_Init+0x444>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b40      	cmp	r3, #64	@ 0x40
 80045f0:	d01c      	beq.n	800462c <HAL_DMA_Init+0x448>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b80      	cmp	r3, #128	@ 0x80
 80045f8:	d102      	bne.n	8004600 <HAL_DMA_Init+0x41c>
 80045fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045fe:	e016      	b.n	800462e <HAL_DMA_Init+0x44a>
 8004600:	2300      	movs	r3, #0
 8004602:	e014      	b.n	800462e <HAL_DMA_Init+0x44a>
 8004604:	fe10803f 	.word	0xfe10803f
 8004608:	58025408 	.word	0x58025408
 800460c:	5802541c 	.word	0x5802541c
 8004610:	58025430 	.word	0x58025430
 8004614:	58025444 	.word	0x58025444
 8004618:	58025458 	.word	0x58025458
 800461c:	5802546c 	.word	0x5802546c
 8004620:	58025480 	.word	0x58025480
 8004624:	58025494 	.word	0x58025494
 8004628:	fffe000f 	.word	0xfffe000f
 800462c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68d2      	ldr	r2, [r2, #12]
 8004632:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004634:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800463c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004644:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800464c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004654:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800465c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	4b6e      	ldr	r3, [pc, #440]	@ (800482c <HAL_DMA_Init+0x648>)
 8004674:	4413      	add	r3, r2
 8004676:	4a6e      	ldr	r2, [pc, #440]	@ (8004830 <HAL_DMA_Init+0x64c>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	009a      	lsls	r2, r3, #2
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f001 f82f 	bl	80056e8 <DMA_CalcBaseAndBitshift>
 800468a:	4603      	mov	r3, r0
 800468c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	2201      	movs	r2, #1
 8004698:	409a      	lsls	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	e008      	b.n	80046b2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2240      	movs	r2, #64	@ 0x40
 80046a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2203      	movs	r2, #3
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e0b7      	b.n	8004822 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a5f      	ldr	r2, [pc, #380]	@ (8004834 <HAL_DMA_Init+0x650>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d072      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5d      	ldr	r2, [pc, #372]	@ (8004838 <HAL_DMA_Init+0x654>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d06d      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a5c      	ldr	r2, [pc, #368]	@ (800483c <HAL_DMA_Init+0x658>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d068      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a5a      	ldr	r2, [pc, #360]	@ (8004840 <HAL_DMA_Init+0x65c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d063      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a59      	ldr	r2, [pc, #356]	@ (8004844 <HAL_DMA_Init+0x660>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d05e      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a57      	ldr	r2, [pc, #348]	@ (8004848 <HAL_DMA_Init+0x664>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d059      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a56      	ldr	r2, [pc, #344]	@ (800484c <HAL_DMA_Init+0x668>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d054      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a54      	ldr	r2, [pc, #336]	@ (8004850 <HAL_DMA_Init+0x66c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d04f      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a53      	ldr	r2, [pc, #332]	@ (8004854 <HAL_DMA_Init+0x670>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d04a      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a51      	ldr	r2, [pc, #324]	@ (8004858 <HAL_DMA_Init+0x674>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d045      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a50      	ldr	r2, [pc, #320]	@ (800485c <HAL_DMA_Init+0x678>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d040      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a4e      	ldr	r2, [pc, #312]	@ (8004860 <HAL_DMA_Init+0x67c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d03b      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a4d      	ldr	r2, [pc, #308]	@ (8004864 <HAL_DMA_Init+0x680>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d036      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a4b      	ldr	r2, [pc, #300]	@ (8004868 <HAL_DMA_Init+0x684>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d031      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a4a      	ldr	r2, [pc, #296]	@ (800486c <HAL_DMA_Init+0x688>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d02c      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a48      	ldr	r2, [pc, #288]	@ (8004870 <HAL_DMA_Init+0x68c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d027      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a47      	ldr	r2, [pc, #284]	@ (8004874 <HAL_DMA_Init+0x690>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d022      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a45      	ldr	r2, [pc, #276]	@ (8004878 <HAL_DMA_Init+0x694>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01d      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a44      	ldr	r2, [pc, #272]	@ (800487c <HAL_DMA_Init+0x698>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d018      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a42      	ldr	r2, [pc, #264]	@ (8004880 <HAL_DMA_Init+0x69c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a41      	ldr	r2, [pc, #260]	@ (8004884 <HAL_DMA_Init+0x6a0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00e      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a3f      	ldr	r2, [pc, #252]	@ (8004888 <HAL_DMA_Init+0x6a4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d009      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a3e      	ldr	r2, [pc, #248]	@ (800488c <HAL_DMA_Init+0x6a8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <HAL_DMA_Init+0x5be>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a3c      	ldr	r2, [pc, #240]	@ (8004890 <HAL_DMA_Init+0x6ac>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <HAL_DMA_Init+0x5c2>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <HAL_DMA_Init+0x5c4>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d032      	beq.n	8004812 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f001 f8c9 	bl	8005944 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b80      	cmp	r3, #128	@ 0x80
 80047b8:	d102      	bne.n	80047c0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80047d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d010      	beq.n	8004800 <HAL_DMA_Init+0x61c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d80c      	bhi.n	8004800 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f001 f946 	bl	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	e008      	b.n	8004812 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	a7fdabf8 	.word	0xa7fdabf8
 8004830:	cccccccd 	.word	0xcccccccd
 8004834:	40020010 	.word	0x40020010
 8004838:	40020028 	.word	0x40020028
 800483c:	40020040 	.word	0x40020040
 8004840:	40020058 	.word	0x40020058
 8004844:	40020070 	.word	0x40020070
 8004848:	40020088 	.word	0x40020088
 800484c:	400200a0 	.word	0x400200a0
 8004850:	400200b8 	.word	0x400200b8
 8004854:	40020410 	.word	0x40020410
 8004858:	40020428 	.word	0x40020428
 800485c:	40020440 	.word	0x40020440
 8004860:	40020458 	.word	0x40020458
 8004864:	40020470 	.word	0x40020470
 8004868:	40020488 	.word	0x40020488
 800486c:	400204a0 	.word	0x400204a0
 8004870:	400204b8 	.word	0x400204b8
 8004874:	58025408 	.word	0x58025408
 8004878:	5802541c 	.word	0x5802541c
 800487c:	58025430 	.word	0x58025430
 8004880:	58025444 	.word	0x58025444
 8004884:	58025458 	.word	0x58025458
 8004888:	5802546c 	.word	0x5802546c
 800488c:	58025480 	.word	0x58025480
 8004890:	58025494 	.word	0x58025494

08004894 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	@ 0x28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048a0:	4b67      	ldr	r3, [pc, #412]	@ (8004a40 <HAL_DMA_IRQHandler+0x1ac>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a67      	ldr	r2, [pc, #412]	@ (8004a44 <HAL_DMA_IRQHandler+0x1b0>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	0a9b      	lsrs	r3, r3, #10
 80048ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a5f      	ldr	r2, [pc, #380]	@ (8004a48 <HAL_DMA_IRQHandler+0x1b4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d04a      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a5d      	ldr	r2, [pc, #372]	@ (8004a4c <HAL_DMA_IRQHandler+0x1b8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d045      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a5c      	ldr	r2, [pc, #368]	@ (8004a50 <HAL_DMA_IRQHandler+0x1bc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d040      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004a54 <HAL_DMA_IRQHandler+0x1c0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d03b      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a59      	ldr	r2, [pc, #356]	@ (8004a58 <HAL_DMA_IRQHandler+0x1c4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d036      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a57      	ldr	r2, [pc, #348]	@ (8004a5c <HAL_DMA_IRQHandler+0x1c8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d031      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a56      	ldr	r2, [pc, #344]	@ (8004a60 <HAL_DMA_IRQHandler+0x1cc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d02c      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a54      	ldr	r2, [pc, #336]	@ (8004a64 <HAL_DMA_IRQHandler+0x1d0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d027      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a53      	ldr	r2, [pc, #332]	@ (8004a68 <HAL_DMA_IRQHandler+0x1d4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d022      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a51      	ldr	r2, [pc, #324]	@ (8004a6c <HAL_DMA_IRQHandler+0x1d8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d01d      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a50      	ldr	r2, [pc, #320]	@ (8004a70 <HAL_DMA_IRQHandler+0x1dc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d018      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a4e      	ldr	r2, [pc, #312]	@ (8004a74 <HAL_DMA_IRQHandler+0x1e0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a4d      	ldr	r2, [pc, #308]	@ (8004a78 <HAL_DMA_IRQHandler+0x1e4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00e      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a4b      	ldr	r2, [pc, #300]	@ (8004a7c <HAL_DMA_IRQHandler+0x1e8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d009      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a4a      	ldr	r2, [pc, #296]	@ (8004a80 <HAL_DMA_IRQHandler+0x1ec>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d004      	beq.n	8004966 <HAL_DMA_IRQHandler+0xd2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a48      	ldr	r2, [pc, #288]	@ (8004a84 <HAL_DMA_IRQHandler+0x1f0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d101      	bne.n	800496a <HAL_DMA_IRQHandler+0xd6>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <HAL_DMA_IRQHandler+0xd8>
 800496a:	2300      	movs	r3, #0
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 842b 	beq.w	80051c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	2208      	movs	r2, #8
 800497c:	409a      	lsls	r2, r3
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80a2 	beq.w	8004acc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a48 <HAL_DMA_IRQHandler+0x1b4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d04a      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a2d      	ldr	r2, [pc, #180]	@ (8004a4c <HAL_DMA_IRQHandler+0x1b8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d045      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004a50 <HAL_DMA_IRQHandler+0x1bc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d040      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004a54 <HAL_DMA_IRQHandler+0x1c0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d03b      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a28      	ldr	r2, [pc, #160]	@ (8004a58 <HAL_DMA_IRQHandler+0x1c4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d036      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a27      	ldr	r2, [pc, #156]	@ (8004a5c <HAL_DMA_IRQHandler+0x1c8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d031      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a25      	ldr	r2, [pc, #148]	@ (8004a60 <HAL_DMA_IRQHandler+0x1cc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d02c      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a24      	ldr	r2, [pc, #144]	@ (8004a64 <HAL_DMA_IRQHandler+0x1d0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d027      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a22      	ldr	r2, [pc, #136]	@ (8004a68 <HAL_DMA_IRQHandler+0x1d4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d022      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a21      	ldr	r2, [pc, #132]	@ (8004a6c <HAL_DMA_IRQHandler+0x1d8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d01d      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004a70 <HAL_DMA_IRQHandler+0x1dc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d018      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004a74 <HAL_DMA_IRQHandler+0x1e0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d013      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1c      	ldr	r2, [pc, #112]	@ (8004a78 <HAL_DMA_IRQHandler+0x1e4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00e      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8004a7c <HAL_DMA_IRQHandler+0x1e8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d009      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a19      	ldr	r2, [pc, #100]	@ (8004a80 <HAL_DMA_IRQHandler+0x1ec>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x194>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a18      	ldr	r2, [pc, #96]	@ (8004a84 <HAL_DMA_IRQHandler+0x1f0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d12f      	bne.n	8004a88 <HAL_DMA_IRQHandler+0x1f4>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf14      	ite	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	2300      	moveq	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	e02e      	b.n	8004a9c <HAL_DMA_IRQHandler+0x208>
 8004a3e:	bf00      	nop
 8004a40:	24000000 	.word	0x24000000
 8004a44:	1b4e81b5 	.word	0x1b4e81b5
 8004a48:	40020010 	.word	0x40020010
 8004a4c:	40020028 	.word	0x40020028
 8004a50:	40020040 	.word	0x40020040
 8004a54:	40020058 	.word	0x40020058
 8004a58:	40020070 	.word	0x40020070
 8004a5c:	40020088 	.word	0x40020088
 8004a60:	400200a0 	.word	0x400200a0
 8004a64:	400200b8 	.word	0x400200b8
 8004a68:	40020410 	.word	0x40020410
 8004a6c:	40020428 	.word	0x40020428
 8004a70:	40020440 	.word	0x40020440
 8004a74:	40020458 	.word	0x40020458
 8004a78:	40020470 	.word	0x40020470
 8004a7c:	40020488 	.word	0x40020488
 8004a80:	400204a0 	.word	0x400204a0
 8004a84:	400204b8 	.word	0x400204b8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bf14      	ite	ne
 8004a96:	2301      	movne	r3, #1
 8004a98:	2300      	moveq	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d015      	beq.n	8004acc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0204 	bic.w	r2, r2, #4
 8004aae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	2208      	movs	r2, #8
 8004aba:	409a      	lsls	r2, r3
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d06e      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a69      	ldr	r2, [pc, #420]	@ (8004c8c <HAL_DMA_IRQHandler+0x3f8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d04a      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a67      	ldr	r2, [pc, #412]	@ (8004c90 <HAL_DMA_IRQHandler+0x3fc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d045      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a66      	ldr	r2, [pc, #408]	@ (8004c94 <HAL_DMA_IRQHandler+0x400>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d040      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a64      	ldr	r2, [pc, #400]	@ (8004c98 <HAL_DMA_IRQHandler+0x404>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d03b      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a63      	ldr	r2, [pc, #396]	@ (8004c9c <HAL_DMA_IRQHandler+0x408>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d036      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a61      	ldr	r2, [pc, #388]	@ (8004ca0 <HAL_DMA_IRQHandler+0x40c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d031      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a60      	ldr	r2, [pc, #384]	@ (8004ca4 <HAL_DMA_IRQHandler+0x410>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d02c      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ca8 <HAL_DMA_IRQHandler+0x414>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d027      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a5d      	ldr	r2, [pc, #372]	@ (8004cac <HAL_DMA_IRQHandler+0x418>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d022      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a5b      	ldr	r2, [pc, #364]	@ (8004cb0 <HAL_DMA_IRQHandler+0x41c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d01d      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a5a      	ldr	r2, [pc, #360]	@ (8004cb4 <HAL_DMA_IRQHandler+0x420>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d018      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a58      	ldr	r2, [pc, #352]	@ (8004cb8 <HAL_DMA_IRQHandler+0x424>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a57      	ldr	r2, [pc, #348]	@ (8004cbc <HAL_DMA_IRQHandler+0x428>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00e      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a55      	ldr	r2, [pc, #340]	@ (8004cc0 <HAL_DMA_IRQHandler+0x42c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a54      	ldr	r2, [pc, #336]	@ (8004cc4 <HAL_DMA_IRQHandler+0x430>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d004      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2ee>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a52      	ldr	r2, [pc, #328]	@ (8004cc8 <HAL_DMA_IRQHandler+0x434>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d10a      	bne.n	8004b98 <HAL_DMA_IRQHandler+0x304>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	e003      	b.n	8004ba0 <HAL_DMA_IRQHandler+0x30c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00d      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	2201      	movs	r2, #1
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb8:	f043 0202 	orr.w	r2, r3, #2
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2204      	movs	r2, #4
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 808f 	beq.w	8004cf4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a2c      	ldr	r2, [pc, #176]	@ (8004c8c <HAL_DMA_IRQHandler+0x3f8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d04a      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a2a      	ldr	r2, [pc, #168]	@ (8004c90 <HAL_DMA_IRQHandler+0x3fc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d045      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a29      	ldr	r2, [pc, #164]	@ (8004c94 <HAL_DMA_IRQHandler+0x400>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d040      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a27      	ldr	r2, [pc, #156]	@ (8004c98 <HAL_DMA_IRQHandler+0x404>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d03b      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a26      	ldr	r2, [pc, #152]	@ (8004c9c <HAL_DMA_IRQHandler+0x408>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d036      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a24      	ldr	r2, [pc, #144]	@ (8004ca0 <HAL_DMA_IRQHandler+0x40c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d031      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a23      	ldr	r2, [pc, #140]	@ (8004ca4 <HAL_DMA_IRQHandler+0x410>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d02c      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a21      	ldr	r2, [pc, #132]	@ (8004ca8 <HAL_DMA_IRQHandler+0x414>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d027      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a20      	ldr	r2, [pc, #128]	@ (8004cac <HAL_DMA_IRQHandler+0x418>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d022      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb0 <HAL_DMA_IRQHandler+0x41c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01d      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb4 <HAL_DMA_IRQHandler+0x420>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d018      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb8 <HAL_DMA_IRQHandler+0x424>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1a      	ldr	r2, [pc, #104]	@ (8004cbc <HAL_DMA_IRQHandler+0x428>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00e      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a18      	ldr	r2, [pc, #96]	@ (8004cc0 <HAL_DMA_IRQHandler+0x42c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d009      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a17      	ldr	r2, [pc, #92]	@ (8004cc4 <HAL_DMA_IRQHandler+0x430>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d004      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x3e2>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a15      	ldr	r2, [pc, #84]	@ (8004cc8 <HAL_DMA_IRQHandler+0x434>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d12a      	bne.n	8004ccc <HAL_DMA_IRQHandler+0x438>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf14      	ite	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	2300      	moveq	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	e023      	b.n	8004cd4 <HAL_DMA_IRQHandler+0x440>
 8004c8c:	40020010 	.word	0x40020010
 8004c90:	40020028 	.word	0x40020028
 8004c94:	40020040 	.word	0x40020040
 8004c98:	40020058 	.word	0x40020058
 8004c9c:	40020070 	.word	0x40020070
 8004ca0:	40020088 	.word	0x40020088
 8004ca4:	400200a0 	.word	0x400200a0
 8004ca8:	400200b8 	.word	0x400200b8
 8004cac:	40020410 	.word	0x40020410
 8004cb0:	40020428 	.word	0x40020428
 8004cb4:	40020440 	.word	0x40020440
 8004cb8:	40020458 	.word	0x40020458
 8004cbc:	40020470 	.word	0x40020470
 8004cc0:	40020488 	.word	0x40020488
 8004cc4:	400204a0 	.word	0x400204a0
 8004cc8:	400204b8 	.word	0x400204b8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00d      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	409a      	lsls	r2, r3
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cec:	f043 0204 	orr.w	r2, r3, #4
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	2210      	movs	r2, #16
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 80a6 	beq.w	8004e56 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a85      	ldr	r2, [pc, #532]	@ (8004f24 <HAL_DMA_IRQHandler+0x690>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d04a      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a83      	ldr	r2, [pc, #524]	@ (8004f28 <HAL_DMA_IRQHandler+0x694>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d045      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a82      	ldr	r2, [pc, #520]	@ (8004f2c <HAL_DMA_IRQHandler+0x698>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d040      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a80      	ldr	r2, [pc, #512]	@ (8004f30 <HAL_DMA_IRQHandler+0x69c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d03b      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a7f      	ldr	r2, [pc, #508]	@ (8004f34 <HAL_DMA_IRQHandler+0x6a0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d036      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a7d      	ldr	r2, [pc, #500]	@ (8004f38 <HAL_DMA_IRQHandler+0x6a4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d031      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f3c <HAL_DMA_IRQHandler+0x6a8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d02c      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a7a      	ldr	r2, [pc, #488]	@ (8004f40 <HAL_DMA_IRQHandler+0x6ac>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d027      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a79      	ldr	r2, [pc, #484]	@ (8004f44 <HAL_DMA_IRQHandler+0x6b0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d022      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a77      	ldr	r2, [pc, #476]	@ (8004f48 <HAL_DMA_IRQHandler+0x6b4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01d      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a76      	ldr	r2, [pc, #472]	@ (8004f4c <HAL_DMA_IRQHandler+0x6b8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d018      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a74      	ldr	r2, [pc, #464]	@ (8004f50 <HAL_DMA_IRQHandler+0x6bc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a73      	ldr	r2, [pc, #460]	@ (8004f54 <HAL_DMA_IRQHandler+0x6c0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00e      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a71      	ldr	r2, [pc, #452]	@ (8004f58 <HAL_DMA_IRQHandler+0x6c4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d009      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a70      	ldr	r2, [pc, #448]	@ (8004f5c <HAL_DMA_IRQHandler+0x6c8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <HAL_DMA_IRQHandler+0x516>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a6e      	ldr	r2, [pc, #440]	@ (8004f60 <HAL_DMA_IRQHandler+0x6cc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d10a      	bne.n	8004dc0 <HAL_DMA_IRQHandler+0x52c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bf14      	ite	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	2300      	moveq	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e009      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x540>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bf14      	ite	ne
 8004dce:	2301      	movne	r3, #1
 8004dd0:	2300      	moveq	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d03e      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	2210      	movs	r2, #16
 8004de2:	409a      	lsls	r2, r3
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d018      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d108      	bne.n	8004e16 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d024      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	4798      	blx	r3
 8004e14:	e01f      	b.n	8004e56 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d01b      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
 8004e26:	e016      	b.n	8004e56 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d107      	bne.n	8004e46 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0208 	bic.w	r2, r2, #8
 8004e44:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5a:	f003 031f 	and.w	r3, r3, #31
 8004e5e:	2220      	movs	r2, #32
 8004e60:	409a      	lsls	r2, r3
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 8110 	beq.w	800508c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2c      	ldr	r2, [pc, #176]	@ (8004f24 <HAL_DMA_IRQHandler+0x690>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d04a      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004f28 <HAL_DMA_IRQHandler+0x694>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d045      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a29      	ldr	r2, [pc, #164]	@ (8004f2c <HAL_DMA_IRQHandler+0x698>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d040      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a28      	ldr	r2, [pc, #160]	@ (8004f30 <HAL_DMA_IRQHandler+0x69c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d03b      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a26      	ldr	r2, [pc, #152]	@ (8004f34 <HAL_DMA_IRQHandler+0x6a0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d036      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a25      	ldr	r2, [pc, #148]	@ (8004f38 <HAL_DMA_IRQHandler+0x6a4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d031      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a23      	ldr	r2, [pc, #140]	@ (8004f3c <HAL_DMA_IRQHandler+0x6a8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d02c      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a22      	ldr	r2, [pc, #136]	@ (8004f40 <HAL_DMA_IRQHandler+0x6ac>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d027      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a20      	ldr	r2, [pc, #128]	@ (8004f44 <HAL_DMA_IRQHandler+0x6b0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d022      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1f      	ldr	r2, [pc, #124]	@ (8004f48 <HAL_DMA_IRQHandler+0x6b4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d01d      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f4c <HAL_DMA_IRQHandler+0x6b8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d018      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1c      	ldr	r2, [pc, #112]	@ (8004f50 <HAL_DMA_IRQHandler+0x6bc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d013      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f54 <HAL_DMA_IRQHandler+0x6c0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00e      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a19      	ldr	r2, [pc, #100]	@ (8004f58 <HAL_DMA_IRQHandler+0x6c4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a17      	ldr	r2, [pc, #92]	@ (8004f5c <HAL_DMA_IRQHandler+0x6c8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x678>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a16      	ldr	r2, [pc, #88]	@ (8004f60 <HAL_DMA_IRQHandler+0x6cc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d12b      	bne.n	8004f64 <HAL_DMA_IRQHandler+0x6d0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bf14      	ite	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	2300      	moveq	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	e02a      	b.n	8004f78 <HAL_DMA_IRQHandler+0x6e4>
 8004f22:	bf00      	nop
 8004f24:	40020010 	.word	0x40020010
 8004f28:	40020028 	.word	0x40020028
 8004f2c:	40020040 	.word	0x40020040
 8004f30:	40020058 	.word	0x40020058
 8004f34:	40020070 	.word	0x40020070
 8004f38:	40020088 	.word	0x40020088
 8004f3c:	400200a0 	.word	0x400200a0
 8004f40:	400200b8 	.word	0x400200b8
 8004f44:	40020410 	.word	0x40020410
 8004f48:	40020428 	.word	0x40020428
 8004f4c:	40020440 	.word	0x40020440
 8004f50:	40020458 	.word	0x40020458
 8004f54:	40020470 	.word	0x40020470
 8004f58:	40020488 	.word	0x40020488
 8004f5c:	400204a0 	.word	0x400204a0
 8004f60:	400204b8 	.word	0x400204b8
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	2300      	moveq	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8087 	beq.w	800508c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f82:	f003 031f 	and.w	r3, r3, #31
 8004f86:	2220      	movs	r2, #32
 8004f88:	409a      	lsls	r2, r3
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d139      	bne.n	800500e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0216 	bic.w	r2, r2, #22
 8004fa8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fb8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d103      	bne.n	8004fca <HAL_DMA_IRQHandler+0x736>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0208 	bic.w	r2, r2, #8
 8004fd8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	223f      	movs	r2, #63	@ 0x3f
 8004fe4:	409a      	lsls	r2, r3
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 834a 	beq.w	8005698 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4798      	blx	r3
          }
          return;
 800500c:	e344      	b.n	8005698 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d018      	beq.n	800504e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d108      	bne.n	800503c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502e:	2b00      	cmp	r3, #0
 8005030:	d02c      	beq.n	800508c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	4798      	blx	r3
 800503a:	e027      	b.n	800508c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d023      	beq.n	800508c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	4798      	blx	r3
 800504c:	e01e      	b.n	800508c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10f      	bne.n	800507c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0210 	bic.w	r2, r2, #16
 800506a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8306 	beq.w	80056a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8088 	beq.w	80051b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2204      	movs	r2, #4
 80050a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a7a      	ldr	r2, [pc, #488]	@ (800529c <HAL_DMA_IRQHandler+0xa08>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d04a      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a79      	ldr	r2, [pc, #484]	@ (80052a0 <HAL_DMA_IRQHandler+0xa0c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d045      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a77      	ldr	r2, [pc, #476]	@ (80052a4 <HAL_DMA_IRQHandler+0xa10>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d040      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a76      	ldr	r2, [pc, #472]	@ (80052a8 <HAL_DMA_IRQHandler+0xa14>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d03b      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a74      	ldr	r2, [pc, #464]	@ (80052ac <HAL_DMA_IRQHandler+0xa18>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d036      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a73      	ldr	r2, [pc, #460]	@ (80052b0 <HAL_DMA_IRQHandler+0xa1c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d031      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a71      	ldr	r2, [pc, #452]	@ (80052b4 <HAL_DMA_IRQHandler+0xa20>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d02c      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a70      	ldr	r2, [pc, #448]	@ (80052b8 <HAL_DMA_IRQHandler+0xa24>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d027      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a6e      	ldr	r2, [pc, #440]	@ (80052bc <HAL_DMA_IRQHandler+0xa28>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d022      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a6d      	ldr	r2, [pc, #436]	@ (80052c0 <HAL_DMA_IRQHandler+0xa2c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d01d      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a6b      	ldr	r2, [pc, #428]	@ (80052c4 <HAL_DMA_IRQHandler+0xa30>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d018      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6a      	ldr	r2, [pc, #424]	@ (80052c8 <HAL_DMA_IRQHandler+0xa34>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a68      	ldr	r2, [pc, #416]	@ (80052cc <HAL_DMA_IRQHandler+0xa38>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00e      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a67      	ldr	r2, [pc, #412]	@ (80052d0 <HAL_DMA_IRQHandler+0xa3c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d009      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a65      	ldr	r2, [pc, #404]	@ (80052d4 <HAL_DMA_IRQHandler+0xa40>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_DMA_IRQHandler+0x8b8>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a64      	ldr	r2, [pc, #400]	@ (80052d8 <HAL_DMA_IRQHandler+0xa44>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <HAL_DMA_IRQHandler+0x8ca>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0201 	bic.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	e007      	b.n	800516e <HAL_DMA_IRQHandler+0x8da>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3301      	adds	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005176:	429a      	cmp	r2, r3
 8005178:	d307      	bcc.n	800518a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1f2      	bne.n	800516e <HAL_DMA_IRQHandler+0x8da>
 8005188:	e000      	b.n	800518c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800518a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2203      	movs	r2, #3
 800519e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80051a2:	e003      	b.n	80051ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8272 	beq.w	80056a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	4798      	blx	r3
 80051c6:	e26c      	b.n	80056a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a43      	ldr	r2, [pc, #268]	@ (80052dc <HAL_DMA_IRQHandler+0xa48>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d022      	beq.n	8005218 <HAL_DMA_IRQHandler+0x984>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a42      	ldr	r2, [pc, #264]	@ (80052e0 <HAL_DMA_IRQHandler+0xa4c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d01d      	beq.n	8005218 <HAL_DMA_IRQHandler+0x984>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a40      	ldr	r2, [pc, #256]	@ (80052e4 <HAL_DMA_IRQHandler+0xa50>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d018      	beq.n	8005218 <HAL_DMA_IRQHandler+0x984>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a3f      	ldr	r2, [pc, #252]	@ (80052e8 <HAL_DMA_IRQHandler+0xa54>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <HAL_DMA_IRQHandler+0x984>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a3d      	ldr	r2, [pc, #244]	@ (80052ec <HAL_DMA_IRQHandler+0xa58>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00e      	beq.n	8005218 <HAL_DMA_IRQHandler+0x984>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a3c      	ldr	r2, [pc, #240]	@ (80052f0 <HAL_DMA_IRQHandler+0xa5c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d009      	beq.n	8005218 <HAL_DMA_IRQHandler+0x984>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a3a      	ldr	r2, [pc, #232]	@ (80052f4 <HAL_DMA_IRQHandler+0xa60>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_DMA_IRQHandler+0x984>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a39      	ldr	r2, [pc, #228]	@ (80052f8 <HAL_DMA_IRQHandler+0xa64>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d101      	bne.n	800521c <HAL_DMA_IRQHandler+0x988>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <HAL_DMA_IRQHandler+0x98a>
 800521c:	2300      	movs	r3, #0
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 823f 	beq.w	80056a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	2204      	movs	r2, #4
 8005236:	409a      	lsls	r2, r3
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80cd 	beq.w	80053dc <HAL_DMA_IRQHandler+0xb48>
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 80c7 	beq.w	80053dc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005252:	f003 031f 	and.w	r3, r3, #31
 8005256:	2204      	movs	r2, #4
 8005258:	409a      	lsls	r2, r3
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d049      	beq.n	80052fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d109      	bne.n	8005286 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 8210 	beq.w	800569c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005284:	e20a      	b.n	800569c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 8206 	beq.w	800569c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005298:	e200      	b.n	800569c <HAL_DMA_IRQHandler+0xe08>
 800529a:	bf00      	nop
 800529c:	40020010 	.word	0x40020010
 80052a0:	40020028 	.word	0x40020028
 80052a4:	40020040 	.word	0x40020040
 80052a8:	40020058 	.word	0x40020058
 80052ac:	40020070 	.word	0x40020070
 80052b0:	40020088 	.word	0x40020088
 80052b4:	400200a0 	.word	0x400200a0
 80052b8:	400200b8 	.word	0x400200b8
 80052bc:	40020410 	.word	0x40020410
 80052c0:	40020428 	.word	0x40020428
 80052c4:	40020440 	.word	0x40020440
 80052c8:	40020458 	.word	0x40020458
 80052cc:	40020470 	.word	0x40020470
 80052d0:	40020488 	.word	0x40020488
 80052d4:	400204a0 	.word	0x400204a0
 80052d8:	400204b8 	.word	0x400204b8
 80052dc:	58025408 	.word	0x58025408
 80052e0:	5802541c 	.word	0x5802541c
 80052e4:	58025430 	.word	0x58025430
 80052e8:	58025444 	.word	0x58025444
 80052ec:	58025458 	.word	0x58025458
 80052f0:	5802546c 	.word	0x5802546c
 80052f4:	58025480 	.word	0x58025480
 80052f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d160      	bne.n	80053c8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a7f      	ldr	r2, [pc, #508]	@ (8005508 <HAL_DMA_IRQHandler+0xc74>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d04a      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a7d      	ldr	r2, [pc, #500]	@ (800550c <HAL_DMA_IRQHandler+0xc78>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d045      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a7c      	ldr	r2, [pc, #496]	@ (8005510 <HAL_DMA_IRQHandler+0xc7c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d040      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a7a      	ldr	r2, [pc, #488]	@ (8005514 <HAL_DMA_IRQHandler+0xc80>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d03b      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a79      	ldr	r2, [pc, #484]	@ (8005518 <HAL_DMA_IRQHandler+0xc84>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d036      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a77      	ldr	r2, [pc, #476]	@ (800551c <HAL_DMA_IRQHandler+0xc88>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d031      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a76      	ldr	r2, [pc, #472]	@ (8005520 <HAL_DMA_IRQHandler+0xc8c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d02c      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a74      	ldr	r2, [pc, #464]	@ (8005524 <HAL_DMA_IRQHandler+0xc90>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d027      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a73      	ldr	r2, [pc, #460]	@ (8005528 <HAL_DMA_IRQHandler+0xc94>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d022      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a71      	ldr	r2, [pc, #452]	@ (800552c <HAL_DMA_IRQHandler+0xc98>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01d      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a70      	ldr	r2, [pc, #448]	@ (8005530 <HAL_DMA_IRQHandler+0xc9c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d018      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a6e      	ldr	r2, [pc, #440]	@ (8005534 <HAL_DMA_IRQHandler+0xca0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d013      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a6d      	ldr	r2, [pc, #436]	@ (8005538 <HAL_DMA_IRQHandler+0xca4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00e      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a6b      	ldr	r2, [pc, #428]	@ (800553c <HAL_DMA_IRQHandler+0xca8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d009      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a6a      	ldr	r2, [pc, #424]	@ (8005540 <HAL_DMA_IRQHandler+0xcac>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d004      	beq.n	80053a6 <HAL_DMA_IRQHandler+0xb12>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a68      	ldr	r2, [pc, #416]	@ (8005544 <HAL_DMA_IRQHandler+0xcb0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d108      	bne.n	80053b8 <HAL_DMA_IRQHandler+0xb24>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0208 	bic.w	r2, r2, #8
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	e007      	b.n	80053c8 <HAL_DMA_IRQHandler+0xb34>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0204 	bic.w	r2, r2, #4
 80053c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8165 	beq.w	800569c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053da:	e15f      	b.n	800569c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	2202      	movs	r2, #2
 80053e6:	409a      	lsls	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80c5 	beq.w	800557c <HAL_DMA_IRQHandler+0xce8>
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 80bf 	beq.w	800557c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	2202      	movs	r2, #2
 8005408:	409a      	lsls	r2, r3
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d018      	beq.n	800544a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 813a 	beq.w	80056a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005434:	e134      	b.n	80056a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8130 	beq.w	80056a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005448:	e12a      	b.n	80056a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	f040 8089 	bne.w	8005568 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2b      	ldr	r2, [pc, #172]	@ (8005508 <HAL_DMA_IRQHandler+0xc74>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d04a      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a29      	ldr	r2, [pc, #164]	@ (800550c <HAL_DMA_IRQHandler+0xc78>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d045      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a28      	ldr	r2, [pc, #160]	@ (8005510 <HAL_DMA_IRQHandler+0xc7c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d040      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a26      	ldr	r2, [pc, #152]	@ (8005514 <HAL_DMA_IRQHandler+0xc80>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d03b      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a25      	ldr	r2, [pc, #148]	@ (8005518 <HAL_DMA_IRQHandler+0xc84>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d036      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a23      	ldr	r2, [pc, #140]	@ (800551c <HAL_DMA_IRQHandler+0xc88>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d031      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a22      	ldr	r2, [pc, #136]	@ (8005520 <HAL_DMA_IRQHandler+0xc8c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d02c      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a20      	ldr	r2, [pc, #128]	@ (8005524 <HAL_DMA_IRQHandler+0xc90>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d027      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005528 <HAL_DMA_IRQHandler+0xc94>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d022      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1d      	ldr	r2, [pc, #116]	@ (800552c <HAL_DMA_IRQHandler+0xc98>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d01d      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1c      	ldr	r2, [pc, #112]	@ (8005530 <HAL_DMA_IRQHandler+0xc9c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d018      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005534 <HAL_DMA_IRQHandler+0xca0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a19      	ldr	r2, [pc, #100]	@ (8005538 <HAL_DMA_IRQHandler+0xca4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00e      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a17      	ldr	r2, [pc, #92]	@ (800553c <HAL_DMA_IRQHandler+0xca8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d009      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a16      	ldr	r2, [pc, #88]	@ (8005540 <HAL_DMA_IRQHandler+0xcac>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xc62>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a14      	ldr	r2, [pc, #80]	@ (8005544 <HAL_DMA_IRQHandler+0xcb0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d128      	bne.n	8005548 <HAL_DMA_IRQHandler+0xcb4>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0214 	bic.w	r2, r2, #20
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	e027      	b.n	8005558 <HAL_DMA_IRQHandler+0xcc4>
 8005508:	40020010 	.word	0x40020010
 800550c:	40020028 	.word	0x40020028
 8005510:	40020040 	.word	0x40020040
 8005514:	40020058 	.word	0x40020058
 8005518:	40020070 	.word	0x40020070
 800551c:	40020088 	.word	0x40020088
 8005520:	400200a0 	.word	0x400200a0
 8005524:	400200b8 	.word	0x400200b8
 8005528:	40020410 	.word	0x40020410
 800552c:	40020428 	.word	0x40020428
 8005530:	40020440 	.word	0x40020440
 8005534:	40020458 	.word	0x40020458
 8005538:	40020470 	.word	0x40020470
 800553c:	40020488 	.word	0x40020488
 8005540:	400204a0 	.word	0x400204a0
 8005544:	400204b8 	.word	0x400204b8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 020a 	bic.w	r2, r2, #10
 8005556:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8097 	beq.w	80056a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800557a:	e091      	b.n	80056a0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	2208      	movs	r2, #8
 8005586:	409a      	lsls	r2, r3
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4013      	ands	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 8088 	beq.w	80056a2 <HAL_DMA_IRQHandler+0xe0e>
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8082 	beq.w	80056a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a41      	ldr	r2, [pc, #260]	@ (80056a8 <HAL_DMA_IRQHandler+0xe14>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d04a      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a3f      	ldr	r2, [pc, #252]	@ (80056ac <HAL_DMA_IRQHandler+0xe18>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d045      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a3e      	ldr	r2, [pc, #248]	@ (80056b0 <HAL_DMA_IRQHandler+0xe1c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d040      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a3c      	ldr	r2, [pc, #240]	@ (80056b4 <HAL_DMA_IRQHandler+0xe20>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d03b      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a3b      	ldr	r2, [pc, #236]	@ (80056b8 <HAL_DMA_IRQHandler+0xe24>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d036      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a39      	ldr	r2, [pc, #228]	@ (80056bc <HAL_DMA_IRQHandler+0xe28>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d031      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a38      	ldr	r2, [pc, #224]	@ (80056c0 <HAL_DMA_IRQHandler+0xe2c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d02c      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a36      	ldr	r2, [pc, #216]	@ (80056c4 <HAL_DMA_IRQHandler+0xe30>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d027      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a35      	ldr	r2, [pc, #212]	@ (80056c8 <HAL_DMA_IRQHandler+0xe34>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d022      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a33      	ldr	r2, [pc, #204]	@ (80056cc <HAL_DMA_IRQHandler+0xe38>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01d      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a32      	ldr	r2, [pc, #200]	@ (80056d0 <HAL_DMA_IRQHandler+0xe3c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d018      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a30      	ldr	r2, [pc, #192]	@ (80056d4 <HAL_DMA_IRQHandler+0xe40>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d013      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a2f      	ldr	r2, [pc, #188]	@ (80056d8 <HAL_DMA_IRQHandler+0xe44>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00e      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a2d      	ldr	r2, [pc, #180]	@ (80056dc <HAL_DMA_IRQHandler+0xe48>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d009      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a2c      	ldr	r2, [pc, #176]	@ (80056e0 <HAL_DMA_IRQHandler+0xe4c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d004      	beq.n	800563e <HAL_DMA_IRQHandler+0xdaa>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a2a      	ldr	r2, [pc, #168]	@ (80056e4 <HAL_DMA_IRQHandler+0xe50>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d108      	bne.n	8005650 <HAL_DMA_IRQHandler+0xdbc>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 021c 	bic.w	r2, r2, #28
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e007      	b.n	8005660 <HAL_DMA_IRQHandler+0xdcc>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 020e 	bic.w	r2, r2, #14
 800565e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	2201      	movs	r2, #1
 800566a:	409a      	lsls	r2, r3
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
 8005696:	e004      	b.n	80056a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005698:	bf00      	nop
 800569a:	e002      	b.n	80056a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800569c:	bf00      	nop
 800569e:	e000      	b.n	80056a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80056a2:	3728      	adds	r7, #40	@ 0x28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40020010 	.word	0x40020010
 80056ac:	40020028 	.word	0x40020028
 80056b0:	40020040 	.word	0x40020040
 80056b4:	40020058 	.word	0x40020058
 80056b8:	40020070 	.word	0x40020070
 80056bc:	40020088 	.word	0x40020088
 80056c0:	400200a0 	.word	0x400200a0
 80056c4:	400200b8 	.word	0x400200b8
 80056c8:	40020410 	.word	0x40020410
 80056cc:	40020428 	.word	0x40020428
 80056d0:	40020440 	.word	0x40020440
 80056d4:	40020458 	.word	0x40020458
 80056d8:	40020470 	.word	0x40020470
 80056dc:	40020488 	.word	0x40020488
 80056e0:	400204a0 	.word	0x400204a0
 80056e4:	400204b8 	.word	0x400204b8

080056e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a42      	ldr	r2, [pc, #264]	@ (8005800 <DMA_CalcBaseAndBitshift+0x118>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d04a      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a41      	ldr	r2, [pc, #260]	@ (8005804 <DMA_CalcBaseAndBitshift+0x11c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d045      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a3f      	ldr	r2, [pc, #252]	@ (8005808 <DMA_CalcBaseAndBitshift+0x120>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d040      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a3e      	ldr	r2, [pc, #248]	@ (800580c <DMA_CalcBaseAndBitshift+0x124>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d03b      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a3c      	ldr	r2, [pc, #240]	@ (8005810 <DMA_CalcBaseAndBitshift+0x128>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d036      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a3b      	ldr	r2, [pc, #236]	@ (8005814 <DMA_CalcBaseAndBitshift+0x12c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d031      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a39      	ldr	r2, [pc, #228]	@ (8005818 <DMA_CalcBaseAndBitshift+0x130>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d02c      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a38      	ldr	r2, [pc, #224]	@ (800581c <DMA_CalcBaseAndBitshift+0x134>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d027      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a36      	ldr	r2, [pc, #216]	@ (8005820 <DMA_CalcBaseAndBitshift+0x138>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d022      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a35      	ldr	r2, [pc, #212]	@ (8005824 <DMA_CalcBaseAndBitshift+0x13c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d01d      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a33      	ldr	r2, [pc, #204]	@ (8005828 <DMA_CalcBaseAndBitshift+0x140>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d018      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a32      	ldr	r2, [pc, #200]	@ (800582c <DMA_CalcBaseAndBitshift+0x144>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d013      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a30      	ldr	r2, [pc, #192]	@ (8005830 <DMA_CalcBaseAndBitshift+0x148>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00e      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2f      	ldr	r2, [pc, #188]	@ (8005834 <DMA_CalcBaseAndBitshift+0x14c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d009      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a2d      	ldr	r2, [pc, #180]	@ (8005838 <DMA_CalcBaseAndBitshift+0x150>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a2c      	ldr	r2, [pc, #176]	@ (800583c <DMA_CalcBaseAndBitshift+0x154>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d101      	bne.n	8005794 <DMA_CalcBaseAndBitshift+0xac>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <DMA_CalcBaseAndBitshift+0xae>
 8005794:	2300      	movs	r3, #0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d024      	beq.n	80057e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	3b10      	subs	r3, #16
 80057a2:	4a27      	ldr	r2, [pc, #156]	@ (8005840 <DMA_CalcBaseAndBitshift+0x158>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	4a24      	ldr	r2, [pc, #144]	@ (8005844 <DMA_CalcBaseAndBitshift+0x15c>)
 80057b4:	5cd3      	ldrb	r3, [r2, r3]
 80057b6:	461a      	mov	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d908      	bls.n	80057d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005848 <DMA_CalcBaseAndBitshift+0x160>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	1d1a      	adds	r2, r3, #4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80057d2:	e00d      	b.n	80057f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	4b1b      	ldr	r3, [pc, #108]	@ (8005848 <DMA_CalcBaseAndBitshift+0x160>)
 80057dc:	4013      	ands	r3, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80057e2:	e005      	b.n	80057f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	40020010 	.word	0x40020010
 8005804:	40020028 	.word	0x40020028
 8005808:	40020040 	.word	0x40020040
 800580c:	40020058 	.word	0x40020058
 8005810:	40020070 	.word	0x40020070
 8005814:	40020088 	.word	0x40020088
 8005818:	400200a0 	.word	0x400200a0
 800581c:	400200b8 	.word	0x400200b8
 8005820:	40020410 	.word	0x40020410
 8005824:	40020428 	.word	0x40020428
 8005828:	40020440 	.word	0x40020440
 800582c:	40020458 	.word	0x40020458
 8005830:	40020470 	.word	0x40020470
 8005834:	40020488 	.word	0x40020488
 8005838:	400204a0 	.word	0x400204a0
 800583c:	400204b8 	.word	0x400204b8
 8005840:	aaaaaaab 	.word	0xaaaaaaab
 8005844:	08013fec 	.word	0x08013fec
 8005848:	fffffc00 	.word	0xfffffc00

0800584c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d120      	bne.n	80058a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	2b03      	cmp	r3, #3
 8005866:	d858      	bhi.n	800591a <DMA_CheckFifoParam+0xce>
 8005868:	a201      	add	r2, pc, #4	@ (adr r2, 8005870 <DMA_CheckFifoParam+0x24>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	08005881 	.word	0x08005881
 8005874:	08005893 	.word	0x08005893
 8005878:	08005881 	.word	0x08005881
 800587c:	0800591b 	.word	0x0800591b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d048      	beq.n	800591e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005890:	e045      	b.n	800591e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005896:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800589a:	d142      	bne.n	8005922 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058a0:	e03f      	b.n	8005922 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058aa:	d123      	bne.n	80058f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d838      	bhi.n	8005926 <DMA_CheckFifoParam+0xda>
 80058b4:	a201      	add	r2, pc, #4	@ (adr r2, 80058bc <DMA_CheckFifoParam+0x70>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	080058d3 	.word	0x080058d3
 80058c4:	080058cd 	.word	0x080058cd
 80058c8:	080058e5 	.word	0x080058e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
        break;
 80058d0:	e030      	b.n	8005934 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d025      	beq.n	800592a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058e2:	e022      	b.n	800592a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80058ec:	d11f      	bne.n	800592e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058f2:	e01c      	b.n	800592e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d902      	bls.n	8005902 <DMA_CheckFifoParam+0xb6>
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d003      	beq.n	8005908 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005900:	e018      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	73fb      	strb	r3, [r7, #15]
        break;
 8005906:	e015      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00e      	beq.n	8005932 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
    break;
 8005918:	e00b      	b.n	8005932 <DMA_CheckFifoParam+0xe6>
        break;
 800591a:	bf00      	nop
 800591c:	e00a      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        break;
 800591e:	bf00      	nop
 8005920:	e008      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        break;
 8005922:	bf00      	nop
 8005924:	e006      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        break;
 8005926:	bf00      	nop
 8005928:	e004      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        break;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
    break;
 8005932:	bf00      	nop
    }
  }

  return status;
 8005934:	7bfb      	ldrb	r3, [r7, #15]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop

08005944 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a38      	ldr	r2, [pc, #224]	@ (8005a38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d022      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a36      	ldr	r2, [pc, #216]	@ (8005a3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d01d      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a35      	ldr	r2, [pc, #212]	@ (8005a40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d018      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a33      	ldr	r2, [pc, #204]	@ (8005a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a32      	ldr	r2, [pc, #200]	@ (8005a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00e      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a30      	ldr	r2, [pc, #192]	@ (8005a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d009      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a2f      	ldr	r2, [pc, #188]	@ (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d004      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a2d      	ldr	r2, [pc, #180]	@ (8005a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d101      	bne.n	80059a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80059a6:	2300      	movs	r3, #0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01a      	beq.n	80059e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	3b08      	subs	r3, #8
 80059b4:	4a28      	ldr	r2, [pc, #160]	@ (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	091b      	lsrs	r3, r3, #4
 80059bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4b26      	ldr	r3, [pc, #152]	@ (8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	461a      	mov	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a24      	ldr	r2, [pc, #144]	@ (8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80059d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2201      	movs	r2, #1
 80059da:	409a      	lsls	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059e0:	e024      	b.n	8005a2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	3b10      	subs	r3, #16
 80059ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d806      	bhi.n	8005a0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4a1b      	ldr	r2, [pc, #108]	@ (8005a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d902      	bls.n	8005a0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3308      	adds	r3, #8
 8005a08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4b18      	ldr	r3, [pc, #96]	@ (8005a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	461a      	mov	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a16      	ldr	r2, [pc, #88]	@ (8005a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a1c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	2201      	movs	r2, #1
 8005a26:	409a      	lsls	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a2c:	bf00      	nop
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	58025408 	.word	0x58025408
 8005a3c:	5802541c 	.word	0x5802541c
 8005a40:	58025430 	.word	0x58025430
 8005a44:	58025444 	.word	0x58025444
 8005a48:	58025458 	.word	0x58025458
 8005a4c:	5802546c 	.word	0x5802546c
 8005a50:	58025480 	.word	0x58025480
 8005a54:	58025494 	.word	0x58025494
 8005a58:	cccccccd 	.word	0xcccccccd
 8005a5c:	16009600 	.word	0x16009600
 8005a60:	58025880 	.word	0x58025880
 8005a64:	aaaaaaab 	.word	0xaaaaaaab
 8005a68:	400204b8 	.word	0x400204b8
 8005a6c:	4002040f 	.word	0x4002040f
 8005a70:	10008200 	.word	0x10008200
 8005a74:	40020880 	.word	0x40020880

08005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d04a      	beq.n	8005b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d847      	bhi.n	8005b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a25      	ldr	r2, [pc, #148]	@ (8005b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d022      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a24      	ldr	r2, [pc, #144]	@ (8005b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d01d      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a22      	ldr	r2, [pc, #136]	@ (8005b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d018      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a21      	ldr	r2, [pc, #132]	@ (8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d013      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8005b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00e      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1e      	ldr	r2, [pc, #120]	@ (8005b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d009      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d004      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1b      	ldr	r2, [pc, #108]	@ (8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d101      	bne.n	8005ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4b17      	ldr	r3, [pc, #92]	@ (8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	461a      	mov	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a15      	ldr	r2, [pc, #84]	@ (8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b00:	671a      	str	r2, [r3, #112]	@ 0x70
 8005b02:	e009      	b.n	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4b14      	ldr	r3, [pc, #80]	@ (8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a11      	ldr	r2, [pc, #68]	@ (8005b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b16:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	58025408 	.word	0x58025408
 8005b34:	5802541c 	.word	0x5802541c
 8005b38:	58025430 	.word	0x58025430
 8005b3c:	58025444 	.word	0x58025444
 8005b40:	58025458 	.word	0x58025458
 8005b44:	5802546c 	.word	0x5802546c
 8005b48:	58025480 	.word	0x58025480
 8005b4c:	58025494 	.word	0x58025494
 8005b50:	1600963f 	.word	0x1600963f
 8005b54:	58025940 	.word	0x58025940
 8005b58:	1000823f 	.word	0x1000823f
 8005b5c:	40020940 	.word	0x40020940

08005b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b089      	sub	sp, #36	@ 0x24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b6e:	4b86      	ldr	r3, [pc, #536]	@ (8005d88 <HAL_GPIO_Init+0x228>)
 8005b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b72:	e18c      	b.n	8005e8e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	2101      	movs	r1, #1
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b80:	4013      	ands	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 817e 	beq.w	8005e88 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d005      	beq.n	8005ba4 <HAL_GPIO_Init+0x44>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d130      	bne.n	8005c06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	2203      	movs	r2, #3
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bda:	2201      	movs	r2, #1
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	091b      	lsrs	r3, r3, #4
 8005bf0:	f003 0201 	and.w	r2, r3, #1
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d017      	beq.n	8005c42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d123      	bne.n	8005c96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	08da      	lsrs	r2, r3, #3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3208      	adds	r2, #8
 8005c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	220f      	movs	r2, #15
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	08da      	lsrs	r2, r3, #3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3208      	adds	r2, #8
 8005c90:	69b9      	ldr	r1, [r7, #24]
 8005c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f003 0203 	and.w	r2, r3, #3
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 80d8 	beq.w	8005e88 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8005d8c <HAL_GPIO_Init+0x22c>)
 8005cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cde:	4a2b      	ldr	r2, [pc, #172]	@ (8005d8c <HAL_GPIO_Init+0x22c>)
 8005ce0:	f043 0302 	orr.w	r3, r3, #2
 8005ce4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005ce8:	4b28      	ldr	r3, [pc, #160]	@ (8005d8c <HAL_GPIO_Init+0x22c>)
 8005cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cf6:	4a26      	ldr	r2, [pc, #152]	@ (8005d90 <HAL_GPIO_Init+0x230>)
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	089b      	lsrs	r3, r3, #2
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	220f      	movs	r2, #15
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	43db      	mvns	r3, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4013      	ands	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005d94 <HAL_GPIO_Init+0x234>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d04a      	beq.n	8005db8 <HAL_GPIO_Init+0x258>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a1c      	ldr	r2, [pc, #112]	@ (8005d98 <HAL_GPIO_Init+0x238>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d02b      	beq.n	8005d82 <HAL_GPIO_Init+0x222>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d9c <HAL_GPIO_Init+0x23c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d025      	beq.n	8005d7e <HAL_GPIO_Init+0x21e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1a      	ldr	r2, [pc, #104]	@ (8005da0 <HAL_GPIO_Init+0x240>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d01f      	beq.n	8005d7a <HAL_GPIO_Init+0x21a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a19      	ldr	r2, [pc, #100]	@ (8005da4 <HAL_GPIO_Init+0x244>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d019      	beq.n	8005d76 <HAL_GPIO_Init+0x216>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a18      	ldr	r2, [pc, #96]	@ (8005da8 <HAL_GPIO_Init+0x248>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d013      	beq.n	8005d72 <HAL_GPIO_Init+0x212>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a17      	ldr	r2, [pc, #92]	@ (8005dac <HAL_GPIO_Init+0x24c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00d      	beq.n	8005d6e <HAL_GPIO_Init+0x20e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a16      	ldr	r2, [pc, #88]	@ (8005db0 <HAL_GPIO_Init+0x250>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d007      	beq.n	8005d6a <HAL_GPIO_Init+0x20a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a15      	ldr	r2, [pc, #84]	@ (8005db4 <HAL_GPIO_Init+0x254>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d101      	bne.n	8005d66 <HAL_GPIO_Init+0x206>
 8005d62:	2309      	movs	r3, #9
 8005d64:	e029      	b.n	8005dba <HAL_GPIO_Init+0x25a>
 8005d66:	230a      	movs	r3, #10
 8005d68:	e027      	b.n	8005dba <HAL_GPIO_Init+0x25a>
 8005d6a:	2307      	movs	r3, #7
 8005d6c:	e025      	b.n	8005dba <HAL_GPIO_Init+0x25a>
 8005d6e:	2306      	movs	r3, #6
 8005d70:	e023      	b.n	8005dba <HAL_GPIO_Init+0x25a>
 8005d72:	2305      	movs	r3, #5
 8005d74:	e021      	b.n	8005dba <HAL_GPIO_Init+0x25a>
 8005d76:	2304      	movs	r3, #4
 8005d78:	e01f      	b.n	8005dba <HAL_GPIO_Init+0x25a>
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e01d      	b.n	8005dba <HAL_GPIO_Init+0x25a>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e01b      	b.n	8005dba <HAL_GPIO_Init+0x25a>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e019      	b.n	8005dba <HAL_GPIO_Init+0x25a>
 8005d86:	bf00      	nop
 8005d88:	58000080 	.word	0x58000080
 8005d8c:	58024400 	.word	0x58024400
 8005d90:	58000400 	.word	0x58000400
 8005d94:	58020000 	.word	0x58020000
 8005d98:	58020400 	.word	0x58020400
 8005d9c:	58020800 	.word	0x58020800
 8005da0:	58020c00 	.word	0x58020c00
 8005da4:	58021000 	.word	0x58021000
 8005da8:	58021400 	.word	0x58021400
 8005dac:	58021800 	.word	0x58021800
 8005db0:	58021c00 	.word	0x58021c00
 8005db4:	58022400 	.word	0x58022400
 8005db8:	2300      	movs	r3, #0
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	f002 0203 	and.w	r2, r2, #3
 8005dc0:	0092      	lsls	r2, r2, #2
 8005dc2:	4093      	lsls	r3, r2
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dca:	4938      	ldr	r1, [pc, #224]	@ (8005eac <HAL_GPIO_Init+0x34c>)
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	43db      	mvns	r3, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4013      	ands	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005dfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	43db      	mvns	r3, r3
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4013      	ands	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4013      	ands	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	43db      	mvns	r3, r3
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f47f ae6b 	bne.w	8005b74 <HAL_GPIO_Init+0x14>
  }
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	3724      	adds	r7, #36	@ 0x24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	58000400 	.word	0x58000400

08005eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ec0:	787b      	ldrb	r3, [r7, #1]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ec6:	887a      	ldrh	r2, [r7, #2]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ecc:	e003      	b.n	8005ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ece:	887b      	ldrh	r3, [r7, #2]
 8005ed0:	041a      	lsls	r2, r3, #16
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	619a      	str	r2, [r3, #24]
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
	...

08005ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e08b      	b.n	800600e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fb fbc0 	bl	8001690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2224      	movs	r2, #36	@ 0x24
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0201 	bic.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005f34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d107      	bne.n	8005f5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	e006      	b.n	8005f6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005f6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d108      	bne.n	8005f86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f82:	605a      	str	r2, [r3, #4]
 8005f84:	e007      	b.n	8005f96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6859      	ldr	r1, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8006018 <HAL_I2C_Init+0x134>)
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69d9      	ldr	r1, [r3, #28]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1a      	ldr	r2, [r3, #32]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	02008000 	.word	0x02008000

0800601c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b20      	cmp	r3, #32
 8006030:	d138      	bne.n	80060a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800603c:	2302      	movs	r3, #2
 800603e:	e032      	b.n	80060a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2224      	movs	r2, #36	@ 0x24
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0201 	bic.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800606e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6819      	ldr	r1, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	e000      	b.n	80060a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060a4:	2302      	movs	r3, #2
  }
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b085      	sub	sp, #20
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d139      	bne.n	800613c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e033      	b.n	800613e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2224      	movs	r2, #36	@ 0x24
 80060e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006104:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	021b      	lsls	r3, r3, #8
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	e000      	b.n	800613e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800613c:	2302      	movs	r3, #2
  }
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b086      	sub	sp, #24
 800614e:	af02      	add	r7, sp, #8
 8006150:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e0fe      	b.n	800635a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d106      	bne.n	8006176 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f00a fe37 	bl	8010de4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2203      	movs	r2, #3
 800617a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f007 f9e1 	bl	800d54a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	7c1a      	ldrb	r2, [r3, #16]
 8006190:	f88d 2000 	strb.w	r2, [sp]
 8006194:	3304      	adds	r3, #4
 8006196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006198:	f007 f8b2 	bl	800d300 <USB_CoreInit>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2202      	movs	r2, #2
 80061a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e0d5      	b.n	800635a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f007 f9d9 	bl	800d56c <USB_SetCurrentMode>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0c6      	b.n	800635a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061cc:	2300      	movs	r3, #0
 80061ce:	73fb      	strb	r3, [r7, #15]
 80061d0:	e04a      	b.n	8006268 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80061d2:	7bfa      	ldrb	r2, [r7, #15]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4613      	mov	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	3315      	adds	r3, #21
 80061e2:	2201      	movs	r2, #1
 80061e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80061e6:	7bfa      	ldrb	r2, [r7, #15]
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4613      	mov	r3, r2
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	3314      	adds	r3, #20
 80061f6:	7bfa      	ldrb	r2, [r7, #15]
 80061f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80061fa:	7bfa      	ldrb	r2, [r7, #15]
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	b298      	uxth	r0, r3
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	332e      	adds	r3, #46	@ 0x2e
 800620e:	4602      	mov	r2, r0
 8006210:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006212:	7bfa      	ldrb	r2, [r7, #15]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	3318      	adds	r3, #24
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006226:	7bfa      	ldrb	r2, [r7, #15]
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	331c      	adds	r3, #28
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800623a:	7bfa      	ldrb	r2, [r7, #15]
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	4613      	mov	r3, r2
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	440b      	add	r3, r1
 8006248:	3320      	adds	r3, #32
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800624e:	7bfa      	ldrb	r2, [r7, #15]
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	3324      	adds	r3, #36	@ 0x24
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	3301      	adds	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	791b      	ldrb	r3, [r3, #4]
 800626c:	7bfa      	ldrb	r2, [r7, #15]
 800626e:	429a      	cmp	r2, r3
 8006270:	d3af      	bcc.n	80061d2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006272:	2300      	movs	r3, #0
 8006274:	73fb      	strb	r3, [r7, #15]
 8006276:	e044      	b.n	8006302 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006278:	7bfa      	ldrb	r2, [r7, #15]
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	4613      	mov	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	4413      	add	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800628e:	7bfa      	ldrb	r2, [r7, #15]
 8006290:	6879      	ldr	r1, [r7, #4]
 8006292:	4613      	mov	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80062a0:	7bfa      	ldrb	r2, [r7, #15]
 80062a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80062a4:	7bfa      	ldrb	r2, [r7, #15]
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80062ba:	7bfa      	ldrb	r2, [r7, #15]
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	4613      	mov	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80062d0:	7bfa      	ldrb	r2, [r7, #15]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80062e6:	7bfa      	ldrb	r2, [r7, #15]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	3301      	adds	r3, #1
 8006300:	73fb      	strb	r3, [r7, #15]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	791b      	ldrb	r3, [r3, #4]
 8006306:	7bfa      	ldrb	r2, [r7, #15]
 8006308:	429a      	cmp	r2, r3
 800630a:	d3b5      	bcc.n	8006278 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	7c1a      	ldrb	r2, [r3, #16]
 8006314:	f88d 2000 	strb.w	r2, [sp]
 8006318:	3304      	adds	r3, #4
 800631a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800631c:	f007 f972 	bl	800d604 <USB_DevInit>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d005      	beq.n	8006332 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2202      	movs	r2, #2
 800632a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e013      	b.n	800635a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	7b1b      	ldrb	r3, [r3, #12]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d102      	bne.n	800634e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 f96d 	bl	8007628 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f008 f9b1 	bl	800e6ba <USB_DevDisconnect>

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_PCD_Start+0x1c>
 800637a:	2302      	movs	r3, #2
 800637c:	e022      	b.n	80063c4 <HAL_PCD_Start+0x62>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006396:	2b01      	cmp	r3, #1
 8006398:	d105      	bne.n	80063a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f007 f8bc 	bl	800d528 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f008 f95f 	bl	800e678 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80063cc:	b590      	push	{r4, r7, lr}
 80063ce:	b08d      	sub	sp, #52	@ 0x34
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f008 fa1d 	bl	800e822 <USB_GetMode>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f040 84b9 	bne.w	8006d62 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f008 f981 	bl	800e6fc <USB_ReadInterrupts>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 84af 	beq.w	8006d60 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	0a1b      	lsrs	r3, r3, #8
 800640c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f008 f96e 	bl	800e6fc <USB_ReadInterrupts>
 8006420:	4603      	mov	r3, r0
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d107      	bne.n	800643a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695a      	ldr	r2, [r3, #20]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f002 0202 	and.w	r2, r2, #2
 8006438:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f008 f95c 	bl	800e6fc <USB_ReadInterrupts>
 8006444:	4603      	mov	r3, r0
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	2b10      	cmp	r3, #16
 800644c:	d161      	bne.n	8006512 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0210 	bic.w	r2, r2, #16
 800645c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f003 020f 	and.w	r2, r3, #15
 800646a:	4613      	mov	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	4413      	add	r3, r2
 800647a:	3304      	adds	r3, #4
 800647c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	0c5b      	lsrs	r3, r3, #17
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	2b02      	cmp	r3, #2
 8006488:	d124      	bne.n	80064d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d035      	beq.n	8006502 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80064a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	6a38      	ldr	r0, [r7, #32]
 80064aa:	f007 ff93 	bl	800e3d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	091b      	lsrs	r3, r3, #4
 80064b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064ba:	441a      	add	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	091b      	lsrs	r3, r3, #4
 80064c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064cc:	441a      	add	r2, r3
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	615a      	str	r2, [r3, #20]
 80064d2:	e016      	b.n	8006502 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	0c5b      	lsrs	r3, r3, #17
 80064d8:	f003 030f 	and.w	r3, r3, #15
 80064dc:	2b06      	cmp	r3, #6
 80064de:	d110      	bne.n	8006502 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80064e6:	2208      	movs	r2, #8
 80064e8:	4619      	mov	r1, r3
 80064ea:	6a38      	ldr	r0, [r7, #32]
 80064ec:	f007 ff72 	bl	800e3d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	695a      	ldr	r2, [r3, #20]
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064fc:	441a      	add	r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699a      	ldr	r2, [r3, #24]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0210 	orr.w	r2, r2, #16
 8006510:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f008 f8f0 	bl	800e6fc <USB_ReadInterrupts>
 800651c:	4603      	mov	r3, r0
 800651e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006522:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006526:	f040 80a7 	bne.w	8006678 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f008 f8f5 	bl	800e722 <USB_ReadDevAllOutEpInterrupt>
 8006538:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800653a:	e099      	b.n	8006670 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 808e 	beq.w	8006664 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	4611      	mov	r1, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f008 f919 	bl	800e78a <USB_ReadDevOutEPInterrupt>
 8006558:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00c      	beq.n	800657e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006570:	461a      	mov	r2, r3
 8006572:	2301      	movs	r3, #1
 8006574:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006576:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fecf 	bl	800731c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00c      	beq.n	80065a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006594:	461a      	mov	r2, r3
 8006596:	2308      	movs	r3, #8
 8006598:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800659a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 ffa5 	bl	80074ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b8:	461a      	mov	r2, r3
 80065ba:	2310      	movs	r3, #16
 80065bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d030      	beq.n	800662a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d0:	2b80      	cmp	r3, #128	@ 0x80
 80065d2:	d109      	bne.n	80065e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80065e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ea:	4613      	mov	r3, r2
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	4413      	add	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	4413      	add	r3, r2
 80065fa:	3304      	adds	r3, #4
 80065fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	78db      	ldrb	r3, [r3, #3]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d108      	bne.n	8006618 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2200      	movs	r2, #0
 800660a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	b2db      	uxtb	r3, r3
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f00a fcde 	bl	8010fd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006624:	461a      	mov	r2, r3
 8006626:	2302      	movs	r3, #2
 8006628:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b00      	cmp	r3, #0
 8006632:	d008      	beq.n	8006646 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006640:	461a      	mov	r2, r3
 8006642:	2320      	movs	r3, #32
 8006644:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665c:	461a      	mov	r2, r3
 800665e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006662:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	3301      	adds	r3, #1
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800666a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	f47f af62 	bne.w	800653c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	f008 f83d 	bl	800e6fc <USB_ReadInterrupts>
 8006682:	4603      	mov	r3, r0
 8006684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006688:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800668c:	f040 80db 	bne.w	8006846 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4618      	mov	r0, r3
 8006696:	f008 f85e 	bl	800e756 <USB_ReadDevAllInEpInterrupt>
 800669a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80066a0:	e0cd      	b.n	800683e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80066a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80c2 	beq.w	8006832 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	4611      	mov	r1, r2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f008 f884 	bl	800e7c6 <USB_ReadDevInEPInterrupt>
 80066be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d057      	beq.n	800677a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	2201      	movs	r2, #1
 80066d2:	fa02 f303 	lsl.w	r3, r2, r3
 80066d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	43db      	mvns	r3, r3
 80066e4:	69f9      	ldr	r1, [r7, #28]
 80066e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066ea:	4013      	ands	r3, r2
 80066ec:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066fa:	461a      	mov	r2, r3
 80066fc:	2301      	movs	r3, #1
 80066fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	799b      	ldrb	r3, [r3, #6]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d132      	bne.n	800676e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800670c:	4613      	mov	r3, r2
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	3320      	adds	r3, #32
 8006718:	6819      	ldr	r1, [r3, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800671e:	4613      	mov	r3, r2
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4403      	add	r3, r0
 8006728:	331c      	adds	r3, #28
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4419      	add	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006732:	4613      	mov	r3, r2
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4403      	add	r3, r0
 800673c:	3320      	adds	r3, #32
 800673e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	d113      	bne.n	800676e <HAL_PCD_IRQHandler+0x3a2>
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800674a:	4613      	mov	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	3324      	adds	r3, #36	@ 0x24
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d108      	bne.n	800676e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006766:	461a      	mov	r2, r3
 8006768:	2101      	movs	r1, #1
 800676a:	f008 f88d 	bl	800e888 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	b2db      	uxtb	r3, r3
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f00a fba8 	bl	8010eca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006790:	461a      	mov	r2, r3
 8006792:	2308      	movs	r3, #8
 8006794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ac:	461a      	mov	r2, r3
 80067ae:	2310      	movs	r3, #16
 80067b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d008      	beq.n	80067ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80067bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c8:	461a      	mov	r2, r3
 80067ca:	2340      	movs	r3, #64	@ 0x40
 80067cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d023      	beq.n	8006820 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80067d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067da:	6a38      	ldr	r0, [r7, #32]
 80067dc:	f007 f870 	bl	800d8c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80067e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e2:	4613      	mov	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	3310      	adds	r3, #16
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	4413      	add	r3, r2
 80067f0:	3304      	adds	r3, #4
 80067f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	78db      	ldrb	r3, [r3, #3]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d108      	bne.n	800680e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2200      	movs	r2, #0
 8006800:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	b2db      	uxtb	r3, r3
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f00a fbf5 	bl	8010ff8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800681a:	461a      	mov	r2, r3
 800681c:	2302      	movs	r3, #2
 800681e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800682a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fce8 	bl	8007202 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	3301      	adds	r3, #1
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800683e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006840:	2b00      	cmp	r3, #0
 8006842:	f47f af2e 	bne.w	80066a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f007 ff56 	bl	800e6fc <USB_ReadInterrupts>
 8006850:	4603      	mov	r3, r0
 8006852:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800685a:	d122      	bne.n	80068a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006876:	2b01      	cmp	r3, #1
 8006878:	d108      	bne.n	800688c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006882:	2100      	movs	r1, #0
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fef3 	bl	8007670 <HAL_PCDEx_LPM_Callback>
 800688a:	e002      	b.n	8006892 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f00a fb93 	bl	8010fb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695a      	ldr	r2, [r3, #20]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80068a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f007 ff28 	bl	800e6fc <USB_ReadInterrupts>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b6:	d112      	bne.n	80068de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d102      	bne.n	80068ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f00a fb4f 	bl	8010f6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695a      	ldr	r2, [r3, #20]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80068dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f007 ff0a 	bl	800e6fc <USB_ReadInterrupts>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068f2:	d121      	bne.n	8006938 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695a      	ldr	r2, [r3, #20]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006902:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800690a:	2b00      	cmp	r3, #0
 800690c:	d111      	bne.n	8006932 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691c:	089b      	lsrs	r3, r3, #2
 800691e:	f003 020f 	and.w	r2, r3, #15
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006928:	2101      	movs	r1, #1
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fea0 	bl	8007670 <HAL_PCDEx_LPM_Callback>
 8006930:	e002      	b.n	8006938 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f00a fb1a 	bl	8010f6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f007 fedd 	bl	800e6fc <USB_ReadInterrupts>
 8006942:	4603      	mov	r3, r0
 8006944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800694c:	f040 80b7 	bne.w	8006abe <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	69fa      	ldr	r2, [r7, #28]
 800695a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2110      	movs	r1, #16
 800696a:	4618      	mov	r0, r3
 800696c:	f006 ffa8 	bl	800d8c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006970:	2300      	movs	r3, #0
 8006972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006974:	e046      	b.n	8006a04 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006982:	461a      	mov	r2, r3
 8006984:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006988:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800698a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80069aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b6:	461a      	mov	r2, r3
 80069b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80069bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	69fa      	ldr	r2, [r7, #28]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a00:	3301      	adds	r3, #1
 8006a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	791b      	ldrb	r3, [r3, #4]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d3b2      	bcc.n	8006976 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a1e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006a22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7bdb      	ldrb	r3, [r3, #15]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d016      	beq.n	8006a5a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a3c:	f043 030b 	orr.w	r3, r3, #11
 8006a40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a4c:	69fa      	ldr	r2, [r7, #28]
 8006a4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a52:	f043 030b 	orr.w	r3, r3, #11
 8006a56:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a58:	e015      	b.n	8006a86 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a60:	695a      	ldr	r2, [r3, #20]
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a68:	4619      	mov	r1, r3
 8006a6a:	f242 032b 	movw	r3, #8235	@ 0x202b
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a80:	f043 030b 	orr.w	r3, r3, #11
 8006a84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a94:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006a98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f007 feed 	bl	800e888 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695a      	ldr	r2, [r3, #20]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f007 fe1a 	bl	800e6fc <USB_ReadInterrupts>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad2:	d123      	bne.n	8006b1c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f007 feb1 	bl	800e840 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f006 ff65 	bl	800d9b2 <USB_GetDevSpeed>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	461a      	mov	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681c      	ldr	r4, [r3, #0]
 8006af4:	f001 fd1c 	bl	8008530 <HAL_RCC_GetHCLKFreq>
 8006af8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006afe:	461a      	mov	r2, r3
 8006b00:	4620      	mov	r0, r4
 8006b02:	f006 fc6f 	bl	800d3e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f00a fa07 	bl	8010f1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695a      	ldr	r2, [r3, #20]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f007 fdeb 	bl	800e6fc <USB_ReadInterrupts>
 8006b26:	4603      	mov	r3, r0
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d10a      	bne.n	8006b46 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f00a f9e4 	bl	8010efe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	695a      	ldr	r2, [r3, #20]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f002 0208 	and.w	r2, r2, #8
 8006b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f007 fdd6 	bl	800e6fc <USB_ReadInterrupts>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b56:	2b80      	cmp	r3, #128	@ 0x80
 8006b58:	d123      	bne.n	8006ba2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b66:	2301      	movs	r3, #1
 8006b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b6a:	e014      	b.n	8006b96 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b70:	4613      	mov	r3, r2
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	440b      	add	r3, r1
 8006b7a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d105      	bne.n	8006b90 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fb08 	bl	80071a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	3301      	adds	r3, #1
 8006b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	791b      	ldrb	r3, [r3, #4]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d3e4      	bcc.n	8006b6c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f007 fda8 	bl	800e6fc <USB_ReadInterrupts>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bb6:	d13c      	bne.n	8006c32 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bb8:	2301      	movs	r3, #1
 8006bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bbc:	e02b      	b.n	8006c16 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	3318      	adds	r3, #24
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d115      	bne.n	8006c10 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006be4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	da12      	bge.n	8006c10 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bee:	4613      	mov	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	3317      	adds	r3, #23
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fac8 	bl	80071a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	3301      	adds	r3, #1
 8006c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	791b      	ldrb	r3, [r3, #4]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d3cd      	bcc.n	8006bbe <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695a      	ldr	r2, [r3, #20]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f007 fd60 	bl	800e6fc <USB_ReadInterrupts>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c46:	d156      	bne.n	8006cf6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c48:	2301      	movs	r3, #1
 8006c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c4c:	e045      	b.n	8006cda <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c62:	4613      	mov	r3, r2
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d12e      	bne.n	8006cd4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	da2b      	bge.n	8006cd4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006c88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d121      	bne.n	8006cd4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c94:	4613      	mov	r3, r2
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ccc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cd0:	6053      	str	r3, [r2, #4]
            break;
 8006cd2:	e008      	b.n	8006ce6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	791b      	ldrb	r3, [r3, #4]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d3b3      	bcc.n	8006c4e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695a      	ldr	r2, [r3, #20]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f007 fcfe 	bl	800e6fc <USB_ReadInterrupts>
 8006d00:	4603      	mov	r3, r0
 8006d02:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d0a:	d10a      	bne.n	8006d22 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f00a f985 	bl	801101c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695a      	ldr	r2, [r3, #20]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f007 fce8 	bl	800e6fc <USB_ReadInterrupts>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d115      	bne.n	8006d62 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f00a f975 	bl	8011038 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6859      	ldr	r1, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
 8006d5e:	e000      	b.n	8006d62 <HAL_PCD_IRQHandler+0x996>
      return;
 8006d60:	bf00      	nop
    }
  }
}
 8006d62:	3734      	adds	r7, #52	@ 0x34
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd90      	pop	{r4, r7, pc}

08006d68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_PCD_SetAddress+0x1a>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e012      	b.n	8006da8 <HAL_PCD_SetAddress+0x40>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	78fa      	ldrb	r2, [r7, #3]
 8006d8e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	78fa      	ldrb	r2, [r7, #3]
 8006d96:	4611      	mov	r1, r2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f007 fc47 	bl	800e62c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	70fb      	strb	r3, [r7, #3]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	803b      	strh	r3, [r7, #0]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	da0f      	bge.n	8006df6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	f003 020f 	and.w	r2, r3, #15
 8006ddc:	4613      	mov	r3, r2
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	3310      	adds	r3, #16
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	4413      	add	r3, r2
 8006dea:	3304      	adds	r3, #4
 8006dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2201      	movs	r2, #1
 8006df2:	705a      	strb	r2, [r3, #1]
 8006df4:	e00f      	b.n	8006e16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006df6:	78fb      	ldrb	r3, [r7, #3]
 8006df8:	f003 020f 	and.w	r2, r3, #15
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006e22:	883a      	ldrh	r2, [r7, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	78ba      	ldrb	r2, [r7, #2]
 8006e2c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006e40:	78bb      	ldrb	r3, [r7, #2]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d102      	bne.n	8006e4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <HAL_PCD_EP_Open+0xaa>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e00e      	b.n	8006e78 <HAL_PCD_EP_Open+0xc8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68f9      	ldr	r1, [r7, #12]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f006 fdc7 	bl	800d9fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006e76:	7afb      	ldrb	r3, [r7, #11]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	da0f      	bge.n	8006eb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	f003 020f 	and.w	r2, r3, #15
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	3310      	adds	r3, #16
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	705a      	strb	r2, [r3, #1]
 8006eb2:	e00f      	b.n	8006ed4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	f003 020f 	and.w	r2, r3, #15
 8006eba:	4613      	mov	r3, r2
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	4413      	add	r3, r2
 8006eca:	3304      	adds	r3, #4
 8006ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <HAL_PCD_EP_Close+0x6e>
 8006eea:	2302      	movs	r3, #2
 8006eec:	e00e      	b.n	8006f0c <HAL_PCD_EP_Close+0x8c>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68f9      	ldr	r1, [r7, #12]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f006 fe05 	bl	800db0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	607a      	str	r2, [r7, #4]
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	460b      	mov	r3, r1
 8006f22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f24:	7afb      	ldrb	r3, [r7, #11]
 8006f26:	f003 020f 	and.w	r2, r3, #15
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	00db      	lsls	r3, r3, #3
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2200      	movs	r2, #0
 8006f54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f56:	7afb      	ldrb	r3, [r7, #11]
 8006f58:	f003 030f 	and.w	r3, r3, #15
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	799b      	ldrb	r3, [r3, #6]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d102      	bne.n	8006f70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	799b      	ldrb	r3, [r3, #6]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6979      	ldr	r1, [r7, #20]
 8006f7c:	f006 fea2 	bl	800dcc4 <USB_EPStartXfer>

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	f003 020f 	and.w	r2, r3, #15
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006fac:	681b      	ldr	r3, [r3, #0]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b086      	sub	sp, #24
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fca:	7afb      	ldrb	r3, [r7, #11]
 8006fcc:	f003 020f 	and.w	r2, r3, #15
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	3310      	adds	r3, #16
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	3304      	adds	r3, #4
 8006fe0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ffa:	7afb      	ldrb	r3, [r7, #11]
 8006ffc:	f003 030f 	and.w	r3, r3, #15
 8007000:	b2da      	uxtb	r2, r3
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	799b      	ldrb	r3, [r3, #6]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d102      	bne.n	8007014 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	799b      	ldrb	r3, [r3, #6]
 800701c:	461a      	mov	r2, r3
 800701e:	6979      	ldr	r1, [r7, #20]
 8007020:	f006 fe50 	bl	800dcc4 <USB_EPStartXfer>

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	7912      	ldrb	r2, [r2, #4]
 8007044:	4293      	cmp	r3, r2
 8007046:	d901      	bls.n	800704c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e04f      	b.n	80070ec <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800704c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007050:	2b00      	cmp	r3, #0
 8007052:	da0f      	bge.n	8007074 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	f003 020f 	and.w	r2, r3, #15
 800705a:	4613      	mov	r3, r2
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	3310      	adds	r3, #16
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	4413      	add	r3, r2
 8007068:	3304      	adds	r3, #4
 800706a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	705a      	strb	r2, [r3, #1]
 8007072:	e00d      	b.n	8007090 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007074:	78fa      	ldrb	r2, [r7, #3]
 8007076:	4613      	mov	r3, r2
 8007078:	00db      	lsls	r3, r3, #3
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	4413      	add	r3, r2
 8007086:	3304      	adds	r3, #4
 8007088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	b2da      	uxtb	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d101      	bne.n	80070b0 <HAL_PCD_EP_SetStall+0x82>
 80070ac:	2302      	movs	r3, #2
 80070ae:	e01d      	b.n	80070ec <HAL_PCD_EP_SetStall+0xbe>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68f9      	ldr	r1, [r7, #12]
 80070be:	4618      	mov	r0, r3
 80070c0:	f007 f9e0 	bl	800e484 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d109      	bne.n	80070e2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	7999      	ldrb	r1, [r3, #6]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070dc:	461a      	mov	r2, r3
 80070de:	f007 fbd3 	bl	800e888 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	7912      	ldrb	r2, [r2, #4]
 800710a:	4293      	cmp	r3, r2
 800710c:	d901      	bls.n	8007112 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e042      	b.n	8007198 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007116:	2b00      	cmp	r3, #0
 8007118:	da0f      	bge.n	800713a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	f003 020f 	and.w	r2, r3, #15
 8007120:	4613      	mov	r3, r2
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	3310      	adds	r3, #16
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	4413      	add	r3, r2
 800712e:	3304      	adds	r3, #4
 8007130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	705a      	strb	r2, [r3, #1]
 8007138:	e00f      	b.n	800715a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	f003 020f 	and.w	r2, r3, #15
 8007140:	4613      	mov	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	4413      	add	r3, r2
 8007150:	3304      	adds	r3, #4
 8007152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	b2da      	uxtb	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_PCD_EP_ClrStall+0x86>
 8007176:	2302      	movs	r3, #2
 8007178:	e00e      	b.n	8007198 <HAL_PCD_EP_ClrStall+0xa4>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68f9      	ldr	r1, [r7, #12]
 8007188:	4618      	mov	r0, r3
 800718a:	f007 f9e9 	bl	800e560 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80071ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	da0c      	bge.n	80071ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	f003 020f 	and.w	r2, r3, #15
 80071ba:	4613      	mov	r3, r2
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	3310      	adds	r3, #16
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	4413      	add	r3, r2
 80071c8:	3304      	adds	r3, #4
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	e00c      	b.n	80071e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071ce:	78fb      	ldrb	r3, [r7, #3]
 80071d0:	f003 020f 	and.w	r2, r3, #15
 80071d4:	4613      	mov	r3, r2
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	4413      	add	r3, r2
 80071e4:	3304      	adds	r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68f9      	ldr	r1, [r7, #12]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f007 f808 	bl	800e204 <USB_EPStopXfer>
 80071f4:	4603      	mov	r3, r0
 80071f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80071f8:	7afb      	ldrb	r3, [r7, #11]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b08a      	sub	sp, #40	@ 0x28
 8007206:	af02      	add	r7, sp, #8
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	4613      	mov	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	3310      	adds	r3, #16
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4413      	add	r3, r2
 8007226:	3304      	adds	r3, #4
 8007228:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	695a      	ldr	r2, [r3, #20]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	429a      	cmp	r2, r3
 8007234:	d901      	bls.n	800723a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e06b      	b.n	8007312 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	429a      	cmp	r2, r3
 800724e:	d902      	bls.n	8007256 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	3303      	adds	r3, #3
 800725a:	089b      	lsrs	r3, r3, #2
 800725c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800725e:	e02a      	b.n	80072b6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	691a      	ldr	r2, [r3, #16]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	69fa      	ldr	r2, [r7, #28]
 8007272:	429a      	cmp	r2, r3
 8007274:	d902      	bls.n	800727c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	3303      	adds	r3, #3
 8007280:	089b      	lsrs	r3, r3, #2
 8007282:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	68d9      	ldr	r1, [r3, #12]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	b2da      	uxtb	r2, r3
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	4603      	mov	r3, r0
 8007298:	6978      	ldr	r0, [r7, #20]
 800729a:	f007 f85d 	bl	800e358 <USB_WritePacket>

    ep->xfer_buff  += len;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	441a      	add	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	695a      	ldr	r2, [r3, #20]
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	441a      	add	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d809      	bhi.n	80072e0 <PCD_WriteEmptyTxFifo+0xde>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	695a      	ldr	r2, [r3, #20]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d203      	bcs.n	80072e0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1bf      	bne.n	8007260 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	691a      	ldr	r2, [r3, #16]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d811      	bhi.n	8007310 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	2201      	movs	r2, #1
 80072f4:	fa02 f303 	lsl.w	r3, r2, r3
 80072f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	43db      	mvns	r3, r3
 8007306:	6939      	ldr	r1, [r7, #16]
 8007308:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800730c:	4013      	ands	r3, r2
 800730e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b088      	sub	sp, #32
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	333c      	adds	r3, #60	@ 0x3c
 8007334:	3304      	adds	r3, #4
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	799b      	ldrb	r3, [r3, #6]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d17b      	bne.n	800744a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f003 0308 	and.w	r3, r3, #8
 8007358:	2b00      	cmp	r3, #0
 800735a:	d015      	beq.n	8007388 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	4a61      	ldr	r2, [pc, #388]	@ (80074e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	f240 80b9 	bls.w	80074d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80b3 	beq.w	80074d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737e:	461a      	mov	r2, r3
 8007380:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007384:	6093      	str	r3, [r2, #8]
 8007386:	e0a7      	b.n	80074d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739e:	461a      	mov	r2, r3
 80073a0:	2320      	movs	r3, #32
 80073a2:	6093      	str	r3, [r2, #8]
 80073a4:	e098      	b.n	80074d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f040 8093 	bne.w	80074d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4a4b      	ldr	r2, [pc, #300]	@ (80074e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d90f      	bls.n	80073da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00a      	beq.n	80073da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d0:	461a      	mov	r2, r3
 80073d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073d6:	6093      	str	r3, [r2, #8]
 80073d8:	e07e      	b.n	80074d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	4613      	mov	r3, r2
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	4413      	add	r3, r2
 80073ec:	3304      	adds	r3, #4
 80073ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a1a      	ldr	r2, [r3, #32]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	0159      	lsls	r1, r3, #5
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	440b      	add	r3, r1
 80073fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007406:	1ad2      	subs	r2, r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d114      	bne.n	800743c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d109      	bne.n	800742e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007424:	461a      	mov	r2, r3
 8007426:	2101      	movs	r1, #1
 8007428:	f007 fa2e 	bl	800e888 <USB_EP0_OutStart>
 800742c:	e006      	b.n	800743c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	441a      	add	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f009 fd26 	bl	8010e94 <HAL_PCD_DataOutStageCallback>
 8007448:	e046      	b.n	80074d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	4a26      	ldr	r2, [pc, #152]	@ (80074e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d124      	bne.n	800749c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00a      	beq.n	8007472 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007468:	461a      	mov	r2, r3
 800746a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800746e:	6093      	str	r3, [r2, #8]
 8007470:	e032      	b.n	80074d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f003 0320 	and.w	r3, r3, #32
 8007478:	2b00      	cmp	r3, #0
 800747a:	d008      	beq.n	800748e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007488:	461a      	mov	r2, r3
 800748a:	2320      	movs	r3, #32
 800748c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f009 fcfd 	bl	8010e94 <HAL_PCD_DataOutStageCallback>
 800749a:	e01d      	b.n	80074d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d114      	bne.n	80074cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80074a2:	6879      	ldr	r1, [r7, #4]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	4613      	mov	r3, r2
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	440b      	add	r3, r1
 80074b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d108      	bne.n	80074cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80074c4:	461a      	mov	r2, r3
 80074c6:	2100      	movs	r1, #0
 80074c8:	f007 f9de 	bl	800e888 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f009 fcde 	bl	8010e94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3720      	adds	r7, #32
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	4f54300a 	.word	0x4f54300a
 80074e8:	4f54310a 	.word	0x4f54310a

080074ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	333c      	adds	r3, #60	@ 0x3c
 8007504:	3304      	adds	r3, #4
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4a15      	ldr	r2, [pc, #84]	@ (8007574 <PCD_EP_OutSetupPacket_int+0x88>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d90e      	bls.n	8007540 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007528:	2b00      	cmp	r3, #0
 800752a:	d009      	beq.n	8007540 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007538:	461a      	mov	r2, r3
 800753a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800753e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f009 fc95 	bl	8010e70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4a0a      	ldr	r2, [pc, #40]	@ (8007574 <PCD_EP_OutSetupPacket_int+0x88>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d90c      	bls.n	8007568 <PCD_EP_OutSetupPacket_int+0x7c>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	799b      	ldrb	r3, [r3, #6]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d108      	bne.n	8007568 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6818      	ldr	r0, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007560:	461a      	mov	r2, r3
 8007562:	2101      	movs	r1, #1
 8007564:	f007 f990 	bl	800e888 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	4f54300a 	.word	0x4f54300a

08007578 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	70fb      	strb	r3, [r7, #3]
 8007584:	4613      	mov	r3, r2
 8007586:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d107      	bne.n	80075a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007596:	883b      	ldrh	r3, [r7, #0]
 8007598:	0419      	lsls	r1, r3, #16
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80075a4:	e028      	b.n	80075f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ac:	0c1b      	lsrs	r3, r3, #16
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	4413      	add	r3, r2
 80075b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	73fb      	strb	r3, [r7, #15]
 80075b8:	e00d      	b.n	80075d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	3340      	adds	r3, #64	@ 0x40
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	0c1b      	lsrs	r3, r3, #16
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	4413      	add	r3, r2
 80075ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	3301      	adds	r3, #1
 80075d4:	73fb      	strb	r3, [r7, #15]
 80075d6:	7bfa      	ldrb	r2, [r7, #15]
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	3b01      	subs	r3, #1
 80075dc:	429a      	cmp	r2, r3
 80075de:	d3ec      	bcc.n	80075ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80075e0:	883b      	ldrh	r3, [r7, #0]
 80075e2:	0418      	lsls	r0, r3, #16
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6819      	ldr	r1, [r3, #0]
 80075e8:	78fb      	ldrb	r3, [r7, #3]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	4302      	orrs	r2, r0
 80075f0:	3340      	adds	r3, #64	@ 0x40
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	440b      	add	r3, r1
 80075f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	887a      	ldrh	r2, [r7, #2]
 8007618:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007656:	4b05      	ldr	r3, [pc, #20]	@ (800766c <HAL_PCDEx_ActivateLPM+0x44>)
 8007658:	4313      	orrs	r3, r2
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	10000003 	.word	0x10000003

08007670 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007690:	4b19      	ldr	r3, [pc, #100]	@ (80076f8 <HAL_PWREx_ConfigSupply+0x70>)
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	2b04      	cmp	r3, #4
 800769a:	d00a      	beq.n	80076b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800769c:	4b16      	ldr	r3, [pc, #88]	@ (80076f8 <HAL_PWREx_ConfigSupply+0x70>)
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d001      	beq.n	80076ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e01f      	b.n	80076ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	e01d      	b.n	80076ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80076b2:	4b11      	ldr	r3, [pc, #68]	@ (80076f8 <HAL_PWREx_ConfigSupply+0x70>)
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f023 0207 	bic.w	r2, r3, #7
 80076ba:	490f      	ldr	r1, [pc, #60]	@ (80076f8 <HAL_PWREx_ConfigSupply+0x70>)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80076c2:	f7fa feff 	bl	80024c4 <HAL_GetTick>
 80076c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076c8:	e009      	b.n	80076de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80076ca:	f7fa fefb 	bl	80024c4 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80076d8:	d901      	bls.n	80076de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e007      	b.n	80076ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076de:	4b06      	ldr	r3, [pc, #24]	@ (80076f8 <HAL_PWREx_ConfigSupply+0x70>)
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ea:	d1ee      	bne.n	80076ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	58024800 	.word	0x58024800

080076fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007700:	4b05      	ldr	r3, [pc, #20]	@ (8007718 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	4a04      	ldr	r2, [pc, #16]	@ (8007718 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800770a:	60d3      	str	r3, [r2, #12]
}
 800770c:	bf00      	nop
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	58024800 	.word	0x58024800

0800771c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b08c      	sub	sp, #48	@ 0x30
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e3c8      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 8087 	beq.w	800784a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800773c:	4b88      	ldr	r3, [pc, #544]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007746:	4b86      	ldr	r3, [pc, #536]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 8007748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800774a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800774c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774e:	2b10      	cmp	r3, #16
 8007750:	d007      	beq.n	8007762 <HAL_RCC_OscConfig+0x46>
 8007752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007754:	2b18      	cmp	r3, #24
 8007756:	d110      	bne.n	800777a <HAL_RCC_OscConfig+0x5e>
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b02      	cmp	r3, #2
 8007760:	d10b      	bne.n	800777a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007762:	4b7f      	ldr	r3, [pc, #508]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d06c      	beq.n	8007848 <HAL_RCC_OscConfig+0x12c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d168      	bne.n	8007848 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e3a2      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007782:	d106      	bne.n	8007792 <HAL_RCC_OscConfig+0x76>
 8007784:	4b76      	ldr	r3, [pc, #472]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a75      	ldr	r2, [pc, #468]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 800778a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	e02e      	b.n	80077f0 <HAL_RCC_OscConfig+0xd4>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10c      	bne.n	80077b4 <HAL_RCC_OscConfig+0x98>
 800779a:	4b71      	ldr	r3, [pc, #452]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a70      	ldr	r2, [pc, #448]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80077a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	4b6e      	ldr	r3, [pc, #440]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a6d      	ldr	r2, [pc, #436]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80077ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	e01d      	b.n	80077f0 <HAL_RCC_OscConfig+0xd4>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077bc:	d10c      	bne.n	80077d8 <HAL_RCC_OscConfig+0xbc>
 80077be:	4b68      	ldr	r3, [pc, #416]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a67      	ldr	r2, [pc, #412]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80077c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	4b65      	ldr	r3, [pc, #404]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a64      	ldr	r2, [pc, #400]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80077d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e00b      	b.n	80077f0 <HAL_RCC_OscConfig+0xd4>
 80077d8:	4b61      	ldr	r3, [pc, #388]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a60      	ldr	r2, [pc, #384]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80077de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	4b5e      	ldr	r3, [pc, #376]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a5d      	ldr	r2, [pc, #372]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80077ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d013      	beq.n	8007820 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f8:	f7fa fe64 	bl	80024c4 <HAL_GetTick>
 80077fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077fe:	e008      	b.n	8007812 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007800:	f7fa fe60 	bl	80024c4 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b64      	cmp	r3, #100	@ 0x64
 800780c:	d901      	bls.n	8007812 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e356      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007812:	4b53      	ldr	r3, [pc, #332]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0f0      	beq.n	8007800 <HAL_RCC_OscConfig+0xe4>
 800781e:	e014      	b.n	800784a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007820:	f7fa fe50 	bl	80024c4 <HAL_GetTick>
 8007824:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007828:	f7fa fe4c 	bl	80024c4 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b64      	cmp	r3, #100	@ 0x64
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e342      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800783a:	4b49      	ldr	r3, [pc, #292]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f0      	bne.n	8007828 <HAL_RCC_OscConfig+0x10c>
 8007846:	e000      	b.n	800784a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 808c 	beq.w	8007970 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007858:	4b41      	ldr	r3, [pc, #260]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007860:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007862:	4b3f      	ldr	r3, [pc, #252]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 8007864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007866:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <HAL_RCC_OscConfig+0x162>
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	2b18      	cmp	r3, #24
 8007872:	d137      	bne.n	80078e4 <HAL_RCC_OscConfig+0x1c8>
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d132      	bne.n	80078e4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800787e:	4b38      	ldr	r3, [pc, #224]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <HAL_RCC_OscConfig+0x17a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e314      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007896:	4b32      	ldr	r3, [pc, #200]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f023 0219 	bic.w	r2, r3, #25
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	492f      	ldr	r1, [pc, #188]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a8:	f7fa fe0c 	bl	80024c4 <HAL_GetTick>
 80078ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078b0:	f7fa fe08 	bl	80024c4 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e2fe      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078c2:	4b27      	ldr	r3, [pc, #156]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0f0      	beq.n	80078b0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ce:	4b24      	ldr	r3, [pc, #144]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	061b      	lsls	r3, r3, #24
 80078dc:	4920      	ldr	r1, [pc, #128]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078e2:	e045      	b.n	8007970 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d026      	beq.n	800793a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80078ec:	4b1c      	ldr	r3, [pc, #112]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f023 0219 	bic.w	r2, r3, #25
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	4919      	ldr	r1, [pc, #100]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fe:	f7fa fde1 	bl	80024c4 <HAL_GetTick>
 8007902:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007904:	e008      	b.n	8007918 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007906:	f7fa fddd 	bl	80024c4 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e2d3      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007918:	4b11      	ldr	r3, [pc, #68]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0f0      	beq.n	8007906 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007924:	4b0e      	ldr	r3, [pc, #56]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	061b      	lsls	r3, r3, #24
 8007932:	490b      	ldr	r1, [pc, #44]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 8007934:	4313      	orrs	r3, r2
 8007936:	604b      	str	r3, [r1, #4]
 8007938:	e01a      	b.n	8007970 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800793a:	4b09      	ldr	r3, [pc, #36]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a08      	ldr	r2, [pc, #32]	@ (8007960 <HAL_RCC_OscConfig+0x244>)
 8007940:	f023 0301 	bic.w	r3, r3, #1
 8007944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007946:	f7fa fdbd 	bl	80024c4 <HAL_GetTick>
 800794a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800794c:	e00a      	b.n	8007964 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800794e:	f7fa fdb9 	bl	80024c4 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	2b02      	cmp	r3, #2
 800795a:	d903      	bls.n	8007964 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e2af      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
 8007960:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007964:	4b96      	ldr	r3, [pc, #600]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1ee      	bne.n	800794e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0310 	and.w	r3, r3, #16
 8007978:	2b00      	cmp	r3, #0
 800797a:	d06a      	beq.n	8007a52 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800797c:	4b90      	ldr	r3, [pc, #576]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007984:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007986:	4b8e      	ldr	r3, [pc, #568]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	2b08      	cmp	r3, #8
 8007990:	d007      	beq.n	80079a2 <HAL_RCC_OscConfig+0x286>
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	2b18      	cmp	r3, #24
 8007996:	d11b      	bne.n	80079d0 <HAL_RCC_OscConfig+0x2b4>
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d116      	bne.n	80079d0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079a2:	4b87      	ldr	r3, [pc, #540]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d005      	beq.n	80079ba <HAL_RCC_OscConfig+0x29e>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	2b80      	cmp	r3, #128	@ 0x80
 80079b4:	d001      	beq.n	80079ba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e282      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079ba:	4b81      	ldr	r3, [pc, #516]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	061b      	lsls	r3, r3, #24
 80079c8:	497d      	ldr	r1, [pc, #500]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079ce:	e040      	b.n	8007a52 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d023      	beq.n	8007a20 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80079d8:	4b79      	ldr	r3, [pc, #484]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a78      	ldr	r2, [pc, #480]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 80079de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e4:	f7fa fd6e 	bl	80024c4 <HAL_GetTick>
 80079e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079ea:	e008      	b.n	80079fe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80079ec:	f7fa fd6a 	bl	80024c4 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e260      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079fe:	4b70      	ldr	r3, [pc, #448]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0f0      	beq.n	80079ec <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	061b      	lsls	r3, r3, #24
 8007a18:	4969      	ldr	r1, [pc, #420]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60cb      	str	r3, [r1, #12]
 8007a1e:	e018      	b.n	8007a52 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007a20:	4b67      	ldr	r3, [pc, #412]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a66      	ldr	r2, [pc, #408]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007a26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a2c:	f7fa fd4a 	bl	80024c4 <HAL_GetTick>
 8007a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a32:	e008      	b.n	8007a46 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007a34:	f7fa fd46 	bl	80024c4 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e23c      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a46:	4b5e      	ldr	r3, [pc, #376]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1f0      	bne.n	8007a34 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0308 	and.w	r3, r3, #8
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d036      	beq.n	8007acc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d019      	beq.n	8007a9a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a66:	4b56      	ldr	r3, [pc, #344]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a6a:	4a55      	ldr	r2, [pc, #340]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007a6c:	f043 0301 	orr.w	r3, r3, #1
 8007a70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a72:	f7fa fd27 	bl	80024c4 <HAL_GetTick>
 8007a76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a78:	e008      	b.n	8007a8c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a7a:	f7fa fd23 	bl	80024c4 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d901      	bls.n	8007a8c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e219      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a8c:	4b4c      	ldr	r3, [pc, #304]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0f0      	beq.n	8007a7a <HAL_RCC_OscConfig+0x35e>
 8007a98:	e018      	b.n	8007acc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a9a:	4b49      	ldr	r3, [pc, #292]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a9e:	4a48      	ldr	r2, [pc, #288]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007aa0:	f023 0301 	bic.w	r3, r3, #1
 8007aa4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aa6:	f7fa fd0d 	bl	80024c4 <HAL_GetTick>
 8007aaa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aae:	f7fa fd09 	bl	80024c4 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e1ff      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f0      	bne.n	8007aae <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d036      	beq.n	8007b46 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d019      	beq.n	8007b14 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ae0:	4b37      	ldr	r3, [pc, #220]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a36      	ldr	r2, [pc, #216]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007ae6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007aea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007aec:	f7fa fcea 	bl	80024c4 <HAL_GetTick>
 8007af0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007af2:	e008      	b.n	8007b06 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007af4:	f7fa fce6 	bl	80024c4 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e1dc      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b06:	4b2e      	ldr	r3, [pc, #184]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0f0      	beq.n	8007af4 <HAL_RCC_OscConfig+0x3d8>
 8007b12:	e018      	b.n	8007b46 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b14:	4b2a      	ldr	r3, [pc, #168]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a29      	ldr	r2, [pc, #164]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007b1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b20:	f7fa fcd0 	bl	80024c4 <HAL_GetTick>
 8007b24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b26:	e008      	b.n	8007b3a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b28:	f7fa fccc 	bl	80024c4 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e1c2      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b3a:	4b21      	ldr	r3, [pc, #132]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1f0      	bne.n	8007b28 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 8086 	beq.w	8007c60 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b54:	4b1b      	ldr	r3, [pc, #108]	@ (8007bc4 <HAL_RCC_OscConfig+0x4a8>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a1a      	ldr	r2, [pc, #104]	@ (8007bc4 <HAL_RCC_OscConfig+0x4a8>)
 8007b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b60:	f7fa fcb0 	bl	80024c4 <HAL_GetTick>
 8007b64:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b68:	f7fa fcac 	bl	80024c4 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b64      	cmp	r3, #100	@ 0x64
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e1a2      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b7a:	4b12      	ldr	r3, [pc, #72]	@ (8007bc4 <HAL_RCC_OscConfig+0x4a8>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0f0      	beq.n	8007b68 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d106      	bne.n	8007b9c <HAL_RCC_OscConfig+0x480>
 8007b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b92:	4a0b      	ldr	r2, [pc, #44]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007b94:	f043 0301 	orr.w	r3, r3, #1
 8007b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b9a:	e032      	b.n	8007c02 <HAL_RCC_OscConfig+0x4e6>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d111      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x4ac>
 8007ba4:	4b06      	ldr	r3, [pc, #24]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba8:	4a05      	ldr	r2, [pc, #20]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007baa:	f023 0301 	bic.w	r3, r3, #1
 8007bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bb0:	4b03      	ldr	r3, [pc, #12]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb4:	4a02      	ldr	r2, [pc, #8]	@ (8007bc0 <HAL_RCC_OscConfig+0x4a4>)
 8007bb6:	f023 0304 	bic.w	r3, r3, #4
 8007bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bbc:	e021      	b.n	8007c02 <HAL_RCC_OscConfig+0x4e6>
 8007bbe:	bf00      	nop
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	58024800 	.word	0x58024800
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	2b05      	cmp	r3, #5
 8007bce:	d10c      	bne.n	8007bea <HAL_RCC_OscConfig+0x4ce>
 8007bd0:	4b83      	ldr	r3, [pc, #524]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd4:	4a82      	ldr	r2, [pc, #520]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007bd6:	f043 0304 	orr.w	r3, r3, #4
 8007bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bdc:	4b80      	ldr	r3, [pc, #512]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007be0:	4a7f      	ldr	r2, [pc, #508]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007be2:	f043 0301 	orr.w	r3, r3, #1
 8007be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007be8:	e00b      	b.n	8007c02 <HAL_RCC_OscConfig+0x4e6>
 8007bea:	4b7d      	ldr	r3, [pc, #500]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bee:	4a7c      	ldr	r2, [pc, #496]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007bf0:	f023 0301 	bic.w	r3, r3, #1
 8007bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bf6:	4b7a      	ldr	r3, [pc, #488]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bfa:	4a79      	ldr	r2, [pc, #484]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007bfc:	f023 0304 	bic.w	r3, r3, #4
 8007c00:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d015      	beq.n	8007c36 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c0a:	f7fa fc5b 	bl	80024c4 <HAL_GetTick>
 8007c0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c10:	e00a      	b.n	8007c28 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c12:	f7fa fc57 	bl	80024c4 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e14b      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c28:	4b6d      	ldr	r3, [pc, #436]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d0ee      	beq.n	8007c12 <HAL_RCC_OscConfig+0x4f6>
 8007c34:	e014      	b.n	8007c60 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c36:	f7fa fc45 	bl	80024c4 <HAL_GetTick>
 8007c3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c3c:	e00a      	b.n	8007c54 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c3e:	f7fa fc41 	bl	80024c4 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e135      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c54:	4b62      	ldr	r3, [pc, #392]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1ee      	bne.n	8007c3e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 812a 	beq.w	8007ebe <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c72:	2b18      	cmp	r3, #24
 8007c74:	f000 80ba 	beq.w	8007dec <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	f040 8095 	bne.w	8007dac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c82:	4b57      	ldr	r3, [pc, #348]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a56      	ldr	r2, [pc, #344]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007c88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8e:	f7fa fc19 	bl	80024c4 <HAL_GetTick>
 8007c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c94:	e008      	b.n	8007ca8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c96:	f7fa fc15 	bl	80024c4 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d901      	bls.n	8007ca8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e10b      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1f0      	bne.n	8007c96 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cb4:	4b4a      	ldr	r3, [pc, #296]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007cb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8007de4 <HAL_RCC_OscConfig+0x6c8>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007cc4:	0112      	lsls	r2, r2, #4
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	4945      	ldr	r1, [pc, #276]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	628b      	str	r3, [r1, #40]	@ 0x28
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	025b      	lsls	r3, r3, #9
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	041b      	lsls	r3, r3, #16
 8007cec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	061b      	lsls	r3, r3, #24
 8007cfa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007cfe:	4938      	ldr	r1, [pc, #224]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007d04:	4b36      	ldr	r3, [pc, #216]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d08:	4a35      	ldr	r2, [pc, #212]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d0a:	f023 0301 	bic.w	r3, r3, #1
 8007d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d10:	4b33      	ldr	r3, [pc, #204]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d14:	4b34      	ldr	r3, [pc, #208]	@ (8007de8 <HAL_RCC_OscConfig+0x6cc>)
 8007d16:	4013      	ands	r3, r2
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007d1c:	00d2      	lsls	r2, r2, #3
 8007d1e:	4930      	ldr	r1, [pc, #192]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007d24:	4b2e      	ldr	r3, [pc, #184]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d28:	f023 020c 	bic.w	r2, r3, #12
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d30:	492b      	ldr	r1, [pc, #172]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007d36:	4b2a      	ldr	r3, [pc, #168]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3a:	f023 0202 	bic.w	r2, r3, #2
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d42:	4927      	ldr	r1, [pc, #156]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d48:	4b25      	ldr	r3, [pc, #148]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4c:	4a24      	ldr	r2, [pc, #144]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d54:	4b22      	ldr	r3, [pc, #136]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d58:	4a21      	ldr	r2, [pc, #132]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007d60:	4b1f      	ldr	r3, [pc, #124]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d64:	4a1e      	ldr	r2, [pc, #120]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d70:	4a1b      	ldr	r2, [pc, #108]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d72:	f043 0301 	orr.w	r3, r3, #1
 8007d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d78:	4b19      	ldr	r3, [pc, #100]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a18      	ldr	r2, [pc, #96]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007d7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d84:	f7fa fb9e 	bl	80024c4 <HAL_GetTick>
 8007d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d8a:	e008      	b.n	8007d9e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d8c:	f7fa fb9a 	bl	80024c4 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d901      	bls.n	8007d9e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e090      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d9e:	4b10      	ldr	r3, [pc, #64]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0f0      	beq.n	8007d8c <HAL_RCC_OscConfig+0x670>
 8007daa:	e088      	b.n	8007ebe <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dac:	4b0c      	ldr	r3, [pc, #48]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0b      	ldr	r2, [pc, #44]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db8:	f7fa fb84 	bl	80024c4 <HAL_GetTick>
 8007dbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dc0:	f7fa fb80 	bl	80024c4 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e076      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007dd2:	4b03      	ldr	r3, [pc, #12]	@ (8007de0 <HAL_RCC_OscConfig+0x6c4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1f0      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x6a4>
 8007dde:	e06e      	b.n	8007ebe <HAL_RCC_OscConfig+0x7a2>
 8007de0:	58024400 	.word	0x58024400
 8007de4:	fffffc0c 	.word	0xfffffc0c
 8007de8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007dec:	4b36      	ldr	r3, [pc, #216]	@ (8007ec8 <HAL_RCC_OscConfig+0x7ac>)
 8007dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007df2:	4b35      	ldr	r3, [pc, #212]	@ (8007ec8 <HAL_RCC_OscConfig+0x7ac>)
 8007df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d031      	beq.n	8007e64 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f003 0203 	and.w	r2, r3, #3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d12a      	bne.n	8007e64 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	091b      	lsrs	r3, r3, #4
 8007e12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d122      	bne.n	8007e64 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d11a      	bne.n	8007e64 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	0a5b      	lsrs	r3, r3, #9
 8007e32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d111      	bne.n	8007e64 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	0c1b      	lsrs	r3, r3, #16
 8007e44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d108      	bne.n	8007e64 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	0e1b      	lsrs	r3, r3, #24
 8007e56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d001      	beq.n	8007e68 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e02b      	b.n	8007ec0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007e68:	4b17      	ldr	r3, [pc, #92]	@ (8007ec8 <HAL_RCC_OscConfig+0x7ac>)
 8007e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e6c:	08db      	lsrs	r3, r3, #3
 8007e6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e72:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d01f      	beq.n	8007ebe <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007e7e:	4b12      	ldr	r3, [pc, #72]	@ (8007ec8 <HAL_RCC_OscConfig+0x7ac>)
 8007e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e82:	4a11      	ldr	r2, [pc, #68]	@ (8007ec8 <HAL_RCC_OscConfig+0x7ac>)
 8007e84:	f023 0301 	bic.w	r3, r3, #1
 8007e88:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e8a:	f7fa fb1b 	bl	80024c4 <HAL_GetTick>
 8007e8e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007e90:	bf00      	nop
 8007e92:	f7fa fb17 	bl	80024c4 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d0f9      	beq.n	8007e92 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec8 <HAL_RCC_OscConfig+0x7ac>)
 8007ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ecc <HAL_RCC_OscConfig+0x7b0>)
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007eaa:	00d2      	lsls	r2, r2, #3
 8007eac:	4906      	ldr	r1, [pc, #24]	@ (8007ec8 <HAL_RCC_OscConfig+0x7ac>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007eb2:	4b05      	ldr	r3, [pc, #20]	@ (8007ec8 <HAL_RCC_OscConfig+0x7ac>)
 8007eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb6:	4a04      	ldr	r2, [pc, #16]	@ (8007ec8 <HAL_RCC_OscConfig+0x7ac>)
 8007eb8:	f043 0301 	orr.w	r3, r3, #1
 8007ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3730      	adds	r7, #48	@ 0x30
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	58024400 	.word	0x58024400
 8007ecc:	ffff0007 	.word	0xffff0007

08007ed0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e19c      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ee4:	4b8a      	ldr	r3, [pc, #552]	@ (8008110 <HAL_RCC_ClockConfig+0x240>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d910      	bls.n	8007f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ef2:	4b87      	ldr	r3, [pc, #540]	@ (8008110 <HAL_RCC_ClockConfig+0x240>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f023 020f 	bic.w	r2, r3, #15
 8007efa:	4985      	ldr	r1, [pc, #532]	@ (8008110 <HAL_RCC_ClockConfig+0x240>)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f02:	4b83      	ldr	r3, [pc, #524]	@ (8008110 <HAL_RCC_ClockConfig+0x240>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d001      	beq.n	8007f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e184      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d010      	beq.n	8007f42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	4b7b      	ldr	r3, [pc, #492]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d908      	bls.n	8007f42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f30:	4b78      	ldr	r3, [pc, #480]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	4975      	ldr	r1, [pc, #468]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0308 	and.w	r3, r3, #8
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d010      	beq.n	8007f70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	695a      	ldr	r2, [r3, #20]
 8007f52:	4b70      	ldr	r3, [pc, #448]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d908      	bls.n	8007f70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f5e:	4b6d      	ldr	r3, [pc, #436]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	496a      	ldr	r1, [pc, #424]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0310 	and.w	r3, r3, #16
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d010      	beq.n	8007f9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	699a      	ldr	r2, [r3, #24]
 8007f80:	4b64      	ldr	r3, [pc, #400]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d908      	bls.n	8007f9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f8c:	4b61      	ldr	r3, [pc, #388]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	495e      	ldr	r1, [pc, #376]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d010      	beq.n	8007fcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	69da      	ldr	r2, [r3, #28]
 8007fae:	4b59      	ldr	r3, [pc, #356]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d908      	bls.n	8007fcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007fba:	4b56      	ldr	r3, [pc, #344]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	4953      	ldr	r1, [pc, #332]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d010      	beq.n	8007ffa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	f003 030f 	and.w	r3, r3, #15
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d908      	bls.n	8007ffa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fe8:	4b4a      	ldr	r3, [pc, #296]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	f023 020f 	bic.w	r2, r3, #15
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	4947      	ldr	r1, [pc, #284]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d055      	beq.n	80080b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008006:	4b43      	ldr	r3, [pc, #268]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	4940      	ldr	r1, [pc, #256]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8008014:	4313      	orrs	r3, r2
 8008016:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d107      	bne.n	8008030 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008020:	4b3c      	ldr	r3, [pc, #240]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d121      	bne.n	8008070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e0f6      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2b03      	cmp	r3, #3
 8008036:	d107      	bne.n	8008048 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008038:	4b36      	ldr	r3, [pc, #216]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d115      	bne.n	8008070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e0ea      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d107      	bne.n	8008060 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008050:	4b30      	ldr	r3, [pc, #192]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008058:	2b00      	cmp	r3, #0
 800805a:	d109      	bne.n	8008070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e0de      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008060:	4b2c      	ldr	r3, [pc, #176]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0304 	and.w	r3, r3, #4
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e0d6      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008070:	4b28      	ldr	r3, [pc, #160]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	f023 0207 	bic.w	r2, r3, #7
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	4925      	ldr	r1, [pc, #148]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 800807e:	4313      	orrs	r3, r2
 8008080:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008082:	f7fa fa1f 	bl	80024c4 <HAL_GetTick>
 8008086:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008088:	e00a      	b.n	80080a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800808a:	f7fa fa1b 	bl	80024c4 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008098:	4293      	cmp	r3, r2
 800809a:	d901      	bls.n	80080a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e0be      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d1eb      	bne.n	800808a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d010      	beq.n	80080e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	4b14      	ldr	r3, [pc, #80]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d208      	bcs.n	80080e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080ce:	4b11      	ldr	r3, [pc, #68]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	f023 020f 	bic.w	r2, r3, #15
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	490e      	ldr	r1, [pc, #56]	@ (8008114 <HAL_RCC_ClockConfig+0x244>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008110 <HAL_RCC_ClockConfig+0x240>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d214      	bcs.n	8008118 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ee:	4b08      	ldr	r3, [pc, #32]	@ (8008110 <HAL_RCC_ClockConfig+0x240>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f023 020f 	bic.w	r2, r3, #15
 80080f6:	4906      	ldr	r1, [pc, #24]	@ (8008110 <HAL_RCC_ClockConfig+0x240>)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080fe:	4b04      	ldr	r3, [pc, #16]	@ (8008110 <HAL_RCC_ClockConfig+0x240>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d005      	beq.n	8008118 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e086      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
 8008110:	52002000 	.word	0x52002000
 8008114:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d010      	beq.n	8008146 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691a      	ldr	r2, [r3, #16]
 8008128:	4b3f      	ldr	r3, [pc, #252]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008130:	429a      	cmp	r2, r3
 8008132:	d208      	bcs.n	8008146 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008134:	4b3c      	ldr	r3, [pc, #240]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	4939      	ldr	r1, [pc, #228]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008142:	4313      	orrs	r3, r2
 8008144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0308 	and.w	r3, r3, #8
 800814e:	2b00      	cmp	r3, #0
 8008150:	d010      	beq.n	8008174 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695a      	ldr	r2, [r3, #20]
 8008156:	4b34      	ldr	r3, [pc, #208]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800815e:	429a      	cmp	r2, r3
 8008160:	d208      	bcs.n	8008174 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008162:	4b31      	ldr	r3, [pc, #196]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	492e      	ldr	r1, [pc, #184]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008170:	4313      	orrs	r3, r2
 8008172:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b00      	cmp	r3, #0
 800817e:	d010      	beq.n	80081a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	4b28      	ldr	r3, [pc, #160]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800818c:	429a      	cmp	r2, r3
 800818e:	d208      	bcs.n	80081a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008190:	4b25      	ldr	r3, [pc, #148]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	4922      	ldr	r1, [pc, #136]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d010      	beq.n	80081d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	69da      	ldr	r2, [r3, #28]
 80081b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d208      	bcs.n	80081d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80081be:	4b1a      	ldr	r3, [pc, #104]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	4917      	ldr	r1, [pc, #92]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80081d0:	f000 f834 	bl	800823c <HAL_RCC_GetSysClockFreq>
 80081d4:	4602      	mov	r2, r0
 80081d6:	4b14      	ldr	r3, [pc, #80]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	0a1b      	lsrs	r3, r3, #8
 80081dc:	f003 030f 	and.w	r3, r3, #15
 80081e0:	4912      	ldr	r1, [pc, #72]	@ (800822c <HAL_RCC_ClockConfig+0x35c>)
 80081e2:	5ccb      	ldrb	r3, [r1, r3]
 80081e4:	f003 031f 	and.w	r3, r3, #31
 80081e8:	fa22 f303 	lsr.w	r3, r2, r3
 80081ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008228 <HAL_RCC_ClockConfig+0x358>)
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	4a0d      	ldr	r2, [pc, #52]	@ (800822c <HAL_RCC_ClockConfig+0x35c>)
 80081f8:	5cd3      	ldrb	r3, [r2, r3]
 80081fa:	f003 031f 	and.w	r3, r3, #31
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	fa22 f303 	lsr.w	r3, r2, r3
 8008204:	4a0a      	ldr	r2, [pc, #40]	@ (8008230 <HAL_RCC_ClockConfig+0x360>)
 8008206:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008208:	4a0a      	ldr	r2, [pc, #40]	@ (8008234 <HAL_RCC_ClockConfig+0x364>)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800820e:	4b0a      	ldr	r3, [pc, #40]	@ (8008238 <HAL_RCC_ClockConfig+0x368>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4618      	mov	r0, r3
 8008214:	f7fa f90c 	bl	8002430 <HAL_InitTick>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800821c:	7bfb      	ldrb	r3, [r7, #15]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	58024400 	.word	0x58024400
 800822c:	08013fdc 	.word	0x08013fdc
 8008230:	24000004 	.word	0x24000004
 8008234:	24000000 	.word	0x24000000
 8008238:	24000008 	.word	0x24000008

0800823c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800823c:	b480      	push	{r7}
 800823e:	b089      	sub	sp, #36	@ 0x24
 8008240:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008242:	4bb3      	ldr	r3, [pc, #716]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800824a:	2b18      	cmp	r3, #24
 800824c:	f200 8155 	bhi.w	80084fa <HAL_RCC_GetSysClockFreq+0x2be>
 8008250:	a201      	add	r2, pc, #4	@ (adr r2, 8008258 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	080082bd 	.word	0x080082bd
 800825c:	080084fb 	.word	0x080084fb
 8008260:	080084fb 	.word	0x080084fb
 8008264:	080084fb 	.word	0x080084fb
 8008268:	080084fb 	.word	0x080084fb
 800826c:	080084fb 	.word	0x080084fb
 8008270:	080084fb 	.word	0x080084fb
 8008274:	080084fb 	.word	0x080084fb
 8008278:	080082e3 	.word	0x080082e3
 800827c:	080084fb 	.word	0x080084fb
 8008280:	080084fb 	.word	0x080084fb
 8008284:	080084fb 	.word	0x080084fb
 8008288:	080084fb 	.word	0x080084fb
 800828c:	080084fb 	.word	0x080084fb
 8008290:	080084fb 	.word	0x080084fb
 8008294:	080084fb 	.word	0x080084fb
 8008298:	080082e9 	.word	0x080082e9
 800829c:	080084fb 	.word	0x080084fb
 80082a0:	080084fb 	.word	0x080084fb
 80082a4:	080084fb 	.word	0x080084fb
 80082a8:	080084fb 	.word	0x080084fb
 80082ac:	080084fb 	.word	0x080084fb
 80082b0:	080084fb 	.word	0x080084fb
 80082b4:	080084fb 	.word	0x080084fb
 80082b8:	080082ef 	.word	0x080082ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082bc:	4b94      	ldr	r3, [pc, #592]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d009      	beq.n	80082dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082c8:	4b91      	ldr	r3, [pc, #580]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	08db      	lsrs	r3, r3, #3
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	4a90      	ldr	r2, [pc, #576]	@ (8008514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082d4:	fa22 f303 	lsr.w	r3, r2, r3
 80082d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80082da:	e111      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80082dc:	4b8d      	ldr	r3, [pc, #564]	@ (8008514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082de:	61bb      	str	r3, [r7, #24]
      break;
 80082e0:	e10e      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80082e2:	4b8d      	ldr	r3, [pc, #564]	@ (8008518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80082e4:	61bb      	str	r3, [r7, #24]
      break;
 80082e6:	e10b      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80082e8:	4b8c      	ldr	r3, [pc, #560]	@ (800851c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80082ea:	61bb      	str	r3, [r7, #24]
      break;
 80082ec:	e108      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082ee:	4b88      	ldr	r3, [pc, #544]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f2:	f003 0303 	and.w	r3, r3, #3
 80082f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80082f8:	4b85      	ldr	r3, [pc, #532]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082fc:	091b      	lsrs	r3, r3, #4
 80082fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008302:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008304:	4b82      	ldr	r3, [pc, #520]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800830e:	4b80      	ldr	r3, [pc, #512]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008312:	08db      	lsrs	r3, r3, #3
 8008314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	fb02 f303 	mul.w	r3, r2, r3
 800831e:	ee07 3a90 	vmov	s15, r3
 8008322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008326:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 80e1 	beq.w	80084f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2b02      	cmp	r3, #2
 8008336:	f000 8083 	beq.w	8008440 <HAL_RCC_GetSysClockFreq+0x204>
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b02      	cmp	r3, #2
 800833e:	f200 80a1 	bhi.w	8008484 <HAL_RCC_GetSysClockFreq+0x248>
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <HAL_RCC_GetSysClockFreq+0x114>
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d056      	beq.n	80083fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800834e:	e099      	b.n	8008484 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008350:	4b6f      	ldr	r3, [pc, #444]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d02d      	beq.n	80083b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800835c:	4b6c      	ldr	r3, [pc, #432]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	08db      	lsrs	r3, r3, #3
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	4a6b      	ldr	r2, [pc, #428]	@ (8008514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008368:	fa22 f303 	lsr.w	r3, r2, r3
 800836c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	ee07 3a90 	vmov	s15, r3
 8008374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008386:	4b62      	ldr	r3, [pc, #392]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	ed97 6a02 	vldr	s12, [r7, #8]
 800839a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800839e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80083b6:	e087      	b.n	80084c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008524 <HAL_RCC_GetSysClockFreq+0x2e8>
 80083c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ca:	4b51      	ldr	r3, [pc, #324]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083da:	ed97 6a02 	vldr	s12, [r7, #8]
 80083de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083fa:	e065      	b.n	80084c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008406:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008528 <HAL_RCC_GetSysClockFreq+0x2ec>
 800840a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840e:	4b40      	ldr	r3, [pc, #256]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008422:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008520 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800843e:	e043      	b.n	80084c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800852c <HAL_RCC_GetSysClockFreq+0x2f0>
 800844e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008452:	4b2f      	ldr	r3, [pc, #188]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008462:	ed97 6a02 	vldr	s12, [r7, #8]
 8008466:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800846a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008482:	e021      	b.n	80084c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008528 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008496:	4b1e      	ldr	r3, [pc, #120]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80084aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80084c8:	4b11      	ldr	r3, [pc, #68]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084cc:	0a5b      	lsrs	r3, r3, #9
 80084ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084d2:	3301      	adds	r3, #1
 80084d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80084e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80084e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ec:	ee17 3a90 	vmov	r3, s15
 80084f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80084f2:	e005      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	61bb      	str	r3, [r7, #24]
      break;
 80084f8:	e002      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80084fa:	4b07      	ldr	r3, [pc, #28]	@ (8008518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80084fc:	61bb      	str	r3, [r7, #24]
      break;
 80084fe:	bf00      	nop
  }

  return sysclockfreq;
 8008500:	69bb      	ldr	r3, [r7, #24]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3724      	adds	r7, #36	@ 0x24
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	58024400 	.word	0x58024400
 8008514:	03d09000 	.word	0x03d09000
 8008518:	003d0900 	.word	0x003d0900
 800851c:	016e3600 	.word	0x016e3600
 8008520:	46000000 	.word	0x46000000
 8008524:	4c742400 	.word	0x4c742400
 8008528:	4a742400 	.word	0x4a742400
 800852c:	4bb71b00 	.word	0x4bb71b00

08008530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008536:	f7ff fe81 	bl	800823c <HAL_RCC_GetSysClockFreq>
 800853a:	4602      	mov	r2, r0
 800853c:	4b10      	ldr	r3, [pc, #64]	@ (8008580 <HAL_RCC_GetHCLKFreq+0x50>)
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	0a1b      	lsrs	r3, r3, #8
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	490f      	ldr	r1, [pc, #60]	@ (8008584 <HAL_RCC_GetHCLKFreq+0x54>)
 8008548:	5ccb      	ldrb	r3, [r1, r3]
 800854a:	f003 031f 	and.w	r3, r3, #31
 800854e:	fa22 f303 	lsr.w	r3, r2, r3
 8008552:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008554:	4b0a      	ldr	r3, [pc, #40]	@ (8008580 <HAL_RCC_GetHCLKFreq+0x50>)
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	4a09      	ldr	r2, [pc, #36]	@ (8008584 <HAL_RCC_GetHCLKFreq+0x54>)
 800855e:	5cd3      	ldrb	r3, [r2, r3]
 8008560:	f003 031f 	and.w	r3, r3, #31
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	fa22 f303 	lsr.w	r3, r2, r3
 800856a:	4a07      	ldr	r2, [pc, #28]	@ (8008588 <HAL_RCC_GetHCLKFreq+0x58>)
 800856c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800856e:	4a07      	ldr	r2, [pc, #28]	@ (800858c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008574:	4b04      	ldr	r3, [pc, #16]	@ (8008588 <HAL_RCC_GetHCLKFreq+0x58>)
 8008576:	681b      	ldr	r3, [r3, #0]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	58024400 	.word	0x58024400
 8008584:	08013fdc 	.word	0x08013fdc
 8008588:	24000004 	.word	0x24000004
 800858c:	24000000 	.word	0x24000000

08008590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008594:	f7ff ffcc 	bl	8008530 <HAL_RCC_GetHCLKFreq>
 8008598:	4602      	mov	r2, r0
 800859a:	4b06      	ldr	r3, [pc, #24]	@ (80085b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	091b      	lsrs	r3, r3, #4
 80085a0:	f003 0307 	and.w	r3, r3, #7
 80085a4:	4904      	ldr	r1, [pc, #16]	@ (80085b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085a6:	5ccb      	ldrb	r3, [r1, r3]
 80085a8:	f003 031f 	and.w	r3, r3, #31
 80085ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	58024400 	.word	0x58024400
 80085b8:	08013fdc 	.word	0x08013fdc

080085bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80085c0:	f7ff ffb6 	bl	8008530 <HAL_RCC_GetHCLKFreq>
 80085c4:	4602      	mov	r2, r0
 80085c6:	4b06      	ldr	r3, [pc, #24]	@ (80085e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	0a1b      	lsrs	r3, r3, #8
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	4904      	ldr	r1, [pc, #16]	@ (80085e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80085d2:	5ccb      	ldrb	r3, [r1, r3]
 80085d4:	f003 031f 	and.w	r3, r3, #31
 80085d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80085dc:	4618      	mov	r0, r3
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	58024400 	.word	0x58024400
 80085e4:	08013fdc 	.word	0x08013fdc

080085e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085ec:	b0c6      	sub	sp, #280	@ 0x118
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80085f4:	2300      	movs	r3, #0
 80085f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085fa:	2300      	movs	r3, #0
 80085fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800860c:	2500      	movs	r5, #0
 800860e:	ea54 0305 	orrs.w	r3, r4, r5
 8008612:	d049      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800861a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800861e:	d02f      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008620:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008624:	d828      	bhi.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008626:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800862a:	d01a      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800862c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008630:	d822      	bhi.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800863a:	d007      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800863c:	e01c      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800863e:	4bab      	ldr	r3, [pc, #684]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008642:	4aaa      	ldr	r2, [pc, #680]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008648:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800864a:	e01a      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800864c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008650:	3308      	adds	r3, #8
 8008652:	2102      	movs	r1, #2
 8008654:	4618      	mov	r0, r3
 8008656:	f002 fa49 	bl	800aaec <RCCEx_PLL2_Config>
 800865a:	4603      	mov	r3, r0
 800865c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008660:	e00f      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008666:	3328      	adds	r3, #40	@ 0x28
 8008668:	2102      	movs	r1, #2
 800866a:	4618      	mov	r0, r3
 800866c:	f002 faf0 	bl	800ac50 <RCCEx_PLL3_Config>
 8008670:	4603      	mov	r3, r0
 8008672:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008676:	e004      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800867e:	e000      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10a      	bne.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800868a:	4b98      	ldr	r3, [pc, #608]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800868c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800868e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008698:	4a94      	ldr	r2, [pc, #592]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800869a:	430b      	orrs	r3, r1
 800869c:	6513      	str	r3, [r2, #80]	@ 0x50
 800869e:	e003      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80086a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80086b4:	f04f 0900 	mov.w	r9, #0
 80086b8:	ea58 0309 	orrs.w	r3, r8, r9
 80086bc:	d047      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80086be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d82a      	bhi.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80086c8:	a201      	add	r2, pc, #4	@ (adr r2, 80086d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80086ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ce:	bf00      	nop
 80086d0:	080086e5 	.word	0x080086e5
 80086d4:	080086f3 	.word	0x080086f3
 80086d8:	08008709 	.word	0x08008709
 80086dc:	08008727 	.word	0x08008727
 80086e0:	08008727 	.word	0x08008727
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e4:	4b81      	ldr	r3, [pc, #516]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80086e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e8:	4a80      	ldr	r2, [pc, #512]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80086ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086f0:	e01a      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086f6:	3308      	adds	r3, #8
 80086f8:	2100      	movs	r1, #0
 80086fa:	4618      	mov	r0, r3
 80086fc:	f002 f9f6 	bl	800aaec <RCCEx_PLL2_Config>
 8008700:	4603      	mov	r3, r0
 8008702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008706:	e00f      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800870c:	3328      	adds	r3, #40	@ 0x28
 800870e:	2100      	movs	r1, #0
 8008710:	4618      	mov	r0, r3
 8008712:	f002 fa9d 	bl	800ac50 <RCCEx_PLL3_Config>
 8008716:	4603      	mov	r3, r0
 8008718:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800871c:	e004      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008724:	e000      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008728:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008730:	4b6e      	ldr	r3, [pc, #440]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008734:	f023 0107 	bic.w	r1, r3, #7
 8008738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800873c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800873e:	4a6b      	ldr	r2, [pc, #428]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008740:	430b      	orrs	r3, r1
 8008742:	6513      	str	r3, [r2, #80]	@ 0x50
 8008744:	e003      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800874a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800874e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008756:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800875a:	f04f 0b00 	mov.w	fp, #0
 800875e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008762:	d05b      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008768:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800876c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008770:	d03b      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008772:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008776:	d834      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008778:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800877c:	d037      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 800877e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008782:	d82e      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008784:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008788:	d033      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800878a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800878e:	d828      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008790:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008794:	d01a      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008796:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800879a:	d822      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80087a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087a4:	d007      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80087a6:	e01c      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087a8:	4b50      	ldr	r3, [pc, #320]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ac:	4a4f      	ldr	r2, [pc, #316]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087b4:	e01e      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ba:	3308      	adds	r3, #8
 80087bc:	2100      	movs	r1, #0
 80087be:	4618      	mov	r0, r3
 80087c0:	f002 f994 	bl	800aaec <RCCEx_PLL2_Config>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80087ca:	e013      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d0:	3328      	adds	r3, #40	@ 0x28
 80087d2:	2100      	movs	r1, #0
 80087d4:	4618      	mov	r0, r3
 80087d6:	f002 fa3b 	bl	800ac50 <RCCEx_PLL3_Config>
 80087da:	4603      	mov	r3, r0
 80087dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087e0:	e008      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80087e8:	e004      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80087ea:	bf00      	nop
 80087ec:	e002      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80087ee:	bf00      	nop
 80087f0:	e000      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80087f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10b      	bne.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80087fc:	4b3b      	ldr	r3, [pc, #236]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008800:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008808:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800880c:	4a37      	ldr	r2, [pc, #220]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800880e:	430b      	orrs	r3, r1
 8008810:	6593      	str	r3, [r2, #88]	@ 0x58
 8008812:	e003      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008818:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800881c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008828:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800882c:	2300      	movs	r3, #0
 800882e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008832:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008836:	460b      	mov	r3, r1
 8008838:	4313      	orrs	r3, r2
 800883a:	d05d      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800883c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008840:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008844:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008848:	d03b      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800884a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800884e:	d834      	bhi.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008850:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008854:	d037      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008856:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800885a:	d82e      	bhi.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800885c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008860:	d033      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008862:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008866:	d828      	bhi.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008868:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800886c:	d01a      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800886e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008872:	d822      	bhi.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800887c:	d007      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800887e:	e01c      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008880:	4b1a      	ldr	r3, [pc, #104]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008884:	4a19      	ldr	r2, [pc, #100]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800888a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800888c:	e01e      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800888e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008892:	3308      	adds	r3, #8
 8008894:	2100      	movs	r1, #0
 8008896:	4618      	mov	r0, r3
 8008898:	f002 f928 	bl	800aaec <RCCEx_PLL2_Config>
 800889c:	4603      	mov	r3, r0
 800889e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80088a2:	e013      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a8:	3328      	adds	r3, #40	@ 0x28
 80088aa:	2100      	movs	r1, #0
 80088ac:	4618      	mov	r0, r3
 80088ae:	f002 f9cf 	bl	800ac50 <RCCEx_PLL3_Config>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088b8:	e008      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80088c0:	e004      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80088c2:	bf00      	nop
 80088c4:	e002      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80088c6:	bf00      	nop
 80088c8:	e000      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80088ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10d      	bne.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80088d4:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80088dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80088e4:	4a01      	ldr	r2, [pc, #4]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088e6:	430b      	orrs	r3, r1
 80088e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80088ea:	e005      	b.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80088ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80088f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008904:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008908:	2300      	movs	r3, #0
 800890a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800890e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008912:	460b      	mov	r3, r1
 8008914:	4313      	orrs	r3, r2
 8008916:	d03a      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800891e:	2b30      	cmp	r3, #48	@ 0x30
 8008920:	d01f      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008922:	2b30      	cmp	r3, #48	@ 0x30
 8008924:	d819      	bhi.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008926:	2b20      	cmp	r3, #32
 8008928:	d00c      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800892a:	2b20      	cmp	r3, #32
 800892c:	d815      	bhi.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800892e:	2b00      	cmp	r3, #0
 8008930:	d019      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008932:	2b10      	cmp	r3, #16
 8008934:	d111      	bne.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008936:	4baa      	ldr	r3, [pc, #680]	@ (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893a:	4aa9      	ldr	r2, [pc, #676]	@ (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800893c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008942:	e011      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008948:	3308      	adds	r3, #8
 800894a:	2102      	movs	r1, #2
 800894c:	4618      	mov	r0, r3
 800894e:	f002 f8cd 	bl	800aaec <RCCEx_PLL2_Config>
 8008952:	4603      	mov	r3, r0
 8008954:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008958:	e006      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008960:	e002      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008962:	bf00      	nop
 8008964:	e000      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008968:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008970:	4b9b      	ldr	r3, [pc, #620]	@ (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008974:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800897c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800897e:	4a98      	ldr	r2, [pc, #608]	@ (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008980:	430b      	orrs	r3, r1
 8008982:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008984:	e003      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008986:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800898a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800898e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800899a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800899e:	2300      	movs	r3, #0
 80089a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80089a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80089a8:	460b      	mov	r3, r1
 80089aa:	4313      	orrs	r3, r2
 80089ac:	d051      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80089ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089b8:	d035      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80089ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089be:	d82e      	bhi.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80089c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089c4:	d031      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80089c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089ca:	d828      	bhi.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80089cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089d0:	d01a      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80089d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089d6:	d822      	bhi.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80089dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089e0:	d007      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80089e2:	e01c      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e4:	4b7e      	ldr	r3, [pc, #504]	@ (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80089e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e8:	4a7d      	ldr	r2, [pc, #500]	@ (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80089ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089f0:	e01c      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f6:	3308      	adds	r3, #8
 80089f8:	2100      	movs	r1, #0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f002 f876 	bl	800aaec <RCCEx_PLL2_Config>
 8008a00:	4603      	mov	r3, r0
 8008a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008a06:	e011      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a0c:	3328      	adds	r3, #40	@ 0x28
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f002 f91d 	bl	800ac50 <RCCEx_PLL3_Config>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008a1c:	e006      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a24:	e002      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008a34:	4b6a      	ldr	r3, [pc, #424]	@ (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a42:	4a67      	ldr	r2, [pc, #412]	@ (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a44:	430b      	orrs	r3, r1
 8008a46:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a48:	e003      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008a5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008a62:	2300      	movs	r3, #0
 8008a64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008a68:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	d053      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a7c:	d033      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008a7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a82:	d82c      	bhi.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008a84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a88:	d02f      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008a8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a8e:	d826      	bhi.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008a90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a94:	d02b      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008a96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a9a:	d820      	bhi.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aa0:	d012      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008aa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aa6:	d81a      	bhi.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d022      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ab0:	d115      	bne.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	2101      	movs	r1, #1
 8008aba:	4618      	mov	r0, r3
 8008abc:	f002 f816 	bl	800aaec <RCCEx_PLL2_Config>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ac6:	e015      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008acc:	3328      	adds	r3, #40	@ 0x28
 8008ace:	2101      	movs	r1, #1
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f002 f8bd 	bl	800ac50 <RCCEx_PLL3_Config>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008adc:	e00a      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ae4:	e006      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008ae6:	bf00      	nop
 8008ae8:	e004      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008aea:	bf00      	nop
 8008aec:	e002      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008aee:	bf00      	nop
 8008af0:	e000      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008af4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10a      	bne.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008afc:	4b38      	ldr	r3, [pc, #224]	@ (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b0a:	4a35      	ldr	r2, [pc, #212]	@ (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b10:	e003      	b.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008b30:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008b34:	460b      	mov	r3, r1
 8008b36:	4313      	orrs	r3, r2
 8008b38:	d058      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b46:	d033      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b4c:	d82c      	bhi.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b52:	d02f      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b58:	d826      	bhi.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008b5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b5e:	d02b      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008b60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b64:	d820      	bhi.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b6a:	d012      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b70:	d81a      	bhi.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d022      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008b76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b7a:	d115      	bne.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b80:	3308      	adds	r3, #8
 8008b82:	2101      	movs	r1, #1
 8008b84:	4618      	mov	r0, r3
 8008b86:	f001 ffb1 	bl	800aaec <RCCEx_PLL2_Config>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b90:	e015      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b96:	3328      	adds	r3, #40	@ 0x28
 8008b98:	2101      	movs	r1, #1
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f002 f858 	bl	800ac50 <RCCEx_PLL3_Config>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008ba6:	e00a      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008bae:	e006      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008bb0:	bf00      	nop
 8008bb2:	e004      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008bb4:	bf00      	nop
 8008bb6:	e002      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008bb8:	bf00      	nop
 8008bba:	e000      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10e      	bne.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008bc6:	4b06      	ldr	r3, [pc, #24]	@ (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008bd6:	4a02      	ldr	r2, [pc, #8]	@ (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bd8:	430b      	orrs	r3, r1
 8008bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bdc:	e006      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008bde:	bf00      	nop
 8008be0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008be8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008c02:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	d037      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c16:	d00e      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c1c:	d816      	bhi.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d018      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008c22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c26:	d111      	bne.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c28:	4bc4      	ldr	r3, [pc, #784]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2c:	4ac3      	ldr	r2, [pc, #780]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c34:	e00f      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c3a:	3308      	adds	r3, #8
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 ff54 	bl	800aaec <RCCEx_PLL2_Config>
 8008c44:	4603      	mov	r3, r0
 8008c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c4a:	e004      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c52:	e000      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10a      	bne.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c5e:	4bb7      	ldr	r3, [pc, #732]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c6c:	4ab3      	ldr	r2, [pc, #716]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c6e:	430b      	orrs	r3, r1
 8008c70:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c72:	e003      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008c88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008c96:	460b      	mov	r3, r1
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	d039      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d81c      	bhi.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008ce9 	.word	0x08008ce9
 8008cb0:	08008cbd 	.word	0x08008cbd
 8008cb4:	08008ccb 	.word	0x08008ccb
 8008cb8:	08008ce9 	.word	0x08008ce9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cbc:	4b9f      	ldr	r3, [pc, #636]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc0:	4a9e      	ldr	r2, [pc, #632]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008cc8:	e00f      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cce:	3308      	adds	r3, #8
 8008cd0:	2102      	movs	r1, #2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 ff0a 	bl	800aaec <RCCEx_PLL2_Config>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008cde:	e004      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ce6:	e000      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10a      	bne.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008cf2:	4b92      	ldr	r3, [pc, #584]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cf6:	f023 0103 	bic.w	r1, r3, #3
 8008cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d00:	4a8e      	ldr	r2, [pc, #568]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d02:	430b      	orrs	r3, r1
 8008d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d06:	e003      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d20:	2300      	movs	r3, #0
 8008d22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	f000 8099 	beq.w	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d32:	4b83      	ldr	r3, [pc, #524]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a82      	ldr	r2, [pc, #520]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d3e:	f7f9 fbc1 	bl	80024c4 <HAL_GetTick>
 8008d42:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d46:	e00b      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d48:	f7f9 fbbc 	bl	80024c4 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	2b64      	cmp	r3, #100	@ 0x64
 8008d56:	d903      	bls.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d5e:	e005      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d60:	4b77      	ldr	r3, [pc, #476]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0ed      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d173      	bne.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d74:	4b71      	ldr	r3, [pc, #452]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d80:	4053      	eors	r3, r2
 8008d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d015      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d92:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d96:	4b69      	ldr	r3, [pc, #420]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d9a:	4a68      	ldr	r2, [pc, #416]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008da0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008da2:	4b66      	ldr	r3, [pc, #408]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008da6:	4a65      	ldr	r2, [pc, #404]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008dae:	4a63      	ldr	r2, [pc, #396]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dc2:	d118      	bne.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc4:	f7f9 fb7e 	bl	80024c4 <HAL_GetTick>
 8008dc8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dcc:	e00d      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dce:	f7f9 fb79 	bl	80024c4 <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008dd8:	1ad2      	subs	r2, r2, r3
 8008dda:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d903      	bls.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8008de8:	e005      	b.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dea:	4b54      	ldr	r3, [pc, #336]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dee:	f003 0302 	and.w	r3, r3, #2
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0eb      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008df6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d129      	bne.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e0e:	d10e      	bne.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008e10:	4b4a      	ldr	r3, [pc, #296]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e20:	091a      	lsrs	r2, r3, #4
 8008e22:	4b48      	ldr	r3, [pc, #288]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008e24:	4013      	ands	r3, r2
 8008e26:	4a45      	ldr	r2, [pc, #276]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	6113      	str	r3, [r2, #16]
 8008e2c:	e005      	b.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008e2e:	4b43      	ldr	r3, [pc, #268]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	4a42      	ldr	r2, [pc, #264]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008e38:	6113      	str	r3, [r2, #16]
 8008e3a:	4b40      	ldr	r3, [pc, #256]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e3c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e4c:	430b      	orrs	r3, r1
 8008e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e50:	e008      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8008e5a:	e003      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f002 0301 	and.w	r3, r2, #1
 8008e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e74:	2300      	movs	r3, #0
 8008e76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008e7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4313      	orrs	r3, r2
 8008e82:	f000 808f 	beq.w	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e8c:	2b28      	cmp	r3, #40	@ 0x28
 8008e8e:	d871      	bhi.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008e90:	a201      	add	r2, pc, #4	@ (adr r2, 8008e98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008f7d 	.word	0x08008f7d
 8008e9c:	08008f75 	.word	0x08008f75
 8008ea0:	08008f75 	.word	0x08008f75
 8008ea4:	08008f75 	.word	0x08008f75
 8008ea8:	08008f75 	.word	0x08008f75
 8008eac:	08008f75 	.word	0x08008f75
 8008eb0:	08008f75 	.word	0x08008f75
 8008eb4:	08008f75 	.word	0x08008f75
 8008eb8:	08008f49 	.word	0x08008f49
 8008ebc:	08008f75 	.word	0x08008f75
 8008ec0:	08008f75 	.word	0x08008f75
 8008ec4:	08008f75 	.word	0x08008f75
 8008ec8:	08008f75 	.word	0x08008f75
 8008ecc:	08008f75 	.word	0x08008f75
 8008ed0:	08008f75 	.word	0x08008f75
 8008ed4:	08008f75 	.word	0x08008f75
 8008ed8:	08008f5f 	.word	0x08008f5f
 8008edc:	08008f75 	.word	0x08008f75
 8008ee0:	08008f75 	.word	0x08008f75
 8008ee4:	08008f75 	.word	0x08008f75
 8008ee8:	08008f75 	.word	0x08008f75
 8008eec:	08008f75 	.word	0x08008f75
 8008ef0:	08008f75 	.word	0x08008f75
 8008ef4:	08008f75 	.word	0x08008f75
 8008ef8:	08008f7d 	.word	0x08008f7d
 8008efc:	08008f75 	.word	0x08008f75
 8008f00:	08008f75 	.word	0x08008f75
 8008f04:	08008f75 	.word	0x08008f75
 8008f08:	08008f75 	.word	0x08008f75
 8008f0c:	08008f75 	.word	0x08008f75
 8008f10:	08008f75 	.word	0x08008f75
 8008f14:	08008f75 	.word	0x08008f75
 8008f18:	08008f7d 	.word	0x08008f7d
 8008f1c:	08008f75 	.word	0x08008f75
 8008f20:	08008f75 	.word	0x08008f75
 8008f24:	08008f75 	.word	0x08008f75
 8008f28:	08008f75 	.word	0x08008f75
 8008f2c:	08008f75 	.word	0x08008f75
 8008f30:	08008f75 	.word	0x08008f75
 8008f34:	08008f75 	.word	0x08008f75
 8008f38:	08008f7d 	.word	0x08008f7d
 8008f3c:	58024400 	.word	0x58024400
 8008f40:	58024800 	.word	0x58024800
 8008f44:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f4c:	3308      	adds	r3, #8
 8008f4e:	2101      	movs	r1, #1
 8008f50:	4618      	mov	r0, r3
 8008f52:	f001 fdcb 	bl	800aaec <RCCEx_PLL2_Config>
 8008f56:	4603      	mov	r3, r0
 8008f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f5c:	e00f      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f62:	3328      	adds	r3, #40	@ 0x28
 8008f64:	2101      	movs	r1, #1
 8008f66:	4618      	mov	r0, r3
 8008f68:	f001 fe72 	bl	800ac50 <RCCEx_PLL3_Config>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f72:	e004      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f7a:	e000      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10a      	bne.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f86:	4bbf      	ldr	r3, [pc, #764]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f8a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f94:	4abb      	ldr	r2, [pc, #748]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008f96:	430b      	orrs	r3, r1
 8008f98:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f9a:	e003      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fac:	f002 0302 	and.w	r3, r2, #2
 8008fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	d041      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fca:	2b05      	cmp	r3, #5
 8008fcc:	d824      	bhi.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008fce:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd4:	08009021 	.word	0x08009021
 8008fd8:	08008fed 	.word	0x08008fed
 8008fdc:	08009003 	.word	0x08009003
 8008fe0:	08009021 	.word	0x08009021
 8008fe4:	08009021 	.word	0x08009021
 8008fe8:	08009021 	.word	0x08009021
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	2101      	movs	r1, #1
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f001 fd79 	bl	800aaec <RCCEx_PLL2_Config>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009000:	e00f      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009006:	3328      	adds	r3, #40	@ 0x28
 8009008:	2101      	movs	r1, #1
 800900a:	4618      	mov	r0, r3
 800900c:	f001 fe20 	bl	800ac50 <RCCEx_PLL3_Config>
 8009010:	4603      	mov	r3, r0
 8009012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009016:	e004      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800901e:	e000      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10a      	bne.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800902a:	4b96      	ldr	r3, [pc, #600]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800902c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800902e:	f023 0107 	bic.w	r1, r3, #7
 8009032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009038:	4a92      	ldr	r2, [pc, #584]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800903a:	430b      	orrs	r3, r1
 800903c:	6553      	str	r3, [r2, #84]	@ 0x54
 800903e:	e003      	b.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009044:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009050:	f002 0304 	and.w	r3, r2, #4
 8009054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009058:	2300      	movs	r3, #0
 800905a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800905e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009062:	460b      	mov	r3, r1
 8009064:	4313      	orrs	r3, r2
 8009066:	d044      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800906c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009070:	2b05      	cmp	r3, #5
 8009072:	d825      	bhi.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009074:	a201      	add	r2, pc, #4	@ (adr r2, 800907c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907a:	bf00      	nop
 800907c:	080090c9 	.word	0x080090c9
 8009080:	08009095 	.word	0x08009095
 8009084:	080090ab 	.word	0x080090ab
 8009088:	080090c9 	.word	0x080090c9
 800908c:	080090c9 	.word	0x080090c9
 8009090:	080090c9 	.word	0x080090c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009098:	3308      	adds	r3, #8
 800909a:	2101      	movs	r1, #1
 800909c:	4618      	mov	r0, r3
 800909e:	f001 fd25 	bl	800aaec <RCCEx_PLL2_Config>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80090a8:	e00f      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ae:	3328      	adds	r3, #40	@ 0x28
 80090b0:	2101      	movs	r1, #1
 80090b2:	4618      	mov	r0, r3
 80090b4:	f001 fdcc 	bl	800ac50 <RCCEx_PLL3_Config>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80090be:	e004      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090c6:	e000      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80090c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10b      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80090d2:	4b6c      	ldr	r3, [pc, #432]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80090d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d6:	f023 0107 	bic.w	r1, r3, #7
 80090da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090e2:	4a68      	ldr	r2, [pc, #416]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80090e4:	430b      	orrs	r3, r1
 80090e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80090e8:	e003      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80090f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f002 0320 	and.w	r3, r2, #32
 80090fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009102:	2300      	movs	r3, #0
 8009104:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009108:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800910c:	460b      	mov	r3, r1
 800910e:	4313      	orrs	r3, r2
 8009110:	d055      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009116:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800911a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800911e:	d033      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009124:	d82c      	bhi.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800912a:	d02f      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800912c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009130:	d826      	bhi.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009132:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009136:	d02b      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009138:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800913c:	d820      	bhi.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800913e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009142:	d012      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009148:	d81a      	bhi.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d022      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800914e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009152:	d115      	bne.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009158:	3308      	adds	r3, #8
 800915a:	2100      	movs	r1, #0
 800915c:	4618      	mov	r0, r3
 800915e:	f001 fcc5 	bl	800aaec <RCCEx_PLL2_Config>
 8009162:	4603      	mov	r3, r0
 8009164:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009168:	e015      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800916a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800916e:	3328      	adds	r3, #40	@ 0x28
 8009170:	2102      	movs	r1, #2
 8009172:	4618      	mov	r0, r3
 8009174:	f001 fd6c 	bl	800ac50 <RCCEx_PLL3_Config>
 8009178:	4603      	mov	r3, r0
 800917a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800917e:	e00a      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009186:	e006      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009188:	bf00      	nop
 800918a:	e004      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800918c:	bf00      	nop
 800918e:	e002      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009190:	bf00      	nop
 8009192:	e000      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009196:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10b      	bne.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800919e:	4b39      	ldr	r3, [pc, #228]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80091a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80091a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091ae:	4a35      	ldr	r2, [pc, #212]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80091b0:	430b      	orrs	r3, r1
 80091b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80091b4:	e003      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80091be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80091ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80091ce:	2300      	movs	r3, #0
 80091d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80091d4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80091d8:	460b      	mov	r3, r1
 80091da:	4313      	orrs	r3, r2
 80091dc:	d058      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80091de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80091e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80091ea:	d033      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80091ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80091f0:	d82c      	bhi.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80091f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091f6:	d02f      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80091f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091fc:	d826      	bhi.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80091fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009202:	d02b      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009204:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009208:	d820      	bhi.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800920a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800920e:	d012      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009214:	d81a      	bhi.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009216:	2b00      	cmp	r3, #0
 8009218:	d022      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800921a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800921e:	d115      	bne.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009224:	3308      	adds	r3, #8
 8009226:	2100      	movs	r1, #0
 8009228:	4618      	mov	r0, r3
 800922a:	f001 fc5f 	bl	800aaec <RCCEx_PLL2_Config>
 800922e:	4603      	mov	r3, r0
 8009230:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009234:	e015      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800923a:	3328      	adds	r3, #40	@ 0x28
 800923c:	2102      	movs	r1, #2
 800923e:	4618      	mov	r0, r3
 8009240:	f001 fd06 	bl	800ac50 <RCCEx_PLL3_Config>
 8009244:	4603      	mov	r3, r0
 8009246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800924a:	e00a      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009252:	e006      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009254:	bf00      	nop
 8009256:	e004      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009258:	bf00      	nop
 800925a:	e002      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800925c:	bf00      	nop
 800925e:	e000      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009262:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10e      	bne.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800926a:	4b06      	ldr	r3, [pc, #24]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800926c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800926e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009276:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800927a:	4a02      	ldr	r2, [pc, #8]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800927c:	430b      	orrs	r3, r1
 800927e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009280:	e006      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009282:	bf00      	nop
 8009284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800928c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009298:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800929c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092a0:	2300      	movs	r3, #0
 80092a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80092aa:	460b      	mov	r3, r1
 80092ac:	4313      	orrs	r3, r2
 80092ae:	d055      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80092b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80092b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80092bc:	d033      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80092be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80092c2:	d82c      	bhi.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80092c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c8:	d02f      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80092ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092ce:	d826      	bhi.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80092d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80092d4:	d02b      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80092d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80092da:	d820      	bhi.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80092dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092e0:	d012      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80092e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092e6:	d81a      	bhi.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d022      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80092ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092f0:	d115      	bne.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f6:	3308      	adds	r3, #8
 80092f8:	2100      	movs	r1, #0
 80092fa:	4618      	mov	r0, r3
 80092fc:	f001 fbf6 	bl	800aaec <RCCEx_PLL2_Config>
 8009300:	4603      	mov	r3, r0
 8009302:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009306:	e015      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800930c:	3328      	adds	r3, #40	@ 0x28
 800930e:	2102      	movs	r1, #2
 8009310:	4618      	mov	r0, r3
 8009312:	f001 fc9d 	bl	800ac50 <RCCEx_PLL3_Config>
 8009316:	4603      	mov	r3, r0
 8009318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800931c:	e00a      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009324:	e006      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009326:	bf00      	nop
 8009328:	e004      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800932a:	bf00      	nop
 800932c:	e002      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800932e:	bf00      	nop
 8009330:	e000      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10b      	bne.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800933c:	4ba0      	ldr	r3, [pc, #640]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800933e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009340:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009348:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800934c:	4a9c      	ldr	r2, [pc, #624]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800934e:	430b      	orrs	r3, r1
 8009350:	6593      	str	r3, [r2, #88]	@ 0x58
 8009352:	e003      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009354:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009358:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800935c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	f002 0308 	and.w	r3, r2, #8
 8009368:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800936c:	2300      	movs	r3, #0
 800936e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009372:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009376:	460b      	mov	r3, r1
 8009378:	4313      	orrs	r3, r2
 800937a:	d01e      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800937c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009388:	d10c      	bne.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800938a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800938e:	3328      	adds	r3, #40	@ 0x28
 8009390:	2102      	movs	r1, #2
 8009392:	4618      	mov	r0, r3
 8009394:	f001 fc5c 	bl	800ac50 <RCCEx_PLL3_Config>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d002      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80093a4:	4b86      	ldr	r3, [pc, #536]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80093a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80093ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093b4:	4a82      	ldr	r2, [pc, #520]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80093b6:	430b      	orrs	r3, r1
 80093b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80093ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f002 0310 	and.w	r3, r2, #16
 80093c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093ca:	2300      	movs	r3, #0
 80093cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80093d4:	460b      	mov	r3, r1
 80093d6:	4313      	orrs	r3, r2
 80093d8:	d01e      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80093da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093e6:	d10c      	bne.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80093e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ec:	3328      	adds	r3, #40	@ 0x28
 80093ee:	2102      	movs	r1, #2
 80093f0:	4618      	mov	r0, r3
 80093f2:	f001 fc2d 	bl	800ac50 <RCCEx_PLL3_Config>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009402:	4b6f      	ldr	r3, [pc, #444]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009406:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800940a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800940e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009412:	4a6b      	ldr	r2, [pc, #428]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009414:	430b      	orrs	r3, r1
 8009416:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009424:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009426:	2300      	movs	r3, #0
 8009428:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800942a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800942e:	460b      	mov	r3, r1
 8009430:	4313      	orrs	r3, r2
 8009432:	d03e      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009438:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800943c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009440:	d022      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009446:	d81b      	bhi.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800944c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009450:	d00b      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009452:	e015      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009458:	3308      	adds	r3, #8
 800945a:	2100      	movs	r1, #0
 800945c:	4618      	mov	r0, r3
 800945e:	f001 fb45 	bl	800aaec <RCCEx_PLL2_Config>
 8009462:	4603      	mov	r3, r0
 8009464:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009468:	e00f      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800946a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800946e:	3328      	adds	r3, #40	@ 0x28
 8009470:	2102      	movs	r1, #2
 8009472:	4618      	mov	r0, r3
 8009474:	f001 fbec 	bl	800ac50 <RCCEx_PLL3_Config>
 8009478:	4603      	mov	r3, r0
 800947a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800947e:	e004      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009486:	e000      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800948a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10b      	bne.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009492:	4b4b      	ldr	r3, [pc, #300]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009496:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800949a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800949e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80094a2:	4a47      	ldr	r2, [pc, #284]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80094a4:	430b      	orrs	r3, r1
 80094a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80094a8:	e003      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80094be:	673b      	str	r3, [r7, #112]	@ 0x70
 80094c0:	2300      	movs	r3, #0
 80094c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80094c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80094c8:	460b      	mov	r3, r1
 80094ca:	4313      	orrs	r3, r2
 80094cc:	d03b      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80094ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094da:	d01f      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80094dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094e0:	d818      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80094e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094e6:	d003      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80094e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094ec:	d007      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80094ee:	e011      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094f0:	4b33      	ldr	r3, [pc, #204]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80094f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f4:	4a32      	ldr	r2, [pc, #200]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80094f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80094fc:	e00f      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009502:	3328      	adds	r3, #40	@ 0x28
 8009504:	2101      	movs	r1, #1
 8009506:	4618      	mov	r0, r3
 8009508:	f001 fba2 	bl	800ac50 <RCCEx_PLL3_Config>
 800950c:	4603      	mov	r3, r0
 800950e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009512:	e004      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800951a:	e000      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800951c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800951e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10b      	bne.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009526:	4b26      	ldr	r3, [pc, #152]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800952a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800952e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009536:	4a22      	ldr	r2, [pc, #136]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009538:	430b      	orrs	r3, r1
 800953a:	6553      	str	r3, [r2, #84]	@ 0x54
 800953c:	e003      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800953e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009542:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009552:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009554:	2300      	movs	r3, #0
 8009556:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009558:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800955c:	460b      	mov	r3, r1
 800955e:	4313      	orrs	r3, r2
 8009560:	d034      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800956c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009570:	d007      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009572:	e011      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009574:	4b12      	ldr	r3, [pc, #72]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	4a11      	ldr	r2, [pc, #68]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800957a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800957e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009580:	e00e      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009586:	3308      	adds	r3, #8
 8009588:	2102      	movs	r1, #2
 800958a:	4618      	mov	r0, r3
 800958c:	f001 faae 	bl	800aaec <RCCEx_PLL2_Config>
 8009590:	4603      	mov	r3, r0
 8009592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009596:	e003      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800959e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10d      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80095a8:	4b05      	ldr	r3, [pc, #20]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80095aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80095b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b6:	4a02      	ldr	r2, [pc, #8]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80095b8:	430b      	orrs	r3, r1
 80095ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095bc:	e006      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80095be:	bf00      	nop
 80095c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80095d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80095da:	2300      	movs	r3, #0
 80095dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80095de:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80095e2:	460b      	mov	r3, r1
 80095e4:	4313      	orrs	r3, r2
 80095e6:	d00c      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ec:	3328      	adds	r3, #40	@ 0x28
 80095ee:	2102      	movs	r1, #2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f001 fb2d 	bl	800ac50 <RCCEx_PLL3_Config>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800960e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009610:	2300      	movs	r3, #0
 8009612:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009614:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009618:	460b      	mov	r3, r1
 800961a:	4313      	orrs	r3, r2
 800961c:	d036      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800961e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009622:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009624:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009628:	d018      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800962a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800962e:	d811      	bhi.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009634:	d014      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800963a:	d80b      	bhi.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800963c:	2b00      	cmp	r3, #0
 800963e:	d011      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009644:	d106      	bne.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009646:	4bb7      	ldr	r3, [pc, #732]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964a:	4ab6      	ldr	r2, [pc, #728]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800964c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009650:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009652:	e008      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800965a:	e004      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800965c:	bf00      	nop
 800965e:	e002      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009660:	bf00      	nop
 8009662:	e000      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009666:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10a      	bne.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800966e:	4bad      	ldr	r3, [pc, #692]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009672:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800967a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800967c:	4aa9      	ldr	r2, [pc, #676]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800967e:	430b      	orrs	r3, r1
 8009680:	6553      	str	r3, [r2, #84]	@ 0x54
 8009682:	e003      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009684:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009688:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800968c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009698:	653b      	str	r3, [r7, #80]	@ 0x50
 800969a:	2300      	movs	r3, #0
 800969c:	657b      	str	r3, [r7, #84]	@ 0x54
 800969e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80096a2:	460b      	mov	r3, r1
 80096a4:	4313      	orrs	r3, r2
 80096a6:	d009      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80096a8:	4b9e      	ldr	r3, [pc, #632]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80096b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096b6:	4a9b      	ldr	r2, [pc, #620]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096b8:	430b      	orrs	r3, r1
 80096ba:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80096bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80096c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096ca:	2300      	movs	r3, #0
 80096cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80096d2:	460b      	mov	r3, r1
 80096d4:	4313      	orrs	r3, r2
 80096d6:	d009      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80096d8:	4b92      	ldr	r3, [pc, #584]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096dc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80096e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096e6:	4a8f      	ldr	r2, [pc, #572]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096e8:	430b      	orrs	r3, r1
 80096ea:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80096ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80096f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80096fa:	2300      	movs	r3, #0
 80096fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80096fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009702:	460b      	mov	r3, r1
 8009704:	4313      	orrs	r3, r2
 8009706:	d00e      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009708:	4b86      	ldr	r3, [pc, #536]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	4a85      	ldr	r2, [pc, #532]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800970e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009712:	6113      	str	r3, [r2, #16]
 8009714:	4b83      	ldr	r3, [pc, #524]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009716:	6919      	ldr	r1, [r3, #16]
 8009718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800971c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009720:	4a80      	ldr	r2, [pc, #512]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009722:	430b      	orrs	r3, r1
 8009724:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009734:	2300      	movs	r3, #0
 8009736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009738:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800973c:	460b      	mov	r3, r1
 800973e:	4313      	orrs	r3, r2
 8009740:	d009      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009742:	4b78      	ldr	r3, [pc, #480]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009746:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800974a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800974e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009750:	4a74      	ldr	r2, [pc, #464]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009752:	430b      	orrs	r3, r1
 8009754:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009762:	633b      	str	r3, [r7, #48]	@ 0x30
 8009764:	2300      	movs	r3, #0
 8009766:	637b      	str	r3, [r7, #52]	@ 0x34
 8009768:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800976c:	460b      	mov	r3, r1
 800976e:	4313      	orrs	r3, r2
 8009770:	d00a      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009772:	4b6c      	ldr	r3, [pc, #432]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009776:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800977a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009782:	4a68      	ldr	r2, [pc, #416]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009784:	430b      	orrs	r3, r1
 8009786:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	2100      	movs	r1, #0
 8009792:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800979a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800979e:	460b      	mov	r3, r1
 80097a0:	4313      	orrs	r3, r2
 80097a2:	d011      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a8:	3308      	adds	r3, #8
 80097aa:	2100      	movs	r1, #0
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 f99d 	bl	800aaec <RCCEx_PLL2_Config>
 80097b2:	4603      	mov	r3, r0
 80097b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80097b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80097c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	2100      	movs	r1, #0
 80097d2:	6239      	str	r1, [r7, #32]
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80097da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80097de:	460b      	mov	r3, r1
 80097e0:	4313      	orrs	r3, r2
 80097e2:	d011      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e8:	3308      	adds	r3, #8
 80097ea:	2101      	movs	r1, #1
 80097ec:	4618      	mov	r0, r3
 80097ee:	f001 f97d 	bl	800aaec <RCCEx_PLL2_Config>
 80097f2:	4603      	mov	r3, r0
 80097f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80097f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d003      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009800:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009804:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009810:	2100      	movs	r1, #0
 8009812:	61b9      	str	r1, [r7, #24]
 8009814:	f003 0304 	and.w	r3, r3, #4
 8009818:	61fb      	str	r3, [r7, #28]
 800981a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800981e:	460b      	mov	r3, r1
 8009820:	4313      	orrs	r3, r2
 8009822:	d011      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009828:	3308      	adds	r3, #8
 800982a:	2102      	movs	r1, #2
 800982c:	4618      	mov	r0, r3
 800982e:	f001 f95d 	bl	800aaec <RCCEx_PLL2_Config>
 8009832:	4603      	mov	r3, r0
 8009834:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009840:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009844:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	2100      	movs	r1, #0
 8009852:	6139      	str	r1, [r7, #16]
 8009854:	f003 0308 	and.w	r3, r3, #8
 8009858:	617b      	str	r3, [r7, #20]
 800985a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800985e:	460b      	mov	r3, r1
 8009860:	4313      	orrs	r3, r2
 8009862:	d011      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009868:	3328      	adds	r3, #40	@ 0x28
 800986a:	2100      	movs	r1, #0
 800986c:	4618      	mov	r0, r3
 800986e:	f001 f9ef 	bl	800ac50 <RCCEx_PLL3_Config>
 8009872:	4603      	mov	r3, r0
 8009874:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800987c:	2b00      	cmp	r3, #0
 800987e:	d003      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009880:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009884:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	2100      	movs	r1, #0
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	f003 0310 	and.w	r3, r3, #16
 8009898:	60fb      	str	r3, [r7, #12]
 800989a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800989e:	460b      	mov	r3, r1
 80098a0:	4313      	orrs	r3, r2
 80098a2:	d011      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a8:	3328      	adds	r3, #40	@ 0x28
 80098aa:	2101      	movs	r1, #1
 80098ac:	4618      	mov	r0, r3
 80098ae:	f001 f9cf 	bl	800ac50 <RCCEx_PLL3_Config>
 80098b2:	4603      	mov	r3, r0
 80098b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80098b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80098c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	2100      	movs	r1, #0
 80098d2:	6039      	str	r1, [r7, #0]
 80098d4:	f003 0320 	and.w	r3, r3, #32
 80098d8:	607b      	str	r3, [r7, #4]
 80098da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80098de:	460b      	mov	r3, r1
 80098e0:	4313      	orrs	r3, r2
 80098e2:	d011      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e8:	3328      	adds	r3, #40	@ 0x28
 80098ea:	2102      	movs	r1, #2
 80098ec:	4618      	mov	r0, r3
 80098ee:	f001 f9af 	bl	800ac50 <RCCEx_PLL3_Config>
 80098f2:	4603      	mov	r3, r0
 80098f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80098f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009904:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009908:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	e000      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
}
 8009916:	4618      	mov	r0, r3
 8009918:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800991c:	46bd      	mov	sp, r7
 800991e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009922:	bf00      	nop
 8009924:	58024400 	.word	0x58024400

08009928 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b090      	sub	sp, #64	@ 0x40
 800992c:	af00      	add	r7, sp, #0
 800992e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009936:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800993a:	430b      	orrs	r3, r1
 800993c:	f040 8094 	bne.w	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009940:	4b9b      	ldr	r3, [pc, #620]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800994a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994c:	2b04      	cmp	r3, #4
 800994e:	f200 8087 	bhi.w	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009952:	a201      	add	r2, pc, #4	@ (adr r2, 8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009958:	0800996d 	.word	0x0800996d
 800995c:	08009995 	.word	0x08009995
 8009960:	080099bd 	.word	0x080099bd
 8009964:	08009a59 	.word	0x08009a59
 8009968:	080099e5 	.word	0x080099e5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800996c:	4b90      	ldr	r3, [pc, #576]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009974:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009978:	d108      	bne.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800997a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800997e:	4618      	mov	r0, r3
 8009980:	f000 ff62 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009988:	f000 bc93 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009990:	f000 bc8f 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009994:	4b86      	ldr	r3, [pc, #536]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800999c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099a0:	d108      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099a2:	f107 0318 	add.w	r3, r7, #24
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 fca6 	bl	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099b0:	f000 bc7f 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099b4:	2300      	movs	r3, #0
 80099b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099b8:	f000 bc7b 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099bc:	4b7c      	ldr	r3, [pc, #496]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099c8:	d108      	bne.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099ca:	f107 030c 	add.w	r3, r7, #12
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fde6 	bl	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099d8:	f000 bc6b 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099e0:	f000 bc67 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099e4:	4b72      	ldr	r3, [pc, #456]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80099e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099ec:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099ee:	4b70      	ldr	r3, [pc, #448]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 0304 	and.w	r3, r3, #4
 80099f6:	2b04      	cmp	r3, #4
 80099f8:	d10c      	bne.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80099fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d109      	bne.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a00:	4b6b      	ldr	r3, [pc, #428]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	08db      	lsrs	r3, r3, #3
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	4a6a      	ldr	r2, [pc, #424]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a12:	e01f      	b.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a14:	4b66      	ldr	r3, [pc, #408]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a20:	d106      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a28:	d102      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a2a:	4b63      	ldr	r3, [pc, #396]	@ (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a2e:	e011      	b.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a30:	4b5f      	ldr	r3, [pc, #380]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a3c:	d106      	bne.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a44:	d102      	bne.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a46:	4b5d      	ldr	r3, [pc, #372]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a4a:	e003      	b.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a50:	f000 bc2f 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009a54:	f000 bc2d 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a58:	4b59      	ldr	r3, [pc, #356]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a5c:	f000 bc29 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a64:	f000 bc25 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a6c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009a70:	430b      	orrs	r3, r1
 8009a72:	f040 80a7 	bne.w	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009a76:	4b4e      	ldr	r3, [pc, #312]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a7a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009a7e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a86:	d054      	beq.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8009a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a8e:	f200 808b 	bhi.w	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009a98:	f000 8083 	beq.w	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009aa2:	f200 8081 	bhi.w	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009aac:	d02f      	beq.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ab4:	d878      	bhi.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d004      	beq.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8009abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ac2:	d012      	beq.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8009ac4:	e070      	b.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ace:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ad2:	d107      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 feb5 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ae2:	e3e6      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ae8:	e3e3      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009aea:	4b31      	ldr	r3, [pc, #196]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009af2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009af6:	d107      	bne.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009af8:	f107 0318 	add.w	r3, r7, #24
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fbfb 	bl	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b06:	e3d4      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b0c:	e3d1      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b0e:	4b28      	ldr	r3, [pc, #160]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b1a:	d107      	bne.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b1c:	f107 030c 	add.w	r3, r7, #12
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 fd3d 	bl	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b2a:	e3c2      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b30:	e3bf      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b32:	4b1f      	ldr	r3, [pc, #124]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b3a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 0304 	and.w	r3, r3, #4
 8009b44:	2b04      	cmp	r3, #4
 8009b46:	d10c      	bne.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d109      	bne.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b4e:	4b18      	ldr	r3, [pc, #96]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	08db      	lsrs	r3, r3, #3
 8009b54:	f003 0303 	and.w	r3, r3, #3
 8009b58:	4a16      	ldr	r2, [pc, #88]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b60:	e01e      	b.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b62:	4b13      	ldr	r3, [pc, #76]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b6e:	d106      	bne.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b76:	d102      	bne.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b78:	4b0f      	ldr	r3, [pc, #60]	@ (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b7c:	e010      	b.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b8a:	d106      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b92:	d102      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b94:	4b09      	ldr	r3, [pc, #36]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b98:	e002      	b.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009b9e:	e388      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009ba0:	e387      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ba2:	4b07      	ldr	r3, [pc, #28]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ba6:	e384      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bac:	e381      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009bae:	bf00      	nop
 8009bb0:	58024400 	.word	0x58024400
 8009bb4:	03d09000 	.word	0x03d09000
 8009bb8:	003d0900 	.word	0x003d0900
 8009bbc:	016e3600 	.word	0x016e3600
 8009bc0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bc8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	f040 809c 	bne.w	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009bd2:	4b9e      	ldr	r3, [pc, #632]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bd6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009bda:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009be2:	d054      	beq.n	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bea:	f200 808b 	bhi.w	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009bf4:	f000 8083 	beq.w	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009bfe:	f200 8081 	bhi.w	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c08:	d02f      	beq.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c10:	d878      	bhi.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d004      	beq.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c1e:	d012      	beq.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009c20:	e070      	b.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c22:	4b8a      	ldr	r3, [pc, #552]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c2e:	d107      	bne.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 fe07 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c3e:	e338      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c44:	e335      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c46:	4b81      	ldr	r3, [pc, #516]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c52:	d107      	bne.n	8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c54:	f107 0318 	add.w	r3, r7, #24
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f000 fb4d 	bl	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c62:	e326      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c68:	e323      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c6a:	4b78      	ldr	r3, [pc, #480]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c76:	d107      	bne.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c78:	f107 030c 	add.w	r3, r7, #12
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 fc8f 	bl	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c86:	e314      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c8c:	e311      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c8e:	4b6f      	ldr	r3, [pc, #444]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c98:	4b6c      	ldr	r3, [pc, #432]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b04      	cmp	r3, #4
 8009ca2:	d10c      	bne.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d109      	bne.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009caa:	4b68      	ldr	r3, [pc, #416]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	08db      	lsrs	r3, r3, #3
 8009cb0:	f003 0303 	and.w	r3, r3, #3
 8009cb4:	4a66      	ldr	r2, [pc, #408]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cbc:	e01e      	b.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cbe:	4b63      	ldr	r3, [pc, #396]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cca:	d106      	bne.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cd2:	d102      	bne.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009cd4:	4b5f      	ldr	r3, [pc, #380]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cd8:	e010      	b.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cda:	4b5c      	ldr	r3, [pc, #368]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ce2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ce6:	d106      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8009ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cee:	d102      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009cf0:	4b59      	ldr	r3, [pc, #356]	@ (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cf4:	e002      	b.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009cfa:	e2da      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009cfc:	e2d9      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009cfe:	4b57      	ldr	r3, [pc, #348]	@ (8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d02:	e2d6      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009d04:	2300      	movs	r3, #0
 8009d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d08:	e2d3      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d0e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009d12:	430b      	orrs	r3, r1
 8009d14:	f040 80a7 	bne.w	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009d18:	4b4c      	ldr	r3, [pc, #304]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d1c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009d20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d28:	d055      	beq.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d30:	f200 8096 	bhi.w	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d3a:	f000 8084 	beq.w	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d44:	f200 808c 	bhi.w	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d4e:	d030      	beq.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d56:	f200 8083 	bhi.w	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d004      	beq.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d66:	d012      	beq.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009d68:	e07a      	b.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d6a:	4b38      	ldr	r3, [pc, #224]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d76:	d107      	bne.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 fd63 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d86:	e294      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d8c:	e291      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d9a:	d107      	bne.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d9c:	f107 0318 	add.w	r3, r7, #24
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 faa9 	bl	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009daa:	e282      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009db0:	e27f      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009db2:	4b26      	ldr	r3, [pc, #152]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dbe:	d107      	bne.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dc0:	f107 030c 	add.w	r3, r7, #12
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 fbeb 	bl	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dce:	e270      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dd4:	e26d      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009dde:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009de0:	4b1a      	ldr	r3, [pc, #104]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b04      	cmp	r3, #4
 8009dea:	d10c      	bne.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d109      	bne.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009df2:	4b16      	ldr	r3, [pc, #88]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	08db      	lsrs	r3, r3, #3
 8009df8:	f003 0303 	and.w	r3, r3, #3
 8009dfc:	4a14      	ldr	r2, [pc, #80]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8009e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e04:	e01e      	b.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e06:	4b11      	ldr	r3, [pc, #68]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e12:	d106      	bne.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e1a:	d102      	bne.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e20:	e010      	b.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e22:	4b0a      	ldr	r3, [pc, #40]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e2e:	d106      	bne.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e36:	d102      	bne.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e38:	4b07      	ldr	r3, [pc, #28]	@ (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e3c:	e002      	b.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e42:	e236      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009e44:	e235      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e46:	4b05      	ldr	r3, [pc, #20]	@ (8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e4a:	e232      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009e4c:	58024400 	.word	0x58024400
 8009e50:	03d09000 	.word	0x03d09000
 8009e54:	003d0900 	.word	0x003d0900
 8009e58:	016e3600 	.word	0x016e3600
 8009e5c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e64:	e225      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009e66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e6a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009e6e:	430b      	orrs	r3, r1
 8009e70:	f040 8085 	bne.w	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009e74:	4b9c      	ldr	r3, [pc, #624]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e78:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e84:	d06b      	beq.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e8c:	d874      	bhi.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e94:	d056      	beq.n	8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8009e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e9c:	d86c      	bhi.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ea4:	d03b      	beq.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009eac:	d864      	bhi.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009eb4:	d021      	beq.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ebc:	d85c      	bhi.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d004      	beq.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009eca:	d004      	beq.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8009ecc:	e054      	b.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009ece:	f7fe fb5f 	bl	8008590 <HAL_RCC_GetPCLK1Freq>
 8009ed2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ed4:	e1ed      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ed6:	4b84      	ldr	r3, [pc, #528]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ede:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ee2:	d107      	bne.n	8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ee4:	f107 0318 	add.w	r3, r7, #24
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 fa05 	bl	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ef2:	e1de      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef8:	e1db      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009efa:	4b7b      	ldr	r3, [pc, #492]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f06:	d107      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f08:	f107 030c 	add.w	r3, r7, #12
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f000 fb47 	bl	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f16:	e1cc      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f1c:	e1c9      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f1e:	4b72      	ldr	r3, [pc, #456]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0304 	and.w	r3, r3, #4
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	d109      	bne.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f2a:	4b6f      	ldr	r3, [pc, #444]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	08db      	lsrs	r3, r3, #3
 8009f30:	f003 0303 	and.w	r3, r3, #3
 8009f34:	4a6d      	ldr	r2, [pc, #436]	@ (800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009f36:	fa22 f303 	lsr.w	r3, r2, r3
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f3c:	e1b9      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f42:	e1b6      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009f44:	4b68      	ldr	r3, [pc, #416]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f50:	d102      	bne.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8009f52:	4b67      	ldr	r3, [pc, #412]	@ (800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f56:	e1ac      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f5c:	e1a9      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009f5e:	4b62      	ldr	r3, [pc, #392]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f6a:	d102      	bne.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8009f6c:	4b61      	ldr	r3, [pc, #388]	@ (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f70:	e19f      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f76:	e19c      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f7c:	e199      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f82:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009f86:	430b      	orrs	r3, r1
 8009f88:	d173      	bne.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009f8a:	4b57      	ldr	r3, [pc, #348]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009f92:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f9a:	d02f      	beq.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fa2:	d863      	bhi.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d004      	beq.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8009faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fb0:	d012      	beq.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8009fb2:	e05b      	b.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fb4:	4b4c      	ldr	r3, [pc, #304]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009fc0:	d107      	bne.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fc2:	f107 0318 	add.w	r3, r7, #24
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 f996 	bl	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fd0:	e16f      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd6:	e16c      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fd8:	4b43      	ldr	r3, [pc, #268]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fe4:	d107      	bne.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fe6:	f107 030c 	add.w	r3, r7, #12
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 fad8 	bl	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ff4:	e15d      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ffa:	e15a      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ffc:	4b3a      	ldr	r3, [pc, #232]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a000:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a004:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a006:	4b38      	ldr	r3, [pc, #224]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0304 	and.w	r3, r3, #4
 800a00e:	2b04      	cmp	r3, #4
 800a010:	d10c      	bne.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a014:	2b00      	cmp	r3, #0
 800a016:	d109      	bne.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a018:	4b33      	ldr	r3, [pc, #204]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	08db      	lsrs	r3, r3, #3
 800a01e:	f003 0303 	and.w	r3, r3, #3
 800a022:	4a32      	ldr	r2, [pc, #200]	@ (800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a024:	fa22 f303 	lsr.w	r3, r2, r3
 800a028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a02a:	e01e      	b.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a02c:	4b2e      	ldr	r3, [pc, #184]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a038:	d106      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a03c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a040:	d102      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a042:	4b2b      	ldr	r3, [pc, #172]	@ (800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a046:	e010      	b.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a048:	4b27      	ldr	r3, [pc, #156]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a054:	d106      	bne.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a05c:	d102      	bne.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a05e:	4b25      	ldr	r3, [pc, #148]	@ (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a062:	e002      	b.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a064:	2300      	movs	r3, #0
 800a066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a068:	e123      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a06a:	e122      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a070:	e11f      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a072:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a076:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a07a:	430b      	orrs	r3, r1
 800a07c:	d13c      	bne.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a07e:	4b1a      	ldr	r3, [pc, #104]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a086:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d004      	beq.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a094:	d012      	beq.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a096:	e023      	b.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a098:	4b13      	ldr	r3, [pc, #76]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0a4:	d107      	bne.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 fbcc 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0b4:	e0fd      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ba:	e0fa      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0c8:	d107      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ca:	f107 0318 	add.w	r3, r7, #24
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 f912 	bl	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0d8:	e0eb      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0de:	e0e8      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e4:	e0e5      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a0e6:	bf00      	nop
 800a0e8:	58024400 	.word	0x58024400
 800a0ec:	03d09000 	.word	0x03d09000
 800a0f0:	003d0900 	.word	0x003d0900
 800a0f4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a0f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0fc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a100:	430b      	orrs	r3, r1
 800a102:	f040 8085 	bne.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a106:	4b6d      	ldr	r3, [pc, #436]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a10a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a10e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a112:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a116:	d06b      	beq.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a11e:	d874      	bhi.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a126:	d056      	beq.n	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a12e:	d86c      	bhi.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a132:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a136:	d03b      	beq.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a13e:	d864      	bhi.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a146:	d021      	beq.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a14a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a14e:	d85c      	bhi.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a152:	2b00      	cmp	r3, #0
 800a154:	d004      	beq.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a15c:	d004      	beq.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a15e:	e054      	b.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a160:	f000 f8b4 	bl	800a2cc <HAL_RCCEx_GetD3PCLK1Freq>
 800a164:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a166:	e0a4      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a168:	4b54      	ldr	r3, [pc, #336]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a174:	d107      	bne.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a176:	f107 0318 	add.w	r3, r7, #24
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 f8bc 	bl	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a184:	e095      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a18a:	e092      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a18c:	4b4b      	ldr	r3, [pc, #300]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a194:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a198:	d107      	bne.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a19a:	f107 030c 	add.w	r3, r7, #12
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 f9fe 	bl	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1a8:	e083      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1ae:	e080      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a1b0:	4b42      	ldr	r3, [pc, #264]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0304 	and.w	r3, r3, #4
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d109      	bne.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1bc:	4b3f      	ldr	r3, [pc, #252]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	08db      	lsrs	r3, r3, #3
 800a1c2:	f003 0303 	and.w	r3, r3, #3
 800a1c6:	4a3e      	ldr	r2, [pc, #248]	@ (800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a1c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ce:	e070      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1d4:	e06d      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a1d6:	4b39      	ldr	r3, [pc, #228]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1e2:	d102      	bne.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a1e4:	4b37      	ldr	r3, [pc, #220]	@ (800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1e8:	e063      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1ee:	e060      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a1f0:	4b32      	ldr	r3, [pc, #200]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1fc:	d102      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a1fe:	4b32      	ldr	r3, [pc, #200]	@ (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a202:	e056      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a208:	e053      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a20e:	e050      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a210:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a214:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a218:	430b      	orrs	r3, r1
 800a21a:	d148      	bne.n	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a21c:	4b27      	ldr	r3, [pc, #156]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a21e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a220:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a224:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a22c:	d02a      	beq.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a234:	d838      	bhi.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d004      	beq.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a242:	d00d      	beq.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a244:	e030      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a246:	4b1d      	ldr	r3, [pc, #116]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a24e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a252:	d102      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a254:	4b1c      	ldr	r3, [pc, #112]	@ (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a258:	e02b      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a25e:	e028      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a260:	4b16      	ldr	r3, [pc, #88]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a268:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a26c:	d107      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a26e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fae8 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a27c:	e019      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a27e:	2300      	movs	r3, #0
 800a280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a282:	e016      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a284:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a28c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a290:	d107      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a292:	f107 0318 	add.w	r3, r7, #24
 800a296:	4618      	mov	r0, r3
 800a298:	f000 f82e 	bl	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2a0:	e007      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a6:	e004      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ac:	e001      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3740      	adds	r7, #64	@ 0x40
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	58024400 	.word	0x58024400
 800a2c0:	03d09000 	.word	0x03d09000
 800a2c4:	003d0900 	.word	0x003d0900
 800a2c8:	016e3600 	.word	0x016e3600

0800a2cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a2d0:	f7fe f92e 	bl	8008530 <HAL_RCC_GetHCLKFreq>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	4b06      	ldr	r3, [pc, #24]	@ (800a2f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	091b      	lsrs	r3, r3, #4
 800a2dc:	f003 0307 	and.w	r3, r3, #7
 800a2e0:	4904      	ldr	r1, [pc, #16]	@ (800a2f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a2e2:	5ccb      	ldrb	r3, [r1, r3]
 800a2e4:	f003 031f 	and.w	r3, r3, #31
 800a2e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	58024400 	.word	0x58024400
 800a2f4:	08013fdc 	.word	0x08013fdc

0800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b089      	sub	sp, #36	@ 0x24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a300:	4ba1      	ldr	r3, [pc, #644]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a304:	f003 0303 	and.w	r3, r3, #3
 800a308:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a30a:	4b9f      	ldr	r3, [pc, #636]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a30e:	0b1b      	lsrs	r3, r3, #12
 800a310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a314:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a316:	4b9c      	ldr	r3, [pc, #624]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a31a:	091b      	lsrs	r3, r3, #4
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a322:	4b99      	ldr	r3, [pc, #612]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a326:	08db      	lsrs	r3, r3, #3
 800a328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	fb02 f303 	mul.w	r3, r2, r3
 800a332:	ee07 3a90 	vmov	s15, r3
 800a336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a33a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 8111 	beq.w	800a568 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	2b02      	cmp	r3, #2
 800a34a:	f000 8083 	beq.w	800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	2b02      	cmp	r3, #2
 800a352:	f200 80a1 	bhi.w	800a498 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d056      	beq.n	800a410 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a362:	e099      	b.n	800a498 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a364:	4b88      	ldr	r3, [pc, #544]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0320 	and.w	r3, r3, #32
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d02d      	beq.n	800a3cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a370:	4b85      	ldr	r3, [pc, #532]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	08db      	lsrs	r3, r3, #3
 800a376:	f003 0303 	and.w	r3, r3, #3
 800a37a:	4a84      	ldr	r2, [pc, #528]	@ (800a58c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a37c:	fa22 f303 	lsr.w	r3, r2, r3
 800a380:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	ee07 3a90 	vmov	s15, r3
 800a388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	ee07 3a90 	vmov	s15, r3
 800a392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a39a:	4b7b      	ldr	r3, [pc, #492]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a39e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3a2:	ee07 3a90 	vmov	s15, r3
 800a3a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a590 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a3ca:	e087      	b.n	800a4dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a594 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a3da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3de:	4b6a      	ldr	r3, [pc, #424]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e6:	ee07 3a90 	vmov	s15, r3
 800a3ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a590 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a40a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a40e:	e065      	b.n	800a4dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a41a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a598 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a41e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a422:	4b59      	ldr	r3, [pc, #356]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a42a:	ee07 3a90 	vmov	s15, r3
 800a42e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a432:	ed97 6a03 	vldr	s12, [r7, #12]
 800a436:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a590 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a43a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a43e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a44a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a44e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a452:	e043      	b.n	800a4dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	ee07 3a90 	vmov	s15, r3
 800a45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a45e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a466:	4b48      	ldr	r3, [pc, #288]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a46a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a46e:	ee07 3a90 	vmov	s15, r3
 800a472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a476:	ed97 6a03 	vldr	s12, [r7, #12]
 800a47a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a590 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a47e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a48a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a48e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a496:	e021      	b.n	800a4dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	ee07 3a90 	vmov	s15, r3
 800a49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a598 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a4a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4aa:	4b37      	ldr	r3, [pc, #220]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4b2:	ee07 3a90 	vmov	s15, r3
 800a4b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a590 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a4dc:	4b2a      	ldr	r3, [pc, #168]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e0:	0a5b      	lsrs	r3, r3, #9
 800a4e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4e6:	ee07 3a90 	vmov	s15, r3
 800a4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a4f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a502:	ee17 2a90 	vmov	r2, s15
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a50a:	4b1f      	ldr	r3, [pc, #124]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a50c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a50e:	0c1b      	lsrs	r3, r3, #16
 800a510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a514:	ee07 3a90 	vmov	s15, r3
 800a518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a51c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a520:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a524:	edd7 6a07 	vldr	s13, [r7, #28]
 800a528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a52c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a530:	ee17 2a90 	vmov	r2, s15
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a538:	4b13      	ldr	r3, [pc, #76]	@ (800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a53a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53c:	0e1b      	lsrs	r3, r3, #24
 800a53e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a542:	ee07 3a90 	vmov	s15, r3
 800a546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a54a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a54e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a552:	edd7 6a07 	vldr	s13, [r7, #28]
 800a556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a55a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a55e:	ee17 2a90 	vmov	r2, s15
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a566:	e008      	b.n	800a57a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	609a      	str	r2, [r3, #8]
}
 800a57a:	bf00      	nop
 800a57c:	3724      	adds	r7, #36	@ 0x24
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	58024400 	.word	0x58024400
 800a58c:	03d09000 	.word	0x03d09000
 800a590:	46000000 	.word	0x46000000
 800a594:	4c742400 	.word	0x4c742400
 800a598:	4a742400 	.word	0x4a742400
 800a59c:	4bb71b00 	.word	0x4bb71b00

0800a5a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b089      	sub	sp, #36	@ 0x24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5a8:	4ba1      	ldr	r3, [pc, #644]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ac:	f003 0303 	and.w	r3, r3, #3
 800a5b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a5b2:	4b9f      	ldr	r3, [pc, #636]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b6:	0d1b      	lsrs	r3, r3, #20
 800a5b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a5be:	4b9c      	ldr	r3, [pc, #624]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c2:	0a1b      	lsrs	r3, r3, #8
 800a5c4:	f003 0301 	and.w	r3, r3, #1
 800a5c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a5ca:	4b99      	ldr	r3, [pc, #612]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ce:	08db      	lsrs	r3, r3, #3
 800a5d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	fb02 f303 	mul.w	r3, r2, r3
 800a5da:	ee07 3a90 	vmov	s15, r3
 800a5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 8111 	beq.w	800a810 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	f000 8083 	beq.w	800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	f200 80a1 	bhi.w	800a740 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d003      	beq.n	800a60c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d056      	beq.n	800a6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a60a:	e099      	b.n	800a740 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a60c:	4b88      	ldr	r3, [pc, #544]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 0320 	and.w	r3, r3, #32
 800a614:	2b00      	cmp	r3, #0
 800a616:	d02d      	beq.n	800a674 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a618:	4b85      	ldr	r3, [pc, #532]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	08db      	lsrs	r3, r3, #3
 800a61e:	f003 0303 	and.w	r3, r3, #3
 800a622:	4a84      	ldr	r2, [pc, #528]	@ (800a834 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a624:	fa22 f303 	lsr.w	r3, r2, r3
 800a628:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	ee07 3a90 	vmov	s15, r3
 800a630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	ee07 3a90 	vmov	s15, r3
 800a63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a642:	4b7b      	ldr	r3, [pc, #492]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64a:	ee07 3a90 	vmov	s15, r3
 800a64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a652:	ed97 6a03 	vldr	s12, [r7, #12]
 800a656:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a838 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a672:	e087      	b.n	800a784 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a83c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a686:	4b6a      	ldr	r3, [pc, #424]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a68e:	ee07 3a90 	vmov	s15, r3
 800a692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a696:	ed97 6a03 	vldr	s12, [r7, #12]
 800a69a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a838 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6b6:	e065      	b.n	800a784 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	ee07 3a90 	vmov	s15, r3
 800a6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a840 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ca:	4b59      	ldr	r3, [pc, #356]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d2:	ee07 3a90 	vmov	s15, r3
 800a6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a838 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6fa:	e043      	b.n	800a784 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a706:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a70e:	4b48      	ldr	r3, [pc, #288]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a716:	ee07 3a90 	vmov	s15, r3
 800a71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a71e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a722:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a838 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a72e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a73a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a73e:	e021      	b.n	800a784 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	ee07 3a90 	vmov	s15, r3
 800a746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a74a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a840 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a752:	4b37      	ldr	r3, [pc, #220]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a75a:	ee07 3a90 	vmov	s15, r3
 800a75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a762:	ed97 6a03 	vldr	s12, [r7, #12]
 800a766:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a838 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a77e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a782:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a784:	4b2a      	ldr	r3, [pc, #168]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a788:	0a5b      	lsrs	r3, r3, #9
 800a78a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a78e:	ee07 3a90 	vmov	s15, r3
 800a792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a796:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a79a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a79e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7aa:	ee17 2a90 	vmov	r2, s15
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a7b2:	4b1f      	ldr	r3, [pc, #124]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7b6:	0c1b      	lsrs	r3, r3, #16
 800a7b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7bc:	ee07 3a90 	vmov	s15, r3
 800a7c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7d8:	ee17 2a90 	vmov	r2, s15
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a7e0:	4b13      	ldr	r3, [pc, #76]	@ (800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e4:	0e1b      	lsrs	r3, r3, #24
 800a7e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7ea:	ee07 3a90 	vmov	s15, r3
 800a7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a806:	ee17 2a90 	vmov	r2, s15
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a80e:	e008      	b.n	800a822 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	609a      	str	r2, [r3, #8]
}
 800a822:	bf00      	nop
 800a824:	3724      	adds	r7, #36	@ 0x24
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	58024400 	.word	0x58024400
 800a834:	03d09000 	.word	0x03d09000
 800a838:	46000000 	.word	0x46000000
 800a83c:	4c742400 	.word	0x4c742400
 800a840:	4a742400 	.word	0x4a742400
 800a844:	4bb71b00 	.word	0x4bb71b00

0800a848 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a848:	b480      	push	{r7}
 800a84a:	b089      	sub	sp, #36	@ 0x24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a850:	4ba0      	ldr	r3, [pc, #640]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a854:	f003 0303 	and.w	r3, r3, #3
 800a858:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a85a:	4b9e      	ldr	r3, [pc, #632]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85e:	091b      	lsrs	r3, r3, #4
 800a860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a864:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a866:	4b9b      	ldr	r3, [pc, #620]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86a:	f003 0301 	and.w	r3, r3, #1
 800a86e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a870:	4b98      	ldr	r3, [pc, #608]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a874:	08db      	lsrs	r3, r3, #3
 800a876:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	fb02 f303 	mul.w	r3, r2, r3
 800a880:	ee07 3a90 	vmov	s15, r3
 800a884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a888:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f000 8111 	beq.w	800aab6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	2b02      	cmp	r3, #2
 800a898:	f000 8083 	beq.w	800a9a2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	f200 80a1 	bhi.w	800a9e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d056      	beq.n	800a95e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a8b0:	e099      	b.n	800a9e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8b2:	4b88      	ldr	r3, [pc, #544]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0320 	and.w	r3, r3, #32
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d02d      	beq.n	800a91a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8be:	4b85      	ldr	r3, [pc, #532]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	08db      	lsrs	r3, r3, #3
 800a8c4:	f003 0303 	and.w	r3, r3, #3
 800a8c8:	4a83      	ldr	r2, [pc, #524]	@ (800aad8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a8ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	ee07 3a90 	vmov	s15, r3
 800a8e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8e8:	4b7a      	ldr	r3, [pc, #488]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f0:	ee07 3a90 	vmov	s15, r3
 800a8f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8fc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800aadc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a908:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a90c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a910:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a914:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a918:	e087      	b.n	800aa2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	ee07 3a90 	vmov	s15, r3
 800a920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a924:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800aae0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a92c:	4b69      	ldr	r3, [pc, #420]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a92e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a934:	ee07 3a90 	vmov	s15, r3
 800a938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a93c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a940:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800aadc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a944:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a94c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a954:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a958:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a95c:	e065      	b.n	800aa2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	ee07 3a90 	vmov	s15, r3
 800a964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a968:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800aae4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a96c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a970:	4b58      	ldr	r3, [pc, #352]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a978:	ee07 3a90 	vmov	s15, r3
 800a97c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a980:	ed97 6a03 	vldr	s12, [r7, #12]
 800a984:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800aadc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a988:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a98c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a990:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a99c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9a0:	e043      	b.n	800aa2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	ee07 3a90 	vmov	s15, r3
 800a9a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ac:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a9b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9b4:	4b47      	ldr	r3, [pc, #284]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9bc:	ee07 3a90 	vmov	s15, r3
 800a9c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9c8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800aadc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a9cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9e4:	e021      	b.n	800aa2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	ee07 3a90 	vmov	s15, r3
 800a9ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800aae0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a9f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9f8:	4b36      	ldr	r3, [pc, #216]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa00:	ee07 3a90 	vmov	s15, r3
 800aa04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa08:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa0c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800aadc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa28:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800aa2a:	4b2a      	ldr	r3, [pc, #168]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa2e:	0a5b      	lsrs	r3, r3, #9
 800aa30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa34:	ee07 3a90 	vmov	s15, r3
 800aa38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa44:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa50:	ee17 2a90 	vmov	r2, s15
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800aa58:	4b1e      	ldr	r3, [pc, #120]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa5c:	0c1b      	lsrs	r3, r3, #16
 800aa5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa72:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa7e:	ee17 2a90 	vmov	r2, s15
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800aa86:	4b13      	ldr	r3, [pc, #76]	@ (800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa8a:	0e1b      	lsrs	r3, r3, #24
 800aa8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa90:	ee07 3a90 	vmov	s15, r3
 800aa94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaa0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaac:	ee17 2a90 	vmov	r2, s15
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aab4:	e008      	b.n	800aac8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	609a      	str	r2, [r3, #8]
}
 800aac8:	bf00      	nop
 800aaca:	3724      	adds	r7, #36	@ 0x24
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	58024400 	.word	0x58024400
 800aad8:	03d09000 	.word	0x03d09000
 800aadc:	46000000 	.word	0x46000000
 800aae0:	4c742400 	.word	0x4c742400
 800aae4:	4a742400 	.word	0x4a742400
 800aae8:	4bb71b00 	.word	0x4bb71b00

0800aaec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aafa:	4b53      	ldr	r3, [pc, #332]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800aafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aafe:	f003 0303 	and.w	r3, r3, #3
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d101      	bne.n	800ab0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e099      	b.n	800ac3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ab0a:	4b4f      	ldr	r3, [pc, #316]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a4e      	ldr	r2, [pc, #312]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ab10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab16:	f7f7 fcd5 	bl	80024c4 <HAL_GetTick>
 800ab1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ab1c:	e008      	b.n	800ab30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ab1e:	f7f7 fcd1 	bl	80024c4 <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d901      	bls.n	800ab30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e086      	b.n	800ac3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ab30:	4b45      	ldr	r3, [pc, #276]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f0      	bne.n	800ab1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ab3c:	4b42      	ldr	r3, [pc, #264]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ab3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab40:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	031b      	lsls	r3, r3, #12
 800ab4a:	493f      	ldr	r1, [pc, #252]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	628b      	str	r3, [r1, #40]	@ 0x28
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	3b01      	subs	r3, #1
 800ab56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	025b      	lsls	r3, r3, #9
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	431a      	orrs	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	041b      	lsls	r3, r3, #16
 800ab6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ab72:	431a      	orrs	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	061b      	lsls	r3, r3, #24
 800ab7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ab80:	4931      	ldr	r1, [pc, #196]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ab82:	4313      	orrs	r3, r2
 800ab84:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ab86:	4b30      	ldr	r3, [pc, #192]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ab88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	492d      	ldr	r1, [pc, #180]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ab94:	4313      	orrs	r3, r2
 800ab96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ab98:	4b2b      	ldr	r3, [pc, #172]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ab9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab9c:	f023 0220 	bic.w	r2, r3, #32
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	4928      	ldr	r1, [pc, #160]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800aba6:	4313      	orrs	r3, r2
 800aba8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800abaa:	4b27      	ldr	r3, [pc, #156]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800abac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abae:	4a26      	ldr	r2, [pc, #152]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800abb0:	f023 0310 	bic.w	r3, r3, #16
 800abb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800abb6:	4b24      	ldr	r3, [pc, #144]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800abb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abba:	4b24      	ldr	r3, [pc, #144]	@ (800ac4c <RCCEx_PLL2_Config+0x160>)
 800abbc:	4013      	ands	r3, r2
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	69d2      	ldr	r2, [r2, #28]
 800abc2:	00d2      	lsls	r2, r2, #3
 800abc4:	4920      	ldr	r1, [pc, #128]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800abca:	4b1f      	ldr	r3, [pc, #124]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800abcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abce:	4a1e      	ldr	r2, [pc, #120]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800abd0:	f043 0310 	orr.w	r3, r3, #16
 800abd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d106      	bne.n	800abea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800abdc:	4b1a      	ldr	r3, [pc, #104]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800abde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abe0:	4a19      	ldr	r2, [pc, #100]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800abe2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800abe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800abe8:	e00f      	b.n	800ac0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d106      	bne.n	800abfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800abf0:	4b15      	ldr	r3, [pc, #84]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800abf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf4:	4a14      	ldr	r2, [pc, #80]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800abf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800abfc:	e005      	b.n	800ac0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800abfe:	4b12      	ldr	r3, [pc, #72]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ac00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac02:	4a11      	ldr	r2, [pc, #68]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ac04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ac08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a0e      	ldr	r2, [pc, #56]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ac10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ac14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac16:	f7f7 fc55 	bl	80024c4 <HAL_GetTick>
 800ac1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ac1c:	e008      	b.n	800ac30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ac1e:	f7f7 fc51 	bl	80024c4 <HAL_GetTick>
 800ac22:	4602      	mov	r2, r0
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d901      	bls.n	800ac30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e006      	b.n	800ac3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ac30:	4b05      	ldr	r3, [pc, #20]	@ (800ac48 <RCCEx_PLL2_Config+0x15c>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d0f0      	beq.n	800ac1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	58024400 	.word	0x58024400
 800ac4c:	ffff0007 	.word	0xffff0007

0800ac50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac5e:	4b53      	ldr	r3, [pc, #332]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ac60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac62:	f003 0303 	and.w	r3, r3, #3
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d101      	bne.n	800ac6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e099      	b.n	800ada2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ac6e:	4b4f      	ldr	r3, [pc, #316]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a4e      	ldr	r2, [pc, #312]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ac74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac7a:	f7f7 fc23 	bl	80024c4 <HAL_GetTick>
 800ac7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac80:	e008      	b.n	800ac94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ac82:	f7f7 fc1f 	bl	80024c4 <HAL_GetTick>
 800ac86:	4602      	mov	r2, r0
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d901      	bls.n	800ac94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac90:	2303      	movs	r3, #3
 800ac92:	e086      	b.n	800ada2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac94:	4b45      	ldr	r3, [pc, #276]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1f0      	bne.n	800ac82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aca0:	4b42      	ldr	r3, [pc, #264]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800aca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	051b      	lsls	r3, r3, #20
 800acae:	493f      	ldr	r1, [pc, #252]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800acb0:	4313      	orrs	r3, r2
 800acb2:	628b      	str	r3, [r1, #40]	@ 0x28
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	3b01      	subs	r3, #1
 800acba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	3b01      	subs	r3, #1
 800acc4:	025b      	lsls	r3, r3, #9
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	431a      	orrs	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	3b01      	subs	r3, #1
 800acd0:	041b      	lsls	r3, r3, #16
 800acd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800acd6:	431a      	orrs	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	3b01      	subs	r3, #1
 800acde:	061b      	lsls	r3, r3, #24
 800ace0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ace4:	4931      	ldr	r1, [pc, #196]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800acea:	4b30      	ldr	r3, [pc, #192]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800acec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	695b      	ldr	r3, [r3, #20]
 800acf6:	492d      	ldr	r1, [pc, #180]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800acf8:	4313      	orrs	r3, r2
 800acfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800acfc:	4b2b      	ldr	r3, [pc, #172]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800acfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad00:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	4928      	ldr	r1, [pc, #160]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ad0e:	4b27      	ldr	r3, [pc, #156]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad12:	4a26      	ldr	r2, [pc, #152]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ad1a:	4b24      	ldr	r3, [pc, #144]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad1e:	4b24      	ldr	r3, [pc, #144]	@ (800adb0 <RCCEx_PLL3_Config+0x160>)
 800ad20:	4013      	ands	r3, r2
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	69d2      	ldr	r2, [r2, #28]
 800ad26:	00d2      	lsls	r2, r2, #3
 800ad28:	4920      	ldr	r1, [pc, #128]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ad2e:	4b1f      	ldr	r3, [pc, #124]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad32:	4a1e      	ldr	r2, [pc, #120]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d106      	bne.n	800ad4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ad40:	4b1a      	ldr	r3, [pc, #104]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad44:	4a19      	ldr	r2, [pc, #100]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ad4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad4c:	e00f      	b.n	800ad6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d106      	bne.n	800ad62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ad54:	4b15      	ldr	r3, [pc, #84]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad58:	4a14      	ldr	r2, [pc, #80]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ad5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad60:	e005      	b.n	800ad6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ad62:	4b12      	ldr	r3, [pc, #72]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad66:	4a11      	ldr	r2, [pc, #68]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ad6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ad6e:	4b0f      	ldr	r3, [pc, #60]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a0e      	ldr	r2, [pc, #56]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad7a:	f7f7 fba3 	bl	80024c4 <HAL_GetTick>
 800ad7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad80:	e008      	b.n	800ad94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ad82:	f7f7 fb9f 	bl	80024c4 <HAL_GetTick>
 800ad86:	4602      	mov	r2, r0
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d901      	bls.n	800ad94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad90:	2303      	movs	r3, #3
 800ad92:	e006      	b.n	800ada2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad94:	4b05      	ldr	r3, [pc, #20]	@ (800adac <RCCEx_PLL3_Config+0x15c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d0f0      	beq.n	800ad82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	58024400 	.word	0x58024400
 800adb0:	ffff0007 	.word	0xffff0007

0800adb4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d101      	bne.n	800adc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e10f      	b.n	800afe6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a87      	ldr	r2, [pc, #540]	@ (800aff0 <HAL_SPI_Init+0x23c>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d00f      	beq.n	800adf6 <HAL_SPI_Init+0x42>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a86      	ldr	r2, [pc, #536]	@ (800aff4 <HAL_SPI_Init+0x240>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d00a      	beq.n	800adf6 <HAL_SPI_Init+0x42>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a84      	ldr	r2, [pc, #528]	@ (800aff8 <HAL_SPI_Init+0x244>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d005      	beq.n	800adf6 <HAL_SPI_Init+0x42>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	2b0f      	cmp	r3, #15
 800adf0:	d901      	bls.n	800adf6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e0f7      	b.n	800afe6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f900 	bl	800affc <SPI_GetPacketSize>
 800adfc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a7b      	ldr	r2, [pc, #492]	@ (800aff0 <HAL_SPI_Init+0x23c>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d00c      	beq.n	800ae22 <HAL_SPI_Init+0x6e>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a79      	ldr	r2, [pc, #484]	@ (800aff4 <HAL_SPI_Init+0x240>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d007      	beq.n	800ae22 <HAL_SPI_Init+0x6e>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a78      	ldr	r2, [pc, #480]	@ (800aff8 <HAL_SPI_Init+0x244>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d002      	beq.n	800ae22 <HAL_SPI_Init+0x6e>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2b08      	cmp	r3, #8
 800ae20:	d811      	bhi.n	800ae46 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ae26:	4a72      	ldr	r2, [pc, #456]	@ (800aff0 <HAL_SPI_Init+0x23c>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d009      	beq.n	800ae40 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a70      	ldr	r2, [pc, #448]	@ (800aff4 <HAL_SPI_Init+0x240>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d004      	beq.n	800ae40 <HAL_SPI_Init+0x8c>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a6f      	ldr	r2, [pc, #444]	@ (800aff8 <HAL_SPI_Init+0x244>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d104      	bne.n	800ae4a <HAL_SPI_Init+0x96>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b10      	cmp	r3, #16
 800ae44:	d901      	bls.n	800ae4a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e0cd      	b.n	800afe6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d106      	bne.n	800ae64 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7f6 fc80 	bl	8001764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2202      	movs	r2, #2
 800ae68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0201 	bic.w	r2, r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ae86:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae90:	d119      	bne.n	800aec6 <HAL_SPI_Init+0x112>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae9a:	d103      	bne.n	800aea4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d008      	beq.n	800aeb6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10c      	bne.n	800aec6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aeb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aeb4:	d107      	bne.n	800aec6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aec4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00f      	beq.n	800aef2 <HAL_SPI_Init+0x13e>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	2b06      	cmp	r3, #6
 800aed8:	d90b      	bls.n	800aef2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	430a      	orrs	r2, r1
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	e007      	b.n	800af02 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800af00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	69da      	ldr	r2, [r3, #28]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af0a:	431a      	orrs	r2, r3
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	431a      	orrs	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af14:	ea42 0103 	orr.w	r1, r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	68da      	ldr	r2, [r3, #12]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	430a      	orrs	r2, r1
 800af22:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af2c:	431a      	orrs	r2, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af32:	431a      	orrs	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	431a      	orrs	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	431a      	orrs	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	431a      	orrs	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	431a      	orrs	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	431a      	orrs	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af56:	431a      	orrs	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	431a      	orrs	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af62:	ea42 0103 	orr.w	r1, r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d113      	bne.n	800afa2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af8c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800afa0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f022 0201 	bic.w	r2, r2, #1
 800afb0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00a      	beq.n	800afd4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	430a      	orrs	r2, r1
 800afd2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	40013000 	.word	0x40013000
 800aff4:	40003800 	.word	0x40003800
 800aff8:	40003c00 	.word	0x40003c00

0800affc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b008:	095b      	lsrs	r3, r3, #5
 800b00a:	3301      	adds	r3, #1
 800b00c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	3301      	adds	r3, #1
 800b014:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	3307      	adds	r3, #7
 800b01a:	08db      	lsrs	r3, r3, #3
 800b01c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	fb02 f303 	mul.w	r3, r2, r3
}
 800b026:	4618      	mov	r0, r3
 800b028:	3714      	adds	r7, #20
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e049      	b.n	800b0d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d106      	bne.n	800b05e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7f6 fc8b 	bl	8001974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2202      	movs	r2, #2
 800b062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	3304      	adds	r3, #4
 800b06e:	4619      	mov	r1, r3
 800b070:	4610      	mov	r0, r2
 800b072:	f000 faa3 	bl	800b5bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2201      	movs	r2, #1
 800b07a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2201      	movs	r2, #1
 800b09a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e049      	b.n	800b186 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d106      	bne.n	800b10c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f841 	bl	800b18e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2202      	movs	r2, #2
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3304      	adds	r3, #4
 800b11c:	4619      	mov	r1, r3
 800b11e:	4610      	mov	r0, r2
 800b120:	f000 fa4c 	bl	800b5bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b18e:	b480      	push	{r7}
 800b190:	b083      	sub	sp, #12
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b196:	bf00      	nop
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
	...

0800b1a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d101      	bne.n	800b1c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	e0ff      	b.n	800b3c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b14      	cmp	r3, #20
 800b1ce:	f200 80f0 	bhi.w	800b3b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d8:	0800b22d 	.word	0x0800b22d
 800b1dc:	0800b3b3 	.word	0x0800b3b3
 800b1e0:	0800b3b3 	.word	0x0800b3b3
 800b1e4:	0800b3b3 	.word	0x0800b3b3
 800b1e8:	0800b26d 	.word	0x0800b26d
 800b1ec:	0800b3b3 	.word	0x0800b3b3
 800b1f0:	0800b3b3 	.word	0x0800b3b3
 800b1f4:	0800b3b3 	.word	0x0800b3b3
 800b1f8:	0800b2af 	.word	0x0800b2af
 800b1fc:	0800b3b3 	.word	0x0800b3b3
 800b200:	0800b3b3 	.word	0x0800b3b3
 800b204:	0800b3b3 	.word	0x0800b3b3
 800b208:	0800b2ef 	.word	0x0800b2ef
 800b20c:	0800b3b3 	.word	0x0800b3b3
 800b210:	0800b3b3 	.word	0x0800b3b3
 800b214:	0800b3b3 	.word	0x0800b3b3
 800b218:	0800b331 	.word	0x0800b331
 800b21c:	0800b3b3 	.word	0x0800b3b3
 800b220:	0800b3b3 	.word	0x0800b3b3
 800b224:	0800b3b3 	.word	0x0800b3b3
 800b228:	0800b371 	.word	0x0800b371
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68b9      	ldr	r1, [r7, #8]
 800b232:	4618      	mov	r0, r3
 800b234:	f000 fa74 	bl	800b720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	699a      	ldr	r2, [r3, #24]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f042 0208 	orr.w	r2, r2, #8
 800b246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	699a      	ldr	r2, [r3, #24]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f022 0204 	bic.w	r2, r2, #4
 800b256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	6999      	ldr	r1, [r3, #24]
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	691a      	ldr	r2, [r3, #16]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	430a      	orrs	r2, r1
 800b268:	619a      	str	r2, [r3, #24]
      break;
 800b26a:	e0a5      	b.n	800b3b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68b9      	ldr	r1, [r7, #8]
 800b272:	4618      	mov	r0, r3
 800b274:	f000 fae4 	bl	800b840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	699a      	ldr	r2, [r3, #24]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	699a      	ldr	r2, [r3, #24]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6999      	ldr	r1, [r3, #24]
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	021a      	lsls	r2, r3, #8
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	619a      	str	r2, [r3, #24]
      break;
 800b2ac:	e084      	b.n	800b3b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68b9      	ldr	r1, [r7, #8]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 fb4d 	bl	800b954 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	69da      	ldr	r2, [r3, #28]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f042 0208 	orr.w	r2, r2, #8
 800b2c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69da      	ldr	r2, [r3, #28]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f022 0204 	bic.w	r2, r2, #4
 800b2d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	69d9      	ldr	r1, [r3, #28]
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	691a      	ldr	r2, [r3, #16]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	430a      	orrs	r2, r1
 800b2ea:	61da      	str	r2, [r3, #28]
      break;
 800b2ec:	e064      	b.n	800b3b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	68b9      	ldr	r1, [r7, #8]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 fbb5 	bl	800ba64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	69da      	ldr	r2, [r3, #28]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	69da      	ldr	r2, [r3, #28]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	69d9      	ldr	r1, [r3, #28]
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	021a      	lsls	r2, r3, #8
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	430a      	orrs	r2, r1
 800b32c:	61da      	str	r2, [r3, #28]
      break;
 800b32e:	e043      	b.n	800b3b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68b9      	ldr	r1, [r7, #8]
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fbfe 	bl	800bb38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f042 0208 	orr.w	r2, r2, #8
 800b34a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f022 0204 	bic.w	r2, r2, #4
 800b35a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	691a      	ldr	r2, [r3, #16]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	430a      	orrs	r2, r1
 800b36c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b36e:	e023      	b.n	800b3b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	68b9      	ldr	r1, [r7, #8]
 800b376:	4618      	mov	r0, r3
 800b378:	f000 fc42 	bl	800bc00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b38a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b39a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	021a      	lsls	r2, r3, #8
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	430a      	orrs	r2, r1
 800b3ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b3b0:	e002      	b.n	800b3b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3718      	adds	r7, #24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop

0800b3cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d101      	bne.n	800b3e8 <HAL_TIM_ConfigClockSource+0x1c>
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	e0dc      	b.n	800b5a2 <HAL_TIM_ConfigClockSource+0x1d6>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	4b6a      	ldr	r3, [pc, #424]	@ (800b5ac <HAL_TIM_ConfigClockSource+0x1e0>)
 800b404:	4013      	ands	r3, r2
 800b406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b40e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a64      	ldr	r2, [pc, #400]	@ (800b5b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	f000 80a9 	beq.w	800b576 <HAL_TIM_ConfigClockSource+0x1aa>
 800b424:	4a62      	ldr	r2, [pc, #392]	@ (800b5b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b426:	4293      	cmp	r3, r2
 800b428:	f200 80ae 	bhi.w	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b42c:	4a61      	ldr	r2, [pc, #388]	@ (800b5b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	f000 80a1 	beq.w	800b576 <HAL_TIM_ConfigClockSource+0x1aa>
 800b434:	4a5f      	ldr	r2, [pc, #380]	@ (800b5b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b436:	4293      	cmp	r3, r2
 800b438:	f200 80a6 	bhi.w	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b43c:	4a5e      	ldr	r2, [pc, #376]	@ (800b5b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	f000 8099 	beq.w	800b576 <HAL_TIM_ConfigClockSource+0x1aa>
 800b444:	4a5c      	ldr	r2, [pc, #368]	@ (800b5b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b446:	4293      	cmp	r3, r2
 800b448:	f200 809e 	bhi.w	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b44c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b450:	f000 8091 	beq.w	800b576 <HAL_TIM_ConfigClockSource+0x1aa>
 800b454:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b458:	f200 8096 	bhi.w	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b45c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b460:	f000 8089 	beq.w	800b576 <HAL_TIM_ConfigClockSource+0x1aa>
 800b464:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b468:	f200 808e 	bhi.w	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b46c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b470:	d03e      	beq.n	800b4f0 <HAL_TIM_ConfigClockSource+0x124>
 800b472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b476:	f200 8087 	bhi.w	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b47a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b47e:	f000 8086 	beq.w	800b58e <HAL_TIM_ConfigClockSource+0x1c2>
 800b482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b486:	d87f      	bhi.n	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b488:	2b70      	cmp	r3, #112	@ 0x70
 800b48a:	d01a      	beq.n	800b4c2 <HAL_TIM_ConfigClockSource+0xf6>
 800b48c:	2b70      	cmp	r3, #112	@ 0x70
 800b48e:	d87b      	bhi.n	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b490:	2b60      	cmp	r3, #96	@ 0x60
 800b492:	d050      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x16a>
 800b494:	2b60      	cmp	r3, #96	@ 0x60
 800b496:	d877      	bhi.n	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b498:	2b50      	cmp	r3, #80	@ 0x50
 800b49a:	d03c      	beq.n	800b516 <HAL_TIM_ConfigClockSource+0x14a>
 800b49c:	2b50      	cmp	r3, #80	@ 0x50
 800b49e:	d873      	bhi.n	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4a0:	2b40      	cmp	r3, #64	@ 0x40
 800b4a2:	d058      	beq.n	800b556 <HAL_TIM_ConfigClockSource+0x18a>
 800b4a4:	2b40      	cmp	r3, #64	@ 0x40
 800b4a6:	d86f      	bhi.n	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4a8:	2b30      	cmp	r3, #48	@ 0x30
 800b4aa:	d064      	beq.n	800b576 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4ac:	2b30      	cmp	r3, #48	@ 0x30
 800b4ae:	d86b      	bhi.n	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4b0:	2b20      	cmp	r3, #32
 800b4b2:	d060      	beq.n	800b576 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4b4:	2b20      	cmp	r3, #32
 800b4b6:	d867      	bhi.n	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d05c      	beq.n	800b576 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4bc:	2b10      	cmp	r3, #16
 800b4be:	d05a      	beq.n	800b576 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4c0:	e062      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4d2:	f000 fc79 	bl	800bdc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b4e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	609a      	str	r2, [r3, #8]
      break;
 800b4ee:	e04f      	b.n	800b590 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b500:	f000 fc62 	bl	800bdc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	689a      	ldr	r2, [r3, #8]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b512:	609a      	str	r2, [r3, #8]
      break;
 800b514:	e03c      	b.n	800b590 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b522:	461a      	mov	r2, r3
 800b524:	f000 fbd2 	bl	800bccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2150      	movs	r1, #80	@ 0x50
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 fc2c 	bl	800bd8c <TIM_ITRx_SetConfig>
      break;
 800b534:	e02c      	b.n	800b590 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b542:	461a      	mov	r2, r3
 800b544:	f000 fbf1 	bl	800bd2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2160      	movs	r1, #96	@ 0x60
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 fc1c 	bl	800bd8c <TIM_ITRx_SetConfig>
      break;
 800b554:	e01c      	b.n	800b590 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b562:	461a      	mov	r2, r3
 800b564:	f000 fbb2 	bl	800bccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2140      	movs	r1, #64	@ 0x40
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 fc0c 	bl	800bd8c <TIM_ITRx_SetConfig>
      break;
 800b574:	e00c      	b.n	800b590 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4619      	mov	r1, r3
 800b580:	4610      	mov	r0, r2
 800b582:	f000 fc03 	bl	800bd8c <TIM_ITRx_SetConfig>
      break;
 800b586:	e003      	b.n	800b590 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	73fb      	strb	r3, [r7, #15]
      break;
 800b58c:	e000      	b.n	800b590 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b58e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	ffceff88 	.word	0xffceff88
 800b5b0:	00100040 	.word	0x00100040
 800b5b4:	00100030 	.word	0x00100030
 800b5b8:	00100020 	.word	0x00100020

0800b5bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a4a      	ldr	r2, [pc, #296]	@ (800b6f8 <TIM_Base_SetConfig+0x13c>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d013      	beq.n	800b5fc <TIM_Base_SetConfig+0x40>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5da:	d00f      	beq.n	800b5fc <TIM_Base_SetConfig+0x40>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a47      	ldr	r2, [pc, #284]	@ (800b6fc <TIM_Base_SetConfig+0x140>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d00b      	beq.n	800b5fc <TIM_Base_SetConfig+0x40>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a46      	ldr	r2, [pc, #280]	@ (800b700 <TIM_Base_SetConfig+0x144>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d007      	beq.n	800b5fc <TIM_Base_SetConfig+0x40>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a45      	ldr	r2, [pc, #276]	@ (800b704 <TIM_Base_SetConfig+0x148>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d003      	beq.n	800b5fc <TIM_Base_SetConfig+0x40>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a44      	ldr	r2, [pc, #272]	@ (800b708 <TIM_Base_SetConfig+0x14c>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d108      	bne.n	800b60e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a39      	ldr	r2, [pc, #228]	@ (800b6f8 <TIM_Base_SetConfig+0x13c>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d027      	beq.n	800b666 <TIM_Base_SetConfig+0xaa>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b61c:	d023      	beq.n	800b666 <TIM_Base_SetConfig+0xaa>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a36      	ldr	r2, [pc, #216]	@ (800b6fc <TIM_Base_SetConfig+0x140>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d01f      	beq.n	800b666 <TIM_Base_SetConfig+0xaa>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a35      	ldr	r2, [pc, #212]	@ (800b700 <TIM_Base_SetConfig+0x144>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d01b      	beq.n	800b666 <TIM_Base_SetConfig+0xaa>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a34      	ldr	r2, [pc, #208]	@ (800b704 <TIM_Base_SetConfig+0x148>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d017      	beq.n	800b666 <TIM_Base_SetConfig+0xaa>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a33      	ldr	r2, [pc, #204]	@ (800b708 <TIM_Base_SetConfig+0x14c>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d013      	beq.n	800b666 <TIM_Base_SetConfig+0xaa>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a32      	ldr	r2, [pc, #200]	@ (800b70c <TIM_Base_SetConfig+0x150>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d00f      	beq.n	800b666 <TIM_Base_SetConfig+0xaa>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a31      	ldr	r2, [pc, #196]	@ (800b710 <TIM_Base_SetConfig+0x154>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d00b      	beq.n	800b666 <TIM_Base_SetConfig+0xaa>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a30      	ldr	r2, [pc, #192]	@ (800b714 <TIM_Base_SetConfig+0x158>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d007      	beq.n	800b666 <TIM_Base_SetConfig+0xaa>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a2f      	ldr	r2, [pc, #188]	@ (800b718 <TIM_Base_SetConfig+0x15c>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d003      	beq.n	800b666 <TIM_Base_SetConfig+0xaa>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a2e      	ldr	r2, [pc, #184]	@ (800b71c <TIM_Base_SetConfig+0x160>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d108      	bne.n	800b678 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b66c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	4313      	orrs	r3, r2
 800b676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	695b      	ldr	r3, [r3, #20]
 800b682:	4313      	orrs	r3, r2
 800b684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	689a      	ldr	r2, [r3, #8]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a16      	ldr	r2, [pc, #88]	@ (800b6f8 <TIM_Base_SetConfig+0x13c>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d00f      	beq.n	800b6c4 <TIM_Base_SetConfig+0x108>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a18      	ldr	r2, [pc, #96]	@ (800b708 <TIM_Base_SetConfig+0x14c>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d00b      	beq.n	800b6c4 <TIM_Base_SetConfig+0x108>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a17      	ldr	r2, [pc, #92]	@ (800b70c <TIM_Base_SetConfig+0x150>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d007      	beq.n	800b6c4 <TIM_Base_SetConfig+0x108>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a16      	ldr	r2, [pc, #88]	@ (800b710 <TIM_Base_SetConfig+0x154>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d003      	beq.n	800b6c4 <TIM_Base_SetConfig+0x108>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a15      	ldr	r2, [pc, #84]	@ (800b714 <TIM_Base_SetConfig+0x158>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d103      	bne.n	800b6cc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	691a      	ldr	r2, [r3, #16]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d105      	bne.n	800b6ea <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	f023 0201 	bic.w	r2, r3, #1
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	611a      	str	r2, [r3, #16]
  }
}
 800b6ea:	bf00      	nop
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	40010000 	.word	0x40010000
 800b6fc:	40000400 	.word	0x40000400
 800b700:	40000800 	.word	0x40000800
 800b704:	40000c00 	.word	0x40000c00
 800b708:	40010400 	.word	0x40010400
 800b70c:	40014000 	.word	0x40014000
 800b710:	40014400 	.word	0x40014400
 800b714:	40014800 	.word	0x40014800
 800b718:	4000e000 	.word	0x4000e000
 800b71c:	4000e400 	.word	0x4000e400

0800b720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b720:	b480      	push	{r7}
 800b722:	b087      	sub	sp, #28
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a1b      	ldr	r3, [r3, #32]
 800b734:	f023 0201 	bic.w	r2, r3, #1
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	4b37      	ldr	r3, [pc, #220]	@ (800b828 <TIM_OC1_SetConfig+0x108>)
 800b74c:	4013      	ands	r3, r2
 800b74e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f023 0303 	bic.w	r3, r3, #3
 800b756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	4313      	orrs	r3, r2
 800b760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	f023 0302 	bic.w	r3, r3, #2
 800b768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	4313      	orrs	r3, r2
 800b772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a2d      	ldr	r2, [pc, #180]	@ (800b82c <TIM_OC1_SetConfig+0x10c>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d00f      	beq.n	800b79c <TIM_OC1_SetConfig+0x7c>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a2c      	ldr	r2, [pc, #176]	@ (800b830 <TIM_OC1_SetConfig+0x110>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d00b      	beq.n	800b79c <TIM_OC1_SetConfig+0x7c>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a2b      	ldr	r2, [pc, #172]	@ (800b834 <TIM_OC1_SetConfig+0x114>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d007      	beq.n	800b79c <TIM_OC1_SetConfig+0x7c>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a2a      	ldr	r2, [pc, #168]	@ (800b838 <TIM_OC1_SetConfig+0x118>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d003      	beq.n	800b79c <TIM_OC1_SetConfig+0x7c>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a29      	ldr	r2, [pc, #164]	@ (800b83c <TIM_OC1_SetConfig+0x11c>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d10c      	bne.n	800b7b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	f023 0308 	bic.w	r3, r3, #8
 800b7a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f023 0304 	bic.w	r3, r3, #4
 800b7b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4a1c      	ldr	r2, [pc, #112]	@ (800b82c <TIM_OC1_SetConfig+0x10c>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d00f      	beq.n	800b7de <TIM_OC1_SetConfig+0xbe>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a1b      	ldr	r2, [pc, #108]	@ (800b830 <TIM_OC1_SetConfig+0x110>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d00b      	beq.n	800b7de <TIM_OC1_SetConfig+0xbe>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a1a      	ldr	r2, [pc, #104]	@ (800b834 <TIM_OC1_SetConfig+0x114>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d007      	beq.n	800b7de <TIM_OC1_SetConfig+0xbe>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a19      	ldr	r2, [pc, #100]	@ (800b838 <TIM_OC1_SetConfig+0x118>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d003      	beq.n	800b7de <TIM_OC1_SetConfig+0xbe>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a18      	ldr	r2, [pc, #96]	@ (800b83c <TIM_OC1_SetConfig+0x11c>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d111      	bne.n	800b802 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b7ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	693a      	ldr	r2, [r7, #16]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	685a      	ldr	r2, [r3, #4]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	697a      	ldr	r2, [r7, #20]
 800b81a:	621a      	str	r2, [r3, #32]
}
 800b81c:	bf00      	nop
 800b81e:	371c      	adds	r7, #28
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	fffeff8f 	.word	0xfffeff8f
 800b82c:	40010000 	.word	0x40010000
 800b830:	40010400 	.word	0x40010400
 800b834:	40014000 	.word	0x40014000
 800b838:	40014400 	.word	0x40014400
 800b83c:	40014800 	.word	0x40014800

0800b840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b840:	b480      	push	{r7}
 800b842:	b087      	sub	sp, #28
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a1b      	ldr	r3, [r3, #32]
 800b854:	f023 0210 	bic.w	r2, r3, #16
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	4b34      	ldr	r3, [pc, #208]	@ (800b93c <TIM_OC2_SetConfig+0xfc>)
 800b86c:	4013      	ands	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	021b      	lsls	r3, r3, #8
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	4313      	orrs	r3, r2
 800b882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	f023 0320 	bic.w	r3, r3, #32
 800b88a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	011b      	lsls	r3, r3, #4
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	4313      	orrs	r3, r2
 800b896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a29      	ldr	r2, [pc, #164]	@ (800b940 <TIM_OC2_SetConfig+0x100>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d003      	beq.n	800b8a8 <TIM_OC2_SetConfig+0x68>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4a28      	ldr	r2, [pc, #160]	@ (800b944 <TIM_OC2_SetConfig+0x104>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d10d      	bne.n	800b8c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	011b      	lsls	r3, r3, #4
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a1e      	ldr	r2, [pc, #120]	@ (800b940 <TIM_OC2_SetConfig+0x100>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00f      	beq.n	800b8ec <TIM_OC2_SetConfig+0xac>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a1d      	ldr	r2, [pc, #116]	@ (800b944 <TIM_OC2_SetConfig+0x104>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d00b      	beq.n	800b8ec <TIM_OC2_SetConfig+0xac>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a1c      	ldr	r2, [pc, #112]	@ (800b948 <TIM_OC2_SetConfig+0x108>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d007      	beq.n	800b8ec <TIM_OC2_SetConfig+0xac>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a1b      	ldr	r2, [pc, #108]	@ (800b94c <TIM_OC2_SetConfig+0x10c>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d003      	beq.n	800b8ec <TIM_OC2_SetConfig+0xac>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a1a      	ldr	r2, [pc, #104]	@ (800b950 <TIM_OC2_SetConfig+0x110>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d113      	bne.n	800b914 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b8f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b8fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	695b      	ldr	r3, [r3, #20]
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	4313      	orrs	r3, r2
 800b906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	699b      	ldr	r3, [r3, #24]
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	4313      	orrs	r3, r2
 800b912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	697a      	ldr	r2, [r7, #20]
 800b92c:	621a      	str	r2, [r3, #32]
}
 800b92e:	bf00      	nop
 800b930:	371c      	adds	r7, #28
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	feff8fff 	.word	0xfeff8fff
 800b940:	40010000 	.word	0x40010000
 800b944:	40010400 	.word	0x40010400
 800b948:	40014000 	.word	0x40014000
 800b94c:	40014400 	.word	0x40014400
 800b950:	40014800 	.word	0x40014800

0800b954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b954:	b480      	push	{r7}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	69db      	ldr	r3, [r3, #28]
 800b97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4b33      	ldr	r3, [pc, #204]	@ (800ba4c <TIM_OC3_SetConfig+0xf8>)
 800b980:	4013      	ands	r3, r2
 800b982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f023 0303 	bic.w	r3, r3, #3
 800b98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	4313      	orrs	r3, r2
 800b994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b99c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	021b      	lsls	r3, r3, #8
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a28      	ldr	r2, [pc, #160]	@ (800ba50 <TIM_OC3_SetConfig+0xfc>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d003      	beq.n	800b9ba <TIM_OC3_SetConfig+0x66>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a27      	ldr	r2, [pc, #156]	@ (800ba54 <TIM_OC3_SetConfig+0x100>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d10d      	bne.n	800b9d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	021b      	lsls	r3, r3, #8
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a1d      	ldr	r2, [pc, #116]	@ (800ba50 <TIM_OC3_SetConfig+0xfc>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d00f      	beq.n	800b9fe <TIM_OC3_SetConfig+0xaa>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a1c      	ldr	r2, [pc, #112]	@ (800ba54 <TIM_OC3_SetConfig+0x100>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d00b      	beq.n	800b9fe <TIM_OC3_SetConfig+0xaa>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a1b      	ldr	r2, [pc, #108]	@ (800ba58 <TIM_OC3_SetConfig+0x104>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d007      	beq.n	800b9fe <TIM_OC3_SetConfig+0xaa>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a1a      	ldr	r2, [pc, #104]	@ (800ba5c <TIM_OC3_SetConfig+0x108>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d003      	beq.n	800b9fe <TIM_OC3_SetConfig+0xaa>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a19      	ldr	r2, [pc, #100]	@ (800ba60 <TIM_OC3_SetConfig+0x10c>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d113      	bne.n	800ba26 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	011b      	lsls	r3, r3, #4
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	011b      	lsls	r3, r3, #4
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	685a      	ldr	r2, [r3, #4]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	697a      	ldr	r2, [r7, #20]
 800ba3e:	621a      	str	r2, [r3, #32]
}
 800ba40:	bf00      	nop
 800ba42:	371c      	adds	r7, #28
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr
 800ba4c:	fffeff8f 	.word	0xfffeff8f
 800ba50:	40010000 	.word	0x40010000
 800ba54:	40010400 	.word	0x40010400
 800ba58:	40014000 	.word	0x40014000
 800ba5c:	40014400 	.word	0x40014400
 800ba60:	40014800 	.word	0x40014800

0800ba64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b087      	sub	sp, #28
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a1b      	ldr	r3, [r3, #32]
 800ba72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a1b      	ldr	r3, [r3, #32]
 800ba78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	69db      	ldr	r3, [r3, #28]
 800ba8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	4b24      	ldr	r3, [pc, #144]	@ (800bb20 <TIM_OC4_SetConfig+0xbc>)
 800ba90:	4013      	ands	r3, r2
 800ba92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	021b      	lsls	r3, r3, #8
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	4313      	orrs	r3, r2
 800baa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800baae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	031b      	lsls	r3, r3, #12
 800bab6:	693a      	ldr	r2, [r7, #16]
 800bab8:	4313      	orrs	r3, r2
 800baba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a19      	ldr	r2, [pc, #100]	@ (800bb24 <TIM_OC4_SetConfig+0xc0>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d00f      	beq.n	800bae4 <TIM_OC4_SetConfig+0x80>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a18      	ldr	r2, [pc, #96]	@ (800bb28 <TIM_OC4_SetConfig+0xc4>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d00b      	beq.n	800bae4 <TIM_OC4_SetConfig+0x80>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a17      	ldr	r2, [pc, #92]	@ (800bb2c <TIM_OC4_SetConfig+0xc8>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d007      	beq.n	800bae4 <TIM_OC4_SetConfig+0x80>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a16      	ldr	r2, [pc, #88]	@ (800bb30 <TIM_OC4_SetConfig+0xcc>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d003      	beq.n	800bae4 <TIM_OC4_SetConfig+0x80>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a15      	ldr	r2, [pc, #84]	@ (800bb34 <TIM_OC4_SetConfig+0xd0>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d109      	bne.n	800baf8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800baea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	695b      	ldr	r3, [r3, #20]
 800baf0:	019b      	lsls	r3, r3, #6
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	4313      	orrs	r3, r2
 800baf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	621a      	str	r2, [r3, #32]
}
 800bb12:	bf00      	nop
 800bb14:	371c      	adds	r7, #28
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	feff8fff 	.word	0xfeff8fff
 800bb24:	40010000 	.word	0x40010000
 800bb28:	40010400 	.word	0x40010400
 800bb2c:	40014000 	.word	0x40014000
 800bb30:	40014400 	.word	0x40014400
 800bb34:	40014800 	.word	0x40014800

0800bb38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a1b      	ldr	r3, [r3, #32]
 800bb46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a1b      	ldr	r3, [r3, #32]
 800bb4c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	4b21      	ldr	r3, [pc, #132]	@ (800bbe8 <TIM_OC5_SetConfig+0xb0>)
 800bb64:	4013      	ands	r3, r2
 800bb66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bb78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	041b      	lsls	r3, r3, #16
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a18      	ldr	r2, [pc, #96]	@ (800bbec <TIM_OC5_SetConfig+0xb4>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d00f      	beq.n	800bbae <TIM_OC5_SetConfig+0x76>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a17      	ldr	r2, [pc, #92]	@ (800bbf0 <TIM_OC5_SetConfig+0xb8>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d00b      	beq.n	800bbae <TIM_OC5_SetConfig+0x76>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a16      	ldr	r2, [pc, #88]	@ (800bbf4 <TIM_OC5_SetConfig+0xbc>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d007      	beq.n	800bbae <TIM_OC5_SetConfig+0x76>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a15      	ldr	r2, [pc, #84]	@ (800bbf8 <TIM_OC5_SetConfig+0xc0>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d003      	beq.n	800bbae <TIM_OC5_SetConfig+0x76>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a14      	ldr	r2, [pc, #80]	@ (800bbfc <TIM_OC5_SetConfig+0xc4>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d109      	bne.n	800bbc2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	021b      	lsls	r3, r3, #8
 800bbbc:	697a      	ldr	r2, [r7, #20]
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	697a      	ldr	r2, [r7, #20]
 800bbc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	685a      	ldr	r2, [r3, #4]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	693a      	ldr	r2, [r7, #16]
 800bbda:	621a      	str	r2, [r3, #32]
}
 800bbdc:	bf00      	nop
 800bbde:	371c      	adds	r7, #28
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	fffeff8f 	.word	0xfffeff8f
 800bbec:	40010000 	.word	0x40010000
 800bbf0:	40010400 	.word	0x40010400
 800bbf4:	40014000 	.word	0x40014000
 800bbf8:	40014400 	.word	0x40014400
 800bbfc:	40014800 	.word	0x40014800

0800bc00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b087      	sub	sp, #28
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a1b      	ldr	r3, [r3, #32]
 800bc14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	4b22      	ldr	r3, [pc, #136]	@ (800bcb4 <TIM_OC6_SetConfig+0xb4>)
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	021b      	lsls	r3, r3, #8
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bc42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	051b      	lsls	r3, r3, #20
 800bc4a:	693a      	ldr	r2, [r7, #16]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a19      	ldr	r2, [pc, #100]	@ (800bcb8 <TIM_OC6_SetConfig+0xb8>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d00f      	beq.n	800bc78 <TIM_OC6_SetConfig+0x78>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a18      	ldr	r2, [pc, #96]	@ (800bcbc <TIM_OC6_SetConfig+0xbc>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d00b      	beq.n	800bc78 <TIM_OC6_SetConfig+0x78>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4a17      	ldr	r2, [pc, #92]	@ (800bcc0 <TIM_OC6_SetConfig+0xc0>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d007      	beq.n	800bc78 <TIM_OC6_SetConfig+0x78>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4a16      	ldr	r2, [pc, #88]	@ (800bcc4 <TIM_OC6_SetConfig+0xc4>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d003      	beq.n	800bc78 <TIM_OC6_SetConfig+0x78>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a15      	ldr	r2, [pc, #84]	@ (800bcc8 <TIM_OC6_SetConfig+0xc8>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d109      	bne.n	800bc8c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	029b      	lsls	r3, r3, #10
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	685a      	ldr	r2, [r3, #4]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	621a      	str	r2, [r3, #32]
}
 800bca6:	bf00      	nop
 800bca8:	371c      	adds	r7, #28
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	feff8fff 	.word	0xfeff8fff
 800bcb8:	40010000 	.word	0x40010000
 800bcbc:	40010400 	.word	0x40010400
 800bcc0:	40014000 	.word	0x40014000
 800bcc4:	40014400 	.word	0x40014400
 800bcc8:	40014800 	.word	0x40014800

0800bccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6a1b      	ldr	r3, [r3, #32]
 800bcdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	f023 0201 	bic.w	r2, r3, #1
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bcf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	011b      	lsls	r3, r3, #4
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	f023 030a 	bic.w	r3, r3, #10
 800bd08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	621a      	str	r2, [r3, #32]
}
 800bd1e:	bf00      	nop
 800bd20:	371c      	adds	r7, #28
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b087      	sub	sp, #28
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	60f8      	str	r0, [r7, #12]
 800bd32:	60b9      	str	r1, [r7, #8]
 800bd34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6a1b      	ldr	r3, [r3, #32]
 800bd3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6a1b      	ldr	r3, [r3, #32]
 800bd40:	f023 0210 	bic.w	r2, r3, #16
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bd54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	031b      	lsls	r3, r3, #12
 800bd5a:	693a      	ldr	r2, [r7, #16]
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bd66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	011b      	lsls	r3, r3, #4
 800bd6c:	697a      	ldr	r2, [r7, #20]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	693a      	ldr	r2, [r7, #16]
 800bd76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	697a      	ldr	r2, [r7, #20]
 800bd7c:	621a      	str	r2, [r3, #32]
}
 800bd7e:	bf00      	nop
 800bd80:	371c      	adds	r7, #28
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr
	...

0800bd8c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	4b09      	ldr	r3, [pc, #36]	@ (800bdc4 <TIM_ITRx_SetConfig+0x38>)
 800bda0:	4013      	ands	r3, r2
 800bda2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	f043 0307 	orr.w	r3, r3, #7
 800bdae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	609a      	str	r2, [r3, #8]
}
 800bdb6:	bf00      	nop
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	ffcfff8f 	.word	0xffcfff8f

0800bdc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b087      	sub	sp, #28
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
 800bdd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bde2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	021a      	lsls	r2, r3, #8
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	431a      	orrs	r2, r3
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	697a      	ldr	r2, [r7, #20]
 800bdfa:	609a      	str	r2, [r3, #8]
}
 800bdfc:	bf00      	nop
 800bdfe:	371c      	adds	r7, #28
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be08:	b480      	push	{r7}
 800be0a:	b085      	sub	sp, #20
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d101      	bne.n	800be20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be1c:	2302      	movs	r3, #2
 800be1e:	e077      	b.n	800bf10 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2202      	movs	r2, #2
 800be2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a35      	ldr	r2, [pc, #212]	@ (800bf1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d004      	beq.n	800be54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a34      	ldr	r2, [pc, #208]	@ (800bf20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d108      	bne.n	800be66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800be5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	4313      	orrs	r3, r2
 800be64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	4313      	orrs	r3, r2
 800be76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a25      	ldr	r2, [pc, #148]	@ (800bf1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d02c      	beq.n	800bee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be92:	d027      	beq.n	800bee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a22      	ldr	r2, [pc, #136]	@ (800bf24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d022      	beq.n	800bee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a21      	ldr	r2, [pc, #132]	@ (800bf28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d01d      	beq.n	800bee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a1f      	ldr	r2, [pc, #124]	@ (800bf2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d018      	beq.n	800bee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a1a      	ldr	r2, [pc, #104]	@ (800bf20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d013      	beq.n	800bee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a1b      	ldr	r2, [pc, #108]	@ (800bf30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d00e      	beq.n	800bee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a1a      	ldr	r2, [pc, #104]	@ (800bf34 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d009      	beq.n	800bee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a18      	ldr	r2, [pc, #96]	@ (800bf38 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d004      	beq.n	800bee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4a17      	ldr	r2, [pc, #92]	@ (800bf3c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d10c      	bne.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800beea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2201      	movs	r2, #1
 800bf02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr
 800bf1c:	40010000 	.word	0x40010000
 800bf20:	40010400 	.word	0x40010400
 800bf24:	40000400 	.word	0x40000400
 800bf28:	40000800 	.word	0x40000800
 800bf2c:	40000c00 	.word	0x40000c00
 800bf30:	40001800 	.word	0x40001800
 800bf34:	40014000 	.word	0x40014000
 800bf38:	4000e000 	.word	0x4000e000
 800bf3c:	4000e400 	.word	0x4000e400

0800bf40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e042      	b.n	800bfd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d106      	bne.n	800bf6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7f5 fdd1 	bl	8001b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2224      	movs	r2, #36	@ 0x24
 800bf6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f022 0201 	bic.w	r2, r2, #1
 800bf80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d002      	beq.n	800bf90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fe94 	bl	800ccb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 f825 	bl	800bfe0 <UART_SetConfig>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d101      	bne.n	800bfa0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e01b      	b.n	800bfd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	685a      	ldr	r2, [r3, #4]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bfae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	689a      	ldr	r2, [r3, #8]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bfbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f042 0201 	orr.w	r2, r2, #1
 800bfce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 ff13 	bl	800cdfc <UART_CheckIdleState>
 800bfd6:	4603      	mov	r3, r0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfe4:	b092      	sub	sp, #72	@ 0x48
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	689a      	ldr	r2, [r3, #8]
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	431a      	orrs	r2, r3
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	695b      	ldr	r3, [r3, #20]
 800bffe:	431a      	orrs	r2, r3
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	69db      	ldr	r3, [r3, #28]
 800c004:	4313      	orrs	r3, r2
 800c006:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	4bbe      	ldr	r3, [pc, #760]	@ (800c308 <UART_SetConfig+0x328>)
 800c010:	4013      	ands	r3, r2
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	6812      	ldr	r2, [r2, #0]
 800c016:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c018:	430b      	orrs	r3, r1
 800c01a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	68da      	ldr	r2, [r3, #12]
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	430a      	orrs	r2, r1
 800c030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4ab3      	ldr	r2, [pc, #716]	@ (800c30c <UART_SetConfig+0x32c>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d004      	beq.n	800c04c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	6a1b      	ldr	r3, [r3, #32]
 800c046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c048:	4313      	orrs	r3, r2
 800c04a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	689a      	ldr	r2, [r3, #8]
 800c052:	4baf      	ldr	r3, [pc, #700]	@ (800c310 <UART_SetConfig+0x330>)
 800c054:	4013      	ands	r3, r2
 800c056:	697a      	ldr	r2, [r7, #20]
 800c058:	6812      	ldr	r2, [r2, #0]
 800c05a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c05c:	430b      	orrs	r3, r1
 800c05e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c066:	f023 010f 	bic.w	r1, r3, #15
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	430a      	orrs	r2, r1
 800c074:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4aa6      	ldr	r2, [pc, #664]	@ (800c314 <UART_SetConfig+0x334>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d177      	bne.n	800c170 <UART_SetConfig+0x190>
 800c080:	4ba5      	ldr	r3, [pc, #660]	@ (800c318 <UART_SetConfig+0x338>)
 800c082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c084:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c088:	2b28      	cmp	r3, #40	@ 0x28
 800c08a:	d86d      	bhi.n	800c168 <UART_SetConfig+0x188>
 800c08c:	a201      	add	r2, pc, #4	@ (adr r2, 800c094 <UART_SetConfig+0xb4>)
 800c08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c092:	bf00      	nop
 800c094:	0800c139 	.word	0x0800c139
 800c098:	0800c169 	.word	0x0800c169
 800c09c:	0800c169 	.word	0x0800c169
 800c0a0:	0800c169 	.word	0x0800c169
 800c0a4:	0800c169 	.word	0x0800c169
 800c0a8:	0800c169 	.word	0x0800c169
 800c0ac:	0800c169 	.word	0x0800c169
 800c0b0:	0800c169 	.word	0x0800c169
 800c0b4:	0800c141 	.word	0x0800c141
 800c0b8:	0800c169 	.word	0x0800c169
 800c0bc:	0800c169 	.word	0x0800c169
 800c0c0:	0800c169 	.word	0x0800c169
 800c0c4:	0800c169 	.word	0x0800c169
 800c0c8:	0800c169 	.word	0x0800c169
 800c0cc:	0800c169 	.word	0x0800c169
 800c0d0:	0800c169 	.word	0x0800c169
 800c0d4:	0800c149 	.word	0x0800c149
 800c0d8:	0800c169 	.word	0x0800c169
 800c0dc:	0800c169 	.word	0x0800c169
 800c0e0:	0800c169 	.word	0x0800c169
 800c0e4:	0800c169 	.word	0x0800c169
 800c0e8:	0800c169 	.word	0x0800c169
 800c0ec:	0800c169 	.word	0x0800c169
 800c0f0:	0800c169 	.word	0x0800c169
 800c0f4:	0800c151 	.word	0x0800c151
 800c0f8:	0800c169 	.word	0x0800c169
 800c0fc:	0800c169 	.word	0x0800c169
 800c100:	0800c169 	.word	0x0800c169
 800c104:	0800c169 	.word	0x0800c169
 800c108:	0800c169 	.word	0x0800c169
 800c10c:	0800c169 	.word	0x0800c169
 800c110:	0800c169 	.word	0x0800c169
 800c114:	0800c159 	.word	0x0800c159
 800c118:	0800c169 	.word	0x0800c169
 800c11c:	0800c169 	.word	0x0800c169
 800c120:	0800c169 	.word	0x0800c169
 800c124:	0800c169 	.word	0x0800c169
 800c128:	0800c169 	.word	0x0800c169
 800c12c:	0800c169 	.word	0x0800c169
 800c130:	0800c169 	.word	0x0800c169
 800c134:	0800c161 	.word	0x0800c161
 800c138:	2301      	movs	r3, #1
 800c13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c13e:	e326      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c140:	2304      	movs	r3, #4
 800c142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c146:	e322      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c148:	2308      	movs	r3, #8
 800c14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c14e:	e31e      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c150:	2310      	movs	r3, #16
 800c152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c156:	e31a      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c158:	2320      	movs	r3, #32
 800c15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c15e:	e316      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c160:	2340      	movs	r3, #64	@ 0x40
 800c162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c166:	e312      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c168:	2380      	movs	r3, #128	@ 0x80
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c16e:	e30e      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a69      	ldr	r2, [pc, #420]	@ (800c31c <UART_SetConfig+0x33c>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d130      	bne.n	800c1dc <UART_SetConfig+0x1fc>
 800c17a:	4b67      	ldr	r3, [pc, #412]	@ (800c318 <UART_SetConfig+0x338>)
 800c17c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c17e:	f003 0307 	and.w	r3, r3, #7
 800c182:	2b05      	cmp	r3, #5
 800c184:	d826      	bhi.n	800c1d4 <UART_SetConfig+0x1f4>
 800c186:	a201      	add	r2, pc, #4	@ (adr r2, 800c18c <UART_SetConfig+0x1ac>)
 800c188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18c:	0800c1a5 	.word	0x0800c1a5
 800c190:	0800c1ad 	.word	0x0800c1ad
 800c194:	0800c1b5 	.word	0x0800c1b5
 800c198:	0800c1bd 	.word	0x0800c1bd
 800c19c:	0800c1c5 	.word	0x0800c1c5
 800c1a0:	0800c1cd 	.word	0x0800c1cd
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1aa:	e2f0      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c1ac:	2304      	movs	r3, #4
 800c1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1b2:	e2ec      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c1b4:	2308      	movs	r3, #8
 800c1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ba:	e2e8      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c1bc:	2310      	movs	r3, #16
 800c1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1c2:	e2e4      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c1c4:	2320      	movs	r3, #32
 800c1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ca:	e2e0      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c1cc:	2340      	movs	r3, #64	@ 0x40
 800c1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1d2:	e2dc      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c1d4:	2380      	movs	r3, #128	@ 0x80
 800c1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1da:	e2d8      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a4f      	ldr	r2, [pc, #316]	@ (800c320 <UART_SetConfig+0x340>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d130      	bne.n	800c248 <UART_SetConfig+0x268>
 800c1e6:	4b4c      	ldr	r3, [pc, #304]	@ (800c318 <UART_SetConfig+0x338>)
 800c1e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1ea:	f003 0307 	and.w	r3, r3, #7
 800c1ee:	2b05      	cmp	r3, #5
 800c1f0:	d826      	bhi.n	800c240 <UART_SetConfig+0x260>
 800c1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1f8 <UART_SetConfig+0x218>)
 800c1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f8:	0800c211 	.word	0x0800c211
 800c1fc:	0800c219 	.word	0x0800c219
 800c200:	0800c221 	.word	0x0800c221
 800c204:	0800c229 	.word	0x0800c229
 800c208:	0800c231 	.word	0x0800c231
 800c20c:	0800c239 	.word	0x0800c239
 800c210:	2300      	movs	r3, #0
 800c212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c216:	e2ba      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c218:	2304      	movs	r3, #4
 800c21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c21e:	e2b6      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c220:	2308      	movs	r3, #8
 800c222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c226:	e2b2      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c228:	2310      	movs	r3, #16
 800c22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c22e:	e2ae      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c230:	2320      	movs	r3, #32
 800c232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c236:	e2aa      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c238:	2340      	movs	r3, #64	@ 0x40
 800c23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c23e:	e2a6      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c240:	2380      	movs	r3, #128	@ 0x80
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c246:	e2a2      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a35      	ldr	r2, [pc, #212]	@ (800c324 <UART_SetConfig+0x344>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d130      	bne.n	800c2b4 <UART_SetConfig+0x2d4>
 800c252:	4b31      	ldr	r3, [pc, #196]	@ (800c318 <UART_SetConfig+0x338>)
 800c254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c256:	f003 0307 	and.w	r3, r3, #7
 800c25a:	2b05      	cmp	r3, #5
 800c25c:	d826      	bhi.n	800c2ac <UART_SetConfig+0x2cc>
 800c25e:	a201      	add	r2, pc, #4	@ (adr r2, 800c264 <UART_SetConfig+0x284>)
 800c260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c264:	0800c27d 	.word	0x0800c27d
 800c268:	0800c285 	.word	0x0800c285
 800c26c:	0800c28d 	.word	0x0800c28d
 800c270:	0800c295 	.word	0x0800c295
 800c274:	0800c29d 	.word	0x0800c29d
 800c278:	0800c2a5 	.word	0x0800c2a5
 800c27c:	2300      	movs	r3, #0
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c282:	e284      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c284:	2304      	movs	r3, #4
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c28a:	e280      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c28c:	2308      	movs	r3, #8
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c292:	e27c      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c294:	2310      	movs	r3, #16
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c29a:	e278      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c29c:	2320      	movs	r3, #32
 800c29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2a2:	e274      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c2a4:	2340      	movs	r3, #64	@ 0x40
 800c2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2aa:	e270      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c2ac:	2380      	movs	r3, #128	@ 0x80
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b2:	e26c      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a1b      	ldr	r2, [pc, #108]	@ (800c328 <UART_SetConfig+0x348>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d142      	bne.n	800c344 <UART_SetConfig+0x364>
 800c2be:	4b16      	ldr	r3, [pc, #88]	@ (800c318 <UART_SetConfig+0x338>)
 800c2c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2c2:	f003 0307 	and.w	r3, r3, #7
 800c2c6:	2b05      	cmp	r3, #5
 800c2c8:	d838      	bhi.n	800c33c <UART_SetConfig+0x35c>
 800c2ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d0 <UART_SetConfig+0x2f0>)
 800c2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d0:	0800c2e9 	.word	0x0800c2e9
 800c2d4:	0800c2f1 	.word	0x0800c2f1
 800c2d8:	0800c2f9 	.word	0x0800c2f9
 800c2dc:	0800c301 	.word	0x0800c301
 800c2e0:	0800c32d 	.word	0x0800c32d
 800c2e4:	0800c335 	.word	0x0800c335
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ee:	e24e      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c2f0:	2304      	movs	r3, #4
 800c2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2f6:	e24a      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c2f8:	2308      	movs	r3, #8
 800c2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2fe:	e246      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c300:	2310      	movs	r3, #16
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c306:	e242      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c308:	cfff69f3 	.word	0xcfff69f3
 800c30c:	58000c00 	.word	0x58000c00
 800c310:	11fff4ff 	.word	0x11fff4ff
 800c314:	40011000 	.word	0x40011000
 800c318:	58024400 	.word	0x58024400
 800c31c:	40004400 	.word	0x40004400
 800c320:	40004800 	.word	0x40004800
 800c324:	40004c00 	.word	0x40004c00
 800c328:	40005000 	.word	0x40005000
 800c32c:	2320      	movs	r3, #32
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c332:	e22c      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c334:	2340      	movs	r3, #64	@ 0x40
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33a:	e228      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c33c:	2380      	movs	r3, #128	@ 0x80
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c342:	e224      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4ab1      	ldr	r2, [pc, #708]	@ (800c610 <UART_SetConfig+0x630>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d176      	bne.n	800c43c <UART_SetConfig+0x45c>
 800c34e:	4bb1      	ldr	r3, [pc, #708]	@ (800c614 <UART_SetConfig+0x634>)
 800c350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c352:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c356:	2b28      	cmp	r3, #40	@ 0x28
 800c358:	d86c      	bhi.n	800c434 <UART_SetConfig+0x454>
 800c35a:	a201      	add	r2, pc, #4	@ (adr r2, 800c360 <UART_SetConfig+0x380>)
 800c35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c360:	0800c405 	.word	0x0800c405
 800c364:	0800c435 	.word	0x0800c435
 800c368:	0800c435 	.word	0x0800c435
 800c36c:	0800c435 	.word	0x0800c435
 800c370:	0800c435 	.word	0x0800c435
 800c374:	0800c435 	.word	0x0800c435
 800c378:	0800c435 	.word	0x0800c435
 800c37c:	0800c435 	.word	0x0800c435
 800c380:	0800c40d 	.word	0x0800c40d
 800c384:	0800c435 	.word	0x0800c435
 800c388:	0800c435 	.word	0x0800c435
 800c38c:	0800c435 	.word	0x0800c435
 800c390:	0800c435 	.word	0x0800c435
 800c394:	0800c435 	.word	0x0800c435
 800c398:	0800c435 	.word	0x0800c435
 800c39c:	0800c435 	.word	0x0800c435
 800c3a0:	0800c415 	.word	0x0800c415
 800c3a4:	0800c435 	.word	0x0800c435
 800c3a8:	0800c435 	.word	0x0800c435
 800c3ac:	0800c435 	.word	0x0800c435
 800c3b0:	0800c435 	.word	0x0800c435
 800c3b4:	0800c435 	.word	0x0800c435
 800c3b8:	0800c435 	.word	0x0800c435
 800c3bc:	0800c435 	.word	0x0800c435
 800c3c0:	0800c41d 	.word	0x0800c41d
 800c3c4:	0800c435 	.word	0x0800c435
 800c3c8:	0800c435 	.word	0x0800c435
 800c3cc:	0800c435 	.word	0x0800c435
 800c3d0:	0800c435 	.word	0x0800c435
 800c3d4:	0800c435 	.word	0x0800c435
 800c3d8:	0800c435 	.word	0x0800c435
 800c3dc:	0800c435 	.word	0x0800c435
 800c3e0:	0800c425 	.word	0x0800c425
 800c3e4:	0800c435 	.word	0x0800c435
 800c3e8:	0800c435 	.word	0x0800c435
 800c3ec:	0800c435 	.word	0x0800c435
 800c3f0:	0800c435 	.word	0x0800c435
 800c3f4:	0800c435 	.word	0x0800c435
 800c3f8:	0800c435 	.word	0x0800c435
 800c3fc:	0800c435 	.word	0x0800c435
 800c400:	0800c42d 	.word	0x0800c42d
 800c404:	2301      	movs	r3, #1
 800c406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40a:	e1c0      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c40c:	2304      	movs	r3, #4
 800c40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c412:	e1bc      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c414:	2308      	movs	r3, #8
 800c416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41a:	e1b8      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c41c:	2310      	movs	r3, #16
 800c41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c422:	e1b4      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c424:	2320      	movs	r3, #32
 800c426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c42a:	e1b0      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c42c:	2340      	movs	r3, #64	@ 0x40
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c432:	e1ac      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c434:	2380      	movs	r3, #128	@ 0x80
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c43a:	e1a8      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a75      	ldr	r2, [pc, #468]	@ (800c618 <UART_SetConfig+0x638>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d130      	bne.n	800c4a8 <UART_SetConfig+0x4c8>
 800c446:	4b73      	ldr	r3, [pc, #460]	@ (800c614 <UART_SetConfig+0x634>)
 800c448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c44a:	f003 0307 	and.w	r3, r3, #7
 800c44e:	2b05      	cmp	r3, #5
 800c450:	d826      	bhi.n	800c4a0 <UART_SetConfig+0x4c0>
 800c452:	a201      	add	r2, pc, #4	@ (adr r2, 800c458 <UART_SetConfig+0x478>)
 800c454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c458:	0800c471 	.word	0x0800c471
 800c45c:	0800c479 	.word	0x0800c479
 800c460:	0800c481 	.word	0x0800c481
 800c464:	0800c489 	.word	0x0800c489
 800c468:	0800c491 	.word	0x0800c491
 800c46c:	0800c499 	.word	0x0800c499
 800c470:	2300      	movs	r3, #0
 800c472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c476:	e18a      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c478:	2304      	movs	r3, #4
 800c47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47e:	e186      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c480:	2308      	movs	r3, #8
 800c482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c486:	e182      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c488:	2310      	movs	r3, #16
 800c48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c48e:	e17e      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c490:	2320      	movs	r3, #32
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c496:	e17a      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c498:	2340      	movs	r3, #64	@ 0x40
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c49e:	e176      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c4a0:	2380      	movs	r3, #128	@ 0x80
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a6:	e172      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a5b      	ldr	r2, [pc, #364]	@ (800c61c <UART_SetConfig+0x63c>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d130      	bne.n	800c514 <UART_SetConfig+0x534>
 800c4b2:	4b58      	ldr	r3, [pc, #352]	@ (800c614 <UART_SetConfig+0x634>)
 800c4b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4b6:	f003 0307 	and.w	r3, r3, #7
 800c4ba:	2b05      	cmp	r3, #5
 800c4bc:	d826      	bhi.n	800c50c <UART_SetConfig+0x52c>
 800c4be:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c4 <UART_SetConfig+0x4e4>)
 800c4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c4:	0800c4dd 	.word	0x0800c4dd
 800c4c8:	0800c4e5 	.word	0x0800c4e5
 800c4cc:	0800c4ed 	.word	0x0800c4ed
 800c4d0:	0800c4f5 	.word	0x0800c4f5
 800c4d4:	0800c4fd 	.word	0x0800c4fd
 800c4d8:	0800c505 	.word	0x0800c505
 800c4dc:	2300      	movs	r3, #0
 800c4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4e2:	e154      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c4e4:	2304      	movs	r3, #4
 800c4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ea:	e150      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c4ec:	2308      	movs	r3, #8
 800c4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4f2:	e14c      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c4f4:	2310      	movs	r3, #16
 800c4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4fa:	e148      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c4fc:	2320      	movs	r3, #32
 800c4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c502:	e144      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c504:	2340      	movs	r3, #64	@ 0x40
 800c506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c50a:	e140      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c50c:	2380      	movs	r3, #128	@ 0x80
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c512:	e13c      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a41      	ldr	r2, [pc, #260]	@ (800c620 <UART_SetConfig+0x640>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	f040 8082 	bne.w	800c624 <UART_SetConfig+0x644>
 800c520:	4b3c      	ldr	r3, [pc, #240]	@ (800c614 <UART_SetConfig+0x634>)
 800c522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c524:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c528:	2b28      	cmp	r3, #40	@ 0x28
 800c52a:	d86d      	bhi.n	800c608 <UART_SetConfig+0x628>
 800c52c:	a201      	add	r2, pc, #4	@ (adr r2, 800c534 <UART_SetConfig+0x554>)
 800c52e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c532:	bf00      	nop
 800c534:	0800c5d9 	.word	0x0800c5d9
 800c538:	0800c609 	.word	0x0800c609
 800c53c:	0800c609 	.word	0x0800c609
 800c540:	0800c609 	.word	0x0800c609
 800c544:	0800c609 	.word	0x0800c609
 800c548:	0800c609 	.word	0x0800c609
 800c54c:	0800c609 	.word	0x0800c609
 800c550:	0800c609 	.word	0x0800c609
 800c554:	0800c5e1 	.word	0x0800c5e1
 800c558:	0800c609 	.word	0x0800c609
 800c55c:	0800c609 	.word	0x0800c609
 800c560:	0800c609 	.word	0x0800c609
 800c564:	0800c609 	.word	0x0800c609
 800c568:	0800c609 	.word	0x0800c609
 800c56c:	0800c609 	.word	0x0800c609
 800c570:	0800c609 	.word	0x0800c609
 800c574:	0800c5e9 	.word	0x0800c5e9
 800c578:	0800c609 	.word	0x0800c609
 800c57c:	0800c609 	.word	0x0800c609
 800c580:	0800c609 	.word	0x0800c609
 800c584:	0800c609 	.word	0x0800c609
 800c588:	0800c609 	.word	0x0800c609
 800c58c:	0800c609 	.word	0x0800c609
 800c590:	0800c609 	.word	0x0800c609
 800c594:	0800c5f1 	.word	0x0800c5f1
 800c598:	0800c609 	.word	0x0800c609
 800c59c:	0800c609 	.word	0x0800c609
 800c5a0:	0800c609 	.word	0x0800c609
 800c5a4:	0800c609 	.word	0x0800c609
 800c5a8:	0800c609 	.word	0x0800c609
 800c5ac:	0800c609 	.word	0x0800c609
 800c5b0:	0800c609 	.word	0x0800c609
 800c5b4:	0800c5f9 	.word	0x0800c5f9
 800c5b8:	0800c609 	.word	0x0800c609
 800c5bc:	0800c609 	.word	0x0800c609
 800c5c0:	0800c609 	.word	0x0800c609
 800c5c4:	0800c609 	.word	0x0800c609
 800c5c8:	0800c609 	.word	0x0800c609
 800c5cc:	0800c609 	.word	0x0800c609
 800c5d0:	0800c609 	.word	0x0800c609
 800c5d4:	0800c601 	.word	0x0800c601
 800c5d8:	2301      	movs	r3, #1
 800c5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5de:	e0d6      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c5e0:	2304      	movs	r3, #4
 800c5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5e6:	e0d2      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c5e8:	2308      	movs	r3, #8
 800c5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ee:	e0ce      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c5f0:	2310      	movs	r3, #16
 800c5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5f6:	e0ca      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c5f8:	2320      	movs	r3, #32
 800c5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5fe:	e0c6      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c600:	2340      	movs	r3, #64	@ 0x40
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c606:	e0c2      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c608:	2380      	movs	r3, #128	@ 0x80
 800c60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c60e:	e0be      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c610:	40011400 	.word	0x40011400
 800c614:	58024400 	.word	0x58024400
 800c618:	40007800 	.word	0x40007800
 800c61c:	40007c00 	.word	0x40007c00
 800c620:	40011800 	.word	0x40011800
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4aad      	ldr	r2, [pc, #692]	@ (800c8e0 <UART_SetConfig+0x900>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d176      	bne.n	800c71c <UART_SetConfig+0x73c>
 800c62e:	4bad      	ldr	r3, [pc, #692]	@ (800c8e4 <UART_SetConfig+0x904>)
 800c630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c632:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c636:	2b28      	cmp	r3, #40	@ 0x28
 800c638:	d86c      	bhi.n	800c714 <UART_SetConfig+0x734>
 800c63a:	a201      	add	r2, pc, #4	@ (adr r2, 800c640 <UART_SetConfig+0x660>)
 800c63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c640:	0800c6e5 	.word	0x0800c6e5
 800c644:	0800c715 	.word	0x0800c715
 800c648:	0800c715 	.word	0x0800c715
 800c64c:	0800c715 	.word	0x0800c715
 800c650:	0800c715 	.word	0x0800c715
 800c654:	0800c715 	.word	0x0800c715
 800c658:	0800c715 	.word	0x0800c715
 800c65c:	0800c715 	.word	0x0800c715
 800c660:	0800c6ed 	.word	0x0800c6ed
 800c664:	0800c715 	.word	0x0800c715
 800c668:	0800c715 	.word	0x0800c715
 800c66c:	0800c715 	.word	0x0800c715
 800c670:	0800c715 	.word	0x0800c715
 800c674:	0800c715 	.word	0x0800c715
 800c678:	0800c715 	.word	0x0800c715
 800c67c:	0800c715 	.word	0x0800c715
 800c680:	0800c6f5 	.word	0x0800c6f5
 800c684:	0800c715 	.word	0x0800c715
 800c688:	0800c715 	.word	0x0800c715
 800c68c:	0800c715 	.word	0x0800c715
 800c690:	0800c715 	.word	0x0800c715
 800c694:	0800c715 	.word	0x0800c715
 800c698:	0800c715 	.word	0x0800c715
 800c69c:	0800c715 	.word	0x0800c715
 800c6a0:	0800c6fd 	.word	0x0800c6fd
 800c6a4:	0800c715 	.word	0x0800c715
 800c6a8:	0800c715 	.word	0x0800c715
 800c6ac:	0800c715 	.word	0x0800c715
 800c6b0:	0800c715 	.word	0x0800c715
 800c6b4:	0800c715 	.word	0x0800c715
 800c6b8:	0800c715 	.word	0x0800c715
 800c6bc:	0800c715 	.word	0x0800c715
 800c6c0:	0800c705 	.word	0x0800c705
 800c6c4:	0800c715 	.word	0x0800c715
 800c6c8:	0800c715 	.word	0x0800c715
 800c6cc:	0800c715 	.word	0x0800c715
 800c6d0:	0800c715 	.word	0x0800c715
 800c6d4:	0800c715 	.word	0x0800c715
 800c6d8:	0800c715 	.word	0x0800c715
 800c6dc:	0800c715 	.word	0x0800c715
 800c6e0:	0800c70d 	.word	0x0800c70d
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ea:	e050      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c6ec:	2304      	movs	r3, #4
 800c6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6f2:	e04c      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c6f4:	2308      	movs	r3, #8
 800c6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6fa:	e048      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c6fc:	2310      	movs	r3, #16
 800c6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c702:	e044      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c704:	2320      	movs	r3, #32
 800c706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c70a:	e040      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c70c:	2340      	movs	r3, #64	@ 0x40
 800c70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c712:	e03c      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c714:	2380      	movs	r3, #128	@ 0x80
 800c716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c71a:	e038      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a71      	ldr	r2, [pc, #452]	@ (800c8e8 <UART_SetConfig+0x908>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d130      	bne.n	800c788 <UART_SetConfig+0x7a8>
 800c726:	4b6f      	ldr	r3, [pc, #444]	@ (800c8e4 <UART_SetConfig+0x904>)
 800c728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c72a:	f003 0307 	and.w	r3, r3, #7
 800c72e:	2b05      	cmp	r3, #5
 800c730:	d826      	bhi.n	800c780 <UART_SetConfig+0x7a0>
 800c732:	a201      	add	r2, pc, #4	@ (adr r2, 800c738 <UART_SetConfig+0x758>)
 800c734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c738:	0800c751 	.word	0x0800c751
 800c73c:	0800c759 	.word	0x0800c759
 800c740:	0800c761 	.word	0x0800c761
 800c744:	0800c769 	.word	0x0800c769
 800c748:	0800c771 	.word	0x0800c771
 800c74c:	0800c779 	.word	0x0800c779
 800c750:	2302      	movs	r3, #2
 800c752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c756:	e01a      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c758:	2304      	movs	r3, #4
 800c75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c75e:	e016      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c760:	2308      	movs	r3, #8
 800c762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c766:	e012      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c768:	2310      	movs	r3, #16
 800c76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c76e:	e00e      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c770:	2320      	movs	r3, #32
 800c772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c776:	e00a      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c778:	2340      	movs	r3, #64	@ 0x40
 800c77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c77e:	e006      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c780:	2380      	movs	r3, #128	@ 0x80
 800c782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c786:	e002      	b.n	800c78e <UART_SetConfig+0x7ae>
 800c788:	2380      	movs	r3, #128	@ 0x80
 800c78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a55      	ldr	r2, [pc, #340]	@ (800c8e8 <UART_SetConfig+0x908>)
 800c794:	4293      	cmp	r3, r2
 800c796:	f040 80f8 	bne.w	800c98a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c79a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c79e:	2b20      	cmp	r3, #32
 800c7a0:	dc46      	bgt.n	800c830 <UART_SetConfig+0x850>
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	db75      	blt.n	800c892 <UART_SetConfig+0x8b2>
 800c7a6:	3b02      	subs	r3, #2
 800c7a8:	2b1e      	cmp	r3, #30
 800c7aa:	d872      	bhi.n	800c892 <UART_SetConfig+0x8b2>
 800c7ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b4 <UART_SetConfig+0x7d4>)
 800c7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b2:	bf00      	nop
 800c7b4:	0800c837 	.word	0x0800c837
 800c7b8:	0800c893 	.word	0x0800c893
 800c7bc:	0800c83f 	.word	0x0800c83f
 800c7c0:	0800c893 	.word	0x0800c893
 800c7c4:	0800c893 	.word	0x0800c893
 800c7c8:	0800c893 	.word	0x0800c893
 800c7cc:	0800c84f 	.word	0x0800c84f
 800c7d0:	0800c893 	.word	0x0800c893
 800c7d4:	0800c893 	.word	0x0800c893
 800c7d8:	0800c893 	.word	0x0800c893
 800c7dc:	0800c893 	.word	0x0800c893
 800c7e0:	0800c893 	.word	0x0800c893
 800c7e4:	0800c893 	.word	0x0800c893
 800c7e8:	0800c893 	.word	0x0800c893
 800c7ec:	0800c85f 	.word	0x0800c85f
 800c7f0:	0800c893 	.word	0x0800c893
 800c7f4:	0800c893 	.word	0x0800c893
 800c7f8:	0800c893 	.word	0x0800c893
 800c7fc:	0800c893 	.word	0x0800c893
 800c800:	0800c893 	.word	0x0800c893
 800c804:	0800c893 	.word	0x0800c893
 800c808:	0800c893 	.word	0x0800c893
 800c80c:	0800c893 	.word	0x0800c893
 800c810:	0800c893 	.word	0x0800c893
 800c814:	0800c893 	.word	0x0800c893
 800c818:	0800c893 	.word	0x0800c893
 800c81c:	0800c893 	.word	0x0800c893
 800c820:	0800c893 	.word	0x0800c893
 800c824:	0800c893 	.word	0x0800c893
 800c828:	0800c893 	.word	0x0800c893
 800c82c:	0800c885 	.word	0x0800c885
 800c830:	2b40      	cmp	r3, #64	@ 0x40
 800c832:	d02a      	beq.n	800c88a <UART_SetConfig+0x8aa>
 800c834:	e02d      	b.n	800c892 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c836:	f7fd fd49 	bl	800a2cc <HAL_RCCEx_GetD3PCLK1Freq>
 800c83a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c83c:	e02f      	b.n	800c89e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c83e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c842:	4618      	mov	r0, r3
 800c844:	f7fd fd58 	bl	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c84c:	e027      	b.n	800c89e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c84e:	f107 0318 	add.w	r3, r7, #24
 800c852:	4618      	mov	r0, r3
 800c854:	f7fd fea4 	bl	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c85c:	e01f      	b.n	800c89e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c85e:	4b21      	ldr	r3, [pc, #132]	@ (800c8e4 <UART_SetConfig+0x904>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 0320 	and.w	r3, r3, #32
 800c866:	2b00      	cmp	r3, #0
 800c868:	d009      	beq.n	800c87e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c86a:	4b1e      	ldr	r3, [pc, #120]	@ (800c8e4 <UART_SetConfig+0x904>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	08db      	lsrs	r3, r3, #3
 800c870:	f003 0303 	and.w	r3, r3, #3
 800c874:	4a1d      	ldr	r2, [pc, #116]	@ (800c8ec <UART_SetConfig+0x90c>)
 800c876:	fa22 f303 	lsr.w	r3, r2, r3
 800c87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c87c:	e00f      	b.n	800c89e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c87e:	4b1b      	ldr	r3, [pc, #108]	@ (800c8ec <UART_SetConfig+0x90c>)
 800c880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c882:	e00c      	b.n	800c89e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c884:	4b1a      	ldr	r3, [pc, #104]	@ (800c8f0 <UART_SetConfig+0x910>)
 800c886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c888:	e009      	b.n	800c89e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c88a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c890:	e005      	b.n	800c89e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c892:	2300      	movs	r3, #0
 800c894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c89c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f000 81ee 	beq.w	800cc82 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8aa:	4a12      	ldr	r2, [pc, #72]	@ (800c8f4 <UART_SetConfig+0x914>)
 800c8ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8b8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	685a      	ldr	r2, [r3, #4]
 800c8be:	4613      	mov	r3, r2
 800c8c0:	005b      	lsls	r3, r3, #1
 800c8c2:	4413      	add	r3, r2
 800c8c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d305      	bcc.n	800c8d6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d910      	bls.n	800c8f8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c8dc:	e1d1      	b.n	800cc82 <UART_SetConfig+0xca2>
 800c8de:	bf00      	nop
 800c8e0:	40011c00 	.word	0x40011c00
 800c8e4:	58024400 	.word	0x58024400
 800c8e8:	58000c00 	.word	0x58000c00
 800c8ec:	03d09000 	.word	0x03d09000
 800c8f0:	003d0900 	.word	0x003d0900
 800c8f4:	08013ff4 	.word	0x08013ff4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	60bb      	str	r3, [r7, #8]
 800c8fe:	60fa      	str	r2, [r7, #12]
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c904:	4ac0      	ldr	r2, [pc, #768]	@ (800cc08 <UART_SetConfig+0xc28>)
 800c906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	2200      	movs	r2, #0
 800c90e:	603b      	str	r3, [r7, #0]
 800c910:	607a      	str	r2, [r7, #4]
 800c912:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c916:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c91a:	f7f3 fd51 	bl	80003c0 <__aeabi_uldivmod>
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	4610      	mov	r0, r2
 800c924:	4619      	mov	r1, r3
 800c926:	f04f 0200 	mov.w	r2, #0
 800c92a:	f04f 0300 	mov.w	r3, #0
 800c92e:	020b      	lsls	r3, r1, #8
 800c930:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c934:	0202      	lsls	r2, r0, #8
 800c936:	6979      	ldr	r1, [r7, #20]
 800c938:	6849      	ldr	r1, [r1, #4]
 800c93a:	0849      	lsrs	r1, r1, #1
 800c93c:	2000      	movs	r0, #0
 800c93e:	460c      	mov	r4, r1
 800c940:	4605      	mov	r5, r0
 800c942:	eb12 0804 	adds.w	r8, r2, r4
 800c946:	eb43 0905 	adc.w	r9, r3, r5
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	469a      	mov	sl, r3
 800c952:	4693      	mov	fp, r2
 800c954:	4652      	mov	r2, sl
 800c956:	465b      	mov	r3, fp
 800c958:	4640      	mov	r0, r8
 800c95a:	4649      	mov	r1, r9
 800c95c:	f7f3 fd30 	bl	80003c0 <__aeabi_uldivmod>
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	4613      	mov	r3, r2
 800c966:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c96a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c96e:	d308      	bcc.n	800c982 <UART_SetConfig+0x9a2>
 800c970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c976:	d204      	bcs.n	800c982 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c97e:	60da      	str	r2, [r3, #12]
 800c980:	e17f      	b.n	800cc82 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c988:	e17b      	b.n	800cc82 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	69db      	ldr	r3, [r3, #28]
 800c98e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c992:	f040 80bd 	bne.w	800cb10 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c996:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c99a:	2b20      	cmp	r3, #32
 800c99c:	dc48      	bgt.n	800ca30 <UART_SetConfig+0xa50>
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	db7b      	blt.n	800ca9a <UART_SetConfig+0xaba>
 800c9a2:	2b20      	cmp	r3, #32
 800c9a4:	d879      	bhi.n	800ca9a <UART_SetConfig+0xaba>
 800c9a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c9ac <UART_SetConfig+0x9cc>)
 800c9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ac:	0800ca37 	.word	0x0800ca37
 800c9b0:	0800ca3f 	.word	0x0800ca3f
 800c9b4:	0800ca9b 	.word	0x0800ca9b
 800c9b8:	0800ca9b 	.word	0x0800ca9b
 800c9bc:	0800ca47 	.word	0x0800ca47
 800c9c0:	0800ca9b 	.word	0x0800ca9b
 800c9c4:	0800ca9b 	.word	0x0800ca9b
 800c9c8:	0800ca9b 	.word	0x0800ca9b
 800c9cc:	0800ca57 	.word	0x0800ca57
 800c9d0:	0800ca9b 	.word	0x0800ca9b
 800c9d4:	0800ca9b 	.word	0x0800ca9b
 800c9d8:	0800ca9b 	.word	0x0800ca9b
 800c9dc:	0800ca9b 	.word	0x0800ca9b
 800c9e0:	0800ca9b 	.word	0x0800ca9b
 800c9e4:	0800ca9b 	.word	0x0800ca9b
 800c9e8:	0800ca9b 	.word	0x0800ca9b
 800c9ec:	0800ca67 	.word	0x0800ca67
 800c9f0:	0800ca9b 	.word	0x0800ca9b
 800c9f4:	0800ca9b 	.word	0x0800ca9b
 800c9f8:	0800ca9b 	.word	0x0800ca9b
 800c9fc:	0800ca9b 	.word	0x0800ca9b
 800ca00:	0800ca9b 	.word	0x0800ca9b
 800ca04:	0800ca9b 	.word	0x0800ca9b
 800ca08:	0800ca9b 	.word	0x0800ca9b
 800ca0c:	0800ca9b 	.word	0x0800ca9b
 800ca10:	0800ca9b 	.word	0x0800ca9b
 800ca14:	0800ca9b 	.word	0x0800ca9b
 800ca18:	0800ca9b 	.word	0x0800ca9b
 800ca1c:	0800ca9b 	.word	0x0800ca9b
 800ca20:	0800ca9b 	.word	0x0800ca9b
 800ca24:	0800ca9b 	.word	0x0800ca9b
 800ca28:	0800ca9b 	.word	0x0800ca9b
 800ca2c:	0800ca8d 	.word	0x0800ca8d
 800ca30:	2b40      	cmp	r3, #64	@ 0x40
 800ca32:	d02e      	beq.n	800ca92 <UART_SetConfig+0xab2>
 800ca34:	e031      	b.n	800ca9a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca36:	f7fb fdab 	bl	8008590 <HAL_RCC_GetPCLK1Freq>
 800ca3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca3c:	e033      	b.n	800caa6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca3e:	f7fb fdbd 	bl	80085bc <HAL_RCC_GetPCLK2Freq>
 800ca42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca44:	e02f      	b.n	800caa6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fd fc54 	bl	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca54:	e027      	b.n	800caa6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca56:	f107 0318 	add.w	r3, r7, #24
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fd fda0 	bl	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca64:	e01f      	b.n	800caa6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca66:	4b69      	ldr	r3, [pc, #420]	@ (800cc0c <UART_SetConfig+0xc2c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f003 0320 	and.w	r3, r3, #32
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d009      	beq.n	800ca86 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca72:	4b66      	ldr	r3, [pc, #408]	@ (800cc0c <UART_SetConfig+0xc2c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	08db      	lsrs	r3, r3, #3
 800ca78:	f003 0303 	and.w	r3, r3, #3
 800ca7c:	4a64      	ldr	r2, [pc, #400]	@ (800cc10 <UART_SetConfig+0xc30>)
 800ca7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca84:	e00f      	b.n	800caa6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ca86:	4b62      	ldr	r3, [pc, #392]	@ (800cc10 <UART_SetConfig+0xc30>)
 800ca88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca8a:	e00c      	b.n	800caa6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca8c:	4b61      	ldr	r3, [pc, #388]	@ (800cc14 <UART_SetConfig+0xc34>)
 800ca8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca90:	e009      	b.n	800caa6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca98:	e005      	b.n	800caa6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800caa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800caa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f000 80ea 	beq.w	800cc82 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab2:	4a55      	ldr	r2, [pc, #340]	@ (800cc08 <UART_SetConfig+0xc28>)
 800cab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cab8:	461a      	mov	r2, r3
 800caba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cabc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cac0:	005a      	lsls	r2, r3, #1
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	085b      	lsrs	r3, r3, #1
 800cac8:	441a      	add	r2, r3
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad6:	2b0f      	cmp	r3, #15
 800cad8:	d916      	bls.n	800cb08 <UART_SetConfig+0xb28>
 800cada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cadc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cae0:	d212      	bcs.n	800cb08 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	f023 030f 	bic.w	r3, r3, #15
 800caea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800caec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caee:	085b      	lsrs	r3, r3, #1
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	f003 0307 	and.w	r3, r3, #7
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cafa:	4313      	orrs	r3, r2
 800cafc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cb04:	60da      	str	r2, [r3, #12]
 800cb06:	e0bc      	b.n	800cc82 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cb0e:	e0b8      	b.n	800cc82 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb10:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cb14:	2b20      	cmp	r3, #32
 800cb16:	dc4b      	bgt.n	800cbb0 <UART_SetConfig+0xbd0>
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f2c0 8087 	blt.w	800cc2c <UART_SetConfig+0xc4c>
 800cb1e:	2b20      	cmp	r3, #32
 800cb20:	f200 8084 	bhi.w	800cc2c <UART_SetConfig+0xc4c>
 800cb24:	a201      	add	r2, pc, #4	@ (adr r2, 800cb2c <UART_SetConfig+0xb4c>)
 800cb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2a:	bf00      	nop
 800cb2c:	0800cbb7 	.word	0x0800cbb7
 800cb30:	0800cbbf 	.word	0x0800cbbf
 800cb34:	0800cc2d 	.word	0x0800cc2d
 800cb38:	0800cc2d 	.word	0x0800cc2d
 800cb3c:	0800cbc7 	.word	0x0800cbc7
 800cb40:	0800cc2d 	.word	0x0800cc2d
 800cb44:	0800cc2d 	.word	0x0800cc2d
 800cb48:	0800cc2d 	.word	0x0800cc2d
 800cb4c:	0800cbd7 	.word	0x0800cbd7
 800cb50:	0800cc2d 	.word	0x0800cc2d
 800cb54:	0800cc2d 	.word	0x0800cc2d
 800cb58:	0800cc2d 	.word	0x0800cc2d
 800cb5c:	0800cc2d 	.word	0x0800cc2d
 800cb60:	0800cc2d 	.word	0x0800cc2d
 800cb64:	0800cc2d 	.word	0x0800cc2d
 800cb68:	0800cc2d 	.word	0x0800cc2d
 800cb6c:	0800cbe7 	.word	0x0800cbe7
 800cb70:	0800cc2d 	.word	0x0800cc2d
 800cb74:	0800cc2d 	.word	0x0800cc2d
 800cb78:	0800cc2d 	.word	0x0800cc2d
 800cb7c:	0800cc2d 	.word	0x0800cc2d
 800cb80:	0800cc2d 	.word	0x0800cc2d
 800cb84:	0800cc2d 	.word	0x0800cc2d
 800cb88:	0800cc2d 	.word	0x0800cc2d
 800cb8c:	0800cc2d 	.word	0x0800cc2d
 800cb90:	0800cc2d 	.word	0x0800cc2d
 800cb94:	0800cc2d 	.word	0x0800cc2d
 800cb98:	0800cc2d 	.word	0x0800cc2d
 800cb9c:	0800cc2d 	.word	0x0800cc2d
 800cba0:	0800cc2d 	.word	0x0800cc2d
 800cba4:	0800cc2d 	.word	0x0800cc2d
 800cba8:	0800cc2d 	.word	0x0800cc2d
 800cbac:	0800cc1f 	.word	0x0800cc1f
 800cbb0:	2b40      	cmp	r3, #64	@ 0x40
 800cbb2:	d037      	beq.n	800cc24 <UART_SetConfig+0xc44>
 800cbb4:	e03a      	b.n	800cc2c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbb6:	f7fb fceb 	bl	8008590 <HAL_RCC_GetPCLK1Freq>
 800cbba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cbbc:	e03c      	b.n	800cc38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbbe:	f7fb fcfd 	bl	80085bc <HAL_RCC_GetPCLK2Freq>
 800cbc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cbc4:	e038      	b.n	800cc38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fd fb94 	bl	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbd4:	e030      	b.n	800cc38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbd6:	f107 0318 	add.w	r3, r7, #24
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fd fce0 	bl	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbe4:	e028      	b.n	800cc38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbe6:	4b09      	ldr	r3, [pc, #36]	@ (800cc0c <UART_SetConfig+0xc2c>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f003 0320 	and.w	r3, r3, #32
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d012      	beq.n	800cc18 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbf2:	4b06      	ldr	r3, [pc, #24]	@ (800cc0c <UART_SetConfig+0xc2c>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	08db      	lsrs	r3, r3, #3
 800cbf8:	f003 0303 	and.w	r3, r3, #3
 800cbfc:	4a04      	ldr	r2, [pc, #16]	@ (800cc10 <UART_SetConfig+0xc30>)
 800cbfe:	fa22 f303 	lsr.w	r3, r2, r3
 800cc02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc04:	e018      	b.n	800cc38 <UART_SetConfig+0xc58>
 800cc06:	bf00      	nop
 800cc08:	08013ff4 	.word	0x08013ff4
 800cc0c:	58024400 	.word	0x58024400
 800cc10:	03d09000 	.word	0x03d09000
 800cc14:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cc18:	4b24      	ldr	r3, [pc, #144]	@ (800ccac <UART_SetConfig+0xccc>)
 800cc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc1c:	e00c      	b.n	800cc38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc1e:	4b24      	ldr	r3, [pc, #144]	@ (800ccb0 <UART_SetConfig+0xcd0>)
 800cc20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc22:	e009      	b.n	800cc38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc2a:	e005      	b.n	800cc38 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cc36:	bf00      	nop
    }

    if (pclk != 0U)
 800cc38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d021      	beq.n	800cc82 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc42:	4a1c      	ldr	r2, [pc, #112]	@ (800ccb4 <UART_SetConfig+0xcd4>)
 800cc44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc48:	461a      	mov	r2, r3
 800cc4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc4c:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	085b      	lsrs	r3, r3, #1
 800cc56:	441a      	add	r2, r3
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc60:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc64:	2b0f      	cmp	r3, #15
 800cc66:	d909      	bls.n	800cc7c <UART_SetConfig+0xc9c>
 800cc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc6e:	d205      	bcs.n	800cc7c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc72:	b29a      	uxth	r2, r3
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	60da      	str	r2, [r3, #12]
 800cc7a:	e002      	b.n	800cc82 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	2201      	movs	r2, #1
 800cc86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	2200      	movs	r2, #0
 800cc96:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cc9e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3748      	adds	r7, #72	@ 0x48
 800cca6:	46bd      	mov	sp, r7
 800cca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ccac:	03d09000 	.word	0x03d09000
 800ccb0:	003d0900 	.word	0x003d0900
 800ccb4:	08013ff4 	.word	0x08013ff4

0800ccb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc4:	f003 0308 	and.w	r3, r3, #8
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00a      	beq.n	800cce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	430a      	orrs	r2, r1
 800cce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cce6:	f003 0301 	and.w	r3, r3, #1
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00a      	beq.n	800cd04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	430a      	orrs	r2, r1
 800cd02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd08:	f003 0302 	and.w	r3, r3, #2
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d00a      	beq.n	800cd26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	430a      	orrs	r2, r1
 800cd24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd2a:	f003 0304 	and.w	r3, r3, #4
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00a      	beq.n	800cd48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	430a      	orrs	r2, r1
 800cd46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd4c:	f003 0310 	and.w	r3, r3, #16
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00a      	beq.n	800cd6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	430a      	orrs	r2, r1
 800cd68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd6e:	f003 0320 	and.w	r3, r3, #32
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00a      	beq.n	800cd8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	430a      	orrs	r2, r1
 800cd8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d01a      	beq.n	800cdce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	430a      	orrs	r2, r1
 800cdac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cdb6:	d10a      	bne.n	800cdce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	430a      	orrs	r2, r1
 800cdcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00a      	beq.n	800cdf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	430a      	orrs	r2, r1
 800cdee:	605a      	str	r2, [r3, #4]
  }
}
 800cdf0:	bf00      	nop
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr

0800cdfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b098      	sub	sp, #96	@ 0x60
 800ce00:	af02      	add	r7, sp, #8
 800ce02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce0c:	f7f5 fb5a 	bl	80024c4 <HAL_GetTick>
 800ce10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f003 0308 	and.w	r3, r3, #8
 800ce1c:	2b08      	cmp	r3, #8
 800ce1e:	d12f      	bne.n	800ce80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce24:	9300      	str	r3, [sp, #0]
 800ce26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f88e 	bl	800cf50 <UART_WaitOnFlagUntilTimeout>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d022      	beq.n	800ce80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce42:	e853 3f00 	ldrex	r3, [r3]
 800ce46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ce48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce4e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	461a      	mov	r2, r3
 800ce56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce58:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce60:	e841 2300 	strex	r3, r2, [r1]
 800ce64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1e6      	bne.n	800ce3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2220      	movs	r2, #32
 800ce70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	e063      	b.n	800cf48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f003 0304 	and.w	r3, r3, #4
 800ce8a:	2b04      	cmp	r3, #4
 800ce8c:	d149      	bne.n	800cf22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce92:	9300      	str	r3, [sp, #0]
 800ce94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce96:	2200      	movs	r2, #0
 800ce98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f857 	bl	800cf50 <UART_WaitOnFlagUntilTimeout>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d03c      	beq.n	800cf22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb0:	e853 3f00 	ldrex	r3, [r3]
 800ceb4:	623b      	str	r3, [r7, #32]
   return(result);
 800ceb6:	6a3b      	ldr	r3, [r7, #32]
 800ceb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cec6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cec8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cece:	e841 2300 	strex	r3, r2, [r1]
 800ced2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ced4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1e6      	bne.n	800cea8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	3308      	adds	r3, #8
 800cee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	e853 3f00 	ldrex	r3, [r3]
 800cee8:	60fb      	str	r3, [r7, #12]
   return(result);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f023 0301 	bic.w	r3, r3, #1
 800cef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	3308      	adds	r3, #8
 800cef8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cefa:	61fa      	str	r2, [r7, #28]
 800cefc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefe:	69b9      	ldr	r1, [r7, #24]
 800cf00:	69fa      	ldr	r2, [r7, #28]
 800cf02:	e841 2300 	strex	r3, r2, [r1]
 800cf06:	617b      	str	r3, [r7, #20]
   return(result);
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1e5      	bne.n	800ceda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2220      	movs	r2, #32
 800cf12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf1e:	2303      	movs	r3, #3
 800cf20:	e012      	b.n	800cf48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2220      	movs	r2, #32
 800cf26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2220      	movs	r2, #32
 800cf2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf46:	2300      	movs	r3, #0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3758      	adds	r7, #88	@ 0x58
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	603b      	str	r3, [r7, #0]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf60:	e04f      	b.n	800d002 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf68:	d04b      	beq.n	800d002 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf6a:	f7f5 faab 	bl	80024c4 <HAL_GetTick>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	69ba      	ldr	r2, [r7, #24]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d302      	bcc.n	800cf80 <UART_WaitOnFlagUntilTimeout+0x30>
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf80:	2303      	movs	r3, #3
 800cf82:	e04e      	b.n	800d022 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f003 0304 	and.w	r3, r3, #4
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d037      	beq.n	800d002 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	2b80      	cmp	r3, #128	@ 0x80
 800cf96:	d034      	beq.n	800d002 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	2b40      	cmp	r3, #64	@ 0x40
 800cf9c:	d031      	beq.n	800d002 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	69db      	ldr	r3, [r3, #28]
 800cfa4:	f003 0308 	and.w	r3, r3, #8
 800cfa8:	2b08      	cmp	r3, #8
 800cfaa:	d110      	bne.n	800cfce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2208      	movs	r2, #8
 800cfb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f000 f839 	bl	800d02c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2208      	movs	r2, #8
 800cfbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e029      	b.n	800d022 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	69db      	ldr	r3, [r3, #28]
 800cfd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cfdc:	d111      	bne.n	800d002 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cfe6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f000 f81f 	bl	800d02c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2220      	movs	r2, #32
 800cff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2200      	movs	r2, #0
 800cffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cffe:	2303      	movs	r3, #3
 800d000:	e00f      	b.n	800d022 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	69da      	ldr	r2, [r3, #28]
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	4013      	ands	r3, r2
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	429a      	cmp	r2, r3
 800d010:	bf0c      	ite	eq
 800d012:	2301      	moveq	r3, #1
 800d014:	2300      	movne	r3, #0
 800d016:	b2db      	uxtb	r3, r3
 800d018:	461a      	mov	r2, r3
 800d01a:	79fb      	ldrb	r3, [r7, #7]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d0a0      	beq.n	800cf62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
	...

0800d02c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b095      	sub	sp, #84	@ 0x54
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d03c:	e853 3f00 	ldrex	r3, [r3]
 800d040:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d048:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	461a      	mov	r2, r3
 800d050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d052:	643b      	str	r3, [r7, #64]	@ 0x40
 800d054:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d056:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d058:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d05a:	e841 2300 	strex	r3, r2, [r1]
 800d05e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1e6      	bne.n	800d034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3308      	adds	r3, #8
 800d06c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d06e:	6a3b      	ldr	r3, [r7, #32]
 800d070:	e853 3f00 	ldrex	r3, [r3]
 800d074:	61fb      	str	r3, [r7, #28]
   return(result);
 800d076:	69fa      	ldr	r2, [r7, #28]
 800d078:	4b1e      	ldr	r3, [pc, #120]	@ (800d0f4 <UART_EndRxTransfer+0xc8>)
 800d07a:	4013      	ands	r3, r2
 800d07c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	3308      	adds	r3, #8
 800d084:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d086:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d088:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d08a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d08c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d08e:	e841 2300 	strex	r3, r2, [r1]
 800d092:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d096:	2b00      	cmp	r3, #0
 800d098:	d1e5      	bne.n	800d066 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d118      	bne.n	800d0d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	e853 3f00 	ldrex	r3, [r3]
 800d0ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	f023 0310 	bic.w	r3, r3, #16
 800d0b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0c0:	61bb      	str	r3, [r7, #24]
 800d0c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c4:	6979      	ldr	r1, [r7, #20]
 800d0c6:	69ba      	ldr	r2, [r7, #24]
 800d0c8:	e841 2300 	strex	r3, r2, [r1]
 800d0cc:	613b      	str	r3, [r7, #16]
   return(result);
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d1e6      	bne.n	800d0a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2220      	movs	r2, #32
 800d0d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d0e8:	bf00      	nop
 800d0ea:	3754      	adds	r7, #84	@ 0x54
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	effffffe 	.word	0xeffffffe

0800d0f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d106:	2b01      	cmp	r3, #1
 800d108:	d101      	bne.n	800d10e <HAL_UARTEx_DisableFifoMode+0x16>
 800d10a:	2302      	movs	r3, #2
 800d10c:	e027      	b.n	800d15e <HAL_UARTEx_DisableFifoMode+0x66>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2201      	movs	r2, #1
 800d112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2224      	movs	r2, #36	@ 0x24
 800d11a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f022 0201 	bic.w	r2, r2, #1
 800d134:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d13c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2220      	movs	r2, #32
 800d150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3714      	adds	r7, #20
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr

0800d16a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b084      	sub	sp, #16
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
 800d172:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d101      	bne.n	800d182 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d17e:	2302      	movs	r3, #2
 800d180:	e02d      	b.n	800d1de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2201      	movs	r2, #1
 800d186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2224      	movs	r2, #36	@ 0x24
 800d18e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f022 0201 	bic.w	r2, r2, #1
 800d1a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	430a      	orrs	r2, r1
 800d1bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f850 	bl	800d264 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2220      	movs	r2, #32
 800d1d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3710      	adds	r7, #16
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b084      	sub	sp, #16
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d101      	bne.n	800d1fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d1fa:	2302      	movs	r3, #2
 800d1fc:	e02d      	b.n	800d25a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2224      	movs	r2, #36	@ 0x24
 800d20a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f022 0201 	bic.w	r2, r2, #1
 800d224:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	683a      	ldr	r2, [r7, #0]
 800d236:	430a      	orrs	r2, r1
 800d238:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 f812 	bl	800d264 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2220      	movs	r2, #32
 800d24c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
	...

0800d264 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d270:	2b00      	cmp	r3, #0
 800d272:	d108      	bne.n	800d286 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2201      	movs	r2, #1
 800d278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2201      	movs	r2, #1
 800d280:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d284:	e031      	b.n	800d2ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d286:	2310      	movs	r3, #16
 800d288:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d28a:	2310      	movs	r3, #16
 800d28c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	0e5b      	lsrs	r3, r3, #25
 800d296:	b2db      	uxtb	r3, r3
 800d298:	f003 0307 	and.w	r3, r3, #7
 800d29c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	0f5b      	lsrs	r3, r3, #29
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	f003 0307 	and.w	r3, r3, #7
 800d2ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2ae:	7bbb      	ldrb	r3, [r7, #14]
 800d2b0:	7b3a      	ldrb	r2, [r7, #12]
 800d2b2:	4911      	ldr	r1, [pc, #68]	@ (800d2f8 <UARTEx_SetNbDataToProcess+0x94>)
 800d2b4:	5c8a      	ldrb	r2, [r1, r2]
 800d2b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d2ba:	7b3a      	ldrb	r2, [r7, #12]
 800d2bc:	490f      	ldr	r1, [pc, #60]	@ (800d2fc <UARTEx_SetNbDataToProcess+0x98>)
 800d2be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2cc:	7bfb      	ldrb	r3, [r7, #15]
 800d2ce:	7b7a      	ldrb	r2, [r7, #13]
 800d2d0:	4909      	ldr	r1, [pc, #36]	@ (800d2f8 <UARTEx_SetNbDataToProcess+0x94>)
 800d2d2:	5c8a      	ldrb	r2, [r1, r2]
 800d2d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d2d8:	7b7a      	ldrb	r2, [r7, #13]
 800d2da:	4908      	ldr	r1, [pc, #32]	@ (800d2fc <UARTEx_SetNbDataToProcess+0x98>)
 800d2dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2de:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d2ea:	bf00      	nop
 800d2ec:	3714      	adds	r7, #20
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	0801400c 	.word	0x0801400c
 800d2fc:	08014014 	.word	0x08014014

0800d300 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d300:	b084      	sub	sp, #16
 800d302:	b580      	push	{r7, lr}
 800d304:	b084      	sub	sp, #16
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	f107 001c 	add.w	r0, r7, #28
 800d30e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d312:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d316:	2b01      	cmp	r3, #1
 800d318:	d121      	bne.n	800d35e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d31e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	68da      	ldr	r2, [r3, #12]
 800d32a:	4b2c      	ldr	r3, [pc, #176]	@ (800d3dc <USB_CoreInit+0xdc>)
 800d32c:	4013      	ands	r3, r2
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d33e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d342:	2b01      	cmp	r3, #1
 800d344:	d105      	bne.n	800d352 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f001 faf6 	bl	800e944 <USB_CoreReset>
 800d358:	4603      	mov	r3, r0
 800d35a:	73fb      	strb	r3, [r7, #15]
 800d35c:	e01b      	b.n	800d396 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f001 faea 	bl	800e944 <USB_CoreReset>
 800d370:	4603      	mov	r3, r0
 800d372:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d374:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d106      	bne.n	800d38a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d380:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	639a      	str	r2, [r3, #56]	@ 0x38
 800d388:	e005      	b.n	800d396 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d38e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d396:	7fbb      	ldrb	r3, [r7, #30]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d116      	bne.n	800d3ca <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3a0:	b29a      	uxth	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d3e0 <USB_CoreInit+0xe0>)
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	f043 0206 	orr.w	r2, r3, #6
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	f043 0220 	orr.w	r2, r3, #32
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3d6:	b004      	add	sp, #16
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	ffbdffbf 	.word	0xffbdffbf
 800d3e0:	03ee0000 	.word	0x03ee0000

0800d3e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b087      	sub	sp, #28
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d3f2:	79fb      	ldrb	r3, [r7, #7]
 800d3f4:	2b02      	cmp	r3, #2
 800d3f6:	d165      	bne.n	800d4c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	4a41      	ldr	r2, [pc, #260]	@ (800d500 <USB_SetTurnaroundTime+0x11c>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d906      	bls.n	800d40e <USB_SetTurnaroundTime+0x2a>
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	4a40      	ldr	r2, [pc, #256]	@ (800d504 <USB_SetTurnaroundTime+0x120>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d202      	bcs.n	800d40e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d408:	230f      	movs	r3, #15
 800d40a:	617b      	str	r3, [r7, #20]
 800d40c:	e062      	b.n	800d4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	4a3c      	ldr	r2, [pc, #240]	@ (800d504 <USB_SetTurnaroundTime+0x120>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d306      	bcc.n	800d424 <USB_SetTurnaroundTime+0x40>
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	4a3b      	ldr	r2, [pc, #236]	@ (800d508 <USB_SetTurnaroundTime+0x124>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d202      	bcs.n	800d424 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d41e:	230e      	movs	r3, #14
 800d420:	617b      	str	r3, [r7, #20]
 800d422:	e057      	b.n	800d4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	4a38      	ldr	r2, [pc, #224]	@ (800d508 <USB_SetTurnaroundTime+0x124>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d306      	bcc.n	800d43a <USB_SetTurnaroundTime+0x56>
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	4a37      	ldr	r2, [pc, #220]	@ (800d50c <USB_SetTurnaroundTime+0x128>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d202      	bcs.n	800d43a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d434:	230d      	movs	r3, #13
 800d436:	617b      	str	r3, [r7, #20]
 800d438:	e04c      	b.n	800d4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	4a33      	ldr	r2, [pc, #204]	@ (800d50c <USB_SetTurnaroundTime+0x128>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d306      	bcc.n	800d450 <USB_SetTurnaroundTime+0x6c>
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	4a32      	ldr	r2, [pc, #200]	@ (800d510 <USB_SetTurnaroundTime+0x12c>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d802      	bhi.n	800d450 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d44a:	230c      	movs	r3, #12
 800d44c:	617b      	str	r3, [r7, #20]
 800d44e:	e041      	b.n	800d4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	4a2f      	ldr	r2, [pc, #188]	@ (800d510 <USB_SetTurnaroundTime+0x12c>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d906      	bls.n	800d466 <USB_SetTurnaroundTime+0x82>
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	4a2e      	ldr	r2, [pc, #184]	@ (800d514 <USB_SetTurnaroundTime+0x130>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d802      	bhi.n	800d466 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d460:	230b      	movs	r3, #11
 800d462:	617b      	str	r3, [r7, #20]
 800d464:	e036      	b.n	800d4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	4a2a      	ldr	r2, [pc, #168]	@ (800d514 <USB_SetTurnaroundTime+0x130>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d906      	bls.n	800d47c <USB_SetTurnaroundTime+0x98>
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	4a29      	ldr	r2, [pc, #164]	@ (800d518 <USB_SetTurnaroundTime+0x134>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d802      	bhi.n	800d47c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d476:	230a      	movs	r3, #10
 800d478:	617b      	str	r3, [r7, #20]
 800d47a:	e02b      	b.n	800d4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	4a26      	ldr	r2, [pc, #152]	@ (800d518 <USB_SetTurnaroundTime+0x134>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d906      	bls.n	800d492 <USB_SetTurnaroundTime+0xae>
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	4a25      	ldr	r2, [pc, #148]	@ (800d51c <USB_SetTurnaroundTime+0x138>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d202      	bcs.n	800d492 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d48c:	2309      	movs	r3, #9
 800d48e:	617b      	str	r3, [r7, #20]
 800d490:	e020      	b.n	800d4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	4a21      	ldr	r2, [pc, #132]	@ (800d51c <USB_SetTurnaroundTime+0x138>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d306      	bcc.n	800d4a8 <USB_SetTurnaroundTime+0xc4>
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	4a20      	ldr	r2, [pc, #128]	@ (800d520 <USB_SetTurnaroundTime+0x13c>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d802      	bhi.n	800d4a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d4a2:	2308      	movs	r3, #8
 800d4a4:	617b      	str	r3, [r7, #20]
 800d4a6:	e015      	b.n	800d4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	4a1d      	ldr	r2, [pc, #116]	@ (800d520 <USB_SetTurnaroundTime+0x13c>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d906      	bls.n	800d4be <USB_SetTurnaroundTime+0xda>
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	4a1c      	ldr	r2, [pc, #112]	@ (800d524 <USB_SetTurnaroundTime+0x140>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d202      	bcs.n	800d4be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d4b8:	2307      	movs	r3, #7
 800d4ba:	617b      	str	r3, [r7, #20]
 800d4bc:	e00a      	b.n	800d4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d4be:	2306      	movs	r3, #6
 800d4c0:	617b      	str	r3, [r7, #20]
 800d4c2:	e007      	b.n	800d4d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d4c4:	79fb      	ldrb	r3, [r7, #7]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d102      	bne.n	800d4d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d4ca:	2309      	movs	r3, #9
 800d4cc:	617b      	str	r3, [r7, #20]
 800d4ce:	e001      	b.n	800d4d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d4d0:	2309      	movs	r3, #9
 800d4d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	68da      	ldr	r2, [r3, #12]
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	029b      	lsls	r3, r3, #10
 800d4e8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d4ec:	431a      	orrs	r2, r3
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d4f2:	2300      	movs	r3, #0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	371c      	adds	r7, #28
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	00d8acbf 	.word	0x00d8acbf
 800d504:	00e4e1c0 	.word	0x00e4e1c0
 800d508:	00f42400 	.word	0x00f42400
 800d50c:	01067380 	.word	0x01067380
 800d510:	011a499f 	.word	0x011a499f
 800d514:	01312cff 	.word	0x01312cff
 800d518:	014ca43f 	.word	0x014ca43f
 800d51c:	016e3600 	.word	0x016e3600
 800d520:	01a6ab1f 	.word	0x01a6ab1f
 800d524:	01e84800 	.word	0x01e84800

0800d528 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	f043 0201 	orr.w	r2, r3, #1
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d54a:	b480      	push	{r7}
 800d54c:	b083      	sub	sp, #12
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	f023 0201 	bic.w	r2, r3, #1
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d55e:	2300      	movs	r3, #0
}
 800d560:	4618      	mov	r0, r3
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d578:	2300      	movs	r3, #0
 800d57a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d588:	78fb      	ldrb	r3, [r7, #3]
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d115      	bne.n	800d5ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d59a:	200a      	movs	r0, #10
 800d59c:	f7f4 ff9e 	bl	80024dc <HAL_Delay>
      ms += 10U;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	330a      	adds	r3, #10
 800d5a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f001 f93b 	bl	800e822 <USB_GetMode>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d01e      	beq.n	800d5f0 <USB_SetCurrentMode+0x84>
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2bc7      	cmp	r3, #199	@ 0xc7
 800d5b6:	d9f0      	bls.n	800d59a <USB_SetCurrentMode+0x2e>
 800d5b8:	e01a      	b.n	800d5f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d5ba:	78fb      	ldrb	r3, [r7, #3]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d115      	bne.n	800d5ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d5cc:	200a      	movs	r0, #10
 800d5ce:	f7f4 ff85 	bl	80024dc <HAL_Delay>
      ms += 10U;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	330a      	adds	r3, #10
 800d5d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f001 f922 	bl	800e822 <USB_GetMode>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d005      	beq.n	800d5f0 <USB_SetCurrentMode+0x84>
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2bc7      	cmp	r3, #199	@ 0xc7
 800d5e8:	d9f0      	bls.n	800d5cc <USB_SetCurrentMode+0x60>
 800d5ea:	e001      	b.n	800d5f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e005      	b.n	800d5fc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2bc8      	cmp	r3, #200	@ 0xc8
 800d5f4:	d101      	bne.n	800d5fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e000      	b.n	800d5fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d604:	b084      	sub	sp, #16
 800d606:	b580      	push	{r7, lr}
 800d608:	b086      	sub	sp, #24
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
 800d60e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d61e:	2300      	movs	r3, #0
 800d620:	613b      	str	r3, [r7, #16]
 800d622:	e009      	b.n	800d638 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	3340      	adds	r3, #64	@ 0x40
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	4413      	add	r3, r2
 800d62e:	2200      	movs	r2, #0
 800d630:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	3301      	adds	r3, #1
 800d636:	613b      	str	r3, [r7, #16]
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	2b0e      	cmp	r3, #14
 800d63c:	d9f2      	bls.n	800d624 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d63e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d642:	2b00      	cmp	r3, #0
 800d644:	d11c      	bne.n	800d680 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d654:	f043 0302 	orr.w	r3, r3, #2
 800d658:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d65e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	601a      	str	r2, [r3, #0]
 800d67e:	e005      	b.n	800d68c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d684:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d692:	461a      	mov	r2, r3
 800d694:	2300      	movs	r3, #0
 800d696:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d698:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d10d      	bne.n	800d6bc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d104      	bne.n	800d6b2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f968 	bl	800d980 <USB_SetDevSpeed>
 800d6b0:	e008      	b.n	800d6c4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d6b2:	2101      	movs	r1, #1
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 f963 	bl	800d980 <USB_SetDevSpeed>
 800d6ba:	e003      	b.n	800d6c4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d6bc:	2103      	movs	r1, #3
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f95e 	bl	800d980 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d6c4:	2110      	movs	r1, #16
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f8fa 	bl	800d8c0 <USB_FlushTxFifo>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 f924 	bl	800d924 <USB_FlushRxFifo>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d704:	461a      	mov	r2, r3
 800d706:	2300      	movs	r3, #0
 800d708:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d70a:	2300      	movs	r3, #0
 800d70c:	613b      	str	r3, [r7, #16]
 800d70e:	e043      	b.n	800d798 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	015a      	lsls	r2, r3, #5
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	4413      	add	r3, r2
 800d718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d722:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d726:	d118      	bne.n	800d75a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10a      	bne.n	800d744 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	015a      	lsls	r2, r3, #5
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	4413      	add	r3, r2
 800d736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d73a:	461a      	mov	r2, r3
 800d73c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d740:	6013      	str	r3, [r2, #0]
 800d742:	e013      	b.n	800d76c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	015a      	lsls	r2, r3, #5
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	4413      	add	r3, r2
 800d74c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d750:	461a      	mov	r2, r3
 800d752:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d756:	6013      	str	r3, [r2, #0]
 800d758:	e008      	b.n	800d76c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	015a      	lsls	r2, r3, #5
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	4413      	add	r3, r2
 800d762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d766:	461a      	mov	r2, r3
 800d768:	2300      	movs	r3, #0
 800d76a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	015a      	lsls	r2, r3, #5
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	4413      	add	r3, r2
 800d774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d778:	461a      	mov	r2, r3
 800d77a:	2300      	movs	r3, #0
 800d77c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	015a      	lsls	r2, r3, #5
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	4413      	add	r3, r2
 800d786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d78a:	461a      	mov	r2, r3
 800d78c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d790:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	3301      	adds	r3, #1
 800d796:	613b      	str	r3, [r7, #16]
 800d798:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d79c:	461a      	mov	r2, r3
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d3b5      	bcc.n	800d710 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	613b      	str	r3, [r7, #16]
 800d7a8:	e043      	b.n	800d832 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	015a      	lsls	r2, r3, #5
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d7bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d7c0:	d118      	bne.n	800d7f4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10a      	bne.n	800d7de <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	015a      	lsls	r2, r3, #5
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d7da:	6013      	str	r3, [r2, #0]
 800d7dc:	e013      	b.n	800d806 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	015a      	lsls	r2, r3, #5
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d7f0:	6013      	str	r3, [r2, #0]
 800d7f2:	e008      	b.n	800d806 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	015a      	lsls	r2, r3, #5
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d800:	461a      	mov	r2, r3
 800d802:	2300      	movs	r3, #0
 800d804:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	015a      	lsls	r2, r3, #5
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	4413      	add	r3, r2
 800d80e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d812:	461a      	mov	r2, r3
 800d814:	2300      	movs	r3, #0
 800d816:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	015a      	lsls	r2, r3, #5
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	4413      	add	r3, r2
 800d820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d824:	461a      	mov	r2, r3
 800d826:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d82a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	3301      	adds	r3, #1
 800d830:	613b      	str	r3, [r7, #16]
 800d832:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d836:	461a      	mov	r2, r3
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d3b5      	bcc.n	800d7aa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d84c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d850:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d85e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d860:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d864:	2b00      	cmp	r3, #0
 800d866:	d105      	bne.n	800d874 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	f043 0210 	orr.w	r2, r3, #16
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	699a      	ldr	r2, [r3, #24]
 800d878:	4b0f      	ldr	r3, [pc, #60]	@ (800d8b8 <USB_DevInit+0x2b4>)
 800d87a:	4313      	orrs	r3, r2
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d880:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d884:	2b00      	cmp	r3, #0
 800d886:	d005      	beq.n	800d894 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	699b      	ldr	r3, [r3, #24]
 800d88c:	f043 0208 	orr.w	r2, r3, #8
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d894:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d105      	bne.n	800d8a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	699a      	ldr	r2, [r3, #24]
 800d8a0:	4b06      	ldr	r3, [pc, #24]	@ (800d8bc <USB_DevInit+0x2b8>)
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d8a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3718      	adds	r7, #24
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d8b4:	b004      	add	sp, #16
 800d8b6:	4770      	bx	lr
 800d8b8:	803c3800 	.word	0x803c3800
 800d8bc:	40000004 	.word	0x40000004

0800d8c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d8da:	d901      	bls.n	800d8e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d8dc:	2303      	movs	r3, #3
 800d8de:	e01b      	b.n	800d918 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	691b      	ldr	r3, [r3, #16]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	daf2      	bge.n	800d8ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	019b      	lsls	r3, r3, #6
 800d8f0:	f043 0220 	orr.w	r2, r3, #32
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d904:	d901      	bls.n	800d90a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d906:	2303      	movs	r3, #3
 800d908:	e006      	b.n	800d918 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	f003 0320 	and.w	r3, r3, #32
 800d912:	2b20      	cmp	r3, #32
 800d914:	d0f0      	beq.n	800d8f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3714      	adds	r7, #20
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d92c:	2300      	movs	r3, #0
 800d92e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	3301      	adds	r3, #1
 800d934:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d93c:	d901      	bls.n	800d942 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d93e:	2303      	movs	r3, #3
 800d940:	e018      	b.n	800d974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	691b      	ldr	r3, [r3, #16]
 800d946:	2b00      	cmp	r3, #0
 800d948:	daf2      	bge.n	800d930 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d94a:	2300      	movs	r3, #0
 800d94c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2210      	movs	r2, #16
 800d952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	3301      	adds	r3, #1
 800d958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d960:	d901      	bls.n	800d966 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d962:	2303      	movs	r3, #3
 800d964:	e006      	b.n	800d974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	691b      	ldr	r3, [r3, #16]
 800d96a:	f003 0310 	and.w	r3, r3, #16
 800d96e:	2b10      	cmp	r3, #16
 800d970:	d0f0      	beq.n	800d954 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	3714      	adds	r7, #20
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	460b      	mov	r3, r1
 800d98a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	68f9      	ldr	r1, [r7, #12]
 800d99c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3714      	adds	r7, #20
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr

0800d9b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800d9b2:	b480      	push	{r7}
 800d9b4:	b087      	sub	sp, #28
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	f003 0306 	and.w	r3, r3, #6
 800d9ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d102      	bne.n	800d9d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	75fb      	strb	r3, [r7, #23]
 800d9d6:	e00a      	b.n	800d9ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d002      	beq.n	800d9e4 <USB_GetDevSpeed+0x32>
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2b06      	cmp	r3, #6
 800d9e2:	d102      	bne.n	800d9ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d9e4:	2302      	movs	r3, #2
 800d9e6:	75fb      	strb	r3, [r7, #23]
 800d9e8:	e001      	b.n	800d9ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d9ea:	230f      	movs	r3, #15
 800d9ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	371c      	adds	r7, #28
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	785b      	ldrb	r3, [r3, #1]
 800da14:	2b01      	cmp	r3, #1
 800da16:	d139      	bne.n	800da8c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da1e:	69da      	ldr	r2, [r3, #28]
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	f003 030f 	and.w	r3, r3, #15
 800da28:	2101      	movs	r1, #1
 800da2a:	fa01 f303 	lsl.w	r3, r1, r3
 800da2e:	b29b      	uxth	r3, r3
 800da30:	68f9      	ldr	r1, [r7, #12]
 800da32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800da36:	4313      	orrs	r3, r2
 800da38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	015a      	lsls	r2, r3, #5
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	4413      	add	r3, r2
 800da42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d153      	bne.n	800daf8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	015a      	lsls	r2, r3, #5
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	4413      	add	r3, r2
 800da58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	791b      	ldrb	r3, [r3, #4]
 800da6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	059b      	lsls	r3, r3, #22
 800da72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da74:	431a      	orrs	r2, r3
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	0159      	lsls	r1, r3, #5
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	440b      	add	r3, r1
 800da7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da82:	4619      	mov	r1, r3
 800da84:	4b20      	ldr	r3, [pc, #128]	@ (800db08 <USB_ActivateEndpoint+0x10c>)
 800da86:	4313      	orrs	r3, r2
 800da88:	600b      	str	r3, [r1, #0]
 800da8a:	e035      	b.n	800daf8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da92:	69da      	ldr	r2, [r3, #28]
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	f003 030f 	and.w	r3, r3, #15
 800da9c:	2101      	movs	r1, #1
 800da9e:	fa01 f303 	lsl.w	r3, r1, r3
 800daa2:	041b      	lsls	r3, r3, #16
 800daa4:	68f9      	ldr	r1, [r7, #12]
 800daa6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800daaa:	4313      	orrs	r3, r2
 800daac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	015a      	lsls	r2, r3, #5
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	4413      	add	r3, r2
 800dab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d119      	bne.n	800daf8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	015a      	lsls	r2, r3, #5
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	4413      	add	r3, r2
 800dacc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	791b      	ldrb	r3, [r3, #4]
 800dade:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dae0:	430b      	orrs	r3, r1
 800dae2:	431a      	orrs	r2, r3
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	0159      	lsls	r1, r3, #5
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	440b      	add	r3, r1
 800daec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800daf0:	4619      	mov	r1, r3
 800daf2:	4b05      	ldr	r3, [pc, #20]	@ (800db08 <USB_ActivateEndpoint+0x10c>)
 800daf4:	4313      	orrs	r3, r2
 800daf6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800daf8:	2300      	movs	r3, #0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3714      	adds	r7, #20
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop
 800db08:	10008000 	.word	0x10008000

0800db0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	785b      	ldrb	r3, [r3, #1]
 800db24:	2b01      	cmp	r3, #1
 800db26:	d161      	bne.n	800dbec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	015a      	lsls	r2, r3, #5
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	4413      	add	r3, r2
 800db30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db3e:	d11f      	bne.n	800db80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	015a      	lsls	r2, r3, #5
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	4413      	add	r3, r2
 800db48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	0151      	lsls	r1, r2, #5
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	440a      	add	r2, r1
 800db56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800db5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800db5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	015a      	lsls	r2, r3, #5
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	4413      	add	r3, r2
 800db68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	0151      	lsls	r1, r2, #5
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	440a      	add	r2, r1
 800db76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800db7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800db7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	f003 030f 	and.w	r3, r3, #15
 800db90:	2101      	movs	r1, #1
 800db92:	fa01 f303 	lsl.w	r3, r1, r3
 800db96:	b29b      	uxth	r3, r3
 800db98:	43db      	mvns	r3, r3
 800db9a:	68f9      	ldr	r1, [r7, #12]
 800db9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dba0:	4013      	ands	r3, r2
 800dba2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbaa:	69da      	ldr	r2, [r3, #28]
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	f003 030f 	and.w	r3, r3, #15
 800dbb4:	2101      	movs	r1, #1
 800dbb6:	fa01 f303 	lsl.w	r3, r1, r3
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	43db      	mvns	r3, r3
 800dbbe:	68f9      	ldr	r1, [r7, #12]
 800dbc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dbc4:	4013      	ands	r3, r2
 800dbc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	015a      	lsls	r2, r3, #5
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	4413      	add	r3, r2
 800dbd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	0159      	lsls	r1, r3, #5
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	440b      	add	r3, r1
 800dbde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4b35      	ldr	r3, [pc, #212]	@ (800dcbc <USB_DeactivateEndpoint+0x1b0>)
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	600b      	str	r3, [r1, #0]
 800dbea:	e060      	b.n	800dcae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	015a      	lsls	r2, r3, #5
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dbfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc02:	d11f      	bne.n	800dc44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	015a      	lsls	r2, r3, #5
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	4413      	add	r3, r2
 800dc0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	68ba      	ldr	r2, [r7, #8]
 800dc14:	0151      	lsls	r1, r2, #5
 800dc16:	68fa      	ldr	r2, [r7, #12]
 800dc18:	440a      	add	r2, r1
 800dc1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dc1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dc22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	015a      	lsls	r2, r3, #5
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	68ba      	ldr	r2, [r7, #8]
 800dc34:	0151      	lsls	r1, r2, #5
 800dc36:	68fa      	ldr	r2, [r7, #12]
 800dc38:	440a      	add	r2, r1
 800dc3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dc3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dc42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	f003 030f 	and.w	r3, r3, #15
 800dc54:	2101      	movs	r1, #1
 800dc56:	fa01 f303 	lsl.w	r3, r1, r3
 800dc5a:	041b      	lsls	r3, r3, #16
 800dc5c:	43db      	mvns	r3, r3
 800dc5e:	68f9      	ldr	r1, [r7, #12]
 800dc60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dc64:	4013      	ands	r3, r2
 800dc66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc6e:	69da      	ldr	r2, [r3, #28]
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	f003 030f 	and.w	r3, r3, #15
 800dc78:	2101      	movs	r1, #1
 800dc7a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc7e:	041b      	lsls	r3, r3, #16
 800dc80:	43db      	mvns	r3, r3
 800dc82:	68f9      	ldr	r1, [r7, #12]
 800dc84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dc88:	4013      	ands	r3, r2
 800dc8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	015a      	lsls	r2, r3, #5
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	4413      	add	r3, r2
 800dc94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	0159      	lsls	r1, r3, #5
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	440b      	add	r3, r1
 800dca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dca6:	4619      	mov	r1, r3
 800dca8:	4b05      	ldr	r3, [pc, #20]	@ (800dcc0 <USB_DeactivateEndpoint+0x1b4>)
 800dcaa:	4013      	ands	r3, r2
 800dcac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dcae:	2300      	movs	r3, #0
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3714      	adds	r7, #20
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr
 800dcbc:	ec337800 	.word	0xec337800
 800dcc0:	eff37800 	.word	0xeff37800

0800dcc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b08a      	sub	sp, #40	@ 0x28
 800dcc8:	af02      	add	r7, sp, #8
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	785b      	ldrb	r3, [r3, #1]
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	f040 8181 	bne.w	800dfe8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	691b      	ldr	r3, [r3, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d132      	bne.n	800dd54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dcee:	69bb      	ldr	r3, [r7, #24]
 800dcf0:	015a      	lsls	r2, r3, #5
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcfa:	691a      	ldr	r2, [r3, #16]
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	0159      	lsls	r1, r3, #5
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	440b      	add	r3, r1
 800dd04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd08:	4619      	mov	r1, r3
 800dd0a:	4ba5      	ldr	r3, [pc, #660]	@ (800dfa0 <USB_EPStartXfer+0x2dc>)
 800dd0c:	4013      	ands	r3, r2
 800dd0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	015a      	lsls	r2, r3, #5
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	4413      	add	r3, r2
 800dd18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd1c:	691b      	ldr	r3, [r3, #16]
 800dd1e:	69ba      	ldr	r2, [r7, #24]
 800dd20:	0151      	lsls	r1, r2, #5
 800dd22:	69fa      	ldr	r2, [r7, #28]
 800dd24:	440a      	add	r2, r1
 800dd26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	015a      	lsls	r2, r3, #5
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	4413      	add	r3, r2
 800dd38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd3c:	691a      	ldr	r2, [r3, #16]
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	0159      	lsls	r1, r3, #5
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	440b      	add	r3, r1
 800dd46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	4b95      	ldr	r3, [pc, #596]	@ (800dfa4 <USB_EPStartXfer+0x2e0>)
 800dd4e:	4013      	ands	r3, r2
 800dd50:	610b      	str	r3, [r1, #16]
 800dd52:	e092      	b.n	800de7a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	015a      	lsls	r2, r3, #5
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd60:	691a      	ldr	r2, [r3, #16]
 800dd62:	69bb      	ldr	r3, [r7, #24]
 800dd64:	0159      	lsls	r1, r3, #5
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	440b      	add	r3, r1
 800dd6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd6e:	4619      	mov	r1, r3
 800dd70:	4b8c      	ldr	r3, [pc, #560]	@ (800dfa4 <USB_EPStartXfer+0x2e0>)
 800dd72:	4013      	ands	r3, r2
 800dd74:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	015a      	lsls	r2, r3, #5
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd82:	691a      	ldr	r2, [r3, #16]
 800dd84:	69bb      	ldr	r3, [r7, #24]
 800dd86:	0159      	lsls	r1, r3, #5
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	440b      	add	r3, r1
 800dd8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd90:	4619      	mov	r1, r3
 800dd92:	4b83      	ldr	r3, [pc, #524]	@ (800dfa0 <USB_EPStartXfer+0x2dc>)
 800dd94:	4013      	ands	r3, r2
 800dd96:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d11a      	bne.n	800ddd4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	691a      	ldr	r2, [r3, #16]
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d903      	bls.n	800ddb2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	689a      	ldr	r2, [r3, #8]
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	015a      	lsls	r2, r3, #5
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	4413      	add	r3, r2
 800ddba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	69ba      	ldr	r2, [r7, #24]
 800ddc2:	0151      	lsls	r1, r2, #5
 800ddc4:	69fa      	ldr	r2, [r7, #28]
 800ddc6:	440a      	add	r2, r1
 800ddc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ddcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ddd0:	6113      	str	r3, [r2, #16]
 800ddd2:	e01b      	b.n	800de0c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ddd4:	69bb      	ldr	r3, [r7, #24]
 800ddd6:	015a      	lsls	r2, r3, #5
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	4413      	add	r3, r2
 800dddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dde0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	6919      	ldr	r1, [r3, #16]
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	440b      	add	r3, r1
 800ddec:	1e59      	subs	r1, r3, #1
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	fbb1 f3f3 	udiv	r3, r1, r3
 800ddf6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ddf8:	4b6b      	ldr	r3, [pc, #428]	@ (800dfa8 <USB_EPStartXfer+0x2e4>)
 800ddfa:	400b      	ands	r3, r1
 800ddfc:	69b9      	ldr	r1, [r7, #24]
 800ddfe:	0148      	lsls	r0, r1, #5
 800de00:	69f9      	ldr	r1, [r7, #28]
 800de02:	4401      	add	r1, r0
 800de04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800de08:	4313      	orrs	r3, r2
 800de0a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	015a      	lsls	r2, r3, #5
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	4413      	add	r3, r2
 800de14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de18:	691a      	ldr	r2, [r3, #16]
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	691b      	ldr	r3, [r3, #16]
 800de1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de22:	69b9      	ldr	r1, [r7, #24]
 800de24:	0148      	lsls	r0, r1, #5
 800de26:	69f9      	ldr	r1, [r7, #28]
 800de28:	4401      	add	r1, r0
 800de2a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800de2e:	4313      	orrs	r3, r2
 800de30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	791b      	ldrb	r3, [r3, #4]
 800de36:	2b01      	cmp	r3, #1
 800de38:	d11f      	bne.n	800de7a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	015a      	lsls	r2, r3, #5
 800de3e:	69fb      	ldr	r3, [r7, #28]
 800de40:	4413      	add	r3, r2
 800de42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de46:	691b      	ldr	r3, [r3, #16]
 800de48:	69ba      	ldr	r2, [r7, #24]
 800de4a:	0151      	lsls	r1, r2, #5
 800de4c:	69fa      	ldr	r2, [r7, #28]
 800de4e:	440a      	add	r2, r1
 800de50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800de54:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800de58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	015a      	lsls	r2, r3, #5
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	4413      	add	r3, r2
 800de62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de66:	691b      	ldr	r3, [r3, #16]
 800de68:	69ba      	ldr	r2, [r7, #24]
 800de6a:	0151      	lsls	r1, r2, #5
 800de6c:	69fa      	ldr	r2, [r7, #28]
 800de6e:	440a      	add	r2, r1
 800de70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800de74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800de78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800de7a:	79fb      	ldrb	r3, [r7, #7]
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d14b      	bne.n	800df18 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	69db      	ldr	r3, [r3, #28]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d009      	beq.n	800de9c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de94:	461a      	mov	r2, r3
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	69db      	ldr	r3, [r3, #28]
 800de9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	791b      	ldrb	r3, [r3, #4]
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d128      	bne.n	800def6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d110      	bne.n	800ded6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800deb4:	69bb      	ldr	r3, [r7, #24]
 800deb6:	015a      	lsls	r2, r3, #5
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	4413      	add	r3, r2
 800debc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	69ba      	ldr	r2, [r7, #24]
 800dec4:	0151      	lsls	r1, r2, #5
 800dec6:	69fa      	ldr	r2, [r7, #28]
 800dec8:	440a      	add	r2, r1
 800deca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dece:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ded2:	6013      	str	r3, [r2, #0]
 800ded4:	e00f      	b.n	800def6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	015a      	lsls	r2, r3, #5
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	4413      	add	r3, r2
 800dede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	69ba      	ldr	r2, [r7, #24]
 800dee6:	0151      	lsls	r1, r2, #5
 800dee8:	69fa      	ldr	r2, [r7, #28]
 800deea:	440a      	add	r2, r1
 800deec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800def0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800def4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	015a      	lsls	r2, r3, #5
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	4413      	add	r3, r2
 800defe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	69ba      	ldr	r2, [r7, #24]
 800df06:	0151      	lsls	r1, r2, #5
 800df08:	69fa      	ldr	r2, [r7, #28]
 800df0a:	440a      	add	r2, r1
 800df0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df10:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800df14:	6013      	str	r3, [r2, #0]
 800df16:	e16a      	b.n	800e1ee <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	015a      	lsls	r2, r3, #5
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	4413      	add	r3, r2
 800df20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	69ba      	ldr	r2, [r7, #24]
 800df28:	0151      	lsls	r1, r2, #5
 800df2a:	69fa      	ldr	r2, [r7, #28]
 800df2c:	440a      	add	r2, r1
 800df2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df32:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800df36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	791b      	ldrb	r3, [r3, #4]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d015      	beq.n	800df6c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	2b00      	cmp	r3, #0
 800df46:	f000 8152 	beq.w	800e1ee <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	f003 030f 	and.w	r3, r3, #15
 800df5a:	2101      	movs	r1, #1
 800df5c:	fa01 f303 	lsl.w	r3, r1, r3
 800df60:	69f9      	ldr	r1, [r7, #28]
 800df62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df66:	4313      	orrs	r3, r2
 800df68:	634b      	str	r3, [r1, #52]	@ 0x34
 800df6a:	e140      	b.n	800e1ee <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d117      	bne.n	800dfac <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	015a      	lsls	r2, r3, #5
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	4413      	add	r3, r2
 800df84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	69ba      	ldr	r2, [r7, #24]
 800df8c:	0151      	lsls	r1, r2, #5
 800df8e:	69fa      	ldr	r2, [r7, #28]
 800df90:	440a      	add	r2, r1
 800df92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df96:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800df9a:	6013      	str	r3, [r2, #0]
 800df9c:	e016      	b.n	800dfcc <USB_EPStartXfer+0x308>
 800df9e:	bf00      	nop
 800dfa0:	e007ffff 	.word	0xe007ffff
 800dfa4:	fff80000 	.word	0xfff80000
 800dfa8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dfac:	69bb      	ldr	r3, [r7, #24]
 800dfae:	015a      	lsls	r2, r3, #5
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	4413      	add	r3, r2
 800dfb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	69ba      	ldr	r2, [r7, #24]
 800dfbc:	0151      	lsls	r1, r2, #5
 800dfbe:	69fa      	ldr	r2, [r7, #28]
 800dfc0:	440a      	add	r2, r1
 800dfc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dfc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dfca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	68d9      	ldr	r1, [r3, #12]
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	781a      	ldrb	r2, [r3, #0]
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	691b      	ldr	r3, [r3, #16]
 800dfd8:	b298      	uxth	r0, r3
 800dfda:	79fb      	ldrb	r3, [r7, #7]
 800dfdc:	9300      	str	r3, [sp, #0]
 800dfde:	4603      	mov	r3, r0
 800dfe0:	68f8      	ldr	r0, [r7, #12]
 800dfe2:	f000 f9b9 	bl	800e358 <USB_WritePacket>
 800dfe6:	e102      	b.n	800e1ee <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	015a      	lsls	r2, r3, #5
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	4413      	add	r3, r2
 800dff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dff4:	691a      	ldr	r2, [r3, #16]
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	0159      	lsls	r1, r3, #5
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	440b      	add	r3, r1
 800dffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e002:	4619      	mov	r1, r3
 800e004:	4b7c      	ldr	r3, [pc, #496]	@ (800e1f8 <USB_EPStartXfer+0x534>)
 800e006:	4013      	ands	r3, r2
 800e008:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	015a      	lsls	r2, r3, #5
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	4413      	add	r3, r2
 800e012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e016:	691a      	ldr	r2, [r3, #16]
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	0159      	lsls	r1, r3, #5
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	440b      	add	r3, r1
 800e020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e024:	4619      	mov	r1, r3
 800e026:	4b75      	ldr	r3, [pc, #468]	@ (800e1fc <USB_EPStartXfer+0x538>)
 800e028:	4013      	ands	r3, r2
 800e02a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d12f      	bne.n	800e092 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d003      	beq.n	800e042 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	689a      	ldr	r2, [r3, #8]
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	689a      	ldr	r2, [r3, #8]
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	015a      	lsls	r2, r3, #5
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	4413      	add	r3, r2
 800e052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e056:	691a      	ldr	r2, [r3, #16]
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	6a1b      	ldr	r3, [r3, #32]
 800e05c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e060:	69b9      	ldr	r1, [r7, #24]
 800e062:	0148      	lsls	r0, r1, #5
 800e064:	69f9      	ldr	r1, [r7, #28]
 800e066:	4401      	add	r1, r0
 800e068:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e06c:	4313      	orrs	r3, r2
 800e06e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	015a      	lsls	r2, r3, #5
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	4413      	add	r3, r2
 800e078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e07c:	691b      	ldr	r3, [r3, #16]
 800e07e:	69ba      	ldr	r2, [r7, #24]
 800e080:	0151      	lsls	r1, r2, #5
 800e082:	69fa      	ldr	r2, [r7, #28]
 800e084:	440a      	add	r2, r1
 800e086:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e08a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e08e:	6113      	str	r3, [r2, #16]
 800e090:	e05f      	b.n	800e152 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	691b      	ldr	r3, [r3, #16]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d123      	bne.n	800e0e2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	015a      	lsls	r2, r3, #5
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0a6:	691a      	ldr	r2, [r3, #16]
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0b0:	69b9      	ldr	r1, [r7, #24]
 800e0b2:	0148      	lsls	r0, r1, #5
 800e0b4:	69f9      	ldr	r1, [r7, #28]
 800e0b6:	4401      	add	r1, r0
 800e0b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	015a      	lsls	r2, r3, #5
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0cc:	691b      	ldr	r3, [r3, #16]
 800e0ce:	69ba      	ldr	r2, [r7, #24]
 800e0d0:	0151      	lsls	r1, r2, #5
 800e0d2:	69fa      	ldr	r2, [r7, #28]
 800e0d4:	440a      	add	r2, r1
 800e0d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e0da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e0de:	6113      	str	r3, [r2, #16]
 800e0e0:	e037      	b.n	800e152 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	691a      	ldr	r2, [r3, #16]
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	689b      	ldr	r3, [r3, #8]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	1e5a      	subs	r2, r3, #1
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0f6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	8afa      	ldrh	r2, [r7, #22]
 800e0fe:	fb03 f202 	mul.w	r2, r3, r2
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	015a      	lsls	r2, r3, #5
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	4413      	add	r3, r2
 800e10e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e112:	691a      	ldr	r2, [r3, #16]
 800e114:	8afb      	ldrh	r3, [r7, #22]
 800e116:	04d9      	lsls	r1, r3, #19
 800e118:	4b39      	ldr	r3, [pc, #228]	@ (800e200 <USB_EPStartXfer+0x53c>)
 800e11a:	400b      	ands	r3, r1
 800e11c:	69b9      	ldr	r1, [r7, #24]
 800e11e:	0148      	lsls	r0, r1, #5
 800e120:	69f9      	ldr	r1, [r7, #28]
 800e122:	4401      	add	r1, r0
 800e124:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e128:	4313      	orrs	r3, r2
 800e12a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	015a      	lsls	r2, r3, #5
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	4413      	add	r3, r2
 800e134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e138:	691a      	ldr	r2, [r3, #16]
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	6a1b      	ldr	r3, [r3, #32]
 800e13e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e142:	69b9      	ldr	r1, [r7, #24]
 800e144:	0148      	lsls	r0, r1, #5
 800e146:	69f9      	ldr	r1, [r7, #28]
 800e148:	4401      	add	r1, r0
 800e14a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e14e:	4313      	orrs	r3, r2
 800e150:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e152:	79fb      	ldrb	r3, [r7, #7]
 800e154:	2b01      	cmp	r3, #1
 800e156:	d10d      	bne.n	800e174 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d009      	beq.n	800e174 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	68d9      	ldr	r1, [r3, #12]
 800e164:	69bb      	ldr	r3, [r7, #24]
 800e166:	015a      	lsls	r2, r3, #5
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	4413      	add	r3, r2
 800e16c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e170:	460a      	mov	r2, r1
 800e172:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	791b      	ldrb	r3, [r3, #4]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d128      	bne.n	800e1ce <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d110      	bne.n	800e1ae <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e18c:	69bb      	ldr	r3, [r7, #24]
 800e18e:	015a      	lsls	r2, r3, #5
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	4413      	add	r3, r2
 800e194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	69ba      	ldr	r2, [r7, #24]
 800e19c:	0151      	lsls	r1, r2, #5
 800e19e:	69fa      	ldr	r2, [r7, #28]
 800e1a0:	440a      	add	r2, r1
 800e1a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e1a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e1aa:	6013      	str	r3, [r2, #0]
 800e1ac:	e00f      	b.n	800e1ce <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	015a      	lsls	r2, r3, #5
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	69ba      	ldr	r2, [r7, #24]
 800e1be:	0151      	lsls	r1, r2, #5
 800e1c0:	69fa      	ldr	r2, [r7, #28]
 800e1c2:	440a      	add	r2, r1
 800e1c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e1c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e1cc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	015a      	lsls	r2, r3, #5
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	69ba      	ldr	r2, [r7, #24]
 800e1de:	0151      	lsls	r1, r2, #5
 800e1e0:	69fa      	ldr	r2, [r7, #28]
 800e1e2:	440a      	add	r2, r1
 800e1e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e1e8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e1ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3720      	adds	r7, #32
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	fff80000 	.word	0xfff80000
 800e1fc:	e007ffff 	.word	0xe007ffff
 800e200:	1ff80000 	.word	0x1ff80000

0800e204 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e204:	b480      	push	{r7}
 800e206:	b087      	sub	sp, #28
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e20e:	2300      	movs	r3, #0
 800e210:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e212:	2300      	movs	r3, #0
 800e214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	785b      	ldrb	r3, [r3, #1]
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d14a      	bne.n	800e2b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	015a      	lsls	r2, r3, #5
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	4413      	add	r3, r2
 800e22c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e236:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e23a:	f040 8086 	bne.w	800e34a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	015a      	lsls	r2, r3, #5
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	4413      	add	r3, r2
 800e248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	683a      	ldr	r2, [r7, #0]
 800e250:	7812      	ldrb	r2, [r2, #0]
 800e252:	0151      	lsls	r1, r2, #5
 800e254:	693a      	ldr	r2, [r7, #16]
 800e256:	440a      	add	r2, r1
 800e258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e25c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e260:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	015a      	lsls	r2, r3, #5
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	4413      	add	r3, r2
 800e26c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	683a      	ldr	r2, [r7, #0]
 800e274:	7812      	ldrb	r2, [r2, #0]
 800e276:	0151      	lsls	r1, r2, #5
 800e278:	693a      	ldr	r2, [r7, #16]
 800e27a:	440a      	add	r2, r1
 800e27c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e280:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e284:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	3301      	adds	r3, #1
 800e28a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e292:	4293      	cmp	r3, r2
 800e294:	d902      	bls.n	800e29c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e296:	2301      	movs	r3, #1
 800e298:	75fb      	strb	r3, [r7, #23]
          break;
 800e29a:	e056      	b.n	800e34a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	015a      	lsls	r2, r3, #5
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e2b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2b4:	d0e7      	beq.n	800e286 <USB_EPStopXfer+0x82>
 800e2b6:	e048      	b.n	800e34a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	015a      	lsls	r2, r3, #5
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e2cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2d0:	d13b      	bne.n	800e34a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	015a      	lsls	r2, r3, #5
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	4413      	add	r3, r2
 800e2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	683a      	ldr	r2, [r7, #0]
 800e2e4:	7812      	ldrb	r2, [r2, #0]
 800e2e6:	0151      	lsls	r1, r2, #5
 800e2e8:	693a      	ldr	r2, [r7, #16]
 800e2ea:	440a      	add	r2, r1
 800e2ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e2f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e2f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	015a      	lsls	r2, r3, #5
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	4413      	add	r3, r2
 800e300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	683a      	ldr	r2, [r7, #0]
 800e308:	7812      	ldrb	r2, [r2, #0]
 800e30a:	0151      	lsls	r1, r2, #5
 800e30c:	693a      	ldr	r2, [r7, #16]
 800e30e:	440a      	add	r2, r1
 800e310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e314:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e318:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	3301      	adds	r3, #1
 800e31e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e326:	4293      	cmp	r3, r2
 800e328:	d902      	bls.n	800e330 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	75fb      	strb	r3, [r7, #23]
          break;
 800e32e:	e00c      	b.n	800e34a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	015a      	lsls	r2, r3, #5
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	4413      	add	r3, r2
 800e33a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e344:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e348:	d0e7      	beq.n	800e31a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	371c      	adds	r7, #28
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e358:	b480      	push	{r7}
 800e35a:	b089      	sub	sp, #36	@ 0x24
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	4611      	mov	r1, r2
 800e364:	461a      	mov	r2, r3
 800e366:	460b      	mov	r3, r1
 800e368:	71fb      	strb	r3, [r7, #7]
 800e36a:	4613      	mov	r3, r2
 800e36c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e376:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d123      	bne.n	800e3c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e37e:	88bb      	ldrh	r3, [r7, #4]
 800e380:	3303      	adds	r3, #3
 800e382:	089b      	lsrs	r3, r3, #2
 800e384:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e386:	2300      	movs	r3, #0
 800e388:	61bb      	str	r3, [r7, #24]
 800e38a:	e018      	b.n	800e3be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e38c:	79fb      	ldrb	r3, [r7, #7]
 800e38e:	031a      	lsls	r2, r3, #12
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	4413      	add	r3, r2
 800e394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e398:	461a      	mov	r2, r3
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	61bb      	str	r3, [r7, #24]
 800e3be:	69ba      	ldr	r2, [r7, #24]
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d3e2      	bcc.n	800e38c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3724      	adds	r7, #36	@ 0x24
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b08b      	sub	sp, #44	@ 0x2c
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	4613      	mov	r3, r2
 800e3e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e3ea:	88fb      	ldrh	r3, [r7, #6]
 800e3ec:	089b      	lsrs	r3, r3, #2
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e3f2:	88fb      	ldrh	r3, [r7, #6]
 800e3f4:	f003 0303 	and.w	r3, r3, #3
 800e3f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	623b      	str	r3, [r7, #32]
 800e3fe:	e014      	b.n	800e42a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e40a:	601a      	str	r2, [r3, #0]
    pDest++;
 800e40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e40e:	3301      	adds	r3, #1
 800e410:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e414:	3301      	adds	r3, #1
 800e416:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e41a:	3301      	adds	r3, #1
 800e41c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e420:	3301      	adds	r3, #1
 800e422:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e424:	6a3b      	ldr	r3, [r7, #32]
 800e426:	3301      	adds	r3, #1
 800e428:	623b      	str	r3, [r7, #32]
 800e42a:	6a3a      	ldr	r2, [r7, #32]
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d3e6      	bcc.n	800e400 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e432:	8bfb      	ldrh	r3, [r7, #30]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d01e      	beq.n	800e476 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e438:	2300      	movs	r3, #0
 800e43a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e442:	461a      	mov	r2, r3
 800e444:	f107 0310 	add.w	r3, r7, #16
 800e448:	6812      	ldr	r2, [r2, #0]
 800e44a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e44c:	693a      	ldr	r2, [r7, #16]
 800e44e:	6a3b      	ldr	r3, [r7, #32]
 800e450:	b2db      	uxtb	r3, r3
 800e452:	00db      	lsls	r3, r3, #3
 800e454:	fa22 f303 	lsr.w	r3, r2, r3
 800e458:	b2da      	uxtb	r2, r3
 800e45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45c:	701a      	strb	r2, [r3, #0]
      i++;
 800e45e:	6a3b      	ldr	r3, [r7, #32]
 800e460:	3301      	adds	r3, #1
 800e462:	623b      	str	r3, [r7, #32]
      pDest++;
 800e464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e466:	3301      	adds	r3, #1
 800e468:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e46a:	8bfb      	ldrh	r3, [r7, #30]
 800e46c:	3b01      	subs	r3, #1
 800e46e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e470:	8bfb      	ldrh	r3, [r7, #30]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d1ea      	bne.n	800e44c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e478:	4618      	mov	r0, r3
 800e47a:	372c      	adds	r7, #44	@ 0x2c
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr

0800e484 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e484:	b480      	push	{r7}
 800e486:	b085      	sub	sp, #20
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	785b      	ldrb	r3, [r3, #1]
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d12c      	bne.n	800e4fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	015a      	lsls	r2, r3, #5
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	4413      	add	r3, r2
 800e4a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	db12      	blt.n	800e4d8 <USB_EPSetStall+0x54>
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d00f      	beq.n	800e4d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	015a      	lsls	r2, r3, #5
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	4413      	add	r3, r2
 800e4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	68ba      	ldr	r2, [r7, #8]
 800e4c8:	0151      	lsls	r1, r2, #5
 800e4ca:	68fa      	ldr	r2, [r7, #12]
 800e4cc:	440a      	add	r2, r1
 800e4ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e4d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	015a      	lsls	r2, r3, #5
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	4413      	add	r3, r2
 800e4e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	68ba      	ldr	r2, [r7, #8]
 800e4e8:	0151      	lsls	r1, r2, #5
 800e4ea:	68fa      	ldr	r2, [r7, #12]
 800e4ec:	440a      	add	r2, r1
 800e4ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e4f6:	6013      	str	r3, [r2, #0]
 800e4f8:	e02b      	b.n	800e552 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	015a      	lsls	r2, r3, #5
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	4413      	add	r3, r2
 800e502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	db12      	blt.n	800e532 <USB_EPSetStall+0xae>
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00f      	beq.n	800e532 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	015a      	lsls	r2, r3, #5
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	4413      	add	r3, r2
 800e51a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68ba      	ldr	r2, [r7, #8]
 800e522:	0151      	lsls	r1, r2, #5
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	440a      	add	r2, r1
 800e528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e52c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e530:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	015a      	lsls	r2, r3, #5
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	4413      	add	r3, r2
 800e53a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	68ba      	ldr	r2, [r7, #8]
 800e542:	0151      	lsls	r1, r2, #5
 800e544:	68fa      	ldr	r2, [r7, #12]
 800e546:	440a      	add	r2, r1
 800e548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e54c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e550:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3714      	adds	r7, #20
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e560:	b480      	push	{r7}
 800e562:	b085      	sub	sp, #20
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	785b      	ldrb	r3, [r3, #1]
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d128      	bne.n	800e5ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	015a      	lsls	r2, r3, #5
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	4413      	add	r3, r2
 800e584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	68ba      	ldr	r2, [r7, #8]
 800e58c:	0151      	lsls	r1, r2, #5
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	440a      	add	r2, r1
 800e592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e596:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e59a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	791b      	ldrb	r3, [r3, #4]
 800e5a0:	2b03      	cmp	r3, #3
 800e5a2:	d003      	beq.n	800e5ac <USB_EPClearStall+0x4c>
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	791b      	ldrb	r3, [r3, #4]
 800e5a8:	2b02      	cmp	r3, #2
 800e5aa:	d138      	bne.n	800e61e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	015a      	lsls	r2, r3, #5
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	68ba      	ldr	r2, [r7, #8]
 800e5bc:	0151      	lsls	r1, r2, #5
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	440a      	add	r2, r1
 800e5c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e5ca:	6013      	str	r3, [r2, #0]
 800e5cc:	e027      	b.n	800e61e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	015a      	lsls	r2, r3, #5
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	68ba      	ldr	r2, [r7, #8]
 800e5de:	0151      	lsls	r1, r2, #5
 800e5e0:	68fa      	ldr	r2, [r7, #12]
 800e5e2:	440a      	add	r2, r1
 800e5e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e5ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	791b      	ldrb	r3, [r3, #4]
 800e5f2:	2b03      	cmp	r3, #3
 800e5f4:	d003      	beq.n	800e5fe <USB_EPClearStall+0x9e>
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	791b      	ldrb	r3, [r3, #4]
 800e5fa:	2b02      	cmp	r3, #2
 800e5fc:	d10f      	bne.n	800e61e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	015a      	lsls	r2, r3, #5
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	4413      	add	r3, r2
 800e606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	68ba      	ldr	r2, [r7, #8]
 800e60e:	0151      	lsls	r1, r2, #5
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	440a      	add	r2, r1
 800e614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e61c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	460b      	mov	r3, r1
 800e636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	68fa      	ldr	r2, [r7, #12]
 800e646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e64a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800e64e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	78fb      	ldrb	r3, [r7, #3]
 800e65a:	011b      	lsls	r3, r3, #4
 800e65c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800e660:	68f9      	ldr	r1, [r7, #12]
 800e662:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e666:	4313      	orrs	r3, r2
 800e668:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e66a:	2300      	movs	r3, #0
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3714      	adds	r7, #20
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	68fa      	ldr	r2, [r7, #12]
 800e68e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e692:	f023 0303 	bic.w	r3, r3, #3
 800e696:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e6a6:	f023 0302 	bic.w	r3, r3, #2
 800e6aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e6ba:	b480      	push	{r7}
 800e6bc:	b085      	sub	sp, #20
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e6d4:	f023 0303 	bic.w	r3, r3, #3
 800e6d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	68fa      	ldr	r2, [r7, #12]
 800e6e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e6e8:	f043 0302 	orr.w	r3, r3, #2
 800e6ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e6ee:	2300      	movs	r3, #0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3714      	adds	r7, #20
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	695b      	ldr	r3, [r3, #20]
 800e708:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	699b      	ldr	r3, [r3, #24]
 800e70e:	68fa      	ldr	r2, [r7, #12]
 800e710:	4013      	ands	r3, r2
 800e712:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e714:	68fb      	ldr	r3, [r7, #12]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr

0800e722 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e722:	b480      	push	{r7}
 800e724:	b085      	sub	sp, #20
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e734:	699b      	ldr	r3, [r3, #24]
 800e736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e73e:	69db      	ldr	r3, [r3, #28]
 800e740:	68ba      	ldr	r2, [r7, #8]
 800e742:	4013      	ands	r3, r2
 800e744:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	0c1b      	lsrs	r3, r3, #16
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3714      	adds	r7, #20
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr

0800e756 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e756:	b480      	push	{r7}
 800e758:	b085      	sub	sp, #20
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e768:	699b      	ldr	r3, [r3, #24]
 800e76a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e772:	69db      	ldr	r3, [r3, #28]
 800e774:	68ba      	ldr	r2, [r7, #8]
 800e776:	4013      	ands	r3, r2
 800e778:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	b29b      	uxth	r3, r3
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3714      	adds	r7, #20
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr

0800e78a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e78a:	b480      	push	{r7}
 800e78c:	b085      	sub	sp, #20
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
 800e792:	460b      	mov	r3, r1
 800e794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e79a:	78fb      	ldrb	r3, [r7, #3]
 800e79c:	015a      	lsls	r2, r3, #5
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7a6:	689b      	ldr	r3, [r3, #8]
 800e7a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7b0:	695b      	ldr	r3, [r3, #20]
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	4013      	ands	r3, r2
 800e7b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e7b8:	68bb      	ldr	r3, [r7, #8]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3714      	adds	r7, #20
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr

0800e7c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e7c6:	b480      	push	{r7}
 800e7c8:	b087      	sub	sp, #28
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7dc:	691b      	ldr	r3, [r3, #16]
 800e7de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e7ea:	78fb      	ldrb	r3, [r7, #3]
 800e7ec:	f003 030f 	and.w	r3, r3, #15
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	fa22 f303 	lsr.w	r3, r2, r3
 800e7f6:	01db      	lsls	r3, r3, #7
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	693a      	ldr	r2, [r7, #16]
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e800:	78fb      	ldrb	r3, [r7, #3]
 800e802:	015a      	lsls	r2, r3, #5
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	4413      	add	r3, r2
 800e808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e80c:	689b      	ldr	r3, [r3, #8]
 800e80e:	693a      	ldr	r2, [r7, #16]
 800e810:	4013      	ands	r3, r2
 800e812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e814:	68bb      	ldr	r3, [r7, #8]
}
 800e816:	4618      	mov	r0, r3
 800e818:	371c      	adds	r7, #28
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr

0800e822 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e822:	b480      	push	{r7}
 800e824:	b083      	sub	sp, #12
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	695b      	ldr	r3, [r3, #20]
 800e82e:	f003 0301 	and.w	r3, r3, #1
}
 800e832:	4618      	mov	r0, r3
 800e834:	370c      	adds	r7, #12
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr
	...

0800e840 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800e840:	b480      	push	{r7}
 800e842:	b085      	sub	sp, #20
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e85a:	4619      	mov	r1, r3
 800e85c:	4b09      	ldr	r3, [pc, #36]	@ (800e884 <USB_ActivateSetup+0x44>)
 800e85e:	4013      	ands	r3, r2
 800e860:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e876:	2300      	movs	r3, #0
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3714      	adds	r7, #20
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr
 800e884:	fffff800 	.word	0xfffff800

0800e888 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800e888:	b480      	push	{r7}
 800e88a:	b087      	sub	sp, #28
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	460b      	mov	r3, r1
 800e892:	607a      	str	r2, [r7, #4]
 800e894:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	333c      	adds	r3, #60	@ 0x3c
 800e89e:	3304      	adds	r3, #4
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	4a26      	ldr	r2, [pc, #152]	@ (800e940 <USB_EP0_OutStart+0xb8>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d90a      	bls.n	800e8c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e8b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e8bc:	d101      	bne.n	800e8c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	e037      	b.n	800e932 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	697a      	ldr	r2, [r7, #20]
 800e8d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e8dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e8e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8e8:	691b      	ldr	r3, [r3, #16]
 800e8ea:	697a      	ldr	r2, [r7, #20]
 800e8ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e8f0:	f043 0318 	orr.w	r3, r3, #24
 800e8f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8fc:	691b      	ldr	r3, [r3, #16]
 800e8fe:	697a      	ldr	r2, [r7, #20]
 800e900:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e904:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800e908:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e90a:	7afb      	ldrb	r3, [r7, #11]
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d10f      	bne.n	800e930 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e916:	461a      	mov	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	697a      	ldr	r2, [r7, #20]
 800e926:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e92a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800e92e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e930:	2300      	movs	r3, #0
}
 800e932:	4618      	mov	r0, r3
 800e934:	371c      	adds	r7, #28
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop
 800e940:	4f54300a 	.word	0x4f54300a

0800e944 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e944:	b480      	push	{r7}
 800e946:	b085      	sub	sp, #20
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e94c:	2300      	movs	r3, #0
 800e94e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	3301      	adds	r3, #1
 800e954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e95c:	d901      	bls.n	800e962 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e95e:	2303      	movs	r3, #3
 800e960:	e01b      	b.n	800e99a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	691b      	ldr	r3, [r3, #16]
 800e966:	2b00      	cmp	r3, #0
 800e968:	daf2      	bge.n	800e950 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e96a:	2300      	movs	r3, #0
 800e96c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	691b      	ldr	r3, [r3, #16]
 800e972:	f043 0201 	orr.w	r2, r3, #1
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	3301      	adds	r3, #1
 800e97e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e986:	d901      	bls.n	800e98c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e988:	2303      	movs	r3, #3
 800e98a:	e006      	b.n	800e99a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	691b      	ldr	r3, [r3, #16]
 800e990:	f003 0301 	and.w	r3, r3, #1
 800e994:	2b01      	cmp	r3, #1
 800e996:	d0f0      	beq.n	800e97a <USB_CoreReset+0x36>

  return HAL_OK;
 800e998:	2300      	movs	r3, #0
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3714      	adds	r7, #20
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr
	...

0800e9a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e9b4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e9b8:	f002 fcdc 	bl	8011374 <USBD_static_malloc>
 800e9bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d109      	bne.n	800e9d8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	32b0      	adds	r2, #176	@ 0xb0
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e9d4:	2302      	movs	r3, #2
 800e9d6:	e0d4      	b.n	800eb82 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e9d8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e9dc:	2100      	movs	r1, #0
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f003 fa67 	bl	8011eb2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	32b0      	adds	r2, #176	@ 0xb0
 800e9ee:	68f9      	ldr	r1, [r7, #12]
 800e9f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	32b0      	adds	r2, #176	@ 0xb0
 800e9fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	7c1b      	ldrb	r3, [r3, #16]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d138      	bne.n	800ea82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ea10:	4b5e      	ldr	r3, [pc, #376]	@ (800eb8c <USBD_CDC_Init+0x1e4>)
 800ea12:	7819      	ldrb	r1, [r3, #0]
 800ea14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea18:	2202      	movs	r2, #2
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f002 fb87 	bl	801112e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ea20:	4b5a      	ldr	r3, [pc, #360]	@ (800eb8c <USBD_CDC_Init+0x1e4>)
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	f003 020f 	and.w	r2, r3, #15
 800ea28:	6879      	ldr	r1, [r7, #4]
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	4413      	add	r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	440b      	add	r3, r1
 800ea34:	3324      	adds	r3, #36	@ 0x24
 800ea36:	2201      	movs	r2, #1
 800ea38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ea3a:	4b55      	ldr	r3, [pc, #340]	@ (800eb90 <USBD_CDC_Init+0x1e8>)
 800ea3c:	7819      	ldrb	r1, [r3, #0]
 800ea3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea42:	2202      	movs	r2, #2
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f002 fb72 	bl	801112e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ea4a:	4b51      	ldr	r3, [pc, #324]	@ (800eb90 <USBD_CDC_Init+0x1e8>)
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	f003 020f 	and.w	r2, r3, #15
 800ea52:	6879      	ldr	r1, [r7, #4]
 800ea54:	4613      	mov	r3, r2
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	4413      	add	r3, r2
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	440b      	add	r3, r1
 800ea5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ea62:	2201      	movs	r2, #1
 800ea64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ea66:	4b4b      	ldr	r3, [pc, #300]	@ (800eb94 <USBD_CDC_Init+0x1ec>)
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	f003 020f 	and.w	r2, r3, #15
 800ea6e:	6879      	ldr	r1, [r7, #4]
 800ea70:	4613      	mov	r3, r2
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	4413      	add	r3, r2
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	440b      	add	r3, r1
 800ea7a:	3326      	adds	r3, #38	@ 0x26
 800ea7c:	2210      	movs	r2, #16
 800ea7e:	801a      	strh	r2, [r3, #0]
 800ea80:	e035      	b.n	800eaee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ea82:	4b42      	ldr	r3, [pc, #264]	@ (800eb8c <USBD_CDC_Init+0x1e4>)
 800ea84:	7819      	ldrb	r1, [r3, #0]
 800ea86:	2340      	movs	r3, #64	@ 0x40
 800ea88:	2202      	movs	r2, #2
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f002 fb4f 	bl	801112e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ea90:	4b3e      	ldr	r3, [pc, #248]	@ (800eb8c <USBD_CDC_Init+0x1e4>)
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	f003 020f 	and.w	r2, r3, #15
 800ea98:	6879      	ldr	r1, [r7, #4]
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4413      	add	r3, r2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	440b      	add	r3, r1
 800eaa4:	3324      	adds	r3, #36	@ 0x24
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800eaaa:	4b39      	ldr	r3, [pc, #228]	@ (800eb90 <USBD_CDC_Init+0x1e8>)
 800eaac:	7819      	ldrb	r1, [r3, #0]
 800eaae:	2340      	movs	r3, #64	@ 0x40
 800eab0:	2202      	movs	r2, #2
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f002 fb3b 	bl	801112e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800eab8:	4b35      	ldr	r3, [pc, #212]	@ (800eb90 <USBD_CDC_Init+0x1e8>)
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	f003 020f 	and.w	r2, r3, #15
 800eac0:	6879      	ldr	r1, [r7, #4]
 800eac2:	4613      	mov	r3, r2
 800eac4:	009b      	lsls	r3, r3, #2
 800eac6:	4413      	add	r3, r2
 800eac8:	009b      	lsls	r3, r3, #2
 800eaca:	440b      	add	r3, r1
 800eacc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ead0:	2201      	movs	r2, #1
 800ead2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ead4:	4b2f      	ldr	r3, [pc, #188]	@ (800eb94 <USBD_CDC_Init+0x1ec>)
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	f003 020f 	and.w	r2, r3, #15
 800eadc:	6879      	ldr	r1, [r7, #4]
 800eade:	4613      	mov	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	440b      	add	r3, r1
 800eae8:	3326      	adds	r3, #38	@ 0x26
 800eaea:	2210      	movs	r2, #16
 800eaec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eaee:	4b29      	ldr	r3, [pc, #164]	@ (800eb94 <USBD_CDC_Init+0x1ec>)
 800eaf0:	7819      	ldrb	r1, [r3, #0]
 800eaf2:	2308      	movs	r3, #8
 800eaf4:	2203      	movs	r2, #3
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f002 fb19 	bl	801112e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800eafc:	4b25      	ldr	r3, [pc, #148]	@ (800eb94 <USBD_CDC_Init+0x1ec>)
 800eafe:	781b      	ldrb	r3, [r3, #0]
 800eb00:	f003 020f 	and.w	r2, r3, #15
 800eb04:	6879      	ldr	r1, [r7, #4]
 800eb06:	4613      	mov	r3, r2
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	4413      	add	r3, r2
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	440b      	add	r3, r1
 800eb10:	3324      	adds	r3, #36	@ 0x24
 800eb12:	2201      	movs	r2, #1
 800eb14:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	33b0      	adds	r3, #176	@ 0xb0
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	4413      	add	r3, r2
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2200      	movs	r2, #0
 800eb36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d101      	bne.n	800eb50 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800eb4c:	2302      	movs	r3, #2
 800eb4e:	e018      	b.n	800eb82 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	7c1b      	ldrb	r3, [r3, #16]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d10a      	bne.n	800eb6e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eb58:	4b0d      	ldr	r3, [pc, #52]	@ (800eb90 <USBD_CDC_Init+0x1e8>)
 800eb5a:	7819      	ldrb	r1, [r3, #0]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f002 fbd0 	bl	801130c <USBD_LL_PrepareReceive>
 800eb6c:	e008      	b.n	800eb80 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eb6e:	4b08      	ldr	r3, [pc, #32]	@ (800eb90 <USBD_CDC_Init+0x1e8>)
 800eb70:	7819      	ldrb	r1, [r3, #0]
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb78:	2340      	movs	r3, #64	@ 0x40
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f002 fbc6 	bl	801130c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb80:	2300      	movs	r3, #0
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	24000097 	.word	0x24000097
 800eb90:	24000098 	.word	0x24000098
 800eb94:	24000099 	.word	0x24000099

0800eb98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	460b      	mov	r3, r1
 800eba2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800eba4:	4b3a      	ldr	r3, [pc, #232]	@ (800ec90 <USBD_CDC_DeInit+0xf8>)
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	4619      	mov	r1, r3
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f002 fae5 	bl	801117a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ebb0:	4b37      	ldr	r3, [pc, #220]	@ (800ec90 <USBD_CDC_DeInit+0xf8>)
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	f003 020f 	and.w	r2, r3, #15
 800ebb8:	6879      	ldr	r1, [r7, #4]
 800ebba:	4613      	mov	r3, r2
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	4413      	add	r3, r2
 800ebc0:	009b      	lsls	r3, r3, #2
 800ebc2:	440b      	add	r3, r1
 800ebc4:	3324      	adds	r3, #36	@ 0x24
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ebca:	4b32      	ldr	r3, [pc, #200]	@ (800ec94 <USBD_CDC_DeInit+0xfc>)
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	4619      	mov	r1, r3
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f002 fad2 	bl	801117a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ebd6:	4b2f      	ldr	r3, [pc, #188]	@ (800ec94 <USBD_CDC_DeInit+0xfc>)
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	f003 020f 	and.w	r2, r3, #15
 800ebde:	6879      	ldr	r1, [r7, #4]
 800ebe0:	4613      	mov	r3, r2
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	4413      	add	r3, r2
 800ebe6:	009b      	lsls	r3, r3, #2
 800ebe8:	440b      	add	r3, r1
 800ebea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ebee:	2200      	movs	r2, #0
 800ebf0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ebf2:	4b29      	ldr	r3, [pc, #164]	@ (800ec98 <USBD_CDC_DeInit+0x100>)
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f002 fabe 	bl	801117a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ebfe:	4b26      	ldr	r3, [pc, #152]	@ (800ec98 <USBD_CDC_DeInit+0x100>)
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	f003 020f 	and.w	r2, r3, #15
 800ec06:	6879      	ldr	r1, [r7, #4]
 800ec08:	4613      	mov	r3, r2
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	4413      	add	r3, r2
 800ec0e:	009b      	lsls	r3, r3, #2
 800ec10:	440b      	add	r3, r1
 800ec12:	3324      	adds	r3, #36	@ 0x24
 800ec14:	2200      	movs	r2, #0
 800ec16:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ec18:	4b1f      	ldr	r3, [pc, #124]	@ (800ec98 <USBD_CDC_DeInit+0x100>)
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	f003 020f 	and.w	r2, r3, #15
 800ec20:	6879      	ldr	r1, [r7, #4]
 800ec22:	4613      	mov	r3, r2
 800ec24:	009b      	lsls	r3, r3, #2
 800ec26:	4413      	add	r3, r2
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	440b      	add	r3, r1
 800ec2c:	3326      	adds	r3, #38	@ 0x26
 800ec2e:	2200      	movs	r2, #0
 800ec30:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	32b0      	adds	r2, #176	@ 0xb0
 800ec3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d01f      	beq.n	800ec84 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	33b0      	adds	r3, #176	@ 0xb0
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	4413      	add	r3, r2
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	32b0      	adds	r2, #176	@ 0xb0
 800ec62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec66:	4618      	mov	r0, r3
 800ec68:	f002 fb92 	bl	8011390 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	32b0      	adds	r2, #176	@ 0xb0
 800ec76:	2100      	movs	r1, #0
 800ec78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	24000097 	.word	0x24000097
 800ec94:	24000098 	.word	0x24000098
 800ec98:	24000099 	.word	0x24000099

0800ec9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b086      	sub	sp, #24
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	32b0      	adds	r2, #176	@ 0xb0
 800ecb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d101      	bne.n	800eccc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ecc8:	2303      	movs	r3, #3
 800ecca:	e0bf      	b.n	800ee4c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d050      	beq.n	800ed7a <USBD_CDC_Setup+0xde>
 800ecd8:	2b20      	cmp	r3, #32
 800ecda:	f040 80af 	bne.w	800ee3c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	88db      	ldrh	r3, [r3, #6]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d03a      	beq.n	800ed5c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	b25b      	sxtb	r3, r3
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	da1b      	bge.n	800ed28 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	33b0      	adds	r3, #176	@ 0xb0
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	4413      	add	r3, r2
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	683a      	ldr	r2, [r7, #0]
 800ed04:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ed06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ed08:	683a      	ldr	r2, [r7, #0]
 800ed0a:	88d2      	ldrh	r2, [r2, #6]
 800ed0c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	88db      	ldrh	r3, [r3, #6]
 800ed12:	2b07      	cmp	r3, #7
 800ed14:	bf28      	it	cs
 800ed16:	2307      	movcs	r3, #7
 800ed18:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	89fa      	ldrh	r2, [r7, #14]
 800ed1e:	4619      	mov	r1, r3
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f001 fdbd 	bl	80108a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ed26:	e090      	b.n	800ee4a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	785a      	ldrb	r2, [r3, #1]
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	88db      	ldrh	r3, [r3, #6]
 800ed36:	2b3f      	cmp	r3, #63	@ 0x3f
 800ed38:	d803      	bhi.n	800ed42 <USBD_CDC_Setup+0xa6>
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	88db      	ldrh	r3, [r3, #6]
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	e000      	b.n	800ed44 <USBD_CDC_Setup+0xa8>
 800ed42:	2240      	movs	r2, #64	@ 0x40
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ed4a:	6939      	ldr	r1, [r7, #16]
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ed52:	461a      	mov	r2, r3
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f001 fdcf 	bl	80108f8 <USBD_CtlPrepareRx>
      break;
 800ed5a:	e076      	b.n	800ee4a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	33b0      	adds	r3, #176	@ 0xb0
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	4413      	add	r3, r2
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	689b      	ldr	r3, [r3, #8]
 800ed6e:	683a      	ldr	r2, [r7, #0]
 800ed70:	7850      	ldrb	r0, [r2, #1]
 800ed72:	2200      	movs	r2, #0
 800ed74:	6839      	ldr	r1, [r7, #0]
 800ed76:	4798      	blx	r3
      break;
 800ed78:	e067      	b.n	800ee4a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	785b      	ldrb	r3, [r3, #1]
 800ed7e:	2b0b      	cmp	r3, #11
 800ed80:	d851      	bhi.n	800ee26 <USBD_CDC_Setup+0x18a>
 800ed82:	a201      	add	r2, pc, #4	@ (adr r2, 800ed88 <USBD_CDC_Setup+0xec>)
 800ed84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed88:	0800edb9 	.word	0x0800edb9
 800ed8c:	0800ee35 	.word	0x0800ee35
 800ed90:	0800ee27 	.word	0x0800ee27
 800ed94:	0800ee27 	.word	0x0800ee27
 800ed98:	0800ee27 	.word	0x0800ee27
 800ed9c:	0800ee27 	.word	0x0800ee27
 800eda0:	0800ee27 	.word	0x0800ee27
 800eda4:	0800ee27 	.word	0x0800ee27
 800eda8:	0800ee27 	.word	0x0800ee27
 800edac:	0800ee27 	.word	0x0800ee27
 800edb0:	0800ede3 	.word	0x0800ede3
 800edb4:	0800ee0d 	.word	0x0800ee0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2b03      	cmp	r3, #3
 800edc2:	d107      	bne.n	800edd4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800edc4:	f107 030a 	add.w	r3, r7, #10
 800edc8:	2202      	movs	r2, #2
 800edca:	4619      	mov	r1, r3
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f001 fd67 	bl	80108a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800edd2:	e032      	b.n	800ee3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800edd4:	6839      	ldr	r1, [r7, #0]
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f001 fce5 	bl	80107a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800eddc:	2303      	movs	r3, #3
 800edde:	75fb      	strb	r3, [r7, #23]
          break;
 800ede0:	e02b      	b.n	800ee3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	2b03      	cmp	r3, #3
 800edec:	d107      	bne.n	800edfe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800edee:	f107 030d 	add.w	r3, r7, #13
 800edf2:	2201      	movs	r2, #1
 800edf4:	4619      	mov	r1, r3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f001 fd52 	bl	80108a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800edfc:	e01d      	b.n	800ee3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800edfe:	6839      	ldr	r1, [r7, #0]
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f001 fcd0 	bl	80107a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ee06:	2303      	movs	r3, #3
 800ee08:	75fb      	strb	r3, [r7, #23]
          break;
 800ee0a:	e016      	b.n	800ee3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	2b03      	cmp	r3, #3
 800ee16:	d00f      	beq.n	800ee38 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ee18:	6839      	ldr	r1, [r7, #0]
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f001 fcc3 	bl	80107a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ee20:	2303      	movs	r3, #3
 800ee22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ee24:	e008      	b.n	800ee38 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ee26:	6839      	ldr	r1, [r7, #0]
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f001 fcbc 	bl	80107a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ee2e:	2303      	movs	r3, #3
 800ee30:	75fb      	strb	r3, [r7, #23]
          break;
 800ee32:	e002      	b.n	800ee3a <USBD_CDC_Setup+0x19e>
          break;
 800ee34:	bf00      	nop
 800ee36:	e008      	b.n	800ee4a <USBD_CDC_Setup+0x1ae>
          break;
 800ee38:	bf00      	nop
      }
      break;
 800ee3a:	e006      	b.n	800ee4a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ee3c:	6839      	ldr	r1, [r7, #0]
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f001 fcb1 	bl	80107a6 <USBD_CtlError>
      ret = USBD_FAIL;
 800ee44:	2303      	movs	r3, #3
 800ee46:	75fb      	strb	r3, [r7, #23]
      break;
 800ee48:	bf00      	nop
  }

  return (uint8_t)ret;
 800ee4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3718      	adds	r7, #24
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	32b0      	adds	r2, #176	@ 0xb0
 800ee72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d101      	bne.n	800ee7e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ee7a:	2303      	movs	r3, #3
 800ee7c:	e065      	b.n	800ef4a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	32b0      	adds	r2, #176	@ 0xb0
 800ee88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ee8e:	78fb      	ldrb	r3, [r7, #3]
 800ee90:	f003 020f 	and.w	r2, r3, #15
 800ee94:	6879      	ldr	r1, [r7, #4]
 800ee96:	4613      	mov	r3, r2
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	4413      	add	r3, r2
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	440b      	add	r3, r1
 800eea0:	3318      	adds	r3, #24
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d02f      	beq.n	800ef08 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800eea8:	78fb      	ldrb	r3, [r7, #3]
 800eeaa:	f003 020f 	and.w	r2, r3, #15
 800eeae:	6879      	ldr	r1, [r7, #4]
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	4413      	add	r3, r2
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	440b      	add	r3, r1
 800eeba:	3318      	adds	r3, #24
 800eebc:	681a      	ldr	r2, [r3, #0]
 800eebe:	78fb      	ldrb	r3, [r7, #3]
 800eec0:	f003 010f 	and.w	r1, r3, #15
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	460b      	mov	r3, r1
 800eec8:	00db      	lsls	r3, r3, #3
 800eeca:	440b      	add	r3, r1
 800eecc:	009b      	lsls	r3, r3, #2
 800eece:	4403      	add	r3, r0
 800eed0:	331c      	adds	r3, #28
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	fbb2 f1f3 	udiv	r1, r2, r3
 800eed8:	fb01 f303 	mul.w	r3, r1, r3
 800eedc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d112      	bne.n	800ef08 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800eee2:	78fb      	ldrb	r3, [r7, #3]
 800eee4:	f003 020f 	and.w	r2, r3, #15
 800eee8:	6879      	ldr	r1, [r7, #4]
 800eeea:	4613      	mov	r3, r2
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	4413      	add	r3, r2
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	440b      	add	r3, r1
 800eef4:	3318      	adds	r3, #24
 800eef6:	2200      	movs	r2, #0
 800eef8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eefa:	78f9      	ldrb	r1, [r7, #3]
 800eefc:	2300      	movs	r3, #0
 800eefe:	2200      	movs	r2, #0
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f002 f9e2 	bl	80112ca <USBD_LL_Transmit>
 800ef06:	e01f      	b.n	800ef48 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	33b0      	adds	r3, #176	@ 0xb0
 800ef1a:	009b      	lsls	r3, r3, #2
 800ef1c:	4413      	add	r3, r2
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d010      	beq.n	800ef48 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	33b0      	adds	r3, #176	@ 0xb0
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	4413      	add	r3, r2
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	68ba      	ldr	r2, [r7, #8]
 800ef3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ef3e:	68ba      	ldr	r2, [r7, #8]
 800ef40:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ef44:	78fa      	ldrb	r2, [r7, #3]
 800ef46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b084      	sub	sp, #16
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	32b0      	adds	r2, #176	@ 0xb0
 800ef68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	32b0      	adds	r2, #176	@ 0xb0
 800ef78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d101      	bne.n	800ef84 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ef80:	2303      	movs	r3, #3
 800ef82:	e01a      	b.n	800efba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ef84:	78fb      	ldrb	r3, [r7, #3]
 800ef86:	4619      	mov	r1, r3
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f002 f9e0 	bl	801134e <USBD_LL_GetRxDataSize>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	33b0      	adds	r3, #176	@ 0xb0
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	4413      	add	r3, r2
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	68fa      	ldr	r2, [r7, #12]
 800efaa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800efae:	68fa      	ldr	r2, [r7, #12]
 800efb0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800efb4:	4611      	mov	r1, r2
 800efb6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800efb8:	2300      	movs	r3, #0
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3710      	adds	r7, #16
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800efc2:	b580      	push	{r7, lr}
 800efc4:	b084      	sub	sp, #16
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	32b0      	adds	r2, #176	@ 0xb0
 800efd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d101      	bne.n	800efe4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800efe0:	2303      	movs	r3, #3
 800efe2:	e024      	b.n	800f02e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	33b0      	adds	r3, #176	@ 0xb0
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	4413      	add	r3, r2
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d019      	beq.n	800f02c <USBD_CDC_EP0_RxReady+0x6a>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800effe:	2bff      	cmp	r3, #255	@ 0xff
 800f000:	d014      	beq.n	800f02c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	33b0      	adds	r3, #176	@ 0xb0
 800f00c:	009b      	lsls	r3, r3, #2
 800f00e:	4413      	add	r3, r2
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	689b      	ldr	r3, [r3, #8]
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f01a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f022:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	22ff      	movs	r2, #255	@ 0xff
 800f028:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f02c:	2300      	movs	r3, #0
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3710      	adds	r7, #16
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
	...

0800f038 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b086      	sub	sp, #24
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f040:	2182      	movs	r1, #130	@ 0x82
 800f042:	4818      	ldr	r0, [pc, #96]	@ (800f0a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f044:	f000 fd4f 	bl	800fae6 <USBD_GetEpDesc>
 800f048:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f04a:	2101      	movs	r1, #1
 800f04c:	4815      	ldr	r0, [pc, #84]	@ (800f0a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f04e:	f000 fd4a 	bl	800fae6 <USBD_GetEpDesc>
 800f052:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f054:	2181      	movs	r1, #129	@ 0x81
 800f056:	4813      	ldr	r0, [pc, #76]	@ (800f0a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f058:	f000 fd45 	bl	800fae6 <USBD_GetEpDesc>
 800f05c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d002      	beq.n	800f06a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	2210      	movs	r2, #16
 800f068:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d006      	beq.n	800f07e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	2200      	movs	r2, #0
 800f074:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f078:	711a      	strb	r2, [r3, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d006      	beq.n	800f092 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2200      	movs	r2, #0
 800f088:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f08c:	711a      	strb	r2, [r3, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2243      	movs	r2, #67	@ 0x43
 800f096:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f098:	4b02      	ldr	r3, [pc, #8]	@ (800f0a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3718      	adds	r7, #24
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	24000054 	.word	0x24000054

0800f0a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b086      	sub	sp, #24
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f0b0:	2182      	movs	r1, #130	@ 0x82
 800f0b2:	4818      	ldr	r0, [pc, #96]	@ (800f114 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f0b4:	f000 fd17 	bl	800fae6 <USBD_GetEpDesc>
 800f0b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f0ba:	2101      	movs	r1, #1
 800f0bc:	4815      	ldr	r0, [pc, #84]	@ (800f114 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f0be:	f000 fd12 	bl	800fae6 <USBD_GetEpDesc>
 800f0c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f0c4:	2181      	movs	r1, #129	@ 0x81
 800f0c6:	4813      	ldr	r0, [pc, #76]	@ (800f114 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f0c8:	f000 fd0d 	bl	800fae6 <USBD_GetEpDesc>
 800f0cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d002      	beq.n	800f0da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	2210      	movs	r2, #16
 800f0d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d006      	beq.n	800f0ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	711a      	strb	r2, [r3, #4]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	f042 0202 	orr.w	r2, r2, #2
 800f0ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d006      	beq.n	800f102 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	711a      	strb	r2, [r3, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f042 0202 	orr.w	r2, r2, #2
 800f100:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2243      	movs	r2, #67	@ 0x43
 800f106:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f108:	4b02      	ldr	r3, [pc, #8]	@ (800f114 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3718      	adds	r7, #24
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	24000054 	.word	0x24000054

0800f118 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b086      	sub	sp, #24
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f120:	2182      	movs	r1, #130	@ 0x82
 800f122:	4818      	ldr	r0, [pc, #96]	@ (800f184 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f124:	f000 fcdf 	bl	800fae6 <USBD_GetEpDesc>
 800f128:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f12a:	2101      	movs	r1, #1
 800f12c:	4815      	ldr	r0, [pc, #84]	@ (800f184 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f12e:	f000 fcda 	bl	800fae6 <USBD_GetEpDesc>
 800f132:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f134:	2181      	movs	r1, #129	@ 0x81
 800f136:	4813      	ldr	r0, [pc, #76]	@ (800f184 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f138:	f000 fcd5 	bl	800fae6 <USBD_GetEpDesc>
 800f13c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d002      	beq.n	800f14a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	2210      	movs	r2, #16
 800f148:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d006      	beq.n	800f15e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	2200      	movs	r2, #0
 800f154:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f158:	711a      	strb	r2, [r3, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d006      	beq.n	800f172 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	2200      	movs	r2, #0
 800f168:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f16c:	711a      	strb	r2, [r3, #4]
 800f16e:	2200      	movs	r2, #0
 800f170:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2243      	movs	r2, #67	@ 0x43
 800f176:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f178:	4b02      	ldr	r3, [pc, #8]	@ (800f184 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3718      	adds	r7, #24
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	24000054 	.word	0x24000054

0800f188 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f188:	b480      	push	{r7}
 800f18a:	b083      	sub	sp, #12
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	220a      	movs	r2, #10
 800f194:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f196:	4b03      	ldr	r3, [pc, #12]	@ (800f1a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f198:	4618      	mov	r0, r3
 800f19a:	370c      	adds	r7, #12
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr
 800f1a4:	24000010 	.word	0x24000010

0800f1a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d101      	bne.n	800f1bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f1b8:	2303      	movs	r3, #3
 800f1ba:	e009      	b.n	800f1d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	33b0      	adds	r3, #176	@ 0xb0
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	4413      	add	r3, r2
 800f1ca:	683a      	ldr	r2, [r7, #0]
 800f1cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	370c      	adds	r7, #12
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b087      	sub	sp, #28
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	32b0      	adds	r2, #176	@ 0xb0
 800f1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d101      	bne.n	800f202 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f1fe:	2303      	movs	r3, #3
 800f200:	e008      	b.n	800f214 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	68ba      	ldr	r2, [r7, #8]
 800f206:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	687a      	ldr	r2, [r7, #4]
 800f20e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f212:	2300      	movs	r3, #0
}
 800f214:	4618      	mov	r0, r3
 800f216:	371c      	adds	r7, #28
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f220:	b480      	push	{r7}
 800f222:	b085      	sub	sp, #20
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	32b0      	adds	r2, #176	@ 0xb0
 800f234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f238:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d101      	bne.n	800f244 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f240:	2303      	movs	r3, #3
 800f242:	e004      	b.n	800f24e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	683a      	ldr	r2, [r7, #0]
 800f248:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f24c:	2300      	movs	r3, #0
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3714      	adds	r7, #20
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr
	...

0800f25c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	32b0      	adds	r2, #176	@ 0xb0
 800f26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f272:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f274:	2301      	movs	r3, #1
 800f276:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d101      	bne.n	800f282 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f27e:	2303      	movs	r3, #3
 800f280:	e025      	b.n	800f2ce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d11f      	bne.n	800f2cc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	2201      	movs	r2, #1
 800f290:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f294:	4b10      	ldr	r3, [pc, #64]	@ (800f2d8 <USBD_CDC_TransmitPacket+0x7c>)
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	f003 020f 	and.w	r2, r3, #15
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	4613      	mov	r3, r2
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	4413      	add	r3, r2
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	4403      	add	r3, r0
 800f2ae:	3318      	adds	r3, #24
 800f2b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f2b2:	4b09      	ldr	r3, [pc, #36]	@ (800f2d8 <USBD_CDC_TransmitPacket+0x7c>)
 800f2b4:	7819      	ldrb	r1, [r3, #0]
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f002 f801 	bl	80112ca <USBD_LL_Transmit>

    ret = USBD_OK;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3710      	adds	r7, #16
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	24000097 	.word	0x24000097

0800f2dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	32b0      	adds	r2, #176	@ 0xb0
 800f2ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	32b0      	adds	r2, #176	@ 0xb0
 800f2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d101      	bne.n	800f30a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f306:	2303      	movs	r3, #3
 800f308:	e018      	b.n	800f33c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	7c1b      	ldrb	r3, [r3, #16]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d10a      	bne.n	800f328 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f312:	4b0c      	ldr	r3, [pc, #48]	@ (800f344 <USBD_CDC_ReceivePacket+0x68>)
 800f314:	7819      	ldrb	r1, [r3, #0]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f31c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f001 fff3 	bl	801130c <USBD_LL_PrepareReceive>
 800f326:	e008      	b.n	800f33a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f328:	4b06      	ldr	r3, [pc, #24]	@ (800f344 <USBD_CDC_ReceivePacket+0x68>)
 800f32a:	7819      	ldrb	r1, [r3, #0]
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f332:	2340      	movs	r3, #64	@ 0x40
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f001 ffe9 	bl	801130c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f33a:	2300      	movs	r3, #0
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3710      	adds	r7, #16
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}
 800f344:	24000098 	.word	0x24000098

0800f348 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b086      	sub	sp, #24
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	4613      	mov	r3, r2
 800f354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d101      	bne.n	800f360 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f35c:	2303      	movs	r3, #3
 800f35e:	e01f      	b.n	800f3a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2200      	movs	r2, #0
 800f364:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2200      	movs	r2, #0
 800f36c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2200      	movs	r2, #0
 800f374:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d003      	beq.n	800f386 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	68ba      	ldr	r2, [r7, #8]
 800f382:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2201      	movs	r2, #1
 800f38a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	79fa      	ldrb	r2, [r7, #7]
 800f392:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f001 fe5d 	bl	8011054 <USBD_LL_Init>
 800f39a:	4603      	mov	r3, r0
 800f39c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3718      	adds	r7, #24
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d101      	bne.n	800f3c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f3bc:	2303      	movs	r3, #3
 800f3be:	e025      	b.n	800f40c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	683a      	ldr	r2, [r7, #0]
 800f3c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	32ae      	adds	r2, #174	@ 0xae
 800f3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00f      	beq.n	800f3fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	32ae      	adds	r2, #174	@ 0xae
 800f3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ec:	f107 020e 	add.w	r2, r7, #14
 800f3f0:	4610      	mov	r0, r2
 800f3f2:	4798      	blx	r3
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f402:	1c5a      	adds	r2, r3, #1
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f40a:	2300      	movs	r3, #0
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f001 fe6b 	bl	80110f8 <USBD_LL_Start>
 800f422:	4603      	mov	r3, r0
}
 800f424:	4618      	mov	r0, r3
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f434:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f436:	4618      	mov	r0, r3
 800f438:	370c      	adds	r7, #12
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr

0800f442 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b084      	sub	sp, #16
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	460b      	mov	r3, r1
 800f44c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f44e:	2300      	movs	r3, #0
 800f450:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d009      	beq.n	800f470 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	78fa      	ldrb	r2, [r7, #3]
 800f466:	4611      	mov	r1, r2
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	4798      	blx	r3
 800f46c:	4603      	mov	r3, r0
 800f46e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f470:	7bfb      	ldrb	r3, [r7, #15]
}
 800f472:	4618      	mov	r0, r3
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b084      	sub	sp, #16
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
 800f482:	460b      	mov	r3, r1
 800f484:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f486:	2300      	movs	r3, #0
 800f488:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	78fa      	ldrb	r2, [r7, #3]
 800f494:	4611      	mov	r1, r2
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	4798      	blx	r3
 800f49a:	4603      	mov	r3, r0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d001      	beq.n	800f4a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f4a0:	2303      	movs	r3, #3
 800f4a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3710      	adds	r7, #16
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f4ae:	b580      	push	{r7, lr}
 800f4b0:	b084      	sub	sp, #16
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]
 800f4b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f4be:	6839      	ldr	r1, [r7, #0]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f001 f936 	bl	8010732 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f4e2:	f003 031f 	and.w	r3, r3, #31
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	d01a      	beq.n	800f520 <USBD_LL_SetupStage+0x72>
 800f4ea:	2b02      	cmp	r3, #2
 800f4ec:	d822      	bhi.n	800f534 <USBD_LL_SetupStage+0x86>
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d002      	beq.n	800f4f8 <USBD_LL_SetupStage+0x4a>
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	d00a      	beq.n	800f50c <USBD_LL_SetupStage+0x5e>
 800f4f6:	e01d      	b.n	800f534 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f4fe:	4619      	mov	r1, r3
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f000 fb63 	bl	800fbcc <USBD_StdDevReq>
 800f506:	4603      	mov	r3, r0
 800f508:	73fb      	strb	r3, [r7, #15]
      break;
 800f50a:	e020      	b.n	800f54e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f512:	4619      	mov	r1, r3
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f000 fbcb 	bl	800fcb0 <USBD_StdItfReq>
 800f51a:	4603      	mov	r3, r0
 800f51c:	73fb      	strb	r3, [r7, #15]
      break;
 800f51e:	e016      	b.n	800f54e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f526:	4619      	mov	r1, r3
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 fc2d 	bl	800fd88 <USBD_StdEPReq>
 800f52e:	4603      	mov	r3, r0
 800f530:	73fb      	strb	r3, [r7, #15]
      break;
 800f532:	e00c      	b.n	800f54e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f53a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	4619      	mov	r1, r3
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f001 fe38 	bl	80111b8 <USBD_LL_StallEP>
 800f548:	4603      	mov	r3, r0
 800f54a:	73fb      	strb	r3, [r7, #15]
      break;
 800f54c:	bf00      	nop
  }

  return ret;
 800f54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f550:	4618      	mov	r0, r3
 800f552:	3710      	adds	r7, #16
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}

0800f558 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	460b      	mov	r3, r1
 800f562:	607a      	str	r2, [r7, #4]
 800f564:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f566:	2300      	movs	r3, #0
 800f568:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f56a:	7afb      	ldrb	r3, [r7, #11]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d16e      	bne.n	800f64e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f576:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f57e:	2b03      	cmp	r3, #3
 800f580:	f040 8098 	bne.w	800f6b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	689a      	ldr	r2, [r3, #8]
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d913      	bls.n	800f5b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	689a      	ldr	r2, [r3, #8]
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	1ad2      	subs	r2, r2, r3
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	68da      	ldr	r2, [r3, #12]
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	689b      	ldr	r3, [r3, #8]
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	bf28      	it	cs
 800f5aa:	4613      	movcs	r3, r2
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	6879      	ldr	r1, [r7, #4]
 800f5b0:	68f8      	ldr	r0, [r7, #12]
 800f5b2:	f001 f9be 	bl	8010932 <USBD_CtlContinueRx>
 800f5b6:	e07d      	b.n	800f6b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f5be:	f003 031f 	and.w	r3, r3, #31
 800f5c2:	2b02      	cmp	r3, #2
 800f5c4:	d014      	beq.n	800f5f0 <USBD_LL_DataOutStage+0x98>
 800f5c6:	2b02      	cmp	r3, #2
 800f5c8:	d81d      	bhi.n	800f606 <USBD_LL_DataOutStage+0xae>
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d002      	beq.n	800f5d4 <USBD_LL_DataOutStage+0x7c>
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d003      	beq.n	800f5da <USBD_LL_DataOutStage+0x82>
 800f5d2:	e018      	b.n	800f606 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	75bb      	strb	r3, [r7, #22]
            break;
 800f5d8:	e018      	b.n	800f60c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f000 fa64 	bl	800fab2 <USBD_CoreFindIF>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	75bb      	strb	r3, [r7, #22]
            break;
 800f5ee:	e00d      	b.n	800f60c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f5f6:	b2db      	uxtb	r3, r3
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	f000 fa66 	bl	800facc <USBD_CoreFindEP>
 800f600:	4603      	mov	r3, r0
 800f602:	75bb      	strb	r3, [r7, #22]
            break;
 800f604:	e002      	b.n	800f60c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f606:	2300      	movs	r3, #0
 800f608:	75bb      	strb	r3, [r7, #22]
            break;
 800f60a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f60c:	7dbb      	ldrb	r3, [r7, #22]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d119      	bne.n	800f646 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	2b03      	cmp	r3, #3
 800f61c:	d113      	bne.n	800f646 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f61e:	7dba      	ldrb	r2, [r7, #22]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	32ae      	adds	r2, #174	@ 0xae
 800f624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f628:	691b      	ldr	r3, [r3, #16]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00b      	beq.n	800f646 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f62e:	7dba      	ldrb	r2, [r7, #22]
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f636:	7dba      	ldrb	r2, [r7, #22]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	32ae      	adds	r2, #174	@ 0xae
 800f63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f640:	691b      	ldr	r3, [r3, #16]
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f646:	68f8      	ldr	r0, [r7, #12]
 800f648:	f001 f984 	bl	8010954 <USBD_CtlSendStatus>
 800f64c:	e032      	b.n	800f6b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f64e:	7afb      	ldrb	r3, [r7, #11]
 800f650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f654:	b2db      	uxtb	r3, r3
 800f656:	4619      	mov	r1, r3
 800f658:	68f8      	ldr	r0, [r7, #12]
 800f65a:	f000 fa37 	bl	800facc <USBD_CoreFindEP>
 800f65e:	4603      	mov	r3, r0
 800f660:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f662:	7dbb      	ldrb	r3, [r7, #22]
 800f664:	2bff      	cmp	r3, #255	@ 0xff
 800f666:	d025      	beq.n	800f6b4 <USBD_LL_DataOutStage+0x15c>
 800f668:	7dbb      	ldrb	r3, [r7, #22]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d122      	bne.n	800f6b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f674:	b2db      	uxtb	r3, r3
 800f676:	2b03      	cmp	r3, #3
 800f678:	d117      	bne.n	800f6aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f67a:	7dba      	ldrb	r2, [r7, #22]
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	32ae      	adds	r2, #174	@ 0xae
 800f680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f684:	699b      	ldr	r3, [r3, #24]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d00f      	beq.n	800f6aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f68a:	7dba      	ldrb	r2, [r7, #22]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f692:	7dba      	ldrb	r2, [r7, #22]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	32ae      	adds	r2, #174	@ 0xae
 800f698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f69c:	699b      	ldr	r3, [r3, #24]
 800f69e:	7afa      	ldrb	r2, [r7, #11]
 800f6a0:	4611      	mov	r1, r2
 800f6a2:	68f8      	ldr	r0, [r7, #12]
 800f6a4:	4798      	blx	r3
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f6aa:	7dfb      	ldrb	r3, [r7, #23]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d001      	beq.n	800f6b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f6b0:	7dfb      	ldrb	r3, [r7, #23]
 800f6b2:	e000      	b.n	800f6b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3718      	adds	r7, #24
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b086      	sub	sp, #24
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	60f8      	str	r0, [r7, #12]
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	607a      	str	r2, [r7, #4]
 800f6ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f6cc:	7afb      	ldrb	r3, [r7, #11]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d16f      	bne.n	800f7b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	3314      	adds	r3, #20
 800f6d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f6de:	2b02      	cmp	r3, #2
 800f6e0:	d15a      	bne.n	800f798 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	689a      	ldr	r2, [r3, #8]
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d914      	bls.n	800f718 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	689a      	ldr	r2, [r3, #8]
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	1ad2      	subs	r2, r2, r3
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	689b      	ldr	r3, [r3, #8]
 800f700:	461a      	mov	r2, r3
 800f702:	6879      	ldr	r1, [r7, #4]
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f001 f8e6 	bl	80108d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f70a:	2300      	movs	r3, #0
 800f70c:	2200      	movs	r2, #0
 800f70e:	2100      	movs	r1, #0
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	f001 fdfb 	bl	801130c <USBD_LL_PrepareReceive>
 800f716:	e03f      	b.n	800f798 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	68da      	ldr	r2, [r3, #12]
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	689b      	ldr	r3, [r3, #8]
 800f720:	429a      	cmp	r2, r3
 800f722:	d11c      	bne.n	800f75e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	685a      	ldr	r2, [r3, #4]
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d316      	bcc.n	800f75e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	685a      	ldr	r2, [r3, #4]
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d20f      	bcs.n	800f75e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f73e:	2200      	movs	r2, #0
 800f740:	2100      	movs	r1, #0
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	f001 f8c7 	bl	80108d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f750:	2300      	movs	r3, #0
 800f752:	2200      	movs	r2, #0
 800f754:	2100      	movs	r1, #0
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	f001 fdd8 	bl	801130c <USBD_LL_PrepareReceive>
 800f75c:	e01c      	b.n	800f798 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f764:	b2db      	uxtb	r3, r3
 800f766:	2b03      	cmp	r3, #3
 800f768:	d10f      	bne.n	800f78a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f770:	68db      	ldr	r3, [r3, #12]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d009      	beq.n	800f78a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	2200      	movs	r2, #0
 800f77a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f784:	68db      	ldr	r3, [r3, #12]
 800f786:	68f8      	ldr	r0, [r7, #12]
 800f788:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f78a:	2180      	movs	r1, #128	@ 0x80
 800f78c:	68f8      	ldr	r0, [r7, #12]
 800f78e:	f001 fd13 	bl	80111b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f001 f8f1 	bl	801097a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d03a      	beq.n	800f818 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f7a2:	68f8      	ldr	r0, [r7, #12]
 800f7a4:	f7ff fe42 	bl	800f42c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f7b0:	e032      	b.n	800f818 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f7b2:	7afb      	ldrb	r3, [r7, #11]
 800f7b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f000 f985 	bl	800facc <USBD_CoreFindEP>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f7c6:	7dfb      	ldrb	r3, [r7, #23]
 800f7c8:	2bff      	cmp	r3, #255	@ 0xff
 800f7ca:	d025      	beq.n	800f818 <USBD_LL_DataInStage+0x15a>
 800f7cc:	7dfb      	ldrb	r3, [r7, #23]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d122      	bne.n	800f818 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	2b03      	cmp	r3, #3
 800f7dc:	d11c      	bne.n	800f818 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f7de:	7dfa      	ldrb	r2, [r7, #23]
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	32ae      	adds	r2, #174	@ 0xae
 800f7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7e8:	695b      	ldr	r3, [r3, #20]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d014      	beq.n	800f818 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f7ee:	7dfa      	ldrb	r2, [r7, #23]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f7f6:	7dfa      	ldrb	r2, [r7, #23]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	32ae      	adds	r2, #174	@ 0xae
 800f7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f800:	695b      	ldr	r3, [r3, #20]
 800f802:	7afa      	ldrb	r2, [r7, #11]
 800f804:	4611      	mov	r1, r2
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	4798      	blx	r3
 800f80a:	4603      	mov	r3, r0
 800f80c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f80e:	7dbb      	ldrb	r3, [r7, #22]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d001      	beq.n	800f818 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f814:	7dbb      	ldrb	r3, [r7, #22]
 800f816:	e000      	b.n	800f81a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f818:	2300      	movs	r3, #0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3718      	adds	r7, #24
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f822:	b580      	push	{r7, lr}
 800f824:	b084      	sub	sp, #16
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f82a:	2300      	movs	r3, #0
 800f82c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2201      	movs	r2, #1
 800f832:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2200      	movs	r2, #0
 800f83a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2200      	movs	r2, #0
 800f842:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2200      	movs	r2, #0
 800f848:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2200      	movs	r2, #0
 800f850:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d014      	beq.n	800f888 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d00e      	beq.n	800f888 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	6852      	ldr	r2, [r2, #4]
 800f876:	b2d2      	uxtb	r2, r2
 800f878:	4611      	mov	r1, r2
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	4798      	blx	r3
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d001      	beq.n	800f888 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f884:	2303      	movs	r3, #3
 800f886:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f888:	2340      	movs	r3, #64	@ 0x40
 800f88a:	2200      	movs	r2, #0
 800f88c:	2100      	movs	r1, #0
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f001 fc4d 	bl	801112e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2240      	movs	r2, #64	@ 0x40
 800f8a0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f8a4:	2340      	movs	r3, #64	@ 0x40
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	2180      	movs	r1, #128	@ 0x80
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f001 fc3f 	bl	801112e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2240      	movs	r2, #64	@ 0x40
 800f8ba:	621a      	str	r2, [r3, #32]

  return ret;
 800f8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3710      	adds	r7, #16
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}

0800f8c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f8c6:	b480      	push	{r7}
 800f8c8:	b083      	sub	sp, #12
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	78fa      	ldrb	r2, [r7, #3]
 800f8d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f8d8:	2300      	movs	r3, #0
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	370c      	adds	r7, #12
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr

0800f8e6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f8e6:	b480      	push	{r7}
 800f8e8:	b083      	sub	sp, #12
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	2b04      	cmp	r3, #4
 800f8f8:	d006      	beq.n	800f908 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f900:	b2da      	uxtb	r2, r3
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2204      	movs	r2, #4
 800f90c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	370c      	adds	r7, #12
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr

0800f91e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f91e:	b480      	push	{r7}
 800f920:	b083      	sub	sp, #12
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f92c:	b2db      	uxtb	r3, r3
 800f92e:	2b04      	cmp	r3, #4
 800f930:	d106      	bne.n	800f940 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f938:	b2da      	uxtb	r2, r3
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	370c      	adds	r7, #12
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr

0800f94e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b082      	sub	sp, #8
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	2b03      	cmp	r3, #3
 800f960:	d110      	bne.n	800f984 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d00b      	beq.n	800f984 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f972:	69db      	ldr	r3, [r3, #28]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d005      	beq.n	800f984 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f97e:	69db      	ldr	r3, [r3, #28]
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f984:	2300      	movs	r3, #0
}
 800f986:	4618      	mov	r0, r3
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}

0800f98e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f98e:	b580      	push	{r7, lr}
 800f990:	b082      	sub	sp, #8
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
 800f996:	460b      	mov	r3, r1
 800f998:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	32ae      	adds	r2, #174	@ 0xae
 800f9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d101      	bne.n	800f9b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f9ac:	2303      	movs	r3, #3
 800f9ae:	e01c      	b.n	800f9ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	2b03      	cmp	r3, #3
 800f9ba:	d115      	bne.n	800f9e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	32ae      	adds	r2, #174	@ 0xae
 800f9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ca:	6a1b      	ldr	r3, [r3, #32]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d00b      	beq.n	800f9e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	32ae      	adds	r2, #174	@ 0xae
 800f9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9de:	6a1b      	ldr	r3, [r3, #32]
 800f9e0:	78fa      	ldrb	r2, [r7, #3]
 800f9e2:	4611      	mov	r1, r2
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f9e8:	2300      	movs	r3, #0
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3708      	adds	r7, #8
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}

0800f9f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f9f2:	b580      	push	{r7, lr}
 800f9f4:	b082      	sub	sp, #8
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	6078      	str	r0, [r7, #4]
 800f9fa:	460b      	mov	r3, r1
 800f9fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	32ae      	adds	r2, #174	@ 0xae
 800fa08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d101      	bne.n	800fa14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800fa10:	2303      	movs	r3, #3
 800fa12:	e01c      	b.n	800fa4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	2b03      	cmp	r3, #3
 800fa1e:	d115      	bne.n	800fa4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	32ae      	adds	r2, #174	@ 0xae
 800fa2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00b      	beq.n	800fa4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	32ae      	adds	r2, #174	@ 0xae
 800fa3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa44:	78fa      	ldrb	r2, [r7, #3]
 800fa46:	4611      	mov	r1, r2
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fa4c:	2300      	movs	r3, #0
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3708      	adds	r7, #8
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fa56:	b480      	push	{r7}
 800fa58:	b083      	sub	sp, #12
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fa5e:	2300      	movs	r3, #0
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fa74:	2300      	movs	r3, #0
 800fa76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d00e      	beq.n	800faa8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	6852      	ldr	r2, [r2, #4]
 800fa96:	b2d2      	uxtb	r2, r2
 800fa98:	4611      	mov	r1, r2
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	4798      	blx	r3
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d001      	beq.n	800faa8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800faa4:	2303      	movs	r3, #3
 800faa6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800faa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3710      	adds	r7, #16
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}

0800fab2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fab2:	b480      	push	{r7}
 800fab4:	b083      	sub	sp, #12
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
 800faba:	460b      	mov	r3, r1
 800fabc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fabe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	370c      	adds	r7, #12
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr

0800facc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800facc:	b480      	push	{r7}
 800face:	b083      	sub	sp, #12
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	460b      	mov	r3, r1
 800fad6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fad8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fada:	4618      	mov	r0, r3
 800fadc:	370c      	adds	r7, #12
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b086      	sub	sp, #24
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
 800faee:	460b      	mov	r3, r1
 800faf0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800fafa:	2300      	movs	r3, #0
 800fafc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	885b      	ldrh	r3, [r3, #2]
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	68fa      	ldr	r2, [r7, #12]
 800fb06:	7812      	ldrb	r2, [r2, #0]
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d91f      	bls.n	800fb4c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800fb12:	e013      	b.n	800fb3c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800fb14:	f107 030a 	add.w	r3, r7, #10
 800fb18:	4619      	mov	r1, r3
 800fb1a:	6978      	ldr	r0, [r7, #20]
 800fb1c:	f000 f81b 	bl	800fb56 <USBD_GetNextDesc>
 800fb20:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	785b      	ldrb	r3, [r3, #1]
 800fb26:	2b05      	cmp	r3, #5
 800fb28:	d108      	bne.n	800fb3c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	789b      	ldrb	r3, [r3, #2]
 800fb32:	78fa      	ldrb	r2, [r7, #3]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d008      	beq.n	800fb4a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	885b      	ldrh	r3, [r3, #2]
 800fb40:	b29a      	uxth	r2, r3
 800fb42:	897b      	ldrh	r3, [r7, #10]
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d8e5      	bhi.n	800fb14 <USBD_GetEpDesc+0x2e>
 800fb48:	e000      	b.n	800fb4c <USBD_GetEpDesc+0x66>
          break;
 800fb4a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800fb4c:	693b      	ldr	r3, [r7, #16]
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3718      	adds	r7, #24
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}

0800fb56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800fb56:	b480      	push	{r7}
 800fb58:	b085      	sub	sp, #20
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
 800fb5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	7812      	ldrb	r2, [r2, #0]
 800fb6c:	4413      	add	r3, r2
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	461a      	mov	r2, r3
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fb80:	68fb      	ldr	r3, [r7, #12]
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3714      	adds	r7, #20
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr

0800fb8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fb8e:	b480      	push	{r7}
 800fb90:	b087      	sub	sp, #28
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	3301      	adds	r3, #1
 800fba4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fbac:	8a3b      	ldrh	r3, [r7, #16]
 800fbae:	021b      	lsls	r3, r3, #8
 800fbb0:	b21a      	sxth	r2, r3
 800fbb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	b21b      	sxth	r3, r3
 800fbba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fbbc:	89fb      	ldrh	r3, [r7, #14]
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	371c      	adds	r7, #28
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc8:	4770      	bx	lr
	...

0800fbcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fbe2:	2b40      	cmp	r3, #64	@ 0x40
 800fbe4:	d005      	beq.n	800fbf2 <USBD_StdDevReq+0x26>
 800fbe6:	2b40      	cmp	r3, #64	@ 0x40
 800fbe8:	d857      	bhi.n	800fc9a <USBD_StdDevReq+0xce>
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d00f      	beq.n	800fc0e <USBD_StdDevReq+0x42>
 800fbee:	2b20      	cmp	r3, #32
 800fbf0:	d153      	bne.n	800fc9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	32ae      	adds	r2, #174	@ 0xae
 800fbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc00:	689b      	ldr	r3, [r3, #8]
 800fc02:	6839      	ldr	r1, [r7, #0]
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	4798      	blx	r3
 800fc08:	4603      	mov	r3, r0
 800fc0a:	73fb      	strb	r3, [r7, #15]
      break;
 800fc0c:	e04a      	b.n	800fca4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	785b      	ldrb	r3, [r3, #1]
 800fc12:	2b09      	cmp	r3, #9
 800fc14:	d83b      	bhi.n	800fc8e <USBD_StdDevReq+0xc2>
 800fc16:	a201      	add	r2, pc, #4	@ (adr r2, 800fc1c <USBD_StdDevReq+0x50>)
 800fc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc1c:	0800fc71 	.word	0x0800fc71
 800fc20:	0800fc85 	.word	0x0800fc85
 800fc24:	0800fc8f 	.word	0x0800fc8f
 800fc28:	0800fc7b 	.word	0x0800fc7b
 800fc2c:	0800fc8f 	.word	0x0800fc8f
 800fc30:	0800fc4f 	.word	0x0800fc4f
 800fc34:	0800fc45 	.word	0x0800fc45
 800fc38:	0800fc8f 	.word	0x0800fc8f
 800fc3c:	0800fc67 	.word	0x0800fc67
 800fc40:	0800fc59 	.word	0x0800fc59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fc44:	6839      	ldr	r1, [r7, #0]
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 fa3c 	bl	80100c4 <USBD_GetDescriptor>
          break;
 800fc4c:	e024      	b.n	800fc98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fc4e:	6839      	ldr	r1, [r7, #0]
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f000 fbcb 	bl	80103ec <USBD_SetAddress>
          break;
 800fc56:	e01f      	b.n	800fc98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fc58:	6839      	ldr	r1, [r7, #0]
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 fc0a 	bl	8010474 <USBD_SetConfig>
 800fc60:	4603      	mov	r3, r0
 800fc62:	73fb      	strb	r3, [r7, #15]
          break;
 800fc64:	e018      	b.n	800fc98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fc66:	6839      	ldr	r1, [r7, #0]
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f000 fcad 	bl	80105c8 <USBD_GetConfig>
          break;
 800fc6e:	e013      	b.n	800fc98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fc70:	6839      	ldr	r1, [r7, #0]
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 fcde 	bl	8010634 <USBD_GetStatus>
          break;
 800fc78:	e00e      	b.n	800fc98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fc7a:	6839      	ldr	r1, [r7, #0]
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f000 fd0d 	bl	801069c <USBD_SetFeature>
          break;
 800fc82:	e009      	b.n	800fc98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fc84:	6839      	ldr	r1, [r7, #0]
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 fd31 	bl	80106ee <USBD_ClrFeature>
          break;
 800fc8c:	e004      	b.n	800fc98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800fc8e:	6839      	ldr	r1, [r7, #0]
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f000 fd88 	bl	80107a6 <USBD_CtlError>
          break;
 800fc96:	bf00      	nop
      }
      break;
 800fc98:	e004      	b.n	800fca4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800fc9a:	6839      	ldr	r1, [r7, #0]
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f000 fd82 	bl	80107a6 <USBD_CtlError>
      break;
 800fca2:	bf00      	nop
  }

  return ret;
 800fca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop

0800fcb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fcc6:	2b40      	cmp	r3, #64	@ 0x40
 800fcc8:	d005      	beq.n	800fcd6 <USBD_StdItfReq+0x26>
 800fcca:	2b40      	cmp	r3, #64	@ 0x40
 800fccc:	d852      	bhi.n	800fd74 <USBD_StdItfReq+0xc4>
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d001      	beq.n	800fcd6 <USBD_StdItfReq+0x26>
 800fcd2:	2b20      	cmp	r3, #32
 800fcd4:	d14e      	bne.n	800fd74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	3b01      	subs	r3, #1
 800fce0:	2b02      	cmp	r3, #2
 800fce2:	d840      	bhi.n	800fd66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	889b      	ldrh	r3, [r3, #4]
 800fce8:	b2db      	uxtb	r3, r3
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d836      	bhi.n	800fd5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	889b      	ldrh	r3, [r3, #4]
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f7ff fedb 	bl	800fab2 <USBD_CoreFindIF>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fd00:	7bbb      	ldrb	r3, [r7, #14]
 800fd02:	2bff      	cmp	r3, #255	@ 0xff
 800fd04:	d01d      	beq.n	800fd42 <USBD_StdItfReq+0x92>
 800fd06:	7bbb      	ldrb	r3, [r7, #14]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d11a      	bne.n	800fd42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800fd0c:	7bba      	ldrb	r2, [r7, #14]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	32ae      	adds	r2, #174	@ 0xae
 800fd12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd16:	689b      	ldr	r3, [r3, #8]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d00f      	beq.n	800fd3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800fd1c:	7bba      	ldrb	r2, [r7, #14]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fd24:	7bba      	ldrb	r2, [r7, #14]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	32ae      	adds	r2, #174	@ 0xae
 800fd2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd2e:	689b      	ldr	r3, [r3, #8]
 800fd30:	6839      	ldr	r1, [r7, #0]
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	4798      	blx	r3
 800fd36:	4603      	mov	r3, r0
 800fd38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fd3a:	e004      	b.n	800fd46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800fd3c:	2303      	movs	r3, #3
 800fd3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fd40:	e001      	b.n	800fd46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800fd42:	2303      	movs	r3, #3
 800fd44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	88db      	ldrh	r3, [r3, #6]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d110      	bne.n	800fd70 <USBD_StdItfReq+0xc0>
 800fd4e:	7bfb      	ldrb	r3, [r7, #15]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d10d      	bne.n	800fd70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f000 fdfd 	bl	8010954 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fd5a:	e009      	b.n	800fd70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800fd5c:	6839      	ldr	r1, [r7, #0]
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 fd21 	bl	80107a6 <USBD_CtlError>
          break;
 800fd64:	e004      	b.n	800fd70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800fd66:	6839      	ldr	r1, [r7, #0]
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 fd1c 	bl	80107a6 <USBD_CtlError>
          break;
 800fd6e:	e000      	b.n	800fd72 <USBD_StdItfReq+0xc2>
          break;
 800fd70:	bf00      	nop
      }
      break;
 800fd72:	e004      	b.n	800fd7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800fd74:	6839      	ldr	r1, [r7, #0]
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 fd15 	bl	80107a6 <USBD_CtlError>
      break;
 800fd7c:	bf00      	nop
  }

  return ret;
 800fd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3710      	adds	r7, #16
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800fd92:	2300      	movs	r3, #0
 800fd94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	889b      	ldrh	r3, [r3, #4]
 800fd9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fda4:	2b40      	cmp	r3, #64	@ 0x40
 800fda6:	d007      	beq.n	800fdb8 <USBD_StdEPReq+0x30>
 800fda8:	2b40      	cmp	r3, #64	@ 0x40
 800fdaa:	f200 817f 	bhi.w	80100ac <USBD_StdEPReq+0x324>
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d02a      	beq.n	800fe08 <USBD_StdEPReq+0x80>
 800fdb2:	2b20      	cmp	r3, #32
 800fdb4:	f040 817a 	bne.w	80100ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800fdb8:	7bbb      	ldrb	r3, [r7, #14]
 800fdba:	4619      	mov	r1, r3
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f7ff fe85 	bl	800facc <USBD_CoreFindEP>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fdc6:	7b7b      	ldrb	r3, [r7, #13]
 800fdc8:	2bff      	cmp	r3, #255	@ 0xff
 800fdca:	f000 8174 	beq.w	80100b6 <USBD_StdEPReq+0x32e>
 800fdce:	7b7b      	ldrb	r3, [r7, #13]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	f040 8170 	bne.w	80100b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800fdd6:	7b7a      	ldrb	r2, [r7, #13]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800fdde:	7b7a      	ldrb	r2, [r7, #13]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	32ae      	adds	r2, #174	@ 0xae
 800fde4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fde8:	689b      	ldr	r3, [r3, #8]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	f000 8163 	beq.w	80100b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800fdf0:	7b7a      	ldrb	r2, [r7, #13]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	32ae      	adds	r2, #174	@ 0xae
 800fdf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	6839      	ldr	r1, [r7, #0]
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	4798      	blx	r3
 800fe02:	4603      	mov	r3, r0
 800fe04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fe06:	e156      	b.n	80100b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	785b      	ldrb	r3, [r3, #1]
 800fe0c:	2b03      	cmp	r3, #3
 800fe0e:	d008      	beq.n	800fe22 <USBD_StdEPReq+0x9a>
 800fe10:	2b03      	cmp	r3, #3
 800fe12:	f300 8145 	bgt.w	80100a0 <USBD_StdEPReq+0x318>
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	f000 809b 	beq.w	800ff52 <USBD_StdEPReq+0x1ca>
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d03c      	beq.n	800fe9a <USBD_StdEPReq+0x112>
 800fe20:	e13e      	b.n	80100a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	2b02      	cmp	r3, #2
 800fe2c:	d002      	beq.n	800fe34 <USBD_StdEPReq+0xac>
 800fe2e:	2b03      	cmp	r3, #3
 800fe30:	d016      	beq.n	800fe60 <USBD_StdEPReq+0xd8>
 800fe32:	e02c      	b.n	800fe8e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe34:	7bbb      	ldrb	r3, [r7, #14]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d00d      	beq.n	800fe56 <USBD_StdEPReq+0xce>
 800fe3a:	7bbb      	ldrb	r3, [r7, #14]
 800fe3c:	2b80      	cmp	r3, #128	@ 0x80
 800fe3e:	d00a      	beq.n	800fe56 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fe40:	7bbb      	ldrb	r3, [r7, #14]
 800fe42:	4619      	mov	r1, r3
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f001 f9b7 	bl	80111b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe4a:	2180      	movs	r1, #128	@ 0x80
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f001 f9b3 	bl	80111b8 <USBD_LL_StallEP>
 800fe52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fe54:	e020      	b.n	800fe98 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800fe56:	6839      	ldr	r1, [r7, #0]
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f000 fca4 	bl	80107a6 <USBD_CtlError>
              break;
 800fe5e:	e01b      	b.n	800fe98 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	885b      	ldrh	r3, [r3, #2]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d10e      	bne.n	800fe86 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fe68:	7bbb      	ldrb	r3, [r7, #14]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d00b      	beq.n	800fe86 <USBD_StdEPReq+0xfe>
 800fe6e:	7bbb      	ldrb	r3, [r7, #14]
 800fe70:	2b80      	cmp	r3, #128	@ 0x80
 800fe72:	d008      	beq.n	800fe86 <USBD_StdEPReq+0xfe>
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	88db      	ldrh	r3, [r3, #6]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d104      	bne.n	800fe86 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fe7c:	7bbb      	ldrb	r3, [r7, #14]
 800fe7e:	4619      	mov	r1, r3
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f001 f999 	bl	80111b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 fd64 	bl	8010954 <USBD_CtlSendStatus>

              break;
 800fe8c:	e004      	b.n	800fe98 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800fe8e:	6839      	ldr	r1, [r7, #0]
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f000 fc88 	bl	80107a6 <USBD_CtlError>
              break;
 800fe96:	bf00      	nop
          }
          break;
 800fe98:	e107      	b.n	80100aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	2b02      	cmp	r3, #2
 800fea4:	d002      	beq.n	800feac <USBD_StdEPReq+0x124>
 800fea6:	2b03      	cmp	r3, #3
 800fea8:	d016      	beq.n	800fed8 <USBD_StdEPReq+0x150>
 800feaa:	e04b      	b.n	800ff44 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800feac:	7bbb      	ldrb	r3, [r7, #14]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d00d      	beq.n	800fece <USBD_StdEPReq+0x146>
 800feb2:	7bbb      	ldrb	r3, [r7, #14]
 800feb4:	2b80      	cmp	r3, #128	@ 0x80
 800feb6:	d00a      	beq.n	800fece <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800feb8:	7bbb      	ldrb	r3, [r7, #14]
 800feba:	4619      	mov	r1, r3
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f001 f97b 	bl	80111b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fec2:	2180      	movs	r1, #128	@ 0x80
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f001 f977 	bl	80111b8 <USBD_LL_StallEP>
 800feca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fecc:	e040      	b.n	800ff50 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800fece:	6839      	ldr	r1, [r7, #0]
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 fc68 	bl	80107a6 <USBD_CtlError>
              break;
 800fed6:	e03b      	b.n	800ff50 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	885b      	ldrh	r3, [r3, #2]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d136      	bne.n	800ff4e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fee0:	7bbb      	ldrb	r3, [r7, #14]
 800fee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d004      	beq.n	800fef4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800feea:	7bbb      	ldrb	r3, [r7, #14]
 800feec:	4619      	mov	r1, r3
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f001 f981 	bl	80111f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f000 fd2d 	bl	8010954 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800fefa:	7bbb      	ldrb	r3, [r7, #14]
 800fefc:	4619      	mov	r1, r3
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f7ff fde4 	bl	800facc <USBD_CoreFindEP>
 800ff04:	4603      	mov	r3, r0
 800ff06:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ff08:	7b7b      	ldrb	r3, [r7, #13]
 800ff0a:	2bff      	cmp	r3, #255	@ 0xff
 800ff0c:	d01f      	beq.n	800ff4e <USBD_StdEPReq+0x1c6>
 800ff0e:	7b7b      	ldrb	r3, [r7, #13]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d11c      	bne.n	800ff4e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ff14:	7b7a      	ldrb	r2, [r7, #13]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ff1c:	7b7a      	ldrb	r2, [r7, #13]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	32ae      	adds	r2, #174	@ 0xae
 800ff22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff26:	689b      	ldr	r3, [r3, #8]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d010      	beq.n	800ff4e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ff2c:	7b7a      	ldrb	r2, [r7, #13]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	32ae      	adds	r2, #174	@ 0xae
 800ff32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff36:	689b      	ldr	r3, [r3, #8]
 800ff38:	6839      	ldr	r1, [r7, #0]
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	4798      	blx	r3
 800ff3e:	4603      	mov	r3, r0
 800ff40:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ff42:	e004      	b.n	800ff4e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ff44:	6839      	ldr	r1, [r7, #0]
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 fc2d 	bl	80107a6 <USBD_CtlError>
              break;
 800ff4c:	e000      	b.n	800ff50 <USBD_StdEPReq+0x1c8>
              break;
 800ff4e:	bf00      	nop
          }
          break;
 800ff50:	e0ab      	b.n	80100aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d002      	beq.n	800ff64 <USBD_StdEPReq+0x1dc>
 800ff5e:	2b03      	cmp	r3, #3
 800ff60:	d032      	beq.n	800ffc8 <USBD_StdEPReq+0x240>
 800ff62:	e097      	b.n	8010094 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff64:	7bbb      	ldrb	r3, [r7, #14]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d007      	beq.n	800ff7a <USBD_StdEPReq+0x1f2>
 800ff6a:	7bbb      	ldrb	r3, [r7, #14]
 800ff6c:	2b80      	cmp	r3, #128	@ 0x80
 800ff6e:	d004      	beq.n	800ff7a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ff70:	6839      	ldr	r1, [r7, #0]
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 fc17 	bl	80107a6 <USBD_CtlError>
                break;
 800ff78:	e091      	b.n	801009e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	da0b      	bge.n	800ff9a <USBD_StdEPReq+0x212>
 800ff82:	7bbb      	ldrb	r3, [r7, #14]
 800ff84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ff88:	4613      	mov	r3, r2
 800ff8a:	009b      	lsls	r3, r3, #2
 800ff8c:	4413      	add	r3, r2
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	3310      	adds	r3, #16
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	4413      	add	r3, r2
 800ff96:	3304      	adds	r3, #4
 800ff98:	e00b      	b.n	800ffb2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ff9a:	7bbb      	ldrb	r3, [r7, #14]
 800ff9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffa0:	4613      	mov	r3, r2
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	4413      	add	r3, r2
 800ffa6:	009b      	lsls	r3, r3, #2
 800ffa8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	4413      	add	r3, r2
 800ffb0:	3304      	adds	r3, #4
 800ffb2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	2202      	movs	r2, #2
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f000 fc6d 	bl	80108a0 <USBD_CtlSendData>
              break;
 800ffc6:	e06a      	b.n	801009e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ffc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	da11      	bge.n	800fff4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ffd0:	7bbb      	ldrb	r3, [r7, #14]
 800ffd2:	f003 020f 	and.w	r2, r3, #15
 800ffd6:	6879      	ldr	r1, [r7, #4]
 800ffd8:	4613      	mov	r3, r2
 800ffda:	009b      	lsls	r3, r3, #2
 800ffdc:	4413      	add	r3, r2
 800ffde:	009b      	lsls	r3, r3, #2
 800ffe0:	440b      	add	r3, r1
 800ffe2:	3324      	adds	r3, #36	@ 0x24
 800ffe4:	881b      	ldrh	r3, [r3, #0]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d117      	bne.n	801001a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ffea:	6839      	ldr	r1, [r7, #0]
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f000 fbda 	bl	80107a6 <USBD_CtlError>
                  break;
 800fff2:	e054      	b.n	801009e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fff4:	7bbb      	ldrb	r3, [r7, #14]
 800fff6:	f003 020f 	and.w	r2, r3, #15
 800fffa:	6879      	ldr	r1, [r7, #4]
 800fffc:	4613      	mov	r3, r2
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	4413      	add	r3, r2
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	440b      	add	r3, r1
 8010006:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801000a:	881b      	ldrh	r3, [r3, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d104      	bne.n	801001a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010010:	6839      	ldr	r1, [r7, #0]
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f000 fbc7 	bl	80107a6 <USBD_CtlError>
                  break;
 8010018:	e041      	b.n	801009e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801001a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801001e:	2b00      	cmp	r3, #0
 8010020:	da0b      	bge.n	801003a <USBD_StdEPReq+0x2b2>
 8010022:	7bbb      	ldrb	r3, [r7, #14]
 8010024:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010028:	4613      	mov	r3, r2
 801002a:	009b      	lsls	r3, r3, #2
 801002c:	4413      	add	r3, r2
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	3310      	adds	r3, #16
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	4413      	add	r3, r2
 8010036:	3304      	adds	r3, #4
 8010038:	e00b      	b.n	8010052 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801003a:	7bbb      	ldrb	r3, [r7, #14]
 801003c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010040:	4613      	mov	r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	4413      	add	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	4413      	add	r3, r2
 8010050:	3304      	adds	r3, #4
 8010052:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010054:	7bbb      	ldrb	r3, [r7, #14]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d002      	beq.n	8010060 <USBD_StdEPReq+0x2d8>
 801005a:	7bbb      	ldrb	r3, [r7, #14]
 801005c:	2b80      	cmp	r3, #128	@ 0x80
 801005e:	d103      	bne.n	8010068 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	2200      	movs	r2, #0
 8010064:	601a      	str	r2, [r3, #0]
 8010066:	e00e      	b.n	8010086 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010068:	7bbb      	ldrb	r3, [r7, #14]
 801006a:	4619      	mov	r1, r3
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f001 f8e1 	bl	8011234 <USBD_LL_IsStallEP>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d003      	beq.n	8010080 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	2201      	movs	r2, #1
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	e002      	b.n	8010086 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	2200      	movs	r2, #0
 8010084:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	2202      	movs	r2, #2
 801008a:	4619      	mov	r1, r3
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f000 fc07 	bl	80108a0 <USBD_CtlSendData>
              break;
 8010092:	e004      	b.n	801009e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010094:	6839      	ldr	r1, [r7, #0]
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 fb85 	bl	80107a6 <USBD_CtlError>
              break;
 801009c:	bf00      	nop
          }
          break;
 801009e:	e004      	b.n	80100aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80100a0:	6839      	ldr	r1, [r7, #0]
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 fb7f 	bl	80107a6 <USBD_CtlError>
          break;
 80100a8:	bf00      	nop
      }
      break;
 80100aa:	e005      	b.n	80100b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80100ac:	6839      	ldr	r1, [r7, #0]
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 fb79 	bl	80107a6 <USBD_CtlError>
      break;
 80100b4:	e000      	b.n	80100b8 <USBD_StdEPReq+0x330>
      break;
 80100b6:	bf00      	nop
  }

  return ret;
 80100b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3710      	adds	r7, #16
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
	...

080100c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80100ce:	2300      	movs	r3, #0
 80100d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80100d2:	2300      	movs	r3, #0
 80100d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80100d6:	2300      	movs	r3, #0
 80100d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	885b      	ldrh	r3, [r3, #2]
 80100de:	0a1b      	lsrs	r3, r3, #8
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	3b01      	subs	r3, #1
 80100e4:	2b0e      	cmp	r3, #14
 80100e6:	f200 8152 	bhi.w	801038e <USBD_GetDescriptor+0x2ca>
 80100ea:	a201      	add	r2, pc, #4	@ (adr r2, 80100f0 <USBD_GetDescriptor+0x2c>)
 80100ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f0:	08010161 	.word	0x08010161
 80100f4:	08010179 	.word	0x08010179
 80100f8:	080101b9 	.word	0x080101b9
 80100fc:	0801038f 	.word	0x0801038f
 8010100:	0801038f 	.word	0x0801038f
 8010104:	0801032f 	.word	0x0801032f
 8010108:	0801035b 	.word	0x0801035b
 801010c:	0801038f 	.word	0x0801038f
 8010110:	0801038f 	.word	0x0801038f
 8010114:	0801038f 	.word	0x0801038f
 8010118:	0801038f 	.word	0x0801038f
 801011c:	0801038f 	.word	0x0801038f
 8010120:	0801038f 	.word	0x0801038f
 8010124:	0801038f 	.word	0x0801038f
 8010128:	0801012d 	.word	0x0801012d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010132:	69db      	ldr	r3, [r3, #28]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d00b      	beq.n	8010150 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801013e:	69db      	ldr	r3, [r3, #28]
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	7c12      	ldrb	r2, [r2, #16]
 8010144:	f107 0108 	add.w	r1, r7, #8
 8010148:	4610      	mov	r0, r2
 801014a:	4798      	blx	r3
 801014c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801014e:	e126      	b.n	801039e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010150:	6839      	ldr	r1, [r7, #0]
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f000 fb27 	bl	80107a6 <USBD_CtlError>
        err++;
 8010158:	7afb      	ldrb	r3, [r7, #11]
 801015a:	3301      	adds	r3, #1
 801015c:	72fb      	strb	r3, [r7, #11]
      break;
 801015e:	e11e      	b.n	801039e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	7c12      	ldrb	r2, [r2, #16]
 801016c:	f107 0108 	add.w	r1, r7, #8
 8010170:	4610      	mov	r0, r2
 8010172:	4798      	blx	r3
 8010174:	60f8      	str	r0, [r7, #12]
      break;
 8010176:	e112      	b.n	801039e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	7c1b      	ldrb	r3, [r3, #16]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d10d      	bne.n	801019c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010188:	f107 0208 	add.w	r2, r7, #8
 801018c:	4610      	mov	r0, r2
 801018e:	4798      	blx	r3
 8010190:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	3301      	adds	r3, #1
 8010196:	2202      	movs	r2, #2
 8010198:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801019a:	e100      	b.n	801039e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101a4:	f107 0208 	add.w	r2, r7, #8
 80101a8:	4610      	mov	r0, r2
 80101aa:	4798      	blx	r3
 80101ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	3301      	adds	r3, #1
 80101b2:	2202      	movs	r2, #2
 80101b4:	701a      	strb	r2, [r3, #0]
      break;
 80101b6:	e0f2      	b.n	801039e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	885b      	ldrh	r3, [r3, #2]
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	2b05      	cmp	r3, #5
 80101c0:	f200 80ac 	bhi.w	801031c <USBD_GetDescriptor+0x258>
 80101c4:	a201      	add	r2, pc, #4	@ (adr r2, 80101cc <USBD_GetDescriptor+0x108>)
 80101c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ca:	bf00      	nop
 80101cc:	080101e5 	.word	0x080101e5
 80101d0:	08010219 	.word	0x08010219
 80101d4:	0801024d 	.word	0x0801024d
 80101d8:	08010281 	.word	0x08010281
 80101dc:	080102b5 	.word	0x080102b5
 80101e0:	080102e9 	.word	0x080102e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d00b      	beq.n	8010208 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80101f6:	685b      	ldr	r3, [r3, #4]
 80101f8:	687a      	ldr	r2, [r7, #4]
 80101fa:	7c12      	ldrb	r2, [r2, #16]
 80101fc:	f107 0108 	add.w	r1, r7, #8
 8010200:	4610      	mov	r0, r2
 8010202:	4798      	blx	r3
 8010204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010206:	e091      	b.n	801032c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010208:	6839      	ldr	r1, [r7, #0]
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 facb 	bl	80107a6 <USBD_CtlError>
            err++;
 8010210:	7afb      	ldrb	r3, [r7, #11]
 8010212:	3301      	adds	r3, #1
 8010214:	72fb      	strb	r3, [r7, #11]
          break;
 8010216:	e089      	b.n	801032c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801021e:	689b      	ldr	r3, [r3, #8]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d00b      	beq.n	801023c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801022a:	689b      	ldr	r3, [r3, #8]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	7c12      	ldrb	r2, [r2, #16]
 8010230:	f107 0108 	add.w	r1, r7, #8
 8010234:	4610      	mov	r0, r2
 8010236:	4798      	blx	r3
 8010238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801023a:	e077      	b.n	801032c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801023c:	6839      	ldr	r1, [r7, #0]
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f000 fab1 	bl	80107a6 <USBD_CtlError>
            err++;
 8010244:	7afb      	ldrb	r3, [r7, #11]
 8010246:	3301      	adds	r3, #1
 8010248:	72fb      	strb	r3, [r7, #11]
          break;
 801024a:	e06f      	b.n	801032c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d00b      	beq.n	8010270 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	7c12      	ldrb	r2, [r2, #16]
 8010264:	f107 0108 	add.w	r1, r7, #8
 8010268:	4610      	mov	r0, r2
 801026a:	4798      	blx	r3
 801026c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801026e:	e05d      	b.n	801032c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010270:	6839      	ldr	r1, [r7, #0]
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 fa97 	bl	80107a6 <USBD_CtlError>
            err++;
 8010278:	7afb      	ldrb	r3, [r7, #11]
 801027a:	3301      	adds	r3, #1
 801027c:	72fb      	strb	r3, [r7, #11]
          break;
 801027e:	e055      	b.n	801032c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010286:	691b      	ldr	r3, [r3, #16]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d00b      	beq.n	80102a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010292:	691b      	ldr	r3, [r3, #16]
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	7c12      	ldrb	r2, [r2, #16]
 8010298:	f107 0108 	add.w	r1, r7, #8
 801029c:	4610      	mov	r0, r2
 801029e:	4798      	blx	r3
 80102a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102a2:	e043      	b.n	801032c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80102a4:	6839      	ldr	r1, [r7, #0]
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 fa7d 	bl	80107a6 <USBD_CtlError>
            err++;
 80102ac:	7afb      	ldrb	r3, [r7, #11]
 80102ae:	3301      	adds	r3, #1
 80102b0:	72fb      	strb	r3, [r7, #11]
          break;
 80102b2:	e03b      	b.n	801032c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80102ba:	695b      	ldr	r3, [r3, #20]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d00b      	beq.n	80102d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80102c6:	695b      	ldr	r3, [r3, #20]
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	7c12      	ldrb	r2, [r2, #16]
 80102cc:	f107 0108 	add.w	r1, r7, #8
 80102d0:	4610      	mov	r0, r2
 80102d2:	4798      	blx	r3
 80102d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102d6:	e029      	b.n	801032c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80102d8:	6839      	ldr	r1, [r7, #0]
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f000 fa63 	bl	80107a6 <USBD_CtlError>
            err++;
 80102e0:	7afb      	ldrb	r3, [r7, #11]
 80102e2:	3301      	adds	r3, #1
 80102e4:	72fb      	strb	r3, [r7, #11]
          break;
 80102e6:	e021      	b.n	801032c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80102ee:	699b      	ldr	r3, [r3, #24]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00b      	beq.n	801030c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80102fa:	699b      	ldr	r3, [r3, #24]
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	7c12      	ldrb	r2, [r2, #16]
 8010300:	f107 0108 	add.w	r1, r7, #8
 8010304:	4610      	mov	r0, r2
 8010306:	4798      	blx	r3
 8010308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801030a:	e00f      	b.n	801032c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801030c:	6839      	ldr	r1, [r7, #0]
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 fa49 	bl	80107a6 <USBD_CtlError>
            err++;
 8010314:	7afb      	ldrb	r3, [r7, #11]
 8010316:	3301      	adds	r3, #1
 8010318:	72fb      	strb	r3, [r7, #11]
          break;
 801031a:	e007      	b.n	801032c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801031c:	6839      	ldr	r1, [r7, #0]
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 fa41 	bl	80107a6 <USBD_CtlError>
          err++;
 8010324:	7afb      	ldrb	r3, [r7, #11]
 8010326:	3301      	adds	r3, #1
 8010328:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801032a:	bf00      	nop
      }
      break;
 801032c:	e037      	b.n	801039e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	7c1b      	ldrb	r3, [r3, #16]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d109      	bne.n	801034a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801033c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801033e:	f107 0208 	add.w	r2, r7, #8
 8010342:	4610      	mov	r0, r2
 8010344:	4798      	blx	r3
 8010346:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010348:	e029      	b.n	801039e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801034a:	6839      	ldr	r1, [r7, #0]
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f000 fa2a 	bl	80107a6 <USBD_CtlError>
        err++;
 8010352:	7afb      	ldrb	r3, [r7, #11]
 8010354:	3301      	adds	r3, #1
 8010356:	72fb      	strb	r3, [r7, #11]
      break;
 8010358:	e021      	b.n	801039e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	7c1b      	ldrb	r3, [r3, #16]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d10d      	bne.n	801037e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801036a:	f107 0208 	add.w	r2, r7, #8
 801036e:	4610      	mov	r0, r2
 8010370:	4798      	blx	r3
 8010372:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	3301      	adds	r3, #1
 8010378:	2207      	movs	r2, #7
 801037a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801037c:	e00f      	b.n	801039e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801037e:	6839      	ldr	r1, [r7, #0]
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 fa10 	bl	80107a6 <USBD_CtlError>
        err++;
 8010386:	7afb      	ldrb	r3, [r7, #11]
 8010388:	3301      	adds	r3, #1
 801038a:	72fb      	strb	r3, [r7, #11]
      break;
 801038c:	e007      	b.n	801039e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801038e:	6839      	ldr	r1, [r7, #0]
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 fa08 	bl	80107a6 <USBD_CtlError>
      err++;
 8010396:	7afb      	ldrb	r3, [r7, #11]
 8010398:	3301      	adds	r3, #1
 801039a:	72fb      	strb	r3, [r7, #11]
      break;
 801039c:	bf00      	nop
  }

  if (err != 0U)
 801039e:	7afb      	ldrb	r3, [r7, #11]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d11e      	bne.n	80103e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	88db      	ldrh	r3, [r3, #6]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d016      	beq.n	80103da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80103ac:	893b      	ldrh	r3, [r7, #8]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d00e      	beq.n	80103d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	88da      	ldrh	r2, [r3, #6]
 80103b6:	893b      	ldrh	r3, [r7, #8]
 80103b8:	4293      	cmp	r3, r2
 80103ba:	bf28      	it	cs
 80103bc:	4613      	movcs	r3, r2
 80103be:	b29b      	uxth	r3, r3
 80103c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80103c2:	893b      	ldrh	r3, [r7, #8]
 80103c4:	461a      	mov	r2, r3
 80103c6:	68f9      	ldr	r1, [r7, #12]
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f000 fa69 	bl	80108a0 <USBD_CtlSendData>
 80103ce:	e009      	b.n	80103e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80103d0:	6839      	ldr	r1, [r7, #0]
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f000 f9e7 	bl	80107a6 <USBD_CtlError>
 80103d8:	e004      	b.n	80103e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 faba 	bl	8010954 <USBD_CtlSendStatus>
 80103e0:	e000      	b.n	80103e4 <USBD_GetDescriptor+0x320>
    return;
 80103e2:	bf00      	nop
  }
}
 80103e4:	3710      	adds	r7, #16
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop

080103ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	889b      	ldrh	r3, [r3, #4]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d131      	bne.n	8010462 <USBD_SetAddress+0x76>
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	88db      	ldrh	r3, [r3, #6]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d12d      	bne.n	8010462 <USBD_SetAddress+0x76>
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	885b      	ldrh	r3, [r3, #2]
 801040a:	2b7f      	cmp	r3, #127	@ 0x7f
 801040c:	d829      	bhi.n	8010462 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	885b      	ldrh	r3, [r3, #2]
 8010412:	b2db      	uxtb	r3, r3
 8010414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010418:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010420:	b2db      	uxtb	r3, r3
 8010422:	2b03      	cmp	r3, #3
 8010424:	d104      	bne.n	8010430 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010426:	6839      	ldr	r1, [r7, #0]
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 f9bc 	bl	80107a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801042e:	e01d      	b.n	801046c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	7bfa      	ldrb	r2, [r7, #15]
 8010434:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010438:	7bfb      	ldrb	r3, [r7, #15]
 801043a:	4619      	mov	r1, r3
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f000 ff25 	bl	801128c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 fa86 	bl	8010954 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010448:	7bfb      	ldrb	r3, [r7, #15]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d004      	beq.n	8010458 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2202      	movs	r2, #2
 8010452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010456:	e009      	b.n	801046c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2201      	movs	r2, #1
 801045c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010460:	e004      	b.n	801046c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010462:	6839      	ldr	r1, [r7, #0]
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 f99e 	bl	80107a6 <USBD_CtlError>
  }
}
 801046a:	bf00      	nop
 801046c:	bf00      	nop
 801046e:	3710      	adds	r7, #16
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}

08010474 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801047e:	2300      	movs	r3, #0
 8010480:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	885b      	ldrh	r3, [r3, #2]
 8010486:	b2da      	uxtb	r2, r3
 8010488:	4b4e      	ldr	r3, [pc, #312]	@ (80105c4 <USBD_SetConfig+0x150>)
 801048a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801048c:	4b4d      	ldr	r3, [pc, #308]	@ (80105c4 <USBD_SetConfig+0x150>)
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	2b01      	cmp	r3, #1
 8010492:	d905      	bls.n	80104a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010494:	6839      	ldr	r1, [r7, #0]
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 f985 	bl	80107a6 <USBD_CtlError>
    return USBD_FAIL;
 801049c:	2303      	movs	r3, #3
 801049e:	e08c      	b.n	80105ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104a6:	b2db      	uxtb	r3, r3
 80104a8:	2b02      	cmp	r3, #2
 80104aa:	d002      	beq.n	80104b2 <USBD_SetConfig+0x3e>
 80104ac:	2b03      	cmp	r3, #3
 80104ae:	d029      	beq.n	8010504 <USBD_SetConfig+0x90>
 80104b0:	e075      	b.n	801059e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80104b2:	4b44      	ldr	r3, [pc, #272]	@ (80105c4 <USBD_SetConfig+0x150>)
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d020      	beq.n	80104fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80104ba:	4b42      	ldr	r3, [pc, #264]	@ (80105c4 <USBD_SetConfig+0x150>)
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	461a      	mov	r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80104c4:	4b3f      	ldr	r3, [pc, #252]	@ (80105c4 <USBD_SetConfig+0x150>)
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	4619      	mov	r1, r3
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f7fe ffb9 	bl	800f442 <USBD_SetClassConfig>
 80104d0:	4603      	mov	r3, r0
 80104d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80104d4:	7bfb      	ldrb	r3, [r7, #15]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d008      	beq.n	80104ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80104da:	6839      	ldr	r1, [r7, #0]
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f000 f962 	bl	80107a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2202      	movs	r2, #2
 80104e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80104ea:	e065      	b.n	80105b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 fa31 	bl	8010954 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2203      	movs	r2, #3
 80104f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80104fa:	e05d      	b.n	80105b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f000 fa29 	bl	8010954 <USBD_CtlSendStatus>
      break;
 8010502:	e059      	b.n	80105b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010504:	4b2f      	ldr	r3, [pc, #188]	@ (80105c4 <USBD_SetConfig+0x150>)
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d112      	bne.n	8010532 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2202      	movs	r2, #2
 8010510:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010514:	4b2b      	ldr	r3, [pc, #172]	@ (80105c4 <USBD_SetConfig+0x150>)
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	461a      	mov	r2, r3
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801051e:	4b29      	ldr	r3, [pc, #164]	@ (80105c4 <USBD_SetConfig+0x150>)
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	4619      	mov	r1, r3
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7fe ffa8 	bl	800f47a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f000 fa12 	bl	8010954 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010530:	e042      	b.n	80105b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010532:	4b24      	ldr	r3, [pc, #144]	@ (80105c4 <USBD_SetConfig+0x150>)
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	461a      	mov	r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	685b      	ldr	r3, [r3, #4]
 801053c:	429a      	cmp	r2, r3
 801053e:	d02a      	beq.n	8010596 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	b2db      	uxtb	r3, r3
 8010546:	4619      	mov	r1, r3
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f7fe ff96 	bl	800f47a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801054e:	4b1d      	ldr	r3, [pc, #116]	@ (80105c4 <USBD_SetConfig+0x150>)
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	461a      	mov	r2, r3
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010558:	4b1a      	ldr	r3, [pc, #104]	@ (80105c4 <USBD_SetConfig+0x150>)
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	4619      	mov	r1, r3
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7fe ff6f 	bl	800f442 <USBD_SetClassConfig>
 8010564:	4603      	mov	r3, r0
 8010566:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010568:	7bfb      	ldrb	r3, [r7, #15]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00f      	beq.n	801058e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801056e:	6839      	ldr	r1, [r7, #0]
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f000 f918 	bl	80107a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	b2db      	uxtb	r3, r3
 801057c:	4619      	mov	r1, r3
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7fe ff7b 	bl	800f47a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2202      	movs	r2, #2
 8010588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801058c:	e014      	b.n	80105b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f000 f9e0 	bl	8010954 <USBD_CtlSendStatus>
      break;
 8010594:	e010      	b.n	80105b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f000 f9dc 	bl	8010954 <USBD_CtlSendStatus>
      break;
 801059c:	e00c      	b.n	80105b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801059e:	6839      	ldr	r1, [r7, #0]
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 f900 	bl	80107a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80105a6:	4b07      	ldr	r3, [pc, #28]	@ (80105c4 <USBD_SetConfig+0x150>)
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	4619      	mov	r1, r3
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f7fe ff64 	bl	800f47a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80105b2:	2303      	movs	r3, #3
 80105b4:	73fb      	strb	r3, [r7, #15]
      break;
 80105b6:	bf00      	nop
  }

  return ret;
 80105b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3710      	adds	r7, #16
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	240018f0 	.word	0x240018f0

080105c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	88db      	ldrh	r3, [r3, #6]
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d004      	beq.n	80105e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80105da:	6839      	ldr	r1, [r7, #0]
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f000 f8e2 	bl	80107a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80105e2:	e023      	b.n	801062c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	2b02      	cmp	r3, #2
 80105ee:	dc02      	bgt.n	80105f6 <USBD_GetConfig+0x2e>
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	dc03      	bgt.n	80105fc <USBD_GetConfig+0x34>
 80105f4:	e015      	b.n	8010622 <USBD_GetConfig+0x5a>
 80105f6:	2b03      	cmp	r3, #3
 80105f8:	d00b      	beq.n	8010612 <USBD_GetConfig+0x4a>
 80105fa:	e012      	b.n	8010622 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2200      	movs	r2, #0
 8010600:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	3308      	adds	r3, #8
 8010606:	2201      	movs	r2, #1
 8010608:	4619      	mov	r1, r3
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 f948 	bl	80108a0 <USBD_CtlSendData>
        break;
 8010610:	e00c      	b.n	801062c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	3304      	adds	r3, #4
 8010616:	2201      	movs	r2, #1
 8010618:	4619      	mov	r1, r3
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f000 f940 	bl	80108a0 <USBD_CtlSendData>
        break;
 8010620:	e004      	b.n	801062c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010622:	6839      	ldr	r1, [r7, #0]
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f000 f8be 	bl	80107a6 <USBD_CtlError>
        break;
 801062a:	bf00      	nop
}
 801062c:	bf00      	nop
 801062e:	3708      	adds	r7, #8
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}

08010634 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010644:	b2db      	uxtb	r3, r3
 8010646:	3b01      	subs	r3, #1
 8010648:	2b02      	cmp	r3, #2
 801064a:	d81e      	bhi.n	801068a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	88db      	ldrh	r3, [r3, #6]
 8010650:	2b02      	cmp	r3, #2
 8010652:	d004      	beq.n	801065e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010654:	6839      	ldr	r1, [r7, #0]
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f000 f8a5 	bl	80107a6 <USBD_CtlError>
        break;
 801065c:	e01a      	b.n	8010694 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2201      	movs	r2, #1
 8010662:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801066a:	2b00      	cmp	r3, #0
 801066c:	d005      	beq.n	801067a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	f043 0202 	orr.w	r2, r3, #2
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	330c      	adds	r3, #12
 801067e:	2202      	movs	r2, #2
 8010680:	4619      	mov	r1, r3
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f000 f90c 	bl	80108a0 <USBD_CtlSendData>
      break;
 8010688:	e004      	b.n	8010694 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801068a:	6839      	ldr	r1, [r7, #0]
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f000 f88a 	bl	80107a6 <USBD_CtlError>
      break;
 8010692:	bf00      	nop
  }
}
 8010694:	bf00      	nop
 8010696:	3708      	adds	r7, #8
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	885b      	ldrh	r3, [r3, #2]
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d107      	bne.n	80106be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2201      	movs	r2, #1
 80106b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f000 f94c 	bl	8010954 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80106bc:	e013      	b.n	80106e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	885b      	ldrh	r3, [r3, #2]
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	d10b      	bne.n	80106de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	889b      	ldrh	r3, [r3, #4]
 80106ca:	0a1b      	lsrs	r3, r3, #8
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	b2da      	uxtb	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f000 f93c 	bl	8010954 <USBD_CtlSendStatus>
}
 80106dc:	e003      	b.n	80106e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80106de:	6839      	ldr	r1, [r7, #0]
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f000 f860 	bl	80107a6 <USBD_CtlError>
}
 80106e6:	bf00      	nop
 80106e8:	3708      	adds	r7, #8
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106ee:	b580      	push	{r7, lr}
 80106f0:	b082      	sub	sp, #8
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
 80106f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	3b01      	subs	r3, #1
 8010702:	2b02      	cmp	r3, #2
 8010704:	d80b      	bhi.n	801071e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	885b      	ldrh	r3, [r3, #2]
 801070a:	2b01      	cmp	r3, #1
 801070c:	d10c      	bne.n	8010728 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2200      	movs	r2, #0
 8010712:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 f91c 	bl	8010954 <USBD_CtlSendStatus>
      }
      break;
 801071c:	e004      	b.n	8010728 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801071e:	6839      	ldr	r1, [r7, #0]
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f000 f840 	bl	80107a6 <USBD_CtlError>
      break;
 8010726:	e000      	b.n	801072a <USBD_ClrFeature+0x3c>
      break;
 8010728:	bf00      	nop
  }
}
 801072a:	bf00      	nop
 801072c:	3708      	adds	r7, #8
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}

08010732 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b084      	sub	sp, #16
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
 801073a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	781a      	ldrb	r2, [r3, #0]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	3301      	adds	r3, #1
 801074c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	781a      	ldrb	r2, [r3, #0]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	3301      	adds	r3, #1
 801075a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f7ff fa16 	bl	800fb8e <SWAPBYTE>
 8010762:	4603      	mov	r3, r0
 8010764:	461a      	mov	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	3301      	adds	r3, #1
 801076e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	3301      	adds	r3, #1
 8010774:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010776:	68f8      	ldr	r0, [r7, #12]
 8010778:	f7ff fa09 	bl	800fb8e <SWAPBYTE>
 801077c:	4603      	mov	r3, r0
 801077e:	461a      	mov	r2, r3
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	3301      	adds	r3, #1
 8010788:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	3301      	adds	r3, #1
 801078e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010790:	68f8      	ldr	r0, [r7, #12]
 8010792:	f7ff f9fc 	bl	800fb8e <SWAPBYTE>
 8010796:	4603      	mov	r3, r0
 8010798:	461a      	mov	r2, r3
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	80da      	strh	r2, [r3, #6]
}
 801079e:	bf00      	nop
 80107a0:	3710      	adds	r7, #16
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107a6:	b580      	push	{r7, lr}
 80107a8:	b082      	sub	sp, #8
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	6078      	str	r0, [r7, #4]
 80107ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80107b0:	2180      	movs	r1, #128	@ 0x80
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 fd00 	bl	80111b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80107b8:	2100      	movs	r1, #0
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f000 fcfc 	bl	80111b8 <USBD_LL_StallEP>
}
 80107c0:	bf00      	nop
 80107c2:	3708      	adds	r7, #8
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}

080107c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b086      	sub	sp, #24
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	60b9      	str	r1, [r7, #8]
 80107d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80107d4:	2300      	movs	r3, #0
 80107d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d042      	beq.n	8010864 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80107e2:	6938      	ldr	r0, [r7, #16]
 80107e4:	f000 f842 	bl	801086c <USBD_GetLen>
 80107e8:	4603      	mov	r3, r0
 80107ea:	3301      	adds	r3, #1
 80107ec:	005b      	lsls	r3, r3, #1
 80107ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80107f2:	d808      	bhi.n	8010806 <USBD_GetString+0x3e>
 80107f4:	6938      	ldr	r0, [r7, #16]
 80107f6:	f000 f839 	bl	801086c <USBD_GetLen>
 80107fa:	4603      	mov	r3, r0
 80107fc:	3301      	adds	r3, #1
 80107fe:	b29b      	uxth	r3, r3
 8010800:	005b      	lsls	r3, r3, #1
 8010802:	b29a      	uxth	r2, r3
 8010804:	e001      	b.n	801080a <USBD_GetString+0x42>
 8010806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801080e:	7dfb      	ldrb	r3, [r7, #23]
 8010810:	68ba      	ldr	r2, [r7, #8]
 8010812:	4413      	add	r3, r2
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	7812      	ldrb	r2, [r2, #0]
 8010818:	701a      	strb	r2, [r3, #0]
  idx++;
 801081a:	7dfb      	ldrb	r3, [r7, #23]
 801081c:	3301      	adds	r3, #1
 801081e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010820:	7dfb      	ldrb	r3, [r7, #23]
 8010822:	68ba      	ldr	r2, [r7, #8]
 8010824:	4413      	add	r3, r2
 8010826:	2203      	movs	r2, #3
 8010828:	701a      	strb	r2, [r3, #0]
  idx++;
 801082a:	7dfb      	ldrb	r3, [r7, #23]
 801082c:	3301      	adds	r3, #1
 801082e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010830:	e013      	b.n	801085a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8010832:	7dfb      	ldrb	r3, [r7, #23]
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	4413      	add	r3, r2
 8010838:	693a      	ldr	r2, [r7, #16]
 801083a:	7812      	ldrb	r2, [r2, #0]
 801083c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	3301      	adds	r3, #1
 8010842:	613b      	str	r3, [r7, #16]
    idx++;
 8010844:	7dfb      	ldrb	r3, [r7, #23]
 8010846:	3301      	adds	r3, #1
 8010848:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801084a:	7dfb      	ldrb	r3, [r7, #23]
 801084c:	68ba      	ldr	r2, [r7, #8]
 801084e:	4413      	add	r3, r2
 8010850:	2200      	movs	r2, #0
 8010852:	701a      	strb	r2, [r3, #0]
    idx++;
 8010854:	7dfb      	ldrb	r3, [r7, #23]
 8010856:	3301      	adds	r3, #1
 8010858:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d1e7      	bne.n	8010832 <USBD_GetString+0x6a>
 8010862:	e000      	b.n	8010866 <USBD_GetString+0x9e>
    return;
 8010864:	bf00      	nop
  }
}
 8010866:	3718      	adds	r7, #24
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}

0801086c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801086c:	b480      	push	{r7}
 801086e:	b085      	sub	sp, #20
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010874:	2300      	movs	r3, #0
 8010876:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801087c:	e005      	b.n	801088a <USBD_GetLen+0x1e>
  {
    len++;
 801087e:	7bfb      	ldrb	r3, [r7, #15]
 8010880:	3301      	adds	r3, #1
 8010882:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	3301      	adds	r3, #1
 8010888:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d1f5      	bne.n	801087e <USBD_GetLen+0x12>
  }

  return len;
 8010892:	7bfb      	ldrb	r3, [r7, #15]
}
 8010894:	4618      	mov	r0, r3
 8010896:	3714      	adds	r7, #20
 8010898:	46bd      	mov	sp, r7
 801089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089e:	4770      	bx	lr

080108a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	60f8      	str	r0, [r7, #12]
 80108a8:	60b9      	str	r1, [r7, #8]
 80108aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2202      	movs	r2, #2
 80108b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	2100      	movs	r1, #0
 80108c6:	68f8      	ldr	r0, [r7, #12]
 80108c8:	f000 fcff 	bl	80112ca <USBD_LL_Transmit>

  return USBD_OK;
 80108cc:	2300      	movs	r3, #0
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3710      	adds	r7, #16
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b084      	sub	sp, #16
 80108da:	af00      	add	r7, sp, #0
 80108dc:	60f8      	str	r0, [r7, #12]
 80108de:	60b9      	str	r1, [r7, #8]
 80108e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	68ba      	ldr	r2, [r7, #8]
 80108e6:	2100      	movs	r1, #0
 80108e8:	68f8      	ldr	r0, [r7, #12]
 80108ea:	f000 fcee 	bl	80112ca <USBD_LL_Transmit>

  return USBD_OK;
 80108ee:	2300      	movs	r3, #0
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3710      	adds	r7, #16
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	60b9      	str	r1, [r7, #8]
 8010902:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2203      	movs	r2, #3
 8010908:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	687a      	ldr	r2, [r7, #4]
 8010918:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	68ba      	ldr	r2, [r7, #8]
 8010920:	2100      	movs	r1, #0
 8010922:	68f8      	ldr	r0, [r7, #12]
 8010924:	f000 fcf2 	bl	801130c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010928:	2300      	movs	r3, #0
}
 801092a:	4618      	mov	r0, r3
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010932:	b580      	push	{r7, lr}
 8010934:	b084      	sub	sp, #16
 8010936:	af00      	add	r7, sp, #0
 8010938:	60f8      	str	r0, [r7, #12]
 801093a:	60b9      	str	r1, [r7, #8]
 801093c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	68ba      	ldr	r2, [r7, #8]
 8010942:	2100      	movs	r1, #0
 8010944:	68f8      	ldr	r0, [r7, #12]
 8010946:	f000 fce1 	bl	801130c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801094a:	2300      	movs	r3, #0
}
 801094c:	4618      	mov	r0, r3
 801094e:	3710      	adds	r7, #16
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}

08010954 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2204      	movs	r2, #4
 8010960:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010964:	2300      	movs	r3, #0
 8010966:	2200      	movs	r2, #0
 8010968:	2100      	movs	r1, #0
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 fcad 	bl	80112ca <USBD_LL_Transmit>

  return USBD_OK;
 8010970:	2300      	movs	r3, #0
}
 8010972:	4618      	mov	r0, r3
 8010974:	3708      	adds	r7, #8
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801097a:	b580      	push	{r7, lr}
 801097c:	b082      	sub	sp, #8
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2205      	movs	r2, #5
 8010986:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801098a:	2300      	movs	r3, #0
 801098c:	2200      	movs	r2, #0
 801098e:	2100      	movs	r1, #0
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f000 fcbb 	bl	801130c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010996:	2300      	movs	r3, #0
}
 8010998:	4618      	mov	r0, r3
 801099a:	3708      	adds	r7, #8
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80109a4:	2201      	movs	r2, #1
 80109a6:	4913      	ldr	r1, [pc, #76]	@ (80109f4 <MX_USB_DEVICE_Init+0x54>)
 80109a8:	4813      	ldr	r0, [pc, #76]	@ (80109f8 <MX_USB_DEVICE_Init+0x58>)
 80109aa:	f7fe fccd 	bl	800f348 <USBD_Init>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d001      	beq.n	80109b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80109b4:	f7f0 fd44 	bl	8001440 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80109b8:	4910      	ldr	r1, [pc, #64]	@ (80109fc <MX_USB_DEVICE_Init+0x5c>)
 80109ba:	480f      	ldr	r0, [pc, #60]	@ (80109f8 <MX_USB_DEVICE_Init+0x58>)
 80109bc:	f7fe fcf4 	bl	800f3a8 <USBD_RegisterClass>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d001      	beq.n	80109ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80109c6:	f7f0 fd3b 	bl	8001440 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80109ca:	490d      	ldr	r1, [pc, #52]	@ (8010a00 <MX_USB_DEVICE_Init+0x60>)
 80109cc:	480a      	ldr	r0, [pc, #40]	@ (80109f8 <MX_USB_DEVICE_Init+0x58>)
 80109ce:	f7fe fbeb 	bl	800f1a8 <USBD_CDC_RegisterInterface>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d001      	beq.n	80109dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80109d8:	f7f0 fd32 	bl	8001440 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80109dc:	4806      	ldr	r0, [pc, #24]	@ (80109f8 <MX_USB_DEVICE_Init+0x58>)
 80109de:	f7fe fd19 	bl	800f414 <USBD_Start>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d001      	beq.n	80109ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80109e8:	f7f0 fd2a 	bl	8001440 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80109ec:	f7f6 fe86 	bl	80076fc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80109f0:	bf00      	nop
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	240000b0 	.word	0x240000b0
 80109f8:	240018f4 	.word	0x240018f4
 80109fc:	2400001c 	.word	0x2400001c
 8010a00:	2400009c 	.word	0x2400009c

08010a04 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8010a08:	2200      	movs	r2, #0
 8010a0a:	4905      	ldr	r1, [pc, #20]	@ (8010a20 <CDC_Init_HS+0x1c>)
 8010a0c:	4805      	ldr	r0, [pc, #20]	@ (8010a24 <CDC_Init_HS+0x20>)
 8010a0e:	f7fe fbe5 	bl	800f1dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8010a12:	4905      	ldr	r1, [pc, #20]	@ (8010a28 <CDC_Init_HS+0x24>)
 8010a14:	4803      	ldr	r0, [pc, #12]	@ (8010a24 <CDC_Init_HS+0x20>)
 8010a16:	f7fe fc03 	bl	800f220 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010a1a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	240023d0 	.word	0x240023d0
 8010a24:	240018f4 	.word	0x240018f4
 8010a28:	24001bd0 	.word	0x24001bd0

08010a2c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8010a30:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b083      	sub	sp, #12
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	4603      	mov	r3, r0
 8010a44:	6039      	str	r1, [r7, #0]
 8010a46:	71fb      	strb	r3, [r7, #7]
 8010a48:	4613      	mov	r3, r2
 8010a4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8010a4c:	79fb      	ldrb	r3, [r7, #7]
 8010a4e:	2b23      	cmp	r3, #35	@ 0x23
 8010a50:	d84a      	bhi.n	8010ae8 <CDC_Control_HS+0xac>
 8010a52:	a201      	add	r2, pc, #4	@ (adr r2, 8010a58 <CDC_Control_HS+0x1c>)
 8010a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a58:	08010ae9 	.word	0x08010ae9
 8010a5c:	08010ae9 	.word	0x08010ae9
 8010a60:	08010ae9 	.word	0x08010ae9
 8010a64:	08010ae9 	.word	0x08010ae9
 8010a68:	08010ae9 	.word	0x08010ae9
 8010a6c:	08010ae9 	.word	0x08010ae9
 8010a70:	08010ae9 	.word	0x08010ae9
 8010a74:	08010ae9 	.word	0x08010ae9
 8010a78:	08010ae9 	.word	0x08010ae9
 8010a7c:	08010ae9 	.word	0x08010ae9
 8010a80:	08010ae9 	.word	0x08010ae9
 8010a84:	08010ae9 	.word	0x08010ae9
 8010a88:	08010ae9 	.word	0x08010ae9
 8010a8c:	08010ae9 	.word	0x08010ae9
 8010a90:	08010ae9 	.word	0x08010ae9
 8010a94:	08010ae9 	.word	0x08010ae9
 8010a98:	08010ae9 	.word	0x08010ae9
 8010a9c:	08010ae9 	.word	0x08010ae9
 8010aa0:	08010ae9 	.word	0x08010ae9
 8010aa4:	08010ae9 	.word	0x08010ae9
 8010aa8:	08010ae9 	.word	0x08010ae9
 8010aac:	08010ae9 	.word	0x08010ae9
 8010ab0:	08010ae9 	.word	0x08010ae9
 8010ab4:	08010ae9 	.word	0x08010ae9
 8010ab8:	08010ae9 	.word	0x08010ae9
 8010abc:	08010ae9 	.word	0x08010ae9
 8010ac0:	08010ae9 	.word	0x08010ae9
 8010ac4:	08010ae9 	.word	0x08010ae9
 8010ac8:	08010ae9 	.word	0x08010ae9
 8010acc:	08010ae9 	.word	0x08010ae9
 8010ad0:	08010ae9 	.word	0x08010ae9
 8010ad4:	08010ae9 	.word	0x08010ae9
 8010ad8:	08010ae9 	.word	0x08010ae9
 8010adc:	08010ae9 	.word	0x08010ae9
 8010ae0:	08010ae9 	.word	0x08010ae9
 8010ae4:	08010ae9 	.word	0x08010ae9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010ae8:	bf00      	nop
  }

  return (USBD_OK);
 8010aea:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	370c      	adds	r7, #12
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b084      	sub	sp, #16
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8010b02:	6879      	ldr	r1, [r7, #4]
 8010b04:	4810      	ldr	r0, [pc, #64]	@ (8010b48 <CDC_Receive_HS+0x50>)
 8010b06:	f7fe fb8b 	bl	800f220 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8010b0a:	480f      	ldr	r0, [pc, #60]	@ (8010b48 <CDC_Receive_HS+0x50>)
 8010b0c:	f7fe fbe6 	bl	800f2dc <USBD_CDC_ReceivePacket>

	memset(usb_rx_buf, '\0', 64);  /* clear the serial data rx buffer */
 8010b10:	2240      	movs	r2, #64	@ 0x40
 8010b12:	2100      	movs	r1, #0
 8010b14:	480d      	ldr	r0, [pc, #52]	@ (8010b4c <CDC_Receive_HS+0x54>)
 8010b16:	f001 f9cc 	bl	8011eb2 <memset>
	uint8_t len = (uint8_t) *Len;
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	73fb      	strb	r3, [r7, #15]
	memcpy(usb_rx_buf, Buf, len);  /* copy the incoming data to the buffer */
 8010b20:	7bfb      	ldrb	r3, [r7, #15]
 8010b22:	461a      	mov	r2, r3
 8010b24:	6879      	ldr	r1, [r7, #4]
 8010b26:	4809      	ldr	r0, [pc, #36]	@ (8010b4c <CDC_Receive_HS+0x54>)
 8010b28:	f001 fa43 	bl	8011fb2 <memcpy>
	memset(Buf, '\0', len);   /* clear Buf also */
 8010b2c:	7bfb      	ldrb	r3, [r7, #15]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	2100      	movs	r1, #0
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f001 f9bd 	bl	8011eb2 <memset>
	usb_rx_ready = 1;  /* set the serial data rx ready flag */
 8010b38:	4b05      	ldr	r3, [pc, #20]	@ (8010b50 <CDC_Receive_HS+0x58>)
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 8010b3e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3710      	adds	r7, #16
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	240018f4 	.word	0x240018f4
 8010b4c:	240018a8 	.word	0x240018a8
 8010b50:	240018e8 	.word	0x240018e8

08010b54 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	460b      	mov	r3, r1
 8010b5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010b60:	2300      	movs	r3, #0
 8010b62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8010b64:	4b0d      	ldr	r3, [pc, #52]	@ (8010b9c <CDC_Transmit_HS+0x48>)
 8010b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010b6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d001      	beq.n	8010b7a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8010b76:	2301      	movs	r3, #1
 8010b78:	e00b      	b.n	8010b92 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8010b7a:	887b      	ldrh	r3, [r7, #2]
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	6879      	ldr	r1, [r7, #4]
 8010b80:	4806      	ldr	r0, [pc, #24]	@ (8010b9c <CDC_Transmit_HS+0x48>)
 8010b82:	f7fe fb2b 	bl	800f1dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8010b86:	4805      	ldr	r0, [pc, #20]	@ (8010b9c <CDC_Transmit_HS+0x48>)
 8010b88:	f7fe fb68 	bl	800f25c <USBD_CDC_TransmitPacket>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8010b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3710      	adds	r7, #16
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	240018f4 	.word	0x240018f4

08010ba0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b087      	sub	sp, #28
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	4613      	mov	r3, r2
 8010bac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8010bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	371c      	adds	r7, #28
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr
	...

08010bc4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b083      	sub	sp, #12
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	4603      	mov	r3, r0
 8010bcc:	6039      	str	r1, [r7, #0]
 8010bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	2212      	movs	r2, #18
 8010bd4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8010bd6:	4b03      	ldr	r3, [pc, #12]	@ (8010be4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	370c      	adds	r7, #12
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr
 8010be4:	240000d0 	.word	0x240000d0

08010be8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010be8:	b480      	push	{r7}
 8010bea:	b083      	sub	sp, #12
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	4603      	mov	r3, r0
 8010bf0:	6039      	str	r1, [r7, #0]
 8010bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	2204      	movs	r2, #4
 8010bf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010bfa:	4b03      	ldr	r3, [pc, #12]	@ (8010c08 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	370c      	adds	r7, #12
 8010c00:	46bd      	mov	sp, r7
 8010c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c06:	4770      	bx	lr
 8010c08:	240000e4 	.word	0x240000e4

08010c0c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	4603      	mov	r3, r0
 8010c14:	6039      	str	r1, [r7, #0]
 8010c16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010c18:	79fb      	ldrb	r3, [r7, #7]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d105      	bne.n	8010c2a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010c1e:	683a      	ldr	r2, [r7, #0]
 8010c20:	4907      	ldr	r1, [pc, #28]	@ (8010c40 <USBD_HS_ProductStrDescriptor+0x34>)
 8010c22:	4808      	ldr	r0, [pc, #32]	@ (8010c44 <USBD_HS_ProductStrDescriptor+0x38>)
 8010c24:	f7ff fdd0 	bl	80107c8 <USBD_GetString>
 8010c28:	e004      	b.n	8010c34 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010c2a:	683a      	ldr	r2, [r7, #0]
 8010c2c:	4904      	ldr	r1, [pc, #16]	@ (8010c40 <USBD_HS_ProductStrDescriptor+0x34>)
 8010c2e:	4805      	ldr	r0, [pc, #20]	@ (8010c44 <USBD_HS_ProductStrDescriptor+0x38>)
 8010c30:	f7ff fdca 	bl	80107c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c34:	4b02      	ldr	r3, [pc, #8]	@ (8010c40 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3708      	adds	r7, #8
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	24002bd0 	.word	0x24002bd0
 8010c44:	08013fa8 	.word	0x08013fa8

08010c48 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	4603      	mov	r3, r0
 8010c50:	6039      	str	r1, [r7, #0]
 8010c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010c54:	683a      	ldr	r2, [r7, #0]
 8010c56:	4904      	ldr	r1, [pc, #16]	@ (8010c68 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8010c58:	4804      	ldr	r0, [pc, #16]	@ (8010c6c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8010c5a:	f7ff fdb5 	bl	80107c8 <USBD_GetString>
  return USBD_StrDesc;
 8010c5e:	4b02      	ldr	r3, [pc, #8]	@ (8010c68 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3708      	adds	r7, #8
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}
 8010c68:	24002bd0 	.word	0x24002bd0
 8010c6c:	08013fb4 	.word	0x08013fb4

08010c70 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	6039      	str	r1, [r7, #0]
 8010c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	221a      	movs	r2, #26
 8010c80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010c82:	f000 f843 	bl	8010d0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010c86:	4b02      	ldr	r3, [pc, #8]	@ (8010c90 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3708      	adds	r7, #8
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	240000e8 	.word	0x240000e8

08010c94 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	6039      	str	r1, [r7, #0]
 8010c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010ca0:	79fb      	ldrb	r3, [r7, #7]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d105      	bne.n	8010cb2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010ca6:	683a      	ldr	r2, [r7, #0]
 8010ca8:	4907      	ldr	r1, [pc, #28]	@ (8010cc8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8010caa:	4808      	ldr	r0, [pc, #32]	@ (8010ccc <USBD_HS_ConfigStrDescriptor+0x38>)
 8010cac:	f7ff fd8c 	bl	80107c8 <USBD_GetString>
 8010cb0:	e004      	b.n	8010cbc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010cb2:	683a      	ldr	r2, [r7, #0]
 8010cb4:	4904      	ldr	r1, [pc, #16]	@ (8010cc8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8010cb6:	4805      	ldr	r0, [pc, #20]	@ (8010ccc <USBD_HS_ConfigStrDescriptor+0x38>)
 8010cb8:	f7ff fd86 	bl	80107c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010cbc:	4b02      	ldr	r3, [pc, #8]	@ (8010cc8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3708      	adds	r7, #8
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	24002bd0 	.word	0x24002bd0
 8010ccc:	08013fc0 	.word	0x08013fc0

08010cd0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	6039      	str	r1, [r7, #0]
 8010cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010cdc:	79fb      	ldrb	r3, [r7, #7]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d105      	bne.n	8010cee <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010ce2:	683a      	ldr	r2, [r7, #0]
 8010ce4:	4907      	ldr	r1, [pc, #28]	@ (8010d04 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010ce6:	4808      	ldr	r0, [pc, #32]	@ (8010d08 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010ce8:	f7ff fd6e 	bl	80107c8 <USBD_GetString>
 8010cec:	e004      	b.n	8010cf8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010cee:	683a      	ldr	r2, [r7, #0]
 8010cf0:	4904      	ldr	r1, [pc, #16]	@ (8010d04 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010cf2:	4805      	ldr	r0, [pc, #20]	@ (8010d08 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010cf4:	f7ff fd68 	bl	80107c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010cf8:	4b02      	ldr	r3, [pc, #8]	@ (8010d04 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3708      	adds	r7, #8
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	24002bd0 	.word	0x24002bd0
 8010d08:	08013fcc 	.word	0x08013fcc

08010d0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010d12:	4b0f      	ldr	r3, [pc, #60]	@ (8010d50 <Get_SerialNum+0x44>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010d18:	4b0e      	ldr	r3, [pc, #56]	@ (8010d54 <Get_SerialNum+0x48>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8010d58 <Get_SerialNum+0x4c>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010d24:	68fa      	ldr	r2, [r7, #12]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	4413      	add	r3, r2
 8010d2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d009      	beq.n	8010d46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010d32:	2208      	movs	r2, #8
 8010d34:	4909      	ldr	r1, [pc, #36]	@ (8010d5c <Get_SerialNum+0x50>)
 8010d36:	68f8      	ldr	r0, [r7, #12]
 8010d38:	f000 f814 	bl	8010d64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010d3c:	2204      	movs	r2, #4
 8010d3e:	4908      	ldr	r1, [pc, #32]	@ (8010d60 <Get_SerialNum+0x54>)
 8010d40:	68b8      	ldr	r0, [r7, #8]
 8010d42:	f000 f80f 	bl	8010d64 <IntToUnicode>
  }
}
 8010d46:	bf00      	nop
 8010d48:	3710      	adds	r7, #16
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	1ff1e800 	.word	0x1ff1e800
 8010d54:	1ff1e804 	.word	0x1ff1e804
 8010d58:	1ff1e808 	.word	0x1ff1e808
 8010d5c:	240000ea 	.word	0x240000ea
 8010d60:	240000fa 	.word	0x240000fa

08010d64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b087      	sub	sp, #28
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	4613      	mov	r3, r2
 8010d70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010d72:	2300      	movs	r3, #0
 8010d74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010d76:	2300      	movs	r3, #0
 8010d78:	75fb      	strb	r3, [r7, #23]
 8010d7a:	e027      	b.n	8010dcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	0f1b      	lsrs	r3, r3, #28
 8010d80:	2b09      	cmp	r3, #9
 8010d82:	d80b      	bhi.n	8010d9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	0f1b      	lsrs	r3, r3, #28
 8010d88:	b2da      	uxtb	r2, r3
 8010d8a:	7dfb      	ldrb	r3, [r7, #23]
 8010d8c:	005b      	lsls	r3, r3, #1
 8010d8e:	4619      	mov	r1, r3
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	440b      	add	r3, r1
 8010d94:	3230      	adds	r2, #48	@ 0x30
 8010d96:	b2d2      	uxtb	r2, r2
 8010d98:	701a      	strb	r2, [r3, #0]
 8010d9a:	e00a      	b.n	8010db2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	0f1b      	lsrs	r3, r3, #28
 8010da0:	b2da      	uxtb	r2, r3
 8010da2:	7dfb      	ldrb	r3, [r7, #23]
 8010da4:	005b      	lsls	r3, r3, #1
 8010da6:	4619      	mov	r1, r3
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	440b      	add	r3, r1
 8010dac:	3237      	adds	r2, #55	@ 0x37
 8010dae:	b2d2      	uxtb	r2, r2
 8010db0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	011b      	lsls	r3, r3, #4
 8010db6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010db8:	7dfb      	ldrb	r3, [r7, #23]
 8010dba:	005b      	lsls	r3, r3, #1
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	68ba      	ldr	r2, [r7, #8]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010dc6:	7dfb      	ldrb	r3, [r7, #23]
 8010dc8:	3301      	adds	r3, #1
 8010dca:	75fb      	strb	r3, [r7, #23]
 8010dcc:	7dfa      	ldrb	r2, [r7, #23]
 8010dce:	79fb      	ldrb	r3, [r7, #7]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d3d3      	bcc.n	8010d7c <IntToUnicode+0x18>
  }
}
 8010dd4:	bf00      	nop
 8010dd6:	bf00      	nop
 8010dd8:	371c      	adds	r7, #28
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr
	...

08010de4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b0b2      	sub	sp, #200	@ 0xc8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010dec:	f107 0310 	add.w	r3, r7, #16
 8010df0:	22b8      	movs	r2, #184	@ 0xb8
 8010df2:	2100      	movs	r1, #0
 8010df4:	4618      	mov	r0, r3
 8010df6:	f001 f85c 	bl	8011eb2 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8010e68 <HAL_PCD_MspInit+0x84>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d12c      	bne.n	8010e5e <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010e04:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010e08:	f04f 0300 	mov.w	r3, #0
 8010e0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010e10:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8010e14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010e18:	f107 0310 	add.w	r3, r7, #16
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7f7 fbe3 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d001      	beq.n	8010e2c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8010e28:	f7f0 fb0a 	bl	8001440 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010e2c:	f7f6 fc66 	bl	80076fc <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010e30:	4b0e      	ldr	r3, [pc, #56]	@ (8010e6c <HAL_PCD_MspInit+0x88>)
 8010e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010e36:	4a0d      	ldr	r2, [pc, #52]	@ (8010e6c <HAL_PCD_MspInit+0x88>)
 8010e38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8010e3c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010e40:	4b0a      	ldr	r3, [pc, #40]	@ (8010e6c <HAL_PCD_MspInit+0x88>)
 8010e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010e4a:	60fb      	str	r3, [r7, #12]
 8010e4c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8010e4e:	2200      	movs	r2, #0
 8010e50:	2100      	movs	r1, #0
 8010e52:	204d      	movs	r0, #77	@ 0x4d
 8010e54:	f7f2 ffb5 	bl	8003dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8010e58:	204d      	movs	r0, #77	@ 0x4d
 8010e5a:	f7f2 ffcc 	bl	8003df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010e5e:	bf00      	nop
 8010e60:	37c8      	adds	r7, #200	@ 0xc8
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	bf00      	nop
 8010e68:	40040000 	.word	0x40040000
 8010e6c:	58024400 	.word	0x58024400

08010e70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010e84:	4619      	mov	r1, r3
 8010e86:	4610      	mov	r0, r2
 8010e88:	f7fe fb11 	bl	800f4ae <USBD_LL_SetupStage>
}
 8010e8c:	bf00      	nop
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010ea6:	78fa      	ldrb	r2, [r7, #3]
 8010ea8:	6879      	ldr	r1, [r7, #4]
 8010eaa:	4613      	mov	r3, r2
 8010eac:	00db      	lsls	r3, r3, #3
 8010eae:	4413      	add	r3, r2
 8010eb0:	009b      	lsls	r3, r3, #2
 8010eb2:	440b      	add	r3, r1
 8010eb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	78fb      	ldrb	r3, [r7, #3]
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	f7fe fb4b 	bl	800f558 <USBD_LL_DataOutStage>
}
 8010ec2:	bf00      	nop
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b082      	sub	sp, #8
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
 8010ed2:	460b      	mov	r3, r1
 8010ed4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010edc:	78fa      	ldrb	r2, [r7, #3]
 8010ede:	6879      	ldr	r1, [r7, #4]
 8010ee0:	4613      	mov	r3, r2
 8010ee2:	00db      	lsls	r3, r3, #3
 8010ee4:	4413      	add	r3, r2
 8010ee6:	009b      	lsls	r3, r3, #2
 8010ee8:	440b      	add	r3, r1
 8010eea:	3320      	adds	r3, #32
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	78fb      	ldrb	r3, [r7, #3]
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	f7fe fbe4 	bl	800f6be <USBD_LL_DataInStage>
}
 8010ef6:	bf00      	nop
 8010ef8:	3708      	adds	r7, #8
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}

08010efe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010efe:	b580      	push	{r7, lr}
 8010f00:	b082      	sub	sp, #8
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fe fd1e 	bl	800f94e <USBD_LL_SOF>
}
 8010f12:	bf00      	nop
 8010f14:	3708      	adds	r7, #8
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}

08010f1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f1a:	b580      	push	{r7, lr}
 8010f1c:	b084      	sub	sp, #16
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010f22:	2301      	movs	r3, #1
 8010f24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	79db      	ldrb	r3, [r3, #7]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d102      	bne.n	8010f34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	73fb      	strb	r3, [r7, #15]
 8010f32:	e008      	b.n	8010f46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	79db      	ldrb	r3, [r3, #7]
 8010f38:	2b02      	cmp	r3, #2
 8010f3a:	d102      	bne.n	8010f42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010f3c:	2301      	movs	r3, #1
 8010f3e:	73fb      	strb	r3, [r7, #15]
 8010f40:	e001      	b.n	8010f46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010f42:	f7f0 fa7d 	bl	8001440 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f4c:	7bfa      	ldrb	r2, [r7, #15]
 8010f4e:	4611      	mov	r1, r2
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7fe fcb8 	bl	800f8c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7fe fc60 	bl	800f822 <USBD_LL_Reset>
}
 8010f62:	bf00      	nop
 8010f64:	3710      	adds	r7, #16
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}
	...

08010f6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fe fcb3 	bl	800f8e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	687a      	ldr	r2, [r7, #4]
 8010f8c:	6812      	ldr	r2, [r2, #0]
 8010f8e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010f92:	f043 0301 	orr.w	r3, r3, #1
 8010f96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	7adb      	ldrb	r3, [r3, #11]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d005      	beq.n	8010fac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010fa0:	4b04      	ldr	r3, [pc, #16]	@ (8010fb4 <HAL_PCD_SuspendCallback+0x48>)
 8010fa2:	691b      	ldr	r3, [r3, #16]
 8010fa4:	4a03      	ldr	r2, [pc, #12]	@ (8010fb4 <HAL_PCD_SuspendCallback+0x48>)
 8010fa6:	f043 0306 	orr.w	r3, r3, #6
 8010faa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010fac:	bf00      	nop
 8010fae:	3708      	adds	r7, #8
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	e000ed00 	.word	0xe000ed00

08010fb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7fe fca9 	bl	800f91e <USBD_LL_Resume>
}
 8010fcc:	bf00      	nop
 8010fce:	3708      	adds	r7, #8
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	460b      	mov	r3, r1
 8010fde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010fe6:	78fa      	ldrb	r2, [r7, #3]
 8010fe8:	4611      	mov	r1, r2
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7fe fd01 	bl	800f9f2 <USBD_LL_IsoOUTIncomplete>
}
 8010ff0:	bf00      	nop
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	460b      	mov	r3, r1
 8011002:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801100a:	78fa      	ldrb	r2, [r7, #3]
 801100c:	4611      	mov	r1, r2
 801100e:	4618      	mov	r0, r3
 8011010:	f7fe fcbd 	bl	800f98e <USBD_LL_IsoINIncomplete>
}
 8011014:	bf00      	nop
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801102a:	4618      	mov	r0, r3
 801102c:	f7fe fd13 	bl	800fa56 <USBD_LL_DevConnected>
}
 8011030:	bf00      	nop
 8011032:	3708      	adds	r7, #8
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011046:	4618      	mov	r0, r3
 8011048:	f7fe fd10 	bl	800fa6c <USBD_LL_DevDisconnected>
}
 801104c:	bf00      	nop
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	2b01      	cmp	r3, #1
 8011062:	d140      	bne.n	80110e6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8011064:	4a22      	ldr	r2, [pc, #136]	@ (80110f0 <USBD_LL_Init+0x9c>)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	4a20      	ldr	r2, [pc, #128]	@ (80110f0 <USBD_LL_Init+0x9c>)
 8011070:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011074:	4b1e      	ldr	r3, [pc, #120]	@ (80110f0 <USBD_LL_Init+0x9c>)
 8011076:	4a1f      	ldr	r2, [pc, #124]	@ (80110f4 <USBD_LL_Init+0xa0>)
 8011078:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801107a:	4b1d      	ldr	r3, [pc, #116]	@ (80110f0 <USBD_LL_Init+0x9c>)
 801107c:	2209      	movs	r2, #9
 801107e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8011080:	4b1b      	ldr	r3, [pc, #108]	@ (80110f0 <USBD_LL_Init+0x9c>)
 8011082:	2202      	movs	r2, #2
 8011084:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8011086:	4b1a      	ldr	r3, [pc, #104]	@ (80110f0 <USBD_LL_Init+0x9c>)
 8011088:	2200      	movs	r2, #0
 801108a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801108c:	4b18      	ldr	r3, [pc, #96]	@ (80110f0 <USBD_LL_Init+0x9c>)
 801108e:	2202      	movs	r2, #2
 8011090:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8011092:	4b17      	ldr	r3, [pc, #92]	@ (80110f0 <USBD_LL_Init+0x9c>)
 8011094:	2200      	movs	r2, #0
 8011096:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8011098:	4b15      	ldr	r3, [pc, #84]	@ (80110f0 <USBD_LL_Init+0x9c>)
 801109a:	2200      	movs	r2, #0
 801109c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801109e:	4b14      	ldr	r3, [pc, #80]	@ (80110f0 <USBD_LL_Init+0x9c>)
 80110a0:	2200      	movs	r2, #0
 80110a2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80110a4:	4b12      	ldr	r3, [pc, #72]	@ (80110f0 <USBD_LL_Init+0x9c>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80110aa:	4b11      	ldr	r3, [pc, #68]	@ (80110f0 <USBD_LL_Init+0x9c>)
 80110ac:	2200      	movs	r2, #0
 80110ae:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80110b0:	4b0f      	ldr	r3, [pc, #60]	@ (80110f0 <USBD_LL_Init+0x9c>)
 80110b2:	2200      	movs	r2, #0
 80110b4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80110b6:	480e      	ldr	r0, [pc, #56]	@ (80110f0 <USBD_LL_Init+0x9c>)
 80110b8:	f7f5 f847 	bl	800614a <HAL_PCD_Init>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d001      	beq.n	80110c6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80110c2:	f7f0 f9bd 	bl	8001440 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80110c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80110ca:	4809      	ldr	r0, [pc, #36]	@ (80110f0 <USBD_LL_Init+0x9c>)
 80110cc:	f7f6 fa9b 	bl	8007606 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80110d0:	2280      	movs	r2, #128	@ 0x80
 80110d2:	2100      	movs	r1, #0
 80110d4:	4806      	ldr	r0, [pc, #24]	@ (80110f0 <USBD_LL_Init+0x9c>)
 80110d6:	f7f6 fa4f 	bl	8007578 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80110da:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80110de:	2101      	movs	r1, #1
 80110e0:	4803      	ldr	r0, [pc, #12]	@ (80110f0 <USBD_LL_Init+0x9c>)
 80110e2:	f7f6 fa49 	bl	8007578 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80110e6:	2300      	movs	r3, #0
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3708      	adds	r7, #8
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	24002dd0 	.word	0x24002dd0
 80110f4:	40040000 	.word	0x40040000

080110f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011100:	2300      	movs	r3, #0
 8011102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011104:	2300      	movs	r3, #0
 8011106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801110e:	4618      	mov	r0, r3
 8011110:	f7f5 f927 	bl	8006362 <HAL_PCD_Start>
 8011114:	4603      	mov	r3, r0
 8011116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011118:	7bfb      	ldrb	r3, [r7, #15]
 801111a:	4618      	mov	r0, r3
 801111c:	f000 f942 	bl	80113a4 <USBD_Get_USB_Status>
 8011120:	4603      	mov	r3, r0
 8011122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011124:	7bbb      	ldrb	r3, [r7, #14]
}
 8011126:	4618      	mov	r0, r3
 8011128:	3710      	adds	r7, #16
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}

0801112e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801112e:	b580      	push	{r7, lr}
 8011130:	b084      	sub	sp, #16
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
 8011136:	4608      	mov	r0, r1
 8011138:	4611      	mov	r1, r2
 801113a:	461a      	mov	r2, r3
 801113c:	4603      	mov	r3, r0
 801113e:	70fb      	strb	r3, [r7, #3]
 8011140:	460b      	mov	r3, r1
 8011142:	70bb      	strb	r3, [r7, #2]
 8011144:	4613      	mov	r3, r2
 8011146:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011148:	2300      	movs	r3, #0
 801114a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801114c:	2300      	movs	r3, #0
 801114e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011156:	78bb      	ldrb	r3, [r7, #2]
 8011158:	883a      	ldrh	r2, [r7, #0]
 801115a:	78f9      	ldrb	r1, [r7, #3]
 801115c:	f7f5 fe28 	bl	8006db0 <HAL_PCD_EP_Open>
 8011160:	4603      	mov	r3, r0
 8011162:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011164:	7bfb      	ldrb	r3, [r7, #15]
 8011166:	4618      	mov	r0, r3
 8011168:	f000 f91c 	bl	80113a4 <USBD_Get_USB_Status>
 801116c:	4603      	mov	r3, r0
 801116e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011170:	7bbb      	ldrb	r3, [r7, #14]
}
 8011172:	4618      	mov	r0, r3
 8011174:	3710      	adds	r7, #16
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}

0801117a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b084      	sub	sp, #16
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
 8011182:	460b      	mov	r3, r1
 8011184:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011186:	2300      	movs	r3, #0
 8011188:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801118a:	2300      	movs	r3, #0
 801118c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011194:	78fa      	ldrb	r2, [r7, #3]
 8011196:	4611      	mov	r1, r2
 8011198:	4618      	mov	r0, r3
 801119a:	f7f5 fe71 	bl	8006e80 <HAL_PCD_EP_Close>
 801119e:	4603      	mov	r3, r0
 80111a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111a2:	7bfb      	ldrb	r3, [r7, #15]
 80111a4:	4618      	mov	r0, r3
 80111a6:	f000 f8fd 	bl	80113a4 <USBD_Get_USB_Status>
 80111aa:	4603      	mov	r3, r0
 80111ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3710      	adds	r7, #16
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	460b      	mov	r3, r1
 80111c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111c4:	2300      	movs	r3, #0
 80111c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111c8:	2300      	movs	r3, #0
 80111ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80111d2:	78fa      	ldrb	r2, [r7, #3]
 80111d4:	4611      	mov	r1, r2
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7f5 ff29 	bl	800702e <HAL_PCD_EP_SetStall>
 80111dc:	4603      	mov	r3, r0
 80111de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111e0:	7bfb      	ldrb	r3, [r7, #15]
 80111e2:	4618      	mov	r0, r3
 80111e4:	f000 f8de 	bl	80113a4 <USBD_Get_USB_Status>
 80111e8:	4603      	mov	r3, r0
 80111ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3710      	adds	r7, #16
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}

080111f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111f6:	b580      	push	{r7, lr}
 80111f8:	b084      	sub	sp, #16
 80111fa:	af00      	add	r7, sp, #0
 80111fc:	6078      	str	r0, [r7, #4]
 80111fe:	460b      	mov	r3, r1
 8011200:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011202:	2300      	movs	r3, #0
 8011204:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011206:	2300      	movs	r3, #0
 8011208:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011210:	78fa      	ldrb	r2, [r7, #3]
 8011212:	4611      	mov	r1, r2
 8011214:	4618      	mov	r0, r3
 8011216:	f7f5 ff6d 	bl	80070f4 <HAL_PCD_EP_ClrStall>
 801121a:	4603      	mov	r3, r0
 801121c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801121e:	7bfb      	ldrb	r3, [r7, #15]
 8011220:	4618      	mov	r0, r3
 8011222:	f000 f8bf 	bl	80113a4 <USBD_Get_USB_Status>
 8011226:	4603      	mov	r3, r0
 8011228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801122a:	7bbb      	ldrb	r3, [r7, #14]
}
 801122c:	4618      	mov	r0, r3
 801122e:	3710      	adds	r7, #16
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}

08011234 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011234:	b480      	push	{r7}
 8011236:	b085      	sub	sp, #20
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
 801123c:	460b      	mov	r3, r1
 801123e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011246:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801124c:	2b00      	cmp	r3, #0
 801124e:	da0b      	bge.n	8011268 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011250:	78fb      	ldrb	r3, [r7, #3]
 8011252:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011256:	68f9      	ldr	r1, [r7, #12]
 8011258:	4613      	mov	r3, r2
 801125a:	00db      	lsls	r3, r3, #3
 801125c:	4413      	add	r3, r2
 801125e:	009b      	lsls	r3, r3, #2
 8011260:	440b      	add	r3, r1
 8011262:	3316      	adds	r3, #22
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	e00b      	b.n	8011280 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011268:	78fb      	ldrb	r3, [r7, #3]
 801126a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801126e:	68f9      	ldr	r1, [r7, #12]
 8011270:	4613      	mov	r3, r2
 8011272:	00db      	lsls	r3, r3, #3
 8011274:	4413      	add	r3, r2
 8011276:	009b      	lsls	r3, r3, #2
 8011278:	440b      	add	r3, r1
 801127a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801127e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011280:	4618      	mov	r0, r3
 8011282:	3714      	adds	r7, #20
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr

0801128c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	460b      	mov	r3, r1
 8011296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011298:	2300      	movs	r3, #0
 801129a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801129c:	2300      	movs	r3, #0
 801129e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80112a6:	78fa      	ldrb	r2, [r7, #3]
 80112a8:	4611      	mov	r1, r2
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7f5 fd5c 	bl	8006d68 <HAL_PCD_SetAddress>
 80112b0:	4603      	mov	r3, r0
 80112b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112b4:	7bfb      	ldrb	r3, [r7, #15]
 80112b6:	4618      	mov	r0, r3
 80112b8:	f000 f874 	bl	80113a4 <USBD_Get_USB_Status>
 80112bc:	4603      	mov	r3, r0
 80112be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3710      	adds	r7, #16
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}

080112ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80112ca:	b580      	push	{r7, lr}
 80112cc:	b086      	sub	sp, #24
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	60f8      	str	r0, [r7, #12]
 80112d2:	607a      	str	r2, [r7, #4]
 80112d4:	603b      	str	r3, [r7, #0]
 80112d6:	460b      	mov	r3, r1
 80112d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112da:	2300      	movs	r3, #0
 80112dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112de:	2300      	movs	r3, #0
 80112e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80112e8:	7af9      	ldrb	r1, [r7, #11]
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	f7f5 fe64 	bl	8006fba <HAL_PCD_EP_Transmit>
 80112f2:	4603      	mov	r3, r0
 80112f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112f6:	7dfb      	ldrb	r3, [r7, #23]
 80112f8:	4618      	mov	r0, r3
 80112fa:	f000 f853 	bl	80113a4 <USBD_Get_USB_Status>
 80112fe:	4603      	mov	r3, r0
 8011300:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011302:	7dbb      	ldrb	r3, [r7, #22]
}
 8011304:	4618      	mov	r0, r3
 8011306:	3718      	adds	r7, #24
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}

0801130c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b086      	sub	sp, #24
 8011310:	af00      	add	r7, sp, #0
 8011312:	60f8      	str	r0, [r7, #12]
 8011314:	607a      	str	r2, [r7, #4]
 8011316:	603b      	str	r3, [r7, #0]
 8011318:	460b      	mov	r3, r1
 801131a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801131c:	2300      	movs	r3, #0
 801131e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011320:	2300      	movs	r3, #0
 8011322:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801132a:	7af9      	ldrb	r1, [r7, #11]
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	687a      	ldr	r2, [r7, #4]
 8011330:	f7f5 fdf0 	bl	8006f14 <HAL_PCD_EP_Receive>
 8011334:	4603      	mov	r3, r0
 8011336:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011338:	7dfb      	ldrb	r3, [r7, #23]
 801133a:	4618      	mov	r0, r3
 801133c:	f000 f832 	bl	80113a4 <USBD_Get_USB_Status>
 8011340:	4603      	mov	r3, r0
 8011342:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011344:	7dbb      	ldrb	r3, [r7, #22]
}
 8011346:	4618      	mov	r0, r3
 8011348:	3718      	adds	r7, #24
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}

0801134e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801134e:	b580      	push	{r7, lr}
 8011350:	b082      	sub	sp, #8
 8011352:	af00      	add	r7, sp, #0
 8011354:	6078      	str	r0, [r7, #4]
 8011356:	460b      	mov	r3, r1
 8011358:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011360:	78fa      	ldrb	r2, [r7, #3]
 8011362:	4611      	mov	r1, r2
 8011364:	4618      	mov	r0, r3
 8011366:	f7f5 fe10 	bl	8006f8a <HAL_PCD_EP_GetRxCount>
 801136a:	4603      	mov	r3, r0
}
 801136c:	4618      	mov	r0, r3
 801136e:	3708      	adds	r7, #8
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}

08011374 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801137c:	4b03      	ldr	r3, [pc, #12]	@ (801138c <USBD_static_malloc+0x18>)
}
 801137e:	4618      	mov	r0, r3
 8011380:	370c      	adds	r7, #12
 8011382:	46bd      	mov	sp, r7
 8011384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011388:	4770      	bx	lr
 801138a:	bf00      	nop
 801138c:	240032b4 	.word	0x240032b4

08011390 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011390:	b480      	push	{r7}
 8011392:	b083      	sub	sp, #12
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011398:	bf00      	nop
 801139a:	370c      	adds	r7, #12
 801139c:	46bd      	mov	sp, r7
 801139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a2:	4770      	bx	lr

080113a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80113a4:	b480      	push	{r7}
 80113a6:	b085      	sub	sp, #20
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	4603      	mov	r3, r0
 80113ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113ae:	2300      	movs	r3, #0
 80113b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80113b2:	79fb      	ldrb	r3, [r7, #7]
 80113b4:	2b03      	cmp	r3, #3
 80113b6:	d817      	bhi.n	80113e8 <USBD_Get_USB_Status+0x44>
 80113b8:	a201      	add	r2, pc, #4	@ (adr r2, 80113c0 <USBD_Get_USB_Status+0x1c>)
 80113ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113be:	bf00      	nop
 80113c0:	080113d1 	.word	0x080113d1
 80113c4:	080113d7 	.word	0x080113d7
 80113c8:	080113dd 	.word	0x080113dd
 80113cc:	080113e3 	.word	0x080113e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80113d0:	2300      	movs	r3, #0
 80113d2:	73fb      	strb	r3, [r7, #15]
    break;
 80113d4:	e00b      	b.n	80113ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80113d6:	2303      	movs	r3, #3
 80113d8:	73fb      	strb	r3, [r7, #15]
    break;
 80113da:	e008      	b.n	80113ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80113dc:	2301      	movs	r3, #1
 80113de:	73fb      	strb	r3, [r7, #15]
    break;
 80113e0:	e005      	b.n	80113ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80113e2:	2303      	movs	r3, #3
 80113e4:	73fb      	strb	r3, [r7, #15]
    break;
 80113e6:	e002      	b.n	80113ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80113e8:	2303      	movs	r3, #3
 80113ea:	73fb      	strb	r3, [r7, #15]
    break;
 80113ec:	bf00      	nop
  }
  return usb_status;
 80113ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3714      	adds	r7, #20
 80113f4:	46bd      	mov	sp, r7
 80113f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fa:	4770      	bx	lr

080113fc <__cvt>:
 80113fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113fe:	ed2d 8b02 	vpush	{d8}
 8011402:	eeb0 8b40 	vmov.f64	d8, d0
 8011406:	b085      	sub	sp, #20
 8011408:	4617      	mov	r7, r2
 801140a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801140c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801140e:	ee18 2a90 	vmov	r2, s17
 8011412:	f025 0520 	bic.w	r5, r5, #32
 8011416:	2a00      	cmp	r2, #0
 8011418:	bfb6      	itet	lt
 801141a:	222d      	movlt	r2, #45	@ 0x2d
 801141c:	2200      	movge	r2, #0
 801141e:	eeb1 8b40 	vneglt.f64	d8, d0
 8011422:	2d46      	cmp	r5, #70	@ 0x46
 8011424:	460c      	mov	r4, r1
 8011426:	701a      	strb	r2, [r3, #0]
 8011428:	d004      	beq.n	8011434 <__cvt+0x38>
 801142a:	2d45      	cmp	r5, #69	@ 0x45
 801142c:	d100      	bne.n	8011430 <__cvt+0x34>
 801142e:	3401      	adds	r4, #1
 8011430:	2102      	movs	r1, #2
 8011432:	e000      	b.n	8011436 <__cvt+0x3a>
 8011434:	2103      	movs	r1, #3
 8011436:	ab03      	add	r3, sp, #12
 8011438:	9301      	str	r3, [sp, #4]
 801143a:	ab02      	add	r3, sp, #8
 801143c:	9300      	str	r3, [sp, #0]
 801143e:	4622      	mov	r2, r4
 8011440:	4633      	mov	r3, r6
 8011442:	eeb0 0b48 	vmov.f64	d0, d8
 8011446:	f000 fe4b 	bl	80120e0 <_dtoa_r>
 801144a:	2d47      	cmp	r5, #71	@ 0x47
 801144c:	d114      	bne.n	8011478 <__cvt+0x7c>
 801144e:	07fb      	lsls	r3, r7, #31
 8011450:	d50a      	bpl.n	8011468 <__cvt+0x6c>
 8011452:	1902      	adds	r2, r0, r4
 8011454:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801145c:	bf08      	it	eq
 801145e:	9203      	streq	r2, [sp, #12]
 8011460:	2130      	movs	r1, #48	@ 0x30
 8011462:	9b03      	ldr	r3, [sp, #12]
 8011464:	4293      	cmp	r3, r2
 8011466:	d319      	bcc.n	801149c <__cvt+0xa0>
 8011468:	9b03      	ldr	r3, [sp, #12]
 801146a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801146c:	1a1b      	subs	r3, r3, r0
 801146e:	6013      	str	r3, [r2, #0]
 8011470:	b005      	add	sp, #20
 8011472:	ecbd 8b02 	vpop	{d8}
 8011476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011478:	2d46      	cmp	r5, #70	@ 0x46
 801147a:	eb00 0204 	add.w	r2, r0, r4
 801147e:	d1e9      	bne.n	8011454 <__cvt+0x58>
 8011480:	7803      	ldrb	r3, [r0, #0]
 8011482:	2b30      	cmp	r3, #48	@ 0x30
 8011484:	d107      	bne.n	8011496 <__cvt+0x9a>
 8011486:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801148e:	bf1c      	itt	ne
 8011490:	f1c4 0401 	rsbne	r4, r4, #1
 8011494:	6034      	strne	r4, [r6, #0]
 8011496:	6833      	ldr	r3, [r6, #0]
 8011498:	441a      	add	r2, r3
 801149a:	e7db      	b.n	8011454 <__cvt+0x58>
 801149c:	1c5c      	adds	r4, r3, #1
 801149e:	9403      	str	r4, [sp, #12]
 80114a0:	7019      	strb	r1, [r3, #0]
 80114a2:	e7de      	b.n	8011462 <__cvt+0x66>

080114a4 <__exponent>:
 80114a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114a6:	2900      	cmp	r1, #0
 80114a8:	bfba      	itte	lt
 80114aa:	4249      	neglt	r1, r1
 80114ac:	232d      	movlt	r3, #45	@ 0x2d
 80114ae:	232b      	movge	r3, #43	@ 0x2b
 80114b0:	2909      	cmp	r1, #9
 80114b2:	7002      	strb	r2, [r0, #0]
 80114b4:	7043      	strb	r3, [r0, #1]
 80114b6:	dd29      	ble.n	801150c <__exponent+0x68>
 80114b8:	f10d 0307 	add.w	r3, sp, #7
 80114bc:	461d      	mov	r5, r3
 80114be:	270a      	movs	r7, #10
 80114c0:	461a      	mov	r2, r3
 80114c2:	fbb1 f6f7 	udiv	r6, r1, r7
 80114c6:	fb07 1416 	mls	r4, r7, r6, r1
 80114ca:	3430      	adds	r4, #48	@ 0x30
 80114cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80114d0:	460c      	mov	r4, r1
 80114d2:	2c63      	cmp	r4, #99	@ 0x63
 80114d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80114d8:	4631      	mov	r1, r6
 80114da:	dcf1      	bgt.n	80114c0 <__exponent+0x1c>
 80114dc:	3130      	adds	r1, #48	@ 0x30
 80114de:	1e94      	subs	r4, r2, #2
 80114e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80114e4:	1c41      	adds	r1, r0, #1
 80114e6:	4623      	mov	r3, r4
 80114e8:	42ab      	cmp	r3, r5
 80114ea:	d30a      	bcc.n	8011502 <__exponent+0x5e>
 80114ec:	f10d 0309 	add.w	r3, sp, #9
 80114f0:	1a9b      	subs	r3, r3, r2
 80114f2:	42ac      	cmp	r4, r5
 80114f4:	bf88      	it	hi
 80114f6:	2300      	movhi	r3, #0
 80114f8:	3302      	adds	r3, #2
 80114fa:	4403      	add	r3, r0
 80114fc:	1a18      	subs	r0, r3, r0
 80114fe:	b003      	add	sp, #12
 8011500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011502:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011506:	f801 6f01 	strb.w	r6, [r1, #1]!
 801150a:	e7ed      	b.n	80114e8 <__exponent+0x44>
 801150c:	2330      	movs	r3, #48	@ 0x30
 801150e:	3130      	adds	r1, #48	@ 0x30
 8011510:	7083      	strb	r3, [r0, #2]
 8011512:	70c1      	strb	r1, [r0, #3]
 8011514:	1d03      	adds	r3, r0, #4
 8011516:	e7f1      	b.n	80114fc <__exponent+0x58>

08011518 <_printf_float>:
 8011518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801151c:	b08d      	sub	sp, #52	@ 0x34
 801151e:	460c      	mov	r4, r1
 8011520:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011524:	4616      	mov	r6, r2
 8011526:	461f      	mov	r7, r3
 8011528:	4605      	mov	r5, r0
 801152a:	f000 fccb 	bl	8011ec4 <_localeconv_r>
 801152e:	f8d0 b000 	ldr.w	fp, [r0]
 8011532:	4658      	mov	r0, fp
 8011534:	f7ee ff3c 	bl	80003b0 <strlen>
 8011538:	2300      	movs	r3, #0
 801153a:	930a      	str	r3, [sp, #40]	@ 0x28
 801153c:	f8d8 3000 	ldr.w	r3, [r8]
 8011540:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011544:	6822      	ldr	r2, [r4, #0]
 8011546:	9005      	str	r0, [sp, #20]
 8011548:	3307      	adds	r3, #7
 801154a:	f023 0307 	bic.w	r3, r3, #7
 801154e:	f103 0108 	add.w	r1, r3, #8
 8011552:	f8c8 1000 	str.w	r1, [r8]
 8011556:	ed93 0b00 	vldr	d0, [r3]
 801155a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80117b8 <_printf_float+0x2a0>
 801155e:	eeb0 7bc0 	vabs.f64	d7, d0
 8011562:	eeb4 7b46 	vcmp.f64	d7, d6
 8011566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801156a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801156e:	dd24      	ble.n	80115ba <_printf_float+0xa2>
 8011570:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011578:	d502      	bpl.n	8011580 <_printf_float+0x68>
 801157a:	232d      	movs	r3, #45	@ 0x2d
 801157c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011580:	498f      	ldr	r1, [pc, #572]	@ (80117c0 <_printf_float+0x2a8>)
 8011582:	4b90      	ldr	r3, [pc, #576]	@ (80117c4 <_printf_float+0x2ac>)
 8011584:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011588:	bf94      	ite	ls
 801158a:	4688      	movls	r8, r1
 801158c:	4698      	movhi	r8, r3
 801158e:	f022 0204 	bic.w	r2, r2, #4
 8011592:	2303      	movs	r3, #3
 8011594:	6123      	str	r3, [r4, #16]
 8011596:	6022      	str	r2, [r4, #0]
 8011598:	f04f 0a00 	mov.w	sl, #0
 801159c:	9700      	str	r7, [sp, #0]
 801159e:	4633      	mov	r3, r6
 80115a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80115a2:	4621      	mov	r1, r4
 80115a4:	4628      	mov	r0, r5
 80115a6:	f000 f9d1 	bl	801194c <_printf_common>
 80115aa:	3001      	adds	r0, #1
 80115ac:	f040 8089 	bne.w	80116c2 <_printf_float+0x1aa>
 80115b0:	f04f 30ff 	mov.w	r0, #4294967295
 80115b4:	b00d      	add	sp, #52	@ 0x34
 80115b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ba:	eeb4 0b40 	vcmp.f64	d0, d0
 80115be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c2:	d709      	bvc.n	80115d8 <_printf_float+0xc0>
 80115c4:	ee10 3a90 	vmov	r3, s1
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	bfbc      	itt	lt
 80115cc:	232d      	movlt	r3, #45	@ 0x2d
 80115ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80115d2:	497d      	ldr	r1, [pc, #500]	@ (80117c8 <_printf_float+0x2b0>)
 80115d4:	4b7d      	ldr	r3, [pc, #500]	@ (80117cc <_printf_float+0x2b4>)
 80115d6:	e7d5      	b.n	8011584 <_printf_float+0x6c>
 80115d8:	6863      	ldr	r3, [r4, #4]
 80115da:	1c59      	adds	r1, r3, #1
 80115dc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80115e0:	d139      	bne.n	8011656 <_printf_float+0x13e>
 80115e2:	2306      	movs	r3, #6
 80115e4:	6063      	str	r3, [r4, #4]
 80115e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80115ea:	2300      	movs	r3, #0
 80115ec:	6022      	str	r2, [r4, #0]
 80115ee:	9303      	str	r3, [sp, #12]
 80115f0:	ab0a      	add	r3, sp, #40	@ 0x28
 80115f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80115f6:	ab09      	add	r3, sp, #36	@ 0x24
 80115f8:	9300      	str	r3, [sp, #0]
 80115fa:	6861      	ldr	r1, [r4, #4]
 80115fc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011600:	4628      	mov	r0, r5
 8011602:	f7ff fefb 	bl	80113fc <__cvt>
 8011606:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801160a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801160c:	4680      	mov	r8, r0
 801160e:	d129      	bne.n	8011664 <_printf_float+0x14c>
 8011610:	1cc8      	adds	r0, r1, #3
 8011612:	db02      	blt.n	801161a <_printf_float+0x102>
 8011614:	6863      	ldr	r3, [r4, #4]
 8011616:	4299      	cmp	r1, r3
 8011618:	dd41      	ble.n	801169e <_printf_float+0x186>
 801161a:	f1a9 0902 	sub.w	r9, r9, #2
 801161e:	fa5f f989 	uxtb.w	r9, r9
 8011622:	3901      	subs	r1, #1
 8011624:	464a      	mov	r2, r9
 8011626:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801162a:	9109      	str	r1, [sp, #36]	@ 0x24
 801162c:	f7ff ff3a 	bl	80114a4 <__exponent>
 8011630:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011632:	1813      	adds	r3, r2, r0
 8011634:	2a01      	cmp	r2, #1
 8011636:	4682      	mov	sl, r0
 8011638:	6123      	str	r3, [r4, #16]
 801163a:	dc02      	bgt.n	8011642 <_printf_float+0x12a>
 801163c:	6822      	ldr	r2, [r4, #0]
 801163e:	07d2      	lsls	r2, r2, #31
 8011640:	d501      	bpl.n	8011646 <_printf_float+0x12e>
 8011642:	3301      	adds	r3, #1
 8011644:	6123      	str	r3, [r4, #16]
 8011646:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801164a:	2b00      	cmp	r3, #0
 801164c:	d0a6      	beq.n	801159c <_printf_float+0x84>
 801164e:	232d      	movs	r3, #45	@ 0x2d
 8011650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011654:	e7a2      	b.n	801159c <_printf_float+0x84>
 8011656:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801165a:	d1c4      	bne.n	80115e6 <_printf_float+0xce>
 801165c:	2b00      	cmp	r3, #0
 801165e:	d1c2      	bne.n	80115e6 <_printf_float+0xce>
 8011660:	2301      	movs	r3, #1
 8011662:	e7bf      	b.n	80115e4 <_printf_float+0xcc>
 8011664:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011668:	d9db      	bls.n	8011622 <_printf_float+0x10a>
 801166a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801166e:	d118      	bne.n	80116a2 <_printf_float+0x18a>
 8011670:	2900      	cmp	r1, #0
 8011672:	6863      	ldr	r3, [r4, #4]
 8011674:	dd0b      	ble.n	801168e <_printf_float+0x176>
 8011676:	6121      	str	r1, [r4, #16]
 8011678:	b913      	cbnz	r3, 8011680 <_printf_float+0x168>
 801167a:	6822      	ldr	r2, [r4, #0]
 801167c:	07d0      	lsls	r0, r2, #31
 801167e:	d502      	bpl.n	8011686 <_printf_float+0x16e>
 8011680:	3301      	adds	r3, #1
 8011682:	440b      	add	r3, r1
 8011684:	6123      	str	r3, [r4, #16]
 8011686:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011688:	f04f 0a00 	mov.w	sl, #0
 801168c:	e7db      	b.n	8011646 <_printf_float+0x12e>
 801168e:	b913      	cbnz	r3, 8011696 <_printf_float+0x17e>
 8011690:	6822      	ldr	r2, [r4, #0]
 8011692:	07d2      	lsls	r2, r2, #31
 8011694:	d501      	bpl.n	801169a <_printf_float+0x182>
 8011696:	3302      	adds	r3, #2
 8011698:	e7f4      	b.n	8011684 <_printf_float+0x16c>
 801169a:	2301      	movs	r3, #1
 801169c:	e7f2      	b.n	8011684 <_printf_float+0x16c>
 801169e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80116a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116a4:	4299      	cmp	r1, r3
 80116a6:	db05      	blt.n	80116b4 <_printf_float+0x19c>
 80116a8:	6823      	ldr	r3, [r4, #0]
 80116aa:	6121      	str	r1, [r4, #16]
 80116ac:	07d8      	lsls	r0, r3, #31
 80116ae:	d5ea      	bpl.n	8011686 <_printf_float+0x16e>
 80116b0:	1c4b      	adds	r3, r1, #1
 80116b2:	e7e7      	b.n	8011684 <_printf_float+0x16c>
 80116b4:	2900      	cmp	r1, #0
 80116b6:	bfd4      	ite	le
 80116b8:	f1c1 0202 	rsble	r2, r1, #2
 80116bc:	2201      	movgt	r2, #1
 80116be:	4413      	add	r3, r2
 80116c0:	e7e0      	b.n	8011684 <_printf_float+0x16c>
 80116c2:	6823      	ldr	r3, [r4, #0]
 80116c4:	055a      	lsls	r2, r3, #21
 80116c6:	d407      	bmi.n	80116d8 <_printf_float+0x1c0>
 80116c8:	6923      	ldr	r3, [r4, #16]
 80116ca:	4642      	mov	r2, r8
 80116cc:	4631      	mov	r1, r6
 80116ce:	4628      	mov	r0, r5
 80116d0:	47b8      	blx	r7
 80116d2:	3001      	adds	r0, #1
 80116d4:	d12a      	bne.n	801172c <_printf_float+0x214>
 80116d6:	e76b      	b.n	80115b0 <_printf_float+0x98>
 80116d8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80116dc:	f240 80e0 	bls.w	80118a0 <_printf_float+0x388>
 80116e0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80116e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80116e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ec:	d133      	bne.n	8011756 <_printf_float+0x23e>
 80116ee:	4a38      	ldr	r2, [pc, #224]	@ (80117d0 <_printf_float+0x2b8>)
 80116f0:	2301      	movs	r3, #1
 80116f2:	4631      	mov	r1, r6
 80116f4:	4628      	mov	r0, r5
 80116f6:	47b8      	blx	r7
 80116f8:	3001      	adds	r0, #1
 80116fa:	f43f af59 	beq.w	80115b0 <_printf_float+0x98>
 80116fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011702:	4543      	cmp	r3, r8
 8011704:	db02      	blt.n	801170c <_printf_float+0x1f4>
 8011706:	6823      	ldr	r3, [r4, #0]
 8011708:	07d8      	lsls	r0, r3, #31
 801170a:	d50f      	bpl.n	801172c <_printf_float+0x214>
 801170c:	9b05      	ldr	r3, [sp, #20]
 801170e:	465a      	mov	r2, fp
 8011710:	4631      	mov	r1, r6
 8011712:	4628      	mov	r0, r5
 8011714:	47b8      	blx	r7
 8011716:	3001      	adds	r0, #1
 8011718:	f43f af4a 	beq.w	80115b0 <_printf_float+0x98>
 801171c:	f04f 0900 	mov.w	r9, #0
 8011720:	f108 38ff 	add.w	r8, r8, #4294967295
 8011724:	f104 0a1a 	add.w	sl, r4, #26
 8011728:	45c8      	cmp	r8, r9
 801172a:	dc09      	bgt.n	8011740 <_printf_float+0x228>
 801172c:	6823      	ldr	r3, [r4, #0]
 801172e:	079b      	lsls	r3, r3, #30
 8011730:	f100 8107 	bmi.w	8011942 <_printf_float+0x42a>
 8011734:	68e0      	ldr	r0, [r4, #12]
 8011736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011738:	4298      	cmp	r0, r3
 801173a:	bfb8      	it	lt
 801173c:	4618      	movlt	r0, r3
 801173e:	e739      	b.n	80115b4 <_printf_float+0x9c>
 8011740:	2301      	movs	r3, #1
 8011742:	4652      	mov	r2, sl
 8011744:	4631      	mov	r1, r6
 8011746:	4628      	mov	r0, r5
 8011748:	47b8      	blx	r7
 801174a:	3001      	adds	r0, #1
 801174c:	f43f af30 	beq.w	80115b0 <_printf_float+0x98>
 8011750:	f109 0901 	add.w	r9, r9, #1
 8011754:	e7e8      	b.n	8011728 <_printf_float+0x210>
 8011756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011758:	2b00      	cmp	r3, #0
 801175a:	dc3b      	bgt.n	80117d4 <_printf_float+0x2bc>
 801175c:	4a1c      	ldr	r2, [pc, #112]	@ (80117d0 <_printf_float+0x2b8>)
 801175e:	2301      	movs	r3, #1
 8011760:	4631      	mov	r1, r6
 8011762:	4628      	mov	r0, r5
 8011764:	47b8      	blx	r7
 8011766:	3001      	adds	r0, #1
 8011768:	f43f af22 	beq.w	80115b0 <_printf_float+0x98>
 801176c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011770:	ea59 0303 	orrs.w	r3, r9, r3
 8011774:	d102      	bne.n	801177c <_printf_float+0x264>
 8011776:	6823      	ldr	r3, [r4, #0]
 8011778:	07d9      	lsls	r1, r3, #31
 801177a:	d5d7      	bpl.n	801172c <_printf_float+0x214>
 801177c:	9b05      	ldr	r3, [sp, #20]
 801177e:	465a      	mov	r2, fp
 8011780:	4631      	mov	r1, r6
 8011782:	4628      	mov	r0, r5
 8011784:	47b8      	blx	r7
 8011786:	3001      	adds	r0, #1
 8011788:	f43f af12 	beq.w	80115b0 <_printf_float+0x98>
 801178c:	f04f 0a00 	mov.w	sl, #0
 8011790:	f104 0b1a 	add.w	fp, r4, #26
 8011794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011796:	425b      	negs	r3, r3
 8011798:	4553      	cmp	r3, sl
 801179a:	dc01      	bgt.n	80117a0 <_printf_float+0x288>
 801179c:	464b      	mov	r3, r9
 801179e:	e794      	b.n	80116ca <_printf_float+0x1b2>
 80117a0:	2301      	movs	r3, #1
 80117a2:	465a      	mov	r2, fp
 80117a4:	4631      	mov	r1, r6
 80117a6:	4628      	mov	r0, r5
 80117a8:	47b8      	blx	r7
 80117aa:	3001      	adds	r0, #1
 80117ac:	f43f af00 	beq.w	80115b0 <_printf_float+0x98>
 80117b0:	f10a 0a01 	add.w	sl, sl, #1
 80117b4:	e7ee      	b.n	8011794 <_printf_float+0x27c>
 80117b6:	bf00      	nop
 80117b8:	ffffffff 	.word	0xffffffff
 80117bc:	7fefffff 	.word	0x7fefffff
 80117c0:	0801401c 	.word	0x0801401c
 80117c4:	08014020 	.word	0x08014020
 80117c8:	08014024 	.word	0x08014024
 80117cc:	08014028 	.word	0x08014028
 80117d0:	0801402c 	.word	0x0801402c
 80117d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80117d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80117da:	4553      	cmp	r3, sl
 80117dc:	bfa8      	it	ge
 80117de:	4653      	movge	r3, sl
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	4699      	mov	r9, r3
 80117e4:	dc37      	bgt.n	8011856 <_printf_float+0x33e>
 80117e6:	2300      	movs	r3, #0
 80117e8:	9307      	str	r3, [sp, #28]
 80117ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80117ee:	f104 021a 	add.w	r2, r4, #26
 80117f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80117f4:	9907      	ldr	r1, [sp, #28]
 80117f6:	9306      	str	r3, [sp, #24]
 80117f8:	eba3 0309 	sub.w	r3, r3, r9
 80117fc:	428b      	cmp	r3, r1
 80117fe:	dc31      	bgt.n	8011864 <_printf_float+0x34c>
 8011800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011802:	459a      	cmp	sl, r3
 8011804:	dc3b      	bgt.n	801187e <_printf_float+0x366>
 8011806:	6823      	ldr	r3, [r4, #0]
 8011808:	07da      	lsls	r2, r3, #31
 801180a:	d438      	bmi.n	801187e <_printf_float+0x366>
 801180c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801180e:	ebaa 0903 	sub.w	r9, sl, r3
 8011812:	9b06      	ldr	r3, [sp, #24]
 8011814:	ebaa 0303 	sub.w	r3, sl, r3
 8011818:	4599      	cmp	r9, r3
 801181a:	bfa8      	it	ge
 801181c:	4699      	movge	r9, r3
 801181e:	f1b9 0f00 	cmp.w	r9, #0
 8011822:	dc34      	bgt.n	801188e <_printf_float+0x376>
 8011824:	f04f 0800 	mov.w	r8, #0
 8011828:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801182c:	f104 0b1a 	add.w	fp, r4, #26
 8011830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011832:	ebaa 0303 	sub.w	r3, sl, r3
 8011836:	eba3 0309 	sub.w	r3, r3, r9
 801183a:	4543      	cmp	r3, r8
 801183c:	f77f af76 	ble.w	801172c <_printf_float+0x214>
 8011840:	2301      	movs	r3, #1
 8011842:	465a      	mov	r2, fp
 8011844:	4631      	mov	r1, r6
 8011846:	4628      	mov	r0, r5
 8011848:	47b8      	blx	r7
 801184a:	3001      	adds	r0, #1
 801184c:	f43f aeb0 	beq.w	80115b0 <_printf_float+0x98>
 8011850:	f108 0801 	add.w	r8, r8, #1
 8011854:	e7ec      	b.n	8011830 <_printf_float+0x318>
 8011856:	4642      	mov	r2, r8
 8011858:	4631      	mov	r1, r6
 801185a:	4628      	mov	r0, r5
 801185c:	47b8      	blx	r7
 801185e:	3001      	adds	r0, #1
 8011860:	d1c1      	bne.n	80117e6 <_printf_float+0x2ce>
 8011862:	e6a5      	b.n	80115b0 <_printf_float+0x98>
 8011864:	2301      	movs	r3, #1
 8011866:	4631      	mov	r1, r6
 8011868:	4628      	mov	r0, r5
 801186a:	9206      	str	r2, [sp, #24]
 801186c:	47b8      	blx	r7
 801186e:	3001      	adds	r0, #1
 8011870:	f43f ae9e 	beq.w	80115b0 <_printf_float+0x98>
 8011874:	9b07      	ldr	r3, [sp, #28]
 8011876:	9a06      	ldr	r2, [sp, #24]
 8011878:	3301      	adds	r3, #1
 801187a:	9307      	str	r3, [sp, #28]
 801187c:	e7b9      	b.n	80117f2 <_printf_float+0x2da>
 801187e:	9b05      	ldr	r3, [sp, #20]
 8011880:	465a      	mov	r2, fp
 8011882:	4631      	mov	r1, r6
 8011884:	4628      	mov	r0, r5
 8011886:	47b8      	blx	r7
 8011888:	3001      	adds	r0, #1
 801188a:	d1bf      	bne.n	801180c <_printf_float+0x2f4>
 801188c:	e690      	b.n	80115b0 <_printf_float+0x98>
 801188e:	9a06      	ldr	r2, [sp, #24]
 8011890:	464b      	mov	r3, r9
 8011892:	4442      	add	r2, r8
 8011894:	4631      	mov	r1, r6
 8011896:	4628      	mov	r0, r5
 8011898:	47b8      	blx	r7
 801189a:	3001      	adds	r0, #1
 801189c:	d1c2      	bne.n	8011824 <_printf_float+0x30c>
 801189e:	e687      	b.n	80115b0 <_printf_float+0x98>
 80118a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80118a4:	f1b9 0f01 	cmp.w	r9, #1
 80118a8:	dc01      	bgt.n	80118ae <_printf_float+0x396>
 80118aa:	07db      	lsls	r3, r3, #31
 80118ac:	d536      	bpl.n	801191c <_printf_float+0x404>
 80118ae:	2301      	movs	r3, #1
 80118b0:	4642      	mov	r2, r8
 80118b2:	4631      	mov	r1, r6
 80118b4:	4628      	mov	r0, r5
 80118b6:	47b8      	blx	r7
 80118b8:	3001      	adds	r0, #1
 80118ba:	f43f ae79 	beq.w	80115b0 <_printf_float+0x98>
 80118be:	9b05      	ldr	r3, [sp, #20]
 80118c0:	465a      	mov	r2, fp
 80118c2:	4631      	mov	r1, r6
 80118c4:	4628      	mov	r0, r5
 80118c6:	47b8      	blx	r7
 80118c8:	3001      	adds	r0, #1
 80118ca:	f43f ae71 	beq.w	80115b0 <_printf_float+0x98>
 80118ce:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80118d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80118d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118da:	f109 39ff 	add.w	r9, r9, #4294967295
 80118de:	d018      	beq.n	8011912 <_printf_float+0x3fa>
 80118e0:	464b      	mov	r3, r9
 80118e2:	f108 0201 	add.w	r2, r8, #1
 80118e6:	4631      	mov	r1, r6
 80118e8:	4628      	mov	r0, r5
 80118ea:	47b8      	blx	r7
 80118ec:	3001      	adds	r0, #1
 80118ee:	d10c      	bne.n	801190a <_printf_float+0x3f2>
 80118f0:	e65e      	b.n	80115b0 <_printf_float+0x98>
 80118f2:	2301      	movs	r3, #1
 80118f4:	465a      	mov	r2, fp
 80118f6:	4631      	mov	r1, r6
 80118f8:	4628      	mov	r0, r5
 80118fa:	47b8      	blx	r7
 80118fc:	3001      	adds	r0, #1
 80118fe:	f43f ae57 	beq.w	80115b0 <_printf_float+0x98>
 8011902:	f108 0801 	add.w	r8, r8, #1
 8011906:	45c8      	cmp	r8, r9
 8011908:	dbf3      	blt.n	80118f2 <_printf_float+0x3da>
 801190a:	4653      	mov	r3, sl
 801190c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011910:	e6dc      	b.n	80116cc <_printf_float+0x1b4>
 8011912:	f04f 0800 	mov.w	r8, #0
 8011916:	f104 0b1a 	add.w	fp, r4, #26
 801191a:	e7f4      	b.n	8011906 <_printf_float+0x3ee>
 801191c:	2301      	movs	r3, #1
 801191e:	4642      	mov	r2, r8
 8011920:	e7e1      	b.n	80118e6 <_printf_float+0x3ce>
 8011922:	2301      	movs	r3, #1
 8011924:	464a      	mov	r2, r9
 8011926:	4631      	mov	r1, r6
 8011928:	4628      	mov	r0, r5
 801192a:	47b8      	blx	r7
 801192c:	3001      	adds	r0, #1
 801192e:	f43f ae3f 	beq.w	80115b0 <_printf_float+0x98>
 8011932:	f108 0801 	add.w	r8, r8, #1
 8011936:	68e3      	ldr	r3, [r4, #12]
 8011938:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801193a:	1a5b      	subs	r3, r3, r1
 801193c:	4543      	cmp	r3, r8
 801193e:	dcf0      	bgt.n	8011922 <_printf_float+0x40a>
 8011940:	e6f8      	b.n	8011734 <_printf_float+0x21c>
 8011942:	f04f 0800 	mov.w	r8, #0
 8011946:	f104 0919 	add.w	r9, r4, #25
 801194a:	e7f4      	b.n	8011936 <_printf_float+0x41e>

0801194c <_printf_common>:
 801194c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011950:	4616      	mov	r6, r2
 8011952:	4698      	mov	r8, r3
 8011954:	688a      	ldr	r2, [r1, #8]
 8011956:	690b      	ldr	r3, [r1, #16]
 8011958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801195c:	4293      	cmp	r3, r2
 801195e:	bfb8      	it	lt
 8011960:	4613      	movlt	r3, r2
 8011962:	6033      	str	r3, [r6, #0]
 8011964:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011968:	4607      	mov	r7, r0
 801196a:	460c      	mov	r4, r1
 801196c:	b10a      	cbz	r2, 8011972 <_printf_common+0x26>
 801196e:	3301      	adds	r3, #1
 8011970:	6033      	str	r3, [r6, #0]
 8011972:	6823      	ldr	r3, [r4, #0]
 8011974:	0699      	lsls	r1, r3, #26
 8011976:	bf42      	ittt	mi
 8011978:	6833      	ldrmi	r3, [r6, #0]
 801197a:	3302      	addmi	r3, #2
 801197c:	6033      	strmi	r3, [r6, #0]
 801197e:	6825      	ldr	r5, [r4, #0]
 8011980:	f015 0506 	ands.w	r5, r5, #6
 8011984:	d106      	bne.n	8011994 <_printf_common+0x48>
 8011986:	f104 0a19 	add.w	sl, r4, #25
 801198a:	68e3      	ldr	r3, [r4, #12]
 801198c:	6832      	ldr	r2, [r6, #0]
 801198e:	1a9b      	subs	r3, r3, r2
 8011990:	42ab      	cmp	r3, r5
 8011992:	dc26      	bgt.n	80119e2 <_printf_common+0x96>
 8011994:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011998:	6822      	ldr	r2, [r4, #0]
 801199a:	3b00      	subs	r3, #0
 801199c:	bf18      	it	ne
 801199e:	2301      	movne	r3, #1
 80119a0:	0692      	lsls	r2, r2, #26
 80119a2:	d42b      	bmi.n	80119fc <_printf_common+0xb0>
 80119a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80119a8:	4641      	mov	r1, r8
 80119aa:	4638      	mov	r0, r7
 80119ac:	47c8      	blx	r9
 80119ae:	3001      	adds	r0, #1
 80119b0:	d01e      	beq.n	80119f0 <_printf_common+0xa4>
 80119b2:	6823      	ldr	r3, [r4, #0]
 80119b4:	6922      	ldr	r2, [r4, #16]
 80119b6:	f003 0306 	and.w	r3, r3, #6
 80119ba:	2b04      	cmp	r3, #4
 80119bc:	bf02      	ittt	eq
 80119be:	68e5      	ldreq	r5, [r4, #12]
 80119c0:	6833      	ldreq	r3, [r6, #0]
 80119c2:	1aed      	subeq	r5, r5, r3
 80119c4:	68a3      	ldr	r3, [r4, #8]
 80119c6:	bf0c      	ite	eq
 80119c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80119cc:	2500      	movne	r5, #0
 80119ce:	4293      	cmp	r3, r2
 80119d0:	bfc4      	itt	gt
 80119d2:	1a9b      	subgt	r3, r3, r2
 80119d4:	18ed      	addgt	r5, r5, r3
 80119d6:	2600      	movs	r6, #0
 80119d8:	341a      	adds	r4, #26
 80119da:	42b5      	cmp	r5, r6
 80119dc:	d11a      	bne.n	8011a14 <_printf_common+0xc8>
 80119de:	2000      	movs	r0, #0
 80119e0:	e008      	b.n	80119f4 <_printf_common+0xa8>
 80119e2:	2301      	movs	r3, #1
 80119e4:	4652      	mov	r2, sl
 80119e6:	4641      	mov	r1, r8
 80119e8:	4638      	mov	r0, r7
 80119ea:	47c8      	blx	r9
 80119ec:	3001      	adds	r0, #1
 80119ee:	d103      	bne.n	80119f8 <_printf_common+0xac>
 80119f0:	f04f 30ff 	mov.w	r0, #4294967295
 80119f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119f8:	3501      	adds	r5, #1
 80119fa:	e7c6      	b.n	801198a <_printf_common+0x3e>
 80119fc:	18e1      	adds	r1, r4, r3
 80119fe:	1c5a      	adds	r2, r3, #1
 8011a00:	2030      	movs	r0, #48	@ 0x30
 8011a02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011a06:	4422      	add	r2, r4
 8011a08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011a0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011a10:	3302      	adds	r3, #2
 8011a12:	e7c7      	b.n	80119a4 <_printf_common+0x58>
 8011a14:	2301      	movs	r3, #1
 8011a16:	4622      	mov	r2, r4
 8011a18:	4641      	mov	r1, r8
 8011a1a:	4638      	mov	r0, r7
 8011a1c:	47c8      	blx	r9
 8011a1e:	3001      	adds	r0, #1
 8011a20:	d0e6      	beq.n	80119f0 <_printf_common+0xa4>
 8011a22:	3601      	adds	r6, #1
 8011a24:	e7d9      	b.n	80119da <_printf_common+0x8e>
	...

08011a28 <_printf_i>:
 8011a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a2c:	7e0f      	ldrb	r7, [r1, #24]
 8011a2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011a30:	2f78      	cmp	r7, #120	@ 0x78
 8011a32:	4691      	mov	r9, r2
 8011a34:	4680      	mov	r8, r0
 8011a36:	460c      	mov	r4, r1
 8011a38:	469a      	mov	sl, r3
 8011a3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011a3e:	d807      	bhi.n	8011a50 <_printf_i+0x28>
 8011a40:	2f62      	cmp	r7, #98	@ 0x62
 8011a42:	d80a      	bhi.n	8011a5a <_printf_i+0x32>
 8011a44:	2f00      	cmp	r7, #0
 8011a46:	f000 80d2 	beq.w	8011bee <_printf_i+0x1c6>
 8011a4a:	2f58      	cmp	r7, #88	@ 0x58
 8011a4c:	f000 80b9 	beq.w	8011bc2 <_printf_i+0x19a>
 8011a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011a54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011a58:	e03a      	b.n	8011ad0 <_printf_i+0xa8>
 8011a5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011a5e:	2b15      	cmp	r3, #21
 8011a60:	d8f6      	bhi.n	8011a50 <_printf_i+0x28>
 8011a62:	a101      	add	r1, pc, #4	@ (adr r1, 8011a68 <_printf_i+0x40>)
 8011a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011a68:	08011ac1 	.word	0x08011ac1
 8011a6c:	08011ad5 	.word	0x08011ad5
 8011a70:	08011a51 	.word	0x08011a51
 8011a74:	08011a51 	.word	0x08011a51
 8011a78:	08011a51 	.word	0x08011a51
 8011a7c:	08011a51 	.word	0x08011a51
 8011a80:	08011ad5 	.word	0x08011ad5
 8011a84:	08011a51 	.word	0x08011a51
 8011a88:	08011a51 	.word	0x08011a51
 8011a8c:	08011a51 	.word	0x08011a51
 8011a90:	08011a51 	.word	0x08011a51
 8011a94:	08011bd5 	.word	0x08011bd5
 8011a98:	08011aff 	.word	0x08011aff
 8011a9c:	08011b8f 	.word	0x08011b8f
 8011aa0:	08011a51 	.word	0x08011a51
 8011aa4:	08011a51 	.word	0x08011a51
 8011aa8:	08011bf7 	.word	0x08011bf7
 8011aac:	08011a51 	.word	0x08011a51
 8011ab0:	08011aff 	.word	0x08011aff
 8011ab4:	08011a51 	.word	0x08011a51
 8011ab8:	08011a51 	.word	0x08011a51
 8011abc:	08011b97 	.word	0x08011b97
 8011ac0:	6833      	ldr	r3, [r6, #0]
 8011ac2:	1d1a      	adds	r2, r3, #4
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	6032      	str	r2, [r6, #0]
 8011ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011acc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	e09d      	b.n	8011c10 <_printf_i+0x1e8>
 8011ad4:	6833      	ldr	r3, [r6, #0]
 8011ad6:	6820      	ldr	r0, [r4, #0]
 8011ad8:	1d19      	adds	r1, r3, #4
 8011ada:	6031      	str	r1, [r6, #0]
 8011adc:	0606      	lsls	r6, r0, #24
 8011ade:	d501      	bpl.n	8011ae4 <_printf_i+0xbc>
 8011ae0:	681d      	ldr	r5, [r3, #0]
 8011ae2:	e003      	b.n	8011aec <_printf_i+0xc4>
 8011ae4:	0645      	lsls	r5, r0, #25
 8011ae6:	d5fb      	bpl.n	8011ae0 <_printf_i+0xb8>
 8011ae8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011aec:	2d00      	cmp	r5, #0
 8011aee:	da03      	bge.n	8011af8 <_printf_i+0xd0>
 8011af0:	232d      	movs	r3, #45	@ 0x2d
 8011af2:	426d      	negs	r5, r5
 8011af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011af8:	4859      	ldr	r0, [pc, #356]	@ (8011c60 <_printf_i+0x238>)
 8011afa:	230a      	movs	r3, #10
 8011afc:	e011      	b.n	8011b22 <_printf_i+0xfa>
 8011afe:	6821      	ldr	r1, [r4, #0]
 8011b00:	6833      	ldr	r3, [r6, #0]
 8011b02:	0608      	lsls	r0, r1, #24
 8011b04:	f853 5b04 	ldr.w	r5, [r3], #4
 8011b08:	d402      	bmi.n	8011b10 <_printf_i+0xe8>
 8011b0a:	0649      	lsls	r1, r1, #25
 8011b0c:	bf48      	it	mi
 8011b0e:	b2ad      	uxthmi	r5, r5
 8011b10:	2f6f      	cmp	r7, #111	@ 0x6f
 8011b12:	4853      	ldr	r0, [pc, #332]	@ (8011c60 <_printf_i+0x238>)
 8011b14:	6033      	str	r3, [r6, #0]
 8011b16:	bf14      	ite	ne
 8011b18:	230a      	movne	r3, #10
 8011b1a:	2308      	moveq	r3, #8
 8011b1c:	2100      	movs	r1, #0
 8011b1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011b22:	6866      	ldr	r6, [r4, #4]
 8011b24:	60a6      	str	r6, [r4, #8]
 8011b26:	2e00      	cmp	r6, #0
 8011b28:	bfa2      	ittt	ge
 8011b2a:	6821      	ldrge	r1, [r4, #0]
 8011b2c:	f021 0104 	bicge.w	r1, r1, #4
 8011b30:	6021      	strge	r1, [r4, #0]
 8011b32:	b90d      	cbnz	r5, 8011b38 <_printf_i+0x110>
 8011b34:	2e00      	cmp	r6, #0
 8011b36:	d04b      	beq.n	8011bd0 <_printf_i+0x1a8>
 8011b38:	4616      	mov	r6, r2
 8011b3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011b3e:	fb03 5711 	mls	r7, r3, r1, r5
 8011b42:	5dc7      	ldrb	r7, [r0, r7]
 8011b44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011b48:	462f      	mov	r7, r5
 8011b4a:	42bb      	cmp	r3, r7
 8011b4c:	460d      	mov	r5, r1
 8011b4e:	d9f4      	bls.n	8011b3a <_printf_i+0x112>
 8011b50:	2b08      	cmp	r3, #8
 8011b52:	d10b      	bne.n	8011b6c <_printf_i+0x144>
 8011b54:	6823      	ldr	r3, [r4, #0]
 8011b56:	07df      	lsls	r7, r3, #31
 8011b58:	d508      	bpl.n	8011b6c <_printf_i+0x144>
 8011b5a:	6923      	ldr	r3, [r4, #16]
 8011b5c:	6861      	ldr	r1, [r4, #4]
 8011b5e:	4299      	cmp	r1, r3
 8011b60:	bfde      	ittt	le
 8011b62:	2330      	movle	r3, #48	@ 0x30
 8011b64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011b68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011b6c:	1b92      	subs	r2, r2, r6
 8011b6e:	6122      	str	r2, [r4, #16]
 8011b70:	f8cd a000 	str.w	sl, [sp]
 8011b74:	464b      	mov	r3, r9
 8011b76:	aa03      	add	r2, sp, #12
 8011b78:	4621      	mov	r1, r4
 8011b7a:	4640      	mov	r0, r8
 8011b7c:	f7ff fee6 	bl	801194c <_printf_common>
 8011b80:	3001      	adds	r0, #1
 8011b82:	d14a      	bne.n	8011c1a <_printf_i+0x1f2>
 8011b84:	f04f 30ff 	mov.w	r0, #4294967295
 8011b88:	b004      	add	sp, #16
 8011b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b8e:	6823      	ldr	r3, [r4, #0]
 8011b90:	f043 0320 	orr.w	r3, r3, #32
 8011b94:	6023      	str	r3, [r4, #0]
 8011b96:	4833      	ldr	r0, [pc, #204]	@ (8011c64 <_printf_i+0x23c>)
 8011b98:	2778      	movs	r7, #120	@ 0x78
 8011b9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011b9e:	6823      	ldr	r3, [r4, #0]
 8011ba0:	6831      	ldr	r1, [r6, #0]
 8011ba2:	061f      	lsls	r7, r3, #24
 8011ba4:	f851 5b04 	ldr.w	r5, [r1], #4
 8011ba8:	d402      	bmi.n	8011bb0 <_printf_i+0x188>
 8011baa:	065f      	lsls	r7, r3, #25
 8011bac:	bf48      	it	mi
 8011bae:	b2ad      	uxthmi	r5, r5
 8011bb0:	6031      	str	r1, [r6, #0]
 8011bb2:	07d9      	lsls	r1, r3, #31
 8011bb4:	bf44      	itt	mi
 8011bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8011bba:	6023      	strmi	r3, [r4, #0]
 8011bbc:	b11d      	cbz	r5, 8011bc6 <_printf_i+0x19e>
 8011bbe:	2310      	movs	r3, #16
 8011bc0:	e7ac      	b.n	8011b1c <_printf_i+0xf4>
 8011bc2:	4827      	ldr	r0, [pc, #156]	@ (8011c60 <_printf_i+0x238>)
 8011bc4:	e7e9      	b.n	8011b9a <_printf_i+0x172>
 8011bc6:	6823      	ldr	r3, [r4, #0]
 8011bc8:	f023 0320 	bic.w	r3, r3, #32
 8011bcc:	6023      	str	r3, [r4, #0]
 8011bce:	e7f6      	b.n	8011bbe <_printf_i+0x196>
 8011bd0:	4616      	mov	r6, r2
 8011bd2:	e7bd      	b.n	8011b50 <_printf_i+0x128>
 8011bd4:	6833      	ldr	r3, [r6, #0]
 8011bd6:	6825      	ldr	r5, [r4, #0]
 8011bd8:	6961      	ldr	r1, [r4, #20]
 8011bda:	1d18      	adds	r0, r3, #4
 8011bdc:	6030      	str	r0, [r6, #0]
 8011bde:	062e      	lsls	r6, r5, #24
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	d501      	bpl.n	8011be8 <_printf_i+0x1c0>
 8011be4:	6019      	str	r1, [r3, #0]
 8011be6:	e002      	b.n	8011bee <_printf_i+0x1c6>
 8011be8:	0668      	lsls	r0, r5, #25
 8011bea:	d5fb      	bpl.n	8011be4 <_printf_i+0x1bc>
 8011bec:	8019      	strh	r1, [r3, #0]
 8011bee:	2300      	movs	r3, #0
 8011bf0:	6123      	str	r3, [r4, #16]
 8011bf2:	4616      	mov	r6, r2
 8011bf4:	e7bc      	b.n	8011b70 <_printf_i+0x148>
 8011bf6:	6833      	ldr	r3, [r6, #0]
 8011bf8:	1d1a      	adds	r2, r3, #4
 8011bfa:	6032      	str	r2, [r6, #0]
 8011bfc:	681e      	ldr	r6, [r3, #0]
 8011bfe:	6862      	ldr	r2, [r4, #4]
 8011c00:	2100      	movs	r1, #0
 8011c02:	4630      	mov	r0, r6
 8011c04:	f7ee fb84 	bl	8000310 <memchr>
 8011c08:	b108      	cbz	r0, 8011c0e <_printf_i+0x1e6>
 8011c0a:	1b80      	subs	r0, r0, r6
 8011c0c:	6060      	str	r0, [r4, #4]
 8011c0e:	6863      	ldr	r3, [r4, #4]
 8011c10:	6123      	str	r3, [r4, #16]
 8011c12:	2300      	movs	r3, #0
 8011c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c18:	e7aa      	b.n	8011b70 <_printf_i+0x148>
 8011c1a:	6923      	ldr	r3, [r4, #16]
 8011c1c:	4632      	mov	r2, r6
 8011c1e:	4649      	mov	r1, r9
 8011c20:	4640      	mov	r0, r8
 8011c22:	47d0      	blx	sl
 8011c24:	3001      	adds	r0, #1
 8011c26:	d0ad      	beq.n	8011b84 <_printf_i+0x15c>
 8011c28:	6823      	ldr	r3, [r4, #0]
 8011c2a:	079b      	lsls	r3, r3, #30
 8011c2c:	d413      	bmi.n	8011c56 <_printf_i+0x22e>
 8011c2e:	68e0      	ldr	r0, [r4, #12]
 8011c30:	9b03      	ldr	r3, [sp, #12]
 8011c32:	4298      	cmp	r0, r3
 8011c34:	bfb8      	it	lt
 8011c36:	4618      	movlt	r0, r3
 8011c38:	e7a6      	b.n	8011b88 <_printf_i+0x160>
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	4632      	mov	r2, r6
 8011c3e:	4649      	mov	r1, r9
 8011c40:	4640      	mov	r0, r8
 8011c42:	47d0      	blx	sl
 8011c44:	3001      	adds	r0, #1
 8011c46:	d09d      	beq.n	8011b84 <_printf_i+0x15c>
 8011c48:	3501      	adds	r5, #1
 8011c4a:	68e3      	ldr	r3, [r4, #12]
 8011c4c:	9903      	ldr	r1, [sp, #12]
 8011c4e:	1a5b      	subs	r3, r3, r1
 8011c50:	42ab      	cmp	r3, r5
 8011c52:	dcf2      	bgt.n	8011c3a <_printf_i+0x212>
 8011c54:	e7eb      	b.n	8011c2e <_printf_i+0x206>
 8011c56:	2500      	movs	r5, #0
 8011c58:	f104 0619 	add.w	r6, r4, #25
 8011c5c:	e7f5      	b.n	8011c4a <_printf_i+0x222>
 8011c5e:	bf00      	nop
 8011c60:	0801402e 	.word	0x0801402e
 8011c64:	0801403f 	.word	0x0801403f

08011c68 <std>:
 8011c68:	2300      	movs	r3, #0
 8011c6a:	b510      	push	{r4, lr}
 8011c6c:	4604      	mov	r4, r0
 8011c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8011c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c76:	6083      	str	r3, [r0, #8]
 8011c78:	8181      	strh	r1, [r0, #12]
 8011c7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8011c7c:	81c2      	strh	r2, [r0, #14]
 8011c7e:	6183      	str	r3, [r0, #24]
 8011c80:	4619      	mov	r1, r3
 8011c82:	2208      	movs	r2, #8
 8011c84:	305c      	adds	r0, #92	@ 0x5c
 8011c86:	f000 f914 	bl	8011eb2 <memset>
 8011c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8011cc0 <std+0x58>)
 8011c8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8011c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8011cc4 <std+0x5c>)
 8011c90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011c92:	4b0d      	ldr	r3, [pc, #52]	@ (8011cc8 <std+0x60>)
 8011c94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011c96:	4b0d      	ldr	r3, [pc, #52]	@ (8011ccc <std+0x64>)
 8011c98:	6323      	str	r3, [r4, #48]	@ 0x30
 8011c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8011cd0 <std+0x68>)
 8011c9c:	6224      	str	r4, [r4, #32]
 8011c9e:	429c      	cmp	r4, r3
 8011ca0:	d006      	beq.n	8011cb0 <std+0x48>
 8011ca2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011ca6:	4294      	cmp	r4, r2
 8011ca8:	d002      	beq.n	8011cb0 <std+0x48>
 8011caa:	33d0      	adds	r3, #208	@ 0xd0
 8011cac:	429c      	cmp	r4, r3
 8011cae:	d105      	bne.n	8011cbc <std+0x54>
 8011cb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cb8:	f000 b978 	b.w	8011fac <__retarget_lock_init_recursive>
 8011cbc:	bd10      	pop	{r4, pc}
 8011cbe:	bf00      	nop
 8011cc0:	08011e2d 	.word	0x08011e2d
 8011cc4:	08011e4f 	.word	0x08011e4f
 8011cc8:	08011e87 	.word	0x08011e87
 8011ccc:	08011eab 	.word	0x08011eab
 8011cd0:	240034d4 	.word	0x240034d4

08011cd4 <stdio_exit_handler>:
 8011cd4:	4a02      	ldr	r2, [pc, #8]	@ (8011ce0 <stdio_exit_handler+0xc>)
 8011cd6:	4903      	ldr	r1, [pc, #12]	@ (8011ce4 <stdio_exit_handler+0x10>)
 8011cd8:	4803      	ldr	r0, [pc, #12]	@ (8011ce8 <stdio_exit_handler+0x14>)
 8011cda:	f000 b869 	b.w	8011db0 <_fwalk_sglue>
 8011cde:	bf00      	nop
 8011ce0:	24000104 	.word	0x24000104
 8011ce4:	08013849 	.word	0x08013849
 8011ce8:	24000114 	.word	0x24000114

08011cec <cleanup_stdio>:
 8011cec:	6841      	ldr	r1, [r0, #4]
 8011cee:	4b0c      	ldr	r3, [pc, #48]	@ (8011d20 <cleanup_stdio+0x34>)
 8011cf0:	4299      	cmp	r1, r3
 8011cf2:	b510      	push	{r4, lr}
 8011cf4:	4604      	mov	r4, r0
 8011cf6:	d001      	beq.n	8011cfc <cleanup_stdio+0x10>
 8011cf8:	f001 fda6 	bl	8013848 <_fflush_r>
 8011cfc:	68a1      	ldr	r1, [r4, #8]
 8011cfe:	4b09      	ldr	r3, [pc, #36]	@ (8011d24 <cleanup_stdio+0x38>)
 8011d00:	4299      	cmp	r1, r3
 8011d02:	d002      	beq.n	8011d0a <cleanup_stdio+0x1e>
 8011d04:	4620      	mov	r0, r4
 8011d06:	f001 fd9f 	bl	8013848 <_fflush_r>
 8011d0a:	68e1      	ldr	r1, [r4, #12]
 8011d0c:	4b06      	ldr	r3, [pc, #24]	@ (8011d28 <cleanup_stdio+0x3c>)
 8011d0e:	4299      	cmp	r1, r3
 8011d10:	d004      	beq.n	8011d1c <cleanup_stdio+0x30>
 8011d12:	4620      	mov	r0, r4
 8011d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d18:	f001 bd96 	b.w	8013848 <_fflush_r>
 8011d1c:	bd10      	pop	{r4, pc}
 8011d1e:	bf00      	nop
 8011d20:	240034d4 	.word	0x240034d4
 8011d24:	2400353c 	.word	0x2400353c
 8011d28:	240035a4 	.word	0x240035a4

08011d2c <global_stdio_init.part.0>:
 8011d2c:	b510      	push	{r4, lr}
 8011d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8011d5c <global_stdio_init.part.0+0x30>)
 8011d30:	4c0b      	ldr	r4, [pc, #44]	@ (8011d60 <global_stdio_init.part.0+0x34>)
 8011d32:	4a0c      	ldr	r2, [pc, #48]	@ (8011d64 <global_stdio_init.part.0+0x38>)
 8011d34:	601a      	str	r2, [r3, #0]
 8011d36:	4620      	mov	r0, r4
 8011d38:	2200      	movs	r2, #0
 8011d3a:	2104      	movs	r1, #4
 8011d3c:	f7ff ff94 	bl	8011c68 <std>
 8011d40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011d44:	2201      	movs	r2, #1
 8011d46:	2109      	movs	r1, #9
 8011d48:	f7ff ff8e 	bl	8011c68 <std>
 8011d4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011d50:	2202      	movs	r2, #2
 8011d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d56:	2112      	movs	r1, #18
 8011d58:	f7ff bf86 	b.w	8011c68 <std>
 8011d5c:	2400360c 	.word	0x2400360c
 8011d60:	240034d4 	.word	0x240034d4
 8011d64:	08011cd5 	.word	0x08011cd5

08011d68 <__sfp_lock_acquire>:
 8011d68:	4801      	ldr	r0, [pc, #4]	@ (8011d70 <__sfp_lock_acquire+0x8>)
 8011d6a:	f000 b920 	b.w	8011fae <__retarget_lock_acquire_recursive>
 8011d6e:	bf00      	nop
 8011d70:	24003615 	.word	0x24003615

08011d74 <__sfp_lock_release>:
 8011d74:	4801      	ldr	r0, [pc, #4]	@ (8011d7c <__sfp_lock_release+0x8>)
 8011d76:	f000 b91b 	b.w	8011fb0 <__retarget_lock_release_recursive>
 8011d7a:	bf00      	nop
 8011d7c:	24003615 	.word	0x24003615

08011d80 <__sinit>:
 8011d80:	b510      	push	{r4, lr}
 8011d82:	4604      	mov	r4, r0
 8011d84:	f7ff fff0 	bl	8011d68 <__sfp_lock_acquire>
 8011d88:	6a23      	ldr	r3, [r4, #32]
 8011d8a:	b11b      	cbz	r3, 8011d94 <__sinit+0x14>
 8011d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d90:	f7ff bff0 	b.w	8011d74 <__sfp_lock_release>
 8011d94:	4b04      	ldr	r3, [pc, #16]	@ (8011da8 <__sinit+0x28>)
 8011d96:	6223      	str	r3, [r4, #32]
 8011d98:	4b04      	ldr	r3, [pc, #16]	@ (8011dac <__sinit+0x2c>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d1f5      	bne.n	8011d8c <__sinit+0xc>
 8011da0:	f7ff ffc4 	bl	8011d2c <global_stdio_init.part.0>
 8011da4:	e7f2      	b.n	8011d8c <__sinit+0xc>
 8011da6:	bf00      	nop
 8011da8:	08011ced 	.word	0x08011ced
 8011dac:	2400360c 	.word	0x2400360c

08011db0 <_fwalk_sglue>:
 8011db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011db4:	4607      	mov	r7, r0
 8011db6:	4688      	mov	r8, r1
 8011db8:	4614      	mov	r4, r2
 8011dba:	2600      	movs	r6, #0
 8011dbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011dc0:	f1b9 0901 	subs.w	r9, r9, #1
 8011dc4:	d505      	bpl.n	8011dd2 <_fwalk_sglue+0x22>
 8011dc6:	6824      	ldr	r4, [r4, #0]
 8011dc8:	2c00      	cmp	r4, #0
 8011dca:	d1f7      	bne.n	8011dbc <_fwalk_sglue+0xc>
 8011dcc:	4630      	mov	r0, r6
 8011dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dd2:	89ab      	ldrh	r3, [r5, #12]
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d907      	bls.n	8011de8 <_fwalk_sglue+0x38>
 8011dd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ddc:	3301      	adds	r3, #1
 8011dde:	d003      	beq.n	8011de8 <_fwalk_sglue+0x38>
 8011de0:	4629      	mov	r1, r5
 8011de2:	4638      	mov	r0, r7
 8011de4:	47c0      	blx	r8
 8011de6:	4306      	orrs	r6, r0
 8011de8:	3568      	adds	r5, #104	@ 0x68
 8011dea:	e7e9      	b.n	8011dc0 <_fwalk_sglue+0x10>

08011dec <siprintf>:
 8011dec:	b40e      	push	{r1, r2, r3}
 8011dee:	b500      	push	{lr}
 8011df0:	b09c      	sub	sp, #112	@ 0x70
 8011df2:	ab1d      	add	r3, sp, #116	@ 0x74
 8011df4:	9002      	str	r0, [sp, #8]
 8011df6:	9006      	str	r0, [sp, #24]
 8011df8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011dfc:	4809      	ldr	r0, [pc, #36]	@ (8011e24 <siprintf+0x38>)
 8011dfe:	9107      	str	r1, [sp, #28]
 8011e00:	9104      	str	r1, [sp, #16]
 8011e02:	4909      	ldr	r1, [pc, #36]	@ (8011e28 <siprintf+0x3c>)
 8011e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e08:	9105      	str	r1, [sp, #20]
 8011e0a:	6800      	ldr	r0, [r0, #0]
 8011e0c:	9301      	str	r3, [sp, #4]
 8011e0e:	a902      	add	r1, sp, #8
 8011e10:	f001 fb9a 	bl	8013548 <_svfiprintf_r>
 8011e14:	9b02      	ldr	r3, [sp, #8]
 8011e16:	2200      	movs	r2, #0
 8011e18:	701a      	strb	r2, [r3, #0]
 8011e1a:	b01c      	add	sp, #112	@ 0x70
 8011e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e20:	b003      	add	sp, #12
 8011e22:	4770      	bx	lr
 8011e24:	24000110 	.word	0x24000110
 8011e28:	ffff0208 	.word	0xffff0208

08011e2c <__sread>:
 8011e2c:	b510      	push	{r4, lr}
 8011e2e:	460c      	mov	r4, r1
 8011e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e34:	f000 f86c 	bl	8011f10 <_read_r>
 8011e38:	2800      	cmp	r0, #0
 8011e3a:	bfab      	itete	ge
 8011e3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8011e40:	181b      	addge	r3, r3, r0
 8011e42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011e46:	bfac      	ite	ge
 8011e48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011e4a:	81a3      	strhlt	r3, [r4, #12]
 8011e4c:	bd10      	pop	{r4, pc}

08011e4e <__swrite>:
 8011e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e52:	461f      	mov	r7, r3
 8011e54:	898b      	ldrh	r3, [r1, #12]
 8011e56:	05db      	lsls	r3, r3, #23
 8011e58:	4605      	mov	r5, r0
 8011e5a:	460c      	mov	r4, r1
 8011e5c:	4616      	mov	r6, r2
 8011e5e:	d505      	bpl.n	8011e6c <__swrite+0x1e>
 8011e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e64:	2302      	movs	r3, #2
 8011e66:	2200      	movs	r2, #0
 8011e68:	f000 f840 	bl	8011eec <_lseek_r>
 8011e6c:	89a3      	ldrh	r3, [r4, #12]
 8011e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011e76:	81a3      	strh	r3, [r4, #12]
 8011e78:	4632      	mov	r2, r6
 8011e7a:	463b      	mov	r3, r7
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e82:	f000 b857 	b.w	8011f34 <_write_r>

08011e86 <__sseek>:
 8011e86:	b510      	push	{r4, lr}
 8011e88:	460c      	mov	r4, r1
 8011e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e8e:	f000 f82d 	bl	8011eec <_lseek_r>
 8011e92:	1c43      	adds	r3, r0, #1
 8011e94:	89a3      	ldrh	r3, [r4, #12]
 8011e96:	bf15      	itete	ne
 8011e98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011e9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011e9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011ea2:	81a3      	strheq	r3, [r4, #12]
 8011ea4:	bf18      	it	ne
 8011ea6:	81a3      	strhne	r3, [r4, #12]
 8011ea8:	bd10      	pop	{r4, pc}

08011eaa <__sclose>:
 8011eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eae:	f000 b80d 	b.w	8011ecc <_close_r>

08011eb2 <memset>:
 8011eb2:	4402      	add	r2, r0
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	d100      	bne.n	8011ebc <memset+0xa>
 8011eba:	4770      	bx	lr
 8011ebc:	f803 1b01 	strb.w	r1, [r3], #1
 8011ec0:	e7f9      	b.n	8011eb6 <memset+0x4>
	...

08011ec4 <_localeconv_r>:
 8011ec4:	4800      	ldr	r0, [pc, #0]	@ (8011ec8 <_localeconv_r+0x4>)
 8011ec6:	4770      	bx	lr
 8011ec8:	24000250 	.word	0x24000250

08011ecc <_close_r>:
 8011ecc:	b538      	push	{r3, r4, r5, lr}
 8011ece:	4d06      	ldr	r5, [pc, #24]	@ (8011ee8 <_close_r+0x1c>)
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	4608      	mov	r0, r1
 8011ed6:	602b      	str	r3, [r5, #0]
 8011ed8:	f7ef ff72 	bl	8001dc0 <_close>
 8011edc:	1c43      	adds	r3, r0, #1
 8011ede:	d102      	bne.n	8011ee6 <_close_r+0x1a>
 8011ee0:	682b      	ldr	r3, [r5, #0]
 8011ee2:	b103      	cbz	r3, 8011ee6 <_close_r+0x1a>
 8011ee4:	6023      	str	r3, [r4, #0]
 8011ee6:	bd38      	pop	{r3, r4, r5, pc}
 8011ee8:	24003610 	.word	0x24003610

08011eec <_lseek_r>:
 8011eec:	b538      	push	{r3, r4, r5, lr}
 8011eee:	4d07      	ldr	r5, [pc, #28]	@ (8011f0c <_lseek_r+0x20>)
 8011ef0:	4604      	mov	r4, r0
 8011ef2:	4608      	mov	r0, r1
 8011ef4:	4611      	mov	r1, r2
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	602a      	str	r2, [r5, #0]
 8011efa:	461a      	mov	r2, r3
 8011efc:	f7ef ff87 	bl	8001e0e <_lseek>
 8011f00:	1c43      	adds	r3, r0, #1
 8011f02:	d102      	bne.n	8011f0a <_lseek_r+0x1e>
 8011f04:	682b      	ldr	r3, [r5, #0]
 8011f06:	b103      	cbz	r3, 8011f0a <_lseek_r+0x1e>
 8011f08:	6023      	str	r3, [r4, #0]
 8011f0a:	bd38      	pop	{r3, r4, r5, pc}
 8011f0c:	24003610 	.word	0x24003610

08011f10 <_read_r>:
 8011f10:	b538      	push	{r3, r4, r5, lr}
 8011f12:	4d07      	ldr	r5, [pc, #28]	@ (8011f30 <_read_r+0x20>)
 8011f14:	4604      	mov	r4, r0
 8011f16:	4608      	mov	r0, r1
 8011f18:	4611      	mov	r1, r2
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	602a      	str	r2, [r5, #0]
 8011f1e:	461a      	mov	r2, r3
 8011f20:	f7ef ff15 	bl	8001d4e <_read>
 8011f24:	1c43      	adds	r3, r0, #1
 8011f26:	d102      	bne.n	8011f2e <_read_r+0x1e>
 8011f28:	682b      	ldr	r3, [r5, #0]
 8011f2a:	b103      	cbz	r3, 8011f2e <_read_r+0x1e>
 8011f2c:	6023      	str	r3, [r4, #0]
 8011f2e:	bd38      	pop	{r3, r4, r5, pc}
 8011f30:	24003610 	.word	0x24003610

08011f34 <_write_r>:
 8011f34:	b538      	push	{r3, r4, r5, lr}
 8011f36:	4d07      	ldr	r5, [pc, #28]	@ (8011f54 <_write_r+0x20>)
 8011f38:	4604      	mov	r4, r0
 8011f3a:	4608      	mov	r0, r1
 8011f3c:	4611      	mov	r1, r2
 8011f3e:	2200      	movs	r2, #0
 8011f40:	602a      	str	r2, [r5, #0]
 8011f42:	461a      	mov	r2, r3
 8011f44:	f7ef ff20 	bl	8001d88 <_write>
 8011f48:	1c43      	adds	r3, r0, #1
 8011f4a:	d102      	bne.n	8011f52 <_write_r+0x1e>
 8011f4c:	682b      	ldr	r3, [r5, #0]
 8011f4e:	b103      	cbz	r3, 8011f52 <_write_r+0x1e>
 8011f50:	6023      	str	r3, [r4, #0]
 8011f52:	bd38      	pop	{r3, r4, r5, pc}
 8011f54:	24003610 	.word	0x24003610

08011f58 <__errno>:
 8011f58:	4b01      	ldr	r3, [pc, #4]	@ (8011f60 <__errno+0x8>)
 8011f5a:	6818      	ldr	r0, [r3, #0]
 8011f5c:	4770      	bx	lr
 8011f5e:	bf00      	nop
 8011f60:	24000110 	.word	0x24000110

08011f64 <__libc_init_array>:
 8011f64:	b570      	push	{r4, r5, r6, lr}
 8011f66:	4d0d      	ldr	r5, [pc, #52]	@ (8011f9c <__libc_init_array+0x38>)
 8011f68:	4c0d      	ldr	r4, [pc, #52]	@ (8011fa0 <__libc_init_array+0x3c>)
 8011f6a:	1b64      	subs	r4, r4, r5
 8011f6c:	10a4      	asrs	r4, r4, #2
 8011f6e:	2600      	movs	r6, #0
 8011f70:	42a6      	cmp	r6, r4
 8011f72:	d109      	bne.n	8011f88 <__libc_init_array+0x24>
 8011f74:	4d0b      	ldr	r5, [pc, #44]	@ (8011fa4 <__libc_init_array+0x40>)
 8011f76:	4c0c      	ldr	r4, [pc, #48]	@ (8011fa8 <__libc_init_array+0x44>)
 8011f78:	f001 fff6 	bl	8013f68 <_init>
 8011f7c:	1b64      	subs	r4, r4, r5
 8011f7e:	10a4      	asrs	r4, r4, #2
 8011f80:	2600      	movs	r6, #0
 8011f82:	42a6      	cmp	r6, r4
 8011f84:	d105      	bne.n	8011f92 <__libc_init_array+0x2e>
 8011f86:	bd70      	pop	{r4, r5, r6, pc}
 8011f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f8c:	4798      	blx	r3
 8011f8e:	3601      	adds	r6, #1
 8011f90:	e7ee      	b.n	8011f70 <__libc_init_array+0xc>
 8011f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f96:	4798      	blx	r3
 8011f98:	3601      	adds	r6, #1
 8011f9a:	e7f2      	b.n	8011f82 <__libc_init_array+0x1e>
 8011f9c:	08014398 	.word	0x08014398
 8011fa0:	08014398 	.word	0x08014398
 8011fa4:	08014398 	.word	0x08014398
 8011fa8:	0801439c 	.word	0x0801439c

08011fac <__retarget_lock_init_recursive>:
 8011fac:	4770      	bx	lr

08011fae <__retarget_lock_acquire_recursive>:
 8011fae:	4770      	bx	lr

08011fb0 <__retarget_lock_release_recursive>:
 8011fb0:	4770      	bx	lr

08011fb2 <memcpy>:
 8011fb2:	440a      	add	r2, r1
 8011fb4:	4291      	cmp	r1, r2
 8011fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8011fba:	d100      	bne.n	8011fbe <memcpy+0xc>
 8011fbc:	4770      	bx	lr
 8011fbe:	b510      	push	{r4, lr}
 8011fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fc8:	4291      	cmp	r1, r2
 8011fca:	d1f9      	bne.n	8011fc0 <memcpy+0xe>
 8011fcc:	bd10      	pop	{r4, pc}

08011fce <quorem>:
 8011fce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd2:	6903      	ldr	r3, [r0, #16]
 8011fd4:	690c      	ldr	r4, [r1, #16]
 8011fd6:	42a3      	cmp	r3, r4
 8011fd8:	4607      	mov	r7, r0
 8011fda:	db7e      	blt.n	80120da <quorem+0x10c>
 8011fdc:	3c01      	subs	r4, #1
 8011fde:	f101 0814 	add.w	r8, r1, #20
 8011fe2:	00a3      	lsls	r3, r4, #2
 8011fe4:	f100 0514 	add.w	r5, r0, #20
 8011fe8:	9300      	str	r3, [sp, #0]
 8011fea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fee:	9301      	str	r3, [sp, #4]
 8011ff0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011ff4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012000:	fbb2 f6f3 	udiv	r6, r2, r3
 8012004:	d32e      	bcc.n	8012064 <quorem+0x96>
 8012006:	f04f 0a00 	mov.w	sl, #0
 801200a:	46c4      	mov	ip, r8
 801200c:	46ae      	mov	lr, r5
 801200e:	46d3      	mov	fp, sl
 8012010:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012014:	b298      	uxth	r0, r3
 8012016:	fb06 a000 	mla	r0, r6, r0, sl
 801201a:	0c02      	lsrs	r2, r0, #16
 801201c:	0c1b      	lsrs	r3, r3, #16
 801201e:	fb06 2303 	mla	r3, r6, r3, r2
 8012022:	f8de 2000 	ldr.w	r2, [lr]
 8012026:	b280      	uxth	r0, r0
 8012028:	b292      	uxth	r2, r2
 801202a:	1a12      	subs	r2, r2, r0
 801202c:	445a      	add	r2, fp
 801202e:	f8de 0000 	ldr.w	r0, [lr]
 8012032:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012036:	b29b      	uxth	r3, r3
 8012038:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801203c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012040:	b292      	uxth	r2, r2
 8012042:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012046:	45e1      	cmp	r9, ip
 8012048:	f84e 2b04 	str.w	r2, [lr], #4
 801204c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012050:	d2de      	bcs.n	8012010 <quorem+0x42>
 8012052:	9b00      	ldr	r3, [sp, #0]
 8012054:	58eb      	ldr	r3, [r5, r3]
 8012056:	b92b      	cbnz	r3, 8012064 <quorem+0x96>
 8012058:	9b01      	ldr	r3, [sp, #4]
 801205a:	3b04      	subs	r3, #4
 801205c:	429d      	cmp	r5, r3
 801205e:	461a      	mov	r2, r3
 8012060:	d32f      	bcc.n	80120c2 <quorem+0xf4>
 8012062:	613c      	str	r4, [r7, #16]
 8012064:	4638      	mov	r0, r7
 8012066:	f001 f90b 	bl	8013280 <__mcmp>
 801206a:	2800      	cmp	r0, #0
 801206c:	db25      	blt.n	80120ba <quorem+0xec>
 801206e:	4629      	mov	r1, r5
 8012070:	2000      	movs	r0, #0
 8012072:	f858 2b04 	ldr.w	r2, [r8], #4
 8012076:	f8d1 c000 	ldr.w	ip, [r1]
 801207a:	fa1f fe82 	uxth.w	lr, r2
 801207e:	fa1f f38c 	uxth.w	r3, ip
 8012082:	eba3 030e 	sub.w	r3, r3, lr
 8012086:	4403      	add	r3, r0
 8012088:	0c12      	lsrs	r2, r2, #16
 801208a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801208e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012092:	b29b      	uxth	r3, r3
 8012094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012098:	45c1      	cmp	r9, r8
 801209a:	f841 3b04 	str.w	r3, [r1], #4
 801209e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80120a2:	d2e6      	bcs.n	8012072 <quorem+0xa4>
 80120a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80120ac:	b922      	cbnz	r2, 80120b8 <quorem+0xea>
 80120ae:	3b04      	subs	r3, #4
 80120b0:	429d      	cmp	r5, r3
 80120b2:	461a      	mov	r2, r3
 80120b4:	d30b      	bcc.n	80120ce <quorem+0x100>
 80120b6:	613c      	str	r4, [r7, #16]
 80120b8:	3601      	adds	r6, #1
 80120ba:	4630      	mov	r0, r6
 80120bc:	b003      	add	sp, #12
 80120be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120c2:	6812      	ldr	r2, [r2, #0]
 80120c4:	3b04      	subs	r3, #4
 80120c6:	2a00      	cmp	r2, #0
 80120c8:	d1cb      	bne.n	8012062 <quorem+0x94>
 80120ca:	3c01      	subs	r4, #1
 80120cc:	e7c6      	b.n	801205c <quorem+0x8e>
 80120ce:	6812      	ldr	r2, [r2, #0]
 80120d0:	3b04      	subs	r3, #4
 80120d2:	2a00      	cmp	r2, #0
 80120d4:	d1ef      	bne.n	80120b6 <quorem+0xe8>
 80120d6:	3c01      	subs	r4, #1
 80120d8:	e7ea      	b.n	80120b0 <quorem+0xe2>
 80120da:	2000      	movs	r0, #0
 80120dc:	e7ee      	b.n	80120bc <quorem+0xee>
	...

080120e0 <_dtoa_r>:
 80120e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e4:	ed2d 8b02 	vpush	{d8}
 80120e8:	69c7      	ldr	r7, [r0, #28]
 80120ea:	b091      	sub	sp, #68	@ 0x44
 80120ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80120f0:	ec55 4b10 	vmov	r4, r5, d0
 80120f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80120f6:	9107      	str	r1, [sp, #28]
 80120f8:	4681      	mov	r9, r0
 80120fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80120fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80120fe:	b97f      	cbnz	r7, 8012120 <_dtoa_r+0x40>
 8012100:	2010      	movs	r0, #16
 8012102:	f000 fd8d 	bl	8012c20 <malloc>
 8012106:	4602      	mov	r2, r0
 8012108:	f8c9 001c 	str.w	r0, [r9, #28]
 801210c:	b920      	cbnz	r0, 8012118 <_dtoa_r+0x38>
 801210e:	4ba0      	ldr	r3, [pc, #640]	@ (8012390 <_dtoa_r+0x2b0>)
 8012110:	21ef      	movs	r1, #239	@ 0xef
 8012112:	48a0      	ldr	r0, [pc, #640]	@ (8012394 <_dtoa_r+0x2b4>)
 8012114:	f001 fbea 	bl	80138ec <__assert_func>
 8012118:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801211c:	6007      	str	r7, [r0, #0]
 801211e:	60c7      	str	r7, [r0, #12]
 8012120:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012124:	6819      	ldr	r1, [r3, #0]
 8012126:	b159      	cbz	r1, 8012140 <_dtoa_r+0x60>
 8012128:	685a      	ldr	r2, [r3, #4]
 801212a:	604a      	str	r2, [r1, #4]
 801212c:	2301      	movs	r3, #1
 801212e:	4093      	lsls	r3, r2
 8012130:	608b      	str	r3, [r1, #8]
 8012132:	4648      	mov	r0, r9
 8012134:	f000 fe6a 	bl	8012e0c <_Bfree>
 8012138:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801213c:	2200      	movs	r2, #0
 801213e:	601a      	str	r2, [r3, #0]
 8012140:	1e2b      	subs	r3, r5, #0
 8012142:	bfbb      	ittet	lt
 8012144:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012148:	9303      	strlt	r3, [sp, #12]
 801214a:	2300      	movge	r3, #0
 801214c:	2201      	movlt	r2, #1
 801214e:	bfac      	ite	ge
 8012150:	6033      	strge	r3, [r6, #0]
 8012152:	6032      	strlt	r2, [r6, #0]
 8012154:	4b90      	ldr	r3, [pc, #576]	@ (8012398 <_dtoa_r+0x2b8>)
 8012156:	9e03      	ldr	r6, [sp, #12]
 8012158:	43b3      	bics	r3, r6
 801215a:	d110      	bne.n	801217e <_dtoa_r+0x9e>
 801215c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801215e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012162:	6013      	str	r3, [r2, #0]
 8012164:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012168:	4323      	orrs	r3, r4
 801216a:	f000 84de 	beq.w	8012b2a <_dtoa_r+0xa4a>
 801216e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012170:	4f8a      	ldr	r7, [pc, #552]	@ (801239c <_dtoa_r+0x2bc>)
 8012172:	2b00      	cmp	r3, #0
 8012174:	f000 84e0 	beq.w	8012b38 <_dtoa_r+0xa58>
 8012178:	1cfb      	adds	r3, r7, #3
 801217a:	f000 bcdb 	b.w	8012b34 <_dtoa_r+0xa54>
 801217e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012182:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218a:	d10a      	bne.n	80121a2 <_dtoa_r+0xc2>
 801218c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801218e:	2301      	movs	r3, #1
 8012190:	6013      	str	r3, [r2, #0]
 8012192:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012194:	b113      	cbz	r3, 801219c <_dtoa_r+0xbc>
 8012196:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012198:	4b81      	ldr	r3, [pc, #516]	@ (80123a0 <_dtoa_r+0x2c0>)
 801219a:	6013      	str	r3, [r2, #0]
 801219c:	4f81      	ldr	r7, [pc, #516]	@ (80123a4 <_dtoa_r+0x2c4>)
 801219e:	f000 bccb 	b.w	8012b38 <_dtoa_r+0xa58>
 80121a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80121a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80121a6:	4648      	mov	r0, r9
 80121a8:	eeb0 0b48 	vmov.f64	d0, d8
 80121ac:	f001 f918 	bl	80133e0 <__d2b>
 80121b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80121b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80121b6:	9001      	str	r0, [sp, #4]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d045      	beq.n	8012248 <_dtoa_r+0x168>
 80121bc:	eeb0 7b48 	vmov.f64	d7, d8
 80121c0:	ee18 1a90 	vmov	r1, s17
 80121c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80121c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80121cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80121d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80121d4:	2500      	movs	r5, #0
 80121d6:	ee07 1a90 	vmov	s15, r1
 80121da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80121de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012378 <_dtoa_r+0x298>
 80121e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80121e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012380 <_dtoa_r+0x2a0>
 80121ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80121ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012388 <_dtoa_r+0x2a8>
 80121f2:	ee07 3a90 	vmov	s15, r3
 80121f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80121fa:	eeb0 7b46 	vmov.f64	d7, d6
 80121fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012202:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012206:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801220e:	ee16 8a90 	vmov	r8, s13
 8012212:	d508      	bpl.n	8012226 <_dtoa_r+0x146>
 8012214:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012218:	eeb4 6b47 	vcmp.f64	d6, d7
 801221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012220:	bf18      	it	ne
 8012222:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012226:	f1b8 0f16 	cmp.w	r8, #22
 801222a:	d82b      	bhi.n	8012284 <_dtoa_r+0x1a4>
 801222c:	495e      	ldr	r1, [pc, #376]	@ (80123a8 <_dtoa_r+0x2c8>)
 801222e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012232:	ed91 7b00 	vldr	d7, [r1]
 8012236:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801223e:	d501      	bpl.n	8012244 <_dtoa_r+0x164>
 8012240:	f108 38ff 	add.w	r8, r8, #4294967295
 8012244:	2100      	movs	r1, #0
 8012246:	e01e      	b.n	8012286 <_dtoa_r+0x1a6>
 8012248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801224a:	4413      	add	r3, r2
 801224c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012250:	2920      	cmp	r1, #32
 8012252:	bfc1      	itttt	gt
 8012254:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012258:	408e      	lslgt	r6, r1
 801225a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801225e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012262:	bfd6      	itet	le
 8012264:	f1c1 0120 	rsble	r1, r1, #32
 8012268:	4331      	orrgt	r1, r6
 801226a:	fa04 f101 	lslle.w	r1, r4, r1
 801226e:	ee07 1a90 	vmov	s15, r1
 8012272:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012276:	3b01      	subs	r3, #1
 8012278:	ee17 1a90 	vmov	r1, s15
 801227c:	2501      	movs	r5, #1
 801227e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012282:	e7a8      	b.n	80121d6 <_dtoa_r+0xf6>
 8012284:	2101      	movs	r1, #1
 8012286:	1ad2      	subs	r2, r2, r3
 8012288:	1e53      	subs	r3, r2, #1
 801228a:	9306      	str	r3, [sp, #24]
 801228c:	bf45      	ittet	mi
 801228e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012292:	9305      	strmi	r3, [sp, #20]
 8012294:	2300      	movpl	r3, #0
 8012296:	2300      	movmi	r3, #0
 8012298:	bf4c      	ite	mi
 801229a:	9306      	strmi	r3, [sp, #24]
 801229c:	9305      	strpl	r3, [sp, #20]
 801229e:	f1b8 0f00 	cmp.w	r8, #0
 80122a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80122a4:	db18      	blt.n	80122d8 <_dtoa_r+0x1f8>
 80122a6:	9b06      	ldr	r3, [sp, #24]
 80122a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80122ac:	4443      	add	r3, r8
 80122ae:	9306      	str	r3, [sp, #24]
 80122b0:	2300      	movs	r3, #0
 80122b2:	9a07      	ldr	r2, [sp, #28]
 80122b4:	2a09      	cmp	r2, #9
 80122b6:	d849      	bhi.n	801234c <_dtoa_r+0x26c>
 80122b8:	2a05      	cmp	r2, #5
 80122ba:	bfc4      	itt	gt
 80122bc:	3a04      	subgt	r2, #4
 80122be:	9207      	strgt	r2, [sp, #28]
 80122c0:	9a07      	ldr	r2, [sp, #28]
 80122c2:	f1a2 0202 	sub.w	r2, r2, #2
 80122c6:	bfcc      	ite	gt
 80122c8:	2400      	movgt	r4, #0
 80122ca:	2401      	movle	r4, #1
 80122cc:	2a03      	cmp	r2, #3
 80122ce:	d848      	bhi.n	8012362 <_dtoa_r+0x282>
 80122d0:	e8df f002 	tbb	[pc, r2]
 80122d4:	3a2c2e0b 	.word	0x3a2c2e0b
 80122d8:	9b05      	ldr	r3, [sp, #20]
 80122da:	2200      	movs	r2, #0
 80122dc:	eba3 0308 	sub.w	r3, r3, r8
 80122e0:	9305      	str	r3, [sp, #20]
 80122e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80122e4:	f1c8 0300 	rsb	r3, r8, #0
 80122e8:	e7e3      	b.n	80122b2 <_dtoa_r+0x1d2>
 80122ea:	2200      	movs	r2, #0
 80122ec:	9208      	str	r2, [sp, #32]
 80122ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80122f0:	2a00      	cmp	r2, #0
 80122f2:	dc39      	bgt.n	8012368 <_dtoa_r+0x288>
 80122f4:	f04f 0b01 	mov.w	fp, #1
 80122f8:	46da      	mov	sl, fp
 80122fa:	465a      	mov	r2, fp
 80122fc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012300:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012304:	2100      	movs	r1, #0
 8012306:	2004      	movs	r0, #4
 8012308:	f100 0614 	add.w	r6, r0, #20
 801230c:	4296      	cmp	r6, r2
 801230e:	d930      	bls.n	8012372 <_dtoa_r+0x292>
 8012310:	6079      	str	r1, [r7, #4]
 8012312:	4648      	mov	r0, r9
 8012314:	9304      	str	r3, [sp, #16]
 8012316:	f000 fd39 	bl	8012d8c <_Balloc>
 801231a:	9b04      	ldr	r3, [sp, #16]
 801231c:	4607      	mov	r7, r0
 801231e:	2800      	cmp	r0, #0
 8012320:	d146      	bne.n	80123b0 <_dtoa_r+0x2d0>
 8012322:	4b22      	ldr	r3, [pc, #136]	@ (80123ac <_dtoa_r+0x2cc>)
 8012324:	4602      	mov	r2, r0
 8012326:	f240 11af 	movw	r1, #431	@ 0x1af
 801232a:	e6f2      	b.n	8012112 <_dtoa_r+0x32>
 801232c:	2201      	movs	r2, #1
 801232e:	e7dd      	b.n	80122ec <_dtoa_r+0x20c>
 8012330:	2200      	movs	r2, #0
 8012332:	9208      	str	r2, [sp, #32]
 8012334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012336:	eb08 0b02 	add.w	fp, r8, r2
 801233a:	f10b 0a01 	add.w	sl, fp, #1
 801233e:	4652      	mov	r2, sl
 8012340:	2a01      	cmp	r2, #1
 8012342:	bfb8      	it	lt
 8012344:	2201      	movlt	r2, #1
 8012346:	e7db      	b.n	8012300 <_dtoa_r+0x220>
 8012348:	2201      	movs	r2, #1
 801234a:	e7f2      	b.n	8012332 <_dtoa_r+0x252>
 801234c:	2401      	movs	r4, #1
 801234e:	2200      	movs	r2, #0
 8012350:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012354:	f04f 3bff 	mov.w	fp, #4294967295
 8012358:	2100      	movs	r1, #0
 801235a:	46da      	mov	sl, fp
 801235c:	2212      	movs	r2, #18
 801235e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012360:	e7ce      	b.n	8012300 <_dtoa_r+0x220>
 8012362:	2201      	movs	r2, #1
 8012364:	9208      	str	r2, [sp, #32]
 8012366:	e7f5      	b.n	8012354 <_dtoa_r+0x274>
 8012368:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801236c:	46da      	mov	sl, fp
 801236e:	465a      	mov	r2, fp
 8012370:	e7c6      	b.n	8012300 <_dtoa_r+0x220>
 8012372:	3101      	adds	r1, #1
 8012374:	0040      	lsls	r0, r0, #1
 8012376:	e7c7      	b.n	8012308 <_dtoa_r+0x228>
 8012378:	636f4361 	.word	0x636f4361
 801237c:	3fd287a7 	.word	0x3fd287a7
 8012380:	8b60c8b3 	.word	0x8b60c8b3
 8012384:	3fc68a28 	.word	0x3fc68a28
 8012388:	509f79fb 	.word	0x509f79fb
 801238c:	3fd34413 	.word	0x3fd34413
 8012390:	0801405d 	.word	0x0801405d
 8012394:	08014074 	.word	0x08014074
 8012398:	7ff00000 	.word	0x7ff00000
 801239c:	08014059 	.word	0x08014059
 80123a0:	0801402d 	.word	0x0801402d
 80123a4:	0801402c 	.word	0x0801402c
 80123a8:	08014170 	.word	0x08014170
 80123ac:	080140cc 	.word	0x080140cc
 80123b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80123b4:	f1ba 0f0e 	cmp.w	sl, #14
 80123b8:	6010      	str	r0, [r2, #0]
 80123ba:	d86f      	bhi.n	801249c <_dtoa_r+0x3bc>
 80123bc:	2c00      	cmp	r4, #0
 80123be:	d06d      	beq.n	801249c <_dtoa_r+0x3bc>
 80123c0:	f1b8 0f00 	cmp.w	r8, #0
 80123c4:	f340 80c2 	ble.w	801254c <_dtoa_r+0x46c>
 80123c8:	4aca      	ldr	r2, [pc, #808]	@ (80126f4 <_dtoa_r+0x614>)
 80123ca:	f008 010f 	and.w	r1, r8, #15
 80123ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80123d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80123d6:	ed92 7b00 	vldr	d7, [r2]
 80123da:	ea4f 1128 	mov.w	r1, r8, asr #4
 80123de:	f000 80a9 	beq.w	8012534 <_dtoa_r+0x454>
 80123e2:	4ac5      	ldr	r2, [pc, #788]	@ (80126f8 <_dtoa_r+0x618>)
 80123e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80123e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80123ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80123f0:	f001 010f 	and.w	r1, r1, #15
 80123f4:	2203      	movs	r2, #3
 80123f6:	48c0      	ldr	r0, [pc, #768]	@ (80126f8 <_dtoa_r+0x618>)
 80123f8:	2900      	cmp	r1, #0
 80123fa:	f040 809d 	bne.w	8012538 <_dtoa_r+0x458>
 80123fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012402:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012406:	ed8d 7b02 	vstr	d7, [sp, #8]
 801240a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801240c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012410:	2900      	cmp	r1, #0
 8012412:	f000 80c1 	beq.w	8012598 <_dtoa_r+0x4b8>
 8012416:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801241a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012422:	f140 80b9 	bpl.w	8012598 <_dtoa_r+0x4b8>
 8012426:	f1ba 0f00 	cmp.w	sl, #0
 801242a:	f000 80b5 	beq.w	8012598 <_dtoa_r+0x4b8>
 801242e:	f1bb 0f00 	cmp.w	fp, #0
 8012432:	dd31      	ble.n	8012498 <_dtoa_r+0x3b8>
 8012434:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012438:	ee27 7b06 	vmul.f64	d7, d7, d6
 801243c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012440:	f108 31ff 	add.w	r1, r8, #4294967295
 8012444:	9104      	str	r1, [sp, #16]
 8012446:	3201      	adds	r2, #1
 8012448:	465c      	mov	r4, fp
 801244a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801244e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012452:	ee07 2a90 	vmov	s15, r2
 8012456:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801245a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801245e:	ee15 2a90 	vmov	r2, s11
 8012462:	ec51 0b15 	vmov	r0, r1, d5
 8012466:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801246a:	2c00      	cmp	r4, #0
 801246c:	f040 8098 	bne.w	80125a0 <_dtoa_r+0x4c0>
 8012470:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012474:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012478:	ec41 0b17 	vmov	d7, r0, r1
 801247c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012484:	f300 8261 	bgt.w	801294a <_dtoa_r+0x86a>
 8012488:	eeb1 7b47 	vneg.f64	d7, d7
 801248c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012494:	f100 80f5 	bmi.w	8012682 <_dtoa_r+0x5a2>
 8012498:	ed8d 8b02 	vstr	d8, [sp, #8]
 801249c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801249e:	2a00      	cmp	r2, #0
 80124a0:	f2c0 812c 	blt.w	80126fc <_dtoa_r+0x61c>
 80124a4:	f1b8 0f0e 	cmp.w	r8, #14
 80124a8:	f300 8128 	bgt.w	80126fc <_dtoa_r+0x61c>
 80124ac:	4b91      	ldr	r3, [pc, #580]	@ (80126f4 <_dtoa_r+0x614>)
 80124ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80124b2:	ed93 6b00 	vldr	d6, [r3]
 80124b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	da03      	bge.n	80124c4 <_dtoa_r+0x3e4>
 80124bc:	f1ba 0f00 	cmp.w	sl, #0
 80124c0:	f340 80d2 	ble.w	8012668 <_dtoa_r+0x588>
 80124c4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80124c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124cc:	463e      	mov	r6, r7
 80124ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80124d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80124d6:	ee15 3a10 	vmov	r3, s10
 80124da:	3330      	adds	r3, #48	@ 0x30
 80124dc:	f806 3b01 	strb.w	r3, [r6], #1
 80124e0:	1bf3      	subs	r3, r6, r7
 80124e2:	459a      	cmp	sl, r3
 80124e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80124e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80124ec:	f040 80f8 	bne.w	80126e0 <_dtoa_r+0x600>
 80124f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80124f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80124f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fc:	f300 80dd 	bgt.w	80126ba <_dtoa_r+0x5da>
 8012500:	eeb4 7b46 	vcmp.f64	d7, d6
 8012504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012508:	d104      	bne.n	8012514 <_dtoa_r+0x434>
 801250a:	ee15 3a10 	vmov	r3, s10
 801250e:	07db      	lsls	r3, r3, #31
 8012510:	f100 80d3 	bmi.w	80126ba <_dtoa_r+0x5da>
 8012514:	9901      	ldr	r1, [sp, #4]
 8012516:	4648      	mov	r0, r9
 8012518:	f000 fc78 	bl	8012e0c <_Bfree>
 801251c:	2300      	movs	r3, #0
 801251e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012520:	7033      	strb	r3, [r6, #0]
 8012522:	f108 0301 	add.w	r3, r8, #1
 8012526:	6013      	str	r3, [r2, #0]
 8012528:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801252a:	2b00      	cmp	r3, #0
 801252c:	f000 8304 	beq.w	8012b38 <_dtoa_r+0xa58>
 8012530:	601e      	str	r6, [r3, #0]
 8012532:	e301      	b.n	8012b38 <_dtoa_r+0xa58>
 8012534:	2202      	movs	r2, #2
 8012536:	e75e      	b.n	80123f6 <_dtoa_r+0x316>
 8012538:	07cc      	lsls	r4, r1, #31
 801253a:	d504      	bpl.n	8012546 <_dtoa_r+0x466>
 801253c:	ed90 6b00 	vldr	d6, [r0]
 8012540:	3201      	adds	r2, #1
 8012542:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012546:	1049      	asrs	r1, r1, #1
 8012548:	3008      	adds	r0, #8
 801254a:	e755      	b.n	80123f8 <_dtoa_r+0x318>
 801254c:	d022      	beq.n	8012594 <_dtoa_r+0x4b4>
 801254e:	f1c8 0100 	rsb	r1, r8, #0
 8012552:	4a68      	ldr	r2, [pc, #416]	@ (80126f4 <_dtoa_r+0x614>)
 8012554:	f001 000f 	and.w	r0, r1, #15
 8012558:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801255c:	ed92 7b00 	vldr	d7, [r2]
 8012560:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012564:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012568:	4863      	ldr	r0, [pc, #396]	@ (80126f8 <_dtoa_r+0x618>)
 801256a:	1109      	asrs	r1, r1, #4
 801256c:	2400      	movs	r4, #0
 801256e:	2202      	movs	r2, #2
 8012570:	b929      	cbnz	r1, 801257e <_dtoa_r+0x49e>
 8012572:	2c00      	cmp	r4, #0
 8012574:	f43f af49 	beq.w	801240a <_dtoa_r+0x32a>
 8012578:	ed8d 7b02 	vstr	d7, [sp, #8]
 801257c:	e745      	b.n	801240a <_dtoa_r+0x32a>
 801257e:	07ce      	lsls	r6, r1, #31
 8012580:	d505      	bpl.n	801258e <_dtoa_r+0x4ae>
 8012582:	ed90 6b00 	vldr	d6, [r0]
 8012586:	3201      	adds	r2, #1
 8012588:	2401      	movs	r4, #1
 801258a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801258e:	1049      	asrs	r1, r1, #1
 8012590:	3008      	adds	r0, #8
 8012592:	e7ed      	b.n	8012570 <_dtoa_r+0x490>
 8012594:	2202      	movs	r2, #2
 8012596:	e738      	b.n	801240a <_dtoa_r+0x32a>
 8012598:	f8cd 8010 	str.w	r8, [sp, #16]
 801259c:	4654      	mov	r4, sl
 801259e:	e754      	b.n	801244a <_dtoa_r+0x36a>
 80125a0:	4a54      	ldr	r2, [pc, #336]	@ (80126f4 <_dtoa_r+0x614>)
 80125a2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80125a6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80125aa:	9a08      	ldr	r2, [sp, #32]
 80125ac:	ec41 0b17 	vmov	d7, r0, r1
 80125b0:	443c      	add	r4, r7
 80125b2:	b34a      	cbz	r2, 8012608 <_dtoa_r+0x528>
 80125b4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80125b8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80125bc:	463e      	mov	r6, r7
 80125be:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80125c2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80125c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80125ca:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80125ce:	ee14 2a90 	vmov	r2, s9
 80125d2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80125d6:	3230      	adds	r2, #48	@ 0x30
 80125d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80125dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80125e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e4:	f806 2b01 	strb.w	r2, [r6], #1
 80125e8:	d438      	bmi.n	801265c <_dtoa_r+0x57c>
 80125ea:	ee32 5b46 	vsub.f64	d5, d2, d6
 80125ee:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80125f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f6:	d462      	bmi.n	80126be <_dtoa_r+0x5de>
 80125f8:	42a6      	cmp	r6, r4
 80125fa:	f43f af4d 	beq.w	8012498 <_dtoa_r+0x3b8>
 80125fe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012602:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012606:	e7e0      	b.n	80125ca <_dtoa_r+0x4ea>
 8012608:	4621      	mov	r1, r4
 801260a:	463e      	mov	r6, r7
 801260c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012610:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012614:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012618:	ee14 2a90 	vmov	r2, s9
 801261c:	3230      	adds	r2, #48	@ 0x30
 801261e:	f806 2b01 	strb.w	r2, [r6], #1
 8012622:	42a6      	cmp	r6, r4
 8012624:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012628:	ee36 6b45 	vsub.f64	d6, d6, d5
 801262c:	d119      	bne.n	8012662 <_dtoa_r+0x582>
 801262e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012632:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012636:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801263e:	dc3e      	bgt.n	80126be <_dtoa_r+0x5de>
 8012640:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012644:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801264c:	f57f af24 	bpl.w	8012498 <_dtoa_r+0x3b8>
 8012650:	460e      	mov	r6, r1
 8012652:	3901      	subs	r1, #1
 8012654:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012658:	2b30      	cmp	r3, #48	@ 0x30
 801265a:	d0f9      	beq.n	8012650 <_dtoa_r+0x570>
 801265c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012660:	e758      	b.n	8012514 <_dtoa_r+0x434>
 8012662:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012666:	e7d5      	b.n	8012614 <_dtoa_r+0x534>
 8012668:	d10b      	bne.n	8012682 <_dtoa_r+0x5a2>
 801266a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801266e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012672:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012676:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801267e:	f2c0 8161 	blt.w	8012944 <_dtoa_r+0x864>
 8012682:	2400      	movs	r4, #0
 8012684:	4625      	mov	r5, r4
 8012686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012688:	43db      	mvns	r3, r3
 801268a:	9304      	str	r3, [sp, #16]
 801268c:	463e      	mov	r6, r7
 801268e:	f04f 0800 	mov.w	r8, #0
 8012692:	4621      	mov	r1, r4
 8012694:	4648      	mov	r0, r9
 8012696:	f000 fbb9 	bl	8012e0c <_Bfree>
 801269a:	2d00      	cmp	r5, #0
 801269c:	d0de      	beq.n	801265c <_dtoa_r+0x57c>
 801269e:	f1b8 0f00 	cmp.w	r8, #0
 80126a2:	d005      	beq.n	80126b0 <_dtoa_r+0x5d0>
 80126a4:	45a8      	cmp	r8, r5
 80126a6:	d003      	beq.n	80126b0 <_dtoa_r+0x5d0>
 80126a8:	4641      	mov	r1, r8
 80126aa:	4648      	mov	r0, r9
 80126ac:	f000 fbae 	bl	8012e0c <_Bfree>
 80126b0:	4629      	mov	r1, r5
 80126b2:	4648      	mov	r0, r9
 80126b4:	f000 fbaa 	bl	8012e0c <_Bfree>
 80126b8:	e7d0      	b.n	801265c <_dtoa_r+0x57c>
 80126ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80126be:	4633      	mov	r3, r6
 80126c0:	461e      	mov	r6, r3
 80126c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126c6:	2a39      	cmp	r2, #57	@ 0x39
 80126c8:	d106      	bne.n	80126d8 <_dtoa_r+0x5f8>
 80126ca:	429f      	cmp	r7, r3
 80126cc:	d1f8      	bne.n	80126c0 <_dtoa_r+0x5e0>
 80126ce:	9a04      	ldr	r2, [sp, #16]
 80126d0:	3201      	adds	r2, #1
 80126d2:	9204      	str	r2, [sp, #16]
 80126d4:	2230      	movs	r2, #48	@ 0x30
 80126d6:	703a      	strb	r2, [r7, #0]
 80126d8:	781a      	ldrb	r2, [r3, #0]
 80126da:	3201      	adds	r2, #1
 80126dc:	701a      	strb	r2, [r3, #0]
 80126de:	e7bd      	b.n	801265c <_dtoa_r+0x57c>
 80126e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80126e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80126e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ec:	f47f aeef 	bne.w	80124ce <_dtoa_r+0x3ee>
 80126f0:	e710      	b.n	8012514 <_dtoa_r+0x434>
 80126f2:	bf00      	nop
 80126f4:	08014170 	.word	0x08014170
 80126f8:	08014148 	.word	0x08014148
 80126fc:	9908      	ldr	r1, [sp, #32]
 80126fe:	2900      	cmp	r1, #0
 8012700:	f000 80e3 	beq.w	80128ca <_dtoa_r+0x7ea>
 8012704:	9907      	ldr	r1, [sp, #28]
 8012706:	2901      	cmp	r1, #1
 8012708:	f300 80c8 	bgt.w	801289c <_dtoa_r+0x7bc>
 801270c:	2d00      	cmp	r5, #0
 801270e:	f000 80c1 	beq.w	8012894 <_dtoa_r+0x7b4>
 8012712:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012716:	9e05      	ldr	r6, [sp, #20]
 8012718:	461c      	mov	r4, r3
 801271a:	9304      	str	r3, [sp, #16]
 801271c:	9b05      	ldr	r3, [sp, #20]
 801271e:	4413      	add	r3, r2
 8012720:	9305      	str	r3, [sp, #20]
 8012722:	9b06      	ldr	r3, [sp, #24]
 8012724:	2101      	movs	r1, #1
 8012726:	4413      	add	r3, r2
 8012728:	4648      	mov	r0, r9
 801272a:	9306      	str	r3, [sp, #24]
 801272c:	f000 fc22 	bl	8012f74 <__i2b>
 8012730:	9b04      	ldr	r3, [sp, #16]
 8012732:	4605      	mov	r5, r0
 8012734:	b166      	cbz	r6, 8012750 <_dtoa_r+0x670>
 8012736:	9a06      	ldr	r2, [sp, #24]
 8012738:	2a00      	cmp	r2, #0
 801273a:	dd09      	ble.n	8012750 <_dtoa_r+0x670>
 801273c:	42b2      	cmp	r2, r6
 801273e:	9905      	ldr	r1, [sp, #20]
 8012740:	bfa8      	it	ge
 8012742:	4632      	movge	r2, r6
 8012744:	1a89      	subs	r1, r1, r2
 8012746:	9105      	str	r1, [sp, #20]
 8012748:	9906      	ldr	r1, [sp, #24]
 801274a:	1ab6      	subs	r6, r6, r2
 801274c:	1a8a      	subs	r2, r1, r2
 801274e:	9206      	str	r2, [sp, #24]
 8012750:	b1fb      	cbz	r3, 8012792 <_dtoa_r+0x6b2>
 8012752:	9a08      	ldr	r2, [sp, #32]
 8012754:	2a00      	cmp	r2, #0
 8012756:	f000 80bc 	beq.w	80128d2 <_dtoa_r+0x7f2>
 801275a:	b19c      	cbz	r4, 8012784 <_dtoa_r+0x6a4>
 801275c:	4629      	mov	r1, r5
 801275e:	4622      	mov	r2, r4
 8012760:	4648      	mov	r0, r9
 8012762:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012764:	f000 fcc6 	bl	80130f4 <__pow5mult>
 8012768:	9a01      	ldr	r2, [sp, #4]
 801276a:	4601      	mov	r1, r0
 801276c:	4605      	mov	r5, r0
 801276e:	4648      	mov	r0, r9
 8012770:	f000 fc16 	bl	8012fa0 <__multiply>
 8012774:	9901      	ldr	r1, [sp, #4]
 8012776:	9004      	str	r0, [sp, #16]
 8012778:	4648      	mov	r0, r9
 801277a:	f000 fb47 	bl	8012e0c <_Bfree>
 801277e:	9a04      	ldr	r2, [sp, #16]
 8012780:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012782:	9201      	str	r2, [sp, #4]
 8012784:	1b1a      	subs	r2, r3, r4
 8012786:	d004      	beq.n	8012792 <_dtoa_r+0x6b2>
 8012788:	9901      	ldr	r1, [sp, #4]
 801278a:	4648      	mov	r0, r9
 801278c:	f000 fcb2 	bl	80130f4 <__pow5mult>
 8012790:	9001      	str	r0, [sp, #4]
 8012792:	2101      	movs	r1, #1
 8012794:	4648      	mov	r0, r9
 8012796:	f000 fbed 	bl	8012f74 <__i2b>
 801279a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801279c:	4604      	mov	r4, r0
 801279e:	2b00      	cmp	r3, #0
 80127a0:	f000 81d0 	beq.w	8012b44 <_dtoa_r+0xa64>
 80127a4:	461a      	mov	r2, r3
 80127a6:	4601      	mov	r1, r0
 80127a8:	4648      	mov	r0, r9
 80127aa:	f000 fca3 	bl	80130f4 <__pow5mult>
 80127ae:	9b07      	ldr	r3, [sp, #28]
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	4604      	mov	r4, r0
 80127b4:	f300 8095 	bgt.w	80128e2 <_dtoa_r+0x802>
 80127b8:	9b02      	ldr	r3, [sp, #8]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	f040 808b 	bne.w	80128d6 <_dtoa_r+0x7f6>
 80127c0:	9b03      	ldr	r3, [sp, #12]
 80127c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80127c6:	2a00      	cmp	r2, #0
 80127c8:	f040 8087 	bne.w	80128da <_dtoa_r+0x7fa>
 80127cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80127d0:	0d12      	lsrs	r2, r2, #20
 80127d2:	0512      	lsls	r2, r2, #20
 80127d4:	2a00      	cmp	r2, #0
 80127d6:	f000 8082 	beq.w	80128de <_dtoa_r+0x7fe>
 80127da:	9b05      	ldr	r3, [sp, #20]
 80127dc:	3301      	adds	r3, #1
 80127de:	9305      	str	r3, [sp, #20]
 80127e0:	9b06      	ldr	r3, [sp, #24]
 80127e2:	3301      	adds	r3, #1
 80127e4:	9306      	str	r3, [sp, #24]
 80127e6:	2301      	movs	r3, #1
 80127e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80127ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	f000 81af 	beq.w	8012b50 <_dtoa_r+0xa70>
 80127f2:	6922      	ldr	r2, [r4, #16]
 80127f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80127f8:	6910      	ldr	r0, [r2, #16]
 80127fa:	f000 fb6f 	bl	8012edc <__hi0bits>
 80127fe:	f1c0 0020 	rsb	r0, r0, #32
 8012802:	9b06      	ldr	r3, [sp, #24]
 8012804:	4418      	add	r0, r3
 8012806:	f010 001f 	ands.w	r0, r0, #31
 801280a:	d076      	beq.n	80128fa <_dtoa_r+0x81a>
 801280c:	f1c0 0220 	rsb	r2, r0, #32
 8012810:	2a04      	cmp	r2, #4
 8012812:	dd69      	ble.n	80128e8 <_dtoa_r+0x808>
 8012814:	9b05      	ldr	r3, [sp, #20]
 8012816:	f1c0 001c 	rsb	r0, r0, #28
 801281a:	4403      	add	r3, r0
 801281c:	9305      	str	r3, [sp, #20]
 801281e:	9b06      	ldr	r3, [sp, #24]
 8012820:	4406      	add	r6, r0
 8012822:	4403      	add	r3, r0
 8012824:	9306      	str	r3, [sp, #24]
 8012826:	9b05      	ldr	r3, [sp, #20]
 8012828:	2b00      	cmp	r3, #0
 801282a:	dd05      	ble.n	8012838 <_dtoa_r+0x758>
 801282c:	9901      	ldr	r1, [sp, #4]
 801282e:	461a      	mov	r2, r3
 8012830:	4648      	mov	r0, r9
 8012832:	f000 fcb9 	bl	80131a8 <__lshift>
 8012836:	9001      	str	r0, [sp, #4]
 8012838:	9b06      	ldr	r3, [sp, #24]
 801283a:	2b00      	cmp	r3, #0
 801283c:	dd05      	ble.n	801284a <_dtoa_r+0x76a>
 801283e:	4621      	mov	r1, r4
 8012840:	461a      	mov	r2, r3
 8012842:	4648      	mov	r0, r9
 8012844:	f000 fcb0 	bl	80131a8 <__lshift>
 8012848:	4604      	mov	r4, r0
 801284a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801284c:	2b00      	cmp	r3, #0
 801284e:	d056      	beq.n	80128fe <_dtoa_r+0x81e>
 8012850:	9801      	ldr	r0, [sp, #4]
 8012852:	4621      	mov	r1, r4
 8012854:	f000 fd14 	bl	8013280 <__mcmp>
 8012858:	2800      	cmp	r0, #0
 801285a:	da50      	bge.n	80128fe <_dtoa_r+0x81e>
 801285c:	f108 33ff 	add.w	r3, r8, #4294967295
 8012860:	9304      	str	r3, [sp, #16]
 8012862:	9901      	ldr	r1, [sp, #4]
 8012864:	2300      	movs	r3, #0
 8012866:	220a      	movs	r2, #10
 8012868:	4648      	mov	r0, r9
 801286a:	f000 faf1 	bl	8012e50 <__multadd>
 801286e:	9b08      	ldr	r3, [sp, #32]
 8012870:	9001      	str	r0, [sp, #4]
 8012872:	2b00      	cmp	r3, #0
 8012874:	f000 816e 	beq.w	8012b54 <_dtoa_r+0xa74>
 8012878:	4629      	mov	r1, r5
 801287a:	2300      	movs	r3, #0
 801287c:	220a      	movs	r2, #10
 801287e:	4648      	mov	r0, r9
 8012880:	f000 fae6 	bl	8012e50 <__multadd>
 8012884:	f1bb 0f00 	cmp.w	fp, #0
 8012888:	4605      	mov	r5, r0
 801288a:	dc64      	bgt.n	8012956 <_dtoa_r+0x876>
 801288c:	9b07      	ldr	r3, [sp, #28]
 801288e:	2b02      	cmp	r3, #2
 8012890:	dc3e      	bgt.n	8012910 <_dtoa_r+0x830>
 8012892:	e060      	b.n	8012956 <_dtoa_r+0x876>
 8012894:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012896:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801289a:	e73c      	b.n	8012716 <_dtoa_r+0x636>
 801289c:	f10a 34ff 	add.w	r4, sl, #4294967295
 80128a0:	42a3      	cmp	r3, r4
 80128a2:	bfbf      	itttt	lt
 80128a4:	1ae2      	sublt	r2, r4, r3
 80128a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80128a8:	189b      	addlt	r3, r3, r2
 80128aa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80128ac:	bfae      	itee	ge
 80128ae:	1b1c      	subge	r4, r3, r4
 80128b0:	4623      	movlt	r3, r4
 80128b2:	2400      	movlt	r4, #0
 80128b4:	f1ba 0f00 	cmp.w	sl, #0
 80128b8:	bfb5      	itete	lt
 80128ba:	9a05      	ldrlt	r2, [sp, #20]
 80128bc:	9e05      	ldrge	r6, [sp, #20]
 80128be:	eba2 060a 	sublt.w	r6, r2, sl
 80128c2:	4652      	movge	r2, sl
 80128c4:	bfb8      	it	lt
 80128c6:	2200      	movlt	r2, #0
 80128c8:	e727      	b.n	801271a <_dtoa_r+0x63a>
 80128ca:	9e05      	ldr	r6, [sp, #20]
 80128cc:	9d08      	ldr	r5, [sp, #32]
 80128ce:	461c      	mov	r4, r3
 80128d0:	e730      	b.n	8012734 <_dtoa_r+0x654>
 80128d2:	461a      	mov	r2, r3
 80128d4:	e758      	b.n	8012788 <_dtoa_r+0x6a8>
 80128d6:	2300      	movs	r3, #0
 80128d8:	e786      	b.n	80127e8 <_dtoa_r+0x708>
 80128da:	9b02      	ldr	r3, [sp, #8]
 80128dc:	e784      	b.n	80127e8 <_dtoa_r+0x708>
 80128de:	920b      	str	r2, [sp, #44]	@ 0x2c
 80128e0:	e783      	b.n	80127ea <_dtoa_r+0x70a>
 80128e2:	2300      	movs	r3, #0
 80128e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80128e6:	e784      	b.n	80127f2 <_dtoa_r+0x712>
 80128e8:	d09d      	beq.n	8012826 <_dtoa_r+0x746>
 80128ea:	9b05      	ldr	r3, [sp, #20]
 80128ec:	321c      	adds	r2, #28
 80128ee:	4413      	add	r3, r2
 80128f0:	9305      	str	r3, [sp, #20]
 80128f2:	9b06      	ldr	r3, [sp, #24]
 80128f4:	4416      	add	r6, r2
 80128f6:	4413      	add	r3, r2
 80128f8:	e794      	b.n	8012824 <_dtoa_r+0x744>
 80128fa:	4602      	mov	r2, r0
 80128fc:	e7f5      	b.n	80128ea <_dtoa_r+0x80a>
 80128fe:	f1ba 0f00 	cmp.w	sl, #0
 8012902:	f8cd 8010 	str.w	r8, [sp, #16]
 8012906:	46d3      	mov	fp, sl
 8012908:	dc21      	bgt.n	801294e <_dtoa_r+0x86e>
 801290a:	9b07      	ldr	r3, [sp, #28]
 801290c:	2b02      	cmp	r3, #2
 801290e:	dd1e      	ble.n	801294e <_dtoa_r+0x86e>
 8012910:	f1bb 0f00 	cmp.w	fp, #0
 8012914:	f47f aeb7 	bne.w	8012686 <_dtoa_r+0x5a6>
 8012918:	4621      	mov	r1, r4
 801291a:	465b      	mov	r3, fp
 801291c:	2205      	movs	r2, #5
 801291e:	4648      	mov	r0, r9
 8012920:	f000 fa96 	bl	8012e50 <__multadd>
 8012924:	4601      	mov	r1, r0
 8012926:	4604      	mov	r4, r0
 8012928:	9801      	ldr	r0, [sp, #4]
 801292a:	f000 fca9 	bl	8013280 <__mcmp>
 801292e:	2800      	cmp	r0, #0
 8012930:	f77f aea9 	ble.w	8012686 <_dtoa_r+0x5a6>
 8012934:	463e      	mov	r6, r7
 8012936:	2331      	movs	r3, #49	@ 0x31
 8012938:	f806 3b01 	strb.w	r3, [r6], #1
 801293c:	9b04      	ldr	r3, [sp, #16]
 801293e:	3301      	adds	r3, #1
 8012940:	9304      	str	r3, [sp, #16]
 8012942:	e6a4      	b.n	801268e <_dtoa_r+0x5ae>
 8012944:	f8cd 8010 	str.w	r8, [sp, #16]
 8012948:	4654      	mov	r4, sl
 801294a:	4625      	mov	r5, r4
 801294c:	e7f2      	b.n	8012934 <_dtoa_r+0x854>
 801294e:	9b08      	ldr	r3, [sp, #32]
 8012950:	2b00      	cmp	r3, #0
 8012952:	f000 8103 	beq.w	8012b5c <_dtoa_r+0xa7c>
 8012956:	2e00      	cmp	r6, #0
 8012958:	dd05      	ble.n	8012966 <_dtoa_r+0x886>
 801295a:	4629      	mov	r1, r5
 801295c:	4632      	mov	r2, r6
 801295e:	4648      	mov	r0, r9
 8012960:	f000 fc22 	bl	80131a8 <__lshift>
 8012964:	4605      	mov	r5, r0
 8012966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012968:	2b00      	cmp	r3, #0
 801296a:	d058      	beq.n	8012a1e <_dtoa_r+0x93e>
 801296c:	6869      	ldr	r1, [r5, #4]
 801296e:	4648      	mov	r0, r9
 8012970:	f000 fa0c 	bl	8012d8c <_Balloc>
 8012974:	4606      	mov	r6, r0
 8012976:	b928      	cbnz	r0, 8012984 <_dtoa_r+0x8a4>
 8012978:	4b82      	ldr	r3, [pc, #520]	@ (8012b84 <_dtoa_r+0xaa4>)
 801297a:	4602      	mov	r2, r0
 801297c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012980:	f7ff bbc7 	b.w	8012112 <_dtoa_r+0x32>
 8012984:	692a      	ldr	r2, [r5, #16]
 8012986:	3202      	adds	r2, #2
 8012988:	0092      	lsls	r2, r2, #2
 801298a:	f105 010c 	add.w	r1, r5, #12
 801298e:	300c      	adds	r0, #12
 8012990:	f7ff fb0f 	bl	8011fb2 <memcpy>
 8012994:	2201      	movs	r2, #1
 8012996:	4631      	mov	r1, r6
 8012998:	4648      	mov	r0, r9
 801299a:	f000 fc05 	bl	80131a8 <__lshift>
 801299e:	1c7b      	adds	r3, r7, #1
 80129a0:	9305      	str	r3, [sp, #20]
 80129a2:	eb07 030b 	add.w	r3, r7, fp
 80129a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80129a8:	9b02      	ldr	r3, [sp, #8]
 80129aa:	f003 0301 	and.w	r3, r3, #1
 80129ae:	46a8      	mov	r8, r5
 80129b0:	9308      	str	r3, [sp, #32]
 80129b2:	4605      	mov	r5, r0
 80129b4:	9b05      	ldr	r3, [sp, #20]
 80129b6:	9801      	ldr	r0, [sp, #4]
 80129b8:	4621      	mov	r1, r4
 80129ba:	f103 3bff 	add.w	fp, r3, #4294967295
 80129be:	f7ff fb06 	bl	8011fce <quorem>
 80129c2:	4641      	mov	r1, r8
 80129c4:	9002      	str	r0, [sp, #8]
 80129c6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80129ca:	9801      	ldr	r0, [sp, #4]
 80129cc:	f000 fc58 	bl	8013280 <__mcmp>
 80129d0:	462a      	mov	r2, r5
 80129d2:	9006      	str	r0, [sp, #24]
 80129d4:	4621      	mov	r1, r4
 80129d6:	4648      	mov	r0, r9
 80129d8:	f000 fc6e 	bl	80132b8 <__mdiff>
 80129dc:	68c2      	ldr	r2, [r0, #12]
 80129de:	4606      	mov	r6, r0
 80129e0:	b9fa      	cbnz	r2, 8012a22 <_dtoa_r+0x942>
 80129e2:	4601      	mov	r1, r0
 80129e4:	9801      	ldr	r0, [sp, #4]
 80129e6:	f000 fc4b 	bl	8013280 <__mcmp>
 80129ea:	4602      	mov	r2, r0
 80129ec:	4631      	mov	r1, r6
 80129ee:	4648      	mov	r0, r9
 80129f0:	920a      	str	r2, [sp, #40]	@ 0x28
 80129f2:	f000 fa0b 	bl	8012e0c <_Bfree>
 80129f6:	9b07      	ldr	r3, [sp, #28]
 80129f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80129fa:	9e05      	ldr	r6, [sp, #20]
 80129fc:	ea43 0102 	orr.w	r1, r3, r2
 8012a00:	9b08      	ldr	r3, [sp, #32]
 8012a02:	4319      	orrs	r1, r3
 8012a04:	d10f      	bne.n	8012a26 <_dtoa_r+0x946>
 8012a06:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012a0a:	d028      	beq.n	8012a5e <_dtoa_r+0x97e>
 8012a0c:	9b06      	ldr	r3, [sp, #24]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	dd02      	ble.n	8012a18 <_dtoa_r+0x938>
 8012a12:	9b02      	ldr	r3, [sp, #8]
 8012a14:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012a18:	f88b a000 	strb.w	sl, [fp]
 8012a1c:	e639      	b.n	8012692 <_dtoa_r+0x5b2>
 8012a1e:	4628      	mov	r0, r5
 8012a20:	e7bd      	b.n	801299e <_dtoa_r+0x8be>
 8012a22:	2201      	movs	r2, #1
 8012a24:	e7e2      	b.n	80129ec <_dtoa_r+0x90c>
 8012a26:	9b06      	ldr	r3, [sp, #24]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	db04      	blt.n	8012a36 <_dtoa_r+0x956>
 8012a2c:	9907      	ldr	r1, [sp, #28]
 8012a2e:	430b      	orrs	r3, r1
 8012a30:	9908      	ldr	r1, [sp, #32]
 8012a32:	430b      	orrs	r3, r1
 8012a34:	d120      	bne.n	8012a78 <_dtoa_r+0x998>
 8012a36:	2a00      	cmp	r2, #0
 8012a38:	ddee      	ble.n	8012a18 <_dtoa_r+0x938>
 8012a3a:	9901      	ldr	r1, [sp, #4]
 8012a3c:	2201      	movs	r2, #1
 8012a3e:	4648      	mov	r0, r9
 8012a40:	f000 fbb2 	bl	80131a8 <__lshift>
 8012a44:	4621      	mov	r1, r4
 8012a46:	9001      	str	r0, [sp, #4]
 8012a48:	f000 fc1a 	bl	8013280 <__mcmp>
 8012a4c:	2800      	cmp	r0, #0
 8012a4e:	dc03      	bgt.n	8012a58 <_dtoa_r+0x978>
 8012a50:	d1e2      	bne.n	8012a18 <_dtoa_r+0x938>
 8012a52:	f01a 0f01 	tst.w	sl, #1
 8012a56:	d0df      	beq.n	8012a18 <_dtoa_r+0x938>
 8012a58:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012a5c:	d1d9      	bne.n	8012a12 <_dtoa_r+0x932>
 8012a5e:	2339      	movs	r3, #57	@ 0x39
 8012a60:	f88b 3000 	strb.w	r3, [fp]
 8012a64:	4633      	mov	r3, r6
 8012a66:	461e      	mov	r6, r3
 8012a68:	3b01      	subs	r3, #1
 8012a6a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012a6e:	2a39      	cmp	r2, #57	@ 0x39
 8012a70:	d053      	beq.n	8012b1a <_dtoa_r+0xa3a>
 8012a72:	3201      	adds	r2, #1
 8012a74:	701a      	strb	r2, [r3, #0]
 8012a76:	e60c      	b.n	8012692 <_dtoa_r+0x5b2>
 8012a78:	2a00      	cmp	r2, #0
 8012a7a:	dd07      	ble.n	8012a8c <_dtoa_r+0x9ac>
 8012a7c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012a80:	d0ed      	beq.n	8012a5e <_dtoa_r+0x97e>
 8012a82:	f10a 0301 	add.w	r3, sl, #1
 8012a86:	f88b 3000 	strb.w	r3, [fp]
 8012a8a:	e602      	b.n	8012692 <_dtoa_r+0x5b2>
 8012a8c:	9b05      	ldr	r3, [sp, #20]
 8012a8e:	9a05      	ldr	r2, [sp, #20]
 8012a90:	f803 ac01 	strb.w	sl, [r3, #-1]
 8012a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a96:	4293      	cmp	r3, r2
 8012a98:	d029      	beq.n	8012aee <_dtoa_r+0xa0e>
 8012a9a:	9901      	ldr	r1, [sp, #4]
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	220a      	movs	r2, #10
 8012aa0:	4648      	mov	r0, r9
 8012aa2:	f000 f9d5 	bl	8012e50 <__multadd>
 8012aa6:	45a8      	cmp	r8, r5
 8012aa8:	9001      	str	r0, [sp, #4]
 8012aaa:	f04f 0300 	mov.w	r3, #0
 8012aae:	f04f 020a 	mov.w	r2, #10
 8012ab2:	4641      	mov	r1, r8
 8012ab4:	4648      	mov	r0, r9
 8012ab6:	d107      	bne.n	8012ac8 <_dtoa_r+0x9e8>
 8012ab8:	f000 f9ca 	bl	8012e50 <__multadd>
 8012abc:	4680      	mov	r8, r0
 8012abe:	4605      	mov	r5, r0
 8012ac0:	9b05      	ldr	r3, [sp, #20]
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	9305      	str	r3, [sp, #20]
 8012ac6:	e775      	b.n	80129b4 <_dtoa_r+0x8d4>
 8012ac8:	f000 f9c2 	bl	8012e50 <__multadd>
 8012acc:	4629      	mov	r1, r5
 8012ace:	4680      	mov	r8, r0
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	220a      	movs	r2, #10
 8012ad4:	4648      	mov	r0, r9
 8012ad6:	f000 f9bb 	bl	8012e50 <__multadd>
 8012ada:	4605      	mov	r5, r0
 8012adc:	e7f0      	b.n	8012ac0 <_dtoa_r+0x9e0>
 8012ade:	f1bb 0f00 	cmp.w	fp, #0
 8012ae2:	bfcc      	ite	gt
 8012ae4:	465e      	movgt	r6, fp
 8012ae6:	2601      	movle	r6, #1
 8012ae8:	443e      	add	r6, r7
 8012aea:	f04f 0800 	mov.w	r8, #0
 8012aee:	9901      	ldr	r1, [sp, #4]
 8012af0:	2201      	movs	r2, #1
 8012af2:	4648      	mov	r0, r9
 8012af4:	f000 fb58 	bl	80131a8 <__lshift>
 8012af8:	4621      	mov	r1, r4
 8012afa:	9001      	str	r0, [sp, #4]
 8012afc:	f000 fbc0 	bl	8013280 <__mcmp>
 8012b00:	2800      	cmp	r0, #0
 8012b02:	dcaf      	bgt.n	8012a64 <_dtoa_r+0x984>
 8012b04:	d102      	bne.n	8012b0c <_dtoa_r+0xa2c>
 8012b06:	f01a 0f01 	tst.w	sl, #1
 8012b0a:	d1ab      	bne.n	8012a64 <_dtoa_r+0x984>
 8012b0c:	4633      	mov	r3, r6
 8012b0e:	461e      	mov	r6, r3
 8012b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b14:	2a30      	cmp	r2, #48	@ 0x30
 8012b16:	d0fa      	beq.n	8012b0e <_dtoa_r+0xa2e>
 8012b18:	e5bb      	b.n	8012692 <_dtoa_r+0x5b2>
 8012b1a:	429f      	cmp	r7, r3
 8012b1c:	d1a3      	bne.n	8012a66 <_dtoa_r+0x986>
 8012b1e:	9b04      	ldr	r3, [sp, #16]
 8012b20:	3301      	adds	r3, #1
 8012b22:	9304      	str	r3, [sp, #16]
 8012b24:	2331      	movs	r3, #49	@ 0x31
 8012b26:	703b      	strb	r3, [r7, #0]
 8012b28:	e5b3      	b.n	8012692 <_dtoa_r+0x5b2>
 8012b2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012b2c:	4f16      	ldr	r7, [pc, #88]	@ (8012b88 <_dtoa_r+0xaa8>)
 8012b2e:	b11b      	cbz	r3, 8012b38 <_dtoa_r+0xa58>
 8012b30:	f107 0308 	add.w	r3, r7, #8
 8012b34:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012b36:	6013      	str	r3, [r2, #0]
 8012b38:	4638      	mov	r0, r7
 8012b3a:	b011      	add	sp, #68	@ 0x44
 8012b3c:	ecbd 8b02 	vpop	{d8}
 8012b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b44:	9b07      	ldr	r3, [sp, #28]
 8012b46:	2b01      	cmp	r3, #1
 8012b48:	f77f ae36 	ble.w	80127b8 <_dtoa_r+0x6d8>
 8012b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b50:	2001      	movs	r0, #1
 8012b52:	e656      	b.n	8012802 <_dtoa_r+0x722>
 8012b54:	f1bb 0f00 	cmp.w	fp, #0
 8012b58:	f77f aed7 	ble.w	801290a <_dtoa_r+0x82a>
 8012b5c:	463e      	mov	r6, r7
 8012b5e:	9801      	ldr	r0, [sp, #4]
 8012b60:	4621      	mov	r1, r4
 8012b62:	f7ff fa34 	bl	8011fce <quorem>
 8012b66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012b6a:	f806 ab01 	strb.w	sl, [r6], #1
 8012b6e:	1bf2      	subs	r2, r6, r7
 8012b70:	4593      	cmp	fp, r2
 8012b72:	ddb4      	ble.n	8012ade <_dtoa_r+0x9fe>
 8012b74:	9901      	ldr	r1, [sp, #4]
 8012b76:	2300      	movs	r3, #0
 8012b78:	220a      	movs	r2, #10
 8012b7a:	4648      	mov	r0, r9
 8012b7c:	f000 f968 	bl	8012e50 <__multadd>
 8012b80:	9001      	str	r0, [sp, #4]
 8012b82:	e7ec      	b.n	8012b5e <_dtoa_r+0xa7e>
 8012b84:	080140cc 	.word	0x080140cc
 8012b88:	08014050 	.word	0x08014050

08012b8c <_free_r>:
 8012b8c:	b538      	push	{r3, r4, r5, lr}
 8012b8e:	4605      	mov	r5, r0
 8012b90:	2900      	cmp	r1, #0
 8012b92:	d041      	beq.n	8012c18 <_free_r+0x8c>
 8012b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b98:	1f0c      	subs	r4, r1, #4
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	bfb8      	it	lt
 8012b9e:	18e4      	addlt	r4, r4, r3
 8012ba0:	f000 f8e8 	bl	8012d74 <__malloc_lock>
 8012ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8012c1c <_free_r+0x90>)
 8012ba6:	6813      	ldr	r3, [r2, #0]
 8012ba8:	b933      	cbnz	r3, 8012bb8 <_free_r+0x2c>
 8012baa:	6063      	str	r3, [r4, #4]
 8012bac:	6014      	str	r4, [r2, #0]
 8012bae:	4628      	mov	r0, r5
 8012bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bb4:	f000 b8e4 	b.w	8012d80 <__malloc_unlock>
 8012bb8:	42a3      	cmp	r3, r4
 8012bba:	d908      	bls.n	8012bce <_free_r+0x42>
 8012bbc:	6820      	ldr	r0, [r4, #0]
 8012bbe:	1821      	adds	r1, r4, r0
 8012bc0:	428b      	cmp	r3, r1
 8012bc2:	bf01      	itttt	eq
 8012bc4:	6819      	ldreq	r1, [r3, #0]
 8012bc6:	685b      	ldreq	r3, [r3, #4]
 8012bc8:	1809      	addeq	r1, r1, r0
 8012bca:	6021      	streq	r1, [r4, #0]
 8012bcc:	e7ed      	b.n	8012baa <_free_r+0x1e>
 8012bce:	461a      	mov	r2, r3
 8012bd0:	685b      	ldr	r3, [r3, #4]
 8012bd2:	b10b      	cbz	r3, 8012bd8 <_free_r+0x4c>
 8012bd4:	42a3      	cmp	r3, r4
 8012bd6:	d9fa      	bls.n	8012bce <_free_r+0x42>
 8012bd8:	6811      	ldr	r1, [r2, #0]
 8012bda:	1850      	adds	r0, r2, r1
 8012bdc:	42a0      	cmp	r0, r4
 8012bde:	d10b      	bne.n	8012bf8 <_free_r+0x6c>
 8012be0:	6820      	ldr	r0, [r4, #0]
 8012be2:	4401      	add	r1, r0
 8012be4:	1850      	adds	r0, r2, r1
 8012be6:	4283      	cmp	r3, r0
 8012be8:	6011      	str	r1, [r2, #0]
 8012bea:	d1e0      	bne.n	8012bae <_free_r+0x22>
 8012bec:	6818      	ldr	r0, [r3, #0]
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	6053      	str	r3, [r2, #4]
 8012bf2:	4408      	add	r0, r1
 8012bf4:	6010      	str	r0, [r2, #0]
 8012bf6:	e7da      	b.n	8012bae <_free_r+0x22>
 8012bf8:	d902      	bls.n	8012c00 <_free_r+0x74>
 8012bfa:	230c      	movs	r3, #12
 8012bfc:	602b      	str	r3, [r5, #0]
 8012bfe:	e7d6      	b.n	8012bae <_free_r+0x22>
 8012c00:	6820      	ldr	r0, [r4, #0]
 8012c02:	1821      	adds	r1, r4, r0
 8012c04:	428b      	cmp	r3, r1
 8012c06:	bf04      	itt	eq
 8012c08:	6819      	ldreq	r1, [r3, #0]
 8012c0a:	685b      	ldreq	r3, [r3, #4]
 8012c0c:	6063      	str	r3, [r4, #4]
 8012c0e:	bf04      	itt	eq
 8012c10:	1809      	addeq	r1, r1, r0
 8012c12:	6021      	streq	r1, [r4, #0]
 8012c14:	6054      	str	r4, [r2, #4]
 8012c16:	e7ca      	b.n	8012bae <_free_r+0x22>
 8012c18:	bd38      	pop	{r3, r4, r5, pc}
 8012c1a:	bf00      	nop
 8012c1c:	2400361c 	.word	0x2400361c

08012c20 <malloc>:
 8012c20:	4b02      	ldr	r3, [pc, #8]	@ (8012c2c <malloc+0xc>)
 8012c22:	4601      	mov	r1, r0
 8012c24:	6818      	ldr	r0, [r3, #0]
 8012c26:	f000 b825 	b.w	8012c74 <_malloc_r>
 8012c2a:	bf00      	nop
 8012c2c:	24000110 	.word	0x24000110

08012c30 <sbrk_aligned>:
 8012c30:	b570      	push	{r4, r5, r6, lr}
 8012c32:	4e0f      	ldr	r6, [pc, #60]	@ (8012c70 <sbrk_aligned+0x40>)
 8012c34:	460c      	mov	r4, r1
 8012c36:	6831      	ldr	r1, [r6, #0]
 8012c38:	4605      	mov	r5, r0
 8012c3a:	b911      	cbnz	r1, 8012c42 <sbrk_aligned+0x12>
 8012c3c:	f000 fe46 	bl	80138cc <_sbrk_r>
 8012c40:	6030      	str	r0, [r6, #0]
 8012c42:	4621      	mov	r1, r4
 8012c44:	4628      	mov	r0, r5
 8012c46:	f000 fe41 	bl	80138cc <_sbrk_r>
 8012c4a:	1c43      	adds	r3, r0, #1
 8012c4c:	d103      	bne.n	8012c56 <sbrk_aligned+0x26>
 8012c4e:	f04f 34ff 	mov.w	r4, #4294967295
 8012c52:	4620      	mov	r0, r4
 8012c54:	bd70      	pop	{r4, r5, r6, pc}
 8012c56:	1cc4      	adds	r4, r0, #3
 8012c58:	f024 0403 	bic.w	r4, r4, #3
 8012c5c:	42a0      	cmp	r0, r4
 8012c5e:	d0f8      	beq.n	8012c52 <sbrk_aligned+0x22>
 8012c60:	1a21      	subs	r1, r4, r0
 8012c62:	4628      	mov	r0, r5
 8012c64:	f000 fe32 	bl	80138cc <_sbrk_r>
 8012c68:	3001      	adds	r0, #1
 8012c6a:	d1f2      	bne.n	8012c52 <sbrk_aligned+0x22>
 8012c6c:	e7ef      	b.n	8012c4e <sbrk_aligned+0x1e>
 8012c6e:	bf00      	nop
 8012c70:	24003618 	.word	0x24003618

08012c74 <_malloc_r>:
 8012c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c78:	1ccd      	adds	r5, r1, #3
 8012c7a:	f025 0503 	bic.w	r5, r5, #3
 8012c7e:	3508      	adds	r5, #8
 8012c80:	2d0c      	cmp	r5, #12
 8012c82:	bf38      	it	cc
 8012c84:	250c      	movcc	r5, #12
 8012c86:	2d00      	cmp	r5, #0
 8012c88:	4606      	mov	r6, r0
 8012c8a:	db01      	blt.n	8012c90 <_malloc_r+0x1c>
 8012c8c:	42a9      	cmp	r1, r5
 8012c8e:	d904      	bls.n	8012c9a <_malloc_r+0x26>
 8012c90:	230c      	movs	r3, #12
 8012c92:	6033      	str	r3, [r6, #0]
 8012c94:	2000      	movs	r0, #0
 8012c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d70 <_malloc_r+0xfc>
 8012c9e:	f000 f869 	bl	8012d74 <__malloc_lock>
 8012ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8012ca6:	461c      	mov	r4, r3
 8012ca8:	bb44      	cbnz	r4, 8012cfc <_malloc_r+0x88>
 8012caa:	4629      	mov	r1, r5
 8012cac:	4630      	mov	r0, r6
 8012cae:	f7ff ffbf 	bl	8012c30 <sbrk_aligned>
 8012cb2:	1c43      	adds	r3, r0, #1
 8012cb4:	4604      	mov	r4, r0
 8012cb6:	d158      	bne.n	8012d6a <_malloc_r+0xf6>
 8012cb8:	f8d8 4000 	ldr.w	r4, [r8]
 8012cbc:	4627      	mov	r7, r4
 8012cbe:	2f00      	cmp	r7, #0
 8012cc0:	d143      	bne.n	8012d4a <_malloc_r+0xd6>
 8012cc2:	2c00      	cmp	r4, #0
 8012cc4:	d04b      	beq.n	8012d5e <_malloc_r+0xea>
 8012cc6:	6823      	ldr	r3, [r4, #0]
 8012cc8:	4639      	mov	r1, r7
 8012cca:	4630      	mov	r0, r6
 8012ccc:	eb04 0903 	add.w	r9, r4, r3
 8012cd0:	f000 fdfc 	bl	80138cc <_sbrk_r>
 8012cd4:	4581      	cmp	r9, r0
 8012cd6:	d142      	bne.n	8012d5e <_malloc_r+0xea>
 8012cd8:	6821      	ldr	r1, [r4, #0]
 8012cda:	1a6d      	subs	r5, r5, r1
 8012cdc:	4629      	mov	r1, r5
 8012cde:	4630      	mov	r0, r6
 8012ce0:	f7ff ffa6 	bl	8012c30 <sbrk_aligned>
 8012ce4:	3001      	adds	r0, #1
 8012ce6:	d03a      	beq.n	8012d5e <_malloc_r+0xea>
 8012ce8:	6823      	ldr	r3, [r4, #0]
 8012cea:	442b      	add	r3, r5
 8012cec:	6023      	str	r3, [r4, #0]
 8012cee:	f8d8 3000 	ldr.w	r3, [r8]
 8012cf2:	685a      	ldr	r2, [r3, #4]
 8012cf4:	bb62      	cbnz	r2, 8012d50 <_malloc_r+0xdc>
 8012cf6:	f8c8 7000 	str.w	r7, [r8]
 8012cfa:	e00f      	b.n	8012d1c <_malloc_r+0xa8>
 8012cfc:	6822      	ldr	r2, [r4, #0]
 8012cfe:	1b52      	subs	r2, r2, r5
 8012d00:	d420      	bmi.n	8012d44 <_malloc_r+0xd0>
 8012d02:	2a0b      	cmp	r2, #11
 8012d04:	d917      	bls.n	8012d36 <_malloc_r+0xc2>
 8012d06:	1961      	adds	r1, r4, r5
 8012d08:	42a3      	cmp	r3, r4
 8012d0a:	6025      	str	r5, [r4, #0]
 8012d0c:	bf18      	it	ne
 8012d0e:	6059      	strne	r1, [r3, #4]
 8012d10:	6863      	ldr	r3, [r4, #4]
 8012d12:	bf08      	it	eq
 8012d14:	f8c8 1000 	streq.w	r1, [r8]
 8012d18:	5162      	str	r2, [r4, r5]
 8012d1a:	604b      	str	r3, [r1, #4]
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	f000 f82f 	bl	8012d80 <__malloc_unlock>
 8012d22:	f104 000b 	add.w	r0, r4, #11
 8012d26:	1d23      	adds	r3, r4, #4
 8012d28:	f020 0007 	bic.w	r0, r0, #7
 8012d2c:	1ac2      	subs	r2, r0, r3
 8012d2e:	bf1c      	itt	ne
 8012d30:	1a1b      	subne	r3, r3, r0
 8012d32:	50a3      	strne	r3, [r4, r2]
 8012d34:	e7af      	b.n	8012c96 <_malloc_r+0x22>
 8012d36:	6862      	ldr	r2, [r4, #4]
 8012d38:	42a3      	cmp	r3, r4
 8012d3a:	bf0c      	ite	eq
 8012d3c:	f8c8 2000 	streq.w	r2, [r8]
 8012d40:	605a      	strne	r2, [r3, #4]
 8012d42:	e7eb      	b.n	8012d1c <_malloc_r+0xa8>
 8012d44:	4623      	mov	r3, r4
 8012d46:	6864      	ldr	r4, [r4, #4]
 8012d48:	e7ae      	b.n	8012ca8 <_malloc_r+0x34>
 8012d4a:	463c      	mov	r4, r7
 8012d4c:	687f      	ldr	r7, [r7, #4]
 8012d4e:	e7b6      	b.n	8012cbe <_malloc_r+0x4a>
 8012d50:	461a      	mov	r2, r3
 8012d52:	685b      	ldr	r3, [r3, #4]
 8012d54:	42a3      	cmp	r3, r4
 8012d56:	d1fb      	bne.n	8012d50 <_malloc_r+0xdc>
 8012d58:	2300      	movs	r3, #0
 8012d5a:	6053      	str	r3, [r2, #4]
 8012d5c:	e7de      	b.n	8012d1c <_malloc_r+0xa8>
 8012d5e:	230c      	movs	r3, #12
 8012d60:	6033      	str	r3, [r6, #0]
 8012d62:	4630      	mov	r0, r6
 8012d64:	f000 f80c 	bl	8012d80 <__malloc_unlock>
 8012d68:	e794      	b.n	8012c94 <_malloc_r+0x20>
 8012d6a:	6005      	str	r5, [r0, #0]
 8012d6c:	e7d6      	b.n	8012d1c <_malloc_r+0xa8>
 8012d6e:	bf00      	nop
 8012d70:	2400361c 	.word	0x2400361c

08012d74 <__malloc_lock>:
 8012d74:	4801      	ldr	r0, [pc, #4]	@ (8012d7c <__malloc_lock+0x8>)
 8012d76:	f7ff b91a 	b.w	8011fae <__retarget_lock_acquire_recursive>
 8012d7a:	bf00      	nop
 8012d7c:	24003614 	.word	0x24003614

08012d80 <__malloc_unlock>:
 8012d80:	4801      	ldr	r0, [pc, #4]	@ (8012d88 <__malloc_unlock+0x8>)
 8012d82:	f7ff b915 	b.w	8011fb0 <__retarget_lock_release_recursive>
 8012d86:	bf00      	nop
 8012d88:	24003614 	.word	0x24003614

08012d8c <_Balloc>:
 8012d8c:	b570      	push	{r4, r5, r6, lr}
 8012d8e:	69c6      	ldr	r6, [r0, #28]
 8012d90:	4604      	mov	r4, r0
 8012d92:	460d      	mov	r5, r1
 8012d94:	b976      	cbnz	r6, 8012db4 <_Balloc+0x28>
 8012d96:	2010      	movs	r0, #16
 8012d98:	f7ff ff42 	bl	8012c20 <malloc>
 8012d9c:	4602      	mov	r2, r0
 8012d9e:	61e0      	str	r0, [r4, #28]
 8012da0:	b920      	cbnz	r0, 8012dac <_Balloc+0x20>
 8012da2:	4b18      	ldr	r3, [pc, #96]	@ (8012e04 <_Balloc+0x78>)
 8012da4:	4818      	ldr	r0, [pc, #96]	@ (8012e08 <_Balloc+0x7c>)
 8012da6:	216b      	movs	r1, #107	@ 0x6b
 8012da8:	f000 fda0 	bl	80138ec <__assert_func>
 8012dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012db0:	6006      	str	r6, [r0, #0]
 8012db2:	60c6      	str	r6, [r0, #12]
 8012db4:	69e6      	ldr	r6, [r4, #28]
 8012db6:	68f3      	ldr	r3, [r6, #12]
 8012db8:	b183      	cbz	r3, 8012ddc <_Balloc+0x50>
 8012dba:	69e3      	ldr	r3, [r4, #28]
 8012dbc:	68db      	ldr	r3, [r3, #12]
 8012dbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012dc2:	b9b8      	cbnz	r0, 8012df4 <_Balloc+0x68>
 8012dc4:	2101      	movs	r1, #1
 8012dc6:	fa01 f605 	lsl.w	r6, r1, r5
 8012dca:	1d72      	adds	r2, r6, #5
 8012dcc:	0092      	lsls	r2, r2, #2
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f000 fdaa 	bl	8013928 <_calloc_r>
 8012dd4:	b160      	cbz	r0, 8012df0 <_Balloc+0x64>
 8012dd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012dda:	e00e      	b.n	8012dfa <_Balloc+0x6e>
 8012ddc:	2221      	movs	r2, #33	@ 0x21
 8012dde:	2104      	movs	r1, #4
 8012de0:	4620      	mov	r0, r4
 8012de2:	f000 fda1 	bl	8013928 <_calloc_r>
 8012de6:	69e3      	ldr	r3, [r4, #28]
 8012de8:	60f0      	str	r0, [r6, #12]
 8012dea:	68db      	ldr	r3, [r3, #12]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d1e4      	bne.n	8012dba <_Balloc+0x2e>
 8012df0:	2000      	movs	r0, #0
 8012df2:	bd70      	pop	{r4, r5, r6, pc}
 8012df4:	6802      	ldr	r2, [r0, #0]
 8012df6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012e00:	e7f7      	b.n	8012df2 <_Balloc+0x66>
 8012e02:	bf00      	nop
 8012e04:	0801405d 	.word	0x0801405d
 8012e08:	080140dd 	.word	0x080140dd

08012e0c <_Bfree>:
 8012e0c:	b570      	push	{r4, r5, r6, lr}
 8012e0e:	69c6      	ldr	r6, [r0, #28]
 8012e10:	4605      	mov	r5, r0
 8012e12:	460c      	mov	r4, r1
 8012e14:	b976      	cbnz	r6, 8012e34 <_Bfree+0x28>
 8012e16:	2010      	movs	r0, #16
 8012e18:	f7ff ff02 	bl	8012c20 <malloc>
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	61e8      	str	r0, [r5, #28]
 8012e20:	b920      	cbnz	r0, 8012e2c <_Bfree+0x20>
 8012e22:	4b09      	ldr	r3, [pc, #36]	@ (8012e48 <_Bfree+0x3c>)
 8012e24:	4809      	ldr	r0, [pc, #36]	@ (8012e4c <_Bfree+0x40>)
 8012e26:	218f      	movs	r1, #143	@ 0x8f
 8012e28:	f000 fd60 	bl	80138ec <__assert_func>
 8012e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e30:	6006      	str	r6, [r0, #0]
 8012e32:	60c6      	str	r6, [r0, #12]
 8012e34:	b13c      	cbz	r4, 8012e46 <_Bfree+0x3a>
 8012e36:	69eb      	ldr	r3, [r5, #28]
 8012e38:	6862      	ldr	r2, [r4, #4]
 8012e3a:	68db      	ldr	r3, [r3, #12]
 8012e3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e40:	6021      	str	r1, [r4, #0]
 8012e42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012e46:	bd70      	pop	{r4, r5, r6, pc}
 8012e48:	0801405d 	.word	0x0801405d
 8012e4c:	080140dd 	.word	0x080140dd

08012e50 <__multadd>:
 8012e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e54:	690d      	ldr	r5, [r1, #16]
 8012e56:	4607      	mov	r7, r0
 8012e58:	460c      	mov	r4, r1
 8012e5a:	461e      	mov	r6, r3
 8012e5c:	f101 0c14 	add.w	ip, r1, #20
 8012e60:	2000      	movs	r0, #0
 8012e62:	f8dc 3000 	ldr.w	r3, [ip]
 8012e66:	b299      	uxth	r1, r3
 8012e68:	fb02 6101 	mla	r1, r2, r1, r6
 8012e6c:	0c1e      	lsrs	r6, r3, #16
 8012e6e:	0c0b      	lsrs	r3, r1, #16
 8012e70:	fb02 3306 	mla	r3, r2, r6, r3
 8012e74:	b289      	uxth	r1, r1
 8012e76:	3001      	adds	r0, #1
 8012e78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012e7c:	4285      	cmp	r5, r0
 8012e7e:	f84c 1b04 	str.w	r1, [ip], #4
 8012e82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e86:	dcec      	bgt.n	8012e62 <__multadd+0x12>
 8012e88:	b30e      	cbz	r6, 8012ece <__multadd+0x7e>
 8012e8a:	68a3      	ldr	r3, [r4, #8]
 8012e8c:	42ab      	cmp	r3, r5
 8012e8e:	dc19      	bgt.n	8012ec4 <__multadd+0x74>
 8012e90:	6861      	ldr	r1, [r4, #4]
 8012e92:	4638      	mov	r0, r7
 8012e94:	3101      	adds	r1, #1
 8012e96:	f7ff ff79 	bl	8012d8c <_Balloc>
 8012e9a:	4680      	mov	r8, r0
 8012e9c:	b928      	cbnz	r0, 8012eaa <__multadd+0x5a>
 8012e9e:	4602      	mov	r2, r0
 8012ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8012ed4 <__multadd+0x84>)
 8012ea2:	480d      	ldr	r0, [pc, #52]	@ (8012ed8 <__multadd+0x88>)
 8012ea4:	21ba      	movs	r1, #186	@ 0xba
 8012ea6:	f000 fd21 	bl	80138ec <__assert_func>
 8012eaa:	6922      	ldr	r2, [r4, #16]
 8012eac:	3202      	adds	r2, #2
 8012eae:	f104 010c 	add.w	r1, r4, #12
 8012eb2:	0092      	lsls	r2, r2, #2
 8012eb4:	300c      	adds	r0, #12
 8012eb6:	f7ff f87c 	bl	8011fb2 <memcpy>
 8012eba:	4621      	mov	r1, r4
 8012ebc:	4638      	mov	r0, r7
 8012ebe:	f7ff ffa5 	bl	8012e0c <_Bfree>
 8012ec2:	4644      	mov	r4, r8
 8012ec4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012ec8:	3501      	adds	r5, #1
 8012eca:	615e      	str	r6, [r3, #20]
 8012ecc:	6125      	str	r5, [r4, #16]
 8012ece:	4620      	mov	r0, r4
 8012ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ed4:	080140cc 	.word	0x080140cc
 8012ed8:	080140dd 	.word	0x080140dd

08012edc <__hi0bits>:
 8012edc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	bf36      	itet	cc
 8012ee4:	0403      	lslcc	r3, r0, #16
 8012ee6:	2000      	movcs	r0, #0
 8012ee8:	2010      	movcc	r0, #16
 8012eea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012eee:	bf3c      	itt	cc
 8012ef0:	021b      	lslcc	r3, r3, #8
 8012ef2:	3008      	addcc	r0, #8
 8012ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012ef8:	bf3c      	itt	cc
 8012efa:	011b      	lslcc	r3, r3, #4
 8012efc:	3004      	addcc	r0, #4
 8012efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012f02:	bf3c      	itt	cc
 8012f04:	009b      	lslcc	r3, r3, #2
 8012f06:	3002      	addcc	r0, #2
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	db05      	blt.n	8012f18 <__hi0bits+0x3c>
 8012f0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012f10:	f100 0001 	add.w	r0, r0, #1
 8012f14:	bf08      	it	eq
 8012f16:	2020      	moveq	r0, #32
 8012f18:	4770      	bx	lr

08012f1a <__lo0bits>:
 8012f1a:	6803      	ldr	r3, [r0, #0]
 8012f1c:	4602      	mov	r2, r0
 8012f1e:	f013 0007 	ands.w	r0, r3, #7
 8012f22:	d00b      	beq.n	8012f3c <__lo0bits+0x22>
 8012f24:	07d9      	lsls	r1, r3, #31
 8012f26:	d421      	bmi.n	8012f6c <__lo0bits+0x52>
 8012f28:	0798      	lsls	r0, r3, #30
 8012f2a:	bf49      	itett	mi
 8012f2c:	085b      	lsrmi	r3, r3, #1
 8012f2e:	089b      	lsrpl	r3, r3, #2
 8012f30:	2001      	movmi	r0, #1
 8012f32:	6013      	strmi	r3, [r2, #0]
 8012f34:	bf5c      	itt	pl
 8012f36:	6013      	strpl	r3, [r2, #0]
 8012f38:	2002      	movpl	r0, #2
 8012f3a:	4770      	bx	lr
 8012f3c:	b299      	uxth	r1, r3
 8012f3e:	b909      	cbnz	r1, 8012f44 <__lo0bits+0x2a>
 8012f40:	0c1b      	lsrs	r3, r3, #16
 8012f42:	2010      	movs	r0, #16
 8012f44:	b2d9      	uxtb	r1, r3
 8012f46:	b909      	cbnz	r1, 8012f4c <__lo0bits+0x32>
 8012f48:	3008      	adds	r0, #8
 8012f4a:	0a1b      	lsrs	r3, r3, #8
 8012f4c:	0719      	lsls	r1, r3, #28
 8012f4e:	bf04      	itt	eq
 8012f50:	091b      	lsreq	r3, r3, #4
 8012f52:	3004      	addeq	r0, #4
 8012f54:	0799      	lsls	r1, r3, #30
 8012f56:	bf04      	itt	eq
 8012f58:	089b      	lsreq	r3, r3, #2
 8012f5a:	3002      	addeq	r0, #2
 8012f5c:	07d9      	lsls	r1, r3, #31
 8012f5e:	d403      	bmi.n	8012f68 <__lo0bits+0x4e>
 8012f60:	085b      	lsrs	r3, r3, #1
 8012f62:	f100 0001 	add.w	r0, r0, #1
 8012f66:	d003      	beq.n	8012f70 <__lo0bits+0x56>
 8012f68:	6013      	str	r3, [r2, #0]
 8012f6a:	4770      	bx	lr
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	4770      	bx	lr
 8012f70:	2020      	movs	r0, #32
 8012f72:	4770      	bx	lr

08012f74 <__i2b>:
 8012f74:	b510      	push	{r4, lr}
 8012f76:	460c      	mov	r4, r1
 8012f78:	2101      	movs	r1, #1
 8012f7a:	f7ff ff07 	bl	8012d8c <_Balloc>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	b928      	cbnz	r0, 8012f8e <__i2b+0x1a>
 8012f82:	4b05      	ldr	r3, [pc, #20]	@ (8012f98 <__i2b+0x24>)
 8012f84:	4805      	ldr	r0, [pc, #20]	@ (8012f9c <__i2b+0x28>)
 8012f86:	f240 1145 	movw	r1, #325	@ 0x145
 8012f8a:	f000 fcaf 	bl	80138ec <__assert_func>
 8012f8e:	2301      	movs	r3, #1
 8012f90:	6144      	str	r4, [r0, #20]
 8012f92:	6103      	str	r3, [r0, #16]
 8012f94:	bd10      	pop	{r4, pc}
 8012f96:	bf00      	nop
 8012f98:	080140cc 	.word	0x080140cc
 8012f9c:	080140dd 	.word	0x080140dd

08012fa0 <__multiply>:
 8012fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa4:	4614      	mov	r4, r2
 8012fa6:	690a      	ldr	r2, [r1, #16]
 8012fa8:	6923      	ldr	r3, [r4, #16]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	bfa8      	it	ge
 8012fae:	4623      	movge	r3, r4
 8012fb0:	460f      	mov	r7, r1
 8012fb2:	bfa4      	itt	ge
 8012fb4:	460c      	movge	r4, r1
 8012fb6:	461f      	movge	r7, r3
 8012fb8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012fbc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012fc0:	68a3      	ldr	r3, [r4, #8]
 8012fc2:	6861      	ldr	r1, [r4, #4]
 8012fc4:	eb0a 0609 	add.w	r6, sl, r9
 8012fc8:	42b3      	cmp	r3, r6
 8012fca:	b085      	sub	sp, #20
 8012fcc:	bfb8      	it	lt
 8012fce:	3101      	addlt	r1, #1
 8012fd0:	f7ff fedc 	bl	8012d8c <_Balloc>
 8012fd4:	b930      	cbnz	r0, 8012fe4 <__multiply+0x44>
 8012fd6:	4602      	mov	r2, r0
 8012fd8:	4b44      	ldr	r3, [pc, #272]	@ (80130ec <__multiply+0x14c>)
 8012fda:	4845      	ldr	r0, [pc, #276]	@ (80130f0 <__multiply+0x150>)
 8012fdc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012fe0:	f000 fc84 	bl	80138ec <__assert_func>
 8012fe4:	f100 0514 	add.w	r5, r0, #20
 8012fe8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012fec:	462b      	mov	r3, r5
 8012fee:	2200      	movs	r2, #0
 8012ff0:	4543      	cmp	r3, r8
 8012ff2:	d321      	bcc.n	8013038 <__multiply+0x98>
 8012ff4:	f107 0114 	add.w	r1, r7, #20
 8012ff8:	f104 0214 	add.w	r2, r4, #20
 8012ffc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013000:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013004:	9302      	str	r3, [sp, #8]
 8013006:	1b13      	subs	r3, r2, r4
 8013008:	3b15      	subs	r3, #21
 801300a:	f023 0303 	bic.w	r3, r3, #3
 801300e:	3304      	adds	r3, #4
 8013010:	f104 0715 	add.w	r7, r4, #21
 8013014:	42ba      	cmp	r2, r7
 8013016:	bf38      	it	cc
 8013018:	2304      	movcc	r3, #4
 801301a:	9301      	str	r3, [sp, #4]
 801301c:	9b02      	ldr	r3, [sp, #8]
 801301e:	9103      	str	r1, [sp, #12]
 8013020:	428b      	cmp	r3, r1
 8013022:	d80c      	bhi.n	801303e <__multiply+0x9e>
 8013024:	2e00      	cmp	r6, #0
 8013026:	dd03      	ble.n	8013030 <__multiply+0x90>
 8013028:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801302c:	2b00      	cmp	r3, #0
 801302e:	d05b      	beq.n	80130e8 <__multiply+0x148>
 8013030:	6106      	str	r6, [r0, #16]
 8013032:	b005      	add	sp, #20
 8013034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013038:	f843 2b04 	str.w	r2, [r3], #4
 801303c:	e7d8      	b.n	8012ff0 <__multiply+0x50>
 801303e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013042:	f1ba 0f00 	cmp.w	sl, #0
 8013046:	d024      	beq.n	8013092 <__multiply+0xf2>
 8013048:	f104 0e14 	add.w	lr, r4, #20
 801304c:	46a9      	mov	r9, r5
 801304e:	f04f 0c00 	mov.w	ip, #0
 8013052:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013056:	f8d9 3000 	ldr.w	r3, [r9]
 801305a:	fa1f fb87 	uxth.w	fp, r7
 801305e:	b29b      	uxth	r3, r3
 8013060:	fb0a 330b 	mla	r3, sl, fp, r3
 8013064:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013068:	f8d9 7000 	ldr.w	r7, [r9]
 801306c:	4463      	add	r3, ip
 801306e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013072:	fb0a c70b 	mla	r7, sl, fp, ip
 8013076:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801307a:	b29b      	uxth	r3, r3
 801307c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013080:	4572      	cmp	r2, lr
 8013082:	f849 3b04 	str.w	r3, [r9], #4
 8013086:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801308a:	d8e2      	bhi.n	8013052 <__multiply+0xb2>
 801308c:	9b01      	ldr	r3, [sp, #4]
 801308e:	f845 c003 	str.w	ip, [r5, r3]
 8013092:	9b03      	ldr	r3, [sp, #12]
 8013094:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013098:	3104      	adds	r1, #4
 801309a:	f1b9 0f00 	cmp.w	r9, #0
 801309e:	d021      	beq.n	80130e4 <__multiply+0x144>
 80130a0:	682b      	ldr	r3, [r5, #0]
 80130a2:	f104 0c14 	add.w	ip, r4, #20
 80130a6:	46ae      	mov	lr, r5
 80130a8:	f04f 0a00 	mov.w	sl, #0
 80130ac:	f8bc b000 	ldrh.w	fp, [ip]
 80130b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80130b4:	fb09 770b 	mla	r7, r9, fp, r7
 80130b8:	4457      	add	r7, sl
 80130ba:	b29b      	uxth	r3, r3
 80130bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80130c0:	f84e 3b04 	str.w	r3, [lr], #4
 80130c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80130c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80130cc:	f8be 3000 	ldrh.w	r3, [lr]
 80130d0:	fb09 330a 	mla	r3, r9, sl, r3
 80130d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80130d8:	4562      	cmp	r2, ip
 80130da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80130de:	d8e5      	bhi.n	80130ac <__multiply+0x10c>
 80130e0:	9f01      	ldr	r7, [sp, #4]
 80130e2:	51eb      	str	r3, [r5, r7]
 80130e4:	3504      	adds	r5, #4
 80130e6:	e799      	b.n	801301c <__multiply+0x7c>
 80130e8:	3e01      	subs	r6, #1
 80130ea:	e79b      	b.n	8013024 <__multiply+0x84>
 80130ec:	080140cc 	.word	0x080140cc
 80130f0:	080140dd 	.word	0x080140dd

080130f4 <__pow5mult>:
 80130f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130f8:	4615      	mov	r5, r2
 80130fa:	f012 0203 	ands.w	r2, r2, #3
 80130fe:	4607      	mov	r7, r0
 8013100:	460e      	mov	r6, r1
 8013102:	d007      	beq.n	8013114 <__pow5mult+0x20>
 8013104:	4c25      	ldr	r4, [pc, #148]	@ (801319c <__pow5mult+0xa8>)
 8013106:	3a01      	subs	r2, #1
 8013108:	2300      	movs	r3, #0
 801310a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801310e:	f7ff fe9f 	bl	8012e50 <__multadd>
 8013112:	4606      	mov	r6, r0
 8013114:	10ad      	asrs	r5, r5, #2
 8013116:	d03d      	beq.n	8013194 <__pow5mult+0xa0>
 8013118:	69fc      	ldr	r4, [r7, #28]
 801311a:	b97c      	cbnz	r4, 801313c <__pow5mult+0x48>
 801311c:	2010      	movs	r0, #16
 801311e:	f7ff fd7f 	bl	8012c20 <malloc>
 8013122:	4602      	mov	r2, r0
 8013124:	61f8      	str	r0, [r7, #28]
 8013126:	b928      	cbnz	r0, 8013134 <__pow5mult+0x40>
 8013128:	4b1d      	ldr	r3, [pc, #116]	@ (80131a0 <__pow5mult+0xac>)
 801312a:	481e      	ldr	r0, [pc, #120]	@ (80131a4 <__pow5mult+0xb0>)
 801312c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013130:	f000 fbdc 	bl	80138ec <__assert_func>
 8013134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013138:	6004      	str	r4, [r0, #0]
 801313a:	60c4      	str	r4, [r0, #12]
 801313c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013144:	b94c      	cbnz	r4, 801315a <__pow5mult+0x66>
 8013146:	f240 2171 	movw	r1, #625	@ 0x271
 801314a:	4638      	mov	r0, r7
 801314c:	f7ff ff12 	bl	8012f74 <__i2b>
 8013150:	2300      	movs	r3, #0
 8013152:	f8c8 0008 	str.w	r0, [r8, #8]
 8013156:	4604      	mov	r4, r0
 8013158:	6003      	str	r3, [r0, #0]
 801315a:	f04f 0900 	mov.w	r9, #0
 801315e:	07eb      	lsls	r3, r5, #31
 8013160:	d50a      	bpl.n	8013178 <__pow5mult+0x84>
 8013162:	4631      	mov	r1, r6
 8013164:	4622      	mov	r2, r4
 8013166:	4638      	mov	r0, r7
 8013168:	f7ff ff1a 	bl	8012fa0 <__multiply>
 801316c:	4631      	mov	r1, r6
 801316e:	4680      	mov	r8, r0
 8013170:	4638      	mov	r0, r7
 8013172:	f7ff fe4b 	bl	8012e0c <_Bfree>
 8013176:	4646      	mov	r6, r8
 8013178:	106d      	asrs	r5, r5, #1
 801317a:	d00b      	beq.n	8013194 <__pow5mult+0xa0>
 801317c:	6820      	ldr	r0, [r4, #0]
 801317e:	b938      	cbnz	r0, 8013190 <__pow5mult+0x9c>
 8013180:	4622      	mov	r2, r4
 8013182:	4621      	mov	r1, r4
 8013184:	4638      	mov	r0, r7
 8013186:	f7ff ff0b 	bl	8012fa0 <__multiply>
 801318a:	6020      	str	r0, [r4, #0]
 801318c:	f8c0 9000 	str.w	r9, [r0]
 8013190:	4604      	mov	r4, r0
 8013192:	e7e4      	b.n	801315e <__pow5mult+0x6a>
 8013194:	4630      	mov	r0, r6
 8013196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801319a:	bf00      	nop
 801319c:	08014138 	.word	0x08014138
 80131a0:	0801405d 	.word	0x0801405d
 80131a4:	080140dd 	.word	0x080140dd

080131a8 <__lshift>:
 80131a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131ac:	460c      	mov	r4, r1
 80131ae:	6849      	ldr	r1, [r1, #4]
 80131b0:	6923      	ldr	r3, [r4, #16]
 80131b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80131b6:	68a3      	ldr	r3, [r4, #8]
 80131b8:	4607      	mov	r7, r0
 80131ba:	4691      	mov	r9, r2
 80131bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80131c0:	f108 0601 	add.w	r6, r8, #1
 80131c4:	42b3      	cmp	r3, r6
 80131c6:	db0b      	blt.n	80131e0 <__lshift+0x38>
 80131c8:	4638      	mov	r0, r7
 80131ca:	f7ff fddf 	bl	8012d8c <_Balloc>
 80131ce:	4605      	mov	r5, r0
 80131d0:	b948      	cbnz	r0, 80131e6 <__lshift+0x3e>
 80131d2:	4602      	mov	r2, r0
 80131d4:	4b28      	ldr	r3, [pc, #160]	@ (8013278 <__lshift+0xd0>)
 80131d6:	4829      	ldr	r0, [pc, #164]	@ (801327c <__lshift+0xd4>)
 80131d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80131dc:	f000 fb86 	bl	80138ec <__assert_func>
 80131e0:	3101      	adds	r1, #1
 80131e2:	005b      	lsls	r3, r3, #1
 80131e4:	e7ee      	b.n	80131c4 <__lshift+0x1c>
 80131e6:	2300      	movs	r3, #0
 80131e8:	f100 0114 	add.w	r1, r0, #20
 80131ec:	f100 0210 	add.w	r2, r0, #16
 80131f0:	4618      	mov	r0, r3
 80131f2:	4553      	cmp	r3, sl
 80131f4:	db33      	blt.n	801325e <__lshift+0xb6>
 80131f6:	6920      	ldr	r0, [r4, #16]
 80131f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131fc:	f104 0314 	add.w	r3, r4, #20
 8013200:	f019 091f 	ands.w	r9, r9, #31
 8013204:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013208:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801320c:	d02b      	beq.n	8013266 <__lshift+0xbe>
 801320e:	f1c9 0e20 	rsb	lr, r9, #32
 8013212:	468a      	mov	sl, r1
 8013214:	2200      	movs	r2, #0
 8013216:	6818      	ldr	r0, [r3, #0]
 8013218:	fa00 f009 	lsl.w	r0, r0, r9
 801321c:	4310      	orrs	r0, r2
 801321e:	f84a 0b04 	str.w	r0, [sl], #4
 8013222:	f853 2b04 	ldr.w	r2, [r3], #4
 8013226:	459c      	cmp	ip, r3
 8013228:	fa22 f20e 	lsr.w	r2, r2, lr
 801322c:	d8f3      	bhi.n	8013216 <__lshift+0x6e>
 801322e:	ebac 0304 	sub.w	r3, ip, r4
 8013232:	3b15      	subs	r3, #21
 8013234:	f023 0303 	bic.w	r3, r3, #3
 8013238:	3304      	adds	r3, #4
 801323a:	f104 0015 	add.w	r0, r4, #21
 801323e:	4584      	cmp	ip, r0
 8013240:	bf38      	it	cc
 8013242:	2304      	movcc	r3, #4
 8013244:	50ca      	str	r2, [r1, r3]
 8013246:	b10a      	cbz	r2, 801324c <__lshift+0xa4>
 8013248:	f108 0602 	add.w	r6, r8, #2
 801324c:	3e01      	subs	r6, #1
 801324e:	4638      	mov	r0, r7
 8013250:	612e      	str	r6, [r5, #16]
 8013252:	4621      	mov	r1, r4
 8013254:	f7ff fdda 	bl	8012e0c <_Bfree>
 8013258:	4628      	mov	r0, r5
 801325a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801325e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013262:	3301      	adds	r3, #1
 8013264:	e7c5      	b.n	80131f2 <__lshift+0x4a>
 8013266:	3904      	subs	r1, #4
 8013268:	f853 2b04 	ldr.w	r2, [r3], #4
 801326c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013270:	459c      	cmp	ip, r3
 8013272:	d8f9      	bhi.n	8013268 <__lshift+0xc0>
 8013274:	e7ea      	b.n	801324c <__lshift+0xa4>
 8013276:	bf00      	nop
 8013278:	080140cc 	.word	0x080140cc
 801327c:	080140dd 	.word	0x080140dd

08013280 <__mcmp>:
 8013280:	690a      	ldr	r2, [r1, #16]
 8013282:	4603      	mov	r3, r0
 8013284:	6900      	ldr	r0, [r0, #16]
 8013286:	1a80      	subs	r0, r0, r2
 8013288:	b530      	push	{r4, r5, lr}
 801328a:	d10e      	bne.n	80132aa <__mcmp+0x2a>
 801328c:	3314      	adds	r3, #20
 801328e:	3114      	adds	r1, #20
 8013290:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013294:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013298:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801329c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80132a0:	4295      	cmp	r5, r2
 80132a2:	d003      	beq.n	80132ac <__mcmp+0x2c>
 80132a4:	d205      	bcs.n	80132b2 <__mcmp+0x32>
 80132a6:	f04f 30ff 	mov.w	r0, #4294967295
 80132aa:	bd30      	pop	{r4, r5, pc}
 80132ac:	42a3      	cmp	r3, r4
 80132ae:	d3f3      	bcc.n	8013298 <__mcmp+0x18>
 80132b0:	e7fb      	b.n	80132aa <__mcmp+0x2a>
 80132b2:	2001      	movs	r0, #1
 80132b4:	e7f9      	b.n	80132aa <__mcmp+0x2a>
	...

080132b8 <__mdiff>:
 80132b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132bc:	4689      	mov	r9, r1
 80132be:	4606      	mov	r6, r0
 80132c0:	4611      	mov	r1, r2
 80132c2:	4648      	mov	r0, r9
 80132c4:	4614      	mov	r4, r2
 80132c6:	f7ff ffdb 	bl	8013280 <__mcmp>
 80132ca:	1e05      	subs	r5, r0, #0
 80132cc:	d112      	bne.n	80132f4 <__mdiff+0x3c>
 80132ce:	4629      	mov	r1, r5
 80132d0:	4630      	mov	r0, r6
 80132d2:	f7ff fd5b 	bl	8012d8c <_Balloc>
 80132d6:	4602      	mov	r2, r0
 80132d8:	b928      	cbnz	r0, 80132e6 <__mdiff+0x2e>
 80132da:	4b3f      	ldr	r3, [pc, #252]	@ (80133d8 <__mdiff+0x120>)
 80132dc:	f240 2137 	movw	r1, #567	@ 0x237
 80132e0:	483e      	ldr	r0, [pc, #248]	@ (80133dc <__mdiff+0x124>)
 80132e2:	f000 fb03 	bl	80138ec <__assert_func>
 80132e6:	2301      	movs	r3, #1
 80132e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132ec:	4610      	mov	r0, r2
 80132ee:	b003      	add	sp, #12
 80132f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f4:	bfbc      	itt	lt
 80132f6:	464b      	movlt	r3, r9
 80132f8:	46a1      	movlt	r9, r4
 80132fa:	4630      	mov	r0, r6
 80132fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013300:	bfba      	itte	lt
 8013302:	461c      	movlt	r4, r3
 8013304:	2501      	movlt	r5, #1
 8013306:	2500      	movge	r5, #0
 8013308:	f7ff fd40 	bl	8012d8c <_Balloc>
 801330c:	4602      	mov	r2, r0
 801330e:	b918      	cbnz	r0, 8013318 <__mdiff+0x60>
 8013310:	4b31      	ldr	r3, [pc, #196]	@ (80133d8 <__mdiff+0x120>)
 8013312:	f240 2145 	movw	r1, #581	@ 0x245
 8013316:	e7e3      	b.n	80132e0 <__mdiff+0x28>
 8013318:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801331c:	6926      	ldr	r6, [r4, #16]
 801331e:	60c5      	str	r5, [r0, #12]
 8013320:	f109 0310 	add.w	r3, r9, #16
 8013324:	f109 0514 	add.w	r5, r9, #20
 8013328:	f104 0e14 	add.w	lr, r4, #20
 801332c:	f100 0b14 	add.w	fp, r0, #20
 8013330:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013334:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013338:	9301      	str	r3, [sp, #4]
 801333a:	46d9      	mov	r9, fp
 801333c:	f04f 0c00 	mov.w	ip, #0
 8013340:	9b01      	ldr	r3, [sp, #4]
 8013342:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013346:	f853 af04 	ldr.w	sl, [r3, #4]!
 801334a:	9301      	str	r3, [sp, #4]
 801334c:	fa1f f38a 	uxth.w	r3, sl
 8013350:	4619      	mov	r1, r3
 8013352:	b283      	uxth	r3, r0
 8013354:	1acb      	subs	r3, r1, r3
 8013356:	0c00      	lsrs	r0, r0, #16
 8013358:	4463      	add	r3, ip
 801335a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801335e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013362:	b29b      	uxth	r3, r3
 8013364:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013368:	4576      	cmp	r6, lr
 801336a:	f849 3b04 	str.w	r3, [r9], #4
 801336e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013372:	d8e5      	bhi.n	8013340 <__mdiff+0x88>
 8013374:	1b33      	subs	r3, r6, r4
 8013376:	3b15      	subs	r3, #21
 8013378:	f023 0303 	bic.w	r3, r3, #3
 801337c:	3415      	adds	r4, #21
 801337e:	3304      	adds	r3, #4
 8013380:	42a6      	cmp	r6, r4
 8013382:	bf38      	it	cc
 8013384:	2304      	movcc	r3, #4
 8013386:	441d      	add	r5, r3
 8013388:	445b      	add	r3, fp
 801338a:	461e      	mov	r6, r3
 801338c:	462c      	mov	r4, r5
 801338e:	4544      	cmp	r4, r8
 8013390:	d30e      	bcc.n	80133b0 <__mdiff+0xf8>
 8013392:	f108 0103 	add.w	r1, r8, #3
 8013396:	1b49      	subs	r1, r1, r5
 8013398:	f021 0103 	bic.w	r1, r1, #3
 801339c:	3d03      	subs	r5, #3
 801339e:	45a8      	cmp	r8, r5
 80133a0:	bf38      	it	cc
 80133a2:	2100      	movcc	r1, #0
 80133a4:	440b      	add	r3, r1
 80133a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80133aa:	b191      	cbz	r1, 80133d2 <__mdiff+0x11a>
 80133ac:	6117      	str	r7, [r2, #16]
 80133ae:	e79d      	b.n	80132ec <__mdiff+0x34>
 80133b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80133b4:	46e6      	mov	lr, ip
 80133b6:	0c08      	lsrs	r0, r1, #16
 80133b8:	fa1c fc81 	uxtah	ip, ip, r1
 80133bc:	4471      	add	r1, lr
 80133be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80133c2:	b289      	uxth	r1, r1
 80133c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80133c8:	f846 1b04 	str.w	r1, [r6], #4
 80133cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80133d0:	e7dd      	b.n	801338e <__mdiff+0xd6>
 80133d2:	3f01      	subs	r7, #1
 80133d4:	e7e7      	b.n	80133a6 <__mdiff+0xee>
 80133d6:	bf00      	nop
 80133d8:	080140cc 	.word	0x080140cc
 80133dc:	080140dd 	.word	0x080140dd

080133e0 <__d2b>:
 80133e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133e4:	460f      	mov	r7, r1
 80133e6:	2101      	movs	r1, #1
 80133e8:	ec59 8b10 	vmov	r8, r9, d0
 80133ec:	4616      	mov	r6, r2
 80133ee:	f7ff fccd 	bl	8012d8c <_Balloc>
 80133f2:	4604      	mov	r4, r0
 80133f4:	b930      	cbnz	r0, 8013404 <__d2b+0x24>
 80133f6:	4602      	mov	r2, r0
 80133f8:	4b23      	ldr	r3, [pc, #140]	@ (8013488 <__d2b+0xa8>)
 80133fa:	4824      	ldr	r0, [pc, #144]	@ (801348c <__d2b+0xac>)
 80133fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8013400:	f000 fa74 	bl	80138ec <__assert_func>
 8013404:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013408:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801340c:	b10d      	cbz	r5, 8013412 <__d2b+0x32>
 801340e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013412:	9301      	str	r3, [sp, #4]
 8013414:	f1b8 0300 	subs.w	r3, r8, #0
 8013418:	d023      	beq.n	8013462 <__d2b+0x82>
 801341a:	4668      	mov	r0, sp
 801341c:	9300      	str	r3, [sp, #0]
 801341e:	f7ff fd7c 	bl	8012f1a <__lo0bits>
 8013422:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013426:	b1d0      	cbz	r0, 801345e <__d2b+0x7e>
 8013428:	f1c0 0320 	rsb	r3, r0, #32
 801342c:	fa02 f303 	lsl.w	r3, r2, r3
 8013430:	430b      	orrs	r3, r1
 8013432:	40c2      	lsrs	r2, r0
 8013434:	6163      	str	r3, [r4, #20]
 8013436:	9201      	str	r2, [sp, #4]
 8013438:	9b01      	ldr	r3, [sp, #4]
 801343a:	61a3      	str	r3, [r4, #24]
 801343c:	2b00      	cmp	r3, #0
 801343e:	bf0c      	ite	eq
 8013440:	2201      	moveq	r2, #1
 8013442:	2202      	movne	r2, #2
 8013444:	6122      	str	r2, [r4, #16]
 8013446:	b1a5      	cbz	r5, 8013472 <__d2b+0x92>
 8013448:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801344c:	4405      	add	r5, r0
 801344e:	603d      	str	r5, [r7, #0]
 8013450:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013454:	6030      	str	r0, [r6, #0]
 8013456:	4620      	mov	r0, r4
 8013458:	b003      	add	sp, #12
 801345a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801345e:	6161      	str	r1, [r4, #20]
 8013460:	e7ea      	b.n	8013438 <__d2b+0x58>
 8013462:	a801      	add	r0, sp, #4
 8013464:	f7ff fd59 	bl	8012f1a <__lo0bits>
 8013468:	9b01      	ldr	r3, [sp, #4]
 801346a:	6163      	str	r3, [r4, #20]
 801346c:	3020      	adds	r0, #32
 801346e:	2201      	movs	r2, #1
 8013470:	e7e8      	b.n	8013444 <__d2b+0x64>
 8013472:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013476:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801347a:	6038      	str	r0, [r7, #0]
 801347c:	6918      	ldr	r0, [r3, #16]
 801347e:	f7ff fd2d 	bl	8012edc <__hi0bits>
 8013482:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013486:	e7e5      	b.n	8013454 <__d2b+0x74>
 8013488:	080140cc 	.word	0x080140cc
 801348c:	080140dd 	.word	0x080140dd

08013490 <__ssputs_r>:
 8013490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013494:	688e      	ldr	r6, [r1, #8]
 8013496:	461f      	mov	r7, r3
 8013498:	42be      	cmp	r6, r7
 801349a:	680b      	ldr	r3, [r1, #0]
 801349c:	4682      	mov	sl, r0
 801349e:	460c      	mov	r4, r1
 80134a0:	4690      	mov	r8, r2
 80134a2:	d82d      	bhi.n	8013500 <__ssputs_r+0x70>
 80134a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80134a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80134ac:	d026      	beq.n	80134fc <__ssputs_r+0x6c>
 80134ae:	6965      	ldr	r5, [r4, #20]
 80134b0:	6909      	ldr	r1, [r1, #16]
 80134b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80134b6:	eba3 0901 	sub.w	r9, r3, r1
 80134ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80134be:	1c7b      	adds	r3, r7, #1
 80134c0:	444b      	add	r3, r9
 80134c2:	106d      	asrs	r5, r5, #1
 80134c4:	429d      	cmp	r5, r3
 80134c6:	bf38      	it	cc
 80134c8:	461d      	movcc	r5, r3
 80134ca:	0553      	lsls	r3, r2, #21
 80134cc:	d527      	bpl.n	801351e <__ssputs_r+0x8e>
 80134ce:	4629      	mov	r1, r5
 80134d0:	f7ff fbd0 	bl	8012c74 <_malloc_r>
 80134d4:	4606      	mov	r6, r0
 80134d6:	b360      	cbz	r0, 8013532 <__ssputs_r+0xa2>
 80134d8:	6921      	ldr	r1, [r4, #16]
 80134da:	464a      	mov	r2, r9
 80134dc:	f7fe fd69 	bl	8011fb2 <memcpy>
 80134e0:	89a3      	ldrh	r3, [r4, #12]
 80134e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80134e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80134ea:	81a3      	strh	r3, [r4, #12]
 80134ec:	6126      	str	r6, [r4, #16]
 80134ee:	6165      	str	r5, [r4, #20]
 80134f0:	444e      	add	r6, r9
 80134f2:	eba5 0509 	sub.w	r5, r5, r9
 80134f6:	6026      	str	r6, [r4, #0]
 80134f8:	60a5      	str	r5, [r4, #8]
 80134fa:	463e      	mov	r6, r7
 80134fc:	42be      	cmp	r6, r7
 80134fe:	d900      	bls.n	8013502 <__ssputs_r+0x72>
 8013500:	463e      	mov	r6, r7
 8013502:	6820      	ldr	r0, [r4, #0]
 8013504:	4632      	mov	r2, r6
 8013506:	4641      	mov	r1, r8
 8013508:	f000 f9c6 	bl	8013898 <memmove>
 801350c:	68a3      	ldr	r3, [r4, #8]
 801350e:	1b9b      	subs	r3, r3, r6
 8013510:	60a3      	str	r3, [r4, #8]
 8013512:	6823      	ldr	r3, [r4, #0]
 8013514:	4433      	add	r3, r6
 8013516:	6023      	str	r3, [r4, #0]
 8013518:	2000      	movs	r0, #0
 801351a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801351e:	462a      	mov	r2, r5
 8013520:	f000 fa28 	bl	8013974 <_realloc_r>
 8013524:	4606      	mov	r6, r0
 8013526:	2800      	cmp	r0, #0
 8013528:	d1e0      	bne.n	80134ec <__ssputs_r+0x5c>
 801352a:	6921      	ldr	r1, [r4, #16]
 801352c:	4650      	mov	r0, sl
 801352e:	f7ff fb2d 	bl	8012b8c <_free_r>
 8013532:	230c      	movs	r3, #12
 8013534:	f8ca 3000 	str.w	r3, [sl]
 8013538:	89a3      	ldrh	r3, [r4, #12]
 801353a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801353e:	81a3      	strh	r3, [r4, #12]
 8013540:	f04f 30ff 	mov.w	r0, #4294967295
 8013544:	e7e9      	b.n	801351a <__ssputs_r+0x8a>
	...

08013548 <_svfiprintf_r>:
 8013548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801354c:	4698      	mov	r8, r3
 801354e:	898b      	ldrh	r3, [r1, #12]
 8013550:	061b      	lsls	r3, r3, #24
 8013552:	b09d      	sub	sp, #116	@ 0x74
 8013554:	4607      	mov	r7, r0
 8013556:	460d      	mov	r5, r1
 8013558:	4614      	mov	r4, r2
 801355a:	d510      	bpl.n	801357e <_svfiprintf_r+0x36>
 801355c:	690b      	ldr	r3, [r1, #16]
 801355e:	b973      	cbnz	r3, 801357e <_svfiprintf_r+0x36>
 8013560:	2140      	movs	r1, #64	@ 0x40
 8013562:	f7ff fb87 	bl	8012c74 <_malloc_r>
 8013566:	6028      	str	r0, [r5, #0]
 8013568:	6128      	str	r0, [r5, #16]
 801356a:	b930      	cbnz	r0, 801357a <_svfiprintf_r+0x32>
 801356c:	230c      	movs	r3, #12
 801356e:	603b      	str	r3, [r7, #0]
 8013570:	f04f 30ff 	mov.w	r0, #4294967295
 8013574:	b01d      	add	sp, #116	@ 0x74
 8013576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801357a:	2340      	movs	r3, #64	@ 0x40
 801357c:	616b      	str	r3, [r5, #20]
 801357e:	2300      	movs	r3, #0
 8013580:	9309      	str	r3, [sp, #36]	@ 0x24
 8013582:	2320      	movs	r3, #32
 8013584:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013588:	f8cd 800c 	str.w	r8, [sp, #12]
 801358c:	2330      	movs	r3, #48	@ 0x30
 801358e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801372c <_svfiprintf_r+0x1e4>
 8013592:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013596:	f04f 0901 	mov.w	r9, #1
 801359a:	4623      	mov	r3, r4
 801359c:	469a      	mov	sl, r3
 801359e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135a2:	b10a      	cbz	r2, 80135a8 <_svfiprintf_r+0x60>
 80135a4:	2a25      	cmp	r2, #37	@ 0x25
 80135a6:	d1f9      	bne.n	801359c <_svfiprintf_r+0x54>
 80135a8:	ebba 0b04 	subs.w	fp, sl, r4
 80135ac:	d00b      	beq.n	80135c6 <_svfiprintf_r+0x7e>
 80135ae:	465b      	mov	r3, fp
 80135b0:	4622      	mov	r2, r4
 80135b2:	4629      	mov	r1, r5
 80135b4:	4638      	mov	r0, r7
 80135b6:	f7ff ff6b 	bl	8013490 <__ssputs_r>
 80135ba:	3001      	adds	r0, #1
 80135bc:	f000 80a7 	beq.w	801370e <_svfiprintf_r+0x1c6>
 80135c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80135c2:	445a      	add	r2, fp
 80135c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80135c6:	f89a 3000 	ldrb.w	r3, [sl]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	f000 809f 	beq.w	801370e <_svfiprintf_r+0x1c6>
 80135d0:	2300      	movs	r3, #0
 80135d2:	f04f 32ff 	mov.w	r2, #4294967295
 80135d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80135da:	f10a 0a01 	add.w	sl, sl, #1
 80135de:	9304      	str	r3, [sp, #16]
 80135e0:	9307      	str	r3, [sp, #28]
 80135e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80135e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80135e8:	4654      	mov	r4, sl
 80135ea:	2205      	movs	r2, #5
 80135ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135f0:	484e      	ldr	r0, [pc, #312]	@ (801372c <_svfiprintf_r+0x1e4>)
 80135f2:	f7ec fe8d 	bl	8000310 <memchr>
 80135f6:	9a04      	ldr	r2, [sp, #16]
 80135f8:	b9d8      	cbnz	r0, 8013632 <_svfiprintf_r+0xea>
 80135fa:	06d0      	lsls	r0, r2, #27
 80135fc:	bf44      	itt	mi
 80135fe:	2320      	movmi	r3, #32
 8013600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013604:	0711      	lsls	r1, r2, #28
 8013606:	bf44      	itt	mi
 8013608:	232b      	movmi	r3, #43	@ 0x2b
 801360a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801360e:	f89a 3000 	ldrb.w	r3, [sl]
 8013612:	2b2a      	cmp	r3, #42	@ 0x2a
 8013614:	d015      	beq.n	8013642 <_svfiprintf_r+0xfa>
 8013616:	9a07      	ldr	r2, [sp, #28]
 8013618:	4654      	mov	r4, sl
 801361a:	2000      	movs	r0, #0
 801361c:	f04f 0c0a 	mov.w	ip, #10
 8013620:	4621      	mov	r1, r4
 8013622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013626:	3b30      	subs	r3, #48	@ 0x30
 8013628:	2b09      	cmp	r3, #9
 801362a:	d94b      	bls.n	80136c4 <_svfiprintf_r+0x17c>
 801362c:	b1b0      	cbz	r0, 801365c <_svfiprintf_r+0x114>
 801362e:	9207      	str	r2, [sp, #28]
 8013630:	e014      	b.n	801365c <_svfiprintf_r+0x114>
 8013632:	eba0 0308 	sub.w	r3, r0, r8
 8013636:	fa09 f303 	lsl.w	r3, r9, r3
 801363a:	4313      	orrs	r3, r2
 801363c:	9304      	str	r3, [sp, #16]
 801363e:	46a2      	mov	sl, r4
 8013640:	e7d2      	b.n	80135e8 <_svfiprintf_r+0xa0>
 8013642:	9b03      	ldr	r3, [sp, #12]
 8013644:	1d19      	adds	r1, r3, #4
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	9103      	str	r1, [sp, #12]
 801364a:	2b00      	cmp	r3, #0
 801364c:	bfbb      	ittet	lt
 801364e:	425b      	neglt	r3, r3
 8013650:	f042 0202 	orrlt.w	r2, r2, #2
 8013654:	9307      	strge	r3, [sp, #28]
 8013656:	9307      	strlt	r3, [sp, #28]
 8013658:	bfb8      	it	lt
 801365a:	9204      	strlt	r2, [sp, #16]
 801365c:	7823      	ldrb	r3, [r4, #0]
 801365e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013660:	d10a      	bne.n	8013678 <_svfiprintf_r+0x130>
 8013662:	7863      	ldrb	r3, [r4, #1]
 8013664:	2b2a      	cmp	r3, #42	@ 0x2a
 8013666:	d132      	bne.n	80136ce <_svfiprintf_r+0x186>
 8013668:	9b03      	ldr	r3, [sp, #12]
 801366a:	1d1a      	adds	r2, r3, #4
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	9203      	str	r2, [sp, #12]
 8013670:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013674:	3402      	adds	r4, #2
 8013676:	9305      	str	r3, [sp, #20]
 8013678:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801373c <_svfiprintf_r+0x1f4>
 801367c:	7821      	ldrb	r1, [r4, #0]
 801367e:	2203      	movs	r2, #3
 8013680:	4650      	mov	r0, sl
 8013682:	f7ec fe45 	bl	8000310 <memchr>
 8013686:	b138      	cbz	r0, 8013698 <_svfiprintf_r+0x150>
 8013688:	9b04      	ldr	r3, [sp, #16]
 801368a:	eba0 000a 	sub.w	r0, r0, sl
 801368e:	2240      	movs	r2, #64	@ 0x40
 8013690:	4082      	lsls	r2, r0
 8013692:	4313      	orrs	r3, r2
 8013694:	3401      	adds	r4, #1
 8013696:	9304      	str	r3, [sp, #16]
 8013698:	f814 1b01 	ldrb.w	r1, [r4], #1
 801369c:	4824      	ldr	r0, [pc, #144]	@ (8013730 <_svfiprintf_r+0x1e8>)
 801369e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80136a2:	2206      	movs	r2, #6
 80136a4:	f7ec fe34 	bl	8000310 <memchr>
 80136a8:	2800      	cmp	r0, #0
 80136aa:	d036      	beq.n	801371a <_svfiprintf_r+0x1d2>
 80136ac:	4b21      	ldr	r3, [pc, #132]	@ (8013734 <_svfiprintf_r+0x1ec>)
 80136ae:	bb1b      	cbnz	r3, 80136f8 <_svfiprintf_r+0x1b0>
 80136b0:	9b03      	ldr	r3, [sp, #12]
 80136b2:	3307      	adds	r3, #7
 80136b4:	f023 0307 	bic.w	r3, r3, #7
 80136b8:	3308      	adds	r3, #8
 80136ba:	9303      	str	r3, [sp, #12]
 80136bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136be:	4433      	add	r3, r6
 80136c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80136c2:	e76a      	b.n	801359a <_svfiprintf_r+0x52>
 80136c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80136c8:	460c      	mov	r4, r1
 80136ca:	2001      	movs	r0, #1
 80136cc:	e7a8      	b.n	8013620 <_svfiprintf_r+0xd8>
 80136ce:	2300      	movs	r3, #0
 80136d0:	3401      	adds	r4, #1
 80136d2:	9305      	str	r3, [sp, #20]
 80136d4:	4619      	mov	r1, r3
 80136d6:	f04f 0c0a 	mov.w	ip, #10
 80136da:	4620      	mov	r0, r4
 80136dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80136e0:	3a30      	subs	r2, #48	@ 0x30
 80136e2:	2a09      	cmp	r2, #9
 80136e4:	d903      	bls.n	80136ee <_svfiprintf_r+0x1a6>
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d0c6      	beq.n	8013678 <_svfiprintf_r+0x130>
 80136ea:	9105      	str	r1, [sp, #20]
 80136ec:	e7c4      	b.n	8013678 <_svfiprintf_r+0x130>
 80136ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80136f2:	4604      	mov	r4, r0
 80136f4:	2301      	movs	r3, #1
 80136f6:	e7f0      	b.n	80136da <_svfiprintf_r+0x192>
 80136f8:	ab03      	add	r3, sp, #12
 80136fa:	9300      	str	r3, [sp, #0]
 80136fc:	462a      	mov	r2, r5
 80136fe:	4b0e      	ldr	r3, [pc, #56]	@ (8013738 <_svfiprintf_r+0x1f0>)
 8013700:	a904      	add	r1, sp, #16
 8013702:	4638      	mov	r0, r7
 8013704:	f7fd ff08 	bl	8011518 <_printf_float>
 8013708:	1c42      	adds	r2, r0, #1
 801370a:	4606      	mov	r6, r0
 801370c:	d1d6      	bne.n	80136bc <_svfiprintf_r+0x174>
 801370e:	89ab      	ldrh	r3, [r5, #12]
 8013710:	065b      	lsls	r3, r3, #25
 8013712:	f53f af2d 	bmi.w	8013570 <_svfiprintf_r+0x28>
 8013716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013718:	e72c      	b.n	8013574 <_svfiprintf_r+0x2c>
 801371a:	ab03      	add	r3, sp, #12
 801371c:	9300      	str	r3, [sp, #0]
 801371e:	462a      	mov	r2, r5
 8013720:	4b05      	ldr	r3, [pc, #20]	@ (8013738 <_svfiprintf_r+0x1f0>)
 8013722:	a904      	add	r1, sp, #16
 8013724:	4638      	mov	r0, r7
 8013726:	f7fe f97f 	bl	8011a28 <_printf_i>
 801372a:	e7ed      	b.n	8013708 <_svfiprintf_r+0x1c0>
 801372c:	08014238 	.word	0x08014238
 8013730:	08014242 	.word	0x08014242
 8013734:	08011519 	.word	0x08011519
 8013738:	08013491 	.word	0x08013491
 801373c:	0801423e 	.word	0x0801423e

08013740 <__sflush_r>:
 8013740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013748:	0716      	lsls	r6, r2, #28
 801374a:	4605      	mov	r5, r0
 801374c:	460c      	mov	r4, r1
 801374e:	d454      	bmi.n	80137fa <__sflush_r+0xba>
 8013750:	684b      	ldr	r3, [r1, #4]
 8013752:	2b00      	cmp	r3, #0
 8013754:	dc02      	bgt.n	801375c <__sflush_r+0x1c>
 8013756:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013758:	2b00      	cmp	r3, #0
 801375a:	dd48      	ble.n	80137ee <__sflush_r+0xae>
 801375c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801375e:	2e00      	cmp	r6, #0
 8013760:	d045      	beq.n	80137ee <__sflush_r+0xae>
 8013762:	2300      	movs	r3, #0
 8013764:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013768:	682f      	ldr	r7, [r5, #0]
 801376a:	6a21      	ldr	r1, [r4, #32]
 801376c:	602b      	str	r3, [r5, #0]
 801376e:	d030      	beq.n	80137d2 <__sflush_r+0x92>
 8013770:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013772:	89a3      	ldrh	r3, [r4, #12]
 8013774:	0759      	lsls	r1, r3, #29
 8013776:	d505      	bpl.n	8013784 <__sflush_r+0x44>
 8013778:	6863      	ldr	r3, [r4, #4]
 801377a:	1ad2      	subs	r2, r2, r3
 801377c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801377e:	b10b      	cbz	r3, 8013784 <__sflush_r+0x44>
 8013780:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013782:	1ad2      	subs	r2, r2, r3
 8013784:	2300      	movs	r3, #0
 8013786:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013788:	6a21      	ldr	r1, [r4, #32]
 801378a:	4628      	mov	r0, r5
 801378c:	47b0      	blx	r6
 801378e:	1c43      	adds	r3, r0, #1
 8013790:	89a3      	ldrh	r3, [r4, #12]
 8013792:	d106      	bne.n	80137a2 <__sflush_r+0x62>
 8013794:	6829      	ldr	r1, [r5, #0]
 8013796:	291d      	cmp	r1, #29
 8013798:	d82b      	bhi.n	80137f2 <__sflush_r+0xb2>
 801379a:	4a2a      	ldr	r2, [pc, #168]	@ (8013844 <__sflush_r+0x104>)
 801379c:	410a      	asrs	r2, r1
 801379e:	07d6      	lsls	r6, r2, #31
 80137a0:	d427      	bmi.n	80137f2 <__sflush_r+0xb2>
 80137a2:	2200      	movs	r2, #0
 80137a4:	6062      	str	r2, [r4, #4]
 80137a6:	04d9      	lsls	r1, r3, #19
 80137a8:	6922      	ldr	r2, [r4, #16]
 80137aa:	6022      	str	r2, [r4, #0]
 80137ac:	d504      	bpl.n	80137b8 <__sflush_r+0x78>
 80137ae:	1c42      	adds	r2, r0, #1
 80137b0:	d101      	bne.n	80137b6 <__sflush_r+0x76>
 80137b2:	682b      	ldr	r3, [r5, #0]
 80137b4:	b903      	cbnz	r3, 80137b8 <__sflush_r+0x78>
 80137b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80137b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137ba:	602f      	str	r7, [r5, #0]
 80137bc:	b1b9      	cbz	r1, 80137ee <__sflush_r+0xae>
 80137be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137c2:	4299      	cmp	r1, r3
 80137c4:	d002      	beq.n	80137cc <__sflush_r+0x8c>
 80137c6:	4628      	mov	r0, r5
 80137c8:	f7ff f9e0 	bl	8012b8c <_free_r>
 80137cc:	2300      	movs	r3, #0
 80137ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80137d0:	e00d      	b.n	80137ee <__sflush_r+0xae>
 80137d2:	2301      	movs	r3, #1
 80137d4:	4628      	mov	r0, r5
 80137d6:	47b0      	blx	r6
 80137d8:	4602      	mov	r2, r0
 80137da:	1c50      	adds	r0, r2, #1
 80137dc:	d1c9      	bne.n	8013772 <__sflush_r+0x32>
 80137de:	682b      	ldr	r3, [r5, #0]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d0c6      	beq.n	8013772 <__sflush_r+0x32>
 80137e4:	2b1d      	cmp	r3, #29
 80137e6:	d001      	beq.n	80137ec <__sflush_r+0xac>
 80137e8:	2b16      	cmp	r3, #22
 80137ea:	d11e      	bne.n	801382a <__sflush_r+0xea>
 80137ec:	602f      	str	r7, [r5, #0]
 80137ee:	2000      	movs	r0, #0
 80137f0:	e022      	b.n	8013838 <__sflush_r+0xf8>
 80137f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137f6:	b21b      	sxth	r3, r3
 80137f8:	e01b      	b.n	8013832 <__sflush_r+0xf2>
 80137fa:	690f      	ldr	r7, [r1, #16]
 80137fc:	2f00      	cmp	r7, #0
 80137fe:	d0f6      	beq.n	80137ee <__sflush_r+0xae>
 8013800:	0793      	lsls	r3, r2, #30
 8013802:	680e      	ldr	r6, [r1, #0]
 8013804:	bf08      	it	eq
 8013806:	694b      	ldreq	r3, [r1, #20]
 8013808:	600f      	str	r7, [r1, #0]
 801380a:	bf18      	it	ne
 801380c:	2300      	movne	r3, #0
 801380e:	eba6 0807 	sub.w	r8, r6, r7
 8013812:	608b      	str	r3, [r1, #8]
 8013814:	f1b8 0f00 	cmp.w	r8, #0
 8013818:	dde9      	ble.n	80137ee <__sflush_r+0xae>
 801381a:	6a21      	ldr	r1, [r4, #32]
 801381c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801381e:	4643      	mov	r3, r8
 8013820:	463a      	mov	r2, r7
 8013822:	4628      	mov	r0, r5
 8013824:	47b0      	blx	r6
 8013826:	2800      	cmp	r0, #0
 8013828:	dc08      	bgt.n	801383c <__sflush_r+0xfc>
 801382a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801382e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013832:	81a3      	strh	r3, [r4, #12]
 8013834:	f04f 30ff 	mov.w	r0, #4294967295
 8013838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801383c:	4407      	add	r7, r0
 801383e:	eba8 0800 	sub.w	r8, r8, r0
 8013842:	e7e7      	b.n	8013814 <__sflush_r+0xd4>
 8013844:	dfbffffe 	.word	0xdfbffffe

08013848 <_fflush_r>:
 8013848:	b538      	push	{r3, r4, r5, lr}
 801384a:	690b      	ldr	r3, [r1, #16]
 801384c:	4605      	mov	r5, r0
 801384e:	460c      	mov	r4, r1
 8013850:	b913      	cbnz	r3, 8013858 <_fflush_r+0x10>
 8013852:	2500      	movs	r5, #0
 8013854:	4628      	mov	r0, r5
 8013856:	bd38      	pop	{r3, r4, r5, pc}
 8013858:	b118      	cbz	r0, 8013862 <_fflush_r+0x1a>
 801385a:	6a03      	ldr	r3, [r0, #32]
 801385c:	b90b      	cbnz	r3, 8013862 <_fflush_r+0x1a>
 801385e:	f7fe fa8f 	bl	8011d80 <__sinit>
 8013862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d0f3      	beq.n	8013852 <_fflush_r+0xa>
 801386a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801386c:	07d0      	lsls	r0, r2, #31
 801386e:	d404      	bmi.n	801387a <_fflush_r+0x32>
 8013870:	0599      	lsls	r1, r3, #22
 8013872:	d402      	bmi.n	801387a <_fflush_r+0x32>
 8013874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013876:	f7fe fb9a 	bl	8011fae <__retarget_lock_acquire_recursive>
 801387a:	4628      	mov	r0, r5
 801387c:	4621      	mov	r1, r4
 801387e:	f7ff ff5f 	bl	8013740 <__sflush_r>
 8013882:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013884:	07da      	lsls	r2, r3, #31
 8013886:	4605      	mov	r5, r0
 8013888:	d4e4      	bmi.n	8013854 <_fflush_r+0xc>
 801388a:	89a3      	ldrh	r3, [r4, #12]
 801388c:	059b      	lsls	r3, r3, #22
 801388e:	d4e1      	bmi.n	8013854 <_fflush_r+0xc>
 8013890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013892:	f7fe fb8d 	bl	8011fb0 <__retarget_lock_release_recursive>
 8013896:	e7dd      	b.n	8013854 <_fflush_r+0xc>

08013898 <memmove>:
 8013898:	4288      	cmp	r0, r1
 801389a:	b510      	push	{r4, lr}
 801389c:	eb01 0402 	add.w	r4, r1, r2
 80138a0:	d902      	bls.n	80138a8 <memmove+0x10>
 80138a2:	4284      	cmp	r4, r0
 80138a4:	4623      	mov	r3, r4
 80138a6:	d807      	bhi.n	80138b8 <memmove+0x20>
 80138a8:	1e43      	subs	r3, r0, #1
 80138aa:	42a1      	cmp	r1, r4
 80138ac:	d008      	beq.n	80138c0 <memmove+0x28>
 80138ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80138b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80138b6:	e7f8      	b.n	80138aa <memmove+0x12>
 80138b8:	4402      	add	r2, r0
 80138ba:	4601      	mov	r1, r0
 80138bc:	428a      	cmp	r2, r1
 80138be:	d100      	bne.n	80138c2 <memmove+0x2a>
 80138c0:	bd10      	pop	{r4, pc}
 80138c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80138c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80138ca:	e7f7      	b.n	80138bc <memmove+0x24>

080138cc <_sbrk_r>:
 80138cc:	b538      	push	{r3, r4, r5, lr}
 80138ce:	4d06      	ldr	r5, [pc, #24]	@ (80138e8 <_sbrk_r+0x1c>)
 80138d0:	2300      	movs	r3, #0
 80138d2:	4604      	mov	r4, r0
 80138d4:	4608      	mov	r0, r1
 80138d6:	602b      	str	r3, [r5, #0]
 80138d8:	f7ee faa6 	bl	8001e28 <_sbrk>
 80138dc:	1c43      	adds	r3, r0, #1
 80138de:	d102      	bne.n	80138e6 <_sbrk_r+0x1a>
 80138e0:	682b      	ldr	r3, [r5, #0]
 80138e2:	b103      	cbz	r3, 80138e6 <_sbrk_r+0x1a>
 80138e4:	6023      	str	r3, [r4, #0]
 80138e6:	bd38      	pop	{r3, r4, r5, pc}
 80138e8:	24003610 	.word	0x24003610

080138ec <__assert_func>:
 80138ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80138ee:	4614      	mov	r4, r2
 80138f0:	461a      	mov	r2, r3
 80138f2:	4b09      	ldr	r3, [pc, #36]	@ (8013918 <__assert_func+0x2c>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	4605      	mov	r5, r0
 80138f8:	68d8      	ldr	r0, [r3, #12]
 80138fa:	b954      	cbnz	r4, 8013912 <__assert_func+0x26>
 80138fc:	4b07      	ldr	r3, [pc, #28]	@ (801391c <__assert_func+0x30>)
 80138fe:	461c      	mov	r4, r3
 8013900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013904:	9100      	str	r1, [sp, #0]
 8013906:	462b      	mov	r3, r5
 8013908:	4905      	ldr	r1, [pc, #20]	@ (8013920 <__assert_func+0x34>)
 801390a:	f000 f86f 	bl	80139ec <fiprintf>
 801390e:	f000 f87f 	bl	8013a10 <abort>
 8013912:	4b04      	ldr	r3, [pc, #16]	@ (8013924 <__assert_func+0x38>)
 8013914:	e7f4      	b.n	8013900 <__assert_func+0x14>
 8013916:	bf00      	nop
 8013918:	24000110 	.word	0x24000110
 801391c:	0801428e 	.word	0x0801428e
 8013920:	08014260 	.word	0x08014260
 8013924:	08014253 	.word	0x08014253

08013928 <_calloc_r>:
 8013928:	b570      	push	{r4, r5, r6, lr}
 801392a:	fba1 5402 	umull	r5, r4, r1, r2
 801392e:	b93c      	cbnz	r4, 8013940 <_calloc_r+0x18>
 8013930:	4629      	mov	r1, r5
 8013932:	f7ff f99f 	bl	8012c74 <_malloc_r>
 8013936:	4606      	mov	r6, r0
 8013938:	b928      	cbnz	r0, 8013946 <_calloc_r+0x1e>
 801393a:	2600      	movs	r6, #0
 801393c:	4630      	mov	r0, r6
 801393e:	bd70      	pop	{r4, r5, r6, pc}
 8013940:	220c      	movs	r2, #12
 8013942:	6002      	str	r2, [r0, #0]
 8013944:	e7f9      	b.n	801393a <_calloc_r+0x12>
 8013946:	462a      	mov	r2, r5
 8013948:	4621      	mov	r1, r4
 801394a:	f7fe fab2 	bl	8011eb2 <memset>
 801394e:	e7f5      	b.n	801393c <_calloc_r+0x14>

08013950 <__ascii_mbtowc>:
 8013950:	b082      	sub	sp, #8
 8013952:	b901      	cbnz	r1, 8013956 <__ascii_mbtowc+0x6>
 8013954:	a901      	add	r1, sp, #4
 8013956:	b142      	cbz	r2, 801396a <__ascii_mbtowc+0x1a>
 8013958:	b14b      	cbz	r3, 801396e <__ascii_mbtowc+0x1e>
 801395a:	7813      	ldrb	r3, [r2, #0]
 801395c:	600b      	str	r3, [r1, #0]
 801395e:	7812      	ldrb	r2, [r2, #0]
 8013960:	1e10      	subs	r0, r2, #0
 8013962:	bf18      	it	ne
 8013964:	2001      	movne	r0, #1
 8013966:	b002      	add	sp, #8
 8013968:	4770      	bx	lr
 801396a:	4610      	mov	r0, r2
 801396c:	e7fb      	b.n	8013966 <__ascii_mbtowc+0x16>
 801396e:	f06f 0001 	mvn.w	r0, #1
 8013972:	e7f8      	b.n	8013966 <__ascii_mbtowc+0x16>

08013974 <_realloc_r>:
 8013974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013978:	4680      	mov	r8, r0
 801397a:	4615      	mov	r5, r2
 801397c:	460c      	mov	r4, r1
 801397e:	b921      	cbnz	r1, 801398a <_realloc_r+0x16>
 8013980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013984:	4611      	mov	r1, r2
 8013986:	f7ff b975 	b.w	8012c74 <_malloc_r>
 801398a:	b92a      	cbnz	r2, 8013998 <_realloc_r+0x24>
 801398c:	f7ff f8fe 	bl	8012b8c <_free_r>
 8013990:	2400      	movs	r4, #0
 8013992:	4620      	mov	r0, r4
 8013994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013998:	f000 f841 	bl	8013a1e <_malloc_usable_size_r>
 801399c:	4285      	cmp	r5, r0
 801399e:	4606      	mov	r6, r0
 80139a0:	d802      	bhi.n	80139a8 <_realloc_r+0x34>
 80139a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80139a6:	d8f4      	bhi.n	8013992 <_realloc_r+0x1e>
 80139a8:	4629      	mov	r1, r5
 80139aa:	4640      	mov	r0, r8
 80139ac:	f7ff f962 	bl	8012c74 <_malloc_r>
 80139b0:	4607      	mov	r7, r0
 80139b2:	2800      	cmp	r0, #0
 80139b4:	d0ec      	beq.n	8013990 <_realloc_r+0x1c>
 80139b6:	42b5      	cmp	r5, r6
 80139b8:	462a      	mov	r2, r5
 80139ba:	4621      	mov	r1, r4
 80139bc:	bf28      	it	cs
 80139be:	4632      	movcs	r2, r6
 80139c0:	f7fe faf7 	bl	8011fb2 <memcpy>
 80139c4:	4621      	mov	r1, r4
 80139c6:	4640      	mov	r0, r8
 80139c8:	f7ff f8e0 	bl	8012b8c <_free_r>
 80139cc:	463c      	mov	r4, r7
 80139ce:	e7e0      	b.n	8013992 <_realloc_r+0x1e>

080139d0 <__ascii_wctomb>:
 80139d0:	4603      	mov	r3, r0
 80139d2:	4608      	mov	r0, r1
 80139d4:	b141      	cbz	r1, 80139e8 <__ascii_wctomb+0x18>
 80139d6:	2aff      	cmp	r2, #255	@ 0xff
 80139d8:	d904      	bls.n	80139e4 <__ascii_wctomb+0x14>
 80139da:	228a      	movs	r2, #138	@ 0x8a
 80139dc:	601a      	str	r2, [r3, #0]
 80139de:	f04f 30ff 	mov.w	r0, #4294967295
 80139e2:	4770      	bx	lr
 80139e4:	700a      	strb	r2, [r1, #0]
 80139e6:	2001      	movs	r0, #1
 80139e8:	4770      	bx	lr
	...

080139ec <fiprintf>:
 80139ec:	b40e      	push	{r1, r2, r3}
 80139ee:	b503      	push	{r0, r1, lr}
 80139f0:	4601      	mov	r1, r0
 80139f2:	ab03      	add	r3, sp, #12
 80139f4:	4805      	ldr	r0, [pc, #20]	@ (8013a0c <fiprintf+0x20>)
 80139f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80139fa:	6800      	ldr	r0, [r0, #0]
 80139fc:	9301      	str	r3, [sp, #4]
 80139fe:	f000 f83f 	bl	8013a80 <_vfiprintf_r>
 8013a02:	b002      	add	sp, #8
 8013a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a08:	b003      	add	sp, #12
 8013a0a:	4770      	bx	lr
 8013a0c:	24000110 	.word	0x24000110

08013a10 <abort>:
 8013a10:	b508      	push	{r3, lr}
 8013a12:	2006      	movs	r0, #6
 8013a14:	f000 fa08 	bl	8013e28 <raise>
 8013a18:	2001      	movs	r0, #1
 8013a1a:	f7ee f98d 	bl	8001d38 <_exit>

08013a1e <_malloc_usable_size_r>:
 8013a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a22:	1f18      	subs	r0, r3, #4
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	bfbc      	itt	lt
 8013a28:	580b      	ldrlt	r3, [r1, r0]
 8013a2a:	18c0      	addlt	r0, r0, r3
 8013a2c:	4770      	bx	lr

08013a2e <__sfputc_r>:
 8013a2e:	6893      	ldr	r3, [r2, #8]
 8013a30:	3b01      	subs	r3, #1
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	b410      	push	{r4}
 8013a36:	6093      	str	r3, [r2, #8]
 8013a38:	da08      	bge.n	8013a4c <__sfputc_r+0x1e>
 8013a3a:	6994      	ldr	r4, [r2, #24]
 8013a3c:	42a3      	cmp	r3, r4
 8013a3e:	db01      	blt.n	8013a44 <__sfputc_r+0x16>
 8013a40:	290a      	cmp	r1, #10
 8013a42:	d103      	bne.n	8013a4c <__sfputc_r+0x1e>
 8013a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a48:	f000 b932 	b.w	8013cb0 <__swbuf_r>
 8013a4c:	6813      	ldr	r3, [r2, #0]
 8013a4e:	1c58      	adds	r0, r3, #1
 8013a50:	6010      	str	r0, [r2, #0]
 8013a52:	7019      	strb	r1, [r3, #0]
 8013a54:	4608      	mov	r0, r1
 8013a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a5a:	4770      	bx	lr

08013a5c <__sfputs_r>:
 8013a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a5e:	4606      	mov	r6, r0
 8013a60:	460f      	mov	r7, r1
 8013a62:	4614      	mov	r4, r2
 8013a64:	18d5      	adds	r5, r2, r3
 8013a66:	42ac      	cmp	r4, r5
 8013a68:	d101      	bne.n	8013a6e <__sfputs_r+0x12>
 8013a6a:	2000      	movs	r0, #0
 8013a6c:	e007      	b.n	8013a7e <__sfputs_r+0x22>
 8013a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a72:	463a      	mov	r2, r7
 8013a74:	4630      	mov	r0, r6
 8013a76:	f7ff ffda 	bl	8013a2e <__sfputc_r>
 8013a7a:	1c43      	adds	r3, r0, #1
 8013a7c:	d1f3      	bne.n	8013a66 <__sfputs_r+0xa>
 8013a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013a80 <_vfiprintf_r>:
 8013a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a84:	460d      	mov	r5, r1
 8013a86:	b09d      	sub	sp, #116	@ 0x74
 8013a88:	4614      	mov	r4, r2
 8013a8a:	4698      	mov	r8, r3
 8013a8c:	4606      	mov	r6, r0
 8013a8e:	b118      	cbz	r0, 8013a98 <_vfiprintf_r+0x18>
 8013a90:	6a03      	ldr	r3, [r0, #32]
 8013a92:	b90b      	cbnz	r3, 8013a98 <_vfiprintf_r+0x18>
 8013a94:	f7fe f974 	bl	8011d80 <__sinit>
 8013a98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a9a:	07d9      	lsls	r1, r3, #31
 8013a9c:	d405      	bmi.n	8013aaa <_vfiprintf_r+0x2a>
 8013a9e:	89ab      	ldrh	r3, [r5, #12]
 8013aa0:	059a      	lsls	r2, r3, #22
 8013aa2:	d402      	bmi.n	8013aaa <_vfiprintf_r+0x2a>
 8013aa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013aa6:	f7fe fa82 	bl	8011fae <__retarget_lock_acquire_recursive>
 8013aaa:	89ab      	ldrh	r3, [r5, #12]
 8013aac:	071b      	lsls	r3, r3, #28
 8013aae:	d501      	bpl.n	8013ab4 <_vfiprintf_r+0x34>
 8013ab0:	692b      	ldr	r3, [r5, #16]
 8013ab2:	b99b      	cbnz	r3, 8013adc <_vfiprintf_r+0x5c>
 8013ab4:	4629      	mov	r1, r5
 8013ab6:	4630      	mov	r0, r6
 8013ab8:	f000 f938 	bl	8013d2c <__swsetup_r>
 8013abc:	b170      	cbz	r0, 8013adc <_vfiprintf_r+0x5c>
 8013abe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013ac0:	07dc      	lsls	r4, r3, #31
 8013ac2:	d504      	bpl.n	8013ace <_vfiprintf_r+0x4e>
 8013ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ac8:	b01d      	add	sp, #116	@ 0x74
 8013aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ace:	89ab      	ldrh	r3, [r5, #12]
 8013ad0:	0598      	lsls	r0, r3, #22
 8013ad2:	d4f7      	bmi.n	8013ac4 <_vfiprintf_r+0x44>
 8013ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013ad6:	f7fe fa6b 	bl	8011fb0 <__retarget_lock_release_recursive>
 8013ada:	e7f3      	b.n	8013ac4 <_vfiprintf_r+0x44>
 8013adc:	2300      	movs	r3, #0
 8013ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ae0:	2320      	movs	r3, #32
 8013ae2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013ae6:	f8cd 800c 	str.w	r8, [sp, #12]
 8013aea:	2330      	movs	r3, #48	@ 0x30
 8013aec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013c9c <_vfiprintf_r+0x21c>
 8013af0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013af4:	f04f 0901 	mov.w	r9, #1
 8013af8:	4623      	mov	r3, r4
 8013afa:	469a      	mov	sl, r3
 8013afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b00:	b10a      	cbz	r2, 8013b06 <_vfiprintf_r+0x86>
 8013b02:	2a25      	cmp	r2, #37	@ 0x25
 8013b04:	d1f9      	bne.n	8013afa <_vfiprintf_r+0x7a>
 8013b06:	ebba 0b04 	subs.w	fp, sl, r4
 8013b0a:	d00b      	beq.n	8013b24 <_vfiprintf_r+0xa4>
 8013b0c:	465b      	mov	r3, fp
 8013b0e:	4622      	mov	r2, r4
 8013b10:	4629      	mov	r1, r5
 8013b12:	4630      	mov	r0, r6
 8013b14:	f7ff ffa2 	bl	8013a5c <__sfputs_r>
 8013b18:	3001      	adds	r0, #1
 8013b1a:	f000 80a7 	beq.w	8013c6c <_vfiprintf_r+0x1ec>
 8013b1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b20:	445a      	add	r2, fp
 8013b22:	9209      	str	r2, [sp, #36]	@ 0x24
 8013b24:	f89a 3000 	ldrb.w	r3, [sl]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	f000 809f 	beq.w	8013c6c <_vfiprintf_r+0x1ec>
 8013b2e:	2300      	movs	r3, #0
 8013b30:	f04f 32ff 	mov.w	r2, #4294967295
 8013b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b38:	f10a 0a01 	add.w	sl, sl, #1
 8013b3c:	9304      	str	r3, [sp, #16]
 8013b3e:	9307      	str	r3, [sp, #28]
 8013b40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013b44:	931a      	str	r3, [sp, #104]	@ 0x68
 8013b46:	4654      	mov	r4, sl
 8013b48:	2205      	movs	r2, #5
 8013b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b4e:	4853      	ldr	r0, [pc, #332]	@ (8013c9c <_vfiprintf_r+0x21c>)
 8013b50:	f7ec fbde 	bl	8000310 <memchr>
 8013b54:	9a04      	ldr	r2, [sp, #16]
 8013b56:	b9d8      	cbnz	r0, 8013b90 <_vfiprintf_r+0x110>
 8013b58:	06d1      	lsls	r1, r2, #27
 8013b5a:	bf44      	itt	mi
 8013b5c:	2320      	movmi	r3, #32
 8013b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b62:	0713      	lsls	r3, r2, #28
 8013b64:	bf44      	itt	mi
 8013b66:	232b      	movmi	r3, #43	@ 0x2b
 8013b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8013b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b72:	d015      	beq.n	8013ba0 <_vfiprintf_r+0x120>
 8013b74:	9a07      	ldr	r2, [sp, #28]
 8013b76:	4654      	mov	r4, sl
 8013b78:	2000      	movs	r0, #0
 8013b7a:	f04f 0c0a 	mov.w	ip, #10
 8013b7e:	4621      	mov	r1, r4
 8013b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b84:	3b30      	subs	r3, #48	@ 0x30
 8013b86:	2b09      	cmp	r3, #9
 8013b88:	d94b      	bls.n	8013c22 <_vfiprintf_r+0x1a2>
 8013b8a:	b1b0      	cbz	r0, 8013bba <_vfiprintf_r+0x13a>
 8013b8c:	9207      	str	r2, [sp, #28]
 8013b8e:	e014      	b.n	8013bba <_vfiprintf_r+0x13a>
 8013b90:	eba0 0308 	sub.w	r3, r0, r8
 8013b94:	fa09 f303 	lsl.w	r3, r9, r3
 8013b98:	4313      	orrs	r3, r2
 8013b9a:	9304      	str	r3, [sp, #16]
 8013b9c:	46a2      	mov	sl, r4
 8013b9e:	e7d2      	b.n	8013b46 <_vfiprintf_r+0xc6>
 8013ba0:	9b03      	ldr	r3, [sp, #12]
 8013ba2:	1d19      	adds	r1, r3, #4
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	9103      	str	r1, [sp, #12]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	bfbb      	ittet	lt
 8013bac:	425b      	neglt	r3, r3
 8013bae:	f042 0202 	orrlt.w	r2, r2, #2
 8013bb2:	9307      	strge	r3, [sp, #28]
 8013bb4:	9307      	strlt	r3, [sp, #28]
 8013bb6:	bfb8      	it	lt
 8013bb8:	9204      	strlt	r2, [sp, #16]
 8013bba:	7823      	ldrb	r3, [r4, #0]
 8013bbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8013bbe:	d10a      	bne.n	8013bd6 <_vfiprintf_r+0x156>
 8013bc0:	7863      	ldrb	r3, [r4, #1]
 8013bc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8013bc4:	d132      	bne.n	8013c2c <_vfiprintf_r+0x1ac>
 8013bc6:	9b03      	ldr	r3, [sp, #12]
 8013bc8:	1d1a      	adds	r2, r3, #4
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	9203      	str	r2, [sp, #12]
 8013bce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013bd2:	3402      	adds	r4, #2
 8013bd4:	9305      	str	r3, [sp, #20]
 8013bd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013cac <_vfiprintf_r+0x22c>
 8013bda:	7821      	ldrb	r1, [r4, #0]
 8013bdc:	2203      	movs	r2, #3
 8013bde:	4650      	mov	r0, sl
 8013be0:	f7ec fb96 	bl	8000310 <memchr>
 8013be4:	b138      	cbz	r0, 8013bf6 <_vfiprintf_r+0x176>
 8013be6:	9b04      	ldr	r3, [sp, #16]
 8013be8:	eba0 000a 	sub.w	r0, r0, sl
 8013bec:	2240      	movs	r2, #64	@ 0x40
 8013bee:	4082      	lsls	r2, r0
 8013bf0:	4313      	orrs	r3, r2
 8013bf2:	3401      	adds	r4, #1
 8013bf4:	9304      	str	r3, [sp, #16]
 8013bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bfa:	4829      	ldr	r0, [pc, #164]	@ (8013ca0 <_vfiprintf_r+0x220>)
 8013bfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013c00:	2206      	movs	r2, #6
 8013c02:	f7ec fb85 	bl	8000310 <memchr>
 8013c06:	2800      	cmp	r0, #0
 8013c08:	d03f      	beq.n	8013c8a <_vfiprintf_r+0x20a>
 8013c0a:	4b26      	ldr	r3, [pc, #152]	@ (8013ca4 <_vfiprintf_r+0x224>)
 8013c0c:	bb1b      	cbnz	r3, 8013c56 <_vfiprintf_r+0x1d6>
 8013c0e:	9b03      	ldr	r3, [sp, #12]
 8013c10:	3307      	adds	r3, #7
 8013c12:	f023 0307 	bic.w	r3, r3, #7
 8013c16:	3308      	adds	r3, #8
 8013c18:	9303      	str	r3, [sp, #12]
 8013c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c1c:	443b      	add	r3, r7
 8013c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c20:	e76a      	b.n	8013af8 <_vfiprintf_r+0x78>
 8013c22:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c26:	460c      	mov	r4, r1
 8013c28:	2001      	movs	r0, #1
 8013c2a:	e7a8      	b.n	8013b7e <_vfiprintf_r+0xfe>
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	3401      	adds	r4, #1
 8013c30:	9305      	str	r3, [sp, #20]
 8013c32:	4619      	mov	r1, r3
 8013c34:	f04f 0c0a 	mov.w	ip, #10
 8013c38:	4620      	mov	r0, r4
 8013c3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c3e:	3a30      	subs	r2, #48	@ 0x30
 8013c40:	2a09      	cmp	r2, #9
 8013c42:	d903      	bls.n	8013c4c <_vfiprintf_r+0x1cc>
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d0c6      	beq.n	8013bd6 <_vfiprintf_r+0x156>
 8013c48:	9105      	str	r1, [sp, #20]
 8013c4a:	e7c4      	b.n	8013bd6 <_vfiprintf_r+0x156>
 8013c4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c50:	4604      	mov	r4, r0
 8013c52:	2301      	movs	r3, #1
 8013c54:	e7f0      	b.n	8013c38 <_vfiprintf_r+0x1b8>
 8013c56:	ab03      	add	r3, sp, #12
 8013c58:	9300      	str	r3, [sp, #0]
 8013c5a:	462a      	mov	r2, r5
 8013c5c:	4b12      	ldr	r3, [pc, #72]	@ (8013ca8 <_vfiprintf_r+0x228>)
 8013c5e:	a904      	add	r1, sp, #16
 8013c60:	4630      	mov	r0, r6
 8013c62:	f7fd fc59 	bl	8011518 <_printf_float>
 8013c66:	4607      	mov	r7, r0
 8013c68:	1c78      	adds	r0, r7, #1
 8013c6a:	d1d6      	bne.n	8013c1a <_vfiprintf_r+0x19a>
 8013c6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013c6e:	07d9      	lsls	r1, r3, #31
 8013c70:	d405      	bmi.n	8013c7e <_vfiprintf_r+0x1fe>
 8013c72:	89ab      	ldrh	r3, [r5, #12]
 8013c74:	059a      	lsls	r2, r3, #22
 8013c76:	d402      	bmi.n	8013c7e <_vfiprintf_r+0x1fe>
 8013c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013c7a:	f7fe f999 	bl	8011fb0 <__retarget_lock_release_recursive>
 8013c7e:	89ab      	ldrh	r3, [r5, #12]
 8013c80:	065b      	lsls	r3, r3, #25
 8013c82:	f53f af1f 	bmi.w	8013ac4 <_vfiprintf_r+0x44>
 8013c86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013c88:	e71e      	b.n	8013ac8 <_vfiprintf_r+0x48>
 8013c8a:	ab03      	add	r3, sp, #12
 8013c8c:	9300      	str	r3, [sp, #0]
 8013c8e:	462a      	mov	r2, r5
 8013c90:	4b05      	ldr	r3, [pc, #20]	@ (8013ca8 <_vfiprintf_r+0x228>)
 8013c92:	a904      	add	r1, sp, #16
 8013c94:	4630      	mov	r0, r6
 8013c96:	f7fd fec7 	bl	8011a28 <_printf_i>
 8013c9a:	e7e4      	b.n	8013c66 <_vfiprintf_r+0x1e6>
 8013c9c:	08014238 	.word	0x08014238
 8013ca0:	08014242 	.word	0x08014242
 8013ca4:	08011519 	.word	0x08011519
 8013ca8:	08013a5d 	.word	0x08013a5d
 8013cac:	0801423e 	.word	0x0801423e

08013cb0 <__swbuf_r>:
 8013cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cb2:	460e      	mov	r6, r1
 8013cb4:	4614      	mov	r4, r2
 8013cb6:	4605      	mov	r5, r0
 8013cb8:	b118      	cbz	r0, 8013cc2 <__swbuf_r+0x12>
 8013cba:	6a03      	ldr	r3, [r0, #32]
 8013cbc:	b90b      	cbnz	r3, 8013cc2 <__swbuf_r+0x12>
 8013cbe:	f7fe f85f 	bl	8011d80 <__sinit>
 8013cc2:	69a3      	ldr	r3, [r4, #24]
 8013cc4:	60a3      	str	r3, [r4, #8]
 8013cc6:	89a3      	ldrh	r3, [r4, #12]
 8013cc8:	071a      	lsls	r2, r3, #28
 8013cca:	d501      	bpl.n	8013cd0 <__swbuf_r+0x20>
 8013ccc:	6923      	ldr	r3, [r4, #16]
 8013cce:	b943      	cbnz	r3, 8013ce2 <__swbuf_r+0x32>
 8013cd0:	4621      	mov	r1, r4
 8013cd2:	4628      	mov	r0, r5
 8013cd4:	f000 f82a 	bl	8013d2c <__swsetup_r>
 8013cd8:	b118      	cbz	r0, 8013ce2 <__swbuf_r+0x32>
 8013cda:	f04f 37ff 	mov.w	r7, #4294967295
 8013cde:	4638      	mov	r0, r7
 8013ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ce2:	6823      	ldr	r3, [r4, #0]
 8013ce4:	6922      	ldr	r2, [r4, #16]
 8013ce6:	1a98      	subs	r0, r3, r2
 8013ce8:	6963      	ldr	r3, [r4, #20]
 8013cea:	b2f6      	uxtb	r6, r6
 8013cec:	4283      	cmp	r3, r0
 8013cee:	4637      	mov	r7, r6
 8013cf0:	dc05      	bgt.n	8013cfe <__swbuf_r+0x4e>
 8013cf2:	4621      	mov	r1, r4
 8013cf4:	4628      	mov	r0, r5
 8013cf6:	f7ff fda7 	bl	8013848 <_fflush_r>
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	d1ed      	bne.n	8013cda <__swbuf_r+0x2a>
 8013cfe:	68a3      	ldr	r3, [r4, #8]
 8013d00:	3b01      	subs	r3, #1
 8013d02:	60a3      	str	r3, [r4, #8]
 8013d04:	6823      	ldr	r3, [r4, #0]
 8013d06:	1c5a      	adds	r2, r3, #1
 8013d08:	6022      	str	r2, [r4, #0]
 8013d0a:	701e      	strb	r6, [r3, #0]
 8013d0c:	6962      	ldr	r2, [r4, #20]
 8013d0e:	1c43      	adds	r3, r0, #1
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d004      	beq.n	8013d1e <__swbuf_r+0x6e>
 8013d14:	89a3      	ldrh	r3, [r4, #12]
 8013d16:	07db      	lsls	r3, r3, #31
 8013d18:	d5e1      	bpl.n	8013cde <__swbuf_r+0x2e>
 8013d1a:	2e0a      	cmp	r6, #10
 8013d1c:	d1df      	bne.n	8013cde <__swbuf_r+0x2e>
 8013d1e:	4621      	mov	r1, r4
 8013d20:	4628      	mov	r0, r5
 8013d22:	f7ff fd91 	bl	8013848 <_fflush_r>
 8013d26:	2800      	cmp	r0, #0
 8013d28:	d0d9      	beq.n	8013cde <__swbuf_r+0x2e>
 8013d2a:	e7d6      	b.n	8013cda <__swbuf_r+0x2a>

08013d2c <__swsetup_r>:
 8013d2c:	b538      	push	{r3, r4, r5, lr}
 8013d2e:	4b29      	ldr	r3, [pc, #164]	@ (8013dd4 <__swsetup_r+0xa8>)
 8013d30:	4605      	mov	r5, r0
 8013d32:	6818      	ldr	r0, [r3, #0]
 8013d34:	460c      	mov	r4, r1
 8013d36:	b118      	cbz	r0, 8013d40 <__swsetup_r+0x14>
 8013d38:	6a03      	ldr	r3, [r0, #32]
 8013d3a:	b90b      	cbnz	r3, 8013d40 <__swsetup_r+0x14>
 8013d3c:	f7fe f820 	bl	8011d80 <__sinit>
 8013d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d44:	0719      	lsls	r1, r3, #28
 8013d46:	d422      	bmi.n	8013d8e <__swsetup_r+0x62>
 8013d48:	06da      	lsls	r2, r3, #27
 8013d4a:	d407      	bmi.n	8013d5c <__swsetup_r+0x30>
 8013d4c:	2209      	movs	r2, #9
 8013d4e:	602a      	str	r2, [r5, #0]
 8013d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d54:	81a3      	strh	r3, [r4, #12]
 8013d56:	f04f 30ff 	mov.w	r0, #4294967295
 8013d5a:	e033      	b.n	8013dc4 <__swsetup_r+0x98>
 8013d5c:	0758      	lsls	r0, r3, #29
 8013d5e:	d512      	bpl.n	8013d86 <__swsetup_r+0x5a>
 8013d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013d62:	b141      	cbz	r1, 8013d76 <__swsetup_r+0x4a>
 8013d64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013d68:	4299      	cmp	r1, r3
 8013d6a:	d002      	beq.n	8013d72 <__swsetup_r+0x46>
 8013d6c:	4628      	mov	r0, r5
 8013d6e:	f7fe ff0d 	bl	8012b8c <_free_r>
 8013d72:	2300      	movs	r3, #0
 8013d74:	6363      	str	r3, [r4, #52]	@ 0x34
 8013d76:	89a3      	ldrh	r3, [r4, #12]
 8013d78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013d7c:	81a3      	strh	r3, [r4, #12]
 8013d7e:	2300      	movs	r3, #0
 8013d80:	6063      	str	r3, [r4, #4]
 8013d82:	6923      	ldr	r3, [r4, #16]
 8013d84:	6023      	str	r3, [r4, #0]
 8013d86:	89a3      	ldrh	r3, [r4, #12]
 8013d88:	f043 0308 	orr.w	r3, r3, #8
 8013d8c:	81a3      	strh	r3, [r4, #12]
 8013d8e:	6923      	ldr	r3, [r4, #16]
 8013d90:	b94b      	cbnz	r3, 8013da6 <__swsetup_r+0x7a>
 8013d92:	89a3      	ldrh	r3, [r4, #12]
 8013d94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013d9c:	d003      	beq.n	8013da6 <__swsetup_r+0x7a>
 8013d9e:	4621      	mov	r1, r4
 8013da0:	4628      	mov	r0, r5
 8013da2:	f000 f883 	bl	8013eac <__smakebuf_r>
 8013da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013daa:	f013 0201 	ands.w	r2, r3, #1
 8013dae:	d00a      	beq.n	8013dc6 <__swsetup_r+0x9a>
 8013db0:	2200      	movs	r2, #0
 8013db2:	60a2      	str	r2, [r4, #8]
 8013db4:	6962      	ldr	r2, [r4, #20]
 8013db6:	4252      	negs	r2, r2
 8013db8:	61a2      	str	r2, [r4, #24]
 8013dba:	6922      	ldr	r2, [r4, #16]
 8013dbc:	b942      	cbnz	r2, 8013dd0 <__swsetup_r+0xa4>
 8013dbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013dc2:	d1c5      	bne.n	8013d50 <__swsetup_r+0x24>
 8013dc4:	bd38      	pop	{r3, r4, r5, pc}
 8013dc6:	0799      	lsls	r1, r3, #30
 8013dc8:	bf58      	it	pl
 8013dca:	6962      	ldrpl	r2, [r4, #20]
 8013dcc:	60a2      	str	r2, [r4, #8]
 8013dce:	e7f4      	b.n	8013dba <__swsetup_r+0x8e>
 8013dd0:	2000      	movs	r0, #0
 8013dd2:	e7f7      	b.n	8013dc4 <__swsetup_r+0x98>
 8013dd4:	24000110 	.word	0x24000110

08013dd8 <_raise_r>:
 8013dd8:	291f      	cmp	r1, #31
 8013dda:	b538      	push	{r3, r4, r5, lr}
 8013ddc:	4605      	mov	r5, r0
 8013dde:	460c      	mov	r4, r1
 8013de0:	d904      	bls.n	8013dec <_raise_r+0x14>
 8013de2:	2316      	movs	r3, #22
 8013de4:	6003      	str	r3, [r0, #0]
 8013de6:	f04f 30ff 	mov.w	r0, #4294967295
 8013dea:	bd38      	pop	{r3, r4, r5, pc}
 8013dec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013dee:	b112      	cbz	r2, 8013df6 <_raise_r+0x1e>
 8013df0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013df4:	b94b      	cbnz	r3, 8013e0a <_raise_r+0x32>
 8013df6:	4628      	mov	r0, r5
 8013df8:	f000 f830 	bl	8013e5c <_getpid_r>
 8013dfc:	4622      	mov	r2, r4
 8013dfe:	4601      	mov	r1, r0
 8013e00:	4628      	mov	r0, r5
 8013e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e06:	f000 b817 	b.w	8013e38 <_kill_r>
 8013e0a:	2b01      	cmp	r3, #1
 8013e0c:	d00a      	beq.n	8013e24 <_raise_r+0x4c>
 8013e0e:	1c59      	adds	r1, r3, #1
 8013e10:	d103      	bne.n	8013e1a <_raise_r+0x42>
 8013e12:	2316      	movs	r3, #22
 8013e14:	6003      	str	r3, [r0, #0]
 8013e16:	2001      	movs	r0, #1
 8013e18:	e7e7      	b.n	8013dea <_raise_r+0x12>
 8013e1a:	2100      	movs	r1, #0
 8013e1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013e20:	4620      	mov	r0, r4
 8013e22:	4798      	blx	r3
 8013e24:	2000      	movs	r0, #0
 8013e26:	e7e0      	b.n	8013dea <_raise_r+0x12>

08013e28 <raise>:
 8013e28:	4b02      	ldr	r3, [pc, #8]	@ (8013e34 <raise+0xc>)
 8013e2a:	4601      	mov	r1, r0
 8013e2c:	6818      	ldr	r0, [r3, #0]
 8013e2e:	f7ff bfd3 	b.w	8013dd8 <_raise_r>
 8013e32:	bf00      	nop
 8013e34:	24000110 	.word	0x24000110

08013e38 <_kill_r>:
 8013e38:	b538      	push	{r3, r4, r5, lr}
 8013e3a:	4d07      	ldr	r5, [pc, #28]	@ (8013e58 <_kill_r+0x20>)
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	4604      	mov	r4, r0
 8013e40:	4608      	mov	r0, r1
 8013e42:	4611      	mov	r1, r2
 8013e44:	602b      	str	r3, [r5, #0]
 8013e46:	f7ed ff67 	bl	8001d18 <_kill>
 8013e4a:	1c43      	adds	r3, r0, #1
 8013e4c:	d102      	bne.n	8013e54 <_kill_r+0x1c>
 8013e4e:	682b      	ldr	r3, [r5, #0]
 8013e50:	b103      	cbz	r3, 8013e54 <_kill_r+0x1c>
 8013e52:	6023      	str	r3, [r4, #0]
 8013e54:	bd38      	pop	{r3, r4, r5, pc}
 8013e56:	bf00      	nop
 8013e58:	24003610 	.word	0x24003610

08013e5c <_getpid_r>:
 8013e5c:	f7ed bf54 	b.w	8001d08 <_getpid>

08013e60 <__swhatbuf_r>:
 8013e60:	b570      	push	{r4, r5, r6, lr}
 8013e62:	460c      	mov	r4, r1
 8013e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e68:	2900      	cmp	r1, #0
 8013e6a:	b096      	sub	sp, #88	@ 0x58
 8013e6c:	4615      	mov	r5, r2
 8013e6e:	461e      	mov	r6, r3
 8013e70:	da0d      	bge.n	8013e8e <__swhatbuf_r+0x2e>
 8013e72:	89a3      	ldrh	r3, [r4, #12]
 8013e74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013e78:	f04f 0100 	mov.w	r1, #0
 8013e7c:	bf14      	ite	ne
 8013e7e:	2340      	movne	r3, #64	@ 0x40
 8013e80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013e84:	2000      	movs	r0, #0
 8013e86:	6031      	str	r1, [r6, #0]
 8013e88:	602b      	str	r3, [r5, #0]
 8013e8a:	b016      	add	sp, #88	@ 0x58
 8013e8c:	bd70      	pop	{r4, r5, r6, pc}
 8013e8e:	466a      	mov	r2, sp
 8013e90:	f000 f848 	bl	8013f24 <_fstat_r>
 8013e94:	2800      	cmp	r0, #0
 8013e96:	dbec      	blt.n	8013e72 <__swhatbuf_r+0x12>
 8013e98:	9901      	ldr	r1, [sp, #4]
 8013e9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013e9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013ea2:	4259      	negs	r1, r3
 8013ea4:	4159      	adcs	r1, r3
 8013ea6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013eaa:	e7eb      	b.n	8013e84 <__swhatbuf_r+0x24>

08013eac <__smakebuf_r>:
 8013eac:	898b      	ldrh	r3, [r1, #12]
 8013eae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013eb0:	079d      	lsls	r5, r3, #30
 8013eb2:	4606      	mov	r6, r0
 8013eb4:	460c      	mov	r4, r1
 8013eb6:	d507      	bpl.n	8013ec8 <__smakebuf_r+0x1c>
 8013eb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013ebc:	6023      	str	r3, [r4, #0]
 8013ebe:	6123      	str	r3, [r4, #16]
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	6163      	str	r3, [r4, #20]
 8013ec4:	b003      	add	sp, #12
 8013ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ec8:	ab01      	add	r3, sp, #4
 8013eca:	466a      	mov	r2, sp
 8013ecc:	f7ff ffc8 	bl	8013e60 <__swhatbuf_r>
 8013ed0:	9f00      	ldr	r7, [sp, #0]
 8013ed2:	4605      	mov	r5, r0
 8013ed4:	4639      	mov	r1, r7
 8013ed6:	4630      	mov	r0, r6
 8013ed8:	f7fe fecc 	bl	8012c74 <_malloc_r>
 8013edc:	b948      	cbnz	r0, 8013ef2 <__smakebuf_r+0x46>
 8013ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ee2:	059a      	lsls	r2, r3, #22
 8013ee4:	d4ee      	bmi.n	8013ec4 <__smakebuf_r+0x18>
 8013ee6:	f023 0303 	bic.w	r3, r3, #3
 8013eea:	f043 0302 	orr.w	r3, r3, #2
 8013eee:	81a3      	strh	r3, [r4, #12]
 8013ef0:	e7e2      	b.n	8013eb8 <__smakebuf_r+0xc>
 8013ef2:	89a3      	ldrh	r3, [r4, #12]
 8013ef4:	6020      	str	r0, [r4, #0]
 8013ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013efa:	81a3      	strh	r3, [r4, #12]
 8013efc:	9b01      	ldr	r3, [sp, #4]
 8013efe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013f02:	b15b      	cbz	r3, 8013f1c <__smakebuf_r+0x70>
 8013f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f08:	4630      	mov	r0, r6
 8013f0a:	f000 f81d 	bl	8013f48 <_isatty_r>
 8013f0e:	b128      	cbz	r0, 8013f1c <__smakebuf_r+0x70>
 8013f10:	89a3      	ldrh	r3, [r4, #12]
 8013f12:	f023 0303 	bic.w	r3, r3, #3
 8013f16:	f043 0301 	orr.w	r3, r3, #1
 8013f1a:	81a3      	strh	r3, [r4, #12]
 8013f1c:	89a3      	ldrh	r3, [r4, #12]
 8013f1e:	431d      	orrs	r5, r3
 8013f20:	81a5      	strh	r5, [r4, #12]
 8013f22:	e7cf      	b.n	8013ec4 <__smakebuf_r+0x18>

08013f24 <_fstat_r>:
 8013f24:	b538      	push	{r3, r4, r5, lr}
 8013f26:	4d07      	ldr	r5, [pc, #28]	@ (8013f44 <_fstat_r+0x20>)
 8013f28:	2300      	movs	r3, #0
 8013f2a:	4604      	mov	r4, r0
 8013f2c:	4608      	mov	r0, r1
 8013f2e:	4611      	mov	r1, r2
 8013f30:	602b      	str	r3, [r5, #0]
 8013f32:	f7ed ff51 	bl	8001dd8 <_fstat>
 8013f36:	1c43      	adds	r3, r0, #1
 8013f38:	d102      	bne.n	8013f40 <_fstat_r+0x1c>
 8013f3a:	682b      	ldr	r3, [r5, #0]
 8013f3c:	b103      	cbz	r3, 8013f40 <_fstat_r+0x1c>
 8013f3e:	6023      	str	r3, [r4, #0]
 8013f40:	bd38      	pop	{r3, r4, r5, pc}
 8013f42:	bf00      	nop
 8013f44:	24003610 	.word	0x24003610

08013f48 <_isatty_r>:
 8013f48:	b538      	push	{r3, r4, r5, lr}
 8013f4a:	4d06      	ldr	r5, [pc, #24]	@ (8013f64 <_isatty_r+0x1c>)
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	4604      	mov	r4, r0
 8013f50:	4608      	mov	r0, r1
 8013f52:	602b      	str	r3, [r5, #0]
 8013f54:	f7ed ff50 	bl	8001df8 <_isatty>
 8013f58:	1c43      	adds	r3, r0, #1
 8013f5a:	d102      	bne.n	8013f62 <_isatty_r+0x1a>
 8013f5c:	682b      	ldr	r3, [r5, #0]
 8013f5e:	b103      	cbz	r3, 8013f62 <_isatty_r+0x1a>
 8013f60:	6023      	str	r3, [r4, #0]
 8013f62:	bd38      	pop	{r3, r4, r5, pc}
 8013f64:	24003610 	.word	0x24003610

08013f68 <_init>:
 8013f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f6a:	bf00      	nop
 8013f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f6e:	bc08      	pop	{r3}
 8013f70:	469e      	mov	lr, r3
 8013f72:	4770      	bx	lr

08013f74 <_fini>:
 8013f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f76:	bf00      	nop
 8013f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f7a:	bc08      	pop	{r3}
 8013f7c:	469e      	mov	lr, r3
 8013f7e:	4770      	bx	lr
