
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cdd0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e90  0801d0a0  0801d0a0  0001e0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801df30  0801df30  0001ef30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801df38  0801df38  0001ef38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801df3c  0801df3c  0001ef3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  0801df40  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000060a0  240002cc  0801e20c  0001f2cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400636c  0801e20c  0001f36c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001f2cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039f7d  00000000  00000000  0001f2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007349  00000000  00000000  00059277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002908  00000000  00000000  000605c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fc4  00000000  00000000  00062ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e669  00000000  00000000  00064e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003dc09  00000000  00000000  000a34f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172e2e  00000000  00000000  000e10fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00253f2c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c490  00000000  00000000  00253f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000000a6  00000000  00000000  00260400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000072  00000000  00000000  002604a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801d088 	.word	0x0801d088

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	0801d088 	.word	0x0801d088

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <LSM6DS3_Init>:

void LSM6DS3_Init(LSM6DS3* sensor, LSM6DS3_Config* config, SPI_HandleTypeDef* spi,  /* set the configuration parameters that need to be set once */
		GPIO_TypeDef* cs_port, uint16_t cs_pin,
		GPIO_TypeDef* int1_port, uint16_t int1_pin,
		GPIO_TypeDef* int2_port, uint16_t int2_pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	sensor->config = config;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	61da      	str	r2, [r3, #28]
	sensor->spi = spi;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	sensor->cs_port = cs_port;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
	sensor->cs_pin = cs_pin;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	811a      	strh	r2, [r3, #8]
	sensor->int1_port = int1_port;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	60da      	str	r2, [r3, #12]
	sensor->int1_pin = int1_pin;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8c3a      	ldrh	r2, [r7, #32]
 8000ae8:	821a      	strh	r2, [r3, #16]
	sensor->int2_port = int2_port;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aee:	615a      	str	r2, [r3, #20]
	sensor->int2_pin = int2_pin;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000af4:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000af6:	8b3b      	ldrh	r3, [r7, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f00a fb9b 	bl	800b238 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop

08000b0c <LSM6DS3_TestCommunication>:


uint32_t LSM6DS3_TestCommunication(LSM6DS3* sensor)  /* check that the sensor is connected by querying its device ID */
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t reg_data;
	HAL_StatusTypeDef status = LSM6DS3_ReadRegister(sensor, LSM6DS3_REG_WHO_AM_I, &reg_data);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	461a      	mov	r2, r3
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fadf 	bl	80010e0 <LSM6DS3_ReadRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK && reg_data == LSM6DS3_DEVICE_ID)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000b30:	d101      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
		return 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LSM6DS3_TestCommunication+0x2c>
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LSM6DS3_Configure>:

/* configure the sensor */
/* this should be called each time we change a sensor setting so the chip can be updated */
void LSM6DS3_Configure(LSM6DS3* sensor)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	LSM6DS3_StopAccel(sensor);  /* disable the sensor before messing with the parameters */
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f9a9 	bl	8000ea0 <LSM6DS3_StopAccel>
	LSM6DS3_StopGyro(sensor);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f9b4 	bl	8000ebc <LSM6DS3_StopGyro>

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT1_CTRL, 0x01);  /* INT1 set when accel data ready (p. 59) */
 8000b54:	2201      	movs	r2, #1
 8000b56:	210d      	movs	r1, #13
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 faf5 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT2_CTRL, 0x02);  /* INT2 set when gyro data ready (p. 60) */
 8000b5e:	2202      	movs	r2, #2
 8000b60:	210e      	movs	r1, #14
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 faf0 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL4_C, 0b00000100);  /* disable the I2C interface, also disables the gyro LPF1 (p. 64) */
 8000b68:	2204      	movs	r2, #4
 8000b6a:	2113      	movs	r1, #19
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 faeb 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL6_C, 0b00000000);  /* sets the user offset weights to 2^(-10) g/LSB and the gyro LPF bandwidth (p. 66) */
 8000b72:	2200      	movs	r2, #0
 8000b74:	2115      	movs	r1, #21
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fae6 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL7_G, 0b00000000);  /* disables the gyro HPF (p. 67) */
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2116      	movs	r1, #22
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fae1 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL8_XL, 0b00000000);  /* acceleration filters, configured to keep us on the LPF1 path (p. 67) */
 8000b86:	2200      	movs	r2, #0
 8000b88:	2117      	movs	r1, #23
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fadc 	bl	8001148 <LSM6DS3_WriteRegister>

	LSM6DS3_WriteOffsets(sensor);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f805 	bl	8000ba0 <LSM6DS3_WriteOffsets>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop

08000ba0 <LSM6DS3_WriteOffsets>:


void LSM6DS3_WriteOffsets(LSM6DS3* sensor)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	/* x, y, z are the DC offsets of the sensor in g */
	/* this function will write to the user offset registers of the accelerometer chip to correct the offset */
	/* we assume the weight of the user offsets is 2^(-10) g/LSB */

	int8_t x_b = (int8_t)(sensor->config->usr_offset_x / 0.0009765625f);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	ed93 7a00 	vldr	s14, [r3]
 8000bb0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bbc:	edc7 7a00 	vstr	s15, [r7]
 8000bc0:	783b      	ldrb	r3, [r7, #0]
 8000bc2:	73fb      	strb	r3, [r7, #15]
	int8_t y_b = (int8_t)(sensor->config->usr_offset_y / 0.0009765625f);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000bcc:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bd8:	edc7 7a00 	vstr	s15, [r7]
 8000bdc:	783b      	ldrb	r3, [r7, #0]
 8000bde:	73bb      	strb	r3, [r7, #14]
	int8_t z_b = (int8_t)(sensor->config->usr_offset_z / 0.0009765625f);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	ed93 7a02 	vldr	s14, [r3, #8]
 8000be8:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf4:	edc7 7a00 	vstr	s15, [r7]
 8000bf8:	783b      	ldrb	r3, [r7, #0]
 8000bfa:	737b      	strb	r3, [r7, #13]

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_X_OFS_USR, x_b);
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2173      	movs	r1, #115	@ 0x73
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 faa0 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Y_OFS_USR, y_b);
 8000c08:	7bbb      	ldrb	r3, [r7, #14]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2174      	movs	r1, #116	@ 0x74
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 fa9a 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Z_OFS_USR, z_b);
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	461a      	mov	r2, r3
 8000c18:	2175      	movs	r1, #117	@ 0x75
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 fa94 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	3a800000 	.word	0x3a800000

08000c2c <LSM6DS3_StartAccel>:


void LSM6DS3_StartAccel(LSM6DS3* sensor)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->accel_odr_hz)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d04d      	beq.n	8000cde <LSM6DS3_StartAccel+0xb2>
 8000c42:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d84c      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c4a:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d042      	beq.n	8000cd8 <LSM6DS3_StartAccel+0xac>
 8000c52:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d844      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c5a:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d037      	beq.n	8000cd2 <LSM6DS3_StartAccel+0xa6>
 8000c62:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d83c      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c6a:	f240 3241 	movw	r2, #833	@ 0x341
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d02c      	beq.n	8000ccc <LSM6DS3_StartAccel+0xa0>
 8000c72:	f240 3241 	movw	r2, #833	@ 0x341
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d834      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c7a:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000c7e:	d022      	beq.n	8000cc6 <LSM6DS3_StartAccel+0x9a>
 8000c80:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000c84:	d82e      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c86:	2bd0      	cmp	r3, #208	@ 0xd0
 8000c88:	d01a      	beq.n	8000cc0 <LSM6DS3_StartAccel+0x94>
 8000c8a:	2bd0      	cmp	r3, #208	@ 0xd0
 8000c8c:	d82a      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c8e:	2b68      	cmp	r3, #104	@ 0x68
 8000c90:	d013      	beq.n	8000cba <LSM6DS3_StartAccel+0x8e>
 8000c92:	2b68      	cmp	r3, #104	@ 0x68
 8000c94:	d826      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c96:	2b34      	cmp	r3, #52	@ 0x34
 8000c98:	d00c      	beq.n	8000cb4 <LSM6DS3_StartAccel+0x88>
 8000c9a:	2b34      	cmp	r3, #52	@ 0x34
 8000c9c:	d822      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c9e:	2b0d      	cmp	r3, #13
 8000ca0:	d002      	beq.n	8000ca8 <LSM6DS3_StartAccel+0x7c>
 8000ca2:	2b1a      	cmp	r3, #26
 8000ca4:	d003      	beq.n	8000cae <LSM6DS3_StartAccel+0x82>
 8000ca6:	e01d      	b.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_ACCEL_ODR_13HZ;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	73fb      	strb	r3, [r7, #15]
		break;
 8000cac:	e01d      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 26:
		odr_data = LSM6DS3_ACCEL_ODR_26HZ;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb2:	e01a      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 52:
		odr_data = LSM6DS3_ACCEL_ODR_52HZ;
 8000cb4:	2330      	movs	r3, #48	@ 0x30
 8000cb6:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb8:	e017      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 104:
		odr_data = LSM6DS3_ACCEL_ODR_104HZ;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	73fb      	strb	r3, [r7, #15]
		break;
 8000cbe:	e014      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 208:
		odr_data = LSM6DS3_ACCEL_ODR_208HZ;
 8000cc0:	2350      	movs	r3, #80	@ 0x50
 8000cc2:	73fb      	strb	r3, [r7, #15]
		break;
 8000cc4:	e011      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 416:
		odr_data = LSM6DS3_ACCEL_ODR_416HZ;
 8000cc6:	2360      	movs	r3, #96	@ 0x60
 8000cc8:	73fb      	strb	r3, [r7, #15]
		break;
 8000cca:	e00e      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 833:
		odr_data = LSM6DS3_ACCEL_ODR_833HZ;
 8000ccc:	2370      	movs	r3, #112	@ 0x70
 8000cce:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd0:	e00b      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 1660:
		odr_data = LSM6DS3_ACCEL_ODR_1660HZ;
 8000cd2:	2380      	movs	r3, #128	@ 0x80
 8000cd4:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd6:	e008      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 3330:
		odr_data = LSM6DS3_ACCEL_ODR_3330HZ;
 8000cd8:	2390      	movs	r3, #144	@ 0x90
 8000cda:	73fb      	strb	r3, [r7, #15]
		break;
 8000cdc:	e005      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 6660:
		odr_data = LSM6DS3_ACCEL_ODR_6660HZ;
 8000cde:	23a0      	movs	r3, #160	@ 0xa0
 8000ce0:	73fb      	strb	r3, [r7, #15]
		break;
 8000ce2:	e002      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	default:
		odr_data = LSM6DS3_ACCEL_ODR_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
		break;
 8000ce8:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->g_range)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	3b02      	subs	r3, #2
 8000cf2:	2b0e      	cmp	r3, #14
 8000cf4:	d82c      	bhi.n	8000d50 <LSM6DS3_StartAccel+0x124>
 8000cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cfc <LSM6DS3_StartAccel+0xd0>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d39 	.word	0x08000d39
 8000d00:	08000d51 	.word	0x08000d51
 8000d04:	08000d3f 	.word	0x08000d3f
 8000d08:	08000d51 	.word	0x08000d51
 8000d0c:	08000d51 	.word	0x08000d51
 8000d10:	08000d51 	.word	0x08000d51
 8000d14:	08000d45 	.word	0x08000d45
 8000d18:	08000d51 	.word	0x08000d51
 8000d1c:	08000d51 	.word	0x08000d51
 8000d20:	08000d51 	.word	0x08000d51
 8000d24:	08000d51 	.word	0x08000d51
 8000d28:	08000d51 	.word	0x08000d51
 8000d2c:	08000d51 	.word	0x08000d51
 8000d30:	08000d51 	.word	0x08000d51
 8000d34:	08000d4b 	.word	0x08000d4b
	{
	case 2:
		range_data = LSM6DS3_G_RANGE_2;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73bb      	strb	r3, [r7, #14]
		break;
 8000d3c:	e00b      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 4:
		range_data = LSM6DS3_G_RANGE_4;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	73bb      	strb	r3, [r7, #14]
		break;
 8000d42:	e008      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 8:
		range_data = LSM6DS3_G_RANGE_8;
 8000d44:	230c      	movs	r3, #12
 8000d46:	73bb      	strb	r3, [r7, #14]
		break;
 8000d48:	e005      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 16:
		range_data = LSM6DS3_G_RANGE_16;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	73bb      	strb	r3, [r7, #14]
		break;
 8000d4e:	e002      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	default:
		range_data = LSM6DS3_G_RANGE_2;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73bb      	strb	r3, [r7, #14]
		break;
 8000d54:	bf00      	nop
	}

	/* this register also contains LPF1_BW_SEL, here we will set BW to ODR/2 */
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, (odr_data | range_data));
 8000d56:	7bfa      	ldrb	r2, [r7, #15]
 8000d58:	7bbb      	ldrb	r3, [r7, #14]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2110      	movs	r1, #16
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 f9f0 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <LSM6DS3_StartGyro>:


void LSM6DS3_StartGyro(LSM6DS3* sensor)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->gyro_odr_hz)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d04d      	beq.n	8000e22 <LSM6DS3_StartGyro+0xb2>
 8000d86:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d84c      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000d8e:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d042      	beq.n	8000e1c <LSM6DS3_StartGyro+0xac>
 8000d96:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d844      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000d9e:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d037      	beq.n	8000e16 <LSM6DS3_StartGyro+0xa6>
 8000da6:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d83c      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dae:	f240 3241 	movw	r2, #833	@ 0x341
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d02c      	beq.n	8000e10 <LSM6DS3_StartGyro+0xa0>
 8000db6:	f240 3241 	movw	r2, #833	@ 0x341
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d834      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dbe:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000dc2:	d022      	beq.n	8000e0a <LSM6DS3_StartGyro+0x9a>
 8000dc4:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000dc8:	d82e      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dca:	2bd0      	cmp	r3, #208	@ 0xd0
 8000dcc:	d01a      	beq.n	8000e04 <LSM6DS3_StartGyro+0x94>
 8000dce:	2bd0      	cmp	r3, #208	@ 0xd0
 8000dd0:	d82a      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dd2:	2b68      	cmp	r3, #104	@ 0x68
 8000dd4:	d013      	beq.n	8000dfe <LSM6DS3_StartGyro+0x8e>
 8000dd6:	2b68      	cmp	r3, #104	@ 0x68
 8000dd8:	d826      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dda:	2b34      	cmp	r3, #52	@ 0x34
 8000ddc:	d00c      	beq.n	8000df8 <LSM6DS3_StartGyro+0x88>
 8000dde:	2b34      	cmp	r3, #52	@ 0x34
 8000de0:	d822      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000de2:	2b0d      	cmp	r3, #13
 8000de4:	d002      	beq.n	8000dec <LSM6DS3_StartGyro+0x7c>
 8000de6:	2b1a      	cmp	r3, #26
 8000de8:	d003      	beq.n	8000df2 <LSM6DS3_StartGyro+0x82>
 8000dea:	e01d      	b.n	8000e28 <LSM6DS3_StartGyro+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_GYRO_ODR_13HZ;
 8000dec:	2310      	movs	r3, #16
 8000dee:	73fb      	strb	r3, [r7, #15]
		break;
 8000df0:	e01d      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 26:
		odr_data = LSM6DS3_GYRO_ODR_26HZ;
 8000df2:	2320      	movs	r3, #32
 8000df4:	73fb      	strb	r3, [r7, #15]
		break;
 8000df6:	e01a      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 52:
		odr_data = LSM6DS3_GYRO_ODR_52HZ;
 8000df8:	2330      	movs	r3, #48	@ 0x30
 8000dfa:	73fb      	strb	r3, [r7, #15]
		break;
 8000dfc:	e017      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 104:
		odr_data = LSM6DS3_GYRO_ODR_104HZ;
 8000dfe:	2340      	movs	r3, #64	@ 0x40
 8000e00:	73fb      	strb	r3, [r7, #15]
		break;
 8000e02:	e014      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 208:
		odr_data = LSM6DS3_GYRO_ODR_208HZ;
 8000e04:	2350      	movs	r3, #80	@ 0x50
 8000e06:	73fb      	strb	r3, [r7, #15]
		break;
 8000e08:	e011      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 416:
		odr_data = LSM6DS3_GYRO_ODR_416HZ;
 8000e0a:	2360      	movs	r3, #96	@ 0x60
 8000e0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e0e:	e00e      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 833:
		odr_data = LSM6DS3_GYRO_ODR_833HZ;
 8000e10:	2370      	movs	r3, #112	@ 0x70
 8000e12:	73fb      	strb	r3, [r7, #15]
		break;
 8000e14:	e00b      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 1660:
		odr_data = LSM6DS3_GYRO_ODR_1660HZ;
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	73fb      	strb	r3, [r7, #15]
		break;
 8000e1a:	e008      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 3330:
		odr_data = LSM6DS3_GYRO_ODR_3330HZ;
 8000e1c:	2390      	movs	r3, #144	@ 0x90
 8000e1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e20:	e005      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 6660:
		odr_data = LSM6DS3_GYRO_ODR_6660HZ;
 8000e22:	23a0      	movs	r3, #160	@ 0xa0
 8000e24:	73fb      	strb	r3, [r7, #15]
		break;
 8000e26:	e002      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	default:
		odr_data = LSM6DS3_GYRO_ODR_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e2c:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->dps_range)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e38:	d01f      	beq.n	8000e7a <LSM6DS3_StartGyro+0x10a>
 8000e3a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e3e:	d81f      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e44:	d016      	beq.n	8000e74 <LSM6DS3_StartGyro+0x104>
 8000e46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e4a:	d819      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e4c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e50:	d00d      	beq.n	8000e6e <LSM6DS3_StartGyro+0xfe>
 8000e52:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e56:	d813      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e58:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e5a:	d002      	beq.n	8000e62 <LSM6DS3_StartGyro+0xf2>
 8000e5c:	2bf5      	cmp	r3, #245	@ 0xf5
 8000e5e:	d003      	beq.n	8000e68 <LSM6DS3_StartGyro+0xf8>
 8000e60:	e00e      	b.n	8000e80 <LSM6DS3_StartGyro+0x110>
	{
	case 125:
		range_data = LSM6DS3_DPS_RANGE_125;
 8000e62:	2302      	movs	r3, #2
 8000e64:	73bb      	strb	r3, [r7, #14]
		break;
 8000e66:	e00e      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 245:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73bb      	strb	r3, [r7, #14]
		break;
 8000e6c:	e00b      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 500:
		range_data = LSM6DS3_DPS_RANGE_500;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	73bb      	strb	r3, [r7, #14]
		break;
 8000e72:	e008      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 1000:
		range_data = LSM6DS3_DPS_RANGE_1000;
 8000e74:	2308      	movs	r3, #8
 8000e76:	73bb      	strb	r3, [r7, #14]
		break;
 8000e78:	e005      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 2000:
		range_data = LSM6DS3_DPS_RANGE_2000;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	73bb      	strb	r3, [r7, #14]
		break;
 8000e7e:	e002      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	default:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73bb      	strb	r3, [r7, #14]
		break;
 8000e84:	bf00      	nop
	}

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, (odr_data | range_data));
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2111      	movs	r1, #17
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f958 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <LSM6DS3_StopAccel>:


void LSM6DS3_StopAccel(LSM6DS3* sensor)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, LSM6DS3_ACCEL_ODR_DISABLE);  /* power down accel. (p. 61) */
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f94b 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop

08000ebc <LSM6DS3_StopGyro>:


void LSM6DS3_StopGyro(LSM6DS3* sensor)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, LSM6DS3_GYRO_ODR_DISABLE);  /* power down gyro. (p. 62) */
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2111      	movs	r1, #17
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f93d 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop

08000ed8 <LSM6DS3_ReadAccel>:


void LSM6DS3_ReadAccel(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08d      	sub	sp, #52	@ 0x34
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
	/* get the acceleration in g */

	/* read multiple bytes corresponding to the raw accelerometer data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_XL | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8000fd4 <LSM6DS3_ReadAccel+0xfc>)
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef0:	6018      	str	r0, [r3, #0]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	8019      	strh	r1, [r3, #0]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	0c0a      	lsrs	r2, r1, #16
 8000efa:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681c      	ldr	r4, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	8912      	ldrh	r2, [r2, #8]
 8000f0a:	f107 0110 	add.w	r1, r7, #16
 8000f0e:	f107 0018 	add.w	r0, r7, #24
 8000f12:	9201      	str	r2, [sp, #4]
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	4623      	mov	r3, r4
 8000f18:	2207      	movs	r2, #7
 8000f1a:	f000 f941 	bl	80011a0 <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8000f1e:	7c7b      	ldrb	r3, [r7, #17]
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	7cbb      	ldrb	r3, [r7, #18]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8000f2c:	7cfb      	ldrb	r3, [r7, #19]
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	7d3b      	ldrb	r3, [r7, #20]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 8000f3a:	7d7b      	ldrb	r3, [r7, #21]
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	7dbb      	ldrb	r3, [r7, #22]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	847b      	strh	r3, [r7, #34]	@ 0x22

	*x = sensor->config->g_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f66:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8000fd8 <LSM6DS3_ReadAccel+0x100>
 8000f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	edc3 7a00 	vstr	s15, [r3]
	*y = sensor->config->g_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f82:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f92:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fd8 <LSM6DS3_ReadAccel+0x100>
 8000f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	edc3 7a00 	vstr	s15, [r3]
	*z = sensor->config->g_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fbe:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8000fd8 <LSM6DS3_ReadAccel+0x100>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	edc3 7a00 	vstr	s15, [r3]

}
 8000fcc:	bf00      	nop
 8000fce:	372c      	adds	r7, #44	@ 0x2c
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	0801d0a0 	.word	0x0801d0a0
 8000fd8:	47000000 	.word	0x47000000

08000fdc <LSM6DS3_ReadGyro>:


void LSM6DS3_ReadGyro(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b08d      	sub	sp, #52	@ 0x34
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
	/* get the rotation rate in degrees per second */

	/* read multiple bytes corresponding to the raw gyroscope data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_G | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000fea:	4a3b      	ldr	r2, [pc, #236]	@ (80010d8 <LSM6DS3_ReadGyro+0xfc>)
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff4:	6018      	str	r0, [r3, #0]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	8019      	strh	r1, [r3, #0]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	0c0a      	lsrs	r2, r1, #16
 8000ffe:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681c      	ldr	r4, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	8912      	ldrh	r2, [r2, #8]
 800100e:	f107 0110 	add.w	r1, r7, #16
 8001012:	f107 0018 	add.w	r0, r7, #24
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	4623      	mov	r3, r4
 800101c:	2207      	movs	r2, #7
 800101e:	f000 f8bf 	bl	80011a0 <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8001022:	7c7b      	ldrb	r3, [r7, #17]
 8001024:	b21a      	sxth	r2, r3
 8001026:	7cbb      	ldrb	r3, [r7, #18]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8001030:	7cfb      	ldrb	r3, [r7, #19]
 8001032:	b21a      	sxth	r2, r3
 8001034:	7d3b      	ldrb	r3, [r7, #20]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 800103e:	7d7b      	ldrb	r3, [r7, #21]
 8001040:	b21a      	sxth	r2, r3
 8001042:	7dbb      	ldrb	r3, [r7, #22]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	847b      	strh	r3, [r7, #34]	@ 0x22

	*x = sensor->config->dps_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80010dc <LSM6DS3_ReadGyro+0x100>
 800106e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	edc3 7a00 	vstr	s15, [r3]
	*y = sensor->config->dps_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001086:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001096:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80010dc <LSM6DS3_ReadGyro+0x100>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	edc3 7a00 	vstr	s15, [r3]
	*z = sensor->config->dps_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c2:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80010dc <LSM6DS3_ReadGyro+0x100>
 80010c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	edc3 7a00 	vstr	s15, [r3]
}
 80010d0:	bf00      	nop
 80010d2:	372c      	adds	r7, #44	@ 0x2c
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd90      	pop	{r4, r7, pc}
 80010d8:	0801d0a8 	.word	0x0801d0a8
 80010dc:	47000000 	.word	0x47000000

080010e0 <LSM6DS3_ReadRegister>:



HAL_StatusTypeDef LSM6DS3_ReadRegister(LSM6DS3* sensor, uint8_t reg, uint8_t* data)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	460b      	mov	r3, r1
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_buf[2] = {(reg | 0x80), 0x00};  // set the first bit to indicate a read communication
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	753b      	strb	r3, [r7, #20]
 80010f8:	2300      	movs	r3, #0
 80010fa:	757b      	strb	r3, [r7, #21]
	uint8_t rx_buf[2];

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6858      	ldr	r0, [r3, #4]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	891b      	ldrh	r3, [r3, #8]
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	f00a f896 	bl	800b238 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(sensor->spi, tx_buf, rx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	f107 0210 	add.w	r2, r7, #16
 8001114:	f107 0114 	add.w	r1, r7, #20
 8001118:	2301      	movs	r3, #1
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2302      	movs	r3, #2
 800111e:	f00f fb39 	bl	8010794 <HAL_SPI_TransmitReceive>
 8001122:	4603      	mov	r3, r0
 8001124:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6858      	ldr	r0, [r3, #4]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	891b      	ldrh	r3, [r3, #8]
 800112e:	2201      	movs	r2, #1
 8001130:	4619      	mov	r1, r3
 8001132:	f00a f881 	bl	800b238 <HAL_GPIO_WritePin>

	*data = rx_buf[1];
 8001136:	7c7a      	ldrb	r2, [r7, #17]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	701a      	strb	r2, [r3, #0]

	return status;
 800113c:	7dfb      	ldrb	r3, [r7, #23]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop

08001148 <LSM6DS3_WriteRegister>:


HAL_StatusTypeDef LSM6DS3_WriteRegister(LSM6DS3* sensor, uint8_t reg, uint8_t data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
 8001154:	4613      	mov	r3, r2
 8001156:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buf[2] = {reg, data};
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	78bb      	ldrb	r3, [r7, #2]
 800115e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6858      	ldr	r0, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	891b      	ldrh	r3, [r3, #8]
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	f00a f864 	bl	800b238 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(sensor->spi, tx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	f107 010c 	add.w	r1, r7, #12
 8001178:	2301      	movs	r3, #1
 800117a:	2202      	movs	r2, #2
 800117c:	f00f f91c 	bl	80103b8 <HAL_SPI_Transmit>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6858      	ldr	r0, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	891b      	ldrh	r3, [r3, #8]
 800118c:	2201      	movs	r2, #1
 800118e:	4619      	mov	r1, r3
 8001190:	f00a f852 	bl	800b238 <HAL_GPIO_WritePin>

	return status;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop

080011a0 <SPI_TxRx_Fast>:
/* this uses the SPI FIFO on the H7, so it only works for transactions 16 bytes or less */
/* (the FIFO size depends on the specific SPI channel too, so check the RM) */
/* On the H723, SPI1, 2, 3 have 16 byte FIFO and SPI4, 5, 6 have 8 bytes FIFO */
/* the peripheral is configured using Cube to have 8 bit data frames and 1 data frame FIFO threshold */
__attribute__((optimize("-Ofast"))) inline void SPI_TxRx_Fast(uint8_t* tx, uint8_t* rx, uint8_t len, SPI_TypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 80011a0:	b470      	push	{r4, r5, r6}
 80011a2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80011a6:	4684      	mov	ip, r0
 80011a8:	9c03      	ldr	r4, [sp, #12]
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 80011aa:	042e      	lsls	r6, r5, #16


	/* If using both the HAL SPI functions and our own, we need the next 2 lines to put SPI in a known state */
	/* If only using our function, I think these could be omitted */
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 80011ac:	4816      	ldr	r0, [pc, #88]	@ (8001208 <SPI_TxRx_Fast+0x68>)
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 80011ae:	61a6      	str	r6, [r4, #24]
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 80011b0:	685e      	ldr	r6, [r3, #4]
 80011b2:	4030      	ands	r0, r6
 80011b4:	6058      	str	r0, [r3, #4]
	spi->CFG2 &= ~SPI_CFG2_COMM;  /* this puts the SPI in full-duplex mode (for some reason the HAL takes it out of this mode sometimes, even when it is configured in Cube as full-duplex) */
 80011b6:	68d8      	ldr	r0, [r3, #12]
 80011b8:	f420 20c0 	bic.w	r0, r0, #393216	@ 0x60000
 80011bc:	60d8      	str	r0, [r3, #12]


	spi->CR1 |= SPI_CR1_SPE;  /* enable SPI */
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f040 0001 	orr.w	r0, r0, #1
 80011c4:	6018      	str	r0, [r3, #0]
	spi->CR1 |= SPI_CR1_CSTART;  /* start transmission */
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 80011cc:	6018      	str	r0, [r3, #0]

	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 80011ce:	b1a2      	cbz	r2, 80011fa <SPI_TxRx_Fast+0x5a>
 80011d0:	eb0c 0602 	add.w	r6, ip, r2
	{
		if(((spi->SR) & SPI_SR_TXP) == SPI_SR_TXP)  /* wait until TX FIFO has enough space for a data packet */
 80011d4:	6958      	ldr	r0, [r3, #20]
 80011d6:	0780      	lsls	r0, r0, #30
 80011d8:	d5fc      	bpl.n	80011d4 <SPI_TxRx_Fast+0x34>
		   *(__IO uint8_t*)&(spi->TXDR) = tx[i++];  /* put data in TXDR */
 80011da:	f81c 0b01 	ldrb.w	r0, [ip], #1
 80011de:	45b4      	cmp	ip, r6
 80011e0:	f883 0020 	strb.w	r0, [r3, #32]
 80011e4:	d1f6      	bne.n	80011d4 <SPI_TxRx_Fast+0x34>
	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 80011e6:	440a      	add	r2, r1
	}

	for (uint8_t i = 0; i < len; )  /* read out everything from the RX buffer */
	{
		if(((spi->SR) & SPI_SR_RXP) == SPI_SR_RXP)  /* wait until RX FIFO contains a data packet */
 80011e8:	6958      	ldr	r0, [r3, #20]
 80011ea:	07c0      	lsls	r0, r0, #31
 80011ec:	d5fc      	bpl.n	80011e8 <SPI_TxRx_Fast+0x48>
			rx[i++] = *(__IO uint8_t*)&(spi->RXDR);  /* read the data from RXDR */
 80011ee:	f893 0030 	ldrb.w	r0, [r3, #48]	@ 0x30
 80011f2:	f801 0b01 	strb.w	r0, [r1], #1
 80011f6:	4291      	cmp	r1, r2
 80011f8:	d1f6      	bne.n	80011e8 <SPI_TxRx_Fast+0x48>
	}

	spi->CR1 &= ~SPI_CR1_SPE;  /* disable SPI */
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	f022 0201 	bic.w	r2, r2, #1
 8001200:	601a      	str	r2, [r3, #0]
	cs_port->BSRR = cs_pin;  /* CS high */
 8001202:	61a5      	str	r5, [r4, #24]
}
 8001204:	bc70      	pop	{r4, r5, r6}
 8001206:	4770      	bx	lr
 8001208:	ffff0000 	.word	0xffff0000

0800120c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 8001214:	4803      	ldr	r0, [pc, #12]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001216:	f004 fbd8 	bl	80059ca <VibeCheckStrobe_PeriodElapsedUpdate>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	24002dac 	.word	0x24002dac

08001228 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8001232:	f005 f9eb 	bl	800660c <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	24002dcc 	.word	0x24002dcc

08001244 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 800124e:	f005 f9f9 	bl	8006644 <VibeCheckWaveGen_DMACpltCallback>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	24002dcc 	.word	0x24002dcc

08001260 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
	VibeCheckSensor_EXTICallback(&vc.sensor, GPIO_Pin);
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4619      	mov	r1, r3
 800126e:	4803      	ldr	r0, [pc, #12]	@ (800127c <HAL_GPIO_EXTI_Callback+0x1c>)
 8001270:	f003 f97e 	bl	8004570 <VibeCheckSensor_EXTICallback>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24004398 	.word	0x24004398

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001286:	f000 ff23 	bl	80020d0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128a:	f005 fcd7 	bl	8006c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128e:	f000 f84d 	bl	800132c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001292:	f000 f8bb 	bl	800140c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001296:	f000 fdbf 	bl	8001e18 <MX_GPIO_Init>
  MX_DMA_Init();
 800129a:	f000 fd8d 	bl	8001db8 <MX_DMA_Init>
  MX_DAC1_Init();
 800129e:	f000 f9cb 	bl	8001638 <MX_DAC1_Init>
  MX_I2C2_Init();
 80012a2:	f000 fa05 	bl	80016b0 <MX_I2C2_Init>
  MX_SPI2_Init();
 80012a6:	f000 fa43 	bl	8001730 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012aa:	f000 fa97 	bl	80017dc <MX_SPI3_Init>
  MX_SPI4_Init();
 80012ae:	f000 faeb 	bl	8001888 <MX_SPI4_Init>
  MX_TIM4_Init();
 80012b2:	f000 fc6f 	bl	8001b94 <MX_TIM4_Init>
  MX_TIM3_Init();
 80012b6:	f000 fbdf 	bl	8001a78 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012ba:	f000 fd31 	bl	8001d20 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80012be:	f000 fb39 	bl	8001934 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012c2:	f000 fb8b 	bl	80019dc <MX_TIM2_Init>
  MX_ADC1_Init();
 80012c6:	f000 f8d1 	bl	800146c <MX_ADC1_Init>
  MX_ADC2_Init();
 80012ca:	f000 f94b 	bl	8001564 <MX_ADC2_Init>
  MX_UART7_Init();
 80012ce:	f000 fcd9 	bl	8001c84 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 80012d2:	f016 fa7d 	bl	80177d0 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);  /* start the timer for sensor data time stamps */
 80012d6:	480b      	ldr	r0, [pc, #44]	@ (8001304 <main+0x84>)
 80012d8:	f00f fed6 	bl	8011088 <HAL_TIM_Base_Start>
  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1, &htim4, &(TIM2->CNT), &hspi2, &hspi3, &hspi4);
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <main+0x88>)
 80012de:	9304      	str	r3, [sp, #16]
 80012e0:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <main+0x8c>)
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <main+0x90>)
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <main+0x94>)
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <main+0x98>)
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <main+0x9c>)
 80012f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <main+0xa0>)
 80012f4:	490b      	ldr	r1, [pc, #44]	@ (8001324 <main+0xa4>)
 80012f6:	480c      	ldr	r0, [pc, #48]	@ (8001328 <main+0xa8>)
 80012f8:	f001 fe40 	bl	8002f7c <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 80012fc:	480a      	ldr	r0, [pc, #40]	@ (8001328 <main+0xa8>)
 80012fe:	f002 f817 	bl	8003330 <VibeCheck_Loop>
 8001302:	e7fb      	b.n	80012fc <main+0x7c>
 8001304:	24000704 	.word	0x24000704
 8001308:	24000630 	.word	0x24000630
 800130c:	240005a8 	.word	0x240005a8
 8001310:	24000520 	.word	0x24000520
 8001314:	40000024 	.word	0x40000024
 8001318:	2400079c 	.word	0x2400079c
 800131c:	240003c8 	.word	0x240003c8
 8001320:	240006b8 	.word	0x240006b8
 8001324:	24000750 	.word	0x24000750
 8001328:	24000988 	.word	0x24000988

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b09c      	sub	sp, #112	@ 0x70
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001336:	224c      	movs	r2, #76	@ 0x4c
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f018 fb09 	bl	8019952 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2220      	movs	r2, #32
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f018 fb03 	bl	8019952 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800134c:	2002      	movs	r0, #2
 800134e:	f00b fb79 	bl	800ca44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b2c      	ldr	r3, [pc, #176]	@ (8001408 <SystemClock_Config+0xdc>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a2b      	ldr	r2, [pc, #172]	@ (8001408 <SystemClock_Config+0xdc>)
 800135c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	4b29      	ldr	r3, [pc, #164]	@ (8001408 <SystemClock_Config+0xdc>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800136e:	bf00      	nop
 8001370:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <SystemClock_Config+0xdc>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800137c:	d1f8      	bne.n	8001370 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800137e:	2321      	movs	r3, #33	@ 0x21
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001382:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138c:	2302      	movs	r3, #2
 800138e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001390:	2302      	movs	r3, #2
 8001392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001394:	2302      	movs	r3, #2
 8001396:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001398:	2328      	movs	r3, #40	@ 0x28
 800139a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800139c:	2301      	movs	r3, #1
 800139e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013a4:	2302      	movs	r3, #2
 80013a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013a8:	230c      	movs	r3, #12
 80013aa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00b fb8d 	bl	800cad8 <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013c4:	f000 feb0 	bl	8002128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	233f      	movs	r3, #63	@ 0x3f
 80013ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013cc:	2303      	movs	r3, #3
 80013ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013d4:	2308      	movs	r3, #8
 80013d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013d8:	2340      	movs	r3, #64	@ 0x40
 80013da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013dc:	2340      	movs	r3, #64	@ 0x40
 80013de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013e6:	2340      	movs	r3, #64	@ 0x40
 80013e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2103      	movs	r1, #3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00b ff4c 	bl	800d28c <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013fa:	f000 fe95 	bl	8002128 <Error_Handler>
  }
}
 80013fe:	bf00      	nop
 8001400:	3770      	adds	r7, #112	@ 0x70
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	58024800 	.word	0x58024800

0800140c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0ae      	sub	sp, #184	@ 0xb8
 8001410:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001412:	463b      	mov	r3, r7
 8001414:	22b8      	movs	r2, #184	@ 0xb8
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f018 fa9a 	bl	8019952 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800141e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800142a:	2302      	movs	r3, #2
 800142c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800142e:	2310      	movs	r3, #16
 8001430:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001432:	2302      	movs	r3, #2
 8001434:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001436:	2302      	movs	r3, #2
 8001438:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800143e:	23c0      	movs	r3, #192	@ 0xc0
 8001440:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4618      	mov	r0, r3
 8001454:	f00c faa6 	bl	800d9a4 <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800145e:	f000 fe63 	bl	8002128 <Error_Handler>
  }
}
 8001462:	bf00      	nop
 8001464:	37b8      	adds	r7, #184	@ 0xb8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	@ 0x30
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800147e:	463b      	mov	r3, r7
 8001480:	2224      	movs	r2, #36	@ 0x24
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f018 fa64 	bl	8019952 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800148a:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <MX_ADC1_Init+0xe8>)
 800148c:	4a32      	ldr	r2, [pc, #200]	@ (8001558 <MX_ADC1_Init+0xec>)
 800148e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001490:	4b30      	ldr	r3, [pc, #192]	@ (8001554 <MX_ADC1_Init+0xe8>)
 8001492:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001496:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001498:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <MX_ADC1_Init+0xe8>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800149e:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014a6:	2204      	movs	r2, #4
 80014a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014b0:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014b6:	4b27      	ldr	r3, [pc, #156]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014bc:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c4:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ca:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80014d0:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f0:	4818      	ldr	r0, [pc, #96]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014f2:	f005 fe9f 	bl	8007234 <HAL_ADC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80014fc:	f000 fe14 	bl	8002128 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	4812      	ldr	r0, [pc, #72]	@ (8001554 <MX_ADC1_Init+0xe8>)
 800150c:	f006 fede 	bl	80082cc <HAL_ADCEx_MultiModeConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001516:	f000 fe07 	bl	8002128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <MX_ADC1_Init+0xf0>)
 800151c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800151e:	2306      	movs	r3, #6
 8001520:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_ADC1_Init+0xf4>)
 8001528:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800152a:	2304      	movs	r3, #4
 800152c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_ADC1_Init+0xe8>)
 800153e:	f006 f881 	bl	8007644 <HAL_ADC_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001548:	f000 fdee 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	3730      	adds	r7, #48	@ 0x30
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	240002e8 	.word	0x240002e8
 8001558:	40022000 	.word	0x40022000
 800155c:	10c00010 	.word	0x10c00010
 8001560:	47ff0000 	.word	0x47ff0000

08001564 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2224      	movs	r2, #36	@ 0x24
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f018 f9ee 	bl	8019952 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001576:	4b2c      	ldr	r3, [pc, #176]	@ (8001628 <MX_ADC2_Init+0xc4>)
 8001578:	4a2c      	ldr	r2, [pc, #176]	@ (800162c <MX_ADC2_Init+0xc8>)
 800157a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800157c:	4b2a      	ldr	r3, [pc, #168]	@ (8001628 <MX_ADC2_Init+0xc4>)
 800157e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001582:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001584:	4b28      	ldr	r3, [pc, #160]	@ (8001628 <MX_ADC2_Init+0xc4>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800158a:	4b27      	ldr	r3, [pc, #156]	@ (8001628 <MX_ADC2_Init+0xc4>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001590:	4b25      	ldr	r3, [pc, #148]	@ (8001628 <MX_ADC2_Init+0xc4>)
 8001592:	2204      	movs	r2, #4
 8001594:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001596:	4b24      	ldr	r3, [pc, #144]	@ (8001628 <MX_ADC2_Init+0xc4>)
 8001598:	2200      	movs	r2, #0
 800159a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800159c:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <MX_ADC2_Init+0xc4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80015a2:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015d8:	2201      	movs	r2, #1
 80015da:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015dc:	4812      	ldr	r0, [pc, #72]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015de:	f005 fe29 	bl	8007234 <HAL_ADC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80015e8:	f000 fd9e 	bl	8002128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015ec:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <MX_ADC2_Init+0xcc>)
 80015ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015f0:	2306      	movs	r3, #6
 80015f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <MX_ADC2_Init+0xd0>)
 80015fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015fc:	2304      	movs	r3, #4
 80015fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	@ (8001628 <MX_ADC2_Init+0xc4>)
 8001610:	f006 f818 	bl	8007644 <HAL_ADC_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800161a:	f000 fd85 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	24000358 	.word	0x24000358
 800162c:	40022100 	.word	0x40022100
 8001630:	0c900008 	.word	0x0c900008
 8001634:	47ff0000 	.word	0x47ff0000

08001638 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2224      	movs	r2, #36	@ 0x24
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f018 f984 	bl	8019952 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <MX_DAC1_Init+0x70>)
 800164c:	4a17      	ldr	r2, [pc, #92]	@ (80016ac <MX_DAC1_Init+0x74>)
 800164e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001650:	4815      	ldr	r0, [pc, #84]	@ (80016a8 <MX_DAC1_Init+0x70>)
 8001652:	f007 f8a5 	bl	80087a0 <HAL_DAC_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800165c:	f000 fd64 	bl	8002128 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8001664:	2306      	movs	r3, #6
 8001666:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001668:	2302      	movs	r3, #2
 800166a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800166c:	2301      	movs	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	480b      	ldr	r0, [pc, #44]	@ (80016a8 <MX_DAC1_Init+0x70>)
 800167c:	f007 f97c 	bl	8008978 <HAL_DAC_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001686:	f000 fd4f 	bl	8002128 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2210      	movs	r2, #16
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_DAC1_Init+0x70>)
 8001692:	f007 f971 	bl	8008978 <HAL_DAC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800169c:	f000 fd44 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	@ 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	240003c8 	.word	0x240003c8
 80016ac:	40007400 	.word	0x40007400

080016b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001728 <MX_I2C2_Init+0x78>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016bc:	4a1b      	ldr	r2, [pc, #108]	@ (800172c <MX_I2C2_Init+0x7c>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016c0:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c6:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016cc:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016ea:	480e      	ldr	r0, [pc, #56]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016ec:	f009 fdd8 	bl	800b2a0 <HAL_I2C_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80016f6:	f000 fd17 	bl	8002128 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016fa:	2100      	movs	r1, #0
 80016fc:	4809      	ldr	r0, [pc, #36]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016fe:	f009 fe6b 	bl	800b3d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001708:	f000 fd0e 	bl	8002128 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800170c:	2100      	movs	r1, #0
 800170e:	4805      	ldr	r0, [pc, #20]	@ (8001724 <MX_I2C2_Init+0x74>)
 8001710:	f009 fead 	bl	800b46e <HAL_I2CEx_ConfigDigitalFilter>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800171a:	f000 fd05 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	240004cc 	.word	0x240004cc
 8001728:	40005800 	.word	0x40005800
 800172c:	307075b1 	.word	0x307075b1

08001730 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001734:	4b27      	ldr	r3, [pc, #156]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001736:	4a28      	ldr	r2, [pc, #160]	@ (80017d8 <MX_SPI2_Init+0xa8>)
 8001738:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800173a:	4b26      	ldr	r3, [pc, #152]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800173c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001740:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001742:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001748:	4b22      	ldr	r3, [pc, #136]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800174a:	2207      	movs	r2, #7
 800174c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174e:	4b21      	ldr	r3, [pc, #132]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001754:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800175a:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800175c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001760:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001762:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001764:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001768:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800176a:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001776:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001778:	2200      	movs	r2, #0
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800177c:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001782:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001784:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001788:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001790:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001798:	2200      	movs	r2, #0
 800179a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800179c:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 80017c2:	f00e fcd5 	bl	8010170 <HAL_SPI_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80017cc:	f000 fcac 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	24000520 	.word	0x24000520
 80017d8:	40003800 	.word	0x40003800

080017dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017e0:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <MX_SPI3_Init+0xa4>)
 80017e2:	4a28      	ldr	r2, [pc, #160]	@ (8001884 <MX_SPI3_Init+0xa8>)
 80017e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017e6:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <MX_SPI3_Init+0xa4>)
 80017e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017ee:	4b24      	ldr	r3, [pc, #144]	@ (8001880 <MX_SPI3_Init+0xa4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f4:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <MX_SPI3_Init+0xa4>)
 80017f6:	2207      	movs	r2, #7
 80017f8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017fa:	4b21      	ldr	r3, [pc, #132]	@ (8001880 <MX_SPI3_Init+0xa4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001806:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001808:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800180c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800180e:	4b1c      	ldr	r3, [pc, #112]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001810:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001814:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001816:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <MX_SPI3_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001828:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <MX_SPI3_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800182e:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001830:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001834:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001836:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001838:	2200      	movs	r2, #0
 800183a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800183c:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <MX_SPI3_Init+0xa4>)
 800183e:	2200      	movs	r2, #0
 8001840:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001842:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001844:	2200      	movs	r2, #0
 8001846:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001848:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <MX_SPI3_Init+0xa4>)
 800184a:	2200      	movs	r2, #0
 800184c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800184e:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001850:	2200      	movs	r2, #0
 8001852:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001854:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001856:	2200      	movs	r2, #0
 8001858:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <MX_SPI3_Init+0xa4>)
 800185c:	2200      	movs	r2, #0
 800185e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001860:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001862:	2200      	movs	r2, #0
 8001864:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001868:	2200      	movs	r2, #0
 800186a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800186c:	4804      	ldr	r0, [pc, #16]	@ (8001880 <MX_SPI3_Init+0xa4>)
 800186e:	f00e fc7f 	bl	8010170 <HAL_SPI_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001878:	f000 fc56 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	240005a8 	.word	0x240005a8
 8001884:	40003c00 	.word	0x40003c00

08001888 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800188c:	4b27      	ldr	r3, [pc, #156]	@ (800192c <MX_SPI4_Init+0xa4>)
 800188e:	4a28      	ldr	r2, [pc, #160]	@ (8001930 <MX_SPI4_Init+0xa8>)
 8001890:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001892:	4b26      	ldr	r3, [pc, #152]	@ (800192c <MX_SPI4_Init+0xa4>)
 8001894:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001898:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <MX_SPI4_Init+0xa4>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a0:	4b22      	ldr	r3, [pc, #136]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018a2:	2207      	movs	r2, #7
 80018a4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a6:	4b21      	ldr	r3, [pc, #132]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018b8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018bc:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80018c0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c8:	4b18      	ldr	r3, [pc, #96]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ce:	4b17      	ldr	r3, [pc, #92]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80018d4:	4b15      	ldr	r3, [pc, #84]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018da:	4b14      	ldr	r3, [pc, #80]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018e2:	4b12      	ldr	r3, [pc, #72]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ee:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001900:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <MX_SPI4_Init+0xa4>)
 8001902:	2200      	movs	r2, #0
 8001904:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <MX_SPI4_Init+0xa4>)
 8001908:	2200      	movs	r2, #0
 800190a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800190c:	4b07      	ldr	r3, [pc, #28]	@ (800192c <MX_SPI4_Init+0xa4>)
 800190e:	2200      	movs	r2, #0
 8001910:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <MX_SPI4_Init+0xa4>)
 8001914:	2200      	movs	r2, #0
 8001916:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <MX_SPI4_Init+0xa4>)
 800191a:	f00e fc29 	bl	8010170 <HAL_SPI_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001924:	f000 fc00 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	24000630 	.word	0x24000630
 8001930:	40013400 	.word	0x40013400

08001934 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001952:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 8001954:	4a20      	ldr	r2, [pc, #128]	@ (80019d8 <MX_TIM1_Init+0xa4>)
 8001956:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001958:	4b1e      	ldr	r3, [pc, #120]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 800195a:	2200      	movs	r2, #0
 800195c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195e:	4b1d      	ldr	r3, [pc, #116]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001964:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 8001966:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800196a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196c:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800197e:	4815      	ldr	r0, [pc, #84]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 8001980:	f00f fb2b 	bl	8010fda <HAL_TIM_Base_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800198a:	f000 fbcd 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001992:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	4619      	mov	r1, r3
 800199a:	480e      	ldr	r0, [pc, #56]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 800199c:	f010 fadc 	bl	8011f58 <HAL_TIM_ConfigClockSource>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80019a6:	f000 fbbf 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019aa:	2320      	movs	r3, #32
 80019ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4806      	ldr	r0, [pc, #24]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 80019bc:	f011 f91e 	bl	8012bfc <HAL_TIMEx_MasterConfigSynchronization>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80019c6:	f000 fbaf 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	240006b8 	.word	0x240006b8
 80019d8:	40010000 	.word	0x40010000

080019dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001a74 <MX_TIM2_Init+0x98>)
 80019fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a04:	22ef      	movs	r2, #239	@ 0xef
 8001a06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a16:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a22:	4814      	ldr	r0, [pc, #80]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a24:	f00f fad9 	bl	8010fda <HAL_TIM_Base_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a2e:	f000 fb7b 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480d      	ldr	r0, [pc, #52]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a40:	f010 fa8a 	bl	8011f58 <HAL_TIM_ConfigClockSource>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a4a:	f000 fb6d 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a4e:	2320      	movs	r3, #32
 8001a50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a5c:	f011 f8ce 	bl	8012bfc <HAL_TIMEx_MasterConfigSynchronization>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a66:	f000 fb5f 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	24000704 	.word	0x24000704

08001a78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	@ 0x38
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aaa:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001aac:	4a38      	ldr	r2, [pc, #224]	@ (8001b90 <MX_TIM3_Init+0x118>)
 8001aae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ab0:	4b36      	ldr	r3, [pc, #216]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	4b35      	ldr	r3, [pc, #212]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001abc:	4b33      	ldr	r3, [pc, #204]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001abe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ac2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b31      	ldr	r3, [pc, #196]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b30      	ldr	r3, [pc, #192]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ad0:	482e      	ldr	r0, [pc, #184]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001ad2:	f00f fa82 	bl	8010fda <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001adc:	f000 fb24 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ae6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aea:	4619      	mov	r1, r3
 8001aec:	4827      	ldr	r0, [pc, #156]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001aee:	f010 fa33 	bl	8011f58 <HAL_TIM_ConfigClockSource>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001af8:	f000 fb16 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001afc:	4823      	ldr	r0, [pc, #140]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001afe:	f00f fbc7 	bl	8011290 <HAL_TIM_PWM_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b08:	f000 fb0e 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	481c      	ldr	r0, [pc, #112]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001b1c:	f011 f86e 	bl	8012bfc <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b26:	f000 faff 	bl	8002128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2a:	2360      	movs	r3, #96	@ 0x60
 8001b2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4812      	ldr	r0, [pc, #72]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001b42:	f010 f8f5 	bl	8011d30 <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b4c:	f000 faec 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	2204      	movs	r2, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001b58:	f010 f8ea 	bl	8011d30 <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001b62:	f000 fae1 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b66:	463b      	mov	r3, r7
 8001b68:	2208      	movs	r2, #8
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4807      	ldr	r0, [pc, #28]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001b6e:	f010 f8df 	bl	8011d30 <HAL_TIM_PWM_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001b78:	f000 fad6 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b7c:	4803      	ldr	r0, [pc, #12]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001b7e:	f000 fee1 	bl	8002944 <HAL_TIM_MspPostInit>

}
 8001b82:	bf00      	nop
 8001b84:	3738      	adds	r7, #56	@ 0x38
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	24000750 	.word	0x24000750
 8001b90:	40000400 	.word	0x40000400

08001b94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08e      	sub	sp, #56	@ 0x38
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	615a      	str	r2, [r3, #20]
 8001bc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001c80 <MX_TIM4_Init+0xec>)
 8001bca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bd8:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001bda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be0:	4b26      	ldr	r3, [pc, #152]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be6:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bec:	4823      	ldr	r0, [pc, #140]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001bee:	f00f f9f4 	bl	8010fda <HAL_TIM_Base_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001bf8:	f000 fa96 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c06:	4619      	mov	r1, r3
 8001c08:	481c      	ldr	r0, [pc, #112]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001c0a:	f010 f9a5 	bl	8011f58 <HAL_TIM_ConfigClockSource>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001c14:	f000 fa88 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c18:	4818      	ldr	r0, [pc, #96]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001c1a:	f00f fb39 	bl	8011290 <HAL_TIM_PWM_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001c24:	f000 fa80 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	4811      	ldr	r0, [pc, #68]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001c38:	f010 ffe0 	bl	8012bfc <HAL_TIMEx_MasterConfigSynchronization>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001c42:	f000 fa71 	bl	8002128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c46:	2360      	movs	r3, #96	@ 0x60
 8001c48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c56:	463b      	mov	r3, r7
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4807      	ldr	r0, [pc, #28]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001c5e:	f010 f867 	bl	8011d30 <HAL_TIM_PWM_ConfigChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001c68:	f000 fa5e 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c6c:	4803      	ldr	r0, [pc, #12]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001c6e:	f000 fe69 	bl	8002944 <HAL_TIM_MspPostInit>

}
 8001c72:	bf00      	nop
 8001c74:	3738      	adds	r7, #56	@ 0x38
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2400079c 	.word	0x2400079c
 8001c80:	40000800 	.word	0x40000800

08001c84 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001c88:	4b23      	ldr	r3, [pc, #140]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001c8a:	4a24      	ldr	r2, [pc, #144]	@ (8001d1c <MX_UART7_Init+0x98>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001c8e:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c94:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cb0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001cb4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb6:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001cce:	4812      	ldr	r0, [pc, #72]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cd0:	f011 f84e 	bl	8012d70 <HAL_UART_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001cda:	f000 fa25 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cde:	2100      	movs	r1, #0
 8001ce0:	480d      	ldr	r0, [pc, #52]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001ce2:	f012 f95a 	bl	8013f9a <HAL_UARTEx_SetTxFifoThreshold>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001cec:	f000 fa1c 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4809      	ldr	r0, [pc, #36]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cf4:	f012 f98f 	bl	8014016 <HAL_UARTEx_SetRxFifoThreshold>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001cfe:	f000 fa13 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001d02:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001d04:	f012 f910 	bl	8013f28 <HAL_UARTEx_DisableFifoMode>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001d0e:	f000 fa0b 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	24000860 	.word	0x24000860
 8001d1c:	40007800 	.word	0x40007800

08001d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d24:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d26:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <MX_USART1_UART_Init+0x94>)
 8001d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d2a:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d44:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d46:	220c      	movs	r2, #12
 8001d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d56:	4b16      	ldr	r3, [pc, #88]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d62:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d68:	4811      	ldr	r0, [pc, #68]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d6a:	f011 f801 	bl	8012d70 <HAL_UART_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d74:	f000 f9d8 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d78:	2100      	movs	r1, #0
 8001d7a:	480d      	ldr	r0, [pc, #52]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d7c:	f012 f90d 	bl	8013f9a <HAL_UARTEx_SetTxFifoThreshold>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d86:	f000 f9cf 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4808      	ldr	r0, [pc, #32]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d8e:	f012 f942 	bl	8014016 <HAL_UARTEx_SetRxFifoThreshold>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d98:	f000 f9c6 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d9e:	f012 f8c3 	bl	8013f28 <HAL_UARTEx_DisableFifoMode>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001da8:	f000 f9be 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	240008f4 	.word	0x240008f4
 8001db4:	40011000 	.word	0x40011000

08001db8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <MX_DMA_Init+0x5c>)
 8001dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001dc4:	4a13      	ldr	r2, [pc, #76]	@ (8001e14 <MX_DMA_Init+0x5c>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <MX_DMA_Init+0x5c>)
 8001dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	200b      	movs	r0, #11
 8001de2:	f006 fc30 	bl	8008646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001de6:	200b      	movs	r0, #11
 8001de8:	f006 fc47 	bl	800867a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	200c      	movs	r0, #12
 8001df2:	f006 fc28 	bl	8008646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001df6:	200c      	movs	r0, #12
 8001df8:	f006 fc3f 	bl	800867a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	200d      	movs	r0, #13
 8001e02:	f006 fc20 	bl	8008646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e06:	200d      	movs	r0, #13
 8001e08:	f006 fc37 	bl	800867a <HAL_NVIC_EnableIRQ>

}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	58024400 	.word	0x58024400

08001e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	@ 0x30
 8001e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2e:	4ba2      	ldr	r3, [pc, #648]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e34:	4aa0      	ldr	r2, [pc, #640]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e36:	f043 0310 	orr.w	r3, r3, #16
 8001e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e3e:	4b9e      	ldr	r3, [pc, #632]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4c:	4b9a      	ldr	r3, [pc, #616]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e52:	4a99      	ldr	r2, [pc, #612]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e5c:	4b96      	ldr	r3, [pc, #600]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e6a:	4b93      	ldr	r3, [pc, #588]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	4a91      	ldr	r2, [pc, #580]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e7a:	4b8f      	ldr	r3, [pc, #572]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e88:	4b8b      	ldr	r3, [pc, #556]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	4a8a      	ldr	r2, [pc, #552]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e98:	4b87      	ldr	r3, [pc, #540]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	4b84      	ldr	r3, [pc, #528]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eac:	4a82      	ldr	r2, [pc, #520]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb6:	4b80      	ldr	r3, [pc, #512]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec4:	4b7c      	ldr	r3, [pc, #496]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eca:	4a7b      	ldr	r2, [pc, #492]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed4:	4b78      	ldr	r3, [pc, #480]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS3_GPIO_Port, ACCEL_NCS3_Pin, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2110      	movs	r1, #16
 8001ee6:	4875      	ldr	r0, [pc, #468]	@ (80020bc <MX_GPIO_Init+0x2a4>)
 8001ee8:	f009 f9a6 	bl	800b238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2104      	movs	r1, #4
 8001ef0:	4873      	ldr	r0, [pc, #460]	@ (80020c0 <MX_GPIO_Init+0x2a8>)
 8001ef2:	f009 f9a1 	bl	800b238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4872      	ldr	r0, [pc, #456]	@ (80020c4 <MX_GPIO_Init+0x2ac>)
 8001efc:	f009 f99c 	bl	800b238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	210a      	movs	r1, #10
 8001f04:	486f      	ldr	r0, [pc, #444]	@ (80020c4 <MX_GPIO_Init+0x2ac>)
 8001f06:	f009 f997 	bl	800b238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS1_GPIO_Port, ACCEL_NCS1_Pin, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f10:	486d      	ldr	r0, [pc, #436]	@ (80020c8 <MX_GPIO_Init+0x2b0>)
 8001f12:	f009 f991 	bl	800b238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS2_GPIO_Port, ACCEL_NCS2_Pin, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	2101      	movs	r1, #1
 8001f1a:	486c      	ldr	r0, [pc, #432]	@ (80020cc <MX_GPIO_Init+0x2b4>)
 8001f1c:	f009 f98c 	bl	800b238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f26:	4868      	ldr	r0, [pc, #416]	@ (80020c8 <MX_GPIO_Init+0x2b0>)
 8001f28:	f009 f986 	bl	800b238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACCEL_INTA3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA3_Pin;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTA3_GPIO_Port, &GPIO_InitStruct);
 8001f3a:	f107 031c 	add.w	r3, r7, #28
 8001f3e:	4619      	mov	r1, r3
 8001f40:	485e      	ldr	r0, [pc, #376]	@ (80020bc <MX_GPIO_Init+0x2a4>)
 8001f42:	f008 ffb9 	bl	800aeb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS3_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS3_Pin;
 8001f46:	2310      	movs	r3, #16
 8001f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS3_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4857      	ldr	r0, [pc, #348]	@ (80020bc <MX_GPIO_Init+0x2a4>)
 8001f5e:	f008 ffab 	bl	800aeb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INTB3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTB3_Pin;
 8001f62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTB3_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 031c 	add.w	r3, r7, #28
 8001f76:	4619      	mov	r1, r3
 8001f78:	4851      	ldr	r0, [pc, #324]	@ (80020c0 <MX_GPIO_Init+0x2a8>)
 8001f7a:	f008 ff9d 	bl	800aeb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	484a      	ldr	r0, [pc, #296]	@ (80020c0 <MX_GPIO_Init+0x2a8>)
 8001f96:	f008 ff8f 	bl	800aeb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8001f9a:	230b      	movs	r3, #11
 8001f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4844      	ldr	r0, [pc, #272]	@ (80020c4 <MX_GPIO_Init+0x2ac>)
 8001fb2:	f008 ff81 	bl	800aeb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 8001fb6:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	4619      	mov	r1, r3
 8001fca:	483e      	ldr	r0, [pc, #248]	@ (80020c4 <MX_GPIO_Init+0x2ac>)
 8001fcc:	f008 ff74 	bl	800aeb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS1_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin;
 8001fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS1_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4837      	ldr	r0, [pc, #220]	@ (80020c8 <MX_GPIO_Init+0x2b0>)
 8001fea:	f008 ff65 	bl	800aeb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin ACCEL_INTA2_Pin ACCEL_INTB2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|ACCEL_INTA2_Pin|ACCEL_INTB2_Pin;
 8001fee:	f240 3306 	movw	r3, #774	@ 0x306
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	4831      	ldr	r0, [pc, #196]	@ (80020cc <MX_GPIO_Init+0x2b4>)
 8002006:	f008 ff57 	bl	800aeb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_EXT_Pin */
  GPIO_InitStruct.Pin = DAC_EXT_Pin;
 800200a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800200e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAC_EXT_GPIO_Port, &GPIO_InitStruct);
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	4619      	mov	r1, r3
 800201e:	4828      	ldr	r0, [pc, #160]	@ (80020c0 <MX_GPIO_Init+0x2a8>)
 8002020:	f008 ff4a 	bl	800aeb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS2_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS2_Pin;
 8002024:	2301      	movs	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002028:	2301      	movs	r3, #1
 800202a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS2_GPIO_Port, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4824      	ldr	r0, [pc, #144]	@ (80020cc <MX_GPIO_Init+0x2b4>)
 800203c:	f008 ff3c 	bl	800aeb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = RECORD_INDICATOR_Pin;
 8002040:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RECORD_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	481b      	ldr	r0, [pc, #108]	@ (80020c8 <MX_GPIO_Init+0x2b0>)
 800205a:	f008 ff2d 	bl	800aeb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	2007      	movs	r0, #7
 8002064:	f006 faef 	bl	8008646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002068:	2007      	movs	r0, #7
 800206a:	f006 fb06 	bl	800867a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2008      	movs	r0, #8
 8002074:	f006 fae7 	bl	8008646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002078:	2008      	movs	r0, #8
 800207a:	f006 fafe 	bl	800867a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	2009      	movs	r0, #9
 8002084:	f006 fadf 	bl	8008646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002088:	2009      	movs	r0, #9
 800208a:	f006 faf6 	bl	800867a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2017      	movs	r0, #23
 8002094:	f006 fad7 	bl	8008646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002098:	2017      	movs	r0, #23
 800209a:	f006 faee 	bl	800867a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2028      	movs	r0, #40	@ 0x28
 80020a4:	f006 facf 	bl	8008646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020a8:	2028      	movs	r0, #40	@ 0x28
 80020aa:	f006 fae6 	bl	800867a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020ae:	bf00      	nop
 80020b0:	3730      	adds	r7, #48	@ 0x30
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58024400 	.word	0x58024400
 80020bc:	58021000 	.word	0x58021000
 80020c0:	58020800 	.word	0x58020800
 80020c4:	58020000 	.word	0x58020000
 80020c8:	58020400 	.word	0x58020400
 80020cc:	58020c00 	.word	0x58020c00

080020d0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020d6:	463b      	mov	r3, r7
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020e2:	f006 fae5 	bl	80086b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80020f2:	231f      	movs	r3, #31
 80020f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80020f6:	2387      	movs	r3, #135	@ 0x87
 80020f8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80020fe:	2300      	movs	r3, #0
 8002100:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002102:	2301      	movs	r3, #1
 8002104:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002106:	2301      	movs	r3, #1
 8002108:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002112:	463b      	mov	r3, r7
 8002114:	4618      	mov	r0, r3
 8002116:	f006 fb03 	bl	8008720 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800211a:	2004      	movs	r0, #4
 800211c:	f006 fae0 	bl	80086e0 <HAL_MPU_Enable>

}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <Error_Handler+0x8>

08002134 <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	745a      	strb	r2, [r3, #17]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	745a      	strb	r2, [r3, #17]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	7c1b      	ldrb	r3, [r3, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d030      	beq.n	800220e <Sequencer_Update+0x76>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d02c      	beq.n	800220e <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d927      	bls.n	800220e <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6819      	ldr	r1, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	441a      	add	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d10a      	bne.n	800220a <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	7c5b      	ldrb	r3, [r3, #17]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	e002      	b.n	800220a <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <Sequencer_Update+0x78>
		}
	}

	return 0;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	741a      	strb	r2, [r3, #16]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	741a      	strb	r2, [r3, #16]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <Sequencer_IsRunning>:

uint32_t Sequencer_IsRunning(Sequencer* sequencer)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	return sequencer->is_running;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7c1b      	ldrb	r3, [r3, #16]
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	4b0a      	ldr	r3, [pc, #40]	@ (80022a8 <HAL_MspInit+0x30>)
 8002280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002284:	4a08      	ldr	r2, [pc, #32]	@ (80022a8 <HAL_MspInit+0x30>)
 8002286:	f043 0302 	orr.w	r3, r3, #2
 800228a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_MspInit+0x30>)
 8002290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	58024400 	.word	0x58024400

080022ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	@ 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a39      	ldr	r2, [pc, #228]	@ (80023b0 <HAL_ADC_MspInit+0x104>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d133      	bne.n	8002336 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80022ce:	4b39      	ldr	r3, [pc, #228]	@ (80023b4 <HAL_ADC_MspInit+0x108>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3301      	adds	r3, #1
 80022d4:	4a37      	ldr	r2, [pc, #220]	@ (80023b4 <HAL_ADC_MspInit+0x108>)
 80022d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80022d8:	4b36      	ldr	r3, [pc, #216]	@ (80023b4 <HAL_ADC_MspInit+0x108>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10e      	bne.n	80022fe <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80022e0:	4b35      	ldr	r3, [pc, #212]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 80022e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022e6:	4a34      	ldr	r2, [pc, #208]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 80022e8:	f043 0320 	orr.w	r3, r3, #32
 80022ec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80022f0:	4b31      	ldr	r3, [pc, #196]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 80022f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fe:	4b2e      	ldr	r3, [pc, #184]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002304:	4a2c      	ldr	r2, [pc, #176]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800230e:	4b2a      	ldr	r3, [pc, #168]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800231c:	2330      	movs	r3, #48	@ 0x30
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002320:	2303      	movs	r3, #3
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	4823      	ldr	r0, [pc, #140]	@ (80023bc <HAL_ADC_MspInit+0x110>)
 8002330:	f008 fdc2 	bl	800aeb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002334:	e037      	b.n	80023a6 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a21      	ldr	r2, [pc, #132]	@ (80023c0 <HAL_ADC_MspInit+0x114>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d132      	bne.n	80023a6 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002340:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <HAL_ADC_MspInit+0x108>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	4a1b      	ldr	r2, [pc, #108]	@ (80023b4 <HAL_ADC_MspInit+0x108>)
 8002348:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800234a:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <HAL_ADC_MspInit+0x108>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10e      	bne.n	8002370 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002352:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002358:	4a17      	ldr	r2, [pc, #92]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 800235a:	f043 0320 	orr.w	r3, r3, #32
 800235e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002376:	4a10      	ldr	r2, [pc, #64]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002380:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800238e:	23c0      	movs	r3, #192	@ 0xc0
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002392:	2303      	movs	r3, #3
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	4619      	mov	r1, r3
 80023a0:	4808      	ldr	r0, [pc, #32]	@ (80023c4 <HAL_ADC_MspInit+0x118>)
 80023a2:	f008 fd89 	bl	800aeb8 <HAL_GPIO_Init>
}
 80023a6:	bf00      	nop
 80023a8:	3730      	adds	r7, #48	@ 0x30
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40022000 	.word	0x40022000
 80023b4:	24004630 	.word	0x24004630
 80023b8:	58024400 	.word	0x58024400
 80023bc:	58020800 	.word	0x58020800
 80023c0:	40022100 	.word	0x40022100
 80023c4:	58020000 	.word	0x58020000

080023c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	@ 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a48      	ldr	r2, [pc, #288]	@ (8002508 <HAL_DAC_MspInit+0x140>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	f040 808a 	bne.w	8002500 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80023ec:	4b47      	ldr	r3, [pc, #284]	@ (800250c <HAL_DAC_MspInit+0x144>)
 80023ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f2:	4a46      	ldr	r2, [pc, #280]	@ (800250c <HAL_DAC_MspInit+0x144>)
 80023f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80023f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023fc:	4b43      	ldr	r3, [pc, #268]	@ (800250c <HAL_DAC_MspInit+0x144>)
 80023fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002402:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	4b40      	ldr	r3, [pc, #256]	@ (800250c <HAL_DAC_MspInit+0x144>)
 800240c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002410:	4a3e      	ldr	r2, [pc, #248]	@ (800250c <HAL_DAC_MspInit+0x144>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800241a:	4b3c      	ldr	r3, [pc, #240]	@ (800250c <HAL_DAC_MspInit+0x144>)
 800241c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002428:	2330      	movs	r3, #48	@ 0x30
 800242a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800242c:	2303      	movs	r3, #3
 800242e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	4619      	mov	r1, r3
 800243a:	4835      	ldr	r0, [pc, #212]	@ (8002510 <HAL_DAC_MspInit+0x148>)
 800243c:	f008 fd3c 	bl	800aeb8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8002440:	4b34      	ldr	r3, [pc, #208]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002442:	4a35      	ldr	r2, [pc, #212]	@ (8002518 <HAL_DAC_MspInit+0x150>)
 8002444:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002446:	4b33      	ldr	r3, [pc, #204]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002448:	2243      	movs	r2, #67	@ 0x43
 800244a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800244c:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 800244e:	2240      	movs	r2, #64	@ 0x40
 8002450:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002452:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002458:	4b2e      	ldr	r3, [pc, #184]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 800245a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800245e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002460:	4b2c      	ldr	r3, [pc, #176]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002462:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002466:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002468:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 800246a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800246e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002472:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002476:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002478:	4b26      	ldr	r3, [pc, #152]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800247e:	4b25      	ldr	r3, [pc, #148]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002480:	2200      	movs	r2, #0
 8002482:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002484:	4823      	ldr	r0, [pc, #140]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002486:	f006 fc43 	bl	8008d10 <HAL_DMA_Init>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8002490:	f7ff fe4a 	bl	8002128 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a1f      	ldr	r2, [pc, #124]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	4a1e      	ldr	r2, [pc, #120]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 80024a0:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002520 <HAL_DAC_MspInit+0x158>)
 80024a4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 80024a6:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024a8:	2244      	movs	r2, #68	@ 0x44
 80024aa:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024ae:	2240      	movs	r2, #64	@ 0x40
 80024b0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b2:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80024b8:	4b18      	ldr	r3, [pc, #96]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024be:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024c0:	4b16      	ldr	r3, [pc, #88]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024c6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024c8:	4b14      	ldr	r3, [pc, #80]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024ce:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024d6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80024d8:	4b10      	ldr	r3, [pc, #64]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024da:	2200      	movs	r2, #0
 80024dc:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024de:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80024e4:	480d      	ldr	r0, [pc, #52]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024e6:	f006 fc13 	bl	8008d10 <HAL_DMA_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80024f0:	f7ff fe1a 	bl	8002128 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a09      	ldr	r2, [pc, #36]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	4a08      	ldr	r2, [pc, #32]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	@ 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40007400 	.word	0x40007400
 800250c:	58024400 	.word	0x58024400
 8002510:	58020000 	.word	0x58020000
 8002514:	240003dc 	.word	0x240003dc
 8002518:	40020010 	.word	0x40020010
 800251c:	24000454 	.word	0x24000454
 8002520:	40020028 	.word	0x40020028

08002524 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0b8      	sub	sp, #224	@ 0xe0
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	22b8      	movs	r2, #184	@ 0xb8
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f017 fa04 	bl	8019952 <memset>
  if(hi2c->Instance==I2C2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a27      	ldr	r2, [pc, #156]	@ (80025ec <HAL_I2C_MspInit+0xc8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d146      	bne.n	80025e2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002554:	f04f 0208 	mov.w	r2, #8
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002566:	f107 0310 	add.w	r3, r7, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f00b fa1a 	bl	800d9a4 <HAL_RCCEx_PeriphCLKConfig>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002576:	f7ff fdd7 	bl	8002128 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <HAL_I2C_MspInit+0xcc>)
 800257c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002580:	4a1b      	ldr	r2, [pc, #108]	@ (80025f0 <HAL_I2C_MspInit+0xcc>)
 8002582:	f043 0302 	orr.w	r3, r3, #2
 8002586:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800258a:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <HAL_I2C_MspInit+0xcc>)
 800258c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002598:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800259c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a0:	2312      	movs	r3, #18
 80025a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025b2:	2304      	movs	r3, #4
 80025b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025bc:	4619      	mov	r1, r3
 80025be:	480d      	ldr	r0, [pc, #52]	@ (80025f4 <HAL_I2C_MspInit+0xd0>)
 80025c0:	f008 fc7a 	bl	800aeb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025c4:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <HAL_I2C_MspInit+0xcc>)
 80025c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025ca:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <HAL_I2C_MspInit+0xcc>)
 80025cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_I2C_MspInit+0xcc>)
 80025d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80025e2:	bf00      	nop
 80025e4:	37e0      	adds	r7, #224	@ 0xe0
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40005800 	.word	0x40005800
 80025f0:	58024400 	.word	0x58024400
 80025f4:	58020400 	.word	0x58020400

080025f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0bc      	sub	sp, #240	@ 0xf0
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002610:	f107 0320 	add.w	r3, r7, #32
 8002614:	22b8      	movs	r2, #184	@ 0xb8
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f017 f99a 	bl	8019952 <memset>
  if(hspi->Instance==SPI2)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a72      	ldr	r2, [pc, #456]	@ (80027ec <HAL_SPI_MspInit+0x1f4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d146      	bne.n	80026b6 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002628:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002634:	2300      	movs	r3, #0
 8002636:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002638:	f107 0320 	add.w	r3, r7, #32
 800263c:	4618      	mov	r0, r3
 800263e:	f00b f9b1 	bl	800d9a4 <HAL_RCCEx_PeriphCLKConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002648:	f7ff fd6e 	bl	8002128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800264c:	4b68      	ldr	r3, [pc, #416]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 800264e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002652:	4a67      	ldr	r2, [pc, #412]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002658:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800265c:	4b64      	ldr	r3, [pc, #400]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 800265e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	4b61      	ldr	r3, [pc, #388]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 800266c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002670:	4a5f      	ldr	r2, [pc, #380]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800267a:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 800267c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8002688:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800268c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026a2:	2305      	movs	r3, #5
 80026a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80026ac:	4619      	mov	r1, r3
 80026ae:	4851      	ldr	r0, [pc, #324]	@ (80027f4 <HAL_SPI_MspInit+0x1fc>)
 80026b0:	f008 fc02 	bl	800aeb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80026b4:	e096      	b.n	80027e4 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a4f      	ldr	r2, [pc, #316]	@ (80027f8 <HAL_SPI_MspInit+0x200>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d146      	bne.n	800274e <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80026c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d0:	f107 0320 	add.w	r3, r7, #32
 80026d4:	4618      	mov	r0, r3
 80026d6:	f00b f965 	bl	800d9a4 <HAL_RCCEx_PeriphCLKConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 80026e0:	f7ff fd22 	bl	8002128 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026e4:	4b42      	ldr	r3, [pc, #264]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 80026e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026ea:	4a41      	ldr	r2, [pc, #260]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 80026ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026f4:	4b3e      	ldr	r3, [pc, #248]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 80026f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002702:	4b3b      	ldr	r3, [pc, #236]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002708:	4a39      	ldr	r2, [pc, #228]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002712:	4b37      	ldr	r3, [pc, #220]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ACCEL_SCK2_Pin|ACCEL_MISO2_Pin|ACCEL_MOSI2_Pin;
 8002720:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002724:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800273a:	2306      	movs	r3, #6
 800273c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002744:	4619      	mov	r1, r3
 8002746:	482d      	ldr	r0, [pc, #180]	@ (80027fc <HAL_SPI_MspInit+0x204>)
 8002748:	f008 fbb6 	bl	800aeb8 <HAL_GPIO_Init>
}
 800274c:	e04a      	b.n	80027e4 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a2b      	ldr	r2, [pc, #172]	@ (8002800 <HAL_SPI_MspInit+0x208>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d145      	bne.n	80027e4 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002758:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800276a:	f107 0320 	add.w	r3, r7, #32
 800276e:	4618      	mov	r0, r3
 8002770:	f00b f918 	bl	800d9a4 <HAL_RCCEx_PeriphCLKConfig>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_SPI_MspInit+0x186>
      Error_Handler();
 800277a:	f7ff fcd5 	bl	8002128 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800277e:	4b1c      	ldr	r3, [pc, #112]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002784:	4a1a      	ldr	r2, [pc, #104]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002786:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800278a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800278e:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 800279e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a2:	4a13      	ldr	r2, [pc, #76]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 80027a4:	f043 0310 	orr.w	r3, r3, #16
 80027a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027ac:	4b10      	ldr	r3, [pc, #64]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 80027ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_SCK3_Pin|ACCEL_MISO3_Pin|ACCEL_MOSI3_Pin;
 80027ba:	2364      	movs	r3, #100	@ 0x64
 80027bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80027d2:	2305      	movs	r3, #5
 80027d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027dc:	4619      	mov	r1, r3
 80027de:	4809      	ldr	r0, [pc, #36]	@ (8002804 <HAL_SPI_MspInit+0x20c>)
 80027e0:	f008 fb6a 	bl	800aeb8 <HAL_GPIO_Init>
}
 80027e4:	bf00      	nop
 80027e6:	37f0      	adds	r7, #240	@ 0xf0
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40003800 	.word	0x40003800
 80027f0:	58024400 	.word	0x58024400
 80027f4:	58020400 	.word	0x58020400
 80027f8:	40003c00 	.word	0x40003c00
 80027fc:	58020800 	.word	0x58020800
 8002800:	40013400 	.word	0x40013400
 8002804:	58021000 	.word	0x58021000

08002808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a45      	ldr	r2, [pc, #276]	@ (800292c <HAL_TIM_Base_MspInit+0x124>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10f      	bne.n	800283a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800281a:	4b45      	ldr	r3, [pc, #276]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 800281c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002820:	4a43      	ldr	r2, [pc, #268]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800282a:	4b41      	ldr	r3, [pc, #260]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 800282c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002838:	e074      	b.n	8002924 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002842:	d10f      	bne.n	8002864 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002844:	4b3a      	ldr	r3, [pc, #232]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800284a:	4a39      	ldr	r2, [pc, #228]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002854:	4b36      	ldr	r3, [pc, #216]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
}
 8002862:	e05f      	b.n	8002924 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a32      	ldr	r2, [pc, #200]	@ (8002934 <HAL_TIM_Base_MspInit+0x12c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d117      	bne.n	800289e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800286e:	4b30      	ldr	r3, [pc, #192]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002874:	4a2e      	ldr	r2, [pc, #184]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800287e:	4b2c      	ldr	r3, [pc, #176]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	201d      	movs	r0, #29
 8002892:	f005 fed8 	bl	8008646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002896:	201d      	movs	r0, #29
 8002898:	f005 feef 	bl	800867a <HAL_NVIC_EnableIRQ>
}
 800289c:	e042      	b.n	8002924 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a25      	ldr	r2, [pc, #148]	@ (8002938 <HAL_TIM_Base_MspInit+0x130>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d13d      	bne.n	8002924 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028a8:	4b21      	ldr	r3, [pc, #132]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 80028aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ae:	4a20      	ldr	r2, [pc, #128]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 80028ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 80028c6:	4b1d      	ldr	r3, [pc, #116]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002940 <HAL_TIM_Base_MspInit+0x138>)
 80028ca:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028ce:	221d      	movs	r2, #29
 80028d0:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028d4:	2240      	movs	r2, #64	@ 0x40
 80028d6:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d8:	4b18      	ldr	r3, [pc, #96]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80028de:	4b17      	ldr	r3, [pc, #92]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028e4:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028ec:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028ee:	4b13      	ldr	r3, [pc, #76]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028f4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80028f6:	4b11      	ldr	r3, [pc, #68]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028fe:	2200      	movs	r2, #0
 8002900:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002902:	4b0e      	ldr	r3, [pc, #56]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 8002904:	2200      	movs	r2, #0
 8002906:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002908:	480c      	ldr	r0, [pc, #48]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 800290a:	f006 fa01 	bl	8008d10 <HAL_DMA_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 8002914:	f7ff fc08 	bl	8002128 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a08      	ldr	r2, [pc, #32]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24
 800291e:	4a07      	ldr	r2, [pc, #28]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002924:	bf00      	nop
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40010000 	.word	0x40010000
 8002930:	58024400 	.word	0x58024400
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800
 800293c:	240007e8 	.word	0x240007e8
 8002940:	40020040 	.word	0x40020040

08002944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	@ 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a26      	ldr	r2, [pc, #152]	@ (80029fc <HAL_TIM_MspPostInit+0xb8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d120      	bne.n	80029a8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002966:	4b26      	ldr	r3, [pc, #152]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296c:	4a24      	ldr	r2, [pc, #144]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002976:	4b22      	ldr	r3, [pc, #136]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 8002978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8002984:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002996:	2302      	movs	r3, #2
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	4818      	ldr	r0, [pc, #96]	@ (8002a04 <HAL_TIM_MspPostInit+0xc0>)
 80029a2:	f008 fa89 	bl	800aeb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029a6:	e024      	b.n	80029f2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a16      	ldr	r2, [pc, #88]	@ (8002a08 <HAL_TIM_MspPostInit+0xc4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d11f      	bne.n	80029f2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b2:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029b8:	4a11      	ldr	r2, [pc, #68]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 80029ba:	f043 0308 	orr.w	r3, r3, #8
 80029be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 80029c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 80029d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2300      	movs	r3, #0
 80029e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029e2:	2302      	movs	r3, #2
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4619      	mov	r1, r3
 80029ec:	4807      	ldr	r0, [pc, #28]	@ (8002a0c <HAL_TIM_MspPostInit+0xc8>)
 80029ee:	f008 fa63 	bl	800aeb8 <HAL_GPIO_Init>
}
 80029f2:	bf00      	nop
 80029f4:	3728      	adds	r7, #40	@ 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40000400 	.word	0x40000400
 8002a00:	58024400 	.word	0x58024400
 8002a04:	58020800 	.word	0x58020800
 8002a08:	40000800 	.word	0x40000800
 8002a0c:	58020c00 	.word	0x58020c00

08002a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b0ba      	sub	sp, #232	@ 0xe8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a28:	f107 0318 	add.w	r3, r7, #24
 8002a2c:	22b8      	movs	r2, #184	@ 0xb8
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f016 ff8e 	bl	8019952 <memset>
  if(huart->Instance==UART7)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a4d      	ldr	r2, [pc, #308]	@ (8002b70 <HAL_UART_MspInit+0x160>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d147      	bne.n	8002ad0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002a40:	f04f 0202 	mov.w	r2, #2
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a52:	f107 0318 	add.w	r3, r7, #24
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00a ffa4 	bl	800d9a4 <HAL_RCCEx_PeriphCLKConfig>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a62:	f7ff fb61 	bl	8002128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002a66:	4b43      	ldr	r3, [pc, #268]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a6c:	4a41      	ldr	r2, [pc, #260]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002a6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a76:	4b3f      	ldr	r3, [pc, #252]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a84:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a8a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002a8c:	f043 0310 	orr.w	r3, r3, #16
 8002a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a94:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002aa2:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002abc:	2307      	movs	r3, #7
 8002abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ac2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	482b      	ldr	r0, [pc, #172]	@ (8002b78 <HAL_UART_MspInit+0x168>)
 8002aca:	f008 f9f5 	bl	800aeb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ace:	e04a      	b.n	8002b66 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a29      	ldr	r2, [pc, #164]	@ (8002b7c <HAL_UART_MspInit+0x16c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d145      	bne.n	8002b66 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ada:	f04f 0201 	mov.w	r2, #1
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aec:	f107 0318 	add.w	r3, r7, #24
 8002af0:	4618      	mov	r0, r3
 8002af2:	f00a ff57 	bl	800d9a4 <HAL_RCCEx_PeriphCLKConfig>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002afc:	f7ff fb14 	bl	8002128 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b00:	4b1c      	ldr	r3, [pc, #112]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b06:	4a1b      	ldr	r2, [pc, #108]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002b08:	f043 0310 	orr.w	r3, r3, #16
 8002b0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b10:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b24:	4a13      	ldr	r2, [pc, #76]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b2e:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002b3c:	23c0      	movs	r3, #192	@ 0xc0
 8002b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b54:	2307      	movs	r3, #7
 8002b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4807      	ldr	r0, [pc, #28]	@ (8002b80 <HAL_UART_MspInit+0x170>)
 8002b62:	f008 f9a9 	bl	800aeb8 <HAL_GPIO_Init>
}
 8002b66:	bf00      	nop
 8002b68:	37e8      	adds	r7, #232	@ 0xe8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40007800 	.word	0x40007800
 8002b74:	58024400 	.word	0x58024400
 8002b78:	58021000 	.word	0x58021000
 8002b7c:	40011000 	.word	0x40011000
 8002b80:	58020400 	.word	0x58020400

08002b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <NMI_Handler+0x4>

08002b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <HardFault_Handler+0x4>

08002b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <MemManage_Handler+0x4>

08002b9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <BusFault_Handler+0x4>

08002ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <UsageFault_Handler+0x4>

08002bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bda:	f004 f8a1 	bl	8006d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA2_Pin);
 8002be6:	2002      	movs	r0, #2
 8002be8:	f008 fb3f 	bl	800b26a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB2_Pin);
 8002bf4:	2004      	movs	r0, #4
 8002bf6:	f008 fb38 	bl	800b26a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA3_Pin);
 8002c02:	2008      	movs	r0, #8
 8002c04:	f008 fb31 	bl	800b26a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002c10:	4802      	ldr	r0, [pc, #8]	@ (8002c1c <DMA1_Stream0_IRQHandler+0x10>)
 8002c12:	f006 fe3f 	bl	8009894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	240003dc 	.word	0x240003dc

08002c20 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002c24:	4802      	ldr	r0, [pc, #8]	@ (8002c30 <DMA1_Stream1_IRQHandler+0x10>)
 8002c26:	f006 fe35 	bl	8009894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	24000454 	.word	0x24000454

08002c34 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002c38:	4802      	ldr	r0, [pc, #8]	@ (8002c44 <DMA1_Stream2_IRQHandler+0x10>)
 8002c3a:	f006 fe2b 	bl	8009894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	240007e8 	.word	0x240007e8

08002c48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA1_Pin);
 8002c4c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c50:	f008 fb0b 	bl	800b26a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB1_Pin);
 8002c54:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c58:	f008 fb07 	bl	800b26a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c64:	4802      	ldr	r0, [pc, #8]	@ (8002c70 <TIM3_IRQHandler+0x10>)
 8002c66:	f00e ff5b 	bl	8011b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	24000750 	.word	0x24000750

08002c74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB3_Pin);
 8002c78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002c7c:	f008 faf5 	bl	800b26a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c88:	4802      	ldr	r0, [pc, #8]	@ (8002c94 <OTG_HS_IRQHandler+0x10>)
 8002c8a:	f008 fd7d 	bl	800b788 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	24005b1c 	.word	0x24005b1c

08002c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return 1;
 8002c9c:	2301      	movs	r3, #1
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <_kill>:

int _kill(int pid, int sig)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cb2:	f016 febf 	bl	8019a34 <__errno>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2216      	movs	r2, #22
 8002cba:	601a      	str	r2, [r3, #0]
  return -1;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_exit>:

void _exit (int status)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ffe7 	bl	8002ca8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cda:	bf00      	nop
 8002cdc:	e7fd      	b.n	8002cda <_exit+0x12>

08002cde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e00a      	b.n	8002d06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cf0:	f3af 8000 	nop.w
 8002cf4:	4601      	mov	r1, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	60ba      	str	r2, [r7, #8]
 8002cfc:	b2ca      	uxtb	r2, r1
 8002cfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	3301      	adds	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	dbf0      	blt.n	8002cf0 <_read+0x12>
  }

  return len;
 8002d0e:	687b      	ldr	r3, [r7, #4]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e009      	b.n	8002d3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	60ba      	str	r2, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	dbf1      	blt.n	8002d2a <_write+0x12>
  }
  return len;
 8002d46:	687b      	ldr	r3, [r7, #4]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_close>:

int _close(int file)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d78:	605a      	str	r2, [r3, #4]
  return 0;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <_isatty>:

int _isatty(int file)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d90:	2301      	movs	r3, #1
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dc0:	4a14      	ldr	r2, [pc, #80]	@ (8002e14 <_sbrk+0x5c>)
 8002dc2:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <_sbrk+0x60>)
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <_sbrk+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <_sbrk+0x64>)
 8002dd6:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <_sbrk+0x68>)
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d207      	bcs.n	8002df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de8:	f016 fe24 	bl	8019a34 <__errno>
 8002dec:	4603      	mov	r3, r0
 8002dee:	220c      	movs	r2, #12
 8002df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	e009      	b.n	8002e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df8:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <_sbrk+0x64>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dfe:	4b07      	ldr	r3, [pc, #28]	@ (8002e1c <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	4a05      	ldr	r2, [pc, #20]	@ (8002e1c <_sbrk+0x64>)
 8002e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	24050000 	.word	0x24050000
 8002e18:	00000400 	.word	0x00000400
 8002e1c:	24004634 	.word	0x24004634
 8002e20:	24006370 	.word	0x24006370

08002e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e28:	4b32      	ldr	r3, [pc, #200]	@ (8002ef4 <SystemInit+0xd0>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2e:	4a31      	ldr	r2, [pc, #196]	@ (8002ef4 <SystemInit+0xd0>)
 8002e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e38:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef8 <SystemInit+0xd4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	2b06      	cmp	r3, #6
 8002e42:	d807      	bhi.n	8002e54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e44:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef8 <SystemInit+0xd4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 030f 	bic.w	r3, r3, #15
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef8 <SystemInit+0xd4>)
 8002e4e:	f043 0307 	orr.w	r3, r3, #7
 8002e52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e54:	4b29      	ldr	r3, [pc, #164]	@ (8002efc <SystemInit+0xd8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a28      	ldr	r2, [pc, #160]	@ (8002efc <SystemInit+0xd8>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e60:	4b26      	ldr	r3, [pc, #152]	@ (8002efc <SystemInit+0xd8>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e66:	4b25      	ldr	r3, [pc, #148]	@ (8002efc <SystemInit+0xd8>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4924      	ldr	r1, [pc, #144]	@ (8002efc <SystemInit+0xd8>)
 8002e6c:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <SystemInit+0xdc>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e72:	4b21      	ldr	r3, [pc, #132]	@ (8002ef8 <SystemInit+0xd4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef8 <SystemInit+0xd4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 030f 	bic.w	r3, r3, #15
 8002e86:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef8 <SystemInit+0xd4>)
 8002e88:	f043 0307 	orr.w	r3, r3, #7
 8002e8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <SystemInit+0xd8>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e94:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <SystemInit+0xd8>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e9a:	4b18      	ldr	r3, [pc, #96]	@ (8002efc <SystemInit+0xd8>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ea0:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <SystemInit+0xd8>)
 8002ea2:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <SystemInit+0xe0>)
 8002ea4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ea6:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <SystemInit+0xd8>)
 8002ea8:	4a17      	ldr	r2, [pc, #92]	@ (8002f08 <SystemInit+0xe4>)
 8002eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002eac:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <SystemInit+0xd8>)
 8002eae:	4a17      	ldr	r2, [pc, #92]	@ (8002f0c <SystemInit+0xe8>)
 8002eb0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002eb2:	4b12      	ldr	r3, [pc, #72]	@ (8002efc <SystemInit+0xd8>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002eb8:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <SystemInit+0xd8>)
 8002eba:	4a14      	ldr	r2, [pc, #80]	@ (8002f0c <SystemInit+0xe8>)
 8002ebc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <SystemInit+0xd8>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8002efc <SystemInit+0xd8>)
 8002ec6:	4a11      	ldr	r2, [pc, #68]	@ (8002f0c <SystemInit+0xe8>)
 8002ec8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002eca:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <SystemInit+0xd8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <SystemInit+0xd8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a09      	ldr	r2, [pc, #36]	@ (8002efc <SystemInit+0xd8>)
 8002ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002edc:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <SystemInit+0xd8>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <SystemInit+0xec>)
 8002ee4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002ee8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00
 8002ef8:	52002000 	.word	0x52002000
 8002efc:	58024400 	.word	0x58024400
 8002f00:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f04:	02020200 	.word	0x02020200
 8002f08:	01ff0000 	.word	0x01ff0000
 8002f0c:	01010280 	.word	0x01010280
 8002f10:	52004000 	.word	0x52004000

08002f14 <FindClosest>:
 */

#include "util.h"

uint32_t FindClosest(const uint32_t* arr, uint32_t len, uint32_t target)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	@ 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
	uint32_t min_diff = 0xFFFFFFFF;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
 8002f24:	61fb      	str	r3, [r7, #28]
	uint32_t closest_value = arr[0];
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < len; i++)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	e019      	b.n	8002f66 <FindClosest+0x52>
	{
		uint32_t diff = abs(arr[i] - target);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4413      	add	r3, r2
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bfb8      	it	lt
 8002f44:	425b      	neglt	r3, r3
 8002f46:	613b      	str	r3, [r7, #16]

		if (diff < min_diff)
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d207      	bcs.n	8002f60 <FindClosest+0x4c>
		{
			min_diff = diff;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	61fb      	str	r3, [r7, #28]
			closest_value = arr[i];
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < len; i++)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3301      	adds	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d3e1      	bcc.n	8002f32 <FindClosest+0x1e>
		}
	}

	return closest_value;
 8002f6e:	69bb      	ldr	r3, [r7, #24]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3724      	adds	r7, #36	@ 0x24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <VibeCheck_Init>:
		TIM_HandleTypeDef* htim_rgb,
		volatile uint32_t* time_micros,
		SPI_HandleTypeDef* hspi_accel0,
		SPI_HandleTypeDef* hspi_accel1,
		SPI_HandleTypeDef* hspi_accel2)
{
 8002f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7e:	b0e5      	sub	sp, #404	@ 0x194
 8002f80:	af10      	add	r7, sp, #64	@ 0x40
 8002f82:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 8002f86:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8002f8a:	6020      	str	r0, [r4, #0]
 8002f8c:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8002f90:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 8002f94:	6001      	str	r1, [r0, #0]
 8002f96:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002f9a:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8002f9e:	600a      	str	r2, [r1, #0]
 8002fa0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002fa4:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8002fa8:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);  /* wait for steady power so the RGB LEDs don't get into a weird state */
 8002faa:	200a      	movs	r0, #10
 8002fac:	f003 fed8 	bl	8006d60 <HAL_Delay>

	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 8002fb0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002fb4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f001 ff62 	bl	8004e84 <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 8002fc0:	4acc      	ldr	r2, [pc, #816]	@ (80032f4 <VibeCheck_Init+0x378>)
 8002fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fc6:	6810      	ldr	r0, [r2, #0]
 8002fc8:	6018      	str	r0, [r3, #0]
 8002fca:	8891      	ldrh	r1, [r2, #4]
 8002fcc:	7992      	ldrb	r2, [r2, #6]
 8002fce:	8099      	strh	r1, [r3, #4]
 8002fd0:	719a      	strb	r2, [r3, #6]
 8002fd2:	f207 130f 	addw	r3, r7, #271	@ 0x10f
 8002fd6:	2239      	movs	r2, #57	@ 0x39
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f016 fcb9 	bl	8019952 <memset>
 8002fe0:	4bc5      	ldr	r3, [pc, #788]	@ (80032f8 <VibeCheck_Init+0x37c>)
 8002fe2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 8002fe6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002fea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	f242 4324 	movw	r3, #9252	@ 0x2424
 8002ff4:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8002ff6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 8002ffa:	4ac0      	ldr	r2, [pc, #768]	@ (80032fc <VibeCheck_Init+0x380>)
 8002ffc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003000:	6810      	ldr	r0, [r2, #0]
 8003002:	6851      	ldr	r1, [r2, #4]
 8003004:	c303      	stmia	r3!, {r0, r1}
 8003006:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800300a:	2238      	movs	r2, #56	@ 0x38
 800300c:	2100      	movs	r1, #0
 800300e:	4618      	mov	r0, r3
 8003010:	f016 fc9f 	bl	8019952 <memset>
 8003014:	4bba      	ldr	r3, [pc, #744]	@ (8003300 <VibeCheck_Init+0x384>)
 8003016:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 800301a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800301e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	f242 4344 	movw	r3, #9284	@ 0x2444
 8003028:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 800302a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	};

	VibeCheckShell_InputHandler rgb_cmd = {
 800302e:	4bb5      	ldr	r3, [pc, #724]	@ (8003304 <VibeCheck_Init+0x388>)
 8003030:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003032:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003036:	223c      	movs	r2, #60	@ 0x3c
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f016 fc89 	bl	8019952 <memset>
 8003040:	4bb1      	ldr	r3, [pc, #708]	@ (8003308 <VibeCheck_Init+0x38c>)
 8003042:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			.name = "rgb",
			.execute = VibeCheckRGBCMD_Execute,
			.obj = &vc->rgb
 8003046:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800304a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	f243 4390 	movw	r3, #13456	@ 0x3490
 8003054:	4413      	add	r3, r2
	VibeCheckShell_InputHandler rgb_cmd = {
 8003056:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	};

	VibeCheckShell_InputHandler sensor_cmd = {
 800305a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800305e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003062:	4aaa      	ldr	r2, [pc, #680]	@ (800330c <VibeCheck_Init+0x390>)
 8003064:	460b      	mov	r3, r1
 8003066:	6810      	ldr	r0, [r2, #0]
 8003068:	6018      	str	r0, [r3, #0]
 800306a:	8890      	ldrh	r0, [r2, #4]
 800306c:	7992      	ldrb	r2, [r2, #6]
 800306e:	8098      	strh	r0, [r3, #4]
 8003070:	719a      	strb	r2, [r3, #6]
 8003072:	1dcb      	adds	r3, r1, #7
 8003074:	2239      	movs	r2, #57	@ 0x39
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f016 fc6a 	bl	8019952 <memset>
 800307e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003082:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003086:	4aa2      	ldr	r2, [pc, #648]	@ (8003310 <VibeCheck_Init+0x394>)
 8003088:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "sensor",
			.execute = VibeCheckSensorCMD_Execute,
			.obj = &vc->sensor
 800308a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800308e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	f643 2310 	movw	r3, #14864	@ 0x3a10
 8003098:	4413      	add	r3, r2
	VibeCheckShell_InputHandler sensor_cmd = {
 800309a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800309e:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80030a2:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 80030a4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030ac:	681e      	ldr	r6, [r3, #0]
 80030ae:	466d      	mov	r5, sp
 80030b0:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 80030b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80030c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80030cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ce:	4630      	mov	r0, r6
 80030d0:	f002 f806 	bl	80050e0 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 80030d4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030dc:	681e      	ldr	r6, [r3, #0]
 80030de:	466d      	mov	r5, sp
 80030e0:	f107 04cc 	add.w	r4, r7, #204	@ 0xcc
 80030e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80030f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030f8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80030fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fe:	4630      	mov	r0, r6
 8003100:	f001 ffee 	bl	80050e0 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, rgb_cmd);
 8003104:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003108:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800310c:	681e      	ldr	r6, [r3, #0]
 800310e:	466d      	mov	r5, sp
 8003110:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 8003114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003120:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003124:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003128:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800312c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800312e:	4630      	mov	r0, r6
 8003130:	f001 ffd6 	bl	80050e0 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, sensor_cmd);
 8003134:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003138:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003144:	f5a3 7690 	sub.w	r6, r3, #288	@ 0x120
 8003148:	466d      	mov	r5, sp
 800314a:	f106 040c 	add.w	r4, r6, #12
 800314e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800315e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003162:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f001 ffba 	bl	80050e0 <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_OutputHandler wavegen_sender = {
 800316c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003170:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003174:	4a67      	ldr	r2, [pc, #412]	@ (8003314 <VibeCheck_Init+0x398>)
 8003176:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckWaveGenSender_Execute,
			.obj = &vc->wavegen
 8003178:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800317c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	f242 4344 	movw	r3, #9284	@ 0x2444
 8003186:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler wavegen_sender = {
 8003188:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800318c:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8003190:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_data_sender = {
 8003192:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003196:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800319a:	4a5f      	ldr	r2, [pc, #380]	@ (8003318 <VibeCheck_Init+0x39c>)
 800319c:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Data_Execute,
			.obj = &vc->sensor
 800319e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	f643 2310 	movw	r3, #14864	@ 0x3a10
 80031ac:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_data_sender = {
 80031ae:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80031b2:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80031b6:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_status_sender = {
 80031b8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031bc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031c0:	4a56      	ldr	r2, [pc, #344]	@ (800331c <VibeCheck_Init+0x3a0>)
 80031c2:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Status_Execute,
			.obj = &vc->sensor
 80031c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	f643 2310 	movw	r3, #14864	@ 0x3a10
 80031d2:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_status_sender = {
 80031d4:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80031d8:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80031dc:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_RegisterOutputHandler(&vc->shell, wavegen_sender);
 80031de:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031ec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80031f4:	f001 ffa6 	bl	8005144 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_data_sender);
 80031f8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003206:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800320a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800320e:	f001 ff99 	bl	8005144 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_status_sender);
 8003212:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003216:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003220:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003224:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003228:	f001 ff8c 	bl	8005144 <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 800322c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003230:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	f242 4324 	movw	r3, #9252	@ 0x2424
 800323a:	4413      	add	r3, r2
 800323c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003240:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8003244:	6811      	ldr	r1, [r2, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f002 fa12 	bl	8005670 <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 800324c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003250:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	f242 4344 	movw	r3, #9284	@ 0x2444
 800325a:	4413      	add	r3, r2
 800325c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003260:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8003264:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8003268:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	6809      	ldr	r1, [r1, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f002 ff4f 	bl	8006114 <VibeCheckWaveGen_Init>
	VibeCheckRGB_Init(&vc->rgb, htim_rgb);
 8003276:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800327a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	f243 4390 	movw	r3, #13456	@ 0x3490
 8003284:	4413      	add	r3, r2
 8003286:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f889 	bl	80033a2 <VibeCheckRGB_Init>
	VibeCheckRGB_SetBaseSequence(&vc->rgb, base_sequence_times, base_sequence_colors, base_sequence_len);
 8003290:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003294:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f243 4090 	movw	r0, #13456	@ 0x3490
 800329e:	4418      	add	r0, r3
 80032a0:	2310      	movs	r3, #16
 80032a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003320 <VibeCheck_Init+0x3a4>)
 80032a4:	491f      	ldr	r1, [pc, #124]	@ (8003324 <VibeCheck_Init+0x3a8>)
 80032a6:	f000 f92f 	bl	8003508 <VibeCheckRGB_SetBaseSequence>
	VibeCheckRGB_SetTopSequence(&vc->rgb, top_sequence_times, top_sequence_colors, top_sequence_len);
 80032aa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032ae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f243 4090 	movw	r0, #13456	@ 0x3490
 80032b8:	4418      	add	r0, r3
 80032ba:	2304      	movs	r3, #4
 80032bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003328 <VibeCheck_Init+0x3ac>)
 80032be:	491b      	ldr	r1, [pc, #108]	@ (800332c <VibeCheck_Init+0x3b0>)
 80032c0:	f000 f959 	bl	8003576 <VibeCheckRGB_SetTopSequence>
	VibeCheckSensor_Init(&vc->sensor, time_micros, hspi_accel0, hspi_accel1, hspi_accel2);
 80032c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f643 2010 	movw	r0, #14864	@ 0x3a10
 80032d2:	4418      	add	r0, r3
 80032d4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80032de:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80032e2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80032e6:	f000 fb5d 	bl	80039a4 <VibeCheckSensor_Init>
}
 80032ea:	bf00      	nop
 80032ec:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f4:	0801d0b0 	.word	0x0801d0b0
 80032f8:	08005c11 	.word	0x08005c11
 80032fc:	0801d0b8 	.word	0x0801d0b8
 8003300:	08006a15 	.word	0x08006a15
 8003304:	00626772 	.word	0x00626772
 8003308:	080037dd 	.word	0x080037dd
 800330c:	0801d0c0 	.word	0x0801d0c0
 8003310:	08004add 	.word	0x08004add
 8003314:	08006b71 	.word	0x08006b71
 8003318:	08004d2d 	.word	0x08004d2d
 800331c:	08004df9 	.word	0x08004df9
 8003320:	0801d38c 	.word	0x0801d38c
 8003324:	0801d34c 	.word	0x0801d34c
 8003328:	0801d2e0 	.word	0x0801d2e0
 800332c:	0801d2d0 	.word	0x0801d2d0

08003330 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Update(&vc->wavegen);
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	f242 4344 	movw	r3, #9284	@ 0x2444
 800333e:	4413      	add	r3, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f002 ff87 	bl	8006254 <VibeCheckWaveGen_Update>
	VibeCheckRGB_Update(&vc->rgb);
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	f243 4390 	movw	r3, #13456	@ 0x3490
 800334c:	4413      	add	r3, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f85d 	bl	800340e <VibeCheckRGB_Update>
	VibeCheckSensor_Update(&vc->sensor);
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	f643 2310 	movw	r3, #14864	@ 0x3a10
 800335a:	4413      	add	r3, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fc2f 	bl	8003bc0 <VibeCheckSensor_Update>

	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fdc7 	bl	8004ef8 <VibeCheckShell_Update>
 800336a:	4603      	mov	r3, r0
 800336c:	617b      	str	r3, [r7, #20]

	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f107 020c 	add.w	r2, r7, #12
 8003374:	f107 0110 	add.w	r1, r7, #16
 8003378:	4618      	mov	r0, r3
 800337a:	f001 ff59 	bl	8005230 <VibeCheckShell_GetOutput>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <VibeCheck_Loop+0x6a>
		while (CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len) != USBD_OK);  /* block until the USB transmission starts to make sure we send all data */
 8003384:	bf00      	nop
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	b292      	uxth	r2, r2
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f014 fae6 	bl	8017960 <CDC_Transmit_HS>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f5      	bne.n	8003386 <VibeCheck_Loop+0x56>
}
 800339a:	bf00      	nop
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <VibeCheckRGB_Init>:

#include "vibecheck_rgb.h"


void VibeCheckRGB_Init(VibeCheckRGB* rgb, TIM_HandleTypeDef* htim)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
	Sequencer_Init(&rgb->base_sequence);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe febe 	bl	8002134 <Sequencer_Init>
	Sequencer_Init(&rgb->top_sequence);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe feb8 	bl	8002134 <Sequencer_Init>

	htim->Instance->PSC = VC_RGB_TIM_PSC - 1;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2202      	movs	r2, #2
 80033ca:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = VC_RGB_TIM_ARR - 1;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2263      	movs	r2, #99	@ 0x63
 80033d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	rgb->htim = htim;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	601a      	str	r2, [r3, #0]

	/* clear the DMA buffer, particularly setting all zeros during the reset time */
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e008      	b.n	80033f2 <VibeCheckRGB_Init+0x50>
		rgb->bit_stream[i] = 0;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	3210      	adds	r2, #16
 80033e6:	2100      	movs	r1, #0
 80033e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3301      	adds	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f5b3 7f26 	cmp.w	r3, #664	@ 0x298
 80033f8:	d3f2      	bcc.n	80033e0 <VibeCheckRGB_Init+0x3e>

	/* turn off all LEDs */
	VibeCheckRGB_SetAllOff(rgb);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f94a 	bl	8003694 <VibeCheckRGB_SetAllOff>
	VibeCheckRGB_SendColors(rgb);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f961 	bl	80036c8 <VibeCheckRGB_SendColors>
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <VibeCheckRGB_Update>:


void VibeCheckRGB_Update(VibeCheckRGB* rgb)  /* call repeatedly in the main loop */
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b08a      	sub	sp, #40	@ 0x28
 8003412:	af02      	add	r7, sp, #8
 8003414:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003416:	f003 fc97 	bl	8006d48 <HAL_GetTick>
 800341a:	6178      	str	r0, [r7, #20]
	uint32_t step;
	if (Sequencer_Update(&rgb->top_sequence, time, &step))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003422:	f107 0210 	add.w	r2, r7, #16
 8003426:	6979      	ldr	r1, [r7, #20]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe feb5 	bl	8002198 <Sequencer_Update>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d028      	beq.n	8003486 <VibeCheckRGB_Update+0x78>
	{
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	e01e      	b.n	8003478 <VibeCheckRGB_Update+0x6a>
		{
			VibeCheckRGB_Color color = rgb->top_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 157c 	ldr.w	r1, [r3, #1404]	@ 0x57c
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	441a      	add	r2, r3
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	441a      	add	r2, r3
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	18ca      	adds	r2, r1, r3
 8003454:	f107 030c 	add.w	r3, r7, #12
 8003458:	8811      	ldrh	r1, [r2, #0]
 800345a:	7892      	ldrb	r2, [r2, #2]
 800345c:	8019      	strh	r1, [r3, #0]
 800345e:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8003460:	7b3a      	ldrb	r2, [r7, #12]
 8003462:	7b79      	ldrb	r1, [r7, #13]
 8003464:	7bbb      	ldrb	r3, [r7, #14]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	460b      	mov	r3, r1
 800346a:	69f9      	ldr	r1, [r7, #28]
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8b9 	bl	80035e4 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3301      	adds	r3, #1
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b08      	cmp	r3, #8
 800347c:	d9dd      	bls.n	800343a <VibeCheckRGB_Update+0x2c>
		}
		VibeCheckRGB_SendColors(rgb);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f922 	bl	80036c8 <VibeCheckRGB_SendColors>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
		}
		VibeCheckRGB_SendColors(rgb);
	}
}
 8003484:	e03c      	b.n	8003500 <VibeCheckRGB_Update+0xf2>
	else if (!Sequencer_IsRunning(&rgb->top_sequence) && Sequencer_Update(&rgb->base_sequence, time, &step))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe fee6 	bl	800225e <Sequencer_IsRunning>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d133      	bne.n	8003500 <VibeCheckRGB_Update+0xf2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 800349e:	f107 0210 	add.w	r2, r7, #16
 80034a2:	6979      	ldr	r1, [r7, #20]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe fe77 	bl	8002198 <Sequencer_Update>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d027      	beq.n	8003500 <VibeCheckRGB_Update+0xf2>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	e01e      	b.n	80034f4 <VibeCheckRGB_Update+0xe6>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 1564 	ldr.w	r1, [r3, #1380]	@ 0x564
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	441a      	add	r2, r3
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	441a      	add	r2, r3
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	18ca      	adds	r2, r1, r3
 80034d0:	f107 0308 	add.w	r3, r7, #8
 80034d4:	8811      	ldrh	r1, [r2, #0]
 80034d6:	7892      	ldrb	r2, [r2, #2]
 80034d8:	8019      	strh	r1, [r3, #0]
 80034da:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 80034dc:	7a3a      	ldrb	r2, [r7, #8]
 80034de:	7a79      	ldrb	r1, [r7, #9]
 80034e0:	7abb      	ldrb	r3, [r7, #10]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	460b      	mov	r3, r1
 80034e6:	69b9      	ldr	r1, [r7, #24]
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f87b 	bl	80035e4 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	3301      	adds	r3, #1
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d9dd      	bls.n	80034b6 <VibeCheckRGB_Update+0xa8>
		VibeCheckRGB_SendColors(rgb);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8e4 	bl	80036c8 <VibeCheckRGB_SendColors>
}
 8003500:	bf00      	nop
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <VibeCheckRGB_SetBaseSequence>:


void VibeCheckRGB_SetBaseSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
	rgb->base_sequence_colors = color;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	f8c3 2564 	str.w	r2, [r3, #1380]	@ 0x564
	Sequencer_SetSequence(&rgb->base_sequence, time, len, 1);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f503 60aa 	add.w	r0, r3, #1360	@ 0x550
 8003524:	2301      	movs	r3, #1
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	f7fe fe1f 	bl	800216c <Sequencer_SetSequence>
}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <VibeCheckRGB_StartBaseSequence>:

void VibeCheckRGB_StartBaseSequence(VibeCheckRGB* rgb)
{
 8003536:	b590      	push	{r4, r7, lr}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->base_sequence, HAL_GetTick());
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f503 64aa 	add.w	r4, r3, #1360	@ 0x550
 8003544:	f003 fc00 	bl	8006d48 <HAL_GetTick>
 8003548:	4603      	mov	r3, r0
 800354a:	4619      	mov	r1, r3
 800354c:	4620      	mov	r0, r4
 800354e:	f7fe fe65 	bl	800221c <Sequencer_Start>
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bd90      	pop	{r4, r7, pc}

0800355a <VibeCheckRGB_StopBaseSequence>:

void VibeCheckRGB_StopBaseSequence(VibeCheckRGB* rgb)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->base_sequence);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe fe6b 	bl	8002244 <Sequencer_Stop>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <VibeCheckRGB_SetTopSequence>:

void VibeCheckRGB_SetTopSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	603b      	str	r3, [r7, #0]
	rgb->top_sequence_colors = color;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	f8c3 257c 	str.w	r2, [r3, #1404]	@ 0x57c
	Sequencer_SetSequence(&rgb->top_sequence, time, len, 0);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f503 60ad 	add.w	r0, r3, #1384	@ 0x568
 8003592:	2300      	movs	r3, #0
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	f7fe fde8 	bl	800216c <Sequencer_SetSequence>
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <VibeCheckRGB_StartTopSequence>:

void VibeCheckRGB_StartTopSequence(VibeCheckRGB* rgb)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->top_sequence, HAL_GetTick());
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f503 64ad 	add.w	r4, r3, #1384	@ 0x568
 80035b2:	f003 fbc9 	bl	8006d48 <HAL_GetTick>
 80035b6:	4603      	mov	r3, r0
 80035b8:	4619      	mov	r1, r3
 80035ba:	4620      	mov	r0, r4
 80035bc:	f7fe fe2e 	bl	800221c <Sequencer_Start>
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd90      	pop	{r4, r7, pc}

080035c8 <VibeCheckRGB_StopTopSequence>:

void VibeCheckRGB_StopTopSequence(VibeCheckRGB* rgb)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->top_sequence);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fe34 	bl	8002244 <Sequencer_Stop>
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <VibeCheckRGB_SetColor>:


void VibeCheckRGB_SetColor(VibeCheckRGB* rgb, uint32_t index, uint8_t r, uint8_t g, uint8_t b)  /* set the color of an individual LED */
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	4611      	mov	r1, r2
 80035f0:	461a      	mov	r2, r3
 80035f2:	460b      	mov	r3, r1
 80035f4:	71fb      	strb	r3, [r7, #7]
 80035f6:	4613      	mov	r3, r2
 80035f8:	71bb      	strb	r3, [r7, #6]
	if (index > VC_RGB_NUM_LEDS - 1)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d901      	bls.n	8003604 <VibeCheckRGB_SetColor+0x20>
		index = VC_RGB_NUM_LEDS - 1;
 8003600:	2308      	movs	r3, #8
 8003602:	60bb      	str	r3, [r7, #8]

	rgb->colors[index].r = r;
 8003604:	68f9      	ldr	r1, [r7, #12]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	440b      	add	r3, r1
 8003610:	3304      	adds	r3, #4
 8003612:	79fa      	ldrb	r2, [r7, #7]
 8003614:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].g = g;
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	440b      	add	r3, r1
 8003622:	3305      	adds	r3, #5
 8003624:	79ba      	ldrb	r2, [r7, #6]
 8003626:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].b = b;
 8003628:	68f9      	ldr	r1, [r7, #12]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	440b      	add	r3, r1
 8003634:	3306      	adds	r3, #6
 8003636:	7e3a      	ldrb	r2, [r7, #24]
 8003638:	701a      	strb	r2, [r3, #0]
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <VibeCheckRGB_GetColor>:


VibeCheckRGB_Color VibeCheckRGB_GetColor(VibeCheckRGB* rgb, uint32_t index)
{
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b08      	cmp	r3, #8
 8003654:	d901      	bls.n	800365a <VibeCheckRGB_GetColor+0x14>
			index = VC_RGB_NUM_LEDS - 1;
 8003656:	2308      	movs	r3, #8
 8003658:	603b      	str	r3, [r7, #0]

	return rgb->colors[index];
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	18ca      	adds	r2, r1, r3
 8003666:	f107 030c 	add.w	r3, r7, #12
 800366a:	3204      	adds	r2, #4
 800366c:	8811      	ldrh	r1, [r2, #0]
 800366e:	7892      	ldrb	r2, [r2, #2]
 8003670:	8019      	strh	r1, [r3, #0]
 8003672:	709a      	strb	r2, [r3, #2]
 8003674:	2300      	movs	r3, #0
 8003676:	7b3a      	ldrb	r2, [r7, #12]
 8003678:	f362 0307 	bfi	r3, r2, #0, #8
 800367c:	7b7a      	ldrb	r2, [r7, #13]
 800367e:	f362 230f 	bfi	r3, r2, #8, #8
 8003682:	7bba      	ldrb	r2, [r7, #14]
 8003684:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <VibeCheckRGB_SetAllOff>:


void VibeCheckRGB_SetAllOff(VibeCheckRGB* rgb)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af02      	add	r7, sp, #8
 800369a:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	e00a      	b.n	80036b8 <VibeCheckRGB_SetAllOff+0x24>
		VibeCheckRGB_SetColor(rgb, i, 0, 0, 0);
 80036a2:	2300      	movs	r3, #0
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	2300      	movs	r3, #0
 80036a8:	2200      	movs	r2, #0
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff99 	bl	80035e4 <VibeCheckRGB_SetColor>
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3301      	adds	r3, #1
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d9f1      	bls.n	80036a2 <VibeCheckRGB_SetAllOff+0xe>
}
 80036be:	bf00      	nop
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <VibeCheckRGB_SendColors>:


void VibeCheckRGB_SendColors(VibeCheckRGB* rgb)  /* send the colors to the LEDs */
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	/* compute the bit stream timings */
	uint32_t i = VC_RGB_RESET_PERIODS;  /* put the reset periods first so we are not affected by spurious pin events at startup and such */
 80036d0:	23e0      	movs	r3, #224	@ 0xe0
 80036d2:	61fb      	str	r3, [r7, #28]
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 80036d4:	2300      	movs	r3, #0
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	e06e      	b.n	80037b8 <VibeCheckRGB_SendColors+0xf0>
	{
		for (uint32_t k = 8; k > 0; k--)  /* green */
 80036da:	2308      	movs	r3, #8
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e01d      	b.n	800371c <VibeCheckRGB_SendColors+0x54>
			rgb->bit_stream[i++] = ((rgb->colors[j].g >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	440b      	add	r3, r1
 80036ec:	3305      	adds	r3, #5
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	fa42 f303 	asr.w	r3, r2, r3
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <VibeCheckRGB_SendColors+0x3e>
 8003702:	2130      	movs	r1, #48	@ 0x30
 8003704:	e000      	b.n	8003708 <VibeCheckRGB_SendColors+0x40>
 8003706:	2118      	movs	r1, #24
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	61fa      	str	r2, [r7, #28]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	3310      	adds	r3, #16
 8003712:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3b01      	subs	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1de      	bne.n	80036e0 <VibeCheckRGB_SendColors+0x18>

		for (uint32_t k = 8; k > 0; k--)  /* red */
 8003722:	2308      	movs	r3, #8
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	e01d      	b.n	8003764 <VibeCheckRGB_SendColors+0x9c>
			rgb->bit_stream[i++] = ((rgb->colors[j].r >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	440b      	add	r3, r1
 8003734:	3304      	adds	r3, #4
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	3b01      	subs	r3, #1
 800373e:	fa42 f303 	asr.w	r3, r2, r3
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <VibeCheckRGB_SendColors+0x86>
 800374a:	2130      	movs	r1, #48	@ 0x30
 800374c:	e000      	b.n	8003750 <VibeCheckRGB_SendColors+0x88>
 800374e:	2118      	movs	r1, #24
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	61fa      	str	r2, [r7, #28]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	3310      	adds	r3, #16
 800375a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* red */
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	3b01      	subs	r3, #1
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1de      	bne.n	8003728 <VibeCheckRGB_SendColors+0x60>

		for (uint32_t k = 8; k > 0; k--)  /* blue */
 800376a:	2308      	movs	r3, #8
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	e01d      	b.n	80037ac <VibeCheckRGB_SendColors+0xe4>
			rgb->bit_stream[i++] = ((rgb->colors[j].b >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	440b      	add	r3, r1
 800377c:	3306      	adds	r3, #6
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3b01      	subs	r3, #1
 8003786:	fa42 f303 	asr.w	r3, r2, r3
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <VibeCheckRGB_SendColors+0xce>
 8003792:	2130      	movs	r1, #48	@ 0x30
 8003794:	e000      	b.n	8003798 <VibeCheckRGB_SendColors+0xd0>
 8003796:	2118      	movs	r1, #24
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	61fa      	str	r2, [r7, #28]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	3310      	adds	r3, #16
 80037a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* blue */
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1de      	bne.n	8003770 <VibeCheckRGB_SendColors+0xa8>
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	3301      	adds	r3, #1
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d98d      	bls.n	80036da <VibeCheckRGB_SendColors+0x12>
	}

	/* start the DMA transfer */
	(void)HAL_TIM_PWM_Start_DMA(rgb->htim, VC_RGB_TIM_CHANNEL, (uint32_t*)rgb->bit_stream, VC_RGB_BUF_LEN);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f103 0220 	add.w	r2, r3, #32
 80037c8:	f44f 7326 	mov.w	r3, #664	@ 0x298
 80037cc:	2100      	movs	r1, #0
 80037ce:	f00d ff73 	bl	80116b8 <HAL_TIM_PWM_Start_DMA>
}
 80037d2:	bf00      	nop
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <VibeCheckRGBCMD_Execute>:

*/


uint32_t VibeCheckRGBCMD_Execute(void* obj, VibeCheckShell* shell)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b09c      	sub	sp, #112	@ 0x70
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	667b      	str	r3, [r7, #100]	@ 0x64

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80037ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ee:	2240      	movs	r2, #64	@ 0x40
 80037f0:	4619      	mov	r1, r3
 80037f2:	6838      	ldr	r0, [r7, #0]
 80037f4:	f001 fd98 	bl	8005328 <VibeCheckShell_GetNextString>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80c2 	beq.w	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
	{
		if (!strcmp(str, "set"))
 8003800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003804:	4962      	ldr	r1, [pc, #392]	@ (8003990 <VibeCheckRGBCMD_Execute+0x1b4>)
 8003806:	4618      	mov	r0, r3
 8003808:	f7fc fd82 	bl	8000310 <strcmp>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d141      	bne.n	8003896 <VibeCheckRGBCMD_Execute+0xba>
		{
			int32_t index, r, g, b;
			if (VibeCheckShell_GetNextInt(shell, &index)
 8003812:	f107 0320 	add.w	r3, r7, #32
 8003816:	4619      	mov	r1, r3
 8003818:	6838      	ldr	r0, [r7, #0]
 800381a:	f001 fdf5 	bl	8005408 <VibeCheckShell_GetNextInt>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80af 	beq.w	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &r)
 8003826:	f107 031c 	add.w	r3, r7, #28
 800382a:	4619      	mov	r1, r3
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	f001 fdeb 	bl	8005408 <VibeCheckShell_GetNextInt>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a5 	beq.w	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &g)
 800383a:	f107 0318 	add.w	r3, r7, #24
 800383e:	4619      	mov	r1, r3
 8003840:	6838      	ldr	r0, [r7, #0]
 8003842:	f001 fde1 	bl	8005408 <VibeCheckShell_GetNextInt>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 809b 	beq.w	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &b))
 800384e:	f107 0314 	add.w	r3, r7, #20
 8003852:	4619      	mov	r1, r3
 8003854:	6838      	ldr	r0, [r7, #0]
 8003856:	f001 fdd7 	bl	8005408 <VibeCheckShell_GetNextInt>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8091 	beq.w	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_SetColor(rgb, index, r, g, b);
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	4618      	mov	r0, r3
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	b2d9      	uxtb	r1, r3
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	460b      	mov	r3, r1
 8003876:	4601      	mov	r1, r0
 8003878:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800387a:	f7ff feb3 	bl	80035e4 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(rgb);
 800387e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003880:	f7ff ff22 	bl	80036c8 <VibeCheckRGB_SendColors>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003884:	4943      	ldr	r1, [pc, #268]	@ (8003994 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003886:	6838      	ldr	r0, [r7, #0]
 8003888:	f001 fe66 	bl	8005558 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800388c:	6838      	ldr	r0, [r7, #0]
 800388e:	f001 fee1 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003892:	2301      	movs	r3, #1
 8003894:	e077      	b.n	8003986 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "get"))
 8003896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800389a:	493f      	ldr	r1, [pc, #252]	@ (8003998 <VibeCheckRGBCMD_Execute+0x1bc>)
 800389c:	4618      	mov	r0, r3
 800389e:	f7fc fd37 	bl	8000310 <strcmp>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d137      	bne.n	8003918 <VibeCheckRGBCMD_Execute+0x13c>
		{
			int32_t index;
			if (VibeCheckShell_GetNextInt(shell, &index))
 80038a8:	f107 0310 	add.w	r3, r7, #16
 80038ac:	4619      	mov	r1, r3
 80038ae:	6838      	ldr	r0, [r7, #0]
 80038b0:	f001 fdaa 	bl	8005408 <VibeCheckShell_GetNextInt>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d064      	beq.n	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_Color color = VibeCheckRGB_GetColor(rgb, index);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4619      	mov	r1, r3
 80038be:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80038c0:	f7ff fec1 	bl	8003646 <VibeCheckRGB_GetColor>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	733a      	strb	r2, [r7, #12]
 80038ca:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80038ce:	737a      	strb	r2, [r7, #13]
 80038d0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80038d4:	73bb      	strb	r3, [r7, #14]

				VibeCheckShell_PutOutputString(shell, "ack");
 80038d6:	492f      	ldr	r1, [pc, #188]	@ (8003994 <VibeCheckRGBCMD_Execute+0x1b8>)
 80038d8:	6838      	ldr	r0, [r7, #0]
 80038da:	f001 fe3d 	bl	8005558 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputSeparator(shell);
 80038de:	6838      	ldr	r0, [r7, #0]
 80038e0:	f001 feaa 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.r);
 80038e4:	7b3b      	ldrb	r3, [r7, #12]
 80038e6:	4619      	mov	r1, r3
 80038e8:	6838      	ldr	r0, [r7, #0]
 80038ea:	f001 fe6f 	bl	80055cc <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 80038ee:	6838      	ldr	r0, [r7, #0]
 80038f0:	f001 fea2 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.g);
 80038f4:	7b7b      	ldrb	r3, [r7, #13]
 80038f6:	4619      	mov	r1, r3
 80038f8:	6838      	ldr	r0, [r7, #0]
 80038fa:	f001 fe67 	bl	80055cc <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 80038fe:	6838      	ldr	r0, [r7, #0]
 8003900:	f001 fe9a 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.b);
 8003904:	7bbb      	ldrb	r3, [r7, #14]
 8003906:	4619      	mov	r1, r3
 8003908:	6838      	ldr	r0, [r7, #0]
 800390a:	f001 fe5f 	bl	80055cc <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputDelimiter(shell);
 800390e:	6838      	ldr	r0, [r7, #0]
 8003910:	f001 fea0 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003914:	2301      	movs	r3, #1
 8003916:	e036      	b.n	8003986 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "start"))  /* TODO: revisit this once we have a clearer idea of how the LED sequence should behave */
 8003918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800391c:	491f      	ldr	r1, [pc, #124]	@ (800399c <VibeCheckRGBCMD_Execute+0x1c0>)
 800391e:	4618      	mov	r0, r3
 8003920:	f7fc fcf6 	bl	8000310 <strcmp>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10e      	bne.n	8003948 <VibeCheckRGBCMD_Execute+0x16c>
		{
			VibeCheckRGB_StartBaseSequence(rgb);
 800392a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800392c:	f7ff fe03 	bl	8003536 <VibeCheckRGB_StartBaseSequence>
			VibeCheckRGB_StartTopSequence(rgb);
 8003930:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003932:	f7ff fe37 	bl	80035a4 <VibeCheckRGB_StartTopSequence>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003936:	4917      	ldr	r1, [pc, #92]	@ (8003994 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003938:	6838      	ldr	r0, [r7, #0]
 800393a:	f001 fe0d 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 800393e:	6838      	ldr	r0, [r7, #0]
 8003940:	f001 fe88 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003944:	2301      	movs	r3, #1
 8003946:	e01e      	b.n	8003986 <VibeCheckRGBCMD_Execute+0x1aa>
		}
		else if (!strcmp(str, "stop"))
 8003948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800394c:	4914      	ldr	r1, [pc, #80]	@ (80039a0 <VibeCheckRGBCMD_Execute+0x1c4>)
 800394e:	4618      	mov	r0, r3
 8003950:	f7fc fcde 	bl	8000310 <strcmp>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d114      	bne.n	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
		{
			VibeCheckRGB_StopBaseSequence(rgb);
 800395a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800395c:	f7ff fdfd 	bl	800355a <VibeCheckRGB_StopBaseSequence>
			VibeCheckRGB_StopTopSequence(rgb);
 8003960:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003962:	f7ff fe31 	bl	80035c8 <VibeCheckRGB_StopTopSequence>
			VibeCheckRGB_SetAllOff(rgb);
 8003966:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003968:	f7ff fe94 	bl	8003694 <VibeCheckRGB_SetAllOff>
			VibeCheckRGB_SendColors(rgb);
 800396c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800396e:	f7ff feab 	bl	80036c8 <VibeCheckRGB_SendColors>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003972:	4908      	ldr	r1, [pc, #32]	@ (8003994 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003974:	6838      	ldr	r0, [r7, #0]
 8003976:	f001 fdef 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 800397a:	6838      	ldr	r0, [r7, #0]
 800397c:	f001 fe6a 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <VibeCheckRGBCMD_Execute+0x1aa>
		}
	}

	return 0;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3768      	adds	r7, #104	@ 0x68
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	0801d0c8 	.word	0x0801d0c8
 8003994:	0801d0cc 	.word	0x0801d0cc
 8003998:	0801d0d0 	.word	0x0801d0d0
 800399c:	0801d0d4 	.word	0x0801d0d4
 80039a0:	0801d0dc 	.word	0x0801d0dc

080039a4 <VibeCheckSensor_Init>:

#include "vibecheck_sensor.h"


void VibeCheckSensor_Init(VibeCheckSensor* sensor, volatile uint32_t* time_micros, SPI_HandleTypeDef* hspi0, SPI_HandleTypeDef* hspi1, SPI_HandleTypeDef* hspi2)
{
 80039a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a6:	b0a1      	sub	sp, #132	@ 0x84
 80039a8:	af06      	add	r7, sp, #24
 80039aa:	6178      	str	r0, [r7, #20]
 80039ac:	6139      	str	r1, [r7, #16]
 80039ae:	60fa      	str	r2, [r7, #12]
 80039b0:	60bb      	str	r3, [r7, #8]
	sensor->data_ind = 0;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
	sensor->data_ready = 0;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2200      	movs	r2, #0
 80039be:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
	sensor->time_prev_update = 0;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
	sensor->generate_fake_data = 0;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c

	sensor->time_micros = time_micros;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290

	/* set all the configurations to defaults */
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80039da:	2300      	movs	r3, #0
 80039dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80039de:	e04a      	b.n	8003a76 <VibeCheckSensor_Init+0xd2>
	{
		sensor->sensor_config[i].usr_offset_x = 0.0f;
 80039e0:	6979      	ldr	r1, [r7, #20]
 80039e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_y = 0.0f;
 80039f4:	6979      	ldr	r1, [r7, #20]
 80039f6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	3304      	adds	r3, #4
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_z = 0.0f;
 8003a0a:	6979      	ldr	r1, [r7, #20]
 8003a0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	3308      	adds	r3, #8
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].accel_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003a20:	6979      	ldr	r1, [r7, #20]
 8003a22:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	330c      	adds	r3, #12
 8003a30:	220d      	movs	r2, #13
 8003a32:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].g_range = VC_SENSOR_DEFAULT_G_RANGE;
 8003a34:	6979      	ldr	r1, [r7, #20]
 8003a36:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3310      	adds	r3, #16
 8003a44:	2202      	movs	r2, #2
 8003a46:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].gyro_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003a48:	6979      	ldr	r1, [r7, #20]
 8003a4a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3314      	adds	r3, #20
 8003a58:	220d      	movs	r2, #13
 8003a5a:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].dps_range = VC_SENSOR_DEFAULT_DPS_RANGE;
 8003a5c:	6979      	ldr	r1, [r7, #20]
 8003a5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	3318      	adds	r3, #24
 8003a6c:	227d      	movs	r2, #125	@ 0x7d
 8003a6e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003a70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a72:	3301      	adds	r3, #1
 8003a74:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d9b1      	bls.n	80039e0 <VibeCheckSensor_Init+0x3c>
	}


	/* initialize the sensor chips */
	SPI_HandleTypeDef* hspi[VC_SENSOR_NUM_SENSORS] = {hspi0, hspi1, hspi2};
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a88:	65fb      	str	r3, [r7, #92]	@ 0x5c

	GPIO_TypeDef* cs_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_GPIO_Port, ACCEL_NCS2_GPIO_Port, ACCEL_NCS3_GPIO_Port};
 8003a8a:	4a47      	ldr	r2, [pc, #284]	@ (8003ba8 <VibeCheckSensor_Init+0x204>)
 8003a8c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a90:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t cs_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_Pin, ACCEL_NCS2_Pin, ACCEL_NCS3_Pin};
 8003a96:	4a45      	ldr	r2, [pc, #276]	@ (8003bac <VibeCheckSensor_Init+0x208>)
 8003a98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003aa0:	6018      	str	r0, [r3, #0]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int1_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_GPIO_Port, ACCEL_INTA2_GPIO_Port, ACCEL_INTA3_GPIO_Port};
 8003aa6:	4a42      	ldr	r2, [pc, #264]	@ (8003bb0 <VibeCheckSensor_Init+0x20c>)
 8003aa8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003aac:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int1_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_Pin, ACCEL_INTA2_Pin, ACCEL_INTA3_Pin};
 8003ab2:	4a40      	ldr	r2, [pc, #256]	@ (8003bb4 <VibeCheckSensor_Init+0x210>)
 8003ab4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003abc:	6018      	str	r0, [r3, #0]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int2_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_GPIO_Port, ACCEL_INTB2_GPIO_Port, ACCEL_INTB3_GPIO_Port};
 8003ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8003bb8 <VibeCheckSensor_Init+0x214>)
 8003ac4:	f107 0320 	add.w	r3, r7, #32
 8003ac8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int2_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_Pin, ACCEL_INTB2_Pin, ACCEL_INTB3_Pin};
 8003ace:	4a3b      	ldr	r2, [pc, #236]	@ (8003bbc <VibeCheckSensor_Init+0x218>)
 8003ad0:	f107 0318 	add.w	r3, r7, #24
 8003ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ad8:	6018      	str	r0, [r3, #0]
 8003ada:	3304      	adds	r3, #4
 8003adc:	8019      	strh	r1, [r3, #0]

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ae2:	e059      	b.n	8003b98 <VibeCheckSensor_Init+0x1f4>
	{
		LSM6DS3_Init(&sensor->sensor_array[i], &sensor->sensor_config[i],
 8003ae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ae6:	015b      	lsls	r3, r3, #5
 8003ae8:	3350      	adds	r3, #80	@ 0x50
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4413      	add	r3, r2
 8003aee:	1d1d      	adds	r5, r3, #4
 8003af0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	18d6      	adds	r6, r2, r3
 8003afe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	3360      	adds	r3, #96	@ 0x60
 8003b04:	f107 0208 	add.w	r2, r7, #8
 8003b08:	4413      	add	r3, r2
 8003b0a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8003b18:	f107 0308 	add.w	r3, r7, #8
 8003b1c:	18cb      	adds	r3, r1, r3
 8003b1e:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8003b22:	6039      	str	r1, [r7, #0]
 8003b24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003b2c:	f107 0308 	add.w	r3, r7, #8
 8003b30:	18c3      	adds	r3, r0, r3
 8003b32:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 8003b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003b3e:	f107 0308 	add.w	r3, r7, #8
 8003b42:	18c3      	adds	r3, r0, r3
 8003b44:	f853 1c34 	ldr.w	r1, [r3, #-52]
 8003b48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003b50:	f107 0308 	add.w	r3, r7, #8
 8003b54:	18c3      	adds	r3, r0, r3
 8003b56:	f833 0c3c 	ldrh.w	r0, [r3, #-60]
 8003b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 8003b62:	f107 0308 	add.w	r3, r7, #8
 8003b66:	18e3      	adds	r3, r4, r3
 8003b68:	f853 4c48 	ldr.w	r4, [r3, #-72]
 8003b6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	3360      	adds	r3, #96	@ 0x60
 8003b72:	f107 0c08 	add.w	ip, r7, #8
 8003b76:	4463      	add	r3, ip
 8003b78:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8003b7c:	9304      	str	r3, [sp, #16]
 8003b7e:	9403      	str	r4, [sp, #12]
 8003b80:	9002      	str	r0, [sp, #8]
 8003b82:	9101      	str	r1, [sp, #4]
 8003b84:	9200      	str	r2, [sp, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4631      	mov	r1, r6
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	f7fc ff93 	bl	8000ab8 <LSM6DS3_Init>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b94:	3301      	adds	r3, #1
 8003b96:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d9a2      	bls.n	8003ae4 <VibeCheckSensor_Init+0x140>
				hspi[i], cs_ports[i], cs_pins[i], int1_ports[i], int1_pins[i], int2_ports[i], int2_pins[i]);
	}

}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	376c      	adds	r7, #108	@ 0x6c
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba8:	0801d0e4 	.word	0x0801d0e4
 8003bac:	0801d0f0 	.word	0x0801d0f0
 8003bb0:	0801d0f8 	.word	0x0801d0f8
 8003bb4:	0801d104 	.word	0x0801d104
 8003bb8:	0801d10c 	.word	0x0801d10c
 8003bbc:	0801d118 	.word	0x0801d118

08003bc0 <VibeCheckSensor_Update>:


void VibeCheckSensor_Update(VibeCheckSensor* sensor)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003bc8:	f003 f8be 	bl	8006d48 <HAL_GetTick>
 8003bcc:	61b8      	str	r0, [r7, #24]
	if (time - sensor->time_prev_update > VC_SENSOR_UPDATE_INTERVAL_MS)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003bdc:	f240 8105 	bls.w	8003dea <VibeCheckSensor_Update+0x22a>

		/* if not connected -> test for connection -> if success, set connected flag, configure the sensor, and send message to host */
		/* if connected but not running -> test for connection -> if failure, reset connected flag, send message to host */
		/* if running either accelerometer or gyro -> check data received status flag and reset it -> if no data received, reset connected flag, send message to host */

		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
 8003be4:	e09e      	b.n	8003d24 <VibeCheckSensor_Update+0x164>
		{
			if (!sensor->status[i].is_connected)
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	33b4      	adds	r3, #180	@ 0xb4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d12f      	bne.n	8003c5c <VibeCheckSensor_Update+0x9c>
			{
				if (LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	015b      	lsls	r3, r3, #5
 8003c00:	3350      	adds	r3, #80	@ 0x50
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fc ff7f 	bl	8000b0c <LSM6DS3_TestCommunication>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8084 	beq.w	8003d1e <VibeCheckSensor_Update+0x15e>
				{
					sensor->status[i].is_connected = 1;
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	33b4      	adds	r3, #180	@ 0xb4
 8003c26:	2201      	movs	r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
					sensor->status[i].connection_change_flag = 1;
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	33c4      	adds	r3, #196	@ 0xc4
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
					sensor->status[i].received_data_flag = 1;  /* give ourselves a grace period to receive data by artificially setting the flag */
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	33c0      	adds	r3, #192	@ 0xc0
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
					VibeCheckSensor_UpdateSensor(sensor, i);
 8003c52:	69f9      	ldr	r1, [r7, #28]
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fbac 	bl	80043b2 <VibeCheckSensor_UpdateSensor>
 8003c5a:	e060      	b.n	8003d1e <VibeCheckSensor_Update+0x15e>
				}
			}
			else
			{
				if (!sensor->status[i].accel_measuring && !sensor->status[i].gyro_measuring)
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	33b8      	adds	r3, #184	@ 0xb8
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d12b      	bne.n	8003cca <VibeCheckSensor_Update+0x10a>
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	33bc      	adds	r3, #188	@ 0xbc
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d120      	bne.n	8003cca <VibeCheckSensor_Update+0x10a>
				{
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	015b      	lsls	r3, r3, #5
 8003c8c:	3350      	adds	r3, #80	@ 0x50
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	3304      	adds	r3, #4
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fc ff39 	bl	8000b0c <LSM6DS3_TestCommunication>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d13e      	bne.n	8003d1e <VibeCheckSensor_Update+0x15e>
					{
						sensor->status[i].is_connected = 0;
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	33b4      	adds	r3, #180	@ 0xb4
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	33c4      	adds	r3, #196	@ 0xc4
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8003cc8:	e029      	b.n	8003d1e <VibeCheckSensor_Update+0x15e>
					}
				}
				else
				{
					if (sensor->status[i].received_data_flag)
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	33c0      	adds	r3, #192	@ 0xc0
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <VibeCheckSensor_Update+0x136>
					{
						sensor->status[i].received_data_flag = 0;
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	33c0      	adds	r3, #192	@ 0xc0
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e013      	b.n	8003d1e <VibeCheckSensor_Update+0x15e>
					}
					else
					{
						sensor->status[i].is_connected = 0;
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	33b4      	adds	r3, #180	@ 0xb4
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	33c4      	adds	r3, #196	@ 0xc4
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3301      	adds	r3, #1
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	f67f af5d 	bls.w	8003be6 <VibeCheckSensor_Update+0x26>
				}
			}
		}

		/* make some random data (3 sine wave phases) for testing the host plotting/data logging */
		if (sensor->generate_fake_data)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d055      	beq.n	8003de2 <VibeCheckSensor_Update+0x222>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	ee07 3a90 	vmov	s15, r3
 8003d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d40:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003df4 <VibeCheckSensor_Update+0x234>
 8003d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d48:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4c:	f018 fb64 	bl	801c418 <sinf>
 8003d50:	ed87 0a05 	vstr	s0, [r7, #20]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5e:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8003df4 <VibeCheckSensor_Update+0x234>
 8003d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d66:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003df8 <VibeCheckSensor_Update+0x238>
 8003d6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d72:	f018 fb51 	bl	801c418 <sinf>
 8003d76:	ed87 0a04 	vstr	s0, [r7, #16]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	ee07 3a90 	vmov	s15, r3
 8003d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d84:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003df4 <VibeCheckSensor_Update+0x234>
 8003d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d8c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003dfc <VibeCheckSensor_Update+0x23c>
 8003d90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d94:	eeb0 0a67 	vmov.f32	s0, s15
 8003d98:	f018 fb3e 	bl	801c418 <sinf>
 8003d9c:	ed87 0a03 	vstr	s0, [r7, #12]

			VibeCheckSensor_AddData(sensor, 1, time, val1, val2, val3);
 8003da0:	ed97 1a03 	vldr	s2, [r7, #12]
 8003da4:	edd7 0a04 	vldr	s1, [r7, #16]
 8003da8:	ed97 0a05 	vldr	s0, [r7, #20]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	2101      	movs	r1, #1
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fb48 	bl	8004446 <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 2, time, val3, val1, val2);
 8003db6:	ed97 1a04 	vldr	s2, [r7, #16]
 8003dba:	edd7 0a05 	vldr	s1, [r7, #20]
 8003dbe:	ed97 0a03 	vldr	s0, [r7, #12]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fb3d 	bl	8004446 <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 3, time, val2, val3, val1);
 8003dcc:	ed97 1a05 	vldr	s2, [r7, #20]
 8003dd0:	edd7 0a03 	vldr	s1, [r7, #12]
 8003dd4:	ed97 0a04 	vldr	s0, [r7, #16]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	2103      	movs	r1, #3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fb32 	bl	8004446 <VibeCheckSensor_AddData>
		}

		sensor->time_prev_update = time;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
	}
}
 8003dea:	bf00      	nop
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40c90fd0 	.word	0x40c90fd0
 8003df8:	3f860a8b 	.word	0x3f860a8b
 8003dfc:	40060a8b 	.word	0x40060a8b

08003e00 <VibeCheckSensor_StartAccel>:

void VibeCheckSensor_StartAccel(VibeCheckSensor* sensor, uint32_t channel)  /* start acceleration measurement of specified channel */
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <VibeCheckSensor_StartAccel+0x14>
 8003e10:	2302      	movs	r3, #2
 8003e12:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].accel_measuring)
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	33b4      	adds	r3, #180	@ 0xb4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d013      	beq.n	8003e52 <VibeCheckSensor_StartAccel+0x52>
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	33b8      	adds	r3, #184	@ 0xb8
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d108      	bne.n	8003e52 <VibeCheckSensor_StartAccel+0x52>
		LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	015b      	lsls	r3, r3, #5
 8003e44:	3350      	adds	r3, #80	@ 0x50
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc feed 	bl	8000c2c <LSM6DS3_StartAccel>
	/*
	 * I choose to set the flag here immediately, even if the accelerometer is not currently connected. This way, it can be set
	 * to start sampling immediately once the accelerometer is plugged in.
	 */

	sensor->status[channel].accel_measuring = 1;
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	33b8      	adds	r3, #184	@ 0xb8
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <VibeCheckSensor_StopAccel>:

void VibeCheckSensor_StopAccel(VibeCheckSensor* sensor, uint32_t channel)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <VibeCheckSensor_StopAccel+0x14>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].accel_measuring)
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	33b4      	adds	r3, #180	@ 0xb4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <VibeCheckSensor_StopAccel+0x52>
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	33b8      	adds	r3, #184	@ 0xb8
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <VibeCheckSensor_StopAccel+0x52>
		LSM6DS3_StopAccel(&sensor->sensor_array[channel]);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	015b      	lsls	r3, r3, #5
 8003eb2:	3350      	adds	r3, #80	@ 0x50
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3304      	adds	r3, #4
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fff0 	bl	8000ea0 <LSM6DS3_StopAccel>

	sensor->status[channel].accel_measuring = 0;
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	33b8      	adds	r3, #184	@ 0xb8
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <VibeCheckSensor_StartGyro>:

void VibeCheckSensor_StartGyro(VibeCheckSensor* sensor, uint32_t channel)  /* start gyroscope measurement of specified channel */
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <VibeCheckSensor_StartGyro+0x14>
 8003eec:	2302      	movs	r3, #2
 8003eee:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].gyro_measuring)
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	33b4      	adds	r3, #180	@ 0xb4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d013      	beq.n	8003f2e <VibeCheckSensor_StartGyro+0x52>
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	33bc      	adds	r3, #188	@ 0xbc
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d108      	bne.n	8003f2e <VibeCheckSensor_StartGyro+0x52>
		LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	015b      	lsls	r3, r3, #5
 8003f20:	3350      	adds	r3, #80	@ 0x50
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	3304      	adds	r3, #4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fc ff21 	bl	8000d70 <LSM6DS3_StartGyro>

	sensor->status[channel].gyro_measuring = 1;
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	33bc      	adds	r3, #188	@ 0xbc
 8003f3e:	2201      	movs	r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <VibeCheckSensor_StopGyro>:

void VibeCheckSensor_StopGyro(VibeCheckSensor* sensor, uint32_t channel)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <VibeCheckSensor_StopGyro+0x14>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].gyro_measuring)
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	33b4      	adds	r3, #180	@ 0xb4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d013      	beq.n	8003f9c <VibeCheckSensor_StopGyro+0x52>
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	33bc      	adds	r3, #188	@ 0xbc
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <VibeCheckSensor_StopGyro+0x52>
		LSM6DS3_StopGyro(&sensor->sensor_array[channel]);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	015b      	lsls	r3, r3, #5
 8003f8e:	3350      	adds	r3, #80	@ 0x50
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fc ff90 	bl	8000ebc <LSM6DS3_StopGyro>

	sensor->status[channel].gyro_measuring = 0;
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	33bc      	adds	r3, #188	@ 0xbc
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <VibeCheckSensor_SetAccelODR>:

void VibeCheckSensor_SetAccelODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <VibeCheckSensor_SetAccelODR+0x16>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].accel_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	210a      	movs	r1, #10
 8003fd2:	480a      	ldr	r0, [pc, #40]	@ (8003ffc <VibeCheckSensor_SetAccelODR+0x44>)
 8003fd4:	f7fe ff9e 	bl	8002f14 <FindClosest>
 8003fd8:	68f9      	ldr	r1, [r7, #12]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f9e0 	bl	80043b2 <VibeCheckSensor_UpdateSensor>
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	0801d53c 	.word	0x0801d53c

08004000 <VibeCheckSensor_SetGyroODR>:

void VibeCheckSensor_SetGyroODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <VibeCheckSensor_SetGyroODR+0x16>
 8004012:	2302      	movs	r3, #2
 8004014:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].gyro_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	210a      	movs	r1, #10
 800401a:	480a      	ldr	r0, [pc, #40]	@ (8004044 <VibeCheckSensor_SetGyroODR+0x44>)
 800401c:	f7fe ff7a 	bl	8002f14 <FindClosest>
 8004020:	68f9      	ldr	r1, [r7, #12]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	3314      	adds	r3, #20
 8004030:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f9bc 	bl	80043b2 <VibeCheckSensor_UpdateSensor>
}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	0801d53c 	.word	0x0801d53c

08004048 <VibeCheckSensor_SetAccelRange>:

void VibeCheckSensor_SetAccelRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <VibeCheckSensor_SetAccelRange+0x16>
 800405a:	2302      	movs	r3, #2
 800405c:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].g_range = FindClosest(VC_SENSOR_ALLOWED_G_RANGE, sizeof(VC_SENSOR_ALLOWED_G_RANGE) / sizeof(VC_SENSOR_ALLOWED_G_RANGE[0]), range);
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	2104      	movs	r1, #4
 8004062:	480a      	ldr	r0, [pc, #40]	@ (800408c <VibeCheckSensor_SetAccelRange+0x44>)
 8004064:	f7fe ff56 	bl	8002f14 <FindClosest>
 8004068:	68f9      	ldr	r1, [r7, #12]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	3310      	adds	r3, #16
 8004078:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f998 	bl	80043b2 <VibeCheckSensor_UpdateSensor>
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	0801d564 	.word	0x0801d564

08004090 <VibeCheckSensor_SetGyroRange>:

void VibeCheckSensor_SetGyroRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <VibeCheckSensor_SetGyroRange+0x16>
 80040a2:	2302      	movs	r3, #2
 80040a4:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].dps_range = FindClosest(VC_SENSOR_ALLOWED_DPS_RANGE, sizeof(VC_SENSOR_ALLOWED_DPS_RANGE) / sizeof(VC_SENSOR_ALLOWED_DPS_RANGE[0]), range);
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	2105      	movs	r1, #5
 80040aa:	480a      	ldr	r0, [pc, #40]	@ (80040d4 <VibeCheckSensor_SetGyroRange+0x44>)
 80040ac:	f7fe ff32 	bl	8002f14 <FindClosest>
 80040b0:	68f9      	ldr	r1, [r7, #12]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	3318      	adds	r3, #24
 80040c0:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f974 	bl	80043b2 <VibeCheckSensor_UpdateSensor>
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	0801d574 	.word	0x0801d574

080040d8 <VibeCheckSensor_SetOffsets>:

void VibeCheckSensor_SetOffsets(VibeCheckSensor* sensor, uint32_t channel, float x, float y, float z)  /* accelerometer DC offsets in g */
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6178      	str	r0, [r7, #20]
 80040e0:	6139      	str	r1, [r7, #16]
 80040e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80040e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80040ea:	ed87 1a01 	vstr	s2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <VibeCheckSensor_SetOffsets+0x20>
 80040f4:	2302      	movs	r3, #2
 80040f6:	613b      	str	r3, [r7, #16]

	/* TODO: test that setting the sensor user offset registers works */

	if (x > VC_SENSOR_MAX_OFFSET) x = VC_SENSOR_MAX_OFFSET;  /* clamp the offsets to the max value that can fit in the register */
 80040f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80040fc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80041c8 <VibeCheckSensor_SetOffsets+0xf0>
 8004100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004108:	dd01      	ble.n	800410e <VibeCheckSensor_SetOffsets+0x36>
 800410a:	4b30      	ldr	r3, [pc, #192]	@ (80041cc <VibeCheckSensor_SetOffsets+0xf4>)
 800410c:	60fb      	str	r3, [r7, #12]
	if (x < -VC_SENSOR_MAX_OFFSET) x = -VC_SENSOR_MAX_OFFSET;
 800410e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004112:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80041d0 <VibeCheckSensor_SetOffsets+0xf8>
 8004116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411e:	d501      	bpl.n	8004124 <VibeCheckSensor_SetOffsets+0x4c>
 8004120:	4b2c      	ldr	r3, [pc, #176]	@ (80041d4 <VibeCheckSensor_SetOffsets+0xfc>)
 8004122:	60fb      	str	r3, [r7, #12]
	if (y > VC_SENSOR_MAX_OFFSET) y = VC_SENSOR_MAX_OFFSET;
 8004124:	edd7 7a02 	vldr	s15, [r7, #8]
 8004128:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80041c8 <VibeCheckSensor_SetOffsets+0xf0>
 800412c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004134:	dd01      	ble.n	800413a <VibeCheckSensor_SetOffsets+0x62>
 8004136:	4b25      	ldr	r3, [pc, #148]	@ (80041cc <VibeCheckSensor_SetOffsets+0xf4>)
 8004138:	60bb      	str	r3, [r7, #8]
	if (y < -VC_SENSOR_MAX_OFFSET) y = -VC_SENSOR_MAX_OFFSET;
 800413a:	edd7 7a02 	vldr	s15, [r7, #8]
 800413e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80041d0 <VibeCheckSensor_SetOffsets+0xf8>
 8004142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414a:	d501      	bpl.n	8004150 <VibeCheckSensor_SetOffsets+0x78>
 800414c:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <VibeCheckSensor_SetOffsets+0xfc>)
 800414e:	60bb      	str	r3, [r7, #8]
	if (z > VC_SENSOR_MAX_OFFSET) z = VC_SENSOR_MAX_OFFSET;
 8004150:	edd7 7a01 	vldr	s15, [r7, #4]
 8004154:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80041c8 <VibeCheckSensor_SetOffsets+0xf0>
 8004158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800415c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004160:	dd01      	ble.n	8004166 <VibeCheckSensor_SetOffsets+0x8e>
 8004162:	4b1a      	ldr	r3, [pc, #104]	@ (80041cc <VibeCheckSensor_SetOffsets+0xf4>)
 8004164:	607b      	str	r3, [r7, #4]
	if (z < -VC_SENSOR_MAX_OFFSET) z = -VC_SENSOR_MAX_OFFSET;
 8004166:	edd7 7a01 	vldr	s15, [r7, #4]
 800416a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80041d0 <VibeCheckSensor_SetOffsets+0xf8>
 800416e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	d501      	bpl.n	800417c <VibeCheckSensor_SetOffsets+0xa4>
 8004178:	4b16      	ldr	r3, [pc, #88]	@ (80041d4 <VibeCheckSensor_SetOffsets+0xfc>)
 800417a:	607b      	str	r3, [r7, #4]

	sensor->sensor_config[channel].usr_offset_x = x;
 800417c:	6979      	ldr	r1, [r7, #20]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_y = y;
 800418e:	6979      	ldr	r1, [r7, #20]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	3304      	adds	r3, #4
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_z = z;
 80041a2:	6979      	ldr	r1, [r7, #20]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	3308      	adds	r3, #8
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	601a      	str	r2, [r3, #0]

	VibeCheckSensor_UpdateSensor(sensor, channel);
 80041b6:	6939      	ldr	r1, [r7, #16]
 80041b8:	6978      	ldr	r0, [r7, #20]
 80041ba:	f000 f8fa 	bl	80043b2 <VibeCheckSensor_UpdateSensor>
}
 80041be:	bf00      	nop
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	3dfe0000 	.word	0x3dfe0000
 80041cc:	3dfe0000 	.word	0x3dfe0000
 80041d0:	bdfe0000 	.word	0xbdfe0000
 80041d4:	bdfe0000 	.word	0xbdfe0000

080041d8 <VibeCheckSensor_GetAccelODR>:

uint32_t VibeCheckSensor_GetAccelODR(VibeCheckSensor* sensor, uint32_t channel)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <VibeCheckSensor_GetAccelODR+0x14>
 80041e8:	2302      	movs	r3, #2
 80041ea:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].accel_odr_hz;
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	330c      	adds	r3, #12
 80041fc:	681b      	ldr	r3, [r3, #0]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <VibeCheckSensor_GetGyroODR>:

uint32_t VibeCheckSensor_GetGyroODR(VibeCheckSensor* sensor, uint32_t channel)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <VibeCheckSensor_GetGyroODR+0x14>
 800421a:	2302      	movs	r3, #2
 800421c:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].gyro_odr_hz;
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	3314      	adds	r3, #20
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <VibeCheckSensor_GetAccelRange>:

uint32_t VibeCheckSensor_GetAccelRange(VibeCheckSensor* sensor, uint32_t channel)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <VibeCheckSensor_GetAccelRange+0x14>
 800424c:	2302      	movs	r3, #2
 800424e:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].g_range;
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	3310      	adds	r3, #16
 8004260:	681b      	ldr	r3, [r3, #0]
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <VibeCheckSensor_GetGyroRange>:

uint32_t VibeCheckSensor_GetGyroRange(VibeCheckSensor* sensor, uint32_t channel)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <VibeCheckSensor_GetGyroRange+0x14>
 800427e:	2302      	movs	r3, #2
 8004280:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].dps_range;
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3318      	adds	r3, #24
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <VibeCheckSensor_GetOffsets>:

void VibeCheckSensor_GetOffsets(VibeCheckSensor* sensor, uint32_t channel, float* x, float* y, float* z)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <VibeCheckSensor_GetOffsets+0x18>
 80042b4:	2302      	movs	r3, #2
 80042b6:	60bb      	str	r3, [r7, #8]
	*x = sensor->sensor_config[channel].usr_offset_x;
 80042b8:	68f9      	ldr	r1, [r7, #12]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
	*y = sensor->sensor_config[channel].usr_offset_y;
 80042cc:	68f9      	ldr	r1, [r7, #12]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	4613      	mov	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	3304      	adds	r3, #4
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	601a      	str	r2, [r3, #0]
	*z = sensor->sensor_config[channel].usr_offset_z;
 80042e2:	68f9      	ldr	r1, [r7, #12]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	3308      	adds	r3, #8
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	601a      	str	r2, [r3, #0]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <VibeCheckSensor_StartFakeData>:


void VibeCheckSensor_StartFakeData(VibeCheckSensor* sensor)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 1;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <VibeCheckSensor_StopFakeData>:


void VibeCheckSensor_StopFakeData(VibeCheckSensor* sensor)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 0;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <VibeCheckSensor_ConnectionChanged>:
	sensor->start_time = *sensor->time_micros;
}


uint32_t VibeCheckSensor_ConnectionChanged(VibeCheckSensor* sensor, uint32_t* channel, uint32_t* is_connected)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e027      	b.n	800439e <VibeCheckSensor_ConnectionChanged+0x62>
	{
		if (sensor->status[i].connection_change_flag)
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	33c4      	adds	r3, #196	@ 0xc4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d019      	beq.n	8004398 <VibeCheckSensor_ConnectionChanged+0x5c>
		{
			sensor->status[i].connection_change_flag = 0;
 8004364:	68f9      	ldr	r1, [r7, #12]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	33c4      	adds	r3, #196	@ 0xc4
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
			*channel = i;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	601a      	str	r2, [r3, #0]
			*is_connected = sensor->status[i].is_connected;
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	33b4      	adds	r3, #180	@ 0xb4
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	601a      	str	r2, [r3, #0]
			return 1;
 8004394:	2301      	movs	r3, #1
 8004396:	e006      	b.n	80043a6 <VibeCheckSensor_ConnectionChanged+0x6a>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	3301      	adds	r3, #1
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d9d4      	bls.n	800434e <VibeCheckSensor_ConnectionChanged+0x12>
		}
	}

	return 0;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <VibeCheckSensor_UpdateSensor>:


void VibeCheckSensor_UpdateSensor(VibeCheckSensor* sensor, uint32_t channel)  /* send the new configuration parameters to a sensor chip */
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <VibeCheckSensor_UpdateSensor+0x14>
 80043c2:	2302      	movs	r3, #2
 80043c4:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected)
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	33b4      	adds	r3, #180	@ 0xb4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d030      	beq.n	800443e <VibeCheckSensor_UpdateSensor+0x8c>
	{
		LSM6DS3_Configure(&sensor->sensor_array[channel]);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	015b      	lsls	r3, r3, #5
 80043e0:	3350      	adds	r3, #80	@ 0x50
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	4413      	add	r3, r2
 80043e6:	3304      	adds	r3, #4
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fc fba9 	bl	8000b40 <LSM6DS3_Configure>
		if (sensor->status[channel].accel_measuring)
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	33b8      	adds	r3, #184	@ 0xb8
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <VibeCheckSensor_UpdateSensor+0x64>
			LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	015b      	lsls	r3, r3, #5
 8004408:	3350      	adds	r3, #80	@ 0x50
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	3304      	adds	r3, #4
 8004410:	4618      	mov	r0, r3
 8004412:	f7fc fc0b 	bl	8000c2c <LSM6DS3_StartAccel>
		if (sensor->status[channel].gyro_measuring)
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	33bc      	adds	r3, #188	@ 0xbc
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <VibeCheckSensor_UpdateSensor+0x8c>
			LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	015b      	lsls	r3, r3, #5
 8004430:	3350      	adds	r3, #80	@ 0x50
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	3304      	adds	r3, #4
 8004438:	4618      	mov	r0, r3
 800443a:	f7fc fc99 	bl	8000d70 <LSM6DS3_StartGyro>
	}
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <VibeCheckSensor_AddData>:


void VibeCheckSensor_AddData(VibeCheckSensor* sensor, uint8_t id, uint32_t time, float x, float y, float z)
{
 8004446:	b480      	push	{r7}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	6178      	str	r0, [r7, #20]
 800444e:	460b      	mov	r3, r1
 8004450:	60fa      	str	r2, [r7, #12]
 8004452:	ed87 0a02 	vstr	s0, [r7, #8]
 8004456:	edc7 0a01 	vstr	s1, [r7, #4]
 800445a:	ed87 1a00 	vstr	s2, [r7]
 800445e:	74fb      	strb	r3, [r7, #19]
	sensor->data[sensor->data_ind].id = id;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8004466:	6979      	ldr	r1, [r7, #20]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	33f0      	adds	r3, #240	@ 0xf0
 8004474:	7cfa      	ldrb	r2, [r7, #19]
 8004476:	701a      	strb	r2, [r3, #0]
	sensor->data[sensor->data_ind].time = time;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 800447e:	6979      	ldr	r1, [r7, #20]
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	33f4      	adds	r3, #244	@ 0xf4
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].x = x;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8004496:	6979      	ldr	r1, [r7, #20]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	33f8      	adds	r3, #248	@ 0xf8
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].y = y;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 80044ae:	6979      	ldr	r1, [r7, #20]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	33fc      	adds	r3, #252	@ 0xfc
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].z = z;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 80044c6:	6979      	ldr	r1, [r7, #20]
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	601a      	str	r2, [r3, #0]

	sensor->data_ind++;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
	if (sensor->data_ind == VC_SENSOR_DATA_PER_PACKET)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80044ee:	2b0a      	cmp	r3, #10
 80044f0:	d104      	bne.n	80044fc <VibeCheckSensor_AddData+0xb6>
	{
		sensor->data_ready = 1;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
	{
		sensor->data_ind = 0;
		sensor->data_ready = 1;
	}
}
 80044fa:	e00c      	b.n	8004516 <VibeCheckSensor_AddData+0xd0>
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8004502:	2b14      	cmp	r3, #20
 8004504:	d107      	bne.n	8004516 <VibeCheckSensor_AddData+0xd0>
		sensor->data_ind = 0;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
		sensor->data_ready = 1;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2201      	movs	r2, #1
 8004512:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <VibeCheckSensor_GetDataReady>:


uint32_t VibeCheckSensor_GetDataReady(VibeCheckSensor* sensor, VibeCheckSensor_Data** data)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
	if (sensor->data_ready)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 8004532:	2b00      	cmp	r3, #0
 8004534:	d015      	beq.n	8004562 <VibeCheckSensor_GetDataReady+0x40>
	{
		sensor->data_ready = 0;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
		if (sensor->data_ind < VC_SENSOR_DATA_PER_PACKET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8004544:	2b09      	cmp	r3, #9
 8004546:	d805      	bhi.n	8004554 <VibeCheckSensor_GetDataReady+0x32>
		{
			/* ready to send the second half */
			*data = &sensor->data[VC_SENSOR_DATA_PER_PACKET];
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 72dc 	add.w	r2, r3, #440	@ 0x1b8
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	e004      	b.n	800455e <VibeCheckSensor_GetDataReady+0x3c>
		}
		else
		{
			/* ready to send the first half */
			*data = &sensor->data[0];
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	601a      	str	r2, [r3, #0]
		}
		return 1;
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <VibeCheckSensor_GetDataReady+0x42>
	}
	return 0;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <VibeCheckSensor_EXTICallback>:


void VibeCheckSensor_EXTICallback(VibeCheckSensor* sensor, uint16_t GPIO_Pin)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	@ 0x28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]
	/*
	 * Read the sensor data when a signal occurs on a data ready pin. We assume that the INT1 pin indicates acceleration
	 * data ready and that the INT2 pin indicates gyroscope data ready.
	 */

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800457c:	2300      	movs	r3, #0
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004580:	e097      	b.n	80046b2 <VibeCheckSensor_EXTICallback+0x142>
	{
		if (GPIO_Pin == sensor->sensor_array[i].int1_pin && sensor->status[i].accel_measuring)
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	3303      	adds	r3, #3
 8004588:	015b      	lsls	r3, r3, #5
 800458a:	4413      	add	r3, r2
 800458c:	3304      	adds	r3, #4
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	887a      	ldrh	r2, [r7, #2]
 8004592:	429a      	cmp	r2, r3
 8004594:	d13f      	bne.n	8004616 <VibeCheckSensor_EXTICallback+0xa6>
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	33b8      	adds	r3, #184	@ 0xb8
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d034      	beq.n	8004616 <VibeCheckSensor_EXTICallback+0xa6>
		{
			float x, y, z;
			LSM6DS3_ReadAccel(&sensor->sensor_array[i], &x, &y, &z);
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	015b      	lsls	r3, r3, #5
 80045b0:	3350      	adds	r3, #80	@ 0x50
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	1d18      	adds	r0, r3, #4
 80045b8:	f107 0318 	add.w	r3, r7, #24
 80045bc:	f107 021c 	add.w	r2, r7, #28
 80045c0:	f107 0120 	add.w	r1, r7, #32
 80045c4:	f7fc fc88 	bl	8000ed8 <LSM6DS3_ReadAccel>
			VibeCheckSensor_AddData(sensor, 2 * i, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	b2d9      	uxtb	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	@ 0x290
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80045e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80045e8:	edd7 6a06 	vldr	s13, [r7, #24]
 80045ec:	eeb0 1a66 	vmov.f32	s2, s13
 80045f0:	eef0 0a47 	vmov.f32	s1, s14
 80045f4:	eeb0 0a67 	vmov.f32	s0, s15
 80045f8:	461a      	mov	r2, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff ff23 	bl	8004446 <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	33c0      	adds	r3, #192	@ 0xc0
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]
			break;
 8004614:	e052      	b.n	80046bc <VibeCheckSensor_EXTICallback+0x14c>
		}

		if (GPIO_Pin == sensor->sensor_array[i].int2_pin && sensor->status[i].gyro_measuring)
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	015b      	lsls	r3, r3, #5
 800461c:	4413      	add	r3, r2
 800461e:	336c      	adds	r3, #108	@ 0x6c
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	429a      	cmp	r2, r3
 8004626:	d141      	bne.n	80046ac <VibeCheckSensor_EXTICallback+0x13c>
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	33bc      	adds	r3, #188	@ 0xbc
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d036      	beq.n	80046ac <VibeCheckSensor_EXTICallback+0x13c>
		{
			float x, y, z;
			LSM6DS3_ReadGyro(&sensor->sensor_array[i], &x, &y, &z);
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	015b      	lsls	r3, r3, #5
 8004642:	3350      	adds	r3, #80	@ 0x50
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	4413      	add	r3, r2
 8004648:	1d18      	adds	r0, r3, #4
 800464a:	f107 030c 	add.w	r3, r7, #12
 800464e:	f107 0210 	add.w	r2, r7, #16
 8004652:	f107 0114 	add.w	r1, r7, #20
 8004656:	f7fc fcc1 	bl	8000fdc <LSM6DS3_ReadGyro>
			VibeCheckSensor_AddData(sensor, 2 * i + 1, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	b2db      	uxtb	r3, r3
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	b2db      	uxtb	r3, r3
 8004662:	3301      	adds	r3, #1
 8004664:	b2d9      	uxtb	r1, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 3290 	ldr.w	r3, [r3, #656]	@ 0x290
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	edd7 7a05 	vldr	s15, [r7, #20]
 800467a:	ed97 7a04 	vldr	s14, [r7, #16]
 800467e:	edd7 6a03 	vldr	s13, [r7, #12]
 8004682:	eeb0 1a66 	vmov.f32	s2, s13
 8004686:	eef0 0a47 	vmov.f32	s1, s14
 800468a:	eeb0 0a67 	vmov.f32	s0, s15
 800468e:	461a      	mov	r2, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff fed8 	bl	8004446 <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	33c0      	adds	r3, #192	@ 0xc0
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
			break;
 80046aa:	e007      	b.n	80046bc <VibeCheckSensor_EXTICallback+0x14c>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	3301      	adds	r3, #1
 80046b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	f67f af64 	bls.w	8004582 <VibeCheckSensor_EXTICallback+0x12>
		}
	}
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	3728      	adds	r7, #40	@ 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <VibeCheckSensorCMD_Set>:

#include "vibecheck_sensor_handler.h"


static uint32_t VibeCheckSensorCMD_Set(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b09c      	sub	sp, #112	@ 0x70
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80046d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80046d4:	2240      	movs	r2, #64	@ 0x40
 80046d6:	4619      	mov	r1, r3
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f000 fe25 	bl	8005328 <VibeCheckShell_GetNextString>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80eb 	beq.w	80048bc <VibeCheckSensorCMD_Set+0x1f8>
	{
		if (!strcmp(str, "accel"))
 80046e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80046ea:	4977      	ldr	r1, [pc, #476]	@ (80048c8 <VibeCheckSensorCMD_Set+0x204>)
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fb fe0f 	bl	8000310 <strcmp>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d14f      	bne.n	8004798 <VibeCheckSensorCMD_Set+0xd4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80046f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80046fc:	2240      	movs	r2, #64	@ 0x40
 80046fe:	4619      	mov	r1, r3
 8004700:	68b8      	ldr	r0, [r7, #8]
 8004702:	f000 fe11 	bl	8005328 <VibeCheckShell_GetNextString>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80d7 	beq.w	80048bc <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 800470e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004712:	496e      	ldr	r1, [pc, #440]	@ (80048cc <VibeCheckSensorCMD_Set+0x208>)
 8004714:	4618      	mov	r0, r3
 8004716:	f7fb fdfb 	bl	8000310 <strcmp>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d118      	bne.n	8004752 <VibeCheckSensorCMD_Set+0x8e>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8004720:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004724:	4619      	mov	r1, r3
 8004726:	68b8      	ldr	r0, [r7, #8]
 8004728:	f000 fe6e 	bl	8005408 <VibeCheckShell_GetNextInt>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80c4 	beq.w	80048bc <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelODR(sensor, channel, odr);
 8004734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004736:	461a      	mov	r2, r3
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f7ff fc3c 	bl	8003fb8 <VibeCheckSensor_SetAccelODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004740:	4963      	ldr	r1, [pc, #396]	@ (80048d0 <VibeCheckSensorCMD_Set+0x20c>)
 8004742:	68b8      	ldr	r0, [r7, #8]
 8004744:	f000 ff08 	bl	8005558 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004748:	68b8      	ldr	r0, [r7, #8]
 800474a:	f000 ff83 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 800474e:	2301      	movs	r3, #1
 8004750:	e0b5      	b.n	80048be <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8004752:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004756:	495f      	ldr	r1, [pc, #380]	@ (80048d4 <VibeCheckSensorCMD_Set+0x210>)
 8004758:	4618      	mov	r0, r3
 800475a:	f7fb fdd9 	bl	8000310 <strcmp>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	f040 80ab 	bne.w	80048bc <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8004766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800476a:	4619      	mov	r1, r3
 800476c:	68b8      	ldr	r0, [r7, #8]
 800476e:	f000 fe4b 	bl	8005408 <VibeCheckShell_GetNextInt>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80a1 	beq.w	80048bc <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelRange(sensor, channel, range);
 800477a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477c:	461a      	mov	r2, r3
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7ff fc61 	bl	8004048 <VibeCheckSensor_SetAccelRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004786:	4952      	ldr	r1, [pc, #328]	@ (80048d0 <VibeCheckSensorCMD_Set+0x20c>)
 8004788:	68b8      	ldr	r0, [r7, #8]
 800478a:	f000 fee5 	bl	8005558 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 800478e:	68b8      	ldr	r0, [r7, #8]
 8004790:	f000 ff60 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004794:	2301      	movs	r3, #1
 8004796:	e092      	b.n	80048be <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8004798:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800479c:	494e      	ldr	r1, [pc, #312]	@ (80048d8 <VibeCheckSensorCMD_Set+0x214>)
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fb fdb6 	bl	8000310 <strcmp>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d14b      	bne.n	8004842 <VibeCheckSensorCMD_Set+0x17e>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80047aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047ae:	2240      	movs	r2, #64	@ 0x40
 80047b0:	4619      	mov	r1, r3
 80047b2:	68b8      	ldr	r0, [r7, #8]
 80047b4:	f000 fdb8 	bl	8005328 <VibeCheckShell_GetNextString>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d07e      	beq.n	80048bc <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 80047be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047c2:	4942      	ldr	r1, [pc, #264]	@ (80048cc <VibeCheckSensorCMD_Set+0x208>)
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fb fda3 	bl	8000310 <strcmp>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d117      	bne.n	8004800 <VibeCheckSensorCMD_Set+0x13c>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 80047d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047d4:	4619      	mov	r1, r3
 80047d6:	68b8      	ldr	r0, [r7, #8]
 80047d8:	f000 fe16 	bl	8005408 <VibeCheckShell_GetNextInt>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d06c      	beq.n	80048bc <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroODR(sensor, channel, odr);
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	461a      	mov	r2, r3
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f7ff fc09 	bl	8004000 <VibeCheckSensor_SetGyroODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 80047ee:	4938      	ldr	r1, [pc, #224]	@ (80048d0 <VibeCheckSensorCMD_Set+0x20c>)
 80047f0:	68b8      	ldr	r0, [r7, #8]
 80047f2:	f000 feb1 	bl	8005558 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 80047f6:	68b8      	ldr	r0, [r7, #8]
 80047f8:	f000 ff2c 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e05e      	b.n	80048be <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8004800:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004804:	4933      	ldr	r1, [pc, #204]	@ (80048d4 <VibeCheckSensorCMD_Set+0x210>)
 8004806:	4618      	mov	r0, r3
 8004808:	f7fb fd82 	bl	8000310 <strcmp>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d154      	bne.n	80048bc <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8004812:	f107 0320 	add.w	r3, r7, #32
 8004816:	4619      	mov	r1, r3
 8004818:	68b8      	ldr	r0, [r7, #8]
 800481a:	f000 fdf5 	bl	8005408 <VibeCheckShell_GetNextInt>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d04b      	beq.n	80048bc <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroRange(sensor, channel, range);
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	461a      	mov	r2, r3
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff fc30 	bl	8004090 <VibeCheckSensor_SetGyroRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004830:	4927      	ldr	r1, [pc, #156]	@ (80048d0 <VibeCheckSensorCMD_Set+0x20c>)
 8004832:	68b8      	ldr	r0, [r7, #8]
 8004834:	f000 fe90 	bl	8005558 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004838:	68b8      	ldr	r0, [r7, #8]
 800483a:	f000 ff0b 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 800483e:	2301      	movs	r3, #1
 8004840:	e03d      	b.n	80048be <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 8004842:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004846:	4925      	ldr	r1, [pc, #148]	@ (80048dc <VibeCheckSensorCMD_Set+0x218>)
 8004848:	4618      	mov	r0, r3
 800484a:	f7fb fd61 	bl	8000310 <strcmp>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d133      	bne.n	80048bc <VibeCheckSensorCMD_Set+0x1f8>
		{
			float x, y, z;
			if (VibeCheckShell_GetNextFloat(shell, &x)
 8004854:	f107 031c 	add.w	r3, r7, #28
 8004858:	4619      	mov	r1, r3
 800485a:	68b8      	ldr	r0, [r7, #8]
 800485c:	f000 fdf0 	bl	8005440 <VibeCheckShell_GetNextFloat>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d02a      	beq.n	80048bc <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &y)
 8004866:	f107 0318 	add.w	r3, r7, #24
 800486a:	4619      	mov	r1, r3
 800486c:	68b8      	ldr	r0, [r7, #8]
 800486e:	f000 fde7 	bl	8005440 <VibeCheckShell_GetNextFloat>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d021      	beq.n	80048bc <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &z))
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	4619      	mov	r1, r3
 800487e:	68b8      	ldr	r0, [r7, #8]
 8004880:	f000 fdde 	bl	8005440 <VibeCheckShell_GetNextFloat>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d018      	beq.n	80048bc <VibeCheckSensorCMD_Set+0x1f8>
			{
				VibeCheckSensor_SetOffsets(sensor, channel, x, y, z);
 800488a:	edd7 7a07 	vldr	s15, [r7, #28]
 800488e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004892:	edd7 6a05 	vldr	s13, [r7, #20]
 8004896:	eeb0 1a66 	vmov.f32	s2, s13
 800489a:	eef0 0a47 	vmov.f32	s1, s14
 800489e:	eeb0 0a67 	vmov.f32	s0, s15
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff fc17 	bl	80040d8 <VibeCheckSensor_SetOffsets>
				VibeCheckShell_PutOutputString(shell, "ack");
 80048aa:	4909      	ldr	r1, [pc, #36]	@ (80048d0 <VibeCheckSensorCMD_Set+0x20c>)
 80048ac:	68b8      	ldr	r0, [r7, #8]
 80048ae:	f000 fe53 	bl	8005558 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80048b2:	68b8      	ldr	r0, [r7, #8]
 80048b4:	f000 fece 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <VibeCheckSensorCMD_Set+0x1fa>
			}
		}
	}


	return 0;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3770      	adds	r7, #112	@ 0x70
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	0801d120 	.word	0x0801d120
 80048cc:	0801d128 	.word	0x0801d128
 80048d0:	0801d12c 	.word	0x0801d12c
 80048d4:	0801d130 	.word	0x0801d130
 80048d8:	0801d138 	.word	0x0801d138
 80048dc:	0801d140 	.word	0x0801d140

080048e0 <VibeCheckSensorCMD_Get>:


static uint32_t VibeCheckSensorCMD_Get(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b09a      	sub	sp, #104	@ 0x68
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80048ec:	f107 0320 	add.w	r3, r7, #32
 80048f0:	2240      	movs	r2, #64	@ 0x40
 80048f2:	4619      	mov	r1, r3
 80048f4:	68b8      	ldr	r0, [r7, #8]
 80048f6:	f000 fd17 	bl	8005328 <VibeCheckShell_GetNextString>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80dc 	beq.w	8004aba <VibeCheckSensorCMD_Get+0x1da>
	{
		if (!strcmp(str, "accel"))
 8004902:	f107 0320 	add.w	r3, r7, #32
 8004906:	496f      	ldr	r1, [pc, #444]	@ (8004ac4 <VibeCheckSensorCMD_Get+0x1e4>)
 8004908:	4618      	mov	r0, r3
 800490a:	f7fb fd01 	bl	8000310 <strcmp>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d147      	bne.n	80049a4 <VibeCheckSensorCMD_Get+0xc4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004914:	f107 0320 	add.w	r3, r7, #32
 8004918:	2240      	movs	r2, #64	@ 0x40
 800491a:	4619      	mov	r1, r3
 800491c:	68b8      	ldr	r0, [r7, #8]
 800491e:	f000 fd03 	bl	8005328 <VibeCheckShell_GetNextString>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80c8 	beq.w	8004aba <VibeCheckSensorCMD_Get+0x1da>
			{
				if (!strcmp(str, "odr"))
 800492a:	f107 0320 	add.w	r3, r7, #32
 800492e:	4966      	ldr	r1, [pc, #408]	@ (8004ac8 <VibeCheckSensorCMD_Get+0x1e8>)
 8004930:	4618      	mov	r0, r3
 8004932:	f7fb fced 	bl	8000310 <strcmp>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d114      	bne.n	8004966 <VibeCheckSensorCMD_Get+0x86>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800493c:	4963      	ldr	r1, [pc, #396]	@ (8004acc <VibeCheckSensorCMD_Get+0x1ec>)
 800493e:	68b8      	ldr	r0, [r7, #8]
 8004940:	f000 fe0a 	bl	8005558 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004944:	68b8      	ldr	r0, [r7, #8]
 8004946:	f000 fe77 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelODR(sensor, channel));
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7ff fc43 	bl	80041d8 <VibeCheckSensor_GetAccelODR>
 8004952:	4603      	mov	r3, r0
 8004954:	4619      	mov	r1, r3
 8004956:	68b8      	ldr	r0, [r7, #8]
 8004958:	f000 fe38 	bl	80055cc <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800495c:	68b8      	ldr	r0, [r7, #8]
 800495e:	f000 fe79 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004962:	2301      	movs	r3, #1
 8004964:	e0aa      	b.n	8004abc <VibeCheckSensorCMD_Get+0x1dc>
				}
				else if (!strcmp(str, "range"))
 8004966:	f107 0320 	add.w	r3, r7, #32
 800496a:	4959      	ldr	r1, [pc, #356]	@ (8004ad0 <VibeCheckSensorCMD_Get+0x1f0>)
 800496c:	4618      	mov	r0, r3
 800496e:	f7fb fccf 	bl	8000310 <strcmp>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	f040 80a0 	bne.w	8004aba <VibeCheckSensorCMD_Get+0x1da>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800497a:	4954      	ldr	r1, [pc, #336]	@ (8004acc <VibeCheckSensorCMD_Get+0x1ec>)
 800497c:	68b8      	ldr	r0, [r7, #8]
 800497e:	f000 fdeb 	bl	8005558 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004982:	68b8      	ldr	r0, [r7, #8]
 8004984:	f000 fe58 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelRange(sensor, channel));
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f7ff fc56 	bl	800423c <VibeCheckSensor_GetAccelRange>
 8004990:	4603      	mov	r3, r0
 8004992:	4619      	mov	r1, r3
 8004994:	68b8      	ldr	r0, [r7, #8]
 8004996:	f000 fe19 	bl	80055cc <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800499a:	68b8      	ldr	r0, [r7, #8]
 800499c:	f000 fe5a 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e08b      	b.n	8004abc <VibeCheckSensorCMD_Get+0x1dc>
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 80049a4:	f107 0320 	add.w	r3, r7, #32
 80049a8:	494a      	ldr	r1, [pc, #296]	@ (8004ad4 <VibeCheckSensorCMD_Get+0x1f4>)
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fb fcb0 	bl	8000310 <strcmp>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d145      	bne.n	8004a42 <VibeCheckSensorCMD_Get+0x162>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80049b6:	f107 0320 	add.w	r3, r7, #32
 80049ba:	2240      	movs	r2, #64	@ 0x40
 80049bc:	4619      	mov	r1, r3
 80049be:	68b8      	ldr	r0, [r7, #8]
 80049c0:	f000 fcb2 	bl	8005328 <VibeCheckShell_GetNextString>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d077      	beq.n	8004aba <VibeCheckSensorCMD_Get+0x1da>
			{
				if (!strcmp(str, "odr"))
 80049ca:	f107 0320 	add.w	r3, r7, #32
 80049ce:	493e      	ldr	r1, [pc, #248]	@ (8004ac8 <VibeCheckSensorCMD_Get+0x1e8>)
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fb fc9d 	bl	8000310 <strcmp>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d114      	bne.n	8004a06 <VibeCheckSensorCMD_Get+0x126>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 80049dc:	493b      	ldr	r1, [pc, #236]	@ (8004acc <VibeCheckSensorCMD_Get+0x1ec>)
 80049de:	68b8      	ldr	r0, [r7, #8]
 80049e0:	f000 fdba 	bl	8005558 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 80049e4:	68b8      	ldr	r0, [r7, #8]
 80049e6:	f000 fe27 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroODR(sensor, channel));
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff fc0c 	bl	800420a <VibeCheckSensor_GetGyroODR>
 80049f2:	4603      	mov	r3, r0
 80049f4:	4619      	mov	r1, r3
 80049f6:	68b8      	ldr	r0, [r7, #8]
 80049f8:	f000 fde8 	bl	80055cc <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 80049fc:	68b8      	ldr	r0, [r7, #8]
 80049fe:	f000 fe29 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e05a      	b.n	8004abc <VibeCheckSensorCMD_Get+0x1dc>
				}
				else if (!strcmp(str, "range"))
 8004a06:	f107 0320 	add.w	r3, r7, #32
 8004a0a:	4931      	ldr	r1, [pc, #196]	@ (8004ad0 <VibeCheckSensorCMD_Get+0x1f0>)
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fb fc7f 	bl	8000310 <strcmp>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d150      	bne.n	8004aba <VibeCheckSensorCMD_Get+0x1da>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004a18:	492c      	ldr	r1, [pc, #176]	@ (8004acc <VibeCheckSensorCMD_Get+0x1ec>)
 8004a1a:	68b8      	ldr	r0, [r7, #8]
 8004a1c:	f000 fd9c 	bl	8005558 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004a20:	68b8      	ldr	r0, [r7, #8]
 8004a22:	f000 fe09 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroRange(sensor, channel));
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff fc20 	bl	800426e <VibeCheckSensor_GetGyroRange>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4619      	mov	r1, r3
 8004a32:	68b8      	ldr	r0, [r7, #8]
 8004a34:	f000 fdca 	bl	80055cc <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004a38:	68b8      	ldr	r0, [r7, #8]
 8004a3a:	f000 fe0b 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e03c      	b.n	8004abc <VibeCheckSensorCMD_Get+0x1dc>
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 8004a42:	f107 0320 	add.w	r3, r7, #32
 8004a46:	4924      	ldr	r1, [pc, #144]	@ (8004ad8 <VibeCheckSensorCMD_Get+0x1f8>)
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fb fc61 	bl	8000310 <strcmp>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d132      	bne.n	8004aba <VibeCheckSensorCMD_Get+0x1da>
		{
			float x, y, z;
			VibeCheckSensor_GetOffsets(sensor, channel, &x, &y, &z);
 8004a54:	f107 0118 	add.w	r1, r7, #24
 8004a58:	f107 021c 	add.w	r2, r7, #28
 8004a5c:	f107 0314 	add.w	r3, r7, #20
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	460b      	mov	r3, r1
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff fc1a 	bl	80042a0 <VibeCheckSensor_GetOffsets>

			VibeCheckShell_PutOutputString(shell, "ack");
 8004a6c:	4917      	ldr	r1, [pc, #92]	@ (8004acc <VibeCheckSensorCMD_Get+0x1ec>)
 8004a6e:	68b8      	ldr	r0, [r7, #8]
 8004a70:	f000 fd72 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004a74:	68b8      	ldr	r0, [r7, #8]
 8004a76:	f000 fddf 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, x);
 8004a7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a82:	68b8      	ldr	r0, [r7, #8]
 8004a84:	f000 fdba 	bl	80055fc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004a88:	68b8      	ldr	r0, [r7, #8]
 8004a8a:	f000 fdd5 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, y);
 8004a8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a92:	eeb0 0a67 	vmov.f32	s0, s15
 8004a96:	68b8      	ldr	r0, [r7, #8]
 8004a98:	f000 fdb0 	bl	80055fc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004a9c:	68b8      	ldr	r0, [r7, #8]
 8004a9e:	f000 fdcb 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, z);
 8004aa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8004aaa:	68b8      	ldr	r0, [r7, #8]
 8004aac:	f000 fda6 	bl	80055fc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004ab0:	68b8      	ldr	r0, [r7, #8]
 8004ab2:	f000 fdcf 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <VibeCheckSensorCMD_Get+0x1dc>
		}
	}

	return 0;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3760      	adds	r7, #96	@ 0x60
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	0801d120 	.word	0x0801d120
 8004ac8:	0801d128 	.word	0x0801d128
 8004acc:	0801d12c 	.word	0x0801d12c
 8004ad0:	0801d130 	.word	0x0801d130
 8004ad4:	0801d138 	.word	0x0801d138
 8004ad8:	0801d140 	.word	0x0801d140

08004adc <VibeCheckSensorCMD_Execute>:


uint32_t VibeCheckSensorCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b094      	sub	sp, #80	@ 0x50
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	int32_t channel;
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004aea:	f107 030c 	add.w	r3, r7, #12
 8004aee:	2240      	movs	r2, #64	@ 0x40
 8004af0:	4619      	mov	r1, r3
 8004af2:	6838      	ldr	r0, [r7, #0]
 8004af4:	f000 fc18 	bl	8005328 <VibeCheckShell_GetNextString>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 8101 	beq.w	8004d02 <VibeCheckSensorCMD_Execute+0x226>
	{
		if (!strcmp(str, "fakedata"))
 8004b00:	f107 030c 	add.w	r3, r7, #12
 8004b04:	4981      	ldr	r1, [pc, #516]	@ (8004d0c <VibeCheckSensorCMD_Execute+0x230>)
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fb fc02 	bl	8000310 <strcmp>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d135      	bne.n	8004b7e <VibeCheckSensorCMD_Execute+0xa2>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004b12:	f107 030c 	add.w	r3, r7, #12
 8004b16:	2240      	movs	r2, #64	@ 0x40
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6838      	ldr	r0, [r7, #0]
 8004b1c:	f000 fc04 	bl	8005328 <VibeCheckShell_GetNextString>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 80ed 	beq.w	8004d02 <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 8004b28:	f107 030c 	add.w	r3, r7, #12
 8004b2c:	4978      	ldr	r1, [pc, #480]	@ (8004d10 <VibeCheckSensorCMD_Execute+0x234>)
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fb fbee 	bl	8000310 <strcmp>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10b      	bne.n	8004b52 <VibeCheckSensorCMD_Execute+0x76>
				{
					VibeCheckSensor_StartFakeData(sensor);
 8004b3a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004b3c:	f7ff fbe2 	bl	8004304 <VibeCheckSensor_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004b40:	4974      	ldr	r1, [pc, #464]	@ (8004d14 <VibeCheckSensorCMD_Execute+0x238>)
 8004b42:	6838      	ldr	r0, [r7, #0]
 8004b44:	f000 fd08 	bl	8005558 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004b48:	6838      	ldr	r0, [r7, #0]
 8004b4a:	f000 fd83 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e0d8      	b.n	8004d04 <VibeCheckSensorCMD_Execute+0x228>
				}
				else if (!strcmp(str, "stop"))
 8004b52:	f107 030c 	add.w	r3, r7, #12
 8004b56:	4970      	ldr	r1, [pc, #448]	@ (8004d18 <VibeCheckSensorCMD_Execute+0x23c>)
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fb fbd9 	bl	8000310 <strcmp>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f040 80ce 	bne.w	8004d02 <VibeCheckSensorCMD_Execute+0x226>
				{
					VibeCheckSensor_StopFakeData(sensor);
 8004b66:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004b68:	f7ff fbda 	bl	8004320 <VibeCheckSensor_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004b6c:	4969      	ldr	r1, [pc, #420]	@ (8004d14 <VibeCheckSensorCMD_Execute+0x238>)
 8004b6e:	6838      	ldr	r0, [r7, #0]
 8004b70:	f000 fcf2 	bl	8005558 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004b74:	6838      	ldr	r0, [r7, #0]
 8004b76:	f000 fd6d 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e0c2      	b.n	8004d04 <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
		else if (VibeCheckShell_TurnToInt(str, &channel))
 8004b7e:	f107 0208 	add.w	r2, r7, #8
 8004b82:	f107 030c 	add.w	r3, r7, #12
 8004b86:	4611      	mov	r1, r2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fc75 	bl	8005478 <VibeCheckShell_TurnToInt>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80b6 	beq.w	8004d02 <VibeCheckSensorCMD_Execute+0x226>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004b96:	f107 030c 	add.w	r3, r7, #12
 8004b9a:	2240      	movs	r2, #64	@ 0x40
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6838      	ldr	r0, [r7, #0]
 8004ba0:	f000 fbc2 	bl	8005328 <VibeCheckShell_GetNextString>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80ab 	beq.w	8004d02 <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 8004bac:	f107 030c 	add.w	r3, r7, #12
 8004bb0:	4957      	ldr	r1, [pc, #348]	@ (8004d10 <VibeCheckSensorCMD_Execute+0x234>)
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fb fbac 	bl	8000310 <strcmp>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d138      	bne.n	8004c30 <VibeCheckSensorCMD_Execute+0x154>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004bbe:	f107 030c 	add.w	r3, r7, #12
 8004bc2:	2240      	movs	r2, #64	@ 0x40
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6838      	ldr	r0, [r7, #0]
 8004bc8:	f000 fbae 	bl	8005328 <VibeCheckShell_GetNextString>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8097 	beq.w	8004d02 <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 8004bd4:	f107 030c 	add.w	r3, r7, #12
 8004bd8:	4950      	ldr	r1, [pc, #320]	@ (8004d1c <VibeCheckSensorCMD_Execute+0x240>)
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fb fb98 	bl	8000310 <strcmp>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10d      	bne.n	8004c02 <VibeCheckSensorCMD_Execute+0x126>
						{
							VibeCheckSensor_StartAccel(sensor, channel);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4619      	mov	r1, r3
 8004bea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004bec:	f7ff f908 	bl	8003e00 <VibeCheckSensor_StartAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8004bf0:	4948      	ldr	r1, [pc, #288]	@ (8004d14 <VibeCheckSensorCMD_Execute+0x238>)
 8004bf2:	6838      	ldr	r0, [r7, #0]
 8004bf4:	f000 fcb0 	bl	8005558 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8004bf8:	6838      	ldr	r0, [r7, #0]
 8004bfa:	f000 fd2b 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e080      	b.n	8004d04 <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 8004c02:	f107 030c 	add.w	r3, r7, #12
 8004c06:	4946      	ldr	r1, [pc, #280]	@ (8004d20 <VibeCheckSensorCMD_Execute+0x244>)
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fb fb81 	bl	8000310 <strcmp>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d176      	bne.n	8004d02 <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StartGyro(sensor, channel);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4619      	mov	r1, r3
 8004c18:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004c1a:	f7ff f95f 	bl	8003edc <VibeCheckSensor_StartGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8004c1e:	493d      	ldr	r1, [pc, #244]	@ (8004d14 <VibeCheckSensorCMD_Execute+0x238>)
 8004c20:	6838      	ldr	r0, [r7, #0]
 8004c22:	f000 fc99 	bl	8005558 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8004c26:	6838      	ldr	r0, [r7, #0]
 8004c28:	f000 fd14 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e069      	b.n	8004d04 <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "stop"))
 8004c30:	f107 030c 	add.w	r3, r7, #12
 8004c34:	4938      	ldr	r1, [pc, #224]	@ (8004d18 <VibeCheckSensorCMD_Execute+0x23c>)
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fb fb6a 	bl	8000310 <strcmp>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d137      	bne.n	8004cb2 <VibeCheckSensorCMD_Execute+0x1d6>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004c42:	f107 030c 	add.w	r3, r7, #12
 8004c46:	2240      	movs	r2, #64	@ 0x40
 8004c48:	4619      	mov	r1, r3
 8004c4a:	6838      	ldr	r0, [r7, #0]
 8004c4c:	f000 fb6c 	bl	8005328 <VibeCheckShell_GetNextString>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d055      	beq.n	8004d02 <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 8004c56:	f107 030c 	add.w	r3, r7, #12
 8004c5a:	4930      	ldr	r1, [pc, #192]	@ (8004d1c <VibeCheckSensorCMD_Execute+0x240>)
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fb fb57 	bl	8000310 <strcmp>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10d      	bne.n	8004c84 <VibeCheckSensorCMD_Execute+0x1a8>
						{
							VibeCheckSensor_StopAccel(sensor, channel);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004c6e:	f7ff f8fe 	bl	8003e6e <VibeCheckSensor_StopAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8004c72:	4928      	ldr	r1, [pc, #160]	@ (8004d14 <VibeCheckSensorCMD_Execute+0x238>)
 8004c74:	6838      	ldr	r0, [r7, #0]
 8004c76:	f000 fc6f 	bl	8005558 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8004c7a:	6838      	ldr	r0, [r7, #0]
 8004c7c:	f000 fcea 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e03f      	b.n	8004d04 <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 8004c84:	f107 030c 	add.w	r3, r7, #12
 8004c88:	4925      	ldr	r1, [pc, #148]	@ (8004d20 <VibeCheckSensorCMD_Execute+0x244>)
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fb fb40 	bl	8000310 <strcmp>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d135      	bne.n	8004d02 <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StopGyro(sensor, channel);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004c9c:	f7ff f955 	bl	8003f4a <VibeCheckSensor_StopGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8004ca0:	491c      	ldr	r1, [pc, #112]	@ (8004d14 <VibeCheckSensorCMD_Execute+0x238>)
 8004ca2:	6838      	ldr	r0, [r7, #0]
 8004ca4:	f000 fc58 	bl	8005558 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8004ca8:	6838      	ldr	r0, [r7, #0]
 8004caa:	f000 fcd3 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e028      	b.n	8004d04 <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "set"))
 8004cb2:	f107 030c 	add.w	r3, r7, #12
 8004cb6:	491b      	ldr	r1, [pc, #108]	@ (8004d24 <VibeCheckSensorCMD_Execute+0x248>)
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fb fb29 	bl	8000310 <strcmp>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <VibeCheckSensorCMD_Execute+0x1fe>
				{
					if (VibeCheckSensorCMD_Set(sensor, shell, channel))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	6839      	ldr	r1, [r7, #0]
 8004cca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004ccc:	f7ff fcfa 	bl	80046c4 <VibeCheckSensorCMD_Set>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d015      	beq.n	8004d02 <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e014      	b.n	8004d04 <VibeCheckSensorCMD_Execute+0x228>
					}
				}
				else if (!strcmp(str, "get"))
 8004cda:	f107 030c 	add.w	r3, r7, #12
 8004cde:	4912      	ldr	r1, [pc, #72]	@ (8004d28 <VibeCheckSensorCMD_Execute+0x24c>)
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fb fb15 	bl	8000310 <strcmp>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <VibeCheckSensorCMD_Execute+0x226>
				{
					if (VibeCheckSensorCMD_Get(sensor, shell, channel))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6839      	ldr	r1, [r7, #0]
 8004cf2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004cf4:	f7ff fdf4 	bl	80048e0 <VibeCheckSensorCMD_Get>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
	}

	return 0;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3750      	adds	r7, #80	@ 0x50
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	0801d148 	.word	0x0801d148
 8004d10:	0801d154 	.word	0x0801d154
 8004d14:	0801d12c 	.word	0x0801d12c
 8004d18:	0801d15c 	.word	0x0801d15c
 8004d1c:	0801d120 	.word	0x0801d120
 8004d20:	0801d138 	.word	0x0801d138
 8004d24:	0801d164 	.word	0x0801d164
 8004d28:	0801d168 	.word	0x0801d168

08004d2c <VibeCheckSensorSender_Data_Execute>:


uint32_t VibeCheckSensorSender_Data_Execute(void* obj, VibeCheckShell* shell)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	613b      	str	r3, [r7, #16]

	VibeCheckSensor_Data* data;
	if (VibeCheckSensor_GetDataReady(sensor, &data))
 8004d3a:	f107 030c 	add.w	r3, r7, #12
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6938      	ldr	r0, [r7, #16]
 8004d42:	f7ff fbee 	bl	8004522 <VibeCheckSensor_GetDataReady>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d04e      	beq.n	8004dea <VibeCheckSensorSender_Data_Execute+0xbe>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8004d4c:	4929      	ldr	r1, [pc, #164]	@ (8004df4 <VibeCheckSensorSender_Data_Execute+0xc8>)
 8004d4e:	6838      	ldr	r0, [r7, #0]
 8004d50:	f000 fc02 	bl	8005558 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004d54:	6838      	ldr	r0, [r7, #0]
 8004d56:	f000 fc6f 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_SENSOR_DATA_PER_PACKET);
 8004d5a:	210a      	movs	r1, #10
 8004d5c:	6838      	ldr	r0, [r7, #0]
 8004d5e:	f000 fc35 	bl	80055cc <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]
		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 8004d66:	e038      	b.n	8004dda <VibeCheckSensorSender_Data_Execute+0xae>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 8004d68:	6838      	ldr	r0, [r7, #0]
 8004d6a:	f000 fc65 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	4619      	mov	r1, r3
 8004d74:	6838      	ldr	r0, [r7, #0]
 8004d76:	f000 fc29 	bl	80055cc <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8004d7a:	6838      	ldr	r0, [r7, #0]
 8004d7c:	f000 fc5c 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4619      	mov	r1, r3
 8004d86:	6838      	ldr	r0, [r7, #0]
 8004d88:	f000 fc20 	bl	80055cc <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8004d8c:	6838      	ldr	r0, [r7, #0]
 8004d8e:	f000 fc53 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d98:	eeb0 0a67 	vmov.f32	s0, s15
 8004d9c:	6838      	ldr	r0, [r7, #0]
 8004d9e:	f000 fc2d 	bl	80055fc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004da2:	6838      	ldr	r0, [r7, #0]
 8004da4:	f000 fc48 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	edd3 7a03 	vldr	s15, [r3, #12]
 8004dae:	eeb0 0a67 	vmov.f32	s0, s15
 8004db2:	6838      	ldr	r0, [r7, #0]
 8004db4:	f000 fc22 	bl	80055fc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004db8:	6838      	ldr	r0, [r7, #0]
 8004dba:	f000 fc3d 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8004dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8004dc8:	6838      	ldr	r0, [r7, #0]
 8004dca:	f000 fc17 	bl	80055fc <VibeCheckShell_PutOutputFloat>

			data++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	60fb      	str	r3, [r7, #12]
			data_written++;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b09      	cmp	r3, #9
 8004dde:	d9c3      	bls.n	8004d68 <VibeCheckSensorSender_Data_Execute+0x3c>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8004de0:	6838      	ldr	r0, [r7, #0]
 8004de2:	f000 fc37 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <VibeCheckSensorSender_Data_Execute+0xc0>
	}

	return 0;
 8004dea:	2300      	movs	r3, #0

}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	0801d16c 	.word	0x0801d16c

08004df8 <VibeCheckSensorSender_Status_Execute>:


uint32_t VibeCheckSensorSender_Status_Execute(void* obj, VibeCheckShell* shell)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	617b      	str	r3, [r7, #20]

	uint32_t channel, is_connected;
	if (VibeCheckSensor_ConnectionChanged(sensor, &channel, &is_connected))
 8004e06:	f107 020c 	add.w	r2, r7, #12
 8004e0a:	f107 0310 	add.w	r3, r7, #16
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6978      	ldr	r0, [r7, #20]
 8004e12:	f7ff fa93 	bl	800433c <VibeCheckSensor_ConnectionChanged>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d026      	beq.n	8004e6a <VibeCheckSensorSender_Status_Execute+0x72>
	{
		VibeCheckShell_PutOutputString(shell, "msg");
 8004e1c:	4915      	ldr	r1, [pc, #84]	@ (8004e74 <VibeCheckSensorSender_Status_Execute+0x7c>)
 8004e1e:	6838      	ldr	r0, [r7, #0]
 8004e20:	f000 fb9a 	bl	8005558 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004e24:	6838      	ldr	r0, [r7, #0]
 8004e26:	f000 fc07 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "sensor");
 8004e2a:	4913      	ldr	r1, [pc, #76]	@ (8004e78 <VibeCheckSensorSender_Status_Execute+0x80>)
 8004e2c:	6838      	ldr	r0, [r7, #0]
 8004e2e:	f000 fb93 	bl	8005558 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004e32:	6838      	ldr	r0, [r7, #0]
 8004e34:	f000 fc00 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, channel);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6838      	ldr	r0, [r7, #0]
 8004e3e:	f000 fbc5 	bl	80055cc <VibeCheckShell_PutOutputInt>
		VibeCheckShell_PutOutputSeparator(shell);
 8004e42:	6838      	ldr	r0, [r7, #0]
 8004e44:	f000 fbf8 	bl	8005638 <VibeCheckShell_PutOutputSeparator>

		if (is_connected)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d004      	beq.n	8004e58 <VibeCheckSensorSender_Status_Execute+0x60>
			VibeCheckShell_PutOutputString(shell, "connected");
 8004e4e:	490b      	ldr	r1, [pc, #44]	@ (8004e7c <VibeCheckSensorSender_Status_Execute+0x84>)
 8004e50:	6838      	ldr	r0, [r7, #0]
 8004e52:	f000 fb81 	bl	8005558 <VibeCheckShell_PutOutputString>
 8004e56:	e003      	b.n	8004e60 <VibeCheckSensorSender_Status_Execute+0x68>
		else
			VibeCheckShell_PutOutputString(shell, "disconnected");
 8004e58:	4909      	ldr	r1, [pc, #36]	@ (8004e80 <VibeCheckSensorSender_Status_Execute+0x88>)
 8004e5a:	6838      	ldr	r0, [r7, #0]
 8004e5c:	f000 fb7c 	bl	8005558 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8004e60:	6838      	ldr	r0, [r7, #0]
 8004e62:	f000 fbf7 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
		return 1;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <VibeCheckSensorSender_Status_Execute+0x74>
	}

	return 0;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	0801d174 	.word	0x0801d174
 8004e78:	0801d178 	.word	0x0801d178
 8004e7c:	0801d180 	.word	0x0801d180
 8004e80:	0801d18c 	.word	0x0801d18c

08004e84 <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	shell->input_tail = 0;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
	shell->input_count = 0;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	shell->input_delimiter_count = 0;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

	shell->output_head = 0;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6153      	str	r3, [r2, #20]
	shell->output_count = 0;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6193      	str	r3, [r2, #24]

	shell->ih_count = 0;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	shell->oh_count = 0;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b099      	sub	sp, #100	@ 0x64
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8004f00:	2300      	movs	r3, #0
 8004f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8004f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f0e:	d302      	bcc.n	8004f16 <VibeCheckShell_Update+0x1e>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8092 	beq.w	8005046 <VibeCheckShell_Update+0x14e>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 8004f28:	e08d      	b.n	8005046 <VibeCheckShell_Update+0x14e>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 8004f2a:	f107 030c 	add.w	r3, r7, #12
 8004f2e:	2240      	movs	r2, #64	@ 0x40
 8004f30:	4619      	mov	r1, r3
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f9f8 	bl	8005328 <VibeCheckShell_GetNextString>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d04d      	beq.n	8004fda <VibeCheckShell_Update+0xe2>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f42:	e041      	b.n	8004fc8 <VibeCheckShell_Update+0xd0>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8004f44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	f241 0218 	movw	r2, #4120	@ 0x1018
 8004f52:	441a      	add	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4413      	add	r3, r2
 8004f58:	3304      	adds	r3, #4
 8004f5a:	f107 020c 	add.w	r2, r7, #12
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fb f9d5 	bl	8000310 <strcmp>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d11e      	bne.n	8004faa <VibeCheckShell_Update+0xb2>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f70:	4613      	mov	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4413      	add	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	18ca      	adds	r2, r1, r3
 8004f7a:	f241 035c 	movw	r3, #4188	@ 0x105c
 8004f7e:	4413      	add	r3, r2
 8004f80:	681c      	ldr	r4, [r3, #0]
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f86:	4613      	mov	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	47a0      	blx	r4
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d11f      	bne.n	8004fe2 <VibeCheckShell_Update+0xea>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8004fa8:	e01b      	b.n	8004fe2 <VibeCheckShell_Update+0xea>
				}

				if (i == shell->ih_count - 1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004fb0:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d102      	bne.n	8004fc2 <VibeCheckShell_Update+0xca>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8004fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004fce:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004fd2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d3b5      	bcc.n	8004f44 <VibeCheckShell_Update+0x4c>
 8004fd8:	e004      	b.n	8004fe4 <VibeCheckShell_Update+0xec>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8004fda:	2302      	movs	r3, #2
 8004fdc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8004fe0:	e000      	b.n	8004fe4 <VibeCheckShell_Update+0xec>
					break;
 8004fe2:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	5cd3      	ldrb	r3, [r2, r3]
 8004fee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8004ff8:	1e5a      	subs	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8005014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005018:	d103      	bne.n	8005022 <VibeCheckShell_Update+0x12a>
				shell->input_tail = 0;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 8005022:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005026:	4619      	mov	r1, r3
 8005028:	482c      	ldr	r0, [pc, #176]	@ (80050dc <VibeCheckShell_Update+0x1e4>)
 800502a:	f014 fc9a 	bl	8019962 <strchr>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d100      	bne.n	8005036 <VibeCheckShell_Update+0x13e>
		{
 8005034:	e7d6      	b.n	8004fe4 <VibeCheckShell_Update+0xec>
				break;  /* found the delimiter */
 8005036:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800503e:	1e5a      	subs	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	while (shell->input_delimiter_count)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800504c:	2b00      	cmp	r3, #0
 800504e:	f47f af6c 	bne.w	8004f2a <VibeCheckShell_Update+0x32>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8005052:	2300      	movs	r3, #0
 8005054:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005056:	e018      	b.n	800508a <VibeCheckShell_Update+0x192>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800505c:	f202 4244 	addw	r2, r2, #1092	@ 0x444
 8005060:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005068:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	440b      	add	r3, r1
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4618      	mov	r0, r3
 8005076:	4790      	blx	r2
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <VibeCheckShell_Update+0x18c>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 800507e:	2301      	movs	r3, #1
 8005080:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8005084:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005086:	3301      	adds	r3, #1
 8005088:	65bb      	str	r3, [r7, #88]	@ 0x58
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005090:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8005094:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005096:	429a      	cmp	r2, r3
 8005098:	d3de      	bcc.n	8005058 <VibeCheckShell_Update+0x160>
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050a6:	d302      	bcc.n	80050ae <VibeCheckShell_Update+0x1b6>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 80050ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80050b2:	2300      	movs	r3, #0
 80050b4:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80050b8:	f362 0307 	bfi	r3, r2, #0, #8
 80050bc:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 80050c0:	f362 230f 	bfi	r3, r2, #8, #8
 80050c4:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80050c8:	f362 4317 	bfi	r3, r2, #16, #8
 80050cc:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80050d0:	f362 631f 	bfi	r3, r2, #24, #8
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3764      	adds	r7, #100	@ 0x64
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd90      	pop	{r4, r7, pc}
 80050dc:	0801d19c 	.word	0x0801d19c

080050e0 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 80050e0:	b084      	sub	sp, #16
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	f107 0014 	add.w	r0, r7, #20
 80050ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80050f8:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80050fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80050fe:	d81a      	bhi.n	8005136 <VibeCheckShell_RegisterInputHandler+0x56>
		shell->input_handlers[shell->ih_count++] = handler;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005106:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800510a:	1c53      	adds	r3, r2, #1
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8005112:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4413      	add	r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	18ca      	adds	r2, r1, r3
 8005122:	f241 0318 	movw	r3, #4120	@ 0x1018
 8005126:	4413      	add	r3, r2
 8005128:	3304      	adds	r3, #4
 800512a:	f107 0114 	add.w	r1, r7, #20
 800512e:	2248      	movs	r2, #72	@ 0x48
 8005130:	4618      	mov	r0, r3
 8005132:	f014 fcac 	bl	8019a8e <memcpy>
}
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005140:	b004      	add	sp, #16
 8005142:	4770      	bx	lr

08005144 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	1d3b      	adds	r3, r7, #4
 800514e:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005158:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800515c:	2b3f      	cmp	r3, #63	@ 0x3f
 800515e:	d814      	bhi.n	800518a <VibeCheckShell_RegisterOutputHandler+0x46>
		shell->output_handlers[shell->oh_count++] = handler;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005166:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	68f9      	ldr	r1, [r7, #12]
 800516e:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8005172:	f8c1 2420 	str.w	r2, [r1, #1056]	@ 0x420
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	4413      	add	r3, r2
 8005180:	1d3a      	adds	r2, r7, #4
 8005182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005186:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e035      	b.n	8005216 <VibeCheckShell_PutInput+0x7e>
	{
		if (*input)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d036      	beq.n	8005220 <VibeCheckShell_PutInput+0x88>
		{
			shell->input[shell->input_head++] = *input;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80051b8:	1c59      	adds	r1, r3, #1
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	f8c2 1800 	str.w	r1, [r2, #2048]	@ 0x800
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	7811      	ldrb	r1, [r2, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80051ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051d2:	d103      	bne.n	80051dc <VibeCheckShell_PutInput+0x44>
					shell->input_head = 0;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
			shell->input_count++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	4619      	mov	r1, r3
 80051f0:	480e      	ldr	r0, [pc, #56]	@ (800522c <VibeCheckShell_PutInput+0x94>)
 80051f2:	f014 fbb6 	bl	8019962 <strchr>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d006      	beq.n	800520a <VibeCheckShell_PutInput+0x72>
				shell->input_delimiter_count++;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

			input++;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	3301      	adds	r3, #1
 800520e:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3301      	adds	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	429a      	cmp	r2, r3
 800521c:	d3c5      	bcc.n	80051aa <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 800521e:	e000      	b.n	8005222 <VibeCheckShell_PutInput+0x8a>
			break;
 8005220:	bf00      	nop
}
 8005222:	bf00      	nop
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	0801d19c 	.word	0x0801d19c

08005230 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	if (shell->output_head == shell->output_tail)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	d101      	bne.n	8005254 <VibeCheckShell_GetOutput+0x24>
		return 0;
 8005250:	2300      	movs	r3, #0
 8005252:	e062      	b.n	800531a <VibeCheckShell_GetOutput+0xea>

	if (shell->output_head > shell->output_tail)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	429a      	cmp	r2, r3
 8005266:	d930      	bls.n	80052ca <VibeCheckShell_GetOutput+0x9a>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[shell->output_tail];
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	441a      	add	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	601a      	str	r2, [r3, #0]
		*len = shell->output_head - shell->output_tail;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	1ad2      	subs	r2, r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	601a      	str	r2, [r3, #0]
		shell->output_count -= shell->output_head - shell->output_tail;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052a0:	6959      	ldr	r1, [r3, #20]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	1acb      	subs	r3, r1, r3
 80052ac:	4413      	add	r3, r2
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052b4:	6193      	str	r3, [r2, #24]
		shell->output_tail = shell->output_head;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052c4:	6153      	str	r3, [r2, #20]
		return 1;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e027      	b.n	800531a <VibeCheckShell_GetOutput+0xea>
	}
	else
	{
		/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
		*output = &shell->output[shell->output_tail];
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	441a      	add	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	601a      	str	r2, [r3, #0]
		*len = VC_SHELL_IO_BUF_LEN - shell->output_tail;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	601a      	str	r2, [r3, #0]
		shell->output_count -= VC_SHELL_IO_BUF_LEN - shell->output_tail;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	4413      	add	r3, r2
 8005300:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800530a:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005312:	461a      	mov	r2, r3
 8005314:	2300      	movs	r3, #0
 8005316:	6153      	str	r3, [r2, #20]
		return 1;
 8005318:	2301      	movs	r3, #1
	}

}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e057      	b.n	80053ea <VibeCheckShell_GetNextString+0xc2>
	{

		char x = shell->input[shell->input_tail];
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	5cd3      	ldrb	r3, [r2, r3]
 8005344:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	4619      	mov	r1, r3
 800534a:	482c      	ldr	r0, [pc, #176]	@ (80053fc <VibeCheckShell_GetNextString+0xd4>)
 800534c:	f014 fb09 	bl	8019962 <strchr>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d009      	beq.n	800536a <VibeCheckShell_GetNextString+0x42>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d004      	beq.n	8005366 <VibeCheckShell_GetNextString+0x3e>
			{
				*next = '\0';
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	701a      	strb	r2, [r3, #0]
				return 1;
 8005362:	2301      	movs	r3, #1
 8005364:	e046      	b.n	80053f4 <VibeCheckShell_GetNextString+0xcc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 8005366:	2300      	movs	r3, #0
 8005368:	e044      	b.n	80053f4 <VibeCheckShell_GetNextString+0xcc>
		}
		else
		{
			shell->input_count--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8005370:	1e5a      	subs	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800538c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005390:	d103      	bne.n	800539a <VibeCheckShell_GetNextString+0x72>
				shell->input_tail = 0;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 800539a:	7cfb      	ldrb	r3, [r7, #19]
 800539c:	4619      	mov	r1, r3
 800539e:	4818      	ldr	r0, [pc, #96]	@ (8005400 <VibeCheckShell_GetNextString+0xd8>)
 80053a0:	f014 fadf 	bl	8019962 <strchr>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <VibeCheckShell_GetNextString+0x92>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01c      	beq.n	80053ea <VibeCheckShell_GetNextString+0xc2>
				{
					*next = '\0';
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
					return 1;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e01c      	b.n	80053f4 <VibeCheckShell_GetNextString+0xcc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 80053ba:	7cfb      	ldrb	r3, [r7, #19]
 80053bc:	74bb      	strb	r3, [r7, #18]
 80053be:	7cbb      	ldrb	r3, [r7, #18]
 80053c0:	3301      	adds	r3, #1
 80053c2:	4a10      	ldr	r2, [pc, #64]	@ (8005404 <VibeCheckShell_GetNextString+0xdc>)
 80053c4:	4413      	add	r3, r2
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d103      	bne.n	80053d8 <VibeCheckShell_GetNextString+0xb0>
 80053d0:	7cbb      	ldrb	r3, [r7, #18]
 80053d2:	f103 0220 	add.w	r2, r3, #32
 80053d6:	e000      	b.n	80053da <VibeCheckShell_GetNextString+0xb2>
 80053d8:	7cba      	ldrb	r2, [r7, #18]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	1c59      	adds	r1, r3, #1
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]
				i++;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	3301      	adds	r3, #1
 80053e8:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d3a3      	bcc.n	800533a <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	0801d19c 	.word	0x0801d19c
 8005400:	0801d1a0 	.word	0x0801d1a0
 8005404:	0801d848 	.word	0x0801d848

08005408 <VibeCheckShell_GetNextInt>:


uint32_t VibeCheckShell_GetNextInt(VibeCheckShell* shell, int32_t* next)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b092      	sub	sp, #72	@ 0x48
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005412:	f107 0308 	add.w	r3, r7, #8
 8005416:	2240      	movs	r2, #64	@ 0x40
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ff84 	bl	8005328 <VibeCheckShell_GetNextString>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <VibeCheckShell_GetNextInt+0x2e>
	{
		return VibeCheckShell_TurnToInt(str, next);
 8005426:	f107 0308 	add.w	r3, r7, #8
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 f823 	bl	8005478 <VibeCheckShell_TurnToInt>
 8005432:	4603      	mov	r3, r0
 8005434:	e000      	b.n	8005438 <VibeCheckShell_GetNextInt+0x30>
	}

	return 0;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3748      	adds	r7, #72	@ 0x48
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <VibeCheckShell_GetNextFloat>:


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b092      	sub	sp, #72	@ 0x48
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800544a:	f107 0308 	add.w	r3, r7, #8
 800544e:	2240      	movs	r2, #64	@ 0x40
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff ff68 	bl	8005328 <VibeCheckShell_GetNextString>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <VibeCheckShell_GetNextFloat+0x2e>
	{
		return VibeCheckShell_TurnToFloat(str, next);
 800545e:	f107 0308 	add.w	r3, r7, #8
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 f83d 	bl	80054e4 <VibeCheckShell_TurnToFloat>
 800546a:	4603      	mov	r3, r0
 800546c:	e000      	b.n	8005470 <VibeCheckShell_GetNextFloat+0x30>
	}

	return 0;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3748      	adds	r7, #72	@ 0x48
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <VibeCheckShell_TurnToInt>:

/* if the type of the next token is not known, get it as a string and then try to convert it to numeric using these functions */
uint32_t VibeCheckShell_TurnToInt(char* str, int32_t* next)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
	char valid[] = "-0123456789";
 8005482:	4a17      	ldr	r2, [pc, #92]	@ (80054e0 <VibeCheckShell_TurnToInt+0x68>)
 8005484:	f107 0308 	add.w	r3, r7, #8
 8005488:	ca07      	ldmia	r2, {r0, r1, r2}
 800548a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint32_t i = 0; i < strlen(str); i++)
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	e012      	b.n	80054ba <VibeCheckShell_TurnToInt+0x42>
		if (strchr(valid, str[i]) == NULL)
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	f107 0308 	add.w	r3, r7, #8
 80054a2:	4611      	mov	r1, r2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f014 fa5c 	bl	8019962 <strchr>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <VibeCheckShell_TurnToInt+0x3c>
			return 0;  /* next token contains non-numeric characters */
 80054b0:	2300      	movs	r3, #0
 80054b2:	e010      	b.n	80054d6 <VibeCheckShell_TurnToInt+0x5e>
	for (uint32_t i = 0; i < strlen(str); i++)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	3301      	adds	r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fa ff88 	bl	80003d0 <strlen>
 80054c0:	4602      	mov	r2, r0
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d3e5      	bcc.n	8005494 <VibeCheckShell_TurnToInt+0x1c>
	*next = atoi(str);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f012 fea0 	bl	801820e <atoi>
 80054ce:	4602      	mov	r2, r0
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	601a      	str	r2, [r3, #0]
	return 1;
 80054d4:	2301      	movs	r3, #1
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	0801d1a4 	.word	0x0801d1a4

080054e4 <VibeCheckShell_TurnToFloat>:

uint32_t VibeCheckShell_TurnToFloat(char* str, float* next)
{
 80054e4:	b590      	push	{r4, r7, lr}
 80054e6:	b089      	sub	sp, #36	@ 0x24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
	char valid[] = ".-0123456789";
 80054ee:	4b19      	ldr	r3, [pc, #100]	@ (8005554 <VibeCheckShell_TurnToFloat+0x70>)
 80054f0:	f107 040c 	add.w	r4, r7, #12
 80054f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054f6:	c407      	stmia	r4!, {r0, r1, r2}
 80054f8:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < strlen(str); i++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	e012      	b.n	8005526 <VibeCheckShell_TurnToFloat+0x42>
		if (strchr(valid, str[i]) == NULL)
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	f107 030c 	add.w	r3, r7, #12
 800550e:	4611      	mov	r1, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f014 fa26 	bl	8019962 <strchr>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <VibeCheckShell_TurnToFloat+0x3c>
			return 0;  /* next token contains non-numeric characters */
 800551c:	2300      	movs	r3, #0
 800551e:	e014      	b.n	800554a <VibeCheckShell_TurnToFloat+0x66>
	for (uint32_t i = 0; i < strlen(str); i++)
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	3301      	adds	r3, #1
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fa ff52 	bl	80003d0 <strlen>
 800552c:	4602      	mov	r2, r0
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4293      	cmp	r3, r2
 8005532:	d3e5      	bcc.n	8005500 <VibeCheckShell_TurnToFloat+0x1c>
	*next = atof(str);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f012 fe67 	bl	8018208 <atof>
 800553a:	eeb0 7b40 	vmov.f64	d7, d0
 800553e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 8005548:	2301      	movs	r3, #1
}
 800554a:	4618      	mov	r0, r3
 800554c:	3724      	adds	r7, #36	@ 0x24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd90      	pop	{r4, r7, pc}
 8005552:	bf00      	nop
 8005554:	0801d1b0 	.word	0x0801d1b0

08005558 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
	while (*str)
 8005562:	e027      	b.n	80055b4 <VibeCheckShell_PutOutputString+0x5c>
	{
		shell->output[shell->output_head++] = *(str++);
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	1c53      	adds	r3, r2, #1
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800557a:	6101      	str	r1, [r0, #16]
 800557c:	7811      	ldrb	r1, [r2, #0]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	4413      	add	r3, r2
 8005582:	460a      	mov	r2, r1
 8005584:	f883 2810 	strb.w	r2, [r3, #2064]	@ 0x810
		shell->output_count++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	3301      	adds	r3, #1
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005598:	6193      	str	r3, [r2, #24]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a6:	d105      	bne.n	80055b4 <VibeCheckShell_PutOutputString+0x5c>
			shell->output_head = 0;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055ae:	461a      	mov	r2, r3
 80055b0:	2300      	movs	r3, #0
 80055b2:	6113      	str	r3, [r2, #16]
	while (*str)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1d3      	bne.n	8005564 <VibeCheckShell_PutOutputString+0xc>
	}
}
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b092      	sub	sp, #72	@ 0x48
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 80055d6:	f107 0308 	add.w	r3, r7, #8
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	4906      	ldr	r1, [pc, #24]	@ (80055f8 <VibeCheckShell_PutOutputInt+0x2c>)
 80055de:	4618      	mov	r0, r3
 80055e0:	f014 f954 	bl	801988c <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 80055e4:	f107 0308 	add.w	r3, r7, #8
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff ffb4 	bl	8005558 <VibeCheckShell_PutOutputString>
}
 80055f0:	bf00      	nop
 80055f2:	3748      	adds	r7, #72	@ 0x48
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	0801d1c0 	.word	0x0801d1c0

080055fc <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b092      	sub	sp, #72	@ 0x48
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%f", val);
 8005608:	edd7 7a00 	vldr	s15, [r7]
 800560c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005610:	f107 0008 	add.w	r0, r7, #8
 8005614:	ec53 2b17 	vmov	r2, r3, d7
 8005618:	4906      	ldr	r1, [pc, #24]	@ (8005634 <VibeCheckShell_PutOutputFloat+0x38>)
 800561a:	f014 f937 	bl	801988c <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 800561e:	f107 0308 	add.w	r3, r7, #8
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff ff97 	bl	8005558 <VibeCheckShell_PutOutputString>
}
 800562a:	bf00      	nop
 800562c:	3748      	adds	r7, #72	@ 0x48
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	0801d1c4 	.word	0x0801d1c4

08005638 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 8005640:	4903      	ldr	r1, [pc, #12]	@ (8005650 <VibeCheckShell_PutOutputSeparator+0x18>)
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff ff88 	bl	8005558 <VibeCheckShell_PutOutputString>
}
 8005648:	bf00      	nop
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	0801d1c8 	.word	0x0801d1c8

08005654 <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 800565c:	4903      	ldr	r1, [pc, #12]	@ (800566c <VibeCheckShell_PutOutputDelimiter+0x18>)
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff ff7a 	bl	8005558 <VibeCheckShell_PutOutputString>
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	0801d19c 	.word	0x0801d19c

08005670 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005686:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800568e:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f640 125f 	movw	r2, #2399	@ 0x95f
 80056a2:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80056aa:	eeb0 0a67 	vmov.f32	s0, s15
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f84a 	bl	8005748 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80056ba:	eeb0 0a67 	vmov.f32	s0, s15
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f928 	bl	8005914 <VibeCheckStrobe_SetExposure>

}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f00b fd53 	bl	8011184 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f00b fe35 	bl	8011354 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2104      	movs	r1, #4
 80056f0:	4618      	mov	r0, r3
 80056f2:	f00b fe2f 	bl	8011354 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2108      	movs	r1, #8
 80056fc:	4618      	mov	r0, r3
 80056fe:	f00b fe29 	bl	8011354 <HAL_TIM_PWM_Start>
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f00b fd34 	bl	8011184 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2100      	movs	r1, #0
 8005722:	4618      	mov	r0, r3
 8005724:	f00b ff32 	bl	801158c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2104      	movs	r1, #4
 800572e:	4618      	mov	r0, r3
 8005730:	f00b ff2c 	bl	801158c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2108      	movs	r1, #8
 800573a:	4618      	mov	r0, r3
 800573c:	f00b ff26 	bl	801158c <HAL_TIM_PWM_Stop>
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8005754:	edd7 7a00 	vldr	s15, [r7]
 8005758:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800575c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005764:	d502      	bpl.n	800576c <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005766:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800576a:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 800576c:	edd7 7a00 	vldr	s15, [r7]
 8005770:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80057dc <VibeCheckStrobe_SetFrequency+0x94>
 8005774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577c:	dd01      	ble.n	8005782 <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 800577e:	4b18      	ldr	r3, [pc, #96]	@ (80057e0 <VibeCheckStrobe_SetFrequency+0x98>)
 8005780:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 8005782:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80057e4 <VibeCheckStrobe_SetFrequency+0x9c>
 8005786:	ed97 7a00 	vldr	s14, [r7]
 800578a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005792:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579a:	ee17 2a90 	vmov	r2, s15
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057b6:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80057e4 <VibeCheckStrobe_SetFrequency+0x9c>
 80057ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6912      	ldr	r2, [r2, #16]
 80057ce:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	447a0000 	.word	0x447a0000
 80057e0:	447a0000 	.word	0x447a0000
 80057e4:	47c35000 	.word	0x47c35000

080057e8 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	ee07 3a90 	vmov	s15, r3
}
 80057f8:	eeb0 0a67 	vmov.f32	s0, s15
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8005814:	edd7 7a00 	vldr	s15, [r7]
 8005818:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80058e0 <VibeCheckStrobe_SetPhase+0xd8>
 800581c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005824:	d501      	bpl.n	800582a <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 8005826:	4b2f      	ldr	r3, [pc, #188]	@ (80058e4 <VibeCheckStrobe_SetPhase+0xdc>)
 8005828:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 800582a:	edd7 7a00 	vldr	s15, [r7]
 800582e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80058e8 <VibeCheckStrobe_SetPhase+0xe0>
 8005832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583a:	dd01      	ble.n	8005840 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 800583c:	4b2b      	ldr	r3, [pc, #172]	@ (80058ec <VibeCheckStrobe_SetPhase+0xe4>)
 800583e:	603b      	str	r3, [r7, #0]


	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	edd3 7a03 	vldr	s15, [r3, #12]
 8005846:	ed97 7a00 	vldr	s14, [r7]
 800584a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800584e:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 8005852:	edd7 7a03 	vldr	s15, [r7, #12]
 8005856:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80058f0 <VibeCheckStrobe_SetPhase+0xe8>
 800585a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005872:	ee17 3a90 	vmov	r3, s15
 8005876:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d029      	beq.n	80058d2 <VibeCheckStrobe_SetPhase+0xca>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d125      	bne.n	80058d2 <VibeCheckStrobe_SetPhase+0xca>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d121      	bne.n	80058d2 <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	ed93 7a03 	vldr	s14, [r3, #12]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80058ae:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80058f0 <VibeCheckStrobe_SetPhase+0xe8>
 80058b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80058b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	441a      	add	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	619a      	str	r2, [r3, #24]
	}
}
 80058d2:	bf00      	nop
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	c3340000 	.word	0xc3340000
 80058e4:	c3340000 	.word	0xc3340000
 80058e8:	43340000 	.word	0x43340000
 80058ec:	43340000 	.word	0x43340000
 80058f0:	43b40000 	.word	0x43b40000

080058f4 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	ee07 3a90 	vmov	s15, r3
}
 8005904:	eeb0 0a67 	vmov.f32	s0, s15
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
	...

08005914 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 8005920:	edd7 7a00 	vldr	s15, [r7]
 8005924:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80059a0 <VibeCheckStrobe_SetExposure+0x8c>
 8005928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800592c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80059a4 <VibeCheckStrobe_SetExposure+0x90>
 8005930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005938:	ee17 3a90 	vmov	r3, s15
 800593c:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	429a      	cmp	r2, r3
 800594a:	d904      	bls.n	8005956 <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005954:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	ee07 3a90 	vmov	s15, r3
 800595c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005960:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80059a4 <VibeCheckStrobe_SetExposure+0x90>
 8005964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005968:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80059a8 <VibeCheckStrobe_SetExposure+0x94>
 800596c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	3a83126f 	.word	0x3a83126f
 80059a4:	47c35000 	.word	0x47c35000
 80059a8:	447a0000 	.word	0x447a0000

080059ac <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	ee07 3a90 	vmov	s15, r3
}
 80059bc:	eeb0 0a67 	vmov.f32	s0, s15
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6912      	ldr	r2, [r2, #16]
 80059e4:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6952      	ldr	r2, [r2, #20]
 80059fe:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	619a      	str	r2, [r3, #24]
	}
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b096      	sub	sp, #88	@ 0x58
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005a22:	f107 0318 	add.w	r3, r7, #24
 8005a26:	2240      	movs	r2, #64	@ 0x40
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6838      	ldr	r0, [r7, #0]
 8005a2c:	f7ff fc7c 	bl	8005328 <VibeCheckShell_GetNextString>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d065      	beq.n	8005b02 <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 8005a36:	f107 0318 	add.w	r3, r7, #24
 8005a3a:	4934      	ldr	r1, [pc, #208]	@ (8005b0c <VibeCheckStrobeCMD_Set+0xf4>)
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fa fc67 	bl	8000310 <strcmp>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d118      	bne.n	8005a7a <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8005a48:	f107 0314 	add.w	r3, r7, #20
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6838      	ldr	r0, [r7, #0]
 8005a50:	f7ff fcf6 	bl	8005440 <VibeCheckShell_GetNextFloat>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d053      	beq.n	8005b02 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8005a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff fe70 	bl	8005748 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8005a68:	4929      	ldr	r1, [pc, #164]	@ (8005b10 <VibeCheckStrobeCMD_Set+0xf8>)
 8005a6a:	6838      	ldr	r0, [r7, #0]
 8005a6c:	f7ff fd74 	bl	8005558 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8005a70:	6838      	ldr	r0, [r7, #0]
 8005a72:	f7ff fdef 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e044      	b.n	8005b04 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 8005a7a:	f107 0318 	add.w	r3, r7, #24
 8005a7e:	4925      	ldr	r1, [pc, #148]	@ (8005b14 <VibeCheckStrobeCMD_Set+0xfc>)
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fa fc45 	bl	8000310 <strcmp>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d118      	bne.n	8005abe <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8005a8c:	f107 0310 	add.w	r3, r7, #16
 8005a90:	4619      	mov	r1, r3
 8005a92:	6838      	ldr	r0, [r7, #0]
 8005a94:	f7ff fcd4 	bl	8005440 <VibeCheckShell_GetNextFloat>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d031      	beq.n	8005b02 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8005a9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff feae 	bl	8005808 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8005aac:	4918      	ldr	r1, [pc, #96]	@ (8005b10 <VibeCheckStrobeCMD_Set+0xf8>)
 8005aae:	6838      	ldr	r0, [r7, #0]
 8005ab0:	f7ff fd52 	bl	8005558 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8005ab4:	6838      	ldr	r0, [r7, #0]
 8005ab6:	f7ff fdcd 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e022      	b.n	8005b04 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 8005abe:	f107 0318 	add.w	r3, r7, #24
 8005ac2:	4915      	ldr	r1, [pc, #84]	@ (8005b18 <VibeCheckStrobeCMD_Set+0x100>)
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fa fc23 	bl	8000310 <strcmp>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d118      	bne.n	8005b02 <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8005ad0:	f107 030c 	add.w	r3, r7, #12
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6838      	ldr	r0, [r7, #0]
 8005ad8:	f7ff fcb2 	bl	8005440 <VibeCheckShell_GetNextFloat>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00f      	beq.n	8005b02 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 8005ae2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff ff12 	bl	8005914 <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8005af0:	4907      	ldr	r1, [pc, #28]	@ (8005b10 <VibeCheckStrobeCMD_Set+0xf8>)
 8005af2:	6838      	ldr	r0, [r7, #0]
 8005af4:	f7ff fd30 	bl	8005558 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8005af8:	6838      	ldr	r0, [r7, #0]
 8005afa:	f7ff fdab 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e000      	b.n	8005b04 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3758      	adds	r7, #88	@ 0x58
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	0801d1cc 	.word	0x0801d1cc
 8005b10:	0801d1d8 	.word	0x0801d1d8
 8005b14:	0801d1dc 	.word	0x0801d1dc
 8005b18:	0801d1e4 	.word	0x0801d1e4

08005b1c <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b092      	sub	sp, #72	@ 0x48
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005b26:	f107 0308 	add.w	r3, r7, #8
 8005b2a:	2240      	movs	r2, #64	@ 0x40
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6838      	ldr	r0, [r7, #0]
 8005b30:	f7ff fbfa 	bl	8005328 <VibeCheckShell_GetNextString>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d05c      	beq.n	8005bf4 <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 8005b3a:	f107 0308 	add.w	r3, r7, #8
 8005b3e:	4930      	ldr	r1, [pc, #192]	@ (8005c00 <VibeCheckStrobeCMD_Get+0xe4>)
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fa fbe5 	bl	8000310 <strcmp>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d115      	bne.n	8005b78 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005b4c:	492d      	ldr	r1, [pc, #180]	@ (8005c04 <VibeCheckStrobeCMD_Get+0xe8>)
 8005b4e:	6838      	ldr	r0, [r7, #0]
 8005b50:	f7ff fd02 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005b54:	6838      	ldr	r0, [r7, #0]
 8005b56:	f7ff fd6f 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff fe44 	bl	80057e8 <VibeCheckStrobe_GetFrequency>
 8005b60:	eef0 7a40 	vmov.f32	s15, s0
 8005b64:	eeb0 0a67 	vmov.f32	s0, s15
 8005b68:	6838      	ldr	r0, [r7, #0]
 8005b6a:	f7ff fd47 	bl	80055fc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005b6e:	6838      	ldr	r0, [r7, #0]
 8005b70:	f7ff fd70 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e03e      	b.n	8005bf6 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 8005b78:	f107 0308 	add.w	r3, r7, #8
 8005b7c:	4922      	ldr	r1, [pc, #136]	@ (8005c08 <VibeCheckStrobeCMD_Get+0xec>)
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fa fbc6 	bl	8000310 <strcmp>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d115      	bne.n	8005bb6 <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005b8a:	491e      	ldr	r1, [pc, #120]	@ (8005c04 <VibeCheckStrobeCMD_Get+0xe8>)
 8005b8c:	6838      	ldr	r0, [r7, #0]
 8005b8e:	f7ff fce3 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005b92:	6838      	ldr	r0, [r7, #0]
 8005b94:	f7ff fd50 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff feab 	bl	80058f4 <VibeCheckStrobe_GetPhase>
 8005b9e:	eef0 7a40 	vmov.f32	s15, s0
 8005ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ba6:	6838      	ldr	r0, [r7, #0]
 8005ba8:	f7ff fd28 	bl	80055fc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005bac:	6838      	ldr	r0, [r7, #0]
 8005bae:	f7ff fd51 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e01f      	b.n	8005bf6 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 8005bb6:	f107 0308 	add.w	r3, r7, #8
 8005bba:	4914      	ldr	r1, [pc, #80]	@ (8005c0c <VibeCheckStrobeCMD_Get+0xf0>)
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fa fba7 	bl	8000310 <strcmp>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d115      	bne.n	8005bf4 <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005bc8:	490e      	ldr	r1, [pc, #56]	@ (8005c04 <VibeCheckStrobeCMD_Get+0xe8>)
 8005bca:	6838      	ldr	r0, [r7, #0]
 8005bcc:	f7ff fcc4 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005bd0:	6838      	ldr	r0, [r7, #0]
 8005bd2:	f7ff fd31 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7ff fee8 	bl	80059ac <VibeCheckStrobe_GetExposure>
 8005bdc:	eef0 7a40 	vmov.f32	s15, s0
 8005be0:	eeb0 0a67 	vmov.f32	s0, s15
 8005be4:	6838      	ldr	r0, [r7, #0]
 8005be6:	f7ff fd09 	bl	80055fc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005bea:	6838      	ldr	r0, [r7, #0]
 8005bec:	f7ff fd32 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3748      	adds	r7, #72	@ 0x48
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	0801d1cc 	.word	0x0801d1cc
 8005c04:	0801d1d8 	.word	0x0801d1d8
 8005c08:	0801d1dc 	.word	0x0801d1dc
 8005c0c:	0801d1e4 	.word	0x0801d1e4

08005c10 <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b094      	sub	sp, #80	@ 0x50
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005c1e:	f107 030c 	add.w	r3, r7, #12
 8005c22:	2240      	movs	r2, #64	@ 0x40
 8005c24:	4619      	mov	r1, r3
 8005c26:	6838      	ldr	r0, [r7, #0]
 8005c28:	f7ff fb7e 	bl	8005328 <VibeCheckShell_GetNextString>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d04d      	beq.n	8005cce <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 8005c32:	f107 030c 	add.w	r3, r7, #12
 8005c36:	4928      	ldr	r1, [pc, #160]	@ (8005cd8 <VibeCheckStrobeCMD_Execute+0xc8>)
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fa fb69 	bl	8000310 <strcmp>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10b      	bne.n	8005c5c <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 8005c44:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005c46:	f7ff fd41 	bl	80056cc <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8005c4a:	4924      	ldr	r1, [pc, #144]	@ (8005cdc <VibeCheckStrobeCMD_Execute+0xcc>)
 8005c4c:	6838      	ldr	r0, [r7, #0]
 8005c4e:	f7ff fc83 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005c52:	6838      	ldr	r0, [r7, #0]
 8005c54:	f7ff fcfe 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e039      	b.n	8005cd0 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 8005c5c:	f107 030c 	add.w	r3, r7, #12
 8005c60:	491f      	ldr	r1, [pc, #124]	@ (8005ce0 <VibeCheckStrobeCMD_Execute+0xd0>)
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fa fb54 	bl	8000310 <strcmp>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10b      	bne.n	8005c86 <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 8005c6e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005c70:	f7ff fd4b 	bl	800570a <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8005c74:	4919      	ldr	r1, [pc, #100]	@ (8005cdc <VibeCheckStrobeCMD_Execute+0xcc>)
 8005c76:	6838      	ldr	r0, [r7, #0]
 8005c78:	f7ff fc6e 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005c7c:	6838      	ldr	r0, [r7, #0]
 8005c7e:	f7ff fce9 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e024      	b.n	8005cd0 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 8005c86:	f107 030c 	add.w	r3, r7, #12
 8005c8a:	4916      	ldr	r1, [pc, #88]	@ (8005ce4 <VibeCheckStrobeCMD_Execute+0xd4>)
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fa fb3f 	bl	8000310 <strcmp>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d108      	bne.n	8005caa <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005c9c:	f7ff febc 	bl	8005a18 <VibeCheckStrobeCMD_Set>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d013      	beq.n	8005cce <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e012      	b.n	8005cd0 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 8005caa:	f107 030c 	add.w	r3, r7, #12
 8005cae:	490e      	ldr	r1, [pc, #56]	@ (8005ce8 <VibeCheckStrobeCMD_Execute+0xd8>)
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fa fb2d 	bl	8000310 <strcmp>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d108      	bne.n	8005cce <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005cc0:	f7ff ff2c 	bl	8005b1c <VibeCheckStrobeCMD_Get>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3750      	adds	r7, #80	@ 0x50
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	0801d1f0 	.word	0x0801d1f0
 8005cdc:	0801d1d8 	.word	0x0801d1d8
 8005ce0:	0801d1f8 	.word	0x0801d1f8
 8005ce4:	0801d200 	.word	0x0801d200
 8005ce8:	0801d204 	.word	0x0801d204
 8005cec:	00000000 	.word	0x00000000

08005cf0 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	ed2d 8b02 	vpush	{d8}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	e032      	b.n	8005d6e <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 8005d08:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d0c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d1e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8005d90 <ComputeSineWave+0xa0>
 8005d22:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d38:	eeb0 0b47 	vmov.f64	d0, d7
 8005d3c:	f016 faf4 	bl	801c328 <sin>
 8005d40:	eeb0 7b40 	vmov.f64	d7, d0
 8005d44:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005d48:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005d4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d50:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8005d88 <ComputeSineWave+0x98>
 8005d54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	1d1a      	adds	r2, r3, #4
 8005d5c:	60fa      	str	r2, [r7, #12]
 8005d5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005d62:	ee17 2a90 	vmov	r2, s15
 8005d66:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d3c8      	bcc.n	8005d08 <ComputeSineWave+0x18>
}
 8005d76:	bf00      	nop
 8005d78:	bf00      	nop
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	ecbd 8b02 	vpop	{d8}
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	f3af 8000 	nop.w
 8005d88:	00000000 	.word	0x00000000
 8005d8c:	409ffe00 	.word	0x409ffe00
 8005d90:	40490fd0 	.word	0x40490fd0

08005d94 <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	e02c      	b.n	8005e02 <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d212      	bcs.n	8005dd8 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 8005db2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005db6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dbe:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005e18 <ComputeSquareWave+0x84>
 8005dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1d1a      	adds	r2, r3, #4
 8005dca:	60fa      	str	r2, [r7, #12]
 8005dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd0:	ee17 2a90 	vmov	r2, s15
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e011      	b.n	8005dfc <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8005dd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ddc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005de4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8005e18 <ComputeSquareWave+0x84>
 8005de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	1d1a      	adds	r2, r3, #4
 8005df0:	60fa      	str	r2, [r7, #12]
 8005df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df6:	ee17 2a90 	vmov	r2, s15
 8005dfa:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d3ce      	bcc.n	8005da8 <ComputeSquareWave+0x14>
}
 8005e0a:	bf00      	nop
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	44fff000 	.word	0x44fff000

08005e1c <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	e052      	b.n	8005ed6 <ComputeSawWave+0xba>
		if (i < len / 2)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	085b      	lsrs	r3, r3, #1
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d222      	bcs.n	8005e80 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e44:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005e48:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e4c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e66:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005eec <ComputeSawWave+0xd0>
 8005e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1d1a      	adds	r2, r3, #4
 8005e72:	60fa      	str	r2, [r7, #12]
 8005e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e78:	ee17 2a90 	vmov	r2, s15
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	e027      	b.n	8005ed0 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 8005e80:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005e9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ea2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	ee07 3a90 	vmov	s15, r3
 8005eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eb8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8005eec <ComputeSawWave+0xd0>
 8005ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1d1a      	adds	r2, r3, #4
 8005ec4:	60fa      	str	r2, [r7, #12]
 8005ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eca:	ee17 2a90 	vmov	r2, s15
 8005ece:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d3a8      	bcc.n	8005e30 <ComputeSawWave+0x14>
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	44fff000 	.word	0x44fff000

08005ef0 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e082      	b.n	800600a <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	089b      	lsrs	r3, r3, #2
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d221      	bcs.n	8005f52 <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f1e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f38:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006024 <ComputeTriangleWave+0x134>
 8005f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	1d1a      	adds	r2, r3, #4
 8005f44:	60fa      	str	r2, [r7, #12]
 8005f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f4a:	ee17 2a90 	vmov	r2, s15
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	e058      	b.n	8006004 <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4613      	mov	r3, r2
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4413      	add	r3, r2
 8005f5a:	089b      	lsrs	r3, r3, #2
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d227      	bcs.n	8005fb2 <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 8005f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f66:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f82:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f90:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f98:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006024 <ComputeTriangleWave+0x134>
 8005f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	1d1a      	adds	r2, r3, #4
 8005fa4:	60fa      	str	r2, [r7, #12]
 8005fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005faa:	ee17 2a90 	vmov	r2, s15
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	e028      	b.n	8006004 <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 8005fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fb6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fd6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	ee07 3a90 	vmov	s15, r3
 8005fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fec:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8006024 <ComputeTriangleWave+0x134>
 8005ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	1d1a      	adds	r2, r3, #4
 8005ff8:	60fa      	str	r2, [r7, #12]
 8005ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ffe:	ee17 2a90 	vmov	r2, s15
 8006002:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	3301      	adds	r3, #1
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	429a      	cmp	r2, r3
 8006010:	f4ff af78 	bcc.w	8005f04 <ComputeTriangleWave+0x14>
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	44fff000 	.word	0x44fff000

08006028 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	e008      	b.n	800604a <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	1d1a      	adds	r2, r3, #4
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006042:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d3f2      	bcc.n	8006038 <ComputeNullWave+0x10>
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006072:	2b00      	cmp	r3, #0
 8006074:	d044      	beq.n	8006100 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800607c:	7e1b      	ldrb	r3, [r3, #24]
 800607e:	2b03      	cmp	r3, #3
 8006080:	d844      	bhi.n	800610c <VibeCheckWaveGen_RecomputeWave+0xac>
 8006082:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <VibeCheckWaveGen_RecomputeWave+0x28>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	08006099 	.word	0x08006099
 800608c:	080060b3 	.word	0x080060b3
 8006090:	080060cd 	.word	0x080060cd
 8006094:	080060e7 	.word	0x080060e7
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800609e:	edd3 7a08 	vldr	s15, [r3, #32]
 80060a2:	eeb0 0a67 	vmov.f32	s0, s15
 80060a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80060aa:	6838      	ldr	r0, [r7, #0]
 80060ac:	f7ff fe20 	bl	8005cf0 <ComputeSineWave>
			break;
 80060b0:	e02c      	b.n	800610c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060b8:	edd3 7a08 	vldr	s15, [r3, #32]
 80060bc:	eeb0 0a67 	vmov.f32	s0, s15
 80060c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80060c4:	6838      	ldr	r0, [r7, #0]
 80060c6:	f7ff fe65 	bl	8005d94 <ComputeSquareWave>
			break;
 80060ca:	e01f      	b.n	800610c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80060d6:	eeb0 0a67 	vmov.f32	s0, s15
 80060da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80060de:	6838      	ldr	r0, [r7, #0]
 80060e0:	f7ff fe9c 	bl	8005e1c <ComputeSawWave>
			break;
 80060e4:	e012      	b.n	800610c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80060f0:	eeb0 0a67 	vmov.f32	s0, s15
 80060f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80060f8:	6838      	ldr	r0, [r7, #0]
 80060fa:	f7ff fef9 	bl	8005ef0 <ComputeTriangleWave>
			break;
 80060fe:	e005      	b.n	800610c <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 8006100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006104:	6838      	ldr	r0, [r7, #0]
 8006106:	f7ff ff8f 	bl	8006028 <ComputeNullWave>
	}
}
 800610a:	e7ff      	b.n	800610c <VibeCheckWaveGen_RecomputeWave+0xac>
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af02      	add	r7, sp, #8
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = 440.0f;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006132:	461a      	mov	r2, r3
 8006134:	4b44      	ldr	r3, [pc, #272]	@ (8006248 <VibeCheckWaveGen_Init+0x134>)
 8006136:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = 0.001f;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800613e:	461a      	mov	r2, r3
 8006140:	4b42      	ldr	r3, [pc, #264]	@ (800624c <VibeCheckWaveGen_Init+0x138>)
 8006142:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800614a:	2200      	movs	r2, #0
 800614c:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006154:	461a      	mov	r2, r3
 8006156:	2300      	movs	r3, #0
 8006158:	6253      	str	r3, [r2, #36]	@ 0x24
	wavegen->is_muted = 0;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006160:	461a      	mov	r2, r3
 8006162:	2300      	movs	r3, #0
 8006164:	6293      	str	r3, [r2, #40]	@ 0x28
	wavegen->mute_button_flag = 0;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800616c:	461a      	mov	r2, r3
 800616e:	2300      	movs	r3, #0
 8006170:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wavegen->time_prev_button_press = 0;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006178:	461a      	mov	r2, r3
 800617a:	2300      	movs	r3, #0
 800617c:	6313      	str	r3, [r2, #48]	@ 0x30

	wavegen->wave_ping_compute_pending = 0;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006184:	461a      	mov	r2, r3
 8006186:	2300      	movs	r3, #0
 8006188:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006190:	461a      	mov	r2, r3
 8006192:	2300      	movs	r3, #0
 8006194:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800619c:	461a      	mov	r2, r3
 800619e:	2300      	movs	r3, #0
 80061a0:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a8:	461a      	mov	r2, r3
 80061aa:	2300      	movs	r3, #0
 80061ac:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061b4:	461a      	mov	r2, r3
 80061b6:	2300      	movs	r3, #0
 80061b8:	6353      	str	r3, [r2, #52]	@ 0x34

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	220b      	movs	r2, #11
 80061c2:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80061ce:	eeb0 0a67 	vmov.f32	s0, s15
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 f920 	bl	8006418 <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3308      	adds	r3, #8
 80061dc:	4619      	mov	r1, r3
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7ff ff3e 	bl	8006060 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80061ea:	4619      	mov	r1, r3
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff ff37 	bl	8006060 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6858      	ldr	r0, [r3, #4]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f103 0208 	add.w	r2, r3, #8
 80061fc:	2300      	movs	r3, #0
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006204:	2100      	movs	r1, #0
 8006206:	f002 faed 	bl	80087e4 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6858      	ldr	r0, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f103 0208 	add.w	r2, r3, #8
 8006214:	2300      	movs	r3, #0
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800621c:	2110      	movs	r1, #16
 800621e:	f002 fae1 	bl	80087e4 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f00a ff2e 	bl	8011088 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 800622c:	2200      	movs	r2, #0
 800622e:	2108      	movs	r1, #8
 8006230:	4807      	ldr	r0, [pc, #28]	@ (8006250 <VibeCheckWaveGen_Init+0x13c>)
 8006232:	f005 f801 	bl	800b238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 8006236:	2200      	movs	r2, #0
 8006238:	2102      	movs	r1, #2
 800623a:	4805      	ldr	r0, [pc, #20]	@ (8006250 <VibeCheckWaveGen_Init+0x13c>)
 800623c:	f004 fffc 	bl	800b238 <HAL_GPIO_WritePin>
}
 8006240:	bf00      	nop
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	43dc0000 	.word	0x43dc0000
 800624c:	3a83126f 	.word	0x3a83126f
 8006250:	58020000 	.word	0x58020000

08006254 <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 800625c:	f000 fd74 	bl	8006d48 <HAL_GetTick>
 8006260:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2bfa      	cmp	r3, #250	@ 0xfa
 8006270:	d939      	bls.n	80062e6 <VibeCheckWaveGen_Update+0x92>
 8006272:	2104      	movs	r1, #4
 8006274:	4843      	ldr	r0, [pc, #268]	@ (8006384 <VibeCheckWaveGen_Update+0x130>)
 8006276:	f004 ffc7 	bl	800b208 <HAL_GPIO_ReadPin>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d032      	beq.n	80062e6 <VibeCheckWaveGen_Update+0x92>

		/*
		 * the line driver seems to have some kind of slow start built in so no
		 * need to worry about pops when muting via the hardware pin
		 */
		if (wavegen->is_muted)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006288:	2b00      	cmp	r3, #0
 800628a:	d010      	beq.n	80062ae <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006292:	461a      	mov	r2, r3
 8006294:	2300      	movs	r3, #0
 8006296:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8006298:	2200      	movs	r2, #0
 800629a:	2108      	movs	r1, #8
 800629c:	4839      	ldr	r0, [pc, #228]	@ (8006384 <VibeCheckWaveGen_Update+0x130>)
 800629e:	f004 ffcb 	bl	800b238 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 80062a2:	2200      	movs	r2, #0
 80062a4:	2102      	movs	r1, #2
 80062a6:	4837      	ldr	r0, [pc, #220]	@ (8006384 <VibeCheckWaveGen_Update+0x130>)
 80062a8:	f004 ffc6 	bl	800b238 <HAL_GPIO_WritePin>
 80062ac:	e00f      	b.n	80062ce <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b4:	461a      	mov	r2, r3
 80062b6:	2301      	movs	r3, #1
 80062b8:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 80062ba:	2201      	movs	r2, #1
 80062bc:	2108      	movs	r1, #8
 80062be:	4831      	ldr	r0, [pc, #196]	@ (8006384 <VibeCheckWaveGen_Update+0x130>)
 80062c0:	f004 ffba 	bl	800b238 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 80062c4:	2201      	movs	r2, #1
 80062c6:	2102      	movs	r1, #2
 80062c8:	482e      	ldr	r0, [pc, #184]	@ (8006384 <VibeCheckWaveGen_Update+0x130>)
 80062ca:	f004 ffb5 	bl	800b238 <HAL_GPIO_WritePin>
		}

		wavegen->mute_button_flag = 1;  /* can alert the shell via this flag when we press the mute button */
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d4:	461a      	mov	r2, r3
 80062d6:	2301      	movs	r3, #1
 80062d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
		wavegen->time_prev_button_press = time;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062e0:	461a      	mov	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00b      	beq.n	800630a <VibeCheckWaveGen_Update+0xb6>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3308      	adds	r3, #8
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff feb1 	bl	8006060 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006304:	461a      	mov	r2, r3
 8006306:	2300      	movs	r3, #0
 8006308:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00c      	beq.n	8006330 <VibeCheckWaveGen_Update+0xdc>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 800631c:	4619      	mov	r1, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff fe9e 	bl	8006060 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800632a:	461a      	mov	r2, r3
 800632c:	2300      	movs	r3, #0
 800632e:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006336:	4413      	add	r3, r2
 8006338:	f107 0208 	add.w	r2, r7, #8
 800633c:	68f9      	ldr	r1, [r7, #12]
 800633e:	4618      	mov	r0, r3
 8006340:	f7fb ff2a 	bl	8002198 <Sequencer_Update>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d017      	beq.n	800637a <VibeCheckWaveGen_Update+0x126>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006352:	2b00      	cmp	r3, #0
 8006354:	d006      	beq.n	8006364 <VibeCheckWaveGen_Update+0x110>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	4a0b      	ldr	r2, [pc, #44]	@ (8006388 <VibeCheckWaveGen_Update+0x134>)
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	edd3 7a00 	vldr	s15, [r3]
 8006362:	e005      	b.n	8006370 <VibeCheckWaveGen_Update+0x11c>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4a09      	ldr	r2, [pc, #36]	@ (800638c <VibeCheckWaveGen_Update+0x138>)
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	edd3 7a00 	vldr	s15, [r3]
 8006370:	eeb0 0a67 	vmov.f32	s0, s15
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f84f 	bl	8006418 <VibeCheckWaveGen_SetFrequency>
	}

}
 800637a:	bf00      	nop
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	58020000 	.word	0x58020000
 8006388:	0801d70c 	.word	0x0801d70c
 800638c:	0801d5f0 	.word	0x0801d5f0

08006390 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d111      	bne.n	80063c8 <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063aa:	461a      	mov	r2, r3
 80063ac:	2301      	movs	r3, #1
 80063ae:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063b6:	461a      	mov	r2, r3
 80063b8:	2301      	movs	r3, #1
 80063ba:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063c2:	461a      	mov	r2, r3
 80063c4:	2301      	movs	r3, #1
 80063c6:	60d3      	str	r3, [r2, #12]
	}

}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d011      	beq.n	800640c <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ee:	461a      	mov	r2, r3
 80063f0:	2300      	movs	r3, #0
 80063f2:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063fa:	461a      	mov	r2, r3
 80063fc:	2301      	movs	r3, #1
 80063fe:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006406:	461a      	mov	r2, r3
 8006408:	2301      	movs	r3, #1
 800640a:	60d3      	str	r3, [r2, #12]
	}
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 8006424:	edd7 7a00 	vldr	s15, [r7]
 8006428:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800642c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006430:	d502      	bpl.n	8006438 <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 8006438:	edd7 7a00 	vldr	s15, [r7]
 800643c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80064b8 <VibeCheckWaveGen_SetFrequency+0xa0>
 8006440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006448:	dd01      	ble.n	800644e <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 800644a:	4b1c      	ldr	r3, [pc, #112]	@ (80064bc <VibeCheckWaveGen_SetFrequency+0xa4>)
 800644c:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 800644e:	edd7 7a00 	vldr	s15, [r7]
 8006452:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80064c0 <VibeCheckWaveGen_SetFrequency+0xa8>
 8006456:	ee27 7a87 	vmul.f32	s14, s15, s14
 800645a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80064c4 <VibeCheckWaveGen_SetFrequency+0xac>
 800645e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800646a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800646e:	ee17 3a90 	vmov	r3, s15
 8006472:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006482:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006486:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80064c4 <VibeCheckWaveGen_SetFrequency+0xac>
 800648a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800648e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80064c0 <VibeCheckWaveGen_SetFrequency+0xa8>
 8006492:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800649c:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	46989600 	.word	0x46989600
 80064bc:	46989600 	.word	0x46989600
 80064c0:	44000000 	.word	0x44000000
 80064c4:	4b989680 	.word	0x4b989680

080064c8 <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	ee07 3a90 	vmov	s15, r3
}
 80064dc:	eeb0 0a67 	vmov.f32	s0, s15
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 80064f6:	edd7 7a00 	vldr	s15, [r7]
 80064fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006502:	d502      	bpl.n	800650a <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 800650a:	edd7 7a00 	vldr	s15, [r7]
 800650e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651a:	dd02      	ble.n	8006522 <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 800651c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006520:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006528:	461a      	mov	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006534:	461a      	mov	r2, r3
 8006536:	2301      	movs	r3, #1
 8006538:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006540:	461a      	mov	r2, r3
 8006542:	2301      	movs	r3, #1
 8006544:	60d3      	str	r3, [r2, #12]
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	ee07 3a90 	vmov	s15, r3
}
 8006566:	eeb0 0a67 	vmov.f32	s0, s15
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006586:	461a      	mov	r2, r3
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006592:	461a      	mov	r2, r3
 8006594:	2301      	movs	r3, #1
 8006596:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800659e:	461a      	mov	r2, r3
 80065a0:	2301      	movs	r3, #1
 80065a2:	60d3      	str	r3, [r2, #12]
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065be:	7e1b      	ldrb	r3, [r3, #24]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <VibeCheckWaveGen_WasMuteButtonPressed>:

uint32_t VibeCheckWaveGen_WasMuteButtonPressed(VibeCheckWaveGen* wavegen, uint32_t* is_muted)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
	if (wavegen->mute_button_flag)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00d      	beq.n	80065fe <VibeCheckWaveGen_WasMuteButtonPressed+0x32>
	{
		wavegen->mute_button_flag = 0;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065e8:	461a      	mov	r2, r3
 80065ea:	2300      	movs	r3, #0
 80065ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
		*is_muted = wavegen->is_muted;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	601a      	str	r2, [r3, #0]
		return 1;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <VibeCheckWaveGen_WasMuteButtonPressed+0x34>
	}

	return 0;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006626:	461a      	mov	r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006632:	461a      	mov	r2, r3
 8006634:	2301      	movs	r3, #1
 8006636:	6113      	str	r3, [r2, #16]
	}
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800665e:	461a      	mov	r2, r3
 8006660:	2300      	movs	r3, #0
 8006662:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800666a:	461a      	mov	r2, r3
 800666c:	2301      	movs	r3, #1
 800666e:	6153      	str	r3, [r2, #20]
	}
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 800667c:	b590      	push	{r4, r7, lr}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	f241 0338 	movw	r3, #4152	@ 0x1038
 800668a:	4413      	add	r3, r2
 800668c:	4618      	mov	r0, r3
 800668e:	f7fb fd51 	bl	8002134 <Sequencer_Init>
	if (wavegen->demo_num)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f241 0038 	movw	r0, #4152	@ 0x1038
 80066a4:	4418      	add	r0, r3
 80066a6:	2301      	movs	r3, #1
 80066a8:	221a      	movs	r2, #26
 80066aa:	4916      	ldr	r1, [pc, #88]	@ (8006704 <VibeCheckWaveGen_StartDemo+0x88>)
 80066ac:	f7fb fd5e 	bl	800216c <Sequencer_SetSequence>
 80066b0:	e008      	b.n	80066c4 <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f241 0038 	movw	r0, #4152	@ 0x1038
 80066b8:	4418      	add	r0, r3
 80066ba:	2301      	movs	r3, #1
 80066bc:	222d      	movs	r2, #45	@ 0x2d
 80066be:	4912      	ldr	r1, [pc, #72]	@ (8006708 <VibeCheckWaveGen_StartDemo+0x8c>)
 80066c0:	f7fb fd54 	bl	800216c <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bf0c      	ite	eq
 80066d0:	2301      	moveq	r3, #1
 80066d2:	2300      	movne	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066de:	635a      	str	r2, [r3, #52]	@ 0x34
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f241 0438 	movw	r4, #4152	@ 0x1038
 80066e6:	441c      	add	r4, r3
 80066e8:	f000 fb2e 	bl	8006d48 <HAL_GetTick>
 80066ec:	4603      	mov	r3, r0
 80066ee:	4619      	mov	r1, r3
 80066f0:	4620      	mov	r0, r4
 80066f2:	f7fb fd93 	bl	800221c <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff fe4a 	bl	8006390 <VibeCheckWaveGen_Start>
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bd90      	pop	{r4, r7, pc}
 8006704:	0801d588 	.word	0x0801d588
 8006708:	0801d658 	.word	0x0801d658

0800670c <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff fe5d 	bl	80063d4 <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006720:	4413      	add	r3, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f7fb fd8e 	bl	8002244 <Sequencer_Stop>
}
 8006728:	bf00      	nop
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b094      	sub	sp, #80	@ 0x50
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800673a:	f107 0310 	add.w	r3, r7, #16
 800673e:	2240      	movs	r2, #64	@ 0x40
 8006740:	4619      	mov	r1, r3
 8006742:	6838      	ldr	r0, [r7, #0]
 8006744:	f7fe fdf0 	bl	8005328 <VibeCheckShell_GetNextString>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 80b0 	beq.w	80068b0 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 8006750:	f107 0310 	add.w	r3, r7, #16
 8006754:	4959      	ldr	r1, [pc, #356]	@ (80068bc <VibeCheckWaveGenCMD_Set+0x18c>)
 8006756:	4618      	mov	r0, r3
 8006758:	f7f9 fdda 	bl	8000310 <strcmp>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d119      	bne.n	8006796 <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006762:	f107 030c 	add.w	r3, r7, #12
 8006766:	4619      	mov	r1, r3
 8006768:	6838      	ldr	r0, [r7, #0]
 800676a:	f7fe fe69 	bl	8005440 <VibeCheckShell_GetNextFloat>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 809d 	beq.w	80068b0 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 8006776:	edd7 7a03 	vldr	s15, [r7, #12]
 800677a:	eeb0 0a67 	vmov.f32	s0, s15
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fe4a 	bl	8006418 <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006784:	494e      	ldr	r1, [pc, #312]	@ (80068c0 <VibeCheckWaveGenCMD_Set+0x190>)
 8006786:	6838      	ldr	r0, [r7, #0]
 8006788:	f7fe fee6 	bl	8005558 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800678c:	6838      	ldr	r0, [r7, #0]
 800678e:	f7fe ff61 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006792:	2301      	movs	r3, #1
 8006794:	e08d      	b.n	80068b2 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 8006796:	f107 0310 	add.w	r3, r7, #16
 800679a:	494a      	ldr	r1, [pc, #296]	@ (80068c4 <VibeCheckWaveGenCMD_Set+0x194>)
 800679c:	4618      	mov	r0, r3
 800679e:	f7f9 fdb7 	bl	8000310 <strcmp>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d118      	bne.n	80067da <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80067a8:	f107 0308 	add.w	r3, r7, #8
 80067ac:	4619      	mov	r1, r3
 80067ae:	6838      	ldr	r0, [r7, #0]
 80067b0:	f7fe fe46 	bl	8005440 <VibeCheckShell_GetNextFloat>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d07a      	beq.n	80068b0 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 80067ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80067be:	eeb0 0a67 	vmov.f32	s0, s15
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fe91 	bl	80064ea <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 80067c8:	493d      	ldr	r1, [pc, #244]	@ (80068c0 <VibeCheckWaveGenCMD_Set+0x190>)
 80067ca:	6838      	ldr	r0, [r7, #0]
 80067cc:	f7fe fec4 	bl	8005558 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80067d0:	6838      	ldr	r0, [r7, #0]
 80067d2:	f7fe ff3f 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e06b      	b.n	80068b2 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 80067da:	f107 0310 	add.w	r3, r7, #16
 80067de:	493a      	ldr	r1, [pc, #232]	@ (80068c8 <VibeCheckWaveGenCMD_Set+0x198>)
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7f9 fd95 	bl	8000310 <strcmp>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d161      	bne.n	80068b0 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80067ec:	f107 0310 	add.w	r3, r7, #16
 80067f0:	2240      	movs	r2, #64	@ 0x40
 80067f2:	4619      	mov	r1, r3
 80067f4:	6838      	ldr	r0, [r7, #0]
 80067f6:	f7fe fd97 	bl	8005328 <VibeCheckShell_GetNextString>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d057      	beq.n	80068b0 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 8006800:	f107 0310 	add.w	r3, r7, #16
 8006804:	4931      	ldr	r1, [pc, #196]	@ (80068cc <VibeCheckWaveGenCMD_Set+0x19c>)
 8006806:	4618      	mov	r0, r3
 8006808:	f7f9 fd82 	bl	8000310 <strcmp>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10c      	bne.n	800682c <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 8006812:	2100      	movs	r1, #0
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff fead 	bl	8006574 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800681a:	4929      	ldr	r1, [pc, #164]	@ (80068c0 <VibeCheckWaveGenCMD_Set+0x190>)
 800681c:	6838      	ldr	r0, [r7, #0]
 800681e:	f7fe fe9b 	bl	8005558 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006822:	6838      	ldr	r0, [r7, #0]
 8006824:	f7fe ff16 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006828:	2301      	movs	r3, #1
 800682a:	e042      	b.n	80068b2 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 800682c:	f107 0310 	add.w	r3, r7, #16
 8006830:	4927      	ldr	r1, [pc, #156]	@ (80068d0 <VibeCheckWaveGenCMD_Set+0x1a0>)
 8006832:	4618      	mov	r0, r3
 8006834:	f7f9 fd6c 	bl	8000310 <strcmp>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10c      	bne.n	8006858 <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 800683e:	2101      	movs	r1, #1
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff fe97 	bl	8006574 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006846:	491e      	ldr	r1, [pc, #120]	@ (80068c0 <VibeCheckWaveGenCMD_Set+0x190>)
 8006848:	6838      	ldr	r0, [r7, #0]
 800684a:	f7fe fe85 	bl	8005558 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800684e:	6838      	ldr	r0, [r7, #0]
 8006850:	f7fe ff00 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006854:	2301      	movs	r3, #1
 8006856:	e02c      	b.n	80068b2 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 8006858:	f107 0310 	add.w	r3, r7, #16
 800685c:	491d      	ldr	r1, [pc, #116]	@ (80068d4 <VibeCheckWaveGenCMD_Set+0x1a4>)
 800685e:	4618      	mov	r0, r3
 8006860:	f7f9 fd56 	bl	8000310 <strcmp>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10c      	bne.n	8006884 <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 800686a:	2102      	movs	r1, #2
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff fe81 	bl	8006574 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006872:	4913      	ldr	r1, [pc, #76]	@ (80068c0 <VibeCheckWaveGenCMD_Set+0x190>)
 8006874:	6838      	ldr	r0, [r7, #0]
 8006876:	f7fe fe6f 	bl	8005558 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800687a:	6838      	ldr	r0, [r7, #0]
 800687c:	f7fe feea 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006880:	2301      	movs	r3, #1
 8006882:	e016      	b.n	80068b2 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 8006884:	f107 0310 	add.w	r3, r7, #16
 8006888:	4913      	ldr	r1, [pc, #76]	@ (80068d8 <VibeCheckWaveGenCMD_Set+0x1a8>)
 800688a:	4618      	mov	r0, r3
 800688c:	f7f9 fd40 	bl	8000310 <strcmp>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10c      	bne.n	80068b0 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 8006896:	2103      	movs	r1, #3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff fe6b 	bl	8006574 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800689e:	4908      	ldr	r1, [pc, #32]	@ (80068c0 <VibeCheckWaveGenCMD_Set+0x190>)
 80068a0:	6838      	ldr	r0, [r7, #0]
 80068a2:	f7fe fe59 	bl	8005558 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80068a6:	6838      	ldr	r0, [r7, #0]
 80068a8:	f7fe fed4 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3750      	adds	r7, #80	@ 0x50
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	0801d208 	.word	0x0801d208
 80068c0:	0801d214 	.word	0x0801d214
 80068c4:	0801d218 	.word	0x0801d218
 80068c8:	0801d224 	.word	0x0801d224
 80068cc:	0801d230 	.word	0x0801d230
 80068d0:	0801d238 	.word	0x0801d238
 80068d4:	0801d240 	.word	0x0801d240
 80068d8:	0801d244 	.word	0x0801d244

080068dc <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b092      	sub	sp, #72	@ 0x48
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80068e6:	f107 0308 	add.w	r3, r7, #8
 80068ea:	2240      	movs	r2, #64	@ 0x40
 80068ec:	4619      	mov	r1, r3
 80068ee:	6838      	ldr	r0, [r7, #0]
 80068f0:	f7fe fd1a 	bl	8005328 <VibeCheckShell_GetNextString>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d077      	beq.n	80069ea <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 80068fa:	f107 0308 	add.w	r3, r7, #8
 80068fe:	493d      	ldr	r1, [pc, #244]	@ (80069f4 <VibeCheckWaveGenCMD_Get+0x118>)
 8006900:	4618      	mov	r0, r3
 8006902:	f7f9 fd05 	bl	8000310 <strcmp>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d115      	bne.n	8006938 <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 800690c:	493a      	ldr	r1, [pc, #232]	@ (80069f8 <VibeCheckWaveGenCMD_Get+0x11c>)
 800690e:	6838      	ldr	r0, [r7, #0]
 8006910:	f7fe fe22 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006914:	6838      	ldr	r0, [r7, #0]
 8006916:	f7fe fe8f 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff fdd4 	bl	80064c8 <VibeCheckWaveGen_GetFrequency>
 8006920:	eef0 7a40 	vmov.f32	s15, s0
 8006924:	eeb0 0a67 	vmov.f32	s0, s15
 8006928:	6838      	ldr	r0, [r7, #0]
 800692a:	f7fe fe67 	bl	80055fc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 800692e:	6838      	ldr	r0, [r7, #0]
 8006930:	f7fe fe90 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006934:	2301      	movs	r3, #1
 8006936:	e059      	b.n	80069ec <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 8006938:	f107 0308 	add.w	r3, r7, #8
 800693c:	492f      	ldr	r1, [pc, #188]	@ (80069fc <VibeCheckWaveGenCMD_Get+0x120>)
 800693e:	4618      	mov	r0, r3
 8006940:	f7f9 fce6 	bl	8000310 <strcmp>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d115      	bne.n	8006976 <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 800694a:	492b      	ldr	r1, [pc, #172]	@ (80069f8 <VibeCheckWaveGenCMD_Get+0x11c>)
 800694c:	6838      	ldr	r0, [r7, #0]
 800694e:	f7fe fe03 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006952:	6838      	ldr	r0, [r7, #0]
 8006954:	f7fe fe70 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff fdfa 	bl	8006552 <VibeCheckWaveGen_GetAmplitude>
 800695e:	eef0 7a40 	vmov.f32	s15, s0
 8006962:	eeb0 0a67 	vmov.f32	s0, s15
 8006966:	6838      	ldr	r0, [r7, #0]
 8006968:	f7fe fe48 	bl	80055fc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 800696c:	6838      	ldr	r0, [r7, #0]
 800696e:	f7fe fe71 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006972:	2301      	movs	r3, #1
 8006974:	e03a      	b.n	80069ec <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 8006976:	f107 0308 	add.w	r3, r7, #8
 800697a:	4921      	ldr	r1, [pc, #132]	@ (8006a00 <VibeCheckWaveGenCMD_Get+0x124>)
 800697c:	4618      	mov	r0, r3
 800697e:	f7f9 fcc7 	bl	8000310 <strcmp>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d130      	bne.n	80069ea <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006988:	491b      	ldr	r1, [pc, #108]	@ (80069f8 <VibeCheckWaveGenCMD_Get+0x11c>)
 800698a:	6838      	ldr	r0, [r7, #0]
 800698c:	f7fe fde4 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006990:	6838      	ldr	r0, [r7, #0]
 8006992:	f7fe fe51 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff fe0a 	bl	80065b0 <VibeCheckWaveGen_GetWaveform>
 800699c:	4603      	mov	r3, r0
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d81e      	bhi.n	80069e0 <VibeCheckWaveGenCMD_Get+0x104>
 80069a2:	a201      	add	r2, pc, #4	@ (adr r2, 80069a8 <VibeCheckWaveGenCMD_Get+0xcc>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	080069b9 	.word	0x080069b9
 80069ac:	080069c3 	.word	0x080069c3
 80069b0:	080069cd 	.word	0x080069cd
 80069b4:	080069d7 	.word	0x080069d7
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 80069b8:	4912      	ldr	r1, [pc, #72]	@ (8006a04 <VibeCheckWaveGenCMD_Get+0x128>)
 80069ba:	6838      	ldr	r0, [r7, #0]
 80069bc:	f7fe fdcc 	bl	8005558 <VibeCheckShell_PutOutputString>
				break;
 80069c0:	e00e      	b.n	80069e0 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 80069c2:	4911      	ldr	r1, [pc, #68]	@ (8006a08 <VibeCheckWaveGenCMD_Get+0x12c>)
 80069c4:	6838      	ldr	r0, [r7, #0]
 80069c6:	f7fe fdc7 	bl	8005558 <VibeCheckShell_PutOutputString>
				break;
 80069ca:	e009      	b.n	80069e0 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 80069cc:	490f      	ldr	r1, [pc, #60]	@ (8006a0c <VibeCheckWaveGenCMD_Get+0x130>)
 80069ce:	6838      	ldr	r0, [r7, #0]
 80069d0:	f7fe fdc2 	bl	8005558 <VibeCheckShell_PutOutputString>
				break;
 80069d4:	e004      	b.n	80069e0 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 80069d6:	490e      	ldr	r1, [pc, #56]	@ (8006a10 <VibeCheckWaveGenCMD_Get+0x134>)
 80069d8:	6838      	ldr	r0, [r7, #0]
 80069da:	f7fe fdbd 	bl	8005558 <VibeCheckShell_PutOutputString>
				break;
 80069de:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 80069e0:	6838      	ldr	r0, [r7, #0]
 80069e2:	f7fe fe37 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3748      	adds	r7, #72	@ 0x48
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	0801d208 	.word	0x0801d208
 80069f8:	0801d214 	.word	0x0801d214
 80069fc:	0801d218 	.word	0x0801d218
 8006a00:	0801d224 	.word	0x0801d224
 8006a04:	0801d230 	.word	0x0801d230
 8006a08:	0801d238 	.word	0x0801d238
 8006a0c:	0801d240 	.word	0x0801d240
 8006a10:	0801d244 	.word	0x0801d244

08006a14 <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b094      	sub	sp, #80	@ 0x50
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006a22:	f107 030c 	add.w	r3, r7, #12
 8006a26:	2240      	movs	r2, #64	@ 0x40
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6838      	ldr	r0, [r7, #0]
 8006a2c:	f7fe fc7c 	bl	8005328 <VibeCheckShell_GetNextString>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 808b 	beq.w	8006b4e <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 8006a38:	f107 030c 	add.w	r3, r7, #12
 8006a3c:	4946      	ldr	r1, [pc, #280]	@ (8006b58 <VibeCheckWaveGenCMD_Execute+0x144>)
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7f9 fc66 	bl	8000310 <strcmp>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 8006a4a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006a4c:	f7ff fca0 	bl	8006390 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006a50:	4942      	ldr	r1, [pc, #264]	@ (8006b5c <VibeCheckWaveGenCMD_Execute+0x148>)
 8006a52:	6838      	ldr	r0, [r7, #0]
 8006a54:	f7fe fd80 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006a58:	6838      	ldr	r0, [r7, #0]
 8006a5a:	f7fe fdfb 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e076      	b.n	8006b50 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 8006a62:	f107 030c 	add.w	r3, r7, #12
 8006a66:	493e      	ldr	r1, [pc, #248]	@ (8006b60 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7f9 fc51 	bl	8000310 <strcmp>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10b      	bne.n	8006a8c <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 8006a74:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006a76:	f7ff fcad 	bl	80063d4 <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006a7a:	4938      	ldr	r1, [pc, #224]	@ (8006b5c <VibeCheckWaveGenCMD_Execute+0x148>)
 8006a7c:	6838      	ldr	r0, [r7, #0]
 8006a7e:	f7fe fd6b 	bl	8005558 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006a82:	6838      	ldr	r0, [r7, #0]
 8006a84:	f7fe fde6 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e061      	b.n	8006b50 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 8006a8c:	f107 030c 	add.w	r3, r7, #12
 8006a90:	4934      	ldr	r1, [pc, #208]	@ (8006b64 <VibeCheckWaveGenCMD_Execute+0x150>)
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7f9 fc3c 	bl	8000310 <strcmp>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d108      	bne.n	8006ab0 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006aa2:	f7ff fe45 	bl	8006730 <VibeCheckWaveGenCMD_Set>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d050      	beq.n	8006b4e <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e04f      	b.n	8006b50 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 8006ab0:	f107 030c 	add.w	r3, r7, #12
 8006ab4:	492c      	ldr	r1, [pc, #176]	@ (8006b68 <VibeCheckWaveGenCMD_Execute+0x154>)
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7f9 fc2a 	bl	8000310 <strcmp>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d108      	bne.n	8006ad4 <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006ac6:	f7ff ff09 	bl	80068dc <VibeCheckWaveGenCMD_Get>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d03e      	beq.n	8006b4e <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e03d      	b.n	8006b50 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 8006ad4:	f107 030c 	add.w	r3, r7, #12
 8006ad8:	4924      	ldr	r1, [pc, #144]	@ (8006b6c <VibeCheckWaveGenCMD_Execute+0x158>)
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7f9 fc18 	bl	8000310 <strcmp>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d133      	bne.n	8006b4e <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006ae6:	f107 030c 	add.w	r3, r7, #12
 8006aea:	2240      	movs	r2, #64	@ 0x40
 8006aec:	4619      	mov	r1, r3
 8006aee:	6838      	ldr	r0, [r7, #0]
 8006af0:	f7fe fc1a 	bl	8005328 <VibeCheckShell_GetNextString>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d029      	beq.n	8006b4e <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 8006afa:	f107 030c 	add.w	r3, r7, #12
 8006afe:	4916      	ldr	r1, [pc, #88]	@ (8006b58 <VibeCheckWaveGenCMD_Execute+0x144>)
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7f9 fc05 	bl	8000310 <strcmp>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10b      	bne.n	8006b24 <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 8006b0c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b0e:	f7ff fdb5 	bl	800667c <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006b12:	4912      	ldr	r1, [pc, #72]	@ (8006b5c <VibeCheckWaveGenCMD_Execute+0x148>)
 8006b14:	6838      	ldr	r0, [r7, #0]
 8006b16:	f7fe fd1f 	bl	8005558 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006b1a:	6838      	ldr	r0, [r7, #0]
 8006b1c:	f7fe fd9a 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e015      	b.n	8006b50 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 8006b24:	f107 030c 	add.w	r3, r7, #12
 8006b28:	490d      	ldr	r1, [pc, #52]	@ (8006b60 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7f9 fbf0 	bl	8000310 <strcmp>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10b      	bne.n	8006b4e <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 8006b36:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b38:	f7ff fde8 	bl	800670c <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006b3c:	4907      	ldr	r1, [pc, #28]	@ (8006b5c <VibeCheckWaveGenCMD_Execute+0x148>)
 8006b3e:	6838      	ldr	r0, [r7, #0]
 8006b40:	f7fe fd0a 	bl	8005558 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006b44:	6838      	ldr	r0, [r7, #0]
 8006b46:	f7fe fd85 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e000      	b.n	8006b50 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3750      	adds	r7, #80	@ 0x50
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	0801d250 	.word	0x0801d250
 8006b5c:	0801d214 	.word	0x0801d214
 8006b60:	0801d258 	.word	0x0801d258
 8006b64:	0801d260 	.word	0x0801d260
 8006b68:	0801d264 	.word	0x0801d264
 8006b6c:	0801d268 	.word	0x0801d268

08006b70 <VibeCheckWaveGenSender_Execute>:


uint32_t VibeCheckWaveGenSender_Execute(void* obj, VibeCheckShell* shell)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
	/* this will send a message to the host when the mute button is pressed */

	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]

	uint32_t is_muted;
	if (VibeCheckWaveGen_WasMuteButtonPressed(wavegen, &is_muted))
 8006b7e:	f107 0308 	add.w	r3, r7, #8
 8006b82:	4619      	mov	r1, r3
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7ff fd21 	bl	80065cc <VibeCheckWaveGen_WasMuteButtonPressed>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01e      	beq.n	8006bce <VibeCheckWaveGenSender_Execute+0x5e>
	{
		VibeCheckShell_PutOutputString(shell, "msg");
 8006b90:	4911      	ldr	r1, [pc, #68]	@ (8006bd8 <VibeCheckWaveGenSender_Execute+0x68>)
 8006b92:	6838      	ldr	r0, [r7, #0]
 8006b94:	f7fe fce0 	bl	8005558 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8006b98:	6838      	ldr	r0, [r7, #0]
 8006b9a:	f7fe fd4d 	bl	8005638 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "wavegen");
 8006b9e:	490f      	ldr	r1, [pc, #60]	@ (8006bdc <VibeCheckWaveGenSender_Execute+0x6c>)
 8006ba0:	6838      	ldr	r0, [r7, #0]
 8006ba2:	f7fe fcd9 	bl	8005558 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8006ba6:	6838      	ldr	r0, [r7, #0]
 8006ba8:	f7fe fd46 	bl	8005638 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d004      	beq.n	8006bbc <VibeCheckWaveGenSender_Execute+0x4c>
			VibeCheckShell_PutOutputString(shell, "muted");
 8006bb2:	490b      	ldr	r1, [pc, #44]	@ (8006be0 <VibeCheckWaveGenSender_Execute+0x70>)
 8006bb4:	6838      	ldr	r0, [r7, #0]
 8006bb6:	f7fe fccf 	bl	8005558 <VibeCheckShell_PutOutputString>
 8006bba:	e003      	b.n	8006bc4 <VibeCheckWaveGenSender_Execute+0x54>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 8006bbc:	4909      	ldr	r1, [pc, #36]	@ (8006be4 <VibeCheckWaveGenSender_Execute+0x74>)
 8006bbe:	6838      	ldr	r0, [r7, #0]
 8006bc0:	f7fe fcca 	bl	8005558 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8006bc4:	6838      	ldr	r0, [r7, #0]
 8006bc6:	f7fe fd45 	bl	8005654 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <VibeCheckWaveGenSender_Execute+0x60>
	}

	return 0;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	0801d270 	.word	0x0801d270
 8006bdc:	0801d274 	.word	0x0801d274
 8006be0:	0801d27c 	.word	0x0801d27c
 8006be4:	0801d284 	.word	0x0801d284

08006be8 <Reset_Handler>:
 8006be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006c20 <LoopFillZerobss+0xe>
 8006bec:	f7fc f91a 	bl	8002e24 <SystemInit>
 8006bf0:	480c      	ldr	r0, [pc, #48]	@ (8006c24 <LoopFillZerobss+0x12>)
 8006bf2:	490d      	ldr	r1, [pc, #52]	@ (8006c28 <LoopFillZerobss+0x16>)
 8006bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8006c2c <LoopFillZerobss+0x1a>)
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e002      	b.n	8006c00 <LoopCopyDataInit>

08006bfa <CopyDataInit>:
 8006bfa:	58d4      	ldr	r4, [r2, r3]
 8006bfc:	50c4      	str	r4, [r0, r3]
 8006bfe:	3304      	adds	r3, #4

08006c00 <LoopCopyDataInit>:
 8006c00:	18c4      	adds	r4, r0, r3
 8006c02:	428c      	cmp	r4, r1
 8006c04:	d3f9      	bcc.n	8006bfa <CopyDataInit>
 8006c06:	4a0a      	ldr	r2, [pc, #40]	@ (8006c30 <LoopFillZerobss+0x1e>)
 8006c08:	4c0a      	ldr	r4, [pc, #40]	@ (8006c34 <LoopFillZerobss+0x22>)
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e001      	b.n	8006c12 <LoopFillZerobss>

08006c0e <FillZerobss>:
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	3204      	adds	r2, #4

08006c12 <LoopFillZerobss>:
 8006c12:	42a2      	cmp	r2, r4
 8006c14:	d3fb      	bcc.n	8006c0e <FillZerobss>
 8006c16:	f012 ff13 	bl	8019a40 <__libc_init_array>
 8006c1a:	f7fa fb31 	bl	8001280 <main>
 8006c1e:	4770      	bx	lr
 8006c20:	24050000 	.word	0x24050000
 8006c24:	24000000 	.word	0x24000000
 8006c28:	240002cc 	.word	0x240002cc
 8006c2c:	0801df40 	.word	0x0801df40
 8006c30:	240002cc 	.word	0x240002cc
 8006c34:	2400636c 	.word	0x2400636c

08006c38 <ADC3_IRQHandler>:
 8006c38:	e7fe      	b.n	8006c38 <ADC3_IRQHandler>
	...

08006c3c <HAL_Init>:
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	2003      	movs	r0, #3
 8006c44:	f001 fcf4 	bl	8008630 <HAL_NVIC_SetPriorityGrouping>
 8006c48:	f006 fcd6 	bl	800d5f8 <HAL_RCC_GetSysClockFreq>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	4b15      	ldr	r3, [pc, #84]	@ (8006ca4 <HAL_Init+0x68>)
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	0a1b      	lsrs	r3, r3, #8
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	4913      	ldr	r1, [pc, #76]	@ (8006ca8 <HAL_Init+0x6c>)
 8006c5a:	5ccb      	ldrb	r3, [r1, r3]
 8006c5c:	f003 031f 	and.w	r3, r3, #31
 8006c60:	fa22 f303 	lsr.w	r3, r2, r3
 8006c64:	607b      	str	r3, [r7, #4]
 8006c66:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca4 <HAL_Init+0x68>)
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8006ca8 <HAL_Init+0x6c>)
 8006c70:	5cd3      	ldrb	r3, [r2, r3]
 8006c72:	f003 031f 	and.w	r3, r3, #31
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8006cac <HAL_Init+0x70>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	4a0b      	ldr	r2, [pc, #44]	@ (8006cb0 <HAL_Init+0x74>)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	200f      	movs	r0, #15
 8006c88:	f000 f814 	bl	8006cb4 <HAL_InitTick>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_Init+0x5a>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e002      	b.n	8006c9c <HAL_Init+0x60>
 8006c96:	f7fb faef 	bl	8002278 <HAL_MspInit>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	58024400 	.word	0x58024400
 8006ca8:	0801d2c0 	.word	0x0801d2c0
 8006cac:	24000004 	.word	0x24000004
 8006cb0:	24000000 	.word	0x24000000

08006cb4 <HAL_InitTick>:
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	4b15      	ldr	r3, [pc, #84]	@ (8006d14 <HAL_InitTick+0x60>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <HAL_InitTick+0x14>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e021      	b.n	8006d0c <HAL_InitTick+0x58>
 8006cc8:	4b13      	ldr	r3, [pc, #76]	@ (8006d18 <HAL_InitTick+0x64>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	4b11      	ldr	r3, [pc, #68]	@ (8006d14 <HAL_InitTick+0x60>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f001 fcd9 	bl	8008696 <HAL_SYSTICK_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <HAL_InitTick+0x3a>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e00e      	b.n	8006d0c <HAL_InitTick+0x58>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b0f      	cmp	r3, #15
 8006cf2:	d80a      	bhi.n	8006d0a <HAL_InitTick+0x56>
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	f001 fca3 	bl	8008646 <HAL_NVIC_SetPriority>
 8006d00:	4a06      	ldr	r2, [pc, #24]	@ (8006d1c <HAL_InitTick+0x68>)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	2300      	movs	r3, #0
 8006d08:	e000      	b.n	8006d0c <HAL_InitTick+0x58>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	2400000c 	.word	0x2400000c
 8006d18:	24000000 	.word	0x24000000
 8006d1c:	24000008 	.word	0x24000008

08006d20 <HAL_IncTick>:
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	4b06      	ldr	r3, [pc, #24]	@ (8006d40 <HAL_IncTick+0x20>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4b06      	ldr	r3, [pc, #24]	@ (8006d44 <HAL_IncTick+0x24>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4413      	add	r3, r2
 8006d30:	4a04      	ldr	r2, [pc, #16]	@ (8006d44 <HAL_IncTick+0x24>)
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	bf00      	nop
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	2400000c 	.word	0x2400000c
 8006d44:	24004638 	.word	0x24004638

08006d48 <HAL_GetTick>:
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	4b03      	ldr	r3, [pc, #12]	@ (8006d5c <HAL_GetTick+0x14>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	24004638 	.word	0x24004638

08006d60 <HAL_Delay>:
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	f7ff ffee 	bl	8006d48 <HAL_GetTick>
 8006d6c:	60b8      	str	r0, [r7, #8]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d78:	d005      	beq.n	8006d86 <HAL_Delay+0x26>
 8006d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006da4 <HAL_Delay+0x44>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	bf00      	nop
 8006d88:	f7ff ffde 	bl	8006d48 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d8f7      	bhi.n	8006d88 <HAL_Delay+0x28>
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	2400000c 	.word	0x2400000c

08006da8 <LL_ADC_SetCommonClock>:
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	609a      	str	r2, [r3, #8]
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <LL_ADC_SetCommonPathInternalCh>:
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	609a      	str	r2, [r3, #8]
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <LL_ADC_GetCommonPathInternalCh>:
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <LL_ADC_SetOffset>:
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3360      	adds	r3, #96	@ 0x60
 8006e22:	461a      	mov	r2, r3
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4a10      	ldr	r2, [pc, #64]	@ (8006e70 <LL_ADC_SetOffset+0x60>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d10b      	bne.n	8006e4c <LL_ADC_SetOffset+0x3c>
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e00b      	b.n	8006e64 <LL_ADC_SetOffset+0x54>
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	58026000 	.word	0x58026000

08006e74 <LL_ADC_GetOffsetChannel>:
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3360      	adds	r3, #96	@ 0x60
 8006e82:	461a      	mov	r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <LL_ADC_SetDataRightShift>:
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	611a      	str	r2, [r3, #16]
 8006ec6:	bf00      	nop
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
	...

08006ed4 <LL_ADC_SetOffsetSignedSaturation>:
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8006f14 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00e      	beq.n	8006f06 <LL_ADC_SetOffsetSignedSaturation+0x32>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3360      	adds	r3, #96	@ 0x60
 8006eec:	461a      	mov	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	431a      	orrs	r2, r3
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	58026000 	.word	0x58026000

08006f18 <LL_ADC_SetOffsetSaturation>:
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4a0c      	ldr	r2, [pc, #48]	@ (8006f58 <LL_ADC_SetOffsetSaturation+0x40>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d10e      	bne.n	8006f4a <LL_ADC_SetOffsetSaturation+0x32>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3360      	adds	r3, #96	@ 0x60
 8006f30:	461a      	mov	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	431a      	orrs	r2, r3
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	bf00      	nop
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	58026000 	.word	0x58026000

08006f5c <LL_ADC_SetOffsetSign>:
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f9c <LL_ADC_SetOffsetSign+0x40>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10e      	bne.n	8006f8e <LL_ADC_SetOffsetSign+0x32>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3360      	adds	r3, #96	@ 0x60
 8006f74:	461a      	mov	r2, r3
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	58026000 	.word	0x58026000

08006fa0 <LL_ADC_SetOffsetState>:
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3360      	adds	r3, #96	@ 0x60
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8006ff0 <LL_ADC_SetOffsetState+0x50>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d108      	bne.n	8006fd4 <LL_ADC_SetOffsetState+0x34>
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	e007      	b.n	8006fe4 <LL_ADC_SetOffsetState+0x44>
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	58026000 	.word	0x58026000

08006ff4 <LL_ADC_REG_SetSequencerRanks>:
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	3330      	adds	r3, #48	@ 0x30
 8007004:	461a      	mov	r2, r3
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	0a1b      	lsrs	r3, r3, #8
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	f003 030c 	and.w	r3, r3, #12
 8007010:	4413      	add	r3, r2
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	211f      	movs	r1, #31
 8007020:	fa01 f303 	lsl.w	r3, r1, r3
 8007024:	43db      	mvns	r3, r3
 8007026:	401a      	ands	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	0e9b      	lsrs	r3, r3, #26
 800702c:	f003 011f 	and.w	r1, r3, #31
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f003 031f 	and.w	r3, r3, #31
 8007036:	fa01 f303 	lsl.w	r3, r1, r3
 800703a:	431a      	orrs	r2, r3
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <LL_ADC_SetChannelSamplingTime>:
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3314      	adds	r3, #20
 800705c:	461a      	mov	r2, r3
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	0e5b      	lsrs	r3, r3, #25
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	4413      	add	r3, r2
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	0d1b      	lsrs	r3, r3, #20
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	2107      	movs	r1, #7
 800707a:	fa01 f303 	lsl.w	r3, r1, r3
 800707e:	43db      	mvns	r3, r3
 8007080:	401a      	ands	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	0d1b      	lsrs	r3, r3, #20
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	fa01 f303 	lsl.w	r3, r1, r3
 8007090:	431a      	orrs	r2, r3
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
	...

080070a4 <LL_ADC_SetChannelSingleDiff>:
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4a1a      	ldr	r2, [pc, #104]	@ (800711c <LL_ADC_SetChannelSingleDiff+0x78>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d115      	bne.n	80070e4 <LL_ADC_SetChannelSingleDiff+0x40>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070c4:	43db      	mvns	r3, r3
 80070c6:	401a      	ands	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f003 0318 	and.w	r3, r3, #24
 80070ce:	4914      	ldr	r1, [pc, #80]	@ (8007120 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80070d0:	40d9      	lsrs	r1, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	400b      	ands	r3, r1
 80070d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070da:	431a      	orrs	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80070e2:	e014      	b.n	800710e <LL_ADC_SetChannelSingleDiff+0x6a>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070f0:	43db      	mvns	r3, r3
 80070f2:	401a      	ands	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f003 0318 	and.w	r3, r3, #24
 80070fa:	4909      	ldr	r1, [pc, #36]	@ (8007120 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80070fc:	40d9      	lsrs	r1, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	400b      	ands	r3, r1
 8007102:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007106:	431a      	orrs	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800710e:	bf00      	nop
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	58026000 	.word	0x58026000
 8007120:	000fffff 	.word	0x000fffff

08007124 <LL_ADC_DisableDeepPowerDown>:
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	4b04      	ldr	r3, [pc, #16]	@ (8007144 <LL_ADC_DisableDeepPowerDown+0x20>)
 8007132:	4013      	ands	r3, r2
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6093      	str	r3, [r2, #8]
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	5fffffc0 	.word	0x5fffffc0

08007148 <LL_ADC_IsDeepPowerDownEnabled>:
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800715c:	d101      	bne.n	8007162 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007162:	2300      	movs	r3, #0
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <LL_ADC_EnableInternalRegulator>:
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	4b05      	ldr	r3, [pc, #20]	@ (8007194 <LL_ADC_EnableInternalRegulator+0x24>)
 800717e:	4013      	ands	r3, r2
 8007180:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	609a      	str	r2, [r3, #8]
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	6fffffc0 	.word	0x6fffffc0

08007198 <LL_ADC_IsInternalRegulatorEnabled>:
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071ac:	d101      	bne.n	80071b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e000      	b.n	80071b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80071b2:	2300      	movs	r3, #0
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <LL_ADC_IsEnabled>:
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <LL_ADC_IsEnabled+0x18>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e000      	b.n	80071da <LL_ADC_IsEnabled+0x1a>
 80071d8:	2300      	movs	r3, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <LL_ADC_REG_IsConversionOngoing>:
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 0304 	and.w	r3, r3, #4
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	d101      	bne.n	80071fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80071fe:	2300      	movs	r3, #0
 8007200:	4618      	mov	r0, r3
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <LL_ADC_INJ_IsConversionOngoing>:
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b08      	cmp	r3, #8
 800721e:	d101      	bne.n	8007224 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007224:	2300      	movs	r3, #0
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <HAL_ADC_Init>:
 8007234:	b590      	push	{r4, r7, lr}
 8007236:	b089      	sub	sp, #36	@ 0x24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	2300      	movs	r3, #0
 800723e:	77fb      	strb	r3, [r7, #31]
 8007240:	2300      	movs	r3, #0
 8007242:	60bb      	str	r3, [r7, #8]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_ADC_Init+0x1a>
 800724a:	2301      	movs	r3, #1
 800724c:	e1ee      	b.n	800762c <HAL_ADC_Init+0x3f8>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <HAL_ADC_Init+0x3c>
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7fb f825 	bl	80022ac <HAL_ADC_MspInit>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	665a      	str	r2, [r3, #100]	@ 0x64
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff ff67 	bl	8007148 <LL_ADC_IsDeepPowerDownEnabled>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <HAL_ADC_Init+0x56>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff ff4d 	bl	8007124 <LL_ADC_DisableDeepPowerDown>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff ff82 	bl	8007198 <LL_ADC_IsInternalRegulatorEnabled>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d114      	bne.n	80072c4 <HAL_ADC_Init+0x90>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff ff66 	bl	8007170 <LL_ADC_EnableInternalRegulator>
 80072a4:	4b8e      	ldr	r3, [pc, #568]	@ (80074e0 <HAL_ADC_Init+0x2ac>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	099b      	lsrs	r3, r3, #6
 80072aa:	4a8e      	ldr	r2, [pc, #568]	@ (80074e4 <HAL_ADC_Init+0x2b0>)
 80072ac:	fba2 2303 	umull	r2, r3, r2, r3
 80072b0:	099b      	lsrs	r3, r3, #6
 80072b2:	3301      	adds	r3, #1
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	e002      	b.n	80072be <HAL_ADC_Init+0x8a>
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	60bb      	str	r3, [r7, #8]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f9      	bne.n	80072b8 <HAL_ADC_Init+0x84>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff ff65 	bl	8007198 <LL_ADC_IsInternalRegulatorEnabled>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10d      	bne.n	80072f0 <HAL_ADC_Init+0xbc>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072d8:	f043 0210 	orr.w	r2, r3, #16
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	661a      	str	r2, [r3, #96]	@ 0x60
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072e4:	f043 0201 	orr.w	r2, r3, #1
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	665a      	str	r2, [r3, #100]	@ 0x64
 80072ec:	2301      	movs	r3, #1
 80072ee:	77fb      	strb	r3, [r7, #31]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff ff76 	bl	80071e6 <LL_ADC_REG_IsConversionOngoing>
 80072fa:	6178      	str	r0, [r7, #20]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007300:	f003 0310 	and.w	r3, r3, #16
 8007304:	2b00      	cmp	r3, #0
 8007306:	f040 8188 	bne.w	800761a <HAL_ADC_Init+0x3e6>
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f040 8184 	bne.w	800761a <HAL_ADC_Init+0x3e6>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007316:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800731a:	f043 0202 	orr.w	r2, r3, #2
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	661a      	str	r2, [r3, #96]	@ 0x60
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff ff4a 	bl	80071c0 <LL_ADC_IsEnabled>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d136      	bne.n	80073a0 <HAL_ADC_Init+0x16c>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a6c      	ldr	r2, [pc, #432]	@ (80074e8 <HAL_ADC_Init+0x2b4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d004      	beq.n	8007346 <HAL_ADC_Init+0x112>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a6a      	ldr	r2, [pc, #424]	@ (80074ec <HAL_ADC_Init+0x2b8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d10e      	bne.n	8007364 <HAL_ADC_Init+0x130>
 8007346:	4868      	ldr	r0, [pc, #416]	@ (80074e8 <HAL_ADC_Init+0x2b4>)
 8007348:	f7ff ff3a 	bl	80071c0 <LL_ADC_IsEnabled>
 800734c:	4604      	mov	r4, r0
 800734e:	4867      	ldr	r0, [pc, #412]	@ (80074ec <HAL_ADC_Init+0x2b8>)
 8007350:	f7ff ff36 	bl	80071c0 <LL_ADC_IsEnabled>
 8007354:	4603      	mov	r3, r0
 8007356:	4323      	orrs	r3, r4
 8007358:	2b00      	cmp	r3, #0
 800735a:	bf0c      	ite	eq
 800735c:	2301      	moveq	r3, #1
 800735e:	2300      	movne	r3, #0
 8007360:	b2db      	uxtb	r3, r3
 8007362:	e008      	b.n	8007376 <HAL_ADC_Init+0x142>
 8007364:	4862      	ldr	r0, [pc, #392]	@ (80074f0 <HAL_ADC_Init+0x2bc>)
 8007366:	f7ff ff2b 	bl	80071c0 <LL_ADC_IsEnabled>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	bf0c      	ite	eq
 8007370:	2301      	moveq	r3, #1
 8007372:	2300      	movne	r3, #0
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d012      	beq.n	80073a0 <HAL_ADC_Init+0x16c>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a5a      	ldr	r2, [pc, #360]	@ (80074e8 <HAL_ADC_Init+0x2b4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d004      	beq.n	800738e <HAL_ADC_Init+0x15a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a58      	ldr	r2, [pc, #352]	@ (80074ec <HAL_ADC_Init+0x2b8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d101      	bne.n	8007392 <HAL_ADC_Init+0x15e>
 800738e:	4a59      	ldr	r2, [pc, #356]	@ (80074f4 <HAL_ADC_Init+0x2c0>)
 8007390:	e000      	b.n	8007394 <HAL_ADC_Init+0x160>
 8007392:	4a59      	ldr	r2, [pc, #356]	@ (80074f8 <HAL_ADC_Init+0x2c4>)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f7ff fd04 	bl	8006da8 <LL_ADC_SetCommonClock>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a52      	ldr	r2, [pc, #328]	@ (80074f0 <HAL_ADC_Init+0x2bc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d129      	bne.n	80073fe <HAL_ADC_Init+0x1ca>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7e5b      	ldrb	r3, [r3, #25]
 80073ae:	035a      	lsls	r2, r3, #13
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d013      	beq.n	80073ec <HAL_ADC_Init+0x1b8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2b0c      	cmp	r3, #12
 80073ca:	d00d      	beq.n	80073e8 <HAL_ADC_Init+0x1b4>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	2b1c      	cmp	r3, #28
 80073d2:	d007      	beq.n	80073e4 <HAL_ADC_Init+0x1b0>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	2b18      	cmp	r3, #24
 80073da:	d101      	bne.n	80073e0 <HAL_ADC_Init+0x1ac>
 80073dc:	2318      	movs	r3, #24
 80073de:	e006      	b.n	80073ee <HAL_ADC_Init+0x1ba>
 80073e0:	2300      	movs	r3, #0
 80073e2:	e004      	b.n	80073ee <HAL_ADC_Init+0x1ba>
 80073e4:	2310      	movs	r3, #16
 80073e6:	e002      	b.n	80073ee <HAL_ADC_Init+0x1ba>
 80073e8:	2308      	movs	r3, #8
 80073ea:	e000      	b.n	80073ee <HAL_ADC_Init+0x1ba>
 80073ec:	2300      	movs	r3, #0
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073f6:	041b      	lsls	r3, r3, #16
 80073f8:	4313      	orrs	r3, r2
 80073fa:	61bb      	str	r3, [r7, #24]
 80073fc:	e00e      	b.n	800741c <HAL_ADC_Init+0x1e8>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	7e5b      	ldrb	r3, [r3, #25]
 8007402:	035a      	lsls	r2, r3, #13
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	4313      	orrs	r3, r2
 800741a:	61bb      	str	r3, [r7, #24]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d106      	bne.n	8007434 <HAL_ADC_Init+0x200>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742a:	3b01      	subs	r3, #1
 800742c:	045b      	lsls	r3, r3, #17
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	4313      	orrs	r3, r2
 8007432:	61bb      	str	r3, [r7, #24]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007438:	2b00      	cmp	r3, #0
 800743a:	d009      	beq.n	8007450 <HAL_ADC_Init+0x21c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007440:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007448:	4313      	orrs	r3, r2
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	4313      	orrs	r3, r2
 800744e:	61bb      	str	r3, [r7, #24]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a26      	ldr	r2, [pc, #152]	@ (80074f0 <HAL_ADC_Init+0x2bc>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d115      	bne.n	8007486 <HAL_ADC_Init+0x252>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	4b26      	ldr	r3, [pc, #152]	@ (80074fc <HAL_ADC_Init+0x2c8>)
 8007462:	4013      	ands	r3, r2
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	6812      	ldr	r2, [r2, #0]
 8007468:	69b9      	ldr	r1, [r7, #24]
 800746a:	430b      	orrs	r3, r1
 800746c:	60d3      	str	r3, [r2, #12]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	611a      	str	r2, [r3, #16]
 8007484:	e009      	b.n	800749a <HAL_ADC_Init+0x266>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68da      	ldr	r2, [r3, #12]
 800748c:	4b1c      	ldr	r3, [pc, #112]	@ (8007500 <HAL_ADC_Init+0x2cc>)
 800748e:	4013      	ands	r3, r2
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	69b9      	ldr	r1, [r7, #24]
 8007496:	430b      	orrs	r3, r1
 8007498:	60d3      	str	r3, [r2, #12]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff fea1 	bl	80071e6 <LL_ADC_REG_IsConversionOngoing>
 80074a4:	6138      	str	r0, [r7, #16]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff feae 	bl	800720c <LL_ADC_INJ_IsConversionOngoing>
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f040 808e 	bne.w	80075d6 <HAL_ADC_Init+0x3a2>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f040 808a 	bne.w	80075d6 <HAL_ADC_Init+0x3a2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a0a      	ldr	r2, [pc, #40]	@ (80074f0 <HAL_ADC_Init+0x2bc>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d11b      	bne.n	8007504 <HAL_ADC_Init+0x2d0>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	7e1b      	ldrb	r3, [r3, #24]
 80074d0:	039a      	lsls	r2, r3, #14
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	4313      	orrs	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	e018      	b.n	8007512 <HAL_ADC_Init+0x2de>
 80074e0:	24000000 	.word	0x24000000
 80074e4:	053e2d63 	.word	0x053e2d63
 80074e8:	40022000 	.word	0x40022000
 80074ec:	40022100 	.word	0x40022100
 80074f0:	58026000 	.word	0x58026000
 80074f4:	40022300 	.word	0x40022300
 80074f8:	58026300 	.word	0x58026300
 80074fc:	fff04007 	.word	0xfff04007
 8007500:	fff0c003 	.word	0xfff0c003
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	7e1b      	ldrb	r3, [r3, #24]
 8007508:	039a      	lsls	r2, r3, #14
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750e:	4313      	orrs	r3, r2
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	4b46      	ldr	r3, [pc, #280]	@ (8007634 <HAL_ADC_Init+0x400>)
 800751a:	4013      	ands	r3, r2
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6812      	ldr	r2, [r2, #0]
 8007520:	69b9      	ldr	r1, [r7, #24]
 8007522:	430b      	orrs	r3, r1
 8007524:	60d3      	str	r3, [r2, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800752c:	2b01      	cmp	r3, #1
 800752e:	d137      	bne.n	80075a0 <HAL_ADC_Init+0x36c>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007534:	2b00      	cmp	r3, #0
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a3f      	ldr	r2, [pc, #252]	@ (8007638 <HAL_ADC_Init+0x404>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d116      	bne.n	800756e <HAL_ADC_Init+0x33a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	4b3d      	ldr	r3, [pc, #244]	@ (800763c <HAL_ADC_Init+0x408>)
 8007548:	4013      	ands	r3, r2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007552:	4311      	orrs	r1, r2
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007558:	4311      	orrs	r1, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800755e:	430a      	orrs	r2, r1
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	611a      	str	r2, [r3, #16]
 800756c:	e020      	b.n	80075b0 <HAL_ADC_Init+0x37c>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	4b32      	ldr	r3, [pc, #200]	@ (8007640 <HAL_ADC_Init+0x40c>)
 8007576:	4013      	ands	r3, r2
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800757c:	3a01      	subs	r2, #1
 800757e:	0411      	lsls	r1, r2, #16
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007584:	4311      	orrs	r1, r2
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800758a:	4311      	orrs	r1, r2
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007590:	430a      	orrs	r2, r1
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0201 	orr.w	r2, r2, #1
 800759c:	611a      	str	r2, [r3, #16]
 800759e:	e007      	b.n	80075b0 <HAL_ADC_Init+0x37c>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	691a      	ldr	r2, [r3, #16]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0201 	bic.w	r2, r2, #1
 80075ae:	611a      	str	r2, [r3, #16]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	611a      	str	r2, [r3, #16]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007638 <HAL_ADC_Init+0x404>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d002      	beq.n	80075d6 <HAL_ADC_Init+0x3a2>
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fd67 	bl	80080a4 <ADC_ConfigureBoostMode>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d10c      	bne.n	80075f8 <HAL_ADC_Init+0x3c4>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e4:	f023 010f 	bic.w	r1, r3, #15
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	1e5a      	subs	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80075f6:	e007      	b.n	8007608 <HAL_ADC_Init+0x3d4>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 020f 	bic.w	r2, r2, #15
 8007606:	631a      	str	r2, [r3, #48]	@ 0x30
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800760c:	f023 0303 	bic.w	r3, r3, #3
 8007610:	f043 0201 	orr.w	r2, r3, #1
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	661a      	str	r2, [r3, #96]	@ 0x60
 8007618:	e007      	b.n	800762a <HAL_ADC_Init+0x3f6>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800761e:	f043 0210 	orr.w	r2, r3, #16
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	661a      	str	r2, [r3, #96]	@ 0x60
 8007626:	2301      	movs	r3, #1
 8007628:	77fb      	strb	r3, [r7, #31]
 800762a:	7ffb      	ldrb	r3, [r7, #31]
 800762c:	4618      	mov	r0, r3
 800762e:	3724      	adds	r7, #36	@ 0x24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd90      	pop	{r4, r7, pc}
 8007634:	ffffbffc 	.word	0xffffbffc
 8007638:	58026000 	.word	0x58026000
 800763c:	fc00f81f 	.word	0xfc00f81f
 8007640:	fc00f81e 	.word	0xfc00f81e

08007644 <HAL_ADC_ConfigChannel>:
 8007644:	b590      	push	{r4, r7, lr}
 8007646:	b0b9      	sub	sp, #228	@ 0xe4
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
 800764e:	2300      	movs	r3, #0
 8007650:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8007654:	2300      	movs	r3, #0
 8007656:	60bb      	str	r3, [r7, #8]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800765e:	2b01      	cmp	r3, #1
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	4aab      	ldr	r2, [pc, #684]	@ (8007914 <HAL_ADC_ConfigChannel+0x2d0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800766e:	2b01      	cmp	r3, #1
 8007670:	d102      	bne.n	8007678 <HAL_ADC_ConfigChannel+0x34>
 8007672:	2302      	movs	r3, #2
 8007674:	f000 bcfe 	b.w	8008074 <HAL_ADC_ConfigChannel+0xa30>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff fdae 	bl	80071e6 <LL_ADC_REG_IsConversionOngoing>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	f040 84e2 	bne.w	8008056 <HAL_ADC_ConfigChannel+0xa12>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	db38      	blt.n	800770c <HAL_ADC_ConfigChannel+0xc8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a9e      	ldr	r2, [pc, #632]	@ (8007918 <HAL_ADC_ConfigChannel+0x2d4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d033      	beq.n	800770c <HAL_ADC_ConfigChannel+0xc8>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d108      	bne.n	80076c2 <HAL_ADC_ConfigChannel+0x7e>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	0e9b      	lsrs	r3, r3, #26
 80076b6:	f003 031f 	and.w	r3, r3, #31
 80076ba:	2201      	movs	r2, #1
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	e01d      	b.n	80076fe <HAL_ADC_ConfigChannel+0xba>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076ce:	fa93 f3a3 	rbit	r3, r3
 80076d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80076da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_ADC_ConfigChannel+0xa6>
 80076e6:	2320      	movs	r3, #32
 80076e8:	e004      	b.n	80076f4 <HAL_ADC_ConfigChannel+0xb0>
 80076ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076ee:	fab3 f383 	clz	r3, r3
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 031f 	and.w	r3, r3, #31
 80076f8:	2201      	movs	r2, #1
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	6812      	ldr	r2, [r2, #0]
 8007702:	69d1      	ldr	r1, [r2, #28]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	6812      	ldr	r2, [r2, #0]
 8007708:	430b      	orrs	r3, r1
 800770a:	61d3      	str	r3, [r2, #28]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	6859      	ldr	r1, [r3, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	461a      	mov	r2, r3
 800771a:	f7ff fc6b 	bl	8006ff4 <LL_ADC_REG_SetSequencerRanks>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff fd5f 	bl	80071e6 <LL_ADC_REG_IsConversionOngoing>
 8007728:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff fd6b 	bl	800720c <LL_ADC_INJ_IsConversionOngoing>
 8007736:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
 800773a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800773e:	2b00      	cmp	r3, #0
 8007740:	f040 8270 	bne.w	8007c24 <HAL_ADC_ConfigChannel+0x5e0>
 8007744:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007748:	2b00      	cmp	r3, #0
 800774a:	f040 826b 	bne.w	8007c24 <HAL_ADC_ConfigChannel+0x5e0>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6818      	ldr	r0, [r3, #0]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	6819      	ldr	r1, [r3, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	461a      	mov	r2, r3
 800775c:	f7ff fc76 	bl	800704c <LL_ADC_SetChannelSamplingTime>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a6c      	ldr	r2, [pc, #432]	@ (8007918 <HAL_ADC_ConfigChannel+0x2d4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d10d      	bne.n	8007786 <HAL_ADC_ConfigChannel+0x142>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	695a      	ldr	r2, [r3, #20]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	08db      	lsrs	r3, r3, #3
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	fa02 f303 	lsl.w	r3, r2, r3
 8007780:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007784:	e032      	b.n	80077ec <HAL_ADC_ConfigChannel+0x1a8>
 8007786:	4b65      	ldr	r3, [pc, #404]	@ (800791c <HAL_ADC_ConfigChannel+0x2d8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800778e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007792:	d10b      	bne.n	80077ac <HAL_ADC_ConfigChannel+0x168>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	695a      	ldr	r2, [r3, #20]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	089b      	lsrs	r3, r3, #2
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	e01d      	b.n	80077e8 <HAL_ADC_ConfigChannel+0x1a4>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f003 0310 	and.w	r3, r3, #16
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10b      	bne.n	80077d2 <HAL_ADC_ConfigChannel+0x18e>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	695a      	ldr	r2, [r3, #20]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	089b      	lsrs	r3, r3, #2
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	fa02 f303 	lsl.w	r3, r2, r3
 80077d0:	e00a      	b.n	80077e8 <HAL_ADC_ConfigChannel+0x1a4>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695a      	ldr	r2, [r3, #20]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	089b      	lsrs	r3, r3, #2
 80077de:	f003 0304 	and.w	r3, r3, #4
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d048      	beq.n	8007886 <HAL_ADC_ConfigChannel+0x242>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	6919      	ldr	r1, [r3, #16]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007804:	f7ff fb04 	bl	8006e10 <LL_ADC_SetOffset>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a42      	ldr	r2, [pc, #264]	@ (8007918 <HAL_ADC_ConfigChannel+0x2d4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d119      	bne.n	8007846 <HAL_ADC_ConfigChannel+0x202>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6919      	ldr	r1, [r3, #16]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	461a      	mov	r2, r3
 8007820:	f7ff fb9c 	bl	8006f5c <LL_ADC_SetOffsetSign>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6818      	ldr	r0, [r3, #0]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	6919      	ldr	r1, [r3, #16]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d102      	bne.n	800783c <HAL_ADC_ConfigChannel+0x1f8>
 8007836:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800783a:	e000      	b.n	800783e <HAL_ADC_ConfigChannel+0x1fa>
 800783c:	2300      	movs	r3, #0
 800783e:	461a      	mov	r2, r3
 8007840:	f7ff fb6a 	bl	8006f18 <LL_ADC_SetOffsetSaturation>
 8007844:	e1ee      	b.n	8007c24 <HAL_ADC_ConfigChannel+0x5e0>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	6919      	ldr	r1, [r3, #16]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007854:	2b01      	cmp	r3, #1
 8007856:	d102      	bne.n	800785e <HAL_ADC_ConfigChannel+0x21a>
 8007858:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800785c:	e000      	b.n	8007860 <HAL_ADC_ConfigChannel+0x21c>
 800785e:	2300      	movs	r3, #0
 8007860:	461a      	mov	r2, r3
 8007862:	f7ff fb37 	bl	8006ed4 <LL_ADC_SetOffsetSignedSaturation>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	6919      	ldr	r1, [r3, #16]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	7e1b      	ldrb	r3, [r3, #24]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d102      	bne.n	800787c <HAL_ADC_ConfigChannel+0x238>
 8007876:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800787a:	e000      	b.n	800787e <HAL_ADC_ConfigChannel+0x23a>
 800787c:	2300      	movs	r3, #0
 800787e:	461a      	mov	r2, r3
 8007880:	f7ff fb0e 	bl	8006ea0 <LL_ADC_SetDataRightShift>
 8007884:	e1ce      	b.n	8007c24 <HAL_ADC_ConfigChannel+0x5e0>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a23      	ldr	r2, [pc, #140]	@ (8007918 <HAL_ADC_ConfigChannel+0x2d4>)
 800788c:	4293      	cmp	r3, r2
 800788e:	f040 8181 	bne.w	8007b94 <HAL_ADC_ConfigChannel+0x550>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2100      	movs	r1, #0
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff faeb 	bl	8006e74 <LL_ADC_GetOffsetChannel>
 800789e:	4603      	mov	r3, r0
 80078a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10a      	bne.n	80078be <HAL_ADC_ConfigChannel+0x27a>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2100      	movs	r1, #0
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff fae0 	bl	8006e74 <LL_ADC_GetOffsetChannel>
 80078b4:	4603      	mov	r3, r0
 80078b6:	0e9b      	lsrs	r3, r3, #26
 80078b8:	f003 021f 	and.w	r2, r3, #31
 80078bc:	e01e      	b.n	80078fc <HAL_ADC_ConfigChannel+0x2b8>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2100      	movs	r1, #0
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff fad5 	bl	8006e74 <LL_ADC_GetOffsetChannel>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078d4:	fa93 f3a3 	rbit	r3, r3
 80078d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80078e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <HAL_ADC_ConfigChannel+0x2ac>
 80078ec:	2320      	movs	r3, #32
 80078ee:	e004      	b.n	80078fa <HAL_ADC_ConfigChannel+0x2b6>
 80078f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078f4:	fab3 f383 	clz	r3, r3
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	461a      	mov	r2, r3
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10b      	bne.n	8007920 <HAL_ADC_ConfigChannel+0x2dc>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	0e9b      	lsrs	r3, r3, #26
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	e01e      	b.n	8007952 <HAL_ADC_ConfigChannel+0x30e>
 8007914:	47ff0000 	.word	0x47ff0000
 8007918:	58026000 	.word	0x58026000
 800791c:	5c001000 	.word	0x5c001000
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800792c:	fa93 f3a3 	rbit	r3, r3
 8007930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007934:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007938:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800793c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <HAL_ADC_ConfigChannel+0x304>
 8007944:	2320      	movs	r3, #32
 8007946:	e004      	b.n	8007952 <HAL_ADC_ConfigChannel+0x30e>
 8007948:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800794c:	fab3 f383 	clz	r3, r3
 8007950:	b2db      	uxtb	r3, r3
 8007952:	429a      	cmp	r2, r3
 8007954:	d106      	bne.n	8007964 <HAL_ADC_ConfigChannel+0x320>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2200      	movs	r2, #0
 800795c:	2100      	movs	r1, #0
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff fb1e 	bl	8006fa0 <LL_ADC_SetOffsetState>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2101      	movs	r1, #1
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff fa82 	bl	8006e74 <LL_ADC_GetOffsetChannel>
 8007970:	4603      	mov	r3, r0
 8007972:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10a      	bne.n	8007990 <HAL_ADC_ConfigChannel+0x34c>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2101      	movs	r1, #1
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff fa77 	bl	8006e74 <LL_ADC_GetOffsetChannel>
 8007986:	4603      	mov	r3, r0
 8007988:	0e9b      	lsrs	r3, r3, #26
 800798a:	f003 021f 	and.w	r2, r3, #31
 800798e:	e01e      	b.n	80079ce <HAL_ADC_ConfigChannel+0x38a>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2101      	movs	r1, #1
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff fa6c 	bl	8006e74 <LL_ADC_GetOffsetChannel>
 800799c:	4603      	mov	r3, r0
 800799e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079a6:	fa93 f3a3 	rbit	r3, r3
 80079aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_ADC_ConfigChannel+0x37e>
 80079be:	2320      	movs	r3, #32
 80079c0:	e004      	b.n	80079cc <HAL_ADC_ConfigChannel+0x388>
 80079c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079c6:	fab3 f383 	clz	r3, r3
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	461a      	mov	r2, r3
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <HAL_ADC_ConfigChannel+0x3a2>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	0e9b      	lsrs	r3, r3, #26
 80079e0:	f003 031f 	and.w	r3, r3, #31
 80079e4:	e018      	b.n	8007a18 <HAL_ADC_ConfigChannel+0x3d4>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079f2:	fa93 f3a3 	rbit	r3, r3
 80079f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_ADC_ConfigChannel+0x3ca>
 8007a0a:	2320      	movs	r3, #32
 8007a0c:	e004      	b.n	8007a18 <HAL_ADC_ConfigChannel+0x3d4>
 8007a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a12:	fab3 f383 	clz	r3, r3
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d106      	bne.n	8007a2a <HAL_ADC_ConfigChannel+0x3e6>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2200      	movs	r2, #0
 8007a22:	2101      	movs	r1, #1
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff fabb 	bl	8006fa0 <LL_ADC_SetOffsetState>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2102      	movs	r1, #2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff fa1f 	bl	8006e74 <LL_ADC_GetOffsetChannel>
 8007a36:	4603      	mov	r3, r0
 8007a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <HAL_ADC_ConfigChannel+0x412>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2102      	movs	r1, #2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff fa14 	bl	8006e74 <LL_ADC_GetOffsetChannel>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	0e9b      	lsrs	r3, r3, #26
 8007a50:	f003 021f 	and.w	r2, r3, #31
 8007a54:	e01e      	b.n	8007a94 <HAL_ADC_ConfigChannel+0x450>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2102      	movs	r1, #2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff fa09 	bl	8006e74 <LL_ADC_GetOffsetChannel>
 8007a62:	4603      	mov	r3, r0
 8007a64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a6c:	fa93 f3a3 	rbit	r3, r3
 8007a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <HAL_ADC_ConfigChannel+0x444>
 8007a84:	2320      	movs	r3, #32
 8007a86:	e004      	b.n	8007a92 <HAL_ADC_ConfigChannel+0x44e>
 8007a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a8c:	fab3 f383 	clz	r3, r3
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	461a      	mov	r2, r3
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d105      	bne.n	8007aac <HAL_ADC_ConfigChannel+0x468>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	0e9b      	lsrs	r3, r3, #26
 8007aa6:	f003 031f 	and.w	r3, r3, #31
 8007aaa:	e014      	b.n	8007ad6 <HAL_ADC_ConfigChannel+0x492>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ab2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ab4:	fa93 f3a3 	rbit	r3, r3
 8007ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007aba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007abc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <HAL_ADC_ConfigChannel+0x488>
 8007ac8:	2320      	movs	r3, #32
 8007aca:	e004      	b.n	8007ad6 <HAL_ADC_ConfigChannel+0x492>
 8007acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ad0:	fab3 f383 	clz	r3, r3
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d106      	bne.n	8007ae8 <HAL_ADC_ConfigChannel+0x4a4>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7ff fa5c 	bl	8006fa0 <LL_ADC_SetOffsetState>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2103      	movs	r1, #3
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff f9c0 	bl	8006e74 <LL_ADC_GetOffsetChannel>
 8007af4:	4603      	mov	r3, r0
 8007af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10a      	bne.n	8007b14 <HAL_ADC_ConfigChannel+0x4d0>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2103      	movs	r1, #3
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7ff f9b5 	bl	8006e74 <LL_ADC_GetOffsetChannel>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	0e9b      	lsrs	r3, r3, #26
 8007b0e:	f003 021f 	and.w	r2, r3, #31
 8007b12:	e017      	b.n	8007b44 <HAL_ADC_ConfigChannel+0x500>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2103      	movs	r1, #3
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff f9aa 	bl	8006e74 <LL_ADC_GetOffsetChannel>
 8007b20:	4603      	mov	r3, r0
 8007b22:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b26:	fa93 f3a3 	rbit	r3, r3
 8007b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_ADC_ConfigChannel+0x4f6>
 8007b36:	2320      	movs	r3, #32
 8007b38:	e003      	b.n	8007b42 <HAL_ADC_ConfigChannel+0x4fe>
 8007b3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b3c:	fab3 f383 	clz	r3, r3
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d105      	bne.n	8007b5c <HAL_ADC_ConfigChannel+0x518>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	0e9b      	lsrs	r3, r3, #26
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	e011      	b.n	8007b80 <HAL_ADC_ConfigChannel+0x53c>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b64:	fa93 f3a3 	rbit	r3, r3
 8007b68:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <HAL_ADC_ConfigChannel+0x534>
 8007b74:	2320      	movs	r3, #32
 8007b76:	e003      	b.n	8007b80 <HAL_ADC_ConfigChannel+0x53c>
 8007b78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b7a:	fab3 f383 	clz	r3, r3
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d14f      	bne.n	8007c24 <HAL_ADC_ConfigChannel+0x5e0>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	2103      	movs	r1, #3
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff fa07 	bl	8006fa0 <LL_ADC_SetOffsetState>
 8007b92:	e047      	b.n	8007c24 <HAL_ADC_ConfigChannel+0x5e0>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	069b      	lsls	r3, r3, #26
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d107      	bne.n	8007bb8 <HAL_ADC_ConfigChannel+0x574>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007bb6:	661a      	str	r2, [r3, #96]	@ 0x60
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	069b      	lsls	r3, r3, #26
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d107      	bne.n	8007bdc <HAL_ADC_ConfigChannel+0x598>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007bda:	665a      	str	r2, [r3, #100]	@ 0x64
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007be2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	069b      	lsls	r3, r3, #26
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d107      	bne.n	8007c00 <HAL_ADC_ConfigChannel+0x5bc>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007bfe:	669a      	str	r2, [r3, #104]	@ 0x68
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	069b      	lsls	r3, r3, #26
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d107      	bne.n	8007c24 <HAL_ADC_ConfigChannel+0x5e0>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007c22:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7ff fac9 	bl	80071c0 <LL_ADC_IsEnabled>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f040 8219 	bne.w	8008068 <HAL_ADC_ConfigChannel+0xa24>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6819      	ldr	r1, [r3, #0]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f7ff fa2e 	bl	80070a4 <LL_ADC_SetChannelSingleDiff>
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	4aa1      	ldr	r2, [pc, #644]	@ (8007ed4 <HAL_ADC_ConfigChannel+0x890>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	f040 812e 	bne.w	8007eb0 <HAL_ADC_ConfigChannel+0x86c>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10b      	bne.n	8007c7c <HAL_ADC_ConfigChannel+0x638>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	0e9b      	lsrs	r3, r3, #26
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	f003 031f 	and.w	r3, r3, #31
 8007c70:	2b09      	cmp	r3, #9
 8007c72:	bf94      	ite	ls
 8007c74:	2301      	movls	r3, #1
 8007c76:	2300      	movhi	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	e019      	b.n	8007cb0 <HAL_ADC_ConfigChannel+0x66c>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c84:	fa93 f3a3 	rbit	r3, r3
 8007c88:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <HAL_ADC_ConfigChannel+0x654>
 8007c94:	2320      	movs	r3, #32
 8007c96:	e003      	b.n	8007ca0 <HAL_ADC_ConfigChannel+0x65c>
 8007c98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c9a:	fab3 f383 	clz	r3, r3
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	f003 031f 	and.w	r3, r3, #31
 8007ca6:	2b09      	cmp	r3, #9
 8007ca8:	bf94      	ite	ls
 8007caa:	2301      	movls	r3, #1
 8007cac:	2300      	movhi	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d079      	beq.n	8007da8 <HAL_ADC_ConfigChannel+0x764>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d107      	bne.n	8007cd0 <HAL_ADC_ConfigChannel+0x68c>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	0e9b      	lsrs	r3, r3, #26
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	069b      	lsls	r3, r3, #26
 8007cca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007cce:	e015      	b.n	8007cfc <HAL_ADC_ConfigChannel+0x6b8>
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd8:	fa93 f3a3 	rbit	r3, r3
 8007cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ce0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <HAL_ADC_ConfigChannel+0x6a8>
 8007ce8:	2320      	movs	r3, #32
 8007cea:	e003      	b.n	8007cf4 <HAL_ADC_ConfigChannel+0x6b0>
 8007cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cee:	fab3 f383 	clz	r3, r3
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	069b      	lsls	r3, r3, #26
 8007cf8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d109      	bne.n	8007d1c <HAL_ADC_ConfigChannel+0x6d8>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	0e9b      	lsrs	r3, r3, #26
 8007d0e:	3301      	adds	r3, #1
 8007d10:	f003 031f 	and.w	r3, r3, #31
 8007d14:	2101      	movs	r1, #1
 8007d16:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1a:	e017      	b.n	8007d4c <HAL_ADC_ConfigChannel+0x708>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d24:	fa93 f3a3 	rbit	r3, r3
 8007d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <HAL_ADC_ConfigChannel+0x6f4>
 8007d34:	2320      	movs	r3, #32
 8007d36:	e003      	b.n	8007d40 <HAL_ADC_ConfigChannel+0x6fc>
 8007d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d3a:	fab3 f383 	clz	r3, r3
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	3301      	adds	r3, #1
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	2101      	movs	r1, #1
 8007d48:	fa01 f303 	lsl.w	r3, r1, r3
 8007d4c:	ea42 0103 	orr.w	r1, r2, r3
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <HAL_ADC_ConfigChannel+0x72e>
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	0e9b      	lsrs	r3, r3, #26
 8007d62:	3301      	adds	r3, #1
 8007d64:	f003 021f 	and.w	r2, r3, #31
 8007d68:	4613      	mov	r3, r2
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	4413      	add	r3, r2
 8007d6e:	051b      	lsls	r3, r3, #20
 8007d70:	e018      	b.n	8007da4 <HAL_ADC_ConfigChannel+0x760>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7a:	fa93 f3a3 	rbit	r3, r3
 8007d7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_ADC_ConfigChannel+0x74a>
 8007d8a:	2320      	movs	r3, #32
 8007d8c:	e003      	b.n	8007d96 <HAL_ADC_ConfigChannel+0x752>
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d90:	fab3 f383 	clz	r3, r3
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	3301      	adds	r3, #1
 8007d98:	f003 021f 	and.w	r2, r3, #31
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	4413      	add	r3, r2
 8007da2:	051b      	lsls	r3, r3, #20
 8007da4:	430b      	orrs	r3, r1
 8007da6:	e07e      	b.n	8007ea6 <HAL_ADC_ConfigChannel+0x862>
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d107      	bne.n	8007dc4 <HAL_ADC_ConfigChannel+0x780>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	0e9b      	lsrs	r3, r3, #26
 8007dba:	3301      	adds	r3, #1
 8007dbc:	069b      	lsls	r3, r3, #26
 8007dbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007dc2:	e015      	b.n	8007df0 <HAL_ADC_ConfigChannel+0x7ac>
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dcc:	fa93 f3a3 	rbit	r3, r3
 8007dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <HAL_ADC_ConfigChannel+0x79c>
 8007ddc:	2320      	movs	r3, #32
 8007dde:	e003      	b.n	8007de8 <HAL_ADC_ConfigChannel+0x7a4>
 8007de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de2:	fab3 f383 	clz	r3, r3
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	3301      	adds	r3, #1
 8007dea:	069b      	lsls	r3, r3, #26
 8007dec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d109      	bne.n	8007e10 <HAL_ADC_ConfigChannel+0x7cc>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	0e9b      	lsrs	r3, r3, #26
 8007e02:	3301      	adds	r3, #1
 8007e04:	f003 031f 	and.w	r3, r3, #31
 8007e08:	2101      	movs	r1, #1
 8007e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e0e:	e017      	b.n	8007e40 <HAL_ADC_ConfigChannel+0x7fc>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	61fb      	str	r3, [r7, #28]
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	fa93 f3a3 	rbit	r3, r3
 8007e1c:	61bb      	str	r3, [r7, #24]
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	623b      	str	r3, [r7, #32]
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <HAL_ADC_ConfigChannel+0x7e8>
 8007e28:	2320      	movs	r3, #32
 8007e2a:	e003      	b.n	8007e34 <HAL_ADC_ConfigChannel+0x7f0>
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	fab3 f383 	clz	r3, r3
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	3301      	adds	r3, #1
 8007e36:	f003 031f 	and.w	r3, r3, #31
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e40:	ea42 0103 	orr.w	r1, r2, r3
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10d      	bne.n	8007e6c <HAL_ADC_ConfigChannel+0x828>
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	0e9b      	lsrs	r3, r3, #26
 8007e56:	3301      	adds	r3, #1
 8007e58:	f003 021f 	and.w	r2, r3, #31
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	4413      	add	r3, r2
 8007e62:	3b1e      	subs	r3, #30
 8007e64:	051b      	lsls	r3, r3, #20
 8007e66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007e6a:	e01b      	b.n	8007ea4 <HAL_ADC_ConfigChannel+0x860>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	613b      	str	r3, [r7, #16]
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	fa93 f3a3 	rbit	r3, r3
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	617b      	str	r3, [r7, #20]
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <HAL_ADC_ConfigChannel+0x844>
 8007e84:	2320      	movs	r3, #32
 8007e86:	e003      	b.n	8007e90 <HAL_ADC_ConfigChannel+0x84c>
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	fab3 f383 	clz	r3, r3
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	3301      	adds	r3, #1
 8007e92:	f003 021f 	and.w	r2, r3, #31
 8007e96:	4613      	mov	r3, r2
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	4413      	add	r3, r2
 8007e9c:	3b1e      	subs	r3, #30
 8007e9e:	051b      	lsls	r3, r3, #20
 8007ea0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	6892      	ldr	r2, [r2, #8]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	f7ff f8ce 	bl	800704c <LL_ADC_SetChannelSamplingTime>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f280 80d7 	bge.w	8008068 <HAL_ADC_ConfigChannel+0xa24>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a06      	ldr	r2, [pc, #24]	@ (8007ed8 <HAL_ADC_ConfigChannel+0x894>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d004      	beq.n	8007ece <HAL_ADC_ConfigChannel+0x88a>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a04      	ldr	r2, [pc, #16]	@ (8007edc <HAL_ADC_ConfigChannel+0x898>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d10a      	bne.n	8007ee4 <HAL_ADC_ConfigChannel+0x8a0>
 8007ece:	4b04      	ldr	r3, [pc, #16]	@ (8007ee0 <HAL_ADC_ConfigChannel+0x89c>)
 8007ed0:	e009      	b.n	8007ee6 <HAL_ADC_ConfigChannel+0x8a2>
 8007ed2:	bf00      	nop
 8007ed4:	47ff0000 	.word	0x47ff0000
 8007ed8:	40022000 	.word	0x40022000
 8007edc:	40022100 	.word	0x40022100
 8007ee0:	40022300 	.word	0x40022300
 8007ee4:	4b65      	ldr	r3, [pc, #404]	@ (800807c <HAL_ADC_ConfigChannel+0xa38>)
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe ff84 	bl	8006df4 <LL_ADC_GetCommonPathInternalCh>
 8007eec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a62      	ldr	r2, [pc, #392]	@ (8008080 <HAL_ADC_ConfigChannel+0xa3c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d004      	beq.n	8007f04 <HAL_ADC_ConfigChannel+0x8c0>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a61      	ldr	r2, [pc, #388]	@ (8008084 <HAL_ADC_ConfigChannel+0xa40>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d10e      	bne.n	8007f22 <HAL_ADC_ConfigChannel+0x8de>
 8007f04:	485e      	ldr	r0, [pc, #376]	@ (8008080 <HAL_ADC_ConfigChannel+0xa3c>)
 8007f06:	f7ff f95b 	bl	80071c0 <LL_ADC_IsEnabled>
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	485d      	ldr	r0, [pc, #372]	@ (8008084 <HAL_ADC_ConfigChannel+0xa40>)
 8007f0e:	f7ff f957 	bl	80071c0 <LL_ADC_IsEnabled>
 8007f12:	4603      	mov	r3, r0
 8007f14:	4323      	orrs	r3, r4
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	bf0c      	ite	eq
 8007f1a:	2301      	moveq	r3, #1
 8007f1c:	2300      	movne	r3, #0
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	e008      	b.n	8007f34 <HAL_ADC_ConfigChannel+0x8f0>
 8007f22:	4859      	ldr	r0, [pc, #356]	@ (8008088 <HAL_ADC_ConfigChannel+0xa44>)
 8007f24:	f7ff f94c 	bl	80071c0 <LL_ADC_IsEnabled>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bf0c      	ite	eq
 8007f2e:	2301      	moveq	r3, #1
 8007f30:	2300      	movne	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8084 	beq.w	8008042 <HAL_ADC_ConfigChannel+0x9fe>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a53      	ldr	r2, [pc, #332]	@ (800808c <HAL_ADC_ConfigChannel+0xa48>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d132      	bne.n	8007faa <HAL_ADC_ConfigChannel+0x966>
 8007f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d12c      	bne.n	8007faa <HAL_ADC_ConfigChannel+0x966>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a4c      	ldr	r2, [pc, #304]	@ (8008088 <HAL_ADC_ConfigChannel+0xa44>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	f040 8086 	bne.w	8008068 <HAL_ADC_ConfigChannel+0xa24>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a47      	ldr	r2, [pc, #284]	@ (8008080 <HAL_ADC_ConfigChannel+0xa3c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d004      	beq.n	8007f70 <HAL_ADC_ConfigChannel+0x92c>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a46      	ldr	r2, [pc, #280]	@ (8008084 <HAL_ADC_ConfigChannel+0xa40>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d101      	bne.n	8007f74 <HAL_ADC_ConfigChannel+0x930>
 8007f70:	4a47      	ldr	r2, [pc, #284]	@ (8008090 <HAL_ADC_ConfigChannel+0xa4c>)
 8007f72:	e000      	b.n	8007f76 <HAL_ADC_ConfigChannel+0x932>
 8007f74:	4a41      	ldr	r2, [pc, #260]	@ (800807c <HAL_ADC_ConfigChannel+0xa38>)
 8007f76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f7e:	4619      	mov	r1, r3
 8007f80:	4610      	mov	r0, r2
 8007f82:	f7fe ff24 	bl	8006dce <LL_ADC_SetCommonPathInternalCh>
 8007f86:	4b43      	ldr	r3, [pc, #268]	@ (8008094 <HAL_ADC_ConfigChannel+0xa50>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	099b      	lsrs	r3, r3, #6
 8007f8c:	4a42      	ldr	r2, [pc, #264]	@ (8008098 <HAL_ADC_ConfigChannel+0xa54>)
 8007f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f92:	099b      	lsrs	r3, r3, #6
 8007f94:	3301      	adds	r3, #1
 8007f96:	005b      	lsls	r3, r3, #1
 8007f98:	60bb      	str	r3, [r7, #8]
 8007f9a:	e002      	b.n	8007fa2 <HAL_ADC_ConfigChannel+0x95e>
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	60bb      	str	r3, [r7, #8]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1f9      	bne.n	8007f9c <HAL_ADC_ConfigChannel+0x958>
 8007fa8:	e05e      	b.n	8008068 <HAL_ADC_ConfigChannel+0xa24>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a3b      	ldr	r2, [pc, #236]	@ (800809c <HAL_ADC_ConfigChannel+0xa58>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d120      	bne.n	8007ff6 <HAL_ADC_ConfigChannel+0x9b2>
 8007fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d11a      	bne.n	8007ff6 <HAL_ADC_ConfigChannel+0x9b2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a30      	ldr	r2, [pc, #192]	@ (8008088 <HAL_ADC_ConfigChannel+0xa44>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d14e      	bne.n	8008068 <HAL_ADC_ConfigChannel+0xa24>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a2c      	ldr	r2, [pc, #176]	@ (8008080 <HAL_ADC_ConfigChannel+0xa3c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d004      	beq.n	8007fde <HAL_ADC_ConfigChannel+0x99a>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8008084 <HAL_ADC_ConfigChannel+0xa40>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d101      	bne.n	8007fe2 <HAL_ADC_ConfigChannel+0x99e>
 8007fde:	4a2c      	ldr	r2, [pc, #176]	@ (8008090 <HAL_ADC_ConfigChannel+0xa4c>)
 8007fe0:	e000      	b.n	8007fe4 <HAL_ADC_ConfigChannel+0x9a0>
 8007fe2:	4a26      	ldr	r2, [pc, #152]	@ (800807c <HAL_ADC_ConfigChannel+0xa38>)
 8007fe4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fe8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007fec:	4619      	mov	r1, r3
 8007fee:	4610      	mov	r0, r2
 8007ff0:	f7fe feed 	bl	8006dce <LL_ADC_SetCommonPathInternalCh>
 8007ff4:	e038      	b.n	8008068 <HAL_ADC_ConfigChannel+0xa24>
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a29      	ldr	r2, [pc, #164]	@ (80080a0 <HAL_ADC_ConfigChannel+0xa5c>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d133      	bne.n	8008068 <HAL_ADC_ConfigChannel+0xa24>
 8008000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d12d      	bne.n	8008068 <HAL_ADC_ConfigChannel+0xa24>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a1d      	ldr	r2, [pc, #116]	@ (8008088 <HAL_ADC_ConfigChannel+0xa44>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d128      	bne.n	8008068 <HAL_ADC_ConfigChannel+0xa24>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a19      	ldr	r2, [pc, #100]	@ (8008080 <HAL_ADC_ConfigChannel+0xa3c>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d004      	beq.n	800802a <HAL_ADC_ConfigChannel+0x9e6>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a17      	ldr	r2, [pc, #92]	@ (8008084 <HAL_ADC_ConfigChannel+0xa40>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d101      	bne.n	800802e <HAL_ADC_ConfigChannel+0x9ea>
 800802a:	4a19      	ldr	r2, [pc, #100]	@ (8008090 <HAL_ADC_ConfigChannel+0xa4c>)
 800802c:	e000      	b.n	8008030 <HAL_ADC_ConfigChannel+0x9ec>
 800802e:	4a13      	ldr	r2, [pc, #76]	@ (800807c <HAL_ADC_ConfigChannel+0xa38>)
 8008030:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008034:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008038:	4619      	mov	r1, r3
 800803a:	4610      	mov	r0, r2
 800803c:	f7fe fec7 	bl	8006dce <LL_ADC_SetCommonPathInternalCh>
 8008040:	e012      	b.n	8008068 <HAL_ADC_ConfigChannel+0xa24>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008046:	f043 0220 	orr.w	r2, r3, #32
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	661a      	str	r2, [r3, #96]	@ 0x60
 800804e:	2301      	movs	r3, #1
 8008050:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8008054:	e008      	b.n	8008068 <HAL_ADC_ConfigChannel+0xa24>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800805a:	f043 0220 	orr.w	r2, r3, #32
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	661a      	str	r2, [r3, #96]	@ 0x60
 8008062:	2301      	movs	r3, #1
 8008064:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8008070:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8008074:	4618      	mov	r0, r3
 8008076:	37e4      	adds	r7, #228	@ 0xe4
 8008078:	46bd      	mov	sp, r7
 800807a:	bd90      	pop	{r4, r7, pc}
 800807c:	58026300 	.word	0x58026300
 8008080:	40022000 	.word	0x40022000
 8008084:	40022100 	.word	0x40022100
 8008088:	58026000 	.word	0x58026000
 800808c:	c7520000 	.word	0xc7520000
 8008090:	40022300 	.word	0x40022300
 8008094:	24000000 	.word	0x24000000
 8008098:	053e2d63 	.word	0x053e2d63
 800809c:	c3210000 	.word	0xc3210000
 80080a0:	cb840000 	.word	0xcb840000

080080a4 <ADC_ConfigureBoostMode>:
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a6c      	ldr	r2, [pc, #432]	@ (8008264 <ADC_ConfigureBoostMode+0x1c0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d004      	beq.n	80080c0 <ADC_ConfigureBoostMode+0x1c>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a6b      	ldr	r2, [pc, #428]	@ (8008268 <ADC_ConfigureBoostMode+0x1c4>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d109      	bne.n	80080d4 <ADC_ConfigureBoostMode+0x30>
 80080c0:	4b6a      	ldr	r3, [pc, #424]	@ (800826c <ADC_ConfigureBoostMode+0x1c8>)
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bf14      	ite	ne
 80080cc:	2301      	movne	r3, #1
 80080ce:	2300      	moveq	r3, #0
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	e008      	b.n	80080e6 <ADC_ConfigureBoostMode+0x42>
 80080d4:	4b66      	ldr	r3, [pc, #408]	@ (8008270 <ADC_ConfigureBoostMode+0x1cc>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	bf14      	ite	ne
 80080e0:	2301      	movne	r3, #1
 80080e2:	2300      	moveq	r3, #0
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d01c      	beq.n	8008124 <ADC_ConfigureBoostMode+0x80>
 80080ea:	f005 fbff 	bl	800d8ec <HAL_RCC_GetHCLKFreq>
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080f8:	d010      	beq.n	800811c <ADC_ConfigureBoostMode+0x78>
 80080fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080fe:	d873      	bhi.n	80081e8 <ADC_ConfigureBoostMode+0x144>
 8008100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008104:	d002      	beq.n	800810c <ADC_ConfigureBoostMode+0x68>
 8008106:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800810a:	d16d      	bne.n	80081e8 <ADC_ConfigureBoostMode+0x144>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	0c1b      	lsrs	r3, r3, #16
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	fbb2 f3f3 	udiv	r3, r2, r3
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	e068      	b.n	80081ee <ADC_ConfigureBoostMode+0x14a>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	089b      	lsrs	r3, r3, #2
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	e064      	b.n	80081ee <ADC_ConfigureBoostMode+0x14a>
 8008124:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008128:	f04f 0100 	mov.w	r1, #0
 800812c:	f006 fdda 	bl	800ece4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800813a:	d051      	beq.n	80081e0 <ADC_ConfigureBoostMode+0x13c>
 800813c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8008140:	d854      	bhi.n	80081ec <ADC_ConfigureBoostMode+0x148>
 8008142:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8008146:	d047      	beq.n	80081d8 <ADC_ConfigureBoostMode+0x134>
 8008148:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800814c:	d84e      	bhi.n	80081ec <ADC_ConfigureBoostMode+0x148>
 800814e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8008152:	d03d      	beq.n	80081d0 <ADC_ConfigureBoostMode+0x12c>
 8008154:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8008158:	d848      	bhi.n	80081ec <ADC_ConfigureBoostMode+0x148>
 800815a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800815e:	d033      	beq.n	80081c8 <ADC_ConfigureBoostMode+0x124>
 8008160:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008164:	d842      	bhi.n	80081ec <ADC_ConfigureBoostMode+0x148>
 8008166:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800816a:	d029      	beq.n	80081c0 <ADC_ConfigureBoostMode+0x11c>
 800816c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8008170:	d83c      	bhi.n	80081ec <ADC_ConfigureBoostMode+0x148>
 8008172:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008176:	d01a      	beq.n	80081ae <ADC_ConfigureBoostMode+0x10a>
 8008178:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800817c:	d836      	bhi.n	80081ec <ADC_ConfigureBoostMode+0x148>
 800817e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008182:	d014      	beq.n	80081ae <ADC_ConfigureBoostMode+0x10a>
 8008184:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008188:	d830      	bhi.n	80081ec <ADC_ConfigureBoostMode+0x148>
 800818a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800818e:	d00e      	beq.n	80081ae <ADC_ConfigureBoostMode+0x10a>
 8008190:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008194:	d82a      	bhi.n	80081ec <ADC_ConfigureBoostMode+0x148>
 8008196:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800819a:	d008      	beq.n	80081ae <ADC_ConfigureBoostMode+0x10a>
 800819c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80081a0:	d824      	bhi.n	80081ec <ADC_ConfigureBoostMode+0x148>
 80081a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081a6:	d002      	beq.n	80081ae <ADC_ConfigureBoostMode+0x10a>
 80081a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80081ac:	d11e      	bne.n	80081ec <ADC_ConfigureBoostMode+0x148>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	0c9b      	lsrs	r3, r3, #18
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	e016      	b.n	80081ee <ADC_ConfigureBoostMode+0x14a>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	091b      	lsrs	r3, r3, #4
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	e012      	b.n	80081ee <ADC_ConfigureBoostMode+0x14a>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	095b      	lsrs	r3, r3, #5
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	e00e      	b.n	80081ee <ADC_ConfigureBoostMode+0x14a>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	099b      	lsrs	r3, r3, #6
 80081d4:	60fb      	str	r3, [r7, #12]
 80081d6:	e00a      	b.n	80081ee <ADC_ConfigureBoostMode+0x14a>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	09db      	lsrs	r3, r3, #7
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	e006      	b.n	80081ee <ADC_ConfigureBoostMode+0x14a>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	0a1b      	lsrs	r3, r3, #8
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	e002      	b.n	80081ee <ADC_ConfigureBoostMode+0x14a>
 80081e8:	bf00      	nop
 80081ea:	e000      	b.n	80081ee <ADC_ConfigureBoostMode+0x14a>
 80081ec:	bf00      	nop
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	085b      	lsrs	r3, r3, #1
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008274 <ADC_ConfigureBoostMode+0x1d0>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d808      	bhi.n	800820e <ADC_ConfigureBoostMode+0x16a>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689a      	ldr	r2, [r3, #8]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800820a:	609a      	str	r2, [r3, #8]
 800820c:	e025      	b.n	800825a <ADC_ConfigureBoostMode+0x1b6>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4a19      	ldr	r2, [pc, #100]	@ (8008278 <ADC_ConfigureBoostMode+0x1d4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d80a      	bhi.n	800822c <ADC_ConfigureBoostMode+0x188>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008228:	609a      	str	r2, [r3, #8]
 800822a:	e016      	b.n	800825a <ADC_ConfigureBoostMode+0x1b6>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4a13      	ldr	r2, [pc, #76]	@ (800827c <ADC_ConfigureBoostMode+0x1d8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d80a      	bhi.n	800824a <ADC_ConfigureBoostMode+0x1a6>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008246:	609a      	str	r2, [r3, #8]
 8008248:	e007      	b.n	800825a <ADC_ConfigureBoostMode+0x1b6>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008258:	609a      	str	r2, [r3, #8]
 800825a:	bf00      	nop
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	40022000 	.word	0x40022000
 8008268:	40022100 	.word	0x40022100
 800826c:	40022300 	.word	0x40022300
 8008270:	58026300 	.word	0x58026300
 8008274:	005f5e10 	.word	0x005f5e10
 8008278:	00bebc20 	.word	0x00bebc20
 800827c:	017d7840 	.word	0x017d7840

08008280 <LL_ADC_IsEnabled>:
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b01      	cmp	r3, #1
 8008292:	d101      	bne.n	8008298 <LL_ADC_IsEnabled+0x18>
 8008294:	2301      	movs	r3, #1
 8008296:	e000      	b.n	800829a <LL_ADC_IsEnabled+0x1a>
 8008298:	2300      	movs	r3, #0
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <LL_ADC_REG_IsConversionOngoing>:
 80082a6:	b480      	push	{r7}
 80082a8:	b083      	sub	sp, #12
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f003 0304 	and.w	r3, r3, #4
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d101      	bne.n	80082be <LL_ADC_REG_IsConversionOngoing+0x18>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e000      	b.n	80082c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80082be:	2300      	movs	r3, #0
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_ADCEx_MultiModeConfigChannel>:
 80082cc:	b590      	push	{r4, r7, lr}
 80082ce:	b0a3      	sub	sp, #140	@ 0x8c
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
 80082d6:	2300      	movs	r3, #0
 80082d8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80082e6:	2302      	movs	r3, #2
 80082e8:	e0c1      	b.n	800846e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80082f2:	2300      	movs	r3, #0
 80082f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082f6:	2300      	movs	r3, #0
 80082f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a5e      	ldr	r2, [pc, #376]	@ (8008478 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d102      	bne.n	800830a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008304:	4b5d      	ldr	r3, [pc, #372]	@ (800847c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	e001      	b.n	800830e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10b      	bne.n	800832c <HAL_ADCEx_MultiModeConfigChannel+0x60>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008318:	f043 0220 	orr.w	r2, r3, #32
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	661a      	str	r2, [r3, #96]	@ 0x60
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8008328:	2301      	movs	r3, #1
 800832a:	e0a0      	b.n	800846e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff ffb9 	bl	80082a6 <LL_ADC_REG_IsConversionOngoing>
 8008334:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f7ff ffb2 	bl	80082a6 <LL_ADC_REG_IsConversionOngoing>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	f040 8081 	bne.w	800844c <HAL_ADCEx_MultiModeConfigChannel+0x180>
 800834a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800834e:	2b00      	cmp	r3, #0
 8008350:	d17c      	bne.n	800844c <HAL_ADCEx_MultiModeConfigChannel+0x180>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a48      	ldr	r2, [pc, #288]	@ (8008478 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d004      	beq.n	8008366 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a46      	ldr	r2, [pc, #280]	@ (800847c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d101      	bne.n	800836a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8008366:	4b46      	ldr	r3, [pc, #280]	@ (8008480 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008368:	e000      	b.n	800836c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800836a:	4b46      	ldr	r3, [pc, #280]	@ (8008484 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800836c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d039      	beq.n	80083ea <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 8008376:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	431a      	orrs	r2, r3
 8008384:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008386:	609a      	str	r2, [r3, #8]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a3a      	ldr	r2, [pc, #232]	@ (8008478 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d004      	beq.n	800839c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a39      	ldr	r2, [pc, #228]	@ (800847c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d10e      	bne.n	80083ba <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800839c:	4836      	ldr	r0, [pc, #216]	@ (8008478 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800839e:	f7ff ff6f 	bl	8008280 <LL_ADC_IsEnabled>
 80083a2:	4604      	mov	r4, r0
 80083a4:	4835      	ldr	r0, [pc, #212]	@ (800847c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80083a6:	f7ff ff6b 	bl	8008280 <LL_ADC_IsEnabled>
 80083aa:	4603      	mov	r3, r0
 80083ac:	4323      	orrs	r3, r4
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bf0c      	ite	eq
 80083b2:	2301      	moveq	r3, #1
 80083b4:	2300      	movne	r3, #0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	e008      	b.n	80083cc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80083ba:	4833      	ldr	r0, [pc, #204]	@ (8008488 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80083bc:	f7ff ff60 	bl	8008280 <LL_ADC_IsEnabled>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	bf0c      	ite	eq
 80083c6:	2301      	moveq	r3, #1
 80083c8:	2300      	movne	r3, #0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d047      	beq.n	8008460 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 80083d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	4b2d      	ldr	r3, [pc, #180]	@ (800848c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80083d6:	4013      	ands	r3, r2
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	6811      	ldr	r1, [r2, #0]
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	6892      	ldr	r2, [r2, #8]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	431a      	orrs	r2, r3
 80083e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083e6:	609a      	str	r2, [r3, #8]
 80083e8:	e03a      	b.n	8008460 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 80083ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80083f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083f4:	609a      	str	r2, [r3, #8]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a1f      	ldr	r2, [pc, #124]	@ (8008478 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d004      	beq.n	800840a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1d      	ldr	r2, [pc, #116]	@ (800847c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d10e      	bne.n	8008428 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800840a:	481b      	ldr	r0, [pc, #108]	@ (8008478 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800840c:	f7ff ff38 	bl	8008280 <LL_ADC_IsEnabled>
 8008410:	4604      	mov	r4, r0
 8008412:	481a      	ldr	r0, [pc, #104]	@ (800847c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008414:	f7ff ff34 	bl	8008280 <LL_ADC_IsEnabled>
 8008418:	4603      	mov	r3, r0
 800841a:	4323      	orrs	r3, r4
 800841c:	2b00      	cmp	r3, #0
 800841e:	bf0c      	ite	eq
 8008420:	2301      	moveq	r3, #1
 8008422:	2300      	movne	r3, #0
 8008424:	b2db      	uxtb	r3, r3
 8008426:	e008      	b.n	800843a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8008428:	4817      	ldr	r0, [pc, #92]	@ (8008488 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800842a:	f7ff ff29 	bl	8008280 <LL_ADC_IsEnabled>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	bf0c      	ite	eq
 8008434:	2301      	moveq	r3, #1
 8008436:	2300      	movne	r3, #0
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d010      	beq.n	8008460 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800843e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008440:	689a      	ldr	r2, [r3, #8]
 8008442:	4b12      	ldr	r3, [pc, #72]	@ (800848c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008444:	4013      	ands	r3, r2
 8008446:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008448:	6093      	str	r3, [r2, #8]
 800844a:	e009      	b.n	8008460 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008450:	f043 0220 	orr.w	r2, r3, #32
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	661a      	str	r2, [r3, #96]	@ 0x60
 8008458:	2301      	movs	r3, #1
 800845a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800845e:	e000      	b.n	8008462 <HAL_ADCEx_MultiModeConfigChannel+0x196>
 8008460:	bf00      	nop
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800846a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800846e:	4618      	mov	r0, r3
 8008470:	378c      	adds	r7, #140	@ 0x8c
 8008472:	46bd      	mov	sp, r7
 8008474:	bd90      	pop	{r4, r7, pc}
 8008476:	bf00      	nop
 8008478:	40022000 	.word	0x40022000
 800847c:	40022100 	.word	0x40022100
 8008480:	40022300 	.word	0x40022300
 8008484:	58026300 	.word	0x58026300
 8008488:	58026000 	.word	0x58026000
 800848c:	fffff0e0 	.word	0xfffff0e0

08008490 <__NVIC_SetPriorityGrouping>:
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f003 0307 	and.w	r3, r3, #7
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	4b0b      	ldr	r3, [pc, #44]	@ (80084d0 <__NVIC_SetPriorityGrouping+0x40>)
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	60bb      	str	r3, [r7, #8]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80084ac:	4013      	ands	r3, r2
 80084ae:	60bb      	str	r3, [r7, #8]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	021a      	lsls	r2, r3, #8
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	431a      	orrs	r2, r3
 80084b8:	4b06      	ldr	r3, [pc, #24]	@ (80084d4 <__NVIC_SetPriorityGrouping+0x44>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60bb      	str	r3, [r7, #8]
 80084be:	4a04      	ldr	r2, [pc, #16]	@ (80084d0 <__NVIC_SetPriorityGrouping+0x40>)
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	60d3      	str	r3, [r2, #12]
 80084c4:	bf00      	nop
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	e000ed00 	.word	0xe000ed00
 80084d4:	05fa0000 	.word	0x05fa0000

080084d8 <__NVIC_GetPriorityGrouping>:
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
 80084dc:	4b04      	ldr	r3, [pc, #16]	@ (80084f0 <__NVIC_GetPriorityGrouping+0x18>)
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	0a1b      	lsrs	r3, r3, #8
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	4618      	mov	r0, r3
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	e000ed00 	.word	0xe000ed00

080084f4 <__NVIC_EnableIRQ>:
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	80fb      	strh	r3, [r7, #6]
 80084fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008502:	2b00      	cmp	r3, #0
 8008504:	db0b      	blt.n	800851e <__NVIC_EnableIRQ+0x2a>
 8008506:	88fb      	ldrh	r3, [r7, #6]
 8008508:	f003 021f 	and.w	r2, r3, #31
 800850c:	4907      	ldr	r1, [pc, #28]	@ (800852c <__NVIC_EnableIRQ+0x38>)
 800850e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008512:	095b      	lsrs	r3, r3, #5
 8008514:	2001      	movs	r0, #1
 8008516:	fa00 f202 	lsl.w	r2, r0, r2
 800851a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	e000e100 	.word	0xe000e100

08008530 <__NVIC_SetPriority>:
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	6039      	str	r1, [r7, #0]
 800853a:	80fb      	strh	r3, [r7, #6]
 800853c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008540:	2b00      	cmp	r3, #0
 8008542:	db0a      	blt.n	800855a <__NVIC_SetPriority+0x2a>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	b2da      	uxtb	r2, r3
 8008548:	490c      	ldr	r1, [pc, #48]	@ (800857c <__NVIC_SetPriority+0x4c>)
 800854a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800854e:	0112      	lsls	r2, r2, #4
 8008550:	b2d2      	uxtb	r2, r2
 8008552:	440b      	add	r3, r1
 8008554:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8008558:	e00a      	b.n	8008570 <__NVIC_SetPriority+0x40>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	b2da      	uxtb	r2, r3
 800855e:	4908      	ldr	r1, [pc, #32]	@ (8008580 <__NVIC_SetPriority+0x50>)
 8008560:	88fb      	ldrh	r3, [r7, #6]
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	3b04      	subs	r3, #4
 8008568:	0112      	lsls	r2, r2, #4
 800856a:	b2d2      	uxtb	r2, r2
 800856c:	440b      	add	r3, r1
 800856e:	761a      	strb	r2, [r3, #24]
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	e000e100 	.word	0xe000e100
 8008580:	e000ed00 	.word	0xe000ed00

08008584 <NVIC_EncodePriority>:
 8008584:	b480      	push	{r7}
 8008586:	b089      	sub	sp, #36	@ 0x24
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	61fb      	str	r3, [r7, #28]
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f1c3 0307 	rsb	r3, r3, #7
 800859e:	2b04      	cmp	r3, #4
 80085a0:	bf28      	it	cs
 80085a2:	2304      	movcs	r3, #4
 80085a4:	61bb      	str	r3, [r7, #24]
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	3304      	adds	r3, #4
 80085aa:	2b06      	cmp	r3, #6
 80085ac:	d902      	bls.n	80085b4 <NVIC_EncodePriority+0x30>
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	3b03      	subs	r3, #3
 80085b2:	e000      	b.n	80085b6 <NVIC_EncodePriority+0x32>
 80085b4:	2300      	movs	r3, #0
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	f04f 32ff 	mov.w	r2, #4294967295
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	fa02 f303 	lsl.w	r3, r2, r3
 80085c2:	43da      	mvns	r2, r3
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	401a      	ands	r2, r3
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	409a      	lsls	r2, r3
 80085cc:	f04f 31ff 	mov.w	r1, #4294967295
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	fa01 f303 	lsl.w	r3, r1, r3
 80085d6:	43d9      	mvns	r1, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	400b      	ands	r3, r1
 80085dc:	4313      	orrs	r3, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	3724      	adds	r7, #36	@ 0x24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
	...

080085ec <SysTick_Config>:
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085fc:	d301      	bcc.n	8008602 <SysTick_Config+0x16>
 80085fe:	2301      	movs	r3, #1
 8008600:	e00f      	b.n	8008622 <SysTick_Config+0x36>
 8008602:	4a0a      	ldr	r2, [pc, #40]	@ (800862c <SysTick_Config+0x40>)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3b01      	subs	r3, #1
 8008608:	6053      	str	r3, [r2, #4]
 800860a:	210f      	movs	r1, #15
 800860c:	f04f 30ff 	mov.w	r0, #4294967295
 8008610:	f7ff ff8e 	bl	8008530 <__NVIC_SetPriority>
 8008614:	4b05      	ldr	r3, [pc, #20]	@ (800862c <SysTick_Config+0x40>)
 8008616:	2200      	movs	r2, #0
 8008618:	609a      	str	r2, [r3, #8]
 800861a:	4b04      	ldr	r3, [pc, #16]	@ (800862c <SysTick_Config+0x40>)
 800861c:	2207      	movs	r2, #7
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	2300      	movs	r3, #0
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	e000e010 	.word	0xe000e010

08008630 <HAL_NVIC_SetPriorityGrouping>:
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7ff ff29 	bl	8008490 <__NVIC_SetPriorityGrouping>
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_NVIC_SetPriority>:
 8008646:	b580      	push	{r7, lr}
 8008648:	b086      	sub	sp, #24
 800864a:	af00      	add	r7, sp, #0
 800864c:	4603      	mov	r3, r0
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	607a      	str	r2, [r7, #4]
 8008652:	81fb      	strh	r3, [r7, #14]
 8008654:	f7ff ff40 	bl	80084d8 <__NVIC_GetPriorityGrouping>
 8008658:	6178      	str	r0, [r7, #20]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	68b9      	ldr	r1, [r7, #8]
 800865e:	6978      	ldr	r0, [r7, #20]
 8008660:	f7ff ff90 	bl	8008584 <NVIC_EncodePriority>
 8008664:	4602      	mov	r2, r0
 8008666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800866a:	4611      	mov	r1, r2
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff ff5f 	bl	8008530 <__NVIC_SetPriority>
 8008672:	bf00      	nop
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <HAL_NVIC_EnableIRQ>:
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
 8008680:	4603      	mov	r3, r0
 8008682:	80fb      	strh	r3, [r7, #6]
 8008684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff ff33 	bl	80084f4 <__NVIC_EnableIRQ>
 800868e:	bf00      	nop
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <HAL_SYSTICK_Config>:
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff ffa4 	bl	80085ec <SysTick_Config>
 80086a4:	4603      	mov	r3, r0
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
	...

080086b0 <HAL_MPU_Disable>:
 80086b0:	b480      	push	{r7}
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	f3bf 8f5f 	dmb	sy
 80086b8:	bf00      	nop
 80086ba:	4b07      	ldr	r3, [pc, #28]	@ (80086d8 <HAL_MPU_Disable+0x28>)
 80086bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086be:	4a06      	ldr	r2, [pc, #24]	@ (80086d8 <HAL_MPU_Disable+0x28>)
 80086c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086c4:	6253      	str	r3, [r2, #36]	@ 0x24
 80086c6:	4b05      	ldr	r3, [pc, #20]	@ (80086dc <HAL_MPU_Disable+0x2c>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	605a      	str	r2, [r3, #4]
 80086cc:	bf00      	nop
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	e000ed00 	.word	0xe000ed00
 80086dc:	e000ed90 	.word	0xe000ed90

080086e0 <HAL_MPU_Enable>:
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	4a0b      	ldr	r2, [pc, #44]	@ (8008718 <HAL_MPU_Enable+0x38>)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f043 0301 	orr.w	r3, r3, #1
 80086f0:	6053      	str	r3, [r2, #4]
 80086f2:	4b0a      	ldr	r3, [pc, #40]	@ (800871c <HAL_MPU_Enable+0x3c>)
 80086f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f6:	4a09      	ldr	r2, [pc, #36]	@ (800871c <HAL_MPU_Enable+0x3c>)
 80086f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086fc:	6253      	str	r3, [r2, #36]	@ 0x24
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	bf00      	nop
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	e000ed90 	.word	0xe000ed90
 800871c:	e000ed00 	.word	0xe000ed00

08008720 <HAL_MPU_ConfigRegion>:
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	785a      	ldrb	r2, [r3, #1]
 800872c:	4b1b      	ldr	r3, [pc, #108]	@ (800879c <HAL_MPU_ConfigRegion+0x7c>)
 800872e:	609a      	str	r2, [r3, #8]
 8008730:	4b1a      	ldr	r3, [pc, #104]	@ (800879c <HAL_MPU_ConfigRegion+0x7c>)
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	4a19      	ldr	r2, [pc, #100]	@ (800879c <HAL_MPU_ConfigRegion+0x7c>)
 8008736:	f023 0301 	bic.w	r3, r3, #1
 800873a:	6113      	str	r3, [r2, #16]
 800873c:	4a17      	ldr	r2, [pc, #92]	@ (800879c <HAL_MPU_ConfigRegion+0x7c>)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	60d3      	str	r3, [r2, #12]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7b1b      	ldrb	r3, [r3, #12]
 8008748:	071a      	lsls	r2, r3, #28
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	7adb      	ldrb	r3, [r3, #11]
 800874e:	061b      	lsls	r3, r3, #24
 8008750:	431a      	orrs	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	7a9b      	ldrb	r3, [r3, #10]
 8008756:	04db      	lsls	r3, r3, #19
 8008758:	431a      	orrs	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	7b5b      	ldrb	r3, [r3, #13]
 800875e:	049b      	lsls	r3, r3, #18
 8008760:	431a      	orrs	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	7b9b      	ldrb	r3, [r3, #14]
 8008766:	045b      	lsls	r3, r3, #17
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	7bdb      	ldrb	r3, [r3, #15]
 800876e:	041b      	lsls	r3, r3, #16
 8008770:	431a      	orrs	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	7a5b      	ldrb	r3, [r3, #9]
 8008776:	021b      	lsls	r3, r3, #8
 8008778:	431a      	orrs	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	7a1b      	ldrb	r3, [r3, #8]
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	4313      	orrs	r3, r2
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	7812      	ldrb	r2, [r2, #0]
 8008786:	4611      	mov	r1, r2
 8008788:	4a04      	ldr	r2, [pc, #16]	@ (800879c <HAL_MPU_ConfigRegion+0x7c>)
 800878a:	430b      	orrs	r3, r1
 800878c:	6113      	str	r3, [r2, #16]
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	e000ed90 	.word	0xe000ed90

080087a0 <HAL_DAC_Init>:
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <HAL_DAC_Init+0x12>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e014      	b.n	80087dc <HAL_DAC_Init+0x3c>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	791b      	ldrb	r3, [r3, #4]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d105      	bne.n	80087c8 <HAL_DAC_Init+0x28>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	715a      	strb	r2, [r3, #5]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7f9 fe00 	bl	80023c8 <HAL_DAC_MspInit>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2202      	movs	r2, #2
 80087cc:	711a      	strb	r2, [r3, #4]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	611a      	str	r2, [r3, #16]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	711a      	strb	r2, [r3, #4]
 80087da:	2300      	movs	r3, #0
 80087dc:	4618      	mov	r0, r3
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <HAL_DAC_Start_DMA>:
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	603b      	str	r3, [r7, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <HAL_DAC_Start_DMA+0x18>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e0a2      	b.n	8008942 <HAL_DAC_Start_DMA+0x15e>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	795b      	ldrb	r3, [r3, #5]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <HAL_DAC_Start_DMA+0x24>
 8008804:	2302      	movs	r3, #2
 8008806:	e09c      	b.n	8008942 <HAL_DAC_Start_DMA+0x15e>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2201      	movs	r2, #1
 800880c:	715a      	strb	r2, [r3, #5]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2202      	movs	r2, #2
 8008812:	711a      	strb	r2, [r3, #4]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d129      	bne.n	800886e <HAL_DAC_Start_DMA+0x8a>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	4a4b      	ldr	r2, [pc, #300]	@ (800894c <HAL_DAC_Start_DMA+0x168>)
 8008820:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	4a4a      	ldr	r2, [pc, #296]	@ (8008950 <HAL_DAC_Start_DMA+0x16c>)
 8008828:	641a      	str	r2, [r3, #64]	@ 0x40
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	4a49      	ldr	r2, [pc, #292]	@ (8008954 <HAL_DAC_Start_DMA+0x170>)
 8008830:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d003      	beq.n	8008850 <HAL_DAC_Start_DMA+0x6c>
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	2b04      	cmp	r3, #4
 800884c:	d005      	beq.n	800885a <HAL_DAC_Start_DMA+0x76>
 800884e:	e009      	b.n	8008864 <HAL_DAC_Start_DMA+0x80>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3308      	adds	r3, #8
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	e033      	b.n	80088c2 <HAL_DAC_Start_DMA+0xde>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	330c      	adds	r3, #12
 8008860:	613b      	str	r3, [r7, #16]
 8008862:	e02e      	b.n	80088c2 <HAL_DAC_Start_DMA+0xde>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3310      	adds	r3, #16
 800886a:	613b      	str	r3, [r7, #16]
 800886c:	e029      	b.n	80088c2 <HAL_DAC_Start_DMA+0xde>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	4a39      	ldr	r2, [pc, #228]	@ (8008958 <HAL_DAC_Start_DMA+0x174>)
 8008874:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	4a38      	ldr	r2, [pc, #224]	@ (800895c <HAL_DAC_Start_DMA+0x178>)
 800887c:	641a      	str	r2, [r3, #64]	@ 0x40
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	4a37      	ldr	r2, [pc, #220]	@ (8008960 <HAL_DAC_Start_DMA+0x17c>)
 8008884:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <HAL_DAC_Start_DMA+0xc0>
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	2b04      	cmp	r3, #4
 80088a0:	d005      	beq.n	80088ae <HAL_DAC_Start_DMA+0xca>
 80088a2:	e009      	b.n	80088b8 <HAL_DAC_Start_DMA+0xd4>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3314      	adds	r3, #20
 80088aa:	613b      	str	r3, [r7, #16]
 80088ac:	e009      	b.n	80088c2 <HAL_DAC_Start_DMA+0xde>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3318      	adds	r3, #24
 80088b4:	613b      	str	r3, [r7, #16]
 80088b6:	e004      	b.n	80088c2 <HAL_DAC_Start_DMA+0xde>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	331c      	adds	r3, #28
 80088be:	613b      	str	r3, [r7, #16]
 80088c0:	bf00      	nop
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d111      	bne.n	80088ec <HAL_DAC_Start_DMA+0x108>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6898      	ldr	r0, [r3, #8]
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	f000 fd6d 	bl	80093c0 <HAL_DMA_Start_IT>
 80088e6:	4603      	mov	r3, r0
 80088e8:	75fb      	strb	r3, [r7, #23]
 80088ea:	e010      	b.n	800890e <HAL_DAC_Start_DMA+0x12a>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	68d8      	ldr	r0, [r3, #12]
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	f000 fd5b 	bl	80093c0 <HAL_DMA_Start_IT>
 800890a:	4603      	mov	r3, r0
 800890c:	75fb      	strb	r3, [r7, #23]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	715a      	strb	r2, [r3, #5]
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10c      	bne.n	8008934 <HAL_DAC_Start_DMA+0x150>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6819      	ldr	r1, [r3, #0]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	f003 0310 	and.w	r3, r3, #16
 8008926:	2201      	movs	r2, #1
 8008928:	409a      	lsls	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	e005      	b.n	8008940 <HAL_DAC_Start_DMA+0x15c>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	f043 0204 	orr.w	r2, r3, #4
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	611a      	str	r2, [r3, #16]
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	08008bfd 	.word	0x08008bfd
 8008950:	08008c1f 	.word	0x08008c1f
 8008954:	08008c3b 	.word	0x08008c3b
 8008958:	08008ca5 	.word	0x08008ca5
 800895c:	08008cc7 	.word	0x08008cc7
 8008960:	08008ce3 	.word	0x08008ce3

08008964 <HAL_DAC_ErrorCallbackCh1>:
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_DAC_ConfigChannel>:
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	@ 0x28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	2300      	movs	r3, #0
 8008986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <HAL_DAC_ConfigChannel+0x1e>
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <HAL_DAC_ConfigChannel+0x22>
 8008996:	2301      	movs	r3, #1
 8008998:	e12a      	b.n	8008bf0 <HAL_DAC_ConfigChannel+0x278>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	795b      	ldrb	r3, [r3, #5]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d101      	bne.n	80089a6 <HAL_DAC_ConfigChannel+0x2e>
 80089a2:	2302      	movs	r3, #2
 80089a4:	e124      	b.n	8008bf0 <HAL_DAC_ConfigChannel+0x278>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	715a      	strb	r2, [r3, #5]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2202      	movs	r2, #2
 80089b0:	711a      	strb	r2, [r3, #4]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	d17a      	bne.n	8008ab0 <HAL_DAC_ConfigChannel+0x138>
 80089ba:	f7fe f9c5 	bl	8006d48 <HAL_GetTick>
 80089be:	61f8      	str	r0, [r7, #28]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d13d      	bne.n	8008a42 <HAL_DAC_ConfigChannel+0xca>
 80089c6:	e018      	b.n	80089fa <HAL_DAC_ConfigChannel+0x82>
 80089c8:	f7fe f9be 	bl	8006d48 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d911      	bls.n	80089fa <HAL_DAC_ConfigChannel+0x82>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089dc:	4b86      	ldr	r3, [pc, #536]	@ (8008bf8 <HAL_DAC_ConfigChannel+0x280>)
 80089de:	4013      	ands	r3, r2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00a      	beq.n	80089fa <HAL_DAC_ConfigChannel+0x82>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	f043 0208 	orr.w	r2, r3, #8
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	611a      	str	r2, [r3, #16]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2203      	movs	r2, #3
 80089f4:	711a      	strb	r2, [r3, #4]
 80089f6:	2303      	movs	r3, #3
 80089f8:	e0fa      	b.n	8008bf0 <HAL_DAC_ConfigChannel+0x278>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a00:	4b7d      	ldr	r3, [pc, #500]	@ (8008bf8 <HAL_DAC_ConfigChannel+0x280>)
 8008a02:	4013      	ands	r3, r2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1df      	bne.n	80089c8 <HAL_DAC_ConfigChannel+0x50>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	6992      	ldr	r2, [r2, #24]
 8008a10:	641a      	str	r2, [r3, #64]	@ 0x40
 8008a12:	e020      	b.n	8008a56 <HAL_DAC_ConfigChannel+0xde>
 8008a14:	f7fe f998 	bl	8006d48 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d90f      	bls.n	8008a42 <HAL_DAC_ConfigChannel+0xca>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	da0a      	bge.n	8008a42 <HAL_DAC_ConfigChannel+0xca>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	f043 0208 	orr.w	r2, r3, #8
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	611a      	str	r2, [r3, #16]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2203      	movs	r2, #3
 8008a3c:	711a      	strb	r2, [r3, #4]
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e0d6      	b.n	8008bf0 <HAL_DAC_ConfigChannel+0x278>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	dbe3      	blt.n	8008a14 <HAL_DAC_ConfigChannel+0x9c>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	6992      	ldr	r2, [r2, #24]
 8008a54:	645a      	str	r2, [r3, #68]	@ 0x44
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f003 0310 	and.w	r3, r3, #16
 8008a62:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8008a66:	fa01 f303 	lsl.w	r3, r1, r3
 8008a6a:	43db      	mvns	r3, r3
 8008a6c:	ea02 0103 	and.w	r1, r2, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	69da      	ldr	r2, [r3, #28]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f003 0310 	and.w	r3, r3, #16
 8008a7a:	409a      	lsls	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	649a      	str	r2, [r3, #72]	@ 0x48
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f003 0310 	and.w	r3, r3, #16
 8008a90:	21ff      	movs	r1, #255	@ 0xff
 8008a92:	fa01 f303 	lsl.w	r3, r1, r3
 8008a96:	43db      	mvns	r3, r3
 8008a98:	ea02 0103 	and.w	r1, r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	6a1a      	ldr	r2, [r3, #32]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	409a      	lsls	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d11d      	bne.n	8008af4 <HAL_DAC_ConfigChannel+0x17c>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008abe:	61bb      	str	r3, [r7, #24]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f003 0310 	and.w	r3, r3, #16
 8008ac6:	221f      	movs	r2, #31
 8008ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8008acc:	43db      	mvns	r3, r3
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	61bb      	str	r3, [r7, #24]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	617b      	str	r3, [r7, #20]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f003 0310 	and.w	r3, r3, #16
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae6:	69ba      	ldr	r2, [r7, #24]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	61bb      	str	r3, [r7, #24]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	639a      	str	r2, [r3, #56]	@ 0x38
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008afa:	61bb      	str	r3, [r7, #24]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f003 0310 	and.w	r3, r3, #16
 8008b02:	2207      	movs	r2, #7
 8008b04:	fa02 f303 	lsl.w	r3, r2, r3
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	61bb      	str	r3, [r7, #24]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d102      	bne.n	8008b1e <HAL_DAC_ConfigChannel+0x1a6>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b1c:	e00f      	b.n	8008b3e <HAL_DAC_ConfigChannel+0x1c6>
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d102      	bne.n	8008b2c <HAL_DAC_ConfigChannel+0x1b4>
 8008b26:	2301      	movs	r3, #1
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b2a:	e008      	b.n	8008b3e <HAL_DAC_ConfigChannel+0x1c6>
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d102      	bne.n	8008b3a <HAL_DAC_ConfigChannel+0x1c2>
 8008b34:	2301      	movs	r3, #1
 8008b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b38:	e001      	b.n	8008b3e <HAL_DAC_ConfigChannel+0x1c6>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	617b      	str	r3, [r7, #20]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f003 0310 	and.w	r3, r3, #16
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	61bb      	str	r3, [r7, #24]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6819      	ldr	r1, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f003 0310 	and.w	r3, r3, #16
 8008b74:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008b78:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7c:	43da      	mvns	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	400a      	ands	r2, r1
 8008b84:	601a      	str	r2, [r3, #0]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	61bb      	str	r3, [r7, #24]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f003 0310 	and.w	r3, r3, #16
 8008b94:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8008b98:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9c:	43db      	mvns	r3, r3
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	61bb      	str	r3, [r7, #24]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	617b      	str	r3, [r7, #20]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f003 0310 	and.w	r3, r3, #16
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	61bb      	str	r3, [r7, #24]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6819      	ldr	r1, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f003 0310 	and.w	r3, r3, #16
 8008bd0:	22c0      	movs	r2, #192	@ 0xc0
 8008bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd6:	43da      	mvns	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	400a      	ands	r2, r1
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2201      	movs	r2, #1
 8008be4:	711a      	strb	r2, [r3, #4]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	715a      	strb	r2, [r3, #5]
 8008bec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3728      	adds	r7, #40	@ 0x28
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	20008000 	.word	0x20008000

08008bfc <DAC_DMAConvCpltCh1>:
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c08:	60fb      	str	r3, [r7, #12]
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f7f8 fb1a 	bl	8001244 <HAL_DAC_ConvCpltCallbackCh1>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	711a      	strb	r2, [r3, #4]
 8008c16:	bf00      	nop
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <DAC_DMAHalfConvCpltCh1>:
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f7f8 fafb 	bl	8001228 <HAL_DAC_ConvHalfCpltCallbackCh1>
 8008c32:	bf00      	nop
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <DAC_DMAErrorCh1>:
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f043 0204 	orr.w	r2, r3, #4
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	611a      	str	r2, [r3, #16]
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f7ff fe85 	bl	8008964 <HAL_DAC_ErrorCallbackCh1>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	711a      	strb	r2, [r3, #4]
 8008c60:	bf00      	nop
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_DACEx_ConvCpltCallbackCh2>:
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_DACEx_ErrorCallbackCh2>:
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <DAC_DMAConvCpltCh2>:
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7ff ffd8 	bl	8008c68 <HAL_DACEx_ConvCpltCallbackCh2>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	711a      	strb	r2, [r3, #4]
 8008cbe:	bf00      	nop
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <DAC_DMAHalfConvCpltCh2>:
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b084      	sub	sp, #16
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f7ff ffd1 	bl	8008c7c <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8008cda:	bf00      	nop
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <DAC_DMAErrorCh2>:
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	f043 0204 	orr.w	r2, r3, #4
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	611a      	str	r2, [r3, #16]
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f7ff ffc7 	bl	8008c90 <HAL_DACEx_ErrorCallbackCh2>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2201      	movs	r2, #1
 8008d06:	711a      	strb	r2, [r3, #4]
 8008d08:	bf00      	nop
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_DMA_Init>:
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	f7fe f816 	bl	8006d48 <HAL_GetTick>
 8008d1c:	6138      	str	r0, [r7, #16]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <HAL_DMA_Init+0x18>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e312      	b.n	800934e <HAL_DMA_Init+0x63e>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a66      	ldr	r2, [pc, #408]	@ (8008ec8 <HAL_DMA_Init+0x1b8>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d04a      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a65      	ldr	r2, [pc, #404]	@ (8008ecc <HAL_DMA_Init+0x1bc>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d045      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a63      	ldr	r2, [pc, #396]	@ (8008ed0 <HAL_DMA_Init+0x1c0>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d040      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a62      	ldr	r2, [pc, #392]	@ (8008ed4 <HAL_DMA_Init+0x1c4>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d03b      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a60      	ldr	r2, [pc, #384]	@ (8008ed8 <HAL_DMA_Init+0x1c8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d036      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a5f      	ldr	r2, [pc, #380]	@ (8008edc <HAL_DMA_Init+0x1cc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d031      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a5d      	ldr	r2, [pc, #372]	@ (8008ee0 <HAL_DMA_Init+0x1d0>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d02c      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a5c      	ldr	r2, [pc, #368]	@ (8008ee4 <HAL_DMA_Init+0x1d4>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d027      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8008ee8 <HAL_DMA_Init+0x1d8>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d022      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a59      	ldr	r2, [pc, #356]	@ (8008eec <HAL_DMA_Init+0x1dc>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d01d      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a57      	ldr	r2, [pc, #348]	@ (8008ef0 <HAL_DMA_Init+0x1e0>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d018      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a56      	ldr	r2, [pc, #344]	@ (8008ef4 <HAL_DMA_Init+0x1e4>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d013      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a54      	ldr	r2, [pc, #336]	@ (8008ef8 <HAL_DMA_Init+0x1e8>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d00e      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a53      	ldr	r2, [pc, #332]	@ (8008efc <HAL_DMA_Init+0x1ec>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d009      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a51      	ldr	r2, [pc, #324]	@ (8008f00 <HAL_DMA_Init+0x1f0>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d004      	beq.n	8008dc8 <HAL_DMA_Init+0xb8>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a50      	ldr	r2, [pc, #320]	@ (8008f04 <HAL_DMA_Init+0x1f4>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d101      	bne.n	8008dcc <HAL_DMA_Init+0xbc>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e000      	b.n	8008dce <HAL_DMA_Init+0xbe>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 813c 	beq.w	800904c <HAL_DMA_Init+0x33c>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a37      	ldr	r2, [pc, #220]	@ (8008ec8 <HAL_DMA_Init+0x1b8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d04a      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a36      	ldr	r2, [pc, #216]	@ (8008ecc <HAL_DMA_Init+0x1bc>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d045      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a34      	ldr	r2, [pc, #208]	@ (8008ed0 <HAL_DMA_Init+0x1c0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d040      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a33      	ldr	r2, [pc, #204]	@ (8008ed4 <HAL_DMA_Init+0x1c4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d03b      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a31      	ldr	r2, [pc, #196]	@ (8008ed8 <HAL_DMA_Init+0x1c8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d036      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a30      	ldr	r2, [pc, #192]	@ (8008edc <HAL_DMA_Init+0x1cc>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d031      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a2e      	ldr	r2, [pc, #184]	@ (8008ee0 <HAL_DMA_Init+0x1d0>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d02c      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a2d      	ldr	r2, [pc, #180]	@ (8008ee4 <HAL_DMA_Init+0x1d4>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d027      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a2b      	ldr	r2, [pc, #172]	@ (8008ee8 <HAL_DMA_Init+0x1d8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d022      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a2a      	ldr	r2, [pc, #168]	@ (8008eec <HAL_DMA_Init+0x1dc>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d01d      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a28      	ldr	r2, [pc, #160]	@ (8008ef0 <HAL_DMA_Init+0x1e0>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d018      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a27      	ldr	r2, [pc, #156]	@ (8008ef4 <HAL_DMA_Init+0x1e4>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d013      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a25      	ldr	r2, [pc, #148]	@ (8008ef8 <HAL_DMA_Init+0x1e8>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d00e      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a24      	ldr	r2, [pc, #144]	@ (8008efc <HAL_DMA_Init+0x1ec>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d009      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a22      	ldr	r2, [pc, #136]	@ (8008f00 <HAL_DMA_Init+0x1f0>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d004      	beq.n	8008e84 <HAL_DMA_Init+0x174>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a21      	ldr	r2, [pc, #132]	@ (8008f04 <HAL_DMA_Init+0x1f4>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d108      	bne.n	8008e96 <HAL_DMA_Init+0x186>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f022 0201 	bic.w	r2, r2, #1
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	e007      	b.n	8008ea6 <HAL_DMA_Init+0x196>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f022 0201 	bic.w	r2, r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	e02f      	b.n	8008f08 <HAL_DMA_Init+0x1f8>
 8008ea8:	f7fd ff4e 	bl	8006d48 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b05      	cmp	r3, #5
 8008eb4:	d928      	bls.n	8008f08 <HAL_DMA_Init+0x1f8>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	655a      	str	r2, [r3, #84]	@ 0x54
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e242      	b.n	800934e <HAL_DMA_Init+0x63e>
 8008ec8:	40020010 	.word	0x40020010
 8008ecc:	40020028 	.word	0x40020028
 8008ed0:	40020040 	.word	0x40020040
 8008ed4:	40020058 	.word	0x40020058
 8008ed8:	40020070 	.word	0x40020070
 8008edc:	40020088 	.word	0x40020088
 8008ee0:	400200a0 	.word	0x400200a0
 8008ee4:	400200b8 	.word	0x400200b8
 8008ee8:	40020410 	.word	0x40020410
 8008eec:	40020428 	.word	0x40020428
 8008ef0:	40020440 	.word	0x40020440
 8008ef4:	40020458 	.word	0x40020458
 8008ef8:	40020470 	.word	0x40020470
 8008efc:	40020488 	.word	0x40020488
 8008f00:	400204a0 	.word	0x400204a0
 8008f04:	400204b8 	.word	0x400204b8
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1c8      	bne.n	8008ea8 <HAL_DMA_Init+0x198>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	617b      	str	r3, [r7, #20]
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4b83      	ldr	r3, [pc, #524]	@ (8009130 <HAL_DMA_Init+0x420>)
 8008f22:	4013      	ands	r3, r2
 8008f24:	617b      	str	r3, [r7, #20]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689a      	ldr	r2, [r3, #8]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	431a      	orrs	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a1b      	ldr	r3, [r3, #32]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	617b      	str	r3, [r7, #20]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	d107      	bne.n	8008f6c <HAL_DMA_Init+0x25c>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f64:	4313      	orrs	r3, r2
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	2b28      	cmp	r3, #40	@ 0x28
 8008f72:	d903      	bls.n	8008f7c <HAL_DMA_Init+0x26c>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f7a:	d91f      	bls.n	8008fbc <HAL_DMA_Init+0x2ac>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f82:	d903      	bls.n	8008f8c <HAL_DMA_Init+0x27c>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	2b42      	cmp	r3, #66	@ 0x42
 8008f8a:	d917      	bls.n	8008fbc <HAL_DMA_Init+0x2ac>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	2b46      	cmp	r3, #70	@ 0x46
 8008f92:	d903      	bls.n	8008f9c <HAL_DMA_Init+0x28c>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	2b48      	cmp	r3, #72	@ 0x48
 8008f9a:	d90f      	bls.n	8008fbc <HAL_DMA_Init+0x2ac>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	2b4e      	cmp	r3, #78	@ 0x4e
 8008fa2:	d903      	bls.n	8008fac <HAL_DMA_Init+0x29c>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2b52      	cmp	r3, #82	@ 0x52
 8008faa:	d907      	bls.n	8008fbc <HAL_DMA_Init+0x2ac>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	2b73      	cmp	r3, #115	@ 0x73
 8008fb2:	d905      	bls.n	8008fc0 <HAL_DMA_Init+0x2b0>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	2b77      	cmp	r3, #119	@ 0x77
 8008fba:	d801      	bhi.n	8008fc0 <HAL_DMA_Init+0x2b0>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e000      	b.n	8008fc2 <HAL_DMA_Init+0x2b2>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <HAL_DMA_Init+0x2be>
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f023 0307 	bic.w	r3, r3, #7
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d117      	bne.n	8009028 <HAL_DMA_Init+0x318>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	617b      	str	r3, [r7, #20]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00e      	beq.n	8009028 <HAL_DMA_Init+0x318>
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 fdca 	bl	800aba4 <DMA_CheckFifoParam>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d008      	beq.n	8009028 <HAL_DMA_Init+0x318>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2240      	movs	r2, #64	@ 0x40
 800901a:	655a      	str	r2, [r3, #84]	@ 0x54
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8009024:	2301      	movs	r3, #1
 8009026:	e192      	b.n	800934e <HAL_DMA_Init+0x63e>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	615a      	str	r2, [r3, #20]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 fd05 	bl	800aa40 <DMA_CalcBaseAndBitshift>
 8009036:	4603      	mov	r3, r0
 8009038:	60bb      	str	r3, [r7, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800903e:	f003 031f 	and.w	r3, r3, #31
 8009042:	223f      	movs	r2, #63	@ 0x3f
 8009044:	409a      	lsls	r2, r3
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	609a      	str	r2, [r3, #8]
 800904a:	e0c8      	b.n	80091de <HAL_DMA_Init+0x4ce>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a38      	ldr	r2, [pc, #224]	@ (8009134 <HAL_DMA_Init+0x424>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d022      	beq.n	800909c <HAL_DMA_Init+0x38c>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a37      	ldr	r2, [pc, #220]	@ (8009138 <HAL_DMA_Init+0x428>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d01d      	beq.n	800909c <HAL_DMA_Init+0x38c>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a35      	ldr	r2, [pc, #212]	@ (800913c <HAL_DMA_Init+0x42c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d018      	beq.n	800909c <HAL_DMA_Init+0x38c>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a34      	ldr	r2, [pc, #208]	@ (8009140 <HAL_DMA_Init+0x430>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d013      	beq.n	800909c <HAL_DMA_Init+0x38c>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a32      	ldr	r2, [pc, #200]	@ (8009144 <HAL_DMA_Init+0x434>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d00e      	beq.n	800909c <HAL_DMA_Init+0x38c>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a31      	ldr	r2, [pc, #196]	@ (8009148 <HAL_DMA_Init+0x438>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d009      	beq.n	800909c <HAL_DMA_Init+0x38c>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a2f      	ldr	r2, [pc, #188]	@ (800914c <HAL_DMA_Init+0x43c>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d004      	beq.n	800909c <HAL_DMA_Init+0x38c>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a2e      	ldr	r2, [pc, #184]	@ (8009150 <HAL_DMA_Init+0x440>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d101      	bne.n	80090a0 <HAL_DMA_Init+0x390>
 800909c:	2301      	movs	r3, #1
 800909e:	e000      	b.n	80090a2 <HAL_DMA_Init+0x392>
 80090a0:	2300      	movs	r3, #0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 8092 	beq.w	80091cc <HAL_DMA_Init+0x4bc>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a21      	ldr	r2, [pc, #132]	@ (8009134 <HAL_DMA_Init+0x424>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d021      	beq.n	80090f6 <HAL_DMA_Init+0x3e6>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a20      	ldr	r2, [pc, #128]	@ (8009138 <HAL_DMA_Init+0x428>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d01c      	beq.n	80090f6 <HAL_DMA_Init+0x3e6>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a1e      	ldr	r2, [pc, #120]	@ (800913c <HAL_DMA_Init+0x42c>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d017      	beq.n	80090f6 <HAL_DMA_Init+0x3e6>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009140 <HAL_DMA_Init+0x430>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d012      	beq.n	80090f6 <HAL_DMA_Init+0x3e6>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009144 <HAL_DMA_Init+0x434>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d00d      	beq.n	80090f6 <HAL_DMA_Init+0x3e6>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a1a      	ldr	r2, [pc, #104]	@ (8009148 <HAL_DMA_Init+0x438>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d008      	beq.n	80090f6 <HAL_DMA_Init+0x3e6>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a18      	ldr	r2, [pc, #96]	@ (800914c <HAL_DMA_Init+0x43c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d003      	beq.n	80090f6 <HAL_DMA_Init+0x3e6>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a17      	ldr	r2, [pc, #92]	@ (8009150 <HAL_DMA_Init+0x440>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2202      	movs	r2, #2
 80090fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	617b      	str	r3, [r7, #20]
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	4b10      	ldr	r3, [pc, #64]	@ (8009154 <HAL_DMA_Init+0x444>)
 8009112:	4013      	ands	r3, r2
 8009114:	617b      	str	r3, [r7, #20]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	2b40      	cmp	r3, #64	@ 0x40
 800911c:	d01c      	beq.n	8009158 <HAL_DMA_Init+0x448>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	2b80      	cmp	r3, #128	@ 0x80
 8009124:	d102      	bne.n	800912c <HAL_DMA_Init+0x41c>
 8009126:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800912a:	e016      	b.n	800915a <HAL_DMA_Init+0x44a>
 800912c:	2300      	movs	r3, #0
 800912e:	e014      	b.n	800915a <HAL_DMA_Init+0x44a>
 8009130:	fe10803f 	.word	0xfe10803f
 8009134:	58025408 	.word	0x58025408
 8009138:	5802541c 	.word	0x5802541c
 800913c:	58025430 	.word	0x58025430
 8009140:	58025444 	.word	0x58025444
 8009144:	58025458 	.word	0x58025458
 8009148:	5802546c 	.word	0x5802546c
 800914c:	58025480 	.word	0x58025480
 8009150:	58025494 	.word	0x58025494
 8009154:	fffe000f 	.word	0xfffe000f
 8009158:	2310      	movs	r3, #16
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	68d2      	ldr	r2, [r2, #12]
 800915e:	08d2      	lsrs	r2, r2, #3
 8009160:	431a      	orrs	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	08db      	lsrs	r3, r3, #3
 8009168:	431a      	orrs	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	08db      	lsrs	r3, r3, #3
 8009170:	431a      	orrs	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	08db      	lsrs	r3, r3, #3
 8009178:	431a      	orrs	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	08db      	lsrs	r3, r3, #3
 8009180:	431a      	orrs	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	091b      	lsrs	r3, r3, #4
 8009188:	4313      	orrs	r3, r2
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	4313      	orrs	r3, r2
 800918e:	617b      	str	r3, [r7, #20]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	461a      	mov	r2, r3
 800919e:	4b6e      	ldr	r3, [pc, #440]	@ (8009358 <HAL_DMA_Init+0x648>)
 80091a0:	4413      	add	r3, r2
 80091a2:	4a6e      	ldr	r2, [pc, #440]	@ (800935c <HAL_DMA_Init+0x64c>)
 80091a4:	fba2 2303 	umull	r2, r3, r2, r3
 80091a8:	091b      	lsrs	r3, r3, #4
 80091aa:	009a      	lsls	r2, r3, #2
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f001 fc45 	bl	800aa40 <DMA_CalcBaseAndBitshift>
 80091b6:	4603      	mov	r3, r0
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091be:	f003 031f 	and.w	r3, r3, #31
 80091c2:	2201      	movs	r2, #1
 80091c4:	409a      	lsls	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	605a      	str	r2, [r3, #4]
 80091ca:	e008      	b.n	80091de <HAL_DMA_Init+0x4ce>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2240      	movs	r2, #64	@ 0x40
 80091d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2203      	movs	r2, #3
 80091d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80091da:	2301      	movs	r3, #1
 80091dc:	e0b7      	b.n	800934e <HAL_DMA_Init+0x63e>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a5f      	ldr	r2, [pc, #380]	@ (8009360 <HAL_DMA_Init+0x650>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d072      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a5d      	ldr	r2, [pc, #372]	@ (8009364 <HAL_DMA_Init+0x654>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d06d      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a5c      	ldr	r2, [pc, #368]	@ (8009368 <HAL_DMA_Init+0x658>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d068      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a5a      	ldr	r2, [pc, #360]	@ (800936c <HAL_DMA_Init+0x65c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d063      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a59      	ldr	r2, [pc, #356]	@ (8009370 <HAL_DMA_Init+0x660>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d05e      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a57      	ldr	r2, [pc, #348]	@ (8009374 <HAL_DMA_Init+0x664>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d059      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a56      	ldr	r2, [pc, #344]	@ (8009378 <HAL_DMA_Init+0x668>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d054      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a54      	ldr	r2, [pc, #336]	@ (800937c <HAL_DMA_Init+0x66c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d04f      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a53      	ldr	r2, [pc, #332]	@ (8009380 <HAL_DMA_Init+0x670>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d04a      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a51      	ldr	r2, [pc, #324]	@ (8009384 <HAL_DMA_Init+0x674>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d045      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a50      	ldr	r2, [pc, #320]	@ (8009388 <HAL_DMA_Init+0x678>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d040      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a4e      	ldr	r2, [pc, #312]	@ (800938c <HAL_DMA_Init+0x67c>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d03b      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a4d      	ldr	r2, [pc, #308]	@ (8009390 <HAL_DMA_Init+0x680>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d036      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a4b      	ldr	r2, [pc, #300]	@ (8009394 <HAL_DMA_Init+0x684>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d031      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a4a      	ldr	r2, [pc, #296]	@ (8009398 <HAL_DMA_Init+0x688>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d02c      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a48      	ldr	r2, [pc, #288]	@ (800939c <HAL_DMA_Init+0x68c>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d027      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a47      	ldr	r2, [pc, #284]	@ (80093a0 <HAL_DMA_Init+0x690>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d022      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a45      	ldr	r2, [pc, #276]	@ (80093a4 <HAL_DMA_Init+0x694>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d01d      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a44      	ldr	r2, [pc, #272]	@ (80093a8 <HAL_DMA_Init+0x698>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d018      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a42      	ldr	r2, [pc, #264]	@ (80093ac <HAL_DMA_Init+0x69c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d013      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a41      	ldr	r2, [pc, #260]	@ (80093b0 <HAL_DMA_Init+0x6a0>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d00e      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a3f      	ldr	r2, [pc, #252]	@ (80093b4 <HAL_DMA_Init+0x6a4>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d009      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a3e      	ldr	r2, [pc, #248]	@ (80093b8 <HAL_DMA_Init+0x6a8>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d004      	beq.n	80092ce <HAL_DMA_Init+0x5be>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a3c      	ldr	r2, [pc, #240]	@ (80093bc <HAL_DMA_Init+0x6ac>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d101      	bne.n	80092d2 <HAL_DMA_Init+0x5c2>
 80092ce:	2301      	movs	r3, #1
 80092d0:	e000      	b.n	80092d4 <HAL_DMA_Init+0x5c4>
 80092d2:	2300      	movs	r3, #0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d032      	beq.n	800933e <HAL_DMA_Init+0x62e>
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 fcdf 	bl	800ac9c <DMA_CalcDMAMUXChannelBaseAndMask>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	2b80      	cmp	r3, #128	@ 0x80
 80092e4:	d102      	bne.n	80092ec <HAL_DMA_Init+0x5dc>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	605a      	str	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092f4:	b2d2      	uxtb	r2, r2
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009300:	605a      	str	r2, [r3, #4]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d010      	beq.n	800932c <HAL_DMA_Init+0x61c>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	2b08      	cmp	r3, #8
 8009310:	d80c      	bhi.n	800932c <HAL_DMA_Init+0x61c>
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 fd5c 	bl	800add0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009328:	605a      	str	r2, [r3, #4]
 800932a:	e008      	b.n	800933e <HAL_DMA_Init+0x62e>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	671a      	str	r2, [r3, #112]	@ 0x70
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	675a      	str	r2, [r3, #116]	@ 0x74
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	655a      	str	r2, [r3, #84]	@ 0x54
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800934c:	2300      	movs	r3, #0
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	a7fdabf8 	.word	0xa7fdabf8
 800935c:	cccccccd 	.word	0xcccccccd
 8009360:	40020010 	.word	0x40020010
 8009364:	40020028 	.word	0x40020028
 8009368:	40020040 	.word	0x40020040
 800936c:	40020058 	.word	0x40020058
 8009370:	40020070 	.word	0x40020070
 8009374:	40020088 	.word	0x40020088
 8009378:	400200a0 	.word	0x400200a0
 800937c:	400200b8 	.word	0x400200b8
 8009380:	40020410 	.word	0x40020410
 8009384:	40020428 	.word	0x40020428
 8009388:	40020440 	.word	0x40020440
 800938c:	40020458 	.word	0x40020458
 8009390:	40020470 	.word	0x40020470
 8009394:	40020488 	.word	0x40020488
 8009398:	400204a0 	.word	0x400204a0
 800939c:	400204b8 	.word	0x400204b8
 80093a0:	58025408 	.word	0x58025408
 80093a4:	5802541c 	.word	0x5802541c
 80093a8:	58025430 	.word	0x58025430
 80093ac:	58025444 	.word	0x58025444
 80093b0:	58025458 	.word	0x58025458
 80093b4:	5802546c 	.word	0x5802546c
 80093b8:	58025480 	.word	0x58025480
 80093bc:	58025494 	.word	0x58025494

080093c0 <HAL_DMA_Start_IT>:
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
 80093cc:	603b      	str	r3, [r7, #0]
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <HAL_DMA_Start_IT+0x1c>
 80093d8:	2301      	movs	r3, #1
 80093da:	e226      	b.n	800982a <HAL_DMA_Start_IT+0x46a>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d101      	bne.n	80093ea <HAL_DMA_Start_IT+0x2a>
 80093e6:	2302      	movs	r3, #2
 80093e8:	e21f      	b.n	800982a <HAL_DMA_Start_IT+0x46a>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	f040 820a 	bne.w	8009814 <HAL_DMA_Start_IT+0x454>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	655a      	str	r2, [r3, #84]	@ 0x54
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a68      	ldr	r2, [pc, #416]	@ (80095b4 <HAL_DMA_Start_IT+0x1f4>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d04a      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a66      	ldr	r2, [pc, #408]	@ (80095b8 <HAL_DMA_Start_IT+0x1f8>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d045      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a65      	ldr	r2, [pc, #404]	@ (80095bc <HAL_DMA_Start_IT+0x1fc>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d040      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a63      	ldr	r2, [pc, #396]	@ (80095c0 <HAL_DMA_Start_IT+0x200>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d03b      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a62      	ldr	r2, [pc, #392]	@ (80095c4 <HAL_DMA_Start_IT+0x204>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d036      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a60      	ldr	r2, [pc, #384]	@ (80095c8 <HAL_DMA_Start_IT+0x208>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d031      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a5f      	ldr	r2, [pc, #380]	@ (80095cc <HAL_DMA_Start_IT+0x20c>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d02c      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a5d      	ldr	r2, [pc, #372]	@ (80095d0 <HAL_DMA_Start_IT+0x210>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d027      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a5c      	ldr	r2, [pc, #368]	@ (80095d4 <HAL_DMA_Start_IT+0x214>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d022      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a5a      	ldr	r2, [pc, #360]	@ (80095d8 <HAL_DMA_Start_IT+0x218>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d01d      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a59      	ldr	r2, [pc, #356]	@ (80095dc <HAL_DMA_Start_IT+0x21c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d018      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a57      	ldr	r2, [pc, #348]	@ (80095e0 <HAL_DMA_Start_IT+0x220>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d013      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a56      	ldr	r2, [pc, #344]	@ (80095e4 <HAL_DMA_Start_IT+0x224>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d00e      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a54      	ldr	r2, [pc, #336]	@ (80095e8 <HAL_DMA_Start_IT+0x228>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d009      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a53      	ldr	r2, [pc, #332]	@ (80095ec <HAL_DMA_Start_IT+0x22c>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d004      	beq.n	80094ae <HAL_DMA_Start_IT+0xee>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a51      	ldr	r2, [pc, #324]	@ (80095f0 <HAL_DMA_Start_IT+0x230>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d108      	bne.n	80094c0 <HAL_DMA_Start_IT+0x100>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 0201 	bic.w	r2, r2, #1
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	e007      	b.n	80094d0 <HAL_DMA_Start_IT+0x110>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f022 0201 	bic.w	r2, r2, #1
 80094ce:	601a      	str	r2, [r3, #0]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f001 f906 	bl	800a6e8 <DMA_SetConfig>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a34      	ldr	r2, [pc, #208]	@ (80095b4 <HAL_DMA_Start_IT+0x1f4>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d04a      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a33      	ldr	r2, [pc, #204]	@ (80095b8 <HAL_DMA_Start_IT+0x1f8>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d045      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a31      	ldr	r2, [pc, #196]	@ (80095bc <HAL_DMA_Start_IT+0x1fc>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d040      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a30      	ldr	r2, [pc, #192]	@ (80095c0 <HAL_DMA_Start_IT+0x200>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d03b      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a2e      	ldr	r2, [pc, #184]	@ (80095c4 <HAL_DMA_Start_IT+0x204>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d036      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a2d      	ldr	r2, [pc, #180]	@ (80095c8 <HAL_DMA_Start_IT+0x208>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d031      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a2b      	ldr	r2, [pc, #172]	@ (80095cc <HAL_DMA_Start_IT+0x20c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d02c      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a2a      	ldr	r2, [pc, #168]	@ (80095d0 <HAL_DMA_Start_IT+0x210>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d027      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a28      	ldr	r2, [pc, #160]	@ (80095d4 <HAL_DMA_Start_IT+0x214>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d022      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a27      	ldr	r2, [pc, #156]	@ (80095d8 <HAL_DMA_Start_IT+0x218>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d01d      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a25      	ldr	r2, [pc, #148]	@ (80095dc <HAL_DMA_Start_IT+0x21c>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d018      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a24      	ldr	r2, [pc, #144]	@ (80095e0 <HAL_DMA_Start_IT+0x220>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d013      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a22      	ldr	r2, [pc, #136]	@ (80095e4 <HAL_DMA_Start_IT+0x224>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d00e      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a21      	ldr	r2, [pc, #132]	@ (80095e8 <HAL_DMA_Start_IT+0x228>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d009      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a1f      	ldr	r2, [pc, #124]	@ (80095ec <HAL_DMA_Start_IT+0x22c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d004      	beq.n	800957c <HAL_DMA_Start_IT+0x1bc>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a1e      	ldr	r2, [pc, #120]	@ (80095f0 <HAL_DMA_Start_IT+0x230>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d101      	bne.n	8009580 <HAL_DMA_Start_IT+0x1c0>
 800957c:	2301      	movs	r3, #1
 800957e:	e000      	b.n	8009582 <HAL_DMA_Start_IT+0x1c2>
 8009580:	2300      	movs	r3, #0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d036      	beq.n	80095f4 <HAL_DMA_Start_IT+0x234>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f023 021e 	bic.w	r2, r3, #30
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f042 0216 	orr.w	r2, r2, #22
 8009598:	601a      	str	r2, [r3, #0]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d03e      	beq.n	8009620 <HAL_DMA_Start_IT+0x260>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f042 0208 	orr.w	r2, r2, #8
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	e035      	b.n	8009620 <HAL_DMA_Start_IT+0x260>
 80095b4:	40020010 	.word	0x40020010
 80095b8:	40020028 	.word	0x40020028
 80095bc:	40020040 	.word	0x40020040
 80095c0:	40020058 	.word	0x40020058
 80095c4:	40020070 	.word	0x40020070
 80095c8:	40020088 	.word	0x40020088
 80095cc:	400200a0 	.word	0x400200a0
 80095d0:	400200b8 	.word	0x400200b8
 80095d4:	40020410 	.word	0x40020410
 80095d8:	40020428 	.word	0x40020428
 80095dc:	40020440 	.word	0x40020440
 80095e0:	40020458 	.word	0x40020458
 80095e4:	40020470 	.word	0x40020470
 80095e8:	40020488 	.word	0x40020488
 80095ec:	400204a0 	.word	0x400204a0
 80095f0:	400204b8 	.word	0x400204b8
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f023 020e 	bic.w	r2, r3, #14
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 020a 	orr.w	r2, r2, #10
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800960c:	2b00      	cmp	r3, #0
 800960e:	d007      	beq.n	8009620 <HAL_DMA_Start_IT+0x260>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f042 0204 	orr.w	r2, r2, #4
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a83      	ldr	r2, [pc, #524]	@ (8009834 <HAL_DMA_Start_IT+0x474>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d072      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a82      	ldr	r2, [pc, #520]	@ (8009838 <HAL_DMA_Start_IT+0x478>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d06d      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a80      	ldr	r2, [pc, #512]	@ (800983c <HAL_DMA_Start_IT+0x47c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d068      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a7f      	ldr	r2, [pc, #508]	@ (8009840 <HAL_DMA_Start_IT+0x480>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d063      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a7d      	ldr	r2, [pc, #500]	@ (8009844 <HAL_DMA_Start_IT+0x484>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d05e      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a7c      	ldr	r2, [pc, #496]	@ (8009848 <HAL_DMA_Start_IT+0x488>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d059      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a7a      	ldr	r2, [pc, #488]	@ (800984c <HAL_DMA_Start_IT+0x48c>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d054      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a79      	ldr	r2, [pc, #484]	@ (8009850 <HAL_DMA_Start_IT+0x490>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d04f      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a77      	ldr	r2, [pc, #476]	@ (8009854 <HAL_DMA_Start_IT+0x494>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d04a      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a76      	ldr	r2, [pc, #472]	@ (8009858 <HAL_DMA_Start_IT+0x498>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d045      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a74      	ldr	r2, [pc, #464]	@ (800985c <HAL_DMA_Start_IT+0x49c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d040      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a73      	ldr	r2, [pc, #460]	@ (8009860 <HAL_DMA_Start_IT+0x4a0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d03b      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a71      	ldr	r2, [pc, #452]	@ (8009864 <HAL_DMA_Start_IT+0x4a4>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d036      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a70      	ldr	r2, [pc, #448]	@ (8009868 <HAL_DMA_Start_IT+0x4a8>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d031      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a6e      	ldr	r2, [pc, #440]	@ (800986c <HAL_DMA_Start_IT+0x4ac>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d02c      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a6d      	ldr	r2, [pc, #436]	@ (8009870 <HAL_DMA_Start_IT+0x4b0>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d027      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a6b      	ldr	r2, [pc, #428]	@ (8009874 <HAL_DMA_Start_IT+0x4b4>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d022      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a6a      	ldr	r2, [pc, #424]	@ (8009878 <HAL_DMA_Start_IT+0x4b8>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d01d      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a68      	ldr	r2, [pc, #416]	@ (800987c <HAL_DMA_Start_IT+0x4bc>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d018      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a67      	ldr	r2, [pc, #412]	@ (8009880 <HAL_DMA_Start_IT+0x4c0>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d013      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a65      	ldr	r2, [pc, #404]	@ (8009884 <HAL_DMA_Start_IT+0x4c4>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00e      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a64      	ldr	r2, [pc, #400]	@ (8009888 <HAL_DMA_Start_IT+0x4c8>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d009      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a62      	ldr	r2, [pc, #392]	@ (800988c <HAL_DMA_Start_IT+0x4cc>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d004      	beq.n	8009710 <HAL_DMA_Start_IT+0x350>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a61      	ldr	r2, [pc, #388]	@ (8009890 <HAL_DMA_Start_IT+0x4d0>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d101      	bne.n	8009714 <HAL_DMA_Start_IT+0x354>
 8009710:	2301      	movs	r3, #1
 8009712:	e000      	b.n	8009716 <HAL_DMA_Start_IT+0x356>
 8009714:	2300      	movs	r3, #0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d01a      	beq.n	8009750 <HAL_DMA_Start_IT+0x390>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d007      	beq.n	8009738 <HAL_DMA_Start_IT+0x378>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009732:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800973c:	2b00      	cmp	r3, #0
 800973e:	d007      	beq.n	8009750 <HAL_DMA_Start_IT+0x390>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800974a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a37      	ldr	r2, [pc, #220]	@ (8009834 <HAL_DMA_Start_IT+0x474>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d04a      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a36      	ldr	r2, [pc, #216]	@ (8009838 <HAL_DMA_Start_IT+0x478>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d045      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a34      	ldr	r2, [pc, #208]	@ (800983c <HAL_DMA_Start_IT+0x47c>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d040      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a33      	ldr	r2, [pc, #204]	@ (8009840 <HAL_DMA_Start_IT+0x480>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d03b      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a31      	ldr	r2, [pc, #196]	@ (8009844 <HAL_DMA_Start_IT+0x484>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d036      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a30      	ldr	r2, [pc, #192]	@ (8009848 <HAL_DMA_Start_IT+0x488>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d031      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a2e      	ldr	r2, [pc, #184]	@ (800984c <HAL_DMA_Start_IT+0x48c>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d02c      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a2d      	ldr	r2, [pc, #180]	@ (8009850 <HAL_DMA_Start_IT+0x490>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d027      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a2b      	ldr	r2, [pc, #172]	@ (8009854 <HAL_DMA_Start_IT+0x494>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d022      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009858 <HAL_DMA_Start_IT+0x498>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d01d      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a28      	ldr	r2, [pc, #160]	@ (800985c <HAL_DMA_Start_IT+0x49c>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d018      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a27      	ldr	r2, [pc, #156]	@ (8009860 <HAL_DMA_Start_IT+0x4a0>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d013      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a25      	ldr	r2, [pc, #148]	@ (8009864 <HAL_DMA_Start_IT+0x4a4>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d00e      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a24      	ldr	r2, [pc, #144]	@ (8009868 <HAL_DMA_Start_IT+0x4a8>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d009      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a22      	ldr	r2, [pc, #136]	@ (800986c <HAL_DMA_Start_IT+0x4ac>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d004      	beq.n	80097f0 <HAL_DMA_Start_IT+0x430>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a21      	ldr	r2, [pc, #132]	@ (8009870 <HAL_DMA_Start_IT+0x4b0>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d108      	bne.n	8009802 <HAL_DMA_Start_IT+0x442>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f042 0201 	orr.w	r2, r2, #1
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	e012      	b.n	8009828 <HAL_DMA_Start_IT+0x468>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f042 0201 	orr.w	r2, r2, #1
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	e009      	b.n	8009828 <HAL_DMA_Start_IT+0x468>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800981a:	655a      	str	r2, [r3, #84]	@ 0x54
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8009824:	2301      	movs	r3, #1
 8009826:	75fb      	strb	r3, [r7, #23]
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	4618      	mov	r0, r3
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	40020010 	.word	0x40020010
 8009838:	40020028 	.word	0x40020028
 800983c:	40020040 	.word	0x40020040
 8009840:	40020058 	.word	0x40020058
 8009844:	40020070 	.word	0x40020070
 8009848:	40020088 	.word	0x40020088
 800984c:	400200a0 	.word	0x400200a0
 8009850:	400200b8 	.word	0x400200b8
 8009854:	40020410 	.word	0x40020410
 8009858:	40020428 	.word	0x40020428
 800985c:	40020440 	.word	0x40020440
 8009860:	40020458 	.word	0x40020458
 8009864:	40020470 	.word	0x40020470
 8009868:	40020488 	.word	0x40020488
 800986c:	400204a0 	.word	0x400204a0
 8009870:	400204b8 	.word	0x400204b8
 8009874:	58025408 	.word	0x58025408
 8009878:	5802541c 	.word	0x5802541c
 800987c:	58025430 	.word	0x58025430
 8009880:	58025444 	.word	0x58025444
 8009884:	58025458 	.word	0x58025458
 8009888:	5802546c 	.word	0x5802546c
 800988c:	58025480 	.word	0x58025480
 8009890:	58025494 	.word	0x58025494

08009894 <HAL_DMA_IRQHandler>:
 8009894:	b580      	push	{r7, lr}
 8009896:	b08a      	sub	sp, #40	@ 0x28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	2300      	movs	r3, #0
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	4b67      	ldr	r3, [pc, #412]	@ (8009a40 <HAL_DMA_IRQHandler+0x1ac>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a67      	ldr	r2, [pc, #412]	@ (8009a44 <HAL_DMA_IRQHandler+0x1b0>)
 80098a6:	fba2 2303 	umull	r2, r3, r2, r3
 80098aa:	0a9b      	lsrs	r3, r3, #10
 80098ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098b2:	623b      	str	r3, [r7, #32]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098b8:	61fb      	str	r3, [r7, #28]
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	61bb      	str	r3, [r7, #24]
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a5f      	ldr	r2, [pc, #380]	@ (8009a48 <HAL_DMA_IRQHandler+0x1b4>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d04a      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a5d      	ldr	r2, [pc, #372]	@ (8009a4c <HAL_DMA_IRQHandler+0x1b8>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d045      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a5c      	ldr	r2, [pc, #368]	@ (8009a50 <HAL_DMA_IRQHandler+0x1bc>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d040      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a5a      	ldr	r2, [pc, #360]	@ (8009a54 <HAL_DMA_IRQHandler+0x1c0>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d03b      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a59      	ldr	r2, [pc, #356]	@ (8009a58 <HAL_DMA_IRQHandler+0x1c4>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d036      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a57      	ldr	r2, [pc, #348]	@ (8009a5c <HAL_DMA_IRQHandler+0x1c8>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d031      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a56      	ldr	r2, [pc, #344]	@ (8009a60 <HAL_DMA_IRQHandler+0x1cc>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d02c      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a54      	ldr	r2, [pc, #336]	@ (8009a64 <HAL_DMA_IRQHandler+0x1d0>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d027      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a53      	ldr	r2, [pc, #332]	@ (8009a68 <HAL_DMA_IRQHandler+0x1d4>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d022      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a51      	ldr	r2, [pc, #324]	@ (8009a6c <HAL_DMA_IRQHandler+0x1d8>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d01d      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a50      	ldr	r2, [pc, #320]	@ (8009a70 <HAL_DMA_IRQHandler+0x1dc>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d018      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a4e      	ldr	r2, [pc, #312]	@ (8009a74 <HAL_DMA_IRQHandler+0x1e0>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d013      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a4d      	ldr	r2, [pc, #308]	@ (8009a78 <HAL_DMA_IRQHandler+0x1e4>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d00e      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a4b      	ldr	r2, [pc, #300]	@ (8009a7c <HAL_DMA_IRQHandler+0x1e8>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d009      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a4a      	ldr	r2, [pc, #296]	@ (8009a80 <HAL_DMA_IRQHandler+0x1ec>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d004      	beq.n	8009966 <HAL_DMA_IRQHandler+0xd2>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a48      	ldr	r2, [pc, #288]	@ (8009a84 <HAL_DMA_IRQHandler+0x1f0>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d101      	bne.n	800996a <HAL_DMA_IRQHandler+0xd6>
 8009966:	2301      	movs	r3, #1
 8009968:	e000      	b.n	800996c <HAL_DMA_IRQHandler+0xd8>
 800996a:	2300      	movs	r3, #0
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 842b 	beq.w	800a1c8 <HAL_DMA_IRQHandler+0x934>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009976:	f003 031f 	and.w	r3, r3, #31
 800997a:	2208      	movs	r2, #8
 800997c:	409a      	lsls	r2, r3
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	4013      	ands	r3, r2
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 80a2 	beq.w	8009acc <HAL_DMA_IRQHandler+0x238>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a2e      	ldr	r2, [pc, #184]	@ (8009a48 <HAL_DMA_IRQHandler+0x1b4>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d04a      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a2d      	ldr	r2, [pc, #180]	@ (8009a4c <HAL_DMA_IRQHandler+0x1b8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d045      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a2b      	ldr	r2, [pc, #172]	@ (8009a50 <HAL_DMA_IRQHandler+0x1bc>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d040      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009a54 <HAL_DMA_IRQHandler+0x1c0>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d03b      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a28      	ldr	r2, [pc, #160]	@ (8009a58 <HAL_DMA_IRQHandler+0x1c4>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d036      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a27      	ldr	r2, [pc, #156]	@ (8009a5c <HAL_DMA_IRQHandler+0x1c8>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d031      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a25      	ldr	r2, [pc, #148]	@ (8009a60 <HAL_DMA_IRQHandler+0x1cc>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d02c      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a24      	ldr	r2, [pc, #144]	@ (8009a64 <HAL_DMA_IRQHandler+0x1d0>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d027      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a22      	ldr	r2, [pc, #136]	@ (8009a68 <HAL_DMA_IRQHandler+0x1d4>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d022      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a21      	ldr	r2, [pc, #132]	@ (8009a6c <HAL_DMA_IRQHandler+0x1d8>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d01d      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a1f      	ldr	r2, [pc, #124]	@ (8009a70 <HAL_DMA_IRQHandler+0x1dc>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d018      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009a74 <HAL_DMA_IRQHandler+0x1e0>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d013      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a1c      	ldr	r2, [pc, #112]	@ (8009a78 <HAL_DMA_IRQHandler+0x1e4>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d00e      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8009a7c <HAL_DMA_IRQHandler+0x1e8>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d009      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a19      	ldr	r2, [pc, #100]	@ (8009a80 <HAL_DMA_IRQHandler+0x1ec>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d004      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x194>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a18      	ldr	r2, [pc, #96]	@ (8009a84 <HAL_DMA_IRQHandler+0x1f0>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d12f      	bne.n	8009a88 <HAL_DMA_IRQHandler+0x1f4>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 0304 	and.w	r3, r3, #4
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	bf14      	ite	ne
 8009a36:	2301      	movne	r3, #1
 8009a38:	2300      	moveq	r3, #0
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	e02e      	b.n	8009a9c <HAL_DMA_IRQHandler+0x208>
 8009a3e:	bf00      	nop
 8009a40:	24000000 	.word	0x24000000
 8009a44:	1b4e81b5 	.word	0x1b4e81b5
 8009a48:	40020010 	.word	0x40020010
 8009a4c:	40020028 	.word	0x40020028
 8009a50:	40020040 	.word	0x40020040
 8009a54:	40020058 	.word	0x40020058
 8009a58:	40020070 	.word	0x40020070
 8009a5c:	40020088 	.word	0x40020088
 8009a60:	400200a0 	.word	0x400200a0
 8009a64:	400200b8 	.word	0x400200b8
 8009a68:	40020410 	.word	0x40020410
 8009a6c:	40020428 	.word	0x40020428
 8009a70:	40020440 	.word	0x40020440
 8009a74:	40020458 	.word	0x40020458
 8009a78:	40020470 	.word	0x40020470
 8009a7c:	40020488 	.word	0x40020488
 8009a80:	400204a0 	.word	0x400204a0
 8009a84:	400204b8 	.word	0x400204b8
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0308 	and.w	r3, r3, #8
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	bf14      	ite	ne
 8009a96:	2301      	movne	r3, #1
 8009a98:	2300      	moveq	r3, #0
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d015      	beq.n	8009acc <HAL_DMA_IRQHandler+0x238>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f022 0204 	bic.w	r2, r2, #4
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ab4:	f003 031f 	and.w	r3, r3, #31
 8009ab8:	2208      	movs	r2, #8
 8009aba:	409a      	lsls	r2, r3
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	609a      	str	r2, [r3, #8]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ac4:	f043 0201 	orr.w	r2, r3, #1
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	655a      	str	r2, [r3, #84]	@ 0x54
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ad0:	f003 031f 	and.w	r3, r3, #31
 8009ad4:	69ba      	ldr	r2, [r7, #24]
 8009ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d06e      	beq.n	8009bc0 <HAL_DMA_IRQHandler+0x32c>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a69      	ldr	r2, [pc, #420]	@ (8009c8c <HAL_DMA_IRQHandler+0x3f8>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d04a      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a67      	ldr	r2, [pc, #412]	@ (8009c90 <HAL_DMA_IRQHandler+0x3fc>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d045      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a66      	ldr	r2, [pc, #408]	@ (8009c94 <HAL_DMA_IRQHandler+0x400>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d040      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a64      	ldr	r2, [pc, #400]	@ (8009c98 <HAL_DMA_IRQHandler+0x404>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d03b      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a63      	ldr	r2, [pc, #396]	@ (8009c9c <HAL_DMA_IRQHandler+0x408>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d036      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a61      	ldr	r2, [pc, #388]	@ (8009ca0 <HAL_DMA_IRQHandler+0x40c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d031      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a60      	ldr	r2, [pc, #384]	@ (8009ca4 <HAL_DMA_IRQHandler+0x410>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d02c      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a5e      	ldr	r2, [pc, #376]	@ (8009ca8 <HAL_DMA_IRQHandler+0x414>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d027      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a5d      	ldr	r2, [pc, #372]	@ (8009cac <HAL_DMA_IRQHandler+0x418>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d022      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a5b      	ldr	r2, [pc, #364]	@ (8009cb0 <HAL_DMA_IRQHandler+0x41c>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d01d      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a5a      	ldr	r2, [pc, #360]	@ (8009cb4 <HAL_DMA_IRQHandler+0x420>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d018      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a58      	ldr	r2, [pc, #352]	@ (8009cb8 <HAL_DMA_IRQHandler+0x424>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d013      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a57      	ldr	r2, [pc, #348]	@ (8009cbc <HAL_DMA_IRQHandler+0x428>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d00e      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a55      	ldr	r2, [pc, #340]	@ (8009cc0 <HAL_DMA_IRQHandler+0x42c>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d009      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a54      	ldr	r2, [pc, #336]	@ (8009cc4 <HAL_DMA_IRQHandler+0x430>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d004      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x2ee>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a52      	ldr	r2, [pc, #328]	@ (8009cc8 <HAL_DMA_IRQHandler+0x434>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d10a      	bne.n	8009b98 <HAL_DMA_IRQHandler+0x304>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bf14      	ite	ne
 8009b90:	2301      	movne	r3, #1
 8009b92:	2300      	moveq	r3, #0
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	e003      	b.n	8009ba0 <HAL_DMA_IRQHandler+0x30c>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00d      	beq.n	8009bc0 <HAL_DMA_IRQHandler+0x32c>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ba8:	f003 031f 	and.w	r3, r3, #31
 8009bac:	2201      	movs	r2, #1
 8009bae:	409a      	lsls	r2, r3
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	609a      	str	r2, [r3, #8]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bb8:	f043 0202 	orr.w	r2, r3, #2
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	655a      	str	r2, [r3, #84]	@ 0x54
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bc4:	f003 031f 	and.w	r3, r3, #31
 8009bc8:	2204      	movs	r2, #4
 8009bca:	409a      	lsls	r2, r3
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 808f 	beq.w	8009cf4 <HAL_DMA_IRQHandler+0x460>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a2c      	ldr	r2, [pc, #176]	@ (8009c8c <HAL_DMA_IRQHandler+0x3f8>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d04a      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a2a      	ldr	r2, [pc, #168]	@ (8009c90 <HAL_DMA_IRQHandler+0x3fc>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d045      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a29      	ldr	r2, [pc, #164]	@ (8009c94 <HAL_DMA_IRQHandler+0x400>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d040      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a27      	ldr	r2, [pc, #156]	@ (8009c98 <HAL_DMA_IRQHandler+0x404>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d03b      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a26      	ldr	r2, [pc, #152]	@ (8009c9c <HAL_DMA_IRQHandler+0x408>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d036      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a24      	ldr	r2, [pc, #144]	@ (8009ca0 <HAL_DMA_IRQHandler+0x40c>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d031      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a23      	ldr	r2, [pc, #140]	@ (8009ca4 <HAL_DMA_IRQHandler+0x410>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d02c      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a21      	ldr	r2, [pc, #132]	@ (8009ca8 <HAL_DMA_IRQHandler+0x414>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d027      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a20      	ldr	r2, [pc, #128]	@ (8009cac <HAL_DMA_IRQHandler+0x418>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d022      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a1e      	ldr	r2, [pc, #120]	@ (8009cb0 <HAL_DMA_IRQHandler+0x41c>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d01d      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb4 <HAL_DMA_IRQHandler+0x420>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d018      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a1b      	ldr	r2, [pc, #108]	@ (8009cb8 <HAL_DMA_IRQHandler+0x424>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d013      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a1a      	ldr	r2, [pc, #104]	@ (8009cbc <HAL_DMA_IRQHandler+0x428>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00e      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a18      	ldr	r2, [pc, #96]	@ (8009cc0 <HAL_DMA_IRQHandler+0x42c>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d009      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a17      	ldr	r2, [pc, #92]	@ (8009cc4 <HAL_DMA_IRQHandler+0x430>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d004      	beq.n	8009c76 <HAL_DMA_IRQHandler+0x3e2>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a15      	ldr	r2, [pc, #84]	@ (8009cc8 <HAL_DMA_IRQHandler+0x434>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d12a      	bne.n	8009ccc <HAL_DMA_IRQHandler+0x438>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0302 	and.w	r3, r3, #2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	bf14      	ite	ne
 8009c84:	2301      	movne	r3, #1
 8009c86:	2300      	moveq	r3, #0
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	e023      	b.n	8009cd4 <HAL_DMA_IRQHandler+0x440>
 8009c8c:	40020010 	.word	0x40020010
 8009c90:	40020028 	.word	0x40020028
 8009c94:	40020040 	.word	0x40020040
 8009c98:	40020058 	.word	0x40020058
 8009c9c:	40020070 	.word	0x40020070
 8009ca0:	40020088 	.word	0x40020088
 8009ca4:	400200a0 	.word	0x400200a0
 8009ca8:	400200b8 	.word	0x400200b8
 8009cac:	40020410 	.word	0x40020410
 8009cb0:	40020428 	.word	0x40020428
 8009cb4:	40020440 	.word	0x40020440
 8009cb8:	40020458 	.word	0x40020458
 8009cbc:	40020470 	.word	0x40020470
 8009cc0:	40020488 	.word	0x40020488
 8009cc4:	400204a0 	.word	0x400204a0
 8009cc8:	400204b8 	.word	0x400204b8
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00d      	beq.n	8009cf4 <HAL_DMA_IRQHandler+0x460>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cdc:	f003 031f 	and.w	r3, r3, #31
 8009ce0:	2204      	movs	r2, #4
 8009ce2:	409a      	lsls	r2, r3
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	609a      	str	r2, [r3, #8]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cec:	f043 0204 	orr.w	r2, r3, #4
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	655a      	str	r2, [r3, #84]	@ 0x54
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cf8:	f003 031f 	and.w	r3, r3, #31
 8009cfc:	2210      	movs	r2, #16
 8009cfe:	409a      	lsls	r2, r3
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	4013      	ands	r3, r2
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f000 80a6 	beq.w	8009e56 <HAL_DMA_IRQHandler+0x5c2>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a85      	ldr	r2, [pc, #532]	@ (8009f24 <HAL_DMA_IRQHandler+0x690>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d04a      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a83      	ldr	r2, [pc, #524]	@ (8009f28 <HAL_DMA_IRQHandler+0x694>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d045      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a82      	ldr	r2, [pc, #520]	@ (8009f2c <HAL_DMA_IRQHandler+0x698>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d040      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a80      	ldr	r2, [pc, #512]	@ (8009f30 <HAL_DMA_IRQHandler+0x69c>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d03b      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a7f      	ldr	r2, [pc, #508]	@ (8009f34 <HAL_DMA_IRQHandler+0x6a0>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d036      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a7d      	ldr	r2, [pc, #500]	@ (8009f38 <HAL_DMA_IRQHandler+0x6a4>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d031      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8009f3c <HAL_DMA_IRQHandler+0x6a8>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d02c      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a7a      	ldr	r2, [pc, #488]	@ (8009f40 <HAL_DMA_IRQHandler+0x6ac>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d027      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a79      	ldr	r2, [pc, #484]	@ (8009f44 <HAL_DMA_IRQHandler+0x6b0>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d022      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a77      	ldr	r2, [pc, #476]	@ (8009f48 <HAL_DMA_IRQHandler+0x6b4>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d01d      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a76      	ldr	r2, [pc, #472]	@ (8009f4c <HAL_DMA_IRQHandler+0x6b8>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d018      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a74      	ldr	r2, [pc, #464]	@ (8009f50 <HAL_DMA_IRQHandler+0x6bc>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d013      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a73      	ldr	r2, [pc, #460]	@ (8009f54 <HAL_DMA_IRQHandler+0x6c0>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d00e      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a71      	ldr	r2, [pc, #452]	@ (8009f58 <HAL_DMA_IRQHandler+0x6c4>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d009      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a70      	ldr	r2, [pc, #448]	@ (8009f5c <HAL_DMA_IRQHandler+0x6c8>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d004      	beq.n	8009daa <HAL_DMA_IRQHandler+0x516>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a6e      	ldr	r2, [pc, #440]	@ (8009f60 <HAL_DMA_IRQHandler+0x6cc>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d10a      	bne.n	8009dc0 <HAL_DMA_IRQHandler+0x52c>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bf14      	ite	ne
 8009db8:	2301      	movne	r3, #1
 8009dba:	2300      	moveq	r3, #0
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	e009      	b.n	8009dd4 <HAL_DMA_IRQHandler+0x540>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0304 	and.w	r3, r3, #4
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	bf14      	ite	ne
 8009dce:	2301      	movne	r3, #1
 8009dd0:	2300      	moveq	r3, #0
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d03e      	beq.n	8009e56 <HAL_DMA_IRQHandler+0x5c2>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ddc:	f003 031f 	and.w	r3, r3, #31
 8009de0:	2210      	movs	r2, #16
 8009de2:	409a      	lsls	r2, r3
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	609a      	str	r2, [r3, #8]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d018      	beq.n	8009e28 <HAL_DMA_IRQHandler+0x594>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d108      	bne.n	8009e16 <HAL_DMA_IRQHandler+0x582>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d024      	beq.n	8009e56 <HAL_DMA_IRQHandler+0x5c2>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	4798      	blx	r3
 8009e14:	e01f      	b.n	8009e56 <HAL_DMA_IRQHandler+0x5c2>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d01b      	beq.n	8009e56 <HAL_DMA_IRQHandler+0x5c2>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	4798      	blx	r3
 8009e26:	e016      	b.n	8009e56 <HAL_DMA_IRQHandler+0x5c2>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d107      	bne.n	8009e46 <HAL_DMA_IRQHandler+0x5b2>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f022 0208 	bic.w	r2, r2, #8
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <HAL_DMA_IRQHandler+0x5c2>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	4798      	blx	r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e5a:	f003 031f 	and.w	r3, r3, #31
 8009e5e:	2220      	movs	r2, #32
 8009e60:	409a      	lsls	r2, r3
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	4013      	ands	r3, r2
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 8110 	beq.w	800a08c <HAL_DMA_IRQHandler+0x7f8>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a2c      	ldr	r2, [pc, #176]	@ (8009f24 <HAL_DMA_IRQHandler+0x690>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d04a      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8009f28 <HAL_DMA_IRQHandler+0x694>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d045      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a29      	ldr	r2, [pc, #164]	@ (8009f2c <HAL_DMA_IRQHandler+0x698>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d040      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a28      	ldr	r2, [pc, #160]	@ (8009f30 <HAL_DMA_IRQHandler+0x69c>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d03b      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a26      	ldr	r2, [pc, #152]	@ (8009f34 <HAL_DMA_IRQHandler+0x6a0>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d036      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a25      	ldr	r2, [pc, #148]	@ (8009f38 <HAL_DMA_IRQHandler+0x6a4>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d031      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a23      	ldr	r2, [pc, #140]	@ (8009f3c <HAL_DMA_IRQHandler+0x6a8>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d02c      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a22      	ldr	r2, [pc, #136]	@ (8009f40 <HAL_DMA_IRQHandler+0x6ac>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d027      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a20      	ldr	r2, [pc, #128]	@ (8009f44 <HAL_DMA_IRQHandler+0x6b0>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d022      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a1f      	ldr	r2, [pc, #124]	@ (8009f48 <HAL_DMA_IRQHandler+0x6b4>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d01d      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8009f4c <HAL_DMA_IRQHandler+0x6b8>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d018      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a1c      	ldr	r2, [pc, #112]	@ (8009f50 <HAL_DMA_IRQHandler+0x6bc>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d013      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8009f54 <HAL_DMA_IRQHandler+0x6c0>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d00e      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a19      	ldr	r2, [pc, #100]	@ (8009f58 <HAL_DMA_IRQHandler+0x6c4>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d009      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a17      	ldr	r2, [pc, #92]	@ (8009f5c <HAL_DMA_IRQHandler+0x6c8>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d004      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x678>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a16      	ldr	r2, [pc, #88]	@ (8009f60 <HAL_DMA_IRQHandler+0x6cc>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d12b      	bne.n	8009f64 <HAL_DMA_IRQHandler+0x6d0>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 0310 	and.w	r3, r3, #16
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	bf14      	ite	ne
 8009f1a:	2301      	movne	r3, #1
 8009f1c:	2300      	moveq	r3, #0
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	e02a      	b.n	8009f78 <HAL_DMA_IRQHandler+0x6e4>
 8009f22:	bf00      	nop
 8009f24:	40020010 	.word	0x40020010
 8009f28:	40020028 	.word	0x40020028
 8009f2c:	40020040 	.word	0x40020040
 8009f30:	40020058 	.word	0x40020058
 8009f34:	40020070 	.word	0x40020070
 8009f38:	40020088 	.word	0x40020088
 8009f3c:	400200a0 	.word	0x400200a0
 8009f40:	400200b8 	.word	0x400200b8
 8009f44:	40020410 	.word	0x40020410
 8009f48:	40020428 	.word	0x40020428
 8009f4c:	40020440 	.word	0x40020440
 8009f50:	40020458 	.word	0x40020458
 8009f54:	40020470 	.word	0x40020470
 8009f58:	40020488 	.word	0x40020488
 8009f5c:	400204a0 	.word	0x400204a0
 8009f60:	400204b8 	.word	0x400204b8
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 0302 	and.w	r3, r3, #2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	bf14      	ite	ne
 8009f72:	2301      	movne	r3, #1
 8009f74:	2300      	moveq	r3, #0
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f000 8087 	beq.w	800a08c <HAL_DMA_IRQHandler+0x7f8>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f82:	f003 031f 	and.w	r3, r3, #31
 8009f86:	2220      	movs	r2, #32
 8009f88:	409a      	lsls	r2, r3
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	609a      	str	r2, [r3, #8]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d139      	bne.n	800a00e <HAL_DMA_IRQHandler+0x77a>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f022 0216 	bic.w	r2, r2, #22
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	695a      	ldr	r2, [r3, #20]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fb8:	615a      	str	r2, [r3, #20]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d103      	bne.n	8009fca <HAL_DMA_IRQHandler+0x736>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d007      	beq.n	8009fda <HAL_DMA_IRQHandler+0x746>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f022 0208 	bic.w	r2, r2, #8
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fde:	f003 031f 	and.w	r3, r3, #31
 8009fe2:	223f      	movs	r2, #63	@ 0x3f
 8009fe4:	409a      	lsls	r2, r3
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	609a      	str	r2, [r3, #8]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 834a 	beq.w	800a698 <HAL_DMA_IRQHandler+0xe04>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	4798      	blx	r3
 800a00c:	e344      	b.n	800a698 <HAL_DMA_IRQHandler+0xe04>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d018      	beq.n	800a04e <HAL_DMA_IRQHandler+0x7ba>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a026:	2b00      	cmp	r3, #0
 800a028:	d108      	bne.n	800a03c <HAL_DMA_IRQHandler+0x7a8>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d02c      	beq.n	800a08c <HAL_DMA_IRQHandler+0x7f8>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	4798      	blx	r3
 800a03a:	e027      	b.n	800a08c <HAL_DMA_IRQHandler+0x7f8>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a040:	2b00      	cmp	r3, #0
 800a042:	d023      	beq.n	800a08c <HAL_DMA_IRQHandler+0x7f8>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	4798      	blx	r3
 800a04c:	e01e      	b.n	800a08c <HAL_DMA_IRQHandler+0x7f8>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10f      	bne.n	800a07c <HAL_DMA_IRQHandler+0x7e8>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 0210 	bic.w	r2, r2, #16
 800a06a:	601a      	str	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d003      	beq.n	800a08c <HAL_DMA_IRQHandler+0x7f8>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	4798      	blx	r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 8306 	beq.w	800a6a2 <HAL_DMA_IRQHandler+0xe0e>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a09a:	f003 0301 	and.w	r3, r3, #1
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 8088 	beq.w	800a1b4 <HAL_DMA_IRQHandler+0x920>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2204      	movs	r2, #4
 800a0a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a7a      	ldr	r2, [pc, #488]	@ (800a29c <HAL_DMA_IRQHandler+0xa08>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d04a      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a79      	ldr	r2, [pc, #484]	@ (800a2a0 <HAL_DMA_IRQHandler+0xa0c>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d045      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a77      	ldr	r2, [pc, #476]	@ (800a2a4 <HAL_DMA_IRQHandler+0xa10>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d040      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a76      	ldr	r2, [pc, #472]	@ (800a2a8 <HAL_DMA_IRQHandler+0xa14>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d03b      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a74      	ldr	r2, [pc, #464]	@ (800a2ac <HAL_DMA_IRQHandler+0xa18>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d036      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a73      	ldr	r2, [pc, #460]	@ (800a2b0 <HAL_DMA_IRQHandler+0xa1c>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d031      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a71      	ldr	r2, [pc, #452]	@ (800a2b4 <HAL_DMA_IRQHandler+0xa20>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d02c      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a70      	ldr	r2, [pc, #448]	@ (800a2b8 <HAL_DMA_IRQHandler+0xa24>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d027      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a6e      	ldr	r2, [pc, #440]	@ (800a2bc <HAL_DMA_IRQHandler+0xa28>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d022      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a6d      	ldr	r2, [pc, #436]	@ (800a2c0 <HAL_DMA_IRQHandler+0xa2c>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d01d      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a6b      	ldr	r2, [pc, #428]	@ (800a2c4 <HAL_DMA_IRQHandler+0xa30>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d018      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a6a      	ldr	r2, [pc, #424]	@ (800a2c8 <HAL_DMA_IRQHandler+0xa34>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d013      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a68      	ldr	r2, [pc, #416]	@ (800a2cc <HAL_DMA_IRQHandler+0xa38>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d00e      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a67      	ldr	r2, [pc, #412]	@ (800a2d0 <HAL_DMA_IRQHandler+0xa3c>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d009      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a65      	ldr	r2, [pc, #404]	@ (800a2d4 <HAL_DMA_IRQHandler+0xa40>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d004      	beq.n	800a14c <HAL_DMA_IRQHandler+0x8b8>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a64      	ldr	r2, [pc, #400]	@ (800a2d8 <HAL_DMA_IRQHandler+0xa44>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d108      	bne.n	800a15e <HAL_DMA_IRQHandler+0x8ca>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f022 0201 	bic.w	r2, r2, #1
 800a15a:	601a      	str	r2, [r3, #0]
 800a15c:	e007      	b.n	800a16e <HAL_DMA_IRQHandler+0x8da>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f022 0201 	bic.w	r2, r2, #1
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3301      	adds	r3, #1
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a176:	429a      	cmp	r2, r3
 800a178:	d307      	bcc.n	800a18a <HAL_DMA_IRQHandler+0x8f6>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1f2      	bne.n	800a16e <HAL_DMA_IRQHandler+0x8da>
 800a188:	e000      	b.n	800a18c <HAL_DMA_IRQHandler+0x8f8>
 800a18a:	bf00      	nop
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d004      	beq.n	800a1a4 <HAL_DMA_IRQHandler+0x910>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2203      	movs	r2, #3
 800a19e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a1a2:	e003      	b.n	800a1ac <HAL_DMA_IRQHandler+0x918>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 8272 	beq.w	800a6a2 <HAL_DMA_IRQHandler+0xe0e>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
 800a1c6:	e26c      	b.n	800a6a2 <HAL_DMA_IRQHandler+0xe0e>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a43      	ldr	r2, [pc, #268]	@ (800a2dc <HAL_DMA_IRQHandler+0xa48>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d022      	beq.n	800a218 <HAL_DMA_IRQHandler+0x984>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a42      	ldr	r2, [pc, #264]	@ (800a2e0 <HAL_DMA_IRQHandler+0xa4c>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d01d      	beq.n	800a218 <HAL_DMA_IRQHandler+0x984>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a40      	ldr	r2, [pc, #256]	@ (800a2e4 <HAL_DMA_IRQHandler+0xa50>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d018      	beq.n	800a218 <HAL_DMA_IRQHandler+0x984>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a3f      	ldr	r2, [pc, #252]	@ (800a2e8 <HAL_DMA_IRQHandler+0xa54>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d013      	beq.n	800a218 <HAL_DMA_IRQHandler+0x984>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a3d      	ldr	r2, [pc, #244]	@ (800a2ec <HAL_DMA_IRQHandler+0xa58>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d00e      	beq.n	800a218 <HAL_DMA_IRQHandler+0x984>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a3c      	ldr	r2, [pc, #240]	@ (800a2f0 <HAL_DMA_IRQHandler+0xa5c>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d009      	beq.n	800a218 <HAL_DMA_IRQHandler+0x984>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a3a      	ldr	r2, [pc, #232]	@ (800a2f4 <HAL_DMA_IRQHandler+0xa60>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d004      	beq.n	800a218 <HAL_DMA_IRQHandler+0x984>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a39      	ldr	r2, [pc, #228]	@ (800a2f8 <HAL_DMA_IRQHandler+0xa64>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d101      	bne.n	800a21c <HAL_DMA_IRQHandler+0x988>
 800a218:	2301      	movs	r3, #1
 800a21a:	e000      	b.n	800a21e <HAL_DMA_IRQHandler+0x98a>
 800a21c:	2300      	movs	r3, #0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f000 823f 	beq.w	800a6a2 <HAL_DMA_IRQHandler+0xe0e>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	613b      	str	r3, [r7, #16]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a230:	f003 031f 	and.w	r3, r3, #31
 800a234:	2204      	movs	r2, #4
 800a236:	409a      	lsls	r2, r3
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	4013      	ands	r3, r2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f000 80cd 	beq.w	800a3dc <HAL_DMA_IRQHandler+0xb48>
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f003 0304 	and.w	r3, r3, #4
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 80c7 	beq.w	800a3dc <HAL_DMA_IRQHandler+0xb48>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a252:	f003 031f 	and.w	r3, r3, #31
 800a256:	2204      	movs	r2, #4
 800a258:	409a      	lsls	r2, r3
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	605a      	str	r2, [r3, #4]
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d049      	beq.n	800a2fc <HAL_DMA_IRQHandler+0xa68>
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d109      	bne.n	800a286 <HAL_DMA_IRQHandler+0x9f2>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 8210 	beq.w	800a69c <HAL_DMA_IRQHandler+0xe08>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	4798      	blx	r3
 800a284:	e20a      	b.n	800a69c <HAL_DMA_IRQHandler+0xe08>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 8206 	beq.w	800a69c <HAL_DMA_IRQHandler+0xe08>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	4798      	blx	r3
 800a298:	e200      	b.n	800a69c <HAL_DMA_IRQHandler+0xe08>
 800a29a:	bf00      	nop
 800a29c:	40020010 	.word	0x40020010
 800a2a0:	40020028 	.word	0x40020028
 800a2a4:	40020040 	.word	0x40020040
 800a2a8:	40020058 	.word	0x40020058
 800a2ac:	40020070 	.word	0x40020070
 800a2b0:	40020088 	.word	0x40020088
 800a2b4:	400200a0 	.word	0x400200a0
 800a2b8:	400200b8 	.word	0x400200b8
 800a2bc:	40020410 	.word	0x40020410
 800a2c0:	40020428 	.word	0x40020428
 800a2c4:	40020440 	.word	0x40020440
 800a2c8:	40020458 	.word	0x40020458
 800a2cc:	40020470 	.word	0x40020470
 800a2d0:	40020488 	.word	0x40020488
 800a2d4:	400204a0 	.word	0x400204a0
 800a2d8:	400204b8 	.word	0x400204b8
 800a2dc:	58025408 	.word	0x58025408
 800a2e0:	5802541c 	.word	0x5802541c
 800a2e4:	58025430 	.word	0x58025430
 800a2e8:	58025444 	.word	0x58025444
 800a2ec:	58025458 	.word	0x58025458
 800a2f0:	5802546c 	.word	0x5802546c
 800a2f4:	58025480 	.word	0x58025480
 800a2f8:	58025494 	.word	0x58025494
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	f003 0320 	and.w	r3, r3, #32
 800a302:	2b00      	cmp	r3, #0
 800a304:	d160      	bne.n	800a3c8 <HAL_DMA_IRQHandler+0xb34>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a7f      	ldr	r2, [pc, #508]	@ (800a508 <HAL_DMA_IRQHandler+0xc74>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d04a      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a7d      	ldr	r2, [pc, #500]	@ (800a50c <HAL_DMA_IRQHandler+0xc78>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d045      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a7c      	ldr	r2, [pc, #496]	@ (800a510 <HAL_DMA_IRQHandler+0xc7c>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d040      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a7a      	ldr	r2, [pc, #488]	@ (800a514 <HAL_DMA_IRQHandler+0xc80>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d03b      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a79      	ldr	r2, [pc, #484]	@ (800a518 <HAL_DMA_IRQHandler+0xc84>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d036      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a77      	ldr	r2, [pc, #476]	@ (800a51c <HAL_DMA_IRQHandler+0xc88>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d031      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a76      	ldr	r2, [pc, #472]	@ (800a520 <HAL_DMA_IRQHandler+0xc8c>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d02c      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a74      	ldr	r2, [pc, #464]	@ (800a524 <HAL_DMA_IRQHandler+0xc90>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d027      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a73      	ldr	r2, [pc, #460]	@ (800a528 <HAL_DMA_IRQHandler+0xc94>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d022      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a71      	ldr	r2, [pc, #452]	@ (800a52c <HAL_DMA_IRQHandler+0xc98>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d01d      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a70      	ldr	r2, [pc, #448]	@ (800a530 <HAL_DMA_IRQHandler+0xc9c>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d018      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a6e      	ldr	r2, [pc, #440]	@ (800a534 <HAL_DMA_IRQHandler+0xca0>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d013      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a6d      	ldr	r2, [pc, #436]	@ (800a538 <HAL_DMA_IRQHandler+0xca4>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d00e      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a6b      	ldr	r2, [pc, #428]	@ (800a53c <HAL_DMA_IRQHandler+0xca8>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d009      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a6a      	ldr	r2, [pc, #424]	@ (800a540 <HAL_DMA_IRQHandler+0xcac>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d004      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0xb12>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a68      	ldr	r2, [pc, #416]	@ (800a544 <HAL_DMA_IRQHandler+0xcb0>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d108      	bne.n	800a3b8 <HAL_DMA_IRQHandler+0xb24>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f022 0208 	bic.w	r2, r2, #8
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	e007      	b.n	800a3c8 <HAL_DMA_IRQHandler+0xb34>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f022 0204 	bic.w	r2, r2, #4
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 8165 	beq.w	800a69c <HAL_DMA_IRQHandler+0xe08>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	4798      	blx	r3
 800a3da:	e15f      	b.n	800a69c <HAL_DMA_IRQHandler+0xe08>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3e0:	f003 031f 	and.w	r3, r3, #31
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	409a      	lsls	r2, r3
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 80c5 	beq.w	800a57c <HAL_DMA_IRQHandler+0xce8>
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f003 0302 	and.w	r3, r3, #2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 80bf 	beq.w	800a57c <HAL_DMA_IRQHandler+0xce8>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a402:	f003 031f 	and.w	r3, r3, #31
 800a406:	2202      	movs	r2, #2
 800a408:	409a      	lsls	r2, r3
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	605a      	str	r2, [r3, #4]
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d018      	beq.n	800a44a <HAL_DMA_IRQHandler+0xbb6>
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d109      	bne.n	800a436 <HAL_DMA_IRQHandler+0xba2>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 813a 	beq.w	800a6a0 <HAL_DMA_IRQHandler+0xe0c>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	4798      	blx	r3
 800a434:	e134      	b.n	800a6a0 <HAL_DMA_IRQHandler+0xe0c>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f000 8130 	beq.w	800a6a0 <HAL_DMA_IRQHandler+0xe0c>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	4798      	blx	r3
 800a448:	e12a      	b.n	800a6a0 <HAL_DMA_IRQHandler+0xe0c>
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	f003 0320 	and.w	r3, r3, #32
 800a450:	2b00      	cmp	r3, #0
 800a452:	f040 8089 	bne.w	800a568 <HAL_DMA_IRQHandler+0xcd4>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a2b      	ldr	r2, [pc, #172]	@ (800a508 <HAL_DMA_IRQHandler+0xc74>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d04a      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a29      	ldr	r2, [pc, #164]	@ (800a50c <HAL_DMA_IRQHandler+0xc78>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d045      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a28      	ldr	r2, [pc, #160]	@ (800a510 <HAL_DMA_IRQHandler+0xc7c>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d040      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a26      	ldr	r2, [pc, #152]	@ (800a514 <HAL_DMA_IRQHandler+0xc80>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d03b      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a25      	ldr	r2, [pc, #148]	@ (800a518 <HAL_DMA_IRQHandler+0xc84>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d036      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a23      	ldr	r2, [pc, #140]	@ (800a51c <HAL_DMA_IRQHandler+0xc88>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d031      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a22      	ldr	r2, [pc, #136]	@ (800a520 <HAL_DMA_IRQHandler+0xc8c>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d02c      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a20      	ldr	r2, [pc, #128]	@ (800a524 <HAL_DMA_IRQHandler+0xc90>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d027      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a1f      	ldr	r2, [pc, #124]	@ (800a528 <HAL_DMA_IRQHandler+0xc94>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d022      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a1d      	ldr	r2, [pc, #116]	@ (800a52c <HAL_DMA_IRQHandler+0xc98>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d01d      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a1c      	ldr	r2, [pc, #112]	@ (800a530 <HAL_DMA_IRQHandler+0xc9c>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d018      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a1a      	ldr	r2, [pc, #104]	@ (800a534 <HAL_DMA_IRQHandler+0xca0>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d013      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a19      	ldr	r2, [pc, #100]	@ (800a538 <HAL_DMA_IRQHandler+0xca4>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d00e      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a17      	ldr	r2, [pc, #92]	@ (800a53c <HAL_DMA_IRQHandler+0xca8>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d009      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a16      	ldr	r2, [pc, #88]	@ (800a540 <HAL_DMA_IRQHandler+0xcac>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d004      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0xc62>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a14      	ldr	r2, [pc, #80]	@ (800a544 <HAL_DMA_IRQHandler+0xcb0>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d128      	bne.n	800a548 <HAL_DMA_IRQHandler+0xcb4>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f022 0214 	bic.w	r2, r2, #20
 800a504:	601a      	str	r2, [r3, #0]
 800a506:	e027      	b.n	800a558 <HAL_DMA_IRQHandler+0xcc4>
 800a508:	40020010 	.word	0x40020010
 800a50c:	40020028 	.word	0x40020028
 800a510:	40020040 	.word	0x40020040
 800a514:	40020058 	.word	0x40020058
 800a518:	40020070 	.word	0x40020070
 800a51c:	40020088 	.word	0x40020088
 800a520:	400200a0 	.word	0x400200a0
 800a524:	400200b8 	.word	0x400200b8
 800a528:	40020410 	.word	0x40020410
 800a52c:	40020428 	.word	0x40020428
 800a530:	40020440 	.word	0x40020440
 800a534:	40020458 	.word	0x40020458
 800a538:	40020470 	.word	0x40020470
 800a53c:	40020488 	.word	0x40020488
 800a540:	400204a0 	.word	0x400204a0
 800a544:	400204b8 	.word	0x400204b8
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f022 020a 	bic.w	r2, r2, #10
 800a556:	601a      	str	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 8097 	beq.w	800a6a0 <HAL_DMA_IRQHandler+0xe0c>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	4798      	blx	r3
 800a57a:	e091      	b.n	800a6a0 <HAL_DMA_IRQHandler+0xe0c>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a580:	f003 031f 	and.w	r3, r3, #31
 800a584:	2208      	movs	r2, #8
 800a586:	409a      	lsls	r2, r3
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	4013      	ands	r3, r2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 8088 	beq.w	800a6a2 <HAL_DMA_IRQHandler+0xe0e>
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f003 0308 	and.w	r3, r3, #8
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 8082 	beq.w	800a6a2 <HAL_DMA_IRQHandler+0xe0e>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a41      	ldr	r2, [pc, #260]	@ (800a6a8 <HAL_DMA_IRQHandler+0xe14>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d04a      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a3f      	ldr	r2, [pc, #252]	@ (800a6ac <HAL_DMA_IRQHandler+0xe18>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d045      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a3e      	ldr	r2, [pc, #248]	@ (800a6b0 <HAL_DMA_IRQHandler+0xe1c>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d040      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a3c      	ldr	r2, [pc, #240]	@ (800a6b4 <HAL_DMA_IRQHandler+0xe20>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d03b      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a3b      	ldr	r2, [pc, #236]	@ (800a6b8 <HAL_DMA_IRQHandler+0xe24>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d036      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a39      	ldr	r2, [pc, #228]	@ (800a6bc <HAL_DMA_IRQHandler+0xe28>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d031      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a38      	ldr	r2, [pc, #224]	@ (800a6c0 <HAL_DMA_IRQHandler+0xe2c>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d02c      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a36      	ldr	r2, [pc, #216]	@ (800a6c4 <HAL_DMA_IRQHandler+0xe30>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d027      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a35      	ldr	r2, [pc, #212]	@ (800a6c8 <HAL_DMA_IRQHandler+0xe34>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d022      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a33      	ldr	r2, [pc, #204]	@ (800a6cc <HAL_DMA_IRQHandler+0xe38>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d01d      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a32      	ldr	r2, [pc, #200]	@ (800a6d0 <HAL_DMA_IRQHandler+0xe3c>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d018      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a30      	ldr	r2, [pc, #192]	@ (800a6d4 <HAL_DMA_IRQHandler+0xe40>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d013      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a2f      	ldr	r2, [pc, #188]	@ (800a6d8 <HAL_DMA_IRQHandler+0xe44>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d00e      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a2d      	ldr	r2, [pc, #180]	@ (800a6dc <HAL_DMA_IRQHandler+0xe48>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d009      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a2c      	ldr	r2, [pc, #176]	@ (800a6e0 <HAL_DMA_IRQHandler+0xe4c>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d004      	beq.n	800a63e <HAL_DMA_IRQHandler+0xdaa>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a2a      	ldr	r2, [pc, #168]	@ (800a6e4 <HAL_DMA_IRQHandler+0xe50>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d108      	bne.n	800a650 <HAL_DMA_IRQHandler+0xdbc>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f022 021c 	bic.w	r2, r2, #28
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	e007      	b.n	800a660 <HAL_DMA_IRQHandler+0xdcc>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f022 020e 	bic.w	r2, r2, #14
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a664:	f003 031f 	and.w	r3, r3, #31
 800a668:	2201      	movs	r2, #1
 800a66a:	409a      	lsls	r2, r3
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	605a      	str	r2, [r3, #4]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	655a      	str	r2, [r3, #84]	@ 0x54
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d009      	beq.n	800a6a2 <HAL_DMA_IRQHandler+0xe0e>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	4798      	blx	r3
 800a696:	e004      	b.n	800a6a2 <HAL_DMA_IRQHandler+0xe0e>
 800a698:	bf00      	nop
 800a69a:	e002      	b.n	800a6a2 <HAL_DMA_IRQHandler+0xe0e>
 800a69c:	bf00      	nop
 800a69e:	e000      	b.n	800a6a2 <HAL_DMA_IRQHandler+0xe0e>
 800a6a0:	bf00      	nop
 800a6a2:	3728      	adds	r7, #40	@ 0x28
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	40020010 	.word	0x40020010
 800a6ac:	40020028 	.word	0x40020028
 800a6b0:	40020040 	.word	0x40020040
 800a6b4:	40020058 	.word	0x40020058
 800a6b8:	40020070 	.word	0x40020070
 800a6bc:	40020088 	.word	0x40020088
 800a6c0:	400200a0 	.word	0x400200a0
 800a6c4:	400200b8 	.word	0x400200b8
 800a6c8:	40020410 	.word	0x40020410
 800a6cc:	40020428 	.word	0x40020428
 800a6d0:	40020440 	.word	0x40020440
 800a6d4:	40020458 	.word	0x40020458
 800a6d8:	40020470 	.word	0x40020470
 800a6dc:	40020488 	.word	0x40020488
 800a6e0:	400204a0 	.word	0x400204a0
 800a6e4:	400204b8 	.word	0x400204b8

0800a6e8 <DMA_SetConfig>:
 800a6e8:	b480      	push	{r7}
 800a6ea:	b087      	sub	sp, #28
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
 800a6f4:	603b      	str	r3, [r7, #0]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a700:	613b      	str	r3, [r7, #16]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a7f      	ldr	r2, [pc, #508]	@ (800a904 <DMA_SetConfig+0x21c>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d072      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a7d      	ldr	r2, [pc, #500]	@ (800a908 <DMA_SetConfig+0x220>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d06d      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a7c      	ldr	r2, [pc, #496]	@ (800a90c <DMA_SetConfig+0x224>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d068      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a7a      	ldr	r2, [pc, #488]	@ (800a910 <DMA_SetConfig+0x228>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d063      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a79      	ldr	r2, [pc, #484]	@ (800a914 <DMA_SetConfig+0x22c>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d05e      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a77      	ldr	r2, [pc, #476]	@ (800a918 <DMA_SetConfig+0x230>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d059      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a76      	ldr	r2, [pc, #472]	@ (800a91c <DMA_SetConfig+0x234>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d054      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a74      	ldr	r2, [pc, #464]	@ (800a920 <DMA_SetConfig+0x238>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d04f      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a73      	ldr	r2, [pc, #460]	@ (800a924 <DMA_SetConfig+0x23c>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d04a      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a71      	ldr	r2, [pc, #452]	@ (800a928 <DMA_SetConfig+0x240>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d045      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a70      	ldr	r2, [pc, #448]	@ (800a92c <DMA_SetConfig+0x244>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d040      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a6e      	ldr	r2, [pc, #440]	@ (800a930 <DMA_SetConfig+0x248>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d03b      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a6d      	ldr	r2, [pc, #436]	@ (800a934 <DMA_SetConfig+0x24c>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d036      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a6b      	ldr	r2, [pc, #428]	@ (800a938 <DMA_SetConfig+0x250>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d031      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a6a      	ldr	r2, [pc, #424]	@ (800a93c <DMA_SetConfig+0x254>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d02c      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a68      	ldr	r2, [pc, #416]	@ (800a940 <DMA_SetConfig+0x258>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d027      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a67      	ldr	r2, [pc, #412]	@ (800a944 <DMA_SetConfig+0x25c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d022      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a65      	ldr	r2, [pc, #404]	@ (800a948 <DMA_SetConfig+0x260>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d01d      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a64      	ldr	r2, [pc, #400]	@ (800a94c <DMA_SetConfig+0x264>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d018      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a62      	ldr	r2, [pc, #392]	@ (800a950 <DMA_SetConfig+0x268>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d013      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a61      	ldr	r2, [pc, #388]	@ (800a954 <DMA_SetConfig+0x26c>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d00e      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a5f      	ldr	r2, [pc, #380]	@ (800a958 <DMA_SetConfig+0x270>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d009      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a5e      	ldr	r2, [pc, #376]	@ (800a95c <DMA_SetConfig+0x274>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d004      	beq.n	800a7f2 <DMA_SetConfig+0x10a>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a5c      	ldr	r2, [pc, #368]	@ (800a960 <DMA_SetConfig+0x278>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d101      	bne.n	800a7f6 <DMA_SetConfig+0x10e>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e000      	b.n	800a7f8 <DMA_SetConfig+0x110>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00d      	beq.n	800a818 <DMA_SetConfig+0x130>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a804:	605a      	str	r2, [r3, #4]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d004      	beq.n	800a818 <DMA_SetConfig+0x130>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a816:	605a      	str	r2, [r3, #4]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a39      	ldr	r2, [pc, #228]	@ (800a904 <DMA_SetConfig+0x21c>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d04a      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a38      	ldr	r2, [pc, #224]	@ (800a908 <DMA_SetConfig+0x220>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d045      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a36      	ldr	r2, [pc, #216]	@ (800a90c <DMA_SetConfig+0x224>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d040      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a35      	ldr	r2, [pc, #212]	@ (800a910 <DMA_SetConfig+0x228>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d03b      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a33      	ldr	r2, [pc, #204]	@ (800a914 <DMA_SetConfig+0x22c>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d036      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a32      	ldr	r2, [pc, #200]	@ (800a918 <DMA_SetConfig+0x230>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d031      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a30      	ldr	r2, [pc, #192]	@ (800a91c <DMA_SetConfig+0x234>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d02c      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a2f      	ldr	r2, [pc, #188]	@ (800a920 <DMA_SetConfig+0x238>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d027      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a2d      	ldr	r2, [pc, #180]	@ (800a924 <DMA_SetConfig+0x23c>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d022      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a2c      	ldr	r2, [pc, #176]	@ (800a928 <DMA_SetConfig+0x240>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d01d      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a2a      	ldr	r2, [pc, #168]	@ (800a92c <DMA_SetConfig+0x244>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d018      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a29      	ldr	r2, [pc, #164]	@ (800a930 <DMA_SetConfig+0x248>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d013      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a27      	ldr	r2, [pc, #156]	@ (800a934 <DMA_SetConfig+0x24c>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d00e      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a26      	ldr	r2, [pc, #152]	@ (800a938 <DMA_SetConfig+0x250>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d009      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a24      	ldr	r2, [pc, #144]	@ (800a93c <DMA_SetConfig+0x254>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d004      	beq.n	800a8b8 <DMA_SetConfig+0x1d0>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a23      	ldr	r2, [pc, #140]	@ (800a940 <DMA_SetConfig+0x258>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d101      	bne.n	800a8bc <DMA_SetConfig+0x1d4>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e000      	b.n	800a8be <DMA_SetConfig+0x1d6>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d059      	beq.n	800a976 <DMA_SetConfig+0x28e>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8c6:	f003 031f 	and.w	r3, r3, #31
 800a8ca:	223f      	movs	r2, #63	@ 0x3f
 800a8cc:	409a      	lsls	r2, r3
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	609a      	str	r2, [r3, #8]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	605a      	str	r2, [r3, #4]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	2b40      	cmp	r3, #64	@ 0x40
 800a8f0:	d138      	bne.n	800a964 <DMA_SetConfig+0x27c>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	609a      	str	r2, [r3, #8]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	60da      	str	r2, [r3, #12]
 800a902:	e086      	b.n	800aa12 <DMA_SetConfig+0x32a>
 800a904:	40020010 	.word	0x40020010
 800a908:	40020028 	.word	0x40020028
 800a90c:	40020040 	.word	0x40020040
 800a910:	40020058 	.word	0x40020058
 800a914:	40020070 	.word	0x40020070
 800a918:	40020088 	.word	0x40020088
 800a91c:	400200a0 	.word	0x400200a0
 800a920:	400200b8 	.word	0x400200b8
 800a924:	40020410 	.word	0x40020410
 800a928:	40020428 	.word	0x40020428
 800a92c:	40020440 	.word	0x40020440
 800a930:	40020458 	.word	0x40020458
 800a934:	40020470 	.word	0x40020470
 800a938:	40020488 	.word	0x40020488
 800a93c:	400204a0 	.word	0x400204a0
 800a940:	400204b8 	.word	0x400204b8
 800a944:	58025408 	.word	0x58025408
 800a948:	5802541c 	.word	0x5802541c
 800a94c:	58025430 	.word	0x58025430
 800a950:	58025444 	.word	0x58025444
 800a954:	58025458 	.word	0x58025458
 800a958:	5802546c 	.word	0x5802546c
 800a95c:	58025480 	.word	0x58025480
 800a960:	58025494 	.word	0x58025494
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	609a      	str	r2, [r3, #8]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	60da      	str	r2, [r3, #12]
 800a974:	e04d      	b.n	800aa12 <DMA_SetConfig+0x32a>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a29      	ldr	r2, [pc, #164]	@ (800aa20 <DMA_SetConfig+0x338>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d022      	beq.n	800a9c6 <DMA_SetConfig+0x2de>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a27      	ldr	r2, [pc, #156]	@ (800aa24 <DMA_SetConfig+0x33c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d01d      	beq.n	800a9c6 <DMA_SetConfig+0x2de>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a26      	ldr	r2, [pc, #152]	@ (800aa28 <DMA_SetConfig+0x340>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d018      	beq.n	800a9c6 <DMA_SetConfig+0x2de>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a24      	ldr	r2, [pc, #144]	@ (800aa2c <DMA_SetConfig+0x344>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d013      	beq.n	800a9c6 <DMA_SetConfig+0x2de>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a23      	ldr	r2, [pc, #140]	@ (800aa30 <DMA_SetConfig+0x348>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d00e      	beq.n	800a9c6 <DMA_SetConfig+0x2de>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a21      	ldr	r2, [pc, #132]	@ (800aa34 <DMA_SetConfig+0x34c>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d009      	beq.n	800a9c6 <DMA_SetConfig+0x2de>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a20      	ldr	r2, [pc, #128]	@ (800aa38 <DMA_SetConfig+0x350>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d004      	beq.n	800a9c6 <DMA_SetConfig+0x2de>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a1e      	ldr	r2, [pc, #120]	@ (800aa3c <DMA_SetConfig+0x354>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d101      	bne.n	800a9ca <DMA_SetConfig+0x2e2>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e000      	b.n	800a9cc <DMA_SetConfig+0x2e4>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d020      	beq.n	800aa12 <DMA_SetConfig+0x32a>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9d4:	f003 031f 	and.w	r3, r3, #31
 800a9d8:	2201      	movs	r2, #1
 800a9da:	409a      	lsls	r2, r3
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	605a      	str	r2, [r3, #4]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	605a      	str	r2, [r3, #4]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	2b40      	cmp	r3, #64	@ 0x40
 800a9ee:	d108      	bne.n	800aa02 <DMA_SetConfig+0x31a>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	609a      	str	r2, [r3, #8]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	60da      	str	r2, [r3, #12]
 800aa00:	e007      	b.n	800aa12 <DMA_SetConfig+0x32a>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	609a      	str	r2, [r3, #8]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	60da      	str	r2, [r3, #12]
 800aa12:	bf00      	nop
 800aa14:	371c      	adds	r7, #28
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	58025408 	.word	0x58025408
 800aa24:	5802541c 	.word	0x5802541c
 800aa28:	58025430 	.word	0x58025430
 800aa2c:	58025444 	.word	0x58025444
 800aa30:	58025458 	.word	0x58025458
 800aa34:	5802546c 	.word	0x5802546c
 800aa38:	58025480 	.word	0x58025480
 800aa3c:	58025494 	.word	0x58025494

0800aa40 <DMA_CalcBaseAndBitshift>:
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a42      	ldr	r2, [pc, #264]	@ (800ab58 <DMA_CalcBaseAndBitshift+0x118>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d04a      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a41      	ldr	r2, [pc, #260]	@ (800ab5c <DMA_CalcBaseAndBitshift+0x11c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d045      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a3f      	ldr	r2, [pc, #252]	@ (800ab60 <DMA_CalcBaseAndBitshift+0x120>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d040      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a3e      	ldr	r2, [pc, #248]	@ (800ab64 <DMA_CalcBaseAndBitshift+0x124>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d03b      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a3c      	ldr	r2, [pc, #240]	@ (800ab68 <DMA_CalcBaseAndBitshift+0x128>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d036      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a3b      	ldr	r2, [pc, #236]	@ (800ab6c <DMA_CalcBaseAndBitshift+0x12c>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d031      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a39      	ldr	r2, [pc, #228]	@ (800ab70 <DMA_CalcBaseAndBitshift+0x130>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d02c      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a38      	ldr	r2, [pc, #224]	@ (800ab74 <DMA_CalcBaseAndBitshift+0x134>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d027      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a36      	ldr	r2, [pc, #216]	@ (800ab78 <DMA_CalcBaseAndBitshift+0x138>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d022      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a35      	ldr	r2, [pc, #212]	@ (800ab7c <DMA_CalcBaseAndBitshift+0x13c>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d01d      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a33      	ldr	r2, [pc, #204]	@ (800ab80 <DMA_CalcBaseAndBitshift+0x140>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d018      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a32      	ldr	r2, [pc, #200]	@ (800ab84 <DMA_CalcBaseAndBitshift+0x144>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d013      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a30      	ldr	r2, [pc, #192]	@ (800ab88 <DMA_CalcBaseAndBitshift+0x148>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d00e      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a2f      	ldr	r2, [pc, #188]	@ (800ab8c <DMA_CalcBaseAndBitshift+0x14c>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d009      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a2d      	ldr	r2, [pc, #180]	@ (800ab90 <DMA_CalcBaseAndBitshift+0x150>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d004      	beq.n	800aae8 <DMA_CalcBaseAndBitshift+0xa8>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a2c      	ldr	r2, [pc, #176]	@ (800ab94 <DMA_CalcBaseAndBitshift+0x154>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d101      	bne.n	800aaec <DMA_CalcBaseAndBitshift+0xac>
 800aae8:	2301      	movs	r3, #1
 800aaea:	e000      	b.n	800aaee <DMA_CalcBaseAndBitshift+0xae>
 800aaec:	2300      	movs	r3, #0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d024      	beq.n	800ab3c <DMA_CalcBaseAndBitshift+0xfc>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	3b10      	subs	r3, #16
 800aafa:	4a27      	ldr	r2, [pc, #156]	@ (800ab98 <DMA_CalcBaseAndBitshift+0x158>)
 800aafc:	fba2 2303 	umull	r2, r3, r2, r3
 800ab00:	091b      	lsrs	r3, r3, #4
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f003 0307 	and.w	r3, r3, #7
 800ab0a:	4a24      	ldr	r2, [pc, #144]	@ (800ab9c <DMA_CalcBaseAndBitshift+0x15c>)
 800ab0c:	5cd3      	ldrb	r3, [r2, r3]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d908      	bls.n	800ab2c <DMA_CalcBaseAndBitshift+0xec>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	4b1f      	ldr	r3, [pc, #124]	@ (800aba0 <DMA_CalcBaseAndBitshift+0x160>)
 800ab22:	4013      	ands	r3, r2
 800ab24:	1d1a      	adds	r2, r3, #4
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	659a      	str	r2, [r3, #88]	@ 0x58
 800ab2a:	e00d      	b.n	800ab48 <DMA_CalcBaseAndBitshift+0x108>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	461a      	mov	r2, r3
 800ab32:	4b1b      	ldr	r3, [pc, #108]	@ (800aba0 <DMA_CalcBaseAndBitshift+0x160>)
 800ab34:	4013      	ands	r3, r2
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab3a:	e005      	b.n	800ab48 <DMA_CalcBaseAndBitshift+0x108>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	659a      	str	r2, [r3, #88]	@ 0x58
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	40020010 	.word	0x40020010
 800ab5c:	40020028 	.word	0x40020028
 800ab60:	40020040 	.word	0x40020040
 800ab64:	40020058 	.word	0x40020058
 800ab68:	40020070 	.word	0x40020070
 800ab6c:	40020088 	.word	0x40020088
 800ab70:	400200a0 	.word	0x400200a0
 800ab74:	400200b8 	.word	0x400200b8
 800ab78:	40020410 	.word	0x40020410
 800ab7c:	40020428 	.word	0x40020428
 800ab80:	40020440 	.word	0x40020440
 800ab84:	40020458 	.word	0x40020458
 800ab88:	40020470 	.word	0x40020470
 800ab8c:	40020488 	.word	0x40020488
 800ab90:	400204a0 	.word	0x400204a0
 800ab94:	400204b8 	.word	0x400204b8
 800ab98:	aaaaaaab 	.word	0xaaaaaaab
 800ab9c:	0801d7c0 	.word	0x0801d7c0
 800aba0:	fffffc00 	.word	0xfffffc00

0800aba4 <DMA_CheckFifoParam>:
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	2300      	movs	r3, #0
 800abae:	73fb      	strb	r3, [r7, #15]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d120      	bne.n	800abfa <DMA_CheckFifoParam+0x56>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d858      	bhi.n	800ac72 <DMA_CheckFifoParam+0xce>
 800abc0:	a201      	add	r2, pc, #4	@ (adr r2, 800abc8 <DMA_CheckFifoParam+0x24>)
 800abc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc6:	bf00      	nop
 800abc8:	0800abd9 	.word	0x0800abd9
 800abcc:	0800abeb 	.word	0x0800abeb
 800abd0:	0800abd9 	.word	0x0800abd9
 800abd4:	0800ac73 	.word	0x0800ac73
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d048      	beq.n	800ac76 <DMA_CheckFifoParam+0xd2>
 800abe4:	2301      	movs	r3, #1
 800abe6:	73fb      	strb	r3, [r7, #15]
 800abe8:	e045      	b.n	800ac76 <DMA_CheckFifoParam+0xd2>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800abf2:	d142      	bne.n	800ac7a <DMA_CheckFifoParam+0xd6>
 800abf4:	2301      	movs	r3, #1
 800abf6:	73fb      	strb	r3, [r7, #15]
 800abf8:	e03f      	b.n	800ac7a <DMA_CheckFifoParam+0xd6>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac02:	d123      	bne.n	800ac4c <DMA_CheckFifoParam+0xa8>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d838      	bhi.n	800ac7e <DMA_CheckFifoParam+0xda>
 800ac0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ac14 <DMA_CheckFifoParam+0x70>)
 800ac0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac12:	bf00      	nop
 800ac14:	0800ac25 	.word	0x0800ac25
 800ac18:	0800ac2b 	.word	0x0800ac2b
 800ac1c:	0800ac25 	.word	0x0800ac25
 800ac20:	0800ac3d 	.word	0x0800ac3d
 800ac24:	2301      	movs	r3, #1
 800ac26:	73fb      	strb	r3, [r7, #15]
 800ac28:	e030      	b.n	800ac8c <DMA_CheckFifoParam+0xe8>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d025      	beq.n	800ac82 <DMA_CheckFifoParam+0xde>
 800ac36:	2301      	movs	r3, #1
 800ac38:	73fb      	strb	r3, [r7, #15]
 800ac3a:	e022      	b.n	800ac82 <DMA_CheckFifoParam+0xde>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800ac44:	d11f      	bne.n	800ac86 <DMA_CheckFifoParam+0xe2>
 800ac46:	2301      	movs	r3, #1
 800ac48:	73fb      	strb	r3, [r7, #15]
 800ac4a:	e01c      	b.n	800ac86 <DMA_CheckFifoParam+0xe2>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d902      	bls.n	800ac5a <DMA_CheckFifoParam+0xb6>
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d003      	beq.n	800ac60 <DMA_CheckFifoParam+0xbc>
 800ac58:	e018      	b.n	800ac8c <DMA_CheckFifoParam+0xe8>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	73fb      	strb	r3, [r7, #15]
 800ac5e:	e015      	b.n	800ac8c <DMA_CheckFifoParam+0xe8>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00e      	beq.n	800ac8a <DMA_CheckFifoParam+0xe6>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	73fb      	strb	r3, [r7, #15]
 800ac70:	e00b      	b.n	800ac8a <DMA_CheckFifoParam+0xe6>
 800ac72:	bf00      	nop
 800ac74:	e00a      	b.n	800ac8c <DMA_CheckFifoParam+0xe8>
 800ac76:	bf00      	nop
 800ac78:	e008      	b.n	800ac8c <DMA_CheckFifoParam+0xe8>
 800ac7a:	bf00      	nop
 800ac7c:	e006      	b.n	800ac8c <DMA_CheckFifoParam+0xe8>
 800ac7e:	bf00      	nop
 800ac80:	e004      	b.n	800ac8c <DMA_CheckFifoParam+0xe8>
 800ac82:	bf00      	nop
 800ac84:	e002      	b.n	800ac8c <DMA_CheckFifoParam+0xe8>
 800ac86:	bf00      	nop
 800ac88:	e000      	b.n	800ac8c <DMA_CheckFifoParam+0xe8>
 800ac8a:	bf00      	nop
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop

0800ac9c <DMA_CalcDMAMUXChannelBaseAndMask>:
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	60bb      	str	r3, [r7, #8]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a38      	ldr	r2, [pc, #224]	@ (800ad90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d022      	beq.n	800acfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a36      	ldr	r2, [pc, #216]	@ (800ad94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d01d      	beq.n	800acfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a35      	ldr	r2, [pc, #212]	@ (800ad98 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d018      	beq.n	800acfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a33      	ldr	r2, [pc, #204]	@ (800ad9c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d013      	beq.n	800acfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a32      	ldr	r2, [pc, #200]	@ (800ada0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d00e      	beq.n	800acfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a30      	ldr	r2, [pc, #192]	@ (800ada4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d009      	beq.n	800acfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a2f      	ldr	r2, [pc, #188]	@ (800ada8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d004      	beq.n	800acfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a2d      	ldr	r2, [pc, #180]	@ (800adac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d101      	bne.n	800acfe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800acfa:	2301      	movs	r3, #1
 800acfc:	e000      	b.n	800ad00 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800acfe:	2300      	movs	r3, #0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d01a      	beq.n	800ad3a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	3b08      	subs	r3, #8
 800ad0c:	4a28      	ldr	r2, [pc, #160]	@ (800adb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800ad0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad12:	091b      	lsrs	r3, r3, #4
 800ad14:	60fb      	str	r3, [r7, #12]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	4b26      	ldr	r3, [pc, #152]	@ (800adb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800ad1a:	4413      	add	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	461a      	mov	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	661a      	str	r2, [r3, #96]	@ 0x60
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a24      	ldr	r2, [pc, #144]	@ (800adb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800ad28:	665a      	str	r2, [r3, #100]	@ 0x64
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f003 031f 	and.w	r3, r3, #31
 800ad30:	2201      	movs	r2, #1
 800ad32:	409a      	lsls	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	669a      	str	r2, [r3, #104]	@ 0x68
 800ad38:	e024      	b.n	800ad84 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	3b10      	subs	r3, #16
 800ad42:	4a1e      	ldr	r2, [pc, #120]	@ (800adbc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800ad44:	fba2 2303 	umull	r2, r3, r2, r3
 800ad48:	091b      	lsrs	r3, r3, #4
 800ad4a:	60fb      	str	r3, [r7, #12]
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	4a1c      	ldr	r2, [pc, #112]	@ (800adc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d806      	bhi.n	800ad62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	4a1b      	ldr	r2, [pc, #108]	@ (800adc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d902      	bls.n	800ad62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	60fb      	str	r3, [r7, #12]
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	4b18      	ldr	r3, [pc, #96]	@ (800adc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800ad66:	4413      	add	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	661a      	str	r2, [r3, #96]	@ 0x60
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a16      	ldr	r2, [pc, #88]	@ (800adcc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800ad74:	665a      	str	r2, [r3, #100]	@ 0x64
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f003 031f 	and.w	r3, r3, #31
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	409a      	lsls	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	669a      	str	r2, [r3, #104]	@ 0x68
 800ad84:	bf00      	nop
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	58025408 	.word	0x58025408
 800ad94:	5802541c 	.word	0x5802541c
 800ad98:	58025430 	.word	0x58025430
 800ad9c:	58025444 	.word	0x58025444
 800ada0:	58025458 	.word	0x58025458
 800ada4:	5802546c 	.word	0x5802546c
 800ada8:	58025480 	.word	0x58025480
 800adac:	58025494 	.word	0x58025494
 800adb0:	cccccccd 	.word	0xcccccccd
 800adb4:	16009600 	.word	0x16009600
 800adb8:	58025880 	.word	0x58025880
 800adbc:	aaaaaaab 	.word	0xaaaaaaab
 800adc0:	400204b8 	.word	0x400204b8
 800adc4:	4002040f 	.word	0x4002040f
 800adc8:	10008200 	.word	0x10008200
 800adcc:	40020880 	.word	0x40020880

0800add0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	b2db      	uxtb	r3, r3
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d04a      	beq.n	800ae7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b08      	cmp	r3, #8
 800adea:	d847      	bhi.n	800ae7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a25      	ldr	r2, [pc, #148]	@ (800ae88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d022      	beq.n	800ae3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a24      	ldr	r2, [pc, #144]	@ (800ae8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d01d      	beq.n	800ae3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a22      	ldr	r2, [pc, #136]	@ (800ae90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d018      	beq.n	800ae3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a21      	ldr	r2, [pc, #132]	@ (800ae94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d013      	beq.n	800ae3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a1f      	ldr	r2, [pc, #124]	@ (800ae98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d00e      	beq.n	800ae3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a1e      	ldr	r2, [pc, #120]	@ (800ae9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d009      	beq.n	800ae3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a1c      	ldr	r2, [pc, #112]	@ (800aea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d004      	beq.n	800ae3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a1b      	ldr	r2, [pc, #108]	@ (800aea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d101      	bne.n	800ae40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e000      	b.n	800ae42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800ae40:	2300      	movs	r3, #0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00a      	beq.n	800ae5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	4b17      	ldr	r3, [pc, #92]	@ (800aea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800ae4a:	4413      	add	r3, r2
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	461a      	mov	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a15      	ldr	r2, [pc, #84]	@ (800aeac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ae58:	671a      	str	r2, [r3, #112]	@ 0x70
 800ae5a:	e009      	b.n	800ae70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	4b14      	ldr	r3, [pc, #80]	@ (800aeb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ae60:	4413      	add	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	461a      	mov	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a11      	ldr	r2, [pc, #68]	@ (800aeb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800ae6e:	671a      	str	r2, [r3, #112]	@ 0x70
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	2201      	movs	r2, #1
 800ae76:	409a      	lsls	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	675a      	str	r2, [r3, #116]	@ 0x74
 800ae7c:	bf00      	nop
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	58025408 	.word	0x58025408
 800ae8c:	5802541c 	.word	0x5802541c
 800ae90:	58025430 	.word	0x58025430
 800ae94:	58025444 	.word	0x58025444
 800ae98:	58025458 	.word	0x58025458
 800ae9c:	5802546c 	.word	0x5802546c
 800aea0:	58025480 	.word	0x58025480
 800aea4:	58025494 	.word	0x58025494
 800aea8:	1600963f 	.word	0x1600963f
 800aeac:	58025940 	.word	0x58025940
 800aeb0:	1000823f 	.word	0x1000823f
 800aeb4:	40020940 	.word	0x40020940

0800aeb8 <HAL_GPIO_Init>:
 800aeb8:	b480      	push	{r7}
 800aeba:	b089      	sub	sp, #36	@ 0x24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
 800aec2:	2300      	movs	r3, #0
 800aec4:	61fb      	str	r3, [r7, #28]
 800aec6:	4b86      	ldr	r3, [pc, #536]	@ (800b0e0 <HAL_GPIO_Init+0x228>)
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	e18c      	b.n	800b1e6 <HAL_GPIO_Init+0x32e>
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	2101      	movs	r1, #1
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	fa01 f303 	lsl.w	r3, r1, r3
 800aed8:	4013      	ands	r3, r2
 800aeda:	613b      	str	r3, [r7, #16]
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 817e 	beq.w	800b1e0 <HAL_GPIO_Init+0x328>
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	f003 0303 	and.w	r3, r3, #3
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d005      	beq.n	800aefc <HAL_GPIO_Init+0x44>
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f003 0303 	and.w	r3, r3, #3
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d130      	bne.n	800af5e <HAL_GPIO_Init+0xa6>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	61bb      	str	r3, [r7, #24]
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	005b      	lsls	r3, r3, #1
 800af06:	2203      	movs	r2, #3
 800af08:	fa02 f303 	lsl.w	r3, r2, r3
 800af0c:	43db      	mvns	r3, r3
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	4013      	ands	r3, r2
 800af12:	61bb      	str	r3, [r7, #24]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	68da      	ldr	r2, [r3, #12]
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	005b      	lsls	r3, r3, #1
 800af1c:	fa02 f303 	lsl.w	r3, r2, r3
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	4313      	orrs	r3, r2
 800af24:	61bb      	str	r3, [r7, #24]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	69ba      	ldr	r2, [r7, #24]
 800af2a:	609a      	str	r2, [r3, #8]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	61bb      	str	r3, [r7, #24]
 800af32:	2201      	movs	r2, #1
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	fa02 f303 	lsl.w	r3, r2, r3
 800af3a:	43db      	mvns	r3, r3
 800af3c:	69ba      	ldr	r2, [r7, #24]
 800af3e:	4013      	ands	r3, r2
 800af40:	61bb      	str	r3, [r7, #24]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	091b      	lsrs	r3, r3, #4
 800af48:	f003 0201 	and.w	r2, r3, #1
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	fa02 f303 	lsl.w	r3, r2, r3
 800af52:	69ba      	ldr	r2, [r7, #24]
 800af54:	4313      	orrs	r3, r2
 800af56:	61bb      	str	r3, [r7, #24]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	69ba      	ldr	r2, [r7, #24]
 800af5c:	605a      	str	r2, [r3, #4]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	f003 0303 	and.w	r3, r3, #3
 800af66:	2b03      	cmp	r3, #3
 800af68:	d017      	beq.n	800af9a <HAL_GPIO_Init+0xe2>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	61bb      	str	r3, [r7, #24]
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	2203      	movs	r2, #3
 800af76:	fa02 f303 	lsl.w	r3, r2, r3
 800af7a:	43db      	mvns	r3, r3
 800af7c:	69ba      	ldr	r2, [r7, #24]
 800af7e:	4013      	ands	r3, r2
 800af80:	61bb      	str	r3, [r7, #24]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	689a      	ldr	r2, [r3, #8]
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	005b      	lsls	r3, r3, #1
 800af8a:	fa02 f303 	lsl.w	r3, r2, r3
 800af8e:	69ba      	ldr	r2, [r7, #24]
 800af90:	4313      	orrs	r3, r2
 800af92:	61bb      	str	r3, [r7, #24]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	69ba      	ldr	r2, [r7, #24]
 800af98:	60da      	str	r2, [r3, #12]
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	f003 0303 	and.w	r3, r3, #3
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d123      	bne.n	800afee <HAL_GPIO_Init+0x136>
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	08da      	lsrs	r2, r3, #3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	3208      	adds	r2, #8
 800afae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb2:	61bb      	str	r3, [r7, #24]
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	220f      	movs	r2, #15
 800afbe:	fa02 f303 	lsl.w	r3, r2, r3
 800afc2:	43db      	mvns	r3, r3
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	4013      	ands	r3, r2
 800afc8:	61bb      	str	r3, [r7, #24]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	691a      	ldr	r2, [r3, #16]
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	f003 0307 	and.w	r3, r3, #7
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	fa02 f303 	lsl.w	r3, r2, r3
 800afda:	69ba      	ldr	r2, [r7, #24]
 800afdc:	4313      	orrs	r3, r2
 800afde:	61bb      	str	r3, [r7, #24]
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	08da      	lsrs	r2, r3, #3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3208      	adds	r2, #8
 800afe8:	69b9      	ldr	r1, [r7, #24]
 800afea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	61bb      	str	r3, [r7, #24]
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	2203      	movs	r2, #3
 800affa:	fa02 f303 	lsl.w	r3, r2, r3
 800affe:	43db      	mvns	r3, r3
 800b000:	69ba      	ldr	r2, [r7, #24]
 800b002:	4013      	ands	r3, r2
 800b004:	61bb      	str	r3, [r7, #24]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	f003 0203 	and.w	r2, r3, #3
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	005b      	lsls	r3, r3, #1
 800b012:	fa02 f303 	lsl.w	r3, r2, r3
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	4313      	orrs	r3, r2
 800b01a:	61bb      	str	r3, [r7, #24]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	69ba      	ldr	r2, [r7, #24]
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f000 80d8 	beq.w	800b1e0 <HAL_GPIO_Init+0x328>
 800b030:	4b2c      	ldr	r3, [pc, #176]	@ (800b0e4 <HAL_GPIO_Init+0x22c>)
 800b032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b036:	4a2b      	ldr	r2, [pc, #172]	@ (800b0e4 <HAL_GPIO_Init+0x22c>)
 800b038:	f043 0302 	orr.w	r3, r3, #2
 800b03c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b040:	4b28      	ldr	r3, [pc, #160]	@ (800b0e4 <HAL_GPIO_Init+0x22c>)
 800b042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b046:	f003 0302 	and.w	r3, r3, #2
 800b04a:	60fb      	str	r3, [r7, #12]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	4a26      	ldr	r2, [pc, #152]	@ (800b0e8 <HAL_GPIO_Init+0x230>)
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	089b      	lsrs	r3, r3, #2
 800b054:	3302      	adds	r3, #2
 800b056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b05a:	61bb      	str	r3, [r7, #24]
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	f003 0303 	and.w	r3, r3, #3
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	220f      	movs	r2, #15
 800b066:	fa02 f303 	lsl.w	r3, r2, r3
 800b06a:	43db      	mvns	r3, r3
 800b06c:	69ba      	ldr	r2, [r7, #24]
 800b06e:	4013      	ands	r3, r2
 800b070:	61bb      	str	r3, [r7, #24]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a1d      	ldr	r2, [pc, #116]	@ (800b0ec <HAL_GPIO_Init+0x234>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d04a      	beq.n	800b110 <HAL_GPIO_Init+0x258>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a1c      	ldr	r2, [pc, #112]	@ (800b0f0 <HAL_GPIO_Init+0x238>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d02b      	beq.n	800b0da <HAL_GPIO_Init+0x222>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a1b      	ldr	r2, [pc, #108]	@ (800b0f4 <HAL_GPIO_Init+0x23c>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d025      	beq.n	800b0d6 <HAL_GPIO_Init+0x21e>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4a1a      	ldr	r2, [pc, #104]	@ (800b0f8 <HAL_GPIO_Init+0x240>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d01f      	beq.n	800b0d2 <HAL_GPIO_Init+0x21a>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a19      	ldr	r2, [pc, #100]	@ (800b0fc <HAL_GPIO_Init+0x244>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d019      	beq.n	800b0ce <HAL_GPIO_Init+0x216>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a18      	ldr	r2, [pc, #96]	@ (800b100 <HAL_GPIO_Init+0x248>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d013      	beq.n	800b0ca <HAL_GPIO_Init+0x212>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a17      	ldr	r2, [pc, #92]	@ (800b104 <HAL_GPIO_Init+0x24c>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d00d      	beq.n	800b0c6 <HAL_GPIO_Init+0x20e>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a16      	ldr	r2, [pc, #88]	@ (800b108 <HAL_GPIO_Init+0x250>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d007      	beq.n	800b0c2 <HAL_GPIO_Init+0x20a>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a15      	ldr	r2, [pc, #84]	@ (800b10c <HAL_GPIO_Init+0x254>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d101      	bne.n	800b0be <HAL_GPIO_Init+0x206>
 800b0ba:	2309      	movs	r3, #9
 800b0bc:	e029      	b.n	800b112 <HAL_GPIO_Init+0x25a>
 800b0be:	230a      	movs	r3, #10
 800b0c0:	e027      	b.n	800b112 <HAL_GPIO_Init+0x25a>
 800b0c2:	2307      	movs	r3, #7
 800b0c4:	e025      	b.n	800b112 <HAL_GPIO_Init+0x25a>
 800b0c6:	2306      	movs	r3, #6
 800b0c8:	e023      	b.n	800b112 <HAL_GPIO_Init+0x25a>
 800b0ca:	2305      	movs	r3, #5
 800b0cc:	e021      	b.n	800b112 <HAL_GPIO_Init+0x25a>
 800b0ce:	2304      	movs	r3, #4
 800b0d0:	e01f      	b.n	800b112 <HAL_GPIO_Init+0x25a>
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	e01d      	b.n	800b112 <HAL_GPIO_Init+0x25a>
 800b0d6:	2302      	movs	r3, #2
 800b0d8:	e01b      	b.n	800b112 <HAL_GPIO_Init+0x25a>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e019      	b.n	800b112 <HAL_GPIO_Init+0x25a>
 800b0de:	bf00      	nop
 800b0e0:	58000080 	.word	0x58000080
 800b0e4:	58024400 	.word	0x58024400
 800b0e8:	58000400 	.word	0x58000400
 800b0ec:	58020000 	.word	0x58020000
 800b0f0:	58020400 	.word	0x58020400
 800b0f4:	58020800 	.word	0x58020800
 800b0f8:	58020c00 	.word	0x58020c00
 800b0fc:	58021000 	.word	0x58021000
 800b100:	58021400 	.word	0x58021400
 800b104:	58021800 	.word	0x58021800
 800b108:	58021c00 	.word	0x58021c00
 800b10c:	58022400 	.word	0x58022400
 800b110:	2300      	movs	r3, #0
 800b112:	69fa      	ldr	r2, [r7, #28]
 800b114:	f002 0203 	and.w	r2, r2, #3
 800b118:	0092      	lsls	r2, r2, #2
 800b11a:	4093      	lsls	r3, r2
 800b11c:	69ba      	ldr	r2, [r7, #24]
 800b11e:	4313      	orrs	r3, r2
 800b120:	61bb      	str	r3, [r7, #24]
 800b122:	4938      	ldr	r1, [pc, #224]	@ (800b204 <HAL_GPIO_Init+0x34c>)
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	089b      	lsrs	r3, r3, #2
 800b128:	3302      	adds	r3, #2
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	61bb      	str	r3, [r7, #24]
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	43db      	mvns	r3, r3
 800b13c:	69ba      	ldr	r2, [r7, #24]
 800b13e:	4013      	ands	r3, r2
 800b140:	61bb      	str	r3, [r7, #24]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <HAL_GPIO_Init+0x29e>
 800b14e:	69ba      	ldr	r2, [r7, #24]
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	4313      	orrs	r3, r2
 800b154:	61bb      	str	r3, [r7, #24]
 800b156:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	6013      	str	r3, [r2, #0]
 800b15e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	61bb      	str	r3, [r7, #24]
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	43db      	mvns	r3, r3
 800b16a:	69ba      	ldr	r2, [r7, #24]
 800b16c:	4013      	ands	r3, r2
 800b16e:	61bb      	str	r3, [r7, #24]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <HAL_GPIO_Init+0x2cc>
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	4313      	orrs	r3, r2
 800b182:	61bb      	str	r3, [r7, #24]
 800b184:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	6053      	str	r3, [r2, #4]
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	61bb      	str	r3, [r7, #24]
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	43db      	mvns	r3, r3
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	4013      	ands	r3, r2
 800b19a:	61bb      	str	r3, [r7, #24]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <HAL_GPIO_Init+0x2f8>
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	61bb      	str	r3, [r7, #24]
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	605a      	str	r2, [r3, #4]
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	61bb      	str	r3, [r7, #24]
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	43db      	mvns	r3, r3
 800b1c0:	69ba      	ldr	r2, [r7, #24]
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	61bb      	str	r3, [r7, #24]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d003      	beq.n	800b1da <HAL_GPIO_Init+0x322>
 800b1d2:	69ba      	ldr	r2, [r7, #24]
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	61bb      	str	r3, [r7, #24]
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	69ba      	ldr	r2, [r7, #24]
 800b1de:	601a      	str	r2, [r3, #0]
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	61fb      	str	r3, [r7, #28]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f47f ae6b 	bne.w	800aecc <HAL_GPIO_Init+0x14>
 800b1f6:	bf00      	nop
 800b1f8:	bf00      	nop
 800b1fa:	3724      	adds	r7, #36	@ 0x24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	58000400 	.word	0x58000400

0800b208 <HAL_GPIO_ReadPin>:
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	460b      	mov	r3, r1
 800b212:	807b      	strh	r3, [r7, #2]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	691a      	ldr	r2, [r3, #16]
 800b218:	887b      	ldrh	r3, [r7, #2]
 800b21a:	4013      	ands	r3, r2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <HAL_GPIO_ReadPin+0x1e>
 800b220:	2301      	movs	r3, #1
 800b222:	73fb      	strb	r3, [r7, #15]
 800b224:	e001      	b.n	800b22a <HAL_GPIO_ReadPin+0x22>
 800b226:	2300      	movs	r3, #0
 800b228:	73fb      	strb	r3, [r7, #15]
 800b22a:	7bfb      	ldrb	r3, [r7, #15]
 800b22c:	4618      	mov	r0, r3
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_GPIO_WritePin>:
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	460b      	mov	r3, r1
 800b242:	807b      	strh	r3, [r7, #2]
 800b244:	4613      	mov	r3, r2
 800b246:	707b      	strb	r3, [r7, #1]
 800b248:	787b      	ldrb	r3, [r7, #1]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d003      	beq.n	800b256 <HAL_GPIO_WritePin+0x1e>
 800b24e:	887a      	ldrh	r2, [r7, #2]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	619a      	str	r2, [r3, #24]
 800b254:	e003      	b.n	800b25e <HAL_GPIO_WritePin+0x26>
 800b256:	887b      	ldrh	r3, [r7, #2]
 800b258:	041a      	lsls	r2, r3, #16
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	619a      	str	r2, [r3, #24]
 800b25e:	bf00      	nop
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <HAL_GPIO_EXTI_IRQHandler>:
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b082      	sub	sp, #8
 800b26e:	af00      	add	r7, sp, #0
 800b270:	4603      	mov	r3, r0
 800b272:	80fb      	strh	r3, [r7, #6]
 800b274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b278:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b27c:	88fb      	ldrh	r3, [r7, #6]
 800b27e:	4013      	ands	r3, r2
 800b280:	2b00      	cmp	r3, #0
 800b282:	d008      	beq.n	800b296 <HAL_GPIO_EXTI_IRQHandler+0x2c>
 800b284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b288:	88fb      	ldrh	r3, [r7, #6]
 800b28a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800b28e:	88fb      	ldrh	r3, [r7, #6]
 800b290:	4618      	mov	r0, r3
 800b292:	f7f5 ffe5 	bl	8001260 <HAL_GPIO_EXTI_Callback>
 800b296:	bf00      	nop
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
	...

0800b2a0 <HAL_I2C_Init>:
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d101      	bne.n	800b2b2 <HAL_I2C_Init+0x12>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e08b      	b.n	800b3ca <HAL_I2C_Init+0x12a>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d106      	bne.n	800b2cc <HAL_I2C_Init+0x2c>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7f7 f92c 	bl	8002524 <HAL_I2C_MspInit>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2224      	movs	r2, #36	@ 0x24
 800b2d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f022 0201 	bic.w	r2, r2, #1
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b2f0:	611a      	str	r2, [r3, #16]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	689a      	ldr	r2, [r3, #8]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b300:	609a      	str	r2, [r3, #8]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d107      	bne.n	800b31a <HAL_I2C_Init+0x7a>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	689a      	ldr	r2, [r3, #8]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b316:	609a      	str	r2, [r3, #8]
 800b318:	e006      	b.n	800b328 <HAL_I2C_Init+0x88>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	689a      	ldr	r2, [r3, #8]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b326:	609a      	str	r2, [r3, #8]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d108      	bne.n	800b342 <HAL_I2C_Init+0xa2>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b33e:	605a      	str	r2, [r3, #4]
 800b340:	e007      	b.n	800b352 <HAL_I2C_Init+0xb2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b350:	605a      	str	r2, [r3, #4]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6859      	ldr	r1, [r3, #4]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	4b1d      	ldr	r3, [pc, #116]	@ (800b3d4 <HAL_I2C_Init+0x134>)
 800b35e:	430b      	orrs	r3, r1
 800b360:	6053      	str	r3, [r2, #4]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68da      	ldr	r2, [r3, #12]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b370:	60da      	str	r2, [r3, #12]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	691a      	ldr	r2, [r3, #16]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	ea42 0103 	orr.w	r1, r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	021a      	lsls	r2, r3, #8
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	430a      	orrs	r2, r1
 800b38a:	60da      	str	r2, [r3, #12]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	69d9      	ldr	r1, [r3, #28]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a1a      	ldr	r2, [r3, #32]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	430a      	orrs	r2, r1
 800b39a:	601a      	str	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f042 0201 	orr.w	r2, r2, #1
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	645a      	str	r2, [r3, #68]	@ 0x44
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2220      	movs	r2, #32
 800b3b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	631a      	str	r2, [r3, #48]	@ 0x30
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3708      	adds	r7, #8
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	02008000 	.word	0x02008000

0800b3d8 <HAL_I2CEx_ConfigAnalogFilter>:
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b20      	cmp	r3, #32
 800b3ec:	d138      	bne.n	800b460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d101      	bne.n	800b3fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	e032      	b.n	800b462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2224      	movs	r2, #36	@ 0x24
 800b408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f022 0201 	bic.w	r2, r2, #1
 800b41a:	601a      	str	r2, [r3, #0]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6819      	ldr	r1, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	430a      	orrs	r2, r1
 800b43a:	601a      	str	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f042 0201 	orr.w	r2, r2, #1
 800b44a:	601a      	str	r2, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2220      	movs	r2, #32
 800b450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b45c:	2300      	movs	r3, #0
 800b45e:	e000      	b.n	800b462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b460:	2302      	movs	r3, #2
 800b462:	4618      	mov	r0, r3
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <HAL_I2CEx_ConfigDigitalFilter>:
 800b46e:	b480      	push	{r7}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b20      	cmp	r3, #32
 800b482:	d139      	bne.n	800b4f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d101      	bne.n	800b492 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b48e:	2302      	movs	r3, #2
 800b490:	e033      	b.n	800b4fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2224      	movs	r2, #36	@ 0x24
 800b49e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f022 0201 	bic.w	r2, r2, #1
 800b4b0:	601a      	str	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	60fb      	str	r3, [r7, #12]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b4c0:	60fb      	str	r3, [r7, #12]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	021b      	lsls	r3, r3, #8
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	601a      	str	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f042 0201 	orr.w	r2, r2, #1
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2220      	movs	r2, #32
 800b4e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	e000      	b.n	800b4fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <HAL_PCD_Init>:
 800b506:	b580      	push	{r7, lr}
 800b508:	b086      	sub	sp, #24
 800b50a:	af02      	add	r7, sp, #8
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d101      	bne.n	800b518 <HAL_PCD_Init+0x12>
 800b514:	2301      	movs	r3, #1
 800b516:	e0fe      	b.n	800b716 <HAL_PCD_Init+0x210>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b00      	cmp	r3, #0
 800b522:	d106      	bne.n	800b532 <HAL_PCD_Init+0x2c>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f00c fb5f 	bl	8017bf0 <HAL_PCD_MspInit>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2203      	movs	r2, #3
 800b536:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4618      	mov	r0, r3
 800b540:	f008 ff1b 	bl	801437a <USB_DisableGlobalInt>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6818      	ldr	r0, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	7c1a      	ldrb	r2, [r3, #16]
 800b54c:	f88d 2000 	strb.w	r2, [sp]
 800b550:	3304      	adds	r3, #4
 800b552:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b554:	f008 fdec 	bl	8014130 <USB_CoreInit>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d005      	beq.n	800b56a <HAL_PCD_Init+0x64>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2202      	movs	r2, #2
 800b562:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 800b566:	2301      	movs	r3, #1
 800b568:	e0d5      	b.n	800b716 <HAL_PCD_Init+0x210>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2100      	movs	r1, #0
 800b570:	4618      	mov	r0, r3
 800b572:	f008 ff13 	bl	801439c <USB_SetCurrentMode>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d005      	beq.n	800b588 <HAL_PCD_Init+0x82>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2202      	movs	r2, #2
 800b580:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 800b584:	2301      	movs	r3, #1
 800b586:	e0c6      	b.n	800b716 <HAL_PCD_Init+0x210>
 800b588:	2300      	movs	r3, #0
 800b58a:	73fb      	strb	r3, [r7, #15]
 800b58c:	e04a      	b.n	800b624 <HAL_PCD_Init+0x11e>
 800b58e:	7bfa      	ldrb	r2, [r7, #15]
 800b590:	6879      	ldr	r1, [r7, #4]
 800b592:	4613      	mov	r3, r2
 800b594:	00db      	lsls	r3, r3, #3
 800b596:	4413      	add	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	440b      	add	r3, r1
 800b59c:	3315      	adds	r3, #21
 800b59e:	2201      	movs	r2, #1
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	7bfa      	ldrb	r2, [r7, #15]
 800b5a4:	6879      	ldr	r1, [r7, #4]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	00db      	lsls	r3, r3, #3
 800b5aa:	4413      	add	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	440b      	add	r3, r1
 800b5b0:	3314      	adds	r3, #20
 800b5b2:	7bfa      	ldrb	r2, [r7, #15]
 800b5b4:	701a      	strb	r2, [r3, #0]
 800b5b6:	7bfa      	ldrb	r2, [r7, #15]
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	b298      	uxth	r0, r3
 800b5bc:	6879      	ldr	r1, [r7, #4]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	00db      	lsls	r3, r3, #3
 800b5c2:	4413      	add	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	440b      	add	r3, r1
 800b5c8:	332e      	adds	r3, #46	@ 0x2e
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	801a      	strh	r2, [r3, #0]
 800b5ce:	7bfa      	ldrb	r2, [r7, #15]
 800b5d0:	6879      	ldr	r1, [r7, #4]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	00db      	lsls	r3, r3, #3
 800b5d6:	4413      	add	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	440b      	add	r3, r1
 800b5dc:	3318      	adds	r3, #24
 800b5de:	2200      	movs	r2, #0
 800b5e0:	701a      	strb	r2, [r3, #0]
 800b5e2:	7bfa      	ldrb	r2, [r7, #15]
 800b5e4:	6879      	ldr	r1, [r7, #4]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	4413      	add	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	440b      	add	r3, r1
 800b5f0:	331c      	adds	r3, #28
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	7bfa      	ldrb	r2, [r7, #15]
 800b5f8:	6879      	ldr	r1, [r7, #4]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	4413      	add	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	440b      	add	r3, r1
 800b604:	3320      	adds	r3, #32
 800b606:	2200      	movs	r2, #0
 800b608:	601a      	str	r2, [r3, #0]
 800b60a:	7bfa      	ldrb	r2, [r7, #15]
 800b60c:	6879      	ldr	r1, [r7, #4]
 800b60e:	4613      	mov	r3, r2
 800b610:	00db      	lsls	r3, r3, #3
 800b612:	4413      	add	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	440b      	add	r3, r1
 800b618:	3324      	adds	r3, #36	@ 0x24
 800b61a:	2200      	movs	r2, #0
 800b61c:	601a      	str	r2, [r3, #0]
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
 800b620:	3301      	adds	r3, #1
 800b622:	73fb      	strb	r3, [r7, #15]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	791b      	ldrb	r3, [r3, #4]
 800b628:	7bfa      	ldrb	r2, [r7, #15]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d3af      	bcc.n	800b58e <HAL_PCD_Init+0x88>
 800b62e:	2300      	movs	r3, #0
 800b630:	73fb      	strb	r3, [r7, #15]
 800b632:	e044      	b.n	800b6be <HAL_PCD_Init+0x1b8>
 800b634:	7bfa      	ldrb	r2, [r7, #15]
 800b636:	6879      	ldr	r1, [r7, #4]
 800b638:	4613      	mov	r3, r2
 800b63a:	00db      	lsls	r3, r3, #3
 800b63c:	4413      	add	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	440b      	add	r3, r1
 800b642:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b646:	2200      	movs	r2, #0
 800b648:	701a      	strb	r2, [r3, #0]
 800b64a:	7bfa      	ldrb	r2, [r7, #15]
 800b64c:	6879      	ldr	r1, [r7, #4]
 800b64e:	4613      	mov	r3, r2
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	4413      	add	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	440b      	add	r3, r1
 800b658:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b65c:	7bfa      	ldrb	r2, [r7, #15]
 800b65e:	701a      	strb	r2, [r3, #0]
 800b660:	7bfa      	ldrb	r2, [r7, #15]
 800b662:	6879      	ldr	r1, [r7, #4]
 800b664:	4613      	mov	r3, r2
 800b666:	00db      	lsls	r3, r3, #3
 800b668:	4413      	add	r3, r2
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	440b      	add	r3, r1
 800b66e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b672:	2200      	movs	r2, #0
 800b674:	701a      	strb	r2, [r3, #0]
 800b676:	7bfa      	ldrb	r2, [r7, #15]
 800b678:	6879      	ldr	r1, [r7, #4]
 800b67a:	4613      	mov	r3, r2
 800b67c:	00db      	lsls	r3, r3, #3
 800b67e:	4413      	add	r3, r2
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	440b      	add	r3, r1
 800b684:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b688:	2200      	movs	r2, #0
 800b68a:	601a      	str	r2, [r3, #0]
 800b68c:	7bfa      	ldrb	r2, [r7, #15]
 800b68e:	6879      	ldr	r1, [r7, #4]
 800b690:	4613      	mov	r3, r2
 800b692:	00db      	lsls	r3, r3, #3
 800b694:	4413      	add	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	440b      	add	r3, r1
 800b69a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b69e:	2200      	movs	r2, #0
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	7bfa      	ldrb	r2, [r7, #15]
 800b6a4:	6879      	ldr	r1, [r7, #4]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	00db      	lsls	r3, r3, #3
 800b6aa:	4413      	add	r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	440b      	add	r3, r1
 800b6b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	73fb      	strb	r3, [r7, #15]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	791b      	ldrb	r3, [r3, #4]
 800b6c2:	7bfa      	ldrb	r2, [r7, #15]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d3b5      	bcc.n	800b634 <HAL_PCD_Init+0x12e>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6818      	ldr	r0, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	7c1a      	ldrb	r2, [r3, #16]
 800b6d0:	f88d 2000 	strb.w	r2, [sp]
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6d8:	f008 feac 	bl	8014434 <USB_DevInit>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d005      	beq.n	800b6ee <HAL_PCD_Init+0x1e8>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2202      	movs	r2, #2
 800b6e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e013      	b.n	800b716 <HAL_PCD_Init+0x210>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	745a      	strb	r2, [r3, #17]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	7b1b      	ldrb	r3, [r3, #12]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d102      	bne.n	800b70a <HAL_PCD_Init+0x204>
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f001 f96d 	bl	800c9e4 <HAL_PCDEx_ActivateLPM>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4618      	mov	r0, r3
 800b710:	f009 feeb 	bl	80154ea <USB_DevDisconnect>
 800b714:	2300      	movs	r3, #0
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <HAL_PCD_Start>:
 800b71e:	b580      	push	{r7, lr}
 800b720:	b084      	sub	sp, #16
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b732:	2b01      	cmp	r3, #1
 800b734:	d101      	bne.n	800b73a <HAL_PCD_Start+0x1c>
 800b736:	2302      	movs	r3, #2
 800b738:	e022      	b.n	800b780 <HAL_PCD_Start+0x62>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d009      	beq.n	800b762 <HAL_PCD_Start+0x44>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	7b5b      	ldrb	r3, [r3, #13]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d105      	bne.n	800b762 <HAL_PCD_Start+0x44>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b75a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	639a      	str	r2, [r3, #56]	@ 0x38
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4618      	mov	r0, r3
 800b768:	f008 fdf6 	bl	8014358 <USB_EnableGlobalInt>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4618      	mov	r0, r3
 800b772:	f009 fe99 	bl	80154a8 <USB_DevConnect>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800b77e:	2300      	movs	r3, #0
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <HAL_PCD_IRQHandler>:
 800b788:	b590      	push	{r4, r7, lr}
 800b78a:	b08d      	sub	sp, #52	@ 0x34
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	623b      	str	r3, [r7, #32]
 800b796:	6a3b      	ldr	r3, [r7, #32]
 800b798:	61fb      	str	r3, [r7, #28]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f009 ff57 	bl	8015652 <USB_GetMode>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f040 84b9 	bne.w	800c11e <HAL_PCD_IRQHandler+0x996>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f009 febb 	bl	801552c <USB_ReadInterrupts>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f000 84af 	beq.w	800c11c <HAL_PCD_IRQHandler+0x994>
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	0a1b      	lsrs	r3, r3, #8
 800b7c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f009 fea8 	bl	801552c <USB_ReadInterrupts>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	f003 0302 	and.w	r3, r3, #2
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d107      	bne.n	800b7f6 <HAL_PCD_IRQHandler+0x6e>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	695a      	ldr	r2, [r3, #20]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f002 0202 	and.w	r2, r2, #2
 800b7f4:	615a      	str	r2, [r3, #20]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f009 fe96 	bl	801552c <USB_ReadInterrupts>
 800b800:	4603      	mov	r3, r0
 800b802:	f003 0310 	and.w	r3, r3, #16
 800b806:	2b10      	cmp	r3, #16
 800b808:	d161      	bne.n	800b8ce <HAL_PCD_IRQHandler+0x146>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	699a      	ldr	r2, [r3, #24]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f022 0210 	bic.w	r2, r2, #16
 800b818:	619a      	str	r2, [r3, #24]
 800b81a:	6a3b      	ldr	r3, [r7, #32]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	61bb      	str	r3, [r7, #24]
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	f003 020f 	and.w	r2, r3, #15
 800b826:	4613      	mov	r3, r2
 800b828:	00db      	lsls	r3, r3, #3
 800b82a:	4413      	add	r3, r2
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	4413      	add	r3, r2
 800b836:	3304      	adds	r3, #4
 800b838:	617b      	str	r3, [r7, #20]
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	0c5b      	lsrs	r3, r3, #17
 800b83e:	f003 030f 	and.w	r3, r3, #15
 800b842:	2b02      	cmp	r3, #2
 800b844:	d124      	bne.n	800b890 <HAL_PCD_IRQHandler+0x108>
 800b846:	69ba      	ldr	r2, [r7, #24]
 800b848:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b84c:	4013      	ands	r3, r2
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d035      	beq.n	800b8be <HAL_PCD_IRQHandler+0x136>
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	68d9      	ldr	r1, [r3, #12]
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	091b      	lsrs	r3, r3, #4
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b860:	b29b      	uxth	r3, r3
 800b862:	461a      	mov	r2, r3
 800b864:	6a38      	ldr	r0, [r7, #32]
 800b866:	f009 fccd 	bl	8015204 <USB_ReadPacket>
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	68da      	ldr	r2, [r3, #12]
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	091b      	lsrs	r3, r3, #4
 800b872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b876:	441a      	add	r2, r3
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	60da      	str	r2, [r3, #12]
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	695a      	ldr	r2, [r3, #20]
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	091b      	lsrs	r3, r3, #4
 800b884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b888:	441a      	add	r2, r3
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	615a      	str	r2, [r3, #20]
 800b88e:	e016      	b.n	800b8be <HAL_PCD_IRQHandler+0x136>
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	0c5b      	lsrs	r3, r3, #17
 800b894:	f003 030f 	and.w	r3, r3, #15
 800b898:	2b06      	cmp	r3, #6
 800b89a:	d110      	bne.n	800b8be <HAL_PCD_IRQHandler+0x136>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b8a2:	2208      	movs	r2, #8
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6a38      	ldr	r0, [r7, #32]
 800b8a8:	f009 fcac 	bl	8015204 <USB_ReadPacket>
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	695a      	ldr	r2, [r3, #20]
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	091b      	lsrs	r3, r3, #4
 800b8b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8b8:	441a      	add	r2, r3
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	615a      	str	r2, [r3, #20]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	699a      	ldr	r2, [r3, #24]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f042 0210 	orr.w	r2, r2, #16
 800b8cc:	619a      	str	r2, [r3, #24]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f009 fe2a 	bl	801552c <USB_ReadInterrupts>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b8de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b8e2:	f040 80a7 	bne.w	800ba34 <HAL_PCD_IRQHandler+0x2ac>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f009 fe2f 	bl	8015552 <USB_ReadDevAllOutEpInterrupt>
 800b8f4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b8f6:	e099      	b.n	800ba2c <HAL_PCD_IRQHandler+0x2a4>
 800b8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8fa:	f003 0301 	and.w	r3, r3, #1
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f000 808e 	beq.w	800ba20 <HAL_PCD_IRQHandler+0x298>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b90a:	b2d2      	uxtb	r2, r2
 800b90c:	4611      	mov	r1, r2
 800b90e:	4618      	mov	r0, r3
 800b910:	f009 fe53 	bl	80155ba <USB_ReadDevOutEPInterrupt>
 800b914:	6138      	str	r0, [r7, #16]
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f003 0301 	and.w	r3, r3, #1
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00c      	beq.n	800b93a <HAL_PCD_IRQHandler+0x1b2>
 800b920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b92c:	461a      	mov	r2, r3
 800b92e:	2301      	movs	r3, #1
 800b930:	6093      	str	r3, [r2, #8]
 800b932:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fecf 	bl	800c6d8 <PCD_EP_OutXfrComplete_int>
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	f003 0308 	and.w	r3, r3, #8
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00c      	beq.n	800b95e <HAL_PCD_IRQHandler+0x1d6>
 800b944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b946:	015a      	lsls	r2, r3, #5
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	4413      	add	r3, r2
 800b94c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b950:	461a      	mov	r2, r3
 800b952:	2308      	movs	r3, #8
 800b954:	6093      	str	r3, [r2, #8]
 800b956:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 ffa5 	bl	800c8a8 <PCD_EP_OutSetupPacket_int>
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	f003 0310 	and.w	r3, r3, #16
 800b964:	2b00      	cmp	r3, #0
 800b966:	d008      	beq.n	800b97a <HAL_PCD_IRQHandler+0x1f2>
 800b968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96a:	015a      	lsls	r2, r3, #5
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	4413      	add	r3, r2
 800b970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b974:	461a      	mov	r2, r3
 800b976:	2310      	movs	r3, #16
 800b978:	6093      	str	r3, [r2, #8]
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	f003 0302 	and.w	r3, r3, #2
 800b980:	2b00      	cmp	r3, #0
 800b982:	d030      	beq.n	800b9e6 <HAL_PCD_IRQHandler+0x25e>
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	695b      	ldr	r3, [r3, #20]
 800b988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b98c:	2b80      	cmp	r3, #128	@ 0x80
 800b98e:	d109      	bne.n	800b9a4 <HAL_PCD_IRQHandler+0x21c>
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	69fa      	ldr	r2, [r7, #28]
 800b99a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b99e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b9a2:	6053      	str	r3, [r2, #4]
 800b9a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	00db      	lsls	r3, r3, #3
 800b9aa:	4413      	add	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	3304      	adds	r3, #4
 800b9b8:	617b      	str	r3, [r7, #20]
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	78db      	ldrb	r3, [r3, #3]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d108      	bne.n	800b9d4 <HAL_PCD_IRQHandler+0x24c>
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	70da      	strb	r2, [r3, #3]
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f00c fa06 	bl	8017de0 <HAL_PCD_ISOOUTIncompleteCallback>
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d6:	015a      	lsls	r2, r3, #5
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	4413      	add	r3, r2
 800b9dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	6093      	str	r3, [r2, #8]
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	f003 0320 	and.w	r3, r3, #32
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d008      	beq.n	800ba02 <HAL_PCD_IRQHandler+0x27a>
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f2:	015a      	lsls	r2, r3, #5
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	2320      	movs	r3, #32
 800ba00:	6093      	str	r3, [r2, #8]
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d009      	beq.n	800ba20 <HAL_PCD_IRQHandler+0x298>
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0e:	015a      	lsls	r2, r3, #5
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	4413      	add	r3, r2
 800ba14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba18:	461a      	mov	r2, r3
 800ba1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba1e:	6093      	str	r3, [r2, #8]
 800ba20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba22:	3301      	adds	r3, #1
 800ba24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba28:	085b      	lsrs	r3, r3, #1
 800ba2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f47f af62 	bne.w	800b8f8 <HAL_PCD_IRQHandler+0x170>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f009 fd77 	bl	801552c <USB_ReadInterrupts>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ba44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba48:	f040 80db 	bne.w	800bc02 <HAL_PCD_IRQHandler+0x47a>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4618      	mov	r0, r3
 800ba52:	f009 fd98 	bl	8015586 <USB_ReadDevAllInEpInterrupt>
 800ba56:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ba58:	2300      	movs	r3, #0
 800ba5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba5c:	e0cd      	b.n	800bbfa <HAL_PCD_IRQHandler+0x472>
 800ba5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f000 80c2 	beq.w	800bbee <HAL_PCD_IRQHandler+0x466>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba70:	b2d2      	uxtb	r2, r2
 800ba72:	4611      	mov	r1, r2
 800ba74:	4618      	mov	r0, r3
 800ba76:	f009 fdbe 	bl	80155f6 <USB_ReadDevInEPInterrupt>
 800ba7a:	6138      	str	r0, [r7, #16]
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	f003 0301 	and.w	r3, r3, #1
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d057      	beq.n	800bb36 <HAL_PCD_IRQHandler+0x3ae>
 800ba86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba88:	f003 030f 	and.w	r3, r3, #15
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	43db      	mvns	r3, r3
 800baa0:	69f9      	ldr	r1, [r7, #28]
 800baa2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800baa6:	4013      	ands	r3, r2
 800baa8:	634b      	str	r3, [r1, #52]	@ 0x34
 800baaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baac:	015a      	lsls	r2, r3, #5
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	4413      	add	r3, r2
 800bab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bab6:	461a      	mov	r2, r3
 800bab8:	2301      	movs	r3, #1
 800baba:	6093      	str	r3, [r2, #8]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	799b      	ldrb	r3, [r3, #6]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d132      	bne.n	800bb2a <HAL_PCD_IRQHandler+0x3a2>
 800bac4:	6879      	ldr	r1, [r7, #4]
 800bac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bac8:	4613      	mov	r3, r2
 800baca:	00db      	lsls	r3, r3, #3
 800bacc:	4413      	add	r3, r2
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	440b      	add	r3, r1
 800bad2:	3320      	adds	r3, #32
 800bad4:	6819      	ldr	r1, [r3, #0]
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bada:	4613      	mov	r3, r2
 800badc:	00db      	lsls	r3, r3, #3
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	4403      	add	r3, r0
 800bae4:	331c      	adds	r3, #28
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4419      	add	r1, r3
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baee:	4613      	mov	r3, r2
 800baf0:	00db      	lsls	r3, r3, #3
 800baf2:	4413      	add	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4403      	add	r3, r0
 800baf8:	3320      	adds	r3, #32
 800bafa:	6019      	str	r1, [r3, #0]
 800bafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d113      	bne.n	800bb2a <HAL_PCD_IRQHandler+0x3a2>
 800bb02:	6879      	ldr	r1, [r7, #4]
 800bb04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb06:	4613      	mov	r3, r2
 800bb08:	00db      	lsls	r3, r3, #3
 800bb0a:	4413      	add	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	440b      	add	r3, r1
 800bb10:	3324      	adds	r3, #36	@ 0x24
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d108      	bne.n	800bb2a <HAL_PCD_IRQHandler+0x3a2>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6818      	ldr	r0, [r3, #0]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bb22:	461a      	mov	r2, r3
 800bb24:	2101      	movs	r1, #1
 800bb26:	f009 fdc7 	bl	80156b8 <USB_EP0_OutStart>
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	4619      	mov	r1, r3
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f00c f8d0 	bl	8017cd6 <HAL_PCD_DataInStageCallback>
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	f003 0308 	and.w	r3, r3, #8
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d008      	beq.n	800bb52 <HAL_PCD_IRQHandler+0x3ca>
 800bb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb42:	015a      	lsls	r2, r3, #5
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	4413      	add	r3, r2
 800bb48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	2308      	movs	r3, #8
 800bb50:	6093      	str	r3, [r2, #8]
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	f003 0310 	and.w	r3, r3, #16
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d008      	beq.n	800bb6e <HAL_PCD_IRQHandler+0x3e6>
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb68:	461a      	mov	r2, r3
 800bb6a:	2310      	movs	r3, #16
 800bb6c:	6093      	str	r3, [r2, #8]
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d008      	beq.n	800bb8a <HAL_PCD_IRQHandler+0x402>
 800bb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7a:	015a      	lsls	r2, r3, #5
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	4413      	add	r3, r2
 800bb80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb84:	461a      	mov	r2, r3
 800bb86:	2340      	movs	r3, #64	@ 0x40
 800bb88:	6093      	str	r3, [r2, #8]
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	f003 0302 	and.w	r3, r3, #2
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d023      	beq.n	800bbdc <HAL_PCD_IRQHandler+0x454>
 800bb94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb96:	6a38      	ldr	r0, [r7, #32]
 800bb98:	f008 fdaa 	bl	80146f0 <USB_FlushTxFifo>
 800bb9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb9e:	4613      	mov	r3, r2
 800bba0:	00db      	lsls	r3, r3, #3
 800bba2:	4413      	add	r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	3310      	adds	r3, #16
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	4413      	add	r3, r2
 800bbac:	3304      	adds	r3, #4
 800bbae:	617b      	str	r3, [r7, #20]
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	78db      	ldrb	r3, [r3, #3]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d108      	bne.n	800bbca <HAL_PCD_IRQHandler+0x442>
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	70da      	strb	r2, [r3, #3]
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f00c f91d 	bl	8017e04 <HAL_PCD_ISOINIncompleteCallback>
 800bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbcc:	015a      	lsls	r2, r3, #5
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	2302      	movs	r3, #2
 800bbda:	6093      	str	r3, [r2, #8]
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d003      	beq.n	800bbee <HAL_PCD_IRQHandler+0x466>
 800bbe6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fce8 	bl	800c5be <PCD_WriteEmptyTxFifo>
 800bbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf6:	085b      	lsrs	r3, r3, #1
 800bbf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f47f af2e 	bne.w	800ba5e <HAL_PCD_IRQHandler+0x2d6>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f009 fc90 	bl	801552c <USB_ReadInterrupts>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc16:	d122      	bne.n	800bc5e <HAL_PCD_IRQHandler+0x4d6>
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	69fa      	ldr	r2, [r7, #28]
 800bc22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc26:	f023 0301 	bic.w	r3, r3, #1
 800bc2a:	6053      	str	r3, [r2, #4]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d108      	bne.n	800bc48 <HAL_PCD_IRQHandler+0x4c0>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
 800bc3e:	2100      	movs	r1, #0
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fef3 	bl	800ca2c <HAL_PCDEx_LPM_Callback>
 800bc46:	e002      	b.n	800bc4e <HAL_PCD_IRQHandler+0x4c6>
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f00c f8bb 	bl	8017dc4 <HAL_PCD_ResumeCallback>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	695a      	ldr	r2, [r3, #20]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800bc5c:	615a      	str	r2, [r3, #20]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f009 fc62 	bl	801552c <USB_ReadInterrupts>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc72:	d112      	bne.n	800bc9a <HAL_PCD_IRQHandler+0x512>
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	f003 0301 	and.w	r3, r3, #1
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d102      	bne.n	800bc8a <HAL_PCD_IRQHandler+0x502>
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f00c f877 	bl	8017d78 <HAL_PCD_SuspendCallback>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	695a      	ldr	r2, [r3, #20]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800bc98:	615a      	str	r2, [r3, #20]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f009 fc44 	bl	801552c <USB_ReadInterrupts>
 800bca4:	4603      	mov	r3, r0
 800bca6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bcaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bcae:	d121      	bne.n	800bcf4 <HAL_PCD_IRQHandler+0x56c>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	695a      	ldr	r2, [r3, #20]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800bcbe:	615a      	str	r2, [r3, #20]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d111      	bne.n	800bcee <HAL_PCD_IRQHandler+0x566>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcd8:	089b      	lsrs	r3, r3, #2
 800bcda:	f003 020f 	and.w	r2, r3, #15
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0
 800bce4:	2101      	movs	r1, #1
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fea0 	bl	800ca2c <HAL_PCDEx_LPM_Callback>
 800bcec:	e002      	b.n	800bcf4 <HAL_PCD_IRQHandler+0x56c>
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f00c f842 	bl	8017d78 <HAL_PCD_SuspendCallback>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f009 fc17 	bl	801552c <USB_ReadInterrupts>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bd04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd08:	f040 80b7 	bne.w	800be7a <HAL_PCD_IRQHandler+0x6f2>
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	69fa      	ldr	r2, [r7, #28]
 800bd16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd1a:	f023 0301 	bic.w	r3, r3, #1
 800bd1e:	6053      	str	r3, [r2, #4]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2110      	movs	r1, #16
 800bd26:	4618      	mov	r0, r3
 800bd28:	f008 fce2 	bl	80146f0 <USB_FlushTxFifo>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd30:	e046      	b.n	800bdc0 <HAL_PCD_IRQHandler+0x638>
 800bd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd34:	015a      	lsls	r2, r3, #5
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	4413      	add	r3, r2
 800bd3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd3e:	461a      	mov	r2, r3
 800bd40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bd44:	6093      	str	r3, [r2, #8]
 800bd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd48:	015a      	lsls	r2, r3, #5
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd56:	0151      	lsls	r1, r2, #5
 800bd58:	69fa      	ldr	r2, [r7, #28]
 800bd5a:	440a      	add	r2, r1
 800bd5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd68:	015a      	lsls	r2, r3, #5
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd72:	461a      	mov	r2, r3
 800bd74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bd78:	6093      	str	r3, [r2, #8]
 800bd7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7c:	015a      	lsls	r2, r3, #5
 800bd7e:	69fb      	ldr	r3, [r7, #28]
 800bd80:	4413      	add	r3, r2
 800bd82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd8a:	0151      	lsls	r1, r2, #5
 800bd8c:	69fa      	ldr	r2, [r7, #28]
 800bd8e:	440a      	add	r2, r1
 800bd90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd98:	6013      	str	r3, [r2, #0]
 800bd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9c:	015a      	lsls	r2, r3, #5
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	4413      	add	r3, r2
 800bda2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdaa:	0151      	lsls	r1, r2, #5
 800bdac:	69fa      	ldr	r2, [r7, #28]
 800bdae:	440a      	add	r2, r1
 800bdb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdb4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bdb8:	6013      	str	r3, [r2, #0]
 800bdba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	791b      	ldrb	r3, [r3, #4]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d3b2      	bcc.n	800bd32 <HAL_PCD_IRQHandler+0x5aa>
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdd2:	69db      	ldr	r3, [r3, #28]
 800bdd4:	69fa      	ldr	r2, [r7, #28]
 800bdd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdda:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800bdde:	61d3      	str	r3, [r2, #28]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	7bdb      	ldrb	r3, [r3, #15]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d016      	beq.n	800be16 <HAL_PCD_IRQHandler+0x68e>
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bdf2:	69fa      	ldr	r2, [r7, #28]
 800bdf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdf8:	f043 030b 	orr.w	r3, r3, #11
 800bdfc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be08:	69fa      	ldr	r2, [r7, #28]
 800be0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be0e:	f043 030b 	orr.w	r3, r3, #11
 800be12:	6453      	str	r3, [r2, #68]	@ 0x44
 800be14:	e015      	b.n	800be42 <HAL_PCD_IRQHandler+0x6ba>
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be1c:	695a      	ldr	r2, [r3, #20]
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be24:	4619      	mov	r1, r3
 800be26:	f242 032b 	movw	r3, #8235	@ 0x202b
 800be2a:	4313      	orrs	r3, r2
 800be2c:	614b      	str	r3, [r1, #20]
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	69fa      	ldr	r2, [r7, #28]
 800be38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be3c:	f043 030b 	orr.w	r3, r3, #11
 800be40:	6113      	str	r3, [r2, #16]
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	69fa      	ldr	r2, [r7, #28]
 800be4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be50:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800be54:	6013      	str	r3, [r2, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6818      	ldr	r0, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	7999      	ldrb	r1, [r3, #6]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800be64:	461a      	mov	r2, r3
 800be66:	f009 fc27 	bl	80156b8 <USB_EP0_OutStart>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	695a      	ldr	r2, [r3, #20]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800be78:	615a      	str	r2, [r3, #20]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4618      	mov	r0, r3
 800be80:	f009 fb54 	bl	801552c <USB_ReadInterrupts>
 800be84:	4603      	mov	r3, r0
 800be86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800be8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be8e:	d123      	bne.n	800bed8 <HAL_PCD_IRQHandler+0x750>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4618      	mov	r0, r3
 800be96:	f009 fbeb 	bl	8015670 <USB_ActivateSetup>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f008 fc9f 	bl	80147e2 <USB_GetDevSpeed>
 800bea4:	4603      	mov	r3, r0
 800bea6:	461a      	mov	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	71da      	strb	r2, [r3, #7]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681c      	ldr	r4, [r3, #0]
 800beb0:	f001 fd1c 	bl	800d8ec <HAL_RCC_GetHCLKFreq>
 800beb4:	4601      	mov	r1, r0
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	79db      	ldrb	r3, [r3, #7]
 800beba:	461a      	mov	r2, r3
 800bebc:	4620      	mov	r0, r4
 800bebe:	f008 f9a9 	bl	8014214 <USB_SetTurnaroundTime>
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f00b ff2f 	bl	8017d26 <HAL_PCD_ResetCallback>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	695a      	ldr	r2, [r3, #20]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800bed6:	615a      	str	r2, [r3, #20]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4618      	mov	r0, r3
 800bede:	f009 fb25 	bl	801552c <USB_ReadInterrupts>
 800bee2:	4603      	mov	r3, r0
 800bee4:	f003 0308 	and.w	r3, r3, #8
 800bee8:	2b08      	cmp	r3, #8
 800beea:	d10a      	bne.n	800bf02 <HAL_PCD_IRQHandler+0x77a>
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f00b ff0c 	bl	8017d0a <HAL_PCD_SOFCallback>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	695a      	ldr	r2, [r3, #20]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f002 0208 	and.w	r2, r2, #8
 800bf00:	615a      	str	r2, [r3, #20]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f009 fb10 	bl	801552c <USB_ReadInterrupts>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf12:	2b80      	cmp	r3, #128	@ 0x80
 800bf14:	d123      	bne.n	800bf5e <HAL_PCD_IRQHandler+0x7d6>
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	699b      	ldr	r3, [r3, #24]
 800bf1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bf1e:	6a3b      	ldr	r3, [r7, #32]
 800bf20:	619a      	str	r2, [r3, #24]
 800bf22:	2301      	movs	r3, #1
 800bf24:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf26:	e014      	b.n	800bf52 <HAL_PCD_IRQHandler+0x7ca>
 800bf28:	6879      	ldr	r1, [r7, #4]
 800bf2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	00db      	lsls	r3, r3, #3
 800bf30:	4413      	add	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	440b      	add	r3, r1
 800bf36:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d105      	bne.n	800bf4c <HAL_PCD_IRQHandler+0x7c4>
 800bf40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fb08 	bl	800c55c <HAL_PCD_EP_Abort>
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf4e:	3301      	adds	r3, #1
 800bf50:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	791b      	ldrb	r3, [r3, #4]
 800bf56:	461a      	mov	r2, r3
 800bf58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d3e4      	bcc.n	800bf28 <HAL_PCD_IRQHandler+0x7a0>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f009 fae2 	bl	801552c <USB_ReadInterrupts>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf72:	d13c      	bne.n	800bfee <HAL_PCD_IRQHandler+0x866>
 800bf74:	2301      	movs	r3, #1
 800bf76:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf78:	e02b      	b.n	800bfd2 <HAL_PCD_IRQHandler+0x84a>
 800bf7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7c:	015a      	lsls	r2, r3, #5
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	4413      	add	r3, r2
 800bf82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	61bb      	str	r3, [r7, #24]
 800bf8a:	6879      	ldr	r1, [r7, #4]
 800bf8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf8e:	4613      	mov	r3, r2
 800bf90:	00db      	lsls	r3, r3, #3
 800bf92:	4413      	add	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	440b      	add	r3, r1
 800bf98:	3318      	adds	r3, #24
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d115      	bne.n	800bfcc <HAL_PCD_IRQHandler+0x844>
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	da12      	bge.n	800bfcc <HAL_PCD_IRQHandler+0x844>
 800bfa6:	6879      	ldr	r1, [r7, #4]
 800bfa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfaa:	4613      	mov	r3, r2
 800bfac:	00db      	lsls	r3, r3, #3
 800bfae:	4413      	add	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	440b      	add	r3, r1
 800bfb4:	3317      	adds	r3, #23
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	701a      	strb	r2, [r3, #0]
 800bfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fac8 	bl	800c55c <HAL_PCD_EP_Abort>
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfce:	3301      	adds	r3, #1
 800bfd0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	791b      	ldrb	r3, [r3, #4]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d3cd      	bcc.n	800bf7a <HAL_PCD_IRQHandler+0x7f2>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	695a      	ldr	r2, [r3, #20]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bfec:	615a      	str	r2, [r3, #20]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f009 fa9a 	bl	801552c <USB_ReadInterrupts>
 800bff8:	4603      	mov	r3, r0
 800bffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bffe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c002:	d156      	bne.n	800c0b2 <HAL_PCD_IRQHandler+0x92a>
 800c004:	2301      	movs	r3, #1
 800c006:	627b      	str	r3, [r7, #36]	@ 0x24
 800c008:	e045      	b.n	800c096 <HAL_PCD_IRQHandler+0x90e>
 800c00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00c:	015a      	lsls	r2, r3, #5
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	4413      	add	r3, r2
 800c012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	61bb      	str	r3, [r7, #24]
 800c01a:	6879      	ldr	r1, [r7, #4]
 800c01c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c01e:	4613      	mov	r3, r2
 800c020:	00db      	lsls	r3, r3, #3
 800c022:	4413      	add	r3, r2
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	440b      	add	r3, r1
 800c028:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d12e      	bne.n	800c090 <HAL_PCD_IRQHandler+0x908>
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	2b00      	cmp	r3, #0
 800c036:	da2b      	bge.n	800c090 <HAL_PCD_IRQHandler+0x908>
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c044:	f003 0301 	and.w	r3, r3, #1
 800c048:	429a      	cmp	r2, r3
 800c04a:	d121      	bne.n	800c090 <HAL_PCD_IRQHandler+0x908>
 800c04c:	6879      	ldr	r1, [r7, #4]
 800c04e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c050:	4613      	mov	r3, r2
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	4413      	add	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	440b      	add	r3, r1
 800c05a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c05e:	2201      	movs	r2, #1
 800c060:	701a      	strb	r2, [r3, #0]
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c06a:	6a3b      	ldr	r3, [r7, #32]
 800c06c:	619a      	str	r2, [r3, #24]
 800c06e:	6a3b      	ldr	r3, [r7, #32]
 800c070:	695b      	ldr	r3, [r3, #20]
 800c072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10a      	bne.n	800c090 <HAL_PCD_IRQHandler+0x908>
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	69fa      	ldr	r2, [r7, #28]
 800c084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c088:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c08c:	6053      	str	r3, [r2, #4]
 800c08e:	e008      	b.n	800c0a2 <HAL_PCD_IRQHandler+0x91a>
 800c090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c092:	3301      	adds	r3, #1
 800c094:	627b      	str	r3, [r7, #36]	@ 0x24
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	791b      	ldrb	r3, [r3, #4]
 800c09a:	461a      	mov	r2, r3
 800c09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d3b3      	bcc.n	800c00a <HAL_PCD_IRQHandler+0x882>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	695a      	ldr	r2, [r3, #20]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c0b0:	615a      	str	r2, [r3, #20]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f009 fa38 	bl	801552c <USB_ReadInterrupts>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0c6:	d10a      	bne.n	800c0de <HAL_PCD_IRQHandler+0x956>
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f00b fead 	bl	8017e28 <HAL_PCD_ConnectCallback>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	695a      	ldr	r2, [r3, #20]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c0dc:	615a      	str	r2, [r3, #20]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f009 fa22 	bl	801552c <USB_ReadInterrupts>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	f003 0304 	and.w	r3, r3, #4
 800c0ee:	2b04      	cmp	r3, #4
 800c0f0:	d115      	bne.n	800c11e <HAL_PCD_IRQHandler+0x996>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	61bb      	str	r3, [r7, #24]
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	f003 0304 	and.w	r3, r3, #4
 800c100:	2b00      	cmp	r3, #0
 800c102:	d002      	beq.n	800c10a <HAL_PCD_IRQHandler+0x982>
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f00b fe9d 	bl	8017e44 <HAL_PCD_DisconnectCallback>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	6859      	ldr	r1, [r3, #4]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	430a      	orrs	r2, r1
 800c118:	605a      	str	r2, [r3, #4]
 800c11a:	e000      	b.n	800c11e <HAL_PCD_IRQHandler+0x996>
 800c11c:	bf00      	nop
 800c11e:	3734      	adds	r7, #52	@ 0x34
 800c120:	46bd      	mov	sp, r7
 800c122:	bd90      	pop	{r4, r7, pc}

0800c124 <HAL_PCD_SetAddress>:
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	460b      	mov	r3, r1
 800c12e:	70fb      	strb	r3, [r7, #3]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c136:	2b01      	cmp	r3, #1
 800c138:	d101      	bne.n	800c13e <HAL_PCD_SetAddress+0x1a>
 800c13a:	2302      	movs	r3, #2
 800c13c:	e012      	b.n	800c164 <HAL_PCD_SetAddress+0x40>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2201      	movs	r2, #1
 800c142:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	78fa      	ldrb	r2, [r7, #3]
 800c14a:	745a      	strb	r2, [r3, #17]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	78fa      	ldrb	r2, [r7, #3]
 800c152:	4611      	mov	r1, r2
 800c154:	4618      	mov	r0, r3
 800c156:	f009 f981 	bl	801545c <USB_SetDevAddress>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800c162:	2300      	movs	r3, #0
 800c164:	4618      	mov	r0, r3
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <HAL_PCD_EP_Open>:
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	4608      	mov	r0, r1
 800c176:	4611      	mov	r1, r2
 800c178:	461a      	mov	r2, r3
 800c17a:	4603      	mov	r3, r0
 800c17c:	70fb      	strb	r3, [r7, #3]
 800c17e:	460b      	mov	r3, r1
 800c180:	803b      	strh	r3, [r7, #0]
 800c182:	4613      	mov	r3, r2
 800c184:	70bb      	strb	r3, [r7, #2]
 800c186:	2300      	movs	r3, #0
 800c188:	72fb      	strb	r3, [r7, #11]
 800c18a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	da0f      	bge.n	800c1b2 <HAL_PCD_EP_Open+0x46>
 800c192:	78fb      	ldrb	r3, [r7, #3]
 800c194:	f003 020f 	and.w	r2, r3, #15
 800c198:	4613      	mov	r3, r2
 800c19a:	00db      	lsls	r3, r3, #3
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	3310      	adds	r3, #16
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	60fb      	str	r3, [r7, #12]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	705a      	strb	r2, [r3, #1]
 800c1b0:	e00f      	b.n	800c1d2 <HAL_PCD_EP_Open+0x66>
 800c1b2:	78fb      	ldrb	r3, [r7, #3]
 800c1b4:	f003 020f 	and.w	r2, r3, #15
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	00db      	lsls	r3, r3, #3
 800c1bc:	4413      	add	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	60fb      	str	r3, [r7, #12]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	705a      	strb	r2, [r3, #1]
 800c1d2:	78fb      	ldrb	r3, [r7, #3]
 800c1d4:	f003 030f 	and.w	r3, r3, #15
 800c1d8:	b2da      	uxtb	r2, r3
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	701a      	strb	r2, [r3, #0]
 800c1de:	883a      	ldrh	r2, [r7, #0]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	609a      	str	r2, [r3, #8]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	78ba      	ldrb	r2, [r7, #2]
 800c1e8:	711a      	strb	r2, [r3, #4]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	785b      	ldrb	r3, [r3, #1]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d004      	beq.n	800c1fc <HAL_PCD_EP_Open+0x90>
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	835a      	strh	r2, [r3, #26]
 800c1fc:	78bb      	ldrb	r3, [r7, #2]
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	d102      	bne.n	800c208 <HAL_PCD_EP_Open+0x9c>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	715a      	strb	r2, [r3, #5]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d101      	bne.n	800c216 <HAL_PCD_EP_Open+0xaa>
 800c212:	2302      	movs	r3, #2
 800c214:	e00e      	b.n	800c234 <HAL_PCD_EP_Open+0xc8>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68f9      	ldr	r1, [r7, #12]
 800c224:	4618      	mov	r0, r3
 800c226:	f008 fb01 	bl	801482c <USB_ActivateEndpoint>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800c232:	7afb      	ldrb	r3, [r7, #11]
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <HAL_PCD_EP_Close>:
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	460b      	mov	r3, r1
 800c246:	70fb      	strb	r3, [r7, #3]
 800c248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	da0f      	bge.n	800c270 <HAL_PCD_EP_Close+0x34>
 800c250:	78fb      	ldrb	r3, [r7, #3]
 800c252:	f003 020f 	and.w	r2, r3, #15
 800c256:	4613      	mov	r3, r2
 800c258:	00db      	lsls	r3, r3, #3
 800c25a:	4413      	add	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	3310      	adds	r3, #16
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	4413      	add	r3, r2
 800c264:	3304      	adds	r3, #4
 800c266:	60fb      	str	r3, [r7, #12]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2201      	movs	r2, #1
 800c26c:	705a      	strb	r2, [r3, #1]
 800c26e:	e00f      	b.n	800c290 <HAL_PCD_EP_Close+0x54>
 800c270:	78fb      	ldrb	r3, [r7, #3]
 800c272:	f003 020f 	and.w	r2, r3, #15
 800c276:	4613      	mov	r3, r2
 800c278:	00db      	lsls	r3, r3, #3
 800c27a:	4413      	add	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	4413      	add	r3, r2
 800c286:	3304      	adds	r3, #4
 800c288:	60fb      	str	r3, [r7, #12]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	705a      	strb	r2, [r3, #1]
 800c290:	78fb      	ldrb	r3, [r7, #3]
 800c292:	f003 030f 	and.w	r3, r3, #15
 800c296:	b2da      	uxtb	r2, r3
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	701a      	strb	r2, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d101      	bne.n	800c2aa <HAL_PCD_EP_Close+0x6e>
 800c2a6:	2302      	movs	r3, #2
 800c2a8:	e00e      	b.n	800c2c8 <HAL_PCD_EP_Close+0x8c>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	68f9      	ldr	r1, [r7, #12]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f008 fb3f 	bl	801493c <USB_DeactivateEndpoint>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <HAL_PCD_EP_Receive>:
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	607a      	str	r2, [r7, #4]
 800c2da:	603b      	str	r3, [r7, #0]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	72fb      	strb	r3, [r7, #11]
 800c2e0:	7afb      	ldrb	r3, [r7, #11]
 800c2e2:	f003 020f 	and.w	r2, r3, #15
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	00db      	lsls	r3, r3, #3
 800c2ea:	4413      	add	r3, r2
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	617b      	str	r3, [r7, #20]
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	60da      	str	r2, [r3, #12]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	611a      	str	r2, [r3, #16]
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	2200      	movs	r2, #0
 800c30a:	615a      	str	r2, [r3, #20]
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	2200      	movs	r2, #0
 800c310:	705a      	strb	r2, [r3, #1]
 800c312:	7afb      	ldrb	r3, [r7, #11]
 800c314:	f003 030f 	and.w	r3, r3, #15
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	701a      	strb	r2, [r3, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	799b      	ldrb	r3, [r3, #6]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d102      	bne.n	800c32c <HAL_PCD_EP_Receive+0x5c>
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	61da      	str	r2, [r3, #28]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6818      	ldr	r0, [r3, #0]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	799b      	ldrb	r3, [r3, #6]
 800c334:	461a      	mov	r2, r3
 800c336:	6979      	ldr	r1, [r7, #20]
 800c338:	f008 fbdc 	bl	8014af4 <USB_EPStartXfer>
 800c33c:	2300      	movs	r3, #0
 800c33e:	4618      	mov	r0, r3
 800c340:	3718      	adds	r7, #24
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <HAL_PCD_EP_GetRxCount>:
 800c346:	b480      	push	{r7}
 800c348:	b083      	sub	sp, #12
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
 800c34e:	460b      	mov	r3, r1
 800c350:	70fb      	strb	r3, [r7, #3]
 800c352:	78fb      	ldrb	r3, [r7, #3]
 800c354:	f003 020f 	and.w	r2, r3, #15
 800c358:	6879      	ldr	r1, [r7, #4]
 800c35a:	4613      	mov	r3, r2
 800c35c:	00db      	lsls	r3, r3, #3
 800c35e:	4413      	add	r3, r2
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	440b      	add	r3, r1
 800c364:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <HAL_PCD_EP_Transmit>:
 800c376:	b580      	push	{r7, lr}
 800c378:	b086      	sub	sp, #24
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
 800c382:	460b      	mov	r3, r1
 800c384:	72fb      	strb	r3, [r7, #11]
 800c386:	7afb      	ldrb	r3, [r7, #11]
 800c388:	f003 020f 	and.w	r2, r3, #15
 800c38c:	4613      	mov	r3, r2
 800c38e:	00db      	lsls	r3, r3, #3
 800c390:	4413      	add	r3, r2
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	3310      	adds	r3, #16
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	4413      	add	r3, r2
 800c39a:	3304      	adds	r3, #4
 800c39c:	617b      	str	r3, [r7, #20]
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	60da      	str	r2, [r3, #12]
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	611a      	str	r2, [r3, #16]
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	615a      	str	r2, [r3, #20]
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	705a      	strb	r2, [r3, #1]
 800c3b6:	7afb      	ldrb	r3, [r7, #11]
 800c3b8:	f003 030f 	and.w	r3, r3, #15
 800c3bc:	b2da      	uxtb	r2, r3
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	701a      	strb	r2, [r3, #0]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	799b      	ldrb	r3, [r3, #6]
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d102      	bne.n	800c3d0 <HAL_PCD_EP_Transmit+0x5a>
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	61da      	str	r2, [r3, #28]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6818      	ldr	r0, [r3, #0]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	799b      	ldrb	r3, [r3, #6]
 800c3d8:	461a      	mov	r2, r3
 800c3da:	6979      	ldr	r1, [r7, #20]
 800c3dc:	f008 fb8a 	bl	8014af4 <USB_EPStartXfer>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3718      	adds	r7, #24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <HAL_PCD_EP_SetStall>:
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b084      	sub	sp, #16
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	70fb      	strb	r3, [r7, #3]
 800c3f6:	78fb      	ldrb	r3, [r7, #3]
 800c3f8:	f003 030f 	and.w	r3, r3, #15
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	7912      	ldrb	r2, [r2, #4]
 800c400:	4293      	cmp	r3, r2
 800c402:	d901      	bls.n	800c408 <HAL_PCD_EP_SetStall+0x1e>
 800c404:	2301      	movs	r3, #1
 800c406:	e04f      	b.n	800c4a8 <HAL_PCD_EP_SetStall+0xbe>
 800c408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	da0f      	bge.n	800c430 <HAL_PCD_EP_SetStall+0x46>
 800c410:	78fb      	ldrb	r3, [r7, #3]
 800c412:	f003 020f 	and.w	r2, r3, #15
 800c416:	4613      	mov	r3, r2
 800c418:	00db      	lsls	r3, r3, #3
 800c41a:	4413      	add	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	3310      	adds	r3, #16
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	4413      	add	r3, r2
 800c424:	3304      	adds	r3, #4
 800c426:	60fb      	str	r3, [r7, #12]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2201      	movs	r2, #1
 800c42c:	705a      	strb	r2, [r3, #1]
 800c42e:	e00d      	b.n	800c44c <HAL_PCD_EP_SetStall+0x62>
 800c430:	78fa      	ldrb	r2, [r7, #3]
 800c432:	4613      	mov	r3, r2
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	4413      	add	r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	4413      	add	r3, r2
 800c442:	3304      	adds	r3, #4
 800c444:	60fb      	str	r3, [r7, #12]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	705a      	strb	r2, [r3, #1]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2201      	movs	r2, #1
 800c450:	709a      	strb	r2, [r3, #2]
 800c452:	78fb      	ldrb	r3, [r7, #3]
 800c454:	f003 030f 	and.w	r3, r3, #15
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	701a      	strb	r2, [r3, #0]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c464:	2b01      	cmp	r3, #1
 800c466:	d101      	bne.n	800c46c <HAL_PCD_EP_SetStall+0x82>
 800c468:	2302      	movs	r3, #2
 800c46a:	e01d      	b.n	800c4a8 <HAL_PCD_EP_SetStall+0xbe>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68f9      	ldr	r1, [r7, #12]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f008 ff1a 	bl	80152b4 <USB_EPSetStall>
 800c480:	78fb      	ldrb	r3, [r7, #3]
 800c482:	f003 030f 	and.w	r3, r3, #15
 800c486:	2b00      	cmp	r3, #0
 800c488:	d109      	bne.n	800c49e <HAL_PCD_EP_SetStall+0xb4>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6818      	ldr	r0, [r3, #0]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	7999      	ldrb	r1, [r3, #6]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c498:	461a      	mov	r2, r3
 800c49a:	f009 f90d 	bl	80156b8 <USB_EP0_OutStart>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <HAL_PCD_EP_ClrStall>:
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	70fb      	strb	r3, [r7, #3]
 800c4bc:	78fb      	ldrb	r3, [r7, #3]
 800c4be:	f003 030f 	and.w	r3, r3, #15
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	7912      	ldrb	r2, [r2, #4]
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d901      	bls.n	800c4ce <HAL_PCD_EP_ClrStall+0x1e>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e042      	b.n	800c554 <HAL_PCD_EP_ClrStall+0xa4>
 800c4ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	da0f      	bge.n	800c4f6 <HAL_PCD_EP_ClrStall+0x46>
 800c4d6:	78fb      	ldrb	r3, [r7, #3]
 800c4d8:	f003 020f 	and.w	r2, r3, #15
 800c4dc:	4613      	mov	r3, r2
 800c4de:	00db      	lsls	r3, r3, #3
 800c4e0:	4413      	add	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	3310      	adds	r3, #16
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	60fb      	str	r3, [r7, #12]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	705a      	strb	r2, [r3, #1]
 800c4f4:	e00f      	b.n	800c516 <HAL_PCD_EP_ClrStall+0x66>
 800c4f6:	78fb      	ldrb	r3, [r7, #3]
 800c4f8:	f003 020f 	and.w	r2, r3, #15
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	00db      	lsls	r3, r3, #3
 800c500:	4413      	add	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	4413      	add	r3, r2
 800c50c:	3304      	adds	r3, #4
 800c50e:	60fb      	str	r3, [r7, #12]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2200      	movs	r2, #0
 800c514:	705a      	strb	r2, [r3, #1]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	709a      	strb	r2, [r3, #2]
 800c51c:	78fb      	ldrb	r3, [r7, #3]
 800c51e:	f003 030f 	and.w	r3, r3, #15
 800c522:	b2da      	uxtb	r2, r3
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	701a      	strb	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d101      	bne.n	800c536 <HAL_PCD_EP_ClrStall+0x86>
 800c532:	2302      	movs	r3, #2
 800c534:	e00e      	b.n	800c554 <HAL_PCD_EP_ClrStall+0xa4>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2201      	movs	r2, #1
 800c53a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68f9      	ldr	r1, [r7, #12]
 800c544:	4618      	mov	r0, r3
 800c546:	f008 ff23 	bl	8015390 <USB_EPClearStall>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 800c552:	2300      	movs	r3, #0
 800c554:	4618      	mov	r0, r3
 800c556:	3710      	adds	r7, #16
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <HAL_PCD_EP_Abort>:
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	460b      	mov	r3, r1
 800c566:	70fb      	strb	r3, [r7, #3]
 800c568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	da0c      	bge.n	800c58a <HAL_PCD_EP_Abort+0x2e>
 800c570:	78fb      	ldrb	r3, [r7, #3]
 800c572:	f003 020f 	and.w	r2, r3, #15
 800c576:	4613      	mov	r3, r2
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	4413      	add	r3, r2
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	3310      	adds	r3, #16
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	4413      	add	r3, r2
 800c584:	3304      	adds	r3, #4
 800c586:	60fb      	str	r3, [r7, #12]
 800c588:	e00c      	b.n	800c5a4 <HAL_PCD_EP_Abort+0x48>
 800c58a:	78fb      	ldrb	r3, [r7, #3]
 800c58c:	f003 020f 	and.w	r2, r3, #15
 800c590:	4613      	mov	r3, r2
 800c592:	00db      	lsls	r3, r3, #3
 800c594:	4413      	add	r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	4413      	add	r3, r2
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	60fb      	str	r3, [r7, #12]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	68f9      	ldr	r1, [r7, #12]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f008 fd42 	bl	8015034 <USB_EPStopXfer>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	72fb      	strb	r3, [r7, #11]
 800c5b4:	7afb      	ldrb	r3, [r7, #11]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <PCD_WriteEmptyTxFifo>:
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b08a      	sub	sp, #40	@ 0x28
 800c5c2:	af02      	add	r7, sp, #8
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	6039      	str	r1, [r7, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	617b      	str	r3, [r7, #20]
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	613b      	str	r3, [r7, #16]
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	00db      	lsls	r3, r3, #3
 800c5d8:	4413      	add	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	3310      	adds	r3, #16
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	60fb      	str	r3, [r7, #12]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	695a      	ldr	r2, [r3, #20]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d901      	bls.n	800c5f6 <PCD_WriteEmptyTxFifo+0x38>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e06b      	b.n	800c6ce <PCD_WriteEmptyTxFifo+0x110>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	691a      	ldr	r2, [r3, #16]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	695b      	ldr	r3, [r3, #20]
 800c5fe:	1ad3      	subs	r3, r2, r3
 800c600:	61fb      	str	r3, [r7, #28]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	69fa      	ldr	r2, [r7, #28]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d902      	bls.n	800c612 <PCD_WriteEmptyTxFifo+0x54>
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	61fb      	str	r3, [r7, #28]
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	3303      	adds	r3, #3
 800c616:	089b      	lsrs	r3, r3, #2
 800c618:	61bb      	str	r3, [r7, #24]
 800c61a:	e02a      	b.n	800c672 <PCD_WriteEmptyTxFifo+0xb4>
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	691a      	ldr	r2, [r3, #16]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	695b      	ldr	r3, [r3, #20]
 800c624:	1ad3      	subs	r3, r2, r3
 800c626:	61fb      	str	r3, [r7, #28]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	69fa      	ldr	r2, [r7, #28]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d902      	bls.n	800c638 <PCD_WriteEmptyTxFifo+0x7a>
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	61fb      	str	r3, [r7, #28]
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	3303      	adds	r3, #3
 800c63c:	089b      	lsrs	r3, r3, #2
 800c63e:	61bb      	str	r3, [r7, #24]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	68d9      	ldr	r1, [r3, #12]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	b2da      	uxtb	r2, r3
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	b298      	uxth	r0, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	799b      	ldrb	r3, [r3, #6]
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	4603      	mov	r3, r0
 800c654:	6978      	ldr	r0, [r7, #20]
 800c656:	f008 fd97 	bl	8015188 <USB_WritePacket>
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	68da      	ldr	r2, [r3, #12]
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	441a      	add	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	60da      	str	r2, [r3, #12]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	695a      	ldr	r2, [r3, #20]
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	441a      	add	r2, r3
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	615a      	str	r2, [r3, #20]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	015a      	lsls	r2, r3, #5
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	4413      	add	r3, r2
 800c67a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c67e:	699b      	ldr	r3, [r3, #24]
 800c680:	b29b      	uxth	r3, r3
 800c682:	69ba      	ldr	r2, [r7, #24]
 800c684:	429a      	cmp	r2, r3
 800c686:	d809      	bhi.n	800c69c <PCD_WriteEmptyTxFifo+0xde>
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	695a      	ldr	r2, [r3, #20]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	429a      	cmp	r2, r3
 800c692:	d203      	bcs.n	800c69c <PCD_WriteEmptyTxFifo+0xde>
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1bf      	bne.n	800c61c <PCD_WriteEmptyTxFifo+0x5e>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	691a      	ldr	r2, [r3, #16]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	695b      	ldr	r3, [r3, #20]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d811      	bhi.n	800c6cc <PCD_WriteEmptyTxFifo+0x10e>
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	f003 030f 	and.w	r3, r3, #15
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6b4:	60bb      	str	r3, [r7, #8]
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	43db      	mvns	r3, r3
 800c6c2:	6939      	ldr	r1, [r7, #16]
 800c6c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c6c8:	4013      	ands	r3, r2
 800c6ca:	634b      	str	r3, [r1, #52]	@ 0x34
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3720      	adds	r7, #32
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
	...

0800c6d8 <PCD_EP_OutXfrComplete_int>:
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	61fb      	str	r3, [r7, #28]
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	61bb      	str	r3, [r7, #24]
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	333c      	adds	r3, #60	@ 0x3c
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	617b      	str	r3, [r7, #20]
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	015a      	lsls	r2, r3, #5
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	613b      	str	r3, [r7, #16]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	799b      	ldrb	r3, [r3, #6]
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d17b      	bne.n	800c806 <PCD_EP_OutXfrComplete_int+0x12e>
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	f003 0308 	and.w	r3, r3, #8
 800c714:	2b00      	cmp	r3, #0
 800c716:	d015      	beq.n	800c744 <PCD_EP_OutXfrComplete_int+0x6c>
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	4a61      	ldr	r2, [pc, #388]	@ (800c8a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	f240 80b9 	bls.w	800c894 <PCD_EP_OutXfrComplete_int+0x1bc>
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f000 80b3 	beq.w	800c894 <PCD_EP_OutXfrComplete_int+0x1bc>
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	015a      	lsls	r2, r3, #5
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	4413      	add	r3, r2
 800c736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c73a:	461a      	mov	r2, r3
 800c73c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c740:	6093      	str	r3, [r2, #8]
 800c742:	e0a7      	b.n	800c894 <PCD_EP_OutXfrComplete_int+0x1bc>
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	f003 0320 	and.w	r3, r3, #32
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d009      	beq.n	800c762 <PCD_EP_OutXfrComplete_int+0x8a>
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	015a      	lsls	r2, r3, #5
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	4413      	add	r3, r2
 800c756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c75a:	461a      	mov	r2, r3
 800c75c:	2320      	movs	r3, #32
 800c75e:	6093      	str	r3, [r2, #8]
 800c760:	e098      	b.n	800c894 <PCD_EP_OutXfrComplete_int+0x1bc>
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f040 8093 	bne.w	800c894 <PCD_EP_OutXfrComplete_int+0x1bc>
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	4a4b      	ldr	r2, [pc, #300]	@ (800c8a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d90f      	bls.n	800c796 <PCD_EP_OutXfrComplete_int+0xbe>
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00a      	beq.n	800c796 <PCD_EP_OutXfrComplete_int+0xbe>
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	015a      	lsls	r2, r3, #5
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	4413      	add	r3, r2
 800c788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c78c:	461a      	mov	r2, r3
 800c78e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c792:	6093      	str	r3, [r2, #8]
 800c794:	e07e      	b.n	800c894 <PCD_EP_OutXfrComplete_int+0x1bc>
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	4613      	mov	r3, r2
 800c79a:	00db      	lsls	r3, r3, #3
 800c79c:	4413      	add	r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	60fb      	str	r3, [r7, #12]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6a1a      	ldr	r2, [r3, #32]
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	0159      	lsls	r1, r3, #5
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	440b      	add	r3, r1
 800c7b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7c2:	1ad2      	subs	r2, r2, r3
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	615a      	str	r2, [r3, #20]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d114      	bne.n	800c7f8 <PCD_EP_OutXfrComplete_int+0x120>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	691b      	ldr	r3, [r3, #16]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d109      	bne.n	800c7ea <PCD_EP_OutXfrComplete_int+0x112>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6818      	ldr	r0, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	2101      	movs	r1, #1
 800c7e4:	f008 ff68 	bl	80156b8 <USB_EP0_OutStart>
 800c7e8:	e006      	b.n	800c7f8 <PCD_EP_OutXfrComplete_int+0x120>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	68da      	ldr	r2, [r3, #12]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	695b      	ldr	r3, [r3, #20]
 800c7f2:	441a      	add	r2, r3
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	60da      	str	r2, [r3, #12]
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f00b fa4e 	bl	8017ca0 <HAL_PCD_DataOutStageCallback>
 800c804:	e046      	b.n	800c894 <PCD_EP_OutXfrComplete_int+0x1bc>
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	4a26      	ldr	r2, [pc, #152]	@ (800c8a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d124      	bne.n	800c858 <PCD_EP_OutXfrComplete_int+0x180>
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00a      	beq.n	800c82e <PCD_EP_OutXfrComplete_int+0x156>
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	015a      	lsls	r2, r3, #5
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	4413      	add	r3, r2
 800c820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c824:	461a      	mov	r2, r3
 800c826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c82a:	6093      	str	r3, [r2, #8]
 800c82c:	e032      	b.n	800c894 <PCD_EP_OutXfrComplete_int+0x1bc>
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	f003 0320 	and.w	r3, r3, #32
 800c834:	2b00      	cmp	r3, #0
 800c836:	d008      	beq.n	800c84a <PCD_EP_OutXfrComplete_int+0x172>
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	015a      	lsls	r2, r3, #5
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	4413      	add	r3, r2
 800c840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c844:	461a      	mov	r2, r3
 800c846:	2320      	movs	r3, #32
 800c848:	6093      	str	r3, [r2, #8]
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	4619      	mov	r1, r3
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f00b fa25 	bl	8017ca0 <HAL_PCD_DataOutStageCallback>
 800c856:	e01d      	b.n	800c894 <PCD_EP_OutXfrComplete_int+0x1bc>
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d114      	bne.n	800c888 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c85e:	6879      	ldr	r1, [r7, #4]
 800c860:	683a      	ldr	r2, [r7, #0]
 800c862:	4613      	mov	r3, r2
 800c864:	00db      	lsls	r3, r3, #3
 800c866:	4413      	add	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	440b      	add	r3, r1
 800c86c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d108      	bne.n	800c888 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6818      	ldr	r0, [r3, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c880:	461a      	mov	r2, r3
 800c882:	2100      	movs	r1, #0
 800c884:	f008 ff18 	bl	80156b8 <USB_EP0_OutStart>
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	4619      	mov	r1, r3
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f00b fa06 	bl	8017ca0 <HAL_PCD_DataOutStageCallback>
 800c894:	2300      	movs	r3, #0
 800c896:	4618      	mov	r0, r3
 800c898:	3720      	adds	r7, #32
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	4f54300a 	.word	0x4f54300a
 800c8a4:	4f54310a 	.word	0x4f54310a

0800c8a8 <PCD_EP_OutSetupPacket_int>:
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	617b      	str	r3, [r7, #20]
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	613b      	str	r3, [r7, #16]
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	333c      	adds	r3, #60	@ 0x3c
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	60fb      	str	r3, [r7, #12]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	015a      	lsls	r2, r3, #5
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	60bb      	str	r3, [r7, #8]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	4a15      	ldr	r2, [pc, #84]	@ (800c930 <PCD_EP_OutSetupPacket_int+0x88>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d90e      	bls.n	800c8fc <PCD_EP_OutSetupPacket_int+0x54>
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d009      	beq.n	800c8fc <PCD_EP_OutSetupPacket_int+0x54>
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	015a      	lsls	r2, r3, #5
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8fa:	6093      	str	r3, [r2, #8]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f00b f9bd 	bl	8017c7c <HAL_PCD_SetupStageCallback>
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	4a0a      	ldr	r2, [pc, #40]	@ (800c930 <PCD_EP_OutSetupPacket_int+0x88>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d90c      	bls.n	800c924 <PCD_EP_OutSetupPacket_int+0x7c>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	799b      	ldrb	r3, [r3, #6]
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d108      	bne.n	800c924 <PCD_EP_OutSetupPacket_int+0x7c>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c91c:	461a      	mov	r2, r3
 800c91e:	2101      	movs	r1, #1
 800c920:	f008 feca 	bl	80156b8 <USB_EP0_OutStart>
 800c924:	2300      	movs	r3, #0
 800c926:	4618      	mov	r0, r3
 800c928:	3718      	adds	r7, #24
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	4f54300a 	.word	0x4f54300a

0800c934 <HAL_PCDEx_SetTxFiFo>:
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	460b      	mov	r3, r1
 800c93e:	70fb      	strb	r3, [r7, #3]
 800c940:	4613      	mov	r3, r2
 800c942:	803b      	strh	r3, [r7, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c94a:	60bb      	str	r3, [r7, #8]
 800c94c:	78fb      	ldrb	r3, [r7, #3]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d107      	bne.n	800c962 <HAL_PCDEx_SetTxFiFo+0x2e>
 800c952:	883b      	ldrh	r3, [r7, #0]
 800c954:	0419      	lsls	r1, r3, #16
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	68ba      	ldr	r2, [r7, #8]
 800c95c:	430a      	orrs	r2, r1
 800c95e:	629a      	str	r2, [r3, #40]	@ 0x28
 800c960:	e028      	b.n	800c9b4 <HAL_PCDEx_SetTxFiFo+0x80>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c968:	0c1b      	lsrs	r3, r3, #16
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	4413      	add	r3, r2
 800c96e:	60bb      	str	r3, [r7, #8]
 800c970:	2300      	movs	r3, #0
 800c972:	73fb      	strb	r3, [r7, #15]
 800c974:	e00d      	b.n	800c992 <HAL_PCDEx_SetTxFiFo+0x5e>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	7bfb      	ldrb	r3, [r7, #15]
 800c97c:	3340      	adds	r3, #64	@ 0x40
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	4413      	add	r3, r2
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	0c1b      	lsrs	r3, r3, #16
 800c986:	68ba      	ldr	r2, [r7, #8]
 800c988:	4413      	add	r3, r2
 800c98a:	60bb      	str	r3, [r7, #8]
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	3301      	adds	r3, #1
 800c990:	73fb      	strb	r3, [r7, #15]
 800c992:	7bfa      	ldrb	r2, [r7, #15]
 800c994:	78fb      	ldrb	r3, [r7, #3]
 800c996:	3b01      	subs	r3, #1
 800c998:	429a      	cmp	r2, r3
 800c99a:	d3ec      	bcc.n	800c976 <HAL_PCDEx_SetTxFiFo+0x42>
 800c99c:	883b      	ldrh	r3, [r7, #0]
 800c99e:	0418      	lsls	r0, r3, #16
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6819      	ldr	r1, [r3, #0]
 800c9a4:	78fb      	ldrb	r3, [r7, #3]
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	68ba      	ldr	r2, [r7, #8]
 800c9aa:	4302      	orrs	r2, r0
 800c9ac:	3340      	adds	r3, #64	@ 0x40
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	440b      	add	r3, r1
 800c9b2:	605a      	str	r2, [r3, #4]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3714      	adds	r7, #20
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <HAL_PCDEx_SetRxFiFo>:
 800c9c2:	b480      	push	{r7}
 800c9c4:	b083      	sub	sp, #12
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	807b      	strh	r3, [r7, #2]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	887a      	ldrh	r2, [r7, #2]
 800c9d4:	625a      	str	r2, [r3, #36]	@ 0x24
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	4618      	mov	r0, r3
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <HAL_PCDEx_ActivateLPM>:
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	60fb      	str	r3, [r7, #12]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	699b      	ldr	r3, [r3, #24]
 800ca06:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	619a      	str	r2, [r3, #24]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca12:	4b05      	ldr	r3, [pc, #20]	@ (800ca28 <HAL_PCDEx_ActivateLPM+0x44>)
 800ca14:	4313      	orrs	r3, r2
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	6553      	str	r3, [r2, #84]	@ 0x54
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	10000003 	.word	0x10000003

0800ca2c <HAL_PCDEx_LPM_Callback>:
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	460b      	mov	r3, r1
 800ca36:	70fb      	strb	r3, [r7, #3]
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <HAL_PWREx_ConfigSupply>:
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	4b19      	ldr	r3, [pc, #100]	@ (800cab4 <HAL_PWREx_ConfigSupply+0x70>)
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	f003 0304 	and.w	r3, r3, #4
 800ca54:	2b04      	cmp	r3, #4
 800ca56:	d00a      	beq.n	800ca6e <HAL_PWREx_ConfigSupply+0x2a>
 800ca58:	4b16      	ldr	r3, [pc, #88]	@ (800cab4 <HAL_PWREx_ConfigSupply+0x70>)
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	f003 0307 	and.w	r3, r3, #7
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d001      	beq.n	800ca6a <HAL_PWREx_ConfigSupply+0x26>
 800ca66:	2301      	movs	r3, #1
 800ca68:	e01f      	b.n	800caaa <HAL_PWREx_ConfigSupply+0x66>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	e01d      	b.n	800caaa <HAL_PWREx_ConfigSupply+0x66>
 800ca6e:	4b11      	ldr	r3, [pc, #68]	@ (800cab4 <HAL_PWREx_ConfigSupply+0x70>)
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	f023 0207 	bic.w	r2, r3, #7
 800ca76:	490f      	ldr	r1, [pc, #60]	@ (800cab4 <HAL_PWREx_ConfigSupply+0x70>)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	60cb      	str	r3, [r1, #12]
 800ca7e:	f7fa f963 	bl	8006d48 <HAL_GetTick>
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	e009      	b.n	800ca9a <HAL_PWREx_ConfigSupply+0x56>
 800ca86:	f7fa f95f 	bl	8006d48 <HAL_GetTick>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	1ad3      	subs	r3, r2, r3
 800ca90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ca94:	d901      	bls.n	800ca9a <HAL_PWREx_ConfigSupply+0x56>
 800ca96:	2301      	movs	r3, #1
 800ca98:	e007      	b.n	800caaa <HAL_PWREx_ConfigSupply+0x66>
 800ca9a:	4b06      	ldr	r3, [pc, #24]	@ (800cab4 <HAL_PWREx_ConfigSupply+0x70>)
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800caa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800caa6:	d1ee      	bne.n	800ca86 <HAL_PWREx_ConfigSupply+0x42>
 800caa8:	2300      	movs	r3, #0
 800caaa:	4618      	mov	r0, r3
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	58024800 	.word	0x58024800

0800cab8 <HAL_PWREx_EnableUSBVoltageDetector>:
 800cab8:	b480      	push	{r7}
 800caba:	af00      	add	r7, sp, #0
 800cabc:	4b05      	ldr	r3, [pc, #20]	@ (800cad4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	4a04      	ldr	r2, [pc, #16]	@ (800cad4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800cac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cac6:	60d3      	str	r3, [r2, #12]
 800cac8:	bf00      	nop
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	58024800 	.word	0x58024800

0800cad8 <HAL_RCC_OscConfig>:
 800cad8:	b580      	push	{r7, lr}
 800cada:	b08c      	sub	sp, #48	@ 0x30
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d101      	bne.n	800caea <HAL_RCC_OscConfig+0x12>
 800cae6:	2301      	movs	r3, #1
 800cae8:	e3c8      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	f000 8087 	beq.w	800cc06 <HAL_RCC_OscConfig+0x12e>
 800caf8:	4b88      	ldr	r3, [pc, #544]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb02:	4b86      	ldr	r3, [pc, #536]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb06:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb0a:	2b10      	cmp	r3, #16
 800cb0c:	d007      	beq.n	800cb1e <HAL_RCC_OscConfig+0x46>
 800cb0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb10:	2b18      	cmp	r3, #24
 800cb12:	d110      	bne.n	800cb36 <HAL_RCC_OscConfig+0x5e>
 800cb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb16:	f003 0303 	and.w	r3, r3, #3
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d10b      	bne.n	800cb36 <HAL_RCC_OscConfig+0x5e>
 800cb1e:	4b7f      	ldr	r3, [pc, #508]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d06c      	beq.n	800cc04 <HAL_RCC_OscConfig+0x12c>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d168      	bne.n	800cc04 <HAL_RCC_OscConfig+0x12c>
 800cb32:	2301      	movs	r3, #1
 800cb34:	e3a2      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb3e:	d106      	bne.n	800cb4e <HAL_RCC_OscConfig+0x76>
 800cb40:	4b76      	ldr	r3, [pc, #472]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a75      	ldr	r2, [pc, #468]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb4a:	6013      	str	r3, [r2, #0]
 800cb4c:	e02e      	b.n	800cbac <HAL_RCC_OscConfig+0xd4>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10c      	bne.n	800cb70 <HAL_RCC_OscConfig+0x98>
 800cb56:	4b71      	ldr	r3, [pc, #452]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a70      	ldr	r2, [pc, #448]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb60:	6013      	str	r3, [r2, #0]
 800cb62:	4b6e      	ldr	r3, [pc, #440]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a6d      	ldr	r2, [pc, #436]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	e01d      	b.n	800cbac <HAL_RCC_OscConfig+0xd4>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cb78:	d10c      	bne.n	800cb94 <HAL_RCC_OscConfig+0xbc>
 800cb7a:	4b68      	ldr	r3, [pc, #416]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a67      	ldr	r2, [pc, #412]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cb84:	6013      	str	r3, [r2, #0]
 800cb86:	4b65      	ldr	r3, [pc, #404]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a64      	ldr	r2, [pc, #400]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb90:	6013      	str	r3, [r2, #0]
 800cb92:	e00b      	b.n	800cbac <HAL_RCC_OscConfig+0xd4>
 800cb94:	4b61      	ldr	r3, [pc, #388]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a60      	ldr	r2, [pc, #384]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cb9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb9e:	6013      	str	r3, [r2, #0]
 800cba0:	4b5e      	ldr	r3, [pc, #376]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a5d      	ldr	r2, [pc, #372]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cbaa:	6013      	str	r3, [r2, #0]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d013      	beq.n	800cbdc <HAL_RCC_OscConfig+0x104>
 800cbb4:	f7fa f8c8 	bl	8006d48 <HAL_GetTick>
 800cbb8:	6278      	str	r0, [r7, #36]	@ 0x24
 800cbba:	e008      	b.n	800cbce <HAL_RCC_OscConfig+0xf6>
 800cbbc:	f7fa f8c4 	bl	8006d48 <HAL_GetTick>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	2b64      	cmp	r3, #100	@ 0x64
 800cbc8:	d901      	bls.n	800cbce <HAL_RCC_OscConfig+0xf6>
 800cbca:	2303      	movs	r3, #3
 800cbcc:	e356      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800cbce:	4b53      	ldr	r3, [pc, #332]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d0f0      	beq.n	800cbbc <HAL_RCC_OscConfig+0xe4>
 800cbda:	e014      	b.n	800cc06 <HAL_RCC_OscConfig+0x12e>
 800cbdc:	f7fa f8b4 	bl	8006d48 <HAL_GetTick>
 800cbe0:	6278      	str	r0, [r7, #36]	@ 0x24
 800cbe2:	e008      	b.n	800cbf6 <HAL_RCC_OscConfig+0x11e>
 800cbe4:	f7fa f8b0 	bl	8006d48 <HAL_GetTick>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	2b64      	cmp	r3, #100	@ 0x64
 800cbf0:	d901      	bls.n	800cbf6 <HAL_RCC_OscConfig+0x11e>
 800cbf2:	2303      	movs	r3, #3
 800cbf4:	e342      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800cbf6:	4b49      	ldr	r3, [pc, #292]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d1f0      	bne.n	800cbe4 <HAL_RCC_OscConfig+0x10c>
 800cc02:	e000      	b.n	800cc06 <HAL_RCC_OscConfig+0x12e>
 800cc04:	bf00      	nop
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f003 0302 	and.w	r3, r3, #2
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f000 808c 	beq.w	800cd2c <HAL_RCC_OscConfig+0x254>
 800cc14:	4b41      	ldr	r3, [pc, #260]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cc1c:	623b      	str	r3, [r7, #32]
 800cc1e:	4b3f      	ldr	r3, [pc, #252]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cc20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc22:	61fb      	str	r3, [r7, #28]
 800cc24:	6a3b      	ldr	r3, [r7, #32]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d007      	beq.n	800cc3a <HAL_RCC_OscConfig+0x162>
 800cc2a:	6a3b      	ldr	r3, [r7, #32]
 800cc2c:	2b18      	cmp	r3, #24
 800cc2e:	d137      	bne.n	800cca0 <HAL_RCC_OscConfig+0x1c8>
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	f003 0303 	and.w	r3, r3, #3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d132      	bne.n	800cca0 <HAL_RCC_OscConfig+0x1c8>
 800cc3a:	4b38      	ldr	r3, [pc, #224]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f003 0304 	and.w	r3, r3, #4
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d005      	beq.n	800cc52 <HAL_RCC_OscConfig+0x17a>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <HAL_RCC_OscConfig+0x17a>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e314      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800cc52:	4b32      	ldr	r3, [pc, #200]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f023 0219 	bic.w	r2, r3, #25
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	492f      	ldr	r1, [pc, #188]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cc60:	4313      	orrs	r3, r2
 800cc62:	600b      	str	r3, [r1, #0]
 800cc64:	f7fa f870 	bl	8006d48 <HAL_GetTick>
 800cc68:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc6a:	e008      	b.n	800cc7e <HAL_RCC_OscConfig+0x1a6>
 800cc6c:	f7fa f86c 	bl	8006d48 <HAL_GetTick>
 800cc70:	4602      	mov	r2, r0
 800cc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	2b02      	cmp	r3, #2
 800cc78:	d901      	bls.n	800cc7e <HAL_RCC_OscConfig+0x1a6>
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	e2fe      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800cc7e:	4b27      	ldr	r3, [pc, #156]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f003 0304 	and.w	r3, r3, #4
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0f0      	beq.n	800cc6c <HAL_RCC_OscConfig+0x194>
 800cc8a:	4b24      	ldr	r3, [pc, #144]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	061b      	lsls	r3, r3, #24
 800cc98:	4920      	ldr	r1, [pc, #128]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	604b      	str	r3, [r1, #4]
 800cc9e:	e045      	b.n	800cd2c <HAL_RCC_OscConfig+0x254>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d026      	beq.n	800ccf6 <HAL_RCC_OscConfig+0x21e>
 800cca8:	4b1c      	ldr	r3, [pc, #112]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f023 0219 	bic.w	r2, r3, #25
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	4919      	ldr	r1, [pc, #100]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	600b      	str	r3, [r1, #0]
 800ccba:	f7fa f845 	bl	8006d48 <HAL_GetTick>
 800ccbe:	6278      	str	r0, [r7, #36]	@ 0x24
 800ccc0:	e008      	b.n	800ccd4 <HAL_RCC_OscConfig+0x1fc>
 800ccc2:	f7fa f841 	bl	8006d48 <HAL_GetTick>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccca:	1ad3      	subs	r3, r2, r3
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	d901      	bls.n	800ccd4 <HAL_RCC_OscConfig+0x1fc>
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	e2d3      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800ccd4:	4b11      	ldr	r3, [pc, #68]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f003 0304 	and.w	r3, r3, #4
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d0f0      	beq.n	800ccc2 <HAL_RCC_OscConfig+0x1ea>
 800cce0:	4b0e      	ldr	r3, [pc, #56]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	061b      	lsls	r3, r3, #24
 800ccee:	490b      	ldr	r1, [pc, #44]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	604b      	str	r3, [r1, #4]
 800ccf4:	e01a      	b.n	800cd2c <HAL_RCC_OscConfig+0x254>
 800ccf6:	4b09      	ldr	r3, [pc, #36]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a08      	ldr	r2, [pc, #32]	@ (800cd1c <HAL_RCC_OscConfig+0x244>)
 800ccfc:	f023 0301 	bic.w	r3, r3, #1
 800cd00:	6013      	str	r3, [r2, #0]
 800cd02:	f7fa f821 	bl	8006d48 <HAL_GetTick>
 800cd06:	6278      	str	r0, [r7, #36]	@ 0x24
 800cd08:	e00a      	b.n	800cd20 <HAL_RCC_OscConfig+0x248>
 800cd0a:	f7fa f81d 	bl	8006d48 <HAL_GetTick>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d903      	bls.n	800cd20 <HAL_RCC_OscConfig+0x248>
 800cd18:	2303      	movs	r3, #3
 800cd1a:	e2af      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800cd1c:	58024400 	.word	0x58024400
 800cd20:	4b96      	ldr	r3, [pc, #600]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f003 0304 	and.w	r3, r3, #4
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1ee      	bne.n	800cd0a <HAL_RCC_OscConfig+0x232>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 0310 	and.w	r3, r3, #16
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d06a      	beq.n	800ce0e <HAL_RCC_OscConfig+0x336>
 800cd38:	4b90      	ldr	r3, [pc, #576]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cd3a:	691b      	ldr	r3, [r3, #16]
 800cd3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd40:	61bb      	str	r3, [r7, #24]
 800cd42:	4b8e      	ldr	r3, [pc, #568]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cd44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd46:	617b      	str	r3, [r7, #20]
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	2b08      	cmp	r3, #8
 800cd4c:	d007      	beq.n	800cd5e <HAL_RCC_OscConfig+0x286>
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	2b18      	cmp	r3, #24
 800cd52:	d11b      	bne.n	800cd8c <HAL_RCC_OscConfig+0x2b4>
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	f003 0303 	and.w	r3, r3, #3
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d116      	bne.n	800cd8c <HAL_RCC_OscConfig+0x2b4>
 800cd5e:	4b87      	ldr	r3, [pc, #540]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d005      	beq.n	800cd76 <HAL_RCC_OscConfig+0x29e>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	69db      	ldr	r3, [r3, #28]
 800cd6e:	2b80      	cmp	r3, #128	@ 0x80
 800cd70:	d001      	beq.n	800cd76 <HAL_RCC_OscConfig+0x29e>
 800cd72:	2301      	movs	r3, #1
 800cd74:	e282      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800cd76:	4b81      	ldr	r3, [pc, #516]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	061b      	lsls	r3, r3, #24
 800cd84:	497d      	ldr	r1, [pc, #500]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cd86:	4313      	orrs	r3, r2
 800cd88:	60cb      	str	r3, [r1, #12]
 800cd8a:	e040      	b.n	800ce0e <HAL_RCC_OscConfig+0x336>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	69db      	ldr	r3, [r3, #28]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d023      	beq.n	800cddc <HAL_RCC_OscConfig+0x304>
 800cd94:	4b79      	ldr	r3, [pc, #484]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a78      	ldr	r2, [pc, #480]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cd9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd9e:	6013      	str	r3, [r2, #0]
 800cda0:	f7f9 ffd2 	bl	8006d48 <HAL_GetTick>
 800cda4:	6278      	str	r0, [r7, #36]	@ 0x24
 800cda6:	e008      	b.n	800cdba <HAL_RCC_OscConfig+0x2e2>
 800cda8:	f7f9 ffce 	bl	8006d48 <HAL_GetTick>
 800cdac:	4602      	mov	r2, r0
 800cdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d901      	bls.n	800cdba <HAL_RCC_OscConfig+0x2e2>
 800cdb6:	2303      	movs	r3, #3
 800cdb8:	e260      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800cdba:	4b70      	ldr	r3, [pc, #448]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d0f0      	beq.n	800cda8 <HAL_RCC_OscConfig+0x2d0>
 800cdc6:	4b6d      	ldr	r3, [pc, #436]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	061b      	lsls	r3, r3, #24
 800cdd4:	4969      	ldr	r1, [pc, #420]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	60cb      	str	r3, [r1, #12]
 800cdda:	e018      	b.n	800ce0e <HAL_RCC_OscConfig+0x336>
 800cddc:	4b67      	ldr	r3, [pc, #412]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a66      	ldr	r2, [pc, #408]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cde2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cde6:	6013      	str	r3, [r2, #0]
 800cde8:	f7f9 ffae 	bl	8006d48 <HAL_GetTick>
 800cdec:	6278      	str	r0, [r7, #36]	@ 0x24
 800cdee:	e008      	b.n	800ce02 <HAL_RCC_OscConfig+0x32a>
 800cdf0:	f7f9 ffaa 	bl	8006d48 <HAL_GetTick>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d901      	bls.n	800ce02 <HAL_RCC_OscConfig+0x32a>
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e23c      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800ce02:	4b5e      	ldr	r3, [pc, #376]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1f0      	bne.n	800cdf0 <HAL_RCC_OscConfig+0x318>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f003 0308 	and.w	r3, r3, #8
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d036      	beq.n	800ce88 <HAL_RCC_OscConfig+0x3b0>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	695b      	ldr	r3, [r3, #20]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d019      	beq.n	800ce56 <HAL_RCC_OscConfig+0x37e>
 800ce22:	4b56      	ldr	r3, [pc, #344]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800ce24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce26:	4a55      	ldr	r2, [pc, #340]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800ce28:	f043 0301 	orr.w	r3, r3, #1
 800ce2c:	6753      	str	r3, [r2, #116]	@ 0x74
 800ce2e:	f7f9 ff8b 	bl	8006d48 <HAL_GetTick>
 800ce32:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce34:	e008      	b.n	800ce48 <HAL_RCC_OscConfig+0x370>
 800ce36:	f7f9 ff87 	bl	8006d48 <HAL_GetTick>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3e:	1ad3      	subs	r3, r2, r3
 800ce40:	2b02      	cmp	r3, #2
 800ce42:	d901      	bls.n	800ce48 <HAL_RCC_OscConfig+0x370>
 800ce44:	2303      	movs	r3, #3
 800ce46:	e219      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800ce48:	4b4c      	ldr	r3, [pc, #304]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800ce4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce4c:	f003 0302 	and.w	r3, r3, #2
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d0f0      	beq.n	800ce36 <HAL_RCC_OscConfig+0x35e>
 800ce54:	e018      	b.n	800ce88 <HAL_RCC_OscConfig+0x3b0>
 800ce56:	4b49      	ldr	r3, [pc, #292]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800ce58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce5a:	4a48      	ldr	r2, [pc, #288]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800ce5c:	f023 0301 	bic.w	r3, r3, #1
 800ce60:	6753      	str	r3, [r2, #116]	@ 0x74
 800ce62:	f7f9 ff71 	bl	8006d48 <HAL_GetTick>
 800ce66:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce68:	e008      	b.n	800ce7c <HAL_RCC_OscConfig+0x3a4>
 800ce6a:	f7f9 ff6d 	bl	8006d48 <HAL_GetTick>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d901      	bls.n	800ce7c <HAL_RCC_OscConfig+0x3a4>
 800ce78:	2303      	movs	r3, #3
 800ce7a:	e1ff      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800ce7c:	4b3f      	ldr	r3, [pc, #252]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800ce7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce80:	f003 0302 	and.w	r3, r3, #2
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d1f0      	bne.n	800ce6a <HAL_RCC_OscConfig+0x392>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f003 0320 	and.w	r3, r3, #32
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d036      	beq.n	800cf02 <HAL_RCC_OscConfig+0x42a>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	699b      	ldr	r3, [r3, #24]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d019      	beq.n	800ced0 <HAL_RCC_OscConfig+0x3f8>
 800ce9c:	4b37      	ldr	r3, [pc, #220]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a36      	ldr	r2, [pc, #216]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cea2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cea6:	6013      	str	r3, [r2, #0]
 800cea8:	f7f9 ff4e 	bl	8006d48 <HAL_GetTick>
 800ceac:	6278      	str	r0, [r7, #36]	@ 0x24
 800ceae:	e008      	b.n	800cec2 <HAL_RCC_OscConfig+0x3ea>
 800ceb0:	f7f9 ff4a 	bl	8006d48 <HAL_GetTick>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d901      	bls.n	800cec2 <HAL_RCC_OscConfig+0x3ea>
 800cebe:	2303      	movs	r3, #3
 800cec0:	e1dc      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800cec2:	4b2e      	ldr	r3, [pc, #184]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d0f0      	beq.n	800ceb0 <HAL_RCC_OscConfig+0x3d8>
 800cece:	e018      	b.n	800cf02 <HAL_RCC_OscConfig+0x42a>
 800ced0:	4b2a      	ldr	r3, [pc, #168]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a29      	ldr	r2, [pc, #164]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800ced6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	f7f9 ff34 	bl	8006d48 <HAL_GetTick>
 800cee0:	6278      	str	r0, [r7, #36]	@ 0x24
 800cee2:	e008      	b.n	800cef6 <HAL_RCC_OscConfig+0x41e>
 800cee4:	f7f9 ff30 	bl	8006d48 <HAL_GetTick>
 800cee8:	4602      	mov	r2, r0
 800ceea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceec:	1ad3      	subs	r3, r2, r3
 800ceee:	2b02      	cmp	r3, #2
 800cef0:	d901      	bls.n	800cef6 <HAL_RCC_OscConfig+0x41e>
 800cef2:	2303      	movs	r3, #3
 800cef4:	e1c2      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800cef6:	4b21      	ldr	r3, [pc, #132]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1f0      	bne.n	800cee4 <HAL_RCC_OscConfig+0x40c>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f003 0304 	and.w	r3, r3, #4
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f000 8086 	beq.w	800d01c <HAL_RCC_OscConfig+0x544>
 800cf10:	4b1b      	ldr	r3, [pc, #108]	@ (800cf80 <HAL_RCC_OscConfig+0x4a8>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a1a      	ldr	r2, [pc, #104]	@ (800cf80 <HAL_RCC_OscConfig+0x4a8>)
 800cf16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf1a:	6013      	str	r3, [r2, #0]
 800cf1c:	f7f9 ff14 	bl	8006d48 <HAL_GetTick>
 800cf20:	6278      	str	r0, [r7, #36]	@ 0x24
 800cf22:	e008      	b.n	800cf36 <HAL_RCC_OscConfig+0x45e>
 800cf24:	f7f9 ff10 	bl	8006d48 <HAL_GetTick>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	2b64      	cmp	r3, #100	@ 0x64
 800cf30:	d901      	bls.n	800cf36 <HAL_RCC_OscConfig+0x45e>
 800cf32:	2303      	movs	r3, #3
 800cf34:	e1a2      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800cf36:	4b12      	ldr	r3, [pc, #72]	@ (800cf80 <HAL_RCC_OscConfig+0x4a8>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d0f0      	beq.n	800cf24 <HAL_RCC_OscConfig+0x44c>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d106      	bne.n	800cf58 <HAL_RCC_OscConfig+0x480>
 800cf4a:	4b0c      	ldr	r3, [pc, #48]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cf4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf4e:	4a0b      	ldr	r2, [pc, #44]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cf50:	f043 0301 	orr.w	r3, r3, #1
 800cf54:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf56:	e032      	b.n	800cfbe <HAL_RCC_OscConfig+0x4e6>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d111      	bne.n	800cf84 <HAL_RCC_OscConfig+0x4ac>
 800cf60:	4b06      	ldr	r3, [pc, #24]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cf62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf64:	4a05      	ldr	r2, [pc, #20]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cf66:	f023 0301 	bic.w	r3, r3, #1
 800cf6a:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf6c:	4b03      	ldr	r3, [pc, #12]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cf6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf70:	4a02      	ldr	r2, [pc, #8]	@ (800cf7c <HAL_RCC_OscConfig+0x4a4>)
 800cf72:	f023 0304 	bic.w	r3, r3, #4
 800cf76:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf78:	e021      	b.n	800cfbe <HAL_RCC_OscConfig+0x4e6>
 800cf7a:	bf00      	nop
 800cf7c:	58024400 	.word	0x58024400
 800cf80:	58024800 	.word	0x58024800
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	2b05      	cmp	r3, #5
 800cf8a:	d10c      	bne.n	800cfa6 <HAL_RCC_OscConfig+0x4ce>
 800cf8c:	4b83      	ldr	r3, [pc, #524]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800cf8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf90:	4a82      	ldr	r2, [pc, #520]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800cf92:	f043 0304 	orr.w	r3, r3, #4
 800cf96:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf98:	4b80      	ldr	r3, [pc, #512]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800cf9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf9c:	4a7f      	ldr	r2, [pc, #508]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800cf9e:	f043 0301 	orr.w	r3, r3, #1
 800cfa2:	6713      	str	r3, [r2, #112]	@ 0x70
 800cfa4:	e00b      	b.n	800cfbe <HAL_RCC_OscConfig+0x4e6>
 800cfa6:	4b7d      	ldr	r3, [pc, #500]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800cfa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfaa:	4a7c      	ldr	r2, [pc, #496]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800cfac:	f023 0301 	bic.w	r3, r3, #1
 800cfb0:	6713      	str	r3, [r2, #112]	@ 0x70
 800cfb2:	4b7a      	ldr	r3, [pc, #488]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800cfb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfb6:	4a79      	ldr	r2, [pc, #484]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800cfb8:	f023 0304 	bic.w	r3, r3, #4
 800cfbc:	6713      	str	r3, [r2, #112]	@ 0x70
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d015      	beq.n	800cff2 <HAL_RCC_OscConfig+0x51a>
 800cfc6:	f7f9 febf 	bl	8006d48 <HAL_GetTick>
 800cfca:	6278      	str	r0, [r7, #36]	@ 0x24
 800cfcc:	e00a      	b.n	800cfe4 <HAL_RCC_OscConfig+0x50c>
 800cfce:	f7f9 febb 	bl	8006d48 <HAL_GetTick>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd6:	1ad3      	subs	r3, r2, r3
 800cfd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d901      	bls.n	800cfe4 <HAL_RCC_OscConfig+0x50c>
 800cfe0:	2303      	movs	r3, #3
 800cfe2:	e14b      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800cfe4:	4b6d      	ldr	r3, [pc, #436]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800cfe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfe8:	f003 0302 	and.w	r3, r3, #2
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d0ee      	beq.n	800cfce <HAL_RCC_OscConfig+0x4f6>
 800cff0:	e014      	b.n	800d01c <HAL_RCC_OscConfig+0x544>
 800cff2:	f7f9 fea9 	bl	8006d48 <HAL_GetTick>
 800cff6:	6278      	str	r0, [r7, #36]	@ 0x24
 800cff8:	e00a      	b.n	800d010 <HAL_RCC_OscConfig+0x538>
 800cffa:	f7f9 fea5 	bl	8006d48 <HAL_GetTick>
 800cffe:	4602      	mov	r2, r0
 800d000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d008:	4293      	cmp	r3, r2
 800d00a:	d901      	bls.n	800d010 <HAL_RCC_OscConfig+0x538>
 800d00c:	2303      	movs	r3, #3
 800d00e:	e135      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800d010:	4b62      	ldr	r3, [pc, #392]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d014:	f003 0302 	and.w	r3, r3, #2
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1ee      	bne.n	800cffa <HAL_RCC_OscConfig+0x522>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d020:	2b00      	cmp	r3, #0
 800d022:	f000 812a 	beq.w	800d27a <HAL_RCC_OscConfig+0x7a2>
 800d026:	4b5d      	ldr	r3, [pc, #372]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d02e:	2b18      	cmp	r3, #24
 800d030:	f000 80ba 	beq.w	800d1a8 <HAL_RCC_OscConfig+0x6d0>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d038:	2b02      	cmp	r3, #2
 800d03a:	f040 8095 	bne.w	800d168 <HAL_RCC_OscConfig+0x690>
 800d03e:	4b57      	ldr	r3, [pc, #348]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a56      	ldr	r2, [pc, #344]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d044:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d048:	6013      	str	r3, [r2, #0]
 800d04a:	f7f9 fe7d 	bl	8006d48 <HAL_GetTick>
 800d04e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d050:	e008      	b.n	800d064 <HAL_RCC_OscConfig+0x58c>
 800d052:	f7f9 fe79 	bl	8006d48 <HAL_GetTick>
 800d056:	4602      	mov	r2, r0
 800d058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d901      	bls.n	800d064 <HAL_RCC_OscConfig+0x58c>
 800d060:	2303      	movs	r3, #3
 800d062:	e10b      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800d064:	4b4d      	ldr	r3, [pc, #308]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1f0      	bne.n	800d052 <HAL_RCC_OscConfig+0x57a>
 800d070:	4b4a      	ldr	r3, [pc, #296]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d072:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d074:	4b4a      	ldr	r3, [pc, #296]	@ (800d1a0 <HAL_RCC_OscConfig+0x6c8>)
 800d076:	4013      	ands	r3, r2
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d080:	0112      	lsls	r2, r2, #4
 800d082:	430a      	orrs	r2, r1
 800d084:	4945      	ldr	r1, [pc, #276]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d086:	4313      	orrs	r3, r2
 800d088:	628b      	str	r3, [r1, #40]	@ 0x28
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d08e:	3b01      	subs	r3, #1
 800d090:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d098:	3b01      	subs	r3, #1
 800d09a:	025b      	lsls	r3, r3, #9
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	431a      	orrs	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	041b      	lsls	r3, r3, #16
 800d0a8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d0ac:	431a      	orrs	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	061b      	lsls	r3, r3, #24
 800d0b6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d0ba:	4938      	ldr	r1, [pc, #224]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	630b      	str	r3, [r1, #48]	@ 0x30
 800d0c0:	4b36      	ldr	r3, [pc, #216]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0c4:	4a35      	ldr	r2, [pc, #212]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d0c6:	f023 0301 	bic.w	r3, r3, #1
 800d0ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d0cc:	4b33      	ldr	r3, [pc, #204]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d0ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0d0:	4b34      	ldr	r3, [pc, #208]	@ (800d1a4 <HAL_RCC_OscConfig+0x6cc>)
 800d0d2:	4013      	ands	r3, r2
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d0d8:	00d2      	lsls	r2, r2, #3
 800d0da:	4930      	ldr	r1, [pc, #192]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	634b      	str	r3, [r1, #52]	@ 0x34
 800d0e0:	4b2e      	ldr	r3, [pc, #184]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0e4:	f023 020c 	bic.w	r2, r3, #12
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0ec:	492b      	ldr	r1, [pc, #172]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d0f2:	4b2a      	ldr	r3, [pc, #168]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f6:	f023 0202 	bic.w	r2, r3, #2
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0fe:	4927      	ldr	r1, [pc, #156]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d100:	4313      	orrs	r3, r2
 800d102:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d104:	4b25      	ldr	r3, [pc, #148]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d108:	4a24      	ldr	r2, [pc, #144]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d10a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d10e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d110:	4b22      	ldr	r3, [pc, #136]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d114:	4a21      	ldr	r2, [pc, #132]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d11a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d11c:	4b1f      	ldr	r3, [pc, #124]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d120:	4a1e      	ldr	r2, [pc, #120]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d122:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d126:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d128:	4b1c      	ldr	r3, [pc, #112]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d12c:	4a1b      	ldr	r2, [pc, #108]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d12e:	f043 0301 	orr.w	r3, r3, #1
 800d132:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d134:	4b19      	ldr	r3, [pc, #100]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a18      	ldr	r2, [pc, #96]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d13a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d13e:	6013      	str	r3, [r2, #0]
 800d140:	f7f9 fe02 	bl	8006d48 <HAL_GetTick>
 800d144:	6278      	str	r0, [r7, #36]	@ 0x24
 800d146:	e008      	b.n	800d15a <HAL_RCC_OscConfig+0x682>
 800d148:	f7f9 fdfe 	bl	8006d48 <HAL_GetTick>
 800d14c:	4602      	mov	r2, r0
 800d14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	2b02      	cmp	r3, #2
 800d154:	d901      	bls.n	800d15a <HAL_RCC_OscConfig+0x682>
 800d156:	2303      	movs	r3, #3
 800d158:	e090      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800d15a:	4b10      	ldr	r3, [pc, #64]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d162:	2b00      	cmp	r3, #0
 800d164:	d0f0      	beq.n	800d148 <HAL_RCC_OscConfig+0x670>
 800d166:	e088      	b.n	800d27a <HAL_RCC_OscConfig+0x7a2>
 800d168:	4b0c      	ldr	r3, [pc, #48]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a0b      	ldr	r2, [pc, #44]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d16e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d172:	6013      	str	r3, [r2, #0]
 800d174:	f7f9 fde8 	bl	8006d48 <HAL_GetTick>
 800d178:	6278      	str	r0, [r7, #36]	@ 0x24
 800d17a:	e008      	b.n	800d18e <HAL_RCC_OscConfig+0x6b6>
 800d17c:	f7f9 fde4 	bl	8006d48 <HAL_GetTick>
 800d180:	4602      	mov	r2, r0
 800d182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	2b02      	cmp	r3, #2
 800d188:	d901      	bls.n	800d18e <HAL_RCC_OscConfig+0x6b6>
 800d18a:	2303      	movs	r3, #3
 800d18c:	e076      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800d18e:	4b03      	ldr	r3, [pc, #12]	@ (800d19c <HAL_RCC_OscConfig+0x6c4>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d196:	2b00      	cmp	r3, #0
 800d198:	d1f0      	bne.n	800d17c <HAL_RCC_OscConfig+0x6a4>
 800d19a:	e06e      	b.n	800d27a <HAL_RCC_OscConfig+0x7a2>
 800d19c:	58024400 	.word	0x58024400
 800d1a0:	fffffc0c 	.word	0xfffffc0c
 800d1a4:	ffff0007 	.word	0xffff0007
 800d1a8:	4b36      	ldr	r3, [pc, #216]	@ (800d284 <HAL_RCC_OscConfig+0x7ac>)
 800d1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1ac:	613b      	str	r3, [r7, #16]
 800d1ae:	4b35      	ldr	r3, [pc, #212]	@ (800d284 <HAL_RCC_OscConfig+0x7ac>)
 800d1b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1b2:	60fb      	str	r3, [r7, #12]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d031      	beq.n	800d220 <HAL_RCC_OscConfig+0x748>
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	f003 0203 	and.w	r2, r3, #3
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d12a      	bne.n	800d220 <HAL_RCC_OscConfig+0x748>
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	091b      	lsrs	r3, r3, #4
 800d1ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d122      	bne.n	800d220 <HAL_RCC_OscConfig+0x748>
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1e4:	3b01      	subs	r3, #1
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d11a      	bne.n	800d220 <HAL_RCC_OscConfig+0x748>
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	0a5b      	lsrs	r3, r3, #9
 800d1ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d111      	bne.n	800d220 <HAL_RCC_OscConfig+0x748>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	0c1b      	lsrs	r3, r3, #16
 800d200:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d208:	3b01      	subs	r3, #1
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d108      	bne.n	800d220 <HAL_RCC_OscConfig+0x748>
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	0e1b      	lsrs	r3, r3, #24
 800d212:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d21a:	3b01      	subs	r3, #1
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d001      	beq.n	800d224 <HAL_RCC_OscConfig+0x74c>
 800d220:	2301      	movs	r3, #1
 800d222:	e02b      	b.n	800d27c <HAL_RCC_OscConfig+0x7a4>
 800d224:	4b17      	ldr	r3, [pc, #92]	@ (800d284 <HAL_RCC_OscConfig+0x7ac>)
 800d226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d228:	08db      	lsrs	r3, r3, #3
 800d22a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d22e:	613b      	str	r3, [r7, #16]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d234:	693a      	ldr	r2, [r7, #16]
 800d236:	429a      	cmp	r2, r3
 800d238:	d01f      	beq.n	800d27a <HAL_RCC_OscConfig+0x7a2>
 800d23a:	4b12      	ldr	r3, [pc, #72]	@ (800d284 <HAL_RCC_OscConfig+0x7ac>)
 800d23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d23e:	4a11      	ldr	r2, [pc, #68]	@ (800d284 <HAL_RCC_OscConfig+0x7ac>)
 800d240:	f023 0301 	bic.w	r3, r3, #1
 800d244:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d246:	f7f9 fd7f 	bl	8006d48 <HAL_GetTick>
 800d24a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d24c:	bf00      	nop
 800d24e:	f7f9 fd7b 	bl	8006d48 <HAL_GetTick>
 800d252:	4602      	mov	r2, r0
 800d254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d256:	4293      	cmp	r3, r2
 800d258:	d0f9      	beq.n	800d24e <HAL_RCC_OscConfig+0x776>
 800d25a:	4b0a      	ldr	r3, [pc, #40]	@ (800d284 <HAL_RCC_OscConfig+0x7ac>)
 800d25c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d25e:	4b0a      	ldr	r3, [pc, #40]	@ (800d288 <HAL_RCC_OscConfig+0x7b0>)
 800d260:	4013      	ands	r3, r2
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d266:	00d2      	lsls	r2, r2, #3
 800d268:	4906      	ldr	r1, [pc, #24]	@ (800d284 <HAL_RCC_OscConfig+0x7ac>)
 800d26a:	4313      	orrs	r3, r2
 800d26c:	634b      	str	r3, [r1, #52]	@ 0x34
 800d26e:	4b05      	ldr	r3, [pc, #20]	@ (800d284 <HAL_RCC_OscConfig+0x7ac>)
 800d270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d272:	4a04      	ldr	r2, [pc, #16]	@ (800d284 <HAL_RCC_OscConfig+0x7ac>)
 800d274:	f043 0301 	orr.w	r3, r3, #1
 800d278:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d27a:	2300      	movs	r3, #0
 800d27c:	4618      	mov	r0, r3
 800d27e:	3730      	adds	r7, #48	@ 0x30
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	58024400 	.word	0x58024400
 800d288:	ffff0007 	.word	0xffff0007

0800d28c <HAL_RCC_ClockConfig>:
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b086      	sub	sp, #24
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d101      	bne.n	800d2a0 <HAL_RCC_ClockConfig+0x14>
 800d29c:	2301      	movs	r3, #1
 800d29e:	e19c      	b.n	800d5da <HAL_RCC_ClockConfig+0x34e>
 800d2a0:	4b8a      	ldr	r3, [pc, #552]	@ (800d4cc <HAL_RCC_ClockConfig+0x240>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f003 030f 	and.w	r3, r3, #15
 800d2a8:	683a      	ldr	r2, [r7, #0]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d910      	bls.n	800d2d0 <HAL_RCC_ClockConfig+0x44>
 800d2ae:	4b87      	ldr	r3, [pc, #540]	@ (800d4cc <HAL_RCC_ClockConfig+0x240>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f023 020f 	bic.w	r2, r3, #15
 800d2b6:	4985      	ldr	r1, [pc, #532]	@ (800d4cc <HAL_RCC_ClockConfig+0x240>)
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	600b      	str	r3, [r1, #0]
 800d2be:	4b83      	ldr	r3, [pc, #524]	@ (800d4cc <HAL_RCC_ClockConfig+0x240>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f003 030f 	and.w	r3, r3, #15
 800d2c6:	683a      	ldr	r2, [r7, #0]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d001      	beq.n	800d2d0 <HAL_RCC_ClockConfig+0x44>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	e184      	b.n	800d5da <HAL_RCC_ClockConfig+0x34e>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 0304 	and.w	r3, r3, #4
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d010      	beq.n	800d2fe <HAL_RCC_ClockConfig+0x72>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	691a      	ldr	r2, [r3, #16]
 800d2e0:	4b7b      	ldr	r3, [pc, #492]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d2e2:	699b      	ldr	r3, [r3, #24]
 800d2e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d908      	bls.n	800d2fe <HAL_RCC_ClockConfig+0x72>
 800d2ec:	4b78      	ldr	r3, [pc, #480]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d2ee:	699b      	ldr	r3, [r3, #24]
 800d2f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	691b      	ldr	r3, [r3, #16]
 800d2f8:	4975      	ldr	r1, [pc, #468]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	618b      	str	r3, [r1, #24]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f003 0308 	and.w	r3, r3, #8
 800d306:	2b00      	cmp	r3, #0
 800d308:	d010      	beq.n	800d32c <HAL_RCC_ClockConfig+0xa0>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	695a      	ldr	r2, [r3, #20]
 800d30e:	4b70      	ldr	r3, [pc, #448]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d310:	69db      	ldr	r3, [r3, #28]
 800d312:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d316:	429a      	cmp	r2, r3
 800d318:	d908      	bls.n	800d32c <HAL_RCC_ClockConfig+0xa0>
 800d31a:	4b6d      	ldr	r3, [pc, #436]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d31c:	69db      	ldr	r3, [r3, #28]
 800d31e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	695b      	ldr	r3, [r3, #20]
 800d326:	496a      	ldr	r1, [pc, #424]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d328:	4313      	orrs	r3, r2
 800d32a:	61cb      	str	r3, [r1, #28]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f003 0310 	and.w	r3, r3, #16
 800d334:	2b00      	cmp	r3, #0
 800d336:	d010      	beq.n	800d35a <HAL_RCC_ClockConfig+0xce>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	699a      	ldr	r2, [r3, #24]
 800d33c:	4b64      	ldr	r3, [pc, #400]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d33e:	69db      	ldr	r3, [r3, #28]
 800d340:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d344:	429a      	cmp	r2, r3
 800d346:	d908      	bls.n	800d35a <HAL_RCC_ClockConfig+0xce>
 800d348:	4b61      	ldr	r3, [pc, #388]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d34a:	69db      	ldr	r3, [r3, #28]
 800d34c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	699b      	ldr	r3, [r3, #24]
 800d354:	495e      	ldr	r1, [pc, #376]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d356:	4313      	orrs	r3, r2
 800d358:	61cb      	str	r3, [r1, #28]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f003 0320 	and.w	r3, r3, #32
 800d362:	2b00      	cmp	r3, #0
 800d364:	d010      	beq.n	800d388 <HAL_RCC_ClockConfig+0xfc>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	69da      	ldr	r2, [r3, #28]
 800d36a:	4b59      	ldr	r3, [pc, #356]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d36c:	6a1b      	ldr	r3, [r3, #32]
 800d36e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d372:	429a      	cmp	r2, r3
 800d374:	d908      	bls.n	800d388 <HAL_RCC_ClockConfig+0xfc>
 800d376:	4b56      	ldr	r3, [pc, #344]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d378:	6a1b      	ldr	r3, [r3, #32]
 800d37a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	69db      	ldr	r3, [r3, #28]
 800d382:	4953      	ldr	r1, [pc, #332]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d384:	4313      	orrs	r3, r2
 800d386:	620b      	str	r3, [r1, #32]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f003 0302 	and.w	r3, r3, #2
 800d390:	2b00      	cmp	r3, #0
 800d392:	d010      	beq.n	800d3b6 <HAL_RCC_ClockConfig+0x12a>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	68da      	ldr	r2, [r3, #12]
 800d398:	4b4d      	ldr	r3, [pc, #308]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d39a:	699b      	ldr	r3, [r3, #24]
 800d39c:	f003 030f 	and.w	r3, r3, #15
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d908      	bls.n	800d3b6 <HAL_RCC_ClockConfig+0x12a>
 800d3a4:	4b4a      	ldr	r3, [pc, #296]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d3a6:	699b      	ldr	r3, [r3, #24]
 800d3a8:	f023 020f 	bic.w	r2, r3, #15
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	4947      	ldr	r1, [pc, #284]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	618b      	str	r3, [r1, #24]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f003 0301 	and.w	r3, r3, #1
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d055      	beq.n	800d46e <HAL_RCC_ClockConfig+0x1e2>
 800d3c2:	4b43      	ldr	r3, [pc, #268]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d3c4:	699b      	ldr	r3, [r3, #24]
 800d3c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	4940      	ldr	r1, [pc, #256]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	618b      	str	r3, [r1, #24]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	2b02      	cmp	r3, #2
 800d3da:	d107      	bne.n	800d3ec <HAL_RCC_ClockConfig+0x160>
 800d3dc:	4b3c      	ldr	r3, [pc, #240]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d121      	bne.n	800d42c <HAL_RCC_ClockConfig+0x1a0>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e0f6      	b.n	800d5da <HAL_RCC_ClockConfig+0x34e>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	2b03      	cmp	r3, #3
 800d3f2:	d107      	bne.n	800d404 <HAL_RCC_ClockConfig+0x178>
 800d3f4:	4b36      	ldr	r3, [pc, #216]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d115      	bne.n	800d42c <HAL_RCC_ClockConfig+0x1a0>
 800d400:	2301      	movs	r3, #1
 800d402:	e0ea      	b.n	800d5da <HAL_RCC_ClockConfig+0x34e>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d107      	bne.n	800d41c <HAL_RCC_ClockConfig+0x190>
 800d40c:	4b30      	ldr	r3, [pc, #192]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d414:	2b00      	cmp	r3, #0
 800d416:	d109      	bne.n	800d42c <HAL_RCC_ClockConfig+0x1a0>
 800d418:	2301      	movs	r3, #1
 800d41a:	e0de      	b.n	800d5da <HAL_RCC_ClockConfig+0x34e>
 800d41c:	4b2c      	ldr	r3, [pc, #176]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f003 0304 	and.w	r3, r3, #4
 800d424:	2b00      	cmp	r3, #0
 800d426:	d101      	bne.n	800d42c <HAL_RCC_ClockConfig+0x1a0>
 800d428:	2301      	movs	r3, #1
 800d42a:	e0d6      	b.n	800d5da <HAL_RCC_ClockConfig+0x34e>
 800d42c:	4b28      	ldr	r3, [pc, #160]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d42e:	691b      	ldr	r3, [r3, #16]
 800d430:	f023 0207 	bic.w	r2, r3, #7
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	4925      	ldr	r1, [pc, #148]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d43a:	4313      	orrs	r3, r2
 800d43c:	610b      	str	r3, [r1, #16]
 800d43e:	f7f9 fc83 	bl	8006d48 <HAL_GetTick>
 800d442:	6178      	str	r0, [r7, #20]
 800d444:	e00a      	b.n	800d45c <HAL_RCC_ClockConfig+0x1d0>
 800d446:	f7f9 fc7f 	bl	8006d48 <HAL_GetTick>
 800d44a:	4602      	mov	r2, r0
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d454:	4293      	cmp	r3, r2
 800d456:	d901      	bls.n	800d45c <HAL_RCC_ClockConfig+0x1d0>
 800d458:	2303      	movs	r3, #3
 800d45a:	e0be      	b.n	800d5da <HAL_RCC_ClockConfig+0x34e>
 800d45c:	4b1c      	ldr	r3, [pc, #112]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d45e:	691b      	ldr	r3, [r3, #16]
 800d460:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	00db      	lsls	r3, r3, #3
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d1eb      	bne.n	800d446 <HAL_RCC_ClockConfig+0x1ba>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f003 0302 	and.w	r3, r3, #2
 800d476:	2b00      	cmp	r3, #0
 800d478:	d010      	beq.n	800d49c <HAL_RCC_ClockConfig+0x210>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	68da      	ldr	r2, [r3, #12]
 800d47e:	4b14      	ldr	r3, [pc, #80]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d480:	699b      	ldr	r3, [r3, #24]
 800d482:	f003 030f 	and.w	r3, r3, #15
 800d486:	429a      	cmp	r2, r3
 800d488:	d208      	bcs.n	800d49c <HAL_RCC_ClockConfig+0x210>
 800d48a:	4b11      	ldr	r3, [pc, #68]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d48c:	699b      	ldr	r3, [r3, #24]
 800d48e:	f023 020f 	bic.w	r2, r3, #15
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	68db      	ldr	r3, [r3, #12]
 800d496:	490e      	ldr	r1, [pc, #56]	@ (800d4d0 <HAL_RCC_ClockConfig+0x244>)
 800d498:	4313      	orrs	r3, r2
 800d49a:	618b      	str	r3, [r1, #24]
 800d49c:	4b0b      	ldr	r3, [pc, #44]	@ (800d4cc <HAL_RCC_ClockConfig+0x240>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f003 030f 	and.w	r3, r3, #15
 800d4a4:	683a      	ldr	r2, [r7, #0]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d214      	bcs.n	800d4d4 <HAL_RCC_ClockConfig+0x248>
 800d4aa:	4b08      	ldr	r3, [pc, #32]	@ (800d4cc <HAL_RCC_ClockConfig+0x240>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f023 020f 	bic.w	r2, r3, #15
 800d4b2:	4906      	ldr	r1, [pc, #24]	@ (800d4cc <HAL_RCC_ClockConfig+0x240>)
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	600b      	str	r3, [r1, #0]
 800d4ba:	4b04      	ldr	r3, [pc, #16]	@ (800d4cc <HAL_RCC_ClockConfig+0x240>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f003 030f 	and.w	r3, r3, #15
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d005      	beq.n	800d4d4 <HAL_RCC_ClockConfig+0x248>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e086      	b.n	800d5da <HAL_RCC_ClockConfig+0x34e>
 800d4cc:	52002000 	.word	0x52002000
 800d4d0:	58024400 	.word	0x58024400
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f003 0304 	and.w	r3, r3, #4
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d010      	beq.n	800d502 <HAL_RCC_ClockConfig+0x276>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	691a      	ldr	r2, [r3, #16]
 800d4e4:	4b3f      	ldr	r3, [pc, #252]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d4e6:	699b      	ldr	r3, [r3, #24]
 800d4e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d208      	bcs.n	800d502 <HAL_RCC_ClockConfig+0x276>
 800d4f0:	4b3c      	ldr	r3, [pc, #240]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d4f2:	699b      	ldr	r3, [r3, #24]
 800d4f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	691b      	ldr	r3, [r3, #16]
 800d4fc:	4939      	ldr	r1, [pc, #228]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d4fe:	4313      	orrs	r3, r2
 800d500:	618b      	str	r3, [r1, #24]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f003 0308 	and.w	r3, r3, #8
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d010      	beq.n	800d530 <HAL_RCC_ClockConfig+0x2a4>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	695a      	ldr	r2, [r3, #20]
 800d512:	4b34      	ldr	r3, [pc, #208]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d514:	69db      	ldr	r3, [r3, #28]
 800d516:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d208      	bcs.n	800d530 <HAL_RCC_ClockConfig+0x2a4>
 800d51e:	4b31      	ldr	r3, [pc, #196]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d520:	69db      	ldr	r3, [r3, #28]
 800d522:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	695b      	ldr	r3, [r3, #20]
 800d52a:	492e      	ldr	r1, [pc, #184]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d52c:	4313      	orrs	r3, r2
 800d52e:	61cb      	str	r3, [r1, #28]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f003 0310 	and.w	r3, r3, #16
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d010      	beq.n	800d55e <HAL_RCC_ClockConfig+0x2d2>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	699a      	ldr	r2, [r3, #24]
 800d540:	4b28      	ldr	r3, [pc, #160]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d542:	69db      	ldr	r3, [r3, #28]
 800d544:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d548:	429a      	cmp	r2, r3
 800d54a:	d208      	bcs.n	800d55e <HAL_RCC_ClockConfig+0x2d2>
 800d54c:	4b25      	ldr	r3, [pc, #148]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d54e:	69db      	ldr	r3, [r3, #28]
 800d550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	699b      	ldr	r3, [r3, #24]
 800d558:	4922      	ldr	r1, [pc, #136]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d55a:	4313      	orrs	r3, r2
 800d55c:	61cb      	str	r3, [r1, #28]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f003 0320 	and.w	r3, r3, #32
 800d566:	2b00      	cmp	r3, #0
 800d568:	d010      	beq.n	800d58c <HAL_RCC_ClockConfig+0x300>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	69da      	ldr	r2, [r3, #28]
 800d56e:	4b1d      	ldr	r3, [pc, #116]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d576:	429a      	cmp	r2, r3
 800d578:	d208      	bcs.n	800d58c <HAL_RCC_ClockConfig+0x300>
 800d57a:	4b1a      	ldr	r3, [pc, #104]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d57c:	6a1b      	ldr	r3, [r3, #32]
 800d57e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	69db      	ldr	r3, [r3, #28]
 800d586:	4917      	ldr	r1, [pc, #92]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d588:	4313      	orrs	r3, r2
 800d58a:	620b      	str	r3, [r1, #32]
 800d58c:	f000 f834 	bl	800d5f8 <HAL_RCC_GetSysClockFreq>
 800d590:	4602      	mov	r2, r0
 800d592:	4b14      	ldr	r3, [pc, #80]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d594:	699b      	ldr	r3, [r3, #24]
 800d596:	0a1b      	lsrs	r3, r3, #8
 800d598:	f003 030f 	and.w	r3, r3, #15
 800d59c:	4912      	ldr	r1, [pc, #72]	@ (800d5e8 <HAL_RCC_ClockConfig+0x35c>)
 800d59e:	5ccb      	ldrb	r3, [r1, r3]
 800d5a0:	f003 031f 	and.w	r3, r3, #31
 800d5a4:	fa22 f303 	lsr.w	r3, r2, r3
 800d5a8:	613b      	str	r3, [r7, #16]
 800d5aa:	4b0e      	ldr	r3, [pc, #56]	@ (800d5e4 <HAL_RCC_ClockConfig+0x358>)
 800d5ac:	699b      	ldr	r3, [r3, #24]
 800d5ae:	f003 030f 	and.w	r3, r3, #15
 800d5b2:	4a0d      	ldr	r2, [pc, #52]	@ (800d5e8 <HAL_RCC_ClockConfig+0x35c>)
 800d5b4:	5cd3      	ldrb	r3, [r2, r3]
 800d5b6:	f003 031f 	and.w	r3, r3, #31
 800d5ba:	693a      	ldr	r2, [r7, #16]
 800d5bc:	fa22 f303 	lsr.w	r3, r2, r3
 800d5c0:	4a0a      	ldr	r2, [pc, #40]	@ (800d5ec <HAL_RCC_ClockConfig+0x360>)
 800d5c2:	6013      	str	r3, [r2, #0]
 800d5c4:	4a0a      	ldr	r2, [pc, #40]	@ (800d5f0 <HAL_RCC_ClockConfig+0x364>)
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	6013      	str	r3, [r2, #0]
 800d5ca:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f4 <HAL_RCC_ClockConfig+0x368>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7f9 fb70 	bl	8006cb4 <HAL_InitTick>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	73fb      	strb	r3, [r7, #15]
 800d5d8:	7bfb      	ldrb	r3, [r7, #15]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3718      	adds	r7, #24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	58024400 	.word	0x58024400
 800d5e8:	0801d2c0 	.word	0x0801d2c0
 800d5ec:	24000004 	.word	0x24000004
 800d5f0:	24000000 	.word	0x24000000
 800d5f4:	24000008 	.word	0x24000008

0800d5f8 <HAL_RCC_GetSysClockFreq>:
 800d5f8:	b480      	push	{r7}
 800d5fa:	b089      	sub	sp, #36	@ 0x24
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4bb3      	ldr	r3, [pc, #716]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d600:	691b      	ldr	r3, [r3, #16]
 800d602:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d606:	2b18      	cmp	r3, #24
 800d608:	f200 8155 	bhi.w	800d8b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800d60c:	a201      	add	r2, pc, #4	@ (adr r2, 800d614 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d612:	bf00      	nop
 800d614:	0800d679 	.word	0x0800d679
 800d618:	0800d8b7 	.word	0x0800d8b7
 800d61c:	0800d8b7 	.word	0x0800d8b7
 800d620:	0800d8b7 	.word	0x0800d8b7
 800d624:	0800d8b7 	.word	0x0800d8b7
 800d628:	0800d8b7 	.word	0x0800d8b7
 800d62c:	0800d8b7 	.word	0x0800d8b7
 800d630:	0800d8b7 	.word	0x0800d8b7
 800d634:	0800d69f 	.word	0x0800d69f
 800d638:	0800d8b7 	.word	0x0800d8b7
 800d63c:	0800d8b7 	.word	0x0800d8b7
 800d640:	0800d8b7 	.word	0x0800d8b7
 800d644:	0800d8b7 	.word	0x0800d8b7
 800d648:	0800d8b7 	.word	0x0800d8b7
 800d64c:	0800d8b7 	.word	0x0800d8b7
 800d650:	0800d8b7 	.word	0x0800d8b7
 800d654:	0800d6a5 	.word	0x0800d6a5
 800d658:	0800d8b7 	.word	0x0800d8b7
 800d65c:	0800d8b7 	.word	0x0800d8b7
 800d660:	0800d8b7 	.word	0x0800d8b7
 800d664:	0800d8b7 	.word	0x0800d8b7
 800d668:	0800d8b7 	.word	0x0800d8b7
 800d66c:	0800d8b7 	.word	0x0800d8b7
 800d670:	0800d8b7 	.word	0x0800d8b7
 800d674:	0800d6ab 	.word	0x0800d6ab
 800d678:	4b94      	ldr	r3, [pc, #592]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f003 0320 	and.w	r3, r3, #32
 800d680:	2b00      	cmp	r3, #0
 800d682:	d009      	beq.n	800d698 <HAL_RCC_GetSysClockFreq+0xa0>
 800d684:	4b91      	ldr	r3, [pc, #580]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	08db      	lsrs	r3, r3, #3
 800d68a:	f003 0303 	and.w	r3, r3, #3
 800d68e:	4a90      	ldr	r2, [pc, #576]	@ (800d8d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d690:	fa22 f303 	lsr.w	r3, r2, r3
 800d694:	61bb      	str	r3, [r7, #24]
 800d696:	e111      	b.n	800d8bc <HAL_RCC_GetSysClockFreq+0x2c4>
 800d698:	4b8d      	ldr	r3, [pc, #564]	@ (800d8d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d69a:	61bb      	str	r3, [r7, #24]
 800d69c:	e10e      	b.n	800d8bc <HAL_RCC_GetSysClockFreq+0x2c4>
 800d69e:	4b8d      	ldr	r3, [pc, #564]	@ (800d8d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d6a0:	61bb      	str	r3, [r7, #24]
 800d6a2:	e10b      	b.n	800d8bc <HAL_RCC_GetSysClockFreq+0x2c4>
 800d6a4:	4b8c      	ldr	r3, [pc, #560]	@ (800d8d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d6a6:	61bb      	str	r3, [r7, #24]
 800d6a8:	e108      	b.n	800d8bc <HAL_RCC_GetSysClockFreq+0x2c4>
 800d6aa:	4b88      	ldr	r3, [pc, #544]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ae:	f003 0303 	and.w	r3, r3, #3
 800d6b2:	617b      	str	r3, [r7, #20]
 800d6b4:	4b85      	ldr	r3, [pc, #532]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6b8:	091b      	lsrs	r3, r3, #4
 800d6ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d6be:	613b      	str	r3, [r7, #16]
 800d6c0:	4b82      	ldr	r3, [pc, #520]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6c4:	f003 0301 	and.w	r3, r3, #1
 800d6c8:	60fb      	str	r3, [r7, #12]
 800d6ca:	4b80      	ldr	r3, [pc, #512]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6ce:	08db      	lsrs	r3, r3, #3
 800d6d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	fb02 f303 	mul.w	r3, r2, r3
 800d6da:	ee07 3a90 	vmov	s15, r3
 800d6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6e2:	edc7 7a02 	vstr	s15, [r7, #8]
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 80e1 	beq.w	800d8b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	2b02      	cmp	r3, #2
 800d6f2:	f000 8083 	beq.w	800d7fc <HAL_RCC_GetSysClockFreq+0x204>
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	f200 80a1 	bhi.w	800d840 <HAL_RCC_GetSysClockFreq+0x248>
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d003      	beq.n	800d70c <HAL_RCC_GetSysClockFreq+0x114>
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	2b01      	cmp	r3, #1
 800d708:	d056      	beq.n	800d7b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d70a:	e099      	b.n	800d840 <HAL_RCC_GetSysClockFreq+0x248>
 800d70c:	4b6f      	ldr	r3, [pc, #444]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f003 0320 	and.w	r3, r3, #32
 800d714:	2b00      	cmp	r3, #0
 800d716:	d02d      	beq.n	800d774 <HAL_RCC_GetSysClockFreq+0x17c>
 800d718:	4b6c      	ldr	r3, [pc, #432]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	08db      	lsrs	r3, r3, #3
 800d71e:	f003 0303 	and.w	r3, r3, #3
 800d722:	4a6b      	ldr	r2, [pc, #428]	@ (800d8d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d724:	fa22 f303 	lsr.w	r3, r2, r3
 800d728:	607b      	str	r3, [r7, #4]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	ee07 3a90 	vmov	s15, r3
 800d730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	ee07 3a90 	vmov	s15, r3
 800d73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d73e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d742:	4b62      	ldr	r3, [pc, #392]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d74a:	ee07 3a90 	vmov	s15, r3
 800d74e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d752:	ed97 6a02 	vldr	s12, [r7, #8]
 800d756:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d8dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800d75a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d75e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d76a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d76e:	edc7 7a07 	vstr	s15, [r7, #28]
 800d772:	e087      	b.n	800d884 <HAL_RCC_GetSysClockFreq+0x28c>
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	ee07 3a90 	vmov	s15, r3
 800d77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d77e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d8e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d786:	4b51      	ldr	r3, [pc, #324]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d78a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d78e:	ee07 3a90 	vmov	s15, r3
 800d792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d796:	ed97 6a02 	vldr	s12, [r7, #8]
 800d79a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d8dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800d79e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7b2:	edc7 7a07 	vstr	s15, [r7, #28]
 800d7b6:	e065      	b.n	800d884 <HAL_RCC_GetSysClockFreq+0x28c>
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	ee07 3a90 	vmov	s15, r3
 800d7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d8e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7ca:	4b40      	ldr	r3, [pc, #256]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7d2:	ee07 3a90 	vmov	s15, r3
 800d7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7da:	ed97 6a02 	vldr	s12, [r7, #8]
 800d7de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d8dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800d7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7f6:	edc7 7a07 	vstr	s15, [r7, #28]
 800d7fa:	e043      	b.n	800d884 <HAL_RCC_GetSysClockFreq+0x28c>
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	ee07 3a90 	vmov	s15, r3
 800d802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d806:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d8e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d80a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d80e:	4b2f      	ldr	r3, [pc, #188]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d816:	ee07 3a90 	vmov	s15, r3
 800d81a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d81e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d822:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d8dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800d826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d82a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d82e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d83a:	edc7 7a07 	vstr	s15, [r7, #28]
 800d83e:	e021      	b.n	800d884 <HAL_RCC_GetSysClockFreq+0x28c>
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	ee07 3a90 	vmov	s15, r3
 800d846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d84a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d8e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d84e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d852:	4b1e      	ldr	r3, [pc, #120]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d85a:	ee07 3a90 	vmov	s15, r3
 800d85e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d862:	ed97 6a02 	vldr	s12, [r7, #8]
 800d866:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d8dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800d86a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d86e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d87e:	edc7 7a07 	vstr	s15, [r7, #28]
 800d882:	bf00      	nop
 800d884:	4b11      	ldr	r3, [pc, #68]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d888:	0a5b      	lsrs	r3, r3, #9
 800d88a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d88e:	3301      	adds	r3, #1
 800d890:	603b      	str	r3, [r7, #0]
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	ee07 3a90 	vmov	s15, r3
 800d898:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d89c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8a8:	ee17 3a90 	vmov	r3, s15
 800d8ac:	61bb      	str	r3, [r7, #24]
 800d8ae:	e005      	b.n	800d8bc <HAL_RCC_GetSysClockFreq+0x2c4>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	61bb      	str	r3, [r7, #24]
 800d8b4:	e002      	b.n	800d8bc <HAL_RCC_GetSysClockFreq+0x2c4>
 800d8b6:	4b07      	ldr	r3, [pc, #28]	@ (800d8d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d8b8:	61bb      	str	r3, [r7, #24]
 800d8ba:	bf00      	nop
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3724      	adds	r7, #36	@ 0x24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	58024400 	.word	0x58024400
 800d8d0:	03d09000 	.word	0x03d09000
 800d8d4:	003d0900 	.word	0x003d0900
 800d8d8:	016e3600 	.word	0x016e3600
 800d8dc:	46000000 	.word	0x46000000
 800d8e0:	4c742400 	.word	0x4c742400
 800d8e4:	4a742400 	.word	0x4a742400
 800d8e8:	4bb71b00 	.word	0x4bb71b00

0800d8ec <HAL_RCC_GetHCLKFreq>:
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	f7ff fe81 	bl	800d5f8 <HAL_RCC_GetSysClockFreq>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	4b10      	ldr	r3, [pc, #64]	@ (800d93c <HAL_RCC_GetHCLKFreq+0x50>)
 800d8fa:	699b      	ldr	r3, [r3, #24]
 800d8fc:	0a1b      	lsrs	r3, r3, #8
 800d8fe:	f003 030f 	and.w	r3, r3, #15
 800d902:	490f      	ldr	r1, [pc, #60]	@ (800d940 <HAL_RCC_GetHCLKFreq+0x54>)
 800d904:	5ccb      	ldrb	r3, [r1, r3]
 800d906:	f003 031f 	and.w	r3, r3, #31
 800d90a:	fa22 f303 	lsr.w	r3, r2, r3
 800d90e:	607b      	str	r3, [r7, #4]
 800d910:	4b0a      	ldr	r3, [pc, #40]	@ (800d93c <HAL_RCC_GetHCLKFreq+0x50>)
 800d912:	699b      	ldr	r3, [r3, #24]
 800d914:	f003 030f 	and.w	r3, r3, #15
 800d918:	4a09      	ldr	r2, [pc, #36]	@ (800d940 <HAL_RCC_GetHCLKFreq+0x54>)
 800d91a:	5cd3      	ldrb	r3, [r2, r3]
 800d91c:	f003 031f 	and.w	r3, r3, #31
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	fa22 f303 	lsr.w	r3, r2, r3
 800d926:	4a07      	ldr	r2, [pc, #28]	@ (800d944 <HAL_RCC_GetHCLKFreq+0x58>)
 800d928:	6013      	str	r3, [r2, #0]
 800d92a:	4a07      	ldr	r2, [pc, #28]	@ (800d948 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6013      	str	r3, [r2, #0]
 800d930:	4b04      	ldr	r3, [pc, #16]	@ (800d944 <HAL_RCC_GetHCLKFreq+0x58>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4618      	mov	r0, r3
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	58024400 	.word	0x58024400
 800d940:	0801d2c0 	.word	0x0801d2c0
 800d944:	24000004 	.word	0x24000004
 800d948:	24000000 	.word	0x24000000

0800d94c <HAL_RCC_GetPCLK1Freq>:
 800d94c:	b580      	push	{r7, lr}
 800d94e:	af00      	add	r7, sp, #0
 800d950:	f7ff ffcc 	bl	800d8ec <HAL_RCC_GetHCLKFreq>
 800d954:	4602      	mov	r2, r0
 800d956:	4b06      	ldr	r3, [pc, #24]	@ (800d970 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d958:	69db      	ldr	r3, [r3, #28]
 800d95a:	091b      	lsrs	r3, r3, #4
 800d95c:	f003 0307 	and.w	r3, r3, #7
 800d960:	4904      	ldr	r1, [pc, #16]	@ (800d974 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d962:	5ccb      	ldrb	r3, [r1, r3]
 800d964:	f003 031f 	and.w	r3, r3, #31
 800d968:	fa22 f303 	lsr.w	r3, r2, r3
 800d96c:	4618      	mov	r0, r3
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	58024400 	.word	0x58024400
 800d974:	0801d2c0 	.word	0x0801d2c0

0800d978 <HAL_RCC_GetPCLK2Freq>:
 800d978:	b580      	push	{r7, lr}
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	f7ff ffb6 	bl	800d8ec <HAL_RCC_GetHCLKFreq>
 800d980:	4602      	mov	r2, r0
 800d982:	4b06      	ldr	r3, [pc, #24]	@ (800d99c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d984:	69db      	ldr	r3, [r3, #28]
 800d986:	0a1b      	lsrs	r3, r3, #8
 800d988:	f003 0307 	and.w	r3, r3, #7
 800d98c:	4904      	ldr	r1, [pc, #16]	@ (800d9a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d98e:	5ccb      	ldrb	r3, [r1, r3]
 800d990:	f003 031f 	and.w	r3, r3, #31
 800d994:	fa22 f303 	lsr.w	r3, r2, r3
 800d998:	4618      	mov	r0, r3
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	58024400 	.word	0x58024400
 800d9a0:	0801d2c0 	.word	0x0801d2c0

0800d9a4 <HAL_RCCEx_PeriphCLKConfig>:
 800d9a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9a8:	b0c6      	sub	sp, #280	@ 0x118
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800d9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d9c8:	2500      	movs	r5, #0
 800d9ca:	ea54 0305 	orrs.w	r3, r4, r5
 800d9ce:	d049      	beq.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800d9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d9da:	d02f      	beq.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d9dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d9e0:	d828      	bhi.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d9e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d9e6:	d01a      	beq.n	800da1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d9e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d9ec:	d822      	bhi.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d003      	beq.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d9f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9f6:	d007      	beq.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d9f8:	e01c      	b.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d9fa:	4bab      	ldr	r3, [pc, #684]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9fe:	4aaa      	ldr	r2, [pc, #680]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da04:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800da06:	e01a      	b.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800da08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da0c:	3308      	adds	r3, #8
 800da0e:	2102      	movs	r1, #2
 800da10:	4618      	mov	r0, r3
 800da12:	f002 fa49 	bl	800fea8 <RCCEx_PLL2_Config>
 800da16:	4603      	mov	r3, r0
 800da18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800da1c:	e00f      	b.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800da1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da22:	3328      	adds	r3, #40	@ 0x28
 800da24:	2102      	movs	r1, #2
 800da26:	4618      	mov	r0, r3
 800da28:	f002 faf0 	bl	801000c <RCCEx_PLL3_Config>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800da32:	e004      	b.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800da34:	2301      	movs	r3, #1
 800da36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800da3a:	e000      	b.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800da3c:	bf00      	nop
 800da3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800da42:	2b00      	cmp	r3, #0
 800da44:	d10a      	bne.n	800da5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800da46:	4b98      	ldr	r3, [pc, #608]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800da4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da54:	4a94      	ldr	r2, [pc, #592]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da56:	430b      	orrs	r3, r1
 800da58:	6513      	str	r3, [r2, #80]	@ 0x50
 800da5a:	e003      	b.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800da5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800da60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800da64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800da70:	f04f 0900 	mov.w	r9, #0
 800da74:	ea58 0309 	orrs.w	r3, r8, r9
 800da78:	d047      	beq.n	800db0a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800da7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da80:	2b04      	cmp	r3, #4
 800da82:	d82a      	bhi.n	800dada <HAL_RCCEx_PeriphCLKConfig+0x136>
 800da84:	a201      	add	r2, pc, #4	@ (adr r2, 800da8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800da86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da8a:	bf00      	nop
 800da8c:	0800daa1 	.word	0x0800daa1
 800da90:	0800daaf 	.word	0x0800daaf
 800da94:	0800dac5 	.word	0x0800dac5
 800da98:	0800dae3 	.word	0x0800dae3
 800da9c:	0800dae3 	.word	0x0800dae3
 800daa0:	4b81      	ldr	r3, [pc, #516]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800daa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daa4:	4a80      	ldr	r2, [pc, #512]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800daa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800daaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800daac:	e01a      	b.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800daae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dab2:	3308      	adds	r3, #8
 800dab4:	2100      	movs	r1, #0
 800dab6:	4618      	mov	r0, r3
 800dab8:	f002 f9f6 	bl	800fea8 <RCCEx_PLL2_Config>
 800dabc:	4603      	mov	r3, r0
 800dabe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dac2:	e00f      	b.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800dac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dac8:	3328      	adds	r3, #40	@ 0x28
 800daca:	2100      	movs	r1, #0
 800dacc:	4618      	mov	r0, r3
 800dace:	f002 fa9d 	bl	801000c <RCCEx_PLL3_Config>
 800dad2:	4603      	mov	r3, r0
 800dad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dad8:	e004      	b.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800dada:	2301      	movs	r3, #1
 800dadc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dae0:	e000      	b.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800dae2:	bf00      	nop
 800dae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d10a      	bne.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800daec:	4b6e      	ldr	r3, [pc, #440]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800daee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800daf0:	f023 0107 	bic.w	r1, r3, #7
 800daf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dafa:	4a6b      	ldr	r2, [pc, #428]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dafc:	430b      	orrs	r3, r1
 800dafe:	6513      	str	r3, [r2, #80]	@ 0x50
 800db00:	e003      	b.n	800db0a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800db02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800db06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800db0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db12:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800db16:	f04f 0b00 	mov.w	fp, #0
 800db1a:	ea5a 030b 	orrs.w	r3, sl, fp
 800db1e:	d05b      	beq.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800db20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800db28:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800db2c:	d03b      	beq.n	800dba6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800db2e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800db32:	d834      	bhi.n	800db9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800db34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800db38:	d037      	beq.n	800dbaa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800db3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800db3e:	d82e      	bhi.n	800db9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800db40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800db44:	d033      	beq.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800db46:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800db4a:	d828      	bhi.n	800db9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800db4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db50:	d01a      	beq.n	800db88 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800db52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db56:	d822      	bhi.n	800db9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d003      	beq.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800db5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db60:	d007      	beq.n	800db72 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800db62:	e01c      	b.n	800db9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800db64:	4b50      	ldr	r3, [pc, #320]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800db66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db68:	4a4f      	ldr	r2, [pc, #316]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800db6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800db70:	e01e      	b.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800db72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db76:	3308      	adds	r3, #8
 800db78:	2100      	movs	r1, #0
 800db7a:	4618      	mov	r0, r3
 800db7c:	f002 f994 	bl	800fea8 <RCCEx_PLL2_Config>
 800db80:	4603      	mov	r3, r0
 800db82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800db86:	e013      	b.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800db88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db8c:	3328      	adds	r3, #40	@ 0x28
 800db8e:	2100      	movs	r1, #0
 800db90:	4618      	mov	r0, r3
 800db92:	f002 fa3b 	bl	801000c <RCCEx_PLL3_Config>
 800db96:	4603      	mov	r3, r0
 800db98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800db9c:	e008      	b.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800db9e:	2301      	movs	r3, #1
 800dba0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dba4:	e004      	b.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800dba6:	bf00      	nop
 800dba8:	e002      	b.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800dbaa:	bf00      	nop
 800dbac:	e000      	b.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800dbae:	bf00      	nop
 800dbb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d10b      	bne.n	800dbd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800dbb8:	4b3b      	ldr	r3, [pc, #236]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dbba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbbc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800dbc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dbc8:	4a37      	ldr	r2, [pc, #220]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dbca:	430b      	orrs	r3, r1
 800dbcc:	6593      	str	r3, [r2, #88]	@ 0x58
 800dbce:	e003      	b.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800dbd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dbd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800dbd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800dbe4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800dbe8:	2300      	movs	r3, #0
 800dbea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dbee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	d05d      	beq.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800dbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dc00:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800dc04:	d03b      	beq.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800dc06:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800dc0a:	d834      	bhi.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dc0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc10:	d037      	beq.n	800dc82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800dc12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc16:	d82e      	bhi.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dc18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dc1c:	d033      	beq.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800dc1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dc22:	d828      	bhi.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dc24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc28:	d01a      	beq.n	800dc60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800dc2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc2e:	d822      	bhi.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d003      	beq.n	800dc3c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800dc34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc38:	d007      	beq.n	800dc4a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800dc3a:	e01c      	b.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dc3c:	4b1a      	ldr	r3, [pc, #104]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc40:	4a19      	ldr	r2, [pc, #100]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dc48:	e01e      	b.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800dc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc4e:	3308      	adds	r3, #8
 800dc50:	2100      	movs	r1, #0
 800dc52:	4618      	mov	r0, r3
 800dc54:	f002 f928 	bl	800fea8 <RCCEx_PLL2_Config>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dc5e:	e013      	b.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800dc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc64:	3328      	adds	r3, #40	@ 0x28
 800dc66:	2100      	movs	r1, #0
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f002 f9cf 	bl	801000c <RCCEx_PLL3_Config>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dc74:	e008      	b.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800dc76:	2301      	movs	r3, #1
 800dc78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dc7c:	e004      	b.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800dc7e:	bf00      	nop
 800dc80:	e002      	b.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800dc82:	bf00      	nop
 800dc84:	e000      	b.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800dc86:	bf00      	nop
 800dc88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d10d      	bne.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x308>
 800dc90:	4b05      	ldr	r3, [pc, #20]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc94:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800dc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dca0:	4a01      	ldr	r2, [pc, #4]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dca2:	430b      	orrs	r3, r1
 800dca4:	6593      	str	r3, [r2, #88]	@ 0x58
 800dca6:	e005      	b.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800dca8:	58024400 	.word	0x58024400
 800dcac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dcb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800dcb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800dcc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800dcca:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800dcce:	460b      	mov	r3, r1
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	d03a      	beq.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 800dcd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcda:	2b30      	cmp	r3, #48	@ 0x30
 800dcdc:	d01f      	beq.n	800dd1e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800dcde:	2b30      	cmp	r3, #48	@ 0x30
 800dce0:	d819      	bhi.n	800dd16 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800dce2:	2b20      	cmp	r3, #32
 800dce4:	d00c      	beq.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800dce6:	2b20      	cmp	r3, #32
 800dce8:	d815      	bhi.n	800dd16 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d019      	beq.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800dcee:	2b10      	cmp	r3, #16
 800dcf0:	d111      	bne.n	800dd16 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800dcf2:	4baa      	ldr	r3, [pc, #680]	@ (800df9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dcf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf6:	4aa9      	ldr	r2, [pc, #676]	@ (800df9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dcf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dcfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dcfe:	e011      	b.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800dd00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd04:	3308      	adds	r3, #8
 800dd06:	2102      	movs	r1, #2
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f002 f8cd 	bl	800fea8 <RCCEx_PLL2_Config>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dd14:	e006      	b.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800dd16:	2301      	movs	r3, #1
 800dd18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dd1c:	e002      	b.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800dd1e:	bf00      	nop
 800dd20:	e000      	b.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800dd22:	bf00      	nop
 800dd24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d10a      	bne.n	800dd42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 800dd2c:	4b9b      	ldr	r3, [pc, #620]	@ (800df9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dd2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800dd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd3a:	4a98      	ldr	r2, [pc, #608]	@ (800df9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dd3c:	430b      	orrs	r3, r1
 800dd3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dd40:	e003      	b.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 800dd42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800dd4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800dd56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dd60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800dd64:	460b      	mov	r3, r1
 800dd66:	4313      	orrs	r3, r2
 800dd68:	d051      	beq.n	800de0e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800dd6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dd74:	d035      	beq.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800dd76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dd7a:	d82e      	bhi.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dd7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dd80:	d031      	beq.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800dd82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dd86:	d828      	bhi.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dd88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd8c:	d01a      	beq.n	800ddc4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800dd8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd92:	d822      	bhi.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d003      	beq.n	800dda0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800dd98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd9c:	d007      	beq.n	800ddae <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800dd9e:	e01c      	b.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dda0:	4b7e      	ldr	r3, [pc, #504]	@ (800df9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dda2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dda4:	4a7d      	ldr	r2, [pc, #500]	@ (800df9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dda6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ddaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ddac:	e01c      	b.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800ddae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddb2:	3308      	adds	r3, #8
 800ddb4:	2100      	movs	r1, #0
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f002 f876 	bl	800fea8 <RCCEx_PLL2_Config>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ddc2:	e011      	b.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800ddc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddc8:	3328      	adds	r3, #40	@ 0x28
 800ddca:	2100      	movs	r1, #0
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f002 f91d 	bl	801000c <RCCEx_PLL3_Config>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ddd8:	e006      	b.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800ddda:	2301      	movs	r3, #1
 800dddc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dde0:	e002      	b.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800dde2:	bf00      	nop
 800dde4:	e000      	b.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800dde6:	bf00      	nop
 800dde8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d10a      	bne.n	800de06 <HAL_RCCEx_PeriphCLKConfig+0x462>
 800ddf0:	4b6a      	ldr	r3, [pc, #424]	@ (800df9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ddf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddf4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ddf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddfe:	4a67      	ldr	r2, [pc, #412]	@ (800df9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800de00:	430b      	orrs	r3, r1
 800de02:	6513      	str	r3, [r2, #80]	@ 0x50
 800de04:	e003      	b.n	800de0e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800de06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800de0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800de1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800de1e:	2300      	movs	r3, #0
 800de20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800de24:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800de28:	460b      	mov	r3, r1
 800de2a:	4313      	orrs	r3, r2
 800de2c:	d053      	beq.n	800ded6 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800de2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800de38:	d033      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800de3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800de3e:	d82c      	bhi.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800de40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800de44:	d02f      	beq.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800de46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800de4a:	d826      	bhi.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800de4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800de50:	d02b      	beq.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x506>
 800de52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800de56:	d820      	bhi.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800de58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de5c:	d012      	beq.n	800de84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800de5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de62:	d81a      	bhi.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800de64:	2b00      	cmp	r3, #0
 800de66:	d022      	beq.n	800deae <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800de68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de6c:	d115      	bne.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800de6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de72:	3308      	adds	r3, #8
 800de74:	2101      	movs	r1, #1
 800de76:	4618      	mov	r0, r3
 800de78:	f002 f816 	bl	800fea8 <RCCEx_PLL2_Config>
 800de7c:	4603      	mov	r3, r0
 800de7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800de82:	e015      	b.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800de84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de88:	3328      	adds	r3, #40	@ 0x28
 800de8a:	2101      	movs	r1, #1
 800de8c:	4618      	mov	r0, r3
 800de8e:	f002 f8bd 	bl	801000c <RCCEx_PLL3_Config>
 800de92:	4603      	mov	r3, r0
 800de94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800de98:	e00a      	b.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800de9a:	2301      	movs	r3, #1
 800de9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dea0:	e006      	b.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800dea2:	bf00      	nop
 800dea4:	e004      	b.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800dea6:	bf00      	nop
 800dea8:	e002      	b.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800deaa:	bf00      	nop
 800deac:	e000      	b.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800deae:	bf00      	nop
 800deb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10a      	bne.n	800dece <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800deb8:	4b38      	ldr	r3, [pc, #224]	@ (800df9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800deba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800debc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800dec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dec6:	4a35      	ldr	r2, [pc, #212]	@ (800df9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dec8:	430b      	orrs	r3, r1
 800deca:	6513      	str	r3, [r2, #80]	@ 0x50
 800decc:	e003      	b.n	800ded6 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800dece:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ded2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ded6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dede:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800dee2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dee6:	2300      	movs	r3, #0
 800dee8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800deec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800def0:	460b      	mov	r3, r1
 800def2:	4313      	orrs	r3, r2
 800def4:	d058      	beq.n	800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800def6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800defa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800defe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800df02:	d033      	beq.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800df04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800df08:	d82c      	bhi.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800df0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df0e:	d02f      	beq.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800df10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df14:	d826      	bhi.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800df16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800df1a:	d02b      	beq.n	800df74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800df1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800df20:	d820      	bhi.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800df22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df26:	d012      	beq.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800df28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df2c:	d81a      	bhi.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d022      	beq.n	800df78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800df32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df36:	d115      	bne.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800df38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df3c:	3308      	adds	r3, #8
 800df3e:	2101      	movs	r1, #1
 800df40:	4618      	mov	r0, r3
 800df42:	f001 ffb1 	bl	800fea8 <RCCEx_PLL2_Config>
 800df46:	4603      	mov	r3, r0
 800df48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800df4c:	e015      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800df4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df52:	3328      	adds	r3, #40	@ 0x28
 800df54:	2101      	movs	r1, #1
 800df56:	4618      	mov	r0, r3
 800df58:	f002 f858 	bl	801000c <RCCEx_PLL3_Config>
 800df5c:	4603      	mov	r3, r0
 800df5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800df62:	e00a      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800df64:	2301      	movs	r3, #1
 800df66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800df6a:	e006      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800df6c:	bf00      	nop
 800df6e:	e004      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800df70:	bf00      	nop
 800df72:	e002      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800df74:	bf00      	nop
 800df76:	e000      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800df78:	bf00      	nop
 800df7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10e      	bne.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800df82:	4b06      	ldr	r3, [pc, #24]	@ (800df9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800df84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800df8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800df92:	4a02      	ldr	r2, [pc, #8]	@ (800df9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800df94:	430b      	orrs	r3, r1
 800df96:	6593      	str	r3, [r2, #88]	@ 0x58
 800df98:	e006      	b.n	800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800df9a:	bf00      	nop
 800df9c:	58024400 	.word	0x58024400
 800dfa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dfa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800dfa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800dfb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dfb8:	2300      	movs	r3, #0
 800dfba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dfbe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	d037      	beq.n	800e038 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800dfc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dfd2:	d00e      	beq.n	800dff2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800dfd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dfd8:	d816      	bhi.n	800e008 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d018      	beq.n	800e010 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800dfde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dfe2:	d111      	bne.n	800e008 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800dfe4:	4bc4      	ldr	r3, [pc, #784]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dfe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfe8:	4ac3      	ldr	r2, [pc, #780]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dfea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dff0:	e00f      	b.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800dff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dff6:	3308      	adds	r3, #8
 800dff8:	2101      	movs	r1, #1
 800dffa:	4618      	mov	r0, r3
 800dffc:	f001 ff54 	bl	800fea8 <RCCEx_PLL2_Config>
 800e000:	4603      	mov	r3, r0
 800e002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e006:	e004      	b.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e008:	2301      	movs	r3, #1
 800e00a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e00e:	e000      	b.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e010:	bf00      	nop
 800e012:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e016:	2b00      	cmp	r3, #0
 800e018:	d10a      	bne.n	800e030 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800e01a:	4bb7      	ldr	r3, [pc, #732]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e01c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e01e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e028:	4ab3      	ldr	r2, [pc, #716]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e02a:	430b      	orrs	r3, r1
 800e02c:	6513      	str	r3, [r2, #80]	@ 0x50
 800e02e:	e003      	b.n	800e038 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800e030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e040:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e044:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e048:	2300      	movs	r3, #0
 800e04a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e04e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e052:	460b      	mov	r3, r1
 800e054:	4313      	orrs	r3, r2
 800e056:	d039      	beq.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0x728>
 800e058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e05c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e05e:	2b03      	cmp	r3, #3
 800e060:	d81c      	bhi.n	800e09c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800e062:	a201      	add	r2, pc, #4	@ (adr r2, 800e068 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800e064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e068:	0800e0a5 	.word	0x0800e0a5
 800e06c:	0800e079 	.word	0x0800e079
 800e070:	0800e087 	.word	0x0800e087
 800e074:	0800e0a5 	.word	0x0800e0a5
 800e078:	4b9f      	ldr	r3, [pc, #636]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e07a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e07c:	4a9e      	ldr	r2, [pc, #632]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e07e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e082:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e084:	e00f      	b.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
 800e086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e08a:	3308      	adds	r3, #8
 800e08c:	2102      	movs	r1, #2
 800e08e:	4618      	mov	r0, r3
 800e090:	f001 ff0a 	bl	800fea8 <RCCEx_PLL2_Config>
 800e094:	4603      	mov	r3, r0
 800e096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e09a:	e004      	b.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
 800e09c:	2301      	movs	r3, #1
 800e09e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e0a2:	e000      	b.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
 800e0a4:	bf00      	nop
 800e0a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10a      	bne.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0x720>
 800e0ae:	4b92      	ldr	r3, [pc, #584]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e0b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0b2:	f023 0103 	bic.w	r1, r3, #3
 800e0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e0bc:	4a8e      	ldr	r2, [pc, #568]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e0be:	430b      	orrs	r3, r1
 800e0c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e0c2:	e003      	b.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0x728>
 800e0c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e0c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e0d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e0dc:	2300      	movs	r3, #0
 800e0de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e0e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	4313      	orrs	r3, r2
 800e0ea:	f000 8099 	beq.w	800e220 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800e0ee:	4b83      	ldr	r3, [pc, #524]	@ (800e2fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4a82      	ldr	r2, [pc, #520]	@ (800e2fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e0f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e0f8:	6013      	str	r3, [r2, #0]
 800e0fa:	f7f8 fe25 	bl	8006d48 <HAL_GetTick>
 800e0fe:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 800e102:	e00b      	b.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0x778>
 800e104:	f7f8 fe20 	bl	8006d48 <HAL_GetTick>
 800e108:	4602      	mov	r2, r0
 800e10a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e10e:	1ad3      	subs	r3, r2, r3
 800e110:	2b64      	cmp	r3, #100	@ 0x64
 800e112:	d903      	bls.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0x778>
 800e114:	2303      	movs	r3, #3
 800e116:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e11a:	e005      	b.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x784>
 800e11c:	4b77      	ldr	r3, [pc, #476]	@ (800e2fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e124:	2b00      	cmp	r3, #0
 800e126:	d0ed      	beq.n	800e104 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800e128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d173      	bne.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800e130:	4b71      	ldr	r3, [pc, #452]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e132:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e13c:	4053      	eors	r3, r2
 800e13e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e142:	2b00      	cmp	r3, #0
 800e144:	d015      	beq.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800e146:	4b6c      	ldr	r3, [pc, #432]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e14a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e14e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800e152:	4b69      	ldr	r3, [pc, #420]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e156:	4a68      	ldr	r2, [pc, #416]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e15c:	6713      	str	r3, [r2, #112]	@ 0x70
 800e15e:	4b66      	ldr	r3, [pc, #408]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e162:	4a65      	ldr	r2, [pc, #404]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e164:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e168:	6713      	str	r3, [r2, #112]	@ 0x70
 800e16a:	4a63      	ldr	r2, [pc, #396]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e16c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e170:	6713      	str	r3, [r2, #112]	@ 0x70
 800e172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e176:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e17a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e17e:	d118      	bne.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800e180:	f7f8 fde2 	bl	8006d48 <HAL_GetTick>
 800e184:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 800e188:	e00d      	b.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800e18a:	f7f8 fddd 	bl	8006d48 <HAL_GetTick>
 800e18e:	4602      	mov	r2, r0
 800e190:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e194:	1ad2      	subs	r2, r2, r3
 800e196:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d903      	bls.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800e19e:	2303      	movs	r3, #3
 800e1a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e1a4:	e005      	b.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800e1a6:	4b54      	ldr	r3, [pc, #336]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1aa:	f003 0302 	and.w	r3, r3, #2
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d0eb      	beq.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 800e1b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d129      	bne.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0x86a>
 800e1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e1c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e1c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e1ca:	d10e      	bne.n	800e1ea <HAL_RCCEx_PeriphCLKConfig+0x846>
 800e1cc:	4b4a      	ldr	r3, [pc, #296]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1ce:	691b      	ldr	r3, [r3, #16]
 800e1d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e1dc:	091a      	lsrs	r2, r3, #4
 800e1de:	4b48      	ldr	r3, [pc, #288]	@ (800e300 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800e1e0:	4013      	ands	r3, r2
 800e1e2:	4a45      	ldr	r2, [pc, #276]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1e4:	430b      	orrs	r3, r1
 800e1e6:	6113      	str	r3, [r2, #16]
 800e1e8:	e005      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800e1ea:	4b43      	ldr	r3, [pc, #268]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	4a42      	ldr	r2, [pc, #264]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e1f4:	6113      	str	r3, [r2, #16]
 800e1f6:	4b40      	ldr	r3, [pc, #256]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e206:	4a3c      	ldr	r2, [pc, #240]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e208:	430b      	orrs	r3, r1
 800e20a:	6713      	str	r3, [r2, #112]	@ 0x70
 800e20c:	e008      	b.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800e20e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e212:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e216:	e003      	b.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800e218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e21c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e228:	f002 0301 	and.w	r3, r2, #1
 800e22c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e230:	2300      	movs	r3, #0
 800e232:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e236:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e23a:	460b      	mov	r3, r1
 800e23c:	4313      	orrs	r3, r2
 800e23e:	f000 808f 	beq.w	800e360 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 800e242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e246:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e248:	2b28      	cmp	r3, #40	@ 0x28
 800e24a:	d871      	bhi.n	800e330 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e24c:	a201      	add	r2, pc, #4	@ (adr r2, 800e254 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e252:	bf00      	nop
 800e254:	0800e339 	.word	0x0800e339
 800e258:	0800e331 	.word	0x0800e331
 800e25c:	0800e331 	.word	0x0800e331
 800e260:	0800e331 	.word	0x0800e331
 800e264:	0800e331 	.word	0x0800e331
 800e268:	0800e331 	.word	0x0800e331
 800e26c:	0800e331 	.word	0x0800e331
 800e270:	0800e331 	.word	0x0800e331
 800e274:	0800e305 	.word	0x0800e305
 800e278:	0800e331 	.word	0x0800e331
 800e27c:	0800e331 	.word	0x0800e331
 800e280:	0800e331 	.word	0x0800e331
 800e284:	0800e331 	.word	0x0800e331
 800e288:	0800e331 	.word	0x0800e331
 800e28c:	0800e331 	.word	0x0800e331
 800e290:	0800e331 	.word	0x0800e331
 800e294:	0800e31b 	.word	0x0800e31b
 800e298:	0800e331 	.word	0x0800e331
 800e29c:	0800e331 	.word	0x0800e331
 800e2a0:	0800e331 	.word	0x0800e331
 800e2a4:	0800e331 	.word	0x0800e331
 800e2a8:	0800e331 	.word	0x0800e331
 800e2ac:	0800e331 	.word	0x0800e331
 800e2b0:	0800e331 	.word	0x0800e331
 800e2b4:	0800e339 	.word	0x0800e339
 800e2b8:	0800e331 	.word	0x0800e331
 800e2bc:	0800e331 	.word	0x0800e331
 800e2c0:	0800e331 	.word	0x0800e331
 800e2c4:	0800e331 	.word	0x0800e331
 800e2c8:	0800e331 	.word	0x0800e331
 800e2cc:	0800e331 	.word	0x0800e331
 800e2d0:	0800e331 	.word	0x0800e331
 800e2d4:	0800e339 	.word	0x0800e339
 800e2d8:	0800e331 	.word	0x0800e331
 800e2dc:	0800e331 	.word	0x0800e331
 800e2e0:	0800e331 	.word	0x0800e331
 800e2e4:	0800e331 	.word	0x0800e331
 800e2e8:	0800e331 	.word	0x0800e331
 800e2ec:	0800e331 	.word	0x0800e331
 800e2f0:	0800e331 	.word	0x0800e331
 800e2f4:	0800e339 	.word	0x0800e339
 800e2f8:	58024400 	.word	0x58024400
 800e2fc:	58024800 	.word	0x58024800
 800e300:	00ffffcf 	.word	0x00ffffcf
 800e304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e308:	3308      	adds	r3, #8
 800e30a:	2101      	movs	r1, #1
 800e30c:	4618      	mov	r0, r3
 800e30e:	f001 fdcb 	bl	800fea8 <RCCEx_PLL2_Config>
 800e312:	4603      	mov	r3, r0
 800e314:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e318:	e00f      	b.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0x996>
 800e31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e31e:	3328      	adds	r3, #40	@ 0x28
 800e320:	2101      	movs	r1, #1
 800e322:	4618      	mov	r0, r3
 800e324:	f001 fe72 	bl	801000c <RCCEx_PLL3_Config>
 800e328:	4603      	mov	r3, r0
 800e32a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e32e:	e004      	b.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0x996>
 800e330:	2301      	movs	r3, #1
 800e332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e336:	e000      	b.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0x996>
 800e338:	bf00      	nop
 800e33a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d10a      	bne.n	800e358 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 800e342:	4bbf      	ldr	r3, [pc, #764]	@ (800e640 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e346:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e34e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e350:	4abb      	ldr	r2, [pc, #748]	@ (800e640 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e352:	430b      	orrs	r3, r1
 800e354:	6553      	str	r3, [r2, #84]	@ 0x54
 800e356:	e003      	b.n	800e360 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 800e358:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e35c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e368:	f002 0302 	and.w	r3, r2, #2
 800e36c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e370:	2300      	movs	r3, #0
 800e372:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e376:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e37a:	460b      	mov	r3, r1
 800e37c:	4313      	orrs	r3, r2
 800e37e:	d041      	beq.n	800e404 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800e380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e386:	2b05      	cmp	r3, #5
 800e388:	d824      	bhi.n	800e3d4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800e38a:	a201      	add	r2, pc, #4	@ (adr r2, 800e390 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800e38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e390:	0800e3dd 	.word	0x0800e3dd
 800e394:	0800e3a9 	.word	0x0800e3a9
 800e398:	0800e3bf 	.word	0x0800e3bf
 800e39c:	0800e3dd 	.word	0x0800e3dd
 800e3a0:	0800e3dd 	.word	0x0800e3dd
 800e3a4:	0800e3dd 	.word	0x0800e3dd
 800e3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	2101      	movs	r1, #1
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f001 fd79 	bl	800fea8 <RCCEx_PLL2_Config>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e3bc:	e00f      	b.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800e3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3c2:	3328      	adds	r3, #40	@ 0x28
 800e3c4:	2101      	movs	r1, #1
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f001 fe20 	bl	801000c <RCCEx_PLL3_Config>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e3d2:	e004      	b.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e3da:	e000      	b.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800e3dc:	bf00      	nop
 800e3de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d10a      	bne.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800e3e6:	4b96      	ldr	r3, [pc, #600]	@ (800e640 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e3e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3ea:	f023 0107 	bic.w	r1, r3, #7
 800e3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3f4:	4a92      	ldr	r2, [pc, #584]	@ (800e640 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e3f6:	430b      	orrs	r3, r1
 800e3f8:	6553      	str	r3, [r2, #84]	@ 0x54
 800e3fa:	e003      	b.n	800e404 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800e3fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e400:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40c:	f002 0304 	and.w	r3, r2, #4
 800e410:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e414:	2300      	movs	r3, #0
 800e416:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e41a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e41e:	460b      	mov	r3, r1
 800e420:	4313      	orrs	r3, r2
 800e422:	d044      	beq.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800e424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e42c:	2b05      	cmp	r3, #5
 800e42e:	d825      	bhi.n	800e47c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800e430:	a201      	add	r2, pc, #4	@ (adr r2, 800e438 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800e432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e436:	bf00      	nop
 800e438:	0800e485 	.word	0x0800e485
 800e43c:	0800e451 	.word	0x0800e451
 800e440:	0800e467 	.word	0x0800e467
 800e444:	0800e485 	.word	0x0800e485
 800e448:	0800e485 	.word	0x0800e485
 800e44c:	0800e485 	.word	0x0800e485
 800e450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e454:	3308      	adds	r3, #8
 800e456:	2101      	movs	r1, #1
 800e458:	4618      	mov	r0, r3
 800e45a:	f001 fd25 	bl	800fea8 <RCCEx_PLL2_Config>
 800e45e:	4603      	mov	r3, r0
 800e460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e464:	e00f      	b.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 800e466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e46a:	3328      	adds	r3, #40	@ 0x28
 800e46c:	2101      	movs	r1, #1
 800e46e:	4618      	mov	r0, r3
 800e470:	f001 fdcc 	bl	801000c <RCCEx_PLL3_Config>
 800e474:	4603      	mov	r3, r0
 800e476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e47a:	e004      	b.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 800e47c:	2301      	movs	r3, #1
 800e47e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e482:	e000      	b.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 800e484:	bf00      	nop
 800e486:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d10b      	bne.n	800e4a6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800e48e:	4b6c      	ldr	r3, [pc, #432]	@ (800e640 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e492:	f023 0107 	bic.w	r1, r3, #7
 800e496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e49a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e49e:	4a68      	ldr	r2, [pc, #416]	@ (800e640 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e4a0:	430b      	orrs	r3, r1
 800e4a2:	6593      	str	r3, [r2, #88]	@ 0x58
 800e4a4:	e003      	b.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800e4a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e4aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b6:	f002 0320 	and.w	r3, r2, #32
 800e4ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e4be:	2300      	movs	r3, #0
 800e4c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e4c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	d055      	beq.n	800e57a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800e4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e4d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e4da:	d033      	beq.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800e4dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e4e0:	d82c      	bhi.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4e6:	d02f      	beq.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800e4e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4ec:	d826      	bhi.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e4ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e4f2:	d02b      	beq.n	800e54c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800e4f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e4f8:	d820      	bhi.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e4fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4fe:	d012      	beq.n	800e526 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800e500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e504:	d81a      	bhi.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e506:	2b00      	cmp	r3, #0
 800e508:	d022      	beq.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800e50a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e50e:	d115      	bne.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e514:	3308      	adds	r3, #8
 800e516:	2100      	movs	r1, #0
 800e518:	4618      	mov	r0, r3
 800e51a:	f001 fcc5 	bl	800fea8 <RCCEx_PLL2_Config>
 800e51e:	4603      	mov	r3, r0
 800e520:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e524:	e015      	b.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e52a:	3328      	adds	r3, #40	@ 0x28
 800e52c:	2102      	movs	r1, #2
 800e52e:	4618      	mov	r0, r3
 800e530:	f001 fd6c 	bl	801000c <RCCEx_PLL3_Config>
 800e534:	4603      	mov	r3, r0
 800e536:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e53a:	e00a      	b.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e53c:	2301      	movs	r3, #1
 800e53e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e542:	e006      	b.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e544:	bf00      	nop
 800e546:	e004      	b.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e548:	bf00      	nop
 800e54a:	e002      	b.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e54c:	bf00      	nop
 800e54e:	e000      	b.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e550:	bf00      	nop
 800e552:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e556:	2b00      	cmp	r3, #0
 800e558:	d10b      	bne.n	800e572 <HAL_RCCEx_PeriphCLKConfig+0xbce>
 800e55a:	4b39      	ldr	r3, [pc, #228]	@ (800e640 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e55c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e55e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e566:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e56a:	4a35      	ldr	r2, [pc, #212]	@ (800e640 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e56c:	430b      	orrs	r3, r1
 800e56e:	6553      	str	r3, [r2, #84]	@ 0x54
 800e570:	e003      	b.n	800e57a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800e572:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e576:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e582:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e586:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e58a:	2300      	movs	r3, #0
 800e58c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e590:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e594:	460b      	mov	r3, r1
 800e596:	4313      	orrs	r3, r2
 800e598:	d058      	beq.n	800e64c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800e59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e59e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e5a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e5a6:	d033      	beq.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800e5a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e5ac:	d82c      	bhi.n	800e608 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e5ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5b2:	d02f      	beq.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e5b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5b8:	d826      	bhi.n	800e608 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e5ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e5be:	d02b      	beq.n	800e618 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800e5c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e5c4:	d820      	bhi.n	800e608 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e5c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5ca:	d012      	beq.n	800e5f2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800e5cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5d0:	d81a      	bhi.n	800e608 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d022      	beq.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e5d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5da:	d115      	bne.n	800e608 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5e0:	3308      	adds	r3, #8
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f001 fc5f 	bl	800fea8 <RCCEx_PLL2_Config>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e5f0:	e015      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5f6:	3328      	adds	r3, #40	@ 0x28
 800e5f8:	2102      	movs	r1, #2
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f001 fd06 	bl	801000c <RCCEx_PLL3_Config>
 800e600:	4603      	mov	r3, r0
 800e602:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e606:	e00a      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e608:	2301      	movs	r3, #1
 800e60a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e60e:	e006      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e610:	bf00      	nop
 800e612:	e004      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e614:	bf00      	nop
 800e616:	e002      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e618:	bf00      	nop
 800e61a:	e000      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e61c:	bf00      	nop
 800e61e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10e      	bne.n	800e644 <HAL_RCCEx_PeriphCLKConfig+0xca0>
 800e626:	4b06      	ldr	r3, [pc, #24]	@ (800e640 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e62a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e632:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e636:	4a02      	ldr	r2, [pc, #8]	@ (800e640 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e638:	430b      	orrs	r3, r1
 800e63a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e63c:	e006      	b.n	800e64c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800e63e:	bf00      	nop
 800e640:	58024400 	.word	0x58024400
 800e644:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e648:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e654:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e658:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e65c:	2300      	movs	r3, #0
 800e65e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e662:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e666:	460b      	mov	r3, r1
 800e668:	4313      	orrs	r3, r2
 800e66a:	d055      	beq.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800e66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e670:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e674:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e678:	d033      	beq.n	800e6e2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800e67a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e67e:	d82c      	bhi.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e684:	d02f      	beq.n	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800e686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e68a:	d826      	bhi.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e68c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e690:	d02b      	beq.n	800e6ea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800e692:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e696:	d820      	bhi.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e698:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e69c:	d012      	beq.n	800e6c4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800e69e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e6a2:	d81a      	bhi.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d022      	beq.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800e6a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e6ac:	d115      	bne.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6b2:	3308      	adds	r3, #8
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f001 fbf6 	bl	800fea8 <RCCEx_PLL2_Config>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e6c2:	e015      	b.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800e6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6c8:	3328      	adds	r3, #40	@ 0x28
 800e6ca:	2102      	movs	r1, #2
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f001 fc9d 	bl	801000c <RCCEx_PLL3_Config>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e6d8:	e00a      	b.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e6e0:	e006      	b.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800e6e2:	bf00      	nop
 800e6e4:	e004      	b.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800e6e6:	bf00      	nop
 800e6e8:	e002      	b.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800e6ea:	bf00      	nop
 800e6ec:	e000      	b.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800e6ee:	bf00      	nop
 800e6f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d10b      	bne.n	800e710 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 800e6f8:	4ba0      	ldr	r3, [pc, #640]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e6fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e704:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e708:	4a9c      	ldr	r2, [pc, #624]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e70a:	430b      	orrs	r3, r1
 800e70c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e70e:	e003      	b.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800e710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e714:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	f002 0308 	and.w	r3, r2, #8
 800e724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e728:	2300      	movs	r3, #0
 800e72a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e72e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e732:	460b      	mov	r3, r1
 800e734:	4313      	orrs	r3, r2
 800e736:	d01e      	beq.n	800e776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e744:	d10c      	bne.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e74a:	3328      	adds	r3, #40	@ 0x28
 800e74c:	2102      	movs	r1, #2
 800e74e:	4618      	mov	r0, r3
 800e750:	f001 fc5c 	bl	801000c <RCCEx_PLL3_Config>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	d002      	beq.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e75a:	2301      	movs	r3, #1
 800e75c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e760:	4b86      	ldr	r3, [pc, #536]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e764:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e76c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e770:	4a82      	ldr	r2, [pc, #520]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e772:	430b      	orrs	r3, r1
 800e774:	6553      	str	r3, [r2, #84]	@ 0x54
 800e776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77e:	f002 0310 	and.w	r3, r2, #16
 800e782:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e786:	2300      	movs	r3, #0
 800e788:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e78c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e790:	460b      	mov	r3, r1
 800e792:	4313      	orrs	r3, r2
 800e794:	d01e      	beq.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
 800e796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e79a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e79e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7a2:	d10c      	bne.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 800e7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7a8:	3328      	adds	r3, #40	@ 0x28
 800e7aa:	2102      	movs	r1, #2
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f001 fc2d 	bl	801000c <RCCEx_PLL3_Config>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d002      	beq.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e7be:	4b6f      	ldr	r3, [pc, #444]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e7c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e7ce:	4a6b      	ldr	r2, [pc, #428]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e7d0:	430b      	orrs	r3, r1
 800e7d2:	6593      	str	r3, [r2, #88]	@ 0x58
 800e7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e7e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e7e6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	d03e      	beq.n	800e86e <HAL_RCCEx_PeriphCLKConfig+0xeca>
 800e7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e7f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e7fc:	d022      	beq.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800e7fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e802:	d81b      	bhi.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800e804:	2b00      	cmp	r3, #0
 800e806:	d003      	beq.n	800e810 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800e808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e80c:	d00b      	beq.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800e80e:	e015      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800e810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e814:	3308      	adds	r3, #8
 800e816:	2100      	movs	r1, #0
 800e818:	4618      	mov	r0, r3
 800e81a:	f001 fb45 	bl	800fea8 <RCCEx_PLL2_Config>
 800e81e:	4603      	mov	r3, r0
 800e820:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e824:	e00f      	b.n	800e846 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 800e826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e82a:	3328      	adds	r3, #40	@ 0x28
 800e82c:	2102      	movs	r1, #2
 800e82e:	4618      	mov	r0, r3
 800e830:	f001 fbec 	bl	801000c <RCCEx_PLL3_Config>
 800e834:	4603      	mov	r3, r0
 800e836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e83a:	e004      	b.n	800e846 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 800e83c:	2301      	movs	r3, #1
 800e83e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e842:	e000      	b.n	800e846 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 800e844:	bf00      	nop
 800e846:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d10b      	bne.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0xec2>
 800e84e:	4b4b      	ldr	r3, [pc, #300]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e852:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e85a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e85e:	4a47      	ldr	r2, [pc, #284]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e860:	430b      	orrs	r3, r1
 800e862:	6593      	str	r3, [r2, #88]	@ 0x58
 800e864:	e003      	b.n	800e86e <HAL_RCCEx_PeriphCLKConfig+0xeca>
 800e866:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e86a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e876:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e87a:	673b      	str	r3, [r7, #112]	@ 0x70
 800e87c:	2300      	movs	r3, #0
 800e87e:	677b      	str	r3, [r7, #116]	@ 0x74
 800e880:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e884:	460b      	mov	r3, r1
 800e886:	4313      	orrs	r3, r2
 800e888:	d03b      	beq.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 800e88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e88e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e892:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e896:	d01f      	beq.n	800e8d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800e898:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e89c:	d818      	bhi.n	800e8d0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800e89e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e8a2:	d003      	beq.n	800e8ac <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800e8a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e8a8:	d007      	beq.n	800e8ba <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800e8aa:	e011      	b.n	800e8d0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800e8ac:	4b33      	ldr	r3, [pc, #204]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e8ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8b0:	4a32      	ldr	r2, [pc, #200]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e8b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e8b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e8b8:	e00f      	b.n	800e8da <HAL_RCCEx_PeriphCLKConfig+0xf36>
 800e8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8be:	3328      	adds	r3, #40	@ 0x28
 800e8c0:	2101      	movs	r1, #1
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f001 fba2 	bl	801000c <RCCEx_PLL3_Config>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e8ce:	e004      	b.n	800e8da <HAL_RCCEx_PeriphCLKConfig+0xf36>
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e8d6:	e000      	b.n	800e8da <HAL_RCCEx_PeriphCLKConfig+0xf36>
 800e8d8:	bf00      	nop
 800e8da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d10b      	bne.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0xf56>
 800e8e2:	4b26      	ldr	r3, [pc, #152]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e8e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8f2:	4a22      	ldr	r2, [pc, #136]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e8f4:	430b      	orrs	r3, r1
 800e8f6:	6553      	str	r3, [r2, #84]	@ 0x54
 800e8f8:	e003      	b.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 800e8fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e90e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e910:	2300      	movs	r3, #0
 800e912:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e914:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e918:	460b      	mov	r3, r1
 800e91a:	4313      	orrs	r3, r2
 800e91c:	d034      	beq.n	800e988 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800e91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e924:	2b00      	cmp	r3, #0
 800e926:	d003      	beq.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800e928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e92c:	d007      	beq.n	800e93e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800e92e:	e011      	b.n	800e954 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
 800e930:	4b12      	ldr	r3, [pc, #72]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e934:	4a11      	ldr	r2, [pc, #68]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e93a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e93c:	e00e      	b.n	800e95c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800e93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e942:	3308      	adds	r3, #8
 800e944:	2102      	movs	r1, #2
 800e946:	4618      	mov	r0, r3
 800e948:	f001 faae 	bl	800fea8 <RCCEx_PLL2_Config>
 800e94c:	4603      	mov	r3, r0
 800e94e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e952:	e003      	b.n	800e95c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800e954:	2301      	movs	r3, #1
 800e956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e95a:	bf00      	nop
 800e95c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e960:	2b00      	cmp	r3, #0
 800e962:	d10d      	bne.n	800e980 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
 800e964:	4b05      	ldr	r3, [pc, #20]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e968:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e972:	4a02      	ldr	r2, [pc, #8]	@ (800e97c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e974:	430b      	orrs	r3, r1
 800e976:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e978:	e006      	b.n	800e988 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800e97a:	bf00      	nop
 800e97c:	58024400 	.word	0x58024400
 800e980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e984:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e990:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e994:	663b      	str	r3, [r7, #96]	@ 0x60
 800e996:	2300      	movs	r3, #0
 800e998:	667b      	str	r3, [r7, #100]	@ 0x64
 800e99a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e99e:	460b      	mov	r3, r1
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	d00c      	beq.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x101a>
 800e9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9a8:	3328      	adds	r3, #40	@ 0x28
 800e9aa:	2102      	movs	r1, #2
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f001 fb2d 	bl	801000c <RCCEx_PLL3_Config>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d002      	beq.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x101a>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e9ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e9d0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	d036      	beq.n	800ea48 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 800e9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e9e4:	d018      	beq.n	800ea18 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800e9e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e9ea:	d811      	bhi.n	800ea10 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800e9ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9f0:	d014      	beq.n	800ea1c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800e9f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9f6:	d80b      	bhi.n	800ea10 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d011      	beq.n	800ea20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800e9fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea00:	d106      	bne.n	800ea10 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ea02:	4bb7      	ldr	r3, [pc, #732]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea06:	4ab6      	ldr	r2, [pc, #728]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ea0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ea0e:	e008      	b.n	800ea22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ea10:	2301      	movs	r3, #1
 800ea12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ea16:	e004      	b.n	800ea22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ea18:	bf00      	nop
 800ea1a:	e002      	b.n	800ea22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ea1c:	bf00      	nop
 800ea1e:	e000      	b.n	800ea22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ea20:	bf00      	nop
 800ea22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10a      	bne.n	800ea40 <HAL_RCCEx_PeriphCLKConfig+0x109c>
 800ea2a:	4bad      	ldr	r3, [pc, #692]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ea32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea38:	4aa9      	ldr	r2, [pc, #676]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea3a:	430b      	orrs	r3, r1
 800ea3c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ea3e:	e003      	b.n	800ea48 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 800ea40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ea48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea50:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ea54:	653b      	str	r3, [r7, #80]	@ 0x50
 800ea56:	2300      	movs	r3, #0
 800ea58:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea5a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ea5e:	460b      	mov	r3, r1
 800ea60:	4313      	orrs	r3, r2
 800ea62:	d009      	beq.n	800ea78 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
 800ea64:	4b9e      	ldr	r3, [pc, #632]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ea6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea72:	4a9b      	ldr	r2, [pc, #620]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea74:	430b      	orrs	r3, r1
 800ea76:	6513      	str	r3, [r2, #80]	@ 0x50
 800ea78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea80:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ea84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea86:	2300      	movs	r3, #0
 800ea88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea8a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ea8e:	460b      	mov	r3, r1
 800ea90:	4313      	orrs	r3, r2
 800ea92:	d009      	beq.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
 800ea94:	4b92      	ldr	r3, [pc, #584]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea98:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ea9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eaa2:	4a8f      	ldr	r2, [pc, #572]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eaa4:	430b      	orrs	r3, r1
 800eaa6:	6513      	str	r3, [r2, #80]	@ 0x50
 800eaa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800eab4:	643b      	str	r3, [r7, #64]	@ 0x40
 800eab6:	2300      	movs	r3, #0
 800eab8:	647b      	str	r3, [r7, #68]	@ 0x44
 800eaba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800eabe:	460b      	mov	r3, r1
 800eac0:	4313      	orrs	r3, r2
 800eac2:	d00e      	beq.n	800eae2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
 800eac4:	4b86      	ldr	r3, [pc, #536]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eac6:	691b      	ldr	r3, [r3, #16]
 800eac8:	4a85      	ldr	r2, [pc, #532]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eaca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800eace:	6113      	str	r3, [r2, #16]
 800ead0:	4b83      	ldr	r3, [pc, #524]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ead2:	6919      	ldr	r1, [r3, #16]
 800ead4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ead8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800eadc:	4a80      	ldr	r2, [pc, #512]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eade:	430b      	orrs	r3, r1
 800eae0:	6113      	str	r3, [r2, #16]
 800eae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaea:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800eaee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eaf4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800eaf8:	460b      	mov	r3, r1
 800eafa:	4313      	orrs	r3, r2
 800eafc:	d009      	beq.n	800eb12 <HAL_RCCEx_PeriphCLKConfig+0x116e>
 800eafe:	4b78      	ldr	r3, [pc, #480]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eb00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800eb06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb0c:	4a74      	ldr	r2, [pc, #464]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eb0e:	430b      	orrs	r3, r1
 800eb10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800eb12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800eb1e:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb20:	2300      	movs	r3, #0
 800eb22:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb24:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800eb28:	460b      	mov	r3, r1
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	d00a      	beq.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
 800eb2e:	4b6c      	ldr	r3, [pc, #432]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eb30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb32:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800eb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb3e:	4a68      	ldr	r2, [pc, #416]	@ (800ece0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eb40:	430b      	orrs	r3, r1
 800eb42:	6553      	str	r3, [r2, #84]	@ 0x54
 800eb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800eb50:	f003 0301 	and.w	r3, r3, #1
 800eb54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb56:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	d011      	beq.n	800eb84 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
 800eb60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb64:	3308      	adds	r3, #8
 800eb66:	2100      	movs	r1, #0
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f001 f99d 	bl	800fea8 <RCCEx_PLL2_Config>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800eb74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d003      	beq.n	800eb84 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
 800eb7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800eb84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8c:	2100      	movs	r1, #0
 800eb8e:	6239      	str	r1, [r7, #32]
 800eb90:	f003 0302 	and.w	r3, r3, #2
 800eb94:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb96:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	d011      	beq.n	800ebc4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
 800eba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eba4:	3308      	adds	r3, #8
 800eba6:	2101      	movs	r1, #1
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f001 f97d 	bl	800fea8 <RCCEx_PLL2_Config>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ebb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d003      	beq.n	800ebc4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
 800ebbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ebc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebcc:	2100      	movs	r1, #0
 800ebce:	61b9      	str	r1, [r7, #24]
 800ebd0:	f003 0304 	and.w	r3, r3, #4
 800ebd4:	61fb      	str	r3, [r7, #28]
 800ebd6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	d011      	beq.n	800ec04 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800ebe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebe4:	3308      	adds	r3, #8
 800ebe6:	2102      	movs	r1, #2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f001 f95d 	bl	800fea8 <RCCEx_PLL2_Config>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ebf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d003      	beq.n	800ec04 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800ebfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ec04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	6139      	str	r1, [r7, #16]
 800ec10:	f003 0308 	and.w	r3, r3, #8
 800ec14:	617b      	str	r3, [r7, #20]
 800ec16:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	d011      	beq.n	800ec44 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
 800ec20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec24:	3328      	adds	r3, #40	@ 0x28
 800ec26:	2100      	movs	r1, #0
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f001 f9ef 	bl	801000c <RCCEx_PLL3_Config>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ec34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d003      	beq.n	800ec44 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
 800ec3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ec44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	60b9      	str	r1, [r7, #8]
 800ec50:	f003 0310 	and.w	r3, r3, #16
 800ec54:	60fb      	str	r3, [r7, #12]
 800ec56:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	d011      	beq.n	800ec84 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800ec60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec64:	3328      	adds	r3, #40	@ 0x28
 800ec66:	2101      	movs	r1, #1
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f001 f9cf 	bl	801000c <RCCEx_PLL3_Config>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ec74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d003      	beq.n	800ec84 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800ec7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ec84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	6039      	str	r1, [r7, #0]
 800ec90:	f003 0320 	and.w	r3, r3, #32
 800ec94:	607b      	str	r3, [r7, #4]
 800ec96:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	4313      	orrs	r3, r2
 800ec9e:	d011      	beq.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800eca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eca4:	3328      	adds	r3, #40	@ 0x28
 800eca6:	2102      	movs	r1, #2
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f001 f9af 	bl	801000c <RCCEx_PLL3_Config>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ecb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d003      	beq.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800ecbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ecc4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d101      	bne.n	800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800eccc:	2300      	movs	r3, #0
 800ecce:	e000      	b.n	800ecd2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecde:	bf00      	nop
 800ece0:	58024400 	.word	0x58024400

0800ece4 <HAL_RCCEx_GetPeriphCLKFreq>:
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b090      	sub	sp, #64	@ 0x40
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	e9c7 0100 	strd	r0, r1, [r7]
 800ecee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecf2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ecf6:	430b      	orrs	r3, r1
 800ecf8:	f040 8094 	bne.w	800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 800ecfc:	4b9b      	ldr	r3, [pc, #620]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ecfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed00:	f003 0307 	and.w	r3, r3, #7
 800ed04:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed08:	2b04      	cmp	r3, #4
 800ed0a:	f200 8087 	bhi.w	800ee1c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ed0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ed14 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ed10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed14:	0800ed29 	.word	0x0800ed29
 800ed18:	0800ed51 	.word	0x0800ed51
 800ed1c:	0800ed79 	.word	0x0800ed79
 800ed20:	0800ee15 	.word	0x0800ee15
 800ed24:	0800eda1 	.word	0x0800eda1
 800ed28:	4b90      	ldr	r3, [pc, #576]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ed34:	d108      	bne.n	800ed48 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800ed36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f000 ff62 	bl	800fc04 <HAL_RCCEx_GetPLL1ClockFreq>
 800ed40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed44:	f000 bc93 	b.w	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed4c:	f000 bc8f 	b.w	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ed50:	4b86      	ldr	r3, [pc, #536]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed5c:	d108      	bne.n	800ed70 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 800ed5e:	f107 0318 	add.w	r3, r7, #24
 800ed62:	4618      	mov	r0, r3
 800ed64:	f000 fca6 	bl	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed6c:	f000 bc7f 	b.w	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ed70:	2300      	movs	r3, #0
 800ed72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed74:	f000 bc7b 	b.w	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ed78:	4b7c      	ldr	r3, [pc, #496]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed84:	d108      	bne.n	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800ed86:	f107 030c 	add.w	r3, r7, #12
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f000 fde6 	bl	800f95c <HAL_RCCEx_GetPLL3ClockFreq>
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed94:	f000 bc6b 	b.w	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ed98:	2300      	movs	r3, #0
 800ed9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed9c:	f000 bc67 	b.w	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800eda0:	4b72      	ldr	r3, [pc, #456]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eda2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eda4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800eda8:	637b      	str	r3, [r7, #52]	@ 0x34
 800edaa:	4b70      	ldr	r3, [pc, #448]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f003 0304 	and.w	r3, r3, #4
 800edb2:	2b04      	cmp	r3, #4
 800edb4:	d10c      	bne.n	800edd0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800edb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d109      	bne.n	800edd0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800edbc:	4b6b      	ldr	r3, [pc, #428]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	08db      	lsrs	r3, r3, #3
 800edc2:	f003 0303 	and.w	r3, r3, #3
 800edc6:	4a6a      	ldr	r2, [pc, #424]	@ (800ef70 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800edc8:	fa22 f303 	lsr.w	r3, r2, r3
 800edcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edce:	e01f      	b.n	800ee10 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800edd0:	4b66      	ldr	r3, [pc, #408]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800edd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eddc:	d106      	bne.n	800edec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800edde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ede0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ede4:	d102      	bne.n	800edec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ede6:	4b63      	ldr	r3, [pc, #396]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ede8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edea:	e011      	b.n	800ee10 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800edec:	4b5f      	ldr	r3, [pc, #380]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800edf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800edf8:	d106      	bne.n	800ee08 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800edfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee00:	d102      	bne.n	800ee08 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ee02:	4b5d      	ldr	r3, [pc, #372]	@ (800ef78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee06:	e003      	b.n	800ee10 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800ee08:	2300      	movs	r3, #0
 800ee0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee0c:	f000 bc2f 	b.w	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ee10:	f000 bc2d 	b.w	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ee14:	4b59      	ldr	r3, [pc, #356]	@ (800ef7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ee16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee18:	f000 bc29 	b.w	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee20:	f000 bc25 	b.w	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ee24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee28:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ee2c:	430b      	orrs	r3, r1
 800ee2e:	f040 80a7 	bne.w	800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800ee32:	4b4e      	ldr	r3, [pc, #312]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ee34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee36:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ee3a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ee42:	d054      	beq.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ee44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ee4a:	f200 808b 	bhi.w	800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ee4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee50:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ee54:	f000 8083 	beq.w	800ef5e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ee58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee5a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ee5e:	f200 8081 	bhi.w	800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ee62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee68:	d02f      	beq.n	800eeca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ee6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee70:	d878      	bhi.n	800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ee72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d004      	beq.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ee78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ee7e:	d012      	beq.n	800eea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ee80:	e070      	b.n	800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ee82:	4b3a      	ldr	r3, [pc, #232]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee8e:	d107      	bne.n	800eea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800ee90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee94:	4618      	mov	r0, r3
 800ee96:	f000 feb5 	bl	800fc04 <HAL_RCCEx_GetPLL1ClockFreq>
 800ee9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee9e:	e3e6      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800eea0:	2300      	movs	r3, #0
 800eea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eea4:	e3e3      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800eea6:	4b31      	ldr	r3, [pc, #196]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eeae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eeb2:	d107      	bne.n	800eec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800eeb4:	f107 0318 	add.w	r3, r7, #24
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f000 fbfb 	bl	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eec2:	e3d4      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800eec4:	2300      	movs	r3, #0
 800eec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eec8:	e3d1      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800eeca:	4b28      	ldr	r3, [pc, #160]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eed6:	d107      	bne.n	800eee8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 800eed8:	f107 030c 	add.w	r3, r7, #12
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 fd3d 	bl	800f95c <HAL_RCCEx_GetPLL3ClockFreq>
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eee6:	e3c2      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800eee8:	2300      	movs	r3, #0
 800eeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eeec:	e3bf      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800eeee:	4b1f      	ldr	r3, [pc, #124]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eef2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800eef6:	637b      	str	r3, [r7, #52]	@ 0x34
 800eef8:	4b1c      	ldr	r3, [pc, #112]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f003 0304 	and.w	r3, r3, #4
 800ef00:	2b04      	cmp	r3, #4
 800ef02:	d10c      	bne.n	800ef1e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ef04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d109      	bne.n	800ef1e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ef0a:	4b18      	ldr	r3, [pc, #96]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	08db      	lsrs	r3, r3, #3
 800ef10:	f003 0303 	and.w	r3, r3, #3
 800ef14:	4a16      	ldr	r2, [pc, #88]	@ (800ef70 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ef16:	fa22 f303 	lsr.w	r3, r2, r3
 800ef1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef1c:	e01e      	b.n	800ef5c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800ef1e:	4b13      	ldr	r3, [pc, #76]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef2a:	d106      	bne.n	800ef3a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ef2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef32:	d102      	bne.n	800ef3a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ef34:	4b0f      	ldr	r3, [pc, #60]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ef36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef38:	e010      	b.n	800ef5c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800ef3a:	4b0c      	ldr	r3, [pc, #48]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef46:	d106      	bne.n	800ef56 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ef48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef4e:	d102      	bne.n	800ef56 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ef50:	4b09      	ldr	r3, [pc, #36]	@ (800ef78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef54:	e002      	b.n	800ef5c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800ef56:	2300      	movs	r3, #0
 800ef58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef5a:	e388      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ef5c:	e387      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ef5e:	4b07      	ldr	r3, [pc, #28]	@ (800ef7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ef60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef62:	e384      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ef64:	2300      	movs	r3, #0
 800ef66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef68:	e381      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ef6a:	bf00      	nop
 800ef6c:	58024400 	.word	0x58024400
 800ef70:	03d09000 	.word	0x03d09000
 800ef74:	003d0900 	.word	0x003d0900
 800ef78:	016e3600 	.word	0x016e3600
 800ef7c:	00bb8000 	.word	0x00bb8000
 800ef80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef84:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ef88:	430b      	orrs	r3, r1
 800ef8a:	f040 809c 	bne.w	800f0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ef8e:	4b9e      	ldr	r3, [pc, #632]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ef90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef92:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ef96:	633b      	str	r3, [r7, #48]	@ 0x30
 800ef98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ef9e:	d054      	beq.n	800f04a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800efa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efa2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800efa6:	f200 808b 	bhi.w	800f0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800efaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800efb0:	f000 8083 	beq.w	800f0ba <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800efb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800efba:	f200 8081 	bhi.w	800f0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800efbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800efc4:	d02f      	beq.n	800f026 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800efc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800efcc:	d878      	bhi.n	800f0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800efce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d004      	beq.n	800efde <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800efd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800efda:	d012      	beq.n	800f002 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800efdc:	e070      	b.n	800f0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800efde:	4b8a      	ldr	r3, [pc, #552]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800efe6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800efea:	d107      	bne.n	800effc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800efec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eff0:	4618      	mov	r0, r3
 800eff2:	f000 fe07 	bl	800fc04 <HAL_RCCEx_GetPLL1ClockFreq>
 800eff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800effa:	e338      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800effc:	2300      	movs	r3, #0
 800effe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f000:	e335      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f002:	4b81      	ldr	r3, [pc, #516]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f00a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f00e:	d107      	bne.n	800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800f010:	f107 0318 	add.w	r3, r7, #24
 800f014:	4618      	mov	r0, r3
 800f016:	f000 fb4d 	bl	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f01e:	e326      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f020:	2300      	movs	r3, #0
 800f022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f024:	e323      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f026:	4b78      	ldr	r3, [pc, #480]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f02e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f032:	d107      	bne.n	800f044 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 800f034:	f107 030c 	add.w	r3, r7, #12
 800f038:	4618      	mov	r0, r3
 800f03a:	f000 fc8f 	bl	800f95c <HAL_RCCEx_GetPLL3ClockFreq>
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f042:	e314      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f044:	2300      	movs	r3, #0
 800f046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f048:	e311      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f04a:	4b6f      	ldr	r3, [pc, #444]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f04c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f04e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f052:	637b      	str	r3, [r7, #52]	@ 0x34
 800f054:	4b6c      	ldr	r3, [pc, #432]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f003 0304 	and.w	r3, r3, #4
 800f05c:	2b04      	cmp	r3, #4
 800f05e:	d10c      	bne.n	800f07a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800f060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f062:	2b00      	cmp	r3, #0
 800f064:	d109      	bne.n	800f07a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800f066:	4b68      	ldr	r3, [pc, #416]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	08db      	lsrs	r3, r3, #3
 800f06c:	f003 0303 	and.w	r3, r3, #3
 800f070:	4a66      	ldr	r2, [pc, #408]	@ (800f20c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f072:	fa22 f303 	lsr.w	r3, r2, r3
 800f076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f078:	e01e      	b.n	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 800f07a:	4b63      	ldr	r3, [pc, #396]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f086:	d106      	bne.n	800f096 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f08a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f08e:	d102      	bne.n	800f096 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f090:	4b5f      	ldr	r3, [pc, #380]	@ (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f094:	e010      	b.n	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 800f096:	4b5c      	ldr	r3, [pc, #368]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f09e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f0a2:	d106      	bne.n	800f0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800f0a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f0aa:	d102      	bne.n	800f0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800f0ac:	4b59      	ldr	r3, [pc, #356]	@ (800f214 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0b0:	e002      	b.n	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0b6:	e2da      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0b8:	e2d9      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0ba:	4b57      	ldr	r3, [pc, #348]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0be:	e2d6      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0c4:	e2d3      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0ca:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f0ce:	430b      	orrs	r3, r1
 800f0d0:	f040 80a7 	bne.w	800f222 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 800f0d4:	4b4c      	ldr	r3, [pc, #304]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f0d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0d8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f0dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f0e4:	d055      	beq.n	800f192 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800f0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f0ec:	f200 8096 	bhi.w	800f21c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f0f6:	f000 8084 	beq.w	800f202 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800f0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f100:	f200 808c 	bhi.w	800f21c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f10a:	d030      	beq.n	800f16e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800f10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f10e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f112:	f200 8083 	bhi.w	800f21c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d004      	beq.n	800f126 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800f11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f11e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f122:	d012      	beq.n	800f14a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800f124:	e07a      	b.n	800f21c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f126:	4b38      	ldr	r3, [pc, #224]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f12e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f132:	d107      	bne.n	800f144 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800f134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f138:	4618      	mov	r0, r3
 800f13a:	f000 fd63 	bl	800fc04 <HAL_RCCEx_GetPLL1ClockFreq>
 800f13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f140:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f142:	e294      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f144:	2300      	movs	r3, #0
 800f146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f148:	e291      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f14a:	4b2f      	ldr	r3, [pc, #188]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f156:	d107      	bne.n	800f168 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800f158:	f107 0318 	add.w	r3, r7, #24
 800f15c:	4618      	mov	r0, r3
 800f15e:	f000 faa9 	bl	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>
 800f162:	69bb      	ldr	r3, [r7, #24]
 800f164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f166:	e282      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f168:	2300      	movs	r3, #0
 800f16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f16c:	e27f      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f16e:	4b26      	ldr	r3, [pc, #152]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f17a:	d107      	bne.n	800f18c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800f17c:	f107 030c 	add.w	r3, r7, #12
 800f180:	4618      	mov	r0, r3
 800f182:	f000 fbeb 	bl	800f95c <HAL_RCCEx_GetPLL3ClockFreq>
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f18a:	e270      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f18c:	2300      	movs	r3, #0
 800f18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f190:	e26d      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f192:	4b1d      	ldr	r3, [pc, #116]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f196:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f19a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f19c:	4b1a      	ldr	r3, [pc, #104]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f003 0304 	and.w	r3, r3, #4
 800f1a4:	2b04      	cmp	r3, #4
 800f1a6:	d10c      	bne.n	800f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800f1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d109      	bne.n	800f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800f1ae:	4b16      	ldr	r3, [pc, #88]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	08db      	lsrs	r3, r3, #3
 800f1b4:	f003 0303 	and.w	r3, r3, #3
 800f1b8:	4a14      	ldr	r2, [pc, #80]	@ (800f20c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f1ba:	fa22 f303 	lsr.w	r3, r2, r3
 800f1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1c0:	e01e      	b.n	800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 800f1c2:	4b11      	ldr	r3, [pc, #68]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f1ce:	d106      	bne.n	800f1de <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f1d6:	d102      	bne.n	800f1de <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f1d8:	4b0d      	ldr	r3, [pc, #52]	@ (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1dc:	e010      	b.n	800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 800f1de:	4b0a      	ldr	r3, [pc, #40]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f1ea:	d106      	bne.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800f1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f1f2:	d102      	bne.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800f1f4:	4b07      	ldr	r3, [pc, #28]	@ (800f214 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1f8:	e002      	b.n	800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1fe:	e236      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f200:	e235      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f202:	4b05      	ldr	r3, [pc, #20]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f206:	e232      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f208:	58024400 	.word	0x58024400
 800f20c:	03d09000 	.word	0x03d09000
 800f210:	003d0900 	.word	0x003d0900
 800f214:	016e3600 	.word	0x016e3600
 800f218:	00bb8000 	.word	0x00bb8000
 800f21c:	2300      	movs	r3, #0
 800f21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f220:	e225      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f222:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f226:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f22a:	430b      	orrs	r3, r1
 800f22c:	f040 8085 	bne.w	800f33a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 800f230:	4b9c      	ldr	r3, [pc, #624]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f234:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f238:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f23c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f240:	d06b      	beq.n	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800f242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f248:	d874      	bhi.n	800f334 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f24c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f250:	d056      	beq.n	800f300 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800f252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f254:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f258:	d86c      	bhi.n	800f334 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f25c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f260:	d03b      	beq.n	800f2da <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f264:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f268:	d864      	bhi.n	800f334 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f26c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f270:	d021      	beq.n	800f2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f274:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f278:	d85c      	bhi.n	800f334 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d004      	beq.n	800f28a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800f280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f286:	d004      	beq.n	800f292 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800f288:	e054      	b.n	800f334 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f28a:	f7fe fb5f 	bl	800d94c <HAL_RCC_GetPCLK1Freq>
 800f28e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800f290:	e1ed      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f292:	4b84      	ldr	r3, [pc, #528]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f29a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f29e:	d107      	bne.n	800f2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f2a0:	f107 0318 	add.w	r3, r7, #24
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f000 fa05 	bl	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2ae:	e1de      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2b4:	e1db      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2b6:	4b7b      	ldr	r3, [pc, #492]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f2be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f2c2:	d107      	bne.n	800f2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f2c4:	f107 030c 	add.w	r3, r7, #12
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f000 fb47 	bl	800f95c <HAL_RCCEx_GetPLL3ClockFreq>
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2d2:	e1cc      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2d8:	e1c9      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2da:	4b72      	ldr	r3, [pc, #456]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f003 0304 	and.w	r3, r3, #4
 800f2e2:	2b04      	cmp	r3, #4
 800f2e4:	d109      	bne.n	800f2fa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800f2e6:	4b6f      	ldr	r3, [pc, #444]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	08db      	lsrs	r3, r3, #3
 800f2ec:	f003 0303 	and.w	r3, r3, #3
 800f2f0:	4a6d      	ldr	r2, [pc, #436]	@ (800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f2f2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2f8:	e1b9      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2fe:	e1b6      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f300:	4b68      	ldr	r3, [pc, #416]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f30c:	d102      	bne.n	800f314 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800f30e:	4b67      	ldr	r3, [pc, #412]	@ (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f312:	e1ac      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f314:	2300      	movs	r3, #0
 800f316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f318:	e1a9      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f31a:	4b62      	ldr	r3, [pc, #392]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f322:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f326:	d102      	bne.n	800f32e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800f328:	4b61      	ldr	r3, [pc, #388]	@ (800f4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f32c:	e19f      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f32e:	2300      	movs	r3, #0
 800f330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f332:	e19c      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f334:	2300      	movs	r3, #0
 800f336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f338:	e199      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f33a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f33e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f342:	430b      	orrs	r3, r1
 800f344:	d173      	bne.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800f346:	4b57      	ldr	r3, [pc, #348]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f34a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f34e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f356:	d02f      	beq.n	800f3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800f358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f35a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f35e:	d863      	bhi.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800f360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f362:	2b00      	cmp	r3, #0
 800f364:	d004      	beq.n	800f370 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800f366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f36c:	d012      	beq.n	800f394 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800f36e:	e05b      	b.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800f370:	4b4c      	ldr	r3, [pc, #304]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f378:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f37c:	d107      	bne.n	800f38e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
 800f37e:	f107 0318 	add.w	r3, r7, #24
 800f382:	4618      	mov	r0, r3
 800f384:	f000 f996 	bl	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f38c:	e16f      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f38e:	2300      	movs	r3, #0
 800f390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f392:	e16c      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f394:	4b43      	ldr	r3, [pc, #268]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f39c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f3a0:	d107      	bne.n	800f3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800f3a2:	f107 030c 	add.w	r3, r7, #12
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f000 fad8 	bl	800f95c <HAL_RCCEx_GetPLL3ClockFreq>
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3b0:	e15d      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3b6:	e15a      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f3b8:	4b3a      	ldr	r3, [pc, #232]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f3ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f3bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f3c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3c2:	4b38      	ldr	r3, [pc, #224]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f003 0304 	and.w	r3, r3, #4
 800f3ca:	2b04      	cmp	r3, #4
 800f3cc:	d10c      	bne.n	800f3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d109      	bne.n	800f3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f3d4:	4b33      	ldr	r3, [pc, #204]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	08db      	lsrs	r3, r3, #3
 800f3da:	f003 0303 	and.w	r3, r3, #3
 800f3de:	4a32      	ldr	r2, [pc, #200]	@ (800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f3e0:	fa22 f303 	lsr.w	r3, r2, r3
 800f3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3e6:	e01e      	b.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800f3e8:	4b2e      	ldr	r3, [pc, #184]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f3f4:	d106      	bne.n	800f404 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800f3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f3fc:	d102      	bne.n	800f404 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800f3fe:	4b2b      	ldr	r3, [pc, #172]	@ (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f402:	e010      	b.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800f404:	4b27      	ldr	r3, [pc, #156]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f40c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f410:	d106      	bne.n	800f420 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800f412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f418:	d102      	bne.n	800f420 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800f41a:	4b25      	ldr	r3, [pc, #148]	@ (800f4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f41e:	e002      	b.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800f420:	2300      	movs	r3, #0
 800f422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f424:	e123      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f426:	e122      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f428:	2300      	movs	r3, #0
 800f42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f42c:	e11f      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f42e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f432:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f436:	430b      	orrs	r3, r1
 800f438:	d13c      	bne.n	800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800f43a:	4b1a      	ldr	r3, [pc, #104]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f43c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f43e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f442:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f446:	2b00      	cmp	r3, #0
 800f448:	d004      	beq.n	800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800f44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f44c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f450:	d012      	beq.n	800f478 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800f452:	e023      	b.n	800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800f454:	4b13      	ldr	r3, [pc, #76]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f45c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f460:	d107      	bne.n	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 800f462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f466:	4618      	mov	r0, r3
 800f468:	f000 fbcc 	bl	800fc04 <HAL_RCCEx_GetPLL1ClockFreq>
 800f46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f470:	e0fd      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f472:	2300      	movs	r3, #0
 800f474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f476:	e0fa      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f478:	4b0a      	ldr	r3, [pc, #40]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f480:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f484:	d107      	bne.n	800f496 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800f486:	f107 0318 	add.w	r3, r7, #24
 800f48a:	4618      	mov	r0, r3
 800f48c:	f000 f912 	bl	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>
 800f490:	6a3b      	ldr	r3, [r7, #32]
 800f492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f494:	e0eb      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f496:	2300      	movs	r3, #0
 800f498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f49a:	e0e8      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f49c:	2300      	movs	r3, #0
 800f49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4a0:	e0e5      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f4a2:	bf00      	nop
 800f4a4:	58024400 	.word	0x58024400
 800f4a8:	03d09000 	.word	0x03d09000
 800f4ac:	003d0900 	.word	0x003d0900
 800f4b0:	016e3600 	.word	0x016e3600
 800f4b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4b8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f4bc:	430b      	orrs	r3, r1
 800f4be:	f040 8085 	bne.w	800f5cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800f4c2:	4b6d      	ldr	r3, [pc, #436]	@ (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f4c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f4c6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f4ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4d2:	d06b      	beq.n	800f5ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4da:	d874      	bhi.n	800f5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4e2:	d056      	beq.n	800f592 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800f4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4ea:	d86c      	bhi.n	800f5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f4f2:	d03b      	beq.n	800f56c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800f4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f4fa:	d864      	bhi.n	800f5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f502:	d021      	beq.n	800f548 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800f504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f50a:	d85c      	bhi.n	800f5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d004      	beq.n	800f51c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800f512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f514:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f518:	d004      	beq.n	800f524 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800f51a:	e054      	b.n	800f5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f51c:	f000 f8b4 	bl	800f688 <HAL_RCCEx_GetD3PCLK1Freq>
 800f520:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800f522:	e0a4      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f524:	4b54      	ldr	r3, [pc, #336]	@ (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f52c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f530:	d107      	bne.n	800f542 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800f532:	f107 0318 	add.w	r3, r7, #24
 800f536:	4618      	mov	r0, r3
 800f538:	f000 f8bc 	bl	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f540:	e095      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f542:	2300      	movs	r3, #0
 800f544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f546:	e092      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f548:	4b4b      	ldr	r3, [pc, #300]	@ (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f554:	d107      	bne.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 800f556:	f107 030c 	add.w	r3, r7, #12
 800f55a:	4618      	mov	r0, r3
 800f55c:	f000 f9fe 	bl	800f95c <HAL_RCCEx_GetPLL3ClockFreq>
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f564:	e083      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f566:	2300      	movs	r3, #0
 800f568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f56a:	e080      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f56c:	4b42      	ldr	r3, [pc, #264]	@ (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f003 0304 	and.w	r3, r3, #4
 800f574:	2b04      	cmp	r3, #4
 800f576:	d109      	bne.n	800f58c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 800f578:	4b3f      	ldr	r3, [pc, #252]	@ (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	08db      	lsrs	r3, r3, #3
 800f57e:	f003 0303 	and.w	r3, r3, #3
 800f582:	4a3e      	ldr	r2, [pc, #248]	@ (800f67c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800f584:	fa22 f303 	lsr.w	r3, r2, r3
 800f588:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f58a:	e070      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f58c:	2300      	movs	r3, #0
 800f58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f590:	e06d      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f592:	4b39      	ldr	r3, [pc, #228]	@ (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f59a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f59e:	d102      	bne.n	800f5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800f5a0:	4b37      	ldr	r3, [pc, #220]	@ (800f680 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5a4:	e063      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5aa:	e060      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5ac:	4b32      	ldr	r3, [pc, #200]	@ (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f5b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5b8:	d102      	bne.n	800f5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
 800f5ba:	4b32      	ldr	r3, [pc, #200]	@ (800f684 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5be:	e056      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5c4:	e053      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5ca:	e050      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5d0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f5d4:	430b      	orrs	r3, r1
 800f5d6:	d148      	bne.n	800f66a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800f5d8:	4b27      	ldr	r3, [pc, #156]	@ (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f5e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5e8:	d02a      	beq.n	800f640 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800f5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5f0:	d838      	bhi.n	800f664 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800f5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d004      	beq.n	800f602 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800f5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f5fe:	d00d      	beq.n	800f61c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800f600:	e030      	b.n	800f664 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800f602:	4b1d      	ldr	r3, [pc, #116]	@ (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f60a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f60e:	d102      	bne.n	800f616 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
 800f610:	4b1c      	ldr	r3, [pc, #112]	@ (800f684 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f614:	e02b      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f616:	2300      	movs	r3, #0
 800f618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f61a:	e028      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f61c:	4b16      	ldr	r3, [pc, #88]	@ (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f628:	d107      	bne.n	800f63a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 800f62a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 fae8 	bl	800fc04 <HAL_RCCEx_GetPLL1ClockFreq>
 800f634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f638:	e019      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f63a:	2300      	movs	r3, #0
 800f63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f63e:	e016      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f640:	4b0d      	ldr	r3, [pc, #52]	@ (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f64c:	d107      	bne.n	800f65e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800f64e:	f107 0318 	add.w	r3, r7, #24
 800f652:	4618      	mov	r0, r3
 800f654:	f000 f82e 	bl	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f65c:	e007      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f65e:	2300      	movs	r3, #0
 800f660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f662:	e004      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f664:	2300      	movs	r3, #0
 800f666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f668:	e001      	b.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f66a:	2300      	movs	r3, #0
 800f66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f670:	4618      	mov	r0, r3
 800f672:	3740      	adds	r7, #64	@ 0x40
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	58024400 	.word	0x58024400
 800f67c:	03d09000 	.word	0x03d09000
 800f680:	003d0900 	.word	0x003d0900
 800f684:	016e3600 	.word	0x016e3600

0800f688 <HAL_RCCEx_GetD3PCLK1Freq>:
 800f688:	b580      	push	{r7, lr}
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	f7fe f92e 	bl	800d8ec <HAL_RCC_GetHCLKFreq>
 800f690:	4602      	mov	r2, r0
 800f692:	4b06      	ldr	r3, [pc, #24]	@ (800f6ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f694:	6a1b      	ldr	r3, [r3, #32]
 800f696:	091b      	lsrs	r3, r3, #4
 800f698:	f003 0307 	and.w	r3, r3, #7
 800f69c:	4904      	ldr	r1, [pc, #16]	@ (800f6b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f69e:	5ccb      	ldrb	r3, [r1, r3]
 800f6a0:	f003 031f 	and.w	r3, r3, #31
 800f6a4:	fa22 f303 	lsr.w	r3, r2, r3
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	58024400 	.word	0x58024400
 800f6b0:	0801d2c0 	.word	0x0801d2c0

0800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>:
 800f6b4:	b480      	push	{r7}
 800f6b6:	b089      	sub	sp, #36	@ 0x24
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	4ba1      	ldr	r3, [pc, #644]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c0:	f003 0303 	and.w	r3, r3, #3
 800f6c4:	61bb      	str	r3, [r7, #24]
 800f6c6:	4b9f      	ldr	r3, [pc, #636]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6ca:	0b1b      	lsrs	r3, r3, #12
 800f6cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f6d0:	617b      	str	r3, [r7, #20]
 800f6d2:	4b9c      	ldr	r3, [pc, #624]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6d6:	091b      	lsrs	r3, r3, #4
 800f6d8:	f003 0301 	and.w	r3, r3, #1
 800f6dc:	613b      	str	r3, [r7, #16]
 800f6de:	4b99      	ldr	r3, [pc, #612]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6e2:	08db      	lsrs	r3, r3, #3
 800f6e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f6e8:	693a      	ldr	r2, [r7, #16]
 800f6ea:	fb02 f303 	mul.w	r3, r2, r3
 800f6ee:	ee07 3a90 	vmov	s15, r3
 800f6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6f6:	edc7 7a03 	vstr	s15, [r7, #12]
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	f000 8111 	beq.w	800f924 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	2b02      	cmp	r3, #2
 800f706:	f000 8083 	beq.w	800f810 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	2b02      	cmp	r3, #2
 800f70e:	f200 80a1 	bhi.w	800f854 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d003      	beq.n	800f720 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f718:	69bb      	ldr	r3, [r7, #24]
 800f71a:	2b01      	cmp	r3, #1
 800f71c:	d056      	beq.n	800f7cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f71e:	e099      	b.n	800f854 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f720:	4b88      	ldr	r3, [pc, #544]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f003 0320 	and.w	r3, r3, #32
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d02d      	beq.n	800f788 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
 800f72c:	4b85      	ldr	r3, [pc, #532]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	08db      	lsrs	r3, r3, #3
 800f732:	f003 0303 	and.w	r3, r3, #3
 800f736:	4a84      	ldr	r2, [pc, #528]	@ (800f948 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f738:	fa22 f303 	lsr.w	r3, r2, r3
 800f73c:	60bb      	str	r3, [r7, #8]
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	ee07 3a90 	vmov	s15, r3
 800f744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	ee07 3a90 	vmov	s15, r3
 800f74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f756:	4b7b      	ldr	r3, [pc, #492]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f75e:	ee07 3a90 	vmov	s15, r3
 800f762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f766:	ed97 6a03 	vldr	s12, [r7, #12]
 800f76a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f94c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f76e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f77a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f77e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f782:	edc7 7a07 	vstr	s15, [r7, #28]
 800f786:	e087      	b.n	800f898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	ee07 3a90 	vmov	s15, r3
 800f78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f792:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f950 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f79a:	4b6a      	ldr	r3, [pc, #424]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f79c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7a2:	ee07 3a90 	vmov	s15, r3
 800f7a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f94c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f7b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f7be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7c6:	edc7 7a07 	vstr	s15, [r7, #28]
 800f7ca:	e065      	b.n	800f898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	ee07 3a90 	vmov	s15, r3
 800f7d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f954 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f7da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7de:	4b59      	ldr	r3, [pc, #356]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7e6:	ee07 3a90 	vmov	s15, r3
 800f7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f94c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f80a:	edc7 7a07 	vstr	s15, [r7, #28]
 800f80e:	e043      	b.n	800f898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	ee07 3a90 	vmov	s15, r3
 800f816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f81a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f958 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f822:	4b48      	ldr	r3, [pc, #288]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f82a:	ee07 3a90 	vmov	s15, r3
 800f82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f832:	ed97 6a03 	vldr	s12, [r7, #12]
 800f836:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f94c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f84e:	edc7 7a07 	vstr	s15, [r7, #28]
 800f852:	e021      	b.n	800f898 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	ee07 3a90 	vmov	s15, r3
 800f85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f85e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f954 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f866:	4b37      	ldr	r3, [pc, #220]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f86e:	ee07 3a90 	vmov	s15, r3
 800f872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f876:	ed97 6a03 	vldr	s12, [r7, #12]
 800f87a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f94c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f892:	edc7 7a07 	vstr	s15, [r7, #28]
 800f896:	bf00      	nop
 800f898:	4b2a      	ldr	r3, [pc, #168]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f89a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f89c:	0a5b      	lsrs	r3, r3, #9
 800f89e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8a2:	ee07 3a90 	vmov	s15, r3
 800f8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f8ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f8b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800f8b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f8ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8be:	ee17 2a90 	vmov	r2, s15
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	601a      	str	r2, [r3, #0]
 800f8c6:	4b1f      	ldr	r3, [pc, #124]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8ca:	0c1b      	lsrs	r3, r3, #16
 800f8cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8d0:	ee07 3a90 	vmov	s15, r3
 800f8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f8dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f8e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800f8e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f8e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8ec:	ee17 2a90 	vmov	r2, s15
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	605a      	str	r2, [r3, #4]
 800f8f4:	4b13      	ldr	r3, [pc, #76]	@ (800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8f8:	0e1b      	lsrs	r3, r3, #24
 800f8fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8fe:	ee07 3a90 	vmov	s15, r3
 800f902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f906:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f90a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f90e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f91a:	ee17 2a90 	vmov	r2, s15
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	609a      	str	r2, [r3, #8]
 800f922:	e008      	b.n	800f936 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2200      	movs	r2, #0
 800f928:	601a      	str	r2, [r3, #0]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2200      	movs	r2, #0
 800f92e:	605a      	str	r2, [r3, #4]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2200      	movs	r2, #0
 800f934:	609a      	str	r2, [r3, #8]
 800f936:	bf00      	nop
 800f938:	3724      	adds	r7, #36	@ 0x24
 800f93a:	46bd      	mov	sp, r7
 800f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f940:	4770      	bx	lr
 800f942:	bf00      	nop
 800f944:	58024400 	.word	0x58024400
 800f948:	03d09000 	.word	0x03d09000
 800f94c:	46000000 	.word	0x46000000
 800f950:	4c742400 	.word	0x4c742400
 800f954:	4a742400 	.word	0x4a742400
 800f958:	4bb71b00 	.word	0x4bb71b00

0800f95c <HAL_RCCEx_GetPLL3ClockFreq>:
 800f95c:	b480      	push	{r7}
 800f95e:	b089      	sub	sp, #36	@ 0x24
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	4ba1      	ldr	r3, [pc, #644]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f968:	f003 0303 	and.w	r3, r3, #3
 800f96c:	61bb      	str	r3, [r7, #24]
 800f96e:	4b9f      	ldr	r3, [pc, #636]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f972:	0d1b      	lsrs	r3, r3, #20
 800f974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f978:	617b      	str	r3, [r7, #20]
 800f97a:	4b9c      	ldr	r3, [pc, #624]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f97e:	0a1b      	lsrs	r3, r3, #8
 800f980:	f003 0301 	and.w	r3, r3, #1
 800f984:	613b      	str	r3, [r7, #16]
 800f986:	4b99      	ldr	r3, [pc, #612]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f98a:	08db      	lsrs	r3, r3, #3
 800f98c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f990:	693a      	ldr	r2, [r7, #16]
 800f992:	fb02 f303 	mul.w	r3, r2, r3
 800f996:	ee07 3a90 	vmov	s15, r3
 800f99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f99e:	edc7 7a03 	vstr	s15, [r7, #12]
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	f000 8111 	beq.w	800fbcc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	2b02      	cmp	r3, #2
 800f9ae:	f000 8083 	beq.w	800fab8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	f200 80a1 	bhi.w	800fafc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d003      	beq.n	800f9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f9c0:	69bb      	ldr	r3, [r7, #24]
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d056      	beq.n	800fa74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f9c6:	e099      	b.n	800fafc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f9c8:	4b88      	ldr	r3, [pc, #544]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f003 0320 	and.w	r3, r3, #32
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d02d      	beq.n	800fa30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
 800f9d4:	4b85      	ldr	r3, [pc, #532]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	08db      	lsrs	r3, r3, #3
 800f9da:	f003 0303 	and.w	r3, r3, #3
 800f9de:	4a84      	ldr	r2, [pc, #528]	@ (800fbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f9e0:	fa22 f303 	lsr.w	r3, r2, r3
 800f9e4:	60bb      	str	r3, [r7, #8]
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	ee07 3a90 	vmov	s15, r3
 800f9ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	ee07 3a90 	vmov	s15, r3
 800f9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9fe:	4b7b      	ldr	r3, [pc, #492]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa06:	ee07 3a90 	vmov	s15, r3
 800fa0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa2a:	edc7 7a07 	vstr	s15, [r7, #28]
 800fa2e:	e087      	b.n	800fb40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	ee07 3a90 	vmov	s15, r3
 800fa36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fbf8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fa3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa42:	4b6a      	ldr	r3, [pc, #424]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa4a:	ee07 3a90 	vmov	s15, r3
 800fa4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa52:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa6e:	edc7 7a07 	vstr	s15, [r7, #28]
 800fa72:	e065      	b.n	800fb40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	ee07 3a90 	vmov	s15, r3
 800fa7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fbfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fa82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa86:	4b59      	ldr	r3, [pc, #356]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa8e:	ee07 3a90 	vmov	s15, r3
 800fa92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa96:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800faa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800faa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800faaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800faae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fab2:	edc7 7a07 	vstr	s15, [r7, #28]
 800fab6:	e043      	b.n	800fb40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	ee07 3a90 	vmov	s15, r3
 800fabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fac2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fc00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800faca:	4b48      	ldr	r3, [pc, #288]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800facc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800face:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fad2:	ee07 3a90 	vmov	s15, r3
 800fad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fada:	ed97 6a03 	vldr	s12, [r7, #12]
 800fade:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800faea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800faee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800faf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faf6:	edc7 7a07 	vstr	s15, [r7, #28]
 800fafa:	e021      	b.n	800fb40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	ee07 3a90 	vmov	s15, r3
 800fb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fbfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fb0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb0e:	4b37      	ldr	r3, [pc, #220]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb16:	ee07 3a90 	vmov	s15, r3
 800fb1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fb26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb3a:	edc7 7a07 	vstr	s15, [r7, #28]
 800fb3e:	bf00      	nop
 800fb40:	4b2a      	ldr	r3, [pc, #168]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb44:	0a5b      	lsrs	r3, r3, #9
 800fb46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb4a:	ee07 3a90 	vmov	s15, r3
 800fb4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb66:	ee17 2a90 	vmov	r2, s15
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	601a      	str	r2, [r3, #0]
 800fb6e:	4b1f      	ldr	r3, [pc, #124]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb72:	0c1b      	lsrs	r3, r3, #16
 800fb74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb78:	ee07 3a90 	vmov	s15, r3
 800fb7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb88:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb94:	ee17 2a90 	vmov	r2, s15
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	605a      	str	r2, [r3, #4]
 800fb9c:	4b13      	ldr	r3, [pc, #76]	@ (800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fba0:	0e1b      	lsrs	r3, r3, #24
 800fba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fba6:	ee07 3a90 	vmov	s15, r3
 800fbaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fbb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fbb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800fbba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fbbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fbc2:	ee17 2a90 	vmov	r2, s15
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	609a      	str	r2, [r3, #8]
 800fbca:	e008      	b.n	800fbde <HAL_RCCEx_GetPLL3ClockFreq+0x282>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	601a      	str	r2, [r3, #0]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	605a      	str	r2, [r3, #4]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	609a      	str	r2, [r3, #8]
 800fbde:	bf00      	nop
 800fbe0:	3724      	adds	r7, #36	@ 0x24
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop
 800fbec:	58024400 	.word	0x58024400
 800fbf0:	03d09000 	.word	0x03d09000
 800fbf4:	46000000 	.word	0x46000000
 800fbf8:	4c742400 	.word	0x4c742400
 800fbfc:	4a742400 	.word	0x4a742400
 800fc00:	4bb71b00 	.word	0x4bb71b00

0800fc04 <HAL_RCCEx_GetPLL1ClockFreq>:
 800fc04:	b480      	push	{r7}
 800fc06:	b089      	sub	sp, #36	@ 0x24
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	4ba0      	ldr	r3, [pc, #640]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc10:	f003 0303 	and.w	r3, r3, #3
 800fc14:	61bb      	str	r3, [r7, #24]
 800fc16:	4b9e      	ldr	r3, [pc, #632]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc1a:	091b      	lsrs	r3, r3, #4
 800fc1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc20:	617b      	str	r3, [r7, #20]
 800fc22:	4b9b      	ldr	r3, [pc, #620]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc26:	f003 0301 	and.w	r3, r3, #1
 800fc2a:	613b      	str	r3, [r7, #16]
 800fc2c:	4b98      	ldr	r3, [pc, #608]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc30:	08db      	lsrs	r3, r3, #3
 800fc32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc36:	693a      	ldr	r2, [r7, #16]
 800fc38:	fb02 f303 	mul.w	r3, r2, r3
 800fc3c:	ee07 3a90 	vmov	s15, r3
 800fc40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc44:	edc7 7a03 	vstr	s15, [r7, #12]
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	f000 8111 	beq.w	800fe72 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
 800fc50:	69bb      	ldr	r3, [r7, #24]
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	f000 8083 	beq.w	800fd5e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fc58:	69bb      	ldr	r3, [r7, #24]
 800fc5a:	2b02      	cmp	r3, #2
 800fc5c:	f200 80a1 	bhi.w	800fda2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d003      	beq.n	800fc6e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	2b01      	cmp	r3, #1
 800fc6a:	d056      	beq.n	800fd1a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fc6c:	e099      	b.n	800fda2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fc6e:	4b88      	ldr	r3, [pc, #544]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f003 0320 	and.w	r3, r3, #32
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d02d      	beq.n	800fcd6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
 800fc7a:	4b85      	ldr	r3, [pc, #532]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	08db      	lsrs	r3, r3, #3
 800fc80:	f003 0303 	and.w	r3, r3, #3
 800fc84:	4a83      	ldr	r2, [pc, #524]	@ (800fe94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fc86:	fa22 f303 	lsr.w	r3, r2, r3
 800fc8a:	60bb      	str	r3, [r7, #8]
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	ee07 3a90 	vmov	s15, r3
 800fc92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	ee07 3a90 	vmov	s15, r3
 800fc9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fca4:	4b7a      	ldr	r3, [pc, #488]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcac:	ee07 3a90 	vmov	s15, r3
 800fcb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fcb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800fcb8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800fe98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fcbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fcc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcd0:	edc7 7a07 	vstr	s15, [r7, #28]
 800fcd4:	e087      	b.n	800fde6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	ee07 3a90 	vmov	s15, r3
 800fcdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fce0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800fe9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fce8:	4b69      	ldr	r3, [pc, #420]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcf0:	ee07 3a90 	vmov	s15, r3
 800fcf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fcf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800fcfc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800fe98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd14:	edc7 7a07 	vstr	s15, [r7, #28]
 800fd18:	e065      	b.n	800fde6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	ee07 3a90 	vmov	s15, r3
 800fd20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd24:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800fea0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fd28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd2c:	4b58      	ldr	r3, [pc, #352]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd34:	ee07 3a90 	vmov	s15, r3
 800fd38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd40:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800fe98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd58:	edc7 7a07 	vstr	s15, [r7, #28]
 800fd5c:	e043      	b.n	800fde6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	ee07 3a90 	vmov	s15, r3
 800fd64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd68:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800fea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fd6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd70:	4b47      	ldr	r3, [pc, #284]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd78:	ee07 3a90 	vmov	s15, r3
 800fd7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd80:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd84:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800fe98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd9c:	edc7 7a07 	vstr	s15, [r7, #28]
 800fda0:	e021      	b.n	800fde6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	ee07 3a90 	vmov	s15, r3
 800fda8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800fe9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fdb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdb4:	4b36      	ldr	r3, [pc, #216]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdbc:	ee07 3a90 	vmov	s15, r3
 800fdc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdc4:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdc8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800fe98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fdcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fdd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fde0:	edc7 7a07 	vstr	s15, [r7, #28]
 800fde4:	bf00      	nop
 800fde6:	4b2a      	ldr	r3, [pc, #168]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fde8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdea:	0a5b      	lsrs	r3, r3, #9
 800fdec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fdf0:	ee07 3a90 	vmov	s15, r3
 800fdf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fdfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe00:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe0c:	ee17 2a90 	vmov	r2, s15
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	601a      	str	r2, [r3, #0]
 800fe14:	4b1e      	ldr	r3, [pc, #120]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe18:	0c1b      	lsrs	r3, r3, #16
 800fe1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe1e:	ee07 3a90 	vmov	s15, r3
 800fe22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe3a:	ee17 2a90 	vmov	r2, s15
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	605a      	str	r2, [r3, #4]
 800fe42:	4b13      	ldr	r3, [pc, #76]	@ (800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe46:	0e1b      	lsrs	r3, r3, #24
 800fe48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe4c:	ee07 3a90 	vmov	s15, r3
 800fe50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe68:	ee17 2a90 	vmov	r2, s15
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	609a      	str	r2, [r3, #8]
 800fe70:	e008      	b.n	800fe84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2200      	movs	r2, #0
 800fe76:	601a      	str	r2, [r3, #0]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	605a      	str	r2, [r3, #4]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2200      	movs	r2, #0
 800fe82:	609a      	str	r2, [r3, #8]
 800fe84:	bf00      	nop
 800fe86:	3724      	adds	r7, #36	@ 0x24
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr
 800fe90:	58024400 	.word	0x58024400
 800fe94:	03d09000 	.word	0x03d09000
 800fe98:	46000000 	.word	0x46000000
 800fe9c:	4c742400 	.word	0x4c742400
 800fea0:	4a742400 	.word	0x4a742400
 800fea4:	4bb71b00 	.word	0x4bb71b00

0800fea8 <RCCEx_PLL2_Config>:
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b084      	sub	sp, #16
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
 800feb2:	2300      	movs	r3, #0
 800feb4:	73fb      	strb	r3, [r7, #15]
 800feb6:	4b53      	ldr	r3, [pc, #332]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800feb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800feba:	f003 0303 	and.w	r3, r3, #3
 800febe:	2b03      	cmp	r3, #3
 800fec0:	d101      	bne.n	800fec6 <RCCEx_PLL2_Config+0x1e>
 800fec2:	2301      	movs	r3, #1
 800fec4:	e099      	b.n	800fffa <RCCEx_PLL2_Config+0x152>
 800fec6:	4b4f      	ldr	r3, [pc, #316]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a4e      	ldr	r2, [pc, #312]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800fecc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fed0:	6013      	str	r3, [r2, #0]
 800fed2:	f7f6 ff39 	bl	8006d48 <HAL_GetTick>
 800fed6:	60b8      	str	r0, [r7, #8]
 800fed8:	e008      	b.n	800feec <RCCEx_PLL2_Config+0x44>
 800feda:	f7f6 ff35 	bl	8006d48 <HAL_GetTick>
 800fede:	4602      	mov	r2, r0
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	1ad3      	subs	r3, r2, r3
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	d901      	bls.n	800feec <RCCEx_PLL2_Config+0x44>
 800fee8:	2303      	movs	r3, #3
 800feea:	e086      	b.n	800fffa <RCCEx_PLL2_Config+0x152>
 800feec:	4b45      	ldr	r3, [pc, #276]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1f0      	bne.n	800feda <RCCEx_PLL2_Config+0x32>
 800fef8:	4b42      	ldr	r3, [pc, #264]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800fefa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fefc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	031b      	lsls	r3, r3, #12
 800ff06:	493f      	ldr	r1, [pc, #252]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	628b      	str	r3, [r1, #40]	@ 0x28
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	3b01      	subs	r3, #1
 800ff12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	689b      	ldr	r3, [r3, #8]
 800ff1a:	3b01      	subs	r3, #1
 800ff1c:	025b      	lsls	r3, r3, #9
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	431a      	orrs	r2, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	68db      	ldr	r3, [r3, #12]
 800ff26:	3b01      	subs	r3, #1
 800ff28:	041b      	lsls	r3, r3, #16
 800ff2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ff2e:	431a      	orrs	r2, r3
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	691b      	ldr	r3, [r3, #16]
 800ff34:	3b01      	subs	r3, #1
 800ff36:	061b      	lsls	r3, r3, #24
 800ff38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ff3c:	4931      	ldr	r1, [pc, #196]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	638b      	str	r3, [r1, #56]	@ 0x38
 800ff42:	4b30      	ldr	r3, [pc, #192]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	695b      	ldr	r3, [r3, #20]
 800ff4e:	492d      	ldr	r1, [pc, #180]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff50:	4313      	orrs	r3, r2
 800ff52:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800ff54:	4b2b      	ldr	r3, [pc, #172]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff58:	f023 0220 	bic.w	r2, r3, #32
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	699b      	ldr	r3, [r3, #24]
 800ff60:	4928      	ldr	r1, [pc, #160]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff62:	4313      	orrs	r3, r2
 800ff64:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800ff66:	4b27      	ldr	r3, [pc, #156]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff6a:	4a26      	ldr	r2, [pc, #152]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff6c:	f023 0310 	bic.w	r3, r3, #16
 800ff70:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ff72:	4b24      	ldr	r3, [pc, #144]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff76:	4b24      	ldr	r3, [pc, #144]	@ (8010008 <RCCEx_PLL2_Config+0x160>)
 800ff78:	4013      	ands	r3, r2
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	69d2      	ldr	r2, [r2, #28]
 800ff7e:	00d2      	lsls	r2, r2, #3
 800ff80:	4920      	ldr	r1, [pc, #128]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff82:	4313      	orrs	r3, r2
 800ff84:	63cb      	str	r3, [r1, #60]	@ 0x3c
 800ff86:	4b1f      	ldr	r3, [pc, #124]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff8a:	4a1e      	ldr	r2, [pc, #120]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff8c:	f043 0310 	orr.w	r3, r3, #16
 800ff90:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d106      	bne.n	800ffa6 <RCCEx_PLL2_Config+0xfe>
 800ff98:	4b1a      	ldr	r3, [pc, #104]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff9c:	4a19      	ldr	r2, [pc, #100]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ff9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ffa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ffa4:	e00f      	b.n	800ffc6 <RCCEx_PLL2_Config+0x11e>
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d106      	bne.n	800ffba <RCCEx_PLL2_Config+0x112>
 800ffac:	4b15      	ldr	r3, [pc, #84]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ffae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb0:	4a14      	ldr	r2, [pc, #80]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ffb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ffb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ffb8:	e005      	b.n	800ffc6 <RCCEx_PLL2_Config+0x11e>
 800ffba:	4b12      	ldr	r3, [pc, #72]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ffbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffbe:	4a11      	ldr	r2, [pc, #68]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ffc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ffc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ffc6:	4b0f      	ldr	r3, [pc, #60]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4a0e      	ldr	r2, [pc, #56]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ffcc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ffd0:	6013      	str	r3, [r2, #0]
 800ffd2:	f7f6 feb9 	bl	8006d48 <HAL_GetTick>
 800ffd6:	60b8      	str	r0, [r7, #8]
 800ffd8:	e008      	b.n	800ffec <RCCEx_PLL2_Config+0x144>
 800ffda:	f7f6 feb5 	bl	8006d48 <HAL_GetTick>
 800ffde:	4602      	mov	r2, r0
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	1ad3      	subs	r3, r2, r3
 800ffe4:	2b02      	cmp	r3, #2
 800ffe6:	d901      	bls.n	800ffec <RCCEx_PLL2_Config+0x144>
 800ffe8:	2303      	movs	r3, #3
 800ffea:	e006      	b.n	800fffa <RCCEx_PLL2_Config+0x152>
 800ffec:	4b05      	ldr	r3, [pc, #20]	@ (8010004 <RCCEx_PLL2_Config+0x15c>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d0f0      	beq.n	800ffda <RCCEx_PLL2_Config+0x132>
 800fff8:	7bfb      	ldrb	r3, [r7, #15]
 800fffa:	4618      	mov	r0, r3
 800fffc:	3710      	adds	r7, #16
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	58024400 	.word	0x58024400
 8010008:	ffff0007 	.word	0xffff0007

0801000c <RCCEx_PLL3_Config>:
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
 8010016:	2300      	movs	r3, #0
 8010018:	73fb      	strb	r3, [r7, #15]
 801001a:	4b53      	ldr	r3, [pc, #332]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 801001c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801001e:	f003 0303 	and.w	r3, r3, #3
 8010022:	2b03      	cmp	r3, #3
 8010024:	d101      	bne.n	801002a <RCCEx_PLL3_Config+0x1e>
 8010026:	2301      	movs	r3, #1
 8010028:	e099      	b.n	801015e <RCCEx_PLL3_Config+0x152>
 801002a:	4b4f      	ldr	r3, [pc, #316]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	4a4e      	ldr	r2, [pc, #312]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 8010030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010034:	6013      	str	r3, [r2, #0]
 8010036:	f7f6 fe87 	bl	8006d48 <HAL_GetTick>
 801003a:	60b8      	str	r0, [r7, #8]
 801003c:	e008      	b.n	8010050 <RCCEx_PLL3_Config+0x44>
 801003e:	f7f6 fe83 	bl	8006d48 <HAL_GetTick>
 8010042:	4602      	mov	r2, r0
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	1ad3      	subs	r3, r2, r3
 8010048:	2b02      	cmp	r3, #2
 801004a:	d901      	bls.n	8010050 <RCCEx_PLL3_Config+0x44>
 801004c:	2303      	movs	r3, #3
 801004e:	e086      	b.n	801015e <RCCEx_PLL3_Config+0x152>
 8010050:	4b45      	ldr	r3, [pc, #276]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1f0      	bne.n	801003e <RCCEx_PLL3_Config+0x32>
 801005c:	4b42      	ldr	r3, [pc, #264]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 801005e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010060:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	051b      	lsls	r3, r3, #20
 801006a:	493f      	ldr	r1, [pc, #252]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 801006c:	4313      	orrs	r3, r2
 801006e:	628b      	str	r3, [r1, #40]	@ 0x28
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	3b01      	subs	r3, #1
 8010076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	689b      	ldr	r3, [r3, #8]
 801007e:	3b01      	subs	r3, #1
 8010080:	025b      	lsls	r3, r3, #9
 8010082:	b29b      	uxth	r3, r3
 8010084:	431a      	orrs	r2, r3
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	68db      	ldr	r3, [r3, #12]
 801008a:	3b01      	subs	r3, #1
 801008c:	041b      	lsls	r3, r3, #16
 801008e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010092:	431a      	orrs	r2, r3
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	691b      	ldr	r3, [r3, #16]
 8010098:	3b01      	subs	r3, #1
 801009a:	061b      	lsls	r3, r3, #24
 801009c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80100a0:	4931      	ldr	r1, [pc, #196]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 80100a2:	4313      	orrs	r3, r2
 80100a4:	640b      	str	r3, [r1, #64]	@ 0x40
 80100a6:	4b30      	ldr	r3, [pc, #192]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 80100a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	695b      	ldr	r3, [r3, #20]
 80100b2:	492d      	ldr	r1, [pc, #180]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 80100b4:	4313      	orrs	r3, r2
 80100b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80100b8:	4b2b      	ldr	r3, [pc, #172]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 80100ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	699b      	ldr	r3, [r3, #24]
 80100c4:	4928      	ldr	r1, [pc, #160]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 80100c6:	4313      	orrs	r3, r2
 80100c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80100ca:	4b27      	ldr	r3, [pc, #156]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 80100cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100ce:	4a26      	ldr	r2, [pc, #152]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 80100d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80100d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80100d6:	4b24      	ldr	r3, [pc, #144]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 80100d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80100da:	4b24      	ldr	r3, [pc, #144]	@ (801016c <RCCEx_PLL3_Config+0x160>)
 80100dc:	4013      	ands	r3, r2
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	69d2      	ldr	r2, [r2, #28]
 80100e2:	00d2      	lsls	r2, r2, #3
 80100e4:	4920      	ldr	r1, [pc, #128]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 80100e6:	4313      	orrs	r3, r2
 80100e8:	644b      	str	r3, [r1, #68]	@ 0x44
 80100ea:	4b1f      	ldr	r3, [pc, #124]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 80100ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100ee:	4a1e      	ldr	r2, [pc, #120]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 80100f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80100f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d106      	bne.n	801010a <RCCEx_PLL3_Config+0xfe>
 80100fc:	4b1a      	ldr	r3, [pc, #104]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 80100fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010100:	4a19      	ldr	r2, [pc, #100]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 8010102:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8010106:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010108:	e00f      	b.n	801012a <RCCEx_PLL3_Config+0x11e>
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	2b01      	cmp	r3, #1
 801010e:	d106      	bne.n	801011e <RCCEx_PLL3_Config+0x112>
 8010110:	4b15      	ldr	r3, [pc, #84]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 8010112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010114:	4a14      	ldr	r2, [pc, #80]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 8010116:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801011a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801011c:	e005      	b.n	801012a <RCCEx_PLL3_Config+0x11e>
 801011e:	4b12      	ldr	r3, [pc, #72]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 8010120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010122:	4a11      	ldr	r2, [pc, #68]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 8010124:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010128:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801012a:	4b0f      	ldr	r3, [pc, #60]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4a0e      	ldr	r2, [pc, #56]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 8010130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010134:	6013      	str	r3, [r2, #0]
 8010136:	f7f6 fe07 	bl	8006d48 <HAL_GetTick>
 801013a:	60b8      	str	r0, [r7, #8]
 801013c:	e008      	b.n	8010150 <RCCEx_PLL3_Config+0x144>
 801013e:	f7f6 fe03 	bl	8006d48 <HAL_GetTick>
 8010142:	4602      	mov	r2, r0
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	1ad3      	subs	r3, r2, r3
 8010148:	2b02      	cmp	r3, #2
 801014a:	d901      	bls.n	8010150 <RCCEx_PLL3_Config+0x144>
 801014c:	2303      	movs	r3, #3
 801014e:	e006      	b.n	801015e <RCCEx_PLL3_Config+0x152>
 8010150:	4b05      	ldr	r3, [pc, #20]	@ (8010168 <RCCEx_PLL3_Config+0x15c>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010158:	2b00      	cmp	r3, #0
 801015a:	d0f0      	beq.n	801013e <RCCEx_PLL3_Config+0x132>
 801015c:	7bfb      	ldrb	r3, [r7, #15]
 801015e:	4618      	mov	r0, r3
 8010160:	3710      	adds	r7, #16
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	58024400 	.word	0x58024400
 801016c:	ffff0007 	.word	0xffff0007

08010170 <HAL_SPI_Init>:
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d101      	bne.n	8010182 <HAL_SPI_Init+0x12>
 801017e:	2301      	movs	r3, #1
 8010180:	e10f      	b.n	80103a2 <HAL_SPI_Init+0x232>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2200      	movs	r2, #0
 8010186:	629a      	str	r2, [r3, #40]	@ 0x28
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4a87      	ldr	r2, [pc, #540]	@ (80103ac <HAL_SPI_Init+0x23c>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d00f      	beq.n	80101b2 <HAL_SPI_Init+0x42>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4a86      	ldr	r2, [pc, #536]	@ (80103b0 <HAL_SPI_Init+0x240>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d00a      	beq.n	80101b2 <HAL_SPI_Init+0x42>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	4a84      	ldr	r2, [pc, #528]	@ (80103b4 <HAL_SPI_Init+0x244>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d005      	beq.n	80101b2 <HAL_SPI_Init+0x42>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	2b0f      	cmp	r3, #15
 80101ac:	d901      	bls.n	80101b2 <HAL_SPI_Init+0x42>
 80101ae:	2301      	movs	r3, #1
 80101b0:	e0f7      	b.n	80103a2 <HAL_SPI_Init+0x232>
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 fef6 	bl	8010fa4 <SPI_GetPacketSize>
 80101b8:	60f8      	str	r0, [r7, #12]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	4a7b      	ldr	r2, [pc, #492]	@ (80103ac <HAL_SPI_Init+0x23c>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d00c      	beq.n	80101de <HAL_SPI_Init+0x6e>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	4a79      	ldr	r2, [pc, #484]	@ (80103b0 <HAL_SPI_Init+0x240>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d007      	beq.n	80101de <HAL_SPI_Init+0x6e>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	4a78      	ldr	r2, [pc, #480]	@ (80103b4 <HAL_SPI_Init+0x244>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d002      	beq.n	80101de <HAL_SPI_Init+0x6e>
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2b08      	cmp	r3, #8
 80101dc:	d811      	bhi.n	8010202 <HAL_SPI_Init+0x92>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	4a72      	ldr	r2, [pc, #456]	@ (80103ac <HAL_SPI_Init+0x23c>)
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d009      	beq.n	80101fc <HAL_SPI_Init+0x8c>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	4a70      	ldr	r2, [pc, #448]	@ (80103b0 <HAL_SPI_Init+0x240>)
 80101ee:	4293      	cmp	r3, r2
 80101f0:	d004      	beq.n	80101fc <HAL_SPI_Init+0x8c>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	4a6f      	ldr	r2, [pc, #444]	@ (80103b4 <HAL_SPI_Init+0x244>)
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d104      	bne.n	8010206 <HAL_SPI_Init+0x96>
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2b10      	cmp	r3, #16
 8010200:	d901      	bls.n	8010206 <HAL_SPI_Init+0x96>
 8010202:	2301      	movs	r3, #1
 8010204:	e0cd      	b.n	80103a2 <HAL_SPI_Init+0x232>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801020c:	b2db      	uxtb	r3, r3
 801020e:	2b00      	cmp	r3, #0
 8010210:	d106      	bne.n	8010220 <HAL_SPI_Init+0xb0>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2200      	movs	r2, #0
 8010216:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f7f2 f9ec 	bl	80025f8 <HAL_SPI_MspInit>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2202      	movs	r2, #2
 8010224:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f022 0201 	bic.w	r2, r2, #1
 8010236:	601a      	str	r2, [r3, #0]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	689b      	ldr	r3, [r3, #8]
 801023e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8010242:	60bb      	str	r3, [r7, #8]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	699b      	ldr	r3, [r3, #24]
 8010248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801024c:	d119      	bne.n	8010282 <HAL_SPI_Init+0x112>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010256:	d103      	bne.n	8010260 <HAL_SPI_Init+0xf0>
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801025c:	2b00      	cmp	r3, #0
 801025e:	d008      	beq.n	8010272 <HAL_SPI_Init+0x102>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d10c      	bne.n	8010282 <HAL_SPI_Init+0x112>
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801026c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010270:	d107      	bne.n	8010282 <HAL_SPI_Init+0x112>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010280:	601a      	str	r2, [r3, #0]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00f      	beq.n	80102ae <HAL_SPI_Init+0x13e>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	68db      	ldr	r3, [r3, #12]
 8010292:	2b06      	cmp	r3, #6
 8010294:	d90b      	bls.n	80102ae <HAL_SPI_Init+0x13e>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	430a      	orrs	r2, r1
 80102aa:	601a      	str	r2, [r3, #0]
 80102ac:	e007      	b.n	80102be <HAL_SPI_Init+0x14e>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80102bc:	601a      	str	r2, [r3, #0]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	69da      	ldr	r2, [r3, #28]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102c6:	431a      	orrs	r2, r3
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	431a      	orrs	r2, r3
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102d0:	ea42 0103 	orr.w	r1, r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	68da      	ldr	r2, [r3, #12]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	430a      	orrs	r2, r1
 80102de:	609a      	str	r2, [r3, #8]
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102e8:	431a      	orrs	r2, r3
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102ee:	431a      	orrs	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	699b      	ldr	r3, [r3, #24]
 80102f4:	431a      	orrs	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	691b      	ldr	r3, [r3, #16]
 80102fa:	431a      	orrs	r2, r3
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	695b      	ldr	r3, [r3, #20]
 8010300:	431a      	orrs	r2, r3
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6a1b      	ldr	r3, [r3, #32]
 8010306:	431a      	orrs	r2, r3
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	431a      	orrs	r2, r3
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010312:	431a      	orrs	r2, r3
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	689b      	ldr	r3, [r3, #8]
 8010318:	431a      	orrs	r2, r3
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801031e:	ea42 0103 	orr.w	r1, r2, r3
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	430a      	orrs	r2, r1
 801032c:	60da      	str	r2, [r3, #12]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d113      	bne.n	801035e <HAL_SPI_Init+0x1ee>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	689b      	ldr	r3, [r3, #8]
 801033c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010348:	609a      	str	r2, [r3, #8]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	689b      	ldr	r3, [r3, #8]
 8010350:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801035c:	609a      	str	r2, [r3, #8]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f022 0201 	bic.w	r2, r2, #1
 801036c:	651a      	str	r2, [r3, #80]	@ 0x50
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010376:	2b00      	cmp	r3, #0
 8010378:	d00a      	beq.n	8010390 <HAL_SPI_Init+0x220>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	430a      	orrs	r2, r1
 801038e:	60da      	str	r2, [r3, #12]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2200      	movs	r2, #0
 8010394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2201      	movs	r2, #1
 801039c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80103a0:	2300      	movs	r3, #0
 80103a2:	4618      	mov	r0, r3
 80103a4:	3710      	adds	r7, #16
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	40013000 	.word	0x40013000
 80103b0:	40003800 	.word	0x40003800
 80103b4:	40003c00 	.word	0x40003c00

080103b8 <HAL_SPI_Transmit>:
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b088      	sub	sp, #32
 80103bc:	af02      	add	r7, sp, #8
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	603b      	str	r3, [r7, #0]
 80103c4:	4613      	mov	r3, r2
 80103c6:	80fb      	strh	r3, [r7, #6]
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	3320      	adds	r3, #32
 80103ce:	617b      	str	r3, [r7, #20]
 80103d0:	f7f6 fcba 	bl	8006d48 <HAL_GetTick>
 80103d4:	6138      	str	r0, [r7, #16]
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d001      	beq.n	80103e6 <HAL_SPI_Transmit+0x2e>
 80103e2:	2302      	movs	r3, #2
 80103e4:	e1d1      	b.n	801078a <HAL_SPI_Transmit+0x3d2>
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d002      	beq.n	80103f2 <HAL_SPI_Transmit+0x3a>
 80103ec:	88fb      	ldrh	r3, [r7, #6]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d101      	bne.n	80103f6 <HAL_SPI_Transmit+0x3e>
 80103f2:	2301      	movs	r3, #1
 80103f4:	e1c9      	b.n	801078a <HAL_SPI_Transmit+0x3d2>
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	d101      	bne.n	8010404 <HAL_SPI_Transmit+0x4c>
 8010400:	2302      	movs	r3, #2
 8010402:	e1c2      	b.n	801078a <HAL_SPI_Transmit+0x3d2>
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2201      	movs	r2, #1
 8010408:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2203      	movs	r2, #3
 8010410:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2200      	movs	r2, #0
 8010418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	68ba      	ldr	r2, [r7, #8]
 8010420:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	88fa      	ldrh	r2, [r7, #6]
 8010426:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	88fa      	ldrh	r2, [r7, #6]
 801042e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	2200      	movs	r2, #0
 8010436:	665a      	str	r2, [r3, #100]	@ 0x64
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2200      	movs	r2, #0
 801043c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2200      	movs	r2, #0
 8010444:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2200      	movs	r2, #0
 801044c:	675a      	str	r2, [r3, #116]	@ 0x74
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2200      	movs	r2, #0
 8010452:	671a      	str	r2, [r3, #112]	@ 0x70
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	689b      	ldr	r3, [r3, #8]
 8010458:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801045c:	d108      	bne.n	8010470 <HAL_SPI_Transmit+0xb8>
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	681a      	ldr	r2, [r3, #0]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801046c:	601a      	str	r2, [r3, #0]
 801046e:	e009      	b.n	8010484 <HAL_SPI_Transmit+0xcc>
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	68db      	ldr	r3, [r3, #12]
 8010476:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010482:	60da      	str	r2, [r3, #12]
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	685a      	ldr	r2, [r3, #4]
 801048a:	4b96      	ldr	r3, [pc, #600]	@ (80106e4 <HAL_SPI_Transmit+0x32c>)
 801048c:	4013      	ands	r3, r2
 801048e:	88f9      	ldrh	r1, [r7, #6]
 8010490:	68fa      	ldr	r2, [r7, #12]
 8010492:	6812      	ldr	r2, [r2, #0]
 8010494:	430b      	orrs	r3, r1
 8010496:	6053      	str	r3, [r2, #4]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f042 0201 	orr.w	r2, r2, #1
 80104a6:	601a      	str	r2, [r3, #0]
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80104b0:	d107      	bne.n	80104c2 <HAL_SPI_Transmit+0x10a>
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80104c0:	601a      	str	r2, [r3, #0]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	2b0f      	cmp	r3, #15
 80104c8:	d947      	bls.n	801055a <HAL_SPI_Transmit+0x1a2>
 80104ca:	e03f      	b.n	801054c <HAL_SPI_Transmit+0x194>
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	695b      	ldr	r3, [r3, #20]
 80104d2:	f003 0302 	and.w	r3, r3, #2
 80104d6:	2b02      	cmp	r3, #2
 80104d8:	d114      	bne.n	8010504 <HAL_SPI_Transmit+0x14c>
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	6812      	ldr	r2, [r2, #0]
 80104e4:	621a      	str	r2, [r3, #32]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80104ea:	1d1a      	adds	r2, r3, #4
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	3b01      	subs	r3, #1
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010502:	e023      	b.n	801054c <HAL_SPI_Transmit+0x194>
 8010504:	f7f6 fc20 	bl	8006d48 <HAL_GetTick>
 8010508:	4602      	mov	r2, r0
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	1ad3      	subs	r3, r2, r3
 801050e:	683a      	ldr	r2, [r7, #0]
 8010510:	429a      	cmp	r2, r3
 8010512:	d803      	bhi.n	801051c <HAL_SPI_Transmit+0x164>
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801051a:	d102      	bne.n	8010522 <HAL_SPI_Transmit+0x16a>
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d114      	bne.n	801054c <HAL_SPI_Transmit+0x194>
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	f000 fc70 	bl	8010e08 <SPI_CloseTransfer>
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801052e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2201      	movs	r2, #1
 801053c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2200      	movs	r2, #0
 8010544:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8010548:	2303      	movs	r3, #3
 801054a:	e11e      	b.n	801078a <HAL_SPI_Transmit+0x3d2>
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010552:	b29b      	uxth	r3, r3
 8010554:	2b00      	cmp	r3, #0
 8010556:	d1b9      	bne.n	80104cc <HAL_SPI_Transmit+0x114>
 8010558:	e0f1      	b.n	801073e <HAL_SPI_Transmit+0x386>
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	68db      	ldr	r3, [r3, #12]
 801055e:	2b07      	cmp	r3, #7
 8010560:	f240 80e6 	bls.w	8010730 <HAL_SPI_Transmit+0x378>
 8010564:	e05d      	b.n	8010622 <HAL_SPI_Transmit+0x26a>
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	695b      	ldr	r3, [r3, #20]
 801056c:	f003 0302 	and.w	r3, r3, #2
 8010570:	2b02      	cmp	r3, #2
 8010572:	d132      	bne.n	80105da <HAL_SPI_Transmit+0x222>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801057a:	b29b      	uxth	r3, r3
 801057c:	2b01      	cmp	r3, #1
 801057e:	d918      	bls.n	80105b2 <HAL_SPI_Transmit+0x1fa>
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010584:	2b00      	cmp	r3, #0
 8010586:	d014      	beq.n	80105b2 <HAL_SPI_Transmit+0x1fa>
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	6812      	ldr	r2, [r2, #0]
 8010592:	621a      	str	r2, [r3, #32]
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010598:	1d1a      	adds	r2, r3, #4
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	65da      	str	r2, [r3, #92]	@ 0x5c
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	3b02      	subs	r3, #2
 80105a8:	b29a      	uxth	r2, r3
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80105b0:	e037      	b.n	8010622 <HAL_SPI_Transmit+0x26a>
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80105b6:	881a      	ldrh	r2, [r3, #0]
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	801a      	strh	r2, [r3, #0]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80105c0:	1c9a      	adds	r2, r3, #2
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	3b01      	subs	r3, #1
 80105d0:	b29a      	uxth	r2, r3
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80105d8:	e023      	b.n	8010622 <HAL_SPI_Transmit+0x26a>
 80105da:	f7f6 fbb5 	bl	8006d48 <HAL_GetTick>
 80105de:	4602      	mov	r2, r0
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	1ad3      	subs	r3, r2, r3
 80105e4:	683a      	ldr	r2, [r7, #0]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d803      	bhi.n	80105f2 <HAL_SPI_Transmit+0x23a>
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f0:	d102      	bne.n	80105f8 <HAL_SPI_Transmit+0x240>
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d114      	bne.n	8010622 <HAL_SPI_Transmit+0x26a>
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	f000 fc05 	bl	8010e08 <SPI_CloseTransfer>
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010604:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2201      	movs	r2, #1
 8010612:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	2200      	movs	r2, #0
 801061a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801061e:	2303      	movs	r3, #3
 8010620:	e0b3      	b.n	801078a <HAL_SPI_Transmit+0x3d2>
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010628:	b29b      	uxth	r3, r3
 801062a:	2b00      	cmp	r3, #0
 801062c:	d19b      	bne.n	8010566 <HAL_SPI_Transmit+0x1ae>
 801062e:	e086      	b.n	801073e <HAL_SPI_Transmit+0x386>
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	695b      	ldr	r3, [r3, #20]
 8010636:	f003 0302 	and.w	r3, r3, #2
 801063a:	2b02      	cmp	r3, #2
 801063c:	d154      	bne.n	80106e8 <HAL_SPI_Transmit+0x330>
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010644:	b29b      	uxth	r3, r3
 8010646:	2b03      	cmp	r3, #3
 8010648:	d918      	bls.n	801067c <HAL_SPI_Transmit+0x2c4>
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801064e:	2b40      	cmp	r3, #64	@ 0x40
 8010650:	d914      	bls.n	801067c <HAL_SPI_Transmit+0x2c4>
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	6812      	ldr	r2, [r2, #0]
 801065c:	621a      	str	r2, [r3, #32]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010662:	1d1a      	adds	r2, r3, #4
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801066e:	b29b      	uxth	r3, r3
 8010670:	3b04      	subs	r3, #4
 8010672:	b29a      	uxth	r2, r3
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801067a:	e059      	b.n	8010730 <HAL_SPI_Transmit+0x378>
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010682:	b29b      	uxth	r3, r3
 8010684:	2b01      	cmp	r3, #1
 8010686:	d917      	bls.n	80106b8 <HAL_SPI_Transmit+0x300>
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801068c:	2b00      	cmp	r3, #0
 801068e:	d013      	beq.n	80106b8 <HAL_SPI_Transmit+0x300>
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010694:	881a      	ldrh	r2, [r3, #0]
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	801a      	strh	r2, [r3, #0]
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801069e:	1c9a      	adds	r2, r3, #2
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	3b02      	subs	r3, #2
 80106ae:	b29a      	uxth	r2, r3
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80106b6:	e03b      	b.n	8010730 <HAL_SPI_Transmit+0x378>
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	3320      	adds	r3, #32
 80106c2:	7812      	ldrb	r2, [r2, #0]
 80106c4:	701a      	strb	r2, [r3, #0]
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80106ca:	1c5a      	adds	r2, r3, #1
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	3b01      	subs	r3, #1
 80106da:	b29a      	uxth	r2, r3
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80106e2:	e025      	b.n	8010730 <HAL_SPI_Transmit+0x378>
 80106e4:	ffff0000 	.word	0xffff0000
 80106e8:	f7f6 fb2e 	bl	8006d48 <HAL_GetTick>
 80106ec:	4602      	mov	r2, r0
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	683a      	ldr	r2, [r7, #0]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d803      	bhi.n	8010700 <HAL_SPI_Transmit+0x348>
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106fe:	d102      	bne.n	8010706 <HAL_SPI_Transmit+0x34e>
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d114      	bne.n	8010730 <HAL_SPI_Transmit+0x378>
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f000 fb7e 	bl	8010e08 <SPI_CloseTransfer>
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010712:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2201      	movs	r2, #1
 8010720:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	2200      	movs	r2, #0
 8010728:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801072c:	2303      	movs	r3, #3
 801072e:	e02c      	b.n	801078a <HAL_SPI_Transmit+0x3d2>
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010736:	b29b      	uxth	r3, r3
 8010738:	2b00      	cmp	r3, #0
 801073a:	f47f af79 	bne.w	8010630 <HAL_SPI_Transmit+0x278>
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	9300      	str	r3, [sp, #0]
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	2200      	movs	r2, #0
 8010746:	2108      	movs	r1, #8
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	f000 fbfd 	bl	8010f48 <SPI_WaitOnFlagUntilTimeout>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	d007      	beq.n	8010764 <HAL_SPI_Transmit+0x3ac>
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801075a:	f043 0220 	orr.w	r2, r3, #32
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010764:	68f8      	ldr	r0, [r7, #12]
 8010766:	f000 fb4f 	bl	8010e08 <SPI_CloseTransfer>
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2201      	movs	r2, #1
 801076e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2200      	movs	r2, #0
 8010776:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010780:	2b00      	cmp	r3, #0
 8010782:	d001      	beq.n	8010788 <HAL_SPI_Transmit+0x3d0>
 8010784:	2301      	movs	r3, #1
 8010786:	e000      	b.n	801078a <HAL_SPI_Transmit+0x3d2>
 8010788:	2300      	movs	r3, #0
 801078a:	4618      	mov	r0, r3
 801078c:	3718      	adds	r7, #24
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop

08010794 <HAL_SPI_TransmitReceive>:
 8010794:	b580      	push	{r7, lr}
 8010796:	b08e      	sub	sp, #56	@ 0x38
 8010798:	af02      	add	r7, sp, #8
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	607a      	str	r2, [r7, #4]
 80107a0:	807b      	strh	r3, [r7, #2]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	3320      	adds	r3, #32
 80107a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	3330      	adds	r3, #48	@ 0x30
 80107b0:	623b      	str	r3, [r7, #32]
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107b6:	095b      	lsrs	r3, r3, #5
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	3301      	adds	r3, #1
 80107bc:	83fb      	strh	r3, [r7, #30]
 80107be:	f7f6 fac3 	bl	8006d48 <HAL_GetTick>
 80107c2:	61b8      	str	r0, [r7, #24]
 80107c4:	887b      	ldrh	r3, [r7, #2]
 80107c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80107c8:	887b      	ldrh	r3, [r7, #2]
 80107ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d001      	beq.n	80107dc <HAL_SPI_TransmitReceive+0x48>
 80107d8:	2302      	movs	r3, #2
 80107da:	e310      	b.n	8010dfe <HAL_SPI_TransmitReceive+0x66a>
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d005      	beq.n	80107ee <HAL_SPI_TransmitReceive+0x5a>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d002      	beq.n	80107ee <HAL_SPI_TransmitReceive+0x5a>
 80107e8:	887b      	ldrh	r3, [r7, #2]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d101      	bne.n	80107f2 <HAL_SPI_TransmitReceive+0x5e>
 80107ee:	2301      	movs	r3, #1
 80107f0:	e305      	b.n	8010dfe <HAL_SPI_TransmitReceive+0x66a>
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d101      	bne.n	8010800 <HAL_SPI_TransmitReceive+0x6c>
 80107fc:	2302      	movs	r3, #2
 80107fe:	e2fe      	b.n	8010dfe <HAL_SPI_TransmitReceive+0x66a>
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2201      	movs	r2, #1
 8010804:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	2205      	movs	r2, #5
 801080c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2200      	movs	r2, #0
 8010814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	687a      	ldr	r2, [r7, #4]
 801081c:	665a      	str	r2, [r3, #100]	@ 0x64
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	887a      	ldrh	r2, [r7, #2]
 8010822:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	887a      	ldrh	r2, [r7, #2]
 801082a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	68ba      	ldr	r2, [r7, #8]
 8010832:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	887a      	ldrh	r2, [r7, #2]
 8010838:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	887a      	ldrh	r2, [r7, #2]
 8010840:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	2200      	movs	r2, #0
 8010848:	671a      	str	r2, [r3, #112]	@ 0x70
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	2200      	movs	r2, #0
 801084e:	675a      	str	r2, [r3, #116]	@ 0x74
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	68da      	ldr	r2, [r3, #12]
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 801085e:	60da      	str	r2, [r3, #12]
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4a70      	ldr	r2, [pc, #448]	@ (8010a28 <HAL_SPI_TransmitReceive+0x294>)
 8010866:	4293      	cmp	r3, r2
 8010868:	d009      	beq.n	801087e <HAL_SPI_TransmitReceive+0xea>
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	4a6f      	ldr	r2, [pc, #444]	@ (8010a2c <HAL_SPI_TransmitReceive+0x298>)
 8010870:	4293      	cmp	r3, r2
 8010872:	d004      	beq.n	801087e <HAL_SPI_TransmitReceive+0xea>
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4a6d      	ldr	r2, [pc, #436]	@ (8010a30 <HAL_SPI_TransmitReceive+0x29c>)
 801087a:	4293      	cmp	r3, r2
 801087c:	d102      	bne.n	8010884 <HAL_SPI_TransmitReceive+0xf0>
 801087e:	2310      	movs	r3, #16
 8010880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010882:	e001      	b.n	8010888 <HAL_SPI_TransmitReceive+0xf4>
 8010884:	2308      	movs	r3, #8
 8010886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	685a      	ldr	r2, [r3, #4]
 801088e:	4b69      	ldr	r3, [pc, #420]	@ (8010a34 <HAL_SPI_TransmitReceive+0x2a0>)
 8010890:	4013      	ands	r3, r2
 8010892:	8879      	ldrh	r1, [r7, #2]
 8010894:	68fa      	ldr	r2, [r7, #12]
 8010896:	6812      	ldr	r2, [r2, #0]
 8010898:	430b      	orrs	r3, r1
 801089a:	6053      	str	r3, [r2, #4]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f042 0201 	orr.w	r2, r2, #1
 80108aa:	601a      	str	r2, [r3, #0]
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80108b4:	d107      	bne.n	80108c6 <HAL_SPI_TransmitReceive+0x132>
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	681a      	ldr	r2, [r3, #0]
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80108c4:	601a      	str	r2, [r3, #0]
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	68db      	ldr	r3, [r3, #12]
 80108ca:	2b0f      	cmp	r3, #15
 80108cc:	f240 80a2 	bls.w	8010a14 <HAL_SPI_TransmitReceive+0x280>
 80108d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d2:	089b      	lsrs	r3, r3, #2
 80108d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80108d6:	e094      	b.n	8010a02 <HAL_SPI_TransmitReceive+0x26e>
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	695b      	ldr	r3, [r3, #20]
 80108de:	f003 0302 	and.w	r3, r3, #2
 80108e2:	2b02      	cmp	r3, #2
 80108e4:	d120      	bne.n	8010928 <HAL_SPI_TransmitReceive+0x194>
 80108e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d01d      	beq.n	8010928 <HAL_SPI_TransmitReceive+0x194>
 80108ec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80108ee:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80108f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f2:	440b      	add	r3, r1
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d217      	bcs.n	8010928 <HAL_SPI_TransmitReceive+0x194>
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	6812      	ldr	r2, [r2, #0]
 8010902:	621a      	str	r2, [r3, #32]
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010908:	1d1a      	adds	r2, r3, #4
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	65da      	str	r2, [r3, #92]	@ 0x5c
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010914:	b29b      	uxth	r3, r3
 8010916:	3b01      	subs	r3, #1
 8010918:	b29a      	uxth	r2, r3
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010926:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	695b      	ldr	r3, [r3, #20]
 801092e:	617b      	str	r3, [r7, #20]
 8010930:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010932:	2b00      	cmp	r3, #0
 8010934:	d065      	beq.n	8010a02 <HAL_SPI_TransmitReceive+0x26e>
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	695b      	ldr	r3, [r3, #20]
 801093c:	f003 0301 	and.w	r3, r3, #1
 8010940:	2b01      	cmp	r3, #1
 8010942:	d118      	bne.n	8010976 <HAL_SPI_TransmitReceive+0x1e2>
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	681a      	ldr	r2, [r3, #0]
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801094c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801094e:	601a      	str	r2, [r3, #0]
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010954:	1d1a      	adds	r2, r3, #4
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	665a      	str	r2, [r3, #100]	@ 0x64
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010960:	b29b      	uxth	r3, r3
 8010962:	3b01      	subs	r3, #1
 8010964:	b29a      	uxth	r2, r3
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010972:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010974:	e045      	b.n	8010a02 <HAL_SPI_TransmitReceive+0x26e>
 8010976:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010978:	8bfb      	ldrh	r3, [r7, #30]
 801097a:	429a      	cmp	r2, r3
 801097c:	d21d      	bcs.n	80109ba <HAL_SPI_TransmitReceive+0x226>
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010984:	2b00      	cmp	r3, #0
 8010986:	d018      	beq.n	80109ba <HAL_SPI_TransmitReceive+0x226>
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010990:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010992:	601a      	str	r2, [r3, #0]
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010998:	1d1a      	adds	r2, r3, #4
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	665a      	str	r2, [r3, #100]	@ 0x64
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80109a4:	b29b      	uxth	r3, r3
 80109a6:	3b01      	subs	r3, #1
 80109a8:	b29a      	uxth	r2, r3
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80109b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80109b8:	e023      	b.n	8010a02 <HAL_SPI_TransmitReceive+0x26e>
 80109ba:	f7f6 f9c5 	bl	8006d48 <HAL_GetTick>
 80109be:	4602      	mov	r2, r0
 80109c0:	69bb      	ldr	r3, [r7, #24]
 80109c2:	1ad3      	subs	r3, r2, r3
 80109c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d803      	bhi.n	80109d2 <HAL_SPI_TransmitReceive+0x23e>
 80109ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109d0:	d102      	bne.n	80109d8 <HAL_SPI_TransmitReceive+0x244>
 80109d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d114      	bne.n	8010a02 <HAL_SPI_TransmitReceive+0x26e>
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	f000 fa15 	bl	8010e08 <SPI_CloseTransfer>
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2201      	movs	r2, #1
 80109f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2200      	movs	r2, #0
 80109fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80109fe:	2303      	movs	r3, #3
 8010a00:	e1fd      	b.n	8010dfe <HAL_SPI_TransmitReceive+0x66a>
 8010a02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f47f af67 	bne.w	80108d8 <HAL_SPI_TransmitReceive+0x144>
 8010a0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f47f af63 	bne.w	80108d8 <HAL_SPI_TransmitReceive+0x144>
 8010a12:	e1ce      	b.n	8010db2 <HAL_SPI_TransmitReceive+0x61e>
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	68db      	ldr	r3, [r3, #12]
 8010a18:	2b07      	cmp	r3, #7
 8010a1a:	f240 81c2 	bls.w	8010da2 <HAL_SPI_TransmitReceive+0x60e>
 8010a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a20:	085b      	lsrs	r3, r3, #1
 8010a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010a24:	e0c9      	b.n	8010bba <HAL_SPI_TransmitReceive+0x426>
 8010a26:	bf00      	nop
 8010a28:	40013000 	.word	0x40013000
 8010a2c:	40003800 	.word	0x40003800
 8010a30:	40003c00 	.word	0x40003c00
 8010a34:	ffff0000 	.word	0xffff0000
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	695b      	ldr	r3, [r3, #20]
 8010a3e:	f003 0302 	and.w	r3, r3, #2
 8010a42:	2b02      	cmp	r3, #2
 8010a44:	d11f      	bne.n	8010a86 <HAL_SPI_TransmitReceive+0x2f2>
 8010a46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d01c      	beq.n	8010a86 <HAL_SPI_TransmitReceive+0x2f2>
 8010a4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010a4e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8010a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a52:	440b      	add	r3, r1
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d216      	bcs.n	8010a86 <HAL_SPI_TransmitReceive+0x2f2>
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a5c:	881a      	ldrh	r2, [r3, #0]
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a60:	801a      	strh	r2, [r3, #0]
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a66:	1c9a      	adds	r2, r3, #2
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010a72:	b29b      	uxth	r3, r3
 8010a74:	3b01      	subs	r3, #1
 8010a76:	b29a      	uxth	r2, r3
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010a84:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	695b      	ldr	r3, [r3, #20]
 8010a8c:	617b      	str	r3, [r7, #20]
 8010a8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	f000 8092 	beq.w	8010bba <HAL_SPI_TransmitReceive+0x426>
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	695b      	ldr	r3, [r3, #20]
 8010a9c:	f003 0301 	and.w	r3, r3, #1
 8010aa0:	2b01      	cmp	r3, #1
 8010aa2:	d118      	bne.n	8010ad6 <HAL_SPI_TransmitReceive+0x342>
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010aa8:	6a3a      	ldr	r2, [r7, #32]
 8010aaa:	8812      	ldrh	r2, [r2, #0]
 8010aac:	b292      	uxth	r2, r2
 8010aae:	801a      	strh	r2, [r3, #0]
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ab4:	1c9a      	adds	r2, r3, #2
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	665a      	str	r2, [r3, #100]	@ 0x64
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	3b01      	subs	r3, #1
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010ad2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010ad4:	e071      	b.n	8010bba <HAL_SPI_TransmitReceive+0x426>
 8010ad6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010ad8:	8bfb      	ldrh	r3, [r7, #30]
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d228      	bcs.n	8010b30 <HAL_SPI_TransmitReceive+0x39c>
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d023      	beq.n	8010b30 <HAL_SPI_TransmitReceive+0x39c>
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010aec:	6a3a      	ldr	r2, [r7, #32]
 8010aee:	8812      	ldrh	r2, [r2, #0]
 8010af0:	b292      	uxth	r2, r2
 8010af2:	801a      	strh	r2, [r3, #0]
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010af8:	1c9a      	adds	r2, r3, #2
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	665a      	str	r2, [r3, #100]	@ 0x64
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b02:	6a3a      	ldr	r2, [r7, #32]
 8010b04:	8812      	ldrh	r2, [r2, #0]
 8010b06:	b292      	uxth	r2, r2
 8010b08:	801a      	strh	r2, [r3, #0]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b0e:	1c9a      	adds	r2, r3, #2
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	665a      	str	r2, [r3, #100]	@ 0x64
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	3b02      	subs	r3, #2
 8010b1e:	b29a      	uxth	r2, r3
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010b2c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010b2e:	e044      	b.n	8010bba <HAL_SPI_TransmitReceive+0x426>
 8010b30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010b32:	2b01      	cmp	r3, #1
 8010b34:	d11d      	bne.n	8010b72 <HAL_SPI_TransmitReceive+0x3de>
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d018      	beq.n	8010b72 <HAL_SPI_TransmitReceive+0x3de>
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b44:	6a3a      	ldr	r2, [r7, #32]
 8010b46:	8812      	ldrh	r2, [r2, #0]
 8010b48:	b292      	uxth	r2, r2
 8010b4a:	801a      	strh	r2, [r3, #0]
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b50:	1c9a      	adds	r2, r3, #2
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	665a      	str	r2, [r3, #100]	@ 0x64
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010b5c:	b29b      	uxth	r3, r3
 8010b5e:	3b01      	subs	r3, #1
 8010b60:	b29a      	uxth	r2, r3
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010b6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010b70:	e023      	b.n	8010bba <HAL_SPI_TransmitReceive+0x426>
 8010b72:	f7f6 f8e9 	bl	8006d48 <HAL_GetTick>
 8010b76:	4602      	mov	r2, r0
 8010b78:	69bb      	ldr	r3, [r7, #24]
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d803      	bhi.n	8010b8a <HAL_SPI_TransmitReceive+0x3f6>
 8010b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b88:	d102      	bne.n	8010b90 <HAL_SPI_TransmitReceive+0x3fc>
 8010b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d114      	bne.n	8010bba <HAL_SPI_TransmitReceive+0x426>
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f000 f939 	bl	8010e08 <SPI_CloseTransfer>
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010b9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2201      	movs	r2, #1
 8010baa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8010bb6:	2303      	movs	r3, #3
 8010bb8:	e121      	b.n	8010dfe <HAL_SPI_TransmitReceive+0x66a>
 8010bba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	f47f af3b 	bne.w	8010a38 <HAL_SPI_TransmitReceive+0x2a4>
 8010bc2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f47f af37 	bne.w	8010a38 <HAL_SPI_TransmitReceive+0x2a4>
 8010bca:	e0f2      	b.n	8010db2 <HAL_SPI_TransmitReceive+0x61e>
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	695b      	ldr	r3, [r3, #20]
 8010bd2:	f003 0302 	and.w	r3, r3, #2
 8010bd6:	2b02      	cmp	r3, #2
 8010bd8:	d121      	bne.n	8010c1e <HAL_SPI_TransmitReceive+0x48a>
 8010bda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d01e      	beq.n	8010c1e <HAL_SPI_TransmitReceive+0x48a>
 8010be0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010be2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8010be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be6:	440b      	add	r3, r1
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d218      	bcs.n	8010c1e <HAL_SPI_TransmitReceive+0x48a>
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	3320      	adds	r3, #32
 8010bf6:	7812      	ldrb	r2, [r2, #0]
 8010bf8:	701a      	strb	r2, [r3, #0]
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010bfe:	1c5a      	adds	r2, r3, #1
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	3b01      	subs	r3, #1
 8010c0e:	b29a      	uxth	r2, r3
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c1c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	695b      	ldr	r3, [r3, #20]
 8010c24:	617b      	str	r3, [r7, #20]
 8010c26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	f000 80ba 	beq.w	8010da2 <HAL_SPI_TransmitReceive+0x60e>
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	695b      	ldr	r3, [r3, #20]
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d11b      	bne.n	8010c74 <HAL_SPI_TransmitReceive+0x4e0>
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c48:	7812      	ldrb	r2, [r2, #0]
 8010c4a:	b2d2      	uxtb	r2, r2
 8010c4c:	701a      	strb	r2, [r3, #0]
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c52:	1c5a      	adds	r2, r3, #1
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	665a      	str	r2, [r3, #100]	@ 0x64
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	3b01      	subs	r3, #1
 8010c62:	b29a      	uxth	r2, r3
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c70:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010c72:	e096      	b.n	8010da2 <HAL_SPI_TransmitReceive+0x60e>
 8010c74:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010c76:	8bfb      	ldrh	r3, [r7, #30]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d24a      	bcs.n	8010d12 <HAL_SPI_TransmitReceive+0x57e>
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d045      	beq.n	8010d12 <HAL_SPI_TransmitReceive+0x57e>
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c92:	7812      	ldrb	r2, [r2, #0]
 8010c94:	b2d2      	uxtb	r2, r2
 8010c96:	701a      	strb	r2, [r3, #0]
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c9c:	1c5a      	adds	r2, r3, #1
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	665a      	str	r2, [r3, #100]	@ 0x64
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010cae:	7812      	ldrb	r2, [r2, #0]
 8010cb0:	b2d2      	uxtb	r2, r2
 8010cb2:	701a      	strb	r2, [r3, #0]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010cb8:	1c5a      	adds	r2, r3, #1
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	665a      	str	r2, [r3, #100]	@ 0x64
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010cca:	7812      	ldrb	r2, [r2, #0]
 8010ccc:	b2d2      	uxtb	r2, r2
 8010cce:	701a      	strb	r2, [r3, #0]
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010cd4:	1c5a      	adds	r2, r3, #1
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	665a      	str	r2, [r3, #100]	@ 0x64
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ce6:	7812      	ldrb	r2, [r2, #0]
 8010ce8:	b2d2      	uxtb	r2, r2
 8010cea:	701a      	strb	r2, [r3, #0]
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010cf0:	1c5a      	adds	r2, r3, #1
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	665a      	str	r2, [r3, #100]	@ 0x64
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	3b04      	subs	r3, #4
 8010d00:	b29a      	uxth	r2, r3
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d0e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010d10:	e047      	b.n	8010da2 <HAL_SPI_TransmitReceive+0x60e>
 8010d12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010d14:	2b03      	cmp	r3, #3
 8010d16:	d820      	bhi.n	8010d5a <HAL_SPI_TransmitReceive+0x5c6>
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d01b      	beq.n	8010d5a <HAL_SPI_TransmitReceive+0x5c6>
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d2e:	7812      	ldrb	r2, [r2, #0]
 8010d30:	b2d2      	uxtb	r2, r2
 8010d32:	701a      	strb	r2, [r3, #0]
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d38:	1c5a      	adds	r2, r3, #1
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	665a      	str	r2, [r3, #100]	@ 0x64
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	3b01      	subs	r3, #1
 8010d48:	b29a      	uxth	r2, r3
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d56:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010d58:	e023      	b.n	8010da2 <HAL_SPI_TransmitReceive+0x60e>
 8010d5a:	f7f5 fff5 	bl	8006d48 <HAL_GetTick>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	69bb      	ldr	r3, [r7, #24]
 8010d62:	1ad3      	subs	r3, r2, r3
 8010d64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d803      	bhi.n	8010d72 <HAL_SPI_TransmitReceive+0x5de>
 8010d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d70:	d102      	bne.n	8010d78 <HAL_SPI_TransmitReceive+0x5e4>
 8010d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d114      	bne.n	8010da2 <HAL_SPI_TransmitReceive+0x60e>
 8010d78:	68f8      	ldr	r0, [r7, #12]
 8010d7a:	f000 f845 	bl	8010e08 <SPI_CloseTransfer>
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2201      	movs	r2, #1
 8010d92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8010d9e:	2303      	movs	r3, #3
 8010da0:	e02d      	b.n	8010dfe <HAL_SPI_TransmitReceive+0x66a>
 8010da2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	f47f af11 	bne.w	8010bcc <HAL_SPI_TransmitReceive+0x438>
 8010daa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	f47f af0d 	bne.w	8010bcc <HAL_SPI_TransmitReceive+0x438>
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	9300      	str	r3, [sp, #0]
 8010db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db8:	2200      	movs	r2, #0
 8010dba:	2108      	movs	r1, #8
 8010dbc:	68f8      	ldr	r0, [r7, #12]
 8010dbe:	f000 f8c3 	bl	8010f48 <SPI_WaitOnFlagUntilTimeout>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d007      	beq.n	8010dd8 <HAL_SPI_TransmitReceive+0x644>
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010dce:	f043 0220 	orr.w	r2, r3, #32
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010dd8:	68f8      	ldr	r0, [r7, #12]
 8010dda:	f000 f815 	bl	8010e08 <SPI_CloseTransfer>
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2201      	movs	r2, #1
 8010de2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	2200      	movs	r2, #0
 8010dea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d001      	beq.n	8010dfc <HAL_SPI_TransmitReceive+0x668>
 8010df8:	2301      	movs	r3, #1
 8010dfa:	e000      	b.n	8010dfe <HAL_SPI_TransmitReceive+0x66a>
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3730      	adds	r7, #48	@ 0x30
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop

08010e08 <SPI_CloseTransfer>:
 8010e08:	b480      	push	{r7}
 8010e0a:	b085      	sub	sp, #20
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	695b      	ldr	r3, [r3, #20]
 8010e16:	60fb      	str	r3, [r7, #12]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	699a      	ldr	r2, [r3, #24]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f042 0208 	orr.w	r2, r2, #8
 8010e26:	619a      	str	r2, [r3, #24]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	699a      	ldr	r2, [r3, #24]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f042 0210 	orr.w	r2, r2, #16
 8010e36:	619a      	str	r2, [r3, #24]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f022 0201 	bic.w	r2, r2, #1
 8010e46:	601a      	str	r2, [r3, #0]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	6919      	ldr	r1, [r3, #16]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681a      	ldr	r2, [r3, #0]
 8010e52:	4b3c      	ldr	r3, [pc, #240]	@ (8010f44 <SPI_CloseTransfer+0x13c>)
 8010e54:	400b      	ands	r3, r1
 8010e56:	6113      	str	r3, [r2, #16]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	689a      	ldr	r2, [r3, #8]
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010e66:	609a      	str	r2, [r3, #8]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	2b04      	cmp	r3, #4
 8010e72:	d014      	beq.n	8010e9e <SPI_CloseTransfer+0x96>
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f003 0320 	and.w	r3, r3, #32
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d00f      	beq.n	8010e9e <SPI_CloseTransfer+0x96>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e84:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	699a      	ldr	r2, [r3, #24]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f042 0220 	orr.w	r2, r2, #32
 8010e9c:	619a      	str	r2, [r3, #24]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	2b03      	cmp	r3, #3
 8010ea8:	d014      	beq.n	8010ed4 <SPI_CloseTransfer+0xcc>
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d00f      	beq.n	8010ed4 <SPI_CloseTransfer+0xcc>
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010eba:	f043 0204 	orr.w	r2, r3, #4
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	699a      	ldr	r2, [r3, #24]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010ed2:	619a      	str	r2, [r3, #24]
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d00f      	beq.n	8010efe <SPI_CloseTransfer+0xf6>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ee4:	f043 0201 	orr.w	r2, r3, #1
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	699a      	ldr	r2, [r3, #24]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010efc:	619a      	str	r2, [r3, #24]
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d00f      	beq.n	8010f28 <SPI_CloseTransfer+0x120>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f0e:	f043 0208 	orr.w	r2, r3, #8
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	699a      	ldr	r2, [r3, #24]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010f26:	619a      	str	r2, [r3, #24]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2200      	movs	r2, #0
 8010f34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010f38:	bf00      	nop
 8010f3a:	3714      	adds	r7, #20
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f42:	4770      	bx	lr
 8010f44:	fffffc90 	.word	0xfffffc90

08010f48 <SPI_WaitOnFlagUntilTimeout>:
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	60f8      	str	r0, [r7, #12]
 8010f50:	60b9      	str	r1, [r7, #8]
 8010f52:	603b      	str	r3, [r7, #0]
 8010f54:	4613      	mov	r3, r2
 8010f56:	71fb      	strb	r3, [r7, #7]
 8010f58:	e010      	b.n	8010f7c <SPI_WaitOnFlagUntilTimeout+0x34>
 8010f5a:	f7f5 fef5 	bl	8006d48 <HAL_GetTick>
 8010f5e:	4602      	mov	r2, r0
 8010f60:	69bb      	ldr	r3, [r7, #24]
 8010f62:	1ad3      	subs	r3, r2, r3
 8010f64:	683a      	ldr	r2, [r7, #0]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d803      	bhi.n	8010f72 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f70:	d102      	bne.n	8010f78 <SPI_WaitOnFlagUntilTimeout+0x30>
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d101      	bne.n	8010f7c <SPI_WaitOnFlagUntilTimeout+0x34>
 8010f78:	2303      	movs	r3, #3
 8010f7a:	e00f      	b.n	8010f9c <SPI_WaitOnFlagUntilTimeout+0x54>
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	695a      	ldr	r2, [r3, #20]
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	4013      	ands	r3, r2
 8010f86:	68ba      	ldr	r2, [r7, #8]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	bf0c      	ite	eq
 8010f8c:	2301      	moveq	r3, #1
 8010f8e:	2300      	movne	r3, #0
 8010f90:	b2db      	uxtb	r3, r3
 8010f92:	461a      	mov	r2, r3
 8010f94:	79fb      	ldrb	r3, [r7, #7]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d0df      	beq.n	8010f5a <SPI_WaitOnFlagUntilTimeout+0x12>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3710      	adds	r7, #16
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <SPI_GetPacketSize>:
 8010fa4:	b480      	push	{r7}
 8010fa6:	b085      	sub	sp, #20
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fb0:	095b      	lsrs	r3, r3, #5
 8010fb2:	3301      	adds	r3, #1
 8010fb4:	60fb      	str	r3, [r7, #12]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	68db      	ldr	r3, [r3, #12]
 8010fba:	3301      	adds	r3, #1
 8010fbc:	60bb      	str	r3, [r7, #8]
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	3307      	adds	r3, #7
 8010fc2:	08db      	lsrs	r3, r3, #3
 8010fc4:	60bb      	str	r3, [r7, #8]
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	68fa      	ldr	r2, [r7, #12]
 8010fca:	fb02 f303 	mul.w	r3, r2, r3
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3714      	adds	r7, #20
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr

08010fda <HAL_TIM_Base_Init>:
 8010fda:	b580      	push	{r7, lr}
 8010fdc:	b082      	sub	sp, #8
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	6078      	str	r0, [r7, #4]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d101      	bne.n	8010fec <HAL_TIM_Base_Init+0x12>
 8010fe8:	2301      	movs	r3, #1
 8010fea:	e049      	b.n	8011080 <HAL_TIM_Base_Init+0xa6>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010ff2:	b2db      	uxtb	r3, r3
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d106      	bne.n	8011006 <HAL_TIM_Base_Init+0x2c>
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7f1 fc01 	bl	8002808 <HAL_TIM_Base_MspInit>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2202      	movs	r2, #2
 801100a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681a      	ldr	r2, [r3, #0]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	3304      	adds	r3, #4
 8011016:	4619      	mov	r1, r3
 8011018:	4610      	mov	r0, r2
 801101a:	f001 f9a3 	bl	8012364 <TIM_Base_SetConfig>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2201      	movs	r2, #1
 8011022:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2201      	movs	r2, #1
 801102a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2201      	movs	r2, #1
 8011032:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2201      	movs	r2, #1
 801103a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2201      	movs	r2, #1
 8011042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2201      	movs	r2, #1
 801104a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2201      	movs	r2, #1
 8011052:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2201      	movs	r2, #1
 801105a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2201      	movs	r2, #1
 8011062:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2201      	movs	r2, #1
 801106a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2201      	movs	r2, #1
 8011072:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2201      	movs	r2, #1
 801107a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801107e:	2300      	movs	r3, #0
 8011080:	4618      	mov	r0, r3
 8011082:	3708      	adds	r7, #8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <HAL_TIM_Base_Start>:
 8011088:	b480      	push	{r7}
 801108a:	b085      	sub	sp, #20
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011096:	b2db      	uxtb	r3, r3
 8011098:	2b01      	cmp	r3, #1
 801109a:	d001      	beq.n	80110a0 <HAL_TIM_Base_Start+0x18>
 801109c:	2301      	movs	r3, #1
 801109e:	e056      	b.n	801114e <HAL_TIM_Base_Start+0xc6>
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2202      	movs	r2, #2
 80110a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	4a2b      	ldr	r2, [pc, #172]	@ (801115c <HAL_TIM_Base_Start+0xd4>)
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d02c      	beq.n	801110c <HAL_TIM_Base_Start+0x84>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80110ba:	d027      	beq.n	801110c <HAL_TIM_Base_Start+0x84>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4a27      	ldr	r2, [pc, #156]	@ (8011160 <HAL_TIM_Base_Start+0xd8>)
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d022      	beq.n	801110c <HAL_TIM_Base_Start+0x84>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4a26      	ldr	r2, [pc, #152]	@ (8011164 <HAL_TIM_Base_Start+0xdc>)
 80110cc:	4293      	cmp	r3, r2
 80110ce:	d01d      	beq.n	801110c <HAL_TIM_Base_Start+0x84>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	4a24      	ldr	r2, [pc, #144]	@ (8011168 <HAL_TIM_Base_Start+0xe0>)
 80110d6:	4293      	cmp	r3, r2
 80110d8:	d018      	beq.n	801110c <HAL_TIM_Base_Start+0x84>
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	4a23      	ldr	r2, [pc, #140]	@ (801116c <HAL_TIM_Base_Start+0xe4>)
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d013      	beq.n	801110c <HAL_TIM_Base_Start+0x84>
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4a21      	ldr	r2, [pc, #132]	@ (8011170 <HAL_TIM_Base_Start+0xe8>)
 80110ea:	4293      	cmp	r3, r2
 80110ec:	d00e      	beq.n	801110c <HAL_TIM_Base_Start+0x84>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	4a20      	ldr	r2, [pc, #128]	@ (8011174 <HAL_TIM_Base_Start+0xec>)
 80110f4:	4293      	cmp	r3, r2
 80110f6:	d009      	beq.n	801110c <HAL_TIM_Base_Start+0x84>
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	4a1e      	ldr	r2, [pc, #120]	@ (8011178 <HAL_TIM_Base_Start+0xf0>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d004      	beq.n	801110c <HAL_TIM_Base_Start+0x84>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	4a1d      	ldr	r2, [pc, #116]	@ (801117c <HAL_TIM_Base_Start+0xf4>)
 8011108:	4293      	cmp	r3, r2
 801110a:	d115      	bne.n	8011138 <HAL_TIM_Base_Start+0xb0>
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	689a      	ldr	r2, [r3, #8]
 8011112:	4b1b      	ldr	r3, [pc, #108]	@ (8011180 <HAL_TIM_Base_Start+0xf8>)
 8011114:	4013      	ands	r3, r2
 8011116:	60fb      	str	r3, [r7, #12]
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2b06      	cmp	r3, #6
 801111c:	d015      	beq.n	801114a <HAL_TIM_Base_Start+0xc2>
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011124:	d011      	beq.n	801114a <HAL_TIM_Base_Start+0xc2>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	681a      	ldr	r2, [r3, #0]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	f042 0201 	orr.w	r2, r2, #1
 8011134:	601a      	str	r2, [r3, #0]
 8011136:	e008      	b.n	801114a <HAL_TIM_Base_Start+0xc2>
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	681a      	ldr	r2, [r3, #0]
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	f042 0201 	orr.w	r2, r2, #1
 8011146:	601a      	str	r2, [r3, #0]
 8011148:	e000      	b.n	801114c <HAL_TIM_Base_Start+0xc4>
 801114a:	bf00      	nop
 801114c:	2300      	movs	r3, #0
 801114e:	4618      	mov	r0, r3
 8011150:	3714      	adds	r7, #20
 8011152:	46bd      	mov	sp, r7
 8011154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011158:	4770      	bx	lr
 801115a:	bf00      	nop
 801115c:	40010000 	.word	0x40010000
 8011160:	40000400 	.word	0x40000400
 8011164:	40000800 	.word	0x40000800
 8011168:	40000c00 	.word	0x40000c00
 801116c:	40010400 	.word	0x40010400
 8011170:	40001800 	.word	0x40001800
 8011174:	40014000 	.word	0x40014000
 8011178:	4000e000 	.word	0x4000e000
 801117c:	4000e400 	.word	0x4000e400
 8011180:	00010007 	.word	0x00010007

08011184 <HAL_TIM_Base_Start_IT>:
 8011184:	b480      	push	{r7}
 8011186:	b085      	sub	sp, #20
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011192:	b2db      	uxtb	r3, r3
 8011194:	2b01      	cmp	r3, #1
 8011196:	d001      	beq.n	801119c <HAL_TIM_Base_Start_IT+0x18>
 8011198:	2301      	movs	r3, #1
 801119a:	e05e      	b.n	801125a <HAL_TIM_Base_Start_IT+0xd6>
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2202      	movs	r2, #2
 80111a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	68da      	ldr	r2, [r3, #12]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	f042 0201 	orr.w	r2, r2, #1
 80111b2:	60da      	str	r2, [r3, #12]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4a2b      	ldr	r2, [pc, #172]	@ (8011268 <HAL_TIM_Base_Start_IT+0xe4>)
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d02c      	beq.n	8011218 <HAL_TIM_Base_Start_IT+0x94>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80111c6:	d027      	beq.n	8011218 <HAL_TIM_Base_Start_IT+0x94>
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	4a27      	ldr	r2, [pc, #156]	@ (801126c <HAL_TIM_Base_Start_IT+0xe8>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d022      	beq.n	8011218 <HAL_TIM_Base_Start_IT+0x94>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	4a26      	ldr	r2, [pc, #152]	@ (8011270 <HAL_TIM_Base_Start_IT+0xec>)
 80111d8:	4293      	cmp	r3, r2
 80111da:	d01d      	beq.n	8011218 <HAL_TIM_Base_Start_IT+0x94>
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4a24      	ldr	r2, [pc, #144]	@ (8011274 <HAL_TIM_Base_Start_IT+0xf0>)
 80111e2:	4293      	cmp	r3, r2
 80111e4:	d018      	beq.n	8011218 <HAL_TIM_Base_Start_IT+0x94>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	4a23      	ldr	r2, [pc, #140]	@ (8011278 <HAL_TIM_Base_Start_IT+0xf4>)
 80111ec:	4293      	cmp	r3, r2
 80111ee:	d013      	beq.n	8011218 <HAL_TIM_Base_Start_IT+0x94>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4a21      	ldr	r2, [pc, #132]	@ (801127c <HAL_TIM_Base_Start_IT+0xf8>)
 80111f6:	4293      	cmp	r3, r2
 80111f8:	d00e      	beq.n	8011218 <HAL_TIM_Base_Start_IT+0x94>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	4a20      	ldr	r2, [pc, #128]	@ (8011280 <HAL_TIM_Base_Start_IT+0xfc>)
 8011200:	4293      	cmp	r3, r2
 8011202:	d009      	beq.n	8011218 <HAL_TIM_Base_Start_IT+0x94>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	4a1e      	ldr	r2, [pc, #120]	@ (8011284 <HAL_TIM_Base_Start_IT+0x100>)
 801120a:	4293      	cmp	r3, r2
 801120c:	d004      	beq.n	8011218 <HAL_TIM_Base_Start_IT+0x94>
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	4a1d      	ldr	r2, [pc, #116]	@ (8011288 <HAL_TIM_Base_Start_IT+0x104>)
 8011214:	4293      	cmp	r3, r2
 8011216:	d115      	bne.n	8011244 <HAL_TIM_Base_Start_IT+0xc0>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	689a      	ldr	r2, [r3, #8]
 801121e:	4b1b      	ldr	r3, [pc, #108]	@ (801128c <HAL_TIM_Base_Start_IT+0x108>)
 8011220:	4013      	ands	r3, r2
 8011222:	60fb      	str	r3, [r7, #12]
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2b06      	cmp	r3, #6
 8011228:	d015      	beq.n	8011256 <HAL_TIM_Base_Start_IT+0xd2>
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011230:	d011      	beq.n	8011256 <HAL_TIM_Base_Start_IT+0xd2>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f042 0201 	orr.w	r2, r2, #1
 8011240:	601a      	str	r2, [r3, #0]
 8011242:	e008      	b.n	8011256 <HAL_TIM_Base_Start_IT+0xd2>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	681a      	ldr	r2, [r3, #0]
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f042 0201 	orr.w	r2, r2, #1
 8011252:	601a      	str	r2, [r3, #0]
 8011254:	e000      	b.n	8011258 <HAL_TIM_Base_Start_IT+0xd4>
 8011256:	bf00      	nop
 8011258:	2300      	movs	r3, #0
 801125a:	4618      	mov	r0, r3
 801125c:	3714      	adds	r7, #20
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr
 8011266:	bf00      	nop
 8011268:	40010000 	.word	0x40010000
 801126c:	40000400 	.word	0x40000400
 8011270:	40000800 	.word	0x40000800
 8011274:	40000c00 	.word	0x40000c00
 8011278:	40010400 	.word	0x40010400
 801127c:	40001800 	.word	0x40001800
 8011280:	40014000 	.word	0x40014000
 8011284:	4000e000 	.word	0x4000e000
 8011288:	4000e400 	.word	0x4000e400
 801128c:	00010007 	.word	0x00010007

08011290 <HAL_TIM_PWM_Init>:
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d101      	bne.n	80112a2 <HAL_TIM_PWM_Init+0x12>
 801129e:	2301      	movs	r3, #1
 80112a0:	e049      	b.n	8011336 <HAL_TIM_PWM_Init+0xa6>
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80112a8:	b2db      	uxtb	r3, r3
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d106      	bne.n	80112bc <HAL_TIM_PWM_Init+0x2c>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	2200      	movs	r2, #0
 80112b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f000 f841 	bl	801133e <HAL_TIM_PWM_MspInit>
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2202      	movs	r2, #2
 80112c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	3304      	adds	r3, #4
 80112cc:	4619      	mov	r1, r3
 80112ce:	4610      	mov	r0, r2
 80112d0:	f001 f848 	bl	8012364 <TIM_Base_SetConfig>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2201      	movs	r2, #1
 80112d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2201      	movs	r2, #1
 80112e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2201      	movs	r2, #1
 80112e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2201      	movs	r2, #1
 80112f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2201      	movs	r2, #1
 80112f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2201      	movs	r2, #1
 8011300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2201      	movs	r2, #1
 8011308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2201      	movs	r2, #1
 8011310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2201      	movs	r2, #1
 8011318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2201      	movs	r2, #1
 8011320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2201      	movs	r2, #1
 8011328:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2201      	movs	r2, #1
 8011330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8011334:	2300      	movs	r3, #0
 8011336:	4618      	mov	r0, r3
 8011338:	3708      	adds	r7, #8
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}

0801133e <HAL_TIM_PWM_MspInit>:
 801133e:	b480      	push	{r7}
 8011340:	b083      	sub	sp, #12
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
 8011346:	bf00      	nop
 8011348:	370c      	adds	r7, #12
 801134a:	46bd      	mov	sp, r7
 801134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011350:	4770      	bx	lr
	...

08011354 <HAL_TIM_PWM_Start>:
 8011354:	b580      	push	{r7, lr}
 8011356:	b084      	sub	sp, #16
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d109      	bne.n	8011378 <HAL_TIM_PWM_Start+0x24>
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801136a:	b2db      	uxtb	r3, r3
 801136c:	2b01      	cmp	r3, #1
 801136e:	bf14      	ite	ne
 8011370:	2301      	movne	r3, #1
 8011372:	2300      	moveq	r3, #0
 8011374:	b2db      	uxtb	r3, r3
 8011376:	e03c      	b.n	80113f2 <HAL_TIM_PWM_Start+0x9e>
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	2b04      	cmp	r3, #4
 801137c:	d109      	bne.n	8011392 <HAL_TIM_PWM_Start+0x3e>
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011384:	b2db      	uxtb	r3, r3
 8011386:	2b01      	cmp	r3, #1
 8011388:	bf14      	ite	ne
 801138a:	2301      	movne	r3, #1
 801138c:	2300      	moveq	r3, #0
 801138e:	b2db      	uxtb	r3, r3
 8011390:	e02f      	b.n	80113f2 <HAL_TIM_PWM_Start+0x9e>
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	2b08      	cmp	r3, #8
 8011396:	d109      	bne.n	80113ac <HAL_TIM_PWM_Start+0x58>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801139e:	b2db      	uxtb	r3, r3
 80113a0:	2b01      	cmp	r3, #1
 80113a2:	bf14      	ite	ne
 80113a4:	2301      	movne	r3, #1
 80113a6:	2300      	moveq	r3, #0
 80113a8:	b2db      	uxtb	r3, r3
 80113aa:	e022      	b.n	80113f2 <HAL_TIM_PWM_Start+0x9e>
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	2b0c      	cmp	r3, #12
 80113b0:	d109      	bne.n	80113c6 <HAL_TIM_PWM_Start+0x72>
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	bf14      	ite	ne
 80113be:	2301      	movne	r3, #1
 80113c0:	2300      	moveq	r3, #0
 80113c2:	b2db      	uxtb	r3, r3
 80113c4:	e015      	b.n	80113f2 <HAL_TIM_PWM_Start+0x9e>
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	2b10      	cmp	r3, #16
 80113ca:	d109      	bne.n	80113e0 <HAL_TIM_PWM_Start+0x8c>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	bf14      	ite	ne
 80113d8:	2301      	movne	r3, #1
 80113da:	2300      	moveq	r3, #0
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	e008      	b.n	80113f2 <HAL_TIM_PWM_Start+0x9e>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	bf14      	ite	ne
 80113ec:	2301      	movne	r3, #1
 80113ee:	2300      	moveq	r3, #0
 80113f0:	b2db      	uxtb	r3, r3
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d001      	beq.n	80113fa <HAL_TIM_PWM_Start+0xa6>
 80113f6:	2301      	movs	r3, #1
 80113f8:	e0ab      	b.n	8011552 <HAL_TIM_PWM_Start+0x1fe>
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d104      	bne.n	801140a <HAL_TIM_PWM_Start+0xb6>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2202      	movs	r2, #2
 8011404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011408:	e023      	b.n	8011452 <HAL_TIM_PWM_Start+0xfe>
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	2b04      	cmp	r3, #4
 801140e:	d104      	bne.n	801141a <HAL_TIM_PWM_Start+0xc6>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2202      	movs	r2, #2
 8011414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011418:	e01b      	b.n	8011452 <HAL_TIM_PWM_Start+0xfe>
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	2b08      	cmp	r3, #8
 801141e:	d104      	bne.n	801142a <HAL_TIM_PWM_Start+0xd6>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2202      	movs	r2, #2
 8011424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011428:	e013      	b.n	8011452 <HAL_TIM_PWM_Start+0xfe>
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	2b0c      	cmp	r3, #12
 801142e:	d104      	bne.n	801143a <HAL_TIM_PWM_Start+0xe6>
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2202      	movs	r2, #2
 8011434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011438:	e00b      	b.n	8011452 <HAL_TIM_PWM_Start+0xfe>
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	2b10      	cmp	r3, #16
 801143e:	d104      	bne.n	801144a <HAL_TIM_PWM_Start+0xf6>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2202      	movs	r2, #2
 8011444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011448:	e003      	b.n	8011452 <HAL_TIM_PWM_Start+0xfe>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2202      	movs	r2, #2
 801144e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	2201      	movs	r2, #1
 8011458:	6839      	ldr	r1, [r7, #0]
 801145a:	4618      	mov	r0, r3
 801145c:	f001 fba8 	bl	8012bb0 <TIM_CCxChannelCmd>
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	4a3d      	ldr	r2, [pc, #244]	@ (801155c <HAL_TIM_PWM_Start+0x208>)
 8011466:	4293      	cmp	r3, r2
 8011468:	d013      	beq.n	8011492 <HAL_TIM_PWM_Start+0x13e>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4a3c      	ldr	r2, [pc, #240]	@ (8011560 <HAL_TIM_PWM_Start+0x20c>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d00e      	beq.n	8011492 <HAL_TIM_PWM_Start+0x13e>
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	4a3a      	ldr	r2, [pc, #232]	@ (8011564 <HAL_TIM_PWM_Start+0x210>)
 801147a:	4293      	cmp	r3, r2
 801147c:	d009      	beq.n	8011492 <HAL_TIM_PWM_Start+0x13e>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	4a39      	ldr	r2, [pc, #228]	@ (8011568 <HAL_TIM_PWM_Start+0x214>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d004      	beq.n	8011492 <HAL_TIM_PWM_Start+0x13e>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a37      	ldr	r2, [pc, #220]	@ (801156c <HAL_TIM_PWM_Start+0x218>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d101      	bne.n	8011496 <HAL_TIM_PWM_Start+0x142>
 8011492:	2301      	movs	r3, #1
 8011494:	e000      	b.n	8011498 <HAL_TIM_PWM_Start+0x144>
 8011496:	2300      	movs	r3, #0
 8011498:	2b00      	cmp	r3, #0
 801149a:	d007      	beq.n	80114ac <HAL_TIM_PWM_Start+0x158>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80114aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	4a2a      	ldr	r2, [pc, #168]	@ (801155c <HAL_TIM_PWM_Start+0x208>)
 80114b2:	4293      	cmp	r3, r2
 80114b4:	d02c      	beq.n	8011510 <HAL_TIM_PWM_Start+0x1bc>
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80114be:	d027      	beq.n	8011510 <HAL_TIM_PWM_Start+0x1bc>
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4a2a      	ldr	r2, [pc, #168]	@ (8011570 <HAL_TIM_PWM_Start+0x21c>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d022      	beq.n	8011510 <HAL_TIM_PWM_Start+0x1bc>
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4a29      	ldr	r2, [pc, #164]	@ (8011574 <HAL_TIM_PWM_Start+0x220>)
 80114d0:	4293      	cmp	r3, r2
 80114d2:	d01d      	beq.n	8011510 <HAL_TIM_PWM_Start+0x1bc>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	4a27      	ldr	r2, [pc, #156]	@ (8011578 <HAL_TIM_PWM_Start+0x224>)
 80114da:	4293      	cmp	r3, r2
 80114dc:	d018      	beq.n	8011510 <HAL_TIM_PWM_Start+0x1bc>
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4a1f      	ldr	r2, [pc, #124]	@ (8011560 <HAL_TIM_PWM_Start+0x20c>)
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d013      	beq.n	8011510 <HAL_TIM_PWM_Start+0x1bc>
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4a23      	ldr	r2, [pc, #140]	@ (801157c <HAL_TIM_PWM_Start+0x228>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d00e      	beq.n	8011510 <HAL_TIM_PWM_Start+0x1bc>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	4a1b      	ldr	r2, [pc, #108]	@ (8011564 <HAL_TIM_PWM_Start+0x210>)
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d009      	beq.n	8011510 <HAL_TIM_PWM_Start+0x1bc>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4a1f      	ldr	r2, [pc, #124]	@ (8011580 <HAL_TIM_PWM_Start+0x22c>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d004      	beq.n	8011510 <HAL_TIM_PWM_Start+0x1bc>
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	4a1e      	ldr	r2, [pc, #120]	@ (8011584 <HAL_TIM_PWM_Start+0x230>)
 801150c:	4293      	cmp	r3, r2
 801150e:	d115      	bne.n	801153c <HAL_TIM_PWM_Start+0x1e8>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	689a      	ldr	r2, [r3, #8]
 8011516:	4b1c      	ldr	r3, [pc, #112]	@ (8011588 <HAL_TIM_PWM_Start+0x234>)
 8011518:	4013      	ands	r3, r2
 801151a:	60fb      	str	r3, [r7, #12]
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	2b06      	cmp	r3, #6
 8011520:	d015      	beq.n	801154e <HAL_TIM_PWM_Start+0x1fa>
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011528:	d011      	beq.n	801154e <HAL_TIM_PWM_Start+0x1fa>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	681a      	ldr	r2, [r3, #0]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	f042 0201 	orr.w	r2, r2, #1
 8011538:	601a      	str	r2, [r3, #0]
 801153a:	e008      	b.n	801154e <HAL_TIM_PWM_Start+0x1fa>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	f042 0201 	orr.w	r2, r2, #1
 801154a:	601a      	str	r2, [r3, #0]
 801154c:	e000      	b.n	8011550 <HAL_TIM_PWM_Start+0x1fc>
 801154e:	bf00      	nop
 8011550:	2300      	movs	r3, #0
 8011552:	4618      	mov	r0, r3
 8011554:	3710      	adds	r7, #16
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	40010000 	.word	0x40010000
 8011560:	40010400 	.word	0x40010400
 8011564:	40014000 	.word	0x40014000
 8011568:	40014400 	.word	0x40014400
 801156c:	40014800 	.word	0x40014800
 8011570:	40000400 	.word	0x40000400
 8011574:	40000800 	.word	0x40000800
 8011578:	40000c00 	.word	0x40000c00
 801157c:	40001800 	.word	0x40001800
 8011580:	4000e000 	.word	0x4000e000
 8011584:	4000e400 	.word	0x4000e400
 8011588:	00010007 	.word	0x00010007

0801158c <HAL_TIM_PWM_Stop>:
 801158c:	b580      	push	{r7, lr}
 801158e:	b082      	sub	sp, #8
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	6039      	str	r1, [r7, #0]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	2200      	movs	r2, #0
 801159c:	6839      	ldr	r1, [r7, #0]
 801159e:	4618      	mov	r0, r3
 80115a0:	f001 fb06 	bl	8012bb0 <TIM_CCxChannelCmd>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	4a3e      	ldr	r2, [pc, #248]	@ (80116a4 <HAL_TIM_PWM_Stop+0x118>)
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d013      	beq.n	80115d6 <HAL_TIM_PWM_Stop+0x4a>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	4a3d      	ldr	r2, [pc, #244]	@ (80116a8 <HAL_TIM_PWM_Stop+0x11c>)
 80115b4:	4293      	cmp	r3, r2
 80115b6:	d00e      	beq.n	80115d6 <HAL_TIM_PWM_Stop+0x4a>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	4a3b      	ldr	r2, [pc, #236]	@ (80116ac <HAL_TIM_PWM_Stop+0x120>)
 80115be:	4293      	cmp	r3, r2
 80115c0:	d009      	beq.n	80115d6 <HAL_TIM_PWM_Stop+0x4a>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	4a3a      	ldr	r2, [pc, #232]	@ (80116b0 <HAL_TIM_PWM_Stop+0x124>)
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d004      	beq.n	80115d6 <HAL_TIM_PWM_Stop+0x4a>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	4a38      	ldr	r2, [pc, #224]	@ (80116b4 <HAL_TIM_PWM_Stop+0x128>)
 80115d2:	4293      	cmp	r3, r2
 80115d4:	d101      	bne.n	80115da <HAL_TIM_PWM_Stop+0x4e>
 80115d6:	2301      	movs	r3, #1
 80115d8:	e000      	b.n	80115dc <HAL_TIM_PWM_Stop+0x50>
 80115da:	2300      	movs	r3, #0
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d017      	beq.n	8011610 <HAL_TIM_PWM_Stop+0x84>
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	6a1a      	ldr	r2, [r3, #32]
 80115e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80115ea:	4013      	ands	r3, r2
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d10f      	bne.n	8011610 <HAL_TIM_PWM_Stop+0x84>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	6a1a      	ldr	r2, [r3, #32]
 80115f6:	f240 4344 	movw	r3, #1092	@ 0x444
 80115fa:	4013      	ands	r3, r2
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d107      	bne.n	8011610 <HAL_TIM_PWM_Stop+0x84>
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801160e:	645a      	str	r2, [r3, #68]	@ 0x44
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	6a1a      	ldr	r2, [r3, #32]
 8011616:	f241 1311 	movw	r3, #4369	@ 0x1111
 801161a:	4013      	ands	r3, r2
 801161c:	2b00      	cmp	r3, #0
 801161e:	d10f      	bne.n	8011640 <HAL_TIM_PWM_Stop+0xb4>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	6a1a      	ldr	r2, [r3, #32]
 8011626:	f240 4344 	movw	r3, #1092	@ 0x444
 801162a:	4013      	ands	r3, r2
 801162c:	2b00      	cmp	r3, #0
 801162e:	d107      	bne.n	8011640 <HAL_TIM_PWM_Stop+0xb4>
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f022 0201 	bic.w	r2, r2, #1
 801163e:	601a      	str	r2, [r3, #0]
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d104      	bne.n	8011650 <HAL_TIM_PWM_Stop+0xc4>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2201      	movs	r2, #1
 801164a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801164e:	e023      	b.n	8011698 <HAL_TIM_PWM_Stop+0x10c>
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	2b04      	cmp	r3, #4
 8011654:	d104      	bne.n	8011660 <HAL_TIM_PWM_Stop+0xd4>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2201      	movs	r2, #1
 801165a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801165e:	e01b      	b.n	8011698 <HAL_TIM_PWM_Stop+0x10c>
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	2b08      	cmp	r3, #8
 8011664:	d104      	bne.n	8011670 <HAL_TIM_PWM_Stop+0xe4>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2201      	movs	r2, #1
 801166a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801166e:	e013      	b.n	8011698 <HAL_TIM_PWM_Stop+0x10c>
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	2b0c      	cmp	r3, #12
 8011674:	d104      	bne.n	8011680 <HAL_TIM_PWM_Stop+0xf4>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2201      	movs	r2, #1
 801167a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801167e:	e00b      	b.n	8011698 <HAL_TIM_PWM_Stop+0x10c>
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	2b10      	cmp	r3, #16
 8011684:	d104      	bne.n	8011690 <HAL_TIM_PWM_Stop+0x104>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2201      	movs	r2, #1
 801168a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801168e:	e003      	b.n	8011698 <HAL_TIM_PWM_Stop+0x10c>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2201      	movs	r2, #1
 8011694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011698:	2300      	movs	r3, #0
 801169a:	4618      	mov	r0, r3
 801169c:	3708      	adds	r7, #8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	40010000 	.word	0x40010000
 80116a8:	40010400 	.word	0x40010400
 80116ac:	40014000 	.word	0x40014000
 80116b0:	40014400 	.word	0x40014400
 80116b4:	40014800 	.word	0x40014800

080116b8 <HAL_TIM_PWM_Start_DMA>:
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b086      	sub	sp, #24
 80116bc:	af00      	add	r7, sp, #0
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	607a      	str	r2, [r7, #4]
 80116c4:	807b      	strh	r3, [r7, #2]
 80116c6:	2300      	movs	r3, #0
 80116c8:	75fb      	strb	r3, [r7, #23]
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d109      	bne.n	80116e4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	2b02      	cmp	r3, #2
 80116da:	bf0c      	ite	eq
 80116dc:	2301      	moveq	r3, #1
 80116de:	2300      	movne	r3, #0
 80116e0:	b2db      	uxtb	r3, r3
 80116e2:	e03c      	b.n	801175e <HAL_TIM_PWM_Start_DMA+0xa6>
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	2b04      	cmp	r3, #4
 80116e8:	d109      	bne.n	80116fe <HAL_TIM_PWM_Start_DMA+0x46>
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80116f0:	b2db      	uxtb	r3, r3
 80116f2:	2b02      	cmp	r3, #2
 80116f4:	bf0c      	ite	eq
 80116f6:	2301      	moveq	r3, #1
 80116f8:	2300      	movne	r3, #0
 80116fa:	b2db      	uxtb	r3, r3
 80116fc:	e02f      	b.n	801175e <HAL_TIM_PWM_Start_DMA+0xa6>
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	2b08      	cmp	r3, #8
 8011702:	d109      	bne.n	8011718 <HAL_TIM_PWM_Start_DMA+0x60>
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801170a:	b2db      	uxtb	r3, r3
 801170c:	2b02      	cmp	r3, #2
 801170e:	bf0c      	ite	eq
 8011710:	2301      	moveq	r3, #1
 8011712:	2300      	movne	r3, #0
 8011714:	b2db      	uxtb	r3, r3
 8011716:	e022      	b.n	801175e <HAL_TIM_PWM_Start_DMA+0xa6>
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	2b0c      	cmp	r3, #12
 801171c:	d109      	bne.n	8011732 <HAL_TIM_PWM_Start_DMA+0x7a>
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011724:	b2db      	uxtb	r3, r3
 8011726:	2b02      	cmp	r3, #2
 8011728:	bf0c      	ite	eq
 801172a:	2301      	moveq	r3, #1
 801172c:	2300      	movne	r3, #0
 801172e:	b2db      	uxtb	r3, r3
 8011730:	e015      	b.n	801175e <HAL_TIM_PWM_Start_DMA+0xa6>
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	2b10      	cmp	r3, #16
 8011736:	d109      	bne.n	801174c <HAL_TIM_PWM_Start_DMA+0x94>
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801173e:	b2db      	uxtb	r3, r3
 8011740:	2b02      	cmp	r3, #2
 8011742:	bf0c      	ite	eq
 8011744:	2301      	moveq	r3, #1
 8011746:	2300      	movne	r3, #0
 8011748:	b2db      	uxtb	r3, r3
 801174a:	e008      	b.n	801175e <HAL_TIM_PWM_Start_DMA+0xa6>
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011752:	b2db      	uxtb	r3, r3
 8011754:	2b02      	cmp	r3, #2
 8011756:	bf0c      	ite	eq
 8011758:	2301      	moveq	r3, #1
 801175a:	2300      	movne	r3, #0
 801175c:	b2db      	uxtb	r3, r3
 801175e:	2b00      	cmp	r3, #0
 8011760:	d001      	beq.n	8011766 <HAL_TIM_PWM_Start_DMA+0xae>
 8011762:	2302      	movs	r3, #2
 8011764:	e1ba      	b.n	8011adc <HAL_TIM_PWM_Start_DMA+0x424>
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d109      	bne.n	8011780 <HAL_TIM_PWM_Start_DMA+0xc8>
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011772:	b2db      	uxtb	r3, r3
 8011774:	2b01      	cmp	r3, #1
 8011776:	bf0c      	ite	eq
 8011778:	2301      	moveq	r3, #1
 801177a:	2300      	movne	r3, #0
 801177c:	b2db      	uxtb	r3, r3
 801177e:	e03c      	b.n	80117fa <HAL_TIM_PWM_Start_DMA+0x142>
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	2b04      	cmp	r3, #4
 8011784:	d109      	bne.n	801179a <HAL_TIM_PWM_Start_DMA+0xe2>
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801178c:	b2db      	uxtb	r3, r3
 801178e:	2b01      	cmp	r3, #1
 8011790:	bf0c      	ite	eq
 8011792:	2301      	moveq	r3, #1
 8011794:	2300      	movne	r3, #0
 8011796:	b2db      	uxtb	r3, r3
 8011798:	e02f      	b.n	80117fa <HAL_TIM_PWM_Start_DMA+0x142>
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	2b08      	cmp	r3, #8
 801179e:	d109      	bne.n	80117b4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	2b01      	cmp	r3, #1
 80117aa:	bf0c      	ite	eq
 80117ac:	2301      	moveq	r3, #1
 80117ae:	2300      	movne	r3, #0
 80117b0:	b2db      	uxtb	r3, r3
 80117b2:	e022      	b.n	80117fa <HAL_TIM_PWM_Start_DMA+0x142>
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	2b0c      	cmp	r3, #12
 80117b8:	d109      	bne.n	80117ce <HAL_TIM_PWM_Start_DMA+0x116>
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80117c0:	b2db      	uxtb	r3, r3
 80117c2:	2b01      	cmp	r3, #1
 80117c4:	bf0c      	ite	eq
 80117c6:	2301      	moveq	r3, #1
 80117c8:	2300      	movne	r3, #0
 80117ca:	b2db      	uxtb	r3, r3
 80117cc:	e015      	b.n	80117fa <HAL_TIM_PWM_Start_DMA+0x142>
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	2b10      	cmp	r3, #16
 80117d2:	d109      	bne.n	80117e8 <HAL_TIM_PWM_Start_DMA+0x130>
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80117da:	b2db      	uxtb	r3, r3
 80117dc:	2b01      	cmp	r3, #1
 80117de:	bf0c      	ite	eq
 80117e0:	2301      	moveq	r3, #1
 80117e2:	2300      	movne	r3, #0
 80117e4:	b2db      	uxtb	r3, r3
 80117e6:	e008      	b.n	80117fa <HAL_TIM_PWM_Start_DMA+0x142>
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	bf0c      	ite	eq
 80117f4:	2301      	moveq	r3, #1
 80117f6:	2300      	movne	r3, #0
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d034      	beq.n	8011868 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d002      	beq.n	801180a <HAL_TIM_PWM_Start_DMA+0x152>
 8011804:	887b      	ldrh	r3, [r7, #2]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d101      	bne.n	801180e <HAL_TIM_PWM_Start_DMA+0x156>
 801180a:	2301      	movs	r3, #1
 801180c:	e166      	b.n	8011adc <HAL_TIM_PWM_Start_DMA+0x424>
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d104      	bne.n	801181e <HAL_TIM_PWM_Start_DMA+0x166>
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	2202      	movs	r2, #2
 8011818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801181c:	e026      	b.n	801186c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	2b04      	cmp	r3, #4
 8011822:	d104      	bne.n	801182e <HAL_TIM_PWM_Start_DMA+0x176>
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2202      	movs	r2, #2
 8011828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801182c:	e01e      	b.n	801186c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	2b08      	cmp	r3, #8
 8011832:	d104      	bne.n	801183e <HAL_TIM_PWM_Start_DMA+0x186>
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	2202      	movs	r2, #2
 8011838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801183c:	e016      	b.n	801186c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	2b0c      	cmp	r3, #12
 8011842:	d104      	bne.n	801184e <HAL_TIM_PWM_Start_DMA+0x196>
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	2202      	movs	r2, #2
 8011848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801184c:	e00e      	b.n	801186c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	2b10      	cmp	r3, #16
 8011852:	d104      	bne.n	801185e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	2202      	movs	r2, #2
 8011858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801185c:	e006      	b.n	801186c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	2202      	movs	r2, #2
 8011862:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011866:	e001      	b.n	801186c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011868:	2301      	movs	r3, #1
 801186a:	e137      	b.n	8011adc <HAL_TIM_PWM_Start_DMA+0x424>
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	2b0c      	cmp	r3, #12
 8011870:	f200 80ae 	bhi.w	80119d0 <HAL_TIM_PWM_Start_DMA+0x318>
 8011874:	a201      	add	r2, pc, #4	@ (adr r2, 801187c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8011876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801187a:	bf00      	nop
 801187c:	080118b1 	.word	0x080118b1
 8011880:	080119d1 	.word	0x080119d1
 8011884:	080119d1 	.word	0x080119d1
 8011888:	080119d1 	.word	0x080119d1
 801188c:	080118f9 	.word	0x080118f9
 8011890:	080119d1 	.word	0x080119d1
 8011894:	080119d1 	.word	0x080119d1
 8011898:	080119d1 	.word	0x080119d1
 801189c:	08011941 	.word	0x08011941
 80118a0:	080119d1 	.word	0x080119d1
 80118a4:	080119d1 	.word	0x080119d1
 80118a8:	080119d1 	.word	0x080119d1
 80118ac:	08011989 	.word	0x08011989
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118b4:	4a8b      	ldr	r2, [pc, #556]	@ (8011ae4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80118b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118bc:	4a8a      	ldr	r2, [pc, #552]	@ (8011ae8 <HAL_TIM_PWM_Start_DMA+0x430>)
 80118be:	641a      	str	r2, [r3, #64]	@ 0x40
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118c4:	4a89      	ldr	r2, [pc, #548]	@ (8011aec <HAL_TIM_PWM_Start_DMA+0x434>)
 80118c6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80118cc:	6879      	ldr	r1, [r7, #4]
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	3334      	adds	r3, #52	@ 0x34
 80118d4:	461a      	mov	r2, r3
 80118d6:	887b      	ldrh	r3, [r7, #2]
 80118d8:	f7f7 fd72 	bl	80093c0 <HAL_DMA_Start_IT>
 80118dc:	4603      	mov	r3, r0
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d001      	beq.n	80118e6 <HAL_TIM_PWM_Start_DMA+0x22e>
 80118e2:	2301      	movs	r3, #1
 80118e4:	e0fa      	b.n	8011adc <HAL_TIM_PWM_Start_DMA+0x424>
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	68da      	ldr	r2, [r3, #12]
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80118f4:	60da      	str	r2, [r3, #12]
 80118f6:	e06e      	b.n	80119d6 <HAL_TIM_PWM_Start_DMA+0x31e>
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118fc:	4a79      	ldr	r2, [pc, #484]	@ (8011ae4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80118fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011904:	4a78      	ldr	r2, [pc, #480]	@ (8011ae8 <HAL_TIM_PWM_Start_DMA+0x430>)
 8011906:	641a      	str	r2, [r3, #64]	@ 0x40
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801190c:	4a77      	ldr	r2, [pc, #476]	@ (8011aec <HAL_TIM_PWM_Start_DMA+0x434>)
 801190e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8011914:	6879      	ldr	r1, [r7, #4]
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	3338      	adds	r3, #56	@ 0x38
 801191c:	461a      	mov	r2, r3
 801191e:	887b      	ldrh	r3, [r7, #2]
 8011920:	f7f7 fd4e 	bl	80093c0 <HAL_DMA_Start_IT>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	d001      	beq.n	801192e <HAL_TIM_PWM_Start_DMA+0x276>
 801192a:	2301      	movs	r3, #1
 801192c:	e0d6      	b.n	8011adc <HAL_TIM_PWM_Start_DMA+0x424>
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	68da      	ldr	r2, [r3, #12]
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801193c:	60da      	str	r2, [r3, #12]
 801193e:	e04a      	b.n	80119d6 <HAL_TIM_PWM_Start_DMA+0x31e>
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011944:	4a67      	ldr	r2, [pc, #412]	@ (8011ae4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8011946:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801194c:	4a66      	ldr	r2, [pc, #408]	@ (8011ae8 <HAL_TIM_PWM_Start_DMA+0x430>)
 801194e:	641a      	str	r2, [r3, #64]	@ 0x40
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011954:	4a65      	ldr	r2, [pc, #404]	@ (8011aec <HAL_TIM_PWM_Start_DMA+0x434>)
 8011956:	64da      	str	r2, [r3, #76]	@ 0x4c
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801195c:	6879      	ldr	r1, [r7, #4]
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	333c      	adds	r3, #60	@ 0x3c
 8011964:	461a      	mov	r2, r3
 8011966:	887b      	ldrh	r3, [r7, #2]
 8011968:	f7f7 fd2a 	bl	80093c0 <HAL_DMA_Start_IT>
 801196c:	4603      	mov	r3, r0
 801196e:	2b00      	cmp	r3, #0
 8011970:	d001      	beq.n	8011976 <HAL_TIM_PWM_Start_DMA+0x2be>
 8011972:	2301      	movs	r3, #1
 8011974:	e0b2      	b.n	8011adc <HAL_TIM_PWM_Start_DMA+0x424>
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	68da      	ldr	r2, [r3, #12]
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011984:	60da      	str	r2, [r3, #12]
 8011986:	e026      	b.n	80119d6 <HAL_TIM_PWM_Start_DMA+0x31e>
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801198c:	4a55      	ldr	r2, [pc, #340]	@ (8011ae4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801198e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011994:	4a54      	ldr	r2, [pc, #336]	@ (8011ae8 <HAL_TIM_PWM_Start_DMA+0x430>)
 8011996:	641a      	str	r2, [r3, #64]	@ 0x40
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801199c:	4a53      	ldr	r2, [pc, #332]	@ (8011aec <HAL_TIM_PWM_Start_DMA+0x434>)
 801199e:	64da      	str	r2, [r3, #76]	@ 0x4c
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80119a4:	6879      	ldr	r1, [r7, #4]
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	3340      	adds	r3, #64	@ 0x40
 80119ac:	461a      	mov	r2, r3
 80119ae:	887b      	ldrh	r3, [r7, #2]
 80119b0:	f7f7 fd06 	bl	80093c0 <HAL_DMA_Start_IT>
 80119b4:	4603      	mov	r3, r0
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d001      	beq.n	80119be <HAL_TIM_PWM_Start_DMA+0x306>
 80119ba:	2301      	movs	r3, #1
 80119bc:	e08e      	b.n	8011adc <HAL_TIM_PWM_Start_DMA+0x424>
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	68da      	ldr	r2, [r3, #12]
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80119cc:	60da      	str	r2, [r3, #12]
 80119ce:	e002      	b.n	80119d6 <HAL_TIM_PWM_Start_DMA+0x31e>
 80119d0:	2301      	movs	r3, #1
 80119d2:	75fb      	strb	r3, [r7, #23]
 80119d4:	bf00      	nop
 80119d6:	7dfb      	ldrb	r3, [r7, #23]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d17e      	bne.n	8011ada <HAL_TIM_PWM_Start_DMA+0x422>
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2201      	movs	r2, #1
 80119e2:	68b9      	ldr	r1, [r7, #8]
 80119e4:	4618      	mov	r0, r3
 80119e6:	f001 f8e3 	bl	8012bb0 <TIM_CCxChannelCmd>
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	4a40      	ldr	r2, [pc, #256]	@ (8011af0 <HAL_TIM_PWM_Start_DMA+0x438>)
 80119f0:	4293      	cmp	r3, r2
 80119f2:	d013      	beq.n	8011a1c <HAL_TIM_PWM_Start_DMA+0x364>
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	4a3e      	ldr	r2, [pc, #248]	@ (8011af4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80119fa:	4293      	cmp	r3, r2
 80119fc:	d00e      	beq.n	8011a1c <HAL_TIM_PWM_Start_DMA+0x364>
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	4a3d      	ldr	r2, [pc, #244]	@ (8011af8 <HAL_TIM_PWM_Start_DMA+0x440>)
 8011a04:	4293      	cmp	r3, r2
 8011a06:	d009      	beq.n	8011a1c <HAL_TIM_PWM_Start_DMA+0x364>
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	4a3b      	ldr	r2, [pc, #236]	@ (8011afc <HAL_TIM_PWM_Start_DMA+0x444>)
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	d004      	beq.n	8011a1c <HAL_TIM_PWM_Start_DMA+0x364>
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	4a3a      	ldr	r2, [pc, #232]	@ (8011b00 <HAL_TIM_PWM_Start_DMA+0x448>)
 8011a18:	4293      	cmp	r3, r2
 8011a1a:	d101      	bne.n	8011a20 <HAL_TIM_PWM_Start_DMA+0x368>
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	e000      	b.n	8011a22 <HAL_TIM_PWM_Start_DMA+0x36a>
 8011a20:	2300      	movs	r3, #0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d007      	beq.n	8011a36 <HAL_TIM_PWM_Start_DMA+0x37e>
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011a34:	645a      	str	r2, [r3, #68]	@ 0x44
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8011af0 <HAL_TIM_PWM_Start_DMA+0x438>)
 8011a3c:	4293      	cmp	r3, r2
 8011a3e:	d02c      	beq.n	8011a9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a48:	d027      	beq.n	8011a9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8011b04 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8011a50:	4293      	cmp	r3, r2
 8011a52:	d022      	beq.n	8011a9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	4a2b      	ldr	r2, [pc, #172]	@ (8011b08 <HAL_TIM_PWM_Start_DMA+0x450>)
 8011a5a:	4293      	cmp	r3, r2
 8011a5c:	d01d      	beq.n	8011a9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	4a2a      	ldr	r2, [pc, #168]	@ (8011b0c <HAL_TIM_PWM_Start_DMA+0x454>)
 8011a64:	4293      	cmp	r3, r2
 8011a66:	d018      	beq.n	8011a9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	4a21      	ldr	r2, [pc, #132]	@ (8011af4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d013      	beq.n	8011a9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	4a26      	ldr	r2, [pc, #152]	@ (8011b10 <HAL_TIM_PWM_Start_DMA+0x458>)
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	d00e      	beq.n	8011a9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	4a1d      	ldr	r2, [pc, #116]	@ (8011af8 <HAL_TIM_PWM_Start_DMA+0x440>)
 8011a82:	4293      	cmp	r3, r2
 8011a84:	d009      	beq.n	8011a9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	4a22      	ldr	r2, [pc, #136]	@ (8011b14 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	d004      	beq.n	8011a9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	4a20      	ldr	r2, [pc, #128]	@ (8011b18 <HAL_TIM_PWM_Start_DMA+0x460>)
 8011a96:	4293      	cmp	r3, r2
 8011a98:	d115      	bne.n	8011ac6 <HAL_TIM_PWM_Start_DMA+0x40e>
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	689a      	ldr	r2, [r3, #8]
 8011aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8011b1c <HAL_TIM_PWM_Start_DMA+0x464>)
 8011aa2:	4013      	ands	r3, r2
 8011aa4:	613b      	str	r3, [r7, #16]
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	2b06      	cmp	r3, #6
 8011aaa:	d015      	beq.n	8011ad8 <HAL_TIM_PWM_Start_DMA+0x420>
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011ab2:	d011      	beq.n	8011ad8 <HAL_TIM_PWM_Start_DMA+0x420>
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	681a      	ldr	r2, [r3, #0]
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	f042 0201 	orr.w	r2, r2, #1
 8011ac2:	601a      	str	r2, [r3, #0]
 8011ac4:	e008      	b.n	8011ad8 <HAL_TIM_PWM_Start_DMA+0x420>
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	f042 0201 	orr.w	r2, r2, #1
 8011ad4:	601a      	str	r2, [r3, #0]
 8011ad6:	e000      	b.n	8011ada <HAL_TIM_PWM_Start_DMA+0x422>
 8011ad8:	bf00      	nop
 8011ada:	7dfb      	ldrb	r3, [r7, #23]
 8011adc:	4618      	mov	r0, r3
 8011ade:	3718      	adds	r7, #24
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	08012253 	.word	0x08012253
 8011ae8:	080122fb 	.word	0x080122fb
 8011aec:	080121c1 	.word	0x080121c1
 8011af0:	40010000 	.word	0x40010000
 8011af4:	40010400 	.word	0x40010400
 8011af8:	40014000 	.word	0x40014000
 8011afc:	40014400 	.word	0x40014400
 8011b00:	40014800 	.word	0x40014800
 8011b04:	40000400 	.word	0x40000400
 8011b08:	40000800 	.word	0x40000800
 8011b0c:	40000c00 	.word	0x40000c00
 8011b10:	40001800 	.word	0x40001800
 8011b14:	4000e000 	.word	0x4000e000
 8011b18:	4000e400 	.word	0x4000e400
 8011b1c:	00010007 	.word	0x00010007

08011b20 <HAL_TIM_IRQHandler>:
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b084      	sub	sp, #16
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	68db      	ldr	r3, [r3, #12]
 8011b2e:	60fb      	str	r3, [r7, #12]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	691b      	ldr	r3, [r3, #16]
 8011b36:	60bb      	str	r3, [r7, #8]
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	f003 0302 	and.w	r3, r3, #2
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d020      	beq.n	8011b84 <HAL_TIM_IRQHandler+0x64>
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	f003 0302 	and.w	r3, r3, #2
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d01b      	beq.n	8011b84 <HAL_TIM_IRQHandler+0x64>
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	f06f 0202 	mvn.w	r2, #2
 8011b54:	611a      	str	r2, [r3, #16]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2201      	movs	r2, #1
 8011b5a:	771a      	strb	r2, [r3, #28]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	699b      	ldr	r3, [r3, #24]
 8011b62:	f003 0303 	and.w	r3, r3, #3
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d003      	beq.n	8011b72 <HAL_TIM_IRQHandler+0x52>
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f000 faf6 	bl	801215c <HAL_TIM_IC_CaptureCallback>
 8011b70:	e005      	b.n	8011b7e <HAL_TIM_IRQHandler+0x5e>
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f000 fae8 	bl	8012148 <HAL_TIM_OC_DelayElapsedCallback>
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f000 faf9 	bl	8012170 <HAL_TIM_PWM_PulseFinishedCallback>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2200      	movs	r2, #0
 8011b82:	771a      	strb	r2, [r3, #28]
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	f003 0304 	and.w	r3, r3, #4
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d020      	beq.n	8011bd0 <HAL_TIM_IRQHandler+0xb0>
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	f003 0304 	and.w	r3, r3, #4
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d01b      	beq.n	8011bd0 <HAL_TIM_IRQHandler+0xb0>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	f06f 0204 	mvn.w	r2, #4
 8011ba0:	611a      	str	r2, [r3, #16]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2202      	movs	r2, #2
 8011ba6:	771a      	strb	r2, [r3, #28]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	699b      	ldr	r3, [r3, #24]
 8011bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d003      	beq.n	8011bbe <HAL_TIM_IRQHandler+0x9e>
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f000 fad0 	bl	801215c <HAL_TIM_IC_CaptureCallback>
 8011bbc:	e005      	b.n	8011bca <HAL_TIM_IRQHandler+0xaa>
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f000 fac2 	bl	8012148 <HAL_TIM_OC_DelayElapsedCallback>
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f000 fad3 	bl	8012170 <HAL_TIM_PWM_PulseFinishedCallback>
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	771a      	strb	r2, [r3, #28]
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	f003 0308 	and.w	r3, r3, #8
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d020      	beq.n	8011c1c <HAL_TIM_IRQHandler+0xfc>
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	f003 0308 	and.w	r3, r3, #8
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d01b      	beq.n	8011c1c <HAL_TIM_IRQHandler+0xfc>
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	f06f 0208 	mvn.w	r2, #8
 8011bec:	611a      	str	r2, [r3, #16]
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2204      	movs	r2, #4
 8011bf2:	771a      	strb	r2, [r3, #28]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	69db      	ldr	r3, [r3, #28]
 8011bfa:	f003 0303 	and.w	r3, r3, #3
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d003      	beq.n	8011c0a <HAL_TIM_IRQHandler+0xea>
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f000 faaa 	bl	801215c <HAL_TIM_IC_CaptureCallback>
 8011c08:	e005      	b.n	8011c16 <HAL_TIM_IRQHandler+0xf6>
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f000 fa9c 	bl	8012148 <HAL_TIM_OC_DelayElapsedCallback>
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f000 faad 	bl	8012170 <HAL_TIM_PWM_PulseFinishedCallback>
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	771a      	strb	r2, [r3, #28]
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	f003 0310 	and.w	r3, r3, #16
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d020      	beq.n	8011c68 <HAL_TIM_IRQHandler+0x148>
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	f003 0310 	and.w	r3, r3, #16
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d01b      	beq.n	8011c68 <HAL_TIM_IRQHandler+0x148>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	f06f 0210 	mvn.w	r2, #16
 8011c38:	611a      	str	r2, [r3, #16]
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2208      	movs	r2, #8
 8011c3e:	771a      	strb	r2, [r3, #28]
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	69db      	ldr	r3, [r3, #28]
 8011c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d003      	beq.n	8011c56 <HAL_TIM_IRQHandler+0x136>
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f000 fa84 	bl	801215c <HAL_TIM_IC_CaptureCallback>
 8011c54:	e005      	b.n	8011c62 <HAL_TIM_IRQHandler+0x142>
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f000 fa76 	bl	8012148 <HAL_TIM_OC_DelayElapsedCallback>
 8011c5c:	6878      	ldr	r0, [r7, #4]
 8011c5e:	f000 fa87 	bl	8012170 <HAL_TIM_PWM_PulseFinishedCallback>
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2200      	movs	r2, #0
 8011c66:	771a      	strb	r2, [r3, #28]
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	f003 0301 	and.w	r3, r3, #1
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00c      	beq.n	8011c8c <HAL_TIM_IRQHandler+0x16c>
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f003 0301 	and.w	r3, r3, #1
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d007      	beq.n	8011c8c <HAL_TIM_IRQHandler+0x16c>
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	f06f 0201 	mvn.w	r2, #1
 8011c84:	611a      	str	r2, [r3, #16]
 8011c86:	6878      	ldr	r0, [r7, #4]
 8011c88:	f7ef fac0 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d104      	bne.n	8011ca0 <HAL_TIM_IRQHandler+0x180>
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d00c      	beq.n	8011cba <HAL_TIM_IRQHandler+0x19a>
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d007      	beq.n	8011cba <HAL_TIM_IRQHandler+0x19a>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8011cb2:	611a      	str	r2, [r3, #16]
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f001 f847 	bl	8012d48 <HAL_TIMEx_BreakCallback>
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d00c      	beq.n	8011cde <HAL_TIM_IRQHandler+0x1be>
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d007      	beq.n	8011cde <HAL_TIM_IRQHandler+0x1be>
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8011cd6:	611a      	str	r2, [r3, #16]
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f001 f83f 	bl	8012d5c <HAL_TIMEx_Break2Callback>
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d00c      	beq.n	8011d02 <HAL_TIM_IRQHandler+0x1e2>
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d007      	beq.n	8011d02 <HAL_TIM_IRQHandler+0x1e2>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011cfa:	611a      	str	r2, [r3, #16]
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f000 fa4b 	bl	8012198 <HAL_TIM_TriggerCallback>
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	f003 0320 	and.w	r3, r3, #32
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d00c      	beq.n	8011d26 <HAL_TIM_IRQHandler+0x206>
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	f003 0320 	and.w	r3, r3, #32
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d007      	beq.n	8011d26 <HAL_TIM_IRQHandler+0x206>
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	f06f 0220 	mvn.w	r2, #32
 8011d1e:	611a      	str	r2, [r3, #16]
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f001 f807 	bl	8012d34 <HAL_TIMEx_CommutCallback>
 8011d26:	bf00      	nop
 8011d28:	3710      	adds	r7, #16
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
	...

08011d30 <HAL_TIM_PWM_ConfigChannel>:
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b086      	sub	sp, #24
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	607a      	str	r2, [r7, #4]
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	75fb      	strb	r3, [r7, #23]
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011d46:	2b01      	cmp	r3, #1
 8011d48:	d101      	bne.n	8011d4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011d4a:	2302      	movs	r3, #2
 8011d4c:	e0ff      	b.n	8011f4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2201      	movs	r2, #1
 8011d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2b14      	cmp	r3, #20
 8011d5a:	f200 80f0 	bhi.w	8011f3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8011d64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d64:	08011db9 	.word	0x08011db9
 8011d68:	08011f3f 	.word	0x08011f3f
 8011d6c:	08011f3f 	.word	0x08011f3f
 8011d70:	08011f3f 	.word	0x08011f3f
 8011d74:	08011df9 	.word	0x08011df9
 8011d78:	08011f3f 	.word	0x08011f3f
 8011d7c:	08011f3f 	.word	0x08011f3f
 8011d80:	08011f3f 	.word	0x08011f3f
 8011d84:	08011e3b 	.word	0x08011e3b
 8011d88:	08011f3f 	.word	0x08011f3f
 8011d8c:	08011f3f 	.word	0x08011f3f
 8011d90:	08011f3f 	.word	0x08011f3f
 8011d94:	08011e7b 	.word	0x08011e7b
 8011d98:	08011f3f 	.word	0x08011f3f
 8011d9c:	08011f3f 	.word	0x08011f3f
 8011da0:	08011f3f 	.word	0x08011f3f
 8011da4:	08011ebd 	.word	0x08011ebd
 8011da8:	08011f3f 	.word	0x08011f3f
 8011dac:	08011f3f 	.word	0x08011f3f
 8011db0:	08011f3f 	.word	0x08011f3f
 8011db4:	08011efd 	.word	0x08011efd
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	68b9      	ldr	r1, [r7, #8]
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f000 fb82 	bl	80124c8 <TIM_OC1_SetConfig>
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	699a      	ldr	r2, [r3, #24]
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	f042 0208 	orr.w	r2, r2, #8
 8011dd2:	619a      	str	r2, [r3, #24]
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	699a      	ldr	r2, [r3, #24]
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f022 0204 	bic.w	r2, r2, #4
 8011de2:	619a      	str	r2, [r3, #24]
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	6999      	ldr	r1, [r3, #24]
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	691a      	ldr	r2, [r3, #16]
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	430a      	orrs	r2, r1
 8011df4:	619a      	str	r2, [r3, #24]
 8011df6:	e0a5      	b.n	8011f44 <HAL_TIM_PWM_ConfigChannel+0x214>
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	68b9      	ldr	r1, [r7, #8]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f000 fbf2 	bl	80125e8 <TIM_OC2_SetConfig>
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	699a      	ldr	r2, [r3, #24]
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011e12:	619a      	str	r2, [r3, #24]
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	699a      	ldr	r2, [r3, #24]
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011e22:	619a      	str	r2, [r3, #24]
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	6999      	ldr	r1, [r3, #24]
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	691b      	ldr	r3, [r3, #16]
 8011e2e:	021a      	lsls	r2, r3, #8
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	430a      	orrs	r2, r1
 8011e36:	619a      	str	r2, [r3, #24]
 8011e38:	e084      	b.n	8011f44 <HAL_TIM_PWM_ConfigChannel+0x214>
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	68b9      	ldr	r1, [r7, #8]
 8011e40:	4618      	mov	r0, r3
 8011e42:	f000 fc5b 	bl	80126fc <TIM_OC3_SetConfig>
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	69da      	ldr	r2, [r3, #28]
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	f042 0208 	orr.w	r2, r2, #8
 8011e54:	61da      	str	r2, [r3, #28]
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	69da      	ldr	r2, [r3, #28]
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	f022 0204 	bic.w	r2, r2, #4
 8011e64:	61da      	str	r2, [r3, #28]
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	69d9      	ldr	r1, [r3, #28]
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	691a      	ldr	r2, [r3, #16]
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	430a      	orrs	r2, r1
 8011e76:	61da      	str	r2, [r3, #28]
 8011e78:	e064      	b.n	8011f44 <HAL_TIM_PWM_ConfigChannel+0x214>
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	68b9      	ldr	r1, [r7, #8]
 8011e80:	4618      	mov	r0, r3
 8011e82:	f000 fcc3 	bl	801280c <TIM_OC4_SetConfig>
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	69da      	ldr	r2, [r3, #28]
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011e94:	61da      	str	r2, [r3, #28]
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	69da      	ldr	r2, [r3, #28]
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011ea4:	61da      	str	r2, [r3, #28]
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	69d9      	ldr	r1, [r3, #28]
 8011eac:	68bb      	ldr	r3, [r7, #8]
 8011eae:	691b      	ldr	r3, [r3, #16]
 8011eb0:	021a      	lsls	r2, r3, #8
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	430a      	orrs	r2, r1
 8011eb8:	61da      	str	r2, [r3, #28]
 8011eba:	e043      	b.n	8011f44 <HAL_TIM_PWM_ConfigChannel+0x214>
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	68b9      	ldr	r1, [r7, #8]
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f000 fd0c 	bl	80128e0 <TIM_OC5_SetConfig>
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	f042 0208 	orr.w	r2, r2, #8
 8011ed6:	655a      	str	r2, [r3, #84]	@ 0x54
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	f022 0204 	bic.w	r2, r2, #4
 8011ee6:	655a      	str	r2, [r3, #84]	@ 0x54
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	691a      	ldr	r2, [r3, #16]
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	430a      	orrs	r2, r1
 8011ef8:	655a      	str	r2, [r3, #84]	@ 0x54
 8011efa:	e023      	b.n	8011f44 <HAL_TIM_PWM_ConfigChannel+0x214>
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	68b9      	ldr	r1, [r7, #8]
 8011f02:	4618      	mov	r0, r3
 8011f04:	f000 fd50 	bl	80129a8 <TIM_OC6_SetConfig>
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011f16:	655a      	str	r2, [r3, #84]	@ 0x54
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011f26:	655a      	str	r2, [r3, #84]	@ 0x54
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	691b      	ldr	r3, [r3, #16]
 8011f32:	021a      	lsls	r2, r3, #8
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	430a      	orrs	r2, r1
 8011f3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8011f3c:	e002      	b.n	8011f44 <HAL_TIM_PWM_ConfigChannel+0x214>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	75fb      	strb	r3, [r7, #23]
 8011f42:	bf00      	nop
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2200      	movs	r2, #0
 8011f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011f4c:	7dfb      	ldrb	r3, [r7, #23]
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3718      	adds	r7, #24
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}
 8011f56:	bf00      	nop

08011f58 <HAL_TIM_ConfigClockSource>:
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
 8011f62:	2300      	movs	r3, #0
 8011f64:	73fb      	strb	r3, [r7, #15]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011f6c:	2b01      	cmp	r3, #1
 8011f6e:	d101      	bne.n	8011f74 <HAL_TIM_ConfigClockSource+0x1c>
 8011f70:	2302      	movs	r3, #2
 8011f72:	e0dc      	b.n	801212e <HAL_TIM_ConfigClockSource+0x1d6>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2201      	movs	r2, #1
 8011f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2202      	movs	r2, #2
 8011f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	689b      	ldr	r3, [r3, #8]
 8011f8a:	60bb      	str	r3, [r7, #8]
 8011f8c:	68ba      	ldr	r2, [r7, #8]
 8011f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8012138 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011f90:	4013      	ands	r3, r2
 8011f92:	60bb      	str	r3, [r7, #8]
 8011f94:	68bb      	ldr	r3, [r7, #8]
 8011f96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011f9a:	60bb      	str	r3, [r7, #8]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	68ba      	ldr	r2, [r7, #8]
 8011fa2:	609a      	str	r2, [r3, #8]
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	4a64      	ldr	r2, [pc, #400]	@ (801213c <HAL_TIM_ConfigClockSource+0x1e4>)
 8011faa:	4293      	cmp	r3, r2
 8011fac:	f000 80a9 	beq.w	8012102 <HAL_TIM_ConfigClockSource+0x1aa>
 8011fb0:	4a62      	ldr	r2, [pc, #392]	@ (801213c <HAL_TIM_ConfigClockSource+0x1e4>)
 8011fb2:	4293      	cmp	r3, r2
 8011fb4:	f200 80ae 	bhi.w	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fb8:	4a61      	ldr	r2, [pc, #388]	@ (8012140 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	f000 80a1 	beq.w	8012102 <HAL_TIM_ConfigClockSource+0x1aa>
 8011fc0:	4a5f      	ldr	r2, [pc, #380]	@ (8012140 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	f200 80a6 	bhi.w	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fc8:	4a5e      	ldr	r2, [pc, #376]	@ (8012144 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	f000 8099 	beq.w	8012102 <HAL_TIM_ConfigClockSource+0x1aa>
 8011fd0:	4a5c      	ldr	r2, [pc, #368]	@ (8012144 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	f200 809e 	bhi.w	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8011fdc:	f000 8091 	beq.w	8012102 <HAL_TIM_ConfigClockSource+0x1aa>
 8011fe0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8011fe4:	f200 8096 	bhi.w	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011fec:	f000 8089 	beq.w	8012102 <HAL_TIM_ConfigClockSource+0x1aa>
 8011ff0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011ff4:	f200 808e 	bhi.w	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 8011ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011ffc:	d03e      	beq.n	801207c <HAL_TIM_ConfigClockSource+0x124>
 8011ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012002:	f200 8087 	bhi.w	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 8012006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801200a:	f000 8086 	beq.w	801211a <HAL_TIM_ConfigClockSource+0x1c2>
 801200e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012012:	d87f      	bhi.n	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 8012014:	2b70      	cmp	r3, #112	@ 0x70
 8012016:	d01a      	beq.n	801204e <HAL_TIM_ConfigClockSource+0xf6>
 8012018:	2b70      	cmp	r3, #112	@ 0x70
 801201a:	d87b      	bhi.n	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 801201c:	2b60      	cmp	r3, #96	@ 0x60
 801201e:	d050      	beq.n	80120c2 <HAL_TIM_ConfigClockSource+0x16a>
 8012020:	2b60      	cmp	r3, #96	@ 0x60
 8012022:	d877      	bhi.n	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 8012024:	2b50      	cmp	r3, #80	@ 0x50
 8012026:	d03c      	beq.n	80120a2 <HAL_TIM_ConfigClockSource+0x14a>
 8012028:	2b50      	cmp	r3, #80	@ 0x50
 801202a:	d873      	bhi.n	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 801202c:	2b40      	cmp	r3, #64	@ 0x40
 801202e:	d058      	beq.n	80120e2 <HAL_TIM_ConfigClockSource+0x18a>
 8012030:	2b40      	cmp	r3, #64	@ 0x40
 8012032:	d86f      	bhi.n	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 8012034:	2b30      	cmp	r3, #48	@ 0x30
 8012036:	d064      	beq.n	8012102 <HAL_TIM_ConfigClockSource+0x1aa>
 8012038:	2b30      	cmp	r3, #48	@ 0x30
 801203a:	d86b      	bhi.n	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 801203c:	2b20      	cmp	r3, #32
 801203e:	d060      	beq.n	8012102 <HAL_TIM_ConfigClockSource+0x1aa>
 8012040:	2b20      	cmp	r3, #32
 8012042:	d867      	bhi.n	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 8012044:	2b00      	cmp	r3, #0
 8012046:	d05c      	beq.n	8012102 <HAL_TIM_ConfigClockSource+0x1aa>
 8012048:	2b10      	cmp	r3, #16
 801204a:	d05a      	beq.n	8012102 <HAL_TIM_ConfigClockSource+0x1aa>
 801204c:	e062      	b.n	8012114 <HAL_TIM_ConfigClockSource+0x1bc>
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6818      	ldr	r0, [r3, #0]
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	6899      	ldr	r1, [r3, #8]
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	685a      	ldr	r2, [r3, #4]
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	f000 fd87 	bl	8012b70 <TIM_ETR_SetConfig>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	689b      	ldr	r3, [r3, #8]
 8012068:	60bb      	str	r3, [r7, #8]
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012070:	60bb      	str	r3, [r7, #8]
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	68ba      	ldr	r2, [r7, #8]
 8012078:	609a      	str	r2, [r3, #8]
 801207a:	e04f      	b.n	801211c <HAL_TIM_ConfigClockSource+0x1c4>
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6818      	ldr	r0, [r3, #0]
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	6899      	ldr	r1, [r3, #8]
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	685a      	ldr	r2, [r3, #4]
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	68db      	ldr	r3, [r3, #12]
 801208c:	f000 fd70 	bl	8012b70 <TIM_ETR_SetConfig>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	689a      	ldr	r2, [r3, #8]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801209e:	609a      	str	r2, [r3, #8]
 80120a0:	e03c      	b.n	801211c <HAL_TIM_ConfigClockSource+0x1c4>
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6818      	ldr	r0, [r3, #0]
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	6859      	ldr	r1, [r3, #4]
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	461a      	mov	r2, r3
 80120b0:	f000 fce0 	bl	8012a74 <TIM_TI1_ConfigInputStage>
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	2150      	movs	r1, #80	@ 0x50
 80120ba:	4618      	mov	r0, r3
 80120bc:	f000 fd3a 	bl	8012b34 <TIM_ITRx_SetConfig>
 80120c0:	e02c      	b.n	801211c <HAL_TIM_ConfigClockSource+0x1c4>
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6818      	ldr	r0, [r3, #0]
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	6859      	ldr	r1, [r3, #4]
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	68db      	ldr	r3, [r3, #12]
 80120ce:	461a      	mov	r2, r3
 80120d0:	f000 fcff 	bl	8012ad2 <TIM_TI2_ConfigInputStage>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2160      	movs	r1, #96	@ 0x60
 80120da:	4618      	mov	r0, r3
 80120dc:	f000 fd2a 	bl	8012b34 <TIM_ITRx_SetConfig>
 80120e0:	e01c      	b.n	801211c <HAL_TIM_ConfigClockSource+0x1c4>
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6818      	ldr	r0, [r3, #0]
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	6859      	ldr	r1, [r3, #4]
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	68db      	ldr	r3, [r3, #12]
 80120ee:	461a      	mov	r2, r3
 80120f0:	f000 fcc0 	bl	8012a74 <TIM_TI1_ConfigInputStage>
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	2140      	movs	r1, #64	@ 0x40
 80120fa:	4618      	mov	r0, r3
 80120fc:	f000 fd1a 	bl	8012b34 <TIM_ITRx_SetConfig>
 8012100:	e00c      	b.n	801211c <HAL_TIM_ConfigClockSource+0x1c4>
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681a      	ldr	r2, [r3, #0]
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	4619      	mov	r1, r3
 801210c:	4610      	mov	r0, r2
 801210e:	f000 fd11 	bl	8012b34 <TIM_ITRx_SetConfig>
 8012112:	e003      	b.n	801211c <HAL_TIM_ConfigClockSource+0x1c4>
 8012114:	2301      	movs	r3, #1
 8012116:	73fb      	strb	r3, [r7, #15]
 8012118:	e000      	b.n	801211c <HAL_TIM_ConfigClockSource+0x1c4>
 801211a:	bf00      	nop
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2201      	movs	r2, #1
 8012120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2200      	movs	r2, #0
 8012128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801212c:	7bfb      	ldrb	r3, [r7, #15]
 801212e:	4618      	mov	r0, r3
 8012130:	3710      	adds	r7, #16
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop
 8012138:	ffceff88 	.word	0xffceff88
 801213c:	00100040 	.word	0x00100040
 8012140:	00100030 	.word	0x00100030
 8012144:	00100020 	.word	0x00100020

08012148 <HAL_TIM_OC_DelayElapsedCallback>:
 8012148:	b480      	push	{r7}
 801214a:	b083      	sub	sp, #12
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	bf00      	nop
 8012152:	370c      	adds	r7, #12
 8012154:	46bd      	mov	sp, r7
 8012156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215a:	4770      	bx	lr

0801215c <HAL_TIM_IC_CaptureCallback>:
 801215c:	b480      	push	{r7}
 801215e:	b083      	sub	sp, #12
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	bf00      	nop
 8012166:	370c      	adds	r7, #12
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr

08012170 <HAL_TIM_PWM_PulseFinishedCallback>:
 8012170:	b480      	push	{r7}
 8012172:	b083      	sub	sp, #12
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	bf00      	nop
 801217a:	370c      	adds	r7, #12
 801217c:	46bd      	mov	sp, r7
 801217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012182:	4770      	bx	lr

08012184 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8012184:	b480      	push	{r7}
 8012186:	b083      	sub	sp, #12
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
 801218c:	bf00      	nop
 801218e:	370c      	adds	r7, #12
 8012190:	46bd      	mov	sp, r7
 8012192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012196:	4770      	bx	lr

08012198 <HAL_TIM_TriggerCallback>:
 8012198:	b480      	push	{r7}
 801219a:	b083      	sub	sp, #12
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	bf00      	nop
 80121a2:	370c      	adds	r7, #12
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr

080121ac <HAL_TIM_ErrorCallback>:
 80121ac:	b480      	push	{r7}
 80121ae:	b083      	sub	sp, #12
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	bf00      	nop
 80121b6:	370c      	adds	r7, #12
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr

080121c0 <TIM_DMAError>:
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121cc:	60fb      	str	r3, [r7, #12]
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121d2:	687a      	ldr	r2, [r7, #4]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d107      	bne.n	80121e8 <TIM_DMAError+0x28>
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	2201      	movs	r2, #1
 80121dc:	771a      	strb	r2, [r3, #28]
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2201      	movs	r2, #1
 80121e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80121e6:	e02a      	b.n	801223e <TIM_DMAError+0x7e>
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d107      	bne.n	8012202 <TIM_DMAError+0x42>
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2202      	movs	r2, #2
 80121f6:	771a      	strb	r2, [r3, #28]
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	2201      	movs	r2, #1
 80121fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012200:	e01d      	b.n	801223e <TIM_DMAError+0x7e>
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012206:	687a      	ldr	r2, [r7, #4]
 8012208:	429a      	cmp	r2, r3
 801220a:	d107      	bne.n	801221c <TIM_DMAError+0x5c>
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	2204      	movs	r2, #4
 8012210:	771a      	strb	r2, [r3, #28]
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2201      	movs	r2, #1
 8012216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801221a:	e010      	b.n	801223e <TIM_DMAError+0x7e>
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012220:	687a      	ldr	r2, [r7, #4]
 8012222:	429a      	cmp	r2, r3
 8012224:	d107      	bne.n	8012236 <TIM_DMAError+0x76>
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2208      	movs	r2, #8
 801222a:	771a      	strb	r2, [r3, #28]
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	2201      	movs	r2, #1
 8012230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012234:	e003      	b.n	801223e <TIM_DMAError+0x7e>
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	2201      	movs	r2, #1
 801223a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801223e:	68f8      	ldr	r0, [r7, #12]
 8012240:	f7ff ffb4 	bl	80121ac <HAL_TIM_ErrorCallback>
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2200      	movs	r2, #0
 8012248:	771a      	strb	r2, [r3, #28]
 801224a:	bf00      	nop
 801224c:	3710      	adds	r7, #16
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}

08012252 <TIM_DMADelayPulseCplt>:
 8012252:	b580      	push	{r7, lr}
 8012254:	b084      	sub	sp, #16
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801225e:	60fb      	str	r3, [r7, #12]
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012264:	687a      	ldr	r2, [r7, #4]
 8012266:	429a      	cmp	r2, r3
 8012268:	d10b      	bne.n	8012282 <TIM_DMADelayPulseCplt+0x30>
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	2201      	movs	r2, #1
 801226e:	771a      	strb	r2, [r3, #28]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	69db      	ldr	r3, [r3, #28]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d136      	bne.n	80122e6 <TIM_DMADelayPulseCplt+0x94>
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	2201      	movs	r2, #1
 801227c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012280:	e031      	b.n	80122e6 <TIM_DMADelayPulseCplt+0x94>
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	429a      	cmp	r2, r3
 801228a:	d10b      	bne.n	80122a4 <TIM_DMADelayPulseCplt+0x52>
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2202      	movs	r2, #2
 8012290:	771a      	strb	r2, [r3, #28]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	69db      	ldr	r3, [r3, #28]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d125      	bne.n	80122e6 <TIM_DMADelayPulseCplt+0x94>
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	2201      	movs	r2, #1
 801229e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80122a2:	e020      	b.n	80122e6 <TIM_DMADelayPulseCplt+0x94>
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122a8:	687a      	ldr	r2, [r7, #4]
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d10b      	bne.n	80122c6 <TIM_DMADelayPulseCplt+0x74>
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2204      	movs	r2, #4
 80122b2:	771a      	strb	r2, [r3, #28]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	69db      	ldr	r3, [r3, #28]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d114      	bne.n	80122e6 <TIM_DMADelayPulseCplt+0x94>
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	2201      	movs	r2, #1
 80122c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80122c4:	e00f      	b.n	80122e6 <TIM_DMADelayPulseCplt+0x94>
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122ca:	687a      	ldr	r2, [r7, #4]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d10a      	bne.n	80122e6 <TIM_DMADelayPulseCplt+0x94>
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2208      	movs	r2, #8
 80122d4:	771a      	strb	r2, [r3, #28]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	69db      	ldr	r3, [r3, #28]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d103      	bne.n	80122e6 <TIM_DMADelayPulseCplt+0x94>
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	2201      	movs	r2, #1
 80122e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80122e6:	68f8      	ldr	r0, [r7, #12]
 80122e8:	f7ff ff42 	bl	8012170 <HAL_TIM_PWM_PulseFinishedCallback>
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2200      	movs	r2, #0
 80122f0:	771a      	strb	r2, [r3, #28]
 80122f2:	bf00      	nop
 80122f4:	3710      	adds	r7, #16
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}

080122fa <TIM_DMADelayPulseHalfCplt>:
 80122fa:	b580      	push	{r7, lr}
 80122fc:	b084      	sub	sp, #16
 80122fe:	af00      	add	r7, sp, #0
 8012300:	6078      	str	r0, [r7, #4]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012306:	60fb      	str	r3, [r7, #12]
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801230c:	687a      	ldr	r2, [r7, #4]
 801230e:	429a      	cmp	r2, r3
 8012310:	d103      	bne.n	801231a <TIM_DMADelayPulseHalfCplt+0x20>
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	2201      	movs	r2, #1
 8012316:	771a      	strb	r2, [r3, #28]
 8012318:	e019      	b.n	801234e <TIM_DMADelayPulseHalfCplt+0x54>
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	429a      	cmp	r2, r3
 8012322:	d103      	bne.n	801232c <TIM_DMADelayPulseHalfCplt+0x32>
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2202      	movs	r2, #2
 8012328:	771a      	strb	r2, [r3, #28]
 801232a:	e010      	b.n	801234e <TIM_DMADelayPulseHalfCplt+0x54>
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012330:	687a      	ldr	r2, [r7, #4]
 8012332:	429a      	cmp	r2, r3
 8012334:	d103      	bne.n	801233e <TIM_DMADelayPulseHalfCplt+0x44>
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2204      	movs	r2, #4
 801233a:	771a      	strb	r2, [r3, #28]
 801233c:	e007      	b.n	801234e <TIM_DMADelayPulseHalfCplt+0x54>
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012342:	687a      	ldr	r2, [r7, #4]
 8012344:	429a      	cmp	r2, r3
 8012346:	d102      	bne.n	801234e <TIM_DMADelayPulseHalfCplt+0x54>
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	2208      	movs	r2, #8
 801234c:	771a      	strb	r2, [r3, #28]
 801234e:	68f8      	ldr	r0, [r7, #12]
 8012350:	f7ff ff18 	bl	8012184 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2200      	movs	r2, #0
 8012358:	771a      	strb	r2, [r3, #28]
 801235a:	bf00      	nop
 801235c:	3710      	adds	r7, #16
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}
	...

08012364 <TIM_Base_SetConfig>:
 8012364:	b480      	push	{r7}
 8012366:	b085      	sub	sp, #20
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	6039      	str	r1, [r7, #0]
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	60fb      	str	r3, [r7, #12]
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	4a4a      	ldr	r2, [pc, #296]	@ (80124a0 <TIM_Base_SetConfig+0x13c>)
 8012378:	4293      	cmp	r3, r2
 801237a:	d013      	beq.n	80123a4 <TIM_Base_SetConfig+0x40>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012382:	d00f      	beq.n	80123a4 <TIM_Base_SetConfig+0x40>
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	4a47      	ldr	r2, [pc, #284]	@ (80124a4 <TIM_Base_SetConfig+0x140>)
 8012388:	4293      	cmp	r3, r2
 801238a:	d00b      	beq.n	80123a4 <TIM_Base_SetConfig+0x40>
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	4a46      	ldr	r2, [pc, #280]	@ (80124a8 <TIM_Base_SetConfig+0x144>)
 8012390:	4293      	cmp	r3, r2
 8012392:	d007      	beq.n	80123a4 <TIM_Base_SetConfig+0x40>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	4a45      	ldr	r2, [pc, #276]	@ (80124ac <TIM_Base_SetConfig+0x148>)
 8012398:	4293      	cmp	r3, r2
 801239a:	d003      	beq.n	80123a4 <TIM_Base_SetConfig+0x40>
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	4a44      	ldr	r2, [pc, #272]	@ (80124b0 <TIM_Base_SetConfig+0x14c>)
 80123a0:	4293      	cmp	r3, r2
 80123a2:	d108      	bne.n	80123b6 <TIM_Base_SetConfig+0x52>
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80123aa:	60fb      	str	r3, [r7, #12]
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	685b      	ldr	r3, [r3, #4]
 80123b0:	68fa      	ldr	r2, [r7, #12]
 80123b2:	4313      	orrs	r3, r2
 80123b4:	60fb      	str	r3, [r7, #12]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	4a39      	ldr	r2, [pc, #228]	@ (80124a0 <TIM_Base_SetConfig+0x13c>)
 80123ba:	4293      	cmp	r3, r2
 80123bc:	d027      	beq.n	801240e <TIM_Base_SetConfig+0xaa>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80123c4:	d023      	beq.n	801240e <TIM_Base_SetConfig+0xaa>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	4a36      	ldr	r2, [pc, #216]	@ (80124a4 <TIM_Base_SetConfig+0x140>)
 80123ca:	4293      	cmp	r3, r2
 80123cc:	d01f      	beq.n	801240e <TIM_Base_SetConfig+0xaa>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	4a35      	ldr	r2, [pc, #212]	@ (80124a8 <TIM_Base_SetConfig+0x144>)
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d01b      	beq.n	801240e <TIM_Base_SetConfig+0xaa>
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	4a34      	ldr	r2, [pc, #208]	@ (80124ac <TIM_Base_SetConfig+0x148>)
 80123da:	4293      	cmp	r3, r2
 80123dc:	d017      	beq.n	801240e <TIM_Base_SetConfig+0xaa>
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	4a33      	ldr	r2, [pc, #204]	@ (80124b0 <TIM_Base_SetConfig+0x14c>)
 80123e2:	4293      	cmp	r3, r2
 80123e4:	d013      	beq.n	801240e <TIM_Base_SetConfig+0xaa>
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	4a32      	ldr	r2, [pc, #200]	@ (80124b4 <TIM_Base_SetConfig+0x150>)
 80123ea:	4293      	cmp	r3, r2
 80123ec:	d00f      	beq.n	801240e <TIM_Base_SetConfig+0xaa>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	4a31      	ldr	r2, [pc, #196]	@ (80124b8 <TIM_Base_SetConfig+0x154>)
 80123f2:	4293      	cmp	r3, r2
 80123f4:	d00b      	beq.n	801240e <TIM_Base_SetConfig+0xaa>
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	4a30      	ldr	r2, [pc, #192]	@ (80124bc <TIM_Base_SetConfig+0x158>)
 80123fa:	4293      	cmp	r3, r2
 80123fc:	d007      	beq.n	801240e <TIM_Base_SetConfig+0xaa>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	4a2f      	ldr	r2, [pc, #188]	@ (80124c0 <TIM_Base_SetConfig+0x15c>)
 8012402:	4293      	cmp	r3, r2
 8012404:	d003      	beq.n	801240e <TIM_Base_SetConfig+0xaa>
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	4a2e      	ldr	r2, [pc, #184]	@ (80124c4 <TIM_Base_SetConfig+0x160>)
 801240a:	4293      	cmp	r3, r2
 801240c:	d108      	bne.n	8012420 <TIM_Base_SetConfig+0xbc>
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012414:	60fb      	str	r3, [r7, #12]
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	68db      	ldr	r3, [r3, #12]
 801241a:	68fa      	ldr	r2, [r7, #12]
 801241c:	4313      	orrs	r3, r2
 801241e:	60fb      	str	r3, [r7, #12]
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	695b      	ldr	r3, [r3, #20]
 801242a:	4313      	orrs	r3, r2
 801242c:	60fb      	str	r3, [r7, #12]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	68fa      	ldr	r2, [r7, #12]
 8012432:	601a      	str	r2, [r3, #0]
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	689a      	ldr	r2, [r3, #8]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	681a      	ldr	r2, [r3, #0]
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	629a      	str	r2, [r3, #40]	@ 0x28
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	4a16      	ldr	r2, [pc, #88]	@ (80124a0 <TIM_Base_SetConfig+0x13c>)
 8012448:	4293      	cmp	r3, r2
 801244a:	d00f      	beq.n	801246c <TIM_Base_SetConfig+0x108>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	4a18      	ldr	r2, [pc, #96]	@ (80124b0 <TIM_Base_SetConfig+0x14c>)
 8012450:	4293      	cmp	r3, r2
 8012452:	d00b      	beq.n	801246c <TIM_Base_SetConfig+0x108>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	4a17      	ldr	r2, [pc, #92]	@ (80124b4 <TIM_Base_SetConfig+0x150>)
 8012458:	4293      	cmp	r3, r2
 801245a:	d007      	beq.n	801246c <TIM_Base_SetConfig+0x108>
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	4a16      	ldr	r2, [pc, #88]	@ (80124b8 <TIM_Base_SetConfig+0x154>)
 8012460:	4293      	cmp	r3, r2
 8012462:	d003      	beq.n	801246c <TIM_Base_SetConfig+0x108>
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	4a15      	ldr	r2, [pc, #84]	@ (80124bc <TIM_Base_SetConfig+0x158>)
 8012468:	4293      	cmp	r3, r2
 801246a:	d103      	bne.n	8012474 <TIM_Base_SetConfig+0x110>
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	691a      	ldr	r2, [r3, #16]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	631a      	str	r2, [r3, #48]	@ 0x30
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2201      	movs	r2, #1
 8012478:	615a      	str	r2, [r3, #20]
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	691b      	ldr	r3, [r3, #16]
 801247e:	f003 0301 	and.w	r3, r3, #1
 8012482:	2b01      	cmp	r3, #1
 8012484:	d105      	bne.n	8012492 <TIM_Base_SetConfig+0x12e>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	691b      	ldr	r3, [r3, #16]
 801248a:	f023 0201 	bic.w	r2, r3, #1
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	611a      	str	r2, [r3, #16]
 8012492:	bf00      	nop
 8012494:	3714      	adds	r7, #20
 8012496:	46bd      	mov	sp, r7
 8012498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249c:	4770      	bx	lr
 801249e:	bf00      	nop
 80124a0:	40010000 	.word	0x40010000
 80124a4:	40000400 	.word	0x40000400
 80124a8:	40000800 	.word	0x40000800
 80124ac:	40000c00 	.word	0x40000c00
 80124b0:	40010400 	.word	0x40010400
 80124b4:	40014000 	.word	0x40014000
 80124b8:	40014400 	.word	0x40014400
 80124bc:	40014800 	.word	0x40014800
 80124c0:	4000e000 	.word	0x4000e000
 80124c4:	4000e400 	.word	0x4000e400

080124c8 <TIM_OC1_SetConfig>:
 80124c8:	b480      	push	{r7}
 80124ca:	b087      	sub	sp, #28
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6039      	str	r1, [r7, #0]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6a1b      	ldr	r3, [r3, #32]
 80124d6:	617b      	str	r3, [r7, #20]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	6a1b      	ldr	r3, [r3, #32]
 80124dc:	f023 0201 	bic.w	r2, r3, #1
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	621a      	str	r2, [r3, #32]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	613b      	str	r3, [r7, #16]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	699b      	ldr	r3, [r3, #24]
 80124ee:	60fb      	str	r3, [r7, #12]
 80124f0:	68fa      	ldr	r2, [r7, #12]
 80124f2:	4b37      	ldr	r3, [pc, #220]	@ (80125d0 <TIM_OC1_SetConfig+0x108>)
 80124f4:	4013      	ands	r3, r2
 80124f6:	60fb      	str	r3, [r7, #12]
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	f023 0303 	bic.w	r3, r3, #3
 80124fe:	60fb      	str	r3, [r7, #12]
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	68fa      	ldr	r2, [r7, #12]
 8012506:	4313      	orrs	r3, r2
 8012508:	60fb      	str	r3, [r7, #12]
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	f023 0302 	bic.w	r3, r3, #2
 8012510:	617b      	str	r3, [r7, #20]
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	689b      	ldr	r3, [r3, #8]
 8012516:	697a      	ldr	r2, [r7, #20]
 8012518:	4313      	orrs	r3, r2
 801251a:	617b      	str	r3, [r7, #20]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	4a2d      	ldr	r2, [pc, #180]	@ (80125d4 <TIM_OC1_SetConfig+0x10c>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d00f      	beq.n	8012544 <TIM_OC1_SetConfig+0x7c>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	4a2c      	ldr	r2, [pc, #176]	@ (80125d8 <TIM_OC1_SetConfig+0x110>)
 8012528:	4293      	cmp	r3, r2
 801252a:	d00b      	beq.n	8012544 <TIM_OC1_SetConfig+0x7c>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	4a2b      	ldr	r2, [pc, #172]	@ (80125dc <TIM_OC1_SetConfig+0x114>)
 8012530:	4293      	cmp	r3, r2
 8012532:	d007      	beq.n	8012544 <TIM_OC1_SetConfig+0x7c>
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	4a2a      	ldr	r2, [pc, #168]	@ (80125e0 <TIM_OC1_SetConfig+0x118>)
 8012538:	4293      	cmp	r3, r2
 801253a:	d003      	beq.n	8012544 <TIM_OC1_SetConfig+0x7c>
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	4a29      	ldr	r2, [pc, #164]	@ (80125e4 <TIM_OC1_SetConfig+0x11c>)
 8012540:	4293      	cmp	r3, r2
 8012542:	d10c      	bne.n	801255e <TIM_OC1_SetConfig+0x96>
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	f023 0308 	bic.w	r3, r3, #8
 801254a:	617b      	str	r3, [r7, #20]
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	68db      	ldr	r3, [r3, #12]
 8012550:	697a      	ldr	r2, [r7, #20]
 8012552:	4313      	orrs	r3, r2
 8012554:	617b      	str	r3, [r7, #20]
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	f023 0304 	bic.w	r3, r3, #4
 801255c:	617b      	str	r3, [r7, #20]
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	4a1c      	ldr	r2, [pc, #112]	@ (80125d4 <TIM_OC1_SetConfig+0x10c>)
 8012562:	4293      	cmp	r3, r2
 8012564:	d00f      	beq.n	8012586 <TIM_OC1_SetConfig+0xbe>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	4a1b      	ldr	r2, [pc, #108]	@ (80125d8 <TIM_OC1_SetConfig+0x110>)
 801256a:	4293      	cmp	r3, r2
 801256c:	d00b      	beq.n	8012586 <TIM_OC1_SetConfig+0xbe>
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	4a1a      	ldr	r2, [pc, #104]	@ (80125dc <TIM_OC1_SetConfig+0x114>)
 8012572:	4293      	cmp	r3, r2
 8012574:	d007      	beq.n	8012586 <TIM_OC1_SetConfig+0xbe>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4a19      	ldr	r2, [pc, #100]	@ (80125e0 <TIM_OC1_SetConfig+0x118>)
 801257a:	4293      	cmp	r3, r2
 801257c:	d003      	beq.n	8012586 <TIM_OC1_SetConfig+0xbe>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4a18      	ldr	r2, [pc, #96]	@ (80125e4 <TIM_OC1_SetConfig+0x11c>)
 8012582:	4293      	cmp	r3, r2
 8012584:	d111      	bne.n	80125aa <TIM_OC1_SetConfig+0xe2>
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801258c:	613b      	str	r3, [r7, #16]
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012594:	613b      	str	r3, [r7, #16]
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	695b      	ldr	r3, [r3, #20]
 801259a:	693a      	ldr	r2, [r7, #16]
 801259c:	4313      	orrs	r3, r2
 801259e:	613b      	str	r3, [r7, #16]
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	699b      	ldr	r3, [r3, #24]
 80125a4:	693a      	ldr	r2, [r7, #16]
 80125a6:	4313      	orrs	r3, r2
 80125a8:	613b      	str	r3, [r7, #16]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	693a      	ldr	r2, [r7, #16]
 80125ae:	605a      	str	r2, [r3, #4]
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	68fa      	ldr	r2, [r7, #12]
 80125b4:	619a      	str	r2, [r3, #24]
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	685a      	ldr	r2, [r3, #4]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	697a      	ldr	r2, [r7, #20]
 80125c2:	621a      	str	r2, [r3, #32]
 80125c4:	bf00      	nop
 80125c6:	371c      	adds	r7, #28
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr
 80125d0:	fffeff8f 	.word	0xfffeff8f
 80125d4:	40010000 	.word	0x40010000
 80125d8:	40010400 	.word	0x40010400
 80125dc:	40014000 	.word	0x40014000
 80125e0:	40014400 	.word	0x40014400
 80125e4:	40014800 	.word	0x40014800

080125e8 <TIM_OC2_SetConfig>:
 80125e8:	b480      	push	{r7}
 80125ea:	b087      	sub	sp, #28
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	6039      	str	r1, [r7, #0]
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6a1b      	ldr	r3, [r3, #32]
 80125f6:	617b      	str	r3, [r7, #20]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6a1b      	ldr	r3, [r3, #32]
 80125fc:	f023 0210 	bic.w	r2, r3, #16
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	621a      	str	r2, [r3, #32]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	613b      	str	r3, [r7, #16]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	699b      	ldr	r3, [r3, #24]
 801260e:	60fb      	str	r3, [r7, #12]
 8012610:	68fa      	ldr	r2, [r7, #12]
 8012612:	4b34      	ldr	r3, [pc, #208]	@ (80126e4 <TIM_OC2_SetConfig+0xfc>)
 8012614:	4013      	ands	r3, r2
 8012616:	60fb      	str	r3, [r7, #12]
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801261e:	60fb      	str	r3, [r7, #12]
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	021b      	lsls	r3, r3, #8
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	4313      	orrs	r3, r2
 801262a:	60fb      	str	r3, [r7, #12]
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	f023 0320 	bic.w	r3, r3, #32
 8012632:	617b      	str	r3, [r7, #20]
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	689b      	ldr	r3, [r3, #8]
 8012638:	011b      	lsls	r3, r3, #4
 801263a:	697a      	ldr	r2, [r7, #20]
 801263c:	4313      	orrs	r3, r2
 801263e:	617b      	str	r3, [r7, #20]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	4a29      	ldr	r2, [pc, #164]	@ (80126e8 <TIM_OC2_SetConfig+0x100>)
 8012644:	4293      	cmp	r3, r2
 8012646:	d003      	beq.n	8012650 <TIM_OC2_SetConfig+0x68>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	4a28      	ldr	r2, [pc, #160]	@ (80126ec <TIM_OC2_SetConfig+0x104>)
 801264c:	4293      	cmp	r3, r2
 801264e:	d10d      	bne.n	801266c <TIM_OC2_SetConfig+0x84>
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012656:	617b      	str	r3, [r7, #20]
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	68db      	ldr	r3, [r3, #12]
 801265c:	011b      	lsls	r3, r3, #4
 801265e:	697a      	ldr	r2, [r7, #20]
 8012660:	4313      	orrs	r3, r2
 8012662:	617b      	str	r3, [r7, #20]
 8012664:	697b      	ldr	r3, [r7, #20]
 8012666:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801266a:	617b      	str	r3, [r7, #20]
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	4a1e      	ldr	r2, [pc, #120]	@ (80126e8 <TIM_OC2_SetConfig+0x100>)
 8012670:	4293      	cmp	r3, r2
 8012672:	d00f      	beq.n	8012694 <TIM_OC2_SetConfig+0xac>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	4a1d      	ldr	r2, [pc, #116]	@ (80126ec <TIM_OC2_SetConfig+0x104>)
 8012678:	4293      	cmp	r3, r2
 801267a:	d00b      	beq.n	8012694 <TIM_OC2_SetConfig+0xac>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	4a1c      	ldr	r2, [pc, #112]	@ (80126f0 <TIM_OC2_SetConfig+0x108>)
 8012680:	4293      	cmp	r3, r2
 8012682:	d007      	beq.n	8012694 <TIM_OC2_SetConfig+0xac>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	4a1b      	ldr	r2, [pc, #108]	@ (80126f4 <TIM_OC2_SetConfig+0x10c>)
 8012688:	4293      	cmp	r3, r2
 801268a:	d003      	beq.n	8012694 <TIM_OC2_SetConfig+0xac>
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	4a1a      	ldr	r2, [pc, #104]	@ (80126f8 <TIM_OC2_SetConfig+0x110>)
 8012690:	4293      	cmp	r3, r2
 8012692:	d113      	bne.n	80126bc <TIM_OC2_SetConfig+0xd4>
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801269a:	613b      	str	r3, [r7, #16]
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80126a2:	613b      	str	r3, [r7, #16]
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	695b      	ldr	r3, [r3, #20]
 80126a8:	009b      	lsls	r3, r3, #2
 80126aa:	693a      	ldr	r2, [r7, #16]
 80126ac:	4313      	orrs	r3, r2
 80126ae:	613b      	str	r3, [r7, #16]
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	699b      	ldr	r3, [r3, #24]
 80126b4:	009b      	lsls	r3, r3, #2
 80126b6:	693a      	ldr	r2, [r7, #16]
 80126b8:	4313      	orrs	r3, r2
 80126ba:	613b      	str	r3, [r7, #16]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	693a      	ldr	r2, [r7, #16]
 80126c0:	605a      	str	r2, [r3, #4]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	68fa      	ldr	r2, [r7, #12]
 80126c6:	619a      	str	r2, [r3, #24]
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	685a      	ldr	r2, [r3, #4]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	697a      	ldr	r2, [r7, #20]
 80126d4:	621a      	str	r2, [r3, #32]
 80126d6:	bf00      	nop
 80126d8:	371c      	adds	r7, #28
 80126da:	46bd      	mov	sp, r7
 80126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e0:	4770      	bx	lr
 80126e2:	bf00      	nop
 80126e4:	feff8fff 	.word	0xfeff8fff
 80126e8:	40010000 	.word	0x40010000
 80126ec:	40010400 	.word	0x40010400
 80126f0:	40014000 	.word	0x40014000
 80126f4:	40014400 	.word	0x40014400
 80126f8:	40014800 	.word	0x40014800

080126fc <TIM_OC3_SetConfig>:
 80126fc:	b480      	push	{r7}
 80126fe:	b087      	sub	sp, #28
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6a1b      	ldr	r3, [r3, #32]
 801270a:	617b      	str	r3, [r7, #20]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6a1b      	ldr	r3, [r3, #32]
 8012710:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	621a      	str	r2, [r3, #32]
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	613b      	str	r3, [r7, #16]
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	69db      	ldr	r3, [r3, #28]
 8012722:	60fb      	str	r3, [r7, #12]
 8012724:	68fa      	ldr	r2, [r7, #12]
 8012726:	4b33      	ldr	r3, [pc, #204]	@ (80127f4 <TIM_OC3_SetConfig+0xf8>)
 8012728:	4013      	ands	r3, r2
 801272a:	60fb      	str	r3, [r7, #12]
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	f023 0303 	bic.w	r3, r3, #3
 8012732:	60fb      	str	r3, [r7, #12]
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	68fa      	ldr	r2, [r7, #12]
 801273a:	4313      	orrs	r3, r2
 801273c:	60fb      	str	r3, [r7, #12]
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012744:	617b      	str	r3, [r7, #20]
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	689b      	ldr	r3, [r3, #8]
 801274a:	021b      	lsls	r3, r3, #8
 801274c:	697a      	ldr	r2, [r7, #20]
 801274e:	4313      	orrs	r3, r2
 8012750:	617b      	str	r3, [r7, #20]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	4a28      	ldr	r2, [pc, #160]	@ (80127f8 <TIM_OC3_SetConfig+0xfc>)
 8012756:	4293      	cmp	r3, r2
 8012758:	d003      	beq.n	8012762 <TIM_OC3_SetConfig+0x66>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	4a27      	ldr	r2, [pc, #156]	@ (80127fc <TIM_OC3_SetConfig+0x100>)
 801275e:	4293      	cmp	r3, r2
 8012760:	d10d      	bne.n	801277e <TIM_OC3_SetConfig+0x82>
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012768:	617b      	str	r3, [r7, #20]
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	68db      	ldr	r3, [r3, #12]
 801276e:	021b      	lsls	r3, r3, #8
 8012770:	697a      	ldr	r2, [r7, #20]
 8012772:	4313      	orrs	r3, r2
 8012774:	617b      	str	r3, [r7, #20]
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801277c:	617b      	str	r3, [r7, #20]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	4a1d      	ldr	r2, [pc, #116]	@ (80127f8 <TIM_OC3_SetConfig+0xfc>)
 8012782:	4293      	cmp	r3, r2
 8012784:	d00f      	beq.n	80127a6 <TIM_OC3_SetConfig+0xaa>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	4a1c      	ldr	r2, [pc, #112]	@ (80127fc <TIM_OC3_SetConfig+0x100>)
 801278a:	4293      	cmp	r3, r2
 801278c:	d00b      	beq.n	80127a6 <TIM_OC3_SetConfig+0xaa>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	4a1b      	ldr	r2, [pc, #108]	@ (8012800 <TIM_OC3_SetConfig+0x104>)
 8012792:	4293      	cmp	r3, r2
 8012794:	d007      	beq.n	80127a6 <TIM_OC3_SetConfig+0xaa>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	4a1a      	ldr	r2, [pc, #104]	@ (8012804 <TIM_OC3_SetConfig+0x108>)
 801279a:	4293      	cmp	r3, r2
 801279c:	d003      	beq.n	80127a6 <TIM_OC3_SetConfig+0xaa>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4a19      	ldr	r2, [pc, #100]	@ (8012808 <TIM_OC3_SetConfig+0x10c>)
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d113      	bne.n	80127ce <TIM_OC3_SetConfig+0xd2>
 80127a6:	693b      	ldr	r3, [r7, #16]
 80127a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80127ac:	613b      	str	r3, [r7, #16]
 80127ae:	693b      	ldr	r3, [r7, #16]
 80127b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80127b4:	613b      	str	r3, [r7, #16]
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	695b      	ldr	r3, [r3, #20]
 80127ba:	011b      	lsls	r3, r3, #4
 80127bc:	693a      	ldr	r2, [r7, #16]
 80127be:	4313      	orrs	r3, r2
 80127c0:	613b      	str	r3, [r7, #16]
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	699b      	ldr	r3, [r3, #24]
 80127c6:	011b      	lsls	r3, r3, #4
 80127c8:	693a      	ldr	r2, [r7, #16]
 80127ca:	4313      	orrs	r3, r2
 80127cc:	613b      	str	r3, [r7, #16]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	693a      	ldr	r2, [r7, #16]
 80127d2:	605a      	str	r2, [r3, #4]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	68fa      	ldr	r2, [r7, #12]
 80127d8:	61da      	str	r2, [r3, #28]
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	685a      	ldr	r2, [r3, #4]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	697a      	ldr	r2, [r7, #20]
 80127e6:	621a      	str	r2, [r3, #32]
 80127e8:	bf00      	nop
 80127ea:	371c      	adds	r7, #28
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr
 80127f4:	fffeff8f 	.word	0xfffeff8f
 80127f8:	40010000 	.word	0x40010000
 80127fc:	40010400 	.word	0x40010400
 8012800:	40014000 	.word	0x40014000
 8012804:	40014400 	.word	0x40014400
 8012808:	40014800 	.word	0x40014800

0801280c <TIM_OC4_SetConfig>:
 801280c:	b480      	push	{r7}
 801280e:	b087      	sub	sp, #28
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6a1b      	ldr	r3, [r3, #32]
 801281a:	613b      	str	r3, [r7, #16]
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	6a1b      	ldr	r3, [r3, #32]
 8012820:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	621a      	str	r2, [r3, #32]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	685b      	ldr	r3, [r3, #4]
 801282c:	617b      	str	r3, [r7, #20]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	69db      	ldr	r3, [r3, #28]
 8012832:	60fb      	str	r3, [r7, #12]
 8012834:	68fa      	ldr	r2, [r7, #12]
 8012836:	4b24      	ldr	r3, [pc, #144]	@ (80128c8 <TIM_OC4_SetConfig+0xbc>)
 8012838:	4013      	ands	r3, r2
 801283a:	60fb      	str	r3, [r7, #12]
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012842:	60fb      	str	r3, [r7, #12]
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	021b      	lsls	r3, r3, #8
 801284a:	68fa      	ldr	r2, [r7, #12]
 801284c:	4313      	orrs	r3, r2
 801284e:	60fb      	str	r3, [r7, #12]
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012856:	613b      	str	r3, [r7, #16]
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	689b      	ldr	r3, [r3, #8]
 801285c:	031b      	lsls	r3, r3, #12
 801285e:	693a      	ldr	r2, [r7, #16]
 8012860:	4313      	orrs	r3, r2
 8012862:	613b      	str	r3, [r7, #16]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	4a19      	ldr	r2, [pc, #100]	@ (80128cc <TIM_OC4_SetConfig+0xc0>)
 8012868:	4293      	cmp	r3, r2
 801286a:	d00f      	beq.n	801288c <TIM_OC4_SetConfig+0x80>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	4a18      	ldr	r2, [pc, #96]	@ (80128d0 <TIM_OC4_SetConfig+0xc4>)
 8012870:	4293      	cmp	r3, r2
 8012872:	d00b      	beq.n	801288c <TIM_OC4_SetConfig+0x80>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	4a17      	ldr	r2, [pc, #92]	@ (80128d4 <TIM_OC4_SetConfig+0xc8>)
 8012878:	4293      	cmp	r3, r2
 801287a:	d007      	beq.n	801288c <TIM_OC4_SetConfig+0x80>
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	4a16      	ldr	r2, [pc, #88]	@ (80128d8 <TIM_OC4_SetConfig+0xcc>)
 8012880:	4293      	cmp	r3, r2
 8012882:	d003      	beq.n	801288c <TIM_OC4_SetConfig+0x80>
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	4a15      	ldr	r2, [pc, #84]	@ (80128dc <TIM_OC4_SetConfig+0xd0>)
 8012888:	4293      	cmp	r3, r2
 801288a:	d109      	bne.n	80128a0 <TIM_OC4_SetConfig+0x94>
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012892:	617b      	str	r3, [r7, #20]
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	695b      	ldr	r3, [r3, #20]
 8012898:	019b      	lsls	r3, r3, #6
 801289a:	697a      	ldr	r2, [r7, #20]
 801289c:	4313      	orrs	r3, r2
 801289e:	617b      	str	r3, [r7, #20]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	697a      	ldr	r2, [r7, #20]
 80128a4:	605a      	str	r2, [r3, #4]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	68fa      	ldr	r2, [r7, #12]
 80128aa:	61da      	str	r2, [r3, #28]
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	685a      	ldr	r2, [r3, #4]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	693a      	ldr	r2, [r7, #16]
 80128b8:	621a      	str	r2, [r3, #32]
 80128ba:	bf00      	nop
 80128bc:	371c      	adds	r7, #28
 80128be:	46bd      	mov	sp, r7
 80128c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c4:	4770      	bx	lr
 80128c6:	bf00      	nop
 80128c8:	feff8fff 	.word	0xfeff8fff
 80128cc:	40010000 	.word	0x40010000
 80128d0:	40010400 	.word	0x40010400
 80128d4:	40014000 	.word	0x40014000
 80128d8:	40014400 	.word	0x40014400
 80128dc:	40014800 	.word	0x40014800

080128e0 <TIM_OC5_SetConfig>:
 80128e0:	b480      	push	{r7}
 80128e2:	b087      	sub	sp, #28
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6039      	str	r1, [r7, #0]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6a1b      	ldr	r3, [r3, #32]
 80128ee:	613b      	str	r3, [r7, #16]
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6a1b      	ldr	r3, [r3, #32]
 80128f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	621a      	str	r2, [r3, #32]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	617b      	str	r3, [r7, #20]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012906:	60fb      	str	r3, [r7, #12]
 8012908:	68fa      	ldr	r2, [r7, #12]
 801290a:	4b21      	ldr	r3, [pc, #132]	@ (8012990 <TIM_OC5_SetConfig+0xb0>)
 801290c:	4013      	ands	r3, r2
 801290e:	60fb      	str	r3, [r7, #12]
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	68fa      	ldr	r2, [r7, #12]
 8012916:	4313      	orrs	r3, r2
 8012918:	60fb      	str	r3, [r7, #12]
 801291a:	693b      	ldr	r3, [r7, #16]
 801291c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8012920:	613b      	str	r3, [r7, #16]
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	689b      	ldr	r3, [r3, #8]
 8012926:	041b      	lsls	r3, r3, #16
 8012928:	693a      	ldr	r2, [r7, #16]
 801292a:	4313      	orrs	r3, r2
 801292c:	613b      	str	r3, [r7, #16]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	4a18      	ldr	r2, [pc, #96]	@ (8012994 <TIM_OC5_SetConfig+0xb4>)
 8012932:	4293      	cmp	r3, r2
 8012934:	d00f      	beq.n	8012956 <TIM_OC5_SetConfig+0x76>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	4a17      	ldr	r2, [pc, #92]	@ (8012998 <TIM_OC5_SetConfig+0xb8>)
 801293a:	4293      	cmp	r3, r2
 801293c:	d00b      	beq.n	8012956 <TIM_OC5_SetConfig+0x76>
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	4a16      	ldr	r2, [pc, #88]	@ (801299c <TIM_OC5_SetConfig+0xbc>)
 8012942:	4293      	cmp	r3, r2
 8012944:	d007      	beq.n	8012956 <TIM_OC5_SetConfig+0x76>
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	4a15      	ldr	r2, [pc, #84]	@ (80129a0 <TIM_OC5_SetConfig+0xc0>)
 801294a:	4293      	cmp	r3, r2
 801294c:	d003      	beq.n	8012956 <TIM_OC5_SetConfig+0x76>
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	4a14      	ldr	r2, [pc, #80]	@ (80129a4 <TIM_OC5_SetConfig+0xc4>)
 8012952:	4293      	cmp	r3, r2
 8012954:	d109      	bne.n	801296a <TIM_OC5_SetConfig+0x8a>
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801295c:	617b      	str	r3, [r7, #20]
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	695b      	ldr	r3, [r3, #20]
 8012962:	021b      	lsls	r3, r3, #8
 8012964:	697a      	ldr	r2, [r7, #20]
 8012966:	4313      	orrs	r3, r2
 8012968:	617b      	str	r3, [r7, #20]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	697a      	ldr	r2, [r7, #20]
 801296e:	605a      	str	r2, [r3, #4]
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	68fa      	ldr	r2, [r7, #12]
 8012974:	655a      	str	r2, [r3, #84]	@ 0x54
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	685a      	ldr	r2, [r3, #4]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	659a      	str	r2, [r3, #88]	@ 0x58
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	693a      	ldr	r2, [r7, #16]
 8012982:	621a      	str	r2, [r3, #32]
 8012984:	bf00      	nop
 8012986:	371c      	adds	r7, #28
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr
 8012990:	fffeff8f 	.word	0xfffeff8f
 8012994:	40010000 	.word	0x40010000
 8012998:	40010400 	.word	0x40010400
 801299c:	40014000 	.word	0x40014000
 80129a0:	40014400 	.word	0x40014400
 80129a4:	40014800 	.word	0x40014800

080129a8 <TIM_OC6_SetConfig>:
 80129a8:	b480      	push	{r7}
 80129aa:	b087      	sub	sp, #28
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	6039      	str	r1, [r7, #0]
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6a1b      	ldr	r3, [r3, #32]
 80129b6:	613b      	str	r3, [r7, #16]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	6a1b      	ldr	r3, [r3, #32]
 80129bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	621a      	str	r2, [r3, #32]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	685b      	ldr	r3, [r3, #4]
 80129c8:	617b      	str	r3, [r7, #20]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129ce:	60fb      	str	r3, [r7, #12]
 80129d0:	68fa      	ldr	r2, [r7, #12]
 80129d2:	4b22      	ldr	r3, [pc, #136]	@ (8012a5c <TIM_OC6_SetConfig+0xb4>)
 80129d4:	4013      	ands	r3, r2
 80129d6:	60fb      	str	r3, [r7, #12]
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	021b      	lsls	r3, r3, #8
 80129de:	68fa      	ldr	r2, [r7, #12]
 80129e0:	4313      	orrs	r3, r2
 80129e2:	60fb      	str	r3, [r7, #12]
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80129ea:	613b      	str	r3, [r7, #16]
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	689b      	ldr	r3, [r3, #8]
 80129f0:	051b      	lsls	r3, r3, #20
 80129f2:	693a      	ldr	r2, [r7, #16]
 80129f4:	4313      	orrs	r3, r2
 80129f6:	613b      	str	r3, [r7, #16]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	4a19      	ldr	r2, [pc, #100]	@ (8012a60 <TIM_OC6_SetConfig+0xb8>)
 80129fc:	4293      	cmp	r3, r2
 80129fe:	d00f      	beq.n	8012a20 <TIM_OC6_SetConfig+0x78>
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	4a18      	ldr	r2, [pc, #96]	@ (8012a64 <TIM_OC6_SetConfig+0xbc>)
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d00b      	beq.n	8012a20 <TIM_OC6_SetConfig+0x78>
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	4a17      	ldr	r2, [pc, #92]	@ (8012a68 <TIM_OC6_SetConfig+0xc0>)
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	d007      	beq.n	8012a20 <TIM_OC6_SetConfig+0x78>
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	4a16      	ldr	r2, [pc, #88]	@ (8012a6c <TIM_OC6_SetConfig+0xc4>)
 8012a14:	4293      	cmp	r3, r2
 8012a16:	d003      	beq.n	8012a20 <TIM_OC6_SetConfig+0x78>
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	4a15      	ldr	r2, [pc, #84]	@ (8012a70 <TIM_OC6_SetConfig+0xc8>)
 8012a1c:	4293      	cmp	r3, r2
 8012a1e:	d109      	bne.n	8012a34 <TIM_OC6_SetConfig+0x8c>
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012a26:	617b      	str	r3, [r7, #20]
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	695b      	ldr	r3, [r3, #20]
 8012a2c:	029b      	lsls	r3, r3, #10
 8012a2e:	697a      	ldr	r2, [r7, #20]
 8012a30:	4313      	orrs	r3, r2
 8012a32:	617b      	str	r3, [r7, #20]
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	697a      	ldr	r2, [r7, #20]
 8012a38:	605a      	str	r2, [r3, #4]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	68fa      	ldr	r2, [r7, #12]
 8012a3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	685a      	ldr	r2, [r3, #4]
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	693a      	ldr	r2, [r7, #16]
 8012a4c:	621a      	str	r2, [r3, #32]
 8012a4e:	bf00      	nop
 8012a50:	371c      	adds	r7, #28
 8012a52:	46bd      	mov	sp, r7
 8012a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a58:	4770      	bx	lr
 8012a5a:	bf00      	nop
 8012a5c:	feff8fff 	.word	0xfeff8fff
 8012a60:	40010000 	.word	0x40010000
 8012a64:	40010400 	.word	0x40010400
 8012a68:	40014000 	.word	0x40014000
 8012a6c:	40014400 	.word	0x40014400
 8012a70:	40014800 	.word	0x40014800

08012a74 <TIM_TI1_ConfigInputStage>:
 8012a74:	b480      	push	{r7}
 8012a76:	b087      	sub	sp, #28
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	60f8      	str	r0, [r7, #12]
 8012a7c:	60b9      	str	r1, [r7, #8]
 8012a7e:	607a      	str	r2, [r7, #4]
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	6a1b      	ldr	r3, [r3, #32]
 8012a84:	617b      	str	r3, [r7, #20]
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	6a1b      	ldr	r3, [r3, #32]
 8012a8a:	f023 0201 	bic.w	r2, r3, #1
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	621a      	str	r2, [r3, #32]
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	699b      	ldr	r3, [r3, #24]
 8012a96:	613b      	str	r3, [r7, #16]
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8012a9e:	613b      	str	r3, [r7, #16]
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	011b      	lsls	r3, r3, #4
 8012aa4:	693a      	ldr	r2, [r7, #16]
 8012aa6:	4313      	orrs	r3, r2
 8012aa8:	613b      	str	r3, [r7, #16]
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	f023 030a 	bic.w	r3, r3, #10
 8012ab0:	617b      	str	r3, [r7, #20]
 8012ab2:	697a      	ldr	r2, [r7, #20]
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	4313      	orrs	r3, r2
 8012ab8:	617b      	str	r3, [r7, #20]
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	693a      	ldr	r2, [r7, #16]
 8012abe:	619a      	str	r2, [r3, #24]
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	697a      	ldr	r2, [r7, #20]
 8012ac4:	621a      	str	r2, [r3, #32]
 8012ac6:	bf00      	nop
 8012ac8:	371c      	adds	r7, #28
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr

08012ad2 <TIM_TI2_ConfigInputStage>:
 8012ad2:	b480      	push	{r7}
 8012ad4:	b087      	sub	sp, #28
 8012ad6:	af00      	add	r7, sp, #0
 8012ad8:	60f8      	str	r0, [r7, #12]
 8012ada:	60b9      	str	r1, [r7, #8]
 8012adc:	607a      	str	r2, [r7, #4]
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	6a1b      	ldr	r3, [r3, #32]
 8012ae2:	617b      	str	r3, [r7, #20]
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	6a1b      	ldr	r3, [r3, #32]
 8012ae8:	f023 0210 	bic.w	r2, r3, #16
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	621a      	str	r2, [r3, #32]
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	699b      	ldr	r3, [r3, #24]
 8012af4:	613b      	str	r3, [r7, #16]
 8012af6:	693b      	ldr	r3, [r7, #16]
 8012af8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8012afc:	613b      	str	r3, [r7, #16]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	031b      	lsls	r3, r3, #12
 8012b02:	693a      	ldr	r2, [r7, #16]
 8012b04:	4313      	orrs	r3, r2
 8012b06:	613b      	str	r3, [r7, #16]
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8012b0e:	617b      	str	r3, [r7, #20]
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	011b      	lsls	r3, r3, #4
 8012b14:	697a      	ldr	r2, [r7, #20]
 8012b16:	4313      	orrs	r3, r2
 8012b18:	617b      	str	r3, [r7, #20]
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	693a      	ldr	r2, [r7, #16]
 8012b1e:	619a      	str	r2, [r3, #24]
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	697a      	ldr	r2, [r7, #20]
 8012b24:	621a      	str	r2, [r3, #32]
 8012b26:	bf00      	nop
 8012b28:	371c      	adds	r7, #28
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b30:	4770      	bx	lr
	...

08012b34 <TIM_ITRx_SetConfig>:
 8012b34:	b480      	push	{r7}
 8012b36:	b085      	sub	sp, #20
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	6039      	str	r1, [r7, #0]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	689b      	ldr	r3, [r3, #8]
 8012b42:	60fb      	str	r3, [r7, #12]
 8012b44:	68fa      	ldr	r2, [r7, #12]
 8012b46:	4b09      	ldr	r3, [pc, #36]	@ (8012b6c <TIM_ITRx_SetConfig+0x38>)
 8012b48:	4013      	ands	r3, r2
 8012b4a:	60fb      	str	r3, [r7, #12]
 8012b4c:	683a      	ldr	r2, [r7, #0]
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	4313      	orrs	r3, r2
 8012b52:	f043 0307 	orr.w	r3, r3, #7
 8012b56:	60fb      	str	r3, [r7, #12]
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	68fa      	ldr	r2, [r7, #12]
 8012b5c:	609a      	str	r2, [r3, #8]
 8012b5e:	bf00      	nop
 8012b60:	3714      	adds	r7, #20
 8012b62:	46bd      	mov	sp, r7
 8012b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b68:	4770      	bx	lr
 8012b6a:	bf00      	nop
 8012b6c:	ffcfff8f 	.word	0xffcfff8f

08012b70 <TIM_ETR_SetConfig>:
 8012b70:	b480      	push	{r7}
 8012b72:	b087      	sub	sp, #28
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	60f8      	str	r0, [r7, #12]
 8012b78:	60b9      	str	r1, [r7, #8]
 8012b7a:	607a      	str	r2, [r7, #4]
 8012b7c:	603b      	str	r3, [r7, #0]
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	689b      	ldr	r3, [r3, #8]
 8012b82:	617b      	str	r3, [r7, #20]
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012b8a:	617b      	str	r3, [r7, #20]
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	021a      	lsls	r2, r3, #8
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	431a      	orrs	r2, r3
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	4313      	orrs	r3, r2
 8012b98:	697a      	ldr	r2, [r7, #20]
 8012b9a:	4313      	orrs	r3, r2
 8012b9c:	617b      	str	r3, [r7, #20]
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	697a      	ldr	r2, [r7, #20]
 8012ba2:	609a      	str	r2, [r3, #8]
 8012ba4:	bf00      	nop
 8012ba6:	371c      	adds	r7, #28
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bae:	4770      	bx	lr

08012bb0 <TIM_CCxChannelCmd>:
 8012bb0:	b480      	push	{r7}
 8012bb2:	b087      	sub	sp, #28
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	60f8      	str	r0, [r7, #12]
 8012bb8:	60b9      	str	r1, [r7, #8]
 8012bba:	607a      	str	r2, [r7, #4]
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	f003 031f 	and.w	r3, r3, #31
 8012bc2:	2201      	movs	r2, #1
 8012bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8012bc8:	617b      	str	r3, [r7, #20]
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	6a1a      	ldr	r2, [r3, #32]
 8012bce:	697b      	ldr	r3, [r7, #20]
 8012bd0:	43db      	mvns	r3, r3
 8012bd2:	401a      	ands	r2, r3
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	621a      	str	r2, [r3, #32]
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	6a1a      	ldr	r2, [r3, #32]
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	f003 031f 	and.w	r3, r3, #31
 8012be2:	6879      	ldr	r1, [r7, #4]
 8012be4:	fa01 f303 	lsl.w	r3, r1, r3
 8012be8:	431a      	orrs	r2, r3
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	621a      	str	r2, [r3, #32]
 8012bee:	bf00      	nop
 8012bf0:	371c      	adds	r7, #28
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf8:	4770      	bx	lr
	...

08012bfc <HAL_TIMEx_MasterConfigSynchronization>:
 8012bfc:	b480      	push	{r7}
 8012bfe:	b085      	sub	sp, #20
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6039      	str	r1, [r7, #0]
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012c0c:	2b01      	cmp	r3, #1
 8012c0e:	d101      	bne.n	8012c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012c10:	2302      	movs	r3, #2
 8012c12:	e077      	b.n	8012d04 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2201      	movs	r2, #1
 8012c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2202      	movs	r2, #2
 8012c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	60fb      	str	r3, [r7, #12]
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	689b      	ldr	r3, [r3, #8]
 8012c32:	60bb      	str	r3, [r7, #8]
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4a35      	ldr	r2, [pc, #212]	@ (8012d10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d004      	beq.n	8012c48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	4a34      	ldr	r2, [pc, #208]	@ (8012d14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012c44:	4293      	cmp	r3, r2
 8012c46:	d108      	bne.n	8012c5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8012c4e:	60fb      	str	r3, [r7, #12]
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	68fa      	ldr	r2, [r7, #12]
 8012c56:	4313      	orrs	r3, r2
 8012c58:	60fb      	str	r3, [r7, #12]
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c60:	60fb      	str	r3, [r7, #12]
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	68fa      	ldr	r2, [r7, #12]
 8012c68:	4313      	orrs	r3, r2
 8012c6a:	60fb      	str	r3, [r7, #12]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	68fa      	ldr	r2, [r7, #12]
 8012c72:	605a      	str	r2, [r3, #4]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	4a25      	ldr	r2, [pc, #148]	@ (8012d10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012c7a:	4293      	cmp	r3, r2
 8012c7c:	d02c      	beq.n	8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012c86:	d027      	beq.n	8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	4a22      	ldr	r2, [pc, #136]	@ (8012d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8012c8e:	4293      	cmp	r3, r2
 8012c90:	d022      	beq.n	8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	4a21      	ldr	r2, [pc, #132]	@ (8012d1c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8012c98:	4293      	cmp	r3, r2
 8012c9a:	d01d      	beq.n	8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8012d20 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d018      	beq.n	8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	4a1a      	ldr	r2, [pc, #104]	@ (8012d14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012cac:	4293      	cmp	r3, r2
 8012cae:	d013      	beq.n	8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8012d24 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	d00e      	beq.n	8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8012d28 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d009      	beq.n	8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	4a18      	ldr	r2, [pc, #96]	@ (8012d2c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	d004      	beq.n	8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	4a17      	ldr	r2, [pc, #92]	@ (8012d30 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	d10c      	bne.n	8012cf2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012cde:	60bb      	str	r3, [r7, #8]
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	689b      	ldr	r3, [r3, #8]
 8012ce4:	68ba      	ldr	r2, [r7, #8]
 8012ce6:	4313      	orrs	r3, r2
 8012ce8:	60bb      	str	r3, [r7, #8]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	68ba      	ldr	r2, [r7, #8]
 8012cf0:	609a      	str	r2, [r3, #8]
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2201      	movs	r2, #1
 8012cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012d02:	2300      	movs	r3, #0
 8012d04:	4618      	mov	r0, r3
 8012d06:	3714      	adds	r7, #20
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0e:	4770      	bx	lr
 8012d10:	40010000 	.word	0x40010000
 8012d14:	40010400 	.word	0x40010400
 8012d18:	40000400 	.word	0x40000400
 8012d1c:	40000800 	.word	0x40000800
 8012d20:	40000c00 	.word	0x40000c00
 8012d24:	40001800 	.word	0x40001800
 8012d28:	40014000 	.word	0x40014000
 8012d2c:	4000e000 	.word	0x4000e000
 8012d30:	4000e400 	.word	0x4000e400

08012d34 <HAL_TIMEx_CommutCallback>:
 8012d34:	b480      	push	{r7}
 8012d36:	b083      	sub	sp, #12
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	bf00      	nop
 8012d3e:	370c      	adds	r7, #12
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr

08012d48 <HAL_TIMEx_BreakCallback>:
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	bf00      	nop
 8012d52:	370c      	adds	r7, #12
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr

08012d5c <HAL_TIMEx_Break2Callback>:
 8012d5c:	b480      	push	{r7}
 8012d5e:	b083      	sub	sp, #12
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	bf00      	nop
 8012d66:	370c      	adds	r7, #12
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr

08012d70 <HAL_UART_Init>:
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d101      	bne.n	8012d82 <HAL_UART_Init+0x12>
 8012d7e:	2301      	movs	r3, #1
 8012d80:	e042      	b.n	8012e08 <HAL_UART_Init+0x98>
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d106      	bne.n	8012d9a <HAL_UART_Init+0x2a>
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f7ef fe3b 	bl	8002a10 <HAL_UART_MspInit>
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2224      	movs	r2, #36	@ 0x24
 8012d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	681a      	ldr	r2, [r3, #0]
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	f022 0201 	bic.w	r2, r2, #1
 8012db0:	601a      	str	r2, [r3, #0]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d002      	beq.n	8012dc0 <HAL_UART_Init+0x50>
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f000 fe94 	bl	8013ae8 <UART_AdvFeatureConfig>
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f000 f825 	bl	8012e10 <UART_SetConfig>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	d101      	bne.n	8012dd0 <HAL_UART_Init+0x60>
 8012dcc:	2301      	movs	r3, #1
 8012dce:	e01b      	b.n	8012e08 <HAL_UART_Init+0x98>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	685a      	ldr	r2, [r3, #4]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012dde:	605a      	str	r2, [r3, #4]
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	689a      	ldr	r2, [r3, #8]
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012dee:	609a      	str	r2, [r3, #8]
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f042 0201 	orr.w	r2, r2, #1
 8012dfe:	601a      	str	r2, [r3, #0]
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f000 ff13 	bl	8013c2c <UART_CheckIdleState>
 8012e06:	4603      	mov	r3, r0
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}

08012e10 <UART_SetConfig>:
 8012e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012e14:	b092      	sub	sp, #72	@ 0x48
 8012e16:	af00      	add	r7, sp, #0
 8012e18:	6178      	str	r0, [r7, #20]
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	689a      	ldr	r2, [r3, #8]
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	691b      	ldr	r3, [r3, #16]
 8012e28:	431a      	orrs	r2, r3
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	695b      	ldr	r3, [r3, #20]
 8012e2e:	431a      	orrs	r2, r3
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	69db      	ldr	r3, [r3, #28]
 8012e34:	4313      	orrs	r3, r2
 8012e36:	647b      	str	r3, [r7, #68]	@ 0x44
 8012e38:	697b      	ldr	r3, [r7, #20]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	681a      	ldr	r2, [r3, #0]
 8012e3e:	4bbe      	ldr	r3, [pc, #760]	@ (8013138 <UART_SetConfig+0x328>)
 8012e40:	4013      	ands	r3, r2
 8012e42:	697a      	ldr	r2, [r7, #20]
 8012e44:	6812      	ldr	r2, [r2, #0]
 8012e46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012e48:	430b      	orrs	r3, r1
 8012e4a:	6013      	str	r3, [r2, #0]
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012e56:	697b      	ldr	r3, [r7, #20]
 8012e58:	68da      	ldr	r2, [r3, #12]
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	430a      	orrs	r2, r1
 8012e60:	605a      	str	r2, [r3, #4]
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	699b      	ldr	r3, [r3, #24]
 8012e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	4ab3      	ldr	r2, [pc, #716]	@ (801313c <UART_SetConfig+0x32c>)
 8012e6e:	4293      	cmp	r3, r2
 8012e70:	d004      	beq.n	8012e7c <UART_SetConfig+0x6c>
 8012e72:	697b      	ldr	r3, [r7, #20]
 8012e74:	6a1b      	ldr	r3, [r3, #32]
 8012e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012e78:	4313      	orrs	r3, r2
 8012e7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	689a      	ldr	r2, [r3, #8]
 8012e82:	4baf      	ldr	r3, [pc, #700]	@ (8013140 <UART_SetConfig+0x330>)
 8012e84:	4013      	ands	r3, r2
 8012e86:	697a      	ldr	r2, [r7, #20]
 8012e88:	6812      	ldr	r2, [r2, #0]
 8012e8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012e8c:	430b      	orrs	r3, r1
 8012e8e:	6093      	str	r3, [r2, #8]
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e96:	f023 010f 	bic.w	r1, r3, #15
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	430a      	orrs	r2, r1
 8012ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012ea6:	697b      	ldr	r3, [r7, #20]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	4aa6      	ldr	r2, [pc, #664]	@ (8013144 <UART_SetConfig+0x334>)
 8012eac:	4293      	cmp	r3, r2
 8012eae:	d177      	bne.n	8012fa0 <UART_SetConfig+0x190>
 8012eb0:	4ba5      	ldr	r3, [pc, #660]	@ (8013148 <UART_SetConfig+0x338>)
 8012eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012eb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012eb8:	2b28      	cmp	r3, #40	@ 0x28
 8012eba:	d86d      	bhi.n	8012f98 <UART_SetConfig+0x188>
 8012ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8012ec4 <UART_SetConfig+0xb4>)
 8012ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ec2:	bf00      	nop
 8012ec4:	08012f69 	.word	0x08012f69
 8012ec8:	08012f99 	.word	0x08012f99
 8012ecc:	08012f99 	.word	0x08012f99
 8012ed0:	08012f99 	.word	0x08012f99
 8012ed4:	08012f99 	.word	0x08012f99
 8012ed8:	08012f99 	.word	0x08012f99
 8012edc:	08012f99 	.word	0x08012f99
 8012ee0:	08012f99 	.word	0x08012f99
 8012ee4:	08012f71 	.word	0x08012f71
 8012ee8:	08012f99 	.word	0x08012f99
 8012eec:	08012f99 	.word	0x08012f99
 8012ef0:	08012f99 	.word	0x08012f99
 8012ef4:	08012f99 	.word	0x08012f99
 8012ef8:	08012f99 	.word	0x08012f99
 8012efc:	08012f99 	.word	0x08012f99
 8012f00:	08012f99 	.word	0x08012f99
 8012f04:	08012f79 	.word	0x08012f79
 8012f08:	08012f99 	.word	0x08012f99
 8012f0c:	08012f99 	.word	0x08012f99
 8012f10:	08012f99 	.word	0x08012f99
 8012f14:	08012f99 	.word	0x08012f99
 8012f18:	08012f99 	.word	0x08012f99
 8012f1c:	08012f99 	.word	0x08012f99
 8012f20:	08012f99 	.word	0x08012f99
 8012f24:	08012f81 	.word	0x08012f81
 8012f28:	08012f99 	.word	0x08012f99
 8012f2c:	08012f99 	.word	0x08012f99
 8012f30:	08012f99 	.word	0x08012f99
 8012f34:	08012f99 	.word	0x08012f99
 8012f38:	08012f99 	.word	0x08012f99
 8012f3c:	08012f99 	.word	0x08012f99
 8012f40:	08012f99 	.word	0x08012f99
 8012f44:	08012f89 	.word	0x08012f89
 8012f48:	08012f99 	.word	0x08012f99
 8012f4c:	08012f99 	.word	0x08012f99
 8012f50:	08012f99 	.word	0x08012f99
 8012f54:	08012f99 	.word	0x08012f99
 8012f58:	08012f99 	.word	0x08012f99
 8012f5c:	08012f99 	.word	0x08012f99
 8012f60:	08012f99 	.word	0x08012f99
 8012f64:	08012f91 	.word	0x08012f91
 8012f68:	2301      	movs	r3, #1
 8012f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f6e:	e326      	b.n	80135be <UART_SetConfig+0x7ae>
 8012f70:	2304      	movs	r3, #4
 8012f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f76:	e322      	b.n	80135be <UART_SetConfig+0x7ae>
 8012f78:	2308      	movs	r3, #8
 8012f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f7e:	e31e      	b.n	80135be <UART_SetConfig+0x7ae>
 8012f80:	2310      	movs	r3, #16
 8012f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f86:	e31a      	b.n	80135be <UART_SetConfig+0x7ae>
 8012f88:	2320      	movs	r3, #32
 8012f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f8e:	e316      	b.n	80135be <UART_SetConfig+0x7ae>
 8012f90:	2340      	movs	r3, #64	@ 0x40
 8012f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f96:	e312      	b.n	80135be <UART_SetConfig+0x7ae>
 8012f98:	2380      	movs	r3, #128	@ 0x80
 8012f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f9e:	e30e      	b.n	80135be <UART_SetConfig+0x7ae>
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	4a69      	ldr	r2, [pc, #420]	@ (801314c <UART_SetConfig+0x33c>)
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	d130      	bne.n	801300c <UART_SetConfig+0x1fc>
 8012faa:	4b67      	ldr	r3, [pc, #412]	@ (8013148 <UART_SetConfig+0x338>)
 8012fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fae:	f003 0307 	and.w	r3, r3, #7
 8012fb2:	2b05      	cmp	r3, #5
 8012fb4:	d826      	bhi.n	8013004 <UART_SetConfig+0x1f4>
 8012fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8012fbc <UART_SetConfig+0x1ac>)
 8012fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fbc:	08012fd5 	.word	0x08012fd5
 8012fc0:	08012fdd 	.word	0x08012fdd
 8012fc4:	08012fe5 	.word	0x08012fe5
 8012fc8:	08012fed 	.word	0x08012fed
 8012fcc:	08012ff5 	.word	0x08012ff5
 8012fd0:	08012ffd 	.word	0x08012ffd
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fda:	e2f0      	b.n	80135be <UART_SetConfig+0x7ae>
 8012fdc:	2304      	movs	r3, #4
 8012fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fe2:	e2ec      	b.n	80135be <UART_SetConfig+0x7ae>
 8012fe4:	2308      	movs	r3, #8
 8012fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fea:	e2e8      	b.n	80135be <UART_SetConfig+0x7ae>
 8012fec:	2310      	movs	r3, #16
 8012fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ff2:	e2e4      	b.n	80135be <UART_SetConfig+0x7ae>
 8012ff4:	2320      	movs	r3, #32
 8012ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ffa:	e2e0      	b.n	80135be <UART_SetConfig+0x7ae>
 8012ffc:	2340      	movs	r3, #64	@ 0x40
 8012ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013002:	e2dc      	b.n	80135be <UART_SetConfig+0x7ae>
 8013004:	2380      	movs	r3, #128	@ 0x80
 8013006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801300a:	e2d8      	b.n	80135be <UART_SetConfig+0x7ae>
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	4a4f      	ldr	r2, [pc, #316]	@ (8013150 <UART_SetConfig+0x340>)
 8013012:	4293      	cmp	r3, r2
 8013014:	d130      	bne.n	8013078 <UART_SetConfig+0x268>
 8013016:	4b4c      	ldr	r3, [pc, #304]	@ (8013148 <UART_SetConfig+0x338>)
 8013018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801301a:	f003 0307 	and.w	r3, r3, #7
 801301e:	2b05      	cmp	r3, #5
 8013020:	d826      	bhi.n	8013070 <UART_SetConfig+0x260>
 8013022:	a201      	add	r2, pc, #4	@ (adr r2, 8013028 <UART_SetConfig+0x218>)
 8013024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013028:	08013041 	.word	0x08013041
 801302c:	08013049 	.word	0x08013049
 8013030:	08013051 	.word	0x08013051
 8013034:	08013059 	.word	0x08013059
 8013038:	08013061 	.word	0x08013061
 801303c:	08013069 	.word	0x08013069
 8013040:	2300      	movs	r3, #0
 8013042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013046:	e2ba      	b.n	80135be <UART_SetConfig+0x7ae>
 8013048:	2304      	movs	r3, #4
 801304a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801304e:	e2b6      	b.n	80135be <UART_SetConfig+0x7ae>
 8013050:	2308      	movs	r3, #8
 8013052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013056:	e2b2      	b.n	80135be <UART_SetConfig+0x7ae>
 8013058:	2310      	movs	r3, #16
 801305a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801305e:	e2ae      	b.n	80135be <UART_SetConfig+0x7ae>
 8013060:	2320      	movs	r3, #32
 8013062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013066:	e2aa      	b.n	80135be <UART_SetConfig+0x7ae>
 8013068:	2340      	movs	r3, #64	@ 0x40
 801306a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801306e:	e2a6      	b.n	80135be <UART_SetConfig+0x7ae>
 8013070:	2380      	movs	r3, #128	@ 0x80
 8013072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013076:	e2a2      	b.n	80135be <UART_SetConfig+0x7ae>
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	4a35      	ldr	r2, [pc, #212]	@ (8013154 <UART_SetConfig+0x344>)
 801307e:	4293      	cmp	r3, r2
 8013080:	d130      	bne.n	80130e4 <UART_SetConfig+0x2d4>
 8013082:	4b31      	ldr	r3, [pc, #196]	@ (8013148 <UART_SetConfig+0x338>)
 8013084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013086:	f003 0307 	and.w	r3, r3, #7
 801308a:	2b05      	cmp	r3, #5
 801308c:	d826      	bhi.n	80130dc <UART_SetConfig+0x2cc>
 801308e:	a201      	add	r2, pc, #4	@ (adr r2, 8013094 <UART_SetConfig+0x284>)
 8013090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013094:	080130ad 	.word	0x080130ad
 8013098:	080130b5 	.word	0x080130b5
 801309c:	080130bd 	.word	0x080130bd
 80130a0:	080130c5 	.word	0x080130c5
 80130a4:	080130cd 	.word	0x080130cd
 80130a8:	080130d5 	.word	0x080130d5
 80130ac:	2300      	movs	r3, #0
 80130ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130b2:	e284      	b.n	80135be <UART_SetConfig+0x7ae>
 80130b4:	2304      	movs	r3, #4
 80130b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130ba:	e280      	b.n	80135be <UART_SetConfig+0x7ae>
 80130bc:	2308      	movs	r3, #8
 80130be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130c2:	e27c      	b.n	80135be <UART_SetConfig+0x7ae>
 80130c4:	2310      	movs	r3, #16
 80130c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130ca:	e278      	b.n	80135be <UART_SetConfig+0x7ae>
 80130cc:	2320      	movs	r3, #32
 80130ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130d2:	e274      	b.n	80135be <UART_SetConfig+0x7ae>
 80130d4:	2340      	movs	r3, #64	@ 0x40
 80130d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130da:	e270      	b.n	80135be <UART_SetConfig+0x7ae>
 80130dc:	2380      	movs	r3, #128	@ 0x80
 80130de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130e2:	e26c      	b.n	80135be <UART_SetConfig+0x7ae>
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	4a1b      	ldr	r2, [pc, #108]	@ (8013158 <UART_SetConfig+0x348>)
 80130ea:	4293      	cmp	r3, r2
 80130ec:	d142      	bne.n	8013174 <UART_SetConfig+0x364>
 80130ee:	4b16      	ldr	r3, [pc, #88]	@ (8013148 <UART_SetConfig+0x338>)
 80130f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80130f2:	f003 0307 	and.w	r3, r3, #7
 80130f6:	2b05      	cmp	r3, #5
 80130f8:	d838      	bhi.n	801316c <UART_SetConfig+0x35c>
 80130fa:	a201      	add	r2, pc, #4	@ (adr r2, 8013100 <UART_SetConfig+0x2f0>)
 80130fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013100:	08013119 	.word	0x08013119
 8013104:	08013121 	.word	0x08013121
 8013108:	08013129 	.word	0x08013129
 801310c:	08013131 	.word	0x08013131
 8013110:	0801315d 	.word	0x0801315d
 8013114:	08013165 	.word	0x08013165
 8013118:	2300      	movs	r3, #0
 801311a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801311e:	e24e      	b.n	80135be <UART_SetConfig+0x7ae>
 8013120:	2304      	movs	r3, #4
 8013122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013126:	e24a      	b.n	80135be <UART_SetConfig+0x7ae>
 8013128:	2308      	movs	r3, #8
 801312a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801312e:	e246      	b.n	80135be <UART_SetConfig+0x7ae>
 8013130:	2310      	movs	r3, #16
 8013132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013136:	e242      	b.n	80135be <UART_SetConfig+0x7ae>
 8013138:	cfff69f3 	.word	0xcfff69f3
 801313c:	58000c00 	.word	0x58000c00
 8013140:	11fff4ff 	.word	0x11fff4ff
 8013144:	40011000 	.word	0x40011000
 8013148:	58024400 	.word	0x58024400
 801314c:	40004400 	.word	0x40004400
 8013150:	40004800 	.word	0x40004800
 8013154:	40004c00 	.word	0x40004c00
 8013158:	40005000 	.word	0x40005000
 801315c:	2320      	movs	r3, #32
 801315e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013162:	e22c      	b.n	80135be <UART_SetConfig+0x7ae>
 8013164:	2340      	movs	r3, #64	@ 0x40
 8013166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801316a:	e228      	b.n	80135be <UART_SetConfig+0x7ae>
 801316c:	2380      	movs	r3, #128	@ 0x80
 801316e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013172:	e224      	b.n	80135be <UART_SetConfig+0x7ae>
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	4ab1      	ldr	r2, [pc, #708]	@ (8013440 <UART_SetConfig+0x630>)
 801317a:	4293      	cmp	r3, r2
 801317c:	d176      	bne.n	801326c <UART_SetConfig+0x45c>
 801317e:	4bb1      	ldr	r3, [pc, #708]	@ (8013444 <UART_SetConfig+0x634>)
 8013180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013186:	2b28      	cmp	r3, #40	@ 0x28
 8013188:	d86c      	bhi.n	8013264 <UART_SetConfig+0x454>
 801318a:	a201      	add	r2, pc, #4	@ (adr r2, 8013190 <UART_SetConfig+0x380>)
 801318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013190:	08013235 	.word	0x08013235
 8013194:	08013265 	.word	0x08013265
 8013198:	08013265 	.word	0x08013265
 801319c:	08013265 	.word	0x08013265
 80131a0:	08013265 	.word	0x08013265
 80131a4:	08013265 	.word	0x08013265
 80131a8:	08013265 	.word	0x08013265
 80131ac:	08013265 	.word	0x08013265
 80131b0:	0801323d 	.word	0x0801323d
 80131b4:	08013265 	.word	0x08013265
 80131b8:	08013265 	.word	0x08013265
 80131bc:	08013265 	.word	0x08013265
 80131c0:	08013265 	.word	0x08013265
 80131c4:	08013265 	.word	0x08013265
 80131c8:	08013265 	.word	0x08013265
 80131cc:	08013265 	.word	0x08013265
 80131d0:	08013245 	.word	0x08013245
 80131d4:	08013265 	.word	0x08013265
 80131d8:	08013265 	.word	0x08013265
 80131dc:	08013265 	.word	0x08013265
 80131e0:	08013265 	.word	0x08013265
 80131e4:	08013265 	.word	0x08013265
 80131e8:	08013265 	.word	0x08013265
 80131ec:	08013265 	.word	0x08013265
 80131f0:	0801324d 	.word	0x0801324d
 80131f4:	08013265 	.word	0x08013265
 80131f8:	08013265 	.word	0x08013265
 80131fc:	08013265 	.word	0x08013265
 8013200:	08013265 	.word	0x08013265
 8013204:	08013265 	.word	0x08013265
 8013208:	08013265 	.word	0x08013265
 801320c:	08013265 	.word	0x08013265
 8013210:	08013255 	.word	0x08013255
 8013214:	08013265 	.word	0x08013265
 8013218:	08013265 	.word	0x08013265
 801321c:	08013265 	.word	0x08013265
 8013220:	08013265 	.word	0x08013265
 8013224:	08013265 	.word	0x08013265
 8013228:	08013265 	.word	0x08013265
 801322c:	08013265 	.word	0x08013265
 8013230:	0801325d 	.word	0x0801325d
 8013234:	2301      	movs	r3, #1
 8013236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801323a:	e1c0      	b.n	80135be <UART_SetConfig+0x7ae>
 801323c:	2304      	movs	r3, #4
 801323e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013242:	e1bc      	b.n	80135be <UART_SetConfig+0x7ae>
 8013244:	2308      	movs	r3, #8
 8013246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801324a:	e1b8      	b.n	80135be <UART_SetConfig+0x7ae>
 801324c:	2310      	movs	r3, #16
 801324e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013252:	e1b4      	b.n	80135be <UART_SetConfig+0x7ae>
 8013254:	2320      	movs	r3, #32
 8013256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801325a:	e1b0      	b.n	80135be <UART_SetConfig+0x7ae>
 801325c:	2340      	movs	r3, #64	@ 0x40
 801325e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013262:	e1ac      	b.n	80135be <UART_SetConfig+0x7ae>
 8013264:	2380      	movs	r3, #128	@ 0x80
 8013266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801326a:	e1a8      	b.n	80135be <UART_SetConfig+0x7ae>
 801326c:	697b      	ldr	r3, [r7, #20]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	4a75      	ldr	r2, [pc, #468]	@ (8013448 <UART_SetConfig+0x638>)
 8013272:	4293      	cmp	r3, r2
 8013274:	d130      	bne.n	80132d8 <UART_SetConfig+0x4c8>
 8013276:	4b73      	ldr	r3, [pc, #460]	@ (8013444 <UART_SetConfig+0x634>)
 8013278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801327a:	f003 0307 	and.w	r3, r3, #7
 801327e:	2b05      	cmp	r3, #5
 8013280:	d826      	bhi.n	80132d0 <UART_SetConfig+0x4c0>
 8013282:	a201      	add	r2, pc, #4	@ (adr r2, 8013288 <UART_SetConfig+0x478>)
 8013284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013288:	080132a1 	.word	0x080132a1
 801328c:	080132a9 	.word	0x080132a9
 8013290:	080132b1 	.word	0x080132b1
 8013294:	080132b9 	.word	0x080132b9
 8013298:	080132c1 	.word	0x080132c1
 801329c:	080132c9 	.word	0x080132c9
 80132a0:	2300      	movs	r3, #0
 80132a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132a6:	e18a      	b.n	80135be <UART_SetConfig+0x7ae>
 80132a8:	2304      	movs	r3, #4
 80132aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132ae:	e186      	b.n	80135be <UART_SetConfig+0x7ae>
 80132b0:	2308      	movs	r3, #8
 80132b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132b6:	e182      	b.n	80135be <UART_SetConfig+0x7ae>
 80132b8:	2310      	movs	r3, #16
 80132ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132be:	e17e      	b.n	80135be <UART_SetConfig+0x7ae>
 80132c0:	2320      	movs	r3, #32
 80132c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132c6:	e17a      	b.n	80135be <UART_SetConfig+0x7ae>
 80132c8:	2340      	movs	r3, #64	@ 0x40
 80132ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132ce:	e176      	b.n	80135be <UART_SetConfig+0x7ae>
 80132d0:	2380      	movs	r3, #128	@ 0x80
 80132d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132d6:	e172      	b.n	80135be <UART_SetConfig+0x7ae>
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	4a5b      	ldr	r2, [pc, #364]	@ (801344c <UART_SetConfig+0x63c>)
 80132de:	4293      	cmp	r3, r2
 80132e0:	d130      	bne.n	8013344 <UART_SetConfig+0x534>
 80132e2:	4b58      	ldr	r3, [pc, #352]	@ (8013444 <UART_SetConfig+0x634>)
 80132e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80132e6:	f003 0307 	and.w	r3, r3, #7
 80132ea:	2b05      	cmp	r3, #5
 80132ec:	d826      	bhi.n	801333c <UART_SetConfig+0x52c>
 80132ee:	a201      	add	r2, pc, #4	@ (adr r2, 80132f4 <UART_SetConfig+0x4e4>)
 80132f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132f4:	0801330d 	.word	0x0801330d
 80132f8:	08013315 	.word	0x08013315
 80132fc:	0801331d 	.word	0x0801331d
 8013300:	08013325 	.word	0x08013325
 8013304:	0801332d 	.word	0x0801332d
 8013308:	08013335 	.word	0x08013335
 801330c:	2300      	movs	r3, #0
 801330e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013312:	e154      	b.n	80135be <UART_SetConfig+0x7ae>
 8013314:	2304      	movs	r3, #4
 8013316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801331a:	e150      	b.n	80135be <UART_SetConfig+0x7ae>
 801331c:	2308      	movs	r3, #8
 801331e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013322:	e14c      	b.n	80135be <UART_SetConfig+0x7ae>
 8013324:	2310      	movs	r3, #16
 8013326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801332a:	e148      	b.n	80135be <UART_SetConfig+0x7ae>
 801332c:	2320      	movs	r3, #32
 801332e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013332:	e144      	b.n	80135be <UART_SetConfig+0x7ae>
 8013334:	2340      	movs	r3, #64	@ 0x40
 8013336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801333a:	e140      	b.n	80135be <UART_SetConfig+0x7ae>
 801333c:	2380      	movs	r3, #128	@ 0x80
 801333e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013342:	e13c      	b.n	80135be <UART_SetConfig+0x7ae>
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	4a41      	ldr	r2, [pc, #260]	@ (8013450 <UART_SetConfig+0x640>)
 801334a:	4293      	cmp	r3, r2
 801334c:	f040 8082 	bne.w	8013454 <UART_SetConfig+0x644>
 8013350:	4b3c      	ldr	r3, [pc, #240]	@ (8013444 <UART_SetConfig+0x634>)
 8013352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013354:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013358:	2b28      	cmp	r3, #40	@ 0x28
 801335a:	d86d      	bhi.n	8013438 <UART_SetConfig+0x628>
 801335c:	a201      	add	r2, pc, #4	@ (adr r2, 8013364 <UART_SetConfig+0x554>)
 801335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013362:	bf00      	nop
 8013364:	08013409 	.word	0x08013409
 8013368:	08013439 	.word	0x08013439
 801336c:	08013439 	.word	0x08013439
 8013370:	08013439 	.word	0x08013439
 8013374:	08013439 	.word	0x08013439
 8013378:	08013439 	.word	0x08013439
 801337c:	08013439 	.word	0x08013439
 8013380:	08013439 	.word	0x08013439
 8013384:	08013411 	.word	0x08013411
 8013388:	08013439 	.word	0x08013439
 801338c:	08013439 	.word	0x08013439
 8013390:	08013439 	.word	0x08013439
 8013394:	08013439 	.word	0x08013439
 8013398:	08013439 	.word	0x08013439
 801339c:	08013439 	.word	0x08013439
 80133a0:	08013439 	.word	0x08013439
 80133a4:	08013419 	.word	0x08013419
 80133a8:	08013439 	.word	0x08013439
 80133ac:	08013439 	.word	0x08013439
 80133b0:	08013439 	.word	0x08013439
 80133b4:	08013439 	.word	0x08013439
 80133b8:	08013439 	.word	0x08013439
 80133bc:	08013439 	.word	0x08013439
 80133c0:	08013439 	.word	0x08013439
 80133c4:	08013421 	.word	0x08013421
 80133c8:	08013439 	.word	0x08013439
 80133cc:	08013439 	.word	0x08013439
 80133d0:	08013439 	.word	0x08013439
 80133d4:	08013439 	.word	0x08013439
 80133d8:	08013439 	.word	0x08013439
 80133dc:	08013439 	.word	0x08013439
 80133e0:	08013439 	.word	0x08013439
 80133e4:	08013429 	.word	0x08013429
 80133e8:	08013439 	.word	0x08013439
 80133ec:	08013439 	.word	0x08013439
 80133f0:	08013439 	.word	0x08013439
 80133f4:	08013439 	.word	0x08013439
 80133f8:	08013439 	.word	0x08013439
 80133fc:	08013439 	.word	0x08013439
 8013400:	08013439 	.word	0x08013439
 8013404:	08013431 	.word	0x08013431
 8013408:	2301      	movs	r3, #1
 801340a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801340e:	e0d6      	b.n	80135be <UART_SetConfig+0x7ae>
 8013410:	2304      	movs	r3, #4
 8013412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013416:	e0d2      	b.n	80135be <UART_SetConfig+0x7ae>
 8013418:	2308      	movs	r3, #8
 801341a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801341e:	e0ce      	b.n	80135be <UART_SetConfig+0x7ae>
 8013420:	2310      	movs	r3, #16
 8013422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013426:	e0ca      	b.n	80135be <UART_SetConfig+0x7ae>
 8013428:	2320      	movs	r3, #32
 801342a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801342e:	e0c6      	b.n	80135be <UART_SetConfig+0x7ae>
 8013430:	2340      	movs	r3, #64	@ 0x40
 8013432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013436:	e0c2      	b.n	80135be <UART_SetConfig+0x7ae>
 8013438:	2380      	movs	r3, #128	@ 0x80
 801343a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801343e:	e0be      	b.n	80135be <UART_SetConfig+0x7ae>
 8013440:	40011400 	.word	0x40011400
 8013444:	58024400 	.word	0x58024400
 8013448:	40007800 	.word	0x40007800
 801344c:	40007c00 	.word	0x40007c00
 8013450:	40011800 	.word	0x40011800
 8013454:	697b      	ldr	r3, [r7, #20]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	4aad      	ldr	r2, [pc, #692]	@ (8013710 <UART_SetConfig+0x900>)
 801345a:	4293      	cmp	r3, r2
 801345c:	d176      	bne.n	801354c <UART_SetConfig+0x73c>
 801345e:	4bad      	ldr	r3, [pc, #692]	@ (8013714 <UART_SetConfig+0x904>)
 8013460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013466:	2b28      	cmp	r3, #40	@ 0x28
 8013468:	d86c      	bhi.n	8013544 <UART_SetConfig+0x734>
 801346a:	a201      	add	r2, pc, #4	@ (adr r2, 8013470 <UART_SetConfig+0x660>)
 801346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013470:	08013515 	.word	0x08013515
 8013474:	08013545 	.word	0x08013545
 8013478:	08013545 	.word	0x08013545
 801347c:	08013545 	.word	0x08013545
 8013480:	08013545 	.word	0x08013545
 8013484:	08013545 	.word	0x08013545
 8013488:	08013545 	.word	0x08013545
 801348c:	08013545 	.word	0x08013545
 8013490:	0801351d 	.word	0x0801351d
 8013494:	08013545 	.word	0x08013545
 8013498:	08013545 	.word	0x08013545
 801349c:	08013545 	.word	0x08013545
 80134a0:	08013545 	.word	0x08013545
 80134a4:	08013545 	.word	0x08013545
 80134a8:	08013545 	.word	0x08013545
 80134ac:	08013545 	.word	0x08013545
 80134b0:	08013525 	.word	0x08013525
 80134b4:	08013545 	.word	0x08013545
 80134b8:	08013545 	.word	0x08013545
 80134bc:	08013545 	.word	0x08013545
 80134c0:	08013545 	.word	0x08013545
 80134c4:	08013545 	.word	0x08013545
 80134c8:	08013545 	.word	0x08013545
 80134cc:	08013545 	.word	0x08013545
 80134d0:	0801352d 	.word	0x0801352d
 80134d4:	08013545 	.word	0x08013545
 80134d8:	08013545 	.word	0x08013545
 80134dc:	08013545 	.word	0x08013545
 80134e0:	08013545 	.word	0x08013545
 80134e4:	08013545 	.word	0x08013545
 80134e8:	08013545 	.word	0x08013545
 80134ec:	08013545 	.word	0x08013545
 80134f0:	08013535 	.word	0x08013535
 80134f4:	08013545 	.word	0x08013545
 80134f8:	08013545 	.word	0x08013545
 80134fc:	08013545 	.word	0x08013545
 8013500:	08013545 	.word	0x08013545
 8013504:	08013545 	.word	0x08013545
 8013508:	08013545 	.word	0x08013545
 801350c:	08013545 	.word	0x08013545
 8013510:	0801353d 	.word	0x0801353d
 8013514:	2301      	movs	r3, #1
 8013516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801351a:	e050      	b.n	80135be <UART_SetConfig+0x7ae>
 801351c:	2304      	movs	r3, #4
 801351e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013522:	e04c      	b.n	80135be <UART_SetConfig+0x7ae>
 8013524:	2308      	movs	r3, #8
 8013526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801352a:	e048      	b.n	80135be <UART_SetConfig+0x7ae>
 801352c:	2310      	movs	r3, #16
 801352e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013532:	e044      	b.n	80135be <UART_SetConfig+0x7ae>
 8013534:	2320      	movs	r3, #32
 8013536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801353a:	e040      	b.n	80135be <UART_SetConfig+0x7ae>
 801353c:	2340      	movs	r3, #64	@ 0x40
 801353e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013542:	e03c      	b.n	80135be <UART_SetConfig+0x7ae>
 8013544:	2380      	movs	r3, #128	@ 0x80
 8013546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801354a:	e038      	b.n	80135be <UART_SetConfig+0x7ae>
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	4a71      	ldr	r2, [pc, #452]	@ (8013718 <UART_SetConfig+0x908>)
 8013552:	4293      	cmp	r3, r2
 8013554:	d130      	bne.n	80135b8 <UART_SetConfig+0x7a8>
 8013556:	4b6f      	ldr	r3, [pc, #444]	@ (8013714 <UART_SetConfig+0x904>)
 8013558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801355a:	f003 0307 	and.w	r3, r3, #7
 801355e:	2b05      	cmp	r3, #5
 8013560:	d826      	bhi.n	80135b0 <UART_SetConfig+0x7a0>
 8013562:	a201      	add	r2, pc, #4	@ (adr r2, 8013568 <UART_SetConfig+0x758>)
 8013564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013568:	08013581 	.word	0x08013581
 801356c:	08013589 	.word	0x08013589
 8013570:	08013591 	.word	0x08013591
 8013574:	08013599 	.word	0x08013599
 8013578:	080135a1 	.word	0x080135a1
 801357c:	080135a9 	.word	0x080135a9
 8013580:	2302      	movs	r3, #2
 8013582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013586:	e01a      	b.n	80135be <UART_SetConfig+0x7ae>
 8013588:	2304      	movs	r3, #4
 801358a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801358e:	e016      	b.n	80135be <UART_SetConfig+0x7ae>
 8013590:	2308      	movs	r3, #8
 8013592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013596:	e012      	b.n	80135be <UART_SetConfig+0x7ae>
 8013598:	2310      	movs	r3, #16
 801359a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801359e:	e00e      	b.n	80135be <UART_SetConfig+0x7ae>
 80135a0:	2320      	movs	r3, #32
 80135a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80135a6:	e00a      	b.n	80135be <UART_SetConfig+0x7ae>
 80135a8:	2340      	movs	r3, #64	@ 0x40
 80135aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80135ae:	e006      	b.n	80135be <UART_SetConfig+0x7ae>
 80135b0:	2380      	movs	r3, #128	@ 0x80
 80135b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80135b6:	e002      	b.n	80135be <UART_SetConfig+0x7ae>
 80135b8:	2380      	movs	r3, #128	@ 0x80
 80135ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	4a55      	ldr	r2, [pc, #340]	@ (8013718 <UART_SetConfig+0x908>)
 80135c4:	4293      	cmp	r3, r2
 80135c6:	f040 80f8 	bne.w	80137ba <UART_SetConfig+0x9aa>
 80135ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80135ce:	2b20      	cmp	r3, #32
 80135d0:	dc46      	bgt.n	8013660 <UART_SetConfig+0x850>
 80135d2:	2b02      	cmp	r3, #2
 80135d4:	db75      	blt.n	80136c2 <UART_SetConfig+0x8b2>
 80135d6:	3b02      	subs	r3, #2
 80135d8:	2b1e      	cmp	r3, #30
 80135da:	d872      	bhi.n	80136c2 <UART_SetConfig+0x8b2>
 80135dc:	a201      	add	r2, pc, #4	@ (adr r2, 80135e4 <UART_SetConfig+0x7d4>)
 80135de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135e2:	bf00      	nop
 80135e4:	08013667 	.word	0x08013667
 80135e8:	080136c3 	.word	0x080136c3
 80135ec:	0801366f 	.word	0x0801366f
 80135f0:	080136c3 	.word	0x080136c3
 80135f4:	080136c3 	.word	0x080136c3
 80135f8:	080136c3 	.word	0x080136c3
 80135fc:	0801367f 	.word	0x0801367f
 8013600:	080136c3 	.word	0x080136c3
 8013604:	080136c3 	.word	0x080136c3
 8013608:	080136c3 	.word	0x080136c3
 801360c:	080136c3 	.word	0x080136c3
 8013610:	080136c3 	.word	0x080136c3
 8013614:	080136c3 	.word	0x080136c3
 8013618:	080136c3 	.word	0x080136c3
 801361c:	0801368f 	.word	0x0801368f
 8013620:	080136c3 	.word	0x080136c3
 8013624:	080136c3 	.word	0x080136c3
 8013628:	080136c3 	.word	0x080136c3
 801362c:	080136c3 	.word	0x080136c3
 8013630:	080136c3 	.word	0x080136c3
 8013634:	080136c3 	.word	0x080136c3
 8013638:	080136c3 	.word	0x080136c3
 801363c:	080136c3 	.word	0x080136c3
 8013640:	080136c3 	.word	0x080136c3
 8013644:	080136c3 	.word	0x080136c3
 8013648:	080136c3 	.word	0x080136c3
 801364c:	080136c3 	.word	0x080136c3
 8013650:	080136c3 	.word	0x080136c3
 8013654:	080136c3 	.word	0x080136c3
 8013658:	080136c3 	.word	0x080136c3
 801365c:	080136b5 	.word	0x080136b5
 8013660:	2b40      	cmp	r3, #64	@ 0x40
 8013662:	d02a      	beq.n	80136ba <UART_SetConfig+0x8aa>
 8013664:	e02d      	b.n	80136c2 <UART_SetConfig+0x8b2>
 8013666:	f7fc f80f 	bl	800f688 <HAL_RCCEx_GetD3PCLK1Freq>
 801366a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801366c:	e02f      	b.n	80136ce <UART_SetConfig+0x8be>
 801366e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013672:	4618      	mov	r0, r3
 8013674:	f7fc f81e 	bl	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>
 8013678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801367c:	e027      	b.n	80136ce <UART_SetConfig+0x8be>
 801367e:	f107 0318 	add.w	r3, r7, #24
 8013682:	4618      	mov	r0, r3
 8013684:	f7fc f96a 	bl	800f95c <HAL_RCCEx_GetPLL3ClockFreq>
 8013688:	69fb      	ldr	r3, [r7, #28]
 801368a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801368c:	e01f      	b.n	80136ce <UART_SetConfig+0x8be>
 801368e:	4b21      	ldr	r3, [pc, #132]	@ (8013714 <UART_SetConfig+0x904>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	f003 0320 	and.w	r3, r3, #32
 8013696:	2b00      	cmp	r3, #0
 8013698:	d009      	beq.n	80136ae <UART_SetConfig+0x89e>
 801369a:	4b1e      	ldr	r3, [pc, #120]	@ (8013714 <UART_SetConfig+0x904>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	08db      	lsrs	r3, r3, #3
 80136a0:	f003 0303 	and.w	r3, r3, #3
 80136a4:	4a1d      	ldr	r2, [pc, #116]	@ (801371c <UART_SetConfig+0x90c>)
 80136a6:	fa22 f303 	lsr.w	r3, r2, r3
 80136aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136ac:	e00f      	b.n	80136ce <UART_SetConfig+0x8be>
 80136ae:	4b1b      	ldr	r3, [pc, #108]	@ (801371c <UART_SetConfig+0x90c>)
 80136b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136b2:	e00c      	b.n	80136ce <UART_SetConfig+0x8be>
 80136b4:	4b1a      	ldr	r3, [pc, #104]	@ (8013720 <UART_SetConfig+0x910>)
 80136b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136b8:	e009      	b.n	80136ce <UART_SetConfig+0x8be>
 80136ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80136be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136c0:	e005      	b.n	80136ce <UART_SetConfig+0x8be>
 80136c2:	2300      	movs	r3, #0
 80136c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136c6:	2301      	movs	r3, #1
 80136c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80136cc:	bf00      	nop
 80136ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	f000 81ee 	beq.w	8013ab2 <UART_SetConfig+0xca2>
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136da:	4a12      	ldr	r2, [pc, #72]	@ (8013724 <UART_SetConfig+0x914>)
 80136dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136e0:	461a      	mov	r2, r3
 80136e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80136e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	685a      	ldr	r2, [r3, #4]
 80136ee:	4613      	mov	r3, r2
 80136f0:	005b      	lsls	r3, r3, #1
 80136f2:	4413      	add	r3, r2
 80136f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d305      	bcc.n	8013706 <UART_SetConfig+0x8f6>
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	031b      	lsls	r3, r3, #12
 8013700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013702:	429a      	cmp	r2, r3
 8013704:	d910      	bls.n	8013728 <UART_SetConfig+0x918>
 8013706:	2301      	movs	r3, #1
 8013708:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801370c:	e1d1      	b.n	8013ab2 <UART_SetConfig+0xca2>
 801370e:	bf00      	nop
 8013710:	40011c00 	.word	0x40011c00
 8013714:	58024400 	.word	0x58024400
 8013718:	58000c00 	.word	0x58000c00
 801371c:	03d09000 	.word	0x03d09000
 8013720:	003d0900 	.word	0x003d0900
 8013724:	0801d7c8 	.word	0x0801d7c8
 8013728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801372a:	2200      	movs	r2, #0
 801372c:	60bb      	str	r3, [r7, #8]
 801372e:	60fa      	str	r2, [r7, #12]
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013734:	4ac0      	ldr	r2, [pc, #768]	@ (8013a38 <UART_SetConfig+0xc28>)
 8013736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801373a:	b29b      	uxth	r3, r3
 801373c:	2200      	movs	r2, #0
 801373e:	603b      	str	r3, [r7, #0]
 8013740:	607a      	str	r2, [r7, #4]
 8013742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801374a:	f7ed f805 	bl	8000758 <__aeabi_uldivmod>
 801374e:	4602      	mov	r2, r0
 8013750:	460b      	mov	r3, r1
 8013752:	4610      	mov	r0, r2
 8013754:	4619      	mov	r1, r3
 8013756:	f04f 0200 	mov.w	r2, #0
 801375a:	f04f 0300 	mov.w	r3, #0
 801375e:	020b      	lsls	r3, r1, #8
 8013760:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013764:	0202      	lsls	r2, r0, #8
 8013766:	6979      	ldr	r1, [r7, #20]
 8013768:	6849      	ldr	r1, [r1, #4]
 801376a:	0849      	lsrs	r1, r1, #1
 801376c:	2000      	movs	r0, #0
 801376e:	460c      	mov	r4, r1
 8013770:	4605      	mov	r5, r0
 8013772:	eb12 0804 	adds.w	r8, r2, r4
 8013776:	eb43 0905 	adc.w	r9, r3, r5
 801377a:	697b      	ldr	r3, [r7, #20]
 801377c:	685b      	ldr	r3, [r3, #4]
 801377e:	2200      	movs	r2, #0
 8013780:	469a      	mov	sl, r3
 8013782:	4693      	mov	fp, r2
 8013784:	4652      	mov	r2, sl
 8013786:	465b      	mov	r3, fp
 8013788:	4640      	mov	r0, r8
 801378a:	4649      	mov	r1, r9
 801378c:	f7ec ffe4 	bl	8000758 <__aeabi_uldivmod>
 8013790:	4602      	mov	r2, r0
 8013792:	460b      	mov	r3, r1
 8013794:	4613      	mov	r3, r2
 8013796:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801379a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801379e:	d308      	bcc.n	80137b2 <UART_SetConfig+0x9a2>
 80137a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80137a6:	d204      	bcs.n	80137b2 <UART_SetConfig+0x9a2>
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137ae:	60da      	str	r2, [r3, #12]
 80137b0:	e17f      	b.n	8013ab2 <UART_SetConfig+0xca2>
 80137b2:	2301      	movs	r3, #1
 80137b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80137b8:	e17b      	b.n	8013ab2 <UART_SetConfig+0xca2>
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	69db      	ldr	r3, [r3, #28]
 80137be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80137c2:	f040 80bd 	bne.w	8013940 <UART_SetConfig+0xb30>
 80137c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80137ca:	2b20      	cmp	r3, #32
 80137cc:	dc48      	bgt.n	8013860 <UART_SetConfig+0xa50>
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	db7b      	blt.n	80138ca <UART_SetConfig+0xaba>
 80137d2:	2b20      	cmp	r3, #32
 80137d4:	d879      	bhi.n	80138ca <UART_SetConfig+0xaba>
 80137d6:	a201      	add	r2, pc, #4	@ (adr r2, 80137dc <UART_SetConfig+0x9cc>)
 80137d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137dc:	08013867 	.word	0x08013867
 80137e0:	0801386f 	.word	0x0801386f
 80137e4:	080138cb 	.word	0x080138cb
 80137e8:	080138cb 	.word	0x080138cb
 80137ec:	08013877 	.word	0x08013877
 80137f0:	080138cb 	.word	0x080138cb
 80137f4:	080138cb 	.word	0x080138cb
 80137f8:	080138cb 	.word	0x080138cb
 80137fc:	08013887 	.word	0x08013887
 8013800:	080138cb 	.word	0x080138cb
 8013804:	080138cb 	.word	0x080138cb
 8013808:	080138cb 	.word	0x080138cb
 801380c:	080138cb 	.word	0x080138cb
 8013810:	080138cb 	.word	0x080138cb
 8013814:	080138cb 	.word	0x080138cb
 8013818:	080138cb 	.word	0x080138cb
 801381c:	08013897 	.word	0x08013897
 8013820:	080138cb 	.word	0x080138cb
 8013824:	080138cb 	.word	0x080138cb
 8013828:	080138cb 	.word	0x080138cb
 801382c:	080138cb 	.word	0x080138cb
 8013830:	080138cb 	.word	0x080138cb
 8013834:	080138cb 	.word	0x080138cb
 8013838:	080138cb 	.word	0x080138cb
 801383c:	080138cb 	.word	0x080138cb
 8013840:	080138cb 	.word	0x080138cb
 8013844:	080138cb 	.word	0x080138cb
 8013848:	080138cb 	.word	0x080138cb
 801384c:	080138cb 	.word	0x080138cb
 8013850:	080138cb 	.word	0x080138cb
 8013854:	080138cb 	.word	0x080138cb
 8013858:	080138cb 	.word	0x080138cb
 801385c:	080138bd 	.word	0x080138bd
 8013860:	2b40      	cmp	r3, #64	@ 0x40
 8013862:	d02e      	beq.n	80138c2 <UART_SetConfig+0xab2>
 8013864:	e031      	b.n	80138ca <UART_SetConfig+0xaba>
 8013866:	f7fa f871 	bl	800d94c <HAL_RCC_GetPCLK1Freq>
 801386a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801386c:	e033      	b.n	80138d6 <UART_SetConfig+0xac6>
 801386e:	f7fa f883 	bl	800d978 <HAL_RCC_GetPCLK2Freq>
 8013872:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8013874:	e02f      	b.n	80138d6 <UART_SetConfig+0xac6>
 8013876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801387a:	4618      	mov	r0, r3
 801387c:	f7fb ff1a 	bl	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>
 8013880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013884:	e027      	b.n	80138d6 <UART_SetConfig+0xac6>
 8013886:	f107 0318 	add.w	r3, r7, #24
 801388a:	4618      	mov	r0, r3
 801388c:	f7fc f866 	bl	800f95c <HAL_RCCEx_GetPLL3ClockFreq>
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013894:	e01f      	b.n	80138d6 <UART_SetConfig+0xac6>
 8013896:	4b69      	ldr	r3, [pc, #420]	@ (8013a3c <UART_SetConfig+0xc2c>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	f003 0320 	and.w	r3, r3, #32
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d009      	beq.n	80138b6 <UART_SetConfig+0xaa6>
 80138a2:	4b66      	ldr	r3, [pc, #408]	@ (8013a3c <UART_SetConfig+0xc2c>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	08db      	lsrs	r3, r3, #3
 80138a8:	f003 0303 	and.w	r3, r3, #3
 80138ac:	4a64      	ldr	r2, [pc, #400]	@ (8013a40 <UART_SetConfig+0xc30>)
 80138ae:	fa22 f303 	lsr.w	r3, r2, r3
 80138b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138b4:	e00f      	b.n	80138d6 <UART_SetConfig+0xac6>
 80138b6:	4b62      	ldr	r3, [pc, #392]	@ (8013a40 <UART_SetConfig+0xc30>)
 80138b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138ba:	e00c      	b.n	80138d6 <UART_SetConfig+0xac6>
 80138bc:	4b61      	ldr	r3, [pc, #388]	@ (8013a44 <UART_SetConfig+0xc34>)
 80138be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138c0:	e009      	b.n	80138d6 <UART_SetConfig+0xac6>
 80138c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80138c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138c8:	e005      	b.n	80138d6 <UART_SetConfig+0xac6>
 80138ca:	2300      	movs	r3, #0
 80138cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138ce:	2301      	movs	r3, #1
 80138d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80138d4:	bf00      	nop
 80138d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138d8:	2b00      	cmp	r3, #0
 80138da:	f000 80ea 	beq.w	8013ab2 <UART_SetConfig+0xca2>
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138e2:	4a55      	ldr	r2, [pc, #340]	@ (8013a38 <UART_SetConfig+0xc28>)
 80138e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138e8:	461a      	mov	r2, r3
 80138ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80138f0:	005a      	lsls	r2, r3, #1
 80138f2:	697b      	ldr	r3, [r7, #20]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	085b      	lsrs	r3, r3, #1
 80138f8:	441a      	add	r2, r3
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8013902:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013906:	2b0f      	cmp	r3, #15
 8013908:	d916      	bls.n	8013938 <UART_SetConfig+0xb28>
 801390a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801390c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013910:	d212      	bcs.n	8013938 <UART_SetConfig+0xb28>
 8013912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013914:	b29b      	uxth	r3, r3
 8013916:	f023 030f 	bic.w	r3, r3, #15
 801391a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801391c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801391e:	085b      	lsrs	r3, r3, #1
 8013920:	b29b      	uxth	r3, r3
 8013922:	f003 0307 	and.w	r3, r3, #7
 8013926:	b29a      	uxth	r2, r3
 8013928:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801392a:	4313      	orrs	r3, r2
 801392c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013934:	60da      	str	r2, [r3, #12]
 8013936:	e0bc      	b.n	8013ab2 <UART_SetConfig+0xca2>
 8013938:	2301      	movs	r3, #1
 801393a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801393e:	e0b8      	b.n	8013ab2 <UART_SetConfig+0xca2>
 8013940:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013944:	2b20      	cmp	r3, #32
 8013946:	dc4b      	bgt.n	80139e0 <UART_SetConfig+0xbd0>
 8013948:	2b00      	cmp	r3, #0
 801394a:	f2c0 8087 	blt.w	8013a5c <UART_SetConfig+0xc4c>
 801394e:	2b20      	cmp	r3, #32
 8013950:	f200 8084 	bhi.w	8013a5c <UART_SetConfig+0xc4c>
 8013954:	a201      	add	r2, pc, #4	@ (adr r2, 801395c <UART_SetConfig+0xb4c>)
 8013956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801395a:	bf00      	nop
 801395c:	080139e7 	.word	0x080139e7
 8013960:	080139ef 	.word	0x080139ef
 8013964:	08013a5d 	.word	0x08013a5d
 8013968:	08013a5d 	.word	0x08013a5d
 801396c:	080139f7 	.word	0x080139f7
 8013970:	08013a5d 	.word	0x08013a5d
 8013974:	08013a5d 	.word	0x08013a5d
 8013978:	08013a5d 	.word	0x08013a5d
 801397c:	08013a07 	.word	0x08013a07
 8013980:	08013a5d 	.word	0x08013a5d
 8013984:	08013a5d 	.word	0x08013a5d
 8013988:	08013a5d 	.word	0x08013a5d
 801398c:	08013a5d 	.word	0x08013a5d
 8013990:	08013a5d 	.word	0x08013a5d
 8013994:	08013a5d 	.word	0x08013a5d
 8013998:	08013a5d 	.word	0x08013a5d
 801399c:	08013a17 	.word	0x08013a17
 80139a0:	08013a5d 	.word	0x08013a5d
 80139a4:	08013a5d 	.word	0x08013a5d
 80139a8:	08013a5d 	.word	0x08013a5d
 80139ac:	08013a5d 	.word	0x08013a5d
 80139b0:	08013a5d 	.word	0x08013a5d
 80139b4:	08013a5d 	.word	0x08013a5d
 80139b8:	08013a5d 	.word	0x08013a5d
 80139bc:	08013a5d 	.word	0x08013a5d
 80139c0:	08013a5d 	.word	0x08013a5d
 80139c4:	08013a5d 	.word	0x08013a5d
 80139c8:	08013a5d 	.word	0x08013a5d
 80139cc:	08013a5d 	.word	0x08013a5d
 80139d0:	08013a5d 	.word	0x08013a5d
 80139d4:	08013a5d 	.word	0x08013a5d
 80139d8:	08013a5d 	.word	0x08013a5d
 80139dc:	08013a4f 	.word	0x08013a4f
 80139e0:	2b40      	cmp	r3, #64	@ 0x40
 80139e2:	d037      	beq.n	8013a54 <UART_SetConfig+0xc44>
 80139e4:	e03a      	b.n	8013a5c <UART_SetConfig+0xc4c>
 80139e6:	f7f9 ffb1 	bl	800d94c <HAL_RCC_GetPCLK1Freq>
 80139ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80139ec:	e03c      	b.n	8013a68 <UART_SetConfig+0xc58>
 80139ee:	f7f9 ffc3 	bl	800d978 <HAL_RCC_GetPCLK2Freq>
 80139f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80139f4:	e038      	b.n	8013a68 <UART_SetConfig+0xc58>
 80139f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7fb fe5a 	bl	800f6b4 <HAL_RCCEx_GetPLL2ClockFreq>
 8013a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a04:	e030      	b.n	8013a68 <UART_SetConfig+0xc58>
 8013a06:	f107 0318 	add.w	r3, r7, #24
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fb ffa6 	bl	800f95c <HAL_RCCEx_GetPLL3ClockFreq>
 8013a10:	69fb      	ldr	r3, [r7, #28]
 8013a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a14:	e028      	b.n	8013a68 <UART_SetConfig+0xc58>
 8013a16:	4b09      	ldr	r3, [pc, #36]	@ (8013a3c <UART_SetConfig+0xc2c>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	f003 0320 	and.w	r3, r3, #32
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d012      	beq.n	8013a48 <UART_SetConfig+0xc38>
 8013a22:	4b06      	ldr	r3, [pc, #24]	@ (8013a3c <UART_SetConfig+0xc2c>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	08db      	lsrs	r3, r3, #3
 8013a28:	f003 0303 	and.w	r3, r3, #3
 8013a2c:	4a04      	ldr	r2, [pc, #16]	@ (8013a40 <UART_SetConfig+0xc30>)
 8013a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8013a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a34:	e018      	b.n	8013a68 <UART_SetConfig+0xc58>
 8013a36:	bf00      	nop
 8013a38:	0801d7c8 	.word	0x0801d7c8
 8013a3c:	58024400 	.word	0x58024400
 8013a40:	03d09000 	.word	0x03d09000
 8013a44:	003d0900 	.word	0x003d0900
 8013a48:	4b24      	ldr	r3, [pc, #144]	@ (8013adc <UART_SetConfig+0xccc>)
 8013a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a4c:	e00c      	b.n	8013a68 <UART_SetConfig+0xc58>
 8013a4e:	4b24      	ldr	r3, [pc, #144]	@ (8013ae0 <UART_SetConfig+0xcd0>)
 8013a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a52:	e009      	b.n	8013a68 <UART_SetConfig+0xc58>
 8013a54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a5a:	e005      	b.n	8013a68 <UART_SetConfig+0xc58>
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a60:	2301      	movs	r3, #1
 8013a62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013a66:	bf00      	nop
 8013a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d021      	beq.n	8013ab2 <UART_SetConfig+0xca2>
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a72:	4a1c      	ldr	r2, [pc, #112]	@ (8013ae4 <UART_SetConfig+0xcd4>)
 8013a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a78:	461a      	mov	r2, r3
 8013a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	085b      	lsrs	r3, r3, #1
 8013a86:	441a      	add	r2, r3
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	685b      	ldr	r3, [r3, #4]
 8013a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a94:	2b0f      	cmp	r3, #15
 8013a96:	d909      	bls.n	8013aac <UART_SetConfig+0xc9c>
 8013a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013a9e:	d205      	bcs.n	8013aac <UART_SetConfig+0xc9c>
 8013aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aa2:	b29a      	uxth	r2, r3
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	60da      	str	r2, [r3, #12]
 8013aaa:	e002      	b.n	8013ab2 <UART_SetConfig+0xca2>
 8013aac:	2301      	movs	r3, #1
 8013aae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	2201      	movs	r2, #1
 8013ab6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	2201      	movs	r2, #1
 8013abe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	675a      	str	r2, [r3, #116]	@ 0x74
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	2200      	movs	r2, #0
 8013acc:	679a      	str	r2, [r3, #120]	@ 0x78
 8013ace:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3748      	adds	r7, #72	@ 0x48
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013adc:	03d09000 	.word	0x03d09000
 8013ae0:	003d0900 	.word	0x003d0900
 8013ae4:	0801d7c8 	.word	0x0801d7c8

08013ae8 <UART_AdvFeatureConfig>:
 8013ae8:	b480      	push	{r7}
 8013aea:	b083      	sub	sp, #12
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013af4:	f003 0308 	and.w	r3, r3, #8
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d00a      	beq.n	8013b12 <UART_AdvFeatureConfig+0x2a>
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	685b      	ldr	r3, [r3, #4]
 8013b02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	430a      	orrs	r2, r1
 8013b10:	605a      	str	r2, [r3, #4]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b16:	f003 0301 	and.w	r3, r3, #1
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d00a      	beq.n	8013b34 <UART_AdvFeatureConfig+0x4c>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	430a      	orrs	r2, r1
 8013b32:	605a      	str	r2, [r3, #4]
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b38:	f003 0302 	and.w	r3, r3, #2
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d00a      	beq.n	8013b56 <UART_AdvFeatureConfig+0x6e>
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	685b      	ldr	r3, [r3, #4]
 8013b46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	430a      	orrs	r2, r1
 8013b54:	605a      	str	r2, [r3, #4]
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b5a:	f003 0304 	and.w	r3, r3, #4
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d00a      	beq.n	8013b78 <UART_AdvFeatureConfig+0x90>
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	430a      	orrs	r2, r1
 8013b76:	605a      	str	r2, [r3, #4]
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b7c:	f003 0310 	and.w	r3, r3, #16
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d00a      	beq.n	8013b9a <UART_AdvFeatureConfig+0xb2>
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	689b      	ldr	r3, [r3, #8]
 8013b8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	430a      	orrs	r2, r1
 8013b98:	609a      	str	r2, [r3, #8]
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b9e:	f003 0320 	and.w	r3, r3, #32
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d00a      	beq.n	8013bbc <UART_AdvFeatureConfig+0xd4>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	689b      	ldr	r3, [r3, #8]
 8013bac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	430a      	orrs	r2, r1
 8013bba:	609a      	str	r2, [r3, #8]
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d01a      	beq.n	8013bfe <UART_AdvFeatureConfig+0x116>
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	685b      	ldr	r3, [r3, #4]
 8013bce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	430a      	orrs	r2, r1
 8013bdc:	605a      	str	r2, [r3, #4]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013be6:	d10a      	bne.n	8013bfe <UART_AdvFeatureConfig+0x116>
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	685b      	ldr	r3, [r3, #4]
 8013bee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	430a      	orrs	r2, r1
 8013bfc:	605a      	str	r2, [r3, #4]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d00a      	beq.n	8013c20 <UART_AdvFeatureConfig+0x138>
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	685b      	ldr	r3, [r3, #4]
 8013c10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	430a      	orrs	r2, r1
 8013c1e:	605a      	str	r2, [r3, #4]
 8013c20:	bf00      	nop
 8013c22:	370c      	adds	r7, #12
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr

08013c2c <UART_CheckIdleState>:
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b098      	sub	sp, #96	@ 0x60
 8013c30:	af02      	add	r7, sp, #8
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	2200      	movs	r2, #0
 8013c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013c3c:	f7f3 f884 	bl	8006d48 <HAL_GetTick>
 8013c40:	6578      	str	r0, [r7, #84]	@ 0x54
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	f003 0308 	and.w	r3, r3, #8
 8013c4c:	2b08      	cmp	r3, #8
 8013c4e:	d12f      	bne.n	8013cb0 <UART_CheckIdleState+0x84>
 8013c50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013c54:	9300      	str	r3, [sp, #0]
 8013c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c58:	2200      	movs	r2, #0
 8013c5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	f000 f88e 	bl	8013d80 <UART_WaitOnFlagUntilTimeout>
 8013c64:	4603      	mov	r3, r0
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d022      	beq.n	8013cb0 <UART_CheckIdleState+0x84>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c72:	e853 3f00 	ldrex	r3, [r3]
 8013c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013c7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	461a      	mov	r2, r3
 8013c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c8a:	643a      	str	r2, [r7, #64]	@ 0x40
 8013c8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013c8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013c90:	e841 2300 	strex	r3, r2, [r1]
 8013c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d1e6      	bne.n	8013c6a <UART_CheckIdleState+0x3e>
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2220      	movs	r2, #32
 8013ca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8013cac:	2303      	movs	r3, #3
 8013cae:	e063      	b.n	8013d78 <UART_CheckIdleState+0x14c>
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	f003 0304 	and.w	r3, r3, #4
 8013cba:	2b04      	cmp	r3, #4
 8013cbc:	d149      	bne.n	8013d52 <UART_CheckIdleState+0x126>
 8013cbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013cc2:	9300      	str	r3, [sp, #0]
 8013cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f000 f857 	bl	8013d80 <UART_WaitOnFlagUntilTimeout>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d03c      	beq.n	8013d52 <UART_CheckIdleState+0x126>
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8013cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ce0:	e853 3f00 	ldrex	r3, [r3]
 8013ce4:	623b      	str	r3, [r7, #32]
 8013ce6:	6a3b      	ldr	r3, [r7, #32]
 8013ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	461a      	mov	r2, r3
 8013cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8013cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013cfe:	e841 2300 	strex	r3, r2, [r1]
 8013d02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d1e6      	bne.n	8013cd8 <UART_CheckIdleState+0xac>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	3308      	adds	r3, #8
 8013d10:	613b      	str	r3, [r7, #16]
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	e853 3f00 	ldrex	r3, [r3]
 8013d18:	60fb      	str	r3, [r7, #12]
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	f023 0301 	bic.w	r3, r3, #1
 8013d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	3308      	adds	r3, #8
 8013d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013d2a:	61fa      	str	r2, [r7, #28]
 8013d2c:	61bb      	str	r3, [r7, #24]
 8013d2e:	69b9      	ldr	r1, [r7, #24]
 8013d30:	69fa      	ldr	r2, [r7, #28]
 8013d32:	e841 2300 	strex	r3, r2, [r1]
 8013d36:	617b      	str	r3, [r7, #20]
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d1e5      	bne.n	8013d0a <UART_CheckIdleState+0xde>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2220      	movs	r2, #32
 8013d42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	2200      	movs	r2, #0
 8013d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8013d4e:	2303      	movs	r3, #3
 8013d50:	e012      	b.n	8013d78 <UART_CheckIdleState+0x14c>
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2220      	movs	r2, #32
 8013d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2220      	movs	r2, #32
 8013d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2200      	movs	r2, #0
 8013d66:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	671a      	str	r2, [r3, #112]	@ 0x70
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	2200      	movs	r2, #0
 8013d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8013d76:	2300      	movs	r3, #0
 8013d78:	4618      	mov	r0, r3
 8013d7a:	3758      	adds	r7, #88	@ 0x58
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <UART_WaitOnFlagUntilTimeout>:
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b084      	sub	sp, #16
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	603b      	str	r3, [r7, #0]
 8013d8c:	4613      	mov	r3, r2
 8013d8e:	71fb      	strb	r3, [r7, #7]
 8013d90:	e04f      	b.n	8013e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013d92:	69bb      	ldr	r3, [r7, #24]
 8013d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d98:	d04b      	beq.n	8013e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013d9a:	f7f2 ffd5 	bl	8006d48 <HAL_GetTick>
 8013d9e:	4602      	mov	r2, r0
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	1ad3      	subs	r3, r2, r3
 8013da4:	69ba      	ldr	r2, [r7, #24]
 8013da6:	429a      	cmp	r2, r3
 8013da8:	d302      	bcc.n	8013db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8013daa:	69bb      	ldr	r3, [r7, #24]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d101      	bne.n	8013db4 <UART_WaitOnFlagUntilTimeout+0x34>
 8013db0:	2303      	movs	r3, #3
 8013db2:	e04e      	b.n	8013e52 <UART_WaitOnFlagUntilTimeout+0xd2>
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	f003 0304 	and.w	r3, r3, #4
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d037      	beq.n	8013e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	2b80      	cmp	r3, #128	@ 0x80
 8013dc6:	d034      	beq.n	8013e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	2b40      	cmp	r3, #64	@ 0x40
 8013dcc:	d031      	beq.n	8013e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	69db      	ldr	r3, [r3, #28]
 8013dd4:	f003 0308 	and.w	r3, r3, #8
 8013dd8:	2b08      	cmp	r3, #8
 8013dda:	d110      	bne.n	8013dfe <UART_WaitOnFlagUntilTimeout+0x7e>
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	2208      	movs	r2, #8
 8013de2:	621a      	str	r2, [r3, #32]
 8013de4:	68f8      	ldr	r0, [r7, #12]
 8013de6:	f000 f839 	bl	8013e5c <UART_EndRxTransfer>
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	2208      	movs	r2, #8
 8013dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	2200      	movs	r2, #0
 8013df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	e029      	b.n	8013e52 <UART_WaitOnFlagUntilTimeout+0xd2>
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	69db      	ldr	r3, [r3, #28]
 8013e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013e0c:	d111      	bne.n	8013e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013e16:	621a      	str	r2, [r3, #32]
 8013e18:	68f8      	ldr	r0, [r7, #12]
 8013e1a:	f000 f81f 	bl	8013e5c <UART_EndRxTransfer>
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2220      	movs	r2, #32
 8013e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8013e2e:	2303      	movs	r3, #3
 8013e30:	e00f      	b.n	8013e52 <UART_WaitOnFlagUntilTimeout+0xd2>
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	69da      	ldr	r2, [r3, #28]
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	4013      	ands	r3, r2
 8013e3c:	68ba      	ldr	r2, [r7, #8]
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	bf0c      	ite	eq
 8013e42:	2301      	moveq	r3, #1
 8013e44:	2300      	movne	r3, #0
 8013e46:	b2db      	uxtb	r3, r3
 8013e48:	461a      	mov	r2, r3
 8013e4a:	79fb      	ldrb	r3, [r7, #7]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d0a0      	beq.n	8013d92 <UART_WaitOnFlagUntilTimeout+0x12>
 8013e50:	2300      	movs	r3, #0
 8013e52:	4618      	mov	r0, r3
 8013e54:	3710      	adds	r7, #16
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}
	...

08013e5c <UART_EndRxTransfer>:
 8013e5c:	b480      	push	{r7}
 8013e5e:	b095      	sub	sp, #84	@ 0x54
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8013e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e6c:	e853 3f00 	ldrex	r3, [r3]
 8013e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8013e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	461a      	mov	r2, r3
 8013e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e82:	643b      	str	r3, [r7, #64]	@ 0x40
 8013e84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8013e86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013e88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013e8a:	e841 2300 	strex	r3, r2, [r1]
 8013e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d1e6      	bne.n	8013e64 <UART_EndRxTransfer+0x8>
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	3308      	adds	r3, #8
 8013e9c:	623b      	str	r3, [r7, #32]
 8013e9e:	6a3b      	ldr	r3, [r7, #32]
 8013ea0:	e853 3f00 	ldrex	r3, [r3]
 8013ea4:	61fb      	str	r3, [r7, #28]
 8013ea6:	69fa      	ldr	r2, [r7, #28]
 8013ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8013f24 <UART_EndRxTransfer+0xc8>)
 8013eaa:	4013      	ands	r3, r2
 8013eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	3308      	adds	r3, #8
 8013eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013eb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013eba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013ebc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013ebe:	e841 2300 	strex	r3, r2, [r1]
 8013ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8013ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d1e5      	bne.n	8013e96 <UART_EndRxTransfer+0x3a>
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ece:	2b01      	cmp	r3, #1
 8013ed0:	d118      	bne.n	8013f04 <UART_EndRxTransfer+0xa8>
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	60fb      	str	r3, [r7, #12]
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	e853 3f00 	ldrex	r3, [r3]
 8013ede:	60bb      	str	r3, [r7, #8]
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	f023 0310 	bic.w	r3, r3, #16
 8013ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	461a      	mov	r2, r3
 8013eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ef0:	61bb      	str	r3, [r7, #24]
 8013ef2:	617a      	str	r2, [r7, #20]
 8013ef4:	6979      	ldr	r1, [r7, #20]
 8013ef6:	69ba      	ldr	r2, [r7, #24]
 8013ef8:	e841 2300 	strex	r3, r2, [r1]
 8013efc:	613b      	str	r3, [r7, #16]
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d1e6      	bne.n	8013ed2 <UART_EndRxTransfer+0x76>
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2220      	movs	r2, #32
 8013f08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2200      	movs	r2, #0
 8013f16:	675a      	str	r2, [r3, #116]	@ 0x74
 8013f18:	bf00      	nop
 8013f1a:	3754      	adds	r7, #84	@ 0x54
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f22:	4770      	bx	lr
 8013f24:	effffffe 	.word	0xeffffffe

08013f28 <HAL_UARTEx_DisableFifoMode>:
 8013f28:	b480      	push	{r7}
 8013f2a:	b085      	sub	sp, #20
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013f36:	2b01      	cmp	r3, #1
 8013f38:	d101      	bne.n	8013f3e <HAL_UARTEx_DisableFifoMode+0x16>
 8013f3a:	2302      	movs	r3, #2
 8013f3c:	e027      	b.n	8013f8e <HAL_UARTEx_DisableFifoMode+0x66>
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2201      	movs	r2, #1
 8013f42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2224      	movs	r2, #36	@ 0x24
 8013f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	60fb      	str	r3, [r7, #12]
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	681a      	ldr	r2, [r3, #0]
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	f022 0201 	bic.w	r2, r2, #1
 8013f64:	601a      	str	r2, [r3, #0]
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8013f6c:	60fb      	str	r3, [r7, #12]
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2200      	movs	r2, #0
 8013f72:	665a      	str	r2, [r3, #100]	@ 0x64
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	68fa      	ldr	r2, [r7, #12]
 8013f7a:	601a      	str	r2, [r3, #0]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2220      	movs	r2, #32
 8013f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2200      	movs	r2, #0
 8013f88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3714      	adds	r7, #20
 8013f92:	46bd      	mov	sp, r7
 8013f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f98:	4770      	bx	lr

08013f9a <HAL_UARTEx_SetTxFifoThreshold>:
 8013f9a:	b580      	push	{r7, lr}
 8013f9c:	b084      	sub	sp, #16
 8013f9e:	af00      	add	r7, sp, #0
 8013fa0:	6078      	str	r0, [r7, #4]
 8013fa2:	6039      	str	r1, [r7, #0]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013faa:	2b01      	cmp	r3, #1
 8013fac:	d101      	bne.n	8013fb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013fae:	2302      	movs	r3, #2
 8013fb0:	e02d      	b.n	801400e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2224      	movs	r2, #36	@ 0x24
 8013fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	60fb      	str	r3, [r7, #12]
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	681a      	ldr	r2, [r3, #0]
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	f022 0201 	bic.w	r2, r2, #1
 8013fd8:	601a      	str	r2, [r3, #0]
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	689b      	ldr	r3, [r3, #8]
 8013fe0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	683a      	ldr	r2, [r7, #0]
 8013fea:	430a      	orrs	r2, r1
 8013fec:	609a      	str	r2, [r3, #8]
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f000 f850 	bl	8014094 <UARTEx_SetNbDataToProcess>
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	68fa      	ldr	r2, [r7, #12]
 8013ffa:	601a      	str	r2, [r3, #0]
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2220      	movs	r2, #32
 8014000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2200      	movs	r2, #0
 8014008:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801400c:	2300      	movs	r3, #0
 801400e:	4618      	mov	r0, r3
 8014010:	3710      	adds	r7, #16
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}

08014016 <HAL_UARTEx_SetRxFifoThreshold>:
 8014016:	b580      	push	{r7, lr}
 8014018:	b084      	sub	sp, #16
 801401a:	af00      	add	r7, sp, #0
 801401c:	6078      	str	r0, [r7, #4]
 801401e:	6039      	str	r1, [r7, #0]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014026:	2b01      	cmp	r3, #1
 8014028:	d101      	bne.n	801402e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801402a:	2302      	movs	r3, #2
 801402c:	e02d      	b.n	801408a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2201      	movs	r2, #1
 8014032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	2224      	movs	r2, #36	@ 0x24
 801403a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	60fb      	str	r3, [r7, #12]
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	681a      	ldr	r2, [r3, #0]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	f022 0201 	bic.w	r2, r2, #1
 8014054:	601a      	str	r2, [r3, #0]
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	689b      	ldr	r3, [r3, #8]
 801405c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	683a      	ldr	r2, [r7, #0]
 8014066:	430a      	orrs	r2, r1
 8014068:	609a      	str	r2, [r3, #8]
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f000 f812 	bl	8014094 <UARTEx_SetNbDataToProcess>
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	68fa      	ldr	r2, [r7, #12]
 8014076:	601a      	str	r2, [r3, #0]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2220      	movs	r2, #32
 801407c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2200      	movs	r2, #0
 8014084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8014088:	2300      	movs	r3, #0
 801408a:	4618      	mov	r0, r3
 801408c:	3710      	adds	r7, #16
 801408e:	46bd      	mov	sp, r7
 8014090:	bd80      	pop	{r7, pc}
	...

08014094 <UARTEx_SetNbDataToProcess>:
 8014094:	b480      	push	{r7}
 8014096:	b085      	sub	sp, #20
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d108      	bne.n	80140b6 <UARTEx_SetNbDataToProcess+0x22>
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2201      	movs	r2, #1
 80140a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2201      	movs	r2, #1
 80140b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80140b4:	e031      	b.n	801411a <UARTEx_SetNbDataToProcess+0x86>
 80140b6:	2310      	movs	r3, #16
 80140b8:	73fb      	strb	r3, [r7, #15]
 80140ba:	2310      	movs	r3, #16
 80140bc:	73bb      	strb	r3, [r7, #14]
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	689b      	ldr	r3, [r3, #8]
 80140c4:	0e5b      	lsrs	r3, r3, #25
 80140c6:	b2db      	uxtb	r3, r3
 80140c8:	f003 0307 	and.w	r3, r3, #7
 80140cc:	737b      	strb	r3, [r7, #13]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	689b      	ldr	r3, [r3, #8]
 80140d4:	0f5b      	lsrs	r3, r3, #29
 80140d6:	b2db      	uxtb	r3, r3
 80140d8:	f003 0307 	and.w	r3, r3, #7
 80140dc:	733b      	strb	r3, [r7, #12]
 80140de:	7bbb      	ldrb	r3, [r7, #14]
 80140e0:	7b3a      	ldrb	r2, [r7, #12]
 80140e2:	4911      	ldr	r1, [pc, #68]	@ (8014128 <UARTEx_SetNbDataToProcess+0x94>)
 80140e4:	5c8a      	ldrb	r2, [r1, r2]
 80140e6:	fb02 f303 	mul.w	r3, r2, r3
 80140ea:	7b3a      	ldrb	r2, [r7, #12]
 80140ec:	490f      	ldr	r1, [pc, #60]	@ (801412c <UARTEx_SetNbDataToProcess+0x98>)
 80140ee:	5c8a      	ldrb	r2, [r1, r2]
 80140f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80140f4:	b29a      	uxth	r2, r3
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80140fc:	7bfb      	ldrb	r3, [r7, #15]
 80140fe:	7b7a      	ldrb	r2, [r7, #13]
 8014100:	4909      	ldr	r1, [pc, #36]	@ (8014128 <UARTEx_SetNbDataToProcess+0x94>)
 8014102:	5c8a      	ldrb	r2, [r1, r2]
 8014104:	fb02 f303 	mul.w	r3, r2, r3
 8014108:	7b7a      	ldrb	r2, [r7, #13]
 801410a:	4908      	ldr	r1, [pc, #32]	@ (801412c <UARTEx_SetNbDataToProcess+0x98>)
 801410c:	5c8a      	ldrb	r2, [r1, r2]
 801410e:	fb93 f3f2 	sdiv	r3, r3, r2
 8014112:	b29a      	uxth	r2, r3
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801411a:	bf00      	nop
 801411c:	3714      	adds	r7, #20
 801411e:	46bd      	mov	sp, r7
 8014120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014124:	4770      	bx	lr
 8014126:	bf00      	nop
 8014128:	0801d7e0 	.word	0x0801d7e0
 801412c:	0801d7e8 	.word	0x0801d7e8

08014130 <USB_CoreInit>:
 8014130:	b084      	sub	sp, #16
 8014132:	b580      	push	{r7, lr}
 8014134:	b084      	sub	sp, #16
 8014136:	af00      	add	r7, sp, #0
 8014138:	6078      	str	r0, [r7, #4]
 801413a:	f107 001c 	add.w	r0, r7, #28
 801413e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014142:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014146:	2b01      	cmp	r3, #1
 8014148:	d121      	bne.n	801418e <USB_CoreInit+0x5e>
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801414e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	639a      	str	r2, [r3, #56]	@ 0x38
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	68da      	ldr	r2, [r3, #12]
 801415a:	4b2c      	ldr	r3, [pc, #176]	@ (801420c <USB_CoreInit+0xdc>)
 801415c:	4013      	ands	r3, r2
 801415e:	687a      	ldr	r2, [r7, #4]
 8014160:	60d3      	str	r3, [r2, #12]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	68db      	ldr	r3, [r3, #12]
 8014166:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	60da      	str	r2, [r3, #12]
 801416e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014172:	2b01      	cmp	r3, #1
 8014174:	d105      	bne.n	8014182 <USB_CoreInit+0x52>
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	68db      	ldr	r3, [r3, #12]
 801417a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	60da      	str	r2, [r3, #12]
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f001 faf6 	bl	8015774 <USB_CoreReset>
 8014188:	4603      	mov	r3, r0
 801418a:	73fb      	strb	r3, [r7, #15]
 801418c:	e01b      	b.n	80141c6 <USB_CoreInit+0x96>
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	68db      	ldr	r3, [r3, #12]
 8014192:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	60da      	str	r2, [r3, #12]
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f001 faea 	bl	8015774 <USB_CoreReset>
 80141a0:	4603      	mov	r3, r0
 80141a2:	73fb      	strb	r3, [r7, #15]
 80141a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d106      	bne.n	80141ba <USB_CoreInit+0x8a>
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80141b8:	e005      	b.n	80141c6 <USB_CoreInit+0x96>
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80141c6:	7fbb      	ldrb	r3, [r7, #30]
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	d116      	bne.n	80141fa <USB_CoreInit+0xca>
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80141d0:	b29a      	uxth	r2, r3
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80141da:	4b0d      	ldr	r3, [pc, #52]	@ (8014210 <USB_CoreInit+0xe0>)
 80141dc:	4313      	orrs	r3, r2
 80141de:	687a      	ldr	r2, [r7, #4]
 80141e0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	689b      	ldr	r3, [r3, #8]
 80141e6:	f043 0206 	orr.w	r2, r3, #6
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	609a      	str	r2, [r3, #8]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	689b      	ldr	r3, [r3, #8]
 80141f2:	f043 0220 	orr.w	r2, r3, #32
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	609a      	str	r2, [r3, #8]
 80141fa:	7bfb      	ldrb	r3, [r7, #15]
 80141fc:	4618      	mov	r0, r3
 80141fe:	3710      	adds	r7, #16
 8014200:	46bd      	mov	sp, r7
 8014202:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014206:	b004      	add	sp, #16
 8014208:	4770      	bx	lr
 801420a:	bf00      	nop
 801420c:	ffbdffbf 	.word	0xffbdffbf
 8014210:	03ee0000 	.word	0x03ee0000

08014214 <USB_SetTurnaroundTime>:
 8014214:	b480      	push	{r7}
 8014216:	b087      	sub	sp, #28
 8014218:	af00      	add	r7, sp, #0
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	60b9      	str	r1, [r7, #8]
 801421e:	4613      	mov	r3, r2
 8014220:	71fb      	strb	r3, [r7, #7]
 8014222:	79fb      	ldrb	r3, [r7, #7]
 8014224:	2b02      	cmp	r3, #2
 8014226:	d165      	bne.n	80142f4 <USB_SetTurnaroundTime+0xe0>
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	4a41      	ldr	r2, [pc, #260]	@ (8014330 <USB_SetTurnaroundTime+0x11c>)
 801422c:	4293      	cmp	r3, r2
 801422e:	d906      	bls.n	801423e <USB_SetTurnaroundTime+0x2a>
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	4a40      	ldr	r2, [pc, #256]	@ (8014334 <USB_SetTurnaroundTime+0x120>)
 8014234:	4293      	cmp	r3, r2
 8014236:	d202      	bcs.n	801423e <USB_SetTurnaroundTime+0x2a>
 8014238:	230f      	movs	r3, #15
 801423a:	617b      	str	r3, [r7, #20]
 801423c:	e062      	b.n	8014304 <USB_SetTurnaroundTime+0xf0>
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	4a3c      	ldr	r2, [pc, #240]	@ (8014334 <USB_SetTurnaroundTime+0x120>)
 8014242:	4293      	cmp	r3, r2
 8014244:	d306      	bcc.n	8014254 <USB_SetTurnaroundTime+0x40>
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	4a3b      	ldr	r2, [pc, #236]	@ (8014338 <USB_SetTurnaroundTime+0x124>)
 801424a:	4293      	cmp	r3, r2
 801424c:	d202      	bcs.n	8014254 <USB_SetTurnaroundTime+0x40>
 801424e:	230e      	movs	r3, #14
 8014250:	617b      	str	r3, [r7, #20]
 8014252:	e057      	b.n	8014304 <USB_SetTurnaroundTime+0xf0>
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	4a38      	ldr	r2, [pc, #224]	@ (8014338 <USB_SetTurnaroundTime+0x124>)
 8014258:	4293      	cmp	r3, r2
 801425a:	d306      	bcc.n	801426a <USB_SetTurnaroundTime+0x56>
 801425c:	68bb      	ldr	r3, [r7, #8]
 801425e:	4a37      	ldr	r2, [pc, #220]	@ (801433c <USB_SetTurnaroundTime+0x128>)
 8014260:	4293      	cmp	r3, r2
 8014262:	d202      	bcs.n	801426a <USB_SetTurnaroundTime+0x56>
 8014264:	230d      	movs	r3, #13
 8014266:	617b      	str	r3, [r7, #20]
 8014268:	e04c      	b.n	8014304 <USB_SetTurnaroundTime+0xf0>
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	4a33      	ldr	r2, [pc, #204]	@ (801433c <USB_SetTurnaroundTime+0x128>)
 801426e:	4293      	cmp	r3, r2
 8014270:	d306      	bcc.n	8014280 <USB_SetTurnaroundTime+0x6c>
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	4a32      	ldr	r2, [pc, #200]	@ (8014340 <USB_SetTurnaroundTime+0x12c>)
 8014276:	4293      	cmp	r3, r2
 8014278:	d802      	bhi.n	8014280 <USB_SetTurnaroundTime+0x6c>
 801427a:	230c      	movs	r3, #12
 801427c:	617b      	str	r3, [r7, #20]
 801427e:	e041      	b.n	8014304 <USB_SetTurnaroundTime+0xf0>
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	4a2f      	ldr	r2, [pc, #188]	@ (8014340 <USB_SetTurnaroundTime+0x12c>)
 8014284:	4293      	cmp	r3, r2
 8014286:	d906      	bls.n	8014296 <USB_SetTurnaroundTime+0x82>
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	4a2e      	ldr	r2, [pc, #184]	@ (8014344 <USB_SetTurnaroundTime+0x130>)
 801428c:	4293      	cmp	r3, r2
 801428e:	d802      	bhi.n	8014296 <USB_SetTurnaroundTime+0x82>
 8014290:	230b      	movs	r3, #11
 8014292:	617b      	str	r3, [r7, #20]
 8014294:	e036      	b.n	8014304 <USB_SetTurnaroundTime+0xf0>
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	4a2a      	ldr	r2, [pc, #168]	@ (8014344 <USB_SetTurnaroundTime+0x130>)
 801429a:	4293      	cmp	r3, r2
 801429c:	d906      	bls.n	80142ac <USB_SetTurnaroundTime+0x98>
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	4a29      	ldr	r2, [pc, #164]	@ (8014348 <USB_SetTurnaroundTime+0x134>)
 80142a2:	4293      	cmp	r3, r2
 80142a4:	d802      	bhi.n	80142ac <USB_SetTurnaroundTime+0x98>
 80142a6:	230a      	movs	r3, #10
 80142a8:	617b      	str	r3, [r7, #20]
 80142aa:	e02b      	b.n	8014304 <USB_SetTurnaroundTime+0xf0>
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	4a26      	ldr	r2, [pc, #152]	@ (8014348 <USB_SetTurnaroundTime+0x134>)
 80142b0:	4293      	cmp	r3, r2
 80142b2:	d906      	bls.n	80142c2 <USB_SetTurnaroundTime+0xae>
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	4a25      	ldr	r2, [pc, #148]	@ (801434c <USB_SetTurnaroundTime+0x138>)
 80142b8:	4293      	cmp	r3, r2
 80142ba:	d202      	bcs.n	80142c2 <USB_SetTurnaroundTime+0xae>
 80142bc:	2309      	movs	r3, #9
 80142be:	617b      	str	r3, [r7, #20]
 80142c0:	e020      	b.n	8014304 <USB_SetTurnaroundTime+0xf0>
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	4a21      	ldr	r2, [pc, #132]	@ (801434c <USB_SetTurnaroundTime+0x138>)
 80142c6:	4293      	cmp	r3, r2
 80142c8:	d306      	bcc.n	80142d8 <USB_SetTurnaroundTime+0xc4>
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	4a20      	ldr	r2, [pc, #128]	@ (8014350 <USB_SetTurnaroundTime+0x13c>)
 80142ce:	4293      	cmp	r3, r2
 80142d0:	d802      	bhi.n	80142d8 <USB_SetTurnaroundTime+0xc4>
 80142d2:	2308      	movs	r3, #8
 80142d4:	617b      	str	r3, [r7, #20]
 80142d6:	e015      	b.n	8014304 <USB_SetTurnaroundTime+0xf0>
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	4a1d      	ldr	r2, [pc, #116]	@ (8014350 <USB_SetTurnaroundTime+0x13c>)
 80142dc:	4293      	cmp	r3, r2
 80142de:	d906      	bls.n	80142ee <USB_SetTurnaroundTime+0xda>
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	4a1c      	ldr	r2, [pc, #112]	@ (8014354 <USB_SetTurnaroundTime+0x140>)
 80142e4:	4293      	cmp	r3, r2
 80142e6:	d202      	bcs.n	80142ee <USB_SetTurnaroundTime+0xda>
 80142e8:	2307      	movs	r3, #7
 80142ea:	617b      	str	r3, [r7, #20]
 80142ec:	e00a      	b.n	8014304 <USB_SetTurnaroundTime+0xf0>
 80142ee:	2306      	movs	r3, #6
 80142f0:	617b      	str	r3, [r7, #20]
 80142f2:	e007      	b.n	8014304 <USB_SetTurnaroundTime+0xf0>
 80142f4:	79fb      	ldrb	r3, [r7, #7]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d102      	bne.n	8014300 <USB_SetTurnaroundTime+0xec>
 80142fa:	2309      	movs	r3, #9
 80142fc:	617b      	str	r3, [r7, #20]
 80142fe:	e001      	b.n	8014304 <USB_SetTurnaroundTime+0xf0>
 8014300:	2309      	movs	r3, #9
 8014302:	617b      	str	r3, [r7, #20]
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	68db      	ldr	r3, [r3, #12]
 8014308:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	60da      	str	r2, [r3, #12]
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	68da      	ldr	r2, [r3, #12]
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	029b      	lsls	r3, r3, #10
 8014318:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 801431c:	431a      	orrs	r2, r3
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	60da      	str	r2, [r3, #12]
 8014322:	2300      	movs	r3, #0
 8014324:	4618      	mov	r0, r3
 8014326:	371c      	adds	r7, #28
 8014328:	46bd      	mov	sp, r7
 801432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432e:	4770      	bx	lr
 8014330:	00d8acbf 	.word	0x00d8acbf
 8014334:	00e4e1c0 	.word	0x00e4e1c0
 8014338:	00f42400 	.word	0x00f42400
 801433c:	01067380 	.word	0x01067380
 8014340:	011a499f 	.word	0x011a499f
 8014344:	01312cff 	.word	0x01312cff
 8014348:	014ca43f 	.word	0x014ca43f
 801434c:	016e3600 	.word	0x016e3600
 8014350:	01a6ab1f 	.word	0x01a6ab1f
 8014354:	01e84800 	.word	0x01e84800

08014358 <USB_EnableGlobalInt>:
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	689b      	ldr	r3, [r3, #8]
 8014364:	f043 0201 	orr.w	r2, r3, #1
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	609a      	str	r2, [r3, #8]
 801436c:	2300      	movs	r3, #0
 801436e:	4618      	mov	r0, r3
 8014370:	370c      	adds	r7, #12
 8014372:	46bd      	mov	sp, r7
 8014374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014378:	4770      	bx	lr

0801437a <USB_DisableGlobalInt>:
 801437a:	b480      	push	{r7}
 801437c:	b083      	sub	sp, #12
 801437e:	af00      	add	r7, sp, #0
 8014380:	6078      	str	r0, [r7, #4]
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	689b      	ldr	r3, [r3, #8]
 8014386:	f023 0201 	bic.w	r2, r3, #1
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	609a      	str	r2, [r3, #8]
 801438e:	2300      	movs	r3, #0
 8014390:	4618      	mov	r0, r3
 8014392:	370c      	adds	r7, #12
 8014394:	46bd      	mov	sp, r7
 8014396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439a:	4770      	bx	lr

0801439c <USB_SetCurrentMode>:
 801439c:	b580      	push	{r7, lr}
 801439e:	b084      	sub	sp, #16
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
 80143a4:	460b      	mov	r3, r1
 80143a6:	70fb      	strb	r3, [r7, #3]
 80143a8:	2300      	movs	r3, #0
 80143aa:	60fb      	str	r3, [r7, #12]
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	68db      	ldr	r3, [r3, #12]
 80143b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	60da      	str	r2, [r3, #12]
 80143b8:	78fb      	ldrb	r3, [r7, #3]
 80143ba:	2b01      	cmp	r3, #1
 80143bc:	d115      	bne.n	80143ea <USB_SetCurrentMode+0x4e>
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	68db      	ldr	r3, [r3, #12]
 80143c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	60da      	str	r2, [r3, #12]
 80143ca:	200a      	movs	r0, #10
 80143cc:	f7f2 fcc8 	bl	8006d60 <HAL_Delay>
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	330a      	adds	r3, #10
 80143d4:	60fb      	str	r3, [r7, #12]
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f001 f93b 	bl	8015652 <USB_GetMode>
 80143dc:	4603      	mov	r3, r0
 80143de:	2b01      	cmp	r3, #1
 80143e0:	d01e      	beq.n	8014420 <USB_SetCurrentMode+0x84>
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80143e6:	d9f0      	bls.n	80143ca <USB_SetCurrentMode+0x2e>
 80143e8:	e01a      	b.n	8014420 <USB_SetCurrentMode+0x84>
 80143ea:	78fb      	ldrb	r3, [r7, #3]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d115      	bne.n	801441c <USB_SetCurrentMode+0x80>
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	68db      	ldr	r3, [r3, #12]
 80143f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	60da      	str	r2, [r3, #12]
 80143fc:	200a      	movs	r0, #10
 80143fe:	f7f2 fcaf 	bl	8006d60 <HAL_Delay>
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	330a      	adds	r3, #10
 8014406:	60fb      	str	r3, [r7, #12]
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f001 f922 	bl	8015652 <USB_GetMode>
 801440e:	4603      	mov	r3, r0
 8014410:	2b00      	cmp	r3, #0
 8014412:	d005      	beq.n	8014420 <USB_SetCurrentMode+0x84>
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	2bc7      	cmp	r3, #199	@ 0xc7
 8014418:	d9f0      	bls.n	80143fc <USB_SetCurrentMode+0x60>
 801441a:	e001      	b.n	8014420 <USB_SetCurrentMode+0x84>
 801441c:	2301      	movs	r3, #1
 801441e:	e005      	b.n	801442c <USB_SetCurrentMode+0x90>
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2bc8      	cmp	r3, #200	@ 0xc8
 8014424:	d101      	bne.n	801442a <USB_SetCurrentMode+0x8e>
 8014426:	2301      	movs	r3, #1
 8014428:	e000      	b.n	801442c <USB_SetCurrentMode+0x90>
 801442a:	2300      	movs	r3, #0
 801442c:	4618      	mov	r0, r3
 801442e:	3710      	adds	r7, #16
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}

08014434 <USB_DevInit>:
 8014434:	b084      	sub	sp, #16
 8014436:	b580      	push	{r7, lr}
 8014438:	b086      	sub	sp, #24
 801443a:	af00      	add	r7, sp, #0
 801443c:	6078      	str	r0, [r7, #4]
 801443e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8014442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014446:	2300      	movs	r3, #0
 8014448:	75fb      	strb	r3, [r7, #23]
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	60fb      	str	r3, [r7, #12]
 801444e:	2300      	movs	r3, #0
 8014450:	613b      	str	r3, [r7, #16]
 8014452:	e009      	b.n	8014468 <USB_DevInit+0x34>
 8014454:	687a      	ldr	r2, [r7, #4]
 8014456:	693b      	ldr	r3, [r7, #16]
 8014458:	3340      	adds	r3, #64	@ 0x40
 801445a:	009b      	lsls	r3, r3, #2
 801445c:	4413      	add	r3, r2
 801445e:	2200      	movs	r2, #0
 8014460:	605a      	str	r2, [r3, #4]
 8014462:	693b      	ldr	r3, [r7, #16]
 8014464:	3301      	adds	r3, #1
 8014466:	613b      	str	r3, [r7, #16]
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	2b0e      	cmp	r3, #14
 801446c:	d9f2      	bls.n	8014454 <USB_DevInit+0x20>
 801446e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014472:	2b00      	cmp	r3, #0
 8014474:	d11c      	bne.n	80144b0 <USB_DevInit+0x7c>
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801447c:	685b      	ldr	r3, [r3, #4]
 801447e:	68fa      	ldr	r2, [r7, #12]
 8014480:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014484:	f043 0302 	orr.w	r3, r3, #2
 8014488:	6053      	str	r3, [r2, #4]
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801448e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	639a      	str	r2, [r3, #56]	@ 0x38
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	601a      	str	r2, [r3, #0]
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	601a      	str	r2, [r3, #0]
 80144ae:	e005      	b.n	80144bc <USB_DevInit+0x88>
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80144c2:	461a      	mov	r2, r3
 80144c4:	2300      	movs	r3, #0
 80144c6:	6013      	str	r3, [r2, #0]
 80144c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80144cc:	2b01      	cmp	r3, #1
 80144ce:	d10d      	bne.n	80144ec <USB_DevInit+0xb8>
 80144d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d104      	bne.n	80144e2 <USB_DevInit+0xae>
 80144d8:	2100      	movs	r1, #0
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f000 f968 	bl	80147b0 <USB_SetDevSpeed>
 80144e0:	e008      	b.n	80144f4 <USB_DevInit+0xc0>
 80144e2:	2101      	movs	r1, #1
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f000 f963 	bl	80147b0 <USB_SetDevSpeed>
 80144ea:	e003      	b.n	80144f4 <USB_DevInit+0xc0>
 80144ec:	2103      	movs	r1, #3
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f000 f95e 	bl	80147b0 <USB_SetDevSpeed>
 80144f4:	2110      	movs	r1, #16
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f000 f8fa 	bl	80146f0 <USB_FlushTxFifo>
 80144fc:	4603      	mov	r3, r0
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d001      	beq.n	8014506 <USB_DevInit+0xd2>
 8014502:	2301      	movs	r3, #1
 8014504:	75fb      	strb	r3, [r7, #23]
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f000 f924 	bl	8014754 <USB_FlushRxFifo>
 801450c:	4603      	mov	r3, r0
 801450e:	2b00      	cmp	r3, #0
 8014510:	d001      	beq.n	8014516 <USB_DevInit+0xe2>
 8014512:	2301      	movs	r3, #1
 8014514:	75fb      	strb	r3, [r7, #23]
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801451c:	461a      	mov	r2, r3
 801451e:	2300      	movs	r3, #0
 8014520:	6113      	str	r3, [r2, #16]
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014528:	461a      	mov	r2, r3
 801452a:	2300      	movs	r3, #0
 801452c:	6153      	str	r3, [r2, #20]
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014534:	461a      	mov	r2, r3
 8014536:	2300      	movs	r3, #0
 8014538:	61d3      	str	r3, [r2, #28]
 801453a:	2300      	movs	r3, #0
 801453c:	613b      	str	r3, [r7, #16]
 801453e:	e043      	b.n	80145c8 <USB_DevInit+0x194>
 8014540:	693b      	ldr	r3, [r7, #16]
 8014542:	015a      	lsls	r2, r3, #5
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	4413      	add	r3, r2
 8014548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014552:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014556:	d118      	bne.n	801458a <USB_DevInit+0x156>
 8014558:	693b      	ldr	r3, [r7, #16]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d10a      	bne.n	8014574 <USB_DevInit+0x140>
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	015a      	lsls	r2, r3, #5
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	4413      	add	r3, r2
 8014566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801456a:	461a      	mov	r2, r3
 801456c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014570:	6013      	str	r3, [r2, #0]
 8014572:	e013      	b.n	801459c <USB_DevInit+0x168>
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	015a      	lsls	r2, r3, #5
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	4413      	add	r3, r2
 801457c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014580:	461a      	mov	r2, r3
 8014582:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014586:	6013      	str	r3, [r2, #0]
 8014588:	e008      	b.n	801459c <USB_DevInit+0x168>
 801458a:	693b      	ldr	r3, [r7, #16]
 801458c:	015a      	lsls	r2, r3, #5
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	4413      	add	r3, r2
 8014592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014596:	461a      	mov	r2, r3
 8014598:	2300      	movs	r3, #0
 801459a:	6013      	str	r3, [r2, #0]
 801459c:	693b      	ldr	r3, [r7, #16]
 801459e:	015a      	lsls	r2, r3, #5
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	4413      	add	r3, r2
 80145a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80145a8:	461a      	mov	r2, r3
 80145aa:	2300      	movs	r3, #0
 80145ac:	6113      	str	r3, [r2, #16]
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	015a      	lsls	r2, r3, #5
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	4413      	add	r3, r2
 80145b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80145ba:	461a      	mov	r2, r3
 80145bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80145c0:	6093      	str	r3, [r2, #8]
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	3301      	adds	r3, #1
 80145c6:	613b      	str	r3, [r7, #16]
 80145c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80145cc:	461a      	mov	r2, r3
 80145ce:	693b      	ldr	r3, [r7, #16]
 80145d0:	4293      	cmp	r3, r2
 80145d2:	d3b5      	bcc.n	8014540 <USB_DevInit+0x10c>
 80145d4:	2300      	movs	r3, #0
 80145d6:	613b      	str	r3, [r7, #16]
 80145d8:	e043      	b.n	8014662 <USB_DevInit+0x22e>
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	015a      	lsls	r2, r3, #5
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	4413      	add	r3, r2
 80145e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80145ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80145f0:	d118      	bne.n	8014624 <USB_DevInit+0x1f0>
 80145f2:	693b      	ldr	r3, [r7, #16]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d10a      	bne.n	801460e <USB_DevInit+0x1da>
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	015a      	lsls	r2, r3, #5
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	4413      	add	r3, r2
 8014600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014604:	461a      	mov	r2, r3
 8014606:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801460a:	6013      	str	r3, [r2, #0]
 801460c:	e013      	b.n	8014636 <USB_DevInit+0x202>
 801460e:	693b      	ldr	r3, [r7, #16]
 8014610:	015a      	lsls	r2, r3, #5
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	4413      	add	r3, r2
 8014616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801461a:	461a      	mov	r2, r3
 801461c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014620:	6013      	str	r3, [r2, #0]
 8014622:	e008      	b.n	8014636 <USB_DevInit+0x202>
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	015a      	lsls	r2, r3, #5
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	4413      	add	r3, r2
 801462c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014630:	461a      	mov	r2, r3
 8014632:	2300      	movs	r3, #0
 8014634:	6013      	str	r3, [r2, #0]
 8014636:	693b      	ldr	r3, [r7, #16]
 8014638:	015a      	lsls	r2, r3, #5
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	4413      	add	r3, r2
 801463e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014642:	461a      	mov	r2, r3
 8014644:	2300      	movs	r3, #0
 8014646:	6113      	str	r3, [r2, #16]
 8014648:	693b      	ldr	r3, [r7, #16]
 801464a:	015a      	lsls	r2, r3, #5
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	4413      	add	r3, r2
 8014650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014654:	461a      	mov	r2, r3
 8014656:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801465a:	6093      	str	r3, [r2, #8]
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	3301      	adds	r3, #1
 8014660:	613b      	str	r3, [r7, #16]
 8014662:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014666:	461a      	mov	r2, r3
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	4293      	cmp	r3, r2
 801466c:	d3b5      	bcc.n	80145da <USB_DevInit+0x1a6>
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014674:	691b      	ldr	r3, [r3, #16]
 8014676:	68fa      	ldr	r2, [r7, #12]
 8014678:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801467c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014680:	6113      	str	r3, [r2, #16]
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2200      	movs	r2, #0
 8014686:	619a      	str	r2, [r3, #24]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801468e:	615a      	str	r2, [r3, #20]
 8014690:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014694:	2b00      	cmp	r3, #0
 8014696:	d105      	bne.n	80146a4 <USB_DevInit+0x270>
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	699b      	ldr	r3, [r3, #24]
 801469c:	f043 0210 	orr.w	r2, r3, #16
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	619a      	str	r2, [r3, #24]
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	699a      	ldr	r2, [r3, #24]
 80146a8:	4b0f      	ldr	r3, [pc, #60]	@ (80146e8 <USB_DevInit+0x2b4>)
 80146aa:	4313      	orrs	r3, r2
 80146ac:	687a      	ldr	r2, [r7, #4]
 80146ae:	6193      	str	r3, [r2, #24]
 80146b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d005      	beq.n	80146c4 <USB_DevInit+0x290>
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	699b      	ldr	r3, [r3, #24]
 80146bc:	f043 0208 	orr.w	r2, r3, #8
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	619a      	str	r2, [r3, #24]
 80146c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80146c8:	2b01      	cmp	r3, #1
 80146ca:	d105      	bne.n	80146d8 <USB_DevInit+0x2a4>
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	699a      	ldr	r2, [r3, #24]
 80146d0:	4b06      	ldr	r3, [pc, #24]	@ (80146ec <USB_DevInit+0x2b8>)
 80146d2:	4313      	orrs	r3, r2
 80146d4:	687a      	ldr	r2, [r7, #4]
 80146d6:	6193      	str	r3, [r2, #24]
 80146d8:	7dfb      	ldrb	r3, [r7, #23]
 80146da:	4618      	mov	r0, r3
 80146dc:	3718      	adds	r7, #24
 80146de:	46bd      	mov	sp, r7
 80146e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80146e4:	b004      	add	sp, #16
 80146e6:	4770      	bx	lr
 80146e8:	803c3800 	.word	0x803c3800
 80146ec:	40000004 	.word	0x40000004

080146f0 <USB_FlushTxFifo>:
 80146f0:	b480      	push	{r7}
 80146f2:	b085      	sub	sp, #20
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	6039      	str	r1, [r7, #0]
 80146fa:	2300      	movs	r3, #0
 80146fc:	60fb      	str	r3, [r7, #12]
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	3301      	adds	r3, #1
 8014702:	60fb      	str	r3, [r7, #12]
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801470a:	d901      	bls.n	8014710 <USB_FlushTxFifo+0x20>
 801470c:	2303      	movs	r3, #3
 801470e:	e01b      	b.n	8014748 <USB_FlushTxFifo+0x58>
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	691b      	ldr	r3, [r3, #16]
 8014714:	2b00      	cmp	r3, #0
 8014716:	daf2      	bge.n	80146fe <USB_FlushTxFifo+0xe>
 8014718:	2300      	movs	r3, #0
 801471a:	60fb      	str	r3, [r7, #12]
 801471c:	683b      	ldr	r3, [r7, #0]
 801471e:	019b      	lsls	r3, r3, #6
 8014720:	f043 0220 	orr.w	r2, r3, #32
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	611a      	str	r2, [r3, #16]
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	3301      	adds	r3, #1
 801472c:	60fb      	str	r3, [r7, #12]
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014734:	d901      	bls.n	801473a <USB_FlushTxFifo+0x4a>
 8014736:	2303      	movs	r3, #3
 8014738:	e006      	b.n	8014748 <USB_FlushTxFifo+0x58>
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	691b      	ldr	r3, [r3, #16]
 801473e:	f003 0320 	and.w	r3, r3, #32
 8014742:	2b20      	cmp	r3, #32
 8014744:	d0f0      	beq.n	8014728 <USB_FlushTxFifo+0x38>
 8014746:	2300      	movs	r3, #0
 8014748:	4618      	mov	r0, r3
 801474a:	3714      	adds	r7, #20
 801474c:	46bd      	mov	sp, r7
 801474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014752:	4770      	bx	lr

08014754 <USB_FlushRxFifo>:
 8014754:	b480      	push	{r7}
 8014756:	b085      	sub	sp, #20
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	2300      	movs	r3, #0
 801475e:	60fb      	str	r3, [r7, #12]
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	3301      	adds	r3, #1
 8014764:	60fb      	str	r3, [r7, #12]
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801476c:	d901      	bls.n	8014772 <USB_FlushRxFifo+0x1e>
 801476e:	2303      	movs	r3, #3
 8014770:	e018      	b.n	80147a4 <USB_FlushRxFifo+0x50>
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	691b      	ldr	r3, [r3, #16]
 8014776:	2b00      	cmp	r3, #0
 8014778:	daf2      	bge.n	8014760 <USB_FlushRxFifo+0xc>
 801477a:	2300      	movs	r3, #0
 801477c:	60fb      	str	r3, [r7, #12]
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2210      	movs	r2, #16
 8014782:	611a      	str	r2, [r3, #16]
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	3301      	adds	r3, #1
 8014788:	60fb      	str	r3, [r7, #12]
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014790:	d901      	bls.n	8014796 <USB_FlushRxFifo+0x42>
 8014792:	2303      	movs	r3, #3
 8014794:	e006      	b.n	80147a4 <USB_FlushRxFifo+0x50>
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	691b      	ldr	r3, [r3, #16]
 801479a:	f003 0310 	and.w	r3, r3, #16
 801479e:	2b10      	cmp	r3, #16
 80147a0:	d0f0      	beq.n	8014784 <USB_FlushRxFifo+0x30>
 80147a2:	2300      	movs	r3, #0
 80147a4:	4618      	mov	r0, r3
 80147a6:	3714      	adds	r7, #20
 80147a8:	46bd      	mov	sp, r7
 80147aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ae:	4770      	bx	lr

080147b0 <USB_SetDevSpeed>:
 80147b0:	b480      	push	{r7}
 80147b2:	b085      	sub	sp, #20
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
 80147b8:	460b      	mov	r3, r1
 80147ba:	70fb      	strb	r3, [r7, #3]
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	60fb      	str	r3, [r7, #12]
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80147c6:	681a      	ldr	r2, [r3, #0]
 80147c8:	78fb      	ldrb	r3, [r7, #3]
 80147ca:	68f9      	ldr	r1, [r7, #12]
 80147cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80147d0:	4313      	orrs	r3, r2
 80147d2:	600b      	str	r3, [r1, #0]
 80147d4:	2300      	movs	r3, #0
 80147d6:	4618      	mov	r0, r3
 80147d8:	3714      	adds	r7, #20
 80147da:	46bd      	mov	sp, r7
 80147dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e0:	4770      	bx	lr

080147e2 <USB_GetDevSpeed>:
 80147e2:	b480      	push	{r7}
 80147e4:	b087      	sub	sp, #28
 80147e6:	af00      	add	r7, sp, #0
 80147e8:	6078      	str	r0, [r7, #4]
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	613b      	str	r3, [r7, #16]
 80147ee:	693b      	ldr	r3, [r7, #16]
 80147f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80147f4:	689b      	ldr	r3, [r3, #8]
 80147f6:	f003 0306 	and.w	r3, r3, #6
 80147fa:	60fb      	str	r3, [r7, #12]
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d102      	bne.n	8014808 <USB_GetDevSpeed+0x26>
 8014802:	2300      	movs	r3, #0
 8014804:	75fb      	strb	r3, [r7, #23]
 8014806:	e00a      	b.n	801481e <USB_GetDevSpeed+0x3c>
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	2b02      	cmp	r3, #2
 801480c:	d002      	beq.n	8014814 <USB_GetDevSpeed+0x32>
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	2b06      	cmp	r3, #6
 8014812:	d102      	bne.n	801481a <USB_GetDevSpeed+0x38>
 8014814:	2302      	movs	r3, #2
 8014816:	75fb      	strb	r3, [r7, #23]
 8014818:	e001      	b.n	801481e <USB_GetDevSpeed+0x3c>
 801481a:	230f      	movs	r3, #15
 801481c:	75fb      	strb	r3, [r7, #23]
 801481e:	7dfb      	ldrb	r3, [r7, #23]
 8014820:	4618      	mov	r0, r3
 8014822:	371c      	adds	r7, #28
 8014824:	46bd      	mov	sp, r7
 8014826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482a:	4770      	bx	lr

0801482c <USB_ActivateEndpoint>:
 801482c:	b480      	push	{r7}
 801482e:	b085      	sub	sp, #20
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	6039      	str	r1, [r7, #0]
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	60fb      	str	r3, [r7, #12]
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	781b      	ldrb	r3, [r3, #0]
 801483e:	60bb      	str	r3, [r7, #8]
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	785b      	ldrb	r3, [r3, #1]
 8014844:	2b01      	cmp	r3, #1
 8014846:	d139      	bne.n	80148bc <USB_ActivateEndpoint+0x90>
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801484e:	69da      	ldr	r2, [r3, #28]
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	781b      	ldrb	r3, [r3, #0]
 8014854:	f003 030f 	and.w	r3, r3, #15
 8014858:	2101      	movs	r1, #1
 801485a:	fa01 f303 	lsl.w	r3, r1, r3
 801485e:	b29b      	uxth	r3, r3
 8014860:	68f9      	ldr	r1, [r7, #12]
 8014862:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014866:	4313      	orrs	r3, r2
 8014868:	61cb      	str	r3, [r1, #28]
 801486a:	68bb      	ldr	r3, [r7, #8]
 801486c:	015a      	lsls	r2, r3, #5
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	4413      	add	r3, r2
 8014872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801487c:	2b00      	cmp	r3, #0
 801487e:	d153      	bne.n	8014928 <USB_ActivateEndpoint+0xfc>
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	015a      	lsls	r2, r3, #5
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	4413      	add	r3, r2
 8014888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801488c:	681a      	ldr	r2, [r3, #0]
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	689b      	ldr	r3, [r3, #8]
 8014892:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	791b      	ldrb	r3, [r3, #4]
 801489a:	049b      	lsls	r3, r3, #18
 801489c:	4319      	orrs	r1, r3
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	059b      	lsls	r3, r3, #22
 80148a2:	430b      	orrs	r3, r1
 80148a4:	431a      	orrs	r2, r3
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	0159      	lsls	r1, r3, #5
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	440b      	add	r3, r1
 80148ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148b2:	4619      	mov	r1, r3
 80148b4:	4b20      	ldr	r3, [pc, #128]	@ (8014938 <USB_ActivateEndpoint+0x10c>)
 80148b6:	4313      	orrs	r3, r2
 80148b8:	600b      	str	r3, [r1, #0]
 80148ba:	e035      	b.n	8014928 <USB_ActivateEndpoint+0xfc>
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148c2:	69da      	ldr	r2, [r3, #28]
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	f003 030f 	and.w	r3, r3, #15
 80148cc:	2101      	movs	r1, #1
 80148ce:	fa01 f303 	lsl.w	r3, r1, r3
 80148d2:	041b      	lsls	r3, r3, #16
 80148d4:	68f9      	ldr	r1, [r7, #12]
 80148d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80148da:	4313      	orrs	r3, r2
 80148dc:	61cb      	str	r3, [r1, #28]
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	015a      	lsls	r2, r3, #5
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	4413      	add	r3, r2
 80148e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d119      	bne.n	8014928 <USB_ActivateEndpoint+0xfc>
 80148f4:	68bb      	ldr	r3, [r7, #8]
 80148f6:	015a      	lsls	r2, r3, #5
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	4413      	add	r3, r2
 80148fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014900:	681a      	ldr	r2, [r3, #0]
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	689b      	ldr	r3, [r3, #8]
 8014906:	f3c3 010a 	ubfx	r1, r3, #0, #11
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	791b      	ldrb	r3, [r3, #4]
 801490e:	049b      	lsls	r3, r3, #18
 8014910:	430b      	orrs	r3, r1
 8014912:	431a      	orrs	r2, r3
 8014914:	68bb      	ldr	r3, [r7, #8]
 8014916:	0159      	lsls	r1, r3, #5
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	440b      	add	r3, r1
 801491c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014920:	4619      	mov	r1, r3
 8014922:	4b05      	ldr	r3, [pc, #20]	@ (8014938 <USB_ActivateEndpoint+0x10c>)
 8014924:	4313      	orrs	r3, r2
 8014926:	600b      	str	r3, [r1, #0]
 8014928:	2300      	movs	r3, #0
 801492a:	4618      	mov	r0, r3
 801492c:	3714      	adds	r7, #20
 801492e:	46bd      	mov	sp, r7
 8014930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014934:	4770      	bx	lr
 8014936:	bf00      	nop
 8014938:	10008000 	.word	0x10008000

0801493c <USB_DeactivateEndpoint>:
 801493c:	b480      	push	{r7}
 801493e:	b085      	sub	sp, #20
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
 8014944:	6039      	str	r1, [r7, #0]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	60fb      	str	r3, [r7, #12]
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	781b      	ldrb	r3, [r3, #0]
 801494e:	60bb      	str	r3, [r7, #8]
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	785b      	ldrb	r3, [r3, #1]
 8014954:	2b01      	cmp	r3, #1
 8014956:	d161      	bne.n	8014a1c <USB_DeactivateEndpoint+0xe0>
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	015a      	lsls	r2, r3, #5
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	4413      	add	r3, r2
 8014960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801496a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801496e:	d11f      	bne.n	80149b0 <USB_DeactivateEndpoint+0x74>
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	015a      	lsls	r2, r3, #5
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	4413      	add	r3, r2
 8014978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	68ba      	ldr	r2, [r7, #8]
 8014980:	0151      	lsls	r1, r2, #5
 8014982:	68fa      	ldr	r2, [r7, #12]
 8014984:	440a      	add	r2, r1
 8014986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801498a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801498e:	6013      	str	r3, [r2, #0]
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	015a      	lsls	r2, r3, #5
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	4413      	add	r3, r2
 8014998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	68ba      	ldr	r2, [r7, #8]
 80149a0:	0151      	lsls	r1, r2, #5
 80149a2:	68fa      	ldr	r2, [r7, #12]
 80149a4:	440a      	add	r2, r1
 80149a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80149aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80149ae:	6013      	str	r3, [r2, #0]
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80149b8:	683b      	ldr	r3, [r7, #0]
 80149ba:	781b      	ldrb	r3, [r3, #0]
 80149bc:	f003 030f 	and.w	r3, r3, #15
 80149c0:	2101      	movs	r1, #1
 80149c2:	fa01 f303 	lsl.w	r3, r1, r3
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	43db      	mvns	r3, r3
 80149ca:	68f9      	ldr	r1, [r7, #12]
 80149cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149d0:	4013      	ands	r3, r2
 80149d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149da:	69da      	ldr	r2, [r3, #28]
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	781b      	ldrb	r3, [r3, #0]
 80149e0:	f003 030f 	and.w	r3, r3, #15
 80149e4:	2101      	movs	r1, #1
 80149e6:	fa01 f303 	lsl.w	r3, r1, r3
 80149ea:	b29b      	uxth	r3, r3
 80149ec:	43db      	mvns	r3, r3
 80149ee:	68f9      	ldr	r1, [r7, #12]
 80149f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149f4:	4013      	ands	r3, r2
 80149f6:	61cb      	str	r3, [r1, #28]
 80149f8:	68bb      	ldr	r3, [r7, #8]
 80149fa:	015a      	lsls	r2, r3, #5
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	4413      	add	r3, r2
 8014a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a04:	681a      	ldr	r2, [r3, #0]
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	0159      	lsls	r1, r3, #5
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	440b      	add	r3, r1
 8014a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a12:	4619      	mov	r1, r3
 8014a14:	4b35      	ldr	r3, [pc, #212]	@ (8014aec <USB_DeactivateEndpoint+0x1b0>)
 8014a16:	4013      	ands	r3, r2
 8014a18:	600b      	str	r3, [r1, #0]
 8014a1a:	e060      	b.n	8014ade <USB_DeactivateEndpoint+0x1a2>
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	015a      	lsls	r2, r3, #5
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	4413      	add	r3, r2
 8014a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014a32:	d11f      	bne.n	8014a74 <USB_DeactivateEndpoint+0x138>
 8014a34:	68bb      	ldr	r3, [r7, #8]
 8014a36:	015a      	lsls	r2, r3, #5
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	4413      	add	r3, r2
 8014a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	68ba      	ldr	r2, [r7, #8]
 8014a44:	0151      	lsls	r1, r2, #5
 8014a46:	68fa      	ldr	r2, [r7, #12]
 8014a48:	440a      	add	r2, r1
 8014a4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014a4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014a52:	6013      	str	r3, [r2, #0]
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	015a      	lsls	r2, r3, #5
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	4413      	add	r3, r2
 8014a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	68ba      	ldr	r2, [r7, #8]
 8014a64:	0151      	lsls	r1, r2, #5
 8014a66:	68fa      	ldr	r2, [r7, #12]
 8014a68:	440a      	add	r2, r1
 8014a6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014a6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014a72:	6013      	str	r3, [r2, #0]
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	781b      	ldrb	r3, [r3, #0]
 8014a80:	f003 030f 	and.w	r3, r3, #15
 8014a84:	2101      	movs	r1, #1
 8014a86:	fa01 f303 	lsl.w	r3, r1, r3
 8014a8a:	041b      	lsls	r3, r3, #16
 8014a8c:	43db      	mvns	r3, r3
 8014a8e:	68f9      	ldr	r1, [r7, #12]
 8014a90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014a94:	4013      	ands	r3, r2
 8014a96:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a9e:	69da      	ldr	r2, [r3, #28]
 8014aa0:	683b      	ldr	r3, [r7, #0]
 8014aa2:	781b      	ldrb	r3, [r3, #0]
 8014aa4:	f003 030f 	and.w	r3, r3, #15
 8014aa8:	2101      	movs	r1, #1
 8014aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8014aae:	041b      	lsls	r3, r3, #16
 8014ab0:	43db      	mvns	r3, r3
 8014ab2:	68f9      	ldr	r1, [r7, #12]
 8014ab4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014ab8:	4013      	ands	r3, r2
 8014aba:	61cb      	str	r3, [r1, #28]
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	015a      	lsls	r2, r3, #5
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	4413      	add	r3, r2
 8014ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ac8:	681a      	ldr	r2, [r3, #0]
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	0159      	lsls	r1, r3, #5
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	440b      	add	r3, r1
 8014ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	4b05      	ldr	r3, [pc, #20]	@ (8014af0 <USB_DeactivateEndpoint+0x1b4>)
 8014ada:	4013      	ands	r3, r2
 8014adc:	600b      	str	r3, [r1, #0]
 8014ade:	2300      	movs	r3, #0
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	3714      	adds	r7, #20
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aea:	4770      	bx	lr
 8014aec:	ec337800 	.word	0xec337800
 8014af0:	eff37800 	.word	0xeff37800

08014af4 <USB_EPStartXfer>:
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b08a      	sub	sp, #40	@ 0x28
 8014af8:	af02      	add	r7, sp, #8
 8014afa:	60f8      	str	r0, [r7, #12]
 8014afc:	60b9      	str	r1, [r7, #8]
 8014afe:	4613      	mov	r3, r2
 8014b00:	71fb      	strb	r3, [r7, #7]
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	61fb      	str	r3, [r7, #28]
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	781b      	ldrb	r3, [r3, #0]
 8014b0a:	61bb      	str	r3, [r7, #24]
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	785b      	ldrb	r3, [r3, #1]
 8014b10:	2b01      	cmp	r3, #1
 8014b12:	f040 8181 	bne.w	8014e18 <USB_EPStartXfer+0x324>
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	691b      	ldr	r3, [r3, #16]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d132      	bne.n	8014b84 <USB_EPStartXfer+0x90>
 8014b1e:	69bb      	ldr	r3, [r7, #24]
 8014b20:	015a      	lsls	r2, r3, #5
 8014b22:	69fb      	ldr	r3, [r7, #28]
 8014b24:	4413      	add	r3, r2
 8014b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b2a:	691a      	ldr	r2, [r3, #16]
 8014b2c:	69bb      	ldr	r3, [r7, #24]
 8014b2e:	0159      	lsls	r1, r3, #5
 8014b30:	69fb      	ldr	r3, [r7, #28]
 8014b32:	440b      	add	r3, r1
 8014b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b38:	4619      	mov	r1, r3
 8014b3a:	4ba5      	ldr	r3, [pc, #660]	@ (8014dd0 <USB_EPStartXfer+0x2dc>)
 8014b3c:	4013      	ands	r3, r2
 8014b3e:	610b      	str	r3, [r1, #16]
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	015a      	lsls	r2, r3, #5
 8014b44:	69fb      	ldr	r3, [r7, #28]
 8014b46:	4413      	add	r3, r2
 8014b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b4c:	691b      	ldr	r3, [r3, #16]
 8014b4e:	69ba      	ldr	r2, [r7, #24]
 8014b50:	0151      	lsls	r1, r2, #5
 8014b52:	69fa      	ldr	r2, [r7, #28]
 8014b54:	440a      	add	r2, r1
 8014b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014b5e:	6113      	str	r3, [r2, #16]
 8014b60:	69bb      	ldr	r3, [r7, #24]
 8014b62:	015a      	lsls	r2, r3, #5
 8014b64:	69fb      	ldr	r3, [r7, #28]
 8014b66:	4413      	add	r3, r2
 8014b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b6c:	691a      	ldr	r2, [r3, #16]
 8014b6e:	69bb      	ldr	r3, [r7, #24]
 8014b70:	0159      	lsls	r1, r3, #5
 8014b72:	69fb      	ldr	r3, [r7, #28]
 8014b74:	440b      	add	r3, r1
 8014b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b7a:	4619      	mov	r1, r3
 8014b7c:	4b95      	ldr	r3, [pc, #596]	@ (8014dd4 <USB_EPStartXfer+0x2e0>)
 8014b7e:	4013      	ands	r3, r2
 8014b80:	610b      	str	r3, [r1, #16]
 8014b82:	e092      	b.n	8014caa <USB_EPStartXfer+0x1b6>
 8014b84:	69bb      	ldr	r3, [r7, #24]
 8014b86:	015a      	lsls	r2, r3, #5
 8014b88:	69fb      	ldr	r3, [r7, #28]
 8014b8a:	4413      	add	r3, r2
 8014b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b90:	691a      	ldr	r2, [r3, #16]
 8014b92:	69bb      	ldr	r3, [r7, #24]
 8014b94:	0159      	lsls	r1, r3, #5
 8014b96:	69fb      	ldr	r3, [r7, #28]
 8014b98:	440b      	add	r3, r1
 8014b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b9e:	4619      	mov	r1, r3
 8014ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8014dd4 <USB_EPStartXfer+0x2e0>)
 8014ba2:	4013      	ands	r3, r2
 8014ba4:	610b      	str	r3, [r1, #16]
 8014ba6:	69bb      	ldr	r3, [r7, #24]
 8014ba8:	015a      	lsls	r2, r3, #5
 8014baa:	69fb      	ldr	r3, [r7, #28]
 8014bac:	4413      	add	r3, r2
 8014bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bb2:	691a      	ldr	r2, [r3, #16]
 8014bb4:	69bb      	ldr	r3, [r7, #24]
 8014bb6:	0159      	lsls	r1, r3, #5
 8014bb8:	69fb      	ldr	r3, [r7, #28]
 8014bba:	440b      	add	r3, r1
 8014bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	4b83      	ldr	r3, [pc, #524]	@ (8014dd0 <USB_EPStartXfer+0x2dc>)
 8014bc4:	4013      	ands	r3, r2
 8014bc6:	610b      	str	r3, [r1, #16]
 8014bc8:	69bb      	ldr	r3, [r7, #24]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d11a      	bne.n	8014c04 <USB_EPStartXfer+0x110>
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	691a      	ldr	r2, [r3, #16]
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	689b      	ldr	r3, [r3, #8]
 8014bd6:	429a      	cmp	r2, r3
 8014bd8:	d903      	bls.n	8014be2 <USB_EPStartXfer+0xee>
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	689a      	ldr	r2, [r3, #8]
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	611a      	str	r2, [r3, #16]
 8014be2:	69bb      	ldr	r3, [r7, #24]
 8014be4:	015a      	lsls	r2, r3, #5
 8014be6:	69fb      	ldr	r3, [r7, #28]
 8014be8:	4413      	add	r3, r2
 8014bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bee:	691b      	ldr	r3, [r3, #16]
 8014bf0:	69ba      	ldr	r2, [r7, #24]
 8014bf2:	0151      	lsls	r1, r2, #5
 8014bf4:	69fa      	ldr	r2, [r7, #28]
 8014bf6:	440a      	add	r2, r1
 8014bf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014bfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014c00:	6113      	str	r3, [r2, #16]
 8014c02:	e01b      	b.n	8014c3c <USB_EPStartXfer+0x148>
 8014c04:	69bb      	ldr	r3, [r7, #24]
 8014c06:	015a      	lsls	r2, r3, #5
 8014c08:	69fb      	ldr	r3, [r7, #28]
 8014c0a:	4413      	add	r3, r2
 8014c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c10:	691a      	ldr	r2, [r3, #16]
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	6919      	ldr	r1, [r3, #16]
 8014c16:	68bb      	ldr	r3, [r7, #8]
 8014c18:	689b      	ldr	r3, [r3, #8]
 8014c1a:	440b      	add	r3, r1
 8014c1c:	1e59      	subs	r1, r3, #1
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	689b      	ldr	r3, [r3, #8]
 8014c22:	fbb1 f3f3 	udiv	r3, r1, r3
 8014c26:	04d9      	lsls	r1, r3, #19
 8014c28:	4b6b      	ldr	r3, [pc, #428]	@ (8014dd8 <USB_EPStartXfer+0x2e4>)
 8014c2a:	400b      	ands	r3, r1
 8014c2c:	69b9      	ldr	r1, [r7, #24]
 8014c2e:	0148      	lsls	r0, r1, #5
 8014c30:	69f9      	ldr	r1, [r7, #28]
 8014c32:	4401      	add	r1, r0
 8014c34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014c38:	4313      	orrs	r3, r2
 8014c3a:	610b      	str	r3, [r1, #16]
 8014c3c:	69bb      	ldr	r3, [r7, #24]
 8014c3e:	015a      	lsls	r2, r3, #5
 8014c40:	69fb      	ldr	r3, [r7, #28]
 8014c42:	4413      	add	r3, r2
 8014c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c48:	691a      	ldr	r2, [r3, #16]
 8014c4a:	68bb      	ldr	r3, [r7, #8]
 8014c4c:	691b      	ldr	r3, [r3, #16]
 8014c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014c52:	69b9      	ldr	r1, [r7, #24]
 8014c54:	0148      	lsls	r0, r1, #5
 8014c56:	69f9      	ldr	r1, [r7, #28]
 8014c58:	4401      	add	r1, r0
 8014c5a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014c5e:	4313      	orrs	r3, r2
 8014c60:	610b      	str	r3, [r1, #16]
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	791b      	ldrb	r3, [r3, #4]
 8014c66:	2b01      	cmp	r3, #1
 8014c68:	d11f      	bne.n	8014caa <USB_EPStartXfer+0x1b6>
 8014c6a:	69bb      	ldr	r3, [r7, #24]
 8014c6c:	015a      	lsls	r2, r3, #5
 8014c6e:	69fb      	ldr	r3, [r7, #28]
 8014c70:	4413      	add	r3, r2
 8014c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c76:	691b      	ldr	r3, [r3, #16]
 8014c78:	69ba      	ldr	r2, [r7, #24]
 8014c7a:	0151      	lsls	r1, r2, #5
 8014c7c:	69fa      	ldr	r2, [r7, #28]
 8014c7e:	440a      	add	r2, r1
 8014c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c84:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014c88:	6113      	str	r3, [r2, #16]
 8014c8a:	69bb      	ldr	r3, [r7, #24]
 8014c8c:	015a      	lsls	r2, r3, #5
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	4413      	add	r3, r2
 8014c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c96:	691b      	ldr	r3, [r3, #16]
 8014c98:	69ba      	ldr	r2, [r7, #24]
 8014c9a:	0151      	lsls	r1, r2, #5
 8014c9c:	69fa      	ldr	r2, [r7, #28]
 8014c9e:	440a      	add	r2, r1
 8014ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ca4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014ca8:	6113      	str	r3, [r2, #16]
 8014caa:	79fb      	ldrb	r3, [r7, #7]
 8014cac:	2b01      	cmp	r3, #1
 8014cae:	d14b      	bne.n	8014d48 <USB_EPStartXfer+0x254>
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	69db      	ldr	r3, [r3, #28]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d009      	beq.n	8014ccc <USB_EPStartXfer+0x1d8>
 8014cb8:	69bb      	ldr	r3, [r7, #24]
 8014cba:	015a      	lsls	r2, r3, #5
 8014cbc:	69fb      	ldr	r3, [r7, #28]
 8014cbe:	4413      	add	r3, r2
 8014cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cc4:	461a      	mov	r2, r3
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	69db      	ldr	r3, [r3, #28]
 8014cca:	6153      	str	r3, [r2, #20]
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	791b      	ldrb	r3, [r3, #4]
 8014cd0:	2b01      	cmp	r3, #1
 8014cd2:	d128      	bne.n	8014d26 <USB_EPStartXfer+0x232>
 8014cd4:	69fb      	ldr	r3, [r7, #28]
 8014cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014cda:	689b      	ldr	r3, [r3, #8]
 8014cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d110      	bne.n	8014d06 <USB_EPStartXfer+0x212>
 8014ce4:	69bb      	ldr	r3, [r7, #24]
 8014ce6:	015a      	lsls	r2, r3, #5
 8014ce8:	69fb      	ldr	r3, [r7, #28]
 8014cea:	4413      	add	r3, r2
 8014cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	69ba      	ldr	r2, [r7, #24]
 8014cf4:	0151      	lsls	r1, r2, #5
 8014cf6:	69fa      	ldr	r2, [r7, #28]
 8014cf8:	440a      	add	r2, r1
 8014cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cfe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014d02:	6013      	str	r3, [r2, #0]
 8014d04:	e00f      	b.n	8014d26 <USB_EPStartXfer+0x232>
 8014d06:	69bb      	ldr	r3, [r7, #24]
 8014d08:	015a      	lsls	r2, r3, #5
 8014d0a:	69fb      	ldr	r3, [r7, #28]
 8014d0c:	4413      	add	r3, r2
 8014d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	69ba      	ldr	r2, [r7, #24]
 8014d16:	0151      	lsls	r1, r2, #5
 8014d18:	69fa      	ldr	r2, [r7, #28]
 8014d1a:	440a      	add	r2, r1
 8014d1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014d24:	6013      	str	r3, [r2, #0]
 8014d26:	69bb      	ldr	r3, [r7, #24]
 8014d28:	015a      	lsls	r2, r3, #5
 8014d2a:	69fb      	ldr	r3, [r7, #28]
 8014d2c:	4413      	add	r3, r2
 8014d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	69ba      	ldr	r2, [r7, #24]
 8014d36:	0151      	lsls	r1, r2, #5
 8014d38:	69fa      	ldr	r2, [r7, #28]
 8014d3a:	440a      	add	r2, r1
 8014d3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d40:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014d44:	6013      	str	r3, [r2, #0]
 8014d46:	e16a      	b.n	801501e <USB_EPStartXfer+0x52a>
 8014d48:	69bb      	ldr	r3, [r7, #24]
 8014d4a:	015a      	lsls	r2, r3, #5
 8014d4c:	69fb      	ldr	r3, [r7, #28]
 8014d4e:	4413      	add	r3, r2
 8014d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	69ba      	ldr	r2, [r7, #24]
 8014d58:	0151      	lsls	r1, r2, #5
 8014d5a:	69fa      	ldr	r2, [r7, #28]
 8014d5c:	440a      	add	r2, r1
 8014d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014d66:	6013      	str	r3, [r2, #0]
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	791b      	ldrb	r3, [r3, #4]
 8014d6c:	2b01      	cmp	r3, #1
 8014d6e:	d015      	beq.n	8014d9c <USB_EPStartXfer+0x2a8>
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	691b      	ldr	r3, [r3, #16]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	f000 8152 	beq.w	801501e <USB_EPStartXfer+0x52a>
 8014d7a:	69fb      	ldr	r3, [r7, #28]
 8014d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	781b      	ldrb	r3, [r3, #0]
 8014d86:	f003 030f 	and.w	r3, r3, #15
 8014d8a:	2101      	movs	r1, #1
 8014d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8014d90:	69f9      	ldr	r1, [r7, #28]
 8014d92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014d96:	4313      	orrs	r3, r2
 8014d98:	634b      	str	r3, [r1, #52]	@ 0x34
 8014d9a:	e140      	b.n	801501e <USB_EPStartXfer+0x52a>
 8014d9c:	69fb      	ldr	r3, [r7, #28]
 8014d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014da2:	689b      	ldr	r3, [r3, #8]
 8014da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d117      	bne.n	8014ddc <USB_EPStartXfer+0x2e8>
 8014dac:	69bb      	ldr	r3, [r7, #24]
 8014dae:	015a      	lsls	r2, r3, #5
 8014db0:	69fb      	ldr	r3, [r7, #28]
 8014db2:	4413      	add	r3, r2
 8014db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	69ba      	ldr	r2, [r7, #24]
 8014dbc:	0151      	lsls	r1, r2, #5
 8014dbe:	69fa      	ldr	r2, [r7, #28]
 8014dc0:	440a      	add	r2, r1
 8014dc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014dc6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014dca:	6013      	str	r3, [r2, #0]
 8014dcc:	e016      	b.n	8014dfc <USB_EPStartXfer+0x308>
 8014dce:	bf00      	nop
 8014dd0:	e007ffff 	.word	0xe007ffff
 8014dd4:	fff80000 	.word	0xfff80000
 8014dd8:	1ff80000 	.word	0x1ff80000
 8014ddc:	69bb      	ldr	r3, [r7, #24]
 8014dde:	015a      	lsls	r2, r3, #5
 8014de0:	69fb      	ldr	r3, [r7, #28]
 8014de2:	4413      	add	r3, r2
 8014de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	69ba      	ldr	r2, [r7, #24]
 8014dec:	0151      	lsls	r1, r2, #5
 8014dee:	69fa      	ldr	r2, [r7, #28]
 8014df0:	440a      	add	r2, r1
 8014df2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014dfa:	6013      	str	r3, [r2, #0]
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	68d9      	ldr	r1, [r3, #12]
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	781a      	ldrb	r2, [r3, #0]
 8014e04:	68bb      	ldr	r3, [r7, #8]
 8014e06:	691b      	ldr	r3, [r3, #16]
 8014e08:	b298      	uxth	r0, r3
 8014e0a:	79fb      	ldrb	r3, [r7, #7]
 8014e0c:	9300      	str	r3, [sp, #0]
 8014e0e:	4603      	mov	r3, r0
 8014e10:	68f8      	ldr	r0, [r7, #12]
 8014e12:	f000 f9b9 	bl	8015188 <USB_WritePacket>
 8014e16:	e102      	b.n	801501e <USB_EPStartXfer+0x52a>
 8014e18:	69bb      	ldr	r3, [r7, #24]
 8014e1a:	015a      	lsls	r2, r3, #5
 8014e1c:	69fb      	ldr	r3, [r7, #28]
 8014e1e:	4413      	add	r3, r2
 8014e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e24:	691a      	ldr	r2, [r3, #16]
 8014e26:	69bb      	ldr	r3, [r7, #24]
 8014e28:	0159      	lsls	r1, r3, #5
 8014e2a:	69fb      	ldr	r3, [r7, #28]
 8014e2c:	440b      	add	r3, r1
 8014e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e32:	4619      	mov	r1, r3
 8014e34:	4b7c      	ldr	r3, [pc, #496]	@ (8015028 <USB_EPStartXfer+0x534>)
 8014e36:	4013      	ands	r3, r2
 8014e38:	610b      	str	r3, [r1, #16]
 8014e3a:	69bb      	ldr	r3, [r7, #24]
 8014e3c:	015a      	lsls	r2, r3, #5
 8014e3e:	69fb      	ldr	r3, [r7, #28]
 8014e40:	4413      	add	r3, r2
 8014e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e46:	691a      	ldr	r2, [r3, #16]
 8014e48:	69bb      	ldr	r3, [r7, #24]
 8014e4a:	0159      	lsls	r1, r3, #5
 8014e4c:	69fb      	ldr	r3, [r7, #28]
 8014e4e:	440b      	add	r3, r1
 8014e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e54:	4619      	mov	r1, r3
 8014e56:	4b75      	ldr	r3, [pc, #468]	@ (801502c <USB_EPStartXfer+0x538>)
 8014e58:	4013      	ands	r3, r2
 8014e5a:	610b      	str	r3, [r1, #16]
 8014e5c:	69bb      	ldr	r3, [r7, #24]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d12f      	bne.n	8014ec2 <USB_EPStartXfer+0x3ce>
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	691b      	ldr	r3, [r3, #16]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d003      	beq.n	8014e72 <USB_EPStartXfer+0x37e>
 8014e6a:	68bb      	ldr	r3, [r7, #8]
 8014e6c:	689a      	ldr	r2, [r3, #8]
 8014e6e:	68bb      	ldr	r3, [r7, #8]
 8014e70:	611a      	str	r2, [r3, #16]
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	689a      	ldr	r2, [r3, #8]
 8014e76:	68bb      	ldr	r3, [r7, #8]
 8014e78:	621a      	str	r2, [r3, #32]
 8014e7a:	69bb      	ldr	r3, [r7, #24]
 8014e7c:	015a      	lsls	r2, r3, #5
 8014e7e:	69fb      	ldr	r3, [r7, #28]
 8014e80:	4413      	add	r3, r2
 8014e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e86:	691a      	ldr	r2, [r3, #16]
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	6a1b      	ldr	r3, [r3, #32]
 8014e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014e90:	69b9      	ldr	r1, [r7, #24]
 8014e92:	0148      	lsls	r0, r1, #5
 8014e94:	69f9      	ldr	r1, [r7, #28]
 8014e96:	4401      	add	r1, r0
 8014e98:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014e9c:	4313      	orrs	r3, r2
 8014e9e:	610b      	str	r3, [r1, #16]
 8014ea0:	69bb      	ldr	r3, [r7, #24]
 8014ea2:	015a      	lsls	r2, r3, #5
 8014ea4:	69fb      	ldr	r3, [r7, #28]
 8014ea6:	4413      	add	r3, r2
 8014ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014eac:	691b      	ldr	r3, [r3, #16]
 8014eae:	69ba      	ldr	r2, [r7, #24]
 8014eb0:	0151      	lsls	r1, r2, #5
 8014eb2:	69fa      	ldr	r2, [r7, #28]
 8014eb4:	440a      	add	r2, r1
 8014eb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014eba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014ebe:	6113      	str	r3, [r2, #16]
 8014ec0:	e05f      	b.n	8014f82 <USB_EPStartXfer+0x48e>
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	691b      	ldr	r3, [r3, #16]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d123      	bne.n	8014f12 <USB_EPStartXfer+0x41e>
 8014eca:	69bb      	ldr	r3, [r7, #24]
 8014ecc:	015a      	lsls	r2, r3, #5
 8014ece:	69fb      	ldr	r3, [r7, #28]
 8014ed0:	4413      	add	r3, r2
 8014ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ed6:	691a      	ldr	r2, [r3, #16]
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	689b      	ldr	r3, [r3, #8]
 8014edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014ee0:	69b9      	ldr	r1, [r7, #24]
 8014ee2:	0148      	lsls	r0, r1, #5
 8014ee4:	69f9      	ldr	r1, [r7, #28]
 8014ee6:	4401      	add	r1, r0
 8014ee8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014eec:	4313      	orrs	r3, r2
 8014eee:	610b      	str	r3, [r1, #16]
 8014ef0:	69bb      	ldr	r3, [r7, #24]
 8014ef2:	015a      	lsls	r2, r3, #5
 8014ef4:	69fb      	ldr	r3, [r7, #28]
 8014ef6:	4413      	add	r3, r2
 8014ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014efc:	691b      	ldr	r3, [r3, #16]
 8014efe:	69ba      	ldr	r2, [r7, #24]
 8014f00:	0151      	lsls	r1, r2, #5
 8014f02:	69fa      	ldr	r2, [r7, #28]
 8014f04:	440a      	add	r2, r1
 8014f06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014f0e:	6113      	str	r3, [r2, #16]
 8014f10:	e037      	b.n	8014f82 <USB_EPStartXfer+0x48e>
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	691a      	ldr	r2, [r3, #16]
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	689b      	ldr	r3, [r3, #8]
 8014f1a:	4413      	add	r3, r2
 8014f1c:	1e5a      	subs	r2, r3, #1
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	689b      	ldr	r3, [r3, #8]
 8014f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f26:	82fb      	strh	r3, [r7, #22]
 8014f28:	68bb      	ldr	r3, [r7, #8]
 8014f2a:	689b      	ldr	r3, [r3, #8]
 8014f2c:	8afa      	ldrh	r2, [r7, #22]
 8014f2e:	fb03 f202 	mul.w	r2, r3, r2
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	621a      	str	r2, [r3, #32]
 8014f36:	69bb      	ldr	r3, [r7, #24]
 8014f38:	015a      	lsls	r2, r3, #5
 8014f3a:	69fb      	ldr	r3, [r7, #28]
 8014f3c:	4413      	add	r3, r2
 8014f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f42:	691a      	ldr	r2, [r3, #16]
 8014f44:	8afb      	ldrh	r3, [r7, #22]
 8014f46:	04d9      	lsls	r1, r3, #19
 8014f48:	4b39      	ldr	r3, [pc, #228]	@ (8015030 <USB_EPStartXfer+0x53c>)
 8014f4a:	400b      	ands	r3, r1
 8014f4c:	69b9      	ldr	r1, [r7, #24]
 8014f4e:	0148      	lsls	r0, r1, #5
 8014f50:	69f9      	ldr	r1, [r7, #28]
 8014f52:	4401      	add	r1, r0
 8014f54:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014f58:	4313      	orrs	r3, r2
 8014f5a:	610b      	str	r3, [r1, #16]
 8014f5c:	69bb      	ldr	r3, [r7, #24]
 8014f5e:	015a      	lsls	r2, r3, #5
 8014f60:	69fb      	ldr	r3, [r7, #28]
 8014f62:	4413      	add	r3, r2
 8014f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f68:	691a      	ldr	r2, [r3, #16]
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	6a1b      	ldr	r3, [r3, #32]
 8014f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014f72:	69b9      	ldr	r1, [r7, #24]
 8014f74:	0148      	lsls	r0, r1, #5
 8014f76:	69f9      	ldr	r1, [r7, #28]
 8014f78:	4401      	add	r1, r0
 8014f7a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014f7e:	4313      	orrs	r3, r2
 8014f80:	610b      	str	r3, [r1, #16]
 8014f82:	79fb      	ldrb	r3, [r7, #7]
 8014f84:	2b01      	cmp	r3, #1
 8014f86:	d10d      	bne.n	8014fa4 <USB_EPStartXfer+0x4b0>
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d009      	beq.n	8014fa4 <USB_EPStartXfer+0x4b0>
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	68d9      	ldr	r1, [r3, #12]
 8014f94:	69bb      	ldr	r3, [r7, #24]
 8014f96:	015a      	lsls	r2, r3, #5
 8014f98:	69fb      	ldr	r3, [r7, #28]
 8014f9a:	4413      	add	r3, r2
 8014f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fa0:	460a      	mov	r2, r1
 8014fa2:	615a      	str	r2, [r3, #20]
 8014fa4:	68bb      	ldr	r3, [r7, #8]
 8014fa6:	791b      	ldrb	r3, [r3, #4]
 8014fa8:	2b01      	cmp	r3, #1
 8014faa:	d128      	bne.n	8014ffe <USB_EPStartXfer+0x50a>
 8014fac:	69fb      	ldr	r3, [r7, #28]
 8014fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014fb2:	689b      	ldr	r3, [r3, #8]
 8014fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d110      	bne.n	8014fde <USB_EPStartXfer+0x4ea>
 8014fbc:	69bb      	ldr	r3, [r7, #24]
 8014fbe:	015a      	lsls	r2, r3, #5
 8014fc0:	69fb      	ldr	r3, [r7, #28]
 8014fc2:	4413      	add	r3, r2
 8014fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	69ba      	ldr	r2, [r7, #24]
 8014fcc:	0151      	lsls	r1, r2, #5
 8014fce:	69fa      	ldr	r2, [r7, #28]
 8014fd0:	440a      	add	r2, r1
 8014fd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014fd6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014fda:	6013      	str	r3, [r2, #0]
 8014fdc:	e00f      	b.n	8014ffe <USB_EPStartXfer+0x50a>
 8014fde:	69bb      	ldr	r3, [r7, #24]
 8014fe0:	015a      	lsls	r2, r3, #5
 8014fe2:	69fb      	ldr	r3, [r7, #28]
 8014fe4:	4413      	add	r3, r2
 8014fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	69ba      	ldr	r2, [r7, #24]
 8014fee:	0151      	lsls	r1, r2, #5
 8014ff0:	69fa      	ldr	r2, [r7, #28]
 8014ff2:	440a      	add	r2, r1
 8014ff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014ffc:	6013      	str	r3, [r2, #0]
 8014ffe:	69bb      	ldr	r3, [r7, #24]
 8015000:	015a      	lsls	r2, r3, #5
 8015002:	69fb      	ldr	r3, [r7, #28]
 8015004:	4413      	add	r3, r2
 8015006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	69ba      	ldr	r2, [r7, #24]
 801500e:	0151      	lsls	r1, r2, #5
 8015010:	69fa      	ldr	r2, [r7, #28]
 8015012:	440a      	add	r2, r1
 8015014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015018:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801501c:	6013      	str	r3, [r2, #0]
 801501e:	2300      	movs	r3, #0
 8015020:	4618      	mov	r0, r3
 8015022:	3720      	adds	r7, #32
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}
 8015028:	fff80000 	.word	0xfff80000
 801502c:	e007ffff 	.word	0xe007ffff
 8015030:	1ff80000 	.word	0x1ff80000

08015034 <USB_EPStopXfer>:
 8015034:	b480      	push	{r7}
 8015036:	b087      	sub	sp, #28
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	6039      	str	r1, [r7, #0]
 801503e:	2300      	movs	r3, #0
 8015040:	60fb      	str	r3, [r7, #12]
 8015042:	2300      	movs	r3, #0
 8015044:	75fb      	strb	r3, [r7, #23]
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	613b      	str	r3, [r7, #16]
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	785b      	ldrb	r3, [r3, #1]
 801504e:	2b01      	cmp	r3, #1
 8015050:	d14a      	bne.n	80150e8 <USB_EPStopXfer+0xb4>
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	781b      	ldrb	r3, [r3, #0]
 8015056:	015a      	lsls	r2, r3, #5
 8015058:	693b      	ldr	r3, [r7, #16]
 801505a:	4413      	add	r3, r2
 801505c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015066:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801506a:	f040 8086 	bne.w	801517a <USB_EPStopXfer+0x146>
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	781b      	ldrb	r3, [r3, #0]
 8015072:	015a      	lsls	r2, r3, #5
 8015074:	693b      	ldr	r3, [r7, #16]
 8015076:	4413      	add	r3, r2
 8015078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	683a      	ldr	r2, [r7, #0]
 8015080:	7812      	ldrb	r2, [r2, #0]
 8015082:	0151      	lsls	r1, r2, #5
 8015084:	693a      	ldr	r2, [r7, #16]
 8015086:	440a      	add	r2, r1
 8015088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801508c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015090:	6013      	str	r3, [r2, #0]
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	015a      	lsls	r2, r3, #5
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	4413      	add	r3, r2
 801509c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	683a      	ldr	r2, [r7, #0]
 80150a4:	7812      	ldrb	r2, [r2, #0]
 80150a6:	0151      	lsls	r1, r2, #5
 80150a8:	693a      	ldr	r2, [r7, #16]
 80150aa:	440a      	add	r2, r1
 80150ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80150b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80150b4:	6013      	str	r3, [r2, #0]
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	3301      	adds	r3, #1
 80150ba:	60fb      	str	r3, [r7, #12]
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80150c2:	4293      	cmp	r3, r2
 80150c4:	d902      	bls.n	80150cc <USB_EPStopXfer+0x98>
 80150c6:	2301      	movs	r3, #1
 80150c8:	75fb      	strb	r3, [r7, #23]
 80150ca:	e056      	b.n	801517a <USB_EPStopXfer+0x146>
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	781b      	ldrb	r3, [r3, #0]
 80150d0:	015a      	lsls	r2, r3, #5
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	4413      	add	r3, r2
 80150d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80150e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80150e4:	d0e7      	beq.n	80150b6 <USB_EPStopXfer+0x82>
 80150e6:	e048      	b.n	801517a <USB_EPStopXfer+0x146>
 80150e8:	683b      	ldr	r3, [r7, #0]
 80150ea:	781b      	ldrb	r3, [r3, #0]
 80150ec:	015a      	lsls	r2, r3, #5
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	4413      	add	r3, r2
 80150f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80150fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015100:	d13b      	bne.n	801517a <USB_EPStopXfer+0x146>
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	781b      	ldrb	r3, [r3, #0]
 8015106:	015a      	lsls	r2, r3, #5
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	4413      	add	r3, r2
 801510c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	683a      	ldr	r2, [r7, #0]
 8015114:	7812      	ldrb	r2, [r2, #0]
 8015116:	0151      	lsls	r1, r2, #5
 8015118:	693a      	ldr	r2, [r7, #16]
 801511a:	440a      	add	r2, r1
 801511c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015120:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015124:	6013      	str	r3, [r2, #0]
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	781b      	ldrb	r3, [r3, #0]
 801512a:	015a      	lsls	r2, r3, #5
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	4413      	add	r3, r2
 8015130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	683a      	ldr	r2, [r7, #0]
 8015138:	7812      	ldrb	r2, [r2, #0]
 801513a:	0151      	lsls	r1, r2, #5
 801513c:	693a      	ldr	r2, [r7, #16]
 801513e:	440a      	add	r2, r1
 8015140:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015144:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015148:	6013      	str	r3, [r2, #0]
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	3301      	adds	r3, #1
 801514e:	60fb      	str	r3, [r7, #12]
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015156:	4293      	cmp	r3, r2
 8015158:	d902      	bls.n	8015160 <USB_EPStopXfer+0x12c>
 801515a:	2301      	movs	r3, #1
 801515c:	75fb      	strb	r3, [r7, #23]
 801515e:	e00c      	b.n	801517a <USB_EPStopXfer+0x146>
 8015160:	683b      	ldr	r3, [r7, #0]
 8015162:	781b      	ldrb	r3, [r3, #0]
 8015164:	015a      	lsls	r2, r3, #5
 8015166:	693b      	ldr	r3, [r7, #16]
 8015168:	4413      	add	r3, r2
 801516a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015178:	d0e7      	beq.n	801514a <USB_EPStopXfer+0x116>
 801517a:	7dfb      	ldrb	r3, [r7, #23]
 801517c:	4618      	mov	r0, r3
 801517e:	371c      	adds	r7, #28
 8015180:	46bd      	mov	sp, r7
 8015182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015186:	4770      	bx	lr

08015188 <USB_WritePacket>:
 8015188:	b480      	push	{r7}
 801518a:	b089      	sub	sp, #36	@ 0x24
 801518c:	af00      	add	r7, sp, #0
 801518e:	60f8      	str	r0, [r7, #12]
 8015190:	60b9      	str	r1, [r7, #8]
 8015192:	4611      	mov	r1, r2
 8015194:	461a      	mov	r2, r3
 8015196:	460b      	mov	r3, r1
 8015198:	71fb      	strb	r3, [r7, #7]
 801519a:	4613      	mov	r3, r2
 801519c:	80bb      	strh	r3, [r7, #4]
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	617b      	str	r3, [r7, #20]
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	61fb      	str	r3, [r7, #28]
 80151a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d123      	bne.n	80151f6 <USB_WritePacket+0x6e>
 80151ae:	88bb      	ldrh	r3, [r7, #4]
 80151b0:	3303      	adds	r3, #3
 80151b2:	089b      	lsrs	r3, r3, #2
 80151b4:	613b      	str	r3, [r7, #16]
 80151b6:	2300      	movs	r3, #0
 80151b8:	61bb      	str	r3, [r7, #24]
 80151ba:	e018      	b.n	80151ee <USB_WritePacket+0x66>
 80151bc:	79fb      	ldrb	r3, [r7, #7]
 80151be:	031a      	lsls	r2, r3, #12
 80151c0:	697b      	ldr	r3, [r7, #20]
 80151c2:	4413      	add	r3, r2
 80151c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80151c8:	461a      	mov	r2, r3
 80151ca:	69fb      	ldr	r3, [r7, #28]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	6013      	str	r3, [r2, #0]
 80151d0:	69fb      	ldr	r3, [r7, #28]
 80151d2:	3301      	adds	r3, #1
 80151d4:	61fb      	str	r3, [r7, #28]
 80151d6:	69fb      	ldr	r3, [r7, #28]
 80151d8:	3301      	adds	r3, #1
 80151da:	61fb      	str	r3, [r7, #28]
 80151dc:	69fb      	ldr	r3, [r7, #28]
 80151de:	3301      	adds	r3, #1
 80151e0:	61fb      	str	r3, [r7, #28]
 80151e2:	69fb      	ldr	r3, [r7, #28]
 80151e4:	3301      	adds	r3, #1
 80151e6:	61fb      	str	r3, [r7, #28]
 80151e8:	69bb      	ldr	r3, [r7, #24]
 80151ea:	3301      	adds	r3, #1
 80151ec:	61bb      	str	r3, [r7, #24]
 80151ee:	69ba      	ldr	r2, [r7, #24]
 80151f0:	693b      	ldr	r3, [r7, #16]
 80151f2:	429a      	cmp	r2, r3
 80151f4:	d3e2      	bcc.n	80151bc <USB_WritePacket+0x34>
 80151f6:	2300      	movs	r3, #0
 80151f8:	4618      	mov	r0, r3
 80151fa:	3724      	adds	r7, #36	@ 0x24
 80151fc:	46bd      	mov	sp, r7
 80151fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015202:	4770      	bx	lr

08015204 <USB_ReadPacket>:
 8015204:	b480      	push	{r7}
 8015206:	b08b      	sub	sp, #44	@ 0x2c
 8015208:	af00      	add	r7, sp, #0
 801520a:	60f8      	str	r0, [r7, #12]
 801520c:	60b9      	str	r1, [r7, #8]
 801520e:	4613      	mov	r3, r2
 8015210:	80fb      	strh	r3, [r7, #6]
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	61bb      	str	r3, [r7, #24]
 8015216:	68bb      	ldr	r3, [r7, #8]
 8015218:	627b      	str	r3, [r7, #36]	@ 0x24
 801521a:	88fb      	ldrh	r3, [r7, #6]
 801521c:	089b      	lsrs	r3, r3, #2
 801521e:	b29b      	uxth	r3, r3
 8015220:	617b      	str	r3, [r7, #20]
 8015222:	88fb      	ldrh	r3, [r7, #6]
 8015224:	f003 0303 	and.w	r3, r3, #3
 8015228:	83fb      	strh	r3, [r7, #30]
 801522a:	2300      	movs	r3, #0
 801522c:	623b      	str	r3, [r7, #32]
 801522e:	e014      	b.n	801525a <USB_ReadPacket+0x56>
 8015230:	69bb      	ldr	r3, [r7, #24]
 8015232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801523a:	601a      	str	r2, [r3, #0]
 801523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801523e:	3301      	adds	r3, #1
 8015240:	627b      	str	r3, [r7, #36]	@ 0x24
 8015242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015244:	3301      	adds	r3, #1
 8015246:	627b      	str	r3, [r7, #36]	@ 0x24
 8015248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801524a:	3301      	adds	r3, #1
 801524c:	627b      	str	r3, [r7, #36]	@ 0x24
 801524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015250:	3301      	adds	r3, #1
 8015252:	627b      	str	r3, [r7, #36]	@ 0x24
 8015254:	6a3b      	ldr	r3, [r7, #32]
 8015256:	3301      	adds	r3, #1
 8015258:	623b      	str	r3, [r7, #32]
 801525a:	6a3a      	ldr	r2, [r7, #32]
 801525c:	697b      	ldr	r3, [r7, #20]
 801525e:	429a      	cmp	r2, r3
 8015260:	d3e6      	bcc.n	8015230 <USB_ReadPacket+0x2c>
 8015262:	8bfb      	ldrh	r3, [r7, #30]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d01e      	beq.n	80152a6 <USB_ReadPacket+0xa2>
 8015268:	2300      	movs	r3, #0
 801526a:	623b      	str	r3, [r7, #32]
 801526c:	69bb      	ldr	r3, [r7, #24]
 801526e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015272:	461a      	mov	r2, r3
 8015274:	f107 0310 	add.w	r3, r7, #16
 8015278:	6812      	ldr	r2, [r2, #0]
 801527a:	601a      	str	r2, [r3, #0]
 801527c:	693a      	ldr	r2, [r7, #16]
 801527e:	6a3b      	ldr	r3, [r7, #32]
 8015280:	b2db      	uxtb	r3, r3
 8015282:	00db      	lsls	r3, r3, #3
 8015284:	fa22 f303 	lsr.w	r3, r2, r3
 8015288:	b2da      	uxtb	r2, r3
 801528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801528c:	701a      	strb	r2, [r3, #0]
 801528e:	6a3b      	ldr	r3, [r7, #32]
 8015290:	3301      	adds	r3, #1
 8015292:	623b      	str	r3, [r7, #32]
 8015294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015296:	3301      	adds	r3, #1
 8015298:	627b      	str	r3, [r7, #36]	@ 0x24
 801529a:	8bfb      	ldrh	r3, [r7, #30]
 801529c:	3b01      	subs	r3, #1
 801529e:	83fb      	strh	r3, [r7, #30]
 80152a0:	8bfb      	ldrh	r3, [r7, #30]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d1ea      	bne.n	801527c <USB_ReadPacket+0x78>
 80152a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152a8:	4618      	mov	r0, r3
 80152aa:	372c      	adds	r7, #44	@ 0x2c
 80152ac:	46bd      	mov	sp, r7
 80152ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b2:	4770      	bx	lr

080152b4 <USB_EPSetStall>:
 80152b4:	b480      	push	{r7}
 80152b6:	b085      	sub	sp, #20
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
 80152bc:	6039      	str	r1, [r7, #0]
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	60fb      	str	r3, [r7, #12]
 80152c2:	683b      	ldr	r3, [r7, #0]
 80152c4:	781b      	ldrb	r3, [r3, #0]
 80152c6:	60bb      	str	r3, [r7, #8]
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	785b      	ldrb	r3, [r3, #1]
 80152cc:	2b01      	cmp	r3, #1
 80152ce:	d12c      	bne.n	801532a <USB_EPSetStall+0x76>
 80152d0:	68bb      	ldr	r3, [r7, #8]
 80152d2:	015a      	lsls	r2, r3, #5
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	4413      	add	r3, r2
 80152d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	db12      	blt.n	8015308 <USB_EPSetStall+0x54>
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d00f      	beq.n	8015308 <USB_EPSetStall+0x54>
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	015a      	lsls	r2, r3, #5
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	4413      	add	r3, r2
 80152f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	68ba      	ldr	r2, [r7, #8]
 80152f8:	0151      	lsls	r1, r2, #5
 80152fa:	68fa      	ldr	r2, [r7, #12]
 80152fc:	440a      	add	r2, r1
 80152fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015302:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015306:	6013      	str	r3, [r2, #0]
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	015a      	lsls	r2, r3, #5
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	4413      	add	r3, r2
 8015310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	68ba      	ldr	r2, [r7, #8]
 8015318:	0151      	lsls	r1, r2, #5
 801531a:	68fa      	ldr	r2, [r7, #12]
 801531c:	440a      	add	r2, r1
 801531e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015322:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015326:	6013      	str	r3, [r2, #0]
 8015328:	e02b      	b.n	8015382 <USB_EPSetStall+0xce>
 801532a:	68bb      	ldr	r3, [r7, #8]
 801532c:	015a      	lsls	r2, r3, #5
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	4413      	add	r3, r2
 8015332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	2b00      	cmp	r3, #0
 801533a:	db12      	blt.n	8015362 <USB_EPSetStall+0xae>
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d00f      	beq.n	8015362 <USB_EPSetStall+0xae>
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	015a      	lsls	r2, r3, #5
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	4413      	add	r3, r2
 801534a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	68ba      	ldr	r2, [r7, #8]
 8015352:	0151      	lsls	r1, r2, #5
 8015354:	68fa      	ldr	r2, [r7, #12]
 8015356:	440a      	add	r2, r1
 8015358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801535c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015360:	6013      	str	r3, [r2, #0]
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	015a      	lsls	r2, r3, #5
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	4413      	add	r3, r2
 801536a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	68ba      	ldr	r2, [r7, #8]
 8015372:	0151      	lsls	r1, r2, #5
 8015374:	68fa      	ldr	r2, [r7, #12]
 8015376:	440a      	add	r2, r1
 8015378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801537c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015380:	6013      	str	r3, [r2, #0]
 8015382:	2300      	movs	r3, #0
 8015384:	4618      	mov	r0, r3
 8015386:	3714      	adds	r7, #20
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <USB_EPClearStall>:
 8015390:	b480      	push	{r7}
 8015392:	b085      	sub	sp, #20
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	6039      	str	r1, [r7, #0]
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	60fb      	str	r3, [r7, #12]
 801539e:	683b      	ldr	r3, [r7, #0]
 80153a0:	781b      	ldrb	r3, [r3, #0]
 80153a2:	60bb      	str	r3, [r7, #8]
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	785b      	ldrb	r3, [r3, #1]
 80153a8:	2b01      	cmp	r3, #1
 80153aa:	d128      	bne.n	80153fe <USB_EPClearStall+0x6e>
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	015a      	lsls	r2, r3, #5
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	4413      	add	r3, r2
 80153b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	68ba      	ldr	r2, [r7, #8]
 80153bc:	0151      	lsls	r1, r2, #5
 80153be:	68fa      	ldr	r2, [r7, #12]
 80153c0:	440a      	add	r2, r1
 80153c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80153c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80153ca:	6013      	str	r3, [r2, #0]
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	791b      	ldrb	r3, [r3, #4]
 80153d0:	2b03      	cmp	r3, #3
 80153d2:	d003      	beq.n	80153dc <USB_EPClearStall+0x4c>
 80153d4:	683b      	ldr	r3, [r7, #0]
 80153d6:	791b      	ldrb	r3, [r3, #4]
 80153d8:	2b02      	cmp	r3, #2
 80153da:	d138      	bne.n	801544e <USB_EPClearStall+0xbe>
 80153dc:	68bb      	ldr	r3, [r7, #8]
 80153de:	015a      	lsls	r2, r3, #5
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	4413      	add	r3, r2
 80153e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	68ba      	ldr	r2, [r7, #8]
 80153ec:	0151      	lsls	r1, r2, #5
 80153ee:	68fa      	ldr	r2, [r7, #12]
 80153f0:	440a      	add	r2, r1
 80153f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80153f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80153fa:	6013      	str	r3, [r2, #0]
 80153fc:	e027      	b.n	801544e <USB_EPClearStall+0xbe>
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	015a      	lsls	r2, r3, #5
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	4413      	add	r3, r2
 8015406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	68ba      	ldr	r2, [r7, #8]
 801540e:	0151      	lsls	r1, r2, #5
 8015410:	68fa      	ldr	r2, [r7, #12]
 8015412:	440a      	add	r2, r1
 8015414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015418:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801541c:	6013      	str	r3, [r2, #0]
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	791b      	ldrb	r3, [r3, #4]
 8015422:	2b03      	cmp	r3, #3
 8015424:	d003      	beq.n	801542e <USB_EPClearStall+0x9e>
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	791b      	ldrb	r3, [r3, #4]
 801542a:	2b02      	cmp	r3, #2
 801542c:	d10f      	bne.n	801544e <USB_EPClearStall+0xbe>
 801542e:	68bb      	ldr	r3, [r7, #8]
 8015430:	015a      	lsls	r2, r3, #5
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	4413      	add	r3, r2
 8015436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	68ba      	ldr	r2, [r7, #8]
 801543e:	0151      	lsls	r1, r2, #5
 8015440:	68fa      	ldr	r2, [r7, #12]
 8015442:	440a      	add	r2, r1
 8015444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801544c:	6013      	str	r3, [r2, #0]
 801544e:	2300      	movs	r3, #0
 8015450:	4618      	mov	r0, r3
 8015452:	3714      	adds	r7, #20
 8015454:	46bd      	mov	sp, r7
 8015456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545a:	4770      	bx	lr

0801545c <USB_SetDevAddress>:
 801545c:	b480      	push	{r7}
 801545e:	b085      	sub	sp, #20
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	460b      	mov	r3, r1
 8015466:	70fb      	strb	r3, [r7, #3]
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	60fb      	str	r3, [r7, #12]
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	68fa      	ldr	r2, [r7, #12]
 8015476:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801547a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801547e:	6013      	str	r3, [r2, #0]
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015486:	681a      	ldr	r2, [r3, #0]
 8015488:	78fb      	ldrb	r3, [r7, #3]
 801548a:	011b      	lsls	r3, r3, #4
 801548c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015490:	68f9      	ldr	r1, [r7, #12]
 8015492:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015496:	4313      	orrs	r3, r2
 8015498:	600b      	str	r3, [r1, #0]
 801549a:	2300      	movs	r3, #0
 801549c:	4618      	mov	r0, r3
 801549e:	3714      	adds	r7, #20
 80154a0:	46bd      	mov	sp, r7
 80154a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a6:	4770      	bx	lr

080154a8 <USB_DevConnect>:
 80154a8:	b480      	push	{r7}
 80154aa:	b085      	sub	sp, #20
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	60fb      	str	r3, [r7, #12]
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	68fa      	ldr	r2, [r7, #12]
 80154be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80154c2:	f023 0303 	bic.w	r3, r3, #3
 80154c6:	6013      	str	r3, [r2, #0]
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154ce:	685b      	ldr	r3, [r3, #4]
 80154d0:	68fa      	ldr	r2, [r7, #12]
 80154d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80154d6:	f023 0302 	bic.w	r3, r3, #2
 80154da:	6053      	str	r3, [r2, #4]
 80154dc:	2300      	movs	r3, #0
 80154de:	4618      	mov	r0, r3
 80154e0:	3714      	adds	r7, #20
 80154e2:	46bd      	mov	sp, r7
 80154e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e8:	4770      	bx	lr

080154ea <USB_DevDisconnect>:
 80154ea:	b480      	push	{r7}
 80154ec:	b085      	sub	sp, #20
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	6078      	str	r0, [r7, #4]
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	60fb      	str	r3, [r7, #12]
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	68fa      	ldr	r2, [r7, #12]
 8015500:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015504:	f023 0303 	bic.w	r3, r3, #3
 8015508:	6013      	str	r3, [r2, #0]
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	68fa      	ldr	r2, [r7, #12]
 8015514:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015518:	f043 0302 	orr.w	r3, r3, #2
 801551c:	6053      	str	r3, [r2, #4]
 801551e:	2300      	movs	r3, #0
 8015520:	4618      	mov	r0, r3
 8015522:	3714      	adds	r7, #20
 8015524:	46bd      	mov	sp, r7
 8015526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552a:	4770      	bx	lr

0801552c <USB_ReadInterrupts>:
 801552c:	b480      	push	{r7}
 801552e:	b085      	sub	sp, #20
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	695b      	ldr	r3, [r3, #20]
 8015538:	60fb      	str	r3, [r7, #12]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	699b      	ldr	r3, [r3, #24]
 801553e:	68fa      	ldr	r2, [r7, #12]
 8015540:	4013      	ands	r3, r2
 8015542:	60fb      	str	r3, [r7, #12]
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	4618      	mov	r0, r3
 8015548:	3714      	adds	r7, #20
 801554a:	46bd      	mov	sp, r7
 801554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015550:	4770      	bx	lr

08015552 <USB_ReadDevAllOutEpInterrupt>:
 8015552:	b480      	push	{r7}
 8015554:	b085      	sub	sp, #20
 8015556:	af00      	add	r7, sp, #0
 8015558:	6078      	str	r0, [r7, #4]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	60fb      	str	r3, [r7, #12]
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015564:	699b      	ldr	r3, [r3, #24]
 8015566:	60bb      	str	r3, [r7, #8]
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801556e:	69db      	ldr	r3, [r3, #28]
 8015570:	68ba      	ldr	r2, [r7, #8]
 8015572:	4013      	ands	r3, r2
 8015574:	60bb      	str	r3, [r7, #8]
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	0c1b      	lsrs	r3, r3, #16
 801557a:	4618      	mov	r0, r3
 801557c:	3714      	adds	r7, #20
 801557e:	46bd      	mov	sp, r7
 8015580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015584:	4770      	bx	lr

08015586 <USB_ReadDevAllInEpInterrupt>:
 8015586:	b480      	push	{r7}
 8015588:	b085      	sub	sp, #20
 801558a:	af00      	add	r7, sp, #0
 801558c:	6078      	str	r0, [r7, #4]
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	60fb      	str	r3, [r7, #12]
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015598:	699b      	ldr	r3, [r3, #24]
 801559a:	60bb      	str	r3, [r7, #8]
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155a2:	69db      	ldr	r3, [r3, #28]
 80155a4:	68ba      	ldr	r2, [r7, #8]
 80155a6:	4013      	ands	r3, r2
 80155a8:	60bb      	str	r3, [r7, #8]
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	b29b      	uxth	r3, r3
 80155ae:	4618      	mov	r0, r3
 80155b0:	3714      	adds	r7, #20
 80155b2:	46bd      	mov	sp, r7
 80155b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b8:	4770      	bx	lr

080155ba <USB_ReadDevOutEPInterrupt>:
 80155ba:	b480      	push	{r7}
 80155bc:	b085      	sub	sp, #20
 80155be:	af00      	add	r7, sp, #0
 80155c0:	6078      	str	r0, [r7, #4]
 80155c2:	460b      	mov	r3, r1
 80155c4:	70fb      	strb	r3, [r7, #3]
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	60fb      	str	r3, [r7, #12]
 80155ca:	78fb      	ldrb	r3, [r7, #3]
 80155cc:	015a      	lsls	r2, r3, #5
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	4413      	add	r3, r2
 80155d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155d6:	689b      	ldr	r3, [r3, #8]
 80155d8:	60bb      	str	r3, [r7, #8]
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155e0:	695b      	ldr	r3, [r3, #20]
 80155e2:	68ba      	ldr	r2, [r7, #8]
 80155e4:	4013      	ands	r3, r2
 80155e6:	60bb      	str	r3, [r7, #8]
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	4618      	mov	r0, r3
 80155ec:	3714      	adds	r7, #20
 80155ee:	46bd      	mov	sp, r7
 80155f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f4:	4770      	bx	lr

080155f6 <USB_ReadDevInEPInterrupt>:
 80155f6:	b480      	push	{r7}
 80155f8:	b087      	sub	sp, #28
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	6078      	str	r0, [r7, #4]
 80155fe:	460b      	mov	r3, r1
 8015600:	70fb      	strb	r3, [r7, #3]
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	617b      	str	r3, [r7, #20]
 8015606:	697b      	ldr	r3, [r7, #20]
 8015608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801560c:	691b      	ldr	r3, [r3, #16]
 801560e:	613b      	str	r3, [r7, #16]
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015618:	60fb      	str	r3, [r7, #12]
 801561a:	78fb      	ldrb	r3, [r7, #3]
 801561c:	f003 030f 	and.w	r3, r3, #15
 8015620:	68fa      	ldr	r2, [r7, #12]
 8015622:	fa22 f303 	lsr.w	r3, r2, r3
 8015626:	01db      	lsls	r3, r3, #7
 8015628:	b2db      	uxtb	r3, r3
 801562a:	693a      	ldr	r2, [r7, #16]
 801562c:	4313      	orrs	r3, r2
 801562e:	613b      	str	r3, [r7, #16]
 8015630:	78fb      	ldrb	r3, [r7, #3]
 8015632:	015a      	lsls	r2, r3, #5
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	4413      	add	r3, r2
 8015638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801563c:	689b      	ldr	r3, [r3, #8]
 801563e:	693a      	ldr	r2, [r7, #16]
 8015640:	4013      	ands	r3, r2
 8015642:	60bb      	str	r3, [r7, #8]
 8015644:	68bb      	ldr	r3, [r7, #8]
 8015646:	4618      	mov	r0, r3
 8015648:	371c      	adds	r7, #28
 801564a:	46bd      	mov	sp, r7
 801564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015650:	4770      	bx	lr

08015652 <USB_GetMode>:
 8015652:	b480      	push	{r7}
 8015654:	b083      	sub	sp, #12
 8015656:	af00      	add	r7, sp, #0
 8015658:	6078      	str	r0, [r7, #4]
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	695b      	ldr	r3, [r3, #20]
 801565e:	f003 0301 	and.w	r3, r3, #1
 8015662:	4618      	mov	r0, r3
 8015664:	370c      	adds	r7, #12
 8015666:	46bd      	mov	sp, r7
 8015668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566c:	4770      	bx	lr
	...

08015670 <USB_ActivateSetup>:
 8015670:	b480      	push	{r7}
 8015672:	b085      	sub	sp, #20
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	60fb      	str	r3, [r7, #12]
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015682:	681a      	ldr	r2, [r3, #0]
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801568a:	4619      	mov	r1, r3
 801568c:	4b09      	ldr	r3, [pc, #36]	@ (80156b4 <USB_ActivateSetup+0x44>)
 801568e:	4013      	ands	r3, r2
 8015690:	600b      	str	r3, [r1, #0]
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015698:	685b      	ldr	r3, [r3, #4]
 801569a:	68fa      	ldr	r2, [r7, #12]
 801569c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80156a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80156a4:	6053      	str	r3, [r2, #4]
 80156a6:	2300      	movs	r3, #0
 80156a8:	4618      	mov	r0, r3
 80156aa:	3714      	adds	r7, #20
 80156ac:	46bd      	mov	sp, r7
 80156ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b2:	4770      	bx	lr
 80156b4:	fffff800 	.word	0xfffff800

080156b8 <USB_EP0_OutStart>:
 80156b8:	b480      	push	{r7}
 80156ba:	b087      	sub	sp, #28
 80156bc:	af00      	add	r7, sp, #0
 80156be:	60f8      	str	r0, [r7, #12]
 80156c0:	460b      	mov	r3, r1
 80156c2:	607a      	str	r2, [r7, #4]
 80156c4:	72fb      	strb	r3, [r7, #11]
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	617b      	str	r3, [r7, #20]
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	333c      	adds	r3, #60	@ 0x3c
 80156ce:	3304      	adds	r3, #4
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	613b      	str	r3, [r7, #16]
 80156d4:	693b      	ldr	r3, [r7, #16]
 80156d6:	4a26      	ldr	r2, [pc, #152]	@ (8015770 <USB_EP0_OutStart+0xb8>)
 80156d8:	4293      	cmp	r3, r2
 80156da:	d90a      	bls.n	80156f2 <USB_EP0_OutStart+0x3a>
 80156dc:	697b      	ldr	r3, [r7, #20]
 80156de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80156e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80156ec:	d101      	bne.n	80156f2 <USB_EP0_OutStart+0x3a>
 80156ee:	2300      	movs	r3, #0
 80156f0:	e037      	b.n	8015762 <USB_EP0_OutStart+0xaa>
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156f8:	461a      	mov	r2, r3
 80156fa:	2300      	movs	r3, #0
 80156fc:	6113      	str	r3, [r2, #16]
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015704:	691b      	ldr	r3, [r3, #16]
 8015706:	697a      	ldr	r2, [r7, #20]
 8015708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801570c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015710:	6113      	str	r3, [r2, #16]
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015718:	691b      	ldr	r3, [r3, #16]
 801571a:	697a      	ldr	r2, [r7, #20]
 801571c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015720:	f043 0318 	orr.w	r3, r3, #24
 8015724:	6113      	str	r3, [r2, #16]
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801572c:	691b      	ldr	r3, [r3, #16]
 801572e:	697a      	ldr	r2, [r7, #20]
 8015730:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015734:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015738:	6113      	str	r3, [r2, #16]
 801573a:	7afb      	ldrb	r3, [r7, #11]
 801573c:	2b01      	cmp	r3, #1
 801573e:	d10f      	bne.n	8015760 <USB_EP0_OutStart+0xa8>
 8015740:	697b      	ldr	r3, [r7, #20]
 8015742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015746:	461a      	mov	r2, r3
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	6153      	str	r3, [r2, #20]
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	697a      	ldr	r2, [r7, #20]
 8015756:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801575a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801575e:	6013      	str	r3, [r2, #0]
 8015760:	2300      	movs	r3, #0
 8015762:	4618      	mov	r0, r3
 8015764:	371c      	adds	r7, #28
 8015766:	46bd      	mov	sp, r7
 8015768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop
 8015770:	4f54300a 	.word	0x4f54300a

08015774 <USB_CoreReset>:
 8015774:	b480      	push	{r7}
 8015776:	b085      	sub	sp, #20
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	2300      	movs	r3, #0
 801577e:	60fb      	str	r3, [r7, #12]
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	3301      	adds	r3, #1
 8015784:	60fb      	str	r3, [r7, #12]
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801578c:	d901      	bls.n	8015792 <USB_CoreReset+0x1e>
 801578e:	2303      	movs	r3, #3
 8015790:	e01b      	b.n	80157ca <USB_CoreReset+0x56>
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	691b      	ldr	r3, [r3, #16]
 8015796:	2b00      	cmp	r3, #0
 8015798:	daf2      	bge.n	8015780 <USB_CoreReset+0xc>
 801579a:	2300      	movs	r3, #0
 801579c:	60fb      	str	r3, [r7, #12]
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	691b      	ldr	r3, [r3, #16]
 80157a2:	f043 0201 	orr.w	r2, r3, #1
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	611a      	str	r2, [r3, #16]
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	3301      	adds	r3, #1
 80157ae:	60fb      	str	r3, [r7, #12]
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80157b6:	d901      	bls.n	80157bc <USB_CoreReset+0x48>
 80157b8:	2303      	movs	r3, #3
 80157ba:	e006      	b.n	80157ca <USB_CoreReset+0x56>
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	691b      	ldr	r3, [r3, #16]
 80157c0:	f003 0301 	and.w	r3, r3, #1
 80157c4:	2b01      	cmp	r3, #1
 80157c6:	d0f0      	beq.n	80157aa <USB_CoreReset+0x36>
 80157c8:	2300      	movs	r3, #0
 80157ca:	4618      	mov	r0, r3
 80157cc:	3714      	adds	r7, #20
 80157ce:	46bd      	mov	sp, r7
 80157d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d4:	4770      	bx	lr
	...

080157d8 <USBD_CDC_Init>:
 80157d8:	b580      	push	{r7, lr}
 80157da:	b084      	sub	sp, #16
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
 80157e0:	460b      	mov	r3, r1
 80157e2:	70fb      	strb	r3, [r7, #3]
 80157e4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80157e8:	f002 fcca 	bl	8018180 <USBD_static_malloc>
 80157ec:	60f8      	str	r0, [r7, #12]
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d109      	bne.n	8015808 <USBD_CDC_Init+0x30>
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	32b0      	adds	r2, #176	@ 0xb0
 80157fe:	2100      	movs	r1, #0
 8015800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8015804:	2302      	movs	r3, #2
 8015806:	e0d4      	b.n	80159b2 <USBD_CDC_Init+0x1da>
 8015808:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801580c:	2100      	movs	r1, #0
 801580e:	68f8      	ldr	r0, [r7, #12]
 8015810:	f004 f89f 	bl	8019952 <memset>
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	32b0      	adds	r2, #176	@ 0xb0
 801581e:	68f9      	ldr	r1, [r7, #12]
 8015820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	32b0      	adds	r2, #176	@ 0xb0
 801582e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	7c1b      	ldrb	r3, [r3, #16]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d138      	bne.n	80158b2 <USBD_CDC_Init+0xda>
 8015840:	4b5e      	ldr	r3, [pc, #376]	@ (80159bc <USBD_CDC_Init+0x1e4>)
 8015842:	7819      	ldrb	r1, [r3, #0]
 8015844:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015848:	2202      	movs	r2, #2
 801584a:	6878      	ldr	r0, [r7, #4]
 801584c:	f002 fb75 	bl	8017f3a <USBD_LL_OpenEP>
 8015850:	4b5a      	ldr	r3, [pc, #360]	@ (80159bc <USBD_CDC_Init+0x1e4>)
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	f003 020f 	and.w	r2, r3, #15
 8015858:	6879      	ldr	r1, [r7, #4]
 801585a:	4613      	mov	r3, r2
 801585c:	009b      	lsls	r3, r3, #2
 801585e:	4413      	add	r3, r2
 8015860:	009b      	lsls	r3, r3, #2
 8015862:	440b      	add	r3, r1
 8015864:	3324      	adds	r3, #36	@ 0x24
 8015866:	2201      	movs	r2, #1
 8015868:	801a      	strh	r2, [r3, #0]
 801586a:	4b55      	ldr	r3, [pc, #340]	@ (80159c0 <USBD_CDC_Init+0x1e8>)
 801586c:	7819      	ldrb	r1, [r3, #0]
 801586e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015872:	2202      	movs	r2, #2
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f002 fb60 	bl	8017f3a <USBD_LL_OpenEP>
 801587a:	4b51      	ldr	r3, [pc, #324]	@ (80159c0 <USBD_CDC_Init+0x1e8>)
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	f003 020f 	and.w	r2, r3, #15
 8015882:	6879      	ldr	r1, [r7, #4]
 8015884:	4613      	mov	r3, r2
 8015886:	009b      	lsls	r3, r3, #2
 8015888:	4413      	add	r3, r2
 801588a:	009b      	lsls	r3, r3, #2
 801588c:	440b      	add	r3, r1
 801588e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015892:	2201      	movs	r2, #1
 8015894:	801a      	strh	r2, [r3, #0]
 8015896:	4b4b      	ldr	r3, [pc, #300]	@ (80159c4 <USBD_CDC_Init+0x1ec>)
 8015898:	781b      	ldrb	r3, [r3, #0]
 801589a:	f003 020f 	and.w	r2, r3, #15
 801589e:	6879      	ldr	r1, [r7, #4]
 80158a0:	4613      	mov	r3, r2
 80158a2:	009b      	lsls	r3, r3, #2
 80158a4:	4413      	add	r3, r2
 80158a6:	009b      	lsls	r3, r3, #2
 80158a8:	440b      	add	r3, r1
 80158aa:	3326      	adds	r3, #38	@ 0x26
 80158ac:	2210      	movs	r2, #16
 80158ae:	801a      	strh	r2, [r3, #0]
 80158b0:	e035      	b.n	801591e <USBD_CDC_Init+0x146>
 80158b2:	4b42      	ldr	r3, [pc, #264]	@ (80159bc <USBD_CDC_Init+0x1e4>)
 80158b4:	7819      	ldrb	r1, [r3, #0]
 80158b6:	2340      	movs	r3, #64	@ 0x40
 80158b8:	2202      	movs	r2, #2
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f002 fb3d 	bl	8017f3a <USBD_LL_OpenEP>
 80158c0:	4b3e      	ldr	r3, [pc, #248]	@ (80159bc <USBD_CDC_Init+0x1e4>)
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	f003 020f 	and.w	r2, r3, #15
 80158c8:	6879      	ldr	r1, [r7, #4]
 80158ca:	4613      	mov	r3, r2
 80158cc:	009b      	lsls	r3, r3, #2
 80158ce:	4413      	add	r3, r2
 80158d0:	009b      	lsls	r3, r3, #2
 80158d2:	440b      	add	r3, r1
 80158d4:	3324      	adds	r3, #36	@ 0x24
 80158d6:	2201      	movs	r2, #1
 80158d8:	801a      	strh	r2, [r3, #0]
 80158da:	4b39      	ldr	r3, [pc, #228]	@ (80159c0 <USBD_CDC_Init+0x1e8>)
 80158dc:	7819      	ldrb	r1, [r3, #0]
 80158de:	2340      	movs	r3, #64	@ 0x40
 80158e0:	2202      	movs	r2, #2
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f002 fb29 	bl	8017f3a <USBD_LL_OpenEP>
 80158e8:	4b35      	ldr	r3, [pc, #212]	@ (80159c0 <USBD_CDC_Init+0x1e8>)
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	f003 020f 	and.w	r2, r3, #15
 80158f0:	6879      	ldr	r1, [r7, #4]
 80158f2:	4613      	mov	r3, r2
 80158f4:	009b      	lsls	r3, r3, #2
 80158f6:	4413      	add	r3, r2
 80158f8:	009b      	lsls	r3, r3, #2
 80158fa:	440b      	add	r3, r1
 80158fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015900:	2201      	movs	r2, #1
 8015902:	801a      	strh	r2, [r3, #0]
 8015904:	4b2f      	ldr	r3, [pc, #188]	@ (80159c4 <USBD_CDC_Init+0x1ec>)
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	f003 020f 	and.w	r2, r3, #15
 801590c:	6879      	ldr	r1, [r7, #4]
 801590e:	4613      	mov	r3, r2
 8015910:	009b      	lsls	r3, r3, #2
 8015912:	4413      	add	r3, r2
 8015914:	009b      	lsls	r3, r3, #2
 8015916:	440b      	add	r3, r1
 8015918:	3326      	adds	r3, #38	@ 0x26
 801591a:	2210      	movs	r2, #16
 801591c:	801a      	strh	r2, [r3, #0]
 801591e:	4b29      	ldr	r3, [pc, #164]	@ (80159c4 <USBD_CDC_Init+0x1ec>)
 8015920:	7819      	ldrb	r1, [r3, #0]
 8015922:	2308      	movs	r3, #8
 8015924:	2203      	movs	r2, #3
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f002 fb07 	bl	8017f3a <USBD_LL_OpenEP>
 801592c:	4b25      	ldr	r3, [pc, #148]	@ (80159c4 <USBD_CDC_Init+0x1ec>)
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	f003 020f 	and.w	r2, r3, #15
 8015934:	6879      	ldr	r1, [r7, #4]
 8015936:	4613      	mov	r3, r2
 8015938:	009b      	lsls	r3, r3, #2
 801593a:	4413      	add	r3, r2
 801593c:	009b      	lsls	r3, r3, #2
 801593e:	440b      	add	r3, r1
 8015940:	3324      	adds	r3, #36	@ 0x24
 8015942:	2201      	movs	r2, #1
 8015944:	801a      	strh	r2, [r3, #0]
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	2200      	movs	r2, #0
 801594a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015954:	687a      	ldr	r2, [r7, #4]
 8015956:	33b0      	adds	r3, #176	@ 0xb0
 8015958:	009b      	lsls	r3, r3, #2
 801595a:	4413      	add	r3, r2
 801595c:	685b      	ldr	r3, [r3, #4]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	4798      	blx	r3
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	2200      	movs	r2, #0
 8015966:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	2200      	movs	r2, #0
 801596e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8015978:	2b00      	cmp	r3, #0
 801597a:	d101      	bne.n	8015980 <USBD_CDC_Init+0x1a8>
 801597c:	2302      	movs	r3, #2
 801597e:	e018      	b.n	80159b2 <USBD_CDC_Init+0x1da>
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	7c1b      	ldrb	r3, [r3, #16]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d10a      	bne.n	801599e <USBD_CDC_Init+0x1c6>
 8015988:	4b0d      	ldr	r3, [pc, #52]	@ (80159c0 <USBD_CDC_Init+0x1e8>)
 801598a:	7819      	ldrb	r1, [r3, #0]
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015992:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015996:	6878      	ldr	r0, [r7, #4]
 8015998:	f002 fbbe 	bl	8018118 <USBD_LL_PrepareReceive>
 801599c:	e008      	b.n	80159b0 <USBD_CDC_Init+0x1d8>
 801599e:	4b08      	ldr	r3, [pc, #32]	@ (80159c0 <USBD_CDC_Init+0x1e8>)
 80159a0:	7819      	ldrb	r1, [r3, #0]
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80159a8:	2340      	movs	r3, #64	@ 0x40
 80159aa:	6878      	ldr	r0, [r7, #4]
 80159ac:	f002 fbb4 	bl	8018118 <USBD_LL_PrepareReceive>
 80159b0:	2300      	movs	r3, #0
 80159b2:	4618      	mov	r0, r3
 80159b4:	3710      	adds	r7, #16
 80159b6:	46bd      	mov	sp, r7
 80159b8:	bd80      	pop	{r7, pc}
 80159ba:	bf00      	nop
 80159bc:	24000097 	.word	0x24000097
 80159c0:	24000098 	.word	0x24000098
 80159c4:	24000099 	.word	0x24000099

080159c8 <USBD_CDC_DeInit>:
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b082      	sub	sp, #8
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
 80159d0:	460b      	mov	r3, r1
 80159d2:	70fb      	strb	r3, [r7, #3]
 80159d4:	4b3a      	ldr	r3, [pc, #232]	@ (8015ac0 <USBD_CDC_DeInit+0xf8>)
 80159d6:	781b      	ldrb	r3, [r3, #0]
 80159d8:	4619      	mov	r1, r3
 80159da:	6878      	ldr	r0, [r7, #4]
 80159dc:	f002 fad3 	bl	8017f86 <USBD_LL_CloseEP>
 80159e0:	4b37      	ldr	r3, [pc, #220]	@ (8015ac0 <USBD_CDC_DeInit+0xf8>)
 80159e2:	781b      	ldrb	r3, [r3, #0]
 80159e4:	f003 020f 	and.w	r2, r3, #15
 80159e8:	6879      	ldr	r1, [r7, #4]
 80159ea:	4613      	mov	r3, r2
 80159ec:	009b      	lsls	r3, r3, #2
 80159ee:	4413      	add	r3, r2
 80159f0:	009b      	lsls	r3, r3, #2
 80159f2:	440b      	add	r3, r1
 80159f4:	3324      	adds	r3, #36	@ 0x24
 80159f6:	2200      	movs	r2, #0
 80159f8:	801a      	strh	r2, [r3, #0]
 80159fa:	4b32      	ldr	r3, [pc, #200]	@ (8015ac4 <USBD_CDC_DeInit+0xfc>)
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	4619      	mov	r1, r3
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f002 fac0 	bl	8017f86 <USBD_LL_CloseEP>
 8015a06:	4b2f      	ldr	r3, [pc, #188]	@ (8015ac4 <USBD_CDC_DeInit+0xfc>)
 8015a08:	781b      	ldrb	r3, [r3, #0]
 8015a0a:	f003 020f 	and.w	r2, r3, #15
 8015a0e:	6879      	ldr	r1, [r7, #4]
 8015a10:	4613      	mov	r3, r2
 8015a12:	009b      	lsls	r3, r3, #2
 8015a14:	4413      	add	r3, r2
 8015a16:	009b      	lsls	r3, r3, #2
 8015a18:	440b      	add	r3, r1
 8015a1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015a1e:	2200      	movs	r2, #0
 8015a20:	801a      	strh	r2, [r3, #0]
 8015a22:	4b29      	ldr	r3, [pc, #164]	@ (8015ac8 <USBD_CDC_DeInit+0x100>)
 8015a24:	781b      	ldrb	r3, [r3, #0]
 8015a26:	4619      	mov	r1, r3
 8015a28:	6878      	ldr	r0, [r7, #4]
 8015a2a:	f002 faac 	bl	8017f86 <USBD_LL_CloseEP>
 8015a2e:	4b26      	ldr	r3, [pc, #152]	@ (8015ac8 <USBD_CDC_DeInit+0x100>)
 8015a30:	781b      	ldrb	r3, [r3, #0]
 8015a32:	f003 020f 	and.w	r2, r3, #15
 8015a36:	6879      	ldr	r1, [r7, #4]
 8015a38:	4613      	mov	r3, r2
 8015a3a:	009b      	lsls	r3, r3, #2
 8015a3c:	4413      	add	r3, r2
 8015a3e:	009b      	lsls	r3, r3, #2
 8015a40:	440b      	add	r3, r1
 8015a42:	3324      	adds	r3, #36	@ 0x24
 8015a44:	2200      	movs	r2, #0
 8015a46:	801a      	strh	r2, [r3, #0]
 8015a48:	4b1f      	ldr	r3, [pc, #124]	@ (8015ac8 <USBD_CDC_DeInit+0x100>)
 8015a4a:	781b      	ldrb	r3, [r3, #0]
 8015a4c:	f003 020f 	and.w	r2, r3, #15
 8015a50:	6879      	ldr	r1, [r7, #4]
 8015a52:	4613      	mov	r3, r2
 8015a54:	009b      	lsls	r3, r3, #2
 8015a56:	4413      	add	r3, r2
 8015a58:	009b      	lsls	r3, r3, #2
 8015a5a:	440b      	add	r3, r1
 8015a5c:	3326      	adds	r3, #38	@ 0x26
 8015a5e:	2200      	movs	r2, #0
 8015a60:	801a      	strh	r2, [r3, #0]
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	32b0      	adds	r2, #176	@ 0xb0
 8015a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d01f      	beq.n	8015ab4 <USBD_CDC_DeInit+0xec>
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015a7a:	687a      	ldr	r2, [r7, #4]
 8015a7c:	33b0      	adds	r3, #176	@ 0xb0
 8015a7e:	009b      	lsls	r3, r3, #2
 8015a80:	4413      	add	r3, r2
 8015a82:	685b      	ldr	r3, [r3, #4]
 8015a84:	685b      	ldr	r3, [r3, #4]
 8015a86:	4798      	blx	r3
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	32b0      	adds	r2, #176	@ 0xb0
 8015a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a96:	4618      	mov	r0, r3
 8015a98:	f002 fb80 	bl	801819c <USBD_static_free>
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	32b0      	adds	r2, #176	@ 0xb0
 8015aa6:	2100      	movs	r1, #0
 8015aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	2200      	movs	r2, #0
 8015ab0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3708      	adds	r7, #8
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}
 8015abe:	bf00      	nop
 8015ac0:	24000097 	.word	0x24000097
 8015ac4:	24000098 	.word	0x24000098
 8015ac8:	24000099 	.word	0x24000099

08015acc <USBD_CDC_Setup>:
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b086      	sub	sp, #24
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	6039      	str	r1, [r7, #0]
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	32b0      	adds	r2, #176	@ 0xb0
 8015ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ae4:	613b      	str	r3, [r7, #16]
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	737b      	strb	r3, [r7, #13]
 8015aea:	2300      	movs	r3, #0
 8015aec:	817b      	strh	r3, [r7, #10]
 8015aee:	2300      	movs	r3, #0
 8015af0:	75fb      	strb	r3, [r7, #23]
 8015af2:	693b      	ldr	r3, [r7, #16]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d101      	bne.n	8015afc <USBD_CDC_Setup+0x30>
 8015af8:	2303      	movs	r3, #3
 8015afa:	e0bf      	b.n	8015c7c <USBD_CDC_Setup+0x1b0>
 8015afc:	683b      	ldr	r3, [r7, #0]
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d050      	beq.n	8015baa <USBD_CDC_Setup+0xde>
 8015b08:	2b20      	cmp	r3, #32
 8015b0a:	f040 80af 	bne.w	8015c6c <USBD_CDC_Setup+0x1a0>
 8015b0e:	683b      	ldr	r3, [r7, #0]
 8015b10:	88db      	ldrh	r3, [r3, #6]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d03a      	beq.n	8015b8c <USBD_CDC_Setup+0xc0>
 8015b16:	683b      	ldr	r3, [r7, #0]
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	b25b      	sxtb	r3, r3
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	da1b      	bge.n	8015b58 <USBD_CDC_Setup+0x8c>
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015b26:	687a      	ldr	r2, [r7, #4]
 8015b28:	33b0      	adds	r3, #176	@ 0xb0
 8015b2a:	009b      	lsls	r3, r3, #2
 8015b2c:	4413      	add	r3, r2
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	689b      	ldr	r3, [r3, #8]
 8015b32:	683a      	ldr	r2, [r7, #0]
 8015b34:	7850      	ldrb	r0, [r2, #1]
 8015b36:	6939      	ldr	r1, [r7, #16]
 8015b38:	683a      	ldr	r2, [r7, #0]
 8015b3a:	88d2      	ldrh	r2, [r2, #6]
 8015b3c:	4798      	blx	r3
 8015b3e:	683b      	ldr	r3, [r7, #0]
 8015b40:	88db      	ldrh	r3, [r3, #6]
 8015b42:	2b07      	cmp	r3, #7
 8015b44:	bf28      	it	cs
 8015b46:	2307      	movcs	r3, #7
 8015b48:	81fb      	strh	r3, [r7, #14]
 8015b4a:	693b      	ldr	r3, [r7, #16]
 8015b4c:	89fa      	ldrh	r2, [r7, #14]
 8015b4e:	4619      	mov	r1, r3
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f001 fdbd 	bl	80176d0 <USBD_CtlSendData>
 8015b56:	e090      	b.n	8015c7a <USBD_CDC_Setup+0x1ae>
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	785a      	ldrb	r2, [r3, #1]
 8015b5c:	693b      	ldr	r3, [r7, #16]
 8015b5e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
 8015b62:	683b      	ldr	r3, [r7, #0]
 8015b64:	88db      	ldrh	r3, [r3, #6]
 8015b66:	2b3f      	cmp	r3, #63	@ 0x3f
 8015b68:	d803      	bhi.n	8015b72 <USBD_CDC_Setup+0xa6>
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	88db      	ldrh	r3, [r3, #6]
 8015b6e:	b2da      	uxtb	r2, r3
 8015b70:	e000      	b.n	8015b74 <USBD_CDC_Setup+0xa8>
 8015b72:	2240      	movs	r2, #64	@ 0x40
 8015b74:	693b      	ldr	r3, [r7, #16]
 8015b76:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
 8015b7a:	6939      	ldr	r1, [r7, #16]
 8015b7c:	693b      	ldr	r3, [r7, #16]
 8015b7e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015b82:	461a      	mov	r2, r3
 8015b84:	6878      	ldr	r0, [r7, #4]
 8015b86:	f001 fdcf 	bl	8017728 <USBD_CtlPrepareRx>
 8015b8a:	e076      	b.n	8015c7a <USBD_CDC_Setup+0x1ae>
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015b92:	687a      	ldr	r2, [r7, #4]
 8015b94:	33b0      	adds	r3, #176	@ 0xb0
 8015b96:	009b      	lsls	r3, r3, #2
 8015b98:	4413      	add	r3, r2
 8015b9a:	685b      	ldr	r3, [r3, #4]
 8015b9c:	689b      	ldr	r3, [r3, #8]
 8015b9e:	683a      	ldr	r2, [r7, #0]
 8015ba0:	7850      	ldrb	r0, [r2, #1]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	6839      	ldr	r1, [r7, #0]
 8015ba6:	4798      	blx	r3
 8015ba8:	e067      	b.n	8015c7a <USBD_CDC_Setup+0x1ae>
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	785b      	ldrb	r3, [r3, #1]
 8015bae:	2b0b      	cmp	r3, #11
 8015bb0:	d851      	bhi.n	8015c56 <USBD_CDC_Setup+0x18a>
 8015bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8015bb8 <USBD_CDC_Setup+0xec>)
 8015bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bb8:	08015be9 	.word	0x08015be9
 8015bbc:	08015c65 	.word	0x08015c65
 8015bc0:	08015c57 	.word	0x08015c57
 8015bc4:	08015c57 	.word	0x08015c57
 8015bc8:	08015c57 	.word	0x08015c57
 8015bcc:	08015c57 	.word	0x08015c57
 8015bd0:	08015c57 	.word	0x08015c57
 8015bd4:	08015c57 	.word	0x08015c57
 8015bd8:	08015c57 	.word	0x08015c57
 8015bdc:	08015c57 	.word	0x08015c57
 8015be0:	08015c13 	.word	0x08015c13
 8015be4:	08015c3d 	.word	0x08015c3d
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015bee:	b2db      	uxtb	r3, r3
 8015bf0:	2b03      	cmp	r3, #3
 8015bf2:	d107      	bne.n	8015c04 <USBD_CDC_Setup+0x138>
 8015bf4:	f107 030a 	add.w	r3, r7, #10
 8015bf8:	2202      	movs	r2, #2
 8015bfa:	4619      	mov	r1, r3
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	f001 fd67 	bl	80176d0 <USBD_CtlSendData>
 8015c02:	e032      	b.n	8015c6a <USBD_CDC_Setup+0x19e>
 8015c04:	6839      	ldr	r1, [r7, #0]
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f001 fce5 	bl	80175d6 <USBD_CtlError>
 8015c0c:	2303      	movs	r3, #3
 8015c0e:	75fb      	strb	r3, [r7, #23]
 8015c10:	e02b      	b.n	8015c6a <USBD_CDC_Setup+0x19e>
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015c18:	b2db      	uxtb	r3, r3
 8015c1a:	2b03      	cmp	r3, #3
 8015c1c:	d107      	bne.n	8015c2e <USBD_CDC_Setup+0x162>
 8015c1e:	f107 030d 	add.w	r3, r7, #13
 8015c22:	2201      	movs	r2, #1
 8015c24:	4619      	mov	r1, r3
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f001 fd52 	bl	80176d0 <USBD_CtlSendData>
 8015c2c:	e01d      	b.n	8015c6a <USBD_CDC_Setup+0x19e>
 8015c2e:	6839      	ldr	r1, [r7, #0]
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f001 fcd0 	bl	80175d6 <USBD_CtlError>
 8015c36:	2303      	movs	r3, #3
 8015c38:	75fb      	strb	r3, [r7, #23]
 8015c3a:	e016      	b.n	8015c6a <USBD_CDC_Setup+0x19e>
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015c42:	b2db      	uxtb	r3, r3
 8015c44:	2b03      	cmp	r3, #3
 8015c46:	d00f      	beq.n	8015c68 <USBD_CDC_Setup+0x19c>
 8015c48:	6839      	ldr	r1, [r7, #0]
 8015c4a:	6878      	ldr	r0, [r7, #4]
 8015c4c:	f001 fcc3 	bl	80175d6 <USBD_CtlError>
 8015c50:	2303      	movs	r3, #3
 8015c52:	75fb      	strb	r3, [r7, #23]
 8015c54:	e008      	b.n	8015c68 <USBD_CDC_Setup+0x19c>
 8015c56:	6839      	ldr	r1, [r7, #0]
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f001 fcbc 	bl	80175d6 <USBD_CtlError>
 8015c5e:	2303      	movs	r3, #3
 8015c60:	75fb      	strb	r3, [r7, #23]
 8015c62:	e002      	b.n	8015c6a <USBD_CDC_Setup+0x19e>
 8015c64:	bf00      	nop
 8015c66:	e008      	b.n	8015c7a <USBD_CDC_Setup+0x1ae>
 8015c68:	bf00      	nop
 8015c6a:	e006      	b.n	8015c7a <USBD_CDC_Setup+0x1ae>
 8015c6c:	6839      	ldr	r1, [r7, #0]
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	f001 fcb1 	bl	80175d6 <USBD_CtlError>
 8015c74:	2303      	movs	r3, #3
 8015c76:	75fb      	strb	r3, [r7, #23]
 8015c78:	bf00      	nop
 8015c7a:	7dfb      	ldrb	r3, [r7, #23]
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	3718      	adds	r7, #24
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}

08015c84 <USBD_CDC_DataIn>:
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b084      	sub	sp, #16
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
 8015c8c:	460b      	mov	r3, r1
 8015c8e:	70fb      	strb	r3, [r7, #3]
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015c96:	60fb      	str	r3, [r7, #12]
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	32b0      	adds	r2, #176	@ 0xb0
 8015ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d101      	bne.n	8015cae <USBD_CDC_DataIn+0x2a>
 8015caa:	2303      	movs	r3, #3
 8015cac:	e065      	b.n	8015d7a <USBD_CDC_DataIn+0xf6>
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	32b0      	adds	r2, #176	@ 0xb0
 8015cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cbc:	60bb      	str	r3, [r7, #8]
 8015cbe:	78fb      	ldrb	r3, [r7, #3]
 8015cc0:	f003 020f 	and.w	r2, r3, #15
 8015cc4:	6879      	ldr	r1, [r7, #4]
 8015cc6:	4613      	mov	r3, r2
 8015cc8:	009b      	lsls	r3, r3, #2
 8015cca:	4413      	add	r3, r2
 8015ccc:	009b      	lsls	r3, r3, #2
 8015cce:	440b      	add	r3, r1
 8015cd0:	3318      	adds	r3, #24
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d02f      	beq.n	8015d38 <USBD_CDC_DataIn+0xb4>
 8015cd8:	78fb      	ldrb	r3, [r7, #3]
 8015cda:	f003 020f 	and.w	r2, r3, #15
 8015cde:	6879      	ldr	r1, [r7, #4]
 8015ce0:	4613      	mov	r3, r2
 8015ce2:	009b      	lsls	r3, r3, #2
 8015ce4:	4413      	add	r3, r2
 8015ce6:	009b      	lsls	r3, r3, #2
 8015ce8:	440b      	add	r3, r1
 8015cea:	3318      	adds	r3, #24
 8015cec:	681a      	ldr	r2, [r3, #0]
 8015cee:	78fb      	ldrb	r3, [r7, #3]
 8015cf0:	f003 010f 	and.w	r1, r3, #15
 8015cf4:	68f8      	ldr	r0, [r7, #12]
 8015cf6:	460b      	mov	r3, r1
 8015cf8:	00db      	lsls	r3, r3, #3
 8015cfa:	440b      	add	r3, r1
 8015cfc:	009b      	lsls	r3, r3, #2
 8015cfe:	4403      	add	r3, r0
 8015d00:	331c      	adds	r3, #28
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	fbb2 f1f3 	udiv	r1, r2, r3
 8015d08:	fb01 f303 	mul.w	r3, r1, r3
 8015d0c:	1ad3      	subs	r3, r2, r3
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d112      	bne.n	8015d38 <USBD_CDC_DataIn+0xb4>
 8015d12:	78fb      	ldrb	r3, [r7, #3]
 8015d14:	f003 020f 	and.w	r2, r3, #15
 8015d18:	6879      	ldr	r1, [r7, #4]
 8015d1a:	4613      	mov	r3, r2
 8015d1c:	009b      	lsls	r3, r3, #2
 8015d1e:	4413      	add	r3, r2
 8015d20:	009b      	lsls	r3, r3, #2
 8015d22:	440b      	add	r3, r1
 8015d24:	3318      	adds	r3, #24
 8015d26:	2200      	movs	r2, #0
 8015d28:	601a      	str	r2, [r3, #0]
 8015d2a:	78f9      	ldrb	r1, [r7, #3]
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	2200      	movs	r2, #0
 8015d30:	6878      	ldr	r0, [r7, #4]
 8015d32:	f002 f9d0 	bl	80180d6 <USBD_LL_Transmit>
 8015d36:	e01f      	b.n	8015d78 <USBD_CDC_DataIn+0xf4>
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d46:	687a      	ldr	r2, [r7, #4]
 8015d48:	33b0      	adds	r3, #176	@ 0xb0
 8015d4a:	009b      	lsls	r3, r3, #2
 8015d4c:	4413      	add	r3, r2
 8015d4e:	685b      	ldr	r3, [r3, #4]
 8015d50:	691b      	ldr	r3, [r3, #16]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d010      	beq.n	8015d78 <USBD_CDC_DataIn+0xf4>
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d5c:	687a      	ldr	r2, [r7, #4]
 8015d5e:	33b0      	adds	r3, #176	@ 0xb0
 8015d60:	009b      	lsls	r3, r3, #2
 8015d62:	4413      	add	r3, r2
 8015d64:	685b      	ldr	r3, [r3, #4]
 8015d66:	691b      	ldr	r3, [r3, #16]
 8015d68:	68ba      	ldr	r2, [r7, #8]
 8015d6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8015d6e:	68ba      	ldr	r2, [r7, #8]
 8015d70:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8015d74:	78fa      	ldrb	r2, [r7, #3]
 8015d76:	4798      	blx	r3
 8015d78:	2300      	movs	r3, #0
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	3710      	adds	r7, #16
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bd80      	pop	{r7, pc}

08015d82 <USBD_CDC_DataOut>:
 8015d82:	b580      	push	{r7, lr}
 8015d84:	b084      	sub	sp, #16
 8015d86:	af00      	add	r7, sp, #0
 8015d88:	6078      	str	r0, [r7, #4]
 8015d8a:	460b      	mov	r3, r1
 8015d8c:	70fb      	strb	r3, [r7, #3]
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	32b0      	adds	r2, #176	@ 0xb0
 8015d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d9c:	60fb      	str	r3, [r7, #12]
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	32b0      	adds	r2, #176	@ 0xb0
 8015da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d101      	bne.n	8015db4 <USBD_CDC_DataOut+0x32>
 8015db0:	2303      	movs	r3, #3
 8015db2:	e01a      	b.n	8015dea <USBD_CDC_DataOut+0x68>
 8015db4:	78fb      	ldrb	r3, [r7, #3]
 8015db6:	4619      	mov	r1, r3
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f002 f9ce 	bl	801815a <USBD_LL_GetRxDataSize>
 8015dbe:	4602      	mov	r2, r0
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015dcc:	687a      	ldr	r2, [r7, #4]
 8015dce:	33b0      	adds	r3, #176	@ 0xb0
 8015dd0:	009b      	lsls	r3, r3, #2
 8015dd2:	4413      	add	r3, r2
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	68db      	ldr	r3, [r3, #12]
 8015dd8:	68fa      	ldr	r2, [r7, #12]
 8015dda:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8015dde:	68fa      	ldr	r2, [r7, #12]
 8015de0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8015de4:	4611      	mov	r1, r2
 8015de6:	4798      	blx	r3
 8015de8:	2300      	movs	r3, #0
 8015dea:	4618      	mov	r0, r3
 8015dec:	3710      	adds	r7, #16
 8015dee:	46bd      	mov	sp, r7
 8015df0:	bd80      	pop	{r7, pc}

08015df2 <USBD_CDC_EP0_RxReady>:
 8015df2:	b580      	push	{r7, lr}
 8015df4:	b084      	sub	sp, #16
 8015df6:	af00      	add	r7, sp, #0
 8015df8:	6078      	str	r0, [r7, #4]
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	32b0      	adds	r2, #176	@ 0xb0
 8015e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e08:	60fb      	str	r3, [r7, #12]
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d101      	bne.n	8015e14 <USBD_CDC_EP0_RxReady+0x22>
 8015e10:	2303      	movs	r3, #3
 8015e12:	e024      	b.n	8015e5e <USBD_CDC_EP0_RxReady+0x6c>
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015e1a:	687a      	ldr	r2, [r7, #4]
 8015e1c:	33b0      	adds	r3, #176	@ 0xb0
 8015e1e:	009b      	lsls	r3, r3, #2
 8015e20:	4413      	add	r3, r2
 8015e22:	685b      	ldr	r3, [r3, #4]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d019      	beq.n	8015e5c <USBD_CDC_EP0_RxReady+0x6a>
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015e2e:	2bff      	cmp	r3, #255	@ 0xff
 8015e30:	d014      	beq.n	8015e5c <USBD_CDC_EP0_RxReady+0x6a>
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015e38:	687a      	ldr	r2, [r7, #4]
 8015e3a:	33b0      	adds	r3, #176	@ 0xb0
 8015e3c:	009b      	lsls	r3, r3, #2
 8015e3e:	4413      	add	r3, r2
 8015e40:	685b      	ldr	r3, [r3, #4]
 8015e42:	689b      	ldr	r3, [r3, #8]
 8015e44:	68fa      	ldr	r2, [r7, #12]
 8015e46:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
 8015e4a:	68f9      	ldr	r1, [r7, #12]
 8015e4c:	68fa      	ldr	r2, [r7, #12]
 8015e4e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
 8015e52:	4798      	blx	r3
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	22ff      	movs	r2, #255	@ 0xff
 8015e58:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	4618      	mov	r0, r3
 8015e60:	3710      	adds	r7, #16
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}
	...

08015e68 <USBD_CDC_GetFSCfgDesc>:
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b086      	sub	sp, #24
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	2182      	movs	r1, #130	@ 0x82
 8015e72:	4818      	ldr	r0, [pc, #96]	@ (8015ed4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015e74:	f000 fd4f 	bl	8016916 <USBD_GetEpDesc>
 8015e78:	6178      	str	r0, [r7, #20]
 8015e7a:	2101      	movs	r1, #1
 8015e7c:	4815      	ldr	r0, [pc, #84]	@ (8015ed4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015e7e:	f000 fd4a 	bl	8016916 <USBD_GetEpDesc>
 8015e82:	6138      	str	r0, [r7, #16]
 8015e84:	2181      	movs	r1, #129	@ 0x81
 8015e86:	4813      	ldr	r0, [pc, #76]	@ (8015ed4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015e88:	f000 fd45 	bl	8016916 <USBD_GetEpDesc>
 8015e8c:	60f8      	str	r0, [r7, #12]
 8015e8e:	697b      	ldr	r3, [r7, #20]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d002      	beq.n	8015e9a <USBD_CDC_GetFSCfgDesc+0x32>
 8015e94:	697b      	ldr	r3, [r7, #20]
 8015e96:	2210      	movs	r2, #16
 8015e98:	719a      	strb	r2, [r3, #6]
 8015e9a:	693b      	ldr	r3, [r7, #16]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d006      	beq.n	8015eae <USBD_CDC_GetFSCfgDesc+0x46>
 8015ea0:	693b      	ldr	r3, [r7, #16]
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ea8:	711a      	strb	r2, [r3, #4]
 8015eaa:	2200      	movs	r2, #0
 8015eac:	715a      	strb	r2, [r3, #5]
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d006      	beq.n	8015ec2 <USBD_CDC_GetFSCfgDesc+0x5a>
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ebc:	711a      	strb	r2, [r3, #4]
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	715a      	strb	r2, [r3, #5]
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	2243      	movs	r2, #67	@ 0x43
 8015ec6:	801a      	strh	r2, [r3, #0]
 8015ec8:	4b02      	ldr	r3, [pc, #8]	@ (8015ed4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015eca:	4618      	mov	r0, r3
 8015ecc:	3718      	adds	r7, #24
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}
 8015ed2:	bf00      	nop
 8015ed4:	24000054 	.word	0x24000054

08015ed8 <USBD_CDC_GetHSCfgDesc>:
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b086      	sub	sp, #24
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
 8015ee0:	2182      	movs	r1, #130	@ 0x82
 8015ee2:	4818      	ldr	r0, [pc, #96]	@ (8015f44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015ee4:	f000 fd17 	bl	8016916 <USBD_GetEpDesc>
 8015ee8:	6178      	str	r0, [r7, #20]
 8015eea:	2101      	movs	r1, #1
 8015eec:	4815      	ldr	r0, [pc, #84]	@ (8015f44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015eee:	f000 fd12 	bl	8016916 <USBD_GetEpDesc>
 8015ef2:	6138      	str	r0, [r7, #16]
 8015ef4:	2181      	movs	r1, #129	@ 0x81
 8015ef6:	4813      	ldr	r0, [pc, #76]	@ (8015f44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015ef8:	f000 fd0d 	bl	8016916 <USBD_GetEpDesc>
 8015efc:	60f8      	str	r0, [r7, #12]
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d002      	beq.n	8015f0a <USBD_CDC_GetHSCfgDesc+0x32>
 8015f04:	697b      	ldr	r3, [r7, #20]
 8015f06:	2210      	movs	r2, #16
 8015f08:	719a      	strb	r2, [r3, #6]
 8015f0a:	693b      	ldr	r3, [r7, #16]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d006      	beq.n	8015f1e <USBD_CDC_GetHSCfgDesc+0x46>
 8015f10:	693b      	ldr	r3, [r7, #16]
 8015f12:	2200      	movs	r2, #0
 8015f14:	711a      	strb	r2, [r3, #4]
 8015f16:	2200      	movs	r2, #0
 8015f18:	f042 0202 	orr.w	r2, r2, #2
 8015f1c:	715a      	strb	r2, [r3, #5]
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d006      	beq.n	8015f32 <USBD_CDC_GetHSCfgDesc+0x5a>
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	2200      	movs	r2, #0
 8015f28:	711a      	strb	r2, [r3, #4]
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	f042 0202 	orr.w	r2, r2, #2
 8015f30:	715a      	strb	r2, [r3, #5]
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2243      	movs	r2, #67	@ 0x43
 8015f36:	801a      	strh	r2, [r3, #0]
 8015f38:	4b02      	ldr	r3, [pc, #8]	@ (8015f44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3718      	adds	r7, #24
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	24000054 	.word	0x24000054

08015f48 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b086      	sub	sp, #24
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
 8015f50:	2182      	movs	r1, #130	@ 0x82
 8015f52:	4818      	ldr	r0, [pc, #96]	@ (8015fb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015f54:	f000 fcdf 	bl	8016916 <USBD_GetEpDesc>
 8015f58:	6178      	str	r0, [r7, #20]
 8015f5a:	2101      	movs	r1, #1
 8015f5c:	4815      	ldr	r0, [pc, #84]	@ (8015fb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015f5e:	f000 fcda 	bl	8016916 <USBD_GetEpDesc>
 8015f62:	6138      	str	r0, [r7, #16]
 8015f64:	2181      	movs	r1, #129	@ 0x81
 8015f66:	4813      	ldr	r0, [pc, #76]	@ (8015fb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015f68:	f000 fcd5 	bl	8016916 <USBD_GetEpDesc>
 8015f6c:	60f8      	str	r0, [r7, #12]
 8015f6e:	697b      	ldr	r3, [r7, #20]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d002      	beq.n	8015f7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	2210      	movs	r2, #16
 8015f78:	719a      	strb	r2, [r3, #6]
 8015f7a:	693b      	ldr	r3, [r7, #16]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d006      	beq.n	8015f8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
 8015f80:	693b      	ldr	r3, [r7, #16]
 8015f82:	2200      	movs	r2, #0
 8015f84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f88:	711a      	strb	r2, [r3, #4]
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	715a      	strb	r2, [r3, #5]
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d006      	beq.n	8015fa2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2200      	movs	r2, #0
 8015f98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f9c:	711a      	strb	r2, [r3, #4]
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	715a      	strb	r2, [r3, #5]
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	2243      	movs	r2, #67	@ 0x43
 8015fa6:	801a      	strh	r2, [r3, #0]
 8015fa8:	4b02      	ldr	r3, [pc, #8]	@ (8015fb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015faa:	4618      	mov	r0, r3
 8015fac:	3718      	adds	r7, #24
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}
 8015fb2:	bf00      	nop
 8015fb4:	24000054 	.word	0x24000054

08015fb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
 8015fb8:	b480      	push	{r7}
 8015fba:	b083      	sub	sp, #12
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	220a      	movs	r2, #10
 8015fc4:	801a      	strh	r2, [r3, #0]
 8015fc6:	4b03      	ldr	r3, [pc, #12]	@ (8015fd4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
 8015fc8:	4618      	mov	r0, r3
 8015fca:	370c      	adds	r7, #12
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd2:	4770      	bx	lr
 8015fd4:	24000010 	.word	0x24000010

08015fd8 <USBD_CDC_RegisterInterface>:
 8015fd8:	b480      	push	{r7}
 8015fda:	b083      	sub	sp, #12
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
 8015fe0:	6039      	str	r1, [r7, #0]
 8015fe2:	683b      	ldr	r3, [r7, #0]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d101      	bne.n	8015fec <USBD_CDC_RegisterInterface+0x14>
 8015fe8:	2303      	movs	r3, #3
 8015fea:	e009      	b.n	8016000 <USBD_CDC_RegisterInterface+0x28>
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015ff2:	687a      	ldr	r2, [r7, #4]
 8015ff4:	33b0      	adds	r3, #176	@ 0xb0
 8015ff6:	009b      	lsls	r3, r3, #2
 8015ff8:	4413      	add	r3, r2
 8015ffa:	683a      	ldr	r2, [r7, #0]
 8015ffc:	605a      	str	r2, [r3, #4]
 8015ffe:	2300      	movs	r3, #0
 8016000:	4618      	mov	r0, r3
 8016002:	370c      	adds	r7, #12
 8016004:	46bd      	mov	sp, r7
 8016006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600a:	4770      	bx	lr

0801600c <USBD_CDC_SetTxBuffer>:
 801600c:	b480      	push	{r7}
 801600e:	b087      	sub	sp, #28
 8016010:	af00      	add	r7, sp, #0
 8016012:	60f8      	str	r0, [r7, #12]
 8016014:	60b9      	str	r1, [r7, #8]
 8016016:	607a      	str	r2, [r7, #4]
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	32b0      	adds	r2, #176	@ 0xb0
 8016022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016026:	617b      	str	r3, [r7, #20]
 8016028:	697b      	ldr	r3, [r7, #20]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d101      	bne.n	8016032 <USBD_CDC_SetTxBuffer+0x26>
 801602e:	2303      	movs	r3, #3
 8016030:	e008      	b.n	8016044 <USBD_CDC_SetTxBuffer+0x38>
 8016032:	697b      	ldr	r3, [r7, #20]
 8016034:	68ba      	ldr	r2, [r7, #8]
 8016036:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 801603a:	697b      	ldr	r3, [r7, #20]
 801603c:	687a      	ldr	r2, [r7, #4]
 801603e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 8016042:	2300      	movs	r3, #0
 8016044:	4618      	mov	r0, r3
 8016046:	371c      	adds	r7, #28
 8016048:	46bd      	mov	sp, r7
 801604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604e:	4770      	bx	lr

08016050 <USBD_CDC_SetRxBuffer>:
 8016050:	b480      	push	{r7}
 8016052:	b085      	sub	sp, #20
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
 8016058:	6039      	str	r1, [r7, #0]
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	32b0      	adds	r2, #176	@ 0xb0
 8016064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016068:	60fb      	str	r3, [r7, #12]
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d101      	bne.n	8016074 <USBD_CDC_SetRxBuffer+0x24>
 8016070:	2303      	movs	r3, #3
 8016072:	e004      	b.n	801607e <USBD_CDC_SetRxBuffer+0x2e>
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	683a      	ldr	r2, [r7, #0]
 8016078:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 801607c:	2300      	movs	r3, #0
 801607e:	4618      	mov	r0, r3
 8016080:	3714      	adds	r7, #20
 8016082:	46bd      	mov	sp, r7
 8016084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016088:	4770      	bx	lr
	...

0801608c <USBD_CDC_TransmitPacket>:
 801608c:	b580      	push	{r7, lr}
 801608e:	b084      	sub	sp, #16
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	32b0      	adds	r2, #176	@ 0xb0
 801609e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160a2:	60bb      	str	r3, [r7, #8]
 80160a4:	2301      	movs	r3, #1
 80160a6:	73fb      	strb	r3, [r7, #15]
 80160a8:	68bb      	ldr	r3, [r7, #8]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d101      	bne.n	80160b2 <USBD_CDC_TransmitPacket+0x26>
 80160ae:	2303      	movs	r3, #3
 80160b0:	e025      	b.n	80160fe <USBD_CDC_TransmitPacket+0x72>
 80160b2:	68bb      	ldr	r3, [r7, #8]
 80160b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d11f      	bne.n	80160fc <USBD_CDC_TransmitPacket+0x70>
 80160bc:	68bb      	ldr	r3, [r7, #8]
 80160be:	2201      	movs	r2, #1
 80160c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80160c4:	4b10      	ldr	r3, [pc, #64]	@ (8016108 <USBD_CDC_TransmitPacket+0x7c>)
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	f003 020f 	and.w	r2, r3, #15
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	4613      	mov	r3, r2
 80160d6:	009b      	lsls	r3, r3, #2
 80160d8:	4413      	add	r3, r2
 80160da:	009b      	lsls	r3, r3, #2
 80160dc:	4403      	add	r3, r0
 80160de:	3318      	adds	r3, #24
 80160e0:	6019      	str	r1, [r3, #0]
 80160e2:	4b09      	ldr	r3, [pc, #36]	@ (8016108 <USBD_CDC_TransmitPacket+0x7c>)
 80160e4:	7819      	ldrb	r1, [r3, #0]
 80160e6:	68bb      	ldr	r3, [r7, #8]
 80160e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80160ec:	68bb      	ldr	r3, [r7, #8]
 80160ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f001 ffef 	bl	80180d6 <USBD_LL_Transmit>
 80160f8:	2300      	movs	r3, #0
 80160fa:	73fb      	strb	r3, [r7, #15]
 80160fc:	7bfb      	ldrb	r3, [r7, #15]
 80160fe:	4618      	mov	r0, r3
 8016100:	3710      	adds	r7, #16
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}
 8016106:	bf00      	nop
 8016108:	24000097 	.word	0x24000097

0801610c <USBD_CDC_ReceivePacket>:
 801610c:	b580      	push	{r7, lr}
 801610e:	b084      	sub	sp, #16
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	32b0      	adds	r2, #176	@ 0xb0
 801611e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016122:	60fb      	str	r3, [r7, #12]
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	32b0      	adds	r2, #176	@ 0xb0
 801612e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d101      	bne.n	801613a <USBD_CDC_ReceivePacket+0x2e>
 8016136:	2303      	movs	r3, #3
 8016138:	e018      	b.n	801616c <USBD_CDC_ReceivePacket+0x60>
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	7c1b      	ldrb	r3, [r3, #16]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d10a      	bne.n	8016158 <USBD_CDC_ReceivePacket+0x4c>
 8016142:	4b0c      	ldr	r3, [pc, #48]	@ (8016174 <USBD_CDC_ReceivePacket+0x68>)
 8016144:	7819      	ldrb	r1, [r3, #0]
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801614c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f001 ffe1 	bl	8018118 <USBD_LL_PrepareReceive>
 8016156:	e008      	b.n	801616a <USBD_CDC_ReceivePacket+0x5e>
 8016158:	4b06      	ldr	r3, [pc, #24]	@ (8016174 <USBD_CDC_ReceivePacket+0x68>)
 801615a:	7819      	ldrb	r1, [r3, #0]
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016162:	2340      	movs	r3, #64	@ 0x40
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f001 ffd7 	bl	8018118 <USBD_LL_PrepareReceive>
 801616a:	2300      	movs	r3, #0
 801616c:	4618      	mov	r0, r3
 801616e:	3710      	adds	r7, #16
 8016170:	46bd      	mov	sp, r7
 8016172:	bd80      	pop	{r7, pc}
 8016174:	24000098 	.word	0x24000098

08016178 <USBD_Init>:
 8016178:	b580      	push	{r7, lr}
 801617a:	b086      	sub	sp, #24
 801617c:	af00      	add	r7, sp, #0
 801617e:	60f8      	str	r0, [r7, #12]
 8016180:	60b9      	str	r1, [r7, #8]
 8016182:	4613      	mov	r3, r2
 8016184:	71fb      	strb	r3, [r7, #7]
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d101      	bne.n	8016190 <USBD_Init+0x18>
 801618c:	2303      	movs	r3, #3
 801618e:	e01f      	b.n	80161d0 <USBD_Init+0x58>
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	2200      	movs	r2, #0
 8016194:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	2200      	movs	r2, #0
 801619c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	2200      	movs	r2, #0
 80161a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
 80161a8:	68bb      	ldr	r3, [r7, #8]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d003      	beq.n	80161b6 <USBD_Init+0x3e>
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	68ba      	ldr	r2, [r7, #8]
 80161b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	2201      	movs	r2, #1
 80161ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	79fa      	ldrb	r2, [r7, #7]
 80161c2:	701a      	strb	r2, [r3, #0]
 80161c4:	68f8      	ldr	r0, [r7, #12]
 80161c6:	f001 fe4b 	bl	8017e60 <USBD_LL_Init>
 80161ca:	4603      	mov	r3, r0
 80161cc:	75fb      	strb	r3, [r7, #23]
 80161ce:	7dfb      	ldrb	r3, [r7, #23]
 80161d0:	4618      	mov	r0, r3
 80161d2:	3718      	adds	r7, #24
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}

080161d8 <USBD_RegisterClass>:
 80161d8:	b580      	push	{r7, lr}
 80161da:	b084      	sub	sp, #16
 80161dc:	af00      	add	r7, sp, #0
 80161de:	6078      	str	r0, [r7, #4]
 80161e0:	6039      	str	r1, [r7, #0]
 80161e2:	2300      	movs	r3, #0
 80161e4:	81fb      	strh	r3, [r7, #14]
 80161e6:	683b      	ldr	r3, [r7, #0]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d101      	bne.n	80161f0 <USBD_RegisterClass+0x18>
 80161ec:	2303      	movs	r3, #3
 80161ee:	e025      	b.n	801623c <USBD_RegisterClass+0x64>
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	683a      	ldr	r2, [r7, #0]
 80161f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	32ae      	adds	r2, #174	@ 0xae
 8016202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016208:	2b00      	cmp	r3, #0
 801620a:	d00f      	beq.n	801622c <USBD_RegisterClass+0x54>
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	32ae      	adds	r2, #174	@ 0xae
 8016216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801621c:	f107 020e 	add.w	r2, r7, #14
 8016220:	4610      	mov	r0, r2
 8016222:	4798      	blx	r3
 8016224:	4602      	mov	r2, r0
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016232:	1c5a      	adds	r2, r3, #1
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
 801623a:	2300      	movs	r3, #0
 801623c:	4618      	mov	r0, r3
 801623e:	3710      	adds	r7, #16
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}

08016244 <USBD_Start>:
 8016244:	b580      	push	{r7, lr}
 8016246:	b082      	sub	sp, #8
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f001 fe59 	bl	8017f04 <USBD_LL_Start>
 8016252:	4603      	mov	r3, r0
 8016254:	4618      	mov	r0, r3
 8016256:	3708      	adds	r7, #8
 8016258:	46bd      	mov	sp, r7
 801625a:	bd80      	pop	{r7, pc}

0801625c <USBD_RunTestMode>:
 801625c:	b480      	push	{r7}
 801625e:	b083      	sub	sp, #12
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
 8016264:	2300      	movs	r3, #0
 8016266:	4618      	mov	r0, r3
 8016268:	370c      	adds	r7, #12
 801626a:	46bd      	mov	sp, r7
 801626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016270:	4770      	bx	lr

08016272 <USBD_SetClassConfig>:
 8016272:	b580      	push	{r7, lr}
 8016274:	b084      	sub	sp, #16
 8016276:	af00      	add	r7, sp, #0
 8016278:	6078      	str	r0, [r7, #4]
 801627a:	460b      	mov	r3, r1
 801627c:	70fb      	strb	r3, [r7, #3]
 801627e:	2300      	movs	r3, #0
 8016280:	73fb      	strb	r3, [r7, #15]
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016288:	2b00      	cmp	r3, #0
 801628a:	d009      	beq.n	80162a0 <USBD_SetClassConfig+0x2e>
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	78fa      	ldrb	r2, [r7, #3]
 8016296:	4611      	mov	r1, r2
 8016298:	6878      	ldr	r0, [r7, #4]
 801629a:	4798      	blx	r3
 801629c:	4603      	mov	r3, r0
 801629e:	73fb      	strb	r3, [r7, #15]
 80162a0:	7bfb      	ldrb	r3, [r7, #15]
 80162a2:	4618      	mov	r0, r3
 80162a4:	3710      	adds	r7, #16
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}

080162aa <USBD_ClrClassConfig>:
 80162aa:	b580      	push	{r7, lr}
 80162ac:	b084      	sub	sp, #16
 80162ae:	af00      	add	r7, sp, #0
 80162b0:	6078      	str	r0, [r7, #4]
 80162b2:	460b      	mov	r3, r1
 80162b4:	70fb      	strb	r3, [r7, #3]
 80162b6:	2300      	movs	r3, #0
 80162b8:	73fb      	strb	r3, [r7, #15]
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80162c0:	685b      	ldr	r3, [r3, #4]
 80162c2:	78fa      	ldrb	r2, [r7, #3]
 80162c4:	4611      	mov	r1, r2
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	4798      	blx	r3
 80162ca:	4603      	mov	r3, r0
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d001      	beq.n	80162d4 <USBD_ClrClassConfig+0x2a>
 80162d0:	2303      	movs	r3, #3
 80162d2:	73fb      	strb	r3, [r7, #15]
 80162d4:	7bfb      	ldrb	r3, [r7, #15]
 80162d6:	4618      	mov	r0, r3
 80162d8:	3710      	adds	r7, #16
 80162da:	46bd      	mov	sp, r7
 80162dc:	bd80      	pop	{r7, pc}

080162de <USBD_LL_SetupStage>:
 80162de:	b580      	push	{r7, lr}
 80162e0:	b084      	sub	sp, #16
 80162e2:	af00      	add	r7, sp, #0
 80162e4:	6078      	str	r0, [r7, #4]
 80162e6:	6039      	str	r1, [r7, #0]
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80162ee:	6839      	ldr	r1, [r7, #0]
 80162f0:	4618      	mov	r0, r3
 80162f2:	f001 f936 	bl	8017562 <USBD_ParseSetupRequest>
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	2201      	movs	r2, #1
 80162fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016304:	461a      	mov	r2, r3
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016312:	f003 031f 	and.w	r3, r3, #31
 8016316:	2b02      	cmp	r3, #2
 8016318:	d01a      	beq.n	8016350 <USBD_LL_SetupStage+0x72>
 801631a:	2b02      	cmp	r3, #2
 801631c:	d822      	bhi.n	8016364 <USBD_LL_SetupStage+0x86>
 801631e:	2b00      	cmp	r3, #0
 8016320:	d002      	beq.n	8016328 <USBD_LL_SetupStage+0x4a>
 8016322:	2b01      	cmp	r3, #1
 8016324:	d00a      	beq.n	801633c <USBD_LL_SetupStage+0x5e>
 8016326:	e01d      	b.n	8016364 <USBD_LL_SetupStage+0x86>
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801632e:	4619      	mov	r1, r3
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f000 fb63 	bl	80169fc <USBD_StdDevReq>
 8016336:	4603      	mov	r3, r0
 8016338:	73fb      	strb	r3, [r7, #15]
 801633a:	e020      	b.n	801637e <USBD_LL_SetupStage+0xa0>
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016342:	4619      	mov	r1, r3
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f000 fbcb 	bl	8016ae0 <USBD_StdItfReq>
 801634a:	4603      	mov	r3, r0
 801634c:	73fb      	strb	r3, [r7, #15]
 801634e:	e016      	b.n	801637e <USBD_LL_SetupStage+0xa0>
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016356:	4619      	mov	r1, r3
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f000 fc2d 	bl	8016bb8 <USBD_StdEPReq>
 801635e:	4603      	mov	r3, r0
 8016360:	73fb      	strb	r3, [r7, #15]
 8016362:	e00c      	b.n	801637e <USBD_LL_SetupStage+0xa0>
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801636a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801636e:	b2db      	uxtb	r3, r3
 8016370:	4619      	mov	r1, r3
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	f001 fe26 	bl	8017fc4 <USBD_LL_StallEP>
 8016378:	4603      	mov	r3, r0
 801637a:	73fb      	strb	r3, [r7, #15]
 801637c:	bf00      	nop
 801637e:	7bfb      	ldrb	r3, [r7, #15]
 8016380:	4618      	mov	r0, r3
 8016382:	3710      	adds	r7, #16
 8016384:	46bd      	mov	sp, r7
 8016386:	bd80      	pop	{r7, pc}

08016388 <USBD_LL_DataOutStage>:
 8016388:	b580      	push	{r7, lr}
 801638a:	b086      	sub	sp, #24
 801638c:	af00      	add	r7, sp, #0
 801638e:	60f8      	str	r0, [r7, #12]
 8016390:	460b      	mov	r3, r1
 8016392:	607a      	str	r2, [r7, #4]
 8016394:	72fb      	strb	r3, [r7, #11]
 8016396:	2300      	movs	r3, #0
 8016398:	75fb      	strb	r3, [r7, #23]
 801639a:	7afb      	ldrb	r3, [r7, #11]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d16e      	bne.n	801647e <USBD_LL_DataOutStage+0xf6>
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80163a6:	613b      	str	r3, [r7, #16]
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80163ae:	2b03      	cmp	r3, #3
 80163b0:	f040 8098 	bne.w	80164e4 <USBD_LL_DataOutStage+0x15c>
 80163b4:	693b      	ldr	r3, [r7, #16]
 80163b6:	689a      	ldr	r2, [r3, #8]
 80163b8:	693b      	ldr	r3, [r7, #16]
 80163ba:	68db      	ldr	r3, [r3, #12]
 80163bc:	429a      	cmp	r2, r3
 80163be:	d913      	bls.n	80163e8 <USBD_LL_DataOutStage+0x60>
 80163c0:	693b      	ldr	r3, [r7, #16]
 80163c2:	689a      	ldr	r2, [r3, #8]
 80163c4:	693b      	ldr	r3, [r7, #16]
 80163c6:	68db      	ldr	r3, [r3, #12]
 80163c8:	1ad2      	subs	r2, r2, r3
 80163ca:	693b      	ldr	r3, [r7, #16]
 80163cc:	609a      	str	r2, [r3, #8]
 80163ce:	693b      	ldr	r3, [r7, #16]
 80163d0:	68da      	ldr	r2, [r3, #12]
 80163d2:	693b      	ldr	r3, [r7, #16]
 80163d4:	689b      	ldr	r3, [r3, #8]
 80163d6:	4293      	cmp	r3, r2
 80163d8:	bf28      	it	cs
 80163da:	4613      	movcs	r3, r2
 80163dc:	461a      	mov	r2, r3
 80163de:	6879      	ldr	r1, [r7, #4]
 80163e0:	68f8      	ldr	r0, [r7, #12]
 80163e2:	f001 f9be 	bl	8017762 <USBD_CtlContinueRx>
 80163e6:	e07d      	b.n	80164e4 <USBD_LL_DataOutStage+0x15c>
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80163ee:	f003 031f 	and.w	r3, r3, #31
 80163f2:	2b02      	cmp	r3, #2
 80163f4:	d014      	beq.n	8016420 <USBD_LL_DataOutStage+0x98>
 80163f6:	2b02      	cmp	r3, #2
 80163f8:	d81d      	bhi.n	8016436 <USBD_LL_DataOutStage+0xae>
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d002      	beq.n	8016404 <USBD_LL_DataOutStage+0x7c>
 80163fe:	2b01      	cmp	r3, #1
 8016400:	d003      	beq.n	801640a <USBD_LL_DataOutStage+0x82>
 8016402:	e018      	b.n	8016436 <USBD_LL_DataOutStage+0xae>
 8016404:	2300      	movs	r3, #0
 8016406:	75bb      	strb	r3, [r7, #22]
 8016408:	e018      	b.n	801643c <USBD_LL_DataOutStage+0xb4>
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016410:	b2db      	uxtb	r3, r3
 8016412:	4619      	mov	r1, r3
 8016414:	68f8      	ldr	r0, [r7, #12]
 8016416:	f000 fa64 	bl	80168e2 <USBD_CoreFindIF>
 801641a:	4603      	mov	r3, r0
 801641c:	75bb      	strb	r3, [r7, #22]
 801641e:	e00d      	b.n	801643c <USBD_LL_DataOutStage+0xb4>
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016426:	b2db      	uxtb	r3, r3
 8016428:	4619      	mov	r1, r3
 801642a:	68f8      	ldr	r0, [r7, #12]
 801642c:	f000 fa66 	bl	80168fc <USBD_CoreFindEP>
 8016430:	4603      	mov	r3, r0
 8016432:	75bb      	strb	r3, [r7, #22]
 8016434:	e002      	b.n	801643c <USBD_LL_DataOutStage+0xb4>
 8016436:	2300      	movs	r3, #0
 8016438:	75bb      	strb	r3, [r7, #22]
 801643a:	bf00      	nop
 801643c:	7dbb      	ldrb	r3, [r7, #22]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d119      	bne.n	8016476 <USBD_LL_DataOutStage+0xee>
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016448:	b2db      	uxtb	r3, r3
 801644a:	2b03      	cmp	r3, #3
 801644c:	d113      	bne.n	8016476 <USBD_LL_DataOutStage+0xee>
 801644e:	7dba      	ldrb	r2, [r7, #22]
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	32ae      	adds	r2, #174	@ 0xae
 8016454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016458:	691b      	ldr	r3, [r3, #16]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d00b      	beq.n	8016476 <USBD_LL_DataOutStage+0xee>
 801645e:	7dba      	ldrb	r2, [r7, #22]
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 8016466:	7dba      	ldrb	r2, [r7, #22]
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	32ae      	adds	r2, #174	@ 0xae
 801646c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016470:	691b      	ldr	r3, [r3, #16]
 8016472:	68f8      	ldr	r0, [r7, #12]
 8016474:	4798      	blx	r3
 8016476:	68f8      	ldr	r0, [r7, #12]
 8016478:	f001 f984 	bl	8017784 <USBD_CtlSendStatus>
 801647c:	e032      	b.n	80164e4 <USBD_LL_DataOutStage+0x15c>
 801647e:	7afb      	ldrb	r3, [r7, #11]
 8016480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016484:	b2db      	uxtb	r3, r3
 8016486:	4619      	mov	r1, r3
 8016488:	68f8      	ldr	r0, [r7, #12]
 801648a:	f000 fa37 	bl	80168fc <USBD_CoreFindEP>
 801648e:	4603      	mov	r3, r0
 8016490:	75bb      	strb	r3, [r7, #22]
 8016492:	7dbb      	ldrb	r3, [r7, #22]
 8016494:	2bff      	cmp	r3, #255	@ 0xff
 8016496:	d025      	beq.n	80164e4 <USBD_LL_DataOutStage+0x15c>
 8016498:	7dbb      	ldrb	r3, [r7, #22]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d122      	bne.n	80164e4 <USBD_LL_DataOutStage+0x15c>
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80164a4:	b2db      	uxtb	r3, r3
 80164a6:	2b03      	cmp	r3, #3
 80164a8:	d117      	bne.n	80164da <USBD_LL_DataOutStage+0x152>
 80164aa:	7dba      	ldrb	r2, [r7, #22]
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	32ae      	adds	r2, #174	@ 0xae
 80164b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164b4:	699b      	ldr	r3, [r3, #24]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d00f      	beq.n	80164da <USBD_LL_DataOutStage+0x152>
 80164ba:	7dba      	ldrb	r2, [r7, #22]
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 80164c2:	7dba      	ldrb	r2, [r7, #22]
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	32ae      	adds	r2, #174	@ 0xae
 80164c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164cc:	699b      	ldr	r3, [r3, #24]
 80164ce:	7afa      	ldrb	r2, [r7, #11]
 80164d0:	4611      	mov	r1, r2
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	4798      	blx	r3
 80164d6:	4603      	mov	r3, r0
 80164d8:	75fb      	strb	r3, [r7, #23]
 80164da:	7dfb      	ldrb	r3, [r7, #23]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d001      	beq.n	80164e4 <USBD_LL_DataOutStage+0x15c>
 80164e0:	7dfb      	ldrb	r3, [r7, #23]
 80164e2:	e000      	b.n	80164e6 <USBD_LL_DataOutStage+0x15e>
 80164e4:	2300      	movs	r3, #0
 80164e6:	4618      	mov	r0, r3
 80164e8:	3718      	adds	r7, #24
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}

080164ee <USBD_LL_DataInStage>:
 80164ee:	b580      	push	{r7, lr}
 80164f0:	b086      	sub	sp, #24
 80164f2:	af00      	add	r7, sp, #0
 80164f4:	60f8      	str	r0, [r7, #12]
 80164f6:	460b      	mov	r3, r1
 80164f8:	607a      	str	r2, [r7, #4]
 80164fa:	72fb      	strb	r3, [r7, #11]
 80164fc:	7afb      	ldrb	r3, [r7, #11]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d16f      	bne.n	80165e2 <USBD_LL_DataInStage+0xf4>
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	3314      	adds	r3, #20
 8016506:	613b      	str	r3, [r7, #16]
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801650e:	2b02      	cmp	r3, #2
 8016510:	d15a      	bne.n	80165c8 <USBD_LL_DataInStage+0xda>
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	689a      	ldr	r2, [r3, #8]
 8016516:	693b      	ldr	r3, [r7, #16]
 8016518:	68db      	ldr	r3, [r3, #12]
 801651a:	429a      	cmp	r2, r3
 801651c:	d914      	bls.n	8016548 <USBD_LL_DataInStage+0x5a>
 801651e:	693b      	ldr	r3, [r7, #16]
 8016520:	689a      	ldr	r2, [r3, #8]
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	68db      	ldr	r3, [r3, #12]
 8016526:	1ad2      	subs	r2, r2, r3
 8016528:	693b      	ldr	r3, [r7, #16]
 801652a:	609a      	str	r2, [r3, #8]
 801652c:	693b      	ldr	r3, [r7, #16]
 801652e:	689b      	ldr	r3, [r3, #8]
 8016530:	461a      	mov	r2, r3
 8016532:	6879      	ldr	r1, [r7, #4]
 8016534:	68f8      	ldr	r0, [r7, #12]
 8016536:	f001 f8e6 	bl	8017706 <USBD_CtlContinueSendData>
 801653a:	2300      	movs	r3, #0
 801653c:	2200      	movs	r2, #0
 801653e:	2100      	movs	r1, #0
 8016540:	68f8      	ldr	r0, [r7, #12]
 8016542:	f001 fde9 	bl	8018118 <USBD_LL_PrepareReceive>
 8016546:	e03f      	b.n	80165c8 <USBD_LL_DataInStage+0xda>
 8016548:	693b      	ldr	r3, [r7, #16]
 801654a:	68da      	ldr	r2, [r3, #12]
 801654c:	693b      	ldr	r3, [r7, #16]
 801654e:	689b      	ldr	r3, [r3, #8]
 8016550:	429a      	cmp	r2, r3
 8016552:	d11c      	bne.n	801658e <USBD_LL_DataInStage+0xa0>
 8016554:	693b      	ldr	r3, [r7, #16]
 8016556:	685a      	ldr	r2, [r3, #4]
 8016558:	693b      	ldr	r3, [r7, #16]
 801655a:	68db      	ldr	r3, [r3, #12]
 801655c:	429a      	cmp	r2, r3
 801655e:	d316      	bcc.n	801658e <USBD_LL_DataInStage+0xa0>
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	685a      	ldr	r2, [r3, #4]
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 801656a:	429a      	cmp	r2, r3
 801656c:	d20f      	bcs.n	801658e <USBD_LL_DataInStage+0xa0>
 801656e:	2200      	movs	r2, #0
 8016570:	2100      	movs	r1, #0
 8016572:	68f8      	ldr	r0, [r7, #12]
 8016574:	f001 f8c7 	bl	8017706 <USBD_CtlContinueSendData>
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	2200      	movs	r2, #0
 801657c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
 8016580:	2300      	movs	r3, #0
 8016582:	2200      	movs	r2, #0
 8016584:	2100      	movs	r1, #0
 8016586:	68f8      	ldr	r0, [r7, #12]
 8016588:	f001 fdc6 	bl	8018118 <USBD_LL_PrepareReceive>
 801658c:	e01c      	b.n	80165c8 <USBD_LL_DataInStage+0xda>
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016594:	b2db      	uxtb	r3, r3
 8016596:	2b03      	cmp	r3, #3
 8016598:	d10f      	bne.n	80165ba <USBD_LL_DataInStage+0xcc>
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165a0:	68db      	ldr	r3, [r3, #12]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d009      	beq.n	80165ba <USBD_LL_DataInStage+0xcc>
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	2200      	movs	r2, #0
 80165aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165b4:	68db      	ldr	r3, [r3, #12]
 80165b6:	68f8      	ldr	r0, [r7, #12]
 80165b8:	4798      	blx	r3
 80165ba:	2180      	movs	r1, #128	@ 0x80
 80165bc:	68f8      	ldr	r0, [r7, #12]
 80165be:	f001 fd01 	bl	8017fc4 <USBD_LL_StallEP>
 80165c2:	68f8      	ldr	r0, [r7, #12]
 80165c4:	f001 f8f1 	bl	80177aa <USBD_CtlReceiveStatus>
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d03a      	beq.n	8016648 <USBD_LL_DataInStage+0x15a>
 80165d2:	68f8      	ldr	r0, [r7, #12]
 80165d4:	f7ff fe42 	bl	801625c <USBD_RunTestMode>
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	2200      	movs	r2, #0
 80165dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80165e0:	e032      	b.n	8016648 <USBD_LL_DataInStage+0x15a>
 80165e2:	7afb      	ldrb	r3, [r7, #11]
 80165e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80165e8:	b2db      	uxtb	r3, r3
 80165ea:	4619      	mov	r1, r3
 80165ec:	68f8      	ldr	r0, [r7, #12]
 80165ee:	f000 f985 	bl	80168fc <USBD_CoreFindEP>
 80165f2:	4603      	mov	r3, r0
 80165f4:	75fb      	strb	r3, [r7, #23]
 80165f6:	7dfb      	ldrb	r3, [r7, #23]
 80165f8:	2bff      	cmp	r3, #255	@ 0xff
 80165fa:	d025      	beq.n	8016648 <USBD_LL_DataInStage+0x15a>
 80165fc:	7dfb      	ldrb	r3, [r7, #23]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d122      	bne.n	8016648 <USBD_LL_DataInStage+0x15a>
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016608:	b2db      	uxtb	r3, r3
 801660a:	2b03      	cmp	r3, #3
 801660c:	d11c      	bne.n	8016648 <USBD_LL_DataInStage+0x15a>
 801660e:	7dfa      	ldrb	r2, [r7, #23]
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	32ae      	adds	r2, #174	@ 0xae
 8016614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016618:	695b      	ldr	r3, [r3, #20]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d014      	beq.n	8016648 <USBD_LL_DataInStage+0x15a>
 801661e:	7dfa      	ldrb	r2, [r7, #23]
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 8016626:	7dfa      	ldrb	r2, [r7, #23]
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	32ae      	adds	r2, #174	@ 0xae
 801662c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016630:	695b      	ldr	r3, [r3, #20]
 8016632:	7afa      	ldrb	r2, [r7, #11]
 8016634:	4611      	mov	r1, r2
 8016636:	68f8      	ldr	r0, [r7, #12]
 8016638:	4798      	blx	r3
 801663a:	4603      	mov	r3, r0
 801663c:	75bb      	strb	r3, [r7, #22]
 801663e:	7dbb      	ldrb	r3, [r7, #22]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d001      	beq.n	8016648 <USBD_LL_DataInStage+0x15a>
 8016644:	7dbb      	ldrb	r3, [r7, #22]
 8016646:	e000      	b.n	801664a <USBD_LL_DataInStage+0x15c>
 8016648:	2300      	movs	r3, #0
 801664a:	4618      	mov	r0, r3
 801664c:	3718      	adds	r7, #24
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}

08016652 <USBD_LL_Reset>:
 8016652:	b580      	push	{r7, lr}
 8016654:	b084      	sub	sp, #16
 8016656:	af00      	add	r7, sp, #0
 8016658:	6078      	str	r0, [r7, #4]
 801665a:	2300      	movs	r3, #0
 801665c:	73fb      	strb	r3, [r7, #15]
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	2201      	movs	r2, #1
 8016662:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2200      	movs	r2, #0
 801666a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	2200      	movs	r2, #0
 8016672:	605a      	str	r2, [r3, #4]
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2200      	movs	r2, #0
 8016678:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2200      	movs	r2, #0
 8016680:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801668a:	2b00      	cmp	r3, #0
 801668c:	d014      	beq.n	80166b8 <USBD_LL_Reset+0x66>
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016694:	685b      	ldr	r3, [r3, #4]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d00e      	beq.n	80166b8 <USBD_LL_Reset+0x66>
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166a0:	685b      	ldr	r3, [r3, #4]
 80166a2:	687a      	ldr	r2, [r7, #4]
 80166a4:	6852      	ldr	r2, [r2, #4]
 80166a6:	b2d2      	uxtb	r2, r2
 80166a8:	4611      	mov	r1, r2
 80166aa:	6878      	ldr	r0, [r7, #4]
 80166ac:	4798      	blx	r3
 80166ae:	4603      	mov	r3, r0
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d001      	beq.n	80166b8 <USBD_LL_Reset+0x66>
 80166b4:	2303      	movs	r3, #3
 80166b6:	73fb      	strb	r3, [r7, #15]
 80166b8:	2340      	movs	r3, #64	@ 0x40
 80166ba:	2200      	movs	r2, #0
 80166bc:	2100      	movs	r1, #0
 80166be:	6878      	ldr	r0, [r7, #4]
 80166c0:	f001 fc3b 	bl	8017f3a <USBD_LL_OpenEP>
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2201      	movs	r2, #1
 80166c8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	2240      	movs	r2, #64	@ 0x40
 80166d0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 80166d4:	2340      	movs	r3, #64	@ 0x40
 80166d6:	2200      	movs	r2, #0
 80166d8:	2180      	movs	r1, #128	@ 0x80
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	f001 fc2d 	bl	8017f3a <USBD_LL_OpenEP>
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	2201      	movs	r2, #1
 80166e4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	2240      	movs	r2, #64	@ 0x40
 80166ea:	621a      	str	r2, [r3, #32]
 80166ec:	7bfb      	ldrb	r3, [r7, #15]
 80166ee:	4618      	mov	r0, r3
 80166f0:	3710      	adds	r7, #16
 80166f2:	46bd      	mov	sp, r7
 80166f4:	bd80      	pop	{r7, pc}

080166f6 <USBD_LL_SetSpeed>:
 80166f6:	b480      	push	{r7}
 80166f8:	b083      	sub	sp, #12
 80166fa:	af00      	add	r7, sp, #0
 80166fc:	6078      	str	r0, [r7, #4]
 80166fe:	460b      	mov	r3, r1
 8016700:	70fb      	strb	r3, [r7, #3]
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	78fa      	ldrb	r2, [r7, #3]
 8016706:	741a      	strb	r2, [r3, #16]
 8016708:	2300      	movs	r3, #0
 801670a:	4618      	mov	r0, r3
 801670c:	370c      	adds	r7, #12
 801670e:	46bd      	mov	sp, r7
 8016710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016714:	4770      	bx	lr

08016716 <USBD_LL_Suspend>:
 8016716:	b480      	push	{r7}
 8016718:	b083      	sub	sp, #12
 801671a:	af00      	add	r7, sp, #0
 801671c:	6078      	str	r0, [r7, #4]
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016724:	b2db      	uxtb	r3, r3
 8016726:	2b04      	cmp	r3, #4
 8016728:	d006      	beq.n	8016738 <USBD_LL_Suspend+0x22>
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016730:	b2da      	uxtb	r2, r3
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2204      	movs	r2, #4
 801673c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 8016740:	2300      	movs	r3, #0
 8016742:	4618      	mov	r0, r3
 8016744:	370c      	adds	r7, #12
 8016746:	46bd      	mov	sp, r7
 8016748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674c:	4770      	bx	lr

0801674e <USBD_LL_Resume>:
 801674e:	b480      	push	{r7}
 8016750:	b083      	sub	sp, #12
 8016752:	af00      	add	r7, sp, #0
 8016754:	6078      	str	r0, [r7, #4]
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801675c:	b2db      	uxtb	r3, r3
 801675e:	2b04      	cmp	r3, #4
 8016760:	d106      	bne.n	8016770 <USBD_LL_Resume+0x22>
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016768:	b2da      	uxtb	r2, r3
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 8016770:	2300      	movs	r3, #0
 8016772:	4618      	mov	r0, r3
 8016774:	370c      	adds	r7, #12
 8016776:	46bd      	mov	sp, r7
 8016778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677c:	4770      	bx	lr

0801677e <USBD_LL_SOF>:
 801677e:	b580      	push	{r7, lr}
 8016780:	b082      	sub	sp, #8
 8016782:	af00      	add	r7, sp, #0
 8016784:	6078      	str	r0, [r7, #4]
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801678c:	b2db      	uxtb	r3, r3
 801678e:	2b03      	cmp	r3, #3
 8016790:	d110      	bne.n	80167b4 <USBD_LL_SOF+0x36>
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016798:	2b00      	cmp	r3, #0
 801679a:	d00b      	beq.n	80167b4 <USBD_LL_SOF+0x36>
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167a2:	69db      	ldr	r3, [r3, #28]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d005      	beq.n	80167b4 <USBD_LL_SOF+0x36>
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167ae:	69db      	ldr	r3, [r3, #28]
 80167b0:	6878      	ldr	r0, [r7, #4]
 80167b2:	4798      	blx	r3
 80167b4:	2300      	movs	r3, #0
 80167b6:	4618      	mov	r0, r3
 80167b8:	3708      	adds	r7, #8
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bd80      	pop	{r7, pc}

080167be <USBD_LL_IsoINIncomplete>:
 80167be:	b580      	push	{r7, lr}
 80167c0:	b082      	sub	sp, #8
 80167c2:	af00      	add	r7, sp, #0
 80167c4:	6078      	str	r0, [r7, #4]
 80167c6:	460b      	mov	r3, r1
 80167c8:	70fb      	strb	r3, [r7, #3]
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	32ae      	adds	r2, #174	@ 0xae
 80167d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d101      	bne.n	80167e0 <USBD_LL_IsoINIncomplete+0x22>
 80167dc:	2303      	movs	r3, #3
 80167de:	e01c      	b.n	801681a <USBD_LL_IsoINIncomplete+0x5c>
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80167e6:	b2db      	uxtb	r3, r3
 80167e8:	2b03      	cmp	r3, #3
 80167ea:	d115      	bne.n	8016818 <USBD_LL_IsoINIncomplete+0x5a>
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	32ae      	adds	r2, #174	@ 0xae
 80167f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167fa:	6a1b      	ldr	r3, [r3, #32]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d00b      	beq.n	8016818 <USBD_LL_IsoINIncomplete+0x5a>
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	32ae      	adds	r2, #174	@ 0xae
 801680a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801680e:	6a1b      	ldr	r3, [r3, #32]
 8016810:	78fa      	ldrb	r2, [r7, #3]
 8016812:	4611      	mov	r1, r2
 8016814:	6878      	ldr	r0, [r7, #4]
 8016816:	4798      	blx	r3
 8016818:	2300      	movs	r3, #0
 801681a:	4618      	mov	r0, r3
 801681c:	3708      	adds	r7, #8
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}

08016822 <USBD_LL_IsoOUTIncomplete>:
 8016822:	b580      	push	{r7, lr}
 8016824:	b082      	sub	sp, #8
 8016826:	af00      	add	r7, sp, #0
 8016828:	6078      	str	r0, [r7, #4]
 801682a:	460b      	mov	r3, r1
 801682c:	70fb      	strb	r3, [r7, #3]
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	32ae      	adds	r2, #174	@ 0xae
 8016838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d101      	bne.n	8016844 <USBD_LL_IsoOUTIncomplete+0x22>
 8016840:	2303      	movs	r3, #3
 8016842:	e01c      	b.n	801687e <USBD_LL_IsoOUTIncomplete+0x5c>
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801684a:	b2db      	uxtb	r3, r3
 801684c:	2b03      	cmp	r3, #3
 801684e:	d115      	bne.n	801687c <USBD_LL_IsoOUTIncomplete+0x5a>
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	32ae      	adds	r2, #174	@ 0xae
 801685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801685e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016860:	2b00      	cmp	r3, #0
 8016862:	d00b      	beq.n	801687c <USBD_LL_IsoOUTIncomplete+0x5a>
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	32ae      	adds	r2, #174	@ 0xae
 801686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016874:	78fa      	ldrb	r2, [r7, #3]
 8016876:	4611      	mov	r1, r2
 8016878:	6878      	ldr	r0, [r7, #4]
 801687a:	4798      	blx	r3
 801687c:	2300      	movs	r3, #0
 801687e:	4618      	mov	r0, r3
 8016880:	3708      	adds	r7, #8
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}

08016886 <USBD_LL_DevConnected>:
 8016886:	b480      	push	{r7}
 8016888:	b083      	sub	sp, #12
 801688a:	af00      	add	r7, sp, #0
 801688c:	6078      	str	r0, [r7, #4]
 801688e:	2300      	movs	r3, #0
 8016890:	4618      	mov	r0, r3
 8016892:	370c      	adds	r7, #12
 8016894:	46bd      	mov	sp, r7
 8016896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689a:	4770      	bx	lr

0801689c <USBD_LL_DevDisconnected>:
 801689c:	b580      	push	{r7, lr}
 801689e:	b084      	sub	sp, #16
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
 80168a4:	2300      	movs	r3, #0
 80168a6:	73fb      	strb	r3, [r7, #15]
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2201      	movs	r2, #1
 80168ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d00e      	beq.n	80168d8 <USBD_LL_DevDisconnected+0x3c>
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168c0:	685b      	ldr	r3, [r3, #4]
 80168c2:	687a      	ldr	r2, [r7, #4]
 80168c4:	6852      	ldr	r2, [r2, #4]
 80168c6:	b2d2      	uxtb	r2, r2
 80168c8:	4611      	mov	r1, r2
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	4798      	blx	r3
 80168ce:	4603      	mov	r3, r0
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d001      	beq.n	80168d8 <USBD_LL_DevDisconnected+0x3c>
 80168d4:	2303      	movs	r3, #3
 80168d6:	73fb      	strb	r3, [r7, #15]
 80168d8:	7bfb      	ldrb	r3, [r7, #15]
 80168da:	4618      	mov	r0, r3
 80168dc:	3710      	adds	r7, #16
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}

080168e2 <USBD_CoreFindIF>:
 80168e2:	b480      	push	{r7}
 80168e4:	b083      	sub	sp, #12
 80168e6:	af00      	add	r7, sp, #0
 80168e8:	6078      	str	r0, [r7, #4]
 80168ea:	460b      	mov	r3, r1
 80168ec:	70fb      	strb	r3, [r7, #3]
 80168ee:	2300      	movs	r3, #0
 80168f0:	4618      	mov	r0, r3
 80168f2:	370c      	adds	r7, #12
 80168f4:	46bd      	mov	sp, r7
 80168f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fa:	4770      	bx	lr

080168fc <USBD_CoreFindEP>:
 80168fc:	b480      	push	{r7}
 80168fe:	b083      	sub	sp, #12
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	460b      	mov	r3, r1
 8016906:	70fb      	strb	r3, [r7, #3]
 8016908:	2300      	movs	r3, #0
 801690a:	4618      	mov	r0, r3
 801690c:	370c      	adds	r7, #12
 801690e:	46bd      	mov	sp, r7
 8016910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016914:	4770      	bx	lr

08016916 <USBD_GetEpDesc>:
 8016916:	b580      	push	{r7, lr}
 8016918:	b086      	sub	sp, #24
 801691a:	af00      	add	r7, sp, #0
 801691c:	6078      	str	r0, [r7, #4]
 801691e:	460b      	mov	r3, r1
 8016920:	70fb      	strb	r3, [r7, #3]
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	617b      	str	r3, [r7, #20]
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	60fb      	str	r3, [r7, #12]
 801692a:	2300      	movs	r3, #0
 801692c:	613b      	str	r3, [r7, #16]
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	885b      	ldrh	r3, [r3, #2]
 8016932:	b29b      	uxth	r3, r3
 8016934:	68fa      	ldr	r2, [r7, #12]
 8016936:	7812      	ldrb	r2, [r2, #0]
 8016938:	4293      	cmp	r3, r2
 801693a:	d91f      	bls.n	801697c <USBD_GetEpDesc+0x66>
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	781b      	ldrb	r3, [r3, #0]
 8016940:	817b      	strh	r3, [r7, #10]
 8016942:	e013      	b.n	801696c <USBD_GetEpDesc+0x56>
 8016944:	f107 030a 	add.w	r3, r7, #10
 8016948:	4619      	mov	r1, r3
 801694a:	6978      	ldr	r0, [r7, #20]
 801694c:	f000 f81b 	bl	8016986 <USBD_GetNextDesc>
 8016950:	6178      	str	r0, [r7, #20]
 8016952:	697b      	ldr	r3, [r7, #20]
 8016954:	785b      	ldrb	r3, [r3, #1]
 8016956:	2b05      	cmp	r3, #5
 8016958:	d108      	bne.n	801696c <USBD_GetEpDesc+0x56>
 801695a:	697b      	ldr	r3, [r7, #20]
 801695c:	613b      	str	r3, [r7, #16]
 801695e:	693b      	ldr	r3, [r7, #16]
 8016960:	789b      	ldrb	r3, [r3, #2]
 8016962:	78fa      	ldrb	r2, [r7, #3]
 8016964:	429a      	cmp	r2, r3
 8016966:	d008      	beq.n	801697a <USBD_GetEpDesc+0x64>
 8016968:	2300      	movs	r3, #0
 801696a:	613b      	str	r3, [r7, #16]
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	885b      	ldrh	r3, [r3, #2]
 8016970:	b29a      	uxth	r2, r3
 8016972:	897b      	ldrh	r3, [r7, #10]
 8016974:	429a      	cmp	r2, r3
 8016976:	d8e5      	bhi.n	8016944 <USBD_GetEpDesc+0x2e>
 8016978:	e000      	b.n	801697c <USBD_GetEpDesc+0x66>
 801697a:	bf00      	nop
 801697c:	693b      	ldr	r3, [r7, #16]
 801697e:	4618      	mov	r0, r3
 8016980:	3718      	adds	r7, #24
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}

08016986 <USBD_GetNextDesc>:
 8016986:	b480      	push	{r7}
 8016988:	b085      	sub	sp, #20
 801698a:	af00      	add	r7, sp, #0
 801698c:	6078      	str	r0, [r7, #4]
 801698e:	6039      	str	r1, [r7, #0]
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	60fb      	str	r3, [r7, #12]
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	881b      	ldrh	r3, [r3, #0]
 8016998:	68fa      	ldr	r2, [r7, #12]
 801699a:	7812      	ldrb	r2, [r2, #0]
 801699c:	4413      	add	r3, r2
 801699e:	b29a      	uxth	r2, r3
 80169a0:	683b      	ldr	r3, [r7, #0]
 80169a2:	801a      	strh	r2, [r3, #0]
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	781b      	ldrb	r3, [r3, #0]
 80169a8:	461a      	mov	r2, r3
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	4413      	add	r3, r2
 80169ae:	60fb      	str	r3, [r7, #12]
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	4618      	mov	r0, r3
 80169b4:	3714      	adds	r7, #20
 80169b6:	46bd      	mov	sp, r7
 80169b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169bc:	4770      	bx	lr

080169be <SWAPBYTE>:
 80169be:	b480      	push	{r7}
 80169c0:	b087      	sub	sp, #28
 80169c2:	af00      	add	r7, sp, #0
 80169c4:	6078      	str	r0, [r7, #4]
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	617b      	str	r3, [r7, #20]
 80169ca:	697b      	ldr	r3, [r7, #20]
 80169cc:	781b      	ldrb	r3, [r3, #0]
 80169ce:	827b      	strh	r3, [r7, #18]
 80169d0:	697b      	ldr	r3, [r7, #20]
 80169d2:	3301      	adds	r3, #1
 80169d4:	617b      	str	r3, [r7, #20]
 80169d6:	697b      	ldr	r3, [r7, #20]
 80169d8:	781b      	ldrb	r3, [r3, #0]
 80169da:	823b      	strh	r3, [r7, #16]
 80169dc:	8a3b      	ldrh	r3, [r7, #16]
 80169de:	021b      	lsls	r3, r3, #8
 80169e0:	b21a      	sxth	r2, r3
 80169e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80169e6:	4313      	orrs	r3, r2
 80169e8:	b21b      	sxth	r3, r3
 80169ea:	81fb      	strh	r3, [r7, #14]
 80169ec:	89fb      	ldrh	r3, [r7, #14]
 80169ee:	4618      	mov	r0, r3
 80169f0:	371c      	adds	r7, #28
 80169f2:	46bd      	mov	sp, r7
 80169f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f8:	4770      	bx	lr
	...

080169fc <USBD_StdDevReq>:
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b084      	sub	sp, #16
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
 8016a04:	6039      	str	r1, [r7, #0]
 8016a06:	2300      	movs	r3, #0
 8016a08:	73fb      	strb	r3, [r7, #15]
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	781b      	ldrb	r3, [r3, #0]
 8016a0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016a12:	2b40      	cmp	r3, #64	@ 0x40
 8016a14:	d005      	beq.n	8016a22 <USBD_StdDevReq+0x26>
 8016a16:	2b40      	cmp	r3, #64	@ 0x40
 8016a18:	d857      	bhi.n	8016aca <USBD_StdDevReq+0xce>
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d00f      	beq.n	8016a3e <USBD_StdDevReq+0x42>
 8016a1e:	2b20      	cmp	r3, #32
 8016a20:	d153      	bne.n	8016aca <USBD_StdDevReq+0xce>
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	32ae      	adds	r2, #174	@ 0xae
 8016a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a30:	689b      	ldr	r3, [r3, #8]
 8016a32:	6839      	ldr	r1, [r7, #0]
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	4798      	blx	r3
 8016a38:	4603      	mov	r3, r0
 8016a3a:	73fb      	strb	r3, [r7, #15]
 8016a3c:	e04a      	b.n	8016ad4 <USBD_StdDevReq+0xd8>
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	785b      	ldrb	r3, [r3, #1]
 8016a42:	2b09      	cmp	r3, #9
 8016a44:	d83b      	bhi.n	8016abe <USBD_StdDevReq+0xc2>
 8016a46:	a201      	add	r2, pc, #4	@ (adr r2, 8016a4c <USBD_StdDevReq+0x50>)
 8016a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a4c:	08016aa1 	.word	0x08016aa1
 8016a50:	08016ab5 	.word	0x08016ab5
 8016a54:	08016abf 	.word	0x08016abf
 8016a58:	08016aab 	.word	0x08016aab
 8016a5c:	08016abf 	.word	0x08016abf
 8016a60:	08016a7f 	.word	0x08016a7f
 8016a64:	08016a75 	.word	0x08016a75
 8016a68:	08016abf 	.word	0x08016abf
 8016a6c:	08016a97 	.word	0x08016a97
 8016a70:	08016a89 	.word	0x08016a89
 8016a74:	6839      	ldr	r1, [r7, #0]
 8016a76:	6878      	ldr	r0, [r7, #4]
 8016a78:	f000 fa3c 	bl	8016ef4 <USBD_GetDescriptor>
 8016a7c:	e024      	b.n	8016ac8 <USBD_StdDevReq+0xcc>
 8016a7e:	6839      	ldr	r1, [r7, #0]
 8016a80:	6878      	ldr	r0, [r7, #4]
 8016a82:	f000 fbcb 	bl	801721c <USBD_SetAddress>
 8016a86:	e01f      	b.n	8016ac8 <USBD_StdDevReq+0xcc>
 8016a88:	6839      	ldr	r1, [r7, #0]
 8016a8a:	6878      	ldr	r0, [r7, #4]
 8016a8c:	f000 fc0a 	bl	80172a4 <USBD_SetConfig>
 8016a90:	4603      	mov	r3, r0
 8016a92:	73fb      	strb	r3, [r7, #15]
 8016a94:	e018      	b.n	8016ac8 <USBD_StdDevReq+0xcc>
 8016a96:	6839      	ldr	r1, [r7, #0]
 8016a98:	6878      	ldr	r0, [r7, #4]
 8016a9a:	f000 fcad 	bl	80173f8 <USBD_GetConfig>
 8016a9e:	e013      	b.n	8016ac8 <USBD_StdDevReq+0xcc>
 8016aa0:	6839      	ldr	r1, [r7, #0]
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	f000 fcde 	bl	8017464 <USBD_GetStatus>
 8016aa8:	e00e      	b.n	8016ac8 <USBD_StdDevReq+0xcc>
 8016aaa:	6839      	ldr	r1, [r7, #0]
 8016aac:	6878      	ldr	r0, [r7, #4]
 8016aae:	f000 fd0d 	bl	80174cc <USBD_SetFeature>
 8016ab2:	e009      	b.n	8016ac8 <USBD_StdDevReq+0xcc>
 8016ab4:	6839      	ldr	r1, [r7, #0]
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f000 fd31 	bl	801751e <USBD_ClrFeature>
 8016abc:	e004      	b.n	8016ac8 <USBD_StdDevReq+0xcc>
 8016abe:	6839      	ldr	r1, [r7, #0]
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f000 fd88 	bl	80175d6 <USBD_CtlError>
 8016ac6:	bf00      	nop
 8016ac8:	e004      	b.n	8016ad4 <USBD_StdDevReq+0xd8>
 8016aca:	6839      	ldr	r1, [r7, #0]
 8016acc:	6878      	ldr	r0, [r7, #4]
 8016ace:	f000 fd82 	bl	80175d6 <USBD_CtlError>
 8016ad2:	bf00      	nop
 8016ad4:	7bfb      	ldrb	r3, [r7, #15]
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3710      	adds	r7, #16
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop

08016ae0 <USBD_StdItfReq>:
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b084      	sub	sp, #16
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
 8016ae8:	6039      	str	r1, [r7, #0]
 8016aea:	2300      	movs	r3, #0
 8016aec:	73fb      	strb	r3, [r7, #15]
 8016aee:	683b      	ldr	r3, [r7, #0]
 8016af0:	781b      	ldrb	r3, [r3, #0]
 8016af2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016af6:	2b40      	cmp	r3, #64	@ 0x40
 8016af8:	d005      	beq.n	8016b06 <USBD_StdItfReq+0x26>
 8016afa:	2b40      	cmp	r3, #64	@ 0x40
 8016afc:	d852      	bhi.n	8016ba4 <USBD_StdItfReq+0xc4>
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d001      	beq.n	8016b06 <USBD_StdItfReq+0x26>
 8016b02:	2b20      	cmp	r3, #32
 8016b04:	d14e      	bne.n	8016ba4 <USBD_StdItfReq+0xc4>
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b0c:	b2db      	uxtb	r3, r3
 8016b0e:	3b01      	subs	r3, #1
 8016b10:	2b02      	cmp	r3, #2
 8016b12:	d840      	bhi.n	8016b96 <USBD_StdItfReq+0xb6>
 8016b14:	683b      	ldr	r3, [r7, #0]
 8016b16:	889b      	ldrh	r3, [r3, #4]
 8016b18:	b2db      	uxtb	r3, r3
 8016b1a:	2b01      	cmp	r3, #1
 8016b1c:	d836      	bhi.n	8016b8c <USBD_StdItfReq+0xac>
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	889b      	ldrh	r3, [r3, #4]
 8016b22:	b2db      	uxtb	r3, r3
 8016b24:	4619      	mov	r1, r3
 8016b26:	6878      	ldr	r0, [r7, #4]
 8016b28:	f7ff fedb 	bl	80168e2 <USBD_CoreFindIF>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	73bb      	strb	r3, [r7, #14]
 8016b30:	7bbb      	ldrb	r3, [r7, #14]
 8016b32:	2bff      	cmp	r3, #255	@ 0xff
 8016b34:	d01d      	beq.n	8016b72 <USBD_StdItfReq+0x92>
 8016b36:	7bbb      	ldrb	r3, [r7, #14]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d11a      	bne.n	8016b72 <USBD_StdItfReq+0x92>
 8016b3c:	7bba      	ldrb	r2, [r7, #14]
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	32ae      	adds	r2, #174	@ 0xae
 8016b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b46:	689b      	ldr	r3, [r3, #8]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d00f      	beq.n	8016b6c <USBD_StdItfReq+0x8c>
 8016b4c:	7bba      	ldrb	r2, [r7, #14]
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 8016b54:	7bba      	ldrb	r2, [r7, #14]
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	32ae      	adds	r2, #174	@ 0xae
 8016b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b5e:	689b      	ldr	r3, [r3, #8]
 8016b60:	6839      	ldr	r1, [r7, #0]
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	4798      	blx	r3
 8016b66:	4603      	mov	r3, r0
 8016b68:	73fb      	strb	r3, [r7, #15]
 8016b6a:	e004      	b.n	8016b76 <USBD_StdItfReq+0x96>
 8016b6c:	2303      	movs	r3, #3
 8016b6e:	73fb      	strb	r3, [r7, #15]
 8016b70:	e001      	b.n	8016b76 <USBD_StdItfReq+0x96>
 8016b72:	2303      	movs	r3, #3
 8016b74:	73fb      	strb	r3, [r7, #15]
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	88db      	ldrh	r3, [r3, #6]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d110      	bne.n	8016ba0 <USBD_StdItfReq+0xc0>
 8016b7e:	7bfb      	ldrb	r3, [r7, #15]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d10d      	bne.n	8016ba0 <USBD_StdItfReq+0xc0>
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f000 fdfd 	bl	8017784 <USBD_CtlSendStatus>
 8016b8a:	e009      	b.n	8016ba0 <USBD_StdItfReq+0xc0>
 8016b8c:	6839      	ldr	r1, [r7, #0]
 8016b8e:	6878      	ldr	r0, [r7, #4]
 8016b90:	f000 fd21 	bl	80175d6 <USBD_CtlError>
 8016b94:	e004      	b.n	8016ba0 <USBD_StdItfReq+0xc0>
 8016b96:	6839      	ldr	r1, [r7, #0]
 8016b98:	6878      	ldr	r0, [r7, #4]
 8016b9a:	f000 fd1c 	bl	80175d6 <USBD_CtlError>
 8016b9e:	e000      	b.n	8016ba2 <USBD_StdItfReq+0xc2>
 8016ba0:	bf00      	nop
 8016ba2:	e004      	b.n	8016bae <USBD_StdItfReq+0xce>
 8016ba4:	6839      	ldr	r1, [r7, #0]
 8016ba6:	6878      	ldr	r0, [r7, #4]
 8016ba8:	f000 fd15 	bl	80175d6 <USBD_CtlError>
 8016bac:	bf00      	nop
 8016bae:	7bfb      	ldrb	r3, [r7, #15]
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	3710      	adds	r7, #16
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	bd80      	pop	{r7, pc}

08016bb8 <USBD_StdEPReq>:
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b084      	sub	sp, #16
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
 8016bc0:	6039      	str	r1, [r7, #0]
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	73fb      	strb	r3, [r7, #15]
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	889b      	ldrh	r3, [r3, #4]
 8016bca:	73bb      	strb	r3, [r7, #14]
 8016bcc:	683b      	ldr	r3, [r7, #0]
 8016bce:	781b      	ldrb	r3, [r3, #0]
 8016bd0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016bd4:	2b40      	cmp	r3, #64	@ 0x40
 8016bd6:	d007      	beq.n	8016be8 <USBD_StdEPReq+0x30>
 8016bd8:	2b40      	cmp	r3, #64	@ 0x40
 8016bda:	f200 817f 	bhi.w	8016edc <USBD_StdEPReq+0x324>
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d02a      	beq.n	8016c38 <USBD_StdEPReq+0x80>
 8016be2:	2b20      	cmp	r3, #32
 8016be4:	f040 817a 	bne.w	8016edc <USBD_StdEPReq+0x324>
 8016be8:	7bbb      	ldrb	r3, [r7, #14]
 8016bea:	4619      	mov	r1, r3
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f7ff fe85 	bl	80168fc <USBD_CoreFindEP>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	737b      	strb	r3, [r7, #13]
 8016bf6:	7b7b      	ldrb	r3, [r7, #13]
 8016bf8:	2bff      	cmp	r3, #255	@ 0xff
 8016bfa:	f000 8174 	beq.w	8016ee6 <USBD_StdEPReq+0x32e>
 8016bfe:	7b7b      	ldrb	r3, [r7, #13]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	f040 8170 	bne.w	8016ee6 <USBD_StdEPReq+0x32e>
 8016c06:	7b7a      	ldrb	r2, [r7, #13]
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 8016c0e:	7b7a      	ldrb	r2, [r7, #13]
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	32ae      	adds	r2, #174	@ 0xae
 8016c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c18:	689b      	ldr	r3, [r3, #8]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	f000 8163 	beq.w	8016ee6 <USBD_StdEPReq+0x32e>
 8016c20:	7b7a      	ldrb	r2, [r7, #13]
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	32ae      	adds	r2, #174	@ 0xae
 8016c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c2a:	689b      	ldr	r3, [r3, #8]
 8016c2c:	6839      	ldr	r1, [r7, #0]
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	4798      	blx	r3
 8016c32:	4603      	mov	r3, r0
 8016c34:	73fb      	strb	r3, [r7, #15]
 8016c36:	e156      	b.n	8016ee6 <USBD_StdEPReq+0x32e>
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	785b      	ldrb	r3, [r3, #1]
 8016c3c:	2b03      	cmp	r3, #3
 8016c3e:	d008      	beq.n	8016c52 <USBD_StdEPReq+0x9a>
 8016c40:	2b03      	cmp	r3, #3
 8016c42:	f300 8145 	bgt.w	8016ed0 <USBD_StdEPReq+0x318>
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	f000 809b 	beq.w	8016d82 <USBD_StdEPReq+0x1ca>
 8016c4c:	2b01      	cmp	r3, #1
 8016c4e:	d03c      	beq.n	8016cca <USBD_StdEPReq+0x112>
 8016c50:	e13e      	b.n	8016ed0 <USBD_StdEPReq+0x318>
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c58:	b2db      	uxtb	r3, r3
 8016c5a:	2b02      	cmp	r3, #2
 8016c5c:	d002      	beq.n	8016c64 <USBD_StdEPReq+0xac>
 8016c5e:	2b03      	cmp	r3, #3
 8016c60:	d016      	beq.n	8016c90 <USBD_StdEPReq+0xd8>
 8016c62:	e02c      	b.n	8016cbe <USBD_StdEPReq+0x106>
 8016c64:	7bbb      	ldrb	r3, [r7, #14]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d00d      	beq.n	8016c86 <USBD_StdEPReq+0xce>
 8016c6a:	7bbb      	ldrb	r3, [r7, #14]
 8016c6c:	2b80      	cmp	r3, #128	@ 0x80
 8016c6e:	d00a      	beq.n	8016c86 <USBD_StdEPReq+0xce>
 8016c70:	7bbb      	ldrb	r3, [r7, #14]
 8016c72:	4619      	mov	r1, r3
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f001 f9a5 	bl	8017fc4 <USBD_LL_StallEP>
 8016c7a:	2180      	movs	r1, #128	@ 0x80
 8016c7c:	6878      	ldr	r0, [r7, #4]
 8016c7e:	f001 f9a1 	bl	8017fc4 <USBD_LL_StallEP>
 8016c82:	bf00      	nop
 8016c84:	e020      	b.n	8016cc8 <USBD_StdEPReq+0x110>
 8016c86:	6839      	ldr	r1, [r7, #0]
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f000 fca4 	bl	80175d6 <USBD_CtlError>
 8016c8e:	e01b      	b.n	8016cc8 <USBD_StdEPReq+0x110>
 8016c90:	683b      	ldr	r3, [r7, #0]
 8016c92:	885b      	ldrh	r3, [r3, #2]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d10e      	bne.n	8016cb6 <USBD_StdEPReq+0xfe>
 8016c98:	7bbb      	ldrb	r3, [r7, #14]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d00b      	beq.n	8016cb6 <USBD_StdEPReq+0xfe>
 8016c9e:	7bbb      	ldrb	r3, [r7, #14]
 8016ca0:	2b80      	cmp	r3, #128	@ 0x80
 8016ca2:	d008      	beq.n	8016cb6 <USBD_StdEPReq+0xfe>
 8016ca4:	683b      	ldr	r3, [r7, #0]
 8016ca6:	88db      	ldrh	r3, [r3, #6]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d104      	bne.n	8016cb6 <USBD_StdEPReq+0xfe>
 8016cac:	7bbb      	ldrb	r3, [r7, #14]
 8016cae:	4619      	mov	r1, r3
 8016cb0:	6878      	ldr	r0, [r7, #4]
 8016cb2:	f001 f987 	bl	8017fc4 <USBD_LL_StallEP>
 8016cb6:	6878      	ldr	r0, [r7, #4]
 8016cb8:	f000 fd64 	bl	8017784 <USBD_CtlSendStatus>
 8016cbc:	e004      	b.n	8016cc8 <USBD_StdEPReq+0x110>
 8016cbe:	6839      	ldr	r1, [r7, #0]
 8016cc0:	6878      	ldr	r0, [r7, #4]
 8016cc2:	f000 fc88 	bl	80175d6 <USBD_CtlError>
 8016cc6:	bf00      	nop
 8016cc8:	e107      	b.n	8016eda <USBD_StdEPReq+0x322>
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016cd0:	b2db      	uxtb	r3, r3
 8016cd2:	2b02      	cmp	r3, #2
 8016cd4:	d002      	beq.n	8016cdc <USBD_StdEPReq+0x124>
 8016cd6:	2b03      	cmp	r3, #3
 8016cd8:	d016      	beq.n	8016d08 <USBD_StdEPReq+0x150>
 8016cda:	e04b      	b.n	8016d74 <USBD_StdEPReq+0x1bc>
 8016cdc:	7bbb      	ldrb	r3, [r7, #14]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d00d      	beq.n	8016cfe <USBD_StdEPReq+0x146>
 8016ce2:	7bbb      	ldrb	r3, [r7, #14]
 8016ce4:	2b80      	cmp	r3, #128	@ 0x80
 8016ce6:	d00a      	beq.n	8016cfe <USBD_StdEPReq+0x146>
 8016ce8:	7bbb      	ldrb	r3, [r7, #14]
 8016cea:	4619      	mov	r1, r3
 8016cec:	6878      	ldr	r0, [r7, #4]
 8016cee:	f001 f969 	bl	8017fc4 <USBD_LL_StallEP>
 8016cf2:	2180      	movs	r1, #128	@ 0x80
 8016cf4:	6878      	ldr	r0, [r7, #4]
 8016cf6:	f001 f965 	bl	8017fc4 <USBD_LL_StallEP>
 8016cfa:	bf00      	nop
 8016cfc:	e040      	b.n	8016d80 <USBD_StdEPReq+0x1c8>
 8016cfe:	6839      	ldr	r1, [r7, #0]
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	f000 fc68 	bl	80175d6 <USBD_CtlError>
 8016d06:	e03b      	b.n	8016d80 <USBD_StdEPReq+0x1c8>
 8016d08:	683b      	ldr	r3, [r7, #0]
 8016d0a:	885b      	ldrh	r3, [r3, #2]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d136      	bne.n	8016d7e <USBD_StdEPReq+0x1c6>
 8016d10:	7bbb      	ldrb	r3, [r7, #14]
 8016d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d004      	beq.n	8016d24 <USBD_StdEPReq+0x16c>
 8016d1a:	7bbb      	ldrb	r3, [r7, #14]
 8016d1c:	4619      	mov	r1, r3
 8016d1e:	6878      	ldr	r0, [r7, #4]
 8016d20:	f001 f96f 	bl	8018002 <USBD_LL_ClearStallEP>
 8016d24:	6878      	ldr	r0, [r7, #4]
 8016d26:	f000 fd2d 	bl	8017784 <USBD_CtlSendStatus>
 8016d2a:	7bbb      	ldrb	r3, [r7, #14]
 8016d2c:	4619      	mov	r1, r3
 8016d2e:	6878      	ldr	r0, [r7, #4]
 8016d30:	f7ff fde4 	bl	80168fc <USBD_CoreFindEP>
 8016d34:	4603      	mov	r3, r0
 8016d36:	737b      	strb	r3, [r7, #13]
 8016d38:	7b7b      	ldrb	r3, [r7, #13]
 8016d3a:	2bff      	cmp	r3, #255	@ 0xff
 8016d3c:	d01f      	beq.n	8016d7e <USBD_StdEPReq+0x1c6>
 8016d3e:	7b7b      	ldrb	r3, [r7, #13]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d11c      	bne.n	8016d7e <USBD_StdEPReq+0x1c6>
 8016d44:	7b7a      	ldrb	r2, [r7, #13]
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
 8016d4c:	7b7a      	ldrb	r2, [r7, #13]
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	32ae      	adds	r2, #174	@ 0xae
 8016d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d56:	689b      	ldr	r3, [r3, #8]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d010      	beq.n	8016d7e <USBD_StdEPReq+0x1c6>
 8016d5c:	7b7a      	ldrb	r2, [r7, #13]
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	32ae      	adds	r2, #174	@ 0xae
 8016d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d66:	689b      	ldr	r3, [r3, #8]
 8016d68:	6839      	ldr	r1, [r7, #0]
 8016d6a:	6878      	ldr	r0, [r7, #4]
 8016d6c:	4798      	blx	r3
 8016d6e:	4603      	mov	r3, r0
 8016d70:	73fb      	strb	r3, [r7, #15]
 8016d72:	e004      	b.n	8016d7e <USBD_StdEPReq+0x1c6>
 8016d74:	6839      	ldr	r1, [r7, #0]
 8016d76:	6878      	ldr	r0, [r7, #4]
 8016d78:	f000 fc2d 	bl	80175d6 <USBD_CtlError>
 8016d7c:	e000      	b.n	8016d80 <USBD_StdEPReq+0x1c8>
 8016d7e:	bf00      	nop
 8016d80:	e0ab      	b.n	8016eda <USBD_StdEPReq+0x322>
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d88:	b2db      	uxtb	r3, r3
 8016d8a:	2b02      	cmp	r3, #2
 8016d8c:	d002      	beq.n	8016d94 <USBD_StdEPReq+0x1dc>
 8016d8e:	2b03      	cmp	r3, #3
 8016d90:	d032      	beq.n	8016df8 <USBD_StdEPReq+0x240>
 8016d92:	e097      	b.n	8016ec4 <USBD_StdEPReq+0x30c>
 8016d94:	7bbb      	ldrb	r3, [r7, #14]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d007      	beq.n	8016daa <USBD_StdEPReq+0x1f2>
 8016d9a:	7bbb      	ldrb	r3, [r7, #14]
 8016d9c:	2b80      	cmp	r3, #128	@ 0x80
 8016d9e:	d004      	beq.n	8016daa <USBD_StdEPReq+0x1f2>
 8016da0:	6839      	ldr	r1, [r7, #0]
 8016da2:	6878      	ldr	r0, [r7, #4]
 8016da4:	f000 fc17 	bl	80175d6 <USBD_CtlError>
 8016da8:	e091      	b.n	8016ece <USBD_StdEPReq+0x316>
 8016daa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	da0b      	bge.n	8016dca <USBD_StdEPReq+0x212>
 8016db2:	7bbb      	ldrb	r3, [r7, #14]
 8016db4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016db8:	4613      	mov	r3, r2
 8016dba:	009b      	lsls	r3, r3, #2
 8016dbc:	4413      	add	r3, r2
 8016dbe:	009b      	lsls	r3, r3, #2
 8016dc0:	3310      	adds	r3, #16
 8016dc2:	687a      	ldr	r2, [r7, #4]
 8016dc4:	4413      	add	r3, r2
 8016dc6:	3304      	adds	r3, #4
 8016dc8:	e00b      	b.n	8016de2 <USBD_StdEPReq+0x22a>
 8016dca:	7bbb      	ldrb	r3, [r7, #14]
 8016dcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016dd0:	4613      	mov	r3, r2
 8016dd2:	009b      	lsls	r3, r3, #2
 8016dd4:	4413      	add	r3, r2
 8016dd6:	009b      	lsls	r3, r3, #2
 8016dd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016ddc:	687a      	ldr	r2, [r7, #4]
 8016dde:	4413      	add	r3, r2
 8016de0:	3304      	adds	r3, #4
 8016de2:	60bb      	str	r3, [r7, #8]
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	2200      	movs	r2, #0
 8016de8:	601a      	str	r2, [r3, #0]
 8016dea:	68bb      	ldr	r3, [r7, #8]
 8016dec:	2202      	movs	r2, #2
 8016dee:	4619      	mov	r1, r3
 8016df0:	6878      	ldr	r0, [r7, #4]
 8016df2:	f000 fc6d 	bl	80176d0 <USBD_CtlSendData>
 8016df6:	e06a      	b.n	8016ece <USBD_StdEPReq+0x316>
 8016df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	da11      	bge.n	8016e24 <USBD_StdEPReq+0x26c>
 8016e00:	7bbb      	ldrb	r3, [r7, #14]
 8016e02:	f003 020f 	and.w	r2, r3, #15
 8016e06:	6879      	ldr	r1, [r7, #4]
 8016e08:	4613      	mov	r3, r2
 8016e0a:	009b      	lsls	r3, r3, #2
 8016e0c:	4413      	add	r3, r2
 8016e0e:	009b      	lsls	r3, r3, #2
 8016e10:	440b      	add	r3, r1
 8016e12:	3324      	adds	r3, #36	@ 0x24
 8016e14:	881b      	ldrh	r3, [r3, #0]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d117      	bne.n	8016e4a <USBD_StdEPReq+0x292>
 8016e1a:	6839      	ldr	r1, [r7, #0]
 8016e1c:	6878      	ldr	r0, [r7, #4]
 8016e1e:	f000 fbda 	bl	80175d6 <USBD_CtlError>
 8016e22:	e054      	b.n	8016ece <USBD_StdEPReq+0x316>
 8016e24:	7bbb      	ldrb	r3, [r7, #14]
 8016e26:	f003 020f 	and.w	r2, r3, #15
 8016e2a:	6879      	ldr	r1, [r7, #4]
 8016e2c:	4613      	mov	r3, r2
 8016e2e:	009b      	lsls	r3, r3, #2
 8016e30:	4413      	add	r3, r2
 8016e32:	009b      	lsls	r3, r3, #2
 8016e34:	440b      	add	r3, r1
 8016e36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016e3a:	881b      	ldrh	r3, [r3, #0]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d104      	bne.n	8016e4a <USBD_StdEPReq+0x292>
 8016e40:	6839      	ldr	r1, [r7, #0]
 8016e42:	6878      	ldr	r0, [r7, #4]
 8016e44:	f000 fbc7 	bl	80175d6 <USBD_CtlError>
 8016e48:	e041      	b.n	8016ece <USBD_StdEPReq+0x316>
 8016e4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	da0b      	bge.n	8016e6a <USBD_StdEPReq+0x2b2>
 8016e52:	7bbb      	ldrb	r3, [r7, #14]
 8016e54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016e58:	4613      	mov	r3, r2
 8016e5a:	009b      	lsls	r3, r3, #2
 8016e5c:	4413      	add	r3, r2
 8016e5e:	009b      	lsls	r3, r3, #2
 8016e60:	3310      	adds	r3, #16
 8016e62:	687a      	ldr	r2, [r7, #4]
 8016e64:	4413      	add	r3, r2
 8016e66:	3304      	adds	r3, #4
 8016e68:	e00b      	b.n	8016e82 <USBD_StdEPReq+0x2ca>
 8016e6a:	7bbb      	ldrb	r3, [r7, #14]
 8016e6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016e70:	4613      	mov	r3, r2
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	4413      	add	r3, r2
 8016e76:	009b      	lsls	r3, r3, #2
 8016e78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016e7c:	687a      	ldr	r2, [r7, #4]
 8016e7e:	4413      	add	r3, r2
 8016e80:	3304      	adds	r3, #4
 8016e82:	60bb      	str	r3, [r7, #8]
 8016e84:	7bbb      	ldrb	r3, [r7, #14]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d002      	beq.n	8016e90 <USBD_StdEPReq+0x2d8>
 8016e8a:	7bbb      	ldrb	r3, [r7, #14]
 8016e8c:	2b80      	cmp	r3, #128	@ 0x80
 8016e8e:	d103      	bne.n	8016e98 <USBD_StdEPReq+0x2e0>
 8016e90:	68bb      	ldr	r3, [r7, #8]
 8016e92:	2200      	movs	r2, #0
 8016e94:	601a      	str	r2, [r3, #0]
 8016e96:	e00e      	b.n	8016eb6 <USBD_StdEPReq+0x2fe>
 8016e98:	7bbb      	ldrb	r3, [r7, #14]
 8016e9a:	4619      	mov	r1, r3
 8016e9c:	6878      	ldr	r0, [r7, #4]
 8016e9e:	f001 f8cf 	bl	8018040 <USBD_LL_IsStallEP>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d003      	beq.n	8016eb0 <USBD_StdEPReq+0x2f8>
 8016ea8:	68bb      	ldr	r3, [r7, #8]
 8016eaa:	2201      	movs	r2, #1
 8016eac:	601a      	str	r2, [r3, #0]
 8016eae:	e002      	b.n	8016eb6 <USBD_StdEPReq+0x2fe>
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	601a      	str	r2, [r3, #0]
 8016eb6:	68bb      	ldr	r3, [r7, #8]
 8016eb8:	2202      	movs	r2, #2
 8016eba:	4619      	mov	r1, r3
 8016ebc:	6878      	ldr	r0, [r7, #4]
 8016ebe:	f000 fc07 	bl	80176d0 <USBD_CtlSendData>
 8016ec2:	e004      	b.n	8016ece <USBD_StdEPReq+0x316>
 8016ec4:	6839      	ldr	r1, [r7, #0]
 8016ec6:	6878      	ldr	r0, [r7, #4]
 8016ec8:	f000 fb85 	bl	80175d6 <USBD_CtlError>
 8016ecc:	bf00      	nop
 8016ece:	e004      	b.n	8016eda <USBD_StdEPReq+0x322>
 8016ed0:	6839      	ldr	r1, [r7, #0]
 8016ed2:	6878      	ldr	r0, [r7, #4]
 8016ed4:	f000 fb7f 	bl	80175d6 <USBD_CtlError>
 8016ed8:	bf00      	nop
 8016eda:	e005      	b.n	8016ee8 <USBD_StdEPReq+0x330>
 8016edc:	6839      	ldr	r1, [r7, #0]
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f000 fb79 	bl	80175d6 <USBD_CtlError>
 8016ee4:	e000      	b.n	8016ee8 <USBD_StdEPReq+0x330>
 8016ee6:	bf00      	nop
 8016ee8:	7bfb      	ldrb	r3, [r7, #15]
 8016eea:	4618      	mov	r0, r3
 8016eec:	3710      	adds	r7, #16
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	bd80      	pop	{r7, pc}
	...

08016ef4 <USBD_GetDescriptor>:
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b084      	sub	sp, #16
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
 8016efc:	6039      	str	r1, [r7, #0]
 8016efe:	2300      	movs	r3, #0
 8016f00:	813b      	strh	r3, [r7, #8]
 8016f02:	2300      	movs	r3, #0
 8016f04:	60fb      	str	r3, [r7, #12]
 8016f06:	2300      	movs	r3, #0
 8016f08:	72fb      	strb	r3, [r7, #11]
 8016f0a:	683b      	ldr	r3, [r7, #0]
 8016f0c:	885b      	ldrh	r3, [r3, #2]
 8016f0e:	0a1b      	lsrs	r3, r3, #8
 8016f10:	b29b      	uxth	r3, r3
 8016f12:	3b01      	subs	r3, #1
 8016f14:	2b0e      	cmp	r3, #14
 8016f16:	f200 8152 	bhi.w	80171be <USBD_GetDescriptor+0x2ca>
 8016f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8016f20 <USBD_GetDescriptor+0x2c>)
 8016f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f20:	08016f91 	.word	0x08016f91
 8016f24:	08016fa9 	.word	0x08016fa9
 8016f28:	08016fe9 	.word	0x08016fe9
 8016f2c:	080171bf 	.word	0x080171bf
 8016f30:	080171bf 	.word	0x080171bf
 8016f34:	0801715f 	.word	0x0801715f
 8016f38:	0801718b 	.word	0x0801718b
 8016f3c:	080171bf 	.word	0x080171bf
 8016f40:	080171bf 	.word	0x080171bf
 8016f44:	080171bf 	.word	0x080171bf
 8016f48:	080171bf 	.word	0x080171bf
 8016f4c:	080171bf 	.word	0x080171bf
 8016f50:	080171bf 	.word	0x080171bf
 8016f54:	080171bf 	.word	0x080171bf
 8016f58:	08016f5d 	.word	0x08016f5d
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f62:	69db      	ldr	r3, [r3, #28]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d00b      	beq.n	8016f80 <USBD_GetDescriptor+0x8c>
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f6e:	69db      	ldr	r3, [r3, #28]
 8016f70:	687a      	ldr	r2, [r7, #4]
 8016f72:	7c12      	ldrb	r2, [r2, #16]
 8016f74:	f107 0108 	add.w	r1, r7, #8
 8016f78:	4610      	mov	r0, r2
 8016f7a:	4798      	blx	r3
 8016f7c:	60f8      	str	r0, [r7, #12]
 8016f7e:	e126      	b.n	80171ce <USBD_GetDescriptor+0x2da>
 8016f80:	6839      	ldr	r1, [r7, #0]
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f000 fb27 	bl	80175d6 <USBD_CtlError>
 8016f88:	7afb      	ldrb	r3, [r7, #11]
 8016f8a:	3301      	adds	r3, #1
 8016f8c:	72fb      	strb	r3, [r7, #11]
 8016f8e:	e11e      	b.n	80171ce <USBD_GetDescriptor+0x2da>
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	687a      	ldr	r2, [r7, #4]
 8016f9a:	7c12      	ldrb	r2, [r2, #16]
 8016f9c:	f107 0108 	add.w	r1, r7, #8
 8016fa0:	4610      	mov	r0, r2
 8016fa2:	4798      	blx	r3
 8016fa4:	60f8      	str	r0, [r7, #12]
 8016fa6:	e112      	b.n	80171ce <USBD_GetDescriptor+0x2da>
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	7c1b      	ldrb	r3, [r3, #16]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d10d      	bne.n	8016fcc <USBD_GetDescriptor+0xd8>
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fb8:	f107 0208 	add.w	r2, r7, #8
 8016fbc:	4610      	mov	r0, r2
 8016fbe:	4798      	blx	r3
 8016fc0:	60f8      	str	r0, [r7, #12]
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	3301      	adds	r3, #1
 8016fc6:	2202      	movs	r2, #2
 8016fc8:	701a      	strb	r2, [r3, #0]
 8016fca:	e100      	b.n	80171ce <USBD_GetDescriptor+0x2da>
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016fd4:	f107 0208 	add.w	r2, r7, #8
 8016fd8:	4610      	mov	r0, r2
 8016fda:	4798      	blx	r3
 8016fdc:	60f8      	str	r0, [r7, #12]
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	3301      	adds	r3, #1
 8016fe2:	2202      	movs	r2, #2
 8016fe4:	701a      	strb	r2, [r3, #0]
 8016fe6:	e0f2      	b.n	80171ce <USBD_GetDescriptor+0x2da>
 8016fe8:	683b      	ldr	r3, [r7, #0]
 8016fea:	885b      	ldrh	r3, [r3, #2]
 8016fec:	b2db      	uxtb	r3, r3
 8016fee:	2b05      	cmp	r3, #5
 8016ff0:	f200 80ac 	bhi.w	801714c <USBD_GetDescriptor+0x258>
 8016ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8016ffc <USBD_GetDescriptor+0x108>)
 8016ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ffa:	bf00      	nop
 8016ffc:	08017015 	.word	0x08017015
 8017000:	08017049 	.word	0x08017049
 8017004:	0801707d 	.word	0x0801707d
 8017008:	080170b1 	.word	0x080170b1
 801700c:	080170e5 	.word	0x080170e5
 8017010:	08017119 	.word	0x08017119
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801701a:	685b      	ldr	r3, [r3, #4]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d00b      	beq.n	8017038 <USBD_GetDescriptor+0x144>
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017026:	685b      	ldr	r3, [r3, #4]
 8017028:	687a      	ldr	r2, [r7, #4]
 801702a:	7c12      	ldrb	r2, [r2, #16]
 801702c:	f107 0108 	add.w	r1, r7, #8
 8017030:	4610      	mov	r0, r2
 8017032:	4798      	blx	r3
 8017034:	60f8      	str	r0, [r7, #12]
 8017036:	e091      	b.n	801715c <USBD_GetDescriptor+0x268>
 8017038:	6839      	ldr	r1, [r7, #0]
 801703a:	6878      	ldr	r0, [r7, #4]
 801703c:	f000 facb 	bl	80175d6 <USBD_CtlError>
 8017040:	7afb      	ldrb	r3, [r7, #11]
 8017042:	3301      	adds	r3, #1
 8017044:	72fb      	strb	r3, [r7, #11]
 8017046:	e089      	b.n	801715c <USBD_GetDescriptor+0x268>
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801704e:	689b      	ldr	r3, [r3, #8]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d00b      	beq.n	801706c <USBD_GetDescriptor+0x178>
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801705a:	689b      	ldr	r3, [r3, #8]
 801705c:	687a      	ldr	r2, [r7, #4]
 801705e:	7c12      	ldrb	r2, [r2, #16]
 8017060:	f107 0108 	add.w	r1, r7, #8
 8017064:	4610      	mov	r0, r2
 8017066:	4798      	blx	r3
 8017068:	60f8      	str	r0, [r7, #12]
 801706a:	e077      	b.n	801715c <USBD_GetDescriptor+0x268>
 801706c:	6839      	ldr	r1, [r7, #0]
 801706e:	6878      	ldr	r0, [r7, #4]
 8017070:	f000 fab1 	bl	80175d6 <USBD_CtlError>
 8017074:	7afb      	ldrb	r3, [r7, #11]
 8017076:	3301      	adds	r3, #1
 8017078:	72fb      	strb	r3, [r7, #11]
 801707a:	e06f      	b.n	801715c <USBD_GetDescriptor+0x268>
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017082:	68db      	ldr	r3, [r3, #12]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d00b      	beq.n	80170a0 <USBD_GetDescriptor+0x1ac>
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801708e:	68db      	ldr	r3, [r3, #12]
 8017090:	687a      	ldr	r2, [r7, #4]
 8017092:	7c12      	ldrb	r2, [r2, #16]
 8017094:	f107 0108 	add.w	r1, r7, #8
 8017098:	4610      	mov	r0, r2
 801709a:	4798      	blx	r3
 801709c:	60f8      	str	r0, [r7, #12]
 801709e:	e05d      	b.n	801715c <USBD_GetDescriptor+0x268>
 80170a0:	6839      	ldr	r1, [r7, #0]
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	f000 fa97 	bl	80175d6 <USBD_CtlError>
 80170a8:	7afb      	ldrb	r3, [r7, #11]
 80170aa:	3301      	adds	r3, #1
 80170ac:	72fb      	strb	r3, [r7, #11]
 80170ae:	e055      	b.n	801715c <USBD_GetDescriptor+0x268>
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170b6:	691b      	ldr	r3, [r3, #16]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d00b      	beq.n	80170d4 <USBD_GetDescriptor+0x1e0>
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170c2:	691b      	ldr	r3, [r3, #16]
 80170c4:	687a      	ldr	r2, [r7, #4]
 80170c6:	7c12      	ldrb	r2, [r2, #16]
 80170c8:	f107 0108 	add.w	r1, r7, #8
 80170cc:	4610      	mov	r0, r2
 80170ce:	4798      	blx	r3
 80170d0:	60f8      	str	r0, [r7, #12]
 80170d2:	e043      	b.n	801715c <USBD_GetDescriptor+0x268>
 80170d4:	6839      	ldr	r1, [r7, #0]
 80170d6:	6878      	ldr	r0, [r7, #4]
 80170d8:	f000 fa7d 	bl	80175d6 <USBD_CtlError>
 80170dc:	7afb      	ldrb	r3, [r7, #11]
 80170de:	3301      	adds	r3, #1
 80170e0:	72fb      	strb	r3, [r7, #11]
 80170e2:	e03b      	b.n	801715c <USBD_GetDescriptor+0x268>
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170ea:	695b      	ldr	r3, [r3, #20]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d00b      	beq.n	8017108 <USBD_GetDescriptor+0x214>
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170f6:	695b      	ldr	r3, [r3, #20]
 80170f8:	687a      	ldr	r2, [r7, #4]
 80170fa:	7c12      	ldrb	r2, [r2, #16]
 80170fc:	f107 0108 	add.w	r1, r7, #8
 8017100:	4610      	mov	r0, r2
 8017102:	4798      	blx	r3
 8017104:	60f8      	str	r0, [r7, #12]
 8017106:	e029      	b.n	801715c <USBD_GetDescriptor+0x268>
 8017108:	6839      	ldr	r1, [r7, #0]
 801710a:	6878      	ldr	r0, [r7, #4]
 801710c:	f000 fa63 	bl	80175d6 <USBD_CtlError>
 8017110:	7afb      	ldrb	r3, [r7, #11]
 8017112:	3301      	adds	r3, #1
 8017114:	72fb      	strb	r3, [r7, #11]
 8017116:	e021      	b.n	801715c <USBD_GetDescriptor+0x268>
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801711e:	699b      	ldr	r3, [r3, #24]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d00b      	beq.n	801713c <USBD_GetDescriptor+0x248>
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801712a:	699b      	ldr	r3, [r3, #24]
 801712c:	687a      	ldr	r2, [r7, #4]
 801712e:	7c12      	ldrb	r2, [r2, #16]
 8017130:	f107 0108 	add.w	r1, r7, #8
 8017134:	4610      	mov	r0, r2
 8017136:	4798      	blx	r3
 8017138:	60f8      	str	r0, [r7, #12]
 801713a:	e00f      	b.n	801715c <USBD_GetDescriptor+0x268>
 801713c:	6839      	ldr	r1, [r7, #0]
 801713e:	6878      	ldr	r0, [r7, #4]
 8017140:	f000 fa49 	bl	80175d6 <USBD_CtlError>
 8017144:	7afb      	ldrb	r3, [r7, #11]
 8017146:	3301      	adds	r3, #1
 8017148:	72fb      	strb	r3, [r7, #11]
 801714a:	e007      	b.n	801715c <USBD_GetDescriptor+0x268>
 801714c:	6839      	ldr	r1, [r7, #0]
 801714e:	6878      	ldr	r0, [r7, #4]
 8017150:	f000 fa41 	bl	80175d6 <USBD_CtlError>
 8017154:	7afb      	ldrb	r3, [r7, #11]
 8017156:	3301      	adds	r3, #1
 8017158:	72fb      	strb	r3, [r7, #11]
 801715a:	bf00      	nop
 801715c:	e037      	b.n	80171ce <USBD_GetDescriptor+0x2da>
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	7c1b      	ldrb	r3, [r3, #16]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d109      	bne.n	801717a <USBD_GetDescriptor+0x286>
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801716c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801716e:	f107 0208 	add.w	r2, r7, #8
 8017172:	4610      	mov	r0, r2
 8017174:	4798      	blx	r3
 8017176:	60f8      	str	r0, [r7, #12]
 8017178:	e029      	b.n	80171ce <USBD_GetDescriptor+0x2da>
 801717a:	6839      	ldr	r1, [r7, #0]
 801717c:	6878      	ldr	r0, [r7, #4]
 801717e:	f000 fa2a 	bl	80175d6 <USBD_CtlError>
 8017182:	7afb      	ldrb	r3, [r7, #11]
 8017184:	3301      	adds	r3, #1
 8017186:	72fb      	strb	r3, [r7, #11]
 8017188:	e021      	b.n	80171ce <USBD_GetDescriptor+0x2da>
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	7c1b      	ldrb	r3, [r3, #16]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d10d      	bne.n	80171ae <USBD_GetDescriptor+0x2ba>
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801719a:	f107 0208 	add.w	r2, r7, #8
 801719e:	4610      	mov	r0, r2
 80171a0:	4798      	blx	r3
 80171a2:	60f8      	str	r0, [r7, #12]
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	3301      	adds	r3, #1
 80171a8:	2207      	movs	r2, #7
 80171aa:	701a      	strb	r2, [r3, #0]
 80171ac:	e00f      	b.n	80171ce <USBD_GetDescriptor+0x2da>
 80171ae:	6839      	ldr	r1, [r7, #0]
 80171b0:	6878      	ldr	r0, [r7, #4]
 80171b2:	f000 fa10 	bl	80175d6 <USBD_CtlError>
 80171b6:	7afb      	ldrb	r3, [r7, #11]
 80171b8:	3301      	adds	r3, #1
 80171ba:	72fb      	strb	r3, [r7, #11]
 80171bc:	e007      	b.n	80171ce <USBD_GetDescriptor+0x2da>
 80171be:	6839      	ldr	r1, [r7, #0]
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f000 fa08 	bl	80175d6 <USBD_CtlError>
 80171c6:	7afb      	ldrb	r3, [r7, #11]
 80171c8:	3301      	adds	r3, #1
 80171ca:	72fb      	strb	r3, [r7, #11]
 80171cc:	bf00      	nop
 80171ce:	7afb      	ldrb	r3, [r7, #11]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d11e      	bne.n	8017212 <USBD_GetDescriptor+0x31e>
 80171d4:	683b      	ldr	r3, [r7, #0]
 80171d6:	88db      	ldrh	r3, [r3, #6]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d016      	beq.n	801720a <USBD_GetDescriptor+0x316>
 80171dc:	893b      	ldrh	r3, [r7, #8]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d00e      	beq.n	8017200 <USBD_GetDescriptor+0x30c>
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	88da      	ldrh	r2, [r3, #6]
 80171e6:	893b      	ldrh	r3, [r7, #8]
 80171e8:	4293      	cmp	r3, r2
 80171ea:	bf28      	it	cs
 80171ec:	4613      	movcs	r3, r2
 80171ee:	b29b      	uxth	r3, r3
 80171f0:	813b      	strh	r3, [r7, #8]
 80171f2:	893b      	ldrh	r3, [r7, #8]
 80171f4:	461a      	mov	r2, r3
 80171f6:	68f9      	ldr	r1, [r7, #12]
 80171f8:	6878      	ldr	r0, [r7, #4]
 80171fa:	f000 fa69 	bl	80176d0 <USBD_CtlSendData>
 80171fe:	e009      	b.n	8017214 <USBD_GetDescriptor+0x320>
 8017200:	6839      	ldr	r1, [r7, #0]
 8017202:	6878      	ldr	r0, [r7, #4]
 8017204:	f000 f9e7 	bl	80175d6 <USBD_CtlError>
 8017208:	e004      	b.n	8017214 <USBD_GetDescriptor+0x320>
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f000 faba 	bl	8017784 <USBD_CtlSendStatus>
 8017210:	e000      	b.n	8017214 <USBD_GetDescriptor+0x320>
 8017212:	bf00      	nop
 8017214:	3710      	adds	r7, #16
 8017216:	46bd      	mov	sp, r7
 8017218:	bd80      	pop	{r7, pc}
 801721a:	bf00      	nop

0801721c <USBD_SetAddress>:
 801721c:	b580      	push	{r7, lr}
 801721e:	b084      	sub	sp, #16
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	6039      	str	r1, [r7, #0]
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	889b      	ldrh	r3, [r3, #4]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d131      	bne.n	8017292 <USBD_SetAddress+0x76>
 801722e:	683b      	ldr	r3, [r7, #0]
 8017230:	88db      	ldrh	r3, [r3, #6]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d12d      	bne.n	8017292 <USBD_SetAddress+0x76>
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	885b      	ldrh	r3, [r3, #2]
 801723a:	2b7f      	cmp	r3, #127	@ 0x7f
 801723c:	d829      	bhi.n	8017292 <USBD_SetAddress+0x76>
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	885b      	ldrh	r3, [r3, #2]
 8017242:	b2db      	uxtb	r3, r3
 8017244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017248:	73fb      	strb	r3, [r7, #15]
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017250:	b2db      	uxtb	r3, r3
 8017252:	2b03      	cmp	r3, #3
 8017254:	d104      	bne.n	8017260 <USBD_SetAddress+0x44>
 8017256:	6839      	ldr	r1, [r7, #0]
 8017258:	6878      	ldr	r0, [r7, #4]
 801725a:	f000 f9bc 	bl	80175d6 <USBD_CtlError>
 801725e:	e01d      	b.n	801729c <USBD_SetAddress+0x80>
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	7bfa      	ldrb	r2, [r7, #15]
 8017264:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
 8017268:	7bfb      	ldrb	r3, [r7, #15]
 801726a:	4619      	mov	r1, r3
 801726c:	6878      	ldr	r0, [r7, #4]
 801726e:	f000 ff13 	bl	8018098 <USBD_LL_SetUSBAddress>
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f000 fa86 	bl	8017784 <USBD_CtlSendStatus>
 8017278:	7bfb      	ldrb	r3, [r7, #15]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d004      	beq.n	8017288 <USBD_SetAddress+0x6c>
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	2202      	movs	r2, #2
 8017282:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 8017286:	e009      	b.n	801729c <USBD_SetAddress+0x80>
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	2201      	movs	r2, #1
 801728c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 8017290:	e004      	b.n	801729c <USBD_SetAddress+0x80>
 8017292:	6839      	ldr	r1, [r7, #0]
 8017294:	6878      	ldr	r0, [r7, #4]
 8017296:	f000 f99e 	bl	80175d6 <USBD_CtlError>
 801729a:	bf00      	nop
 801729c:	bf00      	nop
 801729e:	3710      	adds	r7, #16
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <USBD_SetConfig>:
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b084      	sub	sp, #16
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
 80172ac:	6039      	str	r1, [r7, #0]
 80172ae:	2300      	movs	r3, #0
 80172b0:	73fb      	strb	r3, [r7, #15]
 80172b2:	683b      	ldr	r3, [r7, #0]
 80172b4:	885b      	ldrh	r3, [r3, #2]
 80172b6:	b2da      	uxtb	r2, r3
 80172b8:	4b4e      	ldr	r3, [pc, #312]	@ (80173f4 <USBD_SetConfig+0x150>)
 80172ba:	701a      	strb	r2, [r3, #0]
 80172bc:	4b4d      	ldr	r3, [pc, #308]	@ (80173f4 <USBD_SetConfig+0x150>)
 80172be:	781b      	ldrb	r3, [r3, #0]
 80172c0:	2b01      	cmp	r3, #1
 80172c2:	d905      	bls.n	80172d0 <USBD_SetConfig+0x2c>
 80172c4:	6839      	ldr	r1, [r7, #0]
 80172c6:	6878      	ldr	r0, [r7, #4]
 80172c8:	f000 f985 	bl	80175d6 <USBD_CtlError>
 80172cc:	2303      	movs	r3, #3
 80172ce:	e08c      	b.n	80173ea <USBD_SetConfig+0x146>
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80172d6:	b2db      	uxtb	r3, r3
 80172d8:	2b02      	cmp	r3, #2
 80172da:	d002      	beq.n	80172e2 <USBD_SetConfig+0x3e>
 80172dc:	2b03      	cmp	r3, #3
 80172de:	d029      	beq.n	8017334 <USBD_SetConfig+0x90>
 80172e0:	e075      	b.n	80173ce <USBD_SetConfig+0x12a>
 80172e2:	4b44      	ldr	r3, [pc, #272]	@ (80173f4 <USBD_SetConfig+0x150>)
 80172e4:	781b      	ldrb	r3, [r3, #0]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d020      	beq.n	801732c <USBD_SetConfig+0x88>
 80172ea:	4b42      	ldr	r3, [pc, #264]	@ (80173f4 <USBD_SetConfig+0x150>)
 80172ec:	781b      	ldrb	r3, [r3, #0]
 80172ee:	461a      	mov	r2, r3
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	605a      	str	r2, [r3, #4]
 80172f4:	4b3f      	ldr	r3, [pc, #252]	@ (80173f4 <USBD_SetConfig+0x150>)
 80172f6:	781b      	ldrb	r3, [r3, #0]
 80172f8:	4619      	mov	r1, r3
 80172fa:	6878      	ldr	r0, [r7, #4]
 80172fc:	f7fe ffb9 	bl	8016272 <USBD_SetClassConfig>
 8017300:	4603      	mov	r3, r0
 8017302:	73fb      	strb	r3, [r7, #15]
 8017304:	7bfb      	ldrb	r3, [r7, #15]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d008      	beq.n	801731c <USBD_SetConfig+0x78>
 801730a:	6839      	ldr	r1, [r7, #0]
 801730c:	6878      	ldr	r0, [r7, #4]
 801730e:	f000 f962 	bl	80175d6 <USBD_CtlError>
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	2202      	movs	r2, #2
 8017316:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 801731a:	e065      	b.n	80173e8 <USBD_SetConfig+0x144>
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f000 fa31 	bl	8017784 <USBD_CtlSendStatus>
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	2203      	movs	r2, #3
 8017326:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 801732a:	e05d      	b.n	80173e8 <USBD_SetConfig+0x144>
 801732c:	6878      	ldr	r0, [r7, #4]
 801732e:	f000 fa29 	bl	8017784 <USBD_CtlSendStatus>
 8017332:	e059      	b.n	80173e8 <USBD_SetConfig+0x144>
 8017334:	4b2f      	ldr	r3, [pc, #188]	@ (80173f4 <USBD_SetConfig+0x150>)
 8017336:	781b      	ldrb	r3, [r3, #0]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d112      	bne.n	8017362 <USBD_SetConfig+0xbe>
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	2202      	movs	r2, #2
 8017340:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 8017344:	4b2b      	ldr	r3, [pc, #172]	@ (80173f4 <USBD_SetConfig+0x150>)
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	461a      	mov	r2, r3
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	605a      	str	r2, [r3, #4]
 801734e:	4b29      	ldr	r3, [pc, #164]	@ (80173f4 <USBD_SetConfig+0x150>)
 8017350:	781b      	ldrb	r3, [r3, #0]
 8017352:	4619      	mov	r1, r3
 8017354:	6878      	ldr	r0, [r7, #4]
 8017356:	f7fe ffa8 	bl	80162aa <USBD_ClrClassConfig>
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f000 fa12 	bl	8017784 <USBD_CtlSendStatus>
 8017360:	e042      	b.n	80173e8 <USBD_SetConfig+0x144>
 8017362:	4b24      	ldr	r3, [pc, #144]	@ (80173f4 <USBD_SetConfig+0x150>)
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	461a      	mov	r2, r3
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	685b      	ldr	r3, [r3, #4]
 801736c:	429a      	cmp	r2, r3
 801736e:	d02a      	beq.n	80173c6 <USBD_SetConfig+0x122>
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	685b      	ldr	r3, [r3, #4]
 8017374:	b2db      	uxtb	r3, r3
 8017376:	4619      	mov	r1, r3
 8017378:	6878      	ldr	r0, [r7, #4]
 801737a:	f7fe ff96 	bl	80162aa <USBD_ClrClassConfig>
 801737e:	4b1d      	ldr	r3, [pc, #116]	@ (80173f4 <USBD_SetConfig+0x150>)
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	461a      	mov	r2, r3
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	605a      	str	r2, [r3, #4]
 8017388:	4b1a      	ldr	r3, [pc, #104]	@ (80173f4 <USBD_SetConfig+0x150>)
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	4619      	mov	r1, r3
 801738e:	6878      	ldr	r0, [r7, #4]
 8017390:	f7fe ff6f 	bl	8016272 <USBD_SetClassConfig>
 8017394:	4603      	mov	r3, r0
 8017396:	73fb      	strb	r3, [r7, #15]
 8017398:	7bfb      	ldrb	r3, [r7, #15]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d00f      	beq.n	80173be <USBD_SetConfig+0x11a>
 801739e:	6839      	ldr	r1, [r7, #0]
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f000 f918 	bl	80175d6 <USBD_CtlError>
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	685b      	ldr	r3, [r3, #4]
 80173aa:	b2db      	uxtb	r3, r3
 80173ac:	4619      	mov	r1, r3
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	f7fe ff7b 	bl	80162aa <USBD_ClrClassConfig>
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	2202      	movs	r2, #2
 80173b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 80173bc:	e014      	b.n	80173e8 <USBD_SetConfig+0x144>
 80173be:	6878      	ldr	r0, [r7, #4]
 80173c0:	f000 f9e0 	bl	8017784 <USBD_CtlSendStatus>
 80173c4:	e010      	b.n	80173e8 <USBD_SetConfig+0x144>
 80173c6:	6878      	ldr	r0, [r7, #4]
 80173c8:	f000 f9dc 	bl	8017784 <USBD_CtlSendStatus>
 80173cc:	e00c      	b.n	80173e8 <USBD_SetConfig+0x144>
 80173ce:	6839      	ldr	r1, [r7, #0]
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f000 f900 	bl	80175d6 <USBD_CtlError>
 80173d6:	4b07      	ldr	r3, [pc, #28]	@ (80173f4 <USBD_SetConfig+0x150>)
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	4619      	mov	r1, r3
 80173dc:	6878      	ldr	r0, [r7, #4]
 80173de:	f7fe ff64 	bl	80162aa <USBD_ClrClassConfig>
 80173e2:	2303      	movs	r3, #3
 80173e4:	73fb      	strb	r3, [r7, #15]
 80173e6:	bf00      	nop
 80173e8:	7bfb      	ldrb	r3, [r7, #15]
 80173ea:	4618      	mov	r0, r3
 80173ec:	3710      	adds	r7, #16
 80173ee:	46bd      	mov	sp, r7
 80173f0:	bd80      	pop	{r7, pc}
 80173f2:	bf00      	nop
 80173f4:	2400463c 	.word	0x2400463c

080173f8 <USBD_GetConfig>:
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b082      	sub	sp, #8
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
 8017400:	6039      	str	r1, [r7, #0]
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	88db      	ldrh	r3, [r3, #6]
 8017406:	2b01      	cmp	r3, #1
 8017408:	d004      	beq.n	8017414 <USBD_GetConfig+0x1c>
 801740a:	6839      	ldr	r1, [r7, #0]
 801740c:	6878      	ldr	r0, [r7, #4]
 801740e:	f000 f8e2 	bl	80175d6 <USBD_CtlError>
 8017412:	e023      	b.n	801745c <USBD_GetConfig+0x64>
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801741a:	b2db      	uxtb	r3, r3
 801741c:	2b02      	cmp	r3, #2
 801741e:	dc02      	bgt.n	8017426 <USBD_GetConfig+0x2e>
 8017420:	2b00      	cmp	r3, #0
 8017422:	dc03      	bgt.n	801742c <USBD_GetConfig+0x34>
 8017424:	e015      	b.n	8017452 <USBD_GetConfig+0x5a>
 8017426:	2b03      	cmp	r3, #3
 8017428:	d00b      	beq.n	8017442 <USBD_GetConfig+0x4a>
 801742a:	e012      	b.n	8017452 <USBD_GetConfig+0x5a>
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	2200      	movs	r2, #0
 8017430:	609a      	str	r2, [r3, #8]
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	3308      	adds	r3, #8
 8017436:	2201      	movs	r2, #1
 8017438:	4619      	mov	r1, r3
 801743a:	6878      	ldr	r0, [r7, #4]
 801743c:	f000 f948 	bl	80176d0 <USBD_CtlSendData>
 8017440:	e00c      	b.n	801745c <USBD_GetConfig+0x64>
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	3304      	adds	r3, #4
 8017446:	2201      	movs	r2, #1
 8017448:	4619      	mov	r1, r3
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	f000 f940 	bl	80176d0 <USBD_CtlSendData>
 8017450:	e004      	b.n	801745c <USBD_GetConfig+0x64>
 8017452:	6839      	ldr	r1, [r7, #0]
 8017454:	6878      	ldr	r0, [r7, #4]
 8017456:	f000 f8be 	bl	80175d6 <USBD_CtlError>
 801745a:	bf00      	nop
 801745c:	bf00      	nop
 801745e:	3708      	adds	r7, #8
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}

08017464 <USBD_GetStatus>:
 8017464:	b580      	push	{r7, lr}
 8017466:	b082      	sub	sp, #8
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	6039      	str	r1, [r7, #0]
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017474:	b2db      	uxtb	r3, r3
 8017476:	3b01      	subs	r3, #1
 8017478:	2b02      	cmp	r3, #2
 801747a:	d81e      	bhi.n	80174ba <USBD_GetStatus+0x56>
 801747c:	683b      	ldr	r3, [r7, #0]
 801747e:	88db      	ldrh	r3, [r3, #6]
 8017480:	2b02      	cmp	r3, #2
 8017482:	d004      	beq.n	801748e <USBD_GetStatus+0x2a>
 8017484:	6839      	ldr	r1, [r7, #0]
 8017486:	6878      	ldr	r0, [r7, #4]
 8017488:	f000 f8a5 	bl	80175d6 <USBD_CtlError>
 801748c:	e01a      	b.n	80174c4 <USBD_GetStatus+0x60>
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	2201      	movs	r2, #1
 8017492:	60da      	str	r2, [r3, #12]
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801749a:	2b00      	cmp	r3, #0
 801749c:	d005      	beq.n	80174aa <USBD_GetStatus+0x46>
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	68db      	ldr	r3, [r3, #12]
 80174a2:	f043 0202 	orr.w	r2, r3, #2
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	60da      	str	r2, [r3, #12]
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	330c      	adds	r3, #12
 80174ae:	2202      	movs	r2, #2
 80174b0:	4619      	mov	r1, r3
 80174b2:	6878      	ldr	r0, [r7, #4]
 80174b4:	f000 f90c 	bl	80176d0 <USBD_CtlSendData>
 80174b8:	e004      	b.n	80174c4 <USBD_GetStatus+0x60>
 80174ba:	6839      	ldr	r1, [r7, #0]
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f000 f88a 	bl	80175d6 <USBD_CtlError>
 80174c2:	bf00      	nop
 80174c4:	bf00      	nop
 80174c6:	3708      	adds	r7, #8
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd80      	pop	{r7, pc}

080174cc <USBD_SetFeature>:
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b082      	sub	sp, #8
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
 80174d4:	6039      	str	r1, [r7, #0]
 80174d6:	683b      	ldr	r3, [r7, #0]
 80174d8:	885b      	ldrh	r3, [r3, #2]
 80174da:	2b01      	cmp	r3, #1
 80174dc:	d107      	bne.n	80174ee <USBD_SetFeature+0x22>
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	2201      	movs	r2, #1
 80174e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
 80174e6:	6878      	ldr	r0, [r7, #4]
 80174e8:	f000 f94c 	bl	8017784 <USBD_CtlSendStatus>
 80174ec:	e013      	b.n	8017516 <USBD_SetFeature+0x4a>
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	885b      	ldrh	r3, [r3, #2]
 80174f2:	2b02      	cmp	r3, #2
 80174f4:	d10b      	bne.n	801750e <USBD_SetFeature+0x42>
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	889b      	ldrh	r3, [r3, #4]
 80174fa:	0a1b      	lsrs	r3, r3, #8
 80174fc:	b29b      	uxth	r3, r3
 80174fe:	b2da      	uxtb	r2, r3
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8017506:	6878      	ldr	r0, [r7, #4]
 8017508:	f000 f93c 	bl	8017784 <USBD_CtlSendStatus>
 801750c:	e003      	b.n	8017516 <USBD_SetFeature+0x4a>
 801750e:	6839      	ldr	r1, [r7, #0]
 8017510:	6878      	ldr	r0, [r7, #4]
 8017512:	f000 f860 	bl	80175d6 <USBD_CtlError>
 8017516:	bf00      	nop
 8017518:	3708      	adds	r7, #8
 801751a:	46bd      	mov	sp, r7
 801751c:	bd80      	pop	{r7, pc}

0801751e <USBD_ClrFeature>:
 801751e:	b580      	push	{r7, lr}
 8017520:	b082      	sub	sp, #8
 8017522:	af00      	add	r7, sp, #0
 8017524:	6078      	str	r0, [r7, #4]
 8017526:	6039      	str	r1, [r7, #0]
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801752e:	b2db      	uxtb	r3, r3
 8017530:	3b01      	subs	r3, #1
 8017532:	2b02      	cmp	r3, #2
 8017534:	d80b      	bhi.n	801754e <USBD_ClrFeature+0x30>
 8017536:	683b      	ldr	r3, [r7, #0]
 8017538:	885b      	ldrh	r3, [r3, #2]
 801753a:	2b01      	cmp	r3, #1
 801753c:	d10c      	bne.n	8017558 <USBD_ClrFeature+0x3a>
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	2200      	movs	r2, #0
 8017542:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f000 f91c 	bl	8017784 <USBD_CtlSendStatus>
 801754c:	e004      	b.n	8017558 <USBD_ClrFeature+0x3a>
 801754e:	6839      	ldr	r1, [r7, #0]
 8017550:	6878      	ldr	r0, [r7, #4]
 8017552:	f000 f840 	bl	80175d6 <USBD_CtlError>
 8017556:	e000      	b.n	801755a <USBD_ClrFeature+0x3c>
 8017558:	bf00      	nop
 801755a:	bf00      	nop
 801755c:	3708      	adds	r7, #8
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}

08017562 <USBD_ParseSetupRequest>:
 8017562:	b580      	push	{r7, lr}
 8017564:	b084      	sub	sp, #16
 8017566:	af00      	add	r7, sp, #0
 8017568:	6078      	str	r0, [r7, #4]
 801756a:	6039      	str	r1, [r7, #0]
 801756c:	683b      	ldr	r3, [r7, #0]
 801756e:	60fb      	str	r3, [r7, #12]
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	781a      	ldrb	r2, [r3, #0]
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	701a      	strb	r2, [r3, #0]
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	3301      	adds	r3, #1
 801757c:	60fb      	str	r3, [r7, #12]
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	781a      	ldrb	r2, [r3, #0]
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	705a      	strb	r2, [r3, #1]
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	3301      	adds	r3, #1
 801758a:	60fb      	str	r3, [r7, #12]
 801758c:	68f8      	ldr	r0, [r7, #12]
 801758e:	f7ff fa16 	bl	80169be <SWAPBYTE>
 8017592:	4603      	mov	r3, r0
 8017594:	461a      	mov	r2, r3
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	805a      	strh	r2, [r3, #2]
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	3301      	adds	r3, #1
 801759e:	60fb      	str	r3, [r7, #12]
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	3301      	adds	r3, #1
 80175a4:	60fb      	str	r3, [r7, #12]
 80175a6:	68f8      	ldr	r0, [r7, #12]
 80175a8:	f7ff fa09 	bl	80169be <SWAPBYTE>
 80175ac:	4603      	mov	r3, r0
 80175ae:	461a      	mov	r2, r3
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	809a      	strh	r2, [r3, #4]
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	3301      	adds	r3, #1
 80175b8:	60fb      	str	r3, [r7, #12]
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	3301      	adds	r3, #1
 80175be:	60fb      	str	r3, [r7, #12]
 80175c0:	68f8      	ldr	r0, [r7, #12]
 80175c2:	f7ff f9fc 	bl	80169be <SWAPBYTE>
 80175c6:	4603      	mov	r3, r0
 80175c8:	461a      	mov	r2, r3
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	80da      	strh	r2, [r3, #6]
 80175ce:	bf00      	nop
 80175d0:	3710      	adds	r7, #16
 80175d2:	46bd      	mov	sp, r7
 80175d4:	bd80      	pop	{r7, pc}

080175d6 <USBD_CtlError>:
 80175d6:	b580      	push	{r7, lr}
 80175d8:	b082      	sub	sp, #8
 80175da:	af00      	add	r7, sp, #0
 80175dc:	6078      	str	r0, [r7, #4]
 80175de:	6039      	str	r1, [r7, #0]
 80175e0:	2180      	movs	r1, #128	@ 0x80
 80175e2:	6878      	ldr	r0, [r7, #4]
 80175e4:	f000 fcee 	bl	8017fc4 <USBD_LL_StallEP>
 80175e8:	2100      	movs	r1, #0
 80175ea:	6878      	ldr	r0, [r7, #4]
 80175ec:	f000 fcea 	bl	8017fc4 <USBD_LL_StallEP>
 80175f0:	bf00      	nop
 80175f2:	3708      	adds	r7, #8
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bd80      	pop	{r7, pc}

080175f8 <USBD_GetString>:
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b086      	sub	sp, #24
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	60f8      	str	r0, [r7, #12]
 8017600:	60b9      	str	r1, [r7, #8]
 8017602:	607a      	str	r2, [r7, #4]
 8017604:	2300      	movs	r3, #0
 8017606:	75fb      	strb	r3, [r7, #23]
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d042      	beq.n	8017694 <USBD_GetString+0x9c>
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	613b      	str	r3, [r7, #16]
 8017612:	6938      	ldr	r0, [r7, #16]
 8017614:	f000 f842 	bl	801769c <USBD_GetLen>
 8017618:	4603      	mov	r3, r0
 801761a:	3301      	adds	r3, #1
 801761c:	005b      	lsls	r3, r3, #1
 801761e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017622:	d808      	bhi.n	8017636 <USBD_GetString+0x3e>
 8017624:	6938      	ldr	r0, [r7, #16]
 8017626:	f000 f839 	bl	801769c <USBD_GetLen>
 801762a:	4603      	mov	r3, r0
 801762c:	3301      	adds	r3, #1
 801762e:	b29b      	uxth	r3, r3
 8017630:	005b      	lsls	r3, r3, #1
 8017632:	b29a      	uxth	r2, r3
 8017634:	e001      	b.n	801763a <USBD_GetString+0x42>
 8017636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	801a      	strh	r2, [r3, #0]
 801763e:	7dfb      	ldrb	r3, [r7, #23]
 8017640:	68ba      	ldr	r2, [r7, #8]
 8017642:	4413      	add	r3, r2
 8017644:	687a      	ldr	r2, [r7, #4]
 8017646:	7812      	ldrb	r2, [r2, #0]
 8017648:	701a      	strb	r2, [r3, #0]
 801764a:	7dfb      	ldrb	r3, [r7, #23]
 801764c:	3301      	adds	r3, #1
 801764e:	75fb      	strb	r3, [r7, #23]
 8017650:	7dfb      	ldrb	r3, [r7, #23]
 8017652:	68ba      	ldr	r2, [r7, #8]
 8017654:	4413      	add	r3, r2
 8017656:	2203      	movs	r2, #3
 8017658:	701a      	strb	r2, [r3, #0]
 801765a:	7dfb      	ldrb	r3, [r7, #23]
 801765c:	3301      	adds	r3, #1
 801765e:	75fb      	strb	r3, [r7, #23]
 8017660:	e013      	b.n	801768a <USBD_GetString+0x92>
 8017662:	7dfb      	ldrb	r3, [r7, #23]
 8017664:	68ba      	ldr	r2, [r7, #8]
 8017666:	4413      	add	r3, r2
 8017668:	693a      	ldr	r2, [r7, #16]
 801766a:	7812      	ldrb	r2, [r2, #0]
 801766c:	701a      	strb	r2, [r3, #0]
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	3301      	adds	r3, #1
 8017672:	613b      	str	r3, [r7, #16]
 8017674:	7dfb      	ldrb	r3, [r7, #23]
 8017676:	3301      	adds	r3, #1
 8017678:	75fb      	strb	r3, [r7, #23]
 801767a:	7dfb      	ldrb	r3, [r7, #23]
 801767c:	68ba      	ldr	r2, [r7, #8]
 801767e:	4413      	add	r3, r2
 8017680:	2200      	movs	r2, #0
 8017682:	701a      	strb	r2, [r3, #0]
 8017684:	7dfb      	ldrb	r3, [r7, #23]
 8017686:	3301      	adds	r3, #1
 8017688:	75fb      	strb	r3, [r7, #23]
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	781b      	ldrb	r3, [r3, #0]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d1e7      	bne.n	8017662 <USBD_GetString+0x6a>
 8017692:	e000      	b.n	8017696 <USBD_GetString+0x9e>
 8017694:	bf00      	nop
 8017696:	3718      	adds	r7, #24
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}

0801769c <USBD_GetLen>:
 801769c:	b480      	push	{r7}
 801769e:	b085      	sub	sp, #20
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
 80176a4:	2300      	movs	r3, #0
 80176a6:	73fb      	strb	r3, [r7, #15]
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	60bb      	str	r3, [r7, #8]
 80176ac:	e005      	b.n	80176ba <USBD_GetLen+0x1e>
 80176ae:	7bfb      	ldrb	r3, [r7, #15]
 80176b0:	3301      	adds	r3, #1
 80176b2:	73fb      	strb	r3, [r7, #15]
 80176b4:	68bb      	ldr	r3, [r7, #8]
 80176b6:	3301      	adds	r3, #1
 80176b8:	60bb      	str	r3, [r7, #8]
 80176ba:	68bb      	ldr	r3, [r7, #8]
 80176bc:	781b      	ldrb	r3, [r3, #0]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d1f5      	bne.n	80176ae <USBD_GetLen+0x12>
 80176c2:	7bfb      	ldrb	r3, [r7, #15]
 80176c4:	4618      	mov	r0, r3
 80176c6:	3714      	adds	r7, #20
 80176c8:	46bd      	mov	sp, r7
 80176ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ce:	4770      	bx	lr

080176d0 <USBD_CtlSendData>:
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b084      	sub	sp, #16
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	60f8      	str	r0, [r7, #12]
 80176d8:	60b9      	str	r1, [r7, #8]
 80176da:	607a      	str	r2, [r7, #4]
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	2202      	movs	r2, #2
 80176e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	687a      	ldr	r2, [r7, #4]
 80176e8:	619a      	str	r2, [r3, #24]
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	687a      	ldr	r2, [r7, #4]
 80176ee:	61da      	str	r2, [r3, #28]
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	68ba      	ldr	r2, [r7, #8]
 80176f4:	2100      	movs	r1, #0
 80176f6:	68f8      	ldr	r0, [r7, #12]
 80176f8:	f000 fced 	bl	80180d6 <USBD_LL_Transmit>
 80176fc:	2300      	movs	r3, #0
 80176fe:	4618      	mov	r0, r3
 8017700:	3710      	adds	r7, #16
 8017702:	46bd      	mov	sp, r7
 8017704:	bd80      	pop	{r7, pc}

08017706 <USBD_CtlContinueSendData>:
 8017706:	b580      	push	{r7, lr}
 8017708:	b084      	sub	sp, #16
 801770a:	af00      	add	r7, sp, #0
 801770c:	60f8      	str	r0, [r7, #12]
 801770e:	60b9      	str	r1, [r7, #8]
 8017710:	607a      	str	r2, [r7, #4]
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	68ba      	ldr	r2, [r7, #8]
 8017716:	2100      	movs	r1, #0
 8017718:	68f8      	ldr	r0, [r7, #12]
 801771a:	f000 fcdc 	bl	80180d6 <USBD_LL_Transmit>
 801771e:	2300      	movs	r3, #0
 8017720:	4618      	mov	r0, r3
 8017722:	3710      	adds	r7, #16
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}

08017728 <USBD_CtlPrepareRx>:
 8017728:	b580      	push	{r7, lr}
 801772a:	b084      	sub	sp, #16
 801772c:	af00      	add	r7, sp, #0
 801772e:	60f8      	str	r0, [r7, #12]
 8017730:	60b9      	str	r1, [r7, #8]
 8017732:	607a      	str	r2, [r7, #4]
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	2203      	movs	r2, #3
 8017738:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	687a      	ldr	r2, [r7, #4]
 8017740:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	687a      	ldr	r2, [r7, #4]
 8017748:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	68ba      	ldr	r2, [r7, #8]
 8017750:	2100      	movs	r1, #0
 8017752:	68f8      	ldr	r0, [r7, #12]
 8017754:	f000 fce0 	bl	8018118 <USBD_LL_PrepareReceive>
 8017758:	2300      	movs	r3, #0
 801775a:	4618      	mov	r0, r3
 801775c:	3710      	adds	r7, #16
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}

08017762 <USBD_CtlContinueRx>:
 8017762:	b580      	push	{r7, lr}
 8017764:	b084      	sub	sp, #16
 8017766:	af00      	add	r7, sp, #0
 8017768:	60f8      	str	r0, [r7, #12]
 801776a:	60b9      	str	r1, [r7, #8]
 801776c:	607a      	str	r2, [r7, #4]
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	68ba      	ldr	r2, [r7, #8]
 8017772:	2100      	movs	r1, #0
 8017774:	68f8      	ldr	r0, [r7, #12]
 8017776:	f000 fccf 	bl	8018118 <USBD_LL_PrepareReceive>
 801777a:	2300      	movs	r3, #0
 801777c:	4618      	mov	r0, r3
 801777e:	3710      	adds	r7, #16
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}

08017784 <USBD_CtlSendStatus>:
 8017784:	b580      	push	{r7, lr}
 8017786:	b082      	sub	sp, #8
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2204      	movs	r2, #4
 8017790:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8017794:	2300      	movs	r3, #0
 8017796:	2200      	movs	r2, #0
 8017798:	2100      	movs	r1, #0
 801779a:	6878      	ldr	r0, [r7, #4]
 801779c:	f000 fc9b 	bl	80180d6 <USBD_LL_Transmit>
 80177a0:	2300      	movs	r3, #0
 80177a2:	4618      	mov	r0, r3
 80177a4:	3708      	adds	r7, #8
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bd80      	pop	{r7, pc}

080177aa <USBD_CtlReceiveStatus>:
 80177aa:	b580      	push	{r7, lr}
 80177ac:	b082      	sub	sp, #8
 80177ae:	af00      	add	r7, sp, #0
 80177b0:	6078      	str	r0, [r7, #4]
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	2205      	movs	r2, #5
 80177b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80177ba:	2300      	movs	r3, #0
 80177bc:	2200      	movs	r2, #0
 80177be:	2100      	movs	r1, #0
 80177c0:	6878      	ldr	r0, [r7, #4]
 80177c2:	f000 fca9 	bl	8018118 <USBD_LL_PrepareReceive>
 80177c6:	2300      	movs	r3, #0
 80177c8:	4618      	mov	r0, r3
 80177ca:	3708      	adds	r7, #8
 80177cc:	46bd      	mov	sp, r7
 80177ce:	bd80      	pop	{r7, pc}

080177d0 <MX_USB_DEVICE_Init>:
 80177d0:	b580      	push	{r7, lr}
 80177d2:	af00      	add	r7, sp, #0
 80177d4:	2201      	movs	r2, #1
 80177d6:	4913      	ldr	r1, [pc, #76]	@ (8017824 <MX_USB_DEVICE_Init+0x54>)
 80177d8:	4813      	ldr	r0, [pc, #76]	@ (8017828 <MX_USB_DEVICE_Init+0x58>)
 80177da:	f7fe fccd 	bl	8016178 <USBD_Init>
 80177de:	4603      	mov	r3, r0
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d001      	beq.n	80177e8 <MX_USB_DEVICE_Init+0x18>
 80177e4:	f7ea fca0 	bl	8002128 <Error_Handler>
 80177e8:	4910      	ldr	r1, [pc, #64]	@ (801782c <MX_USB_DEVICE_Init+0x5c>)
 80177ea:	480f      	ldr	r0, [pc, #60]	@ (8017828 <MX_USB_DEVICE_Init+0x58>)
 80177ec:	f7fe fcf4 	bl	80161d8 <USBD_RegisterClass>
 80177f0:	4603      	mov	r3, r0
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d001      	beq.n	80177fa <MX_USB_DEVICE_Init+0x2a>
 80177f6:	f7ea fc97 	bl	8002128 <Error_Handler>
 80177fa:	490d      	ldr	r1, [pc, #52]	@ (8017830 <MX_USB_DEVICE_Init+0x60>)
 80177fc:	480a      	ldr	r0, [pc, #40]	@ (8017828 <MX_USB_DEVICE_Init+0x58>)
 80177fe:	f7fe fbeb 	bl	8015fd8 <USBD_CDC_RegisterInterface>
 8017802:	4603      	mov	r3, r0
 8017804:	2b00      	cmp	r3, #0
 8017806:	d001      	beq.n	801780c <MX_USB_DEVICE_Init+0x3c>
 8017808:	f7ea fc8e 	bl	8002128 <Error_Handler>
 801780c:	4806      	ldr	r0, [pc, #24]	@ (8017828 <MX_USB_DEVICE_Init+0x58>)
 801780e:	f7fe fd19 	bl	8016244 <USBD_Start>
 8017812:	4603      	mov	r3, r0
 8017814:	2b00      	cmp	r3, #0
 8017816:	d001      	beq.n	801781c <MX_USB_DEVICE_Init+0x4c>
 8017818:	f7ea fc86 	bl	8002128 <Error_Handler>
 801781c:	f7f5 f94c 	bl	800cab8 <HAL_PWREx_EnableUSBVoltageDetector>
 8017820:	bf00      	nop
 8017822:	bd80      	pop	{r7, pc}
 8017824:	240000b0 	.word	0x240000b0
 8017828:	24004640 	.word	0x24004640
 801782c:	2400001c 	.word	0x2400001c
 8017830:	2400009c 	.word	0x2400009c

08017834 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8017834:	b580      	push	{r7, lr}
 8017836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8017838:	2200      	movs	r2, #0
 801783a:	4905      	ldr	r1, [pc, #20]	@ (8017850 <CDC_Init_HS+0x1c>)
 801783c:	4805      	ldr	r0, [pc, #20]	@ (8017854 <CDC_Init_HS+0x20>)
 801783e:	f7fe fbe5 	bl	801600c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8017842:	4905      	ldr	r1, [pc, #20]	@ (8017858 <CDC_Init_HS+0x24>)
 8017844:	4803      	ldr	r0, [pc, #12]	@ (8017854 <CDC_Init_HS+0x20>)
 8017846:	f7fe fc03 	bl	8016050 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801784a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801784c:	4618      	mov	r0, r3
 801784e:	bd80      	pop	{r7, pc}
 8017850:	2400511c 	.word	0x2400511c
 8017854:	24004640 	.word	0x24004640
 8017858:	2400491c 	.word	0x2400491c

0801785c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801785c:	b480      	push	{r7}
 801785e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8017860:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8017862:	4618      	mov	r0, r3
 8017864:	46bd      	mov	sp, r7
 8017866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786a:	4770      	bx	lr

0801786c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801786c:	b480      	push	{r7}
 801786e:	b083      	sub	sp, #12
 8017870:	af00      	add	r7, sp, #0
 8017872:	4603      	mov	r3, r0
 8017874:	6039      	str	r1, [r7, #0]
 8017876:	71fb      	strb	r3, [r7, #7]
 8017878:	4613      	mov	r3, r2
 801787a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801787c:	79fb      	ldrb	r3, [r7, #7]
 801787e:	2b23      	cmp	r3, #35	@ 0x23
 8017880:	d84a      	bhi.n	8017918 <CDC_Control_HS+0xac>
 8017882:	a201      	add	r2, pc, #4	@ (adr r2, 8017888 <CDC_Control_HS+0x1c>)
 8017884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017888:	08017919 	.word	0x08017919
 801788c:	08017919 	.word	0x08017919
 8017890:	08017919 	.word	0x08017919
 8017894:	08017919 	.word	0x08017919
 8017898:	08017919 	.word	0x08017919
 801789c:	08017919 	.word	0x08017919
 80178a0:	08017919 	.word	0x08017919
 80178a4:	08017919 	.word	0x08017919
 80178a8:	08017919 	.word	0x08017919
 80178ac:	08017919 	.word	0x08017919
 80178b0:	08017919 	.word	0x08017919
 80178b4:	08017919 	.word	0x08017919
 80178b8:	08017919 	.word	0x08017919
 80178bc:	08017919 	.word	0x08017919
 80178c0:	08017919 	.word	0x08017919
 80178c4:	08017919 	.word	0x08017919
 80178c8:	08017919 	.word	0x08017919
 80178cc:	08017919 	.word	0x08017919
 80178d0:	08017919 	.word	0x08017919
 80178d4:	08017919 	.word	0x08017919
 80178d8:	08017919 	.word	0x08017919
 80178dc:	08017919 	.word	0x08017919
 80178e0:	08017919 	.word	0x08017919
 80178e4:	08017919 	.word	0x08017919
 80178e8:	08017919 	.word	0x08017919
 80178ec:	08017919 	.word	0x08017919
 80178f0:	08017919 	.word	0x08017919
 80178f4:	08017919 	.word	0x08017919
 80178f8:	08017919 	.word	0x08017919
 80178fc:	08017919 	.word	0x08017919
 8017900:	08017919 	.word	0x08017919
 8017904:	08017919 	.word	0x08017919
 8017908:	08017919 	.word	0x08017919
 801790c:	08017919 	.word	0x08017919
 8017910:	08017919 	.word	0x08017919
 8017914:	08017919 	.word	0x08017919
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017918:	bf00      	nop
  }

  return (USBD_OK);
 801791a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801791c:	4618      	mov	r0, r3
 801791e:	370c      	adds	r7, #12
 8017920:	46bd      	mov	sp, r7
 8017922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017926:	4770      	bx	lr

08017928 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b082      	sub	sp, #8
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
 8017930:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8017932:	6879      	ldr	r1, [r7, #4]
 8017934:	4808      	ldr	r0, [pc, #32]	@ (8017958 <CDC_Receive_HS+0x30>)
 8017936:	f7fe fb8b 	bl	8016050 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801793a:	4807      	ldr	r0, [pc, #28]	@ (8017958 <CDC_Receive_HS+0x30>)
 801793c:	f7fe fbe6 	bl	801610c <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 8017940:	683b      	ldr	r3, [r7, #0]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	461a      	mov	r2, r3
 8017946:	6879      	ldr	r1, [r7, #4]
 8017948:	4804      	ldr	r0, [pc, #16]	@ (801795c <CDC_Receive_HS+0x34>)
 801794a:	f7ed fc25 	bl	8005198 <VibeCheckShell_PutInput>

	return (USBD_OK);
 801794e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8017950:	4618      	mov	r0, r3
 8017952:	3708      	adds	r7, #8
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}
 8017958:	24004640 	.word	0x24004640
 801795c:	24000988 	.word	0x24000988

08017960 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b084      	sub	sp, #16
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
 8017968:	460b      	mov	r3, r1
 801796a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801796c:	2300      	movs	r3, #0
 801796e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8017970:	4b0d      	ldr	r3, [pc, #52]	@ (80179a8 <CDC_Transmit_HS+0x48>)
 8017972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017976:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017978:	68bb      	ldr	r3, [r7, #8]
 801797a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801797e:	2b00      	cmp	r3, #0
 8017980:	d001      	beq.n	8017986 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8017982:	2301      	movs	r3, #1
 8017984:	e00b      	b.n	801799e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8017986:	887b      	ldrh	r3, [r7, #2]
 8017988:	461a      	mov	r2, r3
 801798a:	6879      	ldr	r1, [r7, #4]
 801798c:	4806      	ldr	r0, [pc, #24]	@ (80179a8 <CDC_Transmit_HS+0x48>)
 801798e:	f7fe fb3d 	bl	801600c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8017992:	4805      	ldr	r0, [pc, #20]	@ (80179a8 <CDC_Transmit_HS+0x48>)
 8017994:	f7fe fb7a 	bl	801608c <USBD_CDC_TransmitPacket>
 8017998:	4603      	mov	r3, r0
 801799a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801799c:	7bfb      	ldrb	r3, [r7, #15]
}
 801799e:	4618      	mov	r0, r3
 80179a0:	3710      	adds	r7, #16
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}
 80179a6:	bf00      	nop
 80179a8:	24004640 	.word	0x24004640

080179ac <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80179ac:	b480      	push	{r7}
 80179ae:	b087      	sub	sp, #28
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	60f8      	str	r0, [r7, #12]
 80179b4:	60b9      	str	r1, [r7, #8]
 80179b6:	4613      	mov	r3, r2
 80179b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80179ba:	2300      	movs	r3, #0
 80179bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80179be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80179c2:	4618      	mov	r0, r3
 80179c4:	371c      	adds	r7, #28
 80179c6:	46bd      	mov	sp, r7
 80179c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179cc:	4770      	bx	lr
	...

080179d0 <USBD_HS_DeviceDescriptor>:
 80179d0:	b480      	push	{r7}
 80179d2:	b083      	sub	sp, #12
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	4603      	mov	r3, r0
 80179d8:	6039      	str	r1, [r7, #0]
 80179da:	71fb      	strb	r3, [r7, #7]
 80179dc:	683b      	ldr	r3, [r7, #0]
 80179de:	2212      	movs	r2, #18
 80179e0:	801a      	strh	r2, [r3, #0]
 80179e2:	4b03      	ldr	r3, [pc, #12]	@ (80179f0 <USBD_HS_DeviceDescriptor+0x20>)
 80179e4:	4618      	mov	r0, r3
 80179e6:	370c      	adds	r7, #12
 80179e8:	46bd      	mov	sp, r7
 80179ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ee:	4770      	bx	lr
 80179f0:	240000d0 	.word	0x240000d0

080179f4 <USBD_HS_LangIDStrDescriptor>:
 80179f4:	b480      	push	{r7}
 80179f6:	b083      	sub	sp, #12
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	4603      	mov	r3, r0
 80179fc:	6039      	str	r1, [r7, #0]
 80179fe:	71fb      	strb	r3, [r7, #7]
 8017a00:	683b      	ldr	r3, [r7, #0]
 8017a02:	2204      	movs	r2, #4
 8017a04:	801a      	strh	r2, [r3, #0]
 8017a06:	4b03      	ldr	r3, [pc, #12]	@ (8017a14 <USBD_HS_LangIDStrDescriptor+0x20>)
 8017a08:	4618      	mov	r0, r3
 8017a0a:	370c      	adds	r7, #12
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a12:	4770      	bx	lr
 8017a14:	240000e4 	.word	0x240000e4

08017a18 <USBD_HS_ProductStrDescriptor>:
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b082      	sub	sp, #8
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	4603      	mov	r3, r0
 8017a20:	6039      	str	r1, [r7, #0]
 8017a22:	71fb      	strb	r3, [r7, #7]
 8017a24:	79fb      	ldrb	r3, [r7, #7]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d105      	bne.n	8017a36 <USBD_HS_ProductStrDescriptor+0x1e>
 8017a2a:	683a      	ldr	r2, [r7, #0]
 8017a2c:	4907      	ldr	r1, [pc, #28]	@ (8017a4c <USBD_HS_ProductStrDescriptor+0x34>)
 8017a2e:	4808      	ldr	r0, [pc, #32]	@ (8017a50 <USBD_HS_ProductStrDescriptor+0x38>)
 8017a30:	f7ff fde2 	bl	80175f8 <USBD_GetString>
 8017a34:	e004      	b.n	8017a40 <USBD_HS_ProductStrDescriptor+0x28>
 8017a36:	683a      	ldr	r2, [r7, #0]
 8017a38:	4904      	ldr	r1, [pc, #16]	@ (8017a4c <USBD_HS_ProductStrDescriptor+0x34>)
 8017a3a:	4805      	ldr	r0, [pc, #20]	@ (8017a50 <USBD_HS_ProductStrDescriptor+0x38>)
 8017a3c:	f7ff fddc 	bl	80175f8 <USBD_GetString>
 8017a40:	4b02      	ldr	r3, [pc, #8]	@ (8017a4c <USBD_HS_ProductStrDescriptor+0x34>)
 8017a42:	4618      	mov	r0, r3
 8017a44:	3708      	adds	r7, #8
 8017a46:	46bd      	mov	sp, r7
 8017a48:	bd80      	pop	{r7, pc}
 8017a4a:	bf00      	nop
 8017a4c:	2400591c 	.word	0x2400591c
 8017a50:	0801d28c 	.word	0x0801d28c

08017a54 <USBD_HS_ManufacturerStrDescriptor>:
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b082      	sub	sp, #8
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	6039      	str	r1, [r7, #0]
 8017a5e:	71fb      	strb	r3, [r7, #7]
 8017a60:	683a      	ldr	r2, [r7, #0]
 8017a62:	4904      	ldr	r1, [pc, #16]	@ (8017a74 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8017a64:	4804      	ldr	r0, [pc, #16]	@ (8017a78 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8017a66:	f7ff fdc7 	bl	80175f8 <USBD_GetString>
 8017a6a:	4b02      	ldr	r3, [pc, #8]	@ (8017a74 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	3708      	adds	r7, #8
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}
 8017a74:	2400591c 	.word	0x2400591c
 8017a78:	0801d298 	.word	0x0801d298

08017a7c <USBD_HS_SerialStrDescriptor>:
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	4603      	mov	r3, r0
 8017a84:	6039      	str	r1, [r7, #0]
 8017a86:	71fb      	strb	r3, [r7, #7]
 8017a88:	683b      	ldr	r3, [r7, #0]
 8017a8a:	221a      	movs	r2, #26
 8017a8c:	801a      	strh	r2, [r3, #0]
 8017a8e:	f000 f843 	bl	8017b18 <Get_SerialNum>
 8017a92:	4b02      	ldr	r3, [pc, #8]	@ (8017a9c <USBD_HS_SerialStrDescriptor+0x20>)
 8017a94:	4618      	mov	r0, r3
 8017a96:	3708      	adds	r7, #8
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd80      	pop	{r7, pc}
 8017a9c:	240000e8 	.word	0x240000e8

08017aa0 <USBD_HS_ConfigStrDescriptor>:
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b082      	sub	sp, #8
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	6039      	str	r1, [r7, #0]
 8017aaa:	71fb      	strb	r3, [r7, #7]
 8017aac:	79fb      	ldrb	r3, [r7, #7]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d105      	bne.n	8017abe <USBD_HS_ConfigStrDescriptor+0x1e>
 8017ab2:	683a      	ldr	r2, [r7, #0]
 8017ab4:	4907      	ldr	r1, [pc, #28]	@ (8017ad4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017ab6:	4808      	ldr	r0, [pc, #32]	@ (8017ad8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017ab8:	f7ff fd9e 	bl	80175f8 <USBD_GetString>
 8017abc:	e004      	b.n	8017ac8 <USBD_HS_ConfigStrDescriptor+0x28>
 8017abe:	683a      	ldr	r2, [r7, #0]
 8017ac0:	4904      	ldr	r1, [pc, #16]	@ (8017ad4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017ac2:	4805      	ldr	r0, [pc, #20]	@ (8017ad8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017ac4:	f7ff fd98 	bl	80175f8 <USBD_GetString>
 8017ac8:	4b02      	ldr	r3, [pc, #8]	@ (8017ad4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017aca:	4618      	mov	r0, r3
 8017acc:	3708      	adds	r7, #8
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bd80      	pop	{r7, pc}
 8017ad2:	bf00      	nop
 8017ad4:	2400591c 	.word	0x2400591c
 8017ad8:	0801d2a4 	.word	0x0801d2a4

08017adc <USBD_HS_InterfaceStrDescriptor>:
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b082      	sub	sp, #8
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	4603      	mov	r3, r0
 8017ae4:	6039      	str	r1, [r7, #0]
 8017ae6:	71fb      	strb	r3, [r7, #7]
 8017ae8:	79fb      	ldrb	r3, [r7, #7]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d105      	bne.n	8017afa <USBD_HS_InterfaceStrDescriptor+0x1e>
 8017aee:	683a      	ldr	r2, [r7, #0]
 8017af0:	4907      	ldr	r1, [pc, #28]	@ (8017b10 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017af2:	4808      	ldr	r0, [pc, #32]	@ (8017b14 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017af4:	f7ff fd80 	bl	80175f8 <USBD_GetString>
 8017af8:	e004      	b.n	8017b04 <USBD_HS_InterfaceStrDescriptor+0x28>
 8017afa:	683a      	ldr	r2, [r7, #0]
 8017afc:	4904      	ldr	r1, [pc, #16]	@ (8017b10 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017afe:	4805      	ldr	r0, [pc, #20]	@ (8017b14 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017b00:	f7ff fd7a 	bl	80175f8 <USBD_GetString>
 8017b04:	4b02      	ldr	r3, [pc, #8]	@ (8017b10 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017b06:	4618      	mov	r0, r3
 8017b08:	3708      	adds	r7, #8
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	bd80      	pop	{r7, pc}
 8017b0e:	bf00      	nop
 8017b10:	2400591c 	.word	0x2400591c
 8017b14:	0801d2b0 	.word	0x0801d2b0

08017b18 <Get_SerialNum>:
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b084      	sub	sp, #16
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8017b5c <Get_SerialNum+0x44>)
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	60fb      	str	r3, [r7, #12]
 8017b24:	4b0e      	ldr	r3, [pc, #56]	@ (8017b60 <Get_SerialNum+0x48>)
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	60bb      	str	r3, [r7, #8]
 8017b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8017b64 <Get_SerialNum+0x4c>)
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	607b      	str	r3, [r7, #4]
 8017b30:	68fa      	ldr	r2, [r7, #12]
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	4413      	add	r3, r2
 8017b36:	60fb      	str	r3, [r7, #12]
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d009      	beq.n	8017b52 <Get_SerialNum+0x3a>
 8017b3e:	2208      	movs	r2, #8
 8017b40:	4909      	ldr	r1, [pc, #36]	@ (8017b68 <Get_SerialNum+0x50>)
 8017b42:	68f8      	ldr	r0, [r7, #12]
 8017b44:	f000 f814 	bl	8017b70 <IntToUnicode>
 8017b48:	2204      	movs	r2, #4
 8017b4a:	4908      	ldr	r1, [pc, #32]	@ (8017b6c <Get_SerialNum+0x54>)
 8017b4c:	68b8      	ldr	r0, [r7, #8]
 8017b4e:	f000 f80f 	bl	8017b70 <IntToUnicode>
 8017b52:	bf00      	nop
 8017b54:	3710      	adds	r7, #16
 8017b56:	46bd      	mov	sp, r7
 8017b58:	bd80      	pop	{r7, pc}
 8017b5a:	bf00      	nop
 8017b5c:	1ff1e800 	.word	0x1ff1e800
 8017b60:	1ff1e804 	.word	0x1ff1e804
 8017b64:	1ff1e808 	.word	0x1ff1e808
 8017b68:	240000ea 	.word	0x240000ea
 8017b6c:	240000fa 	.word	0x240000fa

08017b70 <IntToUnicode>:
 8017b70:	b480      	push	{r7}
 8017b72:	b087      	sub	sp, #28
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	60f8      	str	r0, [r7, #12]
 8017b78:	60b9      	str	r1, [r7, #8]
 8017b7a:	4613      	mov	r3, r2
 8017b7c:	71fb      	strb	r3, [r7, #7]
 8017b7e:	2300      	movs	r3, #0
 8017b80:	75fb      	strb	r3, [r7, #23]
 8017b82:	2300      	movs	r3, #0
 8017b84:	75fb      	strb	r3, [r7, #23]
 8017b86:	e027      	b.n	8017bd8 <IntToUnicode+0x68>
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	0f1b      	lsrs	r3, r3, #28
 8017b8c:	2b09      	cmp	r3, #9
 8017b8e:	d80b      	bhi.n	8017ba8 <IntToUnicode+0x38>
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	0f1b      	lsrs	r3, r3, #28
 8017b94:	b2da      	uxtb	r2, r3
 8017b96:	7dfb      	ldrb	r3, [r7, #23]
 8017b98:	005b      	lsls	r3, r3, #1
 8017b9a:	4619      	mov	r1, r3
 8017b9c:	68bb      	ldr	r3, [r7, #8]
 8017b9e:	440b      	add	r3, r1
 8017ba0:	3230      	adds	r2, #48	@ 0x30
 8017ba2:	b2d2      	uxtb	r2, r2
 8017ba4:	701a      	strb	r2, [r3, #0]
 8017ba6:	e00a      	b.n	8017bbe <IntToUnicode+0x4e>
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	0f1b      	lsrs	r3, r3, #28
 8017bac:	b2da      	uxtb	r2, r3
 8017bae:	7dfb      	ldrb	r3, [r7, #23]
 8017bb0:	005b      	lsls	r3, r3, #1
 8017bb2:	4619      	mov	r1, r3
 8017bb4:	68bb      	ldr	r3, [r7, #8]
 8017bb6:	440b      	add	r3, r1
 8017bb8:	3237      	adds	r2, #55	@ 0x37
 8017bba:	b2d2      	uxtb	r2, r2
 8017bbc:	701a      	strb	r2, [r3, #0]
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	011b      	lsls	r3, r3, #4
 8017bc2:	60fb      	str	r3, [r7, #12]
 8017bc4:	7dfb      	ldrb	r3, [r7, #23]
 8017bc6:	005b      	lsls	r3, r3, #1
 8017bc8:	3301      	adds	r3, #1
 8017bca:	68ba      	ldr	r2, [r7, #8]
 8017bcc:	4413      	add	r3, r2
 8017bce:	2200      	movs	r2, #0
 8017bd0:	701a      	strb	r2, [r3, #0]
 8017bd2:	7dfb      	ldrb	r3, [r7, #23]
 8017bd4:	3301      	adds	r3, #1
 8017bd6:	75fb      	strb	r3, [r7, #23]
 8017bd8:	7dfa      	ldrb	r2, [r7, #23]
 8017bda:	79fb      	ldrb	r3, [r7, #7]
 8017bdc:	429a      	cmp	r2, r3
 8017bde:	d3d3      	bcc.n	8017b88 <IntToUnicode+0x18>
 8017be0:	bf00      	nop
 8017be2:	bf00      	nop
 8017be4:	371c      	adds	r7, #28
 8017be6:	46bd      	mov	sp, r7
 8017be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bec:	4770      	bx	lr
	...

08017bf0 <HAL_PCD_MspInit>:
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b0b2      	sub	sp, #200	@ 0xc8
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
 8017bf8:	f107 0310 	add.w	r3, r7, #16
 8017bfc:	22b8      	movs	r2, #184	@ 0xb8
 8017bfe:	2100      	movs	r1, #0
 8017c00:	4618      	mov	r0, r3
 8017c02:	f001 fea6 	bl	8019952 <memset>
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8017c74 <HAL_PCD_MspInit+0x84>)
 8017c0c:	4293      	cmp	r3, r2
 8017c0e:	d12c      	bne.n	8017c6a <HAL_PCD_MspInit+0x7a>
 8017c10:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017c14:	f04f 0300 	mov.w	r3, #0
 8017c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8017c1c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8017c20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8017c24:	f107 0310 	add.w	r3, r7, #16
 8017c28:	4618      	mov	r0, r3
 8017c2a:	f7f5 febb 	bl	800d9a4 <HAL_RCCEx_PeriphCLKConfig>
 8017c2e:	4603      	mov	r3, r0
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d001      	beq.n	8017c38 <HAL_PCD_MspInit+0x48>
 8017c34:	f7ea fa78 	bl	8002128 <Error_Handler>
 8017c38:	f7f4 ff3e 	bl	800cab8 <HAL_PWREx_EnableUSBVoltageDetector>
 8017c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8017c78 <HAL_PCD_MspInit+0x88>)
 8017c3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017c42:	4a0d      	ldr	r2, [pc, #52]	@ (8017c78 <HAL_PCD_MspInit+0x88>)
 8017c44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8017c48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8017c78 <HAL_PCD_MspInit+0x88>)
 8017c4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017c56:	60fb      	str	r3, [r7, #12]
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	2100      	movs	r1, #0
 8017c5e:	204d      	movs	r0, #77	@ 0x4d
 8017c60:	f7f0 fcf1 	bl	8008646 <HAL_NVIC_SetPriority>
 8017c64:	204d      	movs	r0, #77	@ 0x4d
 8017c66:	f7f0 fd08 	bl	800867a <HAL_NVIC_EnableIRQ>
 8017c6a:	bf00      	nop
 8017c6c:	37c8      	adds	r7, #200	@ 0xc8
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}
 8017c72:	bf00      	nop
 8017c74:	40040000 	.word	0x40040000
 8017c78:	58024400 	.word	0x58024400

08017c7c <HAL_PCD_SetupStageCallback>:
 8017c7c:	b580      	push	{r7, lr}
 8017c7e:	b082      	sub	sp, #8
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017c90:	4619      	mov	r1, r3
 8017c92:	4610      	mov	r0, r2
 8017c94:	f7fe fb23 	bl	80162de <USBD_LL_SetupStage>
 8017c98:	bf00      	nop
 8017c9a:	3708      	adds	r7, #8
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	bd80      	pop	{r7, pc}

08017ca0 <HAL_PCD_DataOutStageCallback>:
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b082      	sub	sp, #8
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	6078      	str	r0, [r7, #4]
 8017ca8:	460b      	mov	r3, r1
 8017caa:	70fb      	strb	r3, [r7, #3]
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017cb2:	78fa      	ldrb	r2, [r7, #3]
 8017cb4:	6879      	ldr	r1, [r7, #4]
 8017cb6:	4613      	mov	r3, r2
 8017cb8:	00db      	lsls	r3, r3, #3
 8017cba:	4413      	add	r3, r2
 8017cbc:	009b      	lsls	r3, r3, #2
 8017cbe:	440b      	add	r3, r1
 8017cc0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017cc4:	681a      	ldr	r2, [r3, #0]
 8017cc6:	78fb      	ldrb	r3, [r7, #3]
 8017cc8:	4619      	mov	r1, r3
 8017cca:	f7fe fb5d 	bl	8016388 <USBD_LL_DataOutStage>
 8017cce:	bf00      	nop
 8017cd0:	3708      	adds	r7, #8
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}

08017cd6 <HAL_PCD_DataInStageCallback>:
 8017cd6:	b580      	push	{r7, lr}
 8017cd8:	b082      	sub	sp, #8
 8017cda:	af00      	add	r7, sp, #0
 8017cdc:	6078      	str	r0, [r7, #4]
 8017cde:	460b      	mov	r3, r1
 8017ce0:	70fb      	strb	r3, [r7, #3]
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017ce8:	78fa      	ldrb	r2, [r7, #3]
 8017cea:	6879      	ldr	r1, [r7, #4]
 8017cec:	4613      	mov	r3, r2
 8017cee:	00db      	lsls	r3, r3, #3
 8017cf0:	4413      	add	r3, r2
 8017cf2:	009b      	lsls	r3, r3, #2
 8017cf4:	440b      	add	r3, r1
 8017cf6:	3320      	adds	r3, #32
 8017cf8:	681a      	ldr	r2, [r3, #0]
 8017cfa:	78fb      	ldrb	r3, [r7, #3]
 8017cfc:	4619      	mov	r1, r3
 8017cfe:	f7fe fbf6 	bl	80164ee <USBD_LL_DataInStage>
 8017d02:	bf00      	nop
 8017d04:	3708      	adds	r7, #8
 8017d06:	46bd      	mov	sp, r7
 8017d08:	bd80      	pop	{r7, pc}

08017d0a <HAL_PCD_SOFCallback>:
 8017d0a:	b580      	push	{r7, lr}
 8017d0c:	b082      	sub	sp, #8
 8017d0e:	af00      	add	r7, sp, #0
 8017d10:	6078      	str	r0, [r7, #4]
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d18:	4618      	mov	r0, r3
 8017d1a:	f7fe fd30 	bl	801677e <USBD_LL_SOF>
 8017d1e:	bf00      	nop
 8017d20:	3708      	adds	r7, #8
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bd80      	pop	{r7, pc}

08017d26 <HAL_PCD_ResetCallback>:
 8017d26:	b580      	push	{r7, lr}
 8017d28:	b084      	sub	sp, #16
 8017d2a:	af00      	add	r7, sp, #0
 8017d2c:	6078      	str	r0, [r7, #4]
 8017d2e:	2301      	movs	r3, #1
 8017d30:	73fb      	strb	r3, [r7, #15]
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	79db      	ldrb	r3, [r3, #7]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d102      	bne.n	8017d40 <HAL_PCD_ResetCallback+0x1a>
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	73fb      	strb	r3, [r7, #15]
 8017d3e:	e008      	b.n	8017d52 <HAL_PCD_ResetCallback+0x2c>
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	79db      	ldrb	r3, [r3, #7]
 8017d44:	2b02      	cmp	r3, #2
 8017d46:	d102      	bne.n	8017d4e <HAL_PCD_ResetCallback+0x28>
 8017d48:	2301      	movs	r3, #1
 8017d4a:	73fb      	strb	r3, [r7, #15]
 8017d4c:	e001      	b.n	8017d52 <HAL_PCD_ResetCallback+0x2c>
 8017d4e:	f7ea f9eb 	bl	8002128 <Error_Handler>
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d58:	7bfa      	ldrb	r2, [r7, #15]
 8017d5a:	4611      	mov	r1, r2
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	f7fe fcca 	bl	80166f6 <USBD_LL_SetSpeed>
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d68:	4618      	mov	r0, r3
 8017d6a:	f7fe fc72 	bl	8016652 <USBD_LL_Reset>
 8017d6e:	bf00      	nop
 8017d70:	3710      	adds	r7, #16
 8017d72:	46bd      	mov	sp, r7
 8017d74:	bd80      	pop	{r7, pc}
	...

08017d78 <HAL_PCD_SuspendCallback>:
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b082      	sub	sp, #8
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d86:	4618      	mov	r0, r3
 8017d88:	f7fe fcc5 	bl	8016716 <USBD_LL_Suspend>
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	687a      	ldr	r2, [r7, #4]
 8017d98:	6812      	ldr	r2, [r2, #0]
 8017d9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017d9e:	f043 0301 	orr.w	r3, r3, #1
 8017da2:	6013      	str	r3, [r2, #0]
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	7adb      	ldrb	r3, [r3, #11]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d005      	beq.n	8017db8 <HAL_PCD_SuspendCallback+0x40>
 8017dac:	4b04      	ldr	r3, [pc, #16]	@ (8017dc0 <HAL_PCD_SuspendCallback+0x48>)
 8017dae:	691b      	ldr	r3, [r3, #16]
 8017db0:	4a03      	ldr	r2, [pc, #12]	@ (8017dc0 <HAL_PCD_SuspendCallback+0x48>)
 8017db2:	f043 0306 	orr.w	r3, r3, #6
 8017db6:	6113      	str	r3, [r2, #16]
 8017db8:	bf00      	nop
 8017dba:	3708      	adds	r7, #8
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bd80      	pop	{r7, pc}
 8017dc0:	e000ed00 	.word	0xe000ed00

08017dc4 <HAL_PCD_ResumeCallback>:
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b082      	sub	sp, #8
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	6078      	str	r0, [r7, #4]
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	f7fe fcbb 	bl	801674e <USBD_LL_Resume>
 8017dd8:	bf00      	nop
 8017dda:	3708      	adds	r7, #8
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	bd80      	pop	{r7, pc}

08017de0 <HAL_PCD_ISOOUTIncompleteCallback>:
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b082      	sub	sp, #8
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
 8017de8:	460b      	mov	r3, r1
 8017dea:	70fb      	strb	r3, [r7, #3]
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017df2:	78fa      	ldrb	r2, [r7, #3]
 8017df4:	4611      	mov	r1, r2
 8017df6:	4618      	mov	r0, r3
 8017df8:	f7fe fd13 	bl	8016822 <USBD_LL_IsoOUTIncomplete>
 8017dfc:	bf00      	nop
 8017dfe:	3708      	adds	r7, #8
 8017e00:	46bd      	mov	sp, r7
 8017e02:	bd80      	pop	{r7, pc}

08017e04 <HAL_PCD_ISOINIncompleteCallback>:
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b082      	sub	sp, #8
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	6078      	str	r0, [r7, #4]
 8017e0c:	460b      	mov	r3, r1
 8017e0e:	70fb      	strb	r3, [r7, #3]
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017e16:	78fa      	ldrb	r2, [r7, #3]
 8017e18:	4611      	mov	r1, r2
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	f7fe fccf 	bl	80167be <USBD_LL_IsoINIncomplete>
 8017e20:	bf00      	nop
 8017e22:	3708      	adds	r7, #8
 8017e24:	46bd      	mov	sp, r7
 8017e26:	bd80      	pop	{r7, pc}

08017e28 <HAL_PCD_ConnectCallback>:
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b082      	sub	sp, #8
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017e36:	4618      	mov	r0, r3
 8017e38:	f7fe fd25 	bl	8016886 <USBD_LL_DevConnected>
 8017e3c:	bf00      	nop
 8017e3e:	3708      	adds	r7, #8
 8017e40:	46bd      	mov	sp, r7
 8017e42:	bd80      	pop	{r7, pc}

08017e44 <HAL_PCD_DisconnectCallback>:
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b082      	sub	sp, #8
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	6078      	str	r0, [r7, #4]
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017e52:	4618      	mov	r0, r3
 8017e54:	f7fe fd22 	bl	801689c <USBD_LL_DevDisconnected>
 8017e58:	bf00      	nop
 8017e5a:	3708      	adds	r7, #8
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bd80      	pop	{r7, pc}

08017e60 <USBD_LL_Init>:
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b082      	sub	sp, #8
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	781b      	ldrb	r3, [r3, #0]
 8017e6c:	2b01      	cmp	r3, #1
 8017e6e:	d140      	bne.n	8017ef2 <USBD_LL_Init+0x92>
 8017e70:	4a22      	ldr	r2, [pc, #136]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	4a20      	ldr	r2, [pc, #128]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017e7c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
 8017e80:	4b1e      	ldr	r3, [pc, #120]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017e82:	4a1f      	ldr	r2, [pc, #124]	@ (8017f00 <USBD_LL_Init+0xa0>)
 8017e84:	601a      	str	r2, [r3, #0]
 8017e86:	4b1d      	ldr	r3, [pc, #116]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017e88:	2209      	movs	r2, #9
 8017e8a:	711a      	strb	r2, [r3, #4]
 8017e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017e8e:	2202      	movs	r2, #2
 8017e90:	71da      	strb	r2, [r3, #7]
 8017e92:	4b1a      	ldr	r3, [pc, #104]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017e94:	2200      	movs	r2, #0
 8017e96:	719a      	strb	r2, [r3, #6]
 8017e98:	4b18      	ldr	r3, [pc, #96]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017e9a:	2202      	movs	r2, #2
 8017e9c:	725a      	strb	r2, [r3, #9]
 8017e9e:	4b17      	ldr	r3, [pc, #92]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	729a      	strb	r2, [r3, #10]
 8017ea4:	4b15      	ldr	r3, [pc, #84]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	72da      	strb	r2, [r3, #11]
 8017eaa:	4b14      	ldr	r3, [pc, #80]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017eac:	2200      	movs	r2, #0
 8017eae:	731a      	strb	r2, [r3, #12]
 8017eb0:	4b12      	ldr	r3, [pc, #72]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	739a      	strb	r2, [r3, #14]
 8017eb6:	4b11      	ldr	r3, [pc, #68]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017eb8:	2200      	movs	r2, #0
 8017eba:	73da      	strb	r2, [r3, #15]
 8017ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	741a      	strb	r2, [r3, #16]
 8017ec2:	480e      	ldr	r0, [pc, #56]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017ec4:	f7f3 fb1f 	bl	800b506 <HAL_PCD_Init>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d001      	beq.n	8017ed2 <USBD_LL_Init+0x72>
 8017ece:	f7ea f92b 	bl	8002128 <Error_Handler>
 8017ed2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017ed6:	4809      	ldr	r0, [pc, #36]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017ed8:	f7f4 fd73 	bl	800c9c2 <HAL_PCDEx_SetRxFiFo>
 8017edc:	2280      	movs	r2, #128	@ 0x80
 8017ede:	2100      	movs	r1, #0
 8017ee0:	4806      	ldr	r0, [pc, #24]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017ee2:	f7f4 fd27 	bl	800c934 <HAL_PCDEx_SetTxFiFo>
 8017ee6:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8017eea:	2101      	movs	r1, #1
 8017eec:	4803      	ldr	r0, [pc, #12]	@ (8017efc <USBD_LL_Init+0x9c>)
 8017eee:	f7f4 fd21 	bl	800c934 <HAL_PCDEx_SetTxFiFo>
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	3708      	adds	r7, #8
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bd80      	pop	{r7, pc}
 8017efc:	24005b1c 	.word	0x24005b1c
 8017f00:	40040000 	.word	0x40040000

08017f04 <USBD_LL_Start>:
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b084      	sub	sp, #16
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	73fb      	strb	r3, [r7, #15]
 8017f10:	2300      	movs	r3, #0
 8017f12:	73bb      	strb	r3, [r7, #14]
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f7f3 fbff 	bl	800b71e <HAL_PCD_Start>
 8017f20:	4603      	mov	r3, r0
 8017f22:	73fb      	strb	r3, [r7, #15]
 8017f24:	7bfb      	ldrb	r3, [r7, #15]
 8017f26:	4618      	mov	r0, r3
 8017f28:	f000 f942 	bl	80181b0 <USBD_Get_USB_Status>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	73bb      	strb	r3, [r7, #14]
 8017f30:	7bbb      	ldrb	r3, [r7, #14]
 8017f32:	4618      	mov	r0, r3
 8017f34:	3710      	adds	r7, #16
 8017f36:	46bd      	mov	sp, r7
 8017f38:	bd80      	pop	{r7, pc}

08017f3a <USBD_LL_OpenEP>:
 8017f3a:	b580      	push	{r7, lr}
 8017f3c:	b084      	sub	sp, #16
 8017f3e:	af00      	add	r7, sp, #0
 8017f40:	6078      	str	r0, [r7, #4]
 8017f42:	4608      	mov	r0, r1
 8017f44:	4611      	mov	r1, r2
 8017f46:	461a      	mov	r2, r3
 8017f48:	4603      	mov	r3, r0
 8017f4a:	70fb      	strb	r3, [r7, #3]
 8017f4c:	460b      	mov	r3, r1
 8017f4e:	70bb      	strb	r3, [r7, #2]
 8017f50:	4613      	mov	r3, r2
 8017f52:	803b      	strh	r3, [r7, #0]
 8017f54:	2300      	movs	r3, #0
 8017f56:	73fb      	strb	r3, [r7, #15]
 8017f58:	2300      	movs	r3, #0
 8017f5a:	73bb      	strb	r3, [r7, #14]
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017f62:	78bb      	ldrb	r3, [r7, #2]
 8017f64:	883a      	ldrh	r2, [r7, #0]
 8017f66:	78f9      	ldrb	r1, [r7, #3]
 8017f68:	f7f4 f900 	bl	800c16c <HAL_PCD_EP_Open>
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	73fb      	strb	r3, [r7, #15]
 8017f70:	7bfb      	ldrb	r3, [r7, #15]
 8017f72:	4618      	mov	r0, r3
 8017f74:	f000 f91c 	bl	80181b0 <USBD_Get_USB_Status>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	73bb      	strb	r3, [r7, #14]
 8017f7c:	7bbb      	ldrb	r3, [r7, #14]
 8017f7e:	4618      	mov	r0, r3
 8017f80:	3710      	adds	r7, #16
 8017f82:	46bd      	mov	sp, r7
 8017f84:	bd80      	pop	{r7, pc}

08017f86 <USBD_LL_CloseEP>:
 8017f86:	b580      	push	{r7, lr}
 8017f88:	b084      	sub	sp, #16
 8017f8a:	af00      	add	r7, sp, #0
 8017f8c:	6078      	str	r0, [r7, #4]
 8017f8e:	460b      	mov	r3, r1
 8017f90:	70fb      	strb	r3, [r7, #3]
 8017f92:	2300      	movs	r3, #0
 8017f94:	73fb      	strb	r3, [r7, #15]
 8017f96:	2300      	movs	r3, #0
 8017f98:	73bb      	strb	r3, [r7, #14]
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017fa0:	78fa      	ldrb	r2, [r7, #3]
 8017fa2:	4611      	mov	r1, r2
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	f7f4 f949 	bl	800c23c <HAL_PCD_EP_Close>
 8017faa:	4603      	mov	r3, r0
 8017fac:	73fb      	strb	r3, [r7, #15]
 8017fae:	7bfb      	ldrb	r3, [r7, #15]
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f000 f8fd 	bl	80181b0 <USBD_Get_USB_Status>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	73bb      	strb	r3, [r7, #14]
 8017fba:	7bbb      	ldrb	r3, [r7, #14]
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	3710      	adds	r7, #16
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}

08017fc4 <USBD_LL_StallEP>:
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b084      	sub	sp, #16
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6078      	str	r0, [r7, #4]
 8017fcc:	460b      	mov	r3, r1
 8017fce:	70fb      	strb	r3, [r7, #3]
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	73fb      	strb	r3, [r7, #15]
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	73bb      	strb	r3, [r7, #14]
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017fde:	78fa      	ldrb	r2, [r7, #3]
 8017fe0:	4611      	mov	r1, r2
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	f7f4 fa01 	bl	800c3ea <HAL_PCD_EP_SetStall>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	73fb      	strb	r3, [r7, #15]
 8017fec:	7bfb      	ldrb	r3, [r7, #15]
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f000 f8de 	bl	80181b0 <USBD_Get_USB_Status>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	73bb      	strb	r3, [r7, #14]
 8017ff8:	7bbb      	ldrb	r3, [r7, #14]
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	3710      	adds	r7, #16
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd80      	pop	{r7, pc}

08018002 <USBD_LL_ClearStallEP>:
 8018002:	b580      	push	{r7, lr}
 8018004:	b084      	sub	sp, #16
 8018006:	af00      	add	r7, sp, #0
 8018008:	6078      	str	r0, [r7, #4]
 801800a:	460b      	mov	r3, r1
 801800c:	70fb      	strb	r3, [r7, #3]
 801800e:	2300      	movs	r3, #0
 8018010:	73fb      	strb	r3, [r7, #15]
 8018012:	2300      	movs	r3, #0
 8018014:	73bb      	strb	r3, [r7, #14]
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801801c:	78fa      	ldrb	r2, [r7, #3]
 801801e:	4611      	mov	r1, r2
 8018020:	4618      	mov	r0, r3
 8018022:	f7f4 fa45 	bl	800c4b0 <HAL_PCD_EP_ClrStall>
 8018026:	4603      	mov	r3, r0
 8018028:	73fb      	strb	r3, [r7, #15]
 801802a:	7bfb      	ldrb	r3, [r7, #15]
 801802c:	4618      	mov	r0, r3
 801802e:	f000 f8bf 	bl	80181b0 <USBD_Get_USB_Status>
 8018032:	4603      	mov	r3, r0
 8018034:	73bb      	strb	r3, [r7, #14]
 8018036:	7bbb      	ldrb	r3, [r7, #14]
 8018038:	4618      	mov	r0, r3
 801803a:	3710      	adds	r7, #16
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}

08018040 <USBD_LL_IsStallEP>:
 8018040:	b480      	push	{r7}
 8018042:	b085      	sub	sp, #20
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
 8018048:	460b      	mov	r3, r1
 801804a:	70fb      	strb	r3, [r7, #3]
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018052:	60fb      	str	r3, [r7, #12]
 8018054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018058:	2b00      	cmp	r3, #0
 801805a:	da0b      	bge.n	8018074 <USBD_LL_IsStallEP+0x34>
 801805c:	78fb      	ldrb	r3, [r7, #3]
 801805e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018062:	68f9      	ldr	r1, [r7, #12]
 8018064:	4613      	mov	r3, r2
 8018066:	00db      	lsls	r3, r3, #3
 8018068:	4413      	add	r3, r2
 801806a:	009b      	lsls	r3, r3, #2
 801806c:	440b      	add	r3, r1
 801806e:	3316      	adds	r3, #22
 8018070:	781b      	ldrb	r3, [r3, #0]
 8018072:	e00b      	b.n	801808c <USBD_LL_IsStallEP+0x4c>
 8018074:	78fb      	ldrb	r3, [r7, #3]
 8018076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801807a:	68f9      	ldr	r1, [r7, #12]
 801807c:	4613      	mov	r3, r2
 801807e:	00db      	lsls	r3, r3, #3
 8018080:	4413      	add	r3, r2
 8018082:	009b      	lsls	r3, r3, #2
 8018084:	440b      	add	r3, r1
 8018086:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801808a:	781b      	ldrb	r3, [r3, #0]
 801808c:	4618      	mov	r0, r3
 801808e:	3714      	adds	r7, #20
 8018090:	46bd      	mov	sp, r7
 8018092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018096:	4770      	bx	lr

08018098 <USBD_LL_SetUSBAddress>:
 8018098:	b580      	push	{r7, lr}
 801809a:	b084      	sub	sp, #16
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
 80180a0:	460b      	mov	r3, r1
 80180a2:	70fb      	strb	r3, [r7, #3]
 80180a4:	2300      	movs	r3, #0
 80180a6:	73fb      	strb	r3, [r7, #15]
 80180a8:	2300      	movs	r3, #0
 80180aa:	73bb      	strb	r3, [r7, #14]
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80180b2:	78fa      	ldrb	r2, [r7, #3]
 80180b4:	4611      	mov	r1, r2
 80180b6:	4618      	mov	r0, r3
 80180b8:	f7f4 f834 	bl	800c124 <HAL_PCD_SetAddress>
 80180bc:	4603      	mov	r3, r0
 80180be:	73fb      	strb	r3, [r7, #15]
 80180c0:	7bfb      	ldrb	r3, [r7, #15]
 80180c2:	4618      	mov	r0, r3
 80180c4:	f000 f874 	bl	80181b0 <USBD_Get_USB_Status>
 80180c8:	4603      	mov	r3, r0
 80180ca:	73bb      	strb	r3, [r7, #14]
 80180cc:	7bbb      	ldrb	r3, [r7, #14]
 80180ce:	4618      	mov	r0, r3
 80180d0:	3710      	adds	r7, #16
 80180d2:	46bd      	mov	sp, r7
 80180d4:	bd80      	pop	{r7, pc}

080180d6 <USBD_LL_Transmit>:
 80180d6:	b580      	push	{r7, lr}
 80180d8:	b086      	sub	sp, #24
 80180da:	af00      	add	r7, sp, #0
 80180dc:	60f8      	str	r0, [r7, #12]
 80180de:	607a      	str	r2, [r7, #4]
 80180e0:	603b      	str	r3, [r7, #0]
 80180e2:	460b      	mov	r3, r1
 80180e4:	72fb      	strb	r3, [r7, #11]
 80180e6:	2300      	movs	r3, #0
 80180e8:	75fb      	strb	r3, [r7, #23]
 80180ea:	2300      	movs	r3, #0
 80180ec:	75bb      	strb	r3, [r7, #22]
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80180f4:	7af9      	ldrb	r1, [r7, #11]
 80180f6:	683b      	ldr	r3, [r7, #0]
 80180f8:	687a      	ldr	r2, [r7, #4]
 80180fa:	f7f4 f93c 	bl	800c376 <HAL_PCD_EP_Transmit>
 80180fe:	4603      	mov	r3, r0
 8018100:	75fb      	strb	r3, [r7, #23]
 8018102:	7dfb      	ldrb	r3, [r7, #23]
 8018104:	4618      	mov	r0, r3
 8018106:	f000 f853 	bl	80181b0 <USBD_Get_USB_Status>
 801810a:	4603      	mov	r3, r0
 801810c:	75bb      	strb	r3, [r7, #22]
 801810e:	7dbb      	ldrb	r3, [r7, #22]
 8018110:	4618      	mov	r0, r3
 8018112:	3718      	adds	r7, #24
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}

08018118 <USBD_LL_PrepareReceive>:
 8018118:	b580      	push	{r7, lr}
 801811a:	b086      	sub	sp, #24
 801811c:	af00      	add	r7, sp, #0
 801811e:	60f8      	str	r0, [r7, #12]
 8018120:	607a      	str	r2, [r7, #4]
 8018122:	603b      	str	r3, [r7, #0]
 8018124:	460b      	mov	r3, r1
 8018126:	72fb      	strb	r3, [r7, #11]
 8018128:	2300      	movs	r3, #0
 801812a:	75fb      	strb	r3, [r7, #23]
 801812c:	2300      	movs	r3, #0
 801812e:	75bb      	strb	r3, [r7, #22]
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018136:	7af9      	ldrb	r1, [r7, #11]
 8018138:	683b      	ldr	r3, [r7, #0]
 801813a:	687a      	ldr	r2, [r7, #4]
 801813c:	f7f4 f8c8 	bl	800c2d0 <HAL_PCD_EP_Receive>
 8018140:	4603      	mov	r3, r0
 8018142:	75fb      	strb	r3, [r7, #23]
 8018144:	7dfb      	ldrb	r3, [r7, #23]
 8018146:	4618      	mov	r0, r3
 8018148:	f000 f832 	bl	80181b0 <USBD_Get_USB_Status>
 801814c:	4603      	mov	r3, r0
 801814e:	75bb      	strb	r3, [r7, #22]
 8018150:	7dbb      	ldrb	r3, [r7, #22]
 8018152:	4618      	mov	r0, r3
 8018154:	3718      	adds	r7, #24
 8018156:	46bd      	mov	sp, r7
 8018158:	bd80      	pop	{r7, pc}

0801815a <USBD_LL_GetRxDataSize>:
 801815a:	b580      	push	{r7, lr}
 801815c:	b082      	sub	sp, #8
 801815e:	af00      	add	r7, sp, #0
 8018160:	6078      	str	r0, [r7, #4]
 8018162:	460b      	mov	r3, r1
 8018164:	70fb      	strb	r3, [r7, #3]
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801816c:	78fa      	ldrb	r2, [r7, #3]
 801816e:	4611      	mov	r1, r2
 8018170:	4618      	mov	r0, r3
 8018172:	f7f4 f8e8 	bl	800c346 <HAL_PCD_EP_GetRxCount>
 8018176:	4603      	mov	r3, r0
 8018178:	4618      	mov	r0, r3
 801817a:	3708      	adds	r7, #8
 801817c:	46bd      	mov	sp, r7
 801817e:	bd80      	pop	{r7, pc}

08018180 <USBD_static_malloc>:
 8018180:	b480      	push	{r7}
 8018182:	b083      	sub	sp, #12
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
 8018188:	4b03      	ldr	r3, [pc, #12]	@ (8018198 <USBD_static_malloc+0x18>)
 801818a:	4618      	mov	r0, r3
 801818c:	370c      	adds	r7, #12
 801818e:	46bd      	mov	sp, r7
 8018190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018194:	4770      	bx	lr
 8018196:	bf00      	nop
 8018198:	24006000 	.word	0x24006000

0801819c <USBD_static_free>:
 801819c:	b480      	push	{r7}
 801819e:	b083      	sub	sp, #12
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	6078      	str	r0, [r7, #4]
 80181a4:	bf00      	nop
 80181a6:	370c      	adds	r7, #12
 80181a8:	46bd      	mov	sp, r7
 80181aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ae:	4770      	bx	lr

080181b0 <USBD_Get_USB_Status>:
 80181b0:	b480      	push	{r7}
 80181b2:	b085      	sub	sp, #20
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	4603      	mov	r3, r0
 80181b8:	71fb      	strb	r3, [r7, #7]
 80181ba:	2300      	movs	r3, #0
 80181bc:	73fb      	strb	r3, [r7, #15]
 80181be:	79fb      	ldrb	r3, [r7, #7]
 80181c0:	2b03      	cmp	r3, #3
 80181c2:	d817      	bhi.n	80181f4 <USBD_Get_USB_Status+0x44>
 80181c4:	a201      	add	r2, pc, #4	@ (adr r2, 80181cc <USBD_Get_USB_Status+0x1c>)
 80181c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181ca:	bf00      	nop
 80181cc:	080181dd 	.word	0x080181dd
 80181d0:	080181e3 	.word	0x080181e3
 80181d4:	080181e9 	.word	0x080181e9
 80181d8:	080181ef 	.word	0x080181ef
 80181dc:	2300      	movs	r3, #0
 80181de:	73fb      	strb	r3, [r7, #15]
 80181e0:	e00b      	b.n	80181fa <USBD_Get_USB_Status+0x4a>
 80181e2:	2303      	movs	r3, #3
 80181e4:	73fb      	strb	r3, [r7, #15]
 80181e6:	e008      	b.n	80181fa <USBD_Get_USB_Status+0x4a>
 80181e8:	2301      	movs	r3, #1
 80181ea:	73fb      	strb	r3, [r7, #15]
 80181ec:	e005      	b.n	80181fa <USBD_Get_USB_Status+0x4a>
 80181ee:	2303      	movs	r3, #3
 80181f0:	73fb      	strb	r3, [r7, #15]
 80181f2:	e002      	b.n	80181fa <USBD_Get_USB_Status+0x4a>
 80181f4:	2303      	movs	r3, #3
 80181f6:	73fb      	strb	r3, [r7, #15]
 80181f8:	bf00      	nop
 80181fa:	7bfb      	ldrb	r3, [r7, #15]
 80181fc:	4618      	mov	r0, r3
 80181fe:	3714      	adds	r7, #20
 8018200:	46bd      	mov	sp, r7
 8018202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018206:	4770      	bx	lr

08018208 <atof>:
 8018208:	2100      	movs	r1, #0
 801820a:	f000 bdb7 	b.w	8018d7c <strtod>

0801820e <atoi>:
 801820e:	220a      	movs	r2, #10
 8018210:	2100      	movs	r1, #0
 8018212:	f000 be39 	b.w	8018e88 <strtol>

08018216 <sulp>:
 8018216:	b570      	push	{r4, r5, r6, lr}
 8018218:	4604      	mov	r4, r0
 801821a:	460d      	mov	r5, r1
 801821c:	4616      	mov	r6, r2
 801821e:	ec45 4b10 	vmov	d0, r4, r5
 8018222:	f003 f9eb 	bl	801b5fc <__ulp>
 8018226:	b17e      	cbz	r6, 8018248 <sulp+0x32>
 8018228:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801822c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018230:	2b00      	cmp	r3, #0
 8018232:	dd09      	ble.n	8018248 <sulp+0x32>
 8018234:	051b      	lsls	r3, r3, #20
 8018236:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801823a:	2000      	movs	r0, #0
 801823c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8018240:	ec41 0b17 	vmov	d7, r0, r1
 8018244:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018248:	bd70      	pop	{r4, r5, r6, pc}
 801824a:	0000      	movs	r0, r0
 801824c:	0000      	movs	r0, r0
	...

08018250 <_strtod_l>:
 8018250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018254:	ed2d 8b0a 	vpush	{d8-d12}
 8018258:	b097      	sub	sp, #92	@ 0x5c
 801825a:	4688      	mov	r8, r1
 801825c:	920e      	str	r2, [sp, #56]	@ 0x38
 801825e:	2200      	movs	r2, #0
 8018260:	9212      	str	r2, [sp, #72]	@ 0x48
 8018262:	9005      	str	r0, [sp, #20]
 8018264:	f04f 0a00 	mov.w	sl, #0
 8018268:	f04f 0b00 	mov.w	fp, #0
 801826c:	460a      	mov	r2, r1
 801826e:	9211      	str	r2, [sp, #68]	@ 0x44
 8018270:	7811      	ldrb	r1, [r2, #0]
 8018272:	292b      	cmp	r1, #43	@ 0x2b
 8018274:	d04c      	beq.n	8018310 <_strtod_l+0xc0>
 8018276:	d839      	bhi.n	80182ec <_strtod_l+0x9c>
 8018278:	290d      	cmp	r1, #13
 801827a:	d833      	bhi.n	80182e4 <_strtod_l+0x94>
 801827c:	2908      	cmp	r1, #8
 801827e:	d833      	bhi.n	80182e8 <_strtod_l+0x98>
 8018280:	2900      	cmp	r1, #0
 8018282:	d03c      	beq.n	80182fe <_strtod_l+0xae>
 8018284:	2200      	movs	r2, #0
 8018286:	9208      	str	r2, [sp, #32]
 8018288:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801828a:	782a      	ldrb	r2, [r5, #0]
 801828c:	2a30      	cmp	r2, #48	@ 0x30
 801828e:	f040 80b5 	bne.w	80183fc <_strtod_l+0x1ac>
 8018292:	786a      	ldrb	r2, [r5, #1]
 8018294:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018298:	2a58      	cmp	r2, #88	@ 0x58
 801829a:	d170      	bne.n	801837e <_strtod_l+0x12e>
 801829c:	9302      	str	r3, [sp, #8]
 801829e:	9b08      	ldr	r3, [sp, #32]
 80182a0:	9301      	str	r3, [sp, #4]
 80182a2:	ab12      	add	r3, sp, #72	@ 0x48
 80182a4:	9300      	str	r3, [sp, #0]
 80182a6:	4a8b      	ldr	r2, [pc, #556]	@ (80184d4 <_strtod_l+0x284>)
 80182a8:	9805      	ldr	r0, [sp, #20]
 80182aa:	ab13      	add	r3, sp, #76	@ 0x4c
 80182ac:	a911      	add	r1, sp, #68	@ 0x44
 80182ae:	f002 fa97 	bl	801a7e0 <__gethex>
 80182b2:	f010 060f 	ands.w	r6, r0, #15
 80182b6:	4604      	mov	r4, r0
 80182b8:	d005      	beq.n	80182c6 <_strtod_l+0x76>
 80182ba:	2e06      	cmp	r6, #6
 80182bc:	d12a      	bne.n	8018314 <_strtod_l+0xc4>
 80182be:	3501      	adds	r5, #1
 80182c0:	2300      	movs	r3, #0
 80182c2:	9511      	str	r5, [sp, #68]	@ 0x44
 80182c4:	9308      	str	r3, [sp, #32]
 80182c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	f040 852f 	bne.w	8018d2c <_strtod_l+0xadc>
 80182ce:	9b08      	ldr	r3, [sp, #32]
 80182d0:	ec4b ab10 	vmov	d0, sl, fp
 80182d4:	b1cb      	cbz	r3, 801830a <_strtod_l+0xba>
 80182d6:	eeb1 0b40 	vneg.f64	d0, d0
 80182da:	b017      	add	sp, #92	@ 0x5c
 80182dc:	ecbd 8b0a 	vpop	{d8-d12}
 80182e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182e4:	2920      	cmp	r1, #32
 80182e6:	d1cd      	bne.n	8018284 <_strtod_l+0x34>
 80182e8:	3201      	adds	r2, #1
 80182ea:	e7c0      	b.n	801826e <_strtod_l+0x1e>
 80182ec:	292d      	cmp	r1, #45	@ 0x2d
 80182ee:	d1c9      	bne.n	8018284 <_strtod_l+0x34>
 80182f0:	2101      	movs	r1, #1
 80182f2:	9108      	str	r1, [sp, #32]
 80182f4:	1c51      	adds	r1, r2, #1
 80182f6:	9111      	str	r1, [sp, #68]	@ 0x44
 80182f8:	7852      	ldrb	r2, [r2, #1]
 80182fa:	2a00      	cmp	r2, #0
 80182fc:	d1c4      	bne.n	8018288 <_strtod_l+0x38>
 80182fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018300:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8018304:	2b00      	cmp	r3, #0
 8018306:	f040 850f 	bne.w	8018d28 <_strtod_l+0xad8>
 801830a:	ec4b ab10 	vmov	d0, sl, fp
 801830e:	e7e4      	b.n	80182da <_strtod_l+0x8a>
 8018310:	2100      	movs	r1, #0
 8018312:	e7ee      	b.n	80182f2 <_strtod_l+0xa2>
 8018314:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018316:	b13a      	cbz	r2, 8018328 <_strtod_l+0xd8>
 8018318:	2135      	movs	r1, #53	@ 0x35
 801831a:	a814      	add	r0, sp, #80	@ 0x50
 801831c:	f003 fa65 	bl	801b7ea <__copybits>
 8018320:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018322:	9805      	ldr	r0, [sp, #20]
 8018324:	f002 fe36 	bl	801af94 <_Bfree>
 8018328:	1e73      	subs	r3, r6, #1
 801832a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801832c:	2b04      	cmp	r3, #4
 801832e:	d806      	bhi.n	801833e <_strtod_l+0xee>
 8018330:	e8df f003 	tbb	[pc, r3]
 8018334:	201d0314 	.word	0x201d0314
 8018338:	14          	.byte	0x14
 8018339:	00          	.byte	0x00
 801833a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801833e:	05e3      	lsls	r3, r4, #23
 8018340:	bf48      	it	mi
 8018342:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8018346:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801834a:	0d1b      	lsrs	r3, r3, #20
 801834c:	051b      	lsls	r3, r3, #20
 801834e:	2b00      	cmp	r3, #0
 8018350:	d1b9      	bne.n	80182c6 <_strtod_l+0x76>
 8018352:	f001 fb6f 	bl	8019a34 <__errno>
 8018356:	2322      	movs	r3, #34	@ 0x22
 8018358:	6003      	str	r3, [r0, #0]
 801835a:	e7b4      	b.n	80182c6 <_strtod_l+0x76>
 801835c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8018360:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8018364:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8018368:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801836c:	e7e7      	b.n	801833e <_strtod_l+0xee>
 801836e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80184dc <_strtod_l+0x28c>
 8018372:	e7e4      	b.n	801833e <_strtod_l+0xee>
 8018374:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8018378:	f04f 3aff 	mov.w	sl, #4294967295
 801837c:	e7df      	b.n	801833e <_strtod_l+0xee>
 801837e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018380:	1c5a      	adds	r2, r3, #1
 8018382:	9211      	str	r2, [sp, #68]	@ 0x44
 8018384:	785b      	ldrb	r3, [r3, #1]
 8018386:	2b30      	cmp	r3, #48	@ 0x30
 8018388:	d0f9      	beq.n	801837e <_strtod_l+0x12e>
 801838a:	2b00      	cmp	r3, #0
 801838c:	d09b      	beq.n	80182c6 <_strtod_l+0x76>
 801838e:	2301      	movs	r3, #1
 8018390:	2600      	movs	r6, #0
 8018392:	9307      	str	r3, [sp, #28]
 8018394:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018396:	930a      	str	r3, [sp, #40]	@ 0x28
 8018398:	46b1      	mov	r9, r6
 801839a:	4635      	mov	r5, r6
 801839c:	220a      	movs	r2, #10
 801839e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80183a0:	7804      	ldrb	r4, [r0, #0]
 80183a2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80183a6:	b2d9      	uxtb	r1, r3
 80183a8:	2909      	cmp	r1, #9
 80183aa:	d929      	bls.n	8018400 <_strtod_l+0x1b0>
 80183ac:	494a      	ldr	r1, [pc, #296]	@ (80184d8 <_strtod_l+0x288>)
 80183ae:	2201      	movs	r2, #1
 80183b0:	f001 fae4 	bl	801997c <strncmp>
 80183b4:	b378      	cbz	r0, 8018416 <_strtod_l+0x1c6>
 80183b6:	2000      	movs	r0, #0
 80183b8:	4622      	mov	r2, r4
 80183ba:	462b      	mov	r3, r5
 80183bc:	4607      	mov	r7, r0
 80183be:	9006      	str	r0, [sp, #24]
 80183c0:	2a65      	cmp	r2, #101	@ 0x65
 80183c2:	d001      	beq.n	80183c8 <_strtod_l+0x178>
 80183c4:	2a45      	cmp	r2, #69	@ 0x45
 80183c6:	d117      	bne.n	80183f8 <_strtod_l+0x1a8>
 80183c8:	b91b      	cbnz	r3, 80183d2 <_strtod_l+0x182>
 80183ca:	9b07      	ldr	r3, [sp, #28]
 80183cc:	4303      	orrs	r3, r0
 80183ce:	d096      	beq.n	80182fe <_strtod_l+0xae>
 80183d0:	2300      	movs	r3, #0
 80183d2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80183d6:	f108 0201 	add.w	r2, r8, #1
 80183da:	9211      	str	r2, [sp, #68]	@ 0x44
 80183dc:	f898 2001 	ldrb.w	r2, [r8, #1]
 80183e0:	2a2b      	cmp	r2, #43	@ 0x2b
 80183e2:	d06b      	beq.n	80184bc <_strtod_l+0x26c>
 80183e4:	2a2d      	cmp	r2, #45	@ 0x2d
 80183e6:	d071      	beq.n	80184cc <_strtod_l+0x27c>
 80183e8:	f04f 0e00 	mov.w	lr, #0
 80183ec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80183f0:	2c09      	cmp	r4, #9
 80183f2:	d979      	bls.n	80184e8 <_strtod_l+0x298>
 80183f4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80183f8:	2400      	movs	r4, #0
 80183fa:	e094      	b.n	8018526 <_strtod_l+0x2d6>
 80183fc:	2300      	movs	r3, #0
 80183fe:	e7c7      	b.n	8018390 <_strtod_l+0x140>
 8018400:	2d08      	cmp	r5, #8
 8018402:	f100 0001 	add.w	r0, r0, #1
 8018406:	bfd4      	ite	le
 8018408:	fb02 3909 	mlale	r9, r2, r9, r3
 801840c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8018410:	3501      	adds	r5, #1
 8018412:	9011      	str	r0, [sp, #68]	@ 0x44
 8018414:	e7c3      	b.n	801839e <_strtod_l+0x14e>
 8018416:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018418:	1c5a      	adds	r2, r3, #1
 801841a:	9211      	str	r2, [sp, #68]	@ 0x44
 801841c:	785a      	ldrb	r2, [r3, #1]
 801841e:	b375      	cbz	r5, 801847e <_strtod_l+0x22e>
 8018420:	4607      	mov	r7, r0
 8018422:	462b      	mov	r3, r5
 8018424:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8018428:	2909      	cmp	r1, #9
 801842a:	d913      	bls.n	8018454 <_strtod_l+0x204>
 801842c:	2101      	movs	r1, #1
 801842e:	9106      	str	r1, [sp, #24]
 8018430:	e7c6      	b.n	80183c0 <_strtod_l+0x170>
 8018432:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018434:	1c5a      	adds	r2, r3, #1
 8018436:	9211      	str	r2, [sp, #68]	@ 0x44
 8018438:	785a      	ldrb	r2, [r3, #1]
 801843a:	3001      	adds	r0, #1
 801843c:	2a30      	cmp	r2, #48	@ 0x30
 801843e:	d0f8      	beq.n	8018432 <_strtod_l+0x1e2>
 8018440:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8018444:	2b08      	cmp	r3, #8
 8018446:	f200 8476 	bhi.w	8018d36 <_strtod_l+0xae6>
 801844a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801844c:	930a      	str	r3, [sp, #40]	@ 0x28
 801844e:	4607      	mov	r7, r0
 8018450:	2000      	movs	r0, #0
 8018452:	4603      	mov	r3, r0
 8018454:	3a30      	subs	r2, #48	@ 0x30
 8018456:	f100 0101 	add.w	r1, r0, #1
 801845a:	d023      	beq.n	80184a4 <_strtod_l+0x254>
 801845c:	440f      	add	r7, r1
 801845e:	eb00 0c03 	add.w	ip, r0, r3
 8018462:	4619      	mov	r1, r3
 8018464:	240a      	movs	r4, #10
 8018466:	4561      	cmp	r1, ip
 8018468:	d10b      	bne.n	8018482 <_strtod_l+0x232>
 801846a:	1c5c      	adds	r4, r3, #1
 801846c:	4403      	add	r3, r0
 801846e:	2b08      	cmp	r3, #8
 8018470:	4404      	add	r4, r0
 8018472:	dc11      	bgt.n	8018498 <_strtod_l+0x248>
 8018474:	230a      	movs	r3, #10
 8018476:	fb03 2909 	mla	r9, r3, r9, r2
 801847a:	2100      	movs	r1, #0
 801847c:	e013      	b.n	80184a6 <_strtod_l+0x256>
 801847e:	4628      	mov	r0, r5
 8018480:	e7dc      	b.n	801843c <_strtod_l+0x1ec>
 8018482:	2908      	cmp	r1, #8
 8018484:	f101 0101 	add.w	r1, r1, #1
 8018488:	dc02      	bgt.n	8018490 <_strtod_l+0x240>
 801848a:	fb04 f909 	mul.w	r9, r4, r9
 801848e:	e7ea      	b.n	8018466 <_strtod_l+0x216>
 8018490:	2910      	cmp	r1, #16
 8018492:	bfd8      	it	le
 8018494:	4366      	mulle	r6, r4
 8018496:	e7e6      	b.n	8018466 <_strtod_l+0x216>
 8018498:	2b0f      	cmp	r3, #15
 801849a:	dcee      	bgt.n	801847a <_strtod_l+0x22a>
 801849c:	230a      	movs	r3, #10
 801849e:	fb03 2606 	mla	r6, r3, r6, r2
 80184a2:	e7ea      	b.n	801847a <_strtod_l+0x22a>
 80184a4:	461c      	mov	r4, r3
 80184a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80184a8:	1c5a      	adds	r2, r3, #1
 80184aa:	9211      	str	r2, [sp, #68]	@ 0x44
 80184ac:	785a      	ldrb	r2, [r3, #1]
 80184ae:	4608      	mov	r0, r1
 80184b0:	4623      	mov	r3, r4
 80184b2:	e7b7      	b.n	8018424 <_strtod_l+0x1d4>
 80184b4:	2301      	movs	r3, #1
 80184b6:	2700      	movs	r7, #0
 80184b8:	9306      	str	r3, [sp, #24]
 80184ba:	e786      	b.n	80183ca <_strtod_l+0x17a>
 80184bc:	f04f 0e00 	mov.w	lr, #0
 80184c0:	f108 0202 	add.w	r2, r8, #2
 80184c4:	9211      	str	r2, [sp, #68]	@ 0x44
 80184c6:	f898 2002 	ldrb.w	r2, [r8, #2]
 80184ca:	e78f      	b.n	80183ec <_strtod_l+0x19c>
 80184cc:	f04f 0e01 	mov.w	lr, #1
 80184d0:	e7f6      	b.n	80184c0 <_strtod_l+0x270>
 80184d2:	bf00      	nop
 80184d4:	0801d808 	.word	0x0801d808
 80184d8:	0801d7f0 	.word	0x0801d7f0
 80184dc:	7ff00000 	.word	0x7ff00000
 80184e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80184e2:	1c54      	adds	r4, r2, #1
 80184e4:	9411      	str	r4, [sp, #68]	@ 0x44
 80184e6:	7852      	ldrb	r2, [r2, #1]
 80184e8:	2a30      	cmp	r2, #48	@ 0x30
 80184ea:	d0f9      	beq.n	80184e0 <_strtod_l+0x290>
 80184ec:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80184f0:	2c08      	cmp	r4, #8
 80184f2:	d881      	bhi.n	80183f8 <_strtod_l+0x1a8>
 80184f4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80184f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80184fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80184fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80184fe:	1c51      	adds	r1, r2, #1
 8018500:	9111      	str	r1, [sp, #68]	@ 0x44
 8018502:	7852      	ldrb	r2, [r2, #1]
 8018504:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018508:	2c09      	cmp	r4, #9
 801850a:	d938      	bls.n	801857e <_strtod_l+0x32e>
 801850c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801850e:	1b0c      	subs	r4, r1, r4
 8018510:	2c08      	cmp	r4, #8
 8018512:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8018516:	dc02      	bgt.n	801851e <_strtod_l+0x2ce>
 8018518:	4564      	cmp	r4, ip
 801851a:	bfa8      	it	ge
 801851c:	4664      	movge	r4, ip
 801851e:	f1be 0f00 	cmp.w	lr, #0
 8018522:	d000      	beq.n	8018526 <_strtod_l+0x2d6>
 8018524:	4264      	negs	r4, r4
 8018526:	2b00      	cmp	r3, #0
 8018528:	d14e      	bne.n	80185c8 <_strtod_l+0x378>
 801852a:	9b07      	ldr	r3, [sp, #28]
 801852c:	4318      	orrs	r0, r3
 801852e:	f47f aeca 	bne.w	80182c6 <_strtod_l+0x76>
 8018532:	9b06      	ldr	r3, [sp, #24]
 8018534:	2b00      	cmp	r3, #0
 8018536:	f47f aee2 	bne.w	80182fe <_strtod_l+0xae>
 801853a:	2a69      	cmp	r2, #105	@ 0x69
 801853c:	d027      	beq.n	801858e <_strtod_l+0x33e>
 801853e:	dc24      	bgt.n	801858a <_strtod_l+0x33a>
 8018540:	2a49      	cmp	r2, #73	@ 0x49
 8018542:	d024      	beq.n	801858e <_strtod_l+0x33e>
 8018544:	2a4e      	cmp	r2, #78	@ 0x4e
 8018546:	f47f aeda 	bne.w	80182fe <_strtod_l+0xae>
 801854a:	4997      	ldr	r1, [pc, #604]	@ (80187a8 <_strtod_l+0x558>)
 801854c:	a811      	add	r0, sp, #68	@ 0x44
 801854e:	f002 fb69 	bl	801ac24 <__match>
 8018552:	2800      	cmp	r0, #0
 8018554:	f43f aed3 	beq.w	80182fe <_strtod_l+0xae>
 8018558:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801855a:	781b      	ldrb	r3, [r3, #0]
 801855c:	2b28      	cmp	r3, #40	@ 0x28
 801855e:	d12d      	bne.n	80185bc <_strtod_l+0x36c>
 8018560:	4992      	ldr	r1, [pc, #584]	@ (80187ac <_strtod_l+0x55c>)
 8018562:	aa14      	add	r2, sp, #80	@ 0x50
 8018564:	a811      	add	r0, sp, #68	@ 0x44
 8018566:	f002 fb71 	bl	801ac4c <__hexnan>
 801856a:	2805      	cmp	r0, #5
 801856c:	d126      	bne.n	80185bc <_strtod_l+0x36c>
 801856e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018570:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8018574:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8018578:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801857c:	e6a3      	b.n	80182c6 <_strtod_l+0x76>
 801857e:	240a      	movs	r4, #10
 8018580:	fb04 2c0c 	mla	ip, r4, ip, r2
 8018584:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8018588:	e7b8      	b.n	80184fc <_strtod_l+0x2ac>
 801858a:	2a6e      	cmp	r2, #110	@ 0x6e
 801858c:	e7db      	b.n	8018546 <_strtod_l+0x2f6>
 801858e:	4988      	ldr	r1, [pc, #544]	@ (80187b0 <_strtod_l+0x560>)
 8018590:	a811      	add	r0, sp, #68	@ 0x44
 8018592:	f002 fb47 	bl	801ac24 <__match>
 8018596:	2800      	cmp	r0, #0
 8018598:	f43f aeb1 	beq.w	80182fe <_strtod_l+0xae>
 801859c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801859e:	4985      	ldr	r1, [pc, #532]	@ (80187b4 <_strtod_l+0x564>)
 80185a0:	3b01      	subs	r3, #1
 80185a2:	a811      	add	r0, sp, #68	@ 0x44
 80185a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80185a6:	f002 fb3d 	bl	801ac24 <__match>
 80185aa:	b910      	cbnz	r0, 80185b2 <_strtod_l+0x362>
 80185ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80185ae:	3301      	adds	r3, #1
 80185b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80185b2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80187c8 <_strtod_l+0x578>
 80185b6:	f04f 0a00 	mov.w	sl, #0
 80185ba:	e684      	b.n	80182c6 <_strtod_l+0x76>
 80185bc:	487e      	ldr	r0, [pc, #504]	@ (80187b8 <_strtod_l+0x568>)
 80185be:	f001 fa77 	bl	8019ab0 <nan>
 80185c2:	ec5b ab10 	vmov	sl, fp, d0
 80185c6:	e67e      	b.n	80182c6 <_strtod_l+0x76>
 80185c8:	ee07 9a90 	vmov	s15, r9
 80185cc:	1be2      	subs	r2, r4, r7
 80185ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80185d2:	2d00      	cmp	r5, #0
 80185d4:	bf08      	it	eq
 80185d6:	461d      	moveq	r5, r3
 80185d8:	2b10      	cmp	r3, #16
 80185da:	9209      	str	r2, [sp, #36]	@ 0x24
 80185dc:	461a      	mov	r2, r3
 80185de:	bfa8      	it	ge
 80185e0:	2210      	movge	r2, #16
 80185e2:	2b09      	cmp	r3, #9
 80185e4:	ec5b ab17 	vmov	sl, fp, d7
 80185e8:	dc15      	bgt.n	8018616 <_strtod_l+0x3c6>
 80185ea:	1be1      	subs	r1, r4, r7
 80185ec:	2900      	cmp	r1, #0
 80185ee:	f43f ae6a 	beq.w	80182c6 <_strtod_l+0x76>
 80185f2:	eba4 0107 	sub.w	r1, r4, r7
 80185f6:	dd72      	ble.n	80186de <_strtod_l+0x48e>
 80185f8:	2916      	cmp	r1, #22
 80185fa:	dc59      	bgt.n	80186b0 <_strtod_l+0x460>
 80185fc:	4b6f      	ldr	r3, [pc, #444]	@ (80187bc <_strtod_l+0x56c>)
 80185fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018600:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018604:	ed93 7b00 	vldr	d7, [r3]
 8018608:	ec4b ab16 	vmov	d6, sl, fp
 801860c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018610:	ec5b ab17 	vmov	sl, fp, d7
 8018614:	e657      	b.n	80182c6 <_strtod_l+0x76>
 8018616:	4969      	ldr	r1, [pc, #420]	@ (80187bc <_strtod_l+0x56c>)
 8018618:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801861c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8018620:	ee06 6a90 	vmov	s13, r6
 8018624:	2b0f      	cmp	r3, #15
 8018626:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801862a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801862e:	ec5b ab16 	vmov	sl, fp, d6
 8018632:	ddda      	ble.n	80185ea <_strtod_l+0x39a>
 8018634:	1a9a      	subs	r2, r3, r2
 8018636:	1be1      	subs	r1, r4, r7
 8018638:	440a      	add	r2, r1
 801863a:	2a00      	cmp	r2, #0
 801863c:	f340 8094 	ble.w	8018768 <_strtod_l+0x518>
 8018640:	f012 000f 	ands.w	r0, r2, #15
 8018644:	d00a      	beq.n	801865c <_strtod_l+0x40c>
 8018646:	495d      	ldr	r1, [pc, #372]	@ (80187bc <_strtod_l+0x56c>)
 8018648:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801864c:	ed91 7b00 	vldr	d7, [r1]
 8018650:	ec4b ab16 	vmov	d6, sl, fp
 8018654:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018658:	ec5b ab17 	vmov	sl, fp, d7
 801865c:	f032 020f 	bics.w	r2, r2, #15
 8018660:	d073      	beq.n	801874a <_strtod_l+0x4fa>
 8018662:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8018666:	dd47      	ble.n	80186f8 <_strtod_l+0x4a8>
 8018668:	2400      	movs	r4, #0
 801866a:	4625      	mov	r5, r4
 801866c:	9407      	str	r4, [sp, #28]
 801866e:	4626      	mov	r6, r4
 8018670:	9a05      	ldr	r2, [sp, #20]
 8018672:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80187c8 <_strtod_l+0x578>
 8018676:	2322      	movs	r3, #34	@ 0x22
 8018678:	6013      	str	r3, [r2, #0]
 801867a:	f04f 0a00 	mov.w	sl, #0
 801867e:	9b07      	ldr	r3, [sp, #28]
 8018680:	2b00      	cmp	r3, #0
 8018682:	f43f ae20 	beq.w	80182c6 <_strtod_l+0x76>
 8018686:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018688:	9805      	ldr	r0, [sp, #20]
 801868a:	f002 fc83 	bl	801af94 <_Bfree>
 801868e:	9805      	ldr	r0, [sp, #20]
 8018690:	4631      	mov	r1, r6
 8018692:	f002 fc7f 	bl	801af94 <_Bfree>
 8018696:	9805      	ldr	r0, [sp, #20]
 8018698:	4629      	mov	r1, r5
 801869a:	f002 fc7b 	bl	801af94 <_Bfree>
 801869e:	9907      	ldr	r1, [sp, #28]
 80186a0:	9805      	ldr	r0, [sp, #20]
 80186a2:	f002 fc77 	bl	801af94 <_Bfree>
 80186a6:	9805      	ldr	r0, [sp, #20]
 80186a8:	4621      	mov	r1, r4
 80186aa:	f002 fc73 	bl	801af94 <_Bfree>
 80186ae:	e60a      	b.n	80182c6 <_strtod_l+0x76>
 80186b0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80186b4:	1be0      	subs	r0, r4, r7
 80186b6:	4281      	cmp	r1, r0
 80186b8:	dbbc      	blt.n	8018634 <_strtod_l+0x3e4>
 80186ba:	4a40      	ldr	r2, [pc, #256]	@ (80187bc <_strtod_l+0x56c>)
 80186bc:	f1c3 030f 	rsb	r3, r3, #15
 80186c0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80186c4:	ed91 7b00 	vldr	d7, [r1]
 80186c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80186ca:	ec4b ab16 	vmov	d6, sl, fp
 80186ce:	1acb      	subs	r3, r1, r3
 80186d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80186d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80186d8:	ed92 6b00 	vldr	d6, [r2]
 80186dc:	e796      	b.n	801860c <_strtod_l+0x3bc>
 80186de:	3116      	adds	r1, #22
 80186e0:	dba8      	blt.n	8018634 <_strtod_l+0x3e4>
 80186e2:	4b36      	ldr	r3, [pc, #216]	@ (80187bc <_strtod_l+0x56c>)
 80186e4:	1b3c      	subs	r4, r7, r4
 80186e6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80186ea:	ed94 7b00 	vldr	d7, [r4]
 80186ee:	ec4b ab16 	vmov	d6, sl, fp
 80186f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80186f6:	e78b      	b.n	8018610 <_strtod_l+0x3c0>
 80186f8:	2000      	movs	r0, #0
 80186fa:	ec4b ab17 	vmov	d7, sl, fp
 80186fe:	4e30      	ldr	r6, [pc, #192]	@ (80187c0 <_strtod_l+0x570>)
 8018700:	1112      	asrs	r2, r2, #4
 8018702:	4601      	mov	r1, r0
 8018704:	2a01      	cmp	r2, #1
 8018706:	dc23      	bgt.n	8018750 <_strtod_l+0x500>
 8018708:	b108      	cbz	r0, 801870e <_strtod_l+0x4be>
 801870a:	ec5b ab17 	vmov	sl, fp, d7
 801870e:	4a2c      	ldr	r2, [pc, #176]	@ (80187c0 <_strtod_l+0x570>)
 8018710:	482c      	ldr	r0, [pc, #176]	@ (80187c4 <_strtod_l+0x574>)
 8018712:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018716:	ed92 7b00 	vldr	d7, [r2]
 801871a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801871e:	ec4b ab16 	vmov	d6, sl, fp
 8018722:	4a29      	ldr	r2, [pc, #164]	@ (80187c8 <_strtod_l+0x578>)
 8018724:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018728:	ee17 1a90 	vmov	r1, s15
 801872c:	400a      	ands	r2, r1
 801872e:	4282      	cmp	r2, r0
 8018730:	ec5b ab17 	vmov	sl, fp, d7
 8018734:	d898      	bhi.n	8018668 <_strtod_l+0x418>
 8018736:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801873a:	4282      	cmp	r2, r0
 801873c:	bf86      	itte	hi
 801873e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80187cc <_strtod_l+0x57c>
 8018742:	f04f 3aff 	movhi.w	sl, #4294967295
 8018746:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801874a:	2200      	movs	r2, #0
 801874c:	9206      	str	r2, [sp, #24]
 801874e:	e076      	b.n	801883e <_strtod_l+0x5ee>
 8018750:	f012 0f01 	tst.w	r2, #1
 8018754:	d004      	beq.n	8018760 <_strtod_l+0x510>
 8018756:	ed96 6b00 	vldr	d6, [r6]
 801875a:	2001      	movs	r0, #1
 801875c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018760:	3101      	adds	r1, #1
 8018762:	1052      	asrs	r2, r2, #1
 8018764:	3608      	adds	r6, #8
 8018766:	e7cd      	b.n	8018704 <_strtod_l+0x4b4>
 8018768:	d0ef      	beq.n	801874a <_strtod_l+0x4fa>
 801876a:	4252      	negs	r2, r2
 801876c:	f012 000f 	ands.w	r0, r2, #15
 8018770:	d00a      	beq.n	8018788 <_strtod_l+0x538>
 8018772:	4912      	ldr	r1, [pc, #72]	@ (80187bc <_strtod_l+0x56c>)
 8018774:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018778:	ed91 7b00 	vldr	d7, [r1]
 801877c:	ec4b ab16 	vmov	d6, sl, fp
 8018780:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018784:	ec5b ab17 	vmov	sl, fp, d7
 8018788:	1112      	asrs	r2, r2, #4
 801878a:	d0de      	beq.n	801874a <_strtod_l+0x4fa>
 801878c:	2a1f      	cmp	r2, #31
 801878e:	dd1f      	ble.n	80187d0 <_strtod_l+0x580>
 8018790:	2400      	movs	r4, #0
 8018792:	4625      	mov	r5, r4
 8018794:	9407      	str	r4, [sp, #28]
 8018796:	4626      	mov	r6, r4
 8018798:	9a05      	ldr	r2, [sp, #20]
 801879a:	2322      	movs	r3, #34	@ 0x22
 801879c:	f04f 0a00 	mov.w	sl, #0
 80187a0:	f04f 0b00 	mov.w	fp, #0
 80187a4:	6013      	str	r3, [r2, #0]
 80187a6:	e76a      	b.n	801867e <_strtod_l+0x42e>
 80187a8:	0801d956 	.word	0x0801d956
 80187ac:	0801d7f4 	.word	0x0801d7f4
 80187b0:	0801d94e 	.word	0x0801d94e
 80187b4:	0801d988 	.word	0x0801d988
 80187b8:	0801dc14 	.word	0x0801dc14
 80187bc:	0801db00 	.word	0x0801db00
 80187c0:	0801dad8 	.word	0x0801dad8
 80187c4:	7ca00000 	.word	0x7ca00000
 80187c8:	7ff00000 	.word	0x7ff00000
 80187cc:	7fefffff 	.word	0x7fefffff
 80187d0:	f012 0110 	ands.w	r1, r2, #16
 80187d4:	bf18      	it	ne
 80187d6:	216a      	movne	r1, #106	@ 0x6a
 80187d8:	9106      	str	r1, [sp, #24]
 80187da:	ec4b ab17 	vmov	d7, sl, fp
 80187de:	49b0      	ldr	r1, [pc, #704]	@ (8018aa0 <_strtod_l+0x850>)
 80187e0:	2000      	movs	r0, #0
 80187e2:	07d6      	lsls	r6, r2, #31
 80187e4:	d504      	bpl.n	80187f0 <_strtod_l+0x5a0>
 80187e6:	ed91 6b00 	vldr	d6, [r1]
 80187ea:	2001      	movs	r0, #1
 80187ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80187f0:	1052      	asrs	r2, r2, #1
 80187f2:	f101 0108 	add.w	r1, r1, #8
 80187f6:	d1f4      	bne.n	80187e2 <_strtod_l+0x592>
 80187f8:	b108      	cbz	r0, 80187fe <_strtod_l+0x5ae>
 80187fa:	ec5b ab17 	vmov	sl, fp, d7
 80187fe:	9a06      	ldr	r2, [sp, #24]
 8018800:	b1b2      	cbz	r2, 8018830 <_strtod_l+0x5e0>
 8018802:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8018806:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801880a:	2a00      	cmp	r2, #0
 801880c:	4658      	mov	r0, fp
 801880e:	dd0f      	ble.n	8018830 <_strtod_l+0x5e0>
 8018810:	2a1f      	cmp	r2, #31
 8018812:	dd55      	ble.n	80188c0 <_strtod_l+0x670>
 8018814:	2a34      	cmp	r2, #52	@ 0x34
 8018816:	bfde      	ittt	le
 8018818:	f04f 32ff 	movle.w	r2, #4294967295
 801881c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8018820:	408a      	lslle	r2, r1
 8018822:	f04f 0a00 	mov.w	sl, #0
 8018826:	bfcc      	ite	gt
 8018828:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801882c:	ea02 0b00 	andle.w	fp, r2, r0
 8018830:	ec4b ab17 	vmov	d7, sl, fp
 8018834:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801883c:	d0a8      	beq.n	8018790 <_strtod_l+0x540>
 801883e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018840:	9805      	ldr	r0, [sp, #20]
 8018842:	f8cd 9000 	str.w	r9, [sp]
 8018846:	462a      	mov	r2, r5
 8018848:	f002 fc0c 	bl	801b064 <__s2b>
 801884c:	9007      	str	r0, [sp, #28]
 801884e:	2800      	cmp	r0, #0
 8018850:	f43f af0a 	beq.w	8018668 <_strtod_l+0x418>
 8018854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018856:	1b3f      	subs	r7, r7, r4
 8018858:	2b00      	cmp	r3, #0
 801885a:	bfb4      	ite	lt
 801885c:	463b      	movlt	r3, r7
 801885e:	2300      	movge	r3, #0
 8018860:	930a      	str	r3, [sp, #40]	@ 0x28
 8018862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018864:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8018a90 <_strtod_l+0x840>
 8018868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801886c:	2400      	movs	r4, #0
 801886e:	930d      	str	r3, [sp, #52]	@ 0x34
 8018870:	4625      	mov	r5, r4
 8018872:	9b07      	ldr	r3, [sp, #28]
 8018874:	9805      	ldr	r0, [sp, #20]
 8018876:	6859      	ldr	r1, [r3, #4]
 8018878:	f002 fb4c 	bl	801af14 <_Balloc>
 801887c:	4606      	mov	r6, r0
 801887e:	2800      	cmp	r0, #0
 8018880:	f43f aef6 	beq.w	8018670 <_strtod_l+0x420>
 8018884:	9b07      	ldr	r3, [sp, #28]
 8018886:	691a      	ldr	r2, [r3, #16]
 8018888:	ec4b ab19 	vmov	d9, sl, fp
 801888c:	3202      	adds	r2, #2
 801888e:	f103 010c 	add.w	r1, r3, #12
 8018892:	0092      	lsls	r2, r2, #2
 8018894:	300c      	adds	r0, #12
 8018896:	f001 f8fa 	bl	8019a8e <memcpy>
 801889a:	eeb0 0b49 	vmov.f64	d0, d9
 801889e:	9805      	ldr	r0, [sp, #20]
 80188a0:	aa14      	add	r2, sp, #80	@ 0x50
 80188a2:	a913      	add	r1, sp, #76	@ 0x4c
 80188a4:	f002 ff1a 	bl	801b6dc <__d2b>
 80188a8:	9012      	str	r0, [sp, #72]	@ 0x48
 80188aa:	2800      	cmp	r0, #0
 80188ac:	f43f aee0 	beq.w	8018670 <_strtod_l+0x420>
 80188b0:	9805      	ldr	r0, [sp, #20]
 80188b2:	2101      	movs	r1, #1
 80188b4:	f002 fc6c 	bl	801b190 <__i2b>
 80188b8:	4605      	mov	r5, r0
 80188ba:	b940      	cbnz	r0, 80188ce <_strtod_l+0x67e>
 80188bc:	2500      	movs	r5, #0
 80188be:	e6d7      	b.n	8018670 <_strtod_l+0x420>
 80188c0:	f04f 31ff 	mov.w	r1, #4294967295
 80188c4:	fa01 f202 	lsl.w	r2, r1, r2
 80188c8:	ea02 0a0a 	and.w	sl, r2, sl
 80188cc:	e7b0      	b.n	8018830 <_strtod_l+0x5e0>
 80188ce:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80188d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80188d2:	2f00      	cmp	r7, #0
 80188d4:	bfab      	itete	ge
 80188d6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80188d8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80188da:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80188de:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80188e2:	bfac      	ite	ge
 80188e4:	eb07 0903 	addge.w	r9, r7, r3
 80188e8:	eba3 0807 	sublt.w	r8, r3, r7
 80188ec:	9b06      	ldr	r3, [sp, #24]
 80188ee:	1aff      	subs	r7, r7, r3
 80188f0:	4417      	add	r7, r2
 80188f2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80188f6:	4a6b      	ldr	r2, [pc, #428]	@ (8018aa4 <_strtod_l+0x854>)
 80188f8:	3f01      	subs	r7, #1
 80188fa:	4297      	cmp	r7, r2
 80188fc:	da51      	bge.n	80189a2 <_strtod_l+0x752>
 80188fe:	1bd1      	subs	r1, r2, r7
 8018900:	291f      	cmp	r1, #31
 8018902:	eba3 0301 	sub.w	r3, r3, r1
 8018906:	f04f 0201 	mov.w	r2, #1
 801890a:	dc3e      	bgt.n	801898a <_strtod_l+0x73a>
 801890c:	408a      	lsls	r2, r1
 801890e:	920c      	str	r2, [sp, #48]	@ 0x30
 8018910:	2200      	movs	r2, #0
 8018912:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018914:	eb09 0703 	add.w	r7, r9, r3
 8018918:	4498      	add	r8, r3
 801891a:	9b06      	ldr	r3, [sp, #24]
 801891c:	45b9      	cmp	r9, r7
 801891e:	4498      	add	r8, r3
 8018920:	464b      	mov	r3, r9
 8018922:	bfa8      	it	ge
 8018924:	463b      	movge	r3, r7
 8018926:	4543      	cmp	r3, r8
 8018928:	bfa8      	it	ge
 801892a:	4643      	movge	r3, r8
 801892c:	2b00      	cmp	r3, #0
 801892e:	bfc2      	ittt	gt
 8018930:	1aff      	subgt	r7, r7, r3
 8018932:	eba8 0803 	subgt.w	r8, r8, r3
 8018936:	eba9 0903 	subgt.w	r9, r9, r3
 801893a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801893c:	2b00      	cmp	r3, #0
 801893e:	dd16      	ble.n	801896e <_strtod_l+0x71e>
 8018940:	4629      	mov	r1, r5
 8018942:	9805      	ldr	r0, [sp, #20]
 8018944:	461a      	mov	r2, r3
 8018946:	f002 fce3 	bl	801b310 <__pow5mult>
 801894a:	4605      	mov	r5, r0
 801894c:	2800      	cmp	r0, #0
 801894e:	d0b5      	beq.n	80188bc <_strtod_l+0x66c>
 8018950:	4601      	mov	r1, r0
 8018952:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018954:	9805      	ldr	r0, [sp, #20]
 8018956:	f002 fc31 	bl	801b1bc <__multiply>
 801895a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801895c:	2800      	cmp	r0, #0
 801895e:	f43f ae87 	beq.w	8018670 <_strtod_l+0x420>
 8018962:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018964:	9805      	ldr	r0, [sp, #20]
 8018966:	f002 fb15 	bl	801af94 <_Bfree>
 801896a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801896c:	9312      	str	r3, [sp, #72]	@ 0x48
 801896e:	2f00      	cmp	r7, #0
 8018970:	dc1b      	bgt.n	80189aa <_strtod_l+0x75a>
 8018972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018974:	2b00      	cmp	r3, #0
 8018976:	dd21      	ble.n	80189bc <_strtod_l+0x76c>
 8018978:	4631      	mov	r1, r6
 801897a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801897c:	9805      	ldr	r0, [sp, #20]
 801897e:	f002 fcc7 	bl	801b310 <__pow5mult>
 8018982:	4606      	mov	r6, r0
 8018984:	b9d0      	cbnz	r0, 80189bc <_strtod_l+0x76c>
 8018986:	2600      	movs	r6, #0
 8018988:	e672      	b.n	8018670 <_strtod_l+0x420>
 801898a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801898e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8018992:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8018996:	37e2      	adds	r7, #226	@ 0xe2
 8018998:	fa02 f107 	lsl.w	r1, r2, r7
 801899c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801899e:	920c      	str	r2, [sp, #48]	@ 0x30
 80189a0:	e7b8      	b.n	8018914 <_strtod_l+0x6c4>
 80189a2:	2200      	movs	r2, #0
 80189a4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80189a6:	2201      	movs	r2, #1
 80189a8:	e7f9      	b.n	801899e <_strtod_l+0x74e>
 80189aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80189ac:	9805      	ldr	r0, [sp, #20]
 80189ae:	463a      	mov	r2, r7
 80189b0:	f002 fd08 	bl	801b3c4 <__lshift>
 80189b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80189b6:	2800      	cmp	r0, #0
 80189b8:	d1db      	bne.n	8018972 <_strtod_l+0x722>
 80189ba:	e659      	b.n	8018670 <_strtod_l+0x420>
 80189bc:	f1b8 0f00 	cmp.w	r8, #0
 80189c0:	dd07      	ble.n	80189d2 <_strtod_l+0x782>
 80189c2:	4631      	mov	r1, r6
 80189c4:	9805      	ldr	r0, [sp, #20]
 80189c6:	4642      	mov	r2, r8
 80189c8:	f002 fcfc 	bl	801b3c4 <__lshift>
 80189cc:	4606      	mov	r6, r0
 80189ce:	2800      	cmp	r0, #0
 80189d0:	d0d9      	beq.n	8018986 <_strtod_l+0x736>
 80189d2:	f1b9 0f00 	cmp.w	r9, #0
 80189d6:	dd08      	ble.n	80189ea <_strtod_l+0x79a>
 80189d8:	4629      	mov	r1, r5
 80189da:	9805      	ldr	r0, [sp, #20]
 80189dc:	464a      	mov	r2, r9
 80189de:	f002 fcf1 	bl	801b3c4 <__lshift>
 80189e2:	4605      	mov	r5, r0
 80189e4:	2800      	cmp	r0, #0
 80189e6:	f43f ae43 	beq.w	8018670 <_strtod_l+0x420>
 80189ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80189ec:	9805      	ldr	r0, [sp, #20]
 80189ee:	4632      	mov	r2, r6
 80189f0:	f002 fd70 	bl	801b4d4 <__mdiff>
 80189f4:	4604      	mov	r4, r0
 80189f6:	2800      	cmp	r0, #0
 80189f8:	f43f ae3a 	beq.w	8018670 <_strtod_l+0x420>
 80189fc:	2300      	movs	r3, #0
 80189fe:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8018a02:	60c3      	str	r3, [r0, #12]
 8018a04:	4629      	mov	r1, r5
 8018a06:	f002 fd49 	bl	801b49c <__mcmp>
 8018a0a:	2800      	cmp	r0, #0
 8018a0c:	da4e      	bge.n	8018aac <_strtod_l+0x85c>
 8018a0e:	ea58 080a 	orrs.w	r8, r8, sl
 8018a12:	d174      	bne.n	8018afe <_strtod_l+0x8ae>
 8018a14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d170      	bne.n	8018afe <_strtod_l+0x8ae>
 8018a1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018a20:	0d1b      	lsrs	r3, r3, #20
 8018a22:	051b      	lsls	r3, r3, #20
 8018a24:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018a28:	d969      	bls.n	8018afe <_strtod_l+0x8ae>
 8018a2a:	6963      	ldr	r3, [r4, #20]
 8018a2c:	b913      	cbnz	r3, 8018a34 <_strtod_l+0x7e4>
 8018a2e:	6923      	ldr	r3, [r4, #16]
 8018a30:	2b01      	cmp	r3, #1
 8018a32:	dd64      	ble.n	8018afe <_strtod_l+0x8ae>
 8018a34:	4621      	mov	r1, r4
 8018a36:	2201      	movs	r2, #1
 8018a38:	9805      	ldr	r0, [sp, #20]
 8018a3a:	f002 fcc3 	bl	801b3c4 <__lshift>
 8018a3e:	4629      	mov	r1, r5
 8018a40:	4604      	mov	r4, r0
 8018a42:	f002 fd2b 	bl	801b49c <__mcmp>
 8018a46:	2800      	cmp	r0, #0
 8018a48:	dd59      	ble.n	8018afe <_strtod_l+0x8ae>
 8018a4a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018a4e:	9a06      	ldr	r2, [sp, #24]
 8018a50:	0d1b      	lsrs	r3, r3, #20
 8018a52:	051b      	lsls	r3, r3, #20
 8018a54:	2a00      	cmp	r2, #0
 8018a56:	d070      	beq.n	8018b3a <_strtod_l+0x8ea>
 8018a58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018a5c:	d86d      	bhi.n	8018b3a <_strtod_l+0x8ea>
 8018a5e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8018a62:	f67f ae99 	bls.w	8018798 <_strtod_l+0x548>
 8018a66:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8018a98 <_strtod_l+0x848>
 8018a6a:	ec4b ab16 	vmov	d6, sl, fp
 8018a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8018aa8 <_strtod_l+0x858>)
 8018a70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018a74:	ee17 2a90 	vmov	r2, s15
 8018a78:	4013      	ands	r3, r2
 8018a7a:	ec5b ab17 	vmov	sl, fp, d7
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	f47f ae01 	bne.w	8018686 <_strtod_l+0x436>
 8018a84:	9a05      	ldr	r2, [sp, #20]
 8018a86:	2322      	movs	r3, #34	@ 0x22
 8018a88:	6013      	str	r3, [r2, #0]
 8018a8a:	e5fc      	b.n	8018686 <_strtod_l+0x436>
 8018a8c:	f3af 8000 	nop.w
 8018a90:	ffc00000 	.word	0xffc00000
 8018a94:	41dfffff 	.word	0x41dfffff
 8018a98:	00000000 	.word	0x00000000
 8018a9c:	39500000 	.word	0x39500000
 8018aa0:	0801d820 	.word	0x0801d820
 8018aa4:	fffffc02 	.word	0xfffffc02
 8018aa8:	7ff00000 	.word	0x7ff00000
 8018aac:	46d9      	mov	r9, fp
 8018aae:	d15d      	bne.n	8018b6c <_strtod_l+0x91c>
 8018ab0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018ab4:	f1b8 0f00 	cmp.w	r8, #0
 8018ab8:	d02a      	beq.n	8018b10 <_strtod_l+0x8c0>
 8018aba:	4aab      	ldr	r2, [pc, #684]	@ (8018d68 <_strtod_l+0xb18>)
 8018abc:	4293      	cmp	r3, r2
 8018abe:	d12a      	bne.n	8018b16 <_strtod_l+0x8c6>
 8018ac0:	9b06      	ldr	r3, [sp, #24]
 8018ac2:	4652      	mov	r2, sl
 8018ac4:	b1fb      	cbz	r3, 8018b06 <_strtod_l+0x8b6>
 8018ac6:	4ba9      	ldr	r3, [pc, #676]	@ (8018d6c <_strtod_l+0xb1c>)
 8018ac8:	ea0b 0303 	and.w	r3, fp, r3
 8018acc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8018ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8018ad4:	d81a      	bhi.n	8018b0c <_strtod_l+0x8bc>
 8018ad6:	0d1b      	lsrs	r3, r3, #20
 8018ad8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018adc:	fa01 f303 	lsl.w	r3, r1, r3
 8018ae0:	429a      	cmp	r2, r3
 8018ae2:	d118      	bne.n	8018b16 <_strtod_l+0x8c6>
 8018ae4:	4ba2      	ldr	r3, [pc, #648]	@ (8018d70 <_strtod_l+0xb20>)
 8018ae6:	4599      	cmp	r9, r3
 8018ae8:	d102      	bne.n	8018af0 <_strtod_l+0x8a0>
 8018aea:	3201      	adds	r2, #1
 8018aec:	f43f adc0 	beq.w	8018670 <_strtod_l+0x420>
 8018af0:	4b9e      	ldr	r3, [pc, #632]	@ (8018d6c <_strtod_l+0xb1c>)
 8018af2:	ea09 0303 	and.w	r3, r9, r3
 8018af6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8018afa:	f04f 0a00 	mov.w	sl, #0
 8018afe:	9b06      	ldr	r3, [sp, #24]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d1b0      	bne.n	8018a66 <_strtod_l+0x816>
 8018b04:	e5bf      	b.n	8018686 <_strtod_l+0x436>
 8018b06:	f04f 33ff 	mov.w	r3, #4294967295
 8018b0a:	e7e9      	b.n	8018ae0 <_strtod_l+0x890>
 8018b0c:	460b      	mov	r3, r1
 8018b0e:	e7e7      	b.n	8018ae0 <_strtod_l+0x890>
 8018b10:	ea53 030a 	orrs.w	r3, r3, sl
 8018b14:	d099      	beq.n	8018a4a <_strtod_l+0x7fa>
 8018b16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018b18:	b1c3      	cbz	r3, 8018b4c <_strtod_l+0x8fc>
 8018b1a:	ea13 0f09 	tst.w	r3, r9
 8018b1e:	d0ee      	beq.n	8018afe <_strtod_l+0x8ae>
 8018b20:	9a06      	ldr	r2, [sp, #24]
 8018b22:	4650      	mov	r0, sl
 8018b24:	4659      	mov	r1, fp
 8018b26:	f1b8 0f00 	cmp.w	r8, #0
 8018b2a:	d013      	beq.n	8018b54 <_strtod_l+0x904>
 8018b2c:	f7ff fb73 	bl	8018216 <sulp>
 8018b30:	ee39 7b00 	vadd.f64	d7, d9, d0
 8018b34:	ec5b ab17 	vmov	sl, fp, d7
 8018b38:	e7e1      	b.n	8018afe <_strtod_l+0x8ae>
 8018b3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8018b3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018b42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018b46:	f04f 3aff 	mov.w	sl, #4294967295
 8018b4a:	e7d8      	b.n	8018afe <_strtod_l+0x8ae>
 8018b4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b4e:	ea13 0f0a 	tst.w	r3, sl
 8018b52:	e7e4      	b.n	8018b1e <_strtod_l+0x8ce>
 8018b54:	f7ff fb5f 	bl	8018216 <sulp>
 8018b58:	ee39 0b40 	vsub.f64	d0, d9, d0
 8018b5c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b64:	ec5b ab10 	vmov	sl, fp, d0
 8018b68:	d1c9      	bne.n	8018afe <_strtod_l+0x8ae>
 8018b6a:	e615      	b.n	8018798 <_strtod_l+0x548>
 8018b6c:	4629      	mov	r1, r5
 8018b6e:	4620      	mov	r0, r4
 8018b70:	f002 fe0c 	bl	801b78c <__ratio>
 8018b74:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8018b78:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b80:	d85d      	bhi.n	8018c3e <_strtod_l+0x9ee>
 8018b82:	f1b8 0f00 	cmp.w	r8, #0
 8018b86:	d164      	bne.n	8018c52 <_strtod_l+0xa02>
 8018b88:	f1ba 0f00 	cmp.w	sl, #0
 8018b8c:	d14b      	bne.n	8018c26 <_strtod_l+0x9d6>
 8018b8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018b92:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d160      	bne.n	8018c5c <_strtod_l+0xa0c>
 8018b9a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8018b9e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8018ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ba6:	d401      	bmi.n	8018bac <_strtod_l+0x95c>
 8018ba8:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018bac:	eeb1 ab48 	vneg.f64	d10, d8
 8018bb0:	486e      	ldr	r0, [pc, #440]	@ (8018d6c <_strtod_l+0xb1c>)
 8018bb2:	4970      	ldr	r1, [pc, #448]	@ (8018d74 <_strtod_l+0xb24>)
 8018bb4:	ea09 0700 	and.w	r7, r9, r0
 8018bb8:	428f      	cmp	r7, r1
 8018bba:	ec53 2b1a 	vmov	r2, r3, d10
 8018bbe:	d17d      	bne.n	8018cbc <_strtod_l+0xa6c>
 8018bc0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8018bc4:	ec4b ab1c 	vmov	d12, sl, fp
 8018bc8:	eeb0 0b4c 	vmov.f64	d0, d12
 8018bcc:	f002 fd16 	bl	801b5fc <__ulp>
 8018bd0:	4866      	ldr	r0, [pc, #408]	@ (8018d6c <_strtod_l+0xb1c>)
 8018bd2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8018bd6:	ee1c 3a90 	vmov	r3, s25
 8018bda:	4a67      	ldr	r2, [pc, #412]	@ (8018d78 <_strtod_l+0xb28>)
 8018bdc:	ea03 0100 	and.w	r1, r3, r0
 8018be0:	4291      	cmp	r1, r2
 8018be2:	ec5b ab1c 	vmov	sl, fp, d12
 8018be6:	d93c      	bls.n	8018c62 <_strtod_l+0xa12>
 8018be8:	ee19 2a90 	vmov	r2, s19
 8018bec:	4b60      	ldr	r3, [pc, #384]	@ (8018d70 <_strtod_l+0xb20>)
 8018bee:	429a      	cmp	r2, r3
 8018bf0:	d104      	bne.n	8018bfc <_strtod_l+0x9ac>
 8018bf2:	ee19 3a10 	vmov	r3, s18
 8018bf6:	3301      	adds	r3, #1
 8018bf8:	f43f ad3a 	beq.w	8018670 <_strtod_l+0x420>
 8018bfc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8018d70 <_strtod_l+0xb20>
 8018c00:	f04f 3aff 	mov.w	sl, #4294967295
 8018c04:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018c06:	9805      	ldr	r0, [sp, #20]
 8018c08:	f002 f9c4 	bl	801af94 <_Bfree>
 8018c0c:	9805      	ldr	r0, [sp, #20]
 8018c0e:	4631      	mov	r1, r6
 8018c10:	f002 f9c0 	bl	801af94 <_Bfree>
 8018c14:	9805      	ldr	r0, [sp, #20]
 8018c16:	4629      	mov	r1, r5
 8018c18:	f002 f9bc 	bl	801af94 <_Bfree>
 8018c1c:	9805      	ldr	r0, [sp, #20]
 8018c1e:	4621      	mov	r1, r4
 8018c20:	f002 f9b8 	bl	801af94 <_Bfree>
 8018c24:	e625      	b.n	8018872 <_strtod_l+0x622>
 8018c26:	f1ba 0f01 	cmp.w	sl, #1
 8018c2a:	d103      	bne.n	8018c34 <_strtod_l+0x9e4>
 8018c2c:	f1bb 0f00 	cmp.w	fp, #0
 8018c30:	f43f adb2 	beq.w	8018798 <_strtod_l+0x548>
 8018c34:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018c38:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8018c3c:	e7b8      	b.n	8018bb0 <_strtod_l+0x960>
 8018c3e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8018c42:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018c46:	f1b8 0f00 	cmp.w	r8, #0
 8018c4a:	d0af      	beq.n	8018bac <_strtod_l+0x95c>
 8018c4c:	eeb0 ab48 	vmov.f64	d10, d8
 8018c50:	e7ae      	b.n	8018bb0 <_strtod_l+0x960>
 8018c52:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8018c56:	eeb0 8b4a 	vmov.f64	d8, d10
 8018c5a:	e7a9      	b.n	8018bb0 <_strtod_l+0x960>
 8018c5c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018c60:	e7a6      	b.n	8018bb0 <_strtod_l+0x960>
 8018c62:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8018c66:	9b06      	ldr	r3, [sp, #24]
 8018c68:	46d9      	mov	r9, fp
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d1ca      	bne.n	8018c04 <_strtod_l+0x9b4>
 8018c6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018c72:	0d1b      	lsrs	r3, r3, #20
 8018c74:	051b      	lsls	r3, r3, #20
 8018c76:	429f      	cmp	r7, r3
 8018c78:	d1c4      	bne.n	8018c04 <_strtod_l+0x9b4>
 8018c7a:	ec51 0b18 	vmov	r0, r1, d8
 8018c7e:	f7e7 fd83 	bl	8000788 <__aeabi_d2lz>
 8018c82:	f7e7 fd3b 	bl	80006fc <__aeabi_l2d>
 8018c86:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8018c8a:	ec41 0b17 	vmov	d7, r0, r1
 8018c8e:	ea49 090a 	orr.w	r9, r9, sl
 8018c92:	ea59 0908 	orrs.w	r9, r9, r8
 8018c96:	ee38 8b47 	vsub.f64	d8, d8, d7
 8018c9a:	d03c      	beq.n	8018d16 <_strtod_l+0xac6>
 8018c9c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8018d50 <_strtod_l+0xb00>
 8018ca0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ca8:	f53f aced 	bmi.w	8018686 <_strtod_l+0x436>
 8018cac:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018d58 <_strtod_l+0xb08>
 8018cb0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cb8:	dda4      	ble.n	8018c04 <_strtod_l+0x9b4>
 8018cba:	e4e4      	b.n	8018686 <_strtod_l+0x436>
 8018cbc:	9906      	ldr	r1, [sp, #24]
 8018cbe:	b1e1      	cbz	r1, 8018cfa <_strtod_l+0xaaa>
 8018cc0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8018cc4:	d819      	bhi.n	8018cfa <_strtod_l+0xaaa>
 8018cc6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8018cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cce:	d811      	bhi.n	8018cf4 <_strtod_l+0xaa4>
 8018cd0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8018cd4:	ee18 3a10 	vmov	r3, s16
 8018cd8:	2b01      	cmp	r3, #1
 8018cda:	bf38      	it	cc
 8018cdc:	2301      	movcc	r3, #1
 8018cde:	ee08 3a10 	vmov	s16, r3
 8018ce2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8018ce6:	f1b8 0f00 	cmp.w	r8, #0
 8018cea:	d111      	bne.n	8018d10 <_strtod_l+0xac0>
 8018cec:	eeb1 7b48 	vneg.f64	d7, d8
 8018cf0:	ec53 2b17 	vmov	r2, r3, d7
 8018cf4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8018cf8:	1bcb      	subs	r3, r1, r7
 8018cfa:	eeb0 0b49 	vmov.f64	d0, d9
 8018cfe:	ec43 2b1a 	vmov	d10, r2, r3
 8018d02:	f002 fc7b 	bl	801b5fc <__ulp>
 8018d06:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8018d0a:	ec5b ab19 	vmov	sl, fp, d9
 8018d0e:	e7aa      	b.n	8018c66 <_strtod_l+0xa16>
 8018d10:	eeb0 7b48 	vmov.f64	d7, d8
 8018d14:	e7ec      	b.n	8018cf0 <_strtod_l+0xaa0>
 8018d16:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8018d60 <_strtod_l+0xb10>
 8018d1a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d22:	f57f af6f 	bpl.w	8018c04 <_strtod_l+0x9b4>
 8018d26:	e4ae      	b.n	8018686 <_strtod_l+0x436>
 8018d28:	2300      	movs	r3, #0
 8018d2a:	9308      	str	r3, [sp, #32]
 8018d2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018d2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018d30:	6013      	str	r3, [r2, #0]
 8018d32:	f7ff bacc 	b.w	80182ce <_strtod_l+0x7e>
 8018d36:	2a65      	cmp	r2, #101	@ 0x65
 8018d38:	f43f abbc 	beq.w	80184b4 <_strtod_l+0x264>
 8018d3c:	2a45      	cmp	r2, #69	@ 0x45
 8018d3e:	f43f abb9 	beq.w	80184b4 <_strtod_l+0x264>
 8018d42:	2301      	movs	r3, #1
 8018d44:	9306      	str	r3, [sp, #24]
 8018d46:	f7ff bbf0 	b.w	801852a <_strtod_l+0x2da>
 8018d4a:	bf00      	nop
 8018d4c:	f3af 8000 	nop.w
 8018d50:	94a03595 	.word	0x94a03595
 8018d54:	3fdfffff 	.word	0x3fdfffff
 8018d58:	35afe535 	.word	0x35afe535
 8018d5c:	3fe00000 	.word	0x3fe00000
 8018d60:	94a03595 	.word	0x94a03595
 8018d64:	3fcfffff 	.word	0x3fcfffff
 8018d68:	000fffff 	.word	0x000fffff
 8018d6c:	7ff00000 	.word	0x7ff00000
 8018d70:	7fefffff 	.word	0x7fefffff
 8018d74:	7fe00000 	.word	0x7fe00000
 8018d78:	7c9fffff 	.word	0x7c9fffff

08018d7c <strtod>:
 8018d7c:	460a      	mov	r2, r1
 8018d7e:	4601      	mov	r1, r0
 8018d80:	4802      	ldr	r0, [pc, #8]	@ (8018d8c <strtod+0x10>)
 8018d82:	4b03      	ldr	r3, [pc, #12]	@ (8018d90 <strtod+0x14>)
 8018d84:	6800      	ldr	r0, [r0, #0]
 8018d86:	f7ff ba63 	b.w	8018250 <_strtod_l>
 8018d8a:	bf00      	nop
 8018d8c:	2400027c 	.word	0x2400027c
 8018d90:	24000110 	.word	0x24000110

08018d94 <_strtol_l.constprop.0>:
 8018d94:	2b24      	cmp	r3, #36	@ 0x24
 8018d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d9a:	4686      	mov	lr, r0
 8018d9c:	4690      	mov	r8, r2
 8018d9e:	d801      	bhi.n	8018da4 <_strtol_l.constprop.0+0x10>
 8018da0:	2b01      	cmp	r3, #1
 8018da2:	d106      	bne.n	8018db2 <_strtol_l.constprop.0+0x1e>
 8018da4:	f000 fe46 	bl	8019a34 <__errno>
 8018da8:	2316      	movs	r3, #22
 8018daa:	6003      	str	r3, [r0, #0]
 8018dac:	2000      	movs	r0, #0
 8018dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018db2:	4834      	ldr	r0, [pc, #208]	@ (8018e84 <_strtol_l.constprop.0+0xf0>)
 8018db4:	460d      	mov	r5, r1
 8018db6:	462a      	mov	r2, r5
 8018db8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018dbc:	5d06      	ldrb	r6, [r0, r4]
 8018dbe:	f016 0608 	ands.w	r6, r6, #8
 8018dc2:	d1f8      	bne.n	8018db6 <_strtol_l.constprop.0+0x22>
 8018dc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8018dc6:	d12d      	bne.n	8018e24 <_strtol_l.constprop.0+0x90>
 8018dc8:	782c      	ldrb	r4, [r5, #0]
 8018dca:	2601      	movs	r6, #1
 8018dcc:	1c95      	adds	r5, r2, #2
 8018dce:	f033 0210 	bics.w	r2, r3, #16
 8018dd2:	d109      	bne.n	8018de8 <_strtol_l.constprop.0+0x54>
 8018dd4:	2c30      	cmp	r4, #48	@ 0x30
 8018dd6:	d12a      	bne.n	8018e2e <_strtol_l.constprop.0+0x9a>
 8018dd8:	782a      	ldrb	r2, [r5, #0]
 8018dda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018dde:	2a58      	cmp	r2, #88	@ 0x58
 8018de0:	d125      	bne.n	8018e2e <_strtol_l.constprop.0+0x9a>
 8018de2:	786c      	ldrb	r4, [r5, #1]
 8018de4:	2310      	movs	r3, #16
 8018de6:	3502      	adds	r5, #2
 8018de8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018dec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018df0:	2200      	movs	r2, #0
 8018df2:	fbbc f9f3 	udiv	r9, ip, r3
 8018df6:	4610      	mov	r0, r2
 8018df8:	fb03 ca19 	mls	sl, r3, r9, ip
 8018dfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8018e00:	2f09      	cmp	r7, #9
 8018e02:	d81b      	bhi.n	8018e3c <_strtol_l.constprop.0+0xa8>
 8018e04:	463c      	mov	r4, r7
 8018e06:	42a3      	cmp	r3, r4
 8018e08:	dd27      	ble.n	8018e5a <_strtol_l.constprop.0+0xc6>
 8018e0a:	1c57      	adds	r7, r2, #1
 8018e0c:	d007      	beq.n	8018e1e <_strtol_l.constprop.0+0x8a>
 8018e0e:	4581      	cmp	r9, r0
 8018e10:	d320      	bcc.n	8018e54 <_strtol_l.constprop.0+0xc0>
 8018e12:	d101      	bne.n	8018e18 <_strtol_l.constprop.0+0x84>
 8018e14:	45a2      	cmp	sl, r4
 8018e16:	db1d      	blt.n	8018e54 <_strtol_l.constprop.0+0xc0>
 8018e18:	fb00 4003 	mla	r0, r0, r3, r4
 8018e1c:	2201      	movs	r2, #1
 8018e1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018e22:	e7eb      	b.n	8018dfc <_strtol_l.constprop.0+0x68>
 8018e24:	2c2b      	cmp	r4, #43	@ 0x2b
 8018e26:	bf04      	itt	eq
 8018e28:	782c      	ldrbeq	r4, [r5, #0]
 8018e2a:	1c95      	addeq	r5, r2, #2
 8018e2c:	e7cf      	b.n	8018dce <_strtol_l.constprop.0+0x3a>
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d1da      	bne.n	8018de8 <_strtol_l.constprop.0+0x54>
 8018e32:	2c30      	cmp	r4, #48	@ 0x30
 8018e34:	bf0c      	ite	eq
 8018e36:	2308      	moveq	r3, #8
 8018e38:	230a      	movne	r3, #10
 8018e3a:	e7d5      	b.n	8018de8 <_strtol_l.constprop.0+0x54>
 8018e3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8018e40:	2f19      	cmp	r7, #25
 8018e42:	d801      	bhi.n	8018e48 <_strtol_l.constprop.0+0xb4>
 8018e44:	3c37      	subs	r4, #55	@ 0x37
 8018e46:	e7de      	b.n	8018e06 <_strtol_l.constprop.0+0x72>
 8018e48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018e4c:	2f19      	cmp	r7, #25
 8018e4e:	d804      	bhi.n	8018e5a <_strtol_l.constprop.0+0xc6>
 8018e50:	3c57      	subs	r4, #87	@ 0x57
 8018e52:	e7d8      	b.n	8018e06 <_strtol_l.constprop.0+0x72>
 8018e54:	f04f 32ff 	mov.w	r2, #4294967295
 8018e58:	e7e1      	b.n	8018e1e <_strtol_l.constprop.0+0x8a>
 8018e5a:	1c53      	adds	r3, r2, #1
 8018e5c:	d108      	bne.n	8018e70 <_strtol_l.constprop.0+0xdc>
 8018e5e:	2322      	movs	r3, #34	@ 0x22
 8018e60:	f8ce 3000 	str.w	r3, [lr]
 8018e64:	4660      	mov	r0, ip
 8018e66:	f1b8 0f00 	cmp.w	r8, #0
 8018e6a:	d0a0      	beq.n	8018dae <_strtol_l.constprop.0+0x1a>
 8018e6c:	1e69      	subs	r1, r5, #1
 8018e6e:	e006      	b.n	8018e7e <_strtol_l.constprop.0+0xea>
 8018e70:	b106      	cbz	r6, 8018e74 <_strtol_l.constprop.0+0xe0>
 8018e72:	4240      	negs	r0, r0
 8018e74:	f1b8 0f00 	cmp.w	r8, #0
 8018e78:	d099      	beq.n	8018dae <_strtol_l.constprop.0+0x1a>
 8018e7a:	2a00      	cmp	r2, #0
 8018e7c:	d1f6      	bne.n	8018e6c <_strtol_l.constprop.0+0xd8>
 8018e7e:	f8c8 1000 	str.w	r1, [r8]
 8018e82:	e794      	b.n	8018dae <_strtol_l.constprop.0+0x1a>
 8018e84:	0801d849 	.word	0x0801d849

08018e88 <strtol>:
 8018e88:	4613      	mov	r3, r2
 8018e8a:	460a      	mov	r2, r1
 8018e8c:	4601      	mov	r1, r0
 8018e8e:	4802      	ldr	r0, [pc, #8]	@ (8018e98 <strtol+0x10>)
 8018e90:	6800      	ldr	r0, [r0, #0]
 8018e92:	f7ff bf7f 	b.w	8018d94 <_strtol_l.constprop.0>
 8018e96:	bf00      	nop
 8018e98:	2400027c 	.word	0x2400027c

08018e9c <__cvt>:
 8018e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e9e:	ed2d 8b02 	vpush	{d8}
 8018ea2:	eeb0 8b40 	vmov.f64	d8, d0
 8018ea6:	b085      	sub	sp, #20
 8018ea8:	4617      	mov	r7, r2
 8018eaa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8018eac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018eae:	ee18 2a90 	vmov	r2, s17
 8018eb2:	f025 0520 	bic.w	r5, r5, #32
 8018eb6:	2a00      	cmp	r2, #0
 8018eb8:	bfb6      	itet	lt
 8018eba:	222d      	movlt	r2, #45	@ 0x2d
 8018ebc:	2200      	movge	r2, #0
 8018ebe:	eeb1 8b40 	vneglt.f64	d8, d0
 8018ec2:	2d46      	cmp	r5, #70	@ 0x46
 8018ec4:	460c      	mov	r4, r1
 8018ec6:	701a      	strb	r2, [r3, #0]
 8018ec8:	d004      	beq.n	8018ed4 <__cvt+0x38>
 8018eca:	2d45      	cmp	r5, #69	@ 0x45
 8018ecc:	d100      	bne.n	8018ed0 <__cvt+0x34>
 8018ece:	3401      	adds	r4, #1
 8018ed0:	2102      	movs	r1, #2
 8018ed2:	e000      	b.n	8018ed6 <__cvt+0x3a>
 8018ed4:	2103      	movs	r1, #3
 8018ed6:	ab03      	add	r3, sp, #12
 8018ed8:	9301      	str	r3, [sp, #4]
 8018eda:	ab02      	add	r3, sp, #8
 8018edc:	9300      	str	r3, [sp, #0]
 8018ede:	4622      	mov	r2, r4
 8018ee0:	4633      	mov	r3, r6
 8018ee2:	eeb0 0b48 	vmov.f64	d0, d8
 8018ee6:	f000 fe73 	bl	8019bd0 <_dtoa_r>
 8018eea:	2d47      	cmp	r5, #71	@ 0x47
 8018eec:	d114      	bne.n	8018f18 <__cvt+0x7c>
 8018eee:	07fb      	lsls	r3, r7, #31
 8018ef0:	d50a      	bpl.n	8018f08 <__cvt+0x6c>
 8018ef2:	1902      	adds	r2, r0, r4
 8018ef4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018efc:	bf08      	it	eq
 8018efe:	9203      	streq	r2, [sp, #12]
 8018f00:	2130      	movs	r1, #48	@ 0x30
 8018f02:	9b03      	ldr	r3, [sp, #12]
 8018f04:	4293      	cmp	r3, r2
 8018f06:	d319      	bcc.n	8018f3c <__cvt+0xa0>
 8018f08:	9b03      	ldr	r3, [sp, #12]
 8018f0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018f0c:	1a1b      	subs	r3, r3, r0
 8018f0e:	6013      	str	r3, [r2, #0]
 8018f10:	b005      	add	sp, #20
 8018f12:	ecbd 8b02 	vpop	{d8}
 8018f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f18:	2d46      	cmp	r5, #70	@ 0x46
 8018f1a:	eb00 0204 	add.w	r2, r0, r4
 8018f1e:	d1e9      	bne.n	8018ef4 <__cvt+0x58>
 8018f20:	7803      	ldrb	r3, [r0, #0]
 8018f22:	2b30      	cmp	r3, #48	@ 0x30
 8018f24:	d107      	bne.n	8018f36 <__cvt+0x9a>
 8018f26:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f2e:	bf1c      	itt	ne
 8018f30:	f1c4 0401 	rsbne	r4, r4, #1
 8018f34:	6034      	strne	r4, [r6, #0]
 8018f36:	6833      	ldr	r3, [r6, #0]
 8018f38:	441a      	add	r2, r3
 8018f3a:	e7db      	b.n	8018ef4 <__cvt+0x58>
 8018f3c:	1c5c      	adds	r4, r3, #1
 8018f3e:	9403      	str	r4, [sp, #12]
 8018f40:	7019      	strb	r1, [r3, #0]
 8018f42:	e7de      	b.n	8018f02 <__cvt+0x66>

08018f44 <__exponent>:
 8018f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f46:	2900      	cmp	r1, #0
 8018f48:	bfba      	itte	lt
 8018f4a:	4249      	neglt	r1, r1
 8018f4c:	232d      	movlt	r3, #45	@ 0x2d
 8018f4e:	232b      	movge	r3, #43	@ 0x2b
 8018f50:	2909      	cmp	r1, #9
 8018f52:	7002      	strb	r2, [r0, #0]
 8018f54:	7043      	strb	r3, [r0, #1]
 8018f56:	dd29      	ble.n	8018fac <__exponent+0x68>
 8018f58:	f10d 0307 	add.w	r3, sp, #7
 8018f5c:	461d      	mov	r5, r3
 8018f5e:	270a      	movs	r7, #10
 8018f60:	461a      	mov	r2, r3
 8018f62:	fbb1 f6f7 	udiv	r6, r1, r7
 8018f66:	fb07 1416 	mls	r4, r7, r6, r1
 8018f6a:	3430      	adds	r4, #48	@ 0x30
 8018f6c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018f70:	460c      	mov	r4, r1
 8018f72:	2c63      	cmp	r4, #99	@ 0x63
 8018f74:	f103 33ff 	add.w	r3, r3, #4294967295
 8018f78:	4631      	mov	r1, r6
 8018f7a:	dcf1      	bgt.n	8018f60 <__exponent+0x1c>
 8018f7c:	3130      	adds	r1, #48	@ 0x30
 8018f7e:	1e94      	subs	r4, r2, #2
 8018f80:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018f84:	1c41      	adds	r1, r0, #1
 8018f86:	4623      	mov	r3, r4
 8018f88:	42ab      	cmp	r3, r5
 8018f8a:	d30a      	bcc.n	8018fa2 <__exponent+0x5e>
 8018f8c:	f10d 0309 	add.w	r3, sp, #9
 8018f90:	1a9b      	subs	r3, r3, r2
 8018f92:	42ac      	cmp	r4, r5
 8018f94:	bf88      	it	hi
 8018f96:	2300      	movhi	r3, #0
 8018f98:	3302      	adds	r3, #2
 8018f9a:	4403      	add	r3, r0
 8018f9c:	1a18      	subs	r0, r3, r0
 8018f9e:	b003      	add	sp, #12
 8018fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fa2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018fa6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018faa:	e7ed      	b.n	8018f88 <__exponent+0x44>
 8018fac:	2330      	movs	r3, #48	@ 0x30
 8018fae:	3130      	adds	r1, #48	@ 0x30
 8018fb0:	7083      	strb	r3, [r0, #2]
 8018fb2:	70c1      	strb	r1, [r0, #3]
 8018fb4:	1d03      	adds	r3, r0, #4
 8018fb6:	e7f1      	b.n	8018f9c <__exponent+0x58>

08018fb8 <_printf_float>:
 8018fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fbc:	b08d      	sub	sp, #52	@ 0x34
 8018fbe:	460c      	mov	r4, r1
 8018fc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018fc4:	4616      	mov	r6, r2
 8018fc6:	461f      	mov	r7, r3
 8018fc8:	4605      	mov	r5, r0
 8018fca:	f000 fce9 	bl	80199a0 <_localeconv_r>
 8018fce:	f8d0 b000 	ldr.w	fp, [r0]
 8018fd2:	4658      	mov	r0, fp
 8018fd4:	f7e7 f9fc 	bl	80003d0 <strlen>
 8018fd8:	2300      	movs	r3, #0
 8018fda:	930a      	str	r3, [sp, #40]	@ 0x28
 8018fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8018fe0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8018fe4:	6822      	ldr	r2, [r4, #0]
 8018fe6:	9005      	str	r0, [sp, #20]
 8018fe8:	3307      	adds	r3, #7
 8018fea:	f023 0307 	bic.w	r3, r3, #7
 8018fee:	f103 0108 	add.w	r1, r3, #8
 8018ff2:	f8c8 1000 	str.w	r1, [r8]
 8018ff6:	ed93 0b00 	vldr	d0, [r3]
 8018ffa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8019258 <_printf_float+0x2a0>
 8018ffe:	eeb0 7bc0 	vabs.f64	d7, d0
 8019002:	eeb4 7b46 	vcmp.f64	d7, d6
 8019006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801900a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801900e:	dd24      	ble.n	801905a <_printf_float+0xa2>
 8019010:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019018:	d502      	bpl.n	8019020 <_printf_float+0x68>
 801901a:	232d      	movs	r3, #45	@ 0x2d
 801901c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019020:	498f      	ldr	r1, [pc, #572]	@ (8019260 <_printf_float+0x2a8>)
 8019022:	4b90      	ldr	r3, [pc, #576]	@ (8019264 <_printf_float+0x2ac>)
 8019024:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8019028:	bf94      	ite	ls
 801902a:	4688      	movls	r8, r1
 801902c:	4698      	movhi	r8, r3
 801902e:	f022 0204 	bic.w	r2, r2, #4
 8019032:	2303      	movs	r3, #3
 8019034:	6123      	str	r3, [r4, #16]
 8019036:	6022      	str	r2, [r4, #0]
 8019038:	f04f 0a00 	mov.w	sl, #0
 801903c:	9700      	str	r7, [sp, #0]
 801903e:	4633      	mov	r3, r6
 8019040:	aa0b      	add	r2, sp, #44	@ 0x2c
 8019042:	4621      	mov	r1, r4
 8019044:	4628      	mov	r0, r5
 8019046:	f000 f9d1 	bl	80193ec <_printf_common>
 801904a:	3001      	adds	r0, #1
 801904c:	f040 8089 	bne.w	8019162 <_printf_float+0x1aa>
 8019050:	f04f 30ff 	mov.w	r0, #4294967295
 8019054:	b00d      	add	sp, #52	@ 0x34
 8019056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801905a:	eeb4 0b40 	vcmp.f64	d0, d0
 801905e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019062:	d709      	bvc.n	8019078 <_printf_float+0xc0>
 8019064:	ee10 3a90 	vmov	r3, s1
 8019068:	2b00      	cmp	r3, #0
 801906a:	bfbc      	itt	lt
 801906c:	232d      	movlt	r3, #45	@ 0x2d
 801906e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8019072:	497d      	ldr	r1, [pc, #500]	@ (8019268 <_printf_float+0x2b0>)
 8019074:	4b7d      	ldr	r3, [pc, #500]	@ (801926c <_printf_float+0x2b4>)
 8019076:	e7d5      	b.n	8019024 <_printf_float+0x6c>
 8019078:	6863      	ldr	r3, [r4, #4]
 801907a:	1c59      	adds	r1, r3, #1
 801907c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8019080:	d139      	bne.n	80190f6 <_printf_float+0x13e>
 8019082:	2306      	movs	r3, #6
 8019084:	6063      	str	r3, [r4, #4]
 8019086:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801908a:	2300      	movs	r3, #0
 801908c:	6022      	str	r2, [r4, #0]
 801908e:	9303      	str	r3, [sp, #12]
 8019090:	ab0a      	add	r3, sp, #40	@ 0x28
 8019092:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8019096:	ab09      	add	r3, sp, #36	@ 0x24
 8019098:	9300      	str	r3, [sp, #0]
 801909a:	6861      	ldr	r1, [r4, #4]
 801909c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80190a0:	4628      	mov	r0, r5
 80190a2:	f7ff fefb 	bl	8018e9c <__cvt>
 80190a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80190aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80190ac:	4680      	mov	r8, r0
 80190ae:	d129      	bne.n	8019104 <_printf_float+0x14c>
 80190b0:	1cc8      	adds	r0, r1, #3
 80190b2:	db02      	blt.n	80190ba <_printf_float+0x102>
 80190b4:	6863      	ldr	r3, [r4, #4]
 80190b6:	4299      	cmp	r1, r3
 80190b8:	dd41      	ble.n	801913e <_printf_float+0x186>
 80190ba:	f1a9 0902 	sub.w	r9, r9, #2
 80190be:	fa5f f989 	uxtb.w	r9, r9
 80190c2:	3901      	subs	r1, #1
 80190c4:	464a      	mov	r2, r9
 80190c6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80190ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80190cc:	f7ff ff3a 	bl	8018f44 <__exponent>
 80190d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80190d2:	1813      	adds	r3, r2, r0
 80190d4:	2a01      	cmp	r2, #1
 80190d6:	4682      	mov	sl, r0
 80190d8:	6123      	str	r3, [r4, #16]
 80190da:	dc02      	bgt.n	80190e2 <_printf_float+0x12a>
 80190dc:	6822      	ldr	r2, [r4, #0]
 80190de:	07d2      	lsls	r2, r2, #31
 80190e0:	d501      	bpl.n	80190e6 <_printf_float+0x12e>
 80190e2:	3301      	adds	r3, #1
 80190e4:	6123      	str	r3, [r4, #16]
 80190e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d0a6      	beq.n	801903c <_printf_float+0x84>
 80190ee:	232d      	movs	r3, #45	@ 0x2d
 80190f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80190f4:	e7a2      	b.n	801903c <_printf_float+0x84>
 80190f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80190fa:	d1c4      	bne.n	8019086 <_printf_float+0xce>
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d1c2      	bne.n	8019086 <_printf_float+0xce>
 8019100:	2301      	movs	r3, #1
 8019102:	e7bf      	b.n	8019084 <_printf_float+0xcc>
 8019104:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019108:	d9db      	bls.n	80190c2 <_printf_float+0x10a>
 801910a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801910e:	d118      	bne.n	8019142 <_printf_float+0x18a>
 8019110:	2900      	cmp	r1, #0
 8019112:	6863      	ldr	r3, [r4, #4]
 8019114:	dd0b      	ble.n	801912e <_printf_float+0x176>
 8019116:	6121      	str	r1, [r4, #16]
 8019118:	b913      	cbnz	r3, 8019120 <_printf_float+0x168>
 801911a:	6822      	ldr	r2, [r4, #0]
 801911c:	07d0      	lsls	r0, r2, #31
 801911e:	d502      	bpl.n	8019126 <_printf_float+0x16e>
 8019120:	3301      	adds	r3, #1
 8019122:	440b      	add	r3, r1
 8019124:	6123      	str	r3, [r4, #16]
 8019126:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019128:	f04f 0a00 	mov.w	sl, #0
 801912c:	e7db      	b.n	80190e6 <_printf_float+0x12e>
 801912e:	b913      	cbnz	r3, 8019136 <_printf_float+0x17e>
 8019130:	6822      	ldr	r2, [r4, #0]
 8019132:	07d2      	lsls	r2, r2, #31
 8019134:	d501      	bpl.n	801913a <_printf_float+0x182>
 8019136:	3302      	adds	r3, #2
 8019138:	e7f4      	b.n	8019124 <_printf_float+0x16c>
 801913a:	2301      	movs	r3, #1
 801913c:	e7f2      	b.n	8019124 <_printf_float+0x16c>
 801913e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8019142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019144:	4299      	cmp	r1, r3
 8019146:	db05      	blt.n	8019154 <_printf_float+0x19c>
 8019148:	6823      	ldr	r3, [r4, #0]
 801914a:	6121      	str	r1, [r4, #16]
 801914c:	07d8      	lsls	r0, r3, #31
 801914e:	d5ea      	bpl.n	8019126 <_printf_float+0x16e>
 8019150:	1c4b      	adds	r3, r1, #1
 8019152:	e7e7      	b.n	8019124 <_printf_float+0x16c>
 8019154:	2900      	cmp	r1, #0
 8019156:	bfd4      	ite	le
 8019158:	f1c1 0202 	rsble	r2, r1, #2
 801915c:	2201      	movgt	r2, #1
 801915e:	4413      	add	r3, r2
 8019160:	e7e0      	b.n	8019124 <_printf_float+0x16c>
 8019162:	6823      	ldr	r3, [r4, #0]
 8019164:	055a      	lsls	r2, r3, #21
 8019166:	d407      	bmi.n	8019178 <_printf_float+0x1c0>
 8019168:	6923      	ldr	r3, [r4, #16]
 801916a:	4642      	mov	r2, r8
 801916c:	4631      	mov	r1, r6
 801916e:	4628      	mov	r0, r5
 8019170:	47b8      	blx	r7
 8019172:	3001      	adds	r0, #1
 8019174:	d12a      	bne.n	80191cc <_printf_float+0x214>
 8019176:	e76b      	b.n	8019050 <_printf_float+0x98>
 8019178:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801917c:	f240 80e0 	bls.w	8019340 <_printf_float+0x388>
 8019180:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8019184:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801918c:	d133      	bne.n	80191f6 <_printf_float+0x23e>
 801918e:	4a38      	ldr	r2, [pc, #224]	@ (8019270 <_printf_float+0x2b8>)
 8019190:	2301      	movs	r3, #1
 8019192:	4631      	mov	r1, r6
 8019194:	4628      	mov	r0, r5
 8019196:	47b8      	blx	r7
 8019198:	3001      	adds	r0, #1
 801919a:	f43f af59 	beq.w	8019050 <_printf_float+0x98>
 801919e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80191a2:	4543      	cmp	r3, r8
 80191a4:	db02      	blt.n	80191ac <_printf_float+0x1f4>
 80191a6:	6823      	ldr	r3, [r4, #0]
 80191a8:	07d8      	lsls	r0, r3, #31
 80191aa:	d50f      	bpl.n	80191cc <_printf_float+0x214>
 80191ac:	9b05      	ldr	r3, [sp, #20]
 80191ae:	465a      	mov	r2, fp
 80191b0:	4631      	mov	r1, r6
 80191b2:	4628      	mov	r0, r5
 80191b4:	47b8      	blx	r7
 80191b6:	3001      	adds	r0, #1
 80191b8:	f43f af4a 	beq.w	8019050 <_printf_float+0x98>
 80191bc:	f04f 0900 	mov.w	r9, #0
 80191c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80191c4:	f104 0a1a 	add.w	sl, r4, #26
 80191c8:	45c8      	cmp	r8, r9
 80191ca:	dc09      	bgt.n	80191e0 <_printf_float+0x228>
 80191cc:	6823      	ldr	r3, [r4, #0]
 80191ce:	079b      	lsls	r3, r3, #30
 80191d0:	f100 8107 	bmi.w	80193e2 <_printf_float+0x42a>
 80191d4:	68e0      	ldr	r0, [r4, #12]
 80191d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80191d8:	4298      	cmp	r0, r3
 80191da:	bfb8      	it	lt
 80191dc:	4618      	movlt	r0, r3
 80191de:	e739      	b.n	8019054 <_printf_float+0x9c>
 80191e0:	2301      	movs	r3, #1
 80191e2:	4652      	mov	r2, sl
 80191e4:	4631      	mov	r1, r6
 80191e6:	4628      	mov	r0, r5
 80191e8:	47b8      	blx	r7
 80191ea:	3001      	adds	r0, #1
 80191ec:	f43f af30 	beq.w	8019050 <_printf_float+0x98>
 80191f0:	f109 0901 	add.w	r9, r9, #1
 80191f4:	e7e8      	b.n	80191c8 <_printf_float+0x210>
 80191f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	dc3b      	bgt.n	8019274 <_printf_float+0x2bc>
 80191fc:	4a1c      	ldr	r2, [pc, #112]	@ (8019270 <_printf_float+0x2b8>)
 80191fe:	2301      	movs	r3, #1
 8019200:	4631      	mov	r1, r6
 8019202:	4628      	mov	r0, r5
 8019204:	47b8      	blx	r7
 8019206:	3001      	adds	r0, #1
 8019208:	f43f af22 	beq.w	8019050 <_printf_float+0x98>
 801920c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019210:	ea59 0303 	orrs.w	r3, r9, r3
 8019214:	d102      	bne.n	801921c <_printf_float+0x264>
 8019216:	6823      	ldr	r3, [r4, #0]
 8019218:	07d9      	lsls	r1, r3, #31
 801921a:	d5d7      	bpl.n	80191cc <_printf_float+0x214>
 801921c:	9b05      	ldr	r3, [sp, #20]
 801921e:	465a      	mov	r2, fp
 8019220:	4631      	mov	r1, r6
 8019222:	4628      	mov	r0, r5
 8019224:	47b8      	blx	r7
 8019226:	3001      	adds	r0, #1
 8019228:	f43f af12 	beq.w	8019050 <_printf_float+0x98>
 801922c:	f04f 0a00 	mov.w	sl, #0
 8019230:	f104 0b1a 	add.w	fp, r4, #26
 8019234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019236:	425b      	negs	r3, r3
 8019238:	4553      	cmp	r3, sl
 801923a:	dc01      	bgt.n	8019240 <_printf_float+0x288>
 801923c:	464b      	mov	r3, r9
 801923e:	e794      	b.n	801916a <_printf_float+0x1b2>
 8019240:	2301      	movs	r3, #1
 8019242:	465a      	mov	r2, fp
 8019244:	4631      	mov	r1, r6
 8019246:	4628      	mov	r0, r5
 8019248:	47b8      	blx	r7
 801924a:	3001      	adds	r0, #1
 801924c:	f43f af00 	beq.w	8019050 <_printf_float+0x98>
 8019250:	f10a 0a01 	add.w	sl, sl, #1
 8019254:	e7ee      	b.n	8019234 <_printf_float+0x27c>
 8019256:	bf00      	nop
 8019258:	ffffffff 	.word	0xffffffff
 801925c:	7fefffff 	.word	0x7fefffff
 8019260:	0801d949 	.word	0x0801d949
 8019264:	0801d94d 	.word	0x0801d94d
 8019268:	0801d951 	.word	0x0801d951
 801926c:	0801d955 	.word	0x0801d955
 8019270:	0801d959 	.word	0x0801d959
 8019274:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019276:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801927a:	4553      	cmp	r3, sl
 801927c:	bfa8      	it	ge
 801927e:	4653      	movge	r3, sl
 8019280:	2b00      	cmp	r3, #0
 8019282:	4699      	mov	r9, r3
 8019284:	dc37      	bgt.n	80192f6 <_printf_float+0x33e>
 8019286:	2300      	movs	r3, #0
 8019288:	9307      	str	r3, [sp, #28]
 801928a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801928e:	f104 021a 	add.w	r2, r4, #26
 8019292:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019294:	9907      	ldr	r1, [sp, #28]
 8019296:	9306      	str	r3, [sp, #24]
 8019298:	eba3 0309 	sub.w	r3, r3, r9
 801929c:	428b      	cmp	r3, r1
 801929e:	dc31      	bgt.n	8019304 <_printf_float+0x34c>
 80192a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192a2:	459a      	cmp	sl, r3
 80192a4:	dc3b      	bgt.n	801931e <_printf_float+0x366>
 80192a6:	6823      	ldr	r3, [r4, #0]
 80192a8:	07da      	lsls	r2, r3, #31
 80192aa:	d438      	bmi.n	801931e <_printf_float+0x366>
 80192ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192ae:	ebaa 0903 	sub.w	r9, sl, r3
 80192b2:	9b06      	ldr	r3, [sp, #24]
 80192b4:	ebaa 0303 	sub.w	r3, sl, r3
 80192b8:	4599      	cmp	r9, r3
 80192ba:	bfa8      	it	ge
 80192bc:	4699      	movge	r9, r3
 80192be:	f1b9 0f00 	cmp.w	r9, #0
 80192c2:	dc34      	bgt.n	801932e <_printf_float+0x376>
 80192c4:	f04f 0800 	mov.w	r8, #0
 80192c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80192cc:	f104 0b1a 	add.w	fp, r4, #26
 80192d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192d2:	ebaa 0303 	sub.w	r3, sl, r3
 80192d6:	eba3 0309 	sub.w	r3, r3, r9
 80192da:	4543      	cmp	r3, r8
 80192dc:	f77f af76 	ble.w	80191cc <_printf_float+0x214>
 80192e0:	2301      	movs	r3, #1
 80192e2:	465a      	mov	r2, fp
 80192e4:	4631      	mov	r1, r6
 80192e6:	4628      	mov	r0, r5
 80192e8:	47b8      	blx	r7
 80192ea:	3001      	adds	r0, #1
 80192ec:	f43f aeb0 	beq.w	8019050 <_printf_float+0x98>
 80192f0:	f108 0801 	add.w	r8, r8, #1
 80192f4:	e7ec      	b.n	80192d0 <_printf_float+0x318>
 80192f6:	4642      	mov	r2, r8
 80192f8:	4631      	mov	r1, r6
 80192fa:	4628      	mov	r0, r5
 80192fc:	47b8      	blx	r7
 80192fe:	3001      	adds	r0, #1
 8019300:	d1c1      	bne.n	8019286 <_printf_float+0x2ce>
 8019302:	e6a5      	b.n	8019050 <_printf_float+0x98>
 8019304:	2301      	movs	r3, #1
 8019306:	4631      	mov	r1, r6
 8019308:	4628      	mov	r0, r5
 801930a:	9206      	str	r2, [sp, #24]
 801930c:	47b8      	blx	r7
 801930e:	3001      	adds	r0, #1
 8019310:	f43f ae9e 	beq.w	8019050 <_printf_float+0x98>
 8019314:	9b07      	ldr	r3, [sp, #28]
 8019316:	9a06      	ldr	r2, [sp, #24]
 8019318:	3301      	adds	r3, #1
 801931a:	9307      	str	r3, [sp, #28]
 801931c:	e7b9      	b.n	8019292 <_printf_float+0x2da>
 801931e:	9b05      	ldr	r3, [sp, #20]
 8019320:	465a      	mov	r2, fp
 8019322:	4631      	mov	r1, r6
 8019324:	4628      	mov	r0, r5
 8019326:	47b8      	blx	r7
 8019328:	3001      	adds	r0, #1
 801932a:	d1bf      	bne.n	80192ac <_printf_float+0x2f4>
 801932c:	e690      	b.n	8019050 <_printf_float+0x98>
 801932e:	9a06      	ldr	r2, [sp, #24]
 8019330:	464b      	mov	r3, r9
 8019332:	4442      	add	r2, r8
 8019334:	4631      	mov	r1, r6
 8019336:	4628      	mov	r0, r5
 8019338:	47b8      	blx	r7
 801933a:	3001      	adds	r0, #1
 801933c:	d1c2      	bne.n	80192c4 <_printf_float+0x30c>
 801933e:	e687      	b.n	8019050 <_printf_float+0x98>
 8019340:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8019344:	f1b9 0f01 	cmp.w	r9, #1
 8019348:	dc01      	bgt.n	801934e <_printf_float+0x396>
 801934a:	07db      	lsls	r3, r3, #31
 801934c:	d536      	bpl.n	80193bc <_printf_float+0x404>
 801934e:	2301      	movs	r3, #1
 8019350:	4642      	mov	r2, r8
 8019352:	4631      	mov	r1, r6
 8019354:	4628      	mov	r0, r5
 8019356:	47b8      	blx	r7
 8019358:	3001      	adds	r0, #1
 801935a:	f43f ae79 	beq.w	8019050 <_printf_float+0x98>
 801935e:	9b05      	ldr	r3, [sp, #20]
 8019360:	465a      	mov	r2, fp
 8019362:	4631      	mov	r1, r6
 8019364:	4628      	mov	r0, r5
 8019366:	47b8      	blx	r7
 8019368:	3001      	adds	r0, #1
 801936a:	f43f ae71 	beq.w	8019050 <_printf_float+0x98>
 801936e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8019372:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801937a:	f109 39ff 	add.w	r9, r9, #4294967295
 801937e:	d018      	beq.n	80193b2 <_printf_float+0x3fa>
 8019380:	464b      	mov	r3, r9
 8019382:	f108 0201 	add.w	r2, r8, #1
 8019386:	4631      	mov	r1, r6
 8019388:	4628      	mov	r0, r5
 801938a:	47b8      	blx	r7
 801938c:	3001      	adds	r0, #1
 801938e:	d10c      	bne.n	80193aa <_printf_float+0x3f2>
 8019390:	e65e      	b.n	8019050 <_printf_float+0x98>
 8019392:	2301      	movs	r3, #1
 8019394:	465a      	mov	r2, fp
 8019396:	4631      	mov	r1, r6
 8019398:	4628      	mov	r0, r5
 801939a:	47b8      	blx	r7
 801939c:	3001      	adds	r0, #1
 801939e:	f43f ae57 	beq.w	8019050 <_printf_float+0x98>
 80193a2:	f108 0801 	add.w	r8, r8, #1
 80193a6:	45c8      	cmp	r8, r9
 80193a8:	dbf3      	blt.n	8019392 <_printf_float+0x3da>
 80193aa:	4653      	mov	r3, sl
 80193ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80193b0:	e6dc      	b.n	801916c <_printf_float+0x1b4>
 80193b2:	f04f 0800 	mov.w	r8, #0
 80193b6:	f104 0b1a 	add.w	fp, r4, #26
 80193ba:	e7f4      	b.n	80193a6 <_printf_float+0x3ee>
 80193bc:	2301      	movs	r3, #1
 80193be:	4642      	mov	r2, r8
 80193c0:	e7e1      	b.n	8019386 <_printf_float+0x3ce>
 80193c2:	2301      	movs	r3, #1
 80193c4:	464a      	mov	r2, r9
 80193c6:	4631      	mov	r1, r6
 80193c8:	4628      	mov	r0, r5
 80193ca:	47b8      	blx	r7
 80193cc:	3001      	adds	r0, #1
 80193ce:	f43f ae3f 	beq.w	8019050 <_printf_float+0x98>
 80193d2:	f108 0801 	add.w	r8, r8, #1
 80193d6:	68e3      	ldr	r3, [r4, #12]
 80193d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80193da:	1a5b      	subs	r3, r3, r1
 80193dc:	4543      	cmp	r3, r8
 80193de:	dcf0      	bgt.n	80193c2 <_printf_float+0x40a>
 80193e0:	e6f8      	b.n	80191d4 <_printf_float+0x21c>
 80193e2:	f04f 0800 	mov.w	r8, #0
 80193e6:	f104 0919 	add.w	r9, r4, #25
 80193ea:	e7f4      	b.n	80193d6 <_printf_float+0x41e>

080193ec <_printf_common>:
 80193ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193f0:	4616      	mov	r6, r2
 80193f2:	4698      	mov	r8, r3
 80193f4:	688a      	ldr	r2, [r1, #8]
 80193f6:	690b      	ldr	r3, [r1, #16]
 80193f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80193fc:	4293      	cmp	r3, r2
 80193fe:	bfb8      	it	lt
 8019400:	4613      	movlt	r3, r2
 8019402:	6033      	str	r3, [r6, #0]
 8019404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019408:	4607      	mov	r7, r0
 801940a:	460c      	mov	r4, r1
 801940c:	b10a      	cbz	r2, 8019412 <_printf_common+0x26>
 801940e:	3301      	adds	r3, #1
 8019410:	6033      	str	r3, [r6, #0]
 8019412:	6823      	ldr	r3, [r4, #0]
 8019414:	0699      	lsls	r1, r3, #26
 8019416:	bf42      	ittt	mi
 8019418:	6833      	ldrmi	r3, [r6, #0]
 801941a:	3302      	addmi	r3, #2
 801941c:	6033      	strmi	r3, [r6, #0]
 801941e:	6825      	ldr	r5, [r4, #0]
 8019420:	f015 0506 	ands.w	r5, r5, #6
 8019424:	d106      	bne.n	8019434 <_printf_common+0x48>
 8019426:	f104 0a19 	add.w	sl, r4, #25
 801942a:	68e3      	ldr	r3, [r4, #12]
 801942c:	6832      	ldr	r2, [r6, #0]
 801942e:	1a9b      	subs	r3, r3, r2
 8019430:	42ab      	cmp	r3, r5
 8019432:	dc26      	bgt.n	8019482 <_printf_common+0x96>
 8019434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019438:	6822      	ldr	r2, [r4, #0]
 801943a:	3b00      	subs	r3, #0
 801943c:	bf18      	it	ne
 801943e:	2301      	movne	r3, #1
 8019440:	0692      	lsls	r2, r2, #26
 8019442:	d42b      	bmi.n	801949c <_printf_common+0xb0>
 8019444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019448:	4641      	mov	r1, r8
 801944a:	4638      	mov	r0, r7
 801944c:	47c8      	blx	r9
 801944e:	3001      	adds	r0, #1
 8019450:	d01e      	beq.n	8019490 <_printf_common+0xa4>
 8019452:	6823      	ldr	r3, [r4, #0]
 8019454:	6922      	ldr	r2, [r4, #16]
 8019456:	f003 0306 	and.w	r3, r3, #6
 801945a:	2b04      	cmp	r3, #4
 801945c:	bf02      	ittt	eq
 801945e:	68e5      	ldreq	r5, [r4, #12]
 8019460:	6833      	ldreq	r3, [r6, #0]
 8019462:	1aed      	subeq	r5, r5, r3
 8019464:	68a3      	ldr	r3, [r4, #8]
 8019466:	bf0c      	ite	eq
 8019468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801946c:	2500      	movne	r5, #0
 801946e:	4293      	cmp	r3, r2
 8019470:	bfc4      	itt	gt
 8019472:	1a9b      	subgt	r3, r3, r2
 8019474:	18ed      	addgt	r5, r5, r3
 8019476:	2600      	movs	r6, #0
 8019478:	341a      	adds	r4, #26
 801947a:	42b5      	cmp	r5, r6
 801947c:	d11a      	bne.n	80194b4 <_printf_common+0xc8>
 801947e:	2000      	movs	r0, #0
 8019480:	e008      	b.n	8019494 <_printf_common+0xa8>
 8019482:	2301      	movs	r3, #1
 8019484:	4652      	mov	r2, sl
 8019486:	4641      	mov	r1, r8
 8019488:	4638      	mov	r0, r7
 801948a:	47c8      	blx	r9
 801948c:	3001      	adds	r0, #1
 801948e:	d103      	bne.n	8019498 <_printf_common+0xac>
 8019490:	f04f 30ff 	mov.w	r0, #4294967295
 8019494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019498:	3501      	adds	r5, #1
 801949a:	e7c6      	b.n	801942a <_printf_common+0x3e>
 801949c:	18e1      	adds	r1, r4, r3
 801949e:	1c5a      	adds	r2, r3, #1
 80194a0:	2030      	movs	r0, #48	@ 0x30
 80194a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80194a6:	4422      	add	r2, r4
 80194a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80194ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80194b0:	3302      	adds	r3, #2
 80194b2:	e7c7      	b.n	8019444 <_printf_common+0x58>
 80194b4:	2301      	movs	r3, #1
 80194b6:	4622      	mov	r2, r4
 80194b8:	4641      	mov	r1, r8
 80194ba:	4638      	mov	r0, r7
 80194bc:	47c8      	blx	r9
 80194be:	3001      	adds	r0, #1
 80194c0:	d0e6      	beq.n	8019490 <_printf_common+0xa4>
 80194c2:	3601      	adds	r6, #1
 80194c4:	e7d9      	b.n	801947a <_printf_common+0x8e>
	...

080194c8 <_printf_i>:
 80194c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80194cc:	7e0f      	ldrb	r7, [r1, #24]
 80194ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80194d0:	2f78      	cmp	r7, #120	@ 0x78
 80194d2:	4691      	mov	r9, r2
 80194d4:	4680      	mov	r8, r0
 80194d6:	460c      	mov	r4, r1
 80194d8:	469a      	mov	sl, r3
 80194da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80194de:	d807      	bhi.n	80194f0 <_printf_i+0x28>
 80194e0:	2f62      	cmp	r7, #98	@ 0x62
 80194e2:	d80a      	bhi.n	80194fa <_printf_i+0x32>
 80194e4:	2f00      	cmp	r7, #0
 80194e6:	f000 80d2 	beq.w	801968e <_printf_i+0x1c6>
 80194ea:	2f58      	cmp	r7, #88	@ 0x58
 80194ec:	f000 80b9 	beq.w	8019662 <_printf_i+0x19a>
 80194f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80194f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80194f8:	e03a      	b.n	8019570 <_printf_i+0xa8>
 80194fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80194fe:	2b15      	cmp	r3, #21
 8019500:	d8f6      	bhi.n	80194f0 <_printf_i+0x28>
 8019502:	a101      	add	r1, pc, #4	@ (adr r1, 8019508 <_printf_i+0x40>)
 8019504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019508:	08019561 	.word	0x08019561
 801950c:	08019575 	.word	0x08019575
 8019510:	080194f1 	.word	0x080194f1
 8019514:	080194f1 	.word	0x080194f1
 8019518:	080194f1 	.word	0x080194f1
 801951c:	080194f1 	.word	0x080194f1
 8019520:	08019575 	.word	0x08019575
 8019524:	080194f1 	.word	0x080194f1
 8019528:	080194f1 	.word	0x080194f1
 801952c:	080194f1 	.word	0x080194f1
 8019530:	080194f1 	.word	0x080194f1
 8019534:	08019675 	.word	0x08019675
 8019538:	0801959f 	.word	0x0801959f
 801953c:	0801962f 	.word	0x0801962f
 8019540:	080194f1 	.word	0x080194f1
 8019544:	080194f1 	.word	0x080194f1
 8019548:	08019697 	.word	0x08019697
 801954c:	080194f1 	.word	0x080194f1
 8019550:	0801959f 	.word	0x0801959f
 8019554:	080194f1 	.word	0x080194f1
 8019558:	080194f1 	.word	0x080194f1
 801955c:	08019637 	.word	0x08019637
 8019560:	6833      	ldr	r3, [r6, #0]
 8019562:	1d1a      	adds	r2, r3, #4
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	6032      	str	r2, [r6, #0]
 8019568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801956c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019570:	2301      	movs	r3, #1
 8019572:	e09d      	b.n	80196b0 <_printf_i+0x1e8>
 8019574:	6833      	ldr	r3, [r6, #0]
 8019576:	6820      	ldr	r0, [r4, #0]
 8019578:	1d19      	adds	r1, r3, #4
 801957a:	6031      	str	r1, [r6, #0]
 801957c:	0606      	lsls	r6, r0, #24
 801957e:	d501      	bpl.n	8019584 <_printf_i+0xbc>
 8019580:	681d      	ldr	r5, [r3, #0]
 8019582:	e003      	b.n	801958c <_printf_i+0xc4>
 8019584:	0645      	lsls	r5, r0, #25
 8019586:	d5fb      	bpl.n	8019580 <_printf_i+0xb8>
 8019588:	f9b3 5000 	ldrsh.w	r5, [r3]
 801958c:	2d00      	cmp	r5, #0
 801958e:	da03      	bge.n	8019598 <_printf_i+0xd0>
 8019590:	232d      	movs	r3, #45	@ 0x2d
 8019592:	426d      	negs	r5, r5
 8019594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019598:	4859      	ldr	r0, [pc, #356]	@ (8019700 <_printf_i+0x238>)
 801959a:	230a      	movs	r3, #10
 801959c:	e011      	b.n	80195c2 <_printf_i+0xfa>
 801959e:	6821      	ldr	r1, [r4, #0]
 80195a0:	6833      	ldr	r3, [r6, #0]
 80195a2:	0608      	lsls	r0, r1, #24
 80195a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80195a8:	d402      	bmi.n	80195b0 <_printf_i+0xe8>
 80195aa:	0649      	lsls	r1, r1, #25
 80195ac:	bf48      	it	mi
 80195ae:	b2ad      	uxthmi	r5, r5
 80195b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80195b2:	4853      	ldr	r0, [pc, #332]	@ (8019700 <_printf_i+0x238>)
 80195b4:	6033      	str	r3, [r6, #0]
 80195b6:	bf14      	ite	ne
 80195b8:	230a      	movne	r3, #10
 80195ba:	2308      	moveq	r3, #8
 80195bc:	2100      	movs	r1, #0
 80195be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80195c2:	6866      	ldr	r6, [r4, #4]
 80195c4:	60a6      	str	r6, [r4, #8]
 80195c6:	2e00      	cmp	r6, #0
 80195c8:	bfa2      	ittt	ge
 80195ca:	6821      	ldrge	r1, [r4, #0]
 80195cc:	f021 0104 	bicge.w	r1, r1, #4
 80195d0:	6021      	strge	r1, [r4, #0]
 80195d2:	b90d      	cbnz	r5, 80195d8 <_printf_i+0x110>
 80195d4:	2e00      	cmp	r6, #0
 80195d6:	d04b      	beq.n	8019670 <_printf_i+0x1a8>
 80195d8:	4616      	mov	r6, r2
 80195da:	fbb5 f1f3 	udiv	r1, r5, r3
 80195de:	fb03 5711 	mls	r7, r3, r1, r5
 80195e2:	5dc7      	ldrb	r7, [r0, r7]
 80195e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80195e8:	462f      	mov	r7, r5
 80195ea:	42bb      	cmp	r3, r7
 80195ec:	460d      	mov	r5, r1
 80195ee:	d9f4      	bls.n	80195da <_printf_i+0x112>
 80195f0:	2b08      	cmp	r3, #8
 80195f2:	d10b      	bne.n	801960c <_printf_i+0x144>
 80195f4:	6823      	ldr	r3, [r4, #0]
 80195f6:	07df      	lsls	r7, r3, #31
 80195f8:	d508      	bpl.n	801960c <_printf_i+0x144>
 80195fa:	6923      	ldr	r3, [r4, #16]
 80195fc:	6861      	ldr	r1, [r4, #4]
 80195fe:	4299      	cmp	r1, r3
 8019600:	bfde      	ittt	le
 8019602:	2330      	movle	r3, #48	@ 0x30
 8019604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019608:	f106 36ff 	addle.w	r6, r6, #4294967295
 801960c:	1b92      	subs	r2, r2, r6
 801960e:	6122      	str	r2, [r4, #16]
 8019610:	f8cd a000 	str.w	sl, [sp]
 8019614:	464b      	mov	r3, r9
 8019616:	aa03      	add	r2, sp, #12
 8019618:	4621      	mov	r1, r4
 801961a:	4640      	mov	r0, r8
 801961c:	f7ff fee6 	bl	80193ec <_printf_common>
 8019620:	3001      	adds	r0, #1
 8019622:	d14a      	bne.n	80196ba <_printf_i+0x1f2>
 8019624:	f04f 30ff 	mov.w	r0, #4294967295
 8019628:	b004      	add	sp, #16
 801962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801962e:	6823      	ldr	r3, [r4, #0]
 8019630:	f043 0320 	orr.w	r3, r3, #32
 8019634:	6023      	str	r3, [r4, #0]
 8019636:	4833      	ldr	r0, [pc, #204]	@ (8019704 <_printf_i+0x23c>)
 8019638:	2778      	movs	r7, #120	@ 0x78
 801963a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801963e:	6823      	ldr	r3, [r4, #0]
 8019640:	6831      	ldr	r1, [r6, #0]
 8019642:	061f      	lsls	r7, r3, #24
 8019644:	f851 5b04 	ldr.w	r5, [r1], #4
 8019648:	d402      	bmi.n	8019650 <_printf_i+0x188>
 801964a:	065f      	lsls	r7, r3, #25
 801964c:	bf48      	it	mi
 801964e:	b2ad      	uxthmi	r5, r5
 8019650:	6031      	str	r1, [r6, #0]
 8019652:	07d9      	lsls	r1, r3, #31
 8019654:	bf44      	itt	mi
 8019656:	f043 0320 	orrmi.w	r3, r3, #32
 801965a:	6023      	strmi	r3, [r4, #0]
 801965c:	b11d      	cbz	r5, 8019666 <_printf_i+0x19e>
 801965e:	2310      	movs	r3, #16
 8019660:	e7ac      	b.n	80195bc <_printf_i+0xf4>
 8019662:	4827      	ldr	r0, [pc, #156]	@ (8019700 <_printf_i+0x238>)
 8019664:	e7e9      	b.n	801963a <_printf_i+0x172>
 8019666:	6823      	ldr	r3, [r4, #0]
 8019668:	f023 0320 	bic.w	r3, r3, #32
 801966c:	6023      	str	r3, [r4, #0]
 801966e:	e7f6      	b.n	801965e <_printf_i+0x196>
 8019670:	4616      	mov	r6, r2
 8019672:	e7bd      	b.n	80195f0 <_printf_i+0x128>
 8019674:	6833      	ldr	r3, [r6, #0]
 8019676:	6825      	ldr	r5, [r4, #0]
 8019678:	6961      	ldr	r1, [r4, #20]
 801967a:	1d18      	adds	r0, r3, #4
 801967c:	6030      	str	r0, [r6, #0]
 801967e:	062e      	lsls	r6, r5, #24
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	d501      	bpl.n	8019688 <_printf_i+0x1c0>
 8019684:	6019      	str	r1, [r3, #0]
 8019686:	e002      	b.n	801968e <_printf_i+0x1c6>
 8019688:	0668      	lsls	r0, r5, #25
 801968a:	d5fb      	bpl.n	8019684 <_printf_i+0x1bc>
 801968c:	8019      	strh	r1, [r3, #0]
 801968e:	2300      	movs	r3, #0
 8019690:	6123      	str	r3, [r4, #16]
 8019692:	4616      	mov	r6, r2
 8019694:	e7bc      	b.n	8019610 <_printf_i+0x148>
 8019696:	6833      	ldr	r3, [r6, #0]
 8019698:	1d1a      	adds	r2, r3, #4
 801969a:	6032      	str	r2, [r6, #0]
 801969c:	681e      	ldr	r6, [r3, #0]
 801969e:	6862      	ldr	r2, [r4, #4]
 80196a0:	2100      	movs	r1, #0
 80196a2:	4630      	mov	r0, r6
 80196a4:	f7e6 fe44 	bl	8000330 <memchr>
 80196a8:	b108      	cbz	r0, 80196ae <_printf_i+0x1e6>
 80196aa:	1b80      	subs	r0, r0, r6
 80196ac:	6060      	str	r0, [r4, #4]
 80196ae:	6863      	ldr	r3, [r4, #4]
 80196b0:	6123      	str	r3, [r4, #16]
 80196b2:	2300      	movs	r3, #0
 80196b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80196b8:	e7aa      	b.n	8019610 <_printf_i+0x148>
 80196ba:	6923      	ldr	r3, [r4, #16]
 80196bc:	4632      	mov	r2, r6
 80196be:	4649      	mov	r1, r9
 80196c0:	4640      	mov	r0, r8
 80196c2:	47d0      	blx	sl
 80196c4:	3001      	adds	r0, #1
 80196c6:	d0ad      	beq.n	8019624 <_printf_i+0x15c>
 80196c8:	6823      	ldr	r3, [r4, #0]
 80196ca:	079b      	lsls	r3, r3, #30
 80196cc:	d413      	bmi.n	80196f6 <_printf_i+0x22e>
 80196ce:	68e0      	ldr	r0, [r4, #12]
 80196d0:	9b03      	ldr	r3, [sp, #12]
 80196d2:	4298      	cmp	r0, r3
 80196d4:	bfb8      	it	lt
 80196d6:	4618      	movlt	r0, r3
 80196d8:	e7a6      	b.n	8019628 <_printf_i+0x160>
 80196da:	2301      	movs	r3, #1
 80196dc:	4632      	mov	r2, r6
 80196de:	4649      	mov	r1, r9
 80196e0:	4640      	mov	r0, r8
 80196e2:	47d0      	blx	sl
 80196e4:	3001      	adds	r0, #1
 80196e6:	d09d      	beq.n	8019624 <_printf_i+0x15c>
 80196e8:	3501      	adds	r5, #1
 80196ea:	68e3      	ldr	r3, [r4, #12]
 80196ec:	9903      	ldr	r1, [sp, #12]
 80196ee:	1a5b      	subs	r3, r3, r1
 80196f0:	42ab      	cmp	r3, r5
 80196f2:	dcf2      	bgt.n	80196da <_printf_i+0x212>
 80196f4:	e7eb      	b.n	80196ce <_printf_i+0x206>
 80196f6:	2500      	movs	r5, #0
 80196f8:	f104 0619 	add.w	r6, r4, #25
 80196fc:	e7f5      	b.n	80196ea <_printf_i+0x222>
 80196fe:	bf00      	nop
 8019700:	0801d95b 	.word	0x0801d95b
 8019704:	0801d96c 	.word	0x0801d96c

08019708 <std>:
 8019708:	2300      	movs	r3, #0
 801970a:	b510      	push	{r4, lr}
 801970c:	4604      	mov	r4, r0
 801970e:	e9c0 3300 	strd	r3, r3, [r0]
 8019712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019716:	6083      	str	r3, [r0, #8]
 8019718:	8181      	strh	r1, [r0, #12]
 801971a:	6643      	str	r3, [r0, #100]	@ 0x64
 801971c:	81c2      	strh	r2, [r0, #14]
 801971e:	6183      	str	r3, [r0, #24]
 8019720:	4619      	mov	r1, r3
 8019722:	2208      	movs	r2, #8
 8019724:	305c      	adds	r0, #92	@ 0x5c
 8019726:	f000 f914 	bl	8019952 <memset>
 801972a:	4b0d      	ldr	r3, [pc, #52]	@ (8019760 <std+0x58>)
 801972c:	6263      	str	r3, [r4, #36]	@ 0x24
 801972e:	4b0d      	ldr	r3, [pc, #52]	@ (8019764 <std+0x5c>)
 8019730:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019732:	4b0d      	ldr	r3, [pc, #52]	@ (8019768 <std+0x60>)
 8019734:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019736:	4b0d      	ldr	r3, [pc, #52]	@ (801976c <std+0x64>)
 8019738:	6323      	str	r3, [r4, #48]	@ 0x30
 801973a:	4b0d      	ldr	r3, [pc, #52]	@ (8019770 <std+0x68>)
 801973c:	6224      	str	r4, [r4, #32]
 801973e:	429c      	cmp	r4, r3
 8019740:	d006      	beq.n	8019750 <std+0x48>
 8019742:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019746:	4294      	cmp	r4, r2
 8019748:	d002      	beq.n	8019750 <std+0x48>
 801974a:	33d0      	adds	r3, #208	@ 0xd0
 801974c:	429c      	cmp	r4, r3
 801974e:	d105      	bne.n	801975c <std+0x54>
 8019750:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019758:	f000 b996 	b.w	8019a88 <__retarget_lock_init_recursive>
 801975c:	bd10      	pop	{r4, pc}
 801975e:	bf00      	nop
 8019760:	080198cd 	.word	0x080198cd
 8019764:	080198ef 	.word	0x080198ef
 8019768:	08019927 	.word	0x08019927
 801976c:	0801994b 	.word	0x0801994b
 8019770:	24006220 	.word	0x24006220

08019774 <stdio_exit_handler>:
 8019774:	4a02      	ldr	r2, [pc, #8]	@ (8019780 <stdio_exit_handler+0xc>)
 8019776:	4903      	ldr	r1, [pc, #12]	@ (8019784 <stdio_exit_handler+0x10>)
 8019778:	4803      	ldr	r0, [pc, #12]	@ (8019788 <stdio_exit_handler+0x14>)
 801977a:	f000 b869 	b.w	8019850 <_fwalk_sglue>
 801977e:	bf00      	nop
 8019780:	24000104 	.word	0x24000104
 8019784:	0801bc45 	.word	0x0801bc45
 8019788:	24000280 	.word	0x24000280

0801978c <cleanup_stdio>:
 801978c:	6841      	ldr	r1, [r0, #4]
 801978e:	4b0c      	ldr	r3, [pc, #48]	@ (80197c0 <cleanup_stdio+0x34>)
 8019790:	4299      	cmp	r1, r3
 8019792:	b510      	push	{r4, lr}
 8019794:	4604      	mov	r4, r0
 8019796:	d001      	beq.n	801979c <cleanup_stdio+0x10>
 8019798:	f002 fa54 	bl	801bc44 <_fflush_r>
 801979c:	68a1      	ldr	r1, [r4, #8]
 801979e:	4b09      	ldr	r3, [pc, #36]	@ (80197c4 <cleanup_stdio+0x38>)
 80197a0:	4299      	cmp	r1, r3
 80197a2:	d002      	beq.n	80197aa <cleanup_stdio+0x1e>
 80197a4:	4620      	mov	r0, r4
 80197a6:	f002 fa4d 	bl	801bc44 <_fflush_r>
 80197aa:	68e1      	ldr	r1, [r4, #12]
 80197ac:	4b06      	ldr	r3, [pc, #24]	@ (80197c8 <cleanup_stdio+0x3c>)
 80197ae:	4299      	cmp	r1, r3
 80197b0:	d004      	beq.n	80197bc <cleanup_stdio+0x30>
 80197b2:	4620      	mov	r0, r4
 80197b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197b8:	f002 ba44 	b.w	801bc44 <_fflush_r>
 80197bc:	bd10      	pop	{r4, pc}
 80197be:	bf00      	nop
 80197c0:	24006220 	.word	0x24006220
 80197c4:	24006288 	.word	0x24006288
 80197c8:	240062f0 	.word	0x240062f0

080197cc <global_stdio_init.part.0>:
 80197cc:	b510      	push	{r4, lr}
 80197ce:	4b0b      	ldr	r3, [pc, #44]	@ (80197fc <global_stdio_init.part.0+0x30>)
 80197d0:	4c0b      	ldr	r4, [pc, #44]	@ (8019800 <global_stdio_init.part.0+0x34>)
 80197d2:	4a0c      	ldr	r2, [pc, #48]	@ (8019804 <global_stdio_init.part.0+0x38>)
 80197d4:	601a      	str	r2, [r3, #0]
 80197d6:	4620      	mov	r0, r4
 80197d8:	2200      	movs	r2, #0
 80197da:	2104      	movs	r1, #4
 80197dc:	f7ff ff94 	bl	8019708 <std>
 80197e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80197e4:	2201      	movs	r2, #1
 80197e6:	2109      	movs	r1, #9
 80197e8:	f7ff ff8e 	bl	8019708 <std>
 80197ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80197f0:	2202      	movs	r2, #2
 80197f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197f6:	2112      	movs	r1, #18
 80197f8:	f7ff bf86 	b.w	8019708 <std>
 80197fc:	24006358 	.word	0x24006358
 8019800:	24006220 	.word	0x24006220
 8019804:	08019775 	.word	0x08019775

08019808 <__sfp_lock_acquire>:
 8019808:	4801      	ldr	r0, [pc, #4]	@ (8019810 <__sfp_lock_acquire+0x8>)
 801980a:	f000 b93e 	b.w	8019a8a <__retarget_lock_acquire_recursive>
 801980e:	bf00      	nop
 8019810:	24006361 	.word	0x24006361

08019814 <__sfp_lock_release>:
 8019814:	4801      	ldr	r0, [pc, #4]	@ (801981c <__sfp_lock_release+0x8>)
 8019816:	f000 b939 	b.w	8019a8c <__retarget_lock_release_recursive>
 801981a:	bf00      	nop
 801981c:	24006361 	.word	0x24006361

08019820 <__sinit>:
 8019820:	b510      	push	{r4, lr}
 8019822:	4604      	mov	r4, r0
 8019824:	f7ff fff0 	bl	8019808 <__sfp_lock_acquire>
 8019828:	6a23      	ldr	r3, [r4, #32]
 801982a:	b11b      	cbz	r3, 8019834 <__sinit+0x14>
 801982c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019830:	f7ff bff0 	b.w	8019814 <__sfp_lock_release>
 8019834:	4b04      	ldr	r3, [pc, #16]	@ (8019848 <__sinit+0x28>)
 8019836:	6223      	str	r3, [r4, #32]
 8019838:	4b04      	ldr	r3, [pc, #16]	@ (801984c <__sinit+0x2c>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d1f5      	bne.n	801982c <__sinit+0xc>
 8019840:	f7ff ffc4 	bl	80197cc <global_stdio_init.part.0>
 8019844:	e7f2      	b.n	801982c <__sinit+0xc>
 8019846:	bf00      	nop
 8019848:	0801978d 	.word	0x0801978d
 801984c:	24006358 	.word	0x24006358

08019850 <_fwalk_sglue>:
 8019850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019854:	4607      	mov	r7, r0
 8019856:	4688      	mov	r8, r1
 8019858:	4614      	mov	r4, r2
 801985a:	2600      	movs	r6, #0
 801985c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019860:	f1b9 0901 	subs.w	r9, r9, #1
 8019864:	d505      	bpl.n	8019872 <_fwalk_sglue+0x22>
 8019866:	6824      	ldr	r4, [r4, #0]
 8019868:	2c00      	cmp	r4, #0
 801986a:	d1f7      	bne.n	801985c <_fwalk_sglue+0xc>
 801986c:	4630      	mov	r0, r6
 801986e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019872:	89ab      	ldrh	r3, [r5, #12]
 8019874:	2b01      	cmp	r3, #1
 8019876:	d907      	bls.n	8019888 <_fwalk_sglue+0x38>
 8019878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801987c:	3301      	adds	r3, #1
 801987e:	d003      	beq.n	8019888 <_fwalk_sglue+0x38>
 8019880:	4629      	mov	r1, r5
 8019882:	4638      	mov	r0, r7
 8019884:	47c0      	blx	r8
 8019886:	4306      	orrs	r6, r0
 8019888:	3568      	adds	r5, #104	@ 0x68
 801988a:	e7e9      	b.n	8019860 <_fwalk_sglue+0x10>

0801988c <siprintf>:
 801988c:	b40e      	push	{r1, r2, r3}
 801988e:	b500      	push	{lr}
 8019890:	b09c      	sub	sp, #112	@ 0x70
 8019892:	ab1d      	add	r3, sp, #116	@ 0x74
 8019894:	9002      	str	r0, [sp, #8]
 8019896:	9006      	str	r0, [sp, #24]
 8019898:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801989c:	4809      	ldr	r0, [pc, #36]	@ (80198c4 <siprintf+0x38>)
 801989e:	9107      	str	r1, [sp, #28]
 80198a0:	9104      	str	r1, [sp, #16]
 80198a2:	4909      	ldr	r1, [pc, #36]	@ (80198c8 <siprintf+0x3c>)
 80198a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80198a8:	9105      	str	r1, [sp, #20]
 80198aa:	6800      	ldr	r0, [r0, #0]
 80198ac:	9301      	str	r3, [sp, #4]
 80198ae:	a902      	add	r1, sp, #8
 80198b0:	f002 f848 	bl	801b944 <_svfiprintf_r>
 80198b4:	9b02      	ldr	r3, [sp, #8]
 80198b6:	2200      	movs	r2, #0
 80198b8:	701a      	strb	r2, [r3, #0]
 80198ba:	b01c      	add	sp, #112	@ 0x70
 80198bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80198c0:	b003      	add	sp, #12
 80198c2:	4770      	bx	lr
 80198c4:	2400027c 	.word	0x2400027c
 80198c8:	ffff0208 	.word	0xffff0208

080198cc <__sread>:
 80198cc:	b510      	push	{r4, lr}
 80198ce:	460c      	mov	r4, r1
 80198d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198d4:	f000 f88a 	bl	80199ec <_read_r>
 80198d8:	2800      	cmp	r0, #0
 80198da:	bfab      	itete	ge
 80198dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80198de:	89a3      	ldrhlt	r3, [r4, #12]
 80198e0:	181b      	addge	r3, r3, r0
 80198e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80198e6:	bfac      	ite	ge
 80198e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80198ea:	81a3      	strhlt	r3, [r4, #12]
 80198ec:	bd10      	pop	{r4, pc}

080198ee <__swrite>:
 80198ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198f2:	461f      	mov	r7, r3
 80198f4:	898b      	ldrh	r3, [r1, #12]
 80198f6:	05db      	lsls	r3, r3, #23
 80198f8:	4605      	mov	r5, r0
 80198fa:	460c      	mov	r4, r1
 80198fc:	4616      	mov	r6, r2
 80198fe:	d505      	bpl.n	801990c <__swrite+0x1e>
 8019900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019904:	2302      	movs	r3, #2
 8019906:	2200      	movs	r2, #0
 8019908:	f000 f85e 	bl	80199c8 <_lseek_r>
 801990c:	89a3      	ldrh	r3, [r4, #12]
 801990e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019912:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019916:	81a3      	strh	r3, [r4, #12]
 8019918:	4632      	mov	r2, r6
 801991a:	463b      	mov	r3, r7
 801991c:	4628      	mov	r0, r5
 801991e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019922:	f000 b875 	b.w	8019a10 <_write_r>

08019926 <__sseek>:
 8019926:	b510      	push	{r4, lr}
 8019928:	460c      	mov	r4, r1
 801992a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801992e:	f000 f84b 	bl	80199c8 <_lseek_r>
 8019932:	1c43      	adds	r3, r0, #1
 8019934:	89a3      	ldrh	r3, [r4, #12]
 8019936:	bf15      	itete	ne
 8019938:	6560      	strne	r0, [r4, #84]	@ 0x54
 801993a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801993e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019942:	81a3      	strheq	r3, [r4, #12]
 8019944:	bf18      	it	ne
 8019946:	81a3      	strhne	r3, [r4, #12]
 8019948:	bd10      	pop	{r4, pc}

0801994a <__sclose>:
 801994a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801994e:	f000 b82b 	b.w	80199a8 <_close_r>

08019952 <memset>:
 8019952:	4402      	add	r2, r0
 8019954:	4603      	mov	r3, r0
 8019956:	4293      	cmp	r3, r2
 8019958:	d100      	bne.n	801995c <memset+0xa>
 801995a:	4770      	bx	lr
 801995c:	f803 1b01 	strb.w	r1, [r3], #1
 8019960:	e7f9      	b.n	8019956 <memset+0x4>

08019962 <strchr>:
 8019962:	b2c9      	uxtb	r1, r1
 8019964:	4603      	mov	r3, r0
 8019966:	4618      	mov	r0, r3
 8019968:	f813 2b01 	ldrb.w	r2, [r3], #1
 801996c:	b112      	cbz	r2, 8019974 <strchr+0x12>
 801996e:	428a      	cmp	r2, r1
 8019970:	d1f9      	bne.n	8019966 <strchr+0x4>
 8019972:	4770      	bx	lr
 8019974:	2900      	cmp	r1, #0
 8019976:	bf18      	it	ne
 8019978:	2000      	movne	r0, #0
 801997a:	4770      	bx	lr

0801997c <strncmp>:
 801997c:	b510      	push	{r4, lr}
 801997e:	b16a      	cbz	r2, 801999c <strncmp+0x20>
 8019980:	3901      	subs	r1, #1
 8019982:	1884      	adds	r4, r0, r2
 8019984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019988:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801998c:	429a      	cmp	r2, r3
 801998e:	d103      	bne.n	8019998 <strncmp+0x1c>
 8019990:	42a0      	cmp	r0, r4
 8019992:	d001      	beq.n	8019998 <strncmp+0x1c>
 8019994:	2a00      	cmp	r2, #0
 8019996:	d1f5      	bne.n	8019984 <strncmp+0x8>
 8019998:	1ad0      	subs	r0, r2, r3
 801999a:	bd10      	pop	{r4, pc}
 801999c:	4610      	mov	r0, r2
 801999e:	e7fc      	b.n	801999a <strncmp+0x1e>

080199a0 <_localeconv_r>:
 80199a0:	4800      	ldr	r0, [pc, #0]	@ (80199a4 <_localeconv_r+0x4>)
 80199a2:	4770      	bx	lr
 80199a4:	24000200 	.word	0x24000200

080199a8 <_close_r>:
 80199a8:	b538      	push	{r3, r4, r5, lr}
 80199aa:	4d06      	ldr	r5, [pc, #24]	@ (80199c4 <_close_r+0x1c>)
 80199ac:	2300      	movs	r3, #0
 80199ae:	4604      	mov	r4, r0
 80199b0:	4608      	mov	r0, r1
 80199b2:	602b      	str	r3, [r5, #0]
 80199b4:	f7e9 f9cc 	bl	8002d50 <_close>
 80199b8:	1c43      	adds	r3, r0, #1
 80199ba:	d102      	bne.n	80199c2 <_close_r+0x1a>
 80199bc:	682b      	ldr	r3, [r5, #0]
 80199be:	b103      	cbz	r3, 80199c2 <_close_r+0x1a>
 80199c0:	6023      	str	r3, [r4, #0]
 80199c2:	bd38      	pop	{r3, r4, r5, pc}
 80199c4:	2400635c 	.word	0x2400635c

080199c8 <_lseek_r>:
 80199c8:	b538      	push	{r3, r4, r5, lr}
 80199ca:	4d07      	ldr	r5, [pc, #28]	@ (80199e8 <_lseek_r+0x20>)
 80199cc:	4604      	mov	r4, r0
 80199ce:	4608      	mov	r0, r1
 80199d0:	4611      	mov	r1, r2
 80199d2:	2200      	movs	r2, #0
 80199d4:	602a      	str	r2, [r5, #0]
 80199d6:	461a      	mov	r2, r3
 80199d8:	f7e9 f9e1 	bl	8002d9e <_lseek>
 80199dc:	1c43      	adds	r3, r0, #1
 80199de:	d102      	bne.n	80199e6 <_lseek_r+0x1e>
 80199e0:	682b      	ldr	r3, [r5, #0]
 80199e2:	b103      	cbz	r3, 80199e6 <_lseek_r+0x1e>
 80199e4:	6023      	str	r3, [r4, #0]
 80199e6:	bd38      	pop	{r3, r4, r5, pc}
 80199e8:	2400635c 	.word	0x2400635c

080199ec <_read_r>:
 80199ec:	b538      	push	{r3, r4, r5, lr}
 80199ee:	4d07      	ldr	r5, [pc, #28]	@ (8019a0c <_read_r+0x20>)
 80199f0:	4604      	mov	r4, r0
 80199f2:	4608      	mov	r0, r1
 80199f4:	4611      	mov	r1, r2
 80199f6:	2200      	movs	r2, #0
 80199f8:	602a      	str	r2, [r5, #0]
 80199fa:	461a      	mov	r2, r3
 80199fc:	f7e9 f96f 	bl	8002cde <_read>
 8019a00:	1c43      	adds	r3, r0, #1
 8019a02:	d102      	bne.n	8019a0a <_read_r+0x1e>
 8019a04:	682b      	ldr	r3, [r5, #0]
 8019a06:	b103      	cbz	r3, 8019a0a <_read_r+0x1e>
 8019a08:	6023      	str	r3, [r4, #0]
 8019a0a:	bd38      	pop	{r3, r4, r5, pc}
 8019a0c:	2400635c 	.word	0x2400635c

08019a10 <_write_r>:
 8019a10:	b538      	push	{r3, r4, r5, lr}
 8019a12:	4d07      	ldr	r5, [pc, #28]	@ (8019a30 <_write_r+0x20>)
 8019a14:	4604      	mov	r4, r0
 8019a16:	4608      	mov	r0, r1
 8019a18:	4611      	mov	r1, r2
 8019a1a:	2200      	movs	r2, #0
 8019a1c:	602a      	str	r2, [r5, #0]
 8019a1e:	461a      	mov	r2, r3
 8019a20:	f7e9 f97a 	bl	8002d18 <_write>
 8019a24:	1c43      	adds	r3, r0, #1
 8019a26:	d102      	bne.n	8019a2e <_write_r+0x1e>
 8019a28:	682b      	ldr	r3, [r5, #0]
 8019a2a:	b103      	cbz	r3, 8019a2e <_write_r+0x1e>
 8019a2c:	6023      	str	r3, [r4, #0]
 8019a2e:	bd38      	pop	{r3, r4, r5, pc}
 8019a30:	2400635c 	.word	0x2400635c

08019a34 <__errno>:
 8019a34:	4b01      	ldr	r3, [pc, #4]	@ (8019a3c <__errno+0x8>)
 8019a36:	6818      	ldr	r0, [r3, #0]
 8019a38:	4770      	bx	lr
 8019a3a:	bf00      	nop
 8019a3c:	2400027c 	.word	0x2400027c

08019a40 <__libc_init_array>:
 8019a40:	b570      	push	{r4, r5, r6, lr}
 8019a42:	4d0d      	ldr	r5, [pc, #52]	@ (8019a78 <__libc_init_array+0x38>)
 8019a44:	4c0d      	ldr	r4, [pc, #52]	@ (8019a7c <__libc_init_array+0x3c>)
 8019a46:	1b64      	subs	r4, r4, r5
 8019a48:	10a4      	asrs	r4, r4, #2
 8019a4a:	2600      	movs	r6, #0
 8019a4c:	42a6      	cmp	r6, r4
 8019a4e:	d109      	bne.n	8019a64 <__libc_init_array+0x24>
 8019a50:	4d0b      	ldr	r5, [pc, #44]	@ (8019a80 <__libc_init_array+0x40>)
 8019a52:	4c0c      	ldr	r4, [pc, #48]	@ (8019a84 <__libc_init_array+0x44>)
 8019a54:	f003 fb18 	bl	801d088 <_init>
 8019a58:	1b64      	subs	r4, r4, r5
 8019a5a:	10a4      	asrs	r4, r4, #2
 8019a5c:	2600      	movs	r6, #0
 8019a5e:	42a6      	cmp	r6, r4
 8019a60:	d105      	bne.n	8019a6e <__libc_init_array+0x2e>
 8019a62:	bd70      	pop	{r4, r5, r6, pc}
 8019a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a68:	4798      	blx	r3
 8019a6a:	3601      	adds	r6, #1
 8019a6c:	e7ee      	b.n	8019a4c <__libc_init_array+0xc>
 8019a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a72:	4798      	blx	r3
 8019a74:	3601      	adds	r6, #1
 8019a76:	e7f2      	b.n	8019a5e <__libc_init_array+0x1e>
 8019a78:	0801df38 	.word	0x0801df38
 8019a7c:	0801df38 	.word	0x0801df38
 8019a80:	0801df38 	.word	0x0801df38
 8019a84:	0801df3c 	.word	0x0801df3c

08019a88 <__retarget_lock_init_recursive>:
 8019a88:	4770      	bx	lr

08019a8a <__retarget_lock_acquire_recursive>:
 8019a8a:	4770      	bx	lr

08019a8c <__retarget_lock_release_recursive>:
 8019a8c:	4770      	bx	lr

08019a8e <memcpy>:
 8019a8e:	440a      	add	r2, r1
 8019a90:	4291      	cmp	r1, r2
 8019a92:	f100 33ff 	add.w	r3, r0, #4294967295
 8019a96:	d100      	bne.n	8019a9a <memcpy+0xc>
 8019a98:	4770      	bx	lr
 8019a9a:	b510      	push	{r4, lr}
 8019a9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019aa4:	4291      	cmp	r1, r2
 8019aa6:	d1f9      	bne.n	8019a9c <memcpy+0xe>
 8019aa8:	bd10      	pop	{r4, pc}
 8019aaa:	0000      	movs	r0, r0
 8019aac:	0000      	movs	r0, r0
	...

08019ab0 <nan>:
 8019ab0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019ab8 <nan+0x8>
 8019ab4:	4770      	bx	lr
 8019ab6:	bf00      	nop
 8019ab8:	00000000 	.word	0x00000000
 8019abc:	7ff80000 	.word	0x7ff80000

08019ac0 <quorem>:
 8019ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac4:	6903      	ldr	r3, [r0, #16]
 8019ac6:	690c      	ldr	r4, [r1, #16]
 8019ac8:	42a3      	cmp	r3, r4
 8019aca:	4607      	mov	r7, r0
 8019acc:	db7e      	blt.n	8019bcc <quorem+0x10c>
 8019ace:	3c01      	subs	r4, #1
 8019ad0:	f101 0814 	add.w	r8, r1, #20
 8019ad4:	00a3      	lsls	r3, r4, #2
 8019ad6:	f100 0514 	add.w	r5, r0, #20
 8019ada:	9300      	str	r3, [sp, #0]
 8019adc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019ae0:	9301      	str	r3, [sp, #4]
 8019ae2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019ae6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019aea:	3301      	adds	r3, #1
 8019aec:	429a      	cmp	r2, r3
 8019aee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019af2:	fbb2 f6f3 	udiv	r6, r2, r3
 8019af6:	d32e      	bcc.n	8019b56 <quorem+0x96>
 8019af8:	f04f 0a00 	mov.w	sl, #0
 8019afc:	46c4      	mov	ip, r8
 8019afe:	46ae      	mov	lr, r5
 8019b00:	46d3      	mov	fp, sl
 8019b02:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019b06:	b298      	uxth	r0, r3
 8019b08:	fb06 a000 	mla	r0, r6, r0, sl
 8019b0c:	0c02      	lsrs	r2, r0, #16
 8019b0e:	0c1b      	lsrs	r3, r3, #16
 8019b10:	fb06 2303 	mla	r3, r6, r3, r2
 8019b14:	f8de 2000 	ldr.w	r2, [lr]
 8019b18:	b280      	uxth	r0, r0
 8019b1a:	b292      	uxth	r2, r2
 8019b1c:	1a12      	subs	r2, r2, r0
 8019b1e:	445a      	add	r2, fp
 8019b20:	f8de 0000 	ldr.w	r0, [lr]
 8019b24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019b28:	b29b      	uxth	r3, r3
 8019b2a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8019b2e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8019b32:	b292      	uxth	r2, r2
 8019b34:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019b38:	45e1      	cmp	r9, ip
 8019b3a:	f84e 2b04 	str.w	r2, [lr], #4
 8019b3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8019b42:	d2de      	bcs.n	8019b02 <quorem+0x42>
 8019b44:	9b00      	ldr	r3, [sp, #0]
 8019b46:	58eb      	ldr	r3, [r5, r3]
 8019b48:	b92b      	cbnz	r3, 8019b56 <quorem+0x96>
 8019b4a:	9b01      	ldr	r3, [sp, #4]
 8019b4c:	3b04      	subs	r3, #4
 8019b4e:	429d      	cmp	r5, r3
 8019b50:	461a      	mov	r2, r3
 8019b52:	d32f      	bcc.n	8019bb4 <quorem+0xf4>
 8019b54:	613c      	str	r4, [r7, #16]
 8019b56:	4638      	mov	r0, r7
 8019b58:	f001 fca0 	bl	801b49c <__mcmp>
 8019b5c:	2800      	cmp	r0, #0
 8019b5e:	db25      	blt.n	8019bac <quorem+0xec>
 8019b60:	4629      	mov	r1, r5
 8019b62:	2000      	movs	r0, #0
 8019b64:	f858 2b04 	ldr.w	r2, [r8], #4
 8019b68:	f8d1 c000 	ldr.w	ip, [r1]
 8019b6c:	fa1f fe82 	uxth.w	lr, r2
 8019b70:	fa1f f38c 	uxth.w	r3, ip
 8019b74:	eba3 030e 	sub.w	r3, r3, lr
 8019b78:	4403      	add	r3, r0
 8019b7a:	0c12      	lsrs	r2, r2, #16
 8019b7c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8019b80:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019b84:	b29b      	uxth	r3, r3
 8019b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019b8a:	45c1      	cmp	r9, r8
 8019b8c:	f841 3b04 	str.w	r3, [r1], #4
 8019b90:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019b94:	d2e6      	bcs.n	8019b64 <quorem+0xa4>
 8019b96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019b9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019b9e:	b922      	cbnz	r2, 8019baa <quorem+0xea>
 8019ba0:	3b04      	subs	r3, #4
 8019ba2:	429d      	cmp	r5, r3
 8019ba4:	461a      	mov	r2, r3
 8019ba6:	d30b      	bcc.n	8019bc0 <quorem+0x100>
 8019ba8:	613c      	str	r4, [r7, #16]
 8019baa:	3601      	adds	r6, #1
 8019bac:	4630      	mov	r0, r6
 8019bae:	b003      	add	sp, #12
 8019bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bb4:	6812      	ldr	r2, [r2, #0]
 8019bb6:	3b04      	subs	r3, #4
 8019bb8:	2a00      	cmp	r2, #0
 8019bba:	d1cb      	bne.n	8019b54 <quorem+0x94>
 8019bbc:	3c01      	subs	r4, #1
 8019bbe:	e7c6      	b.n	8019b4e <quorem+0x8e>
 8019bc0:	6812      	ldr	r2, [r2, #0]
 8019bc2:	3b04      	subs	r3, #4
 8019bc4:	2a00      	cmp	r2, #0
 8019bc6:	d1ef      	bne.n	8019ba8 <quorem+0xe8>
 8019bc8:	3c01      	subs	r4, #1
 8019bca:	e7ea      	b.n	8019ba2 <quorem+0xe2>
 8019bcc:	2000      	movs	r0, #0
 8019bce:	e7ee      	b.n	8019bae <quorem+0xee>

08019bd0 <_dtoa_r>:
 8019bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bd4:	ed2d 8b02 	vpush	{d8}
 8019bd8:	69c7      	ldr	r7, [r0, #28]
 8019bda:	b091      	sub	sp, #68	@ 0x44
 8019bdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019be0:	ec55 4b10 	vmov	r4, r5, d0
 8019be4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8019be6:	9107      	str	r1, [sp, #28]
 8019be8:	4681      	mov	r9, r0
 8019bea:	9209      	str	r2, [sp, #36]	@ 0x24
 8019bec:	930d      	str	r3, [sp, #52]	@ 0x34
 8019bee:	b97f      	cbnz	r7, 8019c10 <_dtoa_r+0x40>
 8019bf0:	2010      	movs	r0, #16
 8019bf2:	f001 f8c7 	bl	801ad84 <malloc>
 8019bf6:	4602      	mov	r2, r0
 8019bf8:	f8c9 001c 	str.w	r0, [r9, #28]
 8019bfc:	b920      	cbnz	r0, 8019c08 <_dtoa_r+0x38>
 8019bfe:	4ba0      	ldr	r3, [pc, #640]	@ (8019e80 <_dtoa_r+0x2b0>)
 8019c00:	21ef      	movs	r1, #239	@ 0xef
 8019c02:	48a0      	ldr	r0, [pc, #640]	@ (8019e84 <_dtoa_r+0x2b4>)
 8019c04:	f002 f870 	bl	801bce8 <__assert_func>
 8019c08:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8019c0c:	6007      	str	r7, [r0, #0]
 8019c0e:	60c7      	str	r7, [r0, #12]
 8019c10:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019c14:	6819      	ldr	r1, [r3, #0]
 8019c16:	b159      	cbz	r1, 8019c30 <_dtoa_r+0x60>
 8019c18:	685a      	ldr	r2, [r3, #4]
 8019c1a:	604a      	str	r2, [r1, #4]
 8019c1c:	2301      	movs	r3, #1
 8019c1e:	4093      	lsls	r3, r2
 8019c20:	608b      	str	r3, [r1, #8]
 8019c22:	4648      	mov	r0, r9
 8019c24:	f001 f9b6 	bl	801af94 <_Bfree>
 8019c28:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019c2c:	2200      	movs	r2, #0
 8019c2e:	601a      	str	r2, [r3, #0]
 8019c30:	1e2b      	subs	r3, r5, #0
 8019c32:	bfbb      	ittet	lt
 8019c34:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019c38:	9303      	strlt	r3, [sp, #12]
 8019c3a:	2300      	movge	r3, #0
 8019c3c:	2201      	movlt	r2, #1
 8019c3e:	bfac      	ite	ge
 8019c40:	6033      	strge	r3, [r6, #0]
 8019c42:	6032      	strlt	r2, [r6, #0]
 8019c44:	4b90      	ldr	r3, [pc, #576]	@ (8019e88 <_dtoa_r+0x2b8>)
 8019c46:	9e03      	ldr	r6, [sp, #12]
 8019c48:	43b3      	bics	r3, r6
 8019c4a:	d110      	bne.n	8019c6e <_dtoa_r+0x9e>
 8019c4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019c4e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019c52:	6013      	str	r3, [r2, #0]
 8019c54:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8019c58:	4323      	orrs	r3, r4
 8019c5a:	f000 84de 	beq.w	801a61a <_dtoa_r+0xa4a>
 8019c5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c60:	4f8a      	ldr	r7, [pc, #552]	@ (8019e8c <_dtoa_r+0x2bc>)
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	f000 84e0 	beq.w	801a628 <_dtoa_r+0xa58>
 8019c68:	1cfb      	adds	r3, r7, #3
 8019c6a:	f000 bcdb 	b.w	801a624 <_dtoa_r+0xa54>
 8019c6e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019c72:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c7a:	d10a      	bne.n	8019c92 <_dtoa_r+0xc2>
 8019c7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019c7e:	2301      	movs	r3, #1
 8019c80:	6013      	str	r3, [r2, #0]
 8019c82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c84:	b113      	cbz	r3, 8019c8c <_dtoa_r+0xbc>
 8019c86:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019c88:	4b81      	ldr	r3, [pc, #516]	@ (8019e90 <_dtoa_r+0x2c0>)
 8019c8a:	6013      	str	r3, [r2, #0]
 8019c8c:	4f81      	ldr	r7, [pc, #516]	@ (8019e94 <_dtoa_r+0x2c4>)
 8019c8e:	f000 bccb 	b.w	801a628 <_dtoa_r+0xa58>
 8019c92:	aa0e      	add	r2, sp, #56	@ 0x38
 8019c94:	a90f      	add	r1, sp, #60	@ 0x3c
 8019c96:	4648      	mov	r0, r9
 8019c98:	eeb0 0b48 	vmov.f64	d0, d8
 8019c9c:	f001 fd1e 	bl	801b6dc <__d2b>
 8019ca0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8019ca4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019ca6:	9001      	str	r0, [sp, #4]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d045      	beq.n	8019d38 <_dtoa_r+0x168>
 8019cac:	eeb0 7b48 	vmov.f64	d7, d8
 8019cb0:	ee18 1a90 	vmov	r1, s17
 8019cb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019cb8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8019cbc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8019cc0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8019cc4:	2500      	movs	r5, #0
 8019cc6:	ee07 1a90 	vmov	s15, r1
 8019cca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8019cce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019e68 <_dtoa_r+0x298>
 8019cd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019cd6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8019e70 <_dtoa_r+0x2a0>
 8019cda:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019cde:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019e78 <_dtoa_r+0x2a8>
 8019ce2:	ee07 3a90 	vmov	s15, r3
 8019ce6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8019cea:	eeb0 7b46 	vmov.f64	d7, d6
 8019cee:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019cf2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019cf6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cfe:	ee16 8a90 	vmov	r8, s13
 8019d02:	d508      	bpl.n	8019d16 <_dtoa_r+0x146>
 8019d04:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019d08:	eeb4 6b47 	vcmp.f64	d6, d7
 8019d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d10:	bf18      	it	ne
 8019d12:	f108 38ff 	addne.w	r8, r8, #4294967295
 8019d16:	f1b8 0f16 	cmp.w	r8, #22
 8019d1a:	d82b      	bhi.n	8019d74 <_dtoa_r+0x1a4>
 8019d1c:	495e      	ldr	r1, [pc, #376]	@ (8019e98 <_dtoa_r+0x2c8>)
 8019d1e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8019d22:	ed91 7b00 	vldr	d7, [r1]
 8019d26:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d2e:	d501      	bpl.n	8019d34 <_dtoa_r+0x164>
 8019d30:	f108 38ff 	add.w	r8, r8, #4294967295
 8019d34:	2100      	movs	r1, #0
 8019d36:	e01e      	b.n	8019d76 <_dtoa_r+0x1a6>
 8019d38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019d3a:	4413      	add	r3, r2
 8019d3c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8019d40:	2920      	cmp	r1, #32
 8019d42:	bfc1      	itttt	gt
 8019d44:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8019d48:	408e      	lslgt	r6, r1
 8019d4a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8019d4e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8019d52:	bfd6      	itet	le
 8019d54:	f1c1 0120 	rsble	r1, r1, #32
 8019d58:	4331      	orrgt	r1, r6
 8019d5a:	fa04 f101 	lslle.w	r1, r4, r1
 8019d5e:	ee07 1a90 	vmov	s15, r1
 8019d62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019d66:	3b01      	subs	r3, #1
 8019d68:	ee17 1a90 	vmov	r1, s15
 8019d6c:	2501      	movs	r5, #1
 8019d6e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8019d72:	e7a8      	b.n	8019cc6 <_dtoa_r+0xf6>
 8019d74:	2101      	movs	r1, #1
 8019d76:	1ad2      	subs	r2, r2, r3
 8019d78:	1e53      	subs	r3, r2, #1
 8019d7a:	9306      	str	r3, [sp, #24]
 8019d7c:	bf45      	ittet	mi
 8019d7e:	f1c2 0301 	rsbmi	r3, r2, #1
 8019d82:	9305      	strmi	r3, [sp, #20]
 8019d84:	2300      	movpl	r3, #0
 8019d86:	2300      	movmi	r3, #0
 8019d88:	bf4c      	ite	mi
 8019d8a:	9306      	strmi	r3, [sp, #24]
 8019d8c:	9305      	strpl	r3, [sp, #20]
 8019d8e:	f1b8 0f00 	cmp.w	r8, #0
 8019d92:	910c      	str	r1, [sp, #48]	@ 0x30
 8019d94:	db18      	blt.n	8019dc8 <_dtoa_r+0x1f8>
 8019d96:	9b06      	ldr	r3, [sp, #24]
 8019d98:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8019d9c:	4443      	add	r3, r8
 8019d9e:	9306      	str	r3, [sp, #24]
 8019da0:	2300      	movs	r3, #0
 8019da2:	9a07      	ldr	r2, [sp, #28]
 8019da4:	2a09      	cmp	r2, #9
 8019da6:	d849      	bhi.n	8019e3c <_dtoa_r+0x26c>
 8019da8:	2a05      	cmp	r2, #5
 8019daa:	bfc4      	itt	gt
 8019dac:	3a04      	subgt	r2, #4
 8019dae:	9207      	strgt	r2, [sp, #28]
 8019db0:	9a07      	ldr	r2, [sp, #28]
 8019db2:	f1a2 0202 	sub.w	r2, r2, #2
 8019db6:	bfcc      	ite	gt
 8019db8:	2400      	movgt	r4, #0
 8019dba:	2401      	movle	r4, #1
 8019dbc:	2a03      	cmp	r2, #3
 8019dbe:	d848      	bhi.n	8019e52 <_dtoa_r+0x282>
 8019dc0:	e8df f002 	tbb	[pc, r2]
 8019dc4:	3a2c2e0b 	.word	0x3a2c2e0b
 8019dc8:	9b05      	ldr	r3, [sp, #20]
 8019dca:	2200      	movs	r2, #0
 8019dcc:	eba3 0308 	sub.w	r3, r3, r8
 8019dd0:	9305      	str	r3, [sp, #20]
 8019dd2:	920a      	str	r2, [sp, #40]	@ 0x28
 8019dd4:	f1c8 0300 	rsb	r3, r8, #0
 8019dd8:	e7e3      	b.n	8019da2 <_dtoa_r+0x1d2>
 8019dda:	2200      	movs	r2, #0
 8019ddc:	9208      	str	r2, [sp, #32]
 8019dde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019de0:	2a00      	cmp	r2, #0
 8019de2:	dc39      	bgt.n	8019e58 <_dtoa_r+0x288>
 8019de4:	f04f 0b01 	mov.w	fp, #1
 8019de8:	46da      	mov	sl, fp
 8019dea:	465a      	mov	r2, fp
 8019dec:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8019df0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8019df4:	2100      	movs	r1, #0
 8019df6:	2004      	movs	r0, #4
 8019df8:	f100 0614 	add.w	r6, r0, #20
 8019dfc:	4296      	cmp	r6, r2
 8019dfe:	d930      	bls.n	8019e62 <_dtoa_r+0x292>
 8019e00:	6079      	str	r1, [r7, #4]
 8019e02:	4648      	mov	r0, r9
 8019e04:	9304      	str	r3, [sp, #16]
 8019e06:	f001 f885 	bl	801af14 <_Balloc>
 8019e0a:	9b04      	ldr	r3, [sp, #16]
 8019e0c:	4607      	mov	r7, r0
 8019e0e:	2800      	cmp	r0, #0
 8019e10:	d146      	bne.n	8019ea0 <_dtoa_r+0x2d0>
 8019e12:	4b22      	ldr	r3, [pc, #136]	@ (8019e9c <_dtoa_r+0x2cc>)
 8019e14:	4602      	mov	r2, r0
 8019e16:	f240 11af 	movw	r1, #431	@ 0x1af
 8019e1a:	e6f2      	b.n	8019c02 <_dtoa_r+0x32>
 8019e1c:	2201      	movs	r2, #1
 8019e1e:	e7dd      	b.n	8019ddc <_dtoa_r+0x20c>
 8019e20:	2200      	movs	r2, #0
 8019e22:	9208      	str	r2, [sp, #32]
 8019e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e26:	eb08 0b02 	add.w	fp, r8, r2
 8019e2a:	f10b 0a01 	add.w	sl, fp, #1
 8019e2e:	4652      	mov	r2, sl
 8019e30:	2a01      	cmp	r2, #1
 8019e32:	bfb8      	it	lt
 8019e34:	2201      	movlt	r2, #1
 8019e36:	e7db      	b.n	8019df0 <_dtoa_r+0x220>
 8019e38:	2201      	movs	r2, #1
 8019e3a:	e7f2      	b.n	8019e22 <_dtoa_r+0x252>
 8019e3c:	2401      	movs	r4, #1
 8019e3e:	2200      	movs	r2, #0
 8019e40:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8019e44:	f04f 3bff 	mov.w	fp, #4294967295
 8019e48:	2100      	movs	r1, #0
 8019e4a:	46da      	mov	sl, fp
 8019e4c:	2212      	movs	r2, #18
 8019e4e:	9109      	str	r1, [sp, #36]	@ 0x24
 8019e50:	e7ce      	b.n	8019df0 <_dtoa_r+0x220>
 8019e52:	2201      	movs	r2, #1
 8019e54:	9208      	str	r2, [sp, #32]
 8019e56:	e7f5      	b.n	8019e44 <_dtoa_r+0x274>
 8019e58:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8019e5c:	46da      	mov	sl, fp
 8019e5e:	465a      	mov	r2, fp
 8019e60:	e7c6      	b.n	8019df0 <_dtoa_r+0x220>
 8019e62:	3101      	adds	r1, #1
 8019e64:	0040      	lsls	r0, r0, #1
 8019e66:	e7c7      	b.n	8019df8 <_dtoa_r+0x228>
 8019e68:	636f4361 	.word	0x636f4361
 8019e6c:	3fd287a7 	.word	0x3fd287a7
 8019e70:	8b60c8b3 	.word	0x8b60c8b3
 8019e74:	3fc68a28 	.word	0x3fc68a28
 8019e78:	509f79fb 	.word	0x509f79fb
 8019e7c:	3fd34413 	.word	0x3fd34413
 8019e80:	0801d992 	.word	0x0801d992
 8019e84:	0801d9a9 	.word	0x0801d9a9
 8019e88:	7ff00000 	.word	0x7ff00000
 8019e8c:	0801d98e 	.word	0x0801d98e
 8019e90:	0801d95a 	.word	0x0801d95a
 8019e94:	0801d959 	.word	0x0801d959
 8019e98:	0801db00 	.word	0x0801db00
 8019e9c:	0801da01 	.word	0x0801da01
 8019ea0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8019ea4:	f1ba 0f0e 	cmp.w	sl, #14
 8019ea8:	6010      	str	r0, [r2, #0]
 8019eaa:	d86f      	bhi.n	8019f8c <_dtoa_r+0x3bc>
 8019eac:	2c00      	cmp	r4, #0
 8019eae:	d06d      	beq.n	8019f8c <_dtoa_r+0x3bc>
 8019eb0:	f1b8 0f00 	cmp.w	r8, #0
 8019eb4:	f340 80c2 	ble.w	801a03c <_dtoa_r+0x46c>
 8019eb8:	4aca      	ldr	r2, [pc, #808]	@ (801a1e4 <_dtoa_r+0x614>)
 8019eba:	f008 010f 	and.w	r1, r8, #15
 8019ebe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019ec2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8019ec6:	ed92 7b00 	vldr	d7, [r2]
 8019eca:	ea4f 1128 	mov.w	r1, r8, asr #4
 8019ece:	f000 80a9 	beq.w	801a024 <_dtoa_r+0x454>
 8019ed2:	4ac5      	ldr	r2, [pc, #788]	@ (801a1e8 <_dtoa_r+0x618>)
 8019ed4:	ed92 6b08 	vldr	d6, [r2, #32]
 8019ed8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8019edc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019ee0:	f001 010f 	and.w	r1, r1, #15
 8019ee4:	2203      	movs	r2, #3
 8019ee6:	48c0      	ldr	r0, [pc, #768]	@ (801a1e8 <_dtoa_r+0x618>)
 8019ee8:	2900      	cmp	r1, #0
 8019eea:	f040 809d 	bne.w	801a028 <_dtoa_r+0x458>
 8019eee:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019ef2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019ef6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019efa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019efc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019f00:	2900      	cmp	r1, #0
 8019f02:	f000 80c1 	beq.w	801a088 <_dtoa_r+0x4b8>
 8019f06:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8019f0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f12:	f140 80b9 	bpl.w	801a088 <_dtoa_r+0x4b8>
 8019f16:	f1ba 0f00 	cmp.w	sl, #0
 8019f1a:	f000 80b5 	beq.w	801a088 <_dtoa_r+0x4b8>
 8019f1e:	f1bb 0f00 	cmp.w	fp, #0
 8019f22:	dd31      	ble.n	8019f88 <_dtoa_r+0x3b8>
 8019f24:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8019f28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019f2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019f30:	f108 31ff 	add.w	r1, r8, #4294967295
 8019f34:	9104      	str	r1, [sp, #16]
 8019f36:	3201      	adds	r2, #1
 8019f38:	465c      	mov	r4, fp
 8019f3a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019f3e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8019f42:	ee07 2a90 	vmov	s15, r2
 8019f46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019f4a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8019f4e:	ee15 2a90 	vmov	r2, s11
 8019f52:	ec51 0b15 	vmov	r0, r1, d5
 8019f56:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8019f5a:	2c00      	cmp	r4, #0
 8019f5c:	f040 8098 	bne.w	801a090 <_dtoa_r+0x4c0>
 8019f60:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019f64:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019f68:	ec41 0b17 	vmov	d7, r0, r1
 8019f6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f74:	f300 8261 	bgt.w	801a43a <_dtoa_r+0x86a>
 8019f78:	eeb1 7b47 	vneg.f64	d7, d7
 8019f7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f84:	f100 80f5 	bmi.w	801a172 <_dtoa_r+0x5a2>
 8019f88:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019f8c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019f8e:	2a00      	cmp	r2, #0
 8019f90:	f2c0 812c 	blt.w	801a1ec <_dtoa_r+0x61c>
 8019f94:	f1b8 0f0e 	cmp.w	r8, #14
 8019f98:	f300 8128 	bgt.w	801a1ec <_dtoa_r+0x61c>
 8019f9c:	4b91      	ldr	r3, [pc, #580]	@ (801a1e4 <_dtoa_r+0x614>)
 8019f9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019fa2:	ed93 6b00 	vldr	d6, [r3]
 8019fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	da03      	bge.n	8019fb4 <_dtoa_r+0x3e4>
 8019fac:	f1ba 0f00 	cmp.w	sl, #0
 8019fb0:	f340 80d2 	ble.w	801a158 <_dtoa_r+0x588>
 8019fb4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8019fb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019fbc:	463e      	mov	r6, r7
 8019fbe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019fc2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019fc6:	ee15 3a10 	vmov	r3, s10
 8019fca:	3330      	adds	r3, #48	@ 0x30
 8019fcc:	f806 3b01 	strb.w	r3, [r6], #1
 8019fd0:	1bf3      	subs	r3, r6, r7
 8019fd2:	459a      	cmp	sl, r3
 8019fd4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019fd8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019fdc:	f040 80f8 	bne.w	801a1d0 <_dtoa_r+0x600>
 8019fe0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019fe4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fec:	f300 80dd 	bgt.w	801a1aa <_dtoa_r+0x5da>
 8019ff0:	eeb4 7b46 	vcmp.f64	d7, d6
 8019ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ff8:	d104      	bne.n	801a004 <_dtoa_r+0x434>
 8019ffa:	ee15 3a10 	vmov	r3, s10
 8019ffe:	07db      	lsls	r3, r3, #31
 801a000:	f100 80d3 	bmi.w	801a1aa <_dtoa_r+0x5da>
 801a004:	9901      	ldr	r1, [sp, #4]
 801a006:	4648      	mov	r0, r9
 801a008:	f000 ffc4 	bl	801af94 <_Bfree>
 801a00c:	2300      	movs	r3, #0
 801a00e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a010:	7033      	strb	r3, [r6, #0]
 801a012:	f108 0301 	add.w	r3, r8, #1
 801a016:	6013      	str	r3, [r2, #0]
 801a018:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	f000 8304 	beq.w	801a628 <_dtoa_r+0xa58>
 801a020:	601e      	str	r6, [r3, #0]
 801a022:	e301      	b.n	801a628 <_dtoa_r+0xa58>
 801a024:	2202      	movs	r2, #2
 801a026:	e75e      	b.n	8019ee6 <_dtoa_r+0x316>
 801a028:	07cc      	lsls	r4, r1, #31
 801a02a:	d504      	bpl.n	801a036 <_dtoa_r+0x466>
 801a02c:	ed90 6b00 	vldr	d6, [r0]
 801a030:	3201      	adds	r2, #1
 801a032:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a036:	1049      	asrs	r1, r1, #1
 801a038:	3008      	adds	r0, #8
 801a03a:	e755      	b.n	8019ee8 <_dtoa_r+0x318>
 801a03c:	d022      	beq.n	801a084 <_dtoa_r+0x4b4>
 801a03e:	f1c8 0100 	rsb	r1, r8, #0
 801a042:	4a68      	ldr	r2, [pc, #416]	@ (801a1e4 <_dtoa_r+0x614>)
 801a044:	f001 000f 	and.w	r0, r1, #15
 801a048:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a04c:	ed92 7b00 	vldr	d7, [r2]
 801a050:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a054:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a058:	4863      	ldr	r0, [pc, #396]	@ (801a1e8 <_dtoa_r+0x618>)
 801a05a:	1109      	asrs	r1, r1, #4
 801a05c:	2400      	movs	r4, #0
 801a05e:	2202      	movs	r2, #2
 801a060:	b929      	cbnz	r1, 801a06e <_dtoa_r+0x49e>
 801a062:	2c00      	cmp	r4, #0
 801a064:	f43f af49 	beq.w	8019efa <_dtoa_r+0x32a>
 801a068:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a06c:	e745      	b.n	8019efa <_dtoa_r+0x32a>
 801a06e:	07ce      	lsls	r6, r1, #31
 801a070:	d505      	bpl.n	801a07e <_dtoa_r+0x4ae>
 801a072:	ed90 6b00 	vldr	d6, [r0]
 801a076:	3201      	adds	r2, #1
 801a078:	2401      	movs	r4, #1
 801a07a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a07e:	1049      	asrs	r1, r1, #1
 801a080:	3008      	adds	r0, #8
 801a082:	e7ed      	b.n	801a060 <_dtoa_r+0x490>
 801a084:	2202      	movs	r2, #2
 801a086:	e738      	b.n	8019efa <_dtoa_r+0x32a>
 801a088:	f8cd 8010 	str.w	r8, [sp, #16]
 801a08c:	4654      	mov	r4, sl
 801a08e:	e754      	b.n	8019f3a <_dtoa_r+0x36a>
 801a090:	4a54      	ldr	r2, [pc, #336]	@ (801a1e4 <_dtoa_r+0x614>)
 801a092:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a096:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a09a:	9a08      	ldr	r2, [sp, #32]
 801a09c:	ec41 0b17 	vmov	d7, r0, r1
 801a0a0:	443c      	add	r4, r7
 801a0a2:	b34a      	cbz	r2, 801a0f8 <_dtoa_r+0x528>
 801a0a4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801a0a8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801a0ac:	463e      	mov	r6, r7
 801a0ae:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a0b2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a0b6:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a0ba:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a0be:	ee14 2a90 	vmov	r2, s9
 801a0c2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a0c6:	3230      	adds	r2, #48	@ 0x30
 801a0c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a0cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0d4:	f806 2b01 	strb.w	r2, [r6], #1
 801a0d8:	d438      	bmi.n	801a14c <_dtoa_r+0x57c>
 801a0da:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a0de:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0e6:	d462      	bmi.n	801a1ae <_dtoa_r+0x5de>
 801a0e8:	42a6      	cmp	r6, r4
 801a0ea:	f43f af4d 	beq.w	8019f88 <_dtoa_r+0x3b8>
 801a0ee:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a0f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a0f6:	e7e0      	b.n	801a0ba <_dtoa_r+0x4ea>
 801a0f8:	4621      	mov	r1, r4
 801a0fa:	463e      	mov	r6, r7
 801a0fc:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a100:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a104:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a108:	ee14 2a90 	vmov	r2, s9
 801a10c:	3230      	adds	r2, #48	@ 0x30
 801a10e:	f806 2b01 	strb.w	r2, [r6], #1
 801a112:	42a6      	cmp	r6, r4
 801a114:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a118:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a11c:	d119      	bne.n	801a152 <_dtoa_r+0x582>
 801a11e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801a122:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a126:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a12e:	dc3e      	bgt.n	801a1ae <_dtoa_r+0x5de>
 801a130:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a134:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a13c:	f57f af24 	bpl.w	8019f88 <_dtoa_r+0x3b8>
 801a140:	460e      	mov	r6, r1
 801a142:	3901      	subs	r1, #1
 801a144:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a148:	2b30      	cmp	r3, #48	@ 0x30
 801a14a:	d0f9      	beq.n	801a140 <_dtoa_r+0x570>
 801a14c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a150:	e758      	b.n	801a004 <_dtoa_r+0x434>
 801a152:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a156:	e7d5      	b.n	801a104 <_dtoa_r+0x534>
 801a158:	d10b      	bne.n	801a172 <_dtoa_r+0x5a2>
 801a15a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a15e:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a162:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a166:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a16e:	f2c0 8161 	blt.w	801a434 <_dtoa_r+0x864>
 801a172:	2400      	movs	r4, #0
 801a174:	4625      	mov	r5, r4
 801a176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a178:	43db      	mvns	r3, r3
 801a17a:	9304      	str	r3, [sp, #16]
 801a17c:	463e      	mov	r6, r7
 801a17e:	f04f 0800 	mov.w	r8, #0
 801a182:	4621      	mov	r1, r4
 801a184:	4648      	mov	r0, r9
 801a186:	f000 ff05 	bl	801af94 <_Bfree>
 801a18a:	2d00      	cmp	r5, #0
 801a18c:	d0de      	beq.n	801a14c <_dtoa_r+0x57c>
 801a18e:	f1b8 0f00 	cmp.w	r8, #0
 801a192:	d005      	beq.n	801a1a0 <_dtoa_r+0x5d0>
 801a194:	45a8      	cmp	r8, r5
 801a196:	d003      	beq.n	801a1a0 <_dtoa_r+0x5d0>
 801a198:	4641      	mov	r1, r8
 801a19a:	4648      	mov	r0, r9
 801a19c:	f000 fefa 	bl	801af94 <_Bfree>
 801a1a0:	4629      	mov	r1, r5
 801a1a2:	4648      	mov	r0, r9
 801a1a4:	f000 fef6 	bl	801af94 <_Bfree>
 801a1a8:	e7d0      	b.n	801a14c <_dtoa_r+0x57c>
 801a1aa:	f8cd 8010 	str.w	r8, [sp, #16]
 801a1ae:	4633      	mov	r3, r6
 801a1b0:	461e      	mov	r6, r3
 801a1b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a1b6:	2a39      	cmp	r2, #57	@ 0x39
 801a1b8:	d106      	bne.n	801a1c8 <_dtoa_r+0x5f8>
 801a1ba:	429f      	cmp	r7, r3
 801a1bc:	d1f8      	bne.n	801a1b0 <_dtoa_r+0x5e0>
 801a1be:	9a04      	ldr	r2, [sp, #16]
 801a1c0:	3201      	adds	r2, #1
 801a1c2:	9204      	str	r2, [sp, #16]
 801a1c4:	2230      	movs	r2, #48	@ 0x30
 801a1c6:	703a      	strb	r2, [r7, #0]
 801a1c8:	781a      	ldrb	r2, [r3, #0]
 801a1ca:	3201      	adds	r2, #1
 801a1cc:	701a      	strb	r2, [r3, #0]
 801a1ce:	e7bd      	b.n	801a14c <_dtoa_r+0x57c>
 801a1d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a1d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1dc:	f47f aeef 	bne.w	8019fbe <_dtoa_r+0x3ee>
 801a1e0:	e710      	b.n	801a004 <_dtoa_r+0x434>
 801a1e2:	bf00      	nop
 801a1e4:	0801db00 	.word	0x0801db00
 801a1e8:	0801dad8 	.word	0x0801dad8
 801a1ec:	9908      	ldr	r1, [sp, #32]
 801a1ee:	2900      	cmp	r1, #0
 801a1f0:	f000 80e3 	beq.w	801a3ba <_dtoa_r+0x7ea>
 801a1f4:	9907      	ldr	r1, [sp, #28]
 801a1f6:	2901      	cmp	r1, #1
 801a1f8:	f300 80c8 	bgt.w	801a38c <_dtoa_r+0x7bc>
 801a1fc:	2d00      	cmp	r5, #0
 801a1fe:	f000 80c1 	beq.w	801a384 <_dtoa_r+0x7b4>
 801a202:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a206:	9e05      	ldr	r6, [sp, #20]
 801a208:	461c      	mov	r4, r3
 801a20a:	9304      	str	r3, [sp, #16]
 801a20c:	9b05      	ldr	r3, [sp, #20]
 801a20e:	4413      	add	r3, r2
 801a210:	9305      	str	r3, [sp, #20]
 801a212:	9b06      	ldr	r3, [sp, #24]
 801a214:	2101      	movs	r1, #1
 801a216:	4413      	add	r3, r2
 801a218:	4648      	mov	r0, r9
 801a21a:	9306      	str	r3, [sp, #24]
 801a21c:	f000 ffb8 	bl	801b190 <__i2b>
 801a220:	9b04      	ldr	r3, [sp, #16]
 801a222:	4605      	mov	r5, r0
 801a224:	b166      	cbz	r6, 801a240 <_dtoa_r+0x670>
 801a226:	9a06      	ldr	r2, [sp, #24]
 801a228:	2a00      	cmp	r2, #0
 801a22a:	dd09      	ble.n	801a240 <_dtoa_r+0x670>
 801a22c:	42b2      	cmp	r2, r6
 801a22e:	9905      	ldr	r1, [sp, #20]
 801a230:	bfa8      	it	ge
 801a232:	4632      	movge	r2, r6
 801a234:	1a89      	subs	r1, r1, r2
 801a236:	9105      	str	r1, [sp, #20]
 801a238:	9906      	ldr	r1, [sp, #24]
 801a23a:	1ab6      	subs	r6, r6, r2
 801a23c:	1a8a      	subs	r2, r1, r2
 801a23e:	9206      	str	r2, [sp, #24]
 801a240:	b1fb      	cbz	r3, 801a282 <_dtoa_r+0x6b2>
 801a242:	9a08      	ldr	r2, [sp, #32]
 801a244:	2a00      	cmp	r2, #0
 801a246:	f000 80bc 	beq.w	801a3c2 <_dtoa_r+0x7f2>
 801a24a:	b19c      	cbz	r4, 801a274 <_dtoa_r+0x6a4>
 801a24c:	4629      	mov	r1, r5
 801a24e:	4622      	mov	r2, r4
 801a250:	4648      	mov	r0, r9
 801a252:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a254:	f001 f85c 	bl	801b310 <__pow5mult>
 801a258:	9a01      	ldr	r2, [sp, #4]
 801a25a:	4601      	mov	r1, r0
 801a25c:	4605      	mov	r5, r0
 801a25e:	4648      	mov	r0, r9
 801a260:	f000 ffac 	bl	801b1bc <__multiply>
 801a264:	9901      	ldr	r1, [sp, #4]
 801a266:	9004      	str	r0, [sp, #16]
 801a268:	4648      	mov	r0, r9
 801a26a:	f000 fe93 	bl	801af94 <_Bfree>
 801a26e:	9a04      	ldr	r2, [sp, #16]
 801a270:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a272:	9201      	str	r2, [sp, #4]
 801a274:	1b1a      	subs	r2, r3, r4
 801a276:	d004      	beq.n	801a282 <_dtoa_r+0x6b2>
 801a278:	9901      	ldr	r1, [sp, #4]
 801a27a:	4648      	mov	r0, r9
 801a27c:	f001 f848 	bl	801b310 <__pow5mult>
 801a280:	9001      	str	r0, [sp, #4]
 801a282:	2101      	movs	r1, #1
 801a284:	4648      	mov	r0, r9
 801a286:	f000 ff83 	bl	801b190 <__i2b>
 801a28a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a28c:	4604      	mov	r4, r0
 801a28e:	2b00      	cmp	r3, #0
 801a290:	f000 81d0 	beq.w	801a634 <_dtoa_r+0xa64>
 801a294:	461a      	mov	r2, r3
 801a296:	4601      	mov	r1, r0
 801a298:	4648      	mov	r0, r9
 801a29a:	f001 f839 	bl	801b310 <__pow5mult>
 801a29e:	9b07      	ldr	r3, [sp, #28]
 801a2a0:	2b01      	cmp	r3, #1
 801a2a2:	4604      	mov	r4, r0
 801a2a4:	f300 8095 	bgt.w	801a3d2 <_dtoa_r+0x802>
 801a2a8:	9b02      	ldr	r3, [sp, #8]
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	f040 808b 	bne.w	801a3c6 <_dtoa_r+0x7f6>
 801a2b0:	9b03      	ldr	r3, [sp, #12]
 801a2b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a2b6:	2a00      	cmp	r2, #0
 801a2b8:	f040 8087 	bne.w	801a3ca <_dtoa_r+0x7fa>
 801a2bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a2c0:	0d12      	lsrs	r2, r2, #20
 801a2c2:	0512      	lsls	r2, r2, #20
 801a2c4:	2a00      	cmp	r2, #0
 801a2c6:	f000 8082 	beq.w	801a3ce <_dtoa_r+0x7fe>
 801a2ca:	9b05      	ldr	r3, [sp, #20]
 801a2cc:	3301      	adds	r3, #1
 801a2ce:	9305      	str	r3, [sp, #20]
 801a2d0:	9b06      	ldr	r3, [sp, #24]
 801a2d2:	3301      	adds	r3, #1
 801a2d4:	9306      	str	r3, [sp, #24]
 801a2d6:	2301      	movs	r3, #1
 801a2d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a2da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	f000 81af 	beq.w	801a640 <_dtoa_r+0xa70>
 801a2e2:	6922      	ldr	r2, [r4, #16]
 801a2e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a2e8:	6910      	ldr	r0, [r2, #16]
 801a2ea:	f000 ff05 	bl	801b0f8 <__hi0bits>
 801a2ee:	f1c0 0020 	rsb	r0, r0, #32
 801a2f2:	9b06      	ldr	r3, [sp, #24]
 801a2f4:	4418      	add	r0, r3
 801a2f6:	f010 001f 	ands.w	r0, r0, #31
 801a2fa:	d076      	beq.n	801a3ea <_dtoa_r+0x81a>
 801a2fc:	f1c0 0220 	rsb	r2, r0, #32
 801a300:	2a04      	cmp	r2, #4
 801a302:	dd69      	ble.n	801a3d8 <_dtoa_r+0x808>
 801a304:	9b05      	ldr	r3, [sp, #20]
 801a306:	f1c0 001c 	rsb	r0, r0, #28
 801a30a:	4403      	add	r3, r0
 801a30c:	9305      	str	r3, [sp, #20]
 801a30e:	9b06      	ldr	r3, [sp, #24]
 801a310:	4406      	add	r6, r0
 801a312:	4403      	add	r3, r0
 801a314:	9306      	str	r3, [sp, #24]
 801a316:	9b05      	ldr	r3, [sp, #20]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	dd05      	ble.n	801a328 <_dtoa_r+0x758>
 801a31c:	9901      	ldr	r1, [sp, #4]
 801a31e:	461a      	mov	r2, r3
 801a320:	4648      	mov	r0, r9
 801a322:	f001 f84f 	bl	801b3c4 <__lshift>
 801a326:	9001      	str	r0, [sp, #4]
 801a328:	9b06      	ldr	r3, [sp, #24]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	dd05      	ble.n	801a33a <_dtoa_r+0x76a>
 801a32e:	4621      	mov	r1, r4
 801a330:	461a      	mov	r2, r3
 801a332:	4648      	mov	r0, r9
 801a334:	f001 f846 	bl	801b3c4 <__lshift>
 801a338:	4604      	mov	r4, r0
 801a33a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d056      	beq.n	801a3ee <_dtoa_r+0x81e>
 801a340:	9801      	ldr	r0, [sp, #4]
 801a342:	4621      	mov	r1, r4
 801a344:	f001 f8aa 	bl	801b49c <__mcmp>
 801a348:	2800      	cmp	r0, #0
 801a34a:	da50      	bge.n	801a3ee <_dtoa_r+0x81e>
 801a34c:	f108 33ff 	add.w	r3, r8, #4294967295
 801a350:	9304      	str	r3, [sp, #16]
 801a352:	9901      	ldr	r1, [sp, #4]
 801a354:	2300      	movs	r3, #0
 801a356:	220a      	movs	r2, #10
 801a358:	4648      	mov	r0, r9
 801a35a:	f000 fe3d 	bl	801afd8 <__multadd>
 801a35e:	9b08      	ldr	r3, [sp, #32]
 801a360:	9001      	str	r0, [sp, #4]
 801a362:	2b00      	cmp	r3, #0
 801a364:	f000 816e 	beq.w	801a644 <_dtoa_r+0xa74>
 801a368:	4629      	mov	r1, r5
 801a36a:	2300      	movs	r3, #0
 801a36c:	220a      	movs	r2, #10
 801a36e:	4648      	mov	r0, r9
 801a370:	f000 fe32 	bl	801afd8 <__multadd>
 801a374:	f1bb 0f00 	cmp.w	fp, #0
 801a378:	4605      	mov	r5, r0
 801a37a:	dc64      	bgt.n	801a446 <_dtoa_r+0x876>
 801a37c:	9b07      	ldr	r3, [sp, #28]
 801a37e:	2b02      	cmp	r3, #2
 801a380:	dc3e      	bgt.n	801a400 <_dtoa_r+0x830>
 801a382:	e060      	b.n	801a446 <_dtoa_r+0x876>
 801a384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a386:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801a38a:	e73c      	b.n	801a206 <_dtoa_r+0x636>
 801a38c:	f10a 34ff 	add.w	r4, sl, #4294967295
 801a390:	42a3      	cmp	r3, r4
 801a392:	bfbf      	itttt	lt
 801a394:	1ae2      	sublt	r2, r4, r3
 801a396:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801a398:	189b      	addlt	r3, r3, r2
 801a39a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801a39c:	bfae      	itee	ge
 801a39e:	1b1c      	subge	r4, r3, r4
 801a3a0:	4623      	movlt	r3, r4
 801a3a2:	2400      	movlt	r4, #0
 801a3a4:	f1ba 0f00 	cmp.w	sl, #0
 801a3a8:	bfb5      	itete	lt
 801a3aa:	9a05      	ldrlt	r2, [sp, #20]
 801a3ac:	9e05      	ldrge	r6, [sp, #20]
 801a3ae:	eba2 060a 	sublt.w	r6, r2, sl
 801a3b2:	4652      	movge	r2, sl
 801a3b4:	bfb8      	it	lt
 801a3b6:	2200      	movlt	r2, #0
 801a3b8:	e727      	b.n	801a20a <_dtoa_r+0x63a>
 801a3ba:	9e05      	ldr	r6, [sp, #20]
 801a3bc:	9d08      	ldr	r5, [sp, #32]
 801a3be:	461c      	mov	r4, r3
 801a3c0:	e730      	b.n	801a224 <_dtoa_r+0x654>
 801a3c2:	461a      	mov	r2, r3
 801a3c4:	e758      	b.n	801a278 <_dtoa_r+0x6a8>
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	e786      	b.n	801a2d8 <_dtoa_r+0x708>
 801a3ca:	9b02      	ldr	r3, [sp, #8]
 801a3cc:	e784      	b.n	801a2d8 <_dtoa_r+0x708>
 801a3ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a3d0:	e783      	b.n	801a2da <_dtoa_r+0x70a>
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a3d6:	e784      	b.n	801a2e2 <_dtoa_r+0x712>
 801a3d8:	d09d      	beq.n	801a316 <_dtoa_r+0x746>
 801a3da:	9b05      	ldr	r3, [sp, #20]
 801a3dc:	321c      	adds	r2, #28
 801a3de:	4413      	add	r3, r2
 801a3e0:	9305      	str	r3, [sp, #20]
 801a3e2:	9b06      	ldr	r3, [sp, #24]
 801a3e4:	4416      	add	r6, r2
 801a3e6:	4413      	add	r3, r2
 801a3e8:	e794      	b.n	801a314 <_dtoa_r+0x744>
 801a3ea:	4602      	mov	r2, r0
 801a3ec:	e7f5      	b.n	801a3da <_dtoa_r+0x80a>
 801a3ee:	f1ba 0f00 	cmp.w	sl, #0
 801a3f2:	f8cd 8010 	str.w	r8, [sp, #16]
 801a3f6:	46d3      	mov	fp, sl
 801a3f8:	dc21      	bgt.n	801a43e <_dtoa_r+0x86e>
 801a3fa:	9b07      	ldr	r3, [sp, #28]
 801a3fc:	2b02      	cmp	r3, #2
 801a3fe:	dd1e      	ble.n	801a43e <_dtoa_r+0x86e>
 801a400:	f1bb 0f00 	cmp.w	fp, #0
 801a404:	f47f aeb7 	bne.w	801a176 <_dtoa_r+0x5a6>
 801a408:	4621      	mov	r1, r4
 801a40a:	465b      	mov	r3, fp
 801a40c:	2205      	movs	r2, #5
 801a40e:	4648      	mov	r0, r9
 801a410:	f000 fde2 	bl	801afd8 <__multadd>
 801a414:	4601      	mov	r1, r0
 801a416:	4604      	mov	r4, r0
 801a418:	9801      	ldr	r0, [sp, #4]
 801a41a:	f001 f83f 	bl	801b49c <__mcmp>
 801a41e:	2800      	cmp	r0, #0
 801a420:	f77f aea9 	ble.w	801a176 <_dtoa_r+0x5a6>
 801a424:	463e      	mov	r6, r7
 801a426:	2331      	movs	r3, #49	@ 0x31
 801a428:	f806 3b01 	strb.w	r3, [r6], #1
 801a42c:	9b04      	ldr	r3, [sp, #16]
 801a42e:	3301      	adds	r3, #1
 801a430:	9304      	str	r3, [sp, #16]
 801a432:	e6a4      	b.n	801a17e <_dtoa_r+0x5ae>
 801a434:	f8cd 8010 	str.w	r8, [sp, #16]
 801a438:	4654      	mov	r4, sl
 801a43a:	4625      	mov	r5, r4
 801a43c:	e7f2      	b.n	801a424 <_dtoa_r+0x854>
 801a43e:	9b08      	ldr	r3, [sp, #32]
 801a440:	2b00      	cmp	r3, #0
 801a442:	f000 8103 	beq.w	801a64c <_dtoa_r+0xa7c>
 801a446:	2e00      	cmp	r6, #0
 801a448:	dd05      	ble.n	801a456 <_dtoa_r+0x886>
 801a44a:	4629      	mov	r1, r5
 801a44c:	4632      	mov	r2, r6
 801a44e:	4648      	mov	r0, r9
 801a450:	f000 ffb8 	bl	801b3c4 <__lshift>
 801a454:	4605      	mov	r5, r0
 801a456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d058      	beq.n	801a50e <_dtoa_r+0x93e>
 801a45c:	6869      	ldr	r1, [r5, #4]
 801a45e:	4648      	mov	r0, r9
 801a460:	f000 fd58 	bl	801af14 <_Balloc>
 801a464:	4606      	mov	r6, r0
 801a466:	b928      	cbnz	r0, 801a474 <_dtoa_r+0x8a4>
 801a468:	4b82      	ldr	r3, [pc, #520]	@ (801a674 <_dtoa_r+0xaa4>)
 801a46a:	4602      	mov	r2, r0
 801a46c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801a470:	f7ff bbc7 	b.w	8019c02 <_dtoa_r+0x32>
 801a474:	692a      	ldr	r2, [r5, #16]
 801a476:	3202      	adds	r2, #2
 801a478:	0092      	lsls	r2, r2, #2
 801a47a:	f105 010c 	add.w	r1, r5, #12
 801a47e:	300c      	adds	r0, #12
 801a480:	f7ff fb05 	bl	8019a8e <memcpy>
 801a484:	2201      	movs	r2, #1
 801a486:	4631      	mov	r1, r6
 801a488:	4648      	mov	r0, r9
 801a48a:	f000 ff9b 	bl	801b3c4 <__lshift>
 801a48e:	1c7b      	adds	r3, r7, #1
 801a490:	9305      	str	r3, [sp, #20]
 801a492:	eb07 030b 	add.w	r3, r7, fp
 801a496:	9309      	str	r3, [sp, #36]	@ 0x24
 801a498:	9b02      	ldr	r3, [sp, #8]
 801a49a:	f003 0301 	and.w	r3, r3, #1
 801a49e:	46a8      	mov	r8, r5
 801a4a0:	9308      	str	r3, [sp, #32]
 801a4a2:	4605      	mov	r5, r0
 801a4a4:	9b05      	ldr	r3, [sp, #20]
 801a4a6:	9801      	ldr	r0, [sp, #4]
 801a4a8:	4621      	mov	r1, r4
 801a4aa:	f103 3bff 	add.w	fp, r3, #4294967295
 801a4ae:	f7ff fb07 	bl	8019ac0 <quorem>
 801a4b2:	4641      	mov	r1, r8
 801a4b4:	9002      	str	r0, [sp, #8]
 801a4b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a4ba:	9801      	ldr	r0, [sp, #4]
 801a4bc:	f000 ffee 	bl	801b49c <__mcmp>
 801a4c0:	462a      	mov	r2, r5
 801a4c2:	9006      	str	r0, [sp, #24]
 801a4c4:	4621      	mov	r1, r4
 801a4c6:	4648      	mov	r0, r9
 801a4c8:	f001 f804 	bl	801b4d4 <__mdiff>
 801a4cc:	68c2      	ldr	r2, [r0, #12]
 801a4ce:	4606      	mov	r6, r0
 801a4d0:	b9fa      	cbnz	r2, 801a512 <_dtoa_r+0x942>
 801a4d2:	4601      	mov	r1, r0
 801a4d4:	9801      	ldr	r0, [sp, #4]
 801a4d6:	f000 ffe1 	bl	801b49c <__mcmp>
 801a4da:	4602      	mov	r2, r0
 801a4dc:	4631      	mov	r1, r6
 801a4de:	4648      	mov	r0, r9
 801a4e0:	920a      	str	r2, [sp, #40]	@ 0x28
 801a4e2:	f000 fd57 	bl	801af94 <_Bfree>
 801a4e6:	9b07      	ldr	r3, [sp, #28]
 801a4e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a4ea:	9e05      	ldr	r6, [sp, #20]
 801a4ec:	ea43 0102 	orr.w	r1, r3, r2
 801a4f0:	9b08      	ldr	r3, [sp, #32]
 801a4f2:	4319      	orrs	r1, r3
 801a4f4:	d10f      	bne.n	801a516 <_dtoa_r+0x946>
 801a4f6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a4fa:	d028      	beq.n	801a54e <_dtoa_r+0x97e>
 801a4fc:	9b06      	ldr	r3, [sp, #24]
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	dd02      	ble.n	801a508 <_dtoa_r+0x938>
 801a502:	9b02      	ldr	r3, [sp, #8]
 801a504:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801a508:	f88b a000 	strb.w	sl, [fp]
 801a50c:	e639      	b.n	801a182 <_dtoa_r+0x5b2>
 801a50e:	4628      	mov	r0, r5
 801a510:	e7bd      	b.n	801a48e <_dtoa_r+0x8be>
 801a512:	2201      	movs	r2, #1
 801a514:	e7e2      	b.n	801a4dc <_dtoa_r+0x90c>
 801a516:	9b06      	ldr	r3, [sp, #24]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	db04      	blt.n	801a526 <_dtoa_r+0x956>
 801a51c:	9907      	ldr	r1, [sp, #28]
 801a51e:	430b      	orrs	r3, r1
 801a520:	9908      	ldr	r1, [sp, #32]
 801a522:	430b      	orrs	r3, r1
 801a524:	d120      	bne.n	801a568 <_dtoa_r+0x998>
 801a526:	2a00      	cmp	r2, #0
 801a528:	ddee      	ble.n	801a508 <_dtoa_r+0x938>
 801a52a:	9901      	ldr	r1, [sp, #4]
 801a52c:	2201      	movs	r2, #1
 801a52e:	4648      	mov	r0, r9
 801a530:	f000 ff48 	bl	801b3c4 <__lshift>
 801a534:	4621      	mov	r1, r4
 801a536:	9001      	str	r0, [sp, #4]
 801a538:	f000 ffb0 	bl	801b49c <__mcmp>
 801a53c:	2800      	cmp	r0, #0
 801a53e:	dc03      	bgt.n	801a548 <_dtoa_r+0x978>
 801a540:	d1e2      	bne.n	801a508 <_dtoa_r+0x938>
 801a542:	f01a 0f01 	tst.w	sl, #1
 801a546:	d0df      	beq.n	801a508 <_dtoa_r+0x938>
 801a548:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a54c:	d1d9      	bne.n	801a502 <_dtoa_r+0x932>
 801a54e:	2339      	movs	r3, #57	@ 0x39
 801a550:	f88b 3000 	strb.w	r3, [fp]
 801a554:	4633      	mov	r3, r6
 801a556:	461e      	mov	r6, r3
 801a558:	3b01      	subs	r3, #1
 801a55a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a55e:	2a39      	cmp	r2, #57	@ 0x39
 801a560:	d053      	beq.n	801a60a <_dtoa_r+0xa3a>
 801a562:	3201      	adds	r2, #1
 801a564:	701a      	strb	r2, [r3, #0]
 801a566:	e60c      	b.n	801a182 <_dtoa_r+0x5b2>
 801a568:	2a00      	cmp	r2, #0
 801a56a:	dd07      	ble.n	801a57c <_dtoa_r+0x9ac>
 801a56c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a570:	d0ed      	beq.n	801a54e <_dtoa_r+0x97e>
 801a572:	f10a 0301 	add.w	r3, sl, #1
 801a576:	f88b 3000 	strb.w	r3, [fp]
 801a57a:	e602      	b.n	801a182 <_dtoa_r+0x5b2>
 801a57c:	9b05      	ldr	r3, [sp, #20]
 801a57e:	9a05      	ldr	r2, [sp, #20]
 801a580:	f803 ac01 	strb.w	sl, [r3, #-1]
 801a584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a586:	4293      	cmp	r3, r2
 801a588:	d029      	beq.n	801a5de <_dtoa_r+0xa0e>
 801a58a:	9901      	ldr	r1, [sp, #4]
 801a58c:	2300      	movs	r3, #0
 801a58e:	220a      	movs	r2, #10
 801a590:	4648      	mov	r0, r9
 801a592:	f000 fd21 	bl	801afd8 <__multadd>
 801a596:	45a8      	cmp	r8, r5
 801a598:	9001      	str	r0, [sp, #4]
 801a59a:	f04f 0300 	mov.w	r3, #0
 801a59e:	f04f 020a 	mov.w	r2, #10
 801a5a2:	4641      	mov	r1, r8
 801a5a4:	4648      	mov	r0, r9
 801a5a6:	d107      	bne.n	801a5b8 <_dtoa_r+0x9e8>
 801a5a8:	f000 fd16 	bl	801afd8 <__multadd>
 801a5ac:	4680      	mov	r8, r0
 801a5ae:	4605      	mov	r5, r0
 801a5b0:	9b05      	ldr	r3, [sp, #20]
 801a5b2:	3301      	adds	r3, #1
 801a5b4:	9305      	str	r3, [sp, #20]
 801a5b6:	e775      	b.n	801a4a4 <_dtoa_r+0x8d4>
 801a5b8:	f000 fd0e 	bl	801afd8 <__multadd>
 801a5bc:	4629      	mov	r1, r5
 801a5be:	4680      	mov	r8, r0
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	220a      	movs	r2, #10
 801a5c4:	4648      	mov	r0, r9
 801a5c6:	f000 fd07 	bl	801afd8 <__multadd>
 801a5ca:	4605      	mov	r5, r0
 801a5cc:	e7f0      	b.n	801a5b0 <_dtoa_r+0x9e0>
 801a5ce:	f1bb 0f00 	cmp.w	fp, #0
 801a5d2:	bfcc      	ite	gt
 801a5d4:	465e      	movgt	r6, fp
 801a5d6:	2601      	movle	r6, #1
 801a5d8:	443e      	add	r6, r7
 801a5da:	f04f 0800 	mov.w	r8, #0
 801a5de:	9901      	ldr	r1, [sp, #4]
 801a5e0:	2201      	movs	r2, #1
 801a5e2:	4648      	mov	r0, r9
 801a5e4:	f000 feee 	bl	801b3c4 <__lshift>
 801a5e8:	4621      	mov	r1, r4
 801a5ea:	9001      	str	r0, [sp, #4]
 801a5ec:	f000 ff56 	bl	801b49c <__mcmp>
 801a5f0:	2800      	cmp	r0, #0
 801a5f2:	dcaf      	bgt.n	801a554 <_dtoa_r+0x984>
 801a5f4:	d102      	bne.n	801a5fc <_dtoa_r+0xa2c>
 801a5f6:	f01a 0f01 	tst.w	sl, #1
 801a5fa:	d1ab      	bne.n	801a554 <_dtoa_r+0x984>
 801a5fc:	4633      	mov	r3, r6
 801a5fe:	461e      	mov	r6, r3
 801a600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a604:	2a30      	cmp	r2, #48	@ 0x30
 801a606:	d0fa      	beq.n	801a5fe <_dtoa_r+0xa2e>
 801a608:	e5bb      	b.n	801a182 <_dtoa_r+0x5b2>
 801a60a:	429f      	cmp	r7, r3
 801a60c:	d1a3      	bne.n	801a556 <_dtoa_r+0x986>
 801a60e:	9b04      	ldr	r3, [sp, #16]
 801a610:	3301      	adds	r3, #1
 801a612:	9304      	str	r3, [sp, #16]
 801a614:	2331      	movs	r3, #49	@ 0x31
 801a616:	703b      	strb	r3, [r7, #0]
 801a618:	e5b3      	b.n	801a182 <_dtoa_r+0x5b2>
 801a61a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a61c:	4f16      	ldr	r7, [pc, #88]	@ (801a678 <_dtoa_r+0xaa8>)
 801a61e:	b11b      	cbz	r3, 801a628 <_dtoa_r+0xa58>
 801a620:	f107 0308 	add.w	r3, r7, #8
 801a624:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a626:	6013      	str	r3, [r2, #0]
 801a628:	4638      	mov	r0, r7
 801a62a:	b011      	add	sp, #68	@ 0x44
 801a62c:	ecbd 8b02 	vpop	{d8}
 801a630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a634:	9b07      	ldr	r3, [sp, #28]
 801a636:	2b01      	cmp	r3, #1
 801a638:	f77f ae36 	ble.w	801a2a8 <_dtoa_r+0x6d8>
 801a63c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a63e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a640:	2001      	movs	r0, #1
 801a642:	e656      	b.n	801a2f2 <_dtoa_r+0x722>
 801a644:	f1bb 0f00 	cmp.w	fp, #0
 801a648:	f77f aed7 	ble.w	801a3fa <_dtoa_r+0x82a>
 801a64c:	463e      	mov	r6, r7
 801a64e:	9801      	ldr	r0, [sp, #4]
 801a650:	4621      	mov	r1, r4
 801a652:	f7ff fa35 	bl	8019ac0 <quorem>
 801a656:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a65a:	f806 ab01 	strb.w	sl, [r6], #1
 801a65e:	1bf2      	subs	r2, r6, r7
 801a660:	4593      	cmp	fp, r2
 801a662:	ddb4      	ble.n	801a5ce <_dtoa_r+0x9fe>
 801a664:	9901      	ldr	r1, [sp, #4]
 801a666:	2300      	movs	r3, #0
 801a668:	220a      	movs	r2, #10
 801a66a:	4648      	mov	r0, r9
 801a66c:	f000 fcb4 	bl	801afd8 <__multadd>
 801a670:	9001      	str	r0, [sp, #4]
 801a672:	e7ec      	b.n	801a64e <_dtoa_r+0xa7e>
 801a674:	0801da01 	.word	0x0801da01
 801a678:	0801d985 	.word	0x0801d985

0801a67c <_free_r>:
 801a67c:	b538      	push	{r3, r4, r5, lr}
 801a67e:	4605      	mov	r5, r0
 801a680:	2900      	cmp	r1, #0
 801a682:	d041      	beq.n	801a708 <_free_r+0x8c>
 801a684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a688:	1f0c      	subs	r4, r1, #4
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	bfb8      	it	lt
 801a68e:	18e4      	addlt	r4, r4, r3
 801a690:	f000 fc34 	bl	801aefc <__malloc_lock>
 801a694:	4a1d      	ldr	r2, [pc, #116]	@ (801a70c <_free_r+0x90>)
 801a696:	6813      	ldr	r3, [r2, #0]
 801a698:	b933      	cbnz	r3, 801a6a8 <_free_r+0x2c>
 801a69a:	6063      	str	r3, [r4, #4]
 801a69c:	6014      	str	r4, [r2, #0]
 801a69e:	4628      	mov	r0, r5
 801a6a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a6a4:	f000 bc30 	b.w	801af08 <__malloc_unlock>
 801a6a8:	42a3      	cmp	r3, r4
 801a6aa:	d908      	bls.n	801a6be <_free_r+0x42>
 801a6ac:	6820      	ldr	r0, [r4, #0]
 801a6ae:	1821      	adds	r1, r4, r0
 801a6b0:	428b      	cmp	r3, r1
 801a6b2:	bf01      	itttt	eq
 801a6b4:	6819      	ldreq	r1, [r3, #0]
 801a6b6:	685b      	ldreq	r3, [r3, #4]
 801a6b8:	1809      	addeq	r1, r1, r0
 801a6ba:	6021      	streq	r1, [r4, #0]
 801a6bc:	e7ed      	b.n	801a69a <_free_r+0x1e>
 801a6be:	461a      	mov	r2, r3
 801a6c0:	685b      	ldr	r3, [r3, #4]
 801a6c2:	b10b      	cbz	r3, 801a6c8 <_free_r+0x4c>
 801a6c4:	42a3      	cmp	r3, r4
 801a6c6:	d9fa      	bls.n	801a6be <_free_r+0x42>
 801a6c8:	6811      	ldr	r1, [r2, #0]
 801a6ca:	1850      	adds	r0, r2, r1
 801a6cc:	42a0      	cmp	r0, r4
 801a6ce:	d10b      	bne.n	801a6e8 <_free_r+0x6c>
 801a6d0:	6820      	ldr	r0, [r4, #0]
 801a6d2:	4401      	add	r1, r0
 801a6d4:	1850      	adds	r0, r2, r1
 801a6d6:	4283      	cmp	r3, r0
 801a6d8:	6011      	str	r1, [r2, #0]
 801a6da:	d1e0      	bne.n	801a69e <_free_r+0x22>
 801a6dc:	6818      	ldr	r0, [r3, #0]
 801a6de:	685b      	ldr	r3, [r3, #4]
 801a6e0:	6053      	str	r3, [r2, #4]
 801a6e2:	4408      	add	r0, r1
 801a6e4:	6010      	str	r0, [r2, #0]
 801a6e6:	e7da      	b.n	801a69e <_free_r+0x22>
 801a6e8:	d902      	bls.n	801a6f0 <_free_r+0x74>
 801a6ea:	230c      	movs	r3, #12
 801a6ec:	602b      	str	r3, [r5, #0]
 801a6ee:	e7d6      	b.n	801a69e <_free_r+0x22>
 801a6f0:	6820      	ldr	r0, [r4, #0]
 801a6f2:	1821      	adds	r1, r4, r0
 801a6f4:	428b      	cmp	r3, r1
 801a6f6:	bf04      	itt	eq
 801a6f8:	6819      	ldreq	r1, [r3, #0]
 801a6fa:	685b      	ldreq	r3, [r3, #4]
 801a6fc:	6063      	str	r3, [r4, #4]
 801a6fe:	bf04      	itt	eq
 801a700:	1809      	addeq	r1, r1, r0
 801a702:	6021      	streq	r1, [r4, #0]
 801a704:	6054      	str	r4, [r2, #4]
 801a706:	e7ca      	b.n	801a69e <_free_r+0x22>
 801a708:	bd38      	pop	{r3, r4, r5, pc}
 801a70a:	bf00      	nop
 801a70c:	24006368 	.word	0x24006368

0801a710 <rshift>:
 801a710:	6903      	ldr	r3, [r0, #16]
 801a712:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a716:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a71a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a71e:	f100 0414 	add.w	r4, r0, #20
 801a722:	dd45      	ble.n	801a7b0 <rshift+0xa0>
 801a724:	f011 011f 	ands.w	r1, r1, #31
 801a728:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a72c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a730:	d10c      	bne.n	801a74c <rshift+0x3c>
 801a732:	f100 0710 	add.w	r7, r0, #16
 801a736:	4629      	mov	r1, r5
 801a738:	42b1      	cmp	r1, r6
 801a73a:	d334      	bcc.n	801a7a6 <rshift+0x96>
 801a73c:	1a9b      	subs	r3, r3, r2
 801a73e:	009b      	lsls	r3, r3, #2
 801a740:	1eea      	subs	r2, r5, #3
 801a742:	4296      	cmp	r6, r2
 801a744:	bf38      	it	cc
 801a746:	2300      	movcc	r3, #0
 801a748:	4423      	add	r3, r4
 801a74a:	e015      	b.n	801a778 <rshift+0x68>
 801a74c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a750:	f1c1 0820 	rsb	r8, r1, #32
 801a754:	40cf      	lsrs	r7, r1
 801a756:	f105 0e04 	add.w	lr, r5, #4
 801a75a:	46a1      	mov	r9, r4
 801a75c:	4576      	cmp	r6, lr
 801a75e:	46f4      	mov	ip, lr
 801a760:	d815      	bhi.n	801a78e <rshift+0x7e>
 801a762:	1a9a      	subs	r2, r3, r2
 801a764:	0092      	lsls	r2, r2, #2
 801a766:	3a04      	subs	r2, #4
 801a768:	3501      	adds	r5, #1
 801a76a:	42ae      	cmp	r6, r5
 801a76c:	bf38      	it	cc
 801a76e:	2200      	movcc	r2, #0
 801a770:	18a3      	adds	r3, r4, r2
 801a772:	50a7      	str	r7, [r4, r2]
 801a774:	b107      	cbz	r7, 801a778 <rshift+0x68>
 801a776:	3304      	adds	r3, #4
 801a778:	1b1a      	subs	r2, r3, r4
 801a77a:	42a3      	cmp	r3, r4
 801a77c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a780:	bf08      	it	eq
 801a782:	2300      	moveq	r3, #0
 801a784:	6102      	str	r2, [r0, #16]
 801a786:	bf08      	it	eq
 801a788:	6143      	streq	r3, [r0, #20]
 801a78a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a78e:	f8dc c000 	ldr.w	ip, [ip]
 801a792:	fa0c fc08 	lsl.w	ip, ip, r8
 801a796:	ea4c 0707 	orr.w	r7, ip, r7
 801a79a:	f849 7b04 	str.w	r7, [r9], #4
 801a79e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a7a2:	40cf      	lsrs	r7, r1
 801a7a4:	e7da      	b.n	801a75c <rshift+0x4c>
 801a7a6:	f851 cb04 	ldr.w	ip, [r1], #4
 801a7aa:	f847 cf04 	str.w	ip, [r7, #4]!
 801a7ae:	e7c3      	b.n	801a738 <rshift+0x28>
 801a7b0:	4623      	mov	r3, r4
 801a7b2:	e7e1      	b.n	801a778 <rshift+0x68>

0801a7b4 <__hexdig_fun>:
 801a7b4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801a7b8:	2b09      	cmp	r3, #9
 801a7ba:	d802      	bhi.n	801a7c2 <__hexdig_fun+0xe>
 801a7bc:	3820      	subs	r0, #32
 801a7be:	b2c0      	uxtb	r0, r0
 801a7c0:	4770      	bx	lr
 801a7c2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801a7c6:	2b05      	cmp	r3, #5
 801a7c8:	d801      	bhi.n	801a7ce <__hexdig_fun+0x1a>
 801a7ca:	3847      	subs	r0, #71	@ 0x47
 801a7cc:	e7f7      	b.n	801a7be <__hexdig_fun+0xa>
 801a7ce:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801a7d2:	2b05      	cmp	r3, #5
 801a7d4:	d801      	bhi.n	801a7da <__hexdig_fun+0x26>
 801a7d6:	3827      	subs	r0, #39	@ 0x27
 801a7d8:	e7f1      	b.n	801a7be <__hexdig_fun+0xa>
 801a7da:	2000      	movs	r0, #0
 801a7dc:	4770      	bx	lr
	...

0801a7e0 <__gethex>:
 801a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7e4:	b085      	sub	sp, #20
 801a7e6:	468a      	mov	sl, r1
 801a7e8:	9302      	str	r3, [sp, #8]
 801a7ea:	680b      	ldr	r3, [r1, #0]
 801a7ec:	9001      	str	r0, [sp, #4]
 801a7ee:	4690      	mov	r8, r2
 801a7f0:	1c9c      	adds	r4, r3, #2
 801a7f2:	46a1      	mov	r9, r4
 801a7f4:	f814 0b01 	ldrb.w	r0, [r4], #1
 801a7f8:	2830      	cmp	r0, #48	@ 0x30
 801a7fa:	d0fa      	beq.n	801a7f2 <__gethex+0x12>
 801a7fc:	eba9 0303 	sub.w	r3, r9, r3
 801a800:	f1a3 0b02 	sub.w	fp, r3, #2
 801a804:	f7ff ffd6 	bl	801a7b4 <__hexdig_fun>
 801a808:	4605      	mov	r5, r0
 801a80a:	2800      	cmp	r0, #0
 801a80c:	d168      	bne.n	801a8e0 <__gethex+0x100>
 801a80e:	49a0      	ldr	r1, [pc, #640]	@ (801aa90 <__gethex+0x2b0>)
 801a810:	2201      	movs	r2, #1
 801a812:	4648      	mov	r0, r9
 801a814:	f7ff f8b2 	bl	801997c <strncmp>
 801a818:	4607      	mov	r7, r0
 801a81a:	2800      	cmp	r0, #0
 801a81c:	d167      	bne.n	801a8ee <__gethex+0x10e>
 801a81e:	f899 0001 	ldrb.w	r0, [r9, #1]
 801a822:	4626      	mov	r6, r4
 801a824:	f7ff ffc6 	bl	801a7b4 <__hexdig_fun>
 801a828:	2800      	cmp	r0, #0
 801a82a:	d062      	beq.n	801a8f2 <__gethex+0x112>
 801a82c:	4623      	mov	r3, r4
 801a82e:	7818      	ldrb	r0, [r3, #0]
 801a830:	2830      	cmp	r0, #48	@ 0x30
 801a832:	4699      	mov	r9, r3
 801a834:	f103 0301 	add.w	r3, r3, #1
 801a838:	d0f9      	beq.n	801a82e <__gethex+0x4e>
 801a83a:	f7ff ffbb 	bl	801a7b4 <__hexdig_fun>
 801a83e:	fab0 f580 	clz	r5, r0
 801a842:	096d      	lsrs	r5, r5, #5
 801a844:	f04f 0b01 	mov.w	fp, #1
 801a848:	464a      	mov	r2, r9
 801a84a:	4616      	mov	r6, r2
 801a84c:	3201      	adds	r2, #1
 801a84e:	7830      	ldrb	r0, [r6, #0]
 801a850:	f7ff ffb0 	bl	801a7b4 <__hexdig_fun>
 801a854:	2800      	cmp	r0, #0
 801a856:	d1f8      	bne.n	801a84a <__gethex+0x6a>
 801a858:	498d      	ldr	r1, [pc, #564]	@ (801aa90 <__gethex+0x2b0>)
 801a85a:	2201      	movs	r2, #1
 801a85c:	4630      	mov	r0, r6
 801a85e:	f7ff f88d 	bl	801997c <strncmp>
 801a862:	2800      	cmp	r0, #0
 801a864:	d13f      	bne.n	801a8e6 <__gethex+0x106>
 801a866:	b944      	cbnz	r4, 801a87a <__gethex+0x9a>
 801a868:	1c74      	adds	r4, r6, #1
 801a86a:	4622      	mov	r2, r4
 801a86c:	4616      	mov	r6, r2
 801a86e:	3201      	adds	r2, #1
 801a870:	7830      	ldrb	r0, [r6, #0]
 801a872:	f7ff ff9f 	bl	801a7b4 <__hexdig_fun>
 801a876:	2800      	cmp	r0, #0
 801a878:	d1f8      	bne.n	801a86c <__gethex+0x8c>
 801a87a:	1ba4      	subs	r4, r4, r6
 801a87c:	00a7      	lsls	r7, r4, #2
 801a87e:	7833      	ldrb	r3, [r6, #0]
 801a880:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801a884:	2b50      	cmp	r3, #80	@ 0x50
 801a886:	d13e      	bne.n	801a906 <__gethex+0x126>
 801a888:	7873      	ldrb	r3, [r6, #1]
 801a88a:	2b2b      	cmp	r3, #43	@ 0x2b
 801a88c:	d033      	beq.n	801a8f6 <__gethex+0x116>
 801a88e:	2b2d      	cmp	r3, #45	@ 0x2d
 801a890:	d034      	beq.n	801a8fc <__gethex+0x11c>
 801a892:	1c71      	adds	r1, r6, #1
 801a894:	2400      	movs	r4, #0
 801a896:	7808      	ldrb	r0, [r1, #0]
 801a898:	f7ff ff8c 	bl	801a7b4 <__hexdig_fun>
 801a89c:	1e43      	subs	r3, r0, #1
 801a89e:	b2db      	uxtb	r3, r3
 801a8a0:	2b18      	cmp	r3, #24
 801a8a2:	d830      	bhi.n	801a906 <__gethex+0x126>
 801a8a4:	f1a0 0210 	sub.w	r2, r0, #16
 801a8a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a8ac:	f7ff ff82 	bl	801a7b4 <__hexdig_fun>
 801a8b0:	f100 3cff 	add.w	ip, r0, #4294967295
 801a8b4:	fa5f fc8c 	uxtb.w	ip, ip
 801a8b8:	f1bc 0f18 	cmp.w	ip, #24
 801a8bc:	f04f 030a 	mov.w	r3, #10
 801a8c0:	d91e      	bls.n	801a900 <__gethex+0x120>
 801a8c2:	b104      	cbz	r4, 801a8c6 <__gethex+0xe6>
 801a8c4:	4252      	negs	r2, r2
 801a8c6:	4417      	add	r7, r2
 801a8c8:	f8ca 1000 	str.w	r1, [sl]
 801a8cc:	b1ed      	cbz	r5, 801a90a <__gethex+0x12a>
 801a8ce:	f1bb 0f00 	cmp.w	fp, #0
 801a8d2:	bf0c      	ite	eq
 801a8d4:	2506      	moveq	r5, #6
 801a8d6:	2500      	movne	r5, #0
 801a8d8:	4628      	mov	r0, r5
 801a8da:	b005      	add	sp, #20
 801a8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8e0:	2500      	movs	r5, #0
 801a8e2:	462c      	mov	r4, r5
 801a8e4:	e7b0      	b.n	801a848 <__gethex+0x68>
 801a8e6:	2c00      	cmp	r4, #0
 801a8e8:	d1c7      	bne.n	801a87a <__gethex+0x9a>
 801a8ea:	4627      	mov	r7, r4
 801a8ec:	e7c7      	b.n	801a87e <__gethex+0x9e>
 801a8ee:	464e      	mov	r6, r9
 801a8f0:	462f      	mov	r7, r5
 801a8f2:	2501      	movs	r5, #1
 801a8f4:	e7c3      	b.n	801a87e <__gethex+0x9e>
 801a8f6:	2400      	movs	r4, #0
 801a8f8:	1cb1      	adds	r1, r6, #2
 801a8fa:	e7cc      	b.n	801a896 <__gethex+0xb6>
 801a8fc:	2401      	movs	r4, #1
 801a8fe:	e7fb      	b.n	801a8f8 <__gethex+0x118>
 801a900:	fb03 0002 	mla	r0, r3, r2, r0
 801a904:	e7ce      	b.n	801a8a4 <__gethex+0xc4>
 801a906:	4631      	mov	r1, r6
 801a908:	e7de      	b.n	801a8c8 <__gethex+0xe8>
 801a90a:	eba6 0309 	sub.w	r3, r6, r9
 801a90e:	3b01      	subs	r3, #1
 801a910:	4629      	mov	r1, r5
 801a912:	2b07      	cmp	r3, #7
 801a914:	dc0a      	bgt.n	801a92c <__gethex+0x14c>
 801a916:	9801      	ldr	r0, [sp, #4]
 801a918:	f000 fafc 	bl	801af14 <_Balloc>
 801a91c:	4604      	mov	r4, r0
 801a91e:	b940      	cbnz	r0, 801a932 <__gethex+0x152>
 801a920:	4b5c      	ldr	r3, [pc, #368]	@ (801aa94 <__gethex+0x2b4>)
 801a922:	4602      	mov	r2, r0
 801a924:	21e4      	movs	r1, #228	@ 0xe4
 801a926:	485c      	ldr	r0, [pc, #368]	@ (801aa98 <__gethex+0x2b8>)
 801a928:	f001 f9de 	bl	801bce8 <__assert_func>
 801a92c:	3101      	adds	r1, #1
 801a92e:	105b      	asrs	r3, r3, #1
 801a930:	e7ef      	b.n	801a912 <__gethex+0x132>
 801a932:	f100 0a14 	add.w	sl, r0, #20
 801a936:	2300      	movs	r3, #0
 801a938:	4655      	mov	r5, sl
 801a93a:	469b      	mov	fp, r3
 801a93c:	45b1      	cmp	r9, r6
 801a93e:	d337      	bcc.n	801a9b0 <__gethex+0x1d0>
 801a940:	f845 bb04 	str.w	fp, [r5], #4
 801a944:	eba5 050a 	sub.w	r5, r5, sl
 801a948:	10ad      	asrs	r5, r5, #2
 801a94a:	6125      	str	r5, [r4, #16]
 801a94c:	4658      	mov	r0, fp
 801a94e:	f000 fbd3 	bl	801b0f8 <__hi0bits>
 801a952:	016d      	lsls	r5, r5, #5
 801a954:	f8d8 6000 	ldr.w	r6, [r8]
 801a958:	1a2d      	subs	r5, r5, r0
 801a95a:	42b5      	cmp	r5, r6
 801a95c:	dd54      	ble.n	801aa08 <__gethex+0x228>
 801a95e:	1bad      	subs	r5, r5, r6
 801a960:	4629      	mov	r1, r5
 801a962:	4620      	mov	r0, r4
 801a964:	f000 ff64 	bl	801b830 <__any_on>
 801a968:	4681      	mov	r9, r0
 801a96a:	b178      	cbz	r0, 801a98c <__gethex+0x1ac>
 801a96c:	1e6b      	subs	r3, r5, #1
 801a96e:	1159      	asrs	r1, r3, #5
 801a970:	f003 021f 	and.w	r2, r3, #31
 801a974:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801a978:	f04f 0901 	mov.w	r9, #1
 801a97c:	fa09 f202 	lsl.w	r2, r9, r2
 801a980:	420a      	tst	r2, r1
 801a982:	d003      	beq.n	801a98c <__gethex+0x1ac>
 801a984:	454b      	cmp	r3, r9
 801a986:	dc36      	bgt.n	801a9f6 <__gethex+0x216>
 801a988:	f04f 0902 	mov.w	r9, #2
 801a98c:	4629      	mov	r1, r5
 801a98e:	4620      	mov	r0, r4
 801a990:	f7ff febe 	bl	801a710 <rshift>
 801a994:	442f      	add	r7, r5
 801a996:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a99a:	42bb      	cmp	r3, r7
 801a99c:	da42      	bge.n	801aa24 <__gethex+0x244>
 801a99e:	9801      	ldr	r0, [sp, #4]
 801a9a0:	4621      	mov	r1, r4
 801a9a2:	f000 faf7 	bl	801af94 <_Bfree>
 801a9a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	6013      	str	r3, [r2, #0]
 801a9ac:	25a3      	movs	r5, #163	@ 0xa3
 801a9ae:	e793      	b.n	801a8d8 <__gethex+0xf8>
 801a9b0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801a9b4:	2a2e      	cmp	r2, #46	@ 0x2e
 801a9b6:	d012      	beq.n	801a9de <__gethex+0x1fe>
 801a9b8:	2b20      	cmp	r3, #32
 801a9ba:	d104      	bne.n	801a9c6 <__gethex+0x1e6>
 801a9bc:	f845 bb04 	str.w	fp, [r5], #4
 801a9c0:	f04f 0b00 	mov.w	fp, #0
 801a9c4:	465b      	mov	r3, fp
 801a9c6:	7830      	ldrb	r0, [r6, #0]
 801a9c8:	9303      	str	r3, [sp, #12]
 801a9ca:	f7ff fef3 	bl	801a7b4 <__hexdig_fun>
 801a9ce:	9b03      	ldr	r3, [sp, #12]
 801a9d0:	f000 000f 	and.w	r0, r0, #15
 801a9d4:	4098      	lsls	r0, r3
 801a9d6:	ea4b 0b00 	orr.w	fp, fp, r0
 801a9da:	3304      	adds	r3, #4
 801a9dc:	e7ae      	b.n	801a93c <__gethex+0x15c>
 801a9de:	45b1      	cmp	r9, r6
 801a9e0:	d8ea      	bhi.n	801a9b8 <__gethex+0x1d8>
 801a9e2:	492b      	ldr	r1, [pc, #172]	@ (801aa90 <__gethex+0x2b0>)
 801a9e4:	9303      	str	r3, [sp, #12]
 801a9e6:	2201      	movs	r2, #1
 801a9e8:	4630      	mov	r0, r6
 801a9ea:	f7fe ffc7 	bl	801997c <strncmp>
 801a9ee:	9b03      	ldr	r3, [sp, #12]
 801a9f0:	2800      	cmp	r0, #0
 801a9f2:	d1e1      	bne.n	801a9b8 <__gethex+0x1d8>
 801a9f4:	e7a2      	b.n	801a93c <__gethex+0x15c>
 801a9f6:	1ea9      	subs	r1, r5, #2
 801a9f8:	4620      	mov	r0, r4
 801a9fa:	f000 ff19 	bl	801b830 <__any_on>
 801a9fe:	2800      	cmp	r0, #0
 801aa00:	d0c2      	beq.n	801a988 <__gethex+0x1a8>
 801aa02:	f04f 0903 	mov.w	r9, #3
 801aa06:	e7c1      	b.n	801a98c <__gethex+0x1ac>
 801aa08:	da09      	bge.n	801aa1e <__gethex+0x23e>
 801aa0a:	1b75      	subs	r5, r6, r5
 801aa0c:	4621      	mov	r1, r4
 801aa0e:	9801      	ldr	r0, [sp, #4]
 801aa10:	462a      	mov	r2, r5
 801aa12:	f000 fcd7 	bl	801b3c4 <__lshift>
 801aa16:	1b7f      	subs	r7, r7, r5
 801aa18:	4604      	mov	r4, r0
 801aa1a:	f100 0a14 	add.w	sl, r0, #20
 801aa1e:	f04f 0900 	mov.w	r9, #0
 801aa22:	e7b8      	b.n	801a996 <__gethex+0x1b6>
 801aa24:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801aa28:	42bd      	cmp	r5, r7
 801aa2a:	dd6f      	ble.n	801ab0c <__gethex+0x32c>
 801aa2c:	1bed      	subs	r5, r5, r7
 801aa2e:	42ae      	cmp	r6, r5
 801aa30:	dc34      	bgt.n	801aa9c <__gethex+0x2bc>
 801aa32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801aa36:	2b02      	cmp	r3, #2
 801aa38:	d022      	beq.n	801aa80 <__gethex+0x2a0>
 801aa3a:	2b03      	cmp	r3, #3
 801aa3c:	d024      	beq.n	801aa88 <__gethex+0x2a8>
 801aa3e:	2b01      	cmp	r3, #1
 801aa40:	d115      	bne.n	801aa6e <__gethex+0x28e>
 801aa42:	42ae      	cmp	r6, r5
 801aa44:	d113      	bne.n	801aa6e <__gethex+0x28e>
 801aa46:	2e01      	cmp	r6, #1
 801aa48:	d10b      	bne.n	801aa62 <__gethex+0x282>
 801aa4a:	9a02      	ldr	r2, [sp, #8]
 801aa4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801aa50:	6013      	str	r3, [r2, #0]
 801aa52:	2301      	movs	r3, #1
 801aa54:	6123      	str	r3, [r4, #16]
 801aa56:	f8ca 3000 	str.w	r3, [sl]
 801aa5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aa5c:	2562      	movs	r5, #98	@ 0x62
 801aa5e:	601c      	str	r4, [r3, #0]
 801aa60:	e73a      	b.n	801a8d8 <__gethex+0xf8>
 801aa62:	1e71      	subs	r1, r6, #1
 801aa64:	4620      	mov	r0, r4
 801aa66:	f000 fee3 	bl	801b830 <__any_on>
 801aa6a:	2800      	cmp	r0, #0
 801aa6c:	d1ed      	bne.n	801aa4a <__gethex+0x26a>
 801aa6e:	9801      	ldr	r0, [sp, #4]
 801aa70:	4621      	mov	r1, r4
 801aa72:	f000 fa8f 	bl	801af94 <_Bfree>
 801aa76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aa78:	2300      	movs	r3, #0
 801aa7a:	6013      	str	r3, [r2, #0]
 801aa7c:	2550      	movs	r5, #80	@ 0x50
 801aa7e:	e72b      	b.n	801a8d8 <__gethex+0xf8>
 801aa80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d1f3      	bne.n	801aa6e <__gethex+0x28e>
 801aa86:	e7e0      	b.n	801aa4a <__gethex+0x26a>
 801aa88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d1dd      	bne.n	801aa4a <__gethex+0x26a>
 801aa8e:	e7ee      	b.n	801aa6e <__gethex+0x28e>
 801aa90:	0801d7f0 	.word	0x0801d7f0
 801aa94:	0801da01 	.word	0x0801da01
 801aa98:	0801da12 	.word	0x0801da12
 801aa9c:	1e6f      	subs	r7, r5, #1
 801aa9e:	f1b9 0f00 	cmp.w	r9, #0
 801aaa2:	d130      	bne.n	801ab06 <__gethex+0x326>
 801aaa4:	b127      	cbz	r7, 801aab0 <__gethex+0x2d0>
 801aaa6:	4639      	mov	r1, r7
 801aaa8:	4620      	mov	r0, r4
 801aaaa:	f000 fec1 	bl	801b830 <__any_on>
 801aaae:	4681      	mov	r9, r0
 801aab0:	117a      	asrs	r2, r7, #5
 801aab2:	2301      	movs	r3, #1
 801aab4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801aab8:	f007 071f 	and.w	r7, r7, #31
 801aabc:	40bb      	lsls	r3, r7
 801aabe:	4213      	tst	r3, r2
 801aac0:	4629      	mov	r1, r5
 801aac2:	4620      	mov	r0, r4
 801aac4:	bf18      	it	ne
 801aac6:	f049 0902 	orrne.w	r9, r9, #2
 801aaca:	f7ff fe21 	bl	801a710 <rshift>
 801aace:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801aad2:	1b76      	subs	r6, r6, r5
 801aad4:	2502      	movs	r5, #2
 801aad6:	f1b9 0f00 	cmp.w	r9, #0
 801aada:	d047      	beq.n	801ab6c <__gethex+0x38c>
 801aadc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801aae0:	2b02      	cmp	r3, #2
 801aae2:	d015      	beq.n	801ab10 <__gethex+0x330>
 801aae4:	2b03      	cmp	r3, #3
 801aae6:	d017      	beq.n	801ab18 <__gethex+0x338>
 801aae8:	2b01      	cmp	r3, #1
 801aaea:	d109      	bne.n	801ab00 <__gethex+0x320>
 801aaec:	f019 0f02 	tst.w	r9, #2
 801aaf0:	d006      	beq.n	801ab00 <__gethex+0x320>
 801aaf2:	f8da 3000 	ldr.w	r3, [sl]
 801aaf6:	ea49 0903 	orr.w	r9, r9, r3
 801aafa:	f019 0f01 	tst.w	r9, #1
 801aafe:	d10e      	bne.n	801ab1e <__gethex+0x33e>
 801ab00:	f045 0510 	orr.w	r5, r5, #16
 801ab04:	e032      	b.n	801ab6c <__gethex+0x38c>
 801ab06:	f04f 0901 	mov.w	r9, #1
 801ab0a:	e7d1      	b.n	801aab0 <__gethex+0x2d0>
 801ab0c:	2501      	movs	r5, #1
 801ab0e:	e7e2      	b.n	801aad6 <__gethex+0x2f6>
 801ab10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ab12:	f1c3 0301 	rsb	r3, r3, #1
 801ab16:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ab18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d0f0      	beq.n	801ab00 <__gethex+0x320>
 801ab1e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ab22:	f104 0314 	add.w	r3, r4, #20
 801ab26:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ab2a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ab2e:	f04f 0c00 	mov.w	ip, #0
 801ab32:	4618      	mov	r0, r3
 801ab34:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab38:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ab3c:	d01b      	beq.n	801ab76 <__gethex+0x396>
 801ab3e:	3201      	adds	r2, #1
 801ab40:	6002      	str	r2, [r0, #0]
 801ab42:	2d02      	cmp	r5, #2
 801ab44:	f104 0314 	add.w	r3, r4, #20
 801ab48:	d13c      	bne.n	801abc4 <__gethex+0x3e4>
 801ab4a:	f8d8 2000 	ldr.w	r2, [r8]
 801ab4e:	3a01      	subs	r2, #1
 801ab50:	42b2      	cmp	r2, r6
 801ab52:	d109      	bne.n	801ab68 <__gethex+0x388>
 801ab54:	1171      	asrs	r1, r6, #5
 801ab56:	2201      	movs	r2, #1
 801ab58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ab5c:	f006 061f 	and.w	r6, r6, #31
 801ab60:	fa02 f606 	lsl.w	r6, r2, r6
 801ab64:	421e      	tst	r6, r3
 801ab66:	d13a      	bne.n	801abde <__gethex+0x3fe>
 801ab68:	f045 0520 	orr.w	r5, r5, #32
 801ab6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ab6e:	601c      	str	r4, [r3, #0]
 801ab70:	9b02      	ldr	r3, [sp, #8]
 801ab72:	601f      	str	r7, [r3, #0]
 801ab74:	e6b0      	b.n	801a8d8 <__gethex+0xf8>
 801ab76:	4299      	cmp	r1, r3
 801ab78:	f843 cc04 	str.w	ip, [r3, #-4]
 801ab7c:	d8d9      	bhi.n	801ab32 <__gethex+0x352>
 801ab7e:	68a3      	ldr	r3, [r4, #8]
 801ab80:	459b      	cmp	fp, r3
 801ab82:	db17      	blt.n	801abb4 <__gethex+0x3d4>
 801ab84:	6861      	ldr	r1, [r4, #4]
 801ab86:	9801      	ldr	r0, [sp, #4]
 801ab88:	3101      	adds	r1, #1
 801ab8a:	f000 f9c3 	bl	801af14 <_Balloc>
 801ab8e:	4681      	mov	r9, r0
 801ab90:	b918      	cbnz	r0, 801ab9a <__gethex+0x3ba>
 801ab92:	4b1a      	ldr	r3, [pc, #104]	@ (801abfc <__gethex+0x41c>)
 801ab94:	4602      	mov	r2, r0
 801ab96:	2184      	movs	r1, #132	@ 0x84
 801ab98:	e6c5      	b.n	801a926 <__gethex+0x146>
 801ab9a:	6922      	ldr	r2, [r4, #16]
 801ab9c:	3202      	adds	r2, #2
 801ab9e:	f104 010c 	add.w	r1, r4, #12
 801aba2:	0092      	lsls	r2, r2, #2
 801aba4:	300c      	adds	r0, #12
 801aba6:	f7fe ff72 	bl	8019a8e <memcpy>
 801abaa:	4621      	mov	r1, r4
 801abac:	9801      	ldr	r0, [sp, #4]
 801abae:	f000 f9f1 	bl	801af94 <_Bfree>
 801abb2:	464c      	mov	r4, r9
 801abb4:	6923      	ldr	r3, [r4, #16]
 801abb6:	1c5a      	adds	r2, r3, #1
 801abb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801abbc:	6122      	str	r2, [r4, #16]
 801abbe:	2201      	movs	r2, #1
 801abc0:	615a      	str	r2, [r3, #20]
 801abc2:	e7be      	b.n	801ab42 <__gethex+0x362>
 801abc4:	6922      	ldr	r2, [r4, #16]
 801abc6:	455a      	cmp	r2, fp
 801abc8:	dd0b      	ble.n	801abe2 <__gethex+0x402>
 801abca:	2101      	movs	r1, #1
 801abcc:	4620      	mov	r0, r4
 801abce:	f7ff fd9f 	bl	801a710 <rshift>
 801abd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801abd6:	3701      	adds	r7, #1
 801abd8:	42bb      	cmp	r3, r7
 801abda:	f6ff aee0 	blt.w	801a99e <__gethex+0x1be>
 801abde:	2501      	movs	r5, #1
 801abe0:	e7c2      	b.n	801ab68 <__gethex+0x388>
 801abe2:	f016 061f 	ands.w	r6, r6, #31
 801abe6:	d0fa      	beq.n	801abde <__gethex+0x3fe>
 801abe8:	4453      	add	r3, sl
 801abea:	f1c6 0620 	rsb	r6, r6, #32
 801abee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801abf2:	f000 fa81 	bl	801b0f8 <__hi0bits>
 801abf6:	42b0      	cmp	r0, r6
 801abf8:	dbe7      	blt.n	801abca <__gethex+0x3ea>
 801abfa:	e7f0      	b.n	801abde <__gethex+0x3fe>
 801abfc:	0801da01 	.word	0x0801da01

0801ac00 <L_shift>:
 801ac00:	f1c2 0208 	rsb	r2, r2, #8
 801ac04:	0092      	lsls	r2, r2, #2
 801ac06:	b570      	push	{r4, r5, r6, lr}
 801ac08:	f1c2 0620 	rsb	r6, r2, #32
 801ac0c:	6843      	ldr	r3, [r0, #4]
 801ac0e:	6804      	ldr	r4, [r0, #0]
 801ac10:	fa03 f506 	lsl.w	r5, r3, r6
 801ac14:	432c      	orrs	r4, r5
 801ac16:	40d3      	lsrs	r3, r2
 801ac18:	6004      	str	r4, [r0, #0]
 801ac1a:	f840 3f04 	str.w	r3, [r0, #4]!
 801ac1e:	4288      	cmp	r0, r1
 801ac20:	d3f4      	bcc.n	801ac0c <L_shift+0xc>
 801ac22:	bd70      	pop	{r4, r5, r6, pc}

0801ac24 <__match>:
 801ac24:	b530      	push	{r4, r5, lr}
 801ac26:	6803      	ldr	r3, [r0, #0]
 801ac28:	3301      	adds	r3, #1
 801ac2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ac2e:	b914      	cbnz	r4, 801ac36 <__match+0x12>
 801ac30:	6003      	str	r3, [r0, #0]
 801ac32:	2001      	movs	r0, #1
 801ac34:	bd30      	pop	{r4, r5, pc}
 801ac36:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac3a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801ac3e:	2d19      	cmp	r5, #25
 801ac40:	bf98      	it	ls
 801ac42:	3220      	addls	r2, #32
 801ac44:	42a2      	cmp	r2, r4
 801ac46:	d0f0      	beq.n	801ac2a <__match+0x6>
 801ac48:	2000      	movs	r0, #0
 801ac4a:	e7f3      	b.n	801ac34 <__match+0x10>

0801ac4c <__hexnan>:
 801ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac50:	680b      	ldr	r3, [r1, #0]
 801ac52:	6801      	ldr	r1, [r0, #0]
 801ac54:	115e      	asrs	r6, r3, #5
 801ac56:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ac5a:	f013 031f 	ands.w	r3, r3, #31
 801ac5e:	b087      	sub	sp, #28
 801ac60:	bf18      	it	ne
 801ac62:	3604      	addne	r6, #4
 801ac64:	2500      	movs	r5, #0
 801ac66:	1f37      	subs	r7, r6, #4
 801ac68:	4682      	mov	sl, r0
 801ac6a:	4690      	mov	r8, r2
 801ac6c:	9301      	str	r3, [sp, #4]
 801ac6e:	f846 5c04 	str.w	r5, [r6, #-4]
 801ac72:	46b9      	mov	r9, r7
 801ac74:	463c      	mov	r4, r7
 801ac76:	9502      	str	r5, [sp, #8]
 801ac78:	46ab      	mov	fp, r5
 801ac7a:	784a      	ldrb	r2, [r1, #1]
 801ac7c:	1c4b      	adds	r3, r1, #1
 801ac7e:	9303      	str	r3, [sp, #12]
 801ac80:	b342      	cbz	r2, 801acd4 <__hexnan+0x88>
 801ac82:	4610      	mov	r0, r2
 801ac84:	9105      	str	r1, [sp, #20]
 801ac86:	9204      	str	r2, [sp, #16]
 801ac88:	f7ff fd94 	bl	801a7b4 <__hexdig_fun>
 801ac8c:	2800      	cmp	r0, #0
 801ac8e:	d151      	bne.n	801ad34 <__hexnan+0xe8>
 801ac90:	9a04      	ldr	r2, [sp, #16]
 801ac92:	9905      	ldr	r1, [sp, #20]
 801ac94:	2a20      	cmp	r2, #32
 801ac96:	d818      	bhi.n	801acca <__hexnan+0x7e>
 801ac98:	9b02      	ldr	r3, [sp, #8]
 801ac9a:	459b      	cmp	fp, r3
 801ac9c:	dd13      	ble.n	801acc6 <__hexnan+0x7a>
 801ac9e:	454c      	cmp	r4, r9
 801aca0:	d206      	bcs.n	801acb0 <__hexnan+0x64>
 801aca2:	2d07      	cmp	r5, #7
 801aca4:	dc04      	bgt.n	801acb0 <__hexnan+0x64>
 801aca6:	462a      	mov	r2, r5
 801aca8:	4649      	mov	r1, r9
 801acaa:	4620      	mov	r0, r4
 801acac:	f7ff ffa8 	bl	801ac00 <L_shift>
 801acb0:	4544      	cmp	r4, r8
 801acb2:	d952      	bls.n	801ad5a <__hexnan+0x10e>
 801acb4:	2300      	movs	r3, #0
 801acb6:	f1a4 0904 	sub.w	r9, r4, #4
 801acba:	f844 3c04 	str.w	r3, [r4, #-4]
 801acbe:	f8cd b008 	str.w	fp, [sp, #8]
 801acc2:	464c      	mov	r4, r9
 801acc4:	461d      	mov	r5, r3
 801acc6:	9903      	ldr	r1, [sp, #12]
 801acc8:	e7d7      	b.n	801ac7a <__hexnan+0x2e>
 801acca:	2a29      	cmp	r2, #41	@ 0x29
 801accc:	d157      	bne.n	801ad7e <__hexnan+0x132>
 801acce:	3102      	adds	r1, #2
 801acd0:	f8ca 1000 	str.w	r1, [sl]
 801acd4:	f1bb 0f00 	cmp.w	fp, #0
 801acd8:	d051      	beq.n	801ad7e <__hexnan+0x132>
 801acda:	454c      	cmp	r4, r9
 801acdc:	d206      	bcs.n	801acec <__hexnan+0xa0>
 801acde:	2d07      	cmp	r5, #7
 801ace0:	dc04      	bgt.n	801acec <__hexnan+0xa0>
 801ace2:	462a      	mov	r2, r5
 801ace4:	4649      	mov	r1, r9
 801ace6:	4620      	mov	r0, r4
 801ace8:	f7ff ff8a 	bl	801ac00 <L_shift>
 801acec:	4544      	cmp	r4, r8
 801acee:	d936      	bls.n	801ad5e <__hexnan+0x112>
 801acf0:	f1a8 0204 	sub.w	r2, r8, #4
 801acf4:	4623      	mov	r3, r4
 801acf6:	f853 1b04 	ldr.w	r1, [r3], #4
 801acfa:	f842 1f04 	str.w	r1, [r2, #4]!
 801acfe:	429f      	cmp	r7, r3
 801ad00:	d2f9      	bcs.n	801acf6 <__hexnan+0xaa>
 801ad02:	1b3b      	subs	r3, r7, r4
 801ad04:	f023 0303 	bic.w	r3, r3, #3
 801ad08:	3304      	adds	r3, #4
 801ad0a:	3401      	adds	r4, #1
 801ad0c:	3e03      	subs	r6, #3
 801ad0e:	42b4      	cmp	r4, r6
 801ad10:	bf88      	it	hi
 801ad12:	2304      	movhi	r3, #4
 801ad14:	4443      	add	r3, r8
 801ad16:	2200      	movs	r2, #0
 801ad18:	f843 2b04 	str.w	r2, [r3], #4
 801ad1c:	429f      	cmp	r7, r3
 801ad1e:	d2fb      	bcs.n	801ad18 <__hexnan+0xcc>
 801ad20:	683b      	ldr	r3, [r7, #0]
 801ad22:	b91b      	cbnz	r3, 801ad2c <__hexnan+0xe0>
 801ad24:	4547      	cmp	r7, r8
 801ad26:	d128      	bne.n	801ad7a <__hexnan+0x12e>
 801ad28:	2301      	movs	r3, #1
 801ad2a:	603b      	str	r3, [r7, #0]
 801ad2c:	2005      	movs	r0, #5
 801ad2e:	b007      	add	sp, #28
 801ad30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad34:	3501      	adds	r5, #1
 801ad36:	2d08      	cmp	r5, #8
 801ad38:	f10b 0b01 	add.w	fp, fp, #1
 801ad3c:	dd06      	ble.n	801ad4c <__hexnan+0x100>
 801ad3e:	4544      	cmp	r4, r8
 801ad40:	d9c1      	bls.n	801acc6 <__hexnan+0x7a>
 801ad42:	2300      	movs	r3, #0
 801ad44:	f844 3c04 	str.w	r3, [r4, #-4]
 801ad48:	2501      	movs	r5, #1
 801ad4a:	3c04      	subs	r4, #4
 801ad4c:	6822      	ldr	r2, [r4, #0]
 801ad4e:	f000 000f 	and.w	r0, r0, #15
 801ad52:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ad56:	6020      	str	r0, [r4, #0]
 801ad58:	e7b5      	b.n	801acc6 <__hexnan+0x7a>
 801ad5a:	2508      	movs	r5, #8
 801ad5c:	e7b3      	b.n	801acc6 <__hexnan+0x7a>
 801ad5e:	9b01      	ldr	r3, [sp, #4]
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d0dd      	beq.n	801ad20 <__hexnan+0xd4>
 801ad64:	f1c3 0320 	rsb	r3, r3, #32
 801ad68:	f04f 32ff 	mov.w	r2, #4294967295
 801ad6c:	40da      	lsrs	r2, r3
 801ad6e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ad72:	4013      	ands	r3, r2
 801ad74:	f846 3c04 	str.w	r3, [r6, #-4]
 801ad78:	e7d2      	b.n	801ad20 <__hexnan+0xd4>
 801ad7a:	3f04      	subs	r7, #4
 801ad7c:	e7d0      	b.n	801ad20 <__hexnan+0xd4>
 801ad7e:	2004      	movs	r0, #4
 801ad80:	e7d5      	b.n	801ad2e <__hexnan+0xe2>
	...

0801ad84 <malloc>:
 801ad84:	4b02      	ldr	r3, [pc, #8]	@ (801ad90 <malloc+0xc>)
 801ad86:	4601      	mov	r1, r0
 801ad88:	6818      	ldr	r0, [r3, #0]
 801ad8a:	f000 b825 	b.w	801add8 <_malloc_r>
 801ad8e:	bf00      	nop
 801ad90:	2400027c 	.word	0x2400027c

0801ad94 <sbrk_aligned>:
 801ad94:	b570      	push	{r4, r5, r6, lr}
 801ad96:	4e0f      	ldr	r6, [pc, #60]	@ (801add4 <sbrk_aligned+0x40>)
 801ad98:	460c      	mov	r4, r1
 801ad9a:	6831      	ldr	r1, [r6, #0]
 801ad9c:	4605      	mov	r5, r0
 801ad9e:	b911      	cbnz	r1, 801ada6 <sbrk_aligned+0x12>
 801ada0:	f000 ff92 	bl	801bcc8 <_sbrk_r>
 801ada4:	6030      	str	r0, [r6, #0]
 801ada6:	4621      	mov	r1, r4
 801ada8:	4628      	mov	r0, r5
 801adaa:	f000 ff8d 	bl	801bcc8 <_sbrk_r>
 801adae:	1c43      	adds	r3, r0, #1
 801adb0:	d103      	bne.n	801adba <sbrk_aligned+0x26>
 801adb2:	f04f 34ff 	mov.w	r4, #4294967295
 801adb6:	4620      	mov	r0, r4
 801adb8:	bd70      	pop	{r4, r5, r6, pc}
 801adba:	1cc4      	adds	r4, r0, #3
 801adbc:	f024 0403 	bic.w	r4, r4, #3
 801adc0:	42a0      	cmp	r0, r4
 801adc2:	d0f8      	beq.n	801adb6 <sbrk_aligned+0x22>
 801adc4:	1a21      	subs	r1, r4, r0
 801adc6:	4628      	mov	r0, r5
 801adc8:	f000 ff7e 	bl	801bcc8 <_sbrk_r>
 801adcc:	3001      	adds	r0, #1
 801adce:	d1f2      	bne.n	801adb6 <sbrk_aligned+0x22>
 801add0:	e7ef      	b.n	801adb2 <sbrk_aligned+0x1e>
 801add2:	bf00      	nop
 801add4:	24006364 	.word	0x24006364

0801add8 <_malloc_r>:
 801add8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801addc:	1ccd      	adds	r5, r1, #3
 801adde:	f025 0503 	bic.w	r5, r5, #3
 801ade2:	3508      	adds	r5, #8
 801ade4:	2d0c      	cmp	r5, #12
 801ade6:	bf38      	it	cc
 801ade8:	250c      	movcc	r5, #12
 801adea:	2d00      	cmp	r5, #0
 801adec:	4606      	mov	r6, r0
 801adee:	db01      	blt.n	801adf4 <_malloc_r+0x1c>
 801adf0:	42a9      	cmp	r1, r5
 801adf2:	d904      	bls.n	801adfe <_malloc_r+0x26>
 801adf4:	230c      	movs	r3, #12
 801adf6:	6033      	str	r3, [r6, #0]
 801adf8:	2000      	movs	r0, #0
 801adfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801adfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801aed4 <_malloc_r+0xfc>
 801ae02:	f000 f87b 	bl	801aefc <__malloc_lock>
 801ae06:	f8d8 3000 	ldr.w	r3, [r8]
 801ae0a:	461c      	mov	r4, r3
 801ae0c:	bb44      	cbnz	r4, 801ae60 <_malloc_r+0x88>
 801ae0e:	4629      	mov	r1, r5
 801ae10:	4630      	mov	r0, r6
 801ae12:	f7ff ffbf 	bl	801ad94 <sbrk_aligned>
 801ae16:	1c43      	adds	r3, r0, #1
 801ae18:	4604      	mov	r4, r0
 801ae1a:	d158      	bne.n	801aece <_malloc_r+0xf6>
 801ae1c:	f8d8 4000 	ldr.w	r4, [r8]
 801ae20:	4627      	mov	r7, r4
 801ae22:	2f00      	cmp	r7, #0
 801ae24:	d143      	bne.n	801aeae <_malloc_r+0xd6>
 801ae26:	2c00      	cmp	r4, #0
 801ae28:	d04b      	beq.n	801aec2 <_malloc_r+0xea>
 801ae2a:	6823      	ldr	r3, [r4, #0]
 801ae2c:	4639      	mov	r1, r7
 801ae2e:	4630      	mov	r0, r6
 801ae30:	eb04 0903 	add.w	r9, r4, r3
 801ae34:	f000 ff48 	bl	801bcc8 <_sbrk_r>
 801ae38:	4581      	cmp	r9, r0
 801ae3a:	d142      	bne.n	801aec2 <_malloc_r+0xea>
 801ae3c:	6821      	ldr	r1, [r4, #0]
 801ae3e:	1a6d      	subs	r5, r5, r1
 801ae40:	4629      	mov	r1, r5
 801ae42:	4630      	mov	r0, r6
 801ae44:	f7ff ffa6 	bl	801ad94 <sbrk_aligned>
 801ae48:	3001      	adds	r0, #1
 801ae4a:	d03a      	beq.n	801aec2 <_malloc_r+0xea>
 801ae4c:	6823      	ldr	r3, [r4, #0]
 801ae4e:	442b      	add	r3, r5
 801ae50:	6023      	str	r3, [r4, #0]
 801ae52:	f8d8 3000 	ldr.w	r3, [r8]
 801ae56:	685a      	ldr	r2, [r3, #4]
 801ae58:	bb62      	cbnz	r2, 801aeb4 <_malloc_r+0xdc>
 801ae5a:	f8c8 7000 	str.w	r7, [r8]
 801ae5e:	e00f      	b.n	801ae80 <_malloc_r+0xa8>
 801ae60:	6822      	ldr	r2, [r4, #0]
 801ae62:	1b52      	subs	r2, r2, r5
 801ae64:	d420      	bmi.n	801aea8 <_malloc_r+0xd0>
 801ae66:	2a0b      	cmp	r2, #11
 801ae68:	d917      	bls.n	801ae9a <_malloc_r+0xc2>
 801ae6a:	1961      	adds	r1, r4, r5
 801ae6c:	42a3      	cmp	r3, r4
 801ae6e:	6025      	str	r5, [r4, #0]
 801ae70:	bf18      	it	ne
 801ae72:	6059      	strne	r1, [r3, #4]
 801ae74:	6863      	ldr	r3, [r4, #4]
 801ae76:	bf08      	it	eq
 801ae78:	f8c8 1000 	streq.w	r1, [r8]
 801ae7c:	5162      	str	r2, [r4, r5]
 801ae7e:	604b      	str	r3, [r1, #4]
 801ae80:	4630      	mov	r0, r6
 801ae82:	f000 f841 	bl	801af08 <__malloc_unlock>
 801ae86:	f104 000b 	add.w	r0, r4, #11
 801ae8a:	1d23      	adds	r3, r4, #4
 801ae8c:	f020 0007 	bic.w	r0, r0, #7
 801ae90:	1ac2      	subs	r2, r0, r3
 801ae92:	bf1c      	itt	ne
 801ae94:	1a1b      	subne	r3, r3, r0
 801ae96:	50a3      	strne	r3, [r4, r2]
 801ae98:	e7af      	b.n	801adfa <_malloc_r+0x22>
 801ae9a:	6862      	ldr	r2, [r4, #4]
 801ae9c:	42a3      	cmp	r3, r4
 801ae9e:	bf0c      	ite	eq
 801aea0:	f8c8 2000 	streq.w	r2, [r8]
 801aea4:	605a      	strne	r2, [r3, #4]
 801aea6:	e7eb      	b.n	801ae80 <_malloc_r+0xa8>
 801aea8:	4623      	mov	r3, r4
 801aeaa:	6864      	ldr	r4, [r4, #4]
 801aeac:	e7ae      	b.n	801ae0c <_malloc_r+0x34>
 801aeae:	463c      	mov	r4, r7
 801aeb0:	687f      	ldr	r7, [r7, #4]
 801aeb2:	e7b6      	b.n	801ae22 <_malloc_r+0x4a>
 801aeb4:	461a      	mov	r2, r3
 801aeb6:	685b      	ldr	r3, [r3, #4]
 801aeb8:	42a3      	cmp	r3, r4
 801aeba:	d1fb      	bne.n	801aeb4 <_malloc_r+0xdc>
 801aebc:	2300      	movs	r3, #0
 801aebe:	6053      	str	r3, [r2, #4]
 801aec0:	e7de      	b.n	801ae80 <_malloc_r+0xa8>
 801aec2:	230c      	movs	r3, #12
 801aec4:	6033      	str	r3, [r6, #0]
 801aec6:	4630      	mov	r0, r6
 801aec8:	f000 f81e 	bl	801af08 <__malloc_unlock>
 801aecc:	e794      	b.n	801adf8 <_malloc_r+0x20>
 801aece:	6005      	str	r5, [r0, #0]
 801aed0:	e7d6      	b.n	801ae80 <_malloc_r+0xa8>
 801aed2:	bf00      	nop
 801aed4:	24006368 	.word	0x24006368

0801aed8 <__ascii_mbtowc>:
 801aed8:	b082      	sub	sp, #8
 801aeda:	b901      	cbnz	r1, 801aede <__ascii_mbtowc+0x6>
 801aedc:	a901      	add	r1, sp, #4
 801aede:	b142      	cbz	r2, 801aef2 <__ascii_mbtowc+0x1a>
 801aee0:	b14b      	cbz	r3, 801aef6 <__ascii_mbtowc+0x1e>
 801aee2:	7813      	ldrb	r3, [r2, #0]
 801aee4:	600b      	str	r3, [r1, #0]
 801aee6:	7812      	ldrb	r2, [r2, #0]
 801aee8:	1e10      	subs	r0, r2, #0
 801aeea:	bf18      	it	ne
 801aeec:	2001      	movne	r0, #1
 801aeee:	b002      	add	sp, #8
 801aef0:	4770      	bx	lr
 801aef2:	4610      	mov	r0, r2
 801aef4:	e7fb      	b.n	801aeee <__ascii_mbtowc+0x16>
 801aef6:	f06f 0001 	mvn.w	r0, #1
 801aefa:	e7f8      	b.n	801aeee <__ascii_mbtowc+0x16>

0801aefc <__malloc_lock>:
 801aefc:	4801      	ldr	r0, [pc, #4]	@ (801af04 <__malloc_lock+0x8>)
 801aefe:	f7fe bdc4 	b.w	8019a8a <__retarget_lock_acquire_recursive>
 801af02:	bf00      	nop
 801af04:	24006360 	.word	0x24006360

0801af08 <__malloc_unlock>:
 801af08:	4801      	ldr	r0, [pc, #4]	@ (801af10 <__malloc_unlock+0x8>)
 801af0a:	f7fe bdbf 	b.w	8019a8c <__retarget_lock_release_recursive>
 801af0e:	bf00      	nop
 801af10:	24006360 	.word	0x24006360

0801af14 <_Balloc>:
 801af14:	b570      	push	{r4, r5, r6, lr}
 801af16:	69c6      	ldr	r6, [r0, #28]
 801af18:	4604      	mov	r4, r0
 801af1a:	460d      	mov	r5, r1
 801af1c:	b976      	cbnz	r6, 801af3c <_Balloc+0x28>
 801af1e:	2010      	movs	r0, #16
 801af20:	f7ff ff30 	bl	801ad84 <malloc>
 801af24:	4602      	mov	r2, r0
 801af26:	61e0      	str	r0, [r4, #28]
 801af28:	b920      	cbnz	r0, 801af34 <_Balloc+0x20>
 801af2a:	4b18      	ldr	r3, [pc, #96]	@ (801af8c <_Balloc+0x78>)
 801af2c:	4818      	ldr	r0, [pc, #96]	@ (801af90 <_Balloc+0x7c>)
 801af2e:	216b      	movs	r1, #107	@ 0x6b
 801af30:	f000 feda 	bl	801bce8 <__assert_func>
 801af34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801af38:	6006      	str	r6, [r0, #0]
 801af3a:	60c6      	str	r6, [r0, #12]
 801af3c:	69e6      	ldr	r6, [r4, #28]
 801af3e:	68f3      	ldr	r3, [r6, #12]
 801af40:	b183      	cbz	r3, 801af64 <_Balloc+0x50>
 801af42:	69e3      	ldr	r3, [r4, #28]
 801af44:	68db      	ldr	r3, [r3, #12]
 801af46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801af4a:	b9b8      	cbnz	r0, 801af7c <_Balloc+0x68>
 801af4c:	2101      	movs	r1, #1
 801af4e:	fa01 f605 	lsl.w	r6, r1, r5
 801af52:	1d72      	adds	r2, r6, #5
 801af54:	0092      	lsls	r2, r2, #2
 801af56:	4620      	mov	r0, r4
 801af58:	f000 fee4 	bl	801bd24 <_calloc_r>
 801af5c:	b160      	cbz	r0, 801af78 <_Balloc+0x64>
 801af5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801af62:	e00e      	b.n	801af82 <_Balloc+0x6e>
 801af64:	2221      	movs	r2, #33	@ 0x21
 801af66:	2104      	movs	r1, #4
 801af68:	4620      	mov	r0, r4
 801af6a:	f000 fedb 	bl	801bd24 <_calloc_r>
 801af6e:	69e3      	ldr	r3, [r4, #28]
 801af70:	60f0      	str	r0, [r6, #12]
 801af72:	68db      	ldr	r3, [r3, #12]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d1e4      	bne.n	801af42 <_Balloc+0x2e>
 801af78:	2000      	movs	r0, #0
 801af7a:	bd70      	pop	{r4, r5, r6, pc}
 801af7c:	6802      	ldr	r2, [r0, #0]
 801af7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801af82:	2300      	movs	r3, #0
 801af84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801af88:	e7f7      	b.n	801af7a <_Balloc+0x66>
 801af8a:	bf00      	nop
 801af8c:	0801d992 	.word	0x0801d992
 801af90:	0801da72 	.word	0x0801da72

0801af94 <_Bfree>:
 801af94:	b570      	push	{r4, r5, r6, lr}
 801af96:	69c6      	ldr	r6, [r0, #28]
 801af98:	4605      	mov	r5, r0
 801af9a:	460c      	mov	r4, r1
 801af9c:	b976      	cbnz	r6, 801afbc <_Bfree+0x28>
 801af9e:	2010      	movs	r0, #16
 801afa0:	f7ff fef0 	bl	801ad84 <malloc>
 801afa4:	4602      	mov	r2, r0
 801afa6:	61e8      	str	r0, [r5, #28]
 801afa8:	b920      	cbnz	r0, 801afb4 <_Bfree+0x20>
 801afaa:	4b09      	ldr	r3, [pc, #36]	@ (801afd0 <_Bfree+0x3c>)
 801afac:	4809      	ldr	r0, [pc, #36]	@ (801afd4 <_Bfree+0x40>)
 801afae:	218f      	movs	r1, #143	@ 0x8f
 801afb0:	f000 fe9a 	bl	801bce8 <__assert_func>
 801afb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801afb8:	6006      	str	r6, [r0, #0]
 801afba:	60c6      	str	r6, [r0, #12]
 801afbc:	b13c      	cbz	r4, 801afce <_Bfree+0x3a>
 801afbe:	69eb      	ldr	r3, [r5, #28]
 801afc0:	6862      	ldr	r2, [r4, #4]
 801afc2:	68db      	ldr	r3, [r3, #12]
 801afc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801afc8:	6021      	str	r1, [r4, #0]
 801afca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801afce:	bd70      	pop	{r4, r5, r6, pc}
 801afd0:	0801d992 	.word	0x0801d992
 801afd4:	0801da72 	.word	0x0801da72

0801afd8 <__multadd>:
 801afd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afdc:	690d      	ldr	r5, [r1, #16]
 801afde:	4607      	mov	r7, r0
 801afe0:	460c      	mov	r4, r1
 801afe2:	461e      	mov	r6, r3
 801afe4:	f101 0c14 	add.w	ip, r1, #20
 801afe8:	2000      	movs	r0, #0
 801afea:	f8dc 3000 	ldr.w	r3, [ip]
 801afee:	b299      	uxth	r1, r3
 801aff0:	fb02 6101 	mla	r1, r2, r1, r6
 801aff4:	0c1e      	lsrs	r6, r3, #16
 801aff6:	0c0b      	lsrs	r3, r1, #16
 801aff8:	fb02 3306 	mla	r3, r2, r6, r3
 801affc:	b289      	uxth	r1, r1
 801affe:	3001      	adds	r0, #1
 801b000:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b004:	4285      	cmp	r5, r0
 801b006:	f84c 1b04 	str.w	r1, [ip], #4
 801b00a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b00e:	dcec      	bgt.n	801afea <__multadd+0x12>
 801b010:	b30e      	cbz	r6, 801b056 <__multadd+0x7e>
 801b012:	68a3      	ldr	r3, [r4, #8]
 801b014:	42ab      	cmp	r3, r5
 801b016:	dc19      	bgt.n	801b04c <__multadd+0x74>
 801b018:	6861      	ldr	r1, [r4, #4]
 801b01a:	4638      	mov	r0, r7
 801b01c:	3101      	adds	r1, #1
 801b01e:	f7ff ff79 	bl	801af14 <_Balloc>
 801b022:	4680      	mov	r8, r0
 801b024:	b928      	cbnz	r0, 801b032 <__multadd+0x5a>
 801b026:	4602      	mov	r2, r0
 801b028:	4b0c      	ldr	r3, [pc, #48]	@ (801b05c <__multadd+0x84>)
 801b02a:	480d      	ldr	r0, [pc, #52]	@ (801b060 <__multadd+0x88>)
 801b02c:	21ba      	movs	r1, #186	@ 0xba
 801b02e:	f000 fe5b 	bl	801bce8 <__assert_func>
 801b032:	6922      	ldr	r2, [r4, #16]
 801b034:	3202      	adds	r2, #2
 801b036:	f104 010c 	add.w	r1, r4, #12
 801b03a:	0092      	lsls	r2, r2, #2
 801b03c:	300c      	adds	r0, #12
 801b03e:	f7fe fd26 	bl	8019a8e <memcpy>
 801b042:	4621      	mov	r1, r4
 801b044:	4638      	mov	r0, r7
 801b046:	f7ff ffa5 	bl	801af94 <_Bfree>
 801b04a:	4644      	mov	r4, r8
 801b04c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b050:	3501      	adds	r5, #1
 801b052:	615e      	str	r6, [r3, #20]
 801b054:	6125      	str	r5, [r4, #16]
 801b056:	4620      	mov	r0, r4
 801b058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b05c:	0801da01 	.word	0x0801da01
 801b060:	0801da72 	.word	0x0801da72

0801b064 <__s2b>:
 801b064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b068:	460c      	mov	r4, r1
 801b06a:	4615      	mov	r5, r2
 801b06c:	461f      	mov	r7, r3
 801b06e:	2209      	movs	r2, #9
 801b070:	3308      	adds	r3, #8
 801b072:	4606      	mov	r6, r0
 801b074:	fb93 f3f2 	sdiv	r3, r3, r2
 801b078:	2100      	movs	r1, #0
 801b07a:	2201      	movs	r2, #1
 801b07c:	429a      	cmp	r2, r3
 801b07e:	db09      	blt.n	801b094 <__s2b+0x30>
 801b080:	4630      	mov	r0, r6
 801b082:	f7ff ff47 	bl	801af14 <_Balloc>
 801b086:	b940      	cbnz	r0, 801b09a <__s2b+0x36>
 801b088:	4602      	mov	r2, r0
 801b08a:	4b19      	ldr	r3, [pc, #100]	@ (801b0f0 <__s2b+0x8c>)
 801b08c:	4819      	ldr	r0, [pc, #100]	@ (801b0f4 <__s2b+0x90>)
 801b08e:	21d3      	movs	r1, #211	@ 0xd3
 801b090:	f000 fe2a 	bl	801bce8 <__assert_func>
 801b094:	0052      	lsls	r2, r2, #1
 801b096:	3101      	adds	r1, #1
 801b098:	e7f0      	b.n	801b07c <__s2b+0x18>
 801b09a:	9b08      	ldr	r3, [sp, #32]
 801b09c:	6143      	str	r3, [r0, #20]
 801b09e:	2d09      	cmp	r5, #9
 801b0a0:	f04f 0301 	mov.w	r3, #1
 801b0a4:	6103      	str	r3, [r0, #16]
 801b0a6:	dd16      	ble.n	801b0d6 <__s2b+0x72>
 801b0a8:	f104 0909 	add.w	r9, r4, #9
 801b0ac:	46c8      	mov	r8, r9
 801b0ae:	442c      	add	r4, r5
 801b0b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b0b4:	4601      	mov	r1, r0
 801b0b6:	3b30      	subs	r3, #48	@ 0x30
 801b0b8:	220a      	movs	r2, #10
 801b0ba:	4630      	mov	r0, r6
 801b0bc:	f7ff ff8c 	bl	801afd8 <__multadd>
 801b0c0:	45a0      	cmp	r8, r4
 801b0c2:	d1f5      	bne.n	801b0b0 <__s2b+0x4c>
 801b0c4:	f1a5 0408 	sub.w	r4, r5, #8
 801b0c8:	444c      	add	r4, r9
 801b0ca:	1b2d      	subs	r5, r5, r4
 801b0cc:	1963      	adds	r3, r4, r5
 801b0ce:	42bb      	cmp	r3, r7
 801b0d0:	db04      	blt.n	801b0dc <__s2b+0x78>
 801b0d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0d6:	340a      	adds	r4, #10
 801b0d8:	2509      	movs	r5, #9
 801b0da:	e7f6      	b.n	801b0ca <__s2b+0x66>
 801b0dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b0e0:	4601      	mov	r1, r0
 801b0e2:	3b30      	subs	r3, #48	@ 0x30
 801b0e4:	220a      	movs	r2, #10
 801b0e6:	4630      	mov	r0, r6
 801b0e8:	f7ff ff76 	bl	801afd8 <__multadd>
 801b0ec:	e7ee      	b.n	801b0cc <__s2b+0x68>
 801b0ee:	bf00      	nop
 801b0f0:	0801da01 	.word	0x0801da01
 801b0f4:	0801da72 	.word	0x0801da72

0801b0f8 <__hi0bits>:
 801b0f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b0fc:	4603      	mov	r3, r0
 801b0fe:	bf36      	itet	cc
 801b100:	0403      	lslcc	r3, r0, #16
 801b102:	2000      	movcs	r0, #0
 801b104:	2010      	movcc	r0, #16
 801b106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b10a:	bf3c      	itt	cc
 801b10c:	021b      	lslcc	r3, r3, #8
 801b10e:	3008      	addcc	r0, #8
 801b110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b114:	bf3c      	itt	cc
 801b116:	011b      	lslcc	r3, r3, #4
 801b118:	3004      	addcc	r0, #4
 801b11a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b11e:	bf3c      	itt	cc
 801b120:	009b      	lslcc	r3, r3, #2
 801b122:	3002      	addcc	r0, #2
 801b124:	2b00      	cmp	r3, #0
 801b126:	db05      	blt.n	801b134 <__hi0bits+0x3c>
 801b128:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b12c:	f100 0001 	add.w	r0, r0, #1
 801b130:	bf08      	it	eq
 801b132:	2020      	moveq	r0, #32
 801b134:	4770      	bx	lr

0801b136 <__lo0bits>:
 801b136:	6803      	ldr	r3, [r0, #0]
 801b138:	4602      	mov	r2, r0
 801b13a:	f013 0007 	ands.w	r0, r3, #7
 801b13e:	d00b      	beq.n	801b158 <__lo0bits+0x22>
 801b140:	07d9      	lsls	r1, r3, #31
 801b142:	d421      	bmi.n	801b188 <__lo0bits+0x52>
 801b144:	0798      	lsls	r0, r3, #30
 801b146:	bf49      	itett	mi
 801b148:	085b      	lsrmi	r3, r3, #1
 801b14a:	089b      	lsrpl	r3, r3, #2
 801b14c:	2001      	movmi	r0, #1
 801b14e:	6013      	strmi	r3, [r2, #0]
 801b150:	bf5c      	itt	pl
 801b152:	6013      	strpl	r3, [r2, #0]
 801b154:	2002      	movpl	r0, #2
 801b156:	4770      	bx	lr
 801b158:	b299      	uxth	r1, r3
 801b15a:	b909      	cbnz	r1, 801b160 <__lo0bits+0x2a>
 801b15c:	0c1b      	lsrs	r3, r3, #16
 801b15e:	2010      	movs	r0, #16
 801b160:	b2d9      	uxtb	r1, r3
 801b162:	b909      	cbnz	r1, 801b168 <__lo0bits+0x32>
 801b164:	3008      	adds	r0, #8
 801b166:	0a1b      	lsrs	r3, r3, #8
 801b168:	0719      	lsls	r1, r3, #28
 801b16a:	bf04      	itt	eq
 801b16c:	091b      	lsreq	r3, r3, #4
 801b16e:	3004      	addeq	r0, #4
 801b170:	0799      	lsls	r1, r3, #30
 801b172:	bf04      	itt	eq
 801b174:	089b      	lsreq	r3, r3, #2
 801b176:	3002      	addeq	r0, #2
 801b178:	07d9      	lsls	r1, r3, #31
 801b17a:	d403      	bmi.n	801b184 <__lo0bits+0x4e>
 801b17c:	085b      	lsrs	r3, r3, #1
 801b17e:	f100 0001 	add.w	r0, r0, #1
 801b182:	d003      	beq.n	801b18c <__lo0bits+0x56>
 801b184:	6013      	str	r3, [r2, #0]
 801b186:	4770      	bx	lr
 801b188:	2000      	movs	r0, #0
 801b18a:	4770      	bx	lr
 801b18c:	2020      	movs	r0, #32
 801b18e:	4770      	bx	lr

0801b190 <__i2b>:
 801b190:	b510      	push	{r4, lr}
 801b192:	460c      	mov	r4, r1
 801b194:	2101      	movs	r1, #1
 801b196:	f7ff febd 	bl	801af14 <_Balloc>
 801b19a:	4602      	mov	r2, r0
 801b19c:	b928      	cbnz	r0, 801b1aa <__i2b+0x1a>
 801b19e:	4b05      	ldr	r3, [pc, #20]	@ (801b1b4 <__i2b+0x24>)
 801b1a0:	4805      	ldr	r0, [pc, #20]	@ (801b1b8 <__i2b+0x28>)
 801b1a2:	f240 1145 	movw	r1, #325	@ 0x145
 801b1a6:	f000 fd9f 	bl	801bce8 <__assert_func>
 801b1aa:	2301      	movs	r3, #1
 801b1ac:	6144      	str	r4, [r0, #20]
 801b1ae:	6103      	str	r3, [r0, #16]
 801b1b0:	bd10      	pop	{r4, pc}
 801b1b2:	bf00      	nop
 801b1b4:	0801da01 	.word	0x0801da01
 801b1b8:	0801da72 	.word	0x0801da72

0801b1bc <__multiply>:
 801b1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1c0:	4614      	mov	r4, r2
 801b1c2:	690a      	ldr	r2, [r1, #16]
 801b1c4:	6923      	ldr	r3, [r4, #16]
 801b1c6:	429a      	cmp	r2, r3
 801b1c8:	bfa8      	it	ge
 801b1ca:	4623      	movge	r3, r4
 801b1cc:	460f      	mov	r7, r1
 801b1ce:	bfa4      	itt	ge
 801b1d0:	460c      	movge	r4, r1
 801b1d2:	461f      	movge	r7, r3
 801b1d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b1d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b1dc:	68a3      	ldr	r3, [r4, #8]
 801b1de:	6861      	ldr	r1, [r4, #4]
 801b1e0:	eb0a 0609 	add.w	r6, sl, r9
 801b1e4:	42b3      	cmp	r3, r6
 801b1e6:	b085      	sub	sp, #20
 801b1e8:	bfb8      	it	lt
 801b1ea:	3101      	addlt	r1, #1
 801b1ec:	f7ff fe92 	bl	801af14 <_Balloc>
 801b1f0:	b930      	cbnz	r0, 801b200 <__multiply+0x44>
 801b1f2:	4602      	mov	r2, r0
 801b1f4:	4b44      	ldr	r3, [pc, #272]	@ (801b308 <__multiply+0x14c>)
 801b1f6:	4845      	ldr	r0, [pc, #276]	@ (801b30c <__multiply+0x150>)
 801b1f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b1fc:	f000 fd74 	bl	801bce8 <__assert_func>
 801b200:	f100 0514 	add.w	r5, r0, #20
 801b204:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b208:	462b      	mov	r3, r5
 801b20a:	2200      	movs	r2, #0
 801b20c:	4543      	cmp	r3, r8
 801b20e:	d321      	bcc.n	801b254 <__multiply+0x98>
 801b210:	f107 0114 	add.w	r1, r7, #20
 801b214:	f104 0214 	add.w	r2, r4, #20
 801b218:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801b21c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801b220:	9302      	str	r3, [sp, #8]
 801b222:	1b13      	subs	r3, r2, r4
 801b224:	3b15      	subs	r3, #21
 801b226:	f023 0303 	bic.w	r3, r3, #3
 801b22a:	3304      	adds	r3, #4
 801b22c:	f104 0715 	add.w	r7, r4, #21
 801b230:	42ba      	cmp	r2, r7
 801b232:	bf38      	it	cc
 801b234:	2304      	movcc	r3, #4
 801b236:	9301      	str	r3, [sp, #4]
 801b238:	9b02      	ldr	r3, [sp, #8]
 801b23a:	9103      	str	r1, [sp, #12]
 801b23c:	428b      	cmp	r3, r1
 801b23e:	d80c      	bhi.n	801b25a <__multiply+0x9e>
 801b240:	2e00      	cmp	r6, #0
 801b242:	dd03      	ble.n	801b24c <__multiply+0x90>
 801b244:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d05b      	beq.n	801b304 <__multiply+0x148>
 801b24c:	6106      	str	r6, [r0, #16]
 801b24e:	b005      	add	sp, #20
 801b250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b254:	f843 2b04 	str.w	r2, [r3], #4
 801b258:	e7d8      	b.n	801b20c <__multiply+0x50>
 801b25a:	f8b1 a000 	ldrh.w	sl, [r1]
 801b25e:	f1ba 0f00 	cmp.w	sl, #0
 801b262:	d024      	beq.n	801b2ae <__multiply+0xf2>
 801b264:	f104 0e14 	add.w	lr, r4, #20
 801b268:	46a9      	mov	r9, r5
 801b26a:	f04f 0c00 	mov.w	ip, #0
 801b26e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b272:	f8d9 3000 	ldr.w	r3, [r9]
 801b276:	fa1f fb87 	uxth.w	fp, r7
 801b27a:	b29b      	uxth	r3, r3
 801b27c:	fb0a 330b 	mla	r3, sl, fp, r3
 801b280:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801b284:	f8d9 7000 	ldr.w	r7, [r9]
 801b288:	4463      	add	r3, ip
 801b28a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b28e:	fb0a c70b 	mla	r7, sl, fp, ip
 801b292:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801b296:	b29b      	uxth	r3, r3
 801b298:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b29c:	4572      	cmp	r2, lr
 801b29e:	f849 3b04 	str.w	r3, [r9], #4
 801b2a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b2a6:	d8e2      	bhi.n	801b26e <__multiply+0xb2>
 801b2a8:	9b01      	ldr	r3, [sp, #4]
 801b2aa:	f845 c003 	str.w	ip, [r5, r3]
 801b2ae:	9b03      	ldr	r3, [sp, #12]
 801b2b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b2b4:	3104      	adds	r1, #4
 801b2b6:	f1b9 0f00 	cmp.w	r9, #0
 801b2ba:	d021      	beq.n	801b300 <__multiply+0x144>
 801b2bc:	682b      	ldr	r3, [r5, #0]
 801b2be:	f104 0c14 	add.w	ip, r4, #20
 801b2c2:	46ae      	mov	lr, r5
 801b2c4:	f04f 0a00 	mov.w	sl, #0
 801b2c8:	f8bc b000 	ldrh.w	fp, [ip]
 801b2cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801b2d0:	fb09 770b 	mla	r7, r9, fp, r7
 801b2d4:	4457      	add	r7, sl
 801b2d6:	b29b      	uxth	r3, r3
 801b2d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b2dc:	f84e 3b04 	str.w	r3, [lr], #4
 801b2e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b2e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b2e8:	f8be 3000 	ldrh.w	r3, [lr]
 801b2ec:	fb09 330a 	mla	r3, r9, sl, r3
 801b2f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801b2f4:	4562      	cmp	r2, ip
 801b2f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b2fa:	d8e5      	bhi.n	801b2c8 <__multiply+0x10c>
 801b2fc:	9f01      	ldr	r7, [sp, #4]
 801b2fe:	51eb      	str	r3, [r5, r7]
 801b300:	3504      	adds	r5, #4
 801b302:	e799      	b.n	801b238 <__multiply+0x7c>
 801b304:	3e01      	subs	r6, #1
 801b306:	e79b      	b.n	801b240 <__multiply+0x84>
 801b308:	0801da01 	.word	0x0801da01
 801b30c:	0801da72 	.word	0x0801da72

0801b310 <__pow5mult>:
 801b310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b314:	4615      	mov	r5, r2
 801b316:	f012 0203 	ands.w	r2, r2, #3
 801b31a:	4607      	mov	r7, r0
 801b31c:	460e      	mov	r6, r1
 801b31e:	d007      	beq.n	801b330 <__pow5mult+0x20>
 801b320:	4c25      	ldr	r4, [pc, #148]	@ (801b3b8 <__pow5mult+0xa8>)
 801b322:	3a01      	subs	r2, #1
 801b324:	2300      	movs	r3, #0
 801b326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b32a:	f7ff fe55 	bl	801afd8 <__multadd>
 801b32e:	4606      	mov	r6, r0
 801b330:	10ad      	asrs	r5, r5, #2
 801b332:	d03d      	beq.n	801b3b0 <__pow5mult+0xa0>
 801b334:	69fc      	ldr	r4, [r7, #28]
 801b336:	b97c      	cbnz	r4, 801b358 <__pow5mult+0x48>
 801b338:	2010      	movs	r0, #16
 801b33a:	f7ff fd23 	bl	801ad84 <malloc>
 801b33e:	4602      	mov	r2, r0
 801b340:	61f8      	str	r0, [r7, #28]
 801b342:	b928      	cbnz	r0, 801b350 <__pow5mult+0x40>
 801b344:	4b1d      	ldr	r3, [pc, #116]	@ (801b3bc <__pow5mult+0xac>)
 801b346:	481e      	ldr	r0, [pc, #120]	@ (801b3c0 <__pow5mult+0xb0>)
 801b348:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801b34c:	f000 fccc 	bl	801bce8 <__assert_func>
 801b350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b354:	6004      	str	r4, [r0, #0]
 801b356:	60c4      	str	r4, [r0, #12]
 801b358:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801b35c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b360:	b94c      	cbnz	r4, 801b376 <__pow5mult+0x66>
 801b362:	f240 2171 	movw	r1, #625	@ 0x271
 801b366:	4638      	mov	r0, r7
 801b368:	f7ff ff12 	bl	801b190 <__i2b>
 801b36c:	2300      	movs	r3, #0
 801b36e:	f8c8 0008 	str.w	r0, [r8, #8]
 801b372:	4604      	mov	r4, r0
 801b374:	6003      	str	r3, [r0, #0]
 801b376:	f04f 0900 	mov.w	r9, #0
 801b37a:	07eb      	lsls	r3, r5, #31
 801b37c:	d50a      	bpl.n	801b394 <__pow5mult+0x84>
 801b37e:	4631      	mov	r1, r6
 801b380:	4622      	mov	r2, r4
 801b382:	4638      	mov	r0, r7
 801b384:	f7ff ff1a 	bl	801b1bc <__multiply>
 801b388:	4631      	mov	r1, r6
 801b38a:	4680      	mov	r8, r0
 801b38c:	4638      	mov	r0, r7
 801b38e:	f7ff fe01 	bl	801af94 <_Bfree>
 801b392:	4646      	mov	r6, r8
 801b394:	106d      	asrs	r5, r5, #1
 801b396:	d00b      	beq.n	801b3b0 <__pow5mult+0xa0>
 801b398:	6820      	ldr	r0, [r4, #0]
 801b39a:	b938      	cbnz	r0, 801b3ac <__pow5mult+0x9c>
 801b39c:	4622      	mov	r2, r4
 801b39e:	4621      	mov	r1, r4
 801b3a0:	4638      	mov	r0, r7
 801b3a2:	f7ff ff0b 	bl	801b1bc <__multiply>
 801b3a6:	6020      	str	r0, [r4, #0]
 801b3a8:	f8c0 9000 	str.w	r9, [r0]
 801b3ac:	4604      	mov	r4, r0
 801b3ae:	e7e4      	b.n	801b37a <__pow5mult+0x6a>
 801b3b0:	4630      	mov	r0, r6
 801b3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3b6:	bf00      	nop
 801b3b8:	0801dacc 	.word	0x0801dacc
 801b3bc:	0801d992 	.word	0x0801d992
 801b3c0:	0801da72 	.word	0x0801da72

0801b3c4 <__lshift>:
 801b3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3c8:	460c      	mov	r4, r1
 801b3ca:	6849      	ldr	r1, [r1, #4]
 801b3cc:	6923      	ldr	r3, [r4, #16]
 801b3ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b3d2:	68a3      	ldr	r3, [r4, #8]
 801b3d4:	4607      	mov	r7, r0
 801b3d6:	4691      	mov	r9, r2
 801b3d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b3dc:	f108 0601 	add.w	r6, r8, #1
 801b3e0:	42b3      	cmp	r3, r6
 801b3e2:	db0b      	blt.n	801b3fc <__lshift+0x38>
 801b3e4:	4638      	mov	r0, r7
 801b3e6:	f7ff fd95 	bl	801af14 <_Balloc>
 801b3ea:	4605      	mov	r5, r0
 801b3ec:	b948      	cbnz	r0, 801b402 <__lshift+0x3e>
 801b3ee:	4602      	mov	r2, r0
 801b3f0:	4b28      	ldr	r3, [pc, #160]	@ (801b494 <__lshift+0xd0>)
 801b3f2:	4829      	ldr	r0, [pc, #164]	@ (801b498 <__lshift+0xd4>)
 801b3f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801b3f8:	f000 fc76 	bl	801bce8 <__assert_func>
 801b3fc:	3101      	adds	r1, #1
 801b3fe:	005b      	lsls	r3, r3, #1
 801b400:	e7ee      	b.n	801b3e0 <__lshift+0x1c>
 801b402:	2300      	movs	r3, #0
 801b404:	f100 0114 	add.w	r1, r0, #20
 801b408:	f100 0210 	add.w	r2, r0, #16
 801b40c:	4618      	mov	r0, r3
 801b40e:	4553      	cmp	r3, sl
 801b410:	db33      	blt.n	801b47a <__lshift+0xb6>
 801b412:	6920      	ldr	r0, [r4, #16]
 801b414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b418:	f104 0314 	add.w	r3, r4, #20
 801b41c:	f019 091f 	ands.w	r9, r9, #31
 801b420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b424:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b428:	d02b      	beq.n	801b482 <__lshift+0xbe>
 801b42a:	f1c9 0e20 	rsb	lr, r9, #32
 801b42e:	468a      	mov	sl, r1
 801b430:	2200      	movs	r2, #0
 801b432:	6818      	ldr	r0, [r3, #0]
 801b434:	fa00 f009 	lsl.w	r0, r0, r9
 801b438:	4310      	orrs	r0, r2
 801b43a:	f84a 0b04 	str.w	r0, [sl], #4
 801b43e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b442:	459c      	cmp	ip, r3
 801b444:	fa22 f20e 	lsr.w	r2, r2, lr
 801b448:	d8f3      	bhi.n	801b432 <__lshift+0x6e>
 801b44a:	ebac 0304 	sub.w	r3, ip, r4
 801b44e:	3b15      	subs	r3, #21
 801b450:	f023 0303 	bic.w	r3, r3, #3
 801b454:	3304      	adds	r3, #4
 801b456:	f104 0015 	add.w	r0, r4, #21
 801b45a:	4584      	cmp	ip, r0
 801b45c:	bf38      	it	cc
 801b45e:	2304      	movcc	r3, #4
 801b460:	50ca      	str	r2, [r1, r3]
 801b462:	b10a      	cbz	r2, 801b468 <__lshift+0xa4>
 801b464:	f108 0602 	add.w	r6, r8, #2
 801b468:	3e01      	subs	r6, #1
 801b46a:	4638      	mov	r0, r7
 801b46c:	612e      	str	r6, [r5, #16]
 801b46e:	4621      	mov	r1, r4
 801b470:	f7ff fd90 	bl	801af94 <_Bfree>
 801b474:	4628      	mov	r0, r5
 801b476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b47a:	f842 0f04 	str.w	r0, [r2, #4]!
 801b47e:	3301      	adds	r3, #1
 801b480:	e7c5      	b.n	801b40e <__lshift+0x4a>
 801b482:	3904      	subs	r1, #4
 801b484:	f853 2b04 	ldr.w	r2, [r3], #4
 801b488:	f841 2f04 	str.w	r2, [r1, #4]!
 801b48c:	459c      	cmp	ip, r3
 801b48e:	d8f9      	bhi.n	801b484 <__lshift+0xc0>
 801b490:	e7ea      	b.n	801b468 <__lshift+0xa4>
 801b492:	bf00      	nop
 801b494:	0801da01 	.word	0x0801da01
 801b498:	0801da72 	.word	0x0801da72

0801b49c <__mcmp>:
 801b49c:	690a      	ldr	r2, [r1, #16]
 801b49e:	4603      	mov	r3, r0
 801b4a0:	6900      	ldr	r0, [r0, #16]
 801b4a2:	1a80      	subs	r0, r0, r2
 801b4a4:	b530      	push	{r4, r5, lr}
 801b4a6:	d10e      	bne.n	801b4c6 <__mcmp+0x2a>
 801b4a8:	3314      	adds	r3, #20
 801b4aa:	3114      	adds	r1, #20
 801b4ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801b4b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801b4b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b4b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b4bc:	4295      	cmp	r5, r2
 801b4be:	d003      	beq.n	801b4c8 <__mcmp+0x2c>
 801b4c0:	d205      	bcs.n	801b4ce <__mcmp+0x32>
 801b4c2:	f04f 30ff 	mov.w	r0, #4294967295
 801b4c6:	bd30      	pop	{r4, r5, pc}
 801b4c8:	42a3      	cmp	r3, r4
 801b4ca:	d3f3      	bcc.n	801b4b4 <__mcmp+0x18>
 801b4cc:	e7fb      	b.n	801b4c6 <__mcmp+0x2a>
 801b4ce:	2001      	movs	r0, #1
 801b4d0:	e7f9      	b.n	801b4c6 <__mcmp+0x2a>
	...

0801b4d4 <__mdiff>:
 801b4d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4d8:	4689      	mov	r9, r1
 801b4da:	4606      	mov	r6, r0
 801b4dc:	4611      	mov	r1, r2
 801b4de:	4648      	mov	r0, r9
 801b4e0:	4614      	mov	r4, r2
 801b4e2:	f7ff ffdb 	bl	801b49c <__mcmp>
 801b4e6:	1e05      	subs	r5, r0, #0
 801b4e8:	d112      	bne.n	801b510 <__mdiff+0x3c>
 801b4ea:	4629      	mov	r1, r5
 801b4ec:	4630      	mov	r0, r6
 801b4ee:	f7ff fd11 	bl	801af14 <_Balloc>
 801b4f2:	4602      	mov	r2, r0
 801b4f4:	b928      	cbnz	r0, 801b502 <__mdiff+0x2e>
 801b4f6:	4b3f      	ldr	r3, [pc, #252]	@ (801b5f4 <__mdiff+0x120>)
 801b4f8:	f240 2137 	movw	r1, #567	@ 0x237
 801b4fc:	483e      	ldr	r0, [pc, #248]	@ (801b5f8 <__mdiff+0x124>)
 801b4fe:	f000 fbf3 	bl	801bce8 <__assert_func>
 801b502:	2301      	movs	r3, #1
 801b504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b508:	4610      	mov	r0, r2
 801b50a:	b003      	add	sp, #12
 801b50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b510:	bfbc      	itt	lt
 801b512:	464b      	movlt	r3, r9
 801b514:	46a1      	movlt	r9, r4
 801b516:	4630      	mov	r0, r6
 801b518:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b51c:	bfba      	itte	lt
 801b51e:	461c      	movlt	r4, r3
 801b520:	2501      	movlt	r5, #1
 801b522:	2500      	movge	r5, #0
 801b524:	f7ff fcf6 	bl	801af14 <_Balloc>
 801b528:	4602      	mov	r2, r0
 801b52a:	b918      	cbnz	r0, 801b534 <__mdiff+0x60>
 801b52c:	4b31      	ldr	r3, [pc, #196]	@ (801b5f4 <__mdiff+0x120>)
 801b52e:	f240 2145 	movw	r1, #581	@ 0x245
 801b532:	e7e3      	b.n	801b4fc <__mdiff+0x28>
 801b534:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801b538:	6926      	ldr	r6, [r4, #16]
 801b53a:	60c5      	str	r5, [r0, #12]
 801b53c:	f109 0310 	add.w	r3, r9, #16
 801b540:	f109 0514 	add.w	r5, r9, #20
 801b544:	f104 0e14 	add.w	lr, r4, #20
 801b548:	f100 0b14 	add.w	fp, r0, #20
 801b54c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801b550:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801b554:	9301      	str	r3, [sp, #4]
 801b556:	46d9      	mov	r9, fp
 801b558:	f04f 0c00 	mov.w	ip, #0
 801b55c:	9b01      	ldr	r3, [sp, #4]
 801b55e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801b562:	f853 af04 	ldr.w	sl, [r3, #4]!
 801b566:	9301      	str	r3, [sp, #4]
 801b568:	fa1f f38a 	uxth.w	r3, sl
 801b56c:	4619      	mov	r1, r3
 801b56e:	b283      	uxth	r3, r0
 801b570:	1acb      	subs	r3, r1, r3
 801b572:	0c00      	lsrs	r0, r0, #16
 801b574:	4463      	add	r3, ip
 801b576:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801b57a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801b57e:	b29b      	uxth	r3, r3
 801b580:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801b584:	4576      	cmp	r6, lr
 801b586:	f849 3b04 	str.w	r3, [r9], #4
 801b58a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b58e:	d8e5      	bhi.n	801b55c <__mdiff+0x88>
 801b590:	1b33      	subs	r3, r6, r4
 801b592:	3b15      	subs	r3, #21
 801b594:	f023 0303 	bic.w	r3, r3, #3
 801b598:	3415      	adds	r4, #21
 801b59a:	3304      	adds	r3, #4
 801b59c:	42a6      	cmp	r6, r4
 801b59e:	bf38      	it	cc
 801b5a0:	2304      	movcc	r3, #4
 801b5a2:	441d      	add	r5, r3
 801b5a4:	445b      	add	r3, fp
 801b5a6:	461e      	mov	r6, r3
 801b5a8:	462c      	mov	r4, r5
 801b5aa:	4544      	cmp	r4, r8
 801b5ac:	d30e      	bcc.n	801b5cc <__mdiff+0xf8>
 801b5ae:	f108 0103 	add.w	r1, r8, #3
 801b5b2:	1b49      	subs	r1, r1, r5
 801b5b4:	f021 0103 	bic.w	r1, r1, #3
 801b5b8:	3d03      	subs	r5, #3
 801b5ba:	45a8      	cmp	r8, r5
 801b5bc:	bf38      	it	cc
 801b5be:	2100      	movcc	r1, #0
 801b5c0:	440b      	add	r3, r1
 801b5c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b5c6:	b191      	cbz	r1, 801b5ee <__mdiff+0x11a>
 801b5c8:	6117      	str	r7, [r2, #16]
 801b5ca:	e79d      	b.n	801b508 <__mdiff+0x34>
 801b5cc:	f854 1b04 	ldr.w	r1, [r4], #4
 801b5d0:	46e6      	mov	lr, ip
 801b5d2:	0c08      	lsrs	r0, r1, #16
 801b5d4:	fa1c fc81 	uxtah	ip, ip, r1
 801b5d8:	4471      	add	r1, lr
 801b5da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801b5de:	b289      	uxth	r1, r1
 801b5e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b5e4:	f846 1b04 	str.w	r1, [r6], #4
 801b5e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b5ec:	e7dd      	b.n	801b5aa <__mdiff+0xd6>
 801b5ee:	3f01      	subs	r7, #1
 801b5f0:	e7e7      	b.n	801b5c2 <__mdiff+0xee>
 801b5f2:	bf00      	nop
 801b5f4:	0801da01 	.word	0x0801da01
 801b5f8:	0801da72 	.word	0x0801da72

0801b5fc <__ulp>:
 801b5fc:	b082      	sub	sp, #8
 801b5fe:	ed8d 0b00 	vstr	d0, [sp]
 801b602:	9a01      	ldr	r2, [sp, #4]
 801b604:	4b0f      	ldr	r3, [pc, #60]	@ (801b644 <__ulp+0x48>)
 801b606:	4013      	ands	r3, r2
 801b608:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	dc08      	bgt.n	801b622 <__ulp+0x26>
 801b610:	425b      	negs	r3, r3
 801b612:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801b616:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b61a:	da04      	bge.n	801b626 <__ulp+0x2a>
 801b61c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801b620:	4113      	asrs	r3, r2
 801b622:	2200      	movs	r2, #0
 801b624:	e008      	b.n	801b638 <__ulp+0x3c>
 801b626:	f1a2 0314 	sub.w	r3, r2, #20
 801b62a:	2b1e      	cmp	r3, #30
 801b62c:	bfda      	itte	le
 801b62e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801b632:	40da      	lsrle	r2, r3
 801b634:	2201      	movgt	r2, #1
 801b636:	2300      	movs	r3, #0
 801b638:	4619      	mov	r1, r3
 801b63a:	4610      	mov	r0, r2
 801b63c:	ec41 0b10 	vmov	d0, r0, r1
 801b640:	b002      	add	sp, #8
 801b642:	4770      	bx	lr
 801b644:	7ff00000 	.word	0x7ff00000

0801b648 <__b2d>:
 801b648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b64c:	6906      	ldr	r6, [r0, #16]
 801b64e:	f100 0814 	add.w	r8, r0, #20
 801b652:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801b656:	1f37      	subs	r7, r6, #4
 801b658:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b65c:	4610      	mov	r0, r2
 801b65e:	f7ff fd4b 	bl	801b0f8 <__hi0bits>
 801b662:	f1c0 0320 	rsb	r3, r0, #32
 801b666:	280a      	cmp	r0, #10
 801b668:	600b      	str	r3, [r1, #0]
 801b66a:	491b      	ldr	r1, [pc, #108]	@ (801b6d8 <__b2d+0x90>)
 801b66c:	dc15      	bgt.n	801b69a <__b2d+0x52>
 801b66e:	f1c0 0c0b 	rsb	ip, r0, #11
 801b672:	fa22 f30c 	lsr.w	r3, r2, ip
 801b676:	45b8      	cmp	r8, r7
 801b678:	ea43 0501 	orr.w	r5, r3, r1
 801b67c:	bf34      	ite	cc
 801b67e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b682:	2300      	movcs	r3, #0
 801b684:	3015      	adds	r0, #21
 801b686:	fa02 f000 	lsl.w	r0, r2, r0
 801b68a:	fa23 f30c 	lsr.w	r3, r3, ip
 801b68e:	4303      	orrs	r3, r0
 801b690:	461c      	mov	r4, r3
 801b692:	ec45 4b10 	vmov	d0, r4, r5
 801b696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b69a:	45b8      	cmp	r8, r7
 801b69c:	bf3a      	itte	cc
 801b69e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b6a2:	f1a6 0708 	subcc.w	r7, r6, #8
 801b6a6:	2300      	movcs	r3, #0
 801b6a8:	380b      	subs	r0, #11
 801b6aa:	d012      	beq.n	801b6d2 <__b2d+0x8a>
 801b6ac:	f1c0 0120 	rsb	r1, r0, #32
 801b6b0:	fa23 f401 	lsr.w	r4, r3, r1
 801b6b4:	4082      	lsls	r2, r0
 801b6b6:	4322      	orrs	r2, r4
 801b6b8:	4547      	cmp	r7, r8
 801b6ba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801b6be:	bf8c      	ite	hi
 801b6c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801b6c4:	2200      	movls	r2, #0
 801b6c6:	4083      	lsls	r3, r0
 801b6c8:	40ca      	lsrs	r2, r1
 801b6ca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801b6ce:	4313      	orrs	r3, r2
 801b6d0:	e7de      	b.n	801b690 <__b2d+0x48>
 801b6d2:	ea42 0501 	orr.w	r5, r2, r1
 801b6d6:	e7db      	b.n	801b690 <__b2d+0x48>
 801b6d8:	3ff00000 	.word	0x3ff00000

0801b6dc <__d2b>:
 801b6dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b6e0:	460f      	mov	r7, r1
 801b6e2:	2101      	movs	r1, #1
 801b6e4:	ec59 8b10 	vmov	r8, r9, d0
 801b6e8:	4616      	mov	r6, r2
 801b6ea:	f7ff fc13 	bl	801af14 <_Balloc>
 801b6ee:	4604      	mov	r4, r0
 801b6f0:	b930      	cbnz	r0, 801b700 <__d2b+0x24>
 801b6f2:	4602      	mov	r2, r0
 801b6f4:	4b23      	ldr	r3, [pc, #140]	@ (801b784 <__d2b+0xa8>)
 801b6f6:	4824      	ldr	r0, [pc, #144]	@ (801b788 <__d2b+0xac>)
 801b6f8:	f240 310f 	movw	r1, #783	@ 0x30f
 801b6fc:	f000 faf4 	bl	801bce8 <__assert_func>
 801b700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b708:	b10d      	cbz	r5, 801b70e <__d2b+0x32>
 801b70a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b70e:	9301      	str	r3, [sp, #4]
 801b710:	f1b8 0300 	subs.w	r3, r8, #0
 801b714:	d023      	beq.n	801b75e <__d2b+0x82>
 801b716:	4668      	mov	r0, sp
 801b718:	9300      	str	r3, [sp, #0]
 801b71a:	f7ff fd0c 	bl	801b136 <__lo0bits>
 801b71e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b722:	b1d0      	cbz	r0, 801b75a <__d2b+0x7e>
 801b724:	f1c0 0320 	rsb	r3, r0, #32
 801b728:	fa02 f303 	lsl.w	r3, r2, r3
 801b72c:	430b      	orrs	r3, r1
 801b72e:	40c2      	lsrs	r2, r0
 801b730:	6163      	str	r3, [r4, #20]
 801b732:	9201      	str	r2, [sp, #4]
 801b734:	9b01      	ldr	r3, [sp, #4]
 801b736:	61a3      	str	r3, [r4, #24]
 801b738:	2b00      	cmp	r3, #0
 801b73a:	bf0c      	ite	eq
 801b73c:	2201      	moveq	r2, #1
 801b73e:	2202      	movne	r2, #2
 801b740:	6122      	str	r2, [r4, #16]
 801b742:	b1a5      	cbz	r5, 801b76e <__d2b+0x92>
 801b744:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801b748:	4405      	add	r5, r0
 801b74a:	603d      	str	r5, [r7, #0]
 801b74c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801b750:	6030      	str	r0, [r6, #0]
 801b752:	4620      	mov	r0, r4
 801b754:	b003      	add	sp, #12
 801b756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b75a:	6161      	str	r1, [r4, #20]
 801b75c:	e7ea      	b.n	801b734 <__d2b+0x58>
 801b75e:	a801      	add	r0, sp, #4
 801b760:	f7ff fce9 	bl	801b136 <__lo0bits>
 801b764:	9b01      	ldr	r3, [sp, #4]
 801b766:	6163      	str	r3, [r4, #20]
 801b768:	3020      	adds	r0, #32
 801b76a:	2201      	movs	r2, #1
 801b76c:	e7e8      	b.n	801b740 <__d2b+0x64>
 801b76e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b772:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801b776:	6038      	str	r0, [r7, #0]
 801b778:	6918      	ldr	r0, [r3, #16]
 801b77a:	f7ff fcbd 	bl	801b0f8 <__hi0bits>
 801b77e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b782:	e7e5      	b.n	801b750 <__d2b+0x74>
 801b784:	0801da01 	.word	0x0801da01
 801b788:	0801da72 	.word	0x0801da72

0801b78c <__ratio>:
 801b78c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b790:	4688      	mov	r8, r1
 801b792:	4669      	mov	r1, sp
 801b794:	4681      	mov	r9, r0
 801b796:	f7ff ff57 	bl	801b648 <__b2d>
 801b79a:	a901      	add	r1, sp, #4
 801b79c:	4640      	mov	r0, r8
 801b79e:	ec55 4b10 	vmov	r4, r5, d0
 801b7a2:	f7ff ff51 	bl	801b648 <__b2d>
 801b7a6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b7aa:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801b7ae:	1ad2      	subs	r2, r2, r3
 801b7b0:	e9dd 3100 	ldrd	r3, r1, [sp]
 801b7b4:	1a5b      	subs	r3, r3, r1
 801b7b6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b7ba:	ec57 6b10 	vmov	r6, r7, d0
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	bfd6      	itet	le
 801b7c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b7c6:	462a      	movgt	r2, r5
 801b7c8:	463a      	movle	r2, r7
 801b7ca:	46ab      	mov	fp, r5
 801b7cc:	46a2      	mov	sl, r4
 801b7ce:	bfce      	itee	gt
 801b7d0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801b7d4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801b7d8:	ee00 3a90 	vmovle	s1, r3
 801b7dc:	ec4b ab17 	vmov	d7, sl, fp
 801b7e0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801b7e4:	b003      	add	sp, #12
 801b7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7ea <__copybits>:
 801b7ea:	3901      	subs	r1, #1
 801b7ec:	b570      	push	{r4, r5, r6, lr}
 801b7ee:	1149      	asrs	r1, r1, #5
 801b7f0:	6914      	ldr	r4, [r2, #16]
 801b7f2:	3101      	adds	r1, #1
 801b7f4:	f102 0314 	add.w	r3, r2, #20
 801b7f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b7fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b800:	1f05      	subs	r5, r0, #4
 801b802:	42a3      	cmp	r3, r4
 801b804:	d30c      	bcc.n	801b820 <__copybits+0x36>
 801b806:	1aa3      	subs	r3, r4, r2
 801b808:	3b11      	subs	r3, #17
 801b80a:	f023 0303 	bic.w	r3, r3, #3
 801b80e:	3211      	adds	r2, #17
 801b810:	42a2      	cmp	r2, r4
 801b812:	bf88      	it	hi
 801b814:	2300      	movhi	r3, #0
 801b816:	4418      	add	r0, r3
 801b818:	2300      	movs	r3, #0
 801b81a:	4288      	cmp	r0, r1
 801b81c:	d305      	bcc.n	801b82a <__copybits+0x40>
 801b81e:	bd70      	pop	{r4, r5, r6, pc}
 801b820:	f853 6b04 	ldr.w	r6, [r3], #4
 801b824:	f845 6f04 	str.w	r6, [r5, #4]!
 801b828:	e7eb      	b.n	801b802 <__copybits+0x18>
 801b82a:	f840 3b04 	str.w	r3, [r0], #4
 801b82e:	e7f4      	b.n	801b81a <__copybits+0x30>

0801b830 <__any_on>:
 801b830:	f100 0214 	add.w	r2, r0, #20
 801b834:	6900      	ldr	r0, [r0, #16]
 801b836:	114b      	asrs	r3, r1, #5
 801b838:	4298      	cmp	r0, r3
 801b83a:	b510      	push	{r4, lr}
 801b83c:	db11      	blt.n	801b862 <__any_on+0x32>
 801b83e:	dd0a      	ble.n	801b856 <__any_on+0x26>
 801b840:	f011 011f 	ands.w	r1, r1, #31
 801b844:	d007      	beq.n	801b856 <__any_on+0x26>
 801b846:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b84a:	fa24 f001 	lsr.w	r0, r4, r1
 801b84e:	fa00 f101 	lsl.w	r1, r0, r1
 801b852:	428c      	cmp	r4, r1
 801b854:	d10b      	bne.n	801b86e <__any_on+0x3e>
 801b856:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b85a:	4293      	cmp	r3, r2
 801b85c:	d803      	bhi.n	801b866 <__any_on+0x36>
 801b85e:	2000      	movs	r0, #0
 801b860:	bd10      	pop	{r4, pc}
 801b862:	4603      	mov	r3, r0
 801b864:	e7f7      	b.n	801b856 <__any_on+0x26>
 801b866:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b86a:	2900      	cmp	r1, #0
 801b86c:	d0f5      	beq.n	801b85a <__any_on+0x2a>
 801b86e:	2001      	movs	r0, #1
 801b870:	e7f6      	b.n	801b860 <__any_on+0x30>

0801b872 <__ascii_wctomb>:
 801b872:	4603      	mov	r3, r0
 801b874:	4608      	mov	r0, r1
 801b876:	b141      	cbz	r1, 801b88a <__ascii_wctomb+0x18>
 801b878:	2aff      	cmp	r2, #255	@ 0xff
 801b87a:	d904      	bls.n	801b886 <__ascii_wctomb+0x14>
 801b87c:	228a      	movs	r2, #138	@ 0x8a
 801b87e:	601a      	str	r2, [r3, #0]
 801b880:	f04f 30ff 	mov.w	r0, #4294967295
 801b884:	4770      	bx	lr
 801b886:	700a      	strb	r2, [r1, #0]
 801b888:	2001      	movs	r0, #1
 801b88a:	4770      	bx	lr

0801b88c <__ssputs_r>:
 801b88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b890:	688e      	ldr	r6, [r1, #8]
 801b892:	461f      	mov	r7, r3
 801b894:	42be      	cmp	r6, r7
 801b896:	680b      	ldr	r3, [r1, #0]
 801b898:	4682      	mov	sl, r0
 801b89a:	460c      	mov	r4, r1
 801b89c:	4690      	mov	r8, r2
 801b89e:	d82d      	bhi.n	801b8fc <__ssputs_r+0x70>
 801b8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b8a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b8a8:	d026      	beq.n	801b8f8 <__ssputs_r+0x6c>
 801b8aa:	6965      	ldr	r5, [r4, #20]
 801b8ac:	6909      	ldr	r1, [r1, #16]
 801b8ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b8b2:	eba3 0901 	sub.w	r9, r3, r1
 801b8b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b8ba:	1c7b      	adds	r3, r7, #1
 801b8bc:	444b      	add	r3, r9
 801b8be:	106d      	asrs	r5, r5, #1
 801b8c0:	429d      	cmp	r5, r3
 801b8c2:	bf38      	it	cc
 801b8c4:	461d      	movcc	r5, r3
 801b8c6:	0553      	lsls	r3, r2, #21
 801b8c8:	d527      	bpl.n	801b91a <__ssputs_r+0x8e>
 801b8ca:	4629      	mov	r1, r5
 801b8cc:	f7ff fa84 	bl	801add8 <_malloc_r>
 801b8d0:	4606      	mov	r6, r0
 801b8d2:	b360      	cbz	r0, 801b92e <__ssputs_r+0xa2>
 801b8d4:	6921      	ldr	r1, [r4, #16]
 801b8d6:	464a      	mov	r2, r9
 801b8d8:	f7fe f8d9 	bl	8019a8e <memcpy>
 801b8dc:	89a3      	ldrh	r3, [r4, #12]
 801b8de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b8e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b8e6:	81a3      	strh	r3, [r4, #12]
 801b8e8:	6126      	str	r6, [r4, #16]
 801b8ea:	6165      	str	r5, [r4, #20]
 801b8ec:	444e      	add	r6, r9
 801b8ee:	eba5 0509 	sub.w	r5, r5, r9
 801b8f2:	6026      	str	r6, [r4, #0]
 801b8f4:	60a5      	str	r5, [r4, #8]
 801b8f6:	463e      	mov	r6, r7
 801b8f8:	42be      	cmp	r6, r7
 801b8fa:	d900      	bls.n	801b8fe <__ssputs_r+0x72>
 801b8fc:	463e      	mov	r6, r7
 801b8fe:	6820      	ldr	r0, [r4, #0]
 801b900:	4632      	mov	r2, r6
 801b902:	4641      	mov	r1, r8
 801b904:	f000 f9c6 	bl	801bc94 <memmove>
 801b908:	68a3      	ldr	r3, [r4, #8]
 801b90a:	1b9b      	subs	r3, r3, r6
 801b90c:	60a3      	str	r3, [r4, #8]
 801b90e:	6823      	ldr	r3, [r4, #0]
 801b910:	4433      	add	r3, r6
 801b912:	6023      	str	r3, [r4, #0]
 801b914:	2000      	movs	r0, #0
 801b916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b91a:	462a      	mov	r2, r5
 801b91c:	f000 fa16 	bl	801bd4c <_realloc_r>
 801b920:	4606      	mov	r6, r0
 801b922:	2800      	cmp	r0, #0
 801b924:	d1e0      	bne.n	801b8e8 <__ssputs_r+0x5c>
 801b926:	6921      	ldr	r1, [r4, #16]
 801b928:	4650      	mov	r0, sl
 801b92a:	f7fe fea7 	bl	801a67c <_free_r>
 801b92e:	230c      	movs	r3, #12
 801b930:	f8ca 3000 	str.w	r3, [sl]
 801b934:	89a3      	ldrh	r3, [r4, #12]
 801b936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b93a:	81a3      	strh	r3, [r4, #12]
 801b93c:	f04f 30ff 	mov.w	r0, #4294967295
 801b940:	e7e9      	b.n	801b916 <__ssputs_r+0x8a>
	...

0801b944 <_svfiprintf_r>:
 801b944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b948:	4698      	mov	r8, r3
 801b94a:	898b      	ldrh	r3, [r1, #12]
 801b94c:	061b      	lsls	r3, r3, #24
 801b94e:	b09d      	sub	sp, #116	@ 0x74
 801b950:	4607      	mov	r7, r0
 801b952:	460d      	mov	r5, r1
 801b954:	4614      	mov	r4, r2
 801b956:	d510      	bpl.n	801b97a <_svfiprintf_r+0x36>
 801b958:	690b      	ldr	r3, [r1, #16]
 801b95a:	b973      	cbnz	r3, 801b97a <_svfiprintf_r+0x36>
 801b95c:	2140      	movs	r1, #64	@ 0x40
 801b95e:	f7ff fa3b 	bl	801add8 <_malloc_r>
 801b962:	6028      	str	r0, [r5, #0]
 801b964:	6128      	str	r0, [r5, #16]
 801b966:	b930      	cbnz	r0, 801b976 <_svfiprintf_r+0x32>
 801b968:	230c      	movs	r3, #12
 801b96a:	603b      	str	r3, [r7, #0]
 801b96c:	f04f 30ff 	mov.w	r0, #4294967295
 801b970:	b01d      	add	sp, #116	@ 0x74
 801b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b976:	2340      	movs	r3, #64	@ 0x40
 801b978:	616b      	str	r3, [r5, #20]
 801b97a:	2300      	movs	r3, #0
 801b97c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b97e:	2320      	movs	r3, #32
 801b980:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b984:	f8cd 800c 	str.w	r8, [sp, #12]
 801b988:	2330      	movs	r3, #48	@ 0x30
 801b98a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801bb28 <_svfiprintf_r+0x1e4>
 801b98e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b992:	f04f 0901 	mov.w	r9, #1
 801b996:	4623      	mov	r3, r4
 801b998:	469a      	mov	sl, r3
 801b99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b99e:	b10a      	cbz	r2, 801b9a4 <_svfiprintf_r+0x60>
 801b9a0:	2a25      	cmp	r2, #37	@ 0x25
 801b9a2:	d1f9      	bne.n	801b998 <_svfiprintf_r+0x54>
 801b9a4:	ebba 0b04 	subs.w	fp, sl, r4
 801b9a8:	d00b      	beq.n	801b9c2 <_svfiprintf_r+0x7e>
 801b9aa:	465b      	mov	r3, fp
 801b9ac:	4622      	mov	r2, r4
 801b9ae:	4629      	mov	r1, r5
 801b9b0:	4638      	mov	r0, r7
 801b9b2:	f7ff ff6b 	bl	801b88c <__ssputs_r>
 801b9b6:	3001      	adds	r0, #1
 801b9b8:	f000 80a7 	beq.w	801bb0a <_svfiprintf_r+0x1c6>
 801b9bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b9be:	445a      	add	r2, fp
 801b9c0:	9209      	str	r2, [sp, #36]	@ 0x24
 801b9c2:	f89a 3000 	ldrb.w	r3, [sl]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	f000 809f 	beq.w	801bb0a <_svfiprintf_r+0x1c6>
 801b9cc:	2300      	movs	r3, #0
 801b9ce:	f04f 32ff 	mov.w	r2, #4294967295
 801b9d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b9d6:	f10a 0a01 	add.w	sl, sl, #1
 801b9da:	9304      	str	r3, [sp, #16]
 801b9dc:	9307      	str	r3, [sp, #28]
 801b9de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b9e2:	931a      	str	r3, [sp, #104]	@ 0x68
 801b9e4:	4654      	mov	r4, sl
 801b9e6:	2205      	movs	r2, #5
 801b9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9ec:	484e      	ldr	r0, [pc, #312]	@ (801bb28 <_svfiprintf_r+0x1e4>)
 801b9ee:	f7e4 fc9f 	bl	8000330 <memchr>
 801b9f2:	9a04      	ldr	r2, [sp, #16]
 801b9f4:	b9d8      	cbnz	r0, 801ba2e <_svfiprintf_r+0xea>
 801b9f6:	06d0      	lsls	r0, r2, #27
 801b9f8:	bf44      	itt	mi
 801b9fa:	2320      	movmi	r3, #32
 801b9fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ba00:	0711      	lsls	r1, r2, #28
 801ba02:	bf44      	itt	mi
 801ba04:	232b      	movmi	r3, #43	@ 0x2b
 801ba06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ba0a:	f89a 3000 	ldrb.w	r3, [sl]
 801ba0e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba10:	d015      	beq.n	801ba3e <_svfiprintf_r+0xfa>
 801ba12:	9a07      	ldr	r2, [sp, #28]
 801ba14:	4654      	mov	r4, sl
 801ba16:	2000      	movs	r0, #0
 801ba18:	f04f 0c0a 	mov.w	ip, #10
 801ba1c:	4621      	mov	r1, r4
 801ba1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ba22:	3b30      	subs	r3, #48	@ 0x30
 801ba24:	2b09      	cmp	r3, #9
 801ba26:	d94b      	bls.n	801bac0 <_svfiprintf_r+0x17c>
 801ba28:	b1b0      	cbz	r0, 801ba58 <_svfiprintf_r+0x114>
 801ba2a:	9207      	str	r2, [sp, #28]
 801ba2c:	e014      	b.n	801ba58 <_svfiprintf_r+0x114>
 801ba2e:	eba0 0308 	sub.w	r3, r0, r8
 801ba32:	fa09 f303 	lsl.w	r3, r9, r3
 801ba36:	4313      	orrs	r3, r2
 801ba38:	9304      	str	r3, [sp, #16]
 801ba3a:	46a2      	mov	sl, r4
 801ba3c:	e7d2      	b.n	801b9e4 <_svfiprintf_r+0xa0>
 801ba3e:	9b03      	ldr	r3, [sp, #12]
 801ba40:	1d19      	adds	r1, r3, #4
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	9103      	str	r1, [sp, #12]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	bfbb      	ittet	lt
 801ba4a:	425b      	neglt	r3, r3
 801ba4c:	f042 0202 	orrlt.w	r2, r2, #2
 801ba50:	9307      	strge	r3, [sp, #28]
 801ba52:	9307      	strlt	r3, [sp, #28]
 801ba54:	bfb8      	it	lt
 801ba56:	9204      	strlt	r2, [sp, #16]
 801ba58:	7823      	ldrb	r3, [r4, #0]
 801ba5a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba5c:	d10a      	bne.n	801ba74 <_svfiprintf_r+0x130>
 801ba5e:	7863      	ldrb	r3, [r4, #1]
 801ba60:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba62:	d132      	bne.n	801baca <_svfiprintf_r+0x186>
 801ba64:	9b03      	ldr	r3, [sp, #12]
 801ba66:	1d1a      	adds	r2, r3, #4
 801ba68:	681b      	ldr	r3, [r3, #0]
 801ba6a:	9203      	str	r2, [sp, #12]
 801ba6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba70:	3402      	adds	r4, #2
 801ba72:	9305      	str	r3, [sp, #20]
 801ba74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801bb38 <_svfiprintf_r+0x1f4>
 801ba78:	7821      	ldrb	r1, [r4, #0]
 801ba7a:	2203      	movs	r2, #3
 801ba7c:	4650      	mov	r0, sl
 801ba7e:	f7e4 fc57 	bl	8000330 <memchr>
 801ba82:	b138      	cbz	r0, 801ba94 <_svfiprintf_r+0x150>
 801ba84:	9b04      	ldr	r3, [sp, #16]
 801ba86:	eba0 000a 	sub.w	r0, r0, sl
 801ba8a:	2240      	movs	r2, #64	@ 0x40
 801ba8c:	4082      	lsls	r2, r0
 801ba8e:	4313      	orrs	r3, r2
 801ba90:	3401      	adds	r4, #1
 801ba92:	9304      	str	r3, [sp, #16]
 801ba94:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba98:	4824      	ldr	r0, [pc, #144]	@ (801bb2c <_svfiprintf_r+0x1e8>)
 801ba9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ba9e:	2206      	movs	r2, #6
 801baa0:	f7e4 fc46 	bl	8000330 <memchr>
 801baa4:	2800      	cmp	r0, #0
 801baa6:	d036      	beq.n	801bb16 <_svfiprintf_r+0x1d2>
 801baa8:	4b21      	ldr	r3, [pc, #132]	@ (801bb30 <_svfiprintf_r+0x1ec>)
 801baaa:	bb1b      	cbnz	r3, 801baf4 <_svfiprintf_r+0x1b0>
 801baac:	9b03      	ldr	r3, [sp, #12]
 801baae:	3307      	adds	r3, #7
 801bab0:	f023 0307 	bic.w	r3, r3, #7
 801bab4:	3308      	adds	r3, #8
 801bab6:	9303      	str	r3, [sp, #12]
 801bab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801baba:	4433      	add	r3, r6
 801babc:	9309      	str	r3, [sp, #36]	@ 0x24
 801babe:	e76a      	b.n	801b996 <_svfiprintf_r+0x52>
 801bac0:	fb0c 3202 	mla	r2, ip, r2, r3
 801bac4:	460c      	mov	r4, r1
 801bac6:	2001      	movs	r0, #1
 801bac8:	e7a8      	b.n	801ba1c <_svfiprintf_r+0xd8>
 801baca:	2300      	movs	r3, #0
 801bacc:	3401      	adds	r4, #1
 801bace:	9305      	str	r3, [sp, #20]
 801bad0:	4619      	mov	r1, r3
 801bad2:	f04f 0c0a 	mov.w	ip, #10
 801bad6:	4620      	mov	r0, r4
 801bad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801badc:	3a30      	subs	r2, #48	@ 0x30
 801bade:	2a09      	cmp	r2, #9
 801bae0:	d903      	bls.n	801baea <_svfiprintf_r+0x1a6>
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d0c6      	beq.n	801ba74 <_svfiprintf_r+0x130>
 801bae6:	9105      	str	r1, [sp, #20]
 801bae8:	e7c4      	b.n	801ba74 <_svfiprintf_r+0x130>
 801baea:	fb0c 2101 	mla	r1, ip, r1, r2
 801baee:	4604      	mov	r4, r0
 801baf0:	2301      	movs	r3, #1
 801baf2:	e7f0      	b.n	801bad6 <_svfiprintf_r+0x192>
 801baf4:	ab03      	add	r3, sp, #12
 801baf6:	9300      	str	r3, [sp, #0]
 801baf8:	462a      	mov	r2, r5
 801bafa:	4b0e      	ldr	r3, [pc, #56]	@ (801bb34 <_svfiprintf_r+0x1f0>)
 801bafc:	a904      	add	r1, sp, #16
 801bafe:	4638      	mov	r0, r7
 801bb00:	f7fd fa5a 	bl	8018fb8 <_printf_float>
 801bb04:	1c42      	adds	r2, r0, #1
 801bb06:	4606      	mov	r6, r0
 801bb08:	d1d6      	bne.n	801bab8 <_svfiprintf_r+0x174>
 801bb0a:	89ab      	ldrh	r3, [r5, #12]
 801bb0c:	065b      	lsls	r3, r3, #25
 801bb0e:	f53f af2d 	bmi.w	801b96c <_svfiprintf_r+0x28>
 801bb12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bb14:	e72c      	b.n	801b970 <_svfiprintf_r+0x2c>
 801bb16:	ab03      	add	r3, sp, #12
 801bb18:	9300      	str	r3, [sp, #0]
 801bb1a:	462a      	mov	r2, r5
 801bb1c:	4b05      	ldr	r3, [pc, #20]	@ (801bb34 <_svfiprintf_r+0x1f0>)
 801bb1e:	a904      	add	r1, sp, #16
 801bb20:	4638      	mov	r0, r7
 801bb22:	f7fd fcd1 	bl	80194c8 <_printf_i>
 801bb26:	e7ed      	b.n	801bb04 <_svfiprintf_r+0x1c0>
 801bb28:	0801dbc8 	.word	0x0801dbc8
 801bb2c:	0801dbd2 	.word	0x0801dbd2
 801bb30:	08018fb9 	.word	0x08018fb9
 801bb34:	0801b88d 	.word	0x0801b88d
 801bb38:	0801dbce 	.word	0x0801dbce

0801bb3c <__sflush_r>:
 801bb3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb44:	0716      	lsls	r6, r2, #28
 801bb46:	4605      	mov	r5, r0
 801bb48:	460c      	mov	r4, r1
 801bb4a:	d454      	bmi.n	801bbf6 <__sflush_r+0xba>
 801bb4c:	684b      	ldr	r3, [r1, #4]
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	dc02      	bgt.n	801bb58 <__sflush_r+0x1c>
 801bb52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	dd48      	ble.n	801bbea <__sflush_r+0xae>
 801bb58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bb5a:	2e00      	cmp	r6, #0
 801bb5c:	d045      	beq.n	801bbea <__sflush_r+0xae>
 801bb5e:	2300      	movs	r3, #0
 801bb60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801bb64:	682f      	ldr	r7, [r5, #0]
 801bb66:	6a21      	ldr	r1, [r4, #32]
 801bb68:	602b      	str	r3, [r5, #0]
 801bb6a:	d030      	beq.n	801bbce <__sflush_r+0x92>
 801bb6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bb6e:	89a3      	ldrh	r3, [r4, #12]
 801bb70:	0759      	lsls	r1, r3, #29
 801bb72:	d505      	bpl.n	801bb80 <__sflush_r+0x44>
 801bb74:	6863      	ldr	r3, [r4, #4]
 801bb76:	1ad2      	subs	r2, r2, r3
 801bb78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bb7a:	b10b      	cbz	r3, 801bb80 <__sflush_r+0x44>
 801bb7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bb7e:	1ad2      	subs	r2, r2, r3
 801bb80:	2300      	movs	r3, #0
 801bb82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bb84:	6a21      	ldr	r1, [r4, #32]
 801bb86:	4628      	mov	r0, r5
 801bb88:	47b0      	blx	r6
 801bb8a:	1c43      	adds	r3, r0, #1
 801bb8c:	89a3      	ldrh	r3, [r4, #12]
 801bb8e:	d106      	bne.n	801bb9e <__sflush_r+0x62>
 801bb90:	6829      	ldr	r1, [r5, #0]
 801bb92:	291d      	cmp	r1, #29
 801bb94:	d82b      	bhi.n	801bbee <__sflush_r+0xb2>
 801bb96:	4a2a      	ldr	r2, [pc, #168]	@ (801bc40 <__sflush_r+0x104>)
 801bb98:	410a      	asrs	r2, r1
 801bb9a:	07d6      	lsls	r6, r2, #31
 801bb9c:	d427      	bmi.n	801bbee <__sflush_r+0xb2>
 801bb9e:	2200      	movs	r2, #0
 801bba0:	6062      	str	r2, [r4, #4]
 801bba2:	04d9      	lsls	r1, r3, #19
 801bba4:	6922      	ldr	r2, [r4, #16]
 801bba6:	6022      	str	r2, [r4, #0]
 801bba8:	d504      	bpl.n	801bbb4 <__sflush_r+0x78>
 801bbaa:	1c42      	adds	r2, r0, #1
 801bbac:	d101      	bne.n	801bbb2 <__sflush_r+0x76>
 801bbae:	682b      	ldr	r3, [r5, #0]
 801bbb0:	b903      	cbnz	r3, 801bbb4 <__sflush_r+0x78>
 801bbb2:	6560      	str	r0, [r4, #84]	@ 0x54
 801bbb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bbb6:	602f      	str	r7, [r5, #0]
 801bbb8:	b1b9      	cbz	r1, 801bbea <__sflush_r+0xae>
 801bbba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bbbe:	4299      	cmp	r1, r3
 801bbc0:	d002      	beq.n	801bbc8 <__sflush_r+0x8c>
 801bbc2:	4628      	mov	r0, r5
 801bbc4:	f7fe fd5a 	bl	801a67c <_free_r>
 801bbc8:	2300      	movs	r3, #0
 801bbca:	6363      	str	r3, [r4, #52]	@ 0x34
 801bbcc:	e00d      	b.n	801bbea <__sflush_r+0xae>
 801bbce:	2301      	movs	r3, #1
 801bbd0:	4628      	mov	r0, r5
 801bbd2:	47b0      	blx	r6
 801bbd4:	4602      	mov	r2, r0
 801bbd6:	1c50      	adds	r0, r2, #1
 801bbd8:	d1c9      	bne.n	801bb6e <__sflush_r+0x32>
 801bbda:	682b      	ldr	r3, [r5, #0]
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	d0c6      	beq.n	801bb6e <__sflush_r+0x32>
 801bbe0:	2b1d      	cmp	r3, #29
 801bbe2:	d001      	beq.n	801bbe8 <__sflush_r+0xac>
 801bbe4:	2b16      	cmp	r3, #22
 801bbe6:	d11e      	bne.n	801bc26 <__sflush_r+0xea>
 801bbe8:	602f      	str	r7, [r5, #0]
 801bbea:	2000      	movs	r0, #0
 801bbec:	e022      	b.n	801bc34 <__sflush_r+0xf8>
 801bbee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bbf2:	b21b      	sxth	r3, r3
 801bbf4:	e01b      	b.n	801bc2e <__sflush_r+0xf2>
 801bbf6:	690f      	ldr	r7, [r1, #16]
 801bbf8:	2f00      	cmp	r7, #0
 801bbfa:	d0f6      	beq.n	801bbea <__sflush_r+0xae>
 801bbfc:	0793      	lsls	r3, r2, #30
 801bbfe:	680e      	ldr	r6, [r1, #0]
 801bc00:	bf08      	it	eq
 801bc02:	694b      	ldreq	r3, [r1, #20]
 801bc04:	600f      	str	r7, [r1, #0]
 801bc06:	bf18      	it	ne
 801bc08:	2300      	movne	r3, #0
 801bc0a:	eba6 0807 	sub.w	r8, r6, r7
 801bc0e:	608b      	str	r3, [r1, #8]
 801bc10:	f1b8 0f00 	cmp.w	r8, #0
 801bc14:	dde9      	ble.n	801bbea <__sflush_r+0xae>
 801bc16:	6a21      	ldr	r1, [r4, #32]
 801bc18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bc1a:	4643      	mov	r3, r8
 801bc1c:	463a      	mov	r2, r7
 801bc1e:	4628      	mov	r0, r5
 801bc20:	47b0      	blx	r6
 801bc22:	2800      	cmp	r0, #0
 801bc24:	dc08      	bgt.n	801bc38 <__sflush_r+0xfc>
 801bc26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bc2e:	81a3      	strh	r3, [r4, #12]
 801bc30:	f04f 30ff 	mov.w	r0, #4294967295
 801bc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc38:	4407      	add	r7, r0
 801bc3a:	eba8 0800 	sub.w	r8, r8, r0
 801bc3e:	e7e7      	b.n	801bc10 <__sflush_r+0xd4>
 801bc40:	dfbffffe 	.word	0xdfbffffe

0801bc44 <_fflush_r>:
 801bc44:	b538      	push	{r3, r4, r5, lr}
 801bc46:	690b      	ldr	r3, [r1, #16]
 801bc48:	4605      	mov	r5, r0
 801bc4a:	460c      	mov	r4, r1
 801bc4c:	b913      	cbnz	r3, 801bc54 <_fflush_r+0x10>
 801bc4e:	2500      	movs	r5, #0
 801bc50:	4628      	mov	r0, r5
 801bc52:	bd38      	pop	{r3, r4, r5, pc}
 801bc54:	b118      	cbz	r0, 801bc5e <_fflush_r+0x1a>
 801bc56:	6a03      	ldr	r3, [r0, #32]
 801bc58:	b90b      	cbnz	r3, 801bc5e <_fflush_r+0x1a>
 801bc5a:	f7fd fde1 	bl	8019820 <__sinit>
 801bc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d0f3      	beq.n	801bc4e <_fflush_r+0xa>
 801bc66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bc68:	07d0      	lsls	r0, r2, #31
 801bc6a:	d404      	bmi.n	801bc76 <_fflush_r+0x32>
 801bc6c:	0599      	lsls	r1, r3, #22
 801bc6e:	d402      	bmi.n	801bc76 <_fflush_r+0x32>
 801bc70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bc72:	f7fd ff0a 	bl	8019a8a <__retarget_lock_acquire_recursive>
 801bc76:	4628      	mov	r0, r5
 801bc78:	4621      	mov	r1, r4
 801bc7a:	f7ff ff5f 	bl	801bb3c <__sflush_r>
 801bc7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bc80:	07da      	lsls	r2, r3, #31
 801bc82:	4605      	mov	r5, r0
 801bc84:	d4e4      	bmi.n	801bc50 <_fflush_r+0xc>
 801bc86:	89a3      	ldrh	r3, [r4, #12]
 801bc88:	059b      	lsls	r3, r3, #22
 801bc8a:	d4e1      	bmi.n	801bc50 <_fflush_r+0xc>
 801bc8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bc8e:	f7fd fefd 	bl	8019a8c <__retarget_lock_release_recursive>
 801bc92:	e7dd      	b.n	801bc50 <_fflush_r+0xc>

0801bc94 <memmove>:
 801bc94:	4288      	cmp	r0, r1
 801bc96:	b510      	push	{r4, lr}
 801bc98:	eb01 0402 	add.w	r4, r1, r2
 801bc9c:	d902      	bls.n	801bca4 <memmove+0x10>
 801bc9e:	4284      	cmp	r4, r0
 801bca0:	4623      	mov	r3, r4
 801bca2:	d807      	bhi.n	801bcb4 <memmove+0x20>
 801bca4:	1e43      	subs	r3, r0, #1
 801bca6:	42a1      	cmp	r1, r4
 801bca8:	d008      	beq.n	801bcbc <memmove+0x28>
 801bcaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bcae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bcb2:	e7f8      	b.n	801bca6 <memmove+0x12>
 801bcb4:	4402      	add	r2, r0
 801bcb6:	4601      	mov	r1, r0
 801bcb8:	428a      	cmp	r2, r1
 801bcba:	d100      	bne.n	801bcbe <memmove+0x2a>
 801bcbc:	bd10      	pop	{r4, pc}
 801bcbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bcc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bcc6:	e7f7      	b.n	801bcb8 <memmove+0x24>

0801bcc8 <_sbrk_r>:
 801bcc8:	b538      	push	{r3, r4, r5, lr}
 801bcca:	4d06      	ldr	r5, [pc, #24]	@ (801bce4 <_sbrk_r+0x1c>)
 801bccc:	2300      	movs	r3, #0
 801bcce:	4604      	mov	r4, r0
 801bcd0:	4608      	mov	r0, r1
 801bcd2:	602b      	str	r3, [r5, #0]
 801bcd4:	f7e7 f870 	bl	8002db8 <_sbrk>
 801bcd8:	1c43      	adds	r3, r0, #1
 801bcda:	d102      	bne.n	801bce2 <_sbrk_r+0x1a>
 801bcdc:	682b      	ldr	r3, [r5, #0]
 801bcde:	b103      	cbz	r3, 801bce2 <_sbrk_r+0x1a>
 801bce0:	6023      	str	r3, [r4, #0]
 801bce2:	bd38      	pop	{r3, r4, r5, pc}
 801bce4:	2400635c 	.word	0x2400635c

0801bce8 <__assert_func>:
 801bce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bcea:	4614      	mov	r4, r2
 801bcec:	461a      	mov	r2, r3
 801bcee:	4b09      	ldr	r3, [pc, #36]	@ (801bd14 <__assert_func+0x2c>)
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	4605      	mov	r5, r0
 801bcf4:	68d8      	ldr	r0, [r3, #12]
 801bcf6:	b954      	cbnz	r4, 801bd0e <__assert_func+0x26>
 801bcf8:	4b07      	ldr	r3, [pc, #28]	@ (801bd18 <__assert_func+0x30>)
 801bcfa:	461c      	mov	r4, r3
 801bcfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bd00:	9100      	str	r1, [sp, #0]
 801bd02:	462b      	mov	r3, r5
 801bd04:	4905      	ldr	r1, [pc, #20]	@ (801bd1c <__assert_func+0x34>)
 801bd06:	f000 f84f 	bl	801bda8 <fiprintf>
 801bd0a:	f000 f85f 	bl	801bdcc <abort>
 801bd0e:	4b04      	ldr	r3, [pc, #16]	@ (801bd20 <__assert_func+0x38>)
 801bd10:	e7f4      	b.n	801bcfc <__assert_func+0x14>
 801bd12:	bf00      	nop
 801bd14:	2400027c 	.word	0x2400027c
 801bd18:	0801dc14 	.word	0x0801dc14
 801bd1c:	0801dbe6 	.word	0x0801dbe6
 801bd20:	0801dbd9 	.word	0x0801dbd9

0801bd24 <_calloc_r>:
 801bd24:	b570      	push	{r4, r5, r6, lr}
 801bd26:	fba1 5402 	umull	r5, r4, r1, r2
 801bd2a:	b93c      	cbnz	r4, 801bd3c <_calloc_r+0x18>
 801bd2c:	4629      	mov	r1, r5
 801bd2e:	f7ff f853 	bl	801add8 <_malloc_r>
 801bd32:	4606      	mov	r6, r0
 801bd34:	b928      	cbnz	r0, 801bd42 <_calloc_r+0x1e>
 801bd36:	2600      	movs	r6, #0
 801bd38:	4630      	mov	r0, r6
 801bd3a:	bd70      	pop	{r4, r5, r6, pc}
 801bd3c:	220c      	movs	r2, #12
 801bd3e:	6002      	str	r2, [r0, #0]
 801bd40:	e7f9      	b.n	801bd36 <_calloc_r+0x12>
 801bd42:	462a      	mov	r2, r5
 801bd44:	4621      	mov	r1, r4
 801bd46:	f7fd fe04 	bl	8019952 <memset>
 801bd4a:	e7f5      	b.n	801bd38 <_calloc_r+0x14>

0801bd4c <_realloc_r>:
 801bd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd50:	4680      	mov	r8, r0
 801bd52:	4615      	mov	r5, r2
 801bd54:	460c      	mov	r4, r1
 801bd56:	b921      	cbnz	r1, 801bd62 <_realloc_r+0x16>
 801bd58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd5c:	4611      	mov	r1, r2
 801bd5e:	f7ff b83b 	b.w	801add8 <_malloc_r>
 801bd62:	b92a      	cbnz	r2, 801bd70 <_realloc_r+0x24>
 801bd64:	f7fe fc8a 	bl	801a67c <_free_r>
 801bd68:	2400      	movs	r4, #0
 801bd6a:	4620      	mov	r0, r4
 801bd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd70:	f000 f833 	bl	801bdda <_malloc_usable_size_r>
 801bd74:	4285      	cmp	r5, r0
 801bd76:	4606      	mov	r6, r0
 801bd78:	d802      	bhi.n	801bd80 <_realloc_r+0x34>
 801bd7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801bd7e:	d8f4      	bhi.n	801bd6a <_realloc_r+0x1e>
 801bd80:	4629      	mov	r1, r5
 801bd82:	4640      	mov	r0, r8
 801bd84:	f7ff f828 	bl	801add8 <_malloc_r>
 801bd88:	4607      	mov	r7, r0
 801bd8a:	2800      	cmp	r0, #0
 801bd8c:	d0ec      	beq.n	801bd68 <_realloc_r+0x1c>
 801bd8e:	42b5      	cmp	r5, r6
 801bd90:	462a      	mov	r2, r5
 801bd92:	4621      	mov	r1, r4
 801bd94:	bf28      	it	cs
 801bd96:	4632      	movcs	r2, r6
 801bd98:	f7fd fe79 	bl	8019a8e <memcpy>
 801bd9c:	4621      	mov	r1, r4
 801bd9e:	4640      	mov	r0, r8
 801bda0:	f7fe fc6c 	bl	801a67c <_free_r>
 801bda4:	463c      	mov	r4, r7
 801bda6:	e7e0      	b.n	801bd6a <_realloc_r+0x1e>

0801bda8 <fiprintf>:
 801bda8:	b40e      	push	{r1, r2, r3}
 801bdaa:	b503      	push	{r0, r1, lr}
 801bdac:	4601      	mov	r1, r0
 801bdae:	ab03      	add	r3, sp, #12
 801bdb0:	4805      	ldr	r0, [pc, #20]	@ (801bdc8 <fiprintf+0x20>)
 801bdb2:	f853 2b04 	ldr.w	r2, [r3], #4
 801bdb6:	6800      	ldr	r0, [r0, #0]
 801bdb8:	9301      	str	r3, [sp, #4]
 801bdba:	f000 f83f 	bl	801be3c <_vfiprintf_r>
 801bdbe:	b002      	add	sp, #8
 801bdc0:	f85d eb04 	ldr.w	lr, [sp], #4
 801bdc4:	b003      	add	sp, #12
 801bdc6:	4770      	bx	lr
 801bdc8:	2400027c 	.word	0x2400027c

0801bdcc <abort>:
 801bdcc:	b508      	push	{r3, lr}
 801bdce:	2006      	movs	r0, #6
 801bdd0:	f000 fa08 	bl	801c1e4 <raise>
 801bdd4:	2001      	movs	r0, #1
 801bdd6:	f7e6 ff77 	bl	8002cc8 <_exit>

0801bdda <_malloc_usable_size_r>:
 801bdda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bdde:	1f18      	subs	r0, r3, #4
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	bfbc      	itt	lt
 801bde4:	580b      	ldrlt	r3, [r1, r0]
 801bde6:	18c0      	addlt	r0, r0, r3
 801bde8:	4770      	bx	lr

0801bdea <__sfputc_r>:
 801bdea:	6893      	ldr	r3, [r2, #8]
 801bdec:	3b01      	subs	r3, #1
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	b410      	push	{r4}
 801bdf2:	6093      	str	r3, [r2, #8]
 801bdf4:	da08      	bge.n	801be08 <__sfputc_r+0x1e>
 801bdf6:	6994      	ldr	r4, [r2, #24]
 801bdf8:	42a3      	cmp	r3, r4
 801bdfa:	db01      	blt.n	801be00 <__sfputc_r+0x16>
 801bdfc:	290a      	cmp	r1, #10
 801bdfe:	d103      	bne.n	801be08 <__sfputc_r+0x1e>
 801be00:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be04:	f000 b932 	b.w	801c06c <__swbuf_r>
 801be08:	6813      	ldr	r3, [r2, #0]
 801be0a:	1c58      	adds	r0, r3, #1
 801be0c:	6010      	str	r0, [r2, #0]
 801be0e:	7019      	strb	r1, [r3, #0]
 801be10:	4608      	mov	r0, r1
 801be12:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be16:	4770      	bx	lr

0801be18 <__sfputs_r>:
 801be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be1a:	4606      	mov	r6, r0
 801be1c:	460f      	mov	r7, r1
 801be1e:	4614      	mov	r4, r2
 801be20:	18d5      	adds	r5, r2, r3
 801be22:	42ac      	cmp	r4, r5
 801be24:	d101      	bne.n	801be2a <__sfputs_r+0x12>
 801be26:	2000      	movs	r0, #0
 801be28:	e007      	b.n	801be3a <__sfputs_r+0x22>
 801be2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be2e:	463a      	mov	r2, r7
 801be30:	4630      	mov	r0, r6
 801be32:	f7ff ffda 	bl	801bdea <__sfputc_r>
 801be36:	1c43      	adds	r3, r0, #1
 801be38:	d1f3      	bne.n	801be22 <__sfputs_r+0xa>
 801be3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801be3c <_vfiprintf_r>:
 801be3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be40:	460d      	mov	r5, r1
 801be42:	b09d      	sub	sp, #116	@ 0x74
 801be44:	4614      	mov	r4, r2
 801be46:	4698      	mov	r8, r3
 801be48:	4606      	mov	r6, r0
 801be4a:	b118      	cbz	r0, 801be54 <_vfiprintf_r+0x18>
 801be4c:	6a03      	ldr	r3, [r0, #32]
 801be4e:	b90b      	cbnz	r3, 801be54 <_vfiprintf_r+0x18>
 801be50:	f7fd fce6 	bl	8019820 <__sinit>
 801be54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801be56:	07d9      	lsls	r1, r3, #31
 801be58:	d405      	bmi.n	801be66 <_vfiprintf_r+0x2a>
 801be5a:	89ab      	ldrh	r3, [r5, #12]
 801be5c:	059a      	lsls	r2, r3, #22
 801be5e:	d402      	bmi.n	801be66 <_vfiprintf_r+0x2a>
 801be60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801be62:	f7fd fe12 	bl	8019a8a <__retarget_lock_acquire_recursive>
 801be66:	89ab      	ldrh	r3, [r5, #12]
 801be68:	071b      	lsls	r3, r3, #28
 801be6a:	d501      	bpl.n	801be70 <_vfiprintf_r+0x34>
 801be6c:	692b      	ldr	r3, [r5, #16]
 801be6e:	b99b      	cbnz	r3, 801be98 <_vfiprintf_r+0x5c>
 801be70:	4629      	mov	r1, r5
 801be72:	4630      	mov	r0, r6
 801be74:	f000 f938 	bl	801c0e8 <__swsetup_r>
 801be78:	b170      	cbz	r0, 801be98 <_vfiprintf_r+0x5c>
 801be7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801be7c:	07dc      	lsls	r4, r3, #31
 801be7e:	d504      	bpl.n	801be8a <_vfiprintf_r+0x4e>
 801be80:	f04f 30ff 	mov.w	r0, #4294967295
 801be84:	b01d      	add	sp, #116	@ 0x74
 801be86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be8a:	89ab      	ldrh	r3, [r5, #12]
 801be8c:	0598      	lsls	r0, r3, #22
 801be8e:	d4f7      	bmi.n	801be80 <_vfiprintf_r+0x44>
 801be90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801be92:	f7fd fdfb 	bl	8019a8c <__retarget_lock_release_recursive>
 801be96:	e7f3      	b.n	801be80 <_vfiprintf_r+0x44>
 801be98:	2300      	movs	r3, #0
 801be9a:	9309      	str	r3, [sp, #36]	@ 0x24
 801be9c:	2320      	movs	r3, #32
 801be9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bea2:	f8cd 800c 	str.w	r8, [sp, #12]
 801bea6:	2330      	movs	r3, #48	@ 0x30
 801bea8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c058 <_vfiprintf_r+0x21c>
 801beac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801beb0:	f04f 0901 	mov.w	r9, #1
 801beb4:	4623      	mov	r3, r4
 801beb6:	469a      	mov	sl, r3
 801beb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bebc:	b10a      	cbz	r2, 801bec2 <_vfiprintf_r+0x86>
 801bebe:	2a25      	cmp	r2, #37	@ 0x25
 801bec0:	d1f9      	bne.n	801beb6 <_vfiprintf_r+0x7a>
 801bec2:	ebba 0b04 	subs.w	fp, sl, r4
 801bec6:	d00b      	beq.n	801bee0 <_vfiprintf_r+0xa4>
 801bec8:	465b      	mov	r3, fp
 801beca:	4622      	mov	r2, r4
 801becc:	4629      	mov	r1, r5
 801bece:	4630      	mov	r0, r6
 801bed0:	f7ff ffa2 	bl	801be18 <__sfputs_r>
 801bed4:	3001      	adds	r0, #1
 801bed6:	f000 80a7 	beq.w	801c028 <_vfiprintf_r+0x1ec>
 801beda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bedc:	445a      	add	r2, fp
 801bede:	9209      	str	r2, [sp, #36]	@ 0x24
 801bee0:	f89a 3000 	ldrb.w	r3, [sl]
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	f000 809f 	beq.w	801c028 <_vfiprintf_r+0x1ec>
 801beea:	2300      	movs	r3, #0
 801beec:	f04f 32ff 	mov.w	r2, #4294967295
 801bef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bef4:	f10a 0a01 	add.w	sl, sl, #1
 801bef8:	9304      	str	r3, [sp, #16]
 801befa:	9307      	str	r3, [sp, #28]
 801befc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bf00:	931a      	str	r3, [sp, #104]	@ 0x68
 801bf02:	4654      	mov	r4, sl
 801bf04:	2205      	movs	r2, #5
 801bf06:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf0a:	4853      	ldr	r0, [pc, #332]	@ (801c058 <_vfiprintf_r+0x21c>)
 801bf0c:	f7e4 fa10 	bl	8000330 <memchr>
 801bf10:	9a04      	ldr	r2, [sp, #16]
 801bf12:	b9d8      	cbnz	r0, 801bf4c <_vfiprintf_r+0x110>
 801bf14:	06d1      	lsls	r1, r2, #27
 801bf16:	bf44      	itt	mi
 801bf18:	2320      	movmi	r3, #32
 801bf1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bf1e:	0713      	lsls	r3, r2, #28
 801bf20:	bf44      	itt	mi
 801bf22:	232b      	movmi	r3, #43	@ 0x2b
 801bf24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bf28:	f89a 3000 	ldrb.w	r3, [sl]
 801bf2c:	2b2a      	cmp	r3, #42	@ 0x2a
 801bf2e:	d015      	beq.n	801bf5c <_vfiprintf_r+0x120>
 801bf30:	9a07      	ldr	r2, [sp, #28]
 801bf32:	4654      	mov	r4, sl
 801bf34:	2000      	movs	r0, #0
 801bf36:	f04f 0c0a 	mov.w	ip, #10
 801bf3a:	4621      	mov	r1, r4
 801bf3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bf40:	3b30      	subs	r3, #48	@ 0x30
 801bf42:	2b09      	cmp	r3, #9
 801bf44:	d94b      	bls.n	801bfde <_vfiprintf_r+0x1a2>
 801bf46:	b1b0      	cbz	r0, 801bf76 <_vfiprintf_r+0x13a>
 801bf48:	9207      	str	r2, [sp, #28]
 801bf4a:	e014      	b.n	801bf76 <_vfiprintf_r+0x13a>
 801bf4c:	eba0 0308 	sub.w	r3, r0, r8
 801bf50:	fa09 f303 	lsl.w	r3, r9, r3
 801bf54:	4313      	orrs	r3, r2
 801bf56:	9304      	str	r3, [sp, #16]
 801bf58:	46a2      	mov	sl, r4
 801bf5a:	e7d2      	b.n	801bf02 <_vfiprintf_r+0xc6>
 801bf5c:	9b03      	ldr	r3, [sp, #12]
 801bf5e:	1d19      	adds	r1, r3, #4
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	9103      	str	r1, [sp, #12]
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	bfbb      	ittet	lt
 801bf68:	425b      	neglt	r3, r3
 801bf6a:	f042 0202 	orrlt.w	r2, r2, #2
 801bf6e:	9307      	strge	r3, [sp, #28]
 801bf70:	9307      	strlt	r3, [sp, #28]
 801bf72:	bfb8      	it	lt
 801bf74:	9204      	strlt	r2, [sp, #16]
 801bf76:	7823      	ldrb	r3, [r4, #0]
 801bf78:	2b2e      	cmp	r3, #46	@ 0x2e
 801bf7a:	d10a      	bne.n	801bf92 <_vfiprintf_r+0x156>
 801bf7c:	7863      	ldrb	r3, [r4, #1]
 801bf7e:	2b2a      	cmp	r3, #42	@ 0x2a
 801bf80:	d132      	bne.n	801bfe8 <_vfiprintf_r+0x1ac>
 801bf82:	9b03      	ldr	r3, [sp, #12]
 801bf84:	1d1a      	adds	r2, r3, #4
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	9203      	str	r2, [sp, #12]
 801bf8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bf8e:	3402      	adds	r4, #2
 801bf90:	9305      	str	r3, [sp, #20]
 801bf92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c068 <_vfiprintf_r+0x22c>
 801bf96:	7821      	ldrb	r1, [r4, #0]
 801bf98:	2203      	movs	r2, #3
 801bf9a:	4650      	mov	r0, sl
 801bf9c:	f7e4 f9c8 	bl	8000330 <memchr>
 801bfa0:	b138      	cbz	r0, 801bfb2 <_vfiprintf_r+0x176>
 801bfa2:	9b04      	ldr	r3, [sp, #16]
 801bfa4:	eba0 000a 	sub.w	r0, r0, sl
 801bfa8:	2240      	movs	r2, #64	@ 0x40
 801bfaa:	4082      	lsls	r2, r0
 801bfac:	4313      	orrs	r3, r2
 801bfae:	3401      	adds	r4, #1
 801bfb0:	9304      	str	r3, [sp, #16]
 801bfb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bfb6:	4829      	ldr	r0, [pc, #164]	@ (801c05c <_vfiprintf_r+0x220>)
 801bfb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bfbc:	2206      	movs	r2, #6
 801bfbe:	f7e4 f9b7 	bl	8000330 <memchr>
 801bfc2:	2800      	cmp	r0, #0
 801bfc4:	d03f      	beq.n	801c046 <_vfiprintf_r+0x20a>
 801bfc6:	4b26      	ldr	r3, [pc, #152]	@ (801c060 <_vfiprintf_r+0x224>)
 801bfc8:	bb1b      	cbnz	r3, 801c012 <_vfiprintf_r+0x1d6>
 801bfca:	9b03      	ldr	r3, [sp, #12]
 801bfcc:	3307      	adds	r3, #7
 801bfce:	f023 0307 	bic.w	r3, r3, #7
 801bfd2:	3308      	adds	r3, #8
 801bfd4:	9303      	str	r3, [sp, #12]
 801bfd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfd8:	443b      	add	r3, r7
 801bfda:	9309      	str	r3, [sp, #36]	@ 0x24
 801bfdc:	e76a      	b.n	801beb4 <_vfiprintf_r+0x78>
 801bfde:	fb0c 3202 	mla	r2, ip, r2, r3
 801bfe2:	460c      	mov	r4, r1
 801bfe4:	2001      	movs	r0, #1
 801bfe6:	e7a8      	b.n	801bf3a <_vfiprintf_r+0xfe>
 801bfe8:	2300      	movs	r3, #0
 801bfea:	3401      	adds	r4, #1
 801bfec:	9305      	str	r3, [sp, #20]
 801bfee:	4619      	mov	r1, r3
 801bff0:	f04f 0c0a 	mov.w	ip, #10
 801bff4:	4620      	mov	r0, r4
 801bff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bffa:	3a30      	subs	r2, #48	@ 0x30
 801bffc:	2a09      	cmp	r2, #9
 801bffe:	d903      	bls.n	801c008 <_vfiprintf_r+0x1cc>
 801c000:	2b00      	cmp	r3, #0
 801c002:	d0c6      	beq.n	801bf92 <_vfiprintf_r+0x156>
 801c004:	9105      	str	r1, [sp, #20]
 801c006:	e7c4      	b.n	801bf92 <_vfiprintf_r+0x156>
 801c008:	fb0c 2101 	mla	r1, ip, r1, r2
 801c00c:	4604      	mov	r4, r0
 801c00e:	2301      	movs	r3, #1
 801c010:	e7f0      	b.n	801bff4 <_vfiprintf_r+0x1b8>
 801c012:	ab03      	add	r3, sp, #12
 801c014:	9300      	str	r3, [sp, #0]
 801c016:	462a      	mov	r2, r5
 801c018:	4b12      	ldr	r3, [pc, #72]	@ (801c064 <_vfiprintf_r+0x228>)
 801c01a:	a904      	add	r1, sp, #16
 801c01c:	4630      	mov	r0, r6
 801c01e:	f7fc ffcb 	bl	8018fb8 <_printf_float>
 801c022:	4607      	mov	r7, r0
 801c024:	1c78      	adds	r0, r7, #1
 801c026:	d1d6      	bne.n	801bfd6 <_vfiprintf_r+0x19a>
 801c028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c02a:	07d9      	lsls	r1, r3, #31
 801c02c:	d405      	bmi.n	801c03a <_vfiprintf_r+0x1fe>
 801c02e:	89ab      	ldrh	r3, [r5, #12]
 801c030:	059a      	lsls	r2, r3, #22
 801c032:	d402      	bmi.n	801c03a <_vfiprintf_r+0x1fe>
 801c034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c036:	f7fd fd29 	bl	8019a8c <__retarget_lock_release_recursive>
 801c03a:	89ab      	ldrh	r3, [r5, #12]
 801c03c:	065b      	lsls	r3, r3, #25
 801c03e:	f53f af1f 	bmi.w	801be80 <_vfiprintf_r+0x44>
 801c042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c044:	e71e      	b.n	801be84 <_vfiprintf_r+0x48>
 801c046:	ab03      	add	r3, sp, #12
 801c048:	9300      	str	r3, [sp, #0]
 801c04a:	462a      	mov	r2, r5
 801c04c:	4b05      	ldr	r3, [pc, #20]	@ (801c064 <_vfiprintf_r+0x228>)
 801c04e:	a904      	add	r1, sp, #16
 801c050:	4630      	mov	r0, r6
 801c052:	f7fd fa39 	bl	80194c8 <_printf_i>
 801c056:	e7e4      	b.n	801c022 <_vfiprintf_r+0x1e6>
 801c058:	0801dbc8 	.word	0x0801dbc8
 801c05c:	0801dbd2 	.word	0x0801dbd2
 801c060:	08018fb9 	.word	0x08018fb9
 801c064:	0801be19 	.word	0x0801be19
 801c068:	0801dbce 	.word	0x0801dbce

0801c06c <__swbuf_r>:
 801c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c06e:	460e      	mov	r6, r1
 801c070:	4614      	mov	r4, r2
 801c072:	4605      	mov	r5, r0
 801c074:	b118      	cbz	r0, 801c07e <__swbuf_r+0x12>
 801c076:	6a03      	ldr	r3, [r0, #32]
 801c078:	b90b      	cbnz	r3, 801c07e <__swbuf_r+0x12>
 801c07a:	f7fd fbd1 	bl	8019820 <__sinit>
 801c07e:	69a3      	ldr	r3, [r4, #24]
 801c080:	60a3      	str	r3, [r4, #8]
 801c082:	89a3      	ldrh	r3, [r4, #12]
 801c084:	071a      	lsls	r2, r3, #28
 801c086:	d501      	bpl.n	801c08c <__swbuf_r+0x20>
 801c088:	6923      	ldr	r3, [r4, #16]
 801c08a:	b943      	cbnz	r3, 801c09e <__swbuf_r+0x32>
 801c08c:	4621      	mov	r1, r4
 801c08e:	4628      	mov	r0, r5
 801c090:	f000 f82a 	bl	801c0e8 <__swsetup_r>
 801c094:	b118      	cbz	r0, 801c09e <__swbuf_r+0x32>
 801c096:	f04f 37ff 	mov.w	r7, #4294967295
 801c09a:	4638      	mov	r0, r7
 801c09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c09e:	6823      	ldr	r3, [r4, #0]
 801c0a0:	6922      	ldr	r2, [r4, #16]
 801c0a2:	1a98      	subs	r0, r3, r2
 801c0a4:	6963      	ldr	r3, [r4, #20]
 801c0a6:	b2f6      	uxtb	r6, r6
 801c0a8:	4283      	cmp	r3, r0
 801c0aa:	4637      	mov	r7, r6
 801c0ac:	dc05      	bgt.n	801c0ba <__swbuf_r+0x4e>
 801c0ae:	4621      	mov	r1, r4
 801c0b0:	4628      	mov	r0, r5
 801c0b2:	f7ff fdc7 	bl	801bc44 <_fflush_r>
 801c0b6:	2800      	cmp	r0, #0
 801c0b8:	d1ed      	bne.n	801c096 <__swbuf_r+0x2a>
 801c0ba:	68a3      	ldr	r3, [r4, #8]
 801c0bc:	3b01      	subs	r3, #1
 801c0be:	60a3      	str	r3, [r4, #8]
 801c0c0:	6823      	ldr	r3, [r4, #0]
 801c0c2:	1c5a      	adds	r2, r3, #1
 801c0c4:	6022      	str	r2, [r4, #0]
 801c0c6:	701e      	strb	r6, [r3, #0]
 801c0c8:	6962      	ldr	r2, [r4, #20]
 801c0ca:	1c43      	adds	r3, r0, #1
 801c0cc:	429a      	cmp	r2, r3
 801c0ce:	d004      	beq.n	801c0da <__swbuf_r+0x6e>
 801c0d0:	89a3      	ldrh	r3, [r4, #12]
 801c0d2:	07db      	lsls	r3, r3, #31
 801c0d4:	d5e1      	bpl.n	801c09a <__swbuf_r+0x2e>
 801c0d6:	2e0a      	cmp	r6, #10
 801c0d8:	d1df      	bne.n	801c09a <__swbuf_r+0x2e>
 801c0da:	4621      	mov	r1, r4
 801c0dc:	4628      	mov	r0, r5
 801c0de:	f7ff fdb1 	bl	801bc44 <_fflush_r>
 801c0e2:	2800      	cmp	r0, #0
 801c0e4:	d0d9      	beq.n	801c09a <__swbuf_r+0x2e>
 801c0e6:	e7d6      	b.n	801c096 <__swbuf_r+0x2a>

0801c0e8 <__swsetup_r>:
 801c0e8:	b538      	push	{r3, r4, r5, lr}
 801c0ea:	4b29      	ldr	r3, [pc, #164]	@ (801c190 <__swsetup_r+0xa8>)
 801c0ec:	4605      	mov	r5, r0
 801c0ee:	6818      	ldr	r0, [r3, #0]
 801c0f0:	460c      	mov	r4, r1
 801c0f2:	b118      	cbz	r0, 801c0fc <__swsetup_r+0x14>
 801c0f4:	6a03      	ldr	r3, [r0, #32]
 801c0f6:	b90b      	cbnz	r3, 801c0fc <__swsetup_r+0x14>
 801c0f8:	f7fd fb92 	bl	8019820 <__sinit>
 801c0fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c100:	0719      	lsls	r1, r3, #28
 801c102:	d422      	bmi.n	801c14a <__swsetup_r+0x62>
 801c104:	06da      	lsls	r2, r3, #27
 801c106:	d407      	bmi.n	801c118 <__swsetup_r+0x30>
 801c108:	2209      	movs	r2, #9
 801c10a:	602a      	str	r2, [r5, #0]
 801c10c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c110:	81a3      	strh	r3, [r4, #12]
 801c112:	f04f 30ff 	mov.w	r0, #4294967295
 801c116:	e033      	b.n	801c180 <__swsetup_r+0x98>
 801c118:	0758      	lsls	r0, r3, #29
 801c11a:	d512      	bpl.n	801c142 <__swsetup_r+0x5a>
 801c11c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c11e:	b141      	cbz	r1, 801c132 <__swsetup_r+0x4a>
 801c120:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c124:	4299      	cmp	r1, r3
 801c126:	d002      	beq.n	801c12e <__swsetup_r+0x46>
 801c128:	4628      	mov	r0, r5
 801c12a:	f7fe faa7 	bl	801a67c <_free_r>
 801c12e:	2300      	movs	r3, #0
 801c130:	6363      	str	r3, [r4, #52]	@ 0x34
 801c132:	89a3      	ldrh	r3, [r4, #12]
 801c134:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c138:	81a3      	strh	r3, [r4, #12]
 801c13a:	2300      	movs	r3, #0
 801c13c:	6063      	str	r3, [r4, #4]
 801c13e:	6923      	ldr	r3, [r4, #16]
 801c140:	6023      	str	r3, [r4, #0]
 801c142:	89a3      	ldrh	r3, [r4, #12]
 801c144:	f043 0308 	orr.w	r3, r3, #8
 801c148:	81a3      	strh	r3, [r4, #12]
 801c14a:	6923      	ldr	r3, [r4, #16]
 801c14c:	b94b      	cbnz	r3, 801c162 <__swsetup_r+0x7a>
 801c14e:	89a3      	ldrh	r3, [r4, #12]
 801c150:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c158:	d003      	beq.n	801c162 <__swsetup_r+0x7a>
 801c15a:	4621      	mov	r1, r4
 801c15c:	4628      	mov	r0, r5
 801c15e:	f000 f883 	bl	801c268 <__smakebuf_r>
 801c162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c166:	f013 0201 	ands.w	r2, r3, #1
 801c16a:	d00a      	beq.n	801c182 <__swsetup_r+0x9a>
 801c16c:	2200      	movs	r2, #0
 801c16e:	60a2      	str	r2, [r4, #8]
 801c170:	6962      	ldr	r2, [r4, #20]
 801c172:	4252      	negs	r2, r2
 801c174:	61a2      	str	r2, [r4, #24]
 801c176:	6922      	ldr	r2, [r4, #16]
 801c178:	b942      	cbnz	r2, 801c18c <__swsetup_r+0xa4>
 801c17a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c17e:	d1c5      	bne.n	801c10c <__swsetup_r+0x24>
 801c180:	bd38      	pop	{r3, r4, r5, pc}
 801c182:	0799      	lsls	r1, r3, #30
 801c184:	bf58      	it	pl
 801c186:	6962      	ldrpl	r2, [r4, #20]
 801c188:	60a2      	str	r2, [r4, #8]
 801c18a:	e7f4      	b.n	801c176 <__swsetup_r+0x8e>
 801c18c:	2000      	movs	r0, #0
 801c18e:	e7f7      	b.n	801c180 <__swsetup_r+0x98>
 801c190:	2400027c 	.word	0x2400027c

0801c194 <_raise_r>:
 801c194:	291f      	cmp	r1, #31
 801c196:	b538      	push	{r3, r4, r5, lr}
 801c198:	4605      	mov	r5, r0
 801c19a:	460c      	mov	r4, r1
 801c19c:	d904      	bls.n	801c1a8 <_raise_r+0x14>
 801c19e:	2316      	movs	r3, #22
 801c1a0:	6003      	str	r3, [r0, #0]
 801c1a2:	f04f 30ff 	mov.w	r0, #4294967295
 801c1a6:	bd38      	pop	{r3, r4, r5, pc}
 801c1a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c1aa:	b112      	cbz	r2, 801c1b2 <_raise_r+0x1e>
 801c1ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c1b0:	b94b      	cbnz	r3, 801c1c6 <_raise_r+0x32>
 801c1b2:	4628      	mov	r0, r5
 801c1b4:	f000 f830 	bl	801c218 <_getpid_r>
 801c1b8:	4622      	mov	r2, r4
 801c1ba:	4601      	mov	r1, r0
 801c1bc:	4628      	mov	r0, r5
 801c1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c1c2:	f000 b817 	b.w	801c1f4 <_kill_r>
 801c1c6:	2b01      	cmp	r3, #1
 801c1c8:	d00a      	beq.n	801c1e0 <_raise_r+0x4c>
 801c1ca:	1c59      	adds	r1, r3, #1
 801c1cc:	d103      	bne.n	801c1d6 <_raise_r+0x42>
 801c1ce:	2316      	movs	r3, #22
 801c1d0:	6003      	str	r3, [r0, #0]
 801c1d2:	2001      	movs	r0, #1
 801c1d4:	e7e7      	b.n	801c1a6 <_raise_r+0x12>
 801c1d6:	2100      	movs	r1, #0
 801c1d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c1dc:	4620      	mov	r0, r4
 801c1de:	4798      	blx	r3
 801c1e0:	2000      	movs	r0, #0
 801c1e2:	e7e0      	b.n	801c1a6 <_raise_r+0x12>

0801c1e4 <raise>:
 801c1e4:	4b02      	ldr	r3, [pc, #8]	@ (801c1f0 <raise+0xc>)
 801c1e6:	4601      	mov	r1, r0
 801c1e8:	6818      	ldr	r0, [r3, #0]
 801c1ea:	f7ff bfd3 	b.w	801c194 <_raise_r>
 801c1ee:	bf00      	nop
 801c1f0:	2400027c 	.word	0x2400027c

0801c1f4 <_kill_r>:
 801c1f4:	b538      	push	{r3, r4, r5, lr}
 801c1f6:	4d07      	ldr	r5, [pc, #28]	@ (801c214 <_kill_r+0x20>)
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	4604      	mov	r4, r0
 801c1fc:	4608      	mov	r0, r1
 801c1fe:	4611      	mov	r1, r2
 801c200:	602b      	str	r3, [r5, #0]
 801c202:	f7e6 fd51 	bl	8002ca8 <_kill>
 801c206:	1c43      	adds	r3, r0, #1
 801c208:	d102      	bne.n	801c210 <_kill_r+0x1c>
 801c20a:	682b      	ldr	r3, [r5, #0]
 801c20c:	b103      	cbz	r3, 801c210 <_kill_r+0x1c>
 801c20e:	6023      	str	r3, [r4, #0]
 801c210:	bd38      	pop	{r3, r4, r5, pc}
 801c212:	bf00      	nop
 801c214:	2400635c 	.word	0x2400635c

0801c218 <_getpid_r>:
 801c218:	f7e6 bd3e 	b.w	8002c98 <_getpid>

0801c21c <__swhatbuf_r>:
 801c21c:	b570      	push	{r4, r5, r6, lr}
 801c21e:	460c      	mov	r4, r1
 801c220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c224:	2900      	cmp	r1, #0
 801c226:	b096      	sub	sp, #88	@ 0x58
 801c228:	4615      	mov	r5, r2
 801c22a:	461e      	mov	r6, r3
 801c22c:	da0d      	bge.n	801c24a <__swhatbuf_r+0x2e>
 801c22e:	89a3      	ldrh	r3, [r4, #12]
 801c230:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c234:	f04f 0100 	mov.w	r1, #0
 801c238:	bf14      	ite	ne
 801c23a:	2340      	movne	r3, #64	@ 0x40
 801c23c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c240:	2000      	movs	r0, #0
 801c242:	6031      	str	r1, [r6, #0]
 801c244:	602b      	str	r3, [r5, #0]
 801c246:	b016      	add	sp, #88	@ 0x58
 801c248:	bd70      	pop	{r4, r5, r6, pc}
 801c24a:	466a      	mov	r2, sp
 801c24c:	f000 f848 	bl	801c2e0 <_fstat_r>
 801c250:	2800      	cmp	r0, #0
 801c252:	dbec      	blt.n	801c22e <__swhatbuf_r+0x12>
 801c254:	9901      	ldr	r1, [sp, #4]
 801c256:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c25a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c25e:	4259      	negs	r1, r3
 801c260:	4159      	adcs	r1, r3
 801c262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c266:	e7eb      	b.n	801c240 <__swhatbuf_r+0x24>

0801c268 <__smakebuf_r>:
 801c268:	898b      	ldrh	r3, [r1, #12]
 801c26a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c26c:	079d      	lsls	r5, r3, #30
 801c26e:	4606      	mov	r6, r0
 801c270:	460c      	mov	r4, r1
 801c272:	d507      	bpl.n	801c284 <__smakebuf_r+0x1c>
 801c274:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c278:	6023      	str	r3, [r4, #0]
 801c27a:	6123      	str	r3, [r4, #16]
 801c27c:	2301      	movs	r3, #1
 801c27e:	6163      	str	r3, [r4, #20]
 801c280:	b003      	add	sp, #12
 801c282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c284:	ab01      	add	r3, sp, #4
 801c286:	466a      	mov	r2, sp
 801c288:	f7ff ffc8 	bl	801c21c <__swhatbuf_r>
 801c28c:	9f00      	ldr	r7, [sp, #0]
 801c28e:	4605      	mov	r5, r0
 801c290:	4639      	mov	r1, r7
 801c292:	4630      	mov	r0, r6
 801c294:	f7fe fda0 	bl	801add8 <_malloc_r>
 801c298:	b948      	cbnz	r0, 801c2ae <__smakebuf_r+0x46>
 801c29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c29e:	059a      	lsls	r2, r3, #22
 801c2a0:	d4ee      	bmi.n	801c280 <__smakebuf_r+0x18>
 801c2a2:	f023 0303 	bic.w	r3, r3, #3
 801c2a6:	f043 0302 	orr.w	r3, r3, #2
 801c2aa:	81a3      	strh	r3, [r4, #12]
 801c2ac:	e7e2      	b.n	801c274 <__smakebuf_r+0xc>
 801c2ae:	89a3      	ldrh	r3, [r4, #12]
 801c2b0:	6020      	str	r0, [r4, #0]
 801c2b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c2b6:	81a3      	strh	r3, [r4, #12]
 801c2b8:	9b01      	ldr	r3, [sp, #4]
 801c2ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c2be:	b15b      	cbz	r3, 801c2d8 <__smakebuf_r+0x70>
 801c2c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c2c4:	4630      	mov	r0, r6
 801c2c6:	f000 f81d 	bl	801c304 <_isatty_r>
 801c2ca:	b128      	cbz	r0, 801c2d8 <__smakebuf_r+0x70>
 801c2cc:	89a3      	ldrh	r3, [r4, #12]
 801c2ce:	f023 0303 	bic.w	r3, r3, #3
 801c2d2:	f043 0301 	orr.w	r3, r3, #1
 801c2d6:	81a3      	strh	r3, [r4, #12]
 801c2d8:	89a3      	ldrh	r3, [r4, #12]
 801c2da:	431d      	orrs	r5, r3
 801c2dc:	81a5      	strh	r5, [r4, #12]
 801c2de:	e7cf      	b.n	801c280 <__smakebuf_r+0x18>

0801c2e0 <_fstat_r>:
 801c2e0:	b538      	push	{r3, r4, r5, lr}
 801c2e2:	4d07      	ldr	r5, [pc, #28]	@ (801c300 <_fstat_r+0x20>)
 801c2e4:	2300      	movs	r3, #0
 801c2e6:	4604      	mov	r4, r0
 801c2e8:	4608      	mov	r0, r1
 801c2ea:	4611      	mov	r1, r2
 801c2ec:	602b      	str	r3, [r5, #0]
 801c2ee:	f7e6 fd3b 	bl	8002d68 <_fstat>
 801c2f2:	1c43      	adds	r3, r0, #1
 801c2f4:	d102      	bne.n	801c2fc <_fstat_r+0x1c>
 801c2f6:	682b      	ldr	r3, [r5, #0]
 801c2f8:	b103      	cbz	r3, 801c2fc <_fstat_r+0x1c>
 801c2fa:	6023      	str	r3, [r4, #0]
 801c2fc:	bd38      	pop	{r3, r4, r5, pc}
 801c2fe:	bf00      	nop
 801c300:	2400635c 	.word	0x2400635c

0801c304 <_isatty_r>:
 801c304:	b538      	push	{r3, r4, r5, lr}
 801c306:	4d06      	ldr	r5, [pc, #24]	@ (801c320 <_isatty_r+0x1c>)
 801c308:	2300      	movs	r3, #0
 801c30a:	4604      	mov	r4, r0
 801c30c:	4608      	mov	r0, r1
 801c30e:	602b      	str	r3, [r5, #0]
 801c310:	f7e6 fd3a 	bl	8002d88 <_isatty>
 801c314:	1c43      	adds	r3, r0, #1
 801c316:	d102      	bne.n	801c31e <_isatty_r+0x1a>
 801c318:	682b      	ldr	r3, [r5, #0]
 801c31a:	b103      	cbz	r3, 801c31e <_isatty_r+0x1a>
 801c31c:	6023      	str	r3, [r4, #0]
 801c31e:	bd38      	pop	{r3, r4, r5, pc}
 801c320:	2400635c 	.word	0x2400635c
 801c324:	00000000 	.word	0x00000000

0801c328 <sin>:
 801c328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c32a:	eeb0 7b40 	vmov.f64	d7, d0
 801c32e:	ee17 3a90 	vmov	r3, s15
 801c332:	4a21      	ldr	r2, [pc, #132]	@ (801c3b8 <sin+0x90>)
 801c334:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c338:	4293      	cmp	r3, r2
 801c33a:	d807      	bhi.n	801c34c <sin+0x24>
 801c33c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801c3b0 <sin+0x88>
 801c340:	2000      	movs	r0, #0
 801c342:	b005      	add	sp, #20
 801c344:	f85d eb04 	ldr.w	lr, [sp], #4
 801c348:	f000 b986 	b.w	801c658 <__kernel_sin>
 801c34c:	4a1b      	ldr	r2, [pc, #108]	@ (801c3bc <sin+0x94>)
 801c34e:	4293      	cmp	r3, r2
 801c350:	d904      	bls.n	801c35c <sin+0x34>
 801c352:	ee30 0b40 	vsub.f64	d0, d0, d0
 801c356:	b005      	add	sp, #20
 801c358:	f85d fb04 	ldr.w	pc, [sp], #4
 801c35c:	4668      	mov	r0, sp
 801c35e:	f000 f9d3 	bl	801c708 <__ieee754_rem_pio2>
 801c362:	f000 0003 	and.w	r0, r0, #3
 801c366:	2801      	cmp	r0, #1
 801c368:	d00a      	beq.n	801c380 <sin+0x58>
 801c36a:	2802      	cmp	r0, #2
 801c36c:	d00f      	beq.n	801c38e <sin+0x66>
 801c36e:	b9c0      	cbnz	r0, 801c3a2 <sin+0x7a>
 801c370:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c374:	ed9d 0b00 	vldr	d0, [sp]
 801c378:	2001      	movs	r0, #1
 801c37a:	f000 f96d 	bl	801c658 <__kernel_sin>
 801c37e:	e7ea      	b.n	801c356 <sin+0x2e>
 801c380:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c384:	ed9d 0b00 	vldr	d0, [sp]
 801c388:	f000 f8fe 	bl	801c588 <__kernel_cos>
 801c38c:	e7e3      	b.n	801c356 <sin+0x2e>
 801c38e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c392:	ed9d 0b00 	vldr	d0, [sp]
 801c396:	2001      	movs	r0, #1
 801c398:	f000 f95e 	bl	801c658 <__kernel_sin>
 801c39c:	eeb1 0b40 	vneg.f64	d0, d0
 801c3a0:	e7d9      	b.n	801c356 <sin+0x2e>
 801c3a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c3a6:	ed9d 0b00 	vldr	d0, [sp]
 801c3aa:	f000 f8ed 	bl	801c588 <__kernel_cos>
 801c3ae:	e7f5      	b.n	801c39c <sin+0x74>
	...
 801c3b8:	3fe921fb 	.word	0x3fe921fb
 801c3bc:	7fefffff 	.word	0x7fefffff

0801c3c0 <sinf_poly>:
 801c3c0:	07cb      	lsls	r3, r1, #31
 801c3c2:	d412      	bmi.n	801c3ea <sinf_poly+0x2a>
 801c3c4:	ee21 5b00 	vmul.f64	d5, d1, d0
 801c3c8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801c3cc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801c3d0:	eea6 7b01 	vfma.f64	d7, d6, d1
 801c3d4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801c3d8:	ee21 1b05 	vmul.f64	d1, d1, d5
 801c3dc:	eea6 0b05 	vfma.f64	d0, d6, d5
 801c3e0:	eea7 0b01 	vfma.f64	d0, d7, d1
 801c3e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c3e8:	4770      	bx	lr
 801c3ea:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801c3ee:	ee21 5b01 	vmul.f64	d5, d1, d1
 801c3f2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801c3f6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801c3fa:	eea1 7b06 	vfma.f64	d7, d1, d6
 801c3fe:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801c402:	eea1 0b06 	vfma.f64	d0, d1, d6
 801c406:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801c40a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801c40e:	eea5 0b06 	vfma.f64	d0, d5, d6
 801c412:	e7e5      	b.n	801c3e0 <sinf_poly+0x20>
 801c414:	0000      	movs	r0, r0
	...

0801c418 <sinf>:
 801c418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c41a:	ee10 4a10 	vmov	r4, s0
 801c41e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c422:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801c426:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801c42a:	eef0 7a40 	vmov.f32	s15, s0
 801c42e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801c432:	d218      	bcs.n	801c466 <sinf+0x4e>
 801c434:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c438:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801c43c:	d20a      	bcs.n	801c454 <sinf+0x3c>
 801c43e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801c442:	d103      	bne.n	801c44c <sinf+0x34>
 801c444:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801c448:	ed8d 1a01 	vstr	s2, [sp, #4]
 801c44c:	eeb0 0a67 	vmov.f32	s0, s15
 801c450:	b003      	add	sp, #12
 801c452:	bd30      	pop	{r4, r5, pc}
 801c454:	483a      	ldr	r0, [pc, #232]	@ (801c540 <sinf+0x128>)
 801c456:	eeb0 0b46 	vmov.f64	d0, d6
 801c45a:	2100      	movs	r1, #0
 801c45c:	b003      	add	sp, #12
 801c45e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c462:	f7ff bfad 	b.w	801c3c0 <sinf_poly>
 801c466:	f240 422e 	movw	r2, #1070	@ 0x42e
 801c46a:	4293      	cmp	r3, r2
 801c46c:	d824      	bhi.n	801c4b8 <sinf+0xa0>
 801c46e:	4b34      	ldr	r3, [pc, #208]	@ (801c540 <sinf+0x128>)
 801c470:	ed93 7b08 	vldr	d7, [r3, #32]
 801c474:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c478:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801c47c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801c480:	ee17 1a90 	vmov	r1, s15
 801c484:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801c488:	1609      	asrs	r1, r1, #24
 801c48a:	ee07 1a90 	vmov	s15, r1
 801c48e:	f001 0203 	and.w	r2, r1, #3
 801c492:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801c496:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801c49a:	ed92 0b00 	vldr	d0, [r2]
 801c49e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801c4a2:	f011 0f02 	tst.w	r1, #2
 801c4a6:	eea5 6b47 	vfms.f64	d6, d5, d7
 801c4aa:	bf08      	it	eq
 801c4ac:	4618      	moveq	r0, r3
 801c4ae:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c4b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801c4b6:	e7d1      	b.n	801c45c <sinf+0x44>
 801c4b8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801c4bc:	d237      	bcs.n	801c52e <sinf+0x116>
 801c4be:	4921      	ldr	r1, [pc, #132]	@ (801c544 <sinf+0x12c>)
 801c4c0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801c4c4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801c4c8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801c4cc:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801c4d0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801c4d4:	6a10      	ldr	r0, [r2, #32]
 801c4d6:	6912      	ldr	r2, [r2, #16]
 801c4d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801c4dc:	40ab      	lsls	r3, r5
 801c4de:	fba0 5003 	umull	r5, r0, r0, r3
 801c4e2:	4359      	muls	r1, r3
 801c4e4:	fbe3 0102 	umlal	r0, r1, r3, r2
 801c4e8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801c4ec:	0f9d      	lsrs	r5, r3, #30
 801c4ee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801c4f2:	1ac9      	subs	r1, r1, r3
 801c4f4:	f7e4 f902 	bl	80006fc <__aeabi_l2d>
 801c4f8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801c4fc:	4b10      	ldr	r3, [pc, #64]	@ (801c540 <sinf+0x128>)
 801c4fe:	f004 0203 	and.w	r2, r4, #3
 801c502:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801c506:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801c538 <sinf+0x120>
 801c50a:	ed92 0b00 	vldr	d0, [r2]
 801c50e:	ec41 0b17 	vmov	d7, r0, r1
 801c512:	f014 0f02 	tst.w	r4, #2
 801c516:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c51a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801c51e:	4629      	mov	r1, r5
 801c520:	bf08      	it	eq
 801c522:	4618      	moveq	r0, r3
 801c524:	ee27 1b07 	vmul.f64	d1, d7, d7
 801c528:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c52c:	e796      	b.n	801c45c <sinf+0x44>
 801c52e:	b003      	add	sp, #12
 801c530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c534:	f000 b816 	b.w	801c564 <__math_invalidf>
 801c538:	54442d18 	.word	0x54442d18
 801c53c:	3c1921fb 	.word	0x3c1921fb
 801c540:	0801dc78 	.word	0x0801dc78
 801c544:	0801dc18 	.word	0x0801dc18

0801c548 <with_errnof>:
 801c548:	b510      	push	{r4, lr}
 801c54a:	ed2d 8b02 	vpush	{d8}
 801c54e:	eeb0 8a40 	vmov.f32	s16, s0
 801c552:	4604      	mov	r4, r0
 801c554:	f7fd fa6e 	bl	8019a34 <__errno>
 801c558:	eeb0 0a48 	vmov.f32	s0, s16
 801c55c:	ecbd 8b02 	vpop	{d8}
 801c560:	6004      	str	r4, [r0, #0]
 801c562:	bd10      	pop	{r4, pc}

0801c564 <__math_invalidf>:
 801c564:	eef0 7a40 	vmov.f32	s15, s0
 801c568:	ee30 7a40 	vsub.f32	s14, s0, s0
 801c56c:	eef4 7a67 	vcmp.f32	s15, s15
 801c570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c574:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801c578:	d602      	bvs.n	801c580 <__math_invalidf+0x1c>
 801c57a:	2021      	movs	r0, #33	@ 0x21
 801c57c:	f7ff bfe4 	b.w	801c548 <with_errnof>
 801c580:	4770      	bx	lr
 801c582:	0000      	movs	r0, r0
 801c584:	0000      	movs	r0, r0
	...

0801c588 <__kernel_cos>:
 801c588:	eeb0 5b40 	vmov.f64	d5, d0
 801c58c:	ee15 1a90 	vmov	r1, s11
 801c590:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801c594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801c598:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801c59c:	d204      	bcs.n	801c5a8 <__kernel_cos+0x20>
 801c59e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801c5a2:	ee17 3a90 	vmov	r3, s15
 801c5a6:	b343      	cbz	r3, 801c5fa <__kernel_cos+0x72>
 801c5a8:	ee25 6b05 	vmul.f64	d6, d5, d5
 801c5ac:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801c5b0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801c620 <__kernel_cos+0x98>
 801c5b4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801c628 <__kernel_cos+0xa0>
 801c5b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 801c5bc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801c630 <__kernel_cos+0xa8>
 801c5c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c5c4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801c638 <__kernel_cos+0xb0>
 801c5c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 801c5cc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801c640 <__kernel_cos+0xb8>
 801c5d0:	4b1f      	ldr	r3, [pc, #124]	@ (801c650 <__kernel_cos+0xc8>)
 801c5d2:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c5d6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801c648 <__kernel_cos+0xc0>
 801c5da:	4299      	cmp	r1, r3
 801c5dc:	eea7 4b06 	vfma.f64	d4, d7, d6
 801c5e0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801c5e4:	ee24 4b06 	vmul.f64	d4, d4, d6
 801c5e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c5ec:	eea6 1b04 	vfma.f64	d1, d6, d4
 801c5f0:	d804      	bhi.n	801c5fc <__kernel_cos+0x74>
 801c5f2:	ee37 7b41 	vsub.f64	d7, d7, d1
 801c5f6:	ee30 0b47 	vsub.f64	d0, d0, d7
 801c5fa:	4770      	bx	lr
 801c5fc:	4b15      	ldr	r3, [pc, #84]	@ (801c654 <__kernel_cos+0xcc>)
 801c5fe:	4299      	cmp	r1, r3
 801c600:	d809      	bhi.n	801c616 <__kernel_cos+0x8e>
 801c602:	2200      	movs	r2, #0
 801c604:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801c608:	ec43 2b16 	vmov	d6, r2, r3
 801c60c:	ee30 0b46 	vsub.f64	d0, d0, d6
 801c610:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c614:	e7ed      	b.n	801c5f2 <__kernel_cos+0x6a>
 801c616:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801c61a:	e7f7      	b.n	801c60c <__kernel_cos+0x84>
 801c61c:	f3af 8000 	nop.w
 801c620:	be8838d4 	.word	0xbe8838d4
 801c624:	bda8fae9 	.word	0xbda8fae9
 801c628:	bdb4b1c4 	.word	0xbdb4b1c4
 801c62c:	3e21ee9e 	.word	0x3e21ee9e
 801c630:	809c52ad 	.word	0x809c52ad
 801c634:	be927e4f 	.word	0xbe927e4f
 801c638:	19cb1590 	.word	0x19cb1590
 801c63c:	3efa01a0 	.word	0x3efa01a0
 801c640:	16c15177 	.word	0x16c15177
 801c644:	bf56c16c 	.word	0xbf56c16c
 801c648:	5555554c 	.word	0x5555554c
 801c64c:	3fa55555 	.word	0x3fa55555
 801c650:	3fd33332 	.word	0x3fd33332
 801c654:	3fe90000 	.word	0x3fe90000

0801c658 <__kernel_sin>:
 801c658:	ee10 3a90 	vmov	r3, s1
 801c65c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c660:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801c664:	d204      	bcs.n	801c670 <__kernel_sin+0x18>
 801c666:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801c66a:	ee17 3a90 	vmov	r3, s15
 801c66e:	b35b      	cbz	r3, 801c6c8 <__kernel_sin+0x70>
 801c670:	ee20 6b00 	vmul.f64	d6, d0, d0
 801c674:	ee20 5b06 	vmul.f64	d5, d0, d6
 801c678:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801c6d0 <__kernel_sin+0x78>
 801c67c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801c6d8 <__kernel_sin+0x80>
 801c680:	eea6 4b07 	vfma.f64	d4, d6, d7
 801c684:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801c6e0 <__kernel_sin+0x88>
 801c688:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c68c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801c6e8 <__kernel_sin+0x90>
 801c690:	eea7 4b06 	vfma.f64	d4, d7, d6
 801c694:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801c6f0 <__kernel_sin+0x98>
 801c698:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c69c:	b930      	cbnz	r0, 801c6ac <__kernel_sin+0x54>
 801c69e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801c6f8 <__kernel_sin+0xa0>
 801c6a2:	eea6 4b07 	vfma.f64	d4, d6, d7
 801c6a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 801c6aa:	4770      	bx	lr
 801c6ac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801c6b0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801c6b4:	eea1 7b04 	vfma.f64	d7, d1, d4
 801c6b8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801c6bc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801c700 <__kernel_sin+0xa8>
 801c6c0:	eea5 1b07 	vfma.f64	d1, d5, d7
 801c6c4:	ee30 0b41 	vsub.f64	d0, d0, d1
 801c6c8:	4770      	bx	lr
 801c6ca:	bf00      	nop
 801c6cc:	f3af 8000 	nop.w
 801c6d0:	5acfd57c 	.word	0x5acfd57c
 801c6d4:	3de5d93a 	.word	0x3de5d93a
 801c6d8:	8a2b9ceb 	.word	0x8a2b9ceb
 801c6dc:	be5ae5e6 	.word	0xbe5ae5e6
 801c6e0:	57b1fe7d 	.word	0x57b1fe7d
 801c6e4:	3ec71de3 	.word	0x3ec71de3
 801c6e8:	19c161d5 	.word	0x19c161d5
 801c6ec:	bf2a01a0 	.word	0xbf2a01a0
 801c6f0:	1110f8a6 	.word	0x1110f8a6
 801c6f4:	3f811111 	.word	0x3f811111
 801c6f8:	55555549 	.word	0x55555549
 801c6fc:	bfc55555 	.word	0xbfc55555
 801c700:	55555549 	.word	0x55555549
 801c704:	3fc55555 	.word	0x3fc55555

0801c708 <__ieee754_rem_pio2>:
 801c708:	b570      	push	{r4, r5, r6, lr}
 801c70a:	eeb0 7b40 	vmov.f64	d7, d0
 801c70e:	ee17 5a90 	vmov	r5, s15
 801c712:	4b99      	ldr	r3, [pc, #612]	@ (801c978 <__ieee754_rem_pio2+0x270>)
 801c714:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801c718:	429e      	cmp	r6, r3
 801c71a:	b088      	sub	sp, #32
 801c71c:	4604      	mov	r4, r0
 801c71e:	d807      	bhi.n	801c730 <__ieee754_rem_pio2+0x28>
 801c720:	2200      	movs	r2, #0
 801c722:	2300      	movs	r3, #0
 801c724:	ed84 0b00 	vstr	d0, [r4]
 801c728:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c72c:	2000      	movs	r0, #0
 801c72e:	e01b      	b.n	801c768 <__ieee754_rem_pio2+0x60>
 801c730:	4b92      	ldr	r3, [pc, #584]	@ (801c97c <__ieee754_rem_pio2+0x274>)
 801c732:	429e      	cmp	r6, r3
 801c734:	d83b      	bhi.n	801c7ae <__ieee754_rem_pio2+0xa6>
 801c736:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801c73a:	2d00      	cmp	r5, #0
 801c73c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801c938 <__ieee754_rem_pio2+0x230>
 801c740:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801c744:	dd19      	ble.n	801c77a <__ieee754_rem_pio2+0x72>
 801c746:	ee30 7b46 	vsub.f64	d7, d0, d6
 801c74a:	429e      	cmp	r6, r3
 801c74c:	d00e      	beq.n	801c76c <__ieee754_rem_pio2+0x64>
 801c74e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801c940 <__ieee754_rem_pio2+0x238>
 801c752:	ee37 6b45 	vsub.f64	d6, d7, d5
 801c756:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c75a:	ed84 6b00 	vstr	d6, [r4]
 801c75e:	ee37 7b45 	vsub.f64	d7, d7, d5
 801c762:	ed84 7b02 	vstr	d7, [r4, #8]
 801c766:	2001      	movs	r0, #1
 801c768:	b008      	add	sp, #32
 801c76a:	bd70      	pop	{r4, r5, r6, pc}
 801c76c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801c948 <__ieee754_rem_pio2+0x240>
 801c770:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801c950 <__ieee754_rem_pio2+0x248>
 801c774:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c778:	e7eb      	b.n	801c752 <__ieee754_rem_pio2+0x4a>
 801c77a:	429e      	cmp	r6, r3
 801c77c:	ee30 7b06 	vadd.f64	d7, d0, d6
 801c780:	d00e      	beq.n	801c7a0 <__ieee754_rem_pio2+0x98>
 801c782:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801c940 <__ieee754_rem_pio2+0x238>
 801c786:	ee37 6b05 	vadd.f64	d6, d7, d5
 801c78a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c78e:	ed84 6b00 	vstr	d6, [r4]
 801c792:	ee37 7b05 	vadd.f64	d7, d7, d5
 801c796:	f04f 30ff 	mov.w	r0, #4294967295
 801c79a:	ed84 7b02 	vstr	d7, [r4, #8]
 801c79e:	e7e3      	b.n	801c768 <__ieee754_rem_pio2+0x60>
 801c7a0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801c948 <__ieee754_rem_pio2+0x240>
 801c7a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801c950 <__ieee754_rem_pio2+0x248>
 801c7a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c7ac:	e7eb      	b.n	801c786 <__ieee754_rem_pio2+0x7e>
 801c7ae:	4b74      	ldr	r3, [pc, #464]	@ (801c980 <__ieee754_rem_pio2+0x278>)
 801c7b0:	429e      	cmp	r6, r3
 801c7b2:	d870      	bhi.n	801c896 <__ieee754_rem_pio2+0x18e>
 801c7b4:	f000 f8ec 	bl	801c990 <fabs>
 801c7b8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801c7bc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801c958 <__ieee754_rem_pio2+0x250>
 801c7c0:	eea0 7b06 	vfma.f64	d7, d0, d6
 801c7c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801c7c8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801c7cc:	ee17 0a90 	vmov	r0, s15
 801c7d0:	eeb1 4b45 	vneg.f64	d4, d5
 801c7d4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801c938 <__ieee754_rem_pio2+0x230>
 801c7d8:	eea5 0b47 	vfms.f64	d0, d5, d7
 801c7dc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801c940 <__ieee754_rem_pio2+0x238>
 801c7e0:	281f      	cmp	r0, #31
 801c7e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 801c7e6:	ee30 6b47 	vsub.f64	d6, d0, d7
 801c7ea:	dc05      	bgt.n	801c7f8 <__ieee754_rem_pio2+0xf0>
 801c7ec:	4b65      	ldr	r3, [pc, #404]	@ (801c984 <__ieee754_rem_pio2+0x27c>)
 801c7ee:	1e42      	subs	r2, r0, #1
 801c7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c7f4:	42b3      	cmp	r3, r6
 801c7f6:	d109      	bne.n	801c80c <__ieee754_rem_pio2+0x104>
 801c7f8:	ee16 3a90 	vmov	r3, s13
 801c7fc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801c800:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801c804:	2b10      	cmp	r3, #16
 801c806:	ea4f 5226 	mov.w	r2, r6, asr #20
 801c80a:	dc02      	bgt.n	801c812 <__ieee754_rem_pio2+0x10a>
 801c80c:	ed84 6b00 	vstr	d6, [r4]
 801c810:	e01a      	b.n	801c848 <__ieee754_rem_pio2+0x140>
 801c812:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801c948 <__ieee754_rem_pio2+0x240>
 801c816:	eeb0 6b40 	vmov.f64	d6, d0
 801c81a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801c81e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801c822:	eea4 7b03 	vfma.f64	d7, d4, d3
 801c826:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801c950 <__ieee754_rem_pio2+0x248>
 801c82a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801c82e:	ee36 3b47 	vsub.f64	d3, d6, d7
 801c832:	ee13 3a90 	vmov	r3, s7
 801c836:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801c83a:	1ad3      	subs	r3, r2, r3
 801c83c:	2b31      	cmp	r3, #49	@ 0x31
 801c83e:	dc17      	bgt.n	801c870 <__ieee754_rem_pio2+0x168>
 801c840:	eeb0 0b46 	vmov.f64	d0, d6
 801c844:	ed84 3b00 	vstr	d3, [r4]
 801c848:	ed94 6b00 	vldr	d6, [r4]
 801c84c:	2d00      	cmp	r5, #0
 801c84e:	ee30 0b46 	vsub.f64	d0, d0, d6
 801c852:	ee30 0b47 	vsub.f64	d0, d0, d7
 801c856:	ed84 0b02 	vstr	d0, [r4, #8]
 801c85a:	da85      	bge.n	801c768 <__ieee754_rem_pio2+0x60>
 801c85c:	eeb1 6b46 	vneg.f64	d6, d6
 801c860:	eeb1 0b40 	vneg.f64	d0, d0
 801c864:	ed84 6b00 	vstr	d6, [r4]
 801c868:	ed84 0b02 	vstr	d0, [r4, #8]
 801c86c:	4240      	negs	r0, r0
 801c86e:	e77b      	b.n	801c768 <__ieee754_rem_pio2+0x60>
 801c870:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801c960 <__ieee754_rem_pio2+0x258>
 801c874:	eeb0 0b46 	vmov.f64	d0, d6
 801c878:	eea4 0b07 	vfma.f64	d0, d4, d7
 801c87c:	ee36 6b40 	vsub.f64	d6, d6, d0
 801c880:	eea4 6b07 	vfma.f64	d6, d4, d7
 801c884:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801c968 <__ieee754_rem_pio2+0x260>
 801c888:	eeb0 7b46 	vmov.f64	d7, d6
 801c88c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801c890:	ee30 6b47 	vsub.f64	d6, d0, d7
 801c894:	e7ba      	b.n	801c80c <__ieee754_rem_pio2+0x104>
 801c896:	4b3c      	ldr	r3, [pc, #240]	@ (801c988 <__ieee754_rem_pio2+0x280>)
 801c898:	429e      	cmp	r6, r3
 801c89a:	d906      	bls.n	801c8aa <__ieee754_rem_pio2+0x1a2>
 801c89c:	ee30 7b40 	vsub.f64	d7, d0, d0
 801c8a0:	ed80 7b02 	vstr	d7, [r0, #8]
 801c8a4:	ed80 7b00 	vstr	d7, [r0]
 801c8a8:	e740      	b.n	801c72c <__ieee754_rem_pio2+0x24>
 801c8aa:	ee10 3a10 	vmov	r3, s0
 801c8ae:	1532      	asrs	r2, r6, #20
 801c8b0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801c8b4:	4618      	mov	r0, r3
 801c8b6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801c8ba:	ec41 0b17 	vmov	d7, r0, r1
 801c8be:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801c8c2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801c970 <__ieee754_rem_pio2+0x268>
 801c8c6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801c8ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c8ce:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c8d2:	ee27 7b05 	vmul.f64	d7, d7, d5
 801c8d6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801c8da:	a808      	add	r0, sp, #32
 801c8dc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801c8e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c8e4:	ed8d 6b04 	vstr	d6, [sp, #16]
 801c8e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 801c8ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c8f0:	2103      	movs	r1, #3
 801c8f2:	ed30 7b02 	vldmdb	r0!, {d7}
 801c8f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8fe:	460b      	mov	r3, r1
 801c900:	f101 31ff 	add.w	r1, r1, #4294967295
 801c904:	d0f5      	beq.n	801c8f2 <__ieee754_rem_pio2+0x1ea>
 801c906:	4921      	ldr	r1, [pc, #132]	@ (801c98c <__ieee754_rem_pio2+0x284>)
 801c908:	9101      	str	r1, [sp, #4]
 801c90a:	2102      	movs	r1, #2
 801c90c:	9100      	str	r1, [sp, #0]
 801c90e:	a802      	add	r0, sp, #8
 801c910:	4621      	mov	r1, r4
 801c912:	f000 f845 	bl	801c9a0 <__kernel_rem_pio2>
 801c916:	2d00      	cmp	r5, #0
 801c918:	f6bf af26 	bge.w	801c768 <__ieee754_rem_pio2+0x60>
 801c91c:	ed94 7b00 	vldr	d7, [r4]
 801c920:	eeb1 7b47 	vneg.f64	d7, d7
 801c924:	ed84 7b00 	vstr	d7, [r4]
 801c928:	ed94 7b02 	vldr	d7, [r4, #8]
 801c92c:	eeb1 7b47 	vneg.f64	d7, d7
 801c930:	ed84 7b02 	vstr	d7, [r4, #8]
 801c934:	e79a      	b.n	801c86c <__ieee754_rem_pio2+0x164>
 801c936:	bf00      	nop
 801c938:	54400000 	.word	0x54400000
 801c93c:	3ff921fb 	.word	0x3ff921fb
 801c940:	1a626331 	.word	0x1a626331
 801c944:	3dd0b461 	.word	0x3dd0b461
 801c948:	1a600000 	.word	0x1a600000
 801c94c:	3dd0b461 	.word	0x3dd0b461
 801c950:	2e037073 	.word	0x2e037073
 801c954:	3ba3198a 	.word	0x3ba3198a
 801c958:	6dc9c883 	.word	0x6dc9c883
 801c95c:	3fe45f30 	.word	0x3fe45f30
 801c960:	2e000000 	.word	0x2e000000
 801c964:	3ba3198a 	.word	0x3ba3198a
 801c968:	252049c1 	.word	0x252049c1
 801c96c:	397b839a 	.word	0x397b839a
 801c970:	00000000 	.word	0x00000000
 801c974:	41700000 	.word	0x41700000
 801c978:	3fe921fb 	.word	0x3fe921fb
 801c97c:	4002d97b 	.word	0x4002d97b
 801c980:	413921fb 	.word	0x413921fb
 801c984:	0801dd58 	.word	0x0801dd58
 801c988:	7fefffff 	.word	0x7fefffff
 801c98c:	0801ddd8 	.word	0x0801ddd8

0801c990 <fabs>:
 801c990:	ec51 0b10 	vmov	r0, r1, d0
 801c994:	4602      	mov	r2, r0
 801c996:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c99a:	ec43 2b10 	vmov	d0, r2, r3
 801c99e:	4770      	bx	lr

0801c9a0 <__kernel_rem_pio2>:
 801c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9a4:	ed2d 8b06 	vpush	{d8-d10}
 801c9a8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801c9ac:	469b      	mov	fp, r3
 801c9ae:	9001      	str	r0, [sp, #4]
 801c9b0:	4bbb      	ldr	r3, [pc, #748]	@ (801cca0 <__kernel_rem_pio2+0x300>)
 801c9b2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801c9b4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801c9b8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801c9bc:	f112 0f14 	cmn.w	r2, #20
 801c9c0:	bfa8      	it	ge
 801c9c2:	1ed3      	subge	r3, r2, #3
 801c9c4:	f10b 3aff 	add.w	sl, fp, #4294967295
 801c9c8:	bfb8      	it	lt
 801c9ca:	2300      	movlt	r3, #0
 801c9cc:	f06f 0517 	mvn.w	r5, #23
 801c9d0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801cc88 <__kernel_rem_pio2+0x2e8>
 801c9d4:	bfa4      	itt	ge
 801c9d6:	2018      	movge	r0, #24
 801c9d8:	fb93 f3f0 	sdivge	r3, r3, r0
 801c9dc:	fb03 5505 	mla	r5, r3, r5, r5
 801c9e0:	eba3 040a 	sub.w	r4, r3, sl
 801c9e4:	4415      	add	r5, r2
 801c9e6:	460f      	mov	r7, r1
 801c9e8:	eb09 060a 	add.w	r6, r9, sl
 801c9ec:	a81a      	add	r0, sp, #104	@ 0x68
 801c9ee:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801c9f2:	2200      	movs	r2, #0
 801c9f4:	42b2      	cmp	r2, r6
 801c9f6:	dd0e      	ble.n	801ca16 <__kernel_rem_pio2+0x76>
 801c9f8:	aa1a      	add	r2, sp, #104	@ 0x68
 801c9fa:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801c9fe:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801ca02:	2600      	movs	r6, #0
 801ca04:	454e      	cmp	r6, r9
 801ca06:	dc25      	bgt.n	801ca54 <__kernel_rem_pio2+0xb4>
 801ca08:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801cc88 <__kernel_rem_pio2+0x2e8>
 801ca0c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801ca10:	4614      	mov	r4, r2
 801ca12:	2000      	movs	r0, #0
 801ca14:	e015      	b.n	801ca42 <__kernel_rem_pio2+0xa2>
 801ca16:	42d4      	cmn	r4, r2
 801ca18:	d409      	bmi.n	801ca2e <__kernel_rem_pio2+0x8e>
 801ca1a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801ca1e:	ee07 1a90 	vmov	s15, r1
 801ca22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ca26:	eca0 7b02 	vstmia	r0!, {d7}
 801ca2a:	3201      	adds	r2, #1
 801ca2c:	e7e2      	b.n	801c9f4 <__kernel_rem_pio2+0x54>
 801ca2e:	eeb0 7b46 	vmov.f64	d7, d6
 801ca32:	e7f8      	b.n	801ca26 <__kernel_rem_pio2+0x86>
 801ca34:	ecbc 5b02 	vldmia	ip!, {d5}
 801ca38:	ed94 6b00 	vldr	d6, [r4]
 801ca3c:	3001      	adds	r0, #1
 801ca3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ca42:	4550      	cmp	r0, sl
 801ca44:	f1a4 0408 	sub.w	r4, r4, #8
 801ca48:	ddf4      	ble.n	801ca34 <__kernel_rem_pio2+0x94>
 801ca4a:	ecae 7b02 	vstmia	lr!, {d7}
 801ca4e:	3601      	adds	r6, #1
 801ca50:	3208      	adds	r2, #8
 801ca52:	e7d7      	b.n	801ca04 <__kernel_rem_pio2+0x64>
 801ca54:	aa06      	add	r2, sp, #24
 801ca56:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801cc90 <__kernel_rem_pio2+0x2f0>
 801ca5a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801cc98 <__kernel_rem_pio2+0x2f8>
 801ca5e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801ca62:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801ca66:	9203      	str	r2, [sp, #12]
 801ca68:	9302      	str	r3, [sp, #8]
 801ca6a:	464c      	mov	r4, r9
 801ca6c:	00e3      	lsls	r3, r4, #3
 801ca6e:	9304      	str	r3, [sp, #16]
 801ca70:	ab92      	add	r3, sp, #584	@ 0x248
 801ca72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ca76:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801ca7a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801ca7c:	ab06      	add	r3, sp, #24
 801ca7e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801ca82:	461e      	mov	r6, r3
 801ca84:	4620      	mov	r0, r4
 801ca86:	2800      	cmp	r0, #0
 801ca88:	f1a2 0208 	sub.w	r2, r2, #8
 801ca8c:	dc4a      	bgt.n	801cb24 <__kernel_rem_pio2+0x184>
 801ca8e:	4628      	mov	r0, r5
 801ca90:	9305      	str	r3, [sp, #20]
 801ca92:	f000 fa01 	bl	801ce98 <scalbn>
 801ca96:	eeb0 8b40 	vmov.f64	d8, d0
 801ca9a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801ca9e:	ee28 0b00 	vmul.f64	d0, d8, d0
 801caa2:	f000 fa79 	bl	801cf98 <floor>
 801caa6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801caaa:	eea0 8b47 	vfms.f64	d8, d0, d7
 801caae:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801cab2:	2d00      	cmp	r5, #0
 801cab4:	ee17 8a90 	vmov	r8, s15
 801cab8:	9b05      	ldr	r3, [sp, #20]
 801caba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cabe:	ee38 8b47 	vsub.f64	d8, d8, d7
 801cac2:	dd41      	ble.n	801cb48 <__kernel_rem_pio2+0x1a8>
 801cac4:	1e60      	subs	r0, r4, #1
 801cac6:	aa06      	add	r2, sp, #24
 801cac8:	f1c5 0c18 	rsb	ip, r5, #24
 801cacc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801cad0:	fa46 f20c 	asr.w	r2, r6, ip
 801cad4:	4490      	add	r8, r2
 801cad6:	fa02 f20c 	lsl.w	r2, r2, ip
 801cada:	1ab6      	subs	r6, r6, r2
 801cadc:	aa06      	add	r2, sp, #24
 801cade:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801cae2:	f1c5 0217 	rsb	r2, r5, #23
 801cae6:	4116      	asrs	r6, r2
 801cae8:	2e00      	cmp	r6, #0
 801caea:	dd3c      	ble.n	801cb66 <__kernel_rem_pio2+0x1c6>
 801caec:	f04f 0c00 	mov.w	ip, #0
 801caf0:	f108 0801 	add.w	r8, r8, #1
 801caf4:	4660      	mov	r0, ip
 801caf6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801cafa:	4564      	cmp	r4, ip
 801cafc:	dc66      	bgt.n	801cbcc <__kernel_rem_pio2+0x22c>
 801cafe:	2d00      	cmp	r5, #0
 801cb00:	dd03      	ble.n	801cb0a <__kernel_rem_pio2+0x16a>
 801cb02:	2d01      	cmp	r5, #1
 801cb04:	d072      	beq.n	801cbec <__kernel_rem_pio2+0x24c>
 801cb06:	2d02      	cmp	r5, #2
 801cb08:	d07a      	beq.n	801cc00 <__kernel_rem_pio2+0x260>
 801cb0a:	2e02      	cmp	r6, #2
 801cb0c:	d12b      	bne.n	801cb66 <__kernel_rem_pio2+0x1c6>
 801cb0e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801cb12:	ee30 8b48 	vsub.f64	d8, d0, d8
 801cb16:	b330      	cbz	r0, 801cb66 <__kernel_rem_pio2+0x1c6>
 801cb18:	4628      	mov	r0, r5
 801cb1a:	f000 f9bd 	bl	801ce98 <scalbn>
 801cb1e:	ee38 8b40 	vsub.f64	d8, d8, d0
 801cb22:	e020      	b.n	801cb66 <__kernel_rem_pio2+0x1c6>
 801cb24:	ee20 7b09 	vmul.f64	d7, d0, d9
 801cb28:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801cb2c:	3801      	subs	r0, #1
 801cb2e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801cb32:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801cb36:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801cb3a:	eca6 0a01 	vstmia	r6!, {s0}
 801cb3e:	ed92 0b00 	vldr	d0, [r2]
 801cb42:	ee37 0b00 	vadd.f64	d0, d7, d0
 801cb46:	e79e      	b.n	801ca86 <__kernel_rem_pio2+0xe6>
 801cb48:	d105      	bne.n	801cb56 <__kernel_rem_pio2+0x1b6>
 801cb4a:	1e62      	subs	r2, r4, #1
 801cb4c:	a906      	add	r1, sp, #24
 801cb4e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801cb52:	15f6      	asrs	r6, r6, #23
 801cb54:	e7c8      	b.n	801cae8 <__kernel_rem_pio2+0x148>
 801cb56:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801cb5a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801cb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb62:	da31      	bge.n	801cbc8 <__kernel_rem_pio2+0x228>
 801cb64:	2600      	movs	r6, #0
 801cb66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801cb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb6e:	f040 809b 	bne.w	801cca8 <__kernel_rem_pio2+0x308>
 801cb72:	1e62      	subs	r2, r4, #1
 801cb74:	2000      	movs	r0, #0
 801cb76:	454a      	cmp	r2, r9
 801cb78:	da49      	bge.n	801cc0e <__kernel_rem_pio2+0x26e>
 801cb7a:	2800      	cmp	r0, #0
 801cb7c:	d062      	beq.n	801cc44 <__kernel_rem_pio2+0x2a4>
 801cb7e:	3c01      	subs	r4, #1
 801cb80:	ab06      	add	r3, sp, #24
 801cb82:	3d18      	subs	r5, #24
 801cb84:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d0f8      	beq.n	801cb7e <__kernel_rem_pio2+0x1de>
 801cb8c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801cb90:	4628      	mov	r0, r5
 801cb92:	f000 f981 	bl	801ce98 <scalbn>
 801cb96:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801cc90 <__kernel_rem_pio2+0x2f0>
 801cb9a:	1c62      	adds	r2, r4, #1
 801cb9c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801cb9e:	00d3      	lsls	r3, r2, #3
 801cba0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801cba4:	4622      	mov	r2, r4
 801cba6:	2a00      	cmp	r2, #0
 801cba8:	f280 80a8 	bge.w	801ccfc <__kernel_rem_pio2+0x35c>
 801cbac:	4622      	mov	r2, r4
 801cbae:	2a00      	cmp	r2, #0
 801cbb0:	f2c0 80c6 	blt.w	801cd40 <__kernel_rem_pio2+0x3a0>
 801cbb4:	a96a      	add	r1, sp, #424	@ 0x1a8
 801cbb6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801cbba:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801cc88 <__kernel_rem_pio2+0x2e8>
 801cbbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801cca4 <__kernel_rem_pio2+0x304>
 801cbc2:	2000      	movs	r0, #0
 801cbc4:	1aa1      	subs	r1, r4, r2
 801cbc6:	e0b0      	b.n	801cd2a <__kernel_rem_pio2+0x38a>
 801cbc8:	2602      	movs	r6, #2
 801cbca:	e78f      	b.n	801caec <__kernel_rem_pio2+0x14c>
 801cbcc:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbd0:	b948      	cbnz	r0, 801cbe6 <__kernel_rem_pio2+0x246>
 801cbd2:	b122      	cbz	r2, 801cbde <__kernel_rem_pio2+0x23e>
 801cbd4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801cbd8:	f843 2c04 	str.w	r2, [r3, #-4]
 801cbdc:	2201      	movs	r2, #1
 801cbde:	f10c 0c01 	add.w	ip, ip, #1
 801cbe2:	4610      	mov	r0, r2
 801cbe4:	e789      	b.n	801cafa <__kernel_rem_pio2+0x15a>
 801cbe6:	ebae 0202 	sub.w	r2, lr, r2
 801cbea:	e7f5      	b.n	801cbd8 <__kernel_rem_pio2+0x238>
 801cbec:	1e62      	subs	r2, r4, #1
 801cbee:	ab06      	add	r3, sp, #24
 801cbf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cbf4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801cbf8:	a906      	add	r1, sp, #24
 801cbfa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801cbfe:	e784      	b.n	801cb0a <__kernel_rem_pio2+0x16a>
 801cc00:	1e62      	subs	r2, r4, #1
 801cc02:	ab06      	add	r3, sp, #24
 801cc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cc08:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801cc0c:	e7f4      	b.n	801cbf8 <__kernel_rem_pio2+0x258>
 801cc0e:	ab06      	add	r3, sp, #24
 801cc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cc14:	3a01      	subs	r2, #1
 801cc16:	4318      	orrs	r0, r3
 801cc18:	e7ad      	b.n	801cb76 <__kernel_rem_pio2+0x1d6>
 801cc1a:	3301      	adds	r3, #1
 801cc1c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801cc20:	2800      	cmp	r0, #0
 801cc22:	d0fa      	beq.n	801cc1a <__kernel_rem_pio2+0x27a>
 801cc24:	9a04      	ldr	r2, [sp, #16]
 801cc26:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801cc2a:	446a      	add	r2, sp
 801cc2c:	eb04 000b 	add.w	r0, r4, fp
 801cc30:	a91a      	add	r1, sp, #104	@ 0x68
 801cc32:	1c66      	adds	r6, r4, #1
 801cc34:	3a98      	subs	r2, #152	@ 0x98
 801cc36:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801cc3a:	4423      	add	r3, r4
 801cc3c:	42b3      	cmp	r3, r6
 801cc3e:	da04      	bge.n	801cc4a <__kernel_rem_pio2+0x2aa>
 801cc40:	461c      	mov	r4, r3
 801cc42:	e713      	b.n	801ca6c <__kernel_rem_pio2+0xcc>
 801cc44:	9a03      	ldr	r2, [sp, #12]
 801cc46:	2301      	movs	r3, #1
 801cc48:	e7e8      	b.n	801cc1c <__kernel_rem_pio2+0x27c>
 801cc4a:	9902      	ldr	r1, [sp, #8]
 801cc4c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801cc50:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801cc54:	9104      	str	r1, [sp, #16]
 801cc56:	ee07 1a90 	vmov	s15, r1
 801cc5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cc5e:	2400      	movs	r4, #0
 801cc60:	eca0 7b02 	vstmia	r0!, {d7}
 801cc64:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801cc88 <__kernel_rem_pio2+0x2e8>
 801cc68:	4686      	mov	lr, r0
 801cc6a:	4554      	cmp	r4, sl
 801cc6c:	dd03      	ble.n	801cc76 <__kernel_rem_pio2+0x2d6>
 801cc6e:	eca2 7b02 	vstmia	r2!, {d7}
 801cc72:	3601      	adds	r6, #1
 801cc74:	e7e2      	b.n	801cc3c <__kernel_rem_pio2+0x29c>
 801cc76:	ecbc 5b02 	vldmia	ip!, {d5}
 801cc7a:	ed3e 6b02 	vldmdb	lr!, {d6}
 801cc7e:	3401      	adds	r4, #1
 801cc80:	eea5 7b06 	vfma.f64	d7, d5, d6
 801cc84:	e7f1      	b.n	801cc6a <__kernel_rem_pio2+0x2ca>
 801cc86:	bf00      	nop
	...
 801cc94:	3e700000 	.word	0x3e700000
 801cc98:	00000000 	.word	0x00000000
 801cc9c:	41700000 	.word	0x41700000
 801cca0:	0801df20 	.word	0x0801df20
 801cca4:	0801dee0 	.word	0x0801dee0
 801cca8:	4268      	negs	r0, r5
 801ccaa:	eeb0 0b48 	vmov.f64	d0, d8
 801ccae:	f000 f8f3 	bl	801ce98 <scalbn>
 801ccb2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801ce80 <__kernel_rem_pio2+0x4e0>
 801ccb6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801ccba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccbe:	db17      	blt.n	801ccf0 <__kernel_rem_pio2+0x350>
 801ccc0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801ce88 <__kernel_rem_pio2+0x4e8>
 801ccc4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801ccc8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801cccc:	aa06      	add	r2, sp, #24
 801ccce:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801ccd2:	eea5 0b46 	vfms.f64	d0, d5, d6
 801ccd6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801ccda:	3518      	adds	r5, #24
 801ccdc:	ee10 3a10 	vmov	r3, s0
 801cce0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801cce4:	ee17 3a10 	vmov	r3, s14
 801cce8:	3401      	adds	r4, #1
 801ccea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801ccee:	e74d      	b.n	801cb8c <__kernel_rem_pio2+0x1ec>
 801ccf0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801ccf4:	aa06      	add	r2, sp, #24
 801ccf6:	ee10 3a10 	vmov	r3, s0
 801ccfa:	e7f6      	b.n	801ccea <__kernel_rem_pio2+0x34a>
 801ccfc:	a806      	add	r0, sp, #24
 801ccfe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801cd02:	9001      	str	r0, [sp, #4]
 801cd04:	ee07 0a90 	vmov	s15, r0
 801cd08:	3a01      	subs	r2, #1
 801cd0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cd0e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801cd12:	ee20 0b06 	vmul.f64	d0, d0, d6
 801cd16:	ed21 7b02 	vstmdb	r1!, {d7}
 801cd1a:	e744      	b.n	801cba6 <__kernel_rem_pio2+0x206>
 801cd1c:	ecbc 5b02 	vldmia	ip!, {d5}
 801cd20:	ecb5 6b02 	vldmia	r5!, {d6}
 801cd24:	3001      	adds	r0, #1
 801cd26:	eea5 7b06 	vfma.f64	d7, d5, d6
 801cd2a:	4548      	cmp	r0, r9
 801cd2c:	dc01      	bgt.n	801cd32 <__kernel_rem_pio2+0x392>
 801cd2e:	4281      	cmp	r1, r0
 801cd30:	daf4      	bge.n	801cd1c <__kernel_rem_pio2+0x37c>
 801cd32:	a842      	add	r0, sp, #264	@ 0x108
 801cd34:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801cd38:	ed81 7b00 	vstr	d7, [r1]
 801cd3c:	3a01      	subs	r2, #1
 801cd3e:	e736      	b.n	801cbae <__kernel_rem_pio2+0x20e>
 801cd40:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801cd42:	2a02      	cmp	r2, #2
 801cd44:	dc0a      	bgt.n	801cd5c <__kernel_rem_pio2+0x3bc>
 801cd46:	2a00      	cmp	r2, #0
 801cd48:	dc2d      	bgt.n	801cda6 <__kernel_rem_pio2+0x406>
 801cd4a:	d046      	beq.n	801cdda <__kernel_rem_pio2+0x43a>
 801cd4c:	f008 0007 	and.w	r0, r8, #7
 801cd50:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801cd54:	ecbd 8b06 	vpop	{d8-d10}
 801cd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd5c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801cd5e:	2a03      	cmp	r2, #3
 801cd60:	d1f4      	bne.n	801cd4c <__kernel_rem_pio2+0x3ac>
 801cd62:	a942      	add	r1, sp, #264	@ 0x108
 801cd64:	f1a3 0208 	sub.w	r2, r3, #8
 801cd68:	440a      	add	r2, r1
 801cd6a:	4611      	mov	r1, r2
 801cd6c:	4620      	mov	r0, r4
 801cd6e:	2800      	cmp	r0, #0
 801cd70:	f1a1 0108 	sub.w	r1, r1, #8
 801cd74:	dc52      	bgt.n	801ce1c <__kernel_rem_pio2+0x47c>
 801cd76:	4621      	mov	r1, r4
 801cd78:	2901      	cmp	r1, #1
 801cd7a:	f1a2 0208 	sub.w	r2, r2, #8
 801cd7e:	dc5d      	bgt.n	801ce3c <__kernel_rem_pio2+0x49c>
 801cd80:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801ce90 <__kernel_rem_pio2+0x4f0>
 801cd84:	aa42      	add	r2, sp, #264	@ 0x108
 801cd86:	4413      	add	r3, r2
 801cd88:	2c01      	cmp	r4, #1
 801cd8a:	dc67      	bgt.n	801ce5c <__kernel_rem_pio2+0x4bc>
 801cd8c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801cd90:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801cd94:	2e00      	cmp	r6, #0
 801cd96:	d167      	bne.n	801ce68 <__kernel_rem_pio2+0x4c8>
 801cd98:	ed87 5b00 	vstr	d5, [r7]
 801cd9c:	ed87 6b02 	vstr	d6, [r7, #8]
 801cda0:	ed87 7b04 	vstr	d7, [r7, #16]
 801cda4:	e7d2      	b.n	801cd4c <__kernel_rem_pio2+0x3ac>
 801cda6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801ce90 <__kernel_rem_pio2+0x4f0>
 801cdaa:	aa42      	add	r2, sp, #264	@ 0x108
 801cdac:	4413      	add	r3, r2
 801cdae:	4622      	mov	r2, r4
 801cdb0:	2a00      	cmp	r2, #0
 801cdb2:	da24      	bge.n	801cdfe <__kernel_rem_pio2+0x45e>
 801cdb4:	b34e      	cbz	r6, 801ce0a <__kernel_rem_pio2+0x46a>
 801cdb6:	eeb1 7b46 	vneg.f64	d7, d6
 801cdba:	ed87 7b00 	vstr	d7, [r7]
 801cdbe:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801cdc2:	aa44      	add	r2, sp, #272	@ 0x110
 801cdc4:	2301      	movs	r3, #1
 801cdc6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cdca:	429c      	cmp	r4, r3
 801cdcc:	da20      	bge.n	801ce10 <__kernel_rem_pio2+0x470>
 801cdce:	b10e      	cbz	r6, 801cdd4 <__kernel_rem_pio2+0x434>
 801cdd0:	eeb1 7b47 	vneg.f64	d7, d7
 801cdd4:	ed87 7b02 	vstr	d7, [r7, #8]
 801cdd8:	e7b8      	b.n	801cd4c <__kernel_rem_pio2+0x3ac>
 801cdda:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801ce90 <__kernel_rem_pio2+0x4f0>
 801cdde:	aa42      	add	r2, sp, #264	@ 0x108
 801cde0:	4413      	add	r3, r2
 801cde2:	2c00      	cmp	r4, #0
 801cde4:	da05      	bge.n	801cdf2 <__kernel_rem_pio2+0x452>
 801cde6:	b10e      	cbz	r6, 801cdec <__kernel_rem_pio2+0x44c>
 801cde8:	eeb1 7b47 	vneg.f64	d7, d7
 801cdec:	ed87 7b00 	vstr	d7, [r7]
 801cdf0:	e7ac      	b.n	801cd4c <__kernel_rem_pio2+0x3ac>
 801cdf2:	ed33 6b02 	vldmdb	r3!, {d6}
 801cdf6:	3c01      	subs	r4, #1
 801cdf8:	ee37 7b06 	vadd.f64	d7, d7, d6
 801cdfc:	e7f1      	b.n	801cde2 <__kernel_rem_pio2+0x442>
 801cdfe:	ed33 7b02 	vldmdb	r3!, {d7}
 801ce02:	3a01      	subs	r2, #1
 801ce04:	ee36 6b07 	vadd.f64	d6, d6, d7
 801ce08:	e7d2      	b.n	801cdb0 <__kernel_rem_pio2+0x410>
 801ce0a:	eeb0 7b46 	vmov.f64	d7, d6
 801ce0e:	e7d4      	b.n	801cdba <__kernel_rem_pio2+0x41a>
 801ce10:	ecb2 6b02 	vldmia	r2!, {d6}
 801ce14:	3301      	adds	r3, #1
 801ce16:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ce1a:	e7d6      	b.n	801cdca <__kernel_rem_pio2+0x42a>
 801ce1c:	ed91 7b00 	vldr	d7, [r1]
 801ce20:	ed91 5b02 	vldr	d5, [r1, #8]
 801ce24:	3801      	subs	r0, #1
 801ce26:	ee37 6b05 	vadd.f64	d6, d7, d5
 801ce2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ce2e:	ed81 6b00 	vstr	d6, [r1]
 801ce32:	ee37 7b05 	vadd.f64	d7, d7, d5
 801ce36:	ed81 7b02 	vstr	d7, [r1, #8]
 801ce3a:	e798      	b.n	801cd6e <__kernel_rem_pio2+0x3ce>
 801ce3c:	ed92 7b00 	vldr	d7, [r2]
 801ce40:	ed92 5b02 	vldr	d5, [r2, #8]
 801ce44:	3901      	subs	r1, #1
 801ce46:	ee37 6b05 	vadd.f64	d6, d7, d5
 801ce4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ce4e:	ed82 6b00 	vstr	d6, [r2]
 801ce52:	ee37 7b05 	vadd.f64	d7, d7, d5
 801ce56:	ed82 7b02 	vstr	d7, [r2, #8]
 801ce5a:	e78d      	b.n	801cd78 <__kernel_rem_pio2+0x3d8>
 801ce5c:	ed33 6b02 	vldmdb	r3!, {d6}
 801ce60:	3c01      	subs	r4, #1
 801ce62:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ce66:	e78f      	b.n	801cd88 <__kernel_rem_pio2+0x3e8>
 801ce68:	eeb1 5b45 	vneg.f64	d5, d5
 801ce6c:	eeb1 6b46 	vneg.f64	d6, d6
 801ce70:	ed87 5b00 	vstr	d5, [r7]
 801ce74:	eeb1 7b47 	vneg.f64	d7, d7
 801ce78:	ed87 6b02 	vstr	d6, [r7, #8]
 801ce7c:	e790      	b.n	801cda0 <__kernel_rem_pio2+0x400>
 801ce7e:	bf00      	nop
 801ce80:	00000000 	.word	0x00000000
 801ce84:	41700000 	.word	0x41700000
 801ce88:	00000000 	.word	0x00000000
 801ce8c:	3e700000 	.word	0x3e700000
	...

0801ce98 <scalbn>:
 801ce98:	ee10 1a90 	vmov	r1, s1
 801ce9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801cea0:	b98b      	cbnz	r3, 801cec6 <scalbn+0x2e>
 801cea2:	ee10 3a10 	vmov	r3, s0
 801cea6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801ceaa:	4319      	orrs	r1, r3
 801ceac:	d00a      	beq.n	801cec4 <scalbn+0x2c>
 801ceae:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801cf60 <scalbn+0xc8>
 801ceb2:	4b37      	ldr	r3, [pc, #220]	@ (801cf90 <scalbn+0xf8>)
 801ceb4:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ceb8:	4298      	cmp	r0, r3
 801ceba:	da0b      	bge.n	801ced4 <scalbn+0x3c>
 801cebc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801cf68 <scalbn+0xd0>
 801cec0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cec4:	4770      	bx	lr
 801cec6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801ceca:	4293      	cmp	r3, r2
 801cecc:	d107      	bne.n	801cede <scalbn+0x46>
 801cece:	ee30 0b00 	vadd.f64	d0, d0, d0
 801ced2:	4770      	bx	lr
 801ced4:	ee10 1a90 	vmov	r1, s1
 801ced8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801cedc:	3b36      	subs	r3, #54	@ 0x36
 801cede:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801cee2:	4290      	cmp	r0, r2
 801cee4:	dd0d      	ble.n	801cf02 <scalbn+0x6a>
 801cee6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801cf70 <scalbn+0xd8>
 801ceea:	ee10 3a90 	vmov	r3, s1
 801ceee:	eeb0 6b47 	vmov.f64	d6, d7
 801cef2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801cf78 <scalbn+0xe0>
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	fe27 7b05 	vselge.f64	d7, d7, d5
 801cefc:	ee27 0b06 	vmul.f64	d0, d7, d6
 801cf00:	4770      	bx	lr
 801cf02:	4418      	add	r0, r3
 801cf04:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801cf08:	4298      	cmp	r0, r3
 801cf0a:	dcec      	bgt.n	801cee6 <scalbn+0x4e>
 801cf0c:	2800      	cmp	r0, #0
 801cf0e:	dd0a      	ble.n	801cf26 <scalbn+0x8e>
 801cf10:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801cf14:	ec53 2b10 	vmov	r2, r3, d0
 801cf18:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801cf1c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801cf20:	ec43 2b10 	vmov	d0, r2, r3
 801cf24:	4770      	bx	lr
 801cf26:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801cf2a:	da09      	bge.n	801cf40 <scalbn+0xa8>
 801cf2c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801cf68 <scalbn+0xd0>
 801cf30:	ee10 3a90 	vmov	r3, s1
 801cf34:	eeb0 6b47 	vmov.f64	d6, d7
 801cf38:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801cf80 <scalbn+0xe8>
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	e7db      	b.n	801cef8 <scalbn+0x60>
 801cf40:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801cf44:	ec53 2b10 	vmov	r2, r3, d0
 801cf48:	3036      	adds	r0, #54	@ 0x36
 801cf4a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801cf4e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801cf52:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801cf88 <scalbn+0xf0>
 801cf56:	ec43 2b10 	vmov	d0, r2, r3
 801cf5a:	e7b1      	b.n	801cec0 <scalbn+0x28>
 801cf5c:	f3af 8000 	nop.w
 801cf60:	00000000 	.word	0x00000000
 801cf64:	43500000 	.word	0x43500000
 801cf68:	c2f8f359 	.word	0xc2f8f359
 801cf6c:	01a56e1f 	.word	0x01a56e1f
 801cf70:	8800759c 	.word	0x8800759c
 801cf74:	7e37e43c 	.word	0x7e37e43c
 801cf78:	8800759c 	.word	0x8800759c
 801cf7c:	fe37e43c 	.word	0xfe37e43c
 801cf80:	c2f8f359 	.word	0xc2f8f359
 801cf84:	81a56e1f 	.word	0x81a56e1f
 801cf88:	00000000 	.word	0x00000000
 801cf8c:	3c900000 	.word	0x3c900000
 801cf90:	ffff3cb0 	.word	0xffff3cb0
 801cf94:	00000000 	.word	0x00000000

0801cf98 <floor>:
 801cf98:	ee10 3a90 	vmov	r3, s1
 801cf9c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801cfa0:	ee10 2a10 	vmov	r2, s0
 801cfa4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801cfa8:	2913      	cmp	r1, #19
 801cfaa:	b530      	push	{r4, r5, lr}
 801cfac:	4615      	mov	r5, r2
 801cfae:	dc33      	bgt.n	801d018 <floor+0x80>
 801cfb0:	2900      	cmp	r1, #0
 801cfb2:	da18      	bge.n	801cfe6 <floor+0x4e>
 801cfb4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801d078 <floor+0xe0>
 801cfb8:	ee30 0b07 	vadd.f64	d0, d0, d7
 801cfbc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cfc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfc4:	dd0a      	ble.n	801cfdc <floor+0x44>
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	da50      	bge.n	801d06c <floor+0xd4>
 801cfca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cfce:	4313      	orrs	r3, r2
 801cfd0:	2200      	movs	r2, #0
 801cfd2:	4293      	cmp	r3, r2
 801cfd4:	4b2a      	ldr	r3, [pc, #168]	@ (801d080 <floor+0xe8>)
 801cfd6:	bf08      	it	eq
 801cfd8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801cfdc:	4619      	mov	r1, r3
 801cfde:	4610      	mov	r0, r2
 801cfe0:	ec41 0b10 	vmov	d0, r0, r1
 801cfe4:	e01f      	b.n	801d026 <floor+0x8e>
 801cfe6:	4827      	ldr	r0, [pc, #156]	@ (801d084 <floor+0xec>)
 801cfe8:	4108      	asrs	r0, r1
 801cfea:	ea03 0400 	and.w	r4, r3, r0
 801cfee:	4314      	orrs	r4, r2
 801cff0:	d019      	beq.n	801d026 <floor+0x8e>
 801cff2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801d078 <floor+0xe0>
 801cff6:	ee30 0b07 	vadd.f64	d0, d0, d7
 801cffa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d002:	ddeb      	ble.n	801cfdc <floor+0x44>
 801d004:	2b00      	cmp	r3, #0
 801d006:	bfbe      	ittt	lt
 801d008:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801d00c:	410a      	asrlt	r2, r1
 801d00e:	189b      	addlt	r3, r3, r2
 801d010:	ea23 0300 	bic.w	r3, r3, r0
 801d014:	2200      	movs	r2, #0
 801d016:	e7e1      	b.n	801cfdc <floor+0x44>
 801d018:	2933      	cmp	r1, #51	@ 0x33
 801d01a:	dd05      	ble.n	801d028 <floor+0x90>
 801d01c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d020:	d101      	bne.n	801d026 <floor+0x8e>
 801d022:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d026:	bd30      	pop	{r4, r5, pc}
 801d028:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801d02c:	f04f 30ff 	mov.w	r0, #4294967295
 801d030:	40e0      	lsrs	r0, r4
 801d032:	4210      	tst	r0, r2
 801d034:	d0f7      	beq.n	801d026 <floor+0x8e>
 801d036:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d078 <floor+0xe0>
 801d03a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d03e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d046:	ddc9      	ble.n	801cfdc <floor+0x44>
 801d048:	2b00      	cmp	r3, #0
 801d04a:	da02      	bge.n	801d052 <floor+0xba>
 801d04c:	2914      	cmp	r1, #20
 801d04e:	d103      	bne.n	801d058 <floor+0xc0>
 801d050:	3301      	adds	r3, #1
 801d052:	ea22 0200 	bic.w	r2, r2, r0
 801d056:	e7c1      	b.n	801cfdc <floor+0x44>
 801d058:	2401      	movs	r4, #1
 801d05a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801d05e:	fa04 f101 	lsl.w	r1, r4, r1
 801d062:	440a      	add	r2, r1
 801d064:	42aa      	cmp	r2, r5
 801d066:	bf38      	it	cc
 801d068:	191b      	addcc	r3, r3, r4
 801d06a:	e7f2      	b.n	801d052 <floor+0xba>
 801d06c:	2200      	movs	r2, #0
 801d06e:	4613      	mov	r3, r2
 801d070:	e7b4      	b.n	801cfdc <floor+0x44>
 801d072:	bf00      	nop
 801d074:	f3af 8000 	nop.w
 801d078:	8800759c 	.word	0x8800759c
 801d07c:	7e37e43c 	.word	0x7e37e43c
 801d080:	bff00000 	.word	0xbff00000
 801d084:	000fffff 	.word	0x000fffff

0801d088 <_init>:
 801d088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d08a:	bf00      	nop
 801d08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d08e:	bc08      	pop	{r3}
 801d090:	469e      	mov	lr, r3
 801d092:	4770      	bx	lr

0801d094 <_fini>:
 801d094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d096:	bf00      	nop
 801d098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d09a:	bc08      	pop	{r3}
 801d09c:	469e      	mov	lr, r3
 801d09e:	4770      	bx	lr
