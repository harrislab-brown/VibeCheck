
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d510  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001290  0801d7e0  0801d7e0  0001e7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ea70  0801ea70  0001fa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ea78  0801ea78  0001fa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ea7c  0801ea7c  0001fa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002fc  24000000  0801ea80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000150ec  240002fc  0801ed7c  000202fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  240153e8  0801ed7c  000203e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003abc2  00000000  00000000  0002032a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000074ee  00000000  00000000  0005aeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002930  00000000  00000000  000623e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fe8  00000000  00000000  00064d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e66f  00000000  00000000  00066cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c364  00000000  00000000  000a5367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001731ee  00000000  00000000  000e16cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002548b9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c558  00000000  00000000  002548fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000000a6  00000000  00000000  00260e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000067  00000000  00000000  00260efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002fc 	.word	0x240002fc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801d7c8 	.word	0x0801d7c8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000300 	.word	0x24000300
 800030c:	0801d7c8 	.word	0x0801d7c8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <LSM6DS3_Init>:

void LSM6DS3_Init(LSM6DS3* sensor, LSM6DS3_Config* config, SPI_HandleTypeDef* spi,  /* set the configuration parameters that need to be set once */
		GPIO_TypeDef* cs_port, uint16_t cs_pin,
		GPIO_TypeDef* int1_port, uint16_t int1_pin,
		GPIO_TypeDef* int2_port, uint16_t int2_pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	sensor->config = config;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	61da      	str	r2, [r3, #28]
	sensor->spi = spi;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	sensor->cs_port = cs_port;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
	sensor->cs_pin = cs_pin;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	811a      	strh	r2, [r3, #8]
	sensor->int1_port = int1_port;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	60da      	str	r2, [r3, #12]
	sensor->int1_pin = int1_pin;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8c3a      	ldrh	r2, [r7, #32]
 8000ae8:	821a      	strh	r2, [r3, #16]
	sensor->int2_port = int2_port;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aee:	615a      	str	r2, [r3, #20]
	sensor->int2_pin = int2_pin;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000af4:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000af6:	8b3b      	ldrh	r3, [r7, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f00a ff3b 	bl	800b978 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop

08000b0c <LSM6DS3_TestCommunication>:


uint32_t LSM6DS3_TestCommunication(LSM6DS3* sensor)  /* check that the sensor is connected by querying its device ID */
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t reg_data;
	HAL_StatusTypeDef status = LSM6DS3_ReadRegister(sensor, LSM6DS3_REG_WHO_AM_I, &reg_data);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	461a      	mov	r2, r3
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fb25 	bl	800116c <LSM6DS3_ReadRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK && reg_data == LSM6DS3_DEVICE_ID)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000b30:	d101      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
		return 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LSM6DS3_TestCommunication+0x2c>
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LSM6DS3_Configure>:

/* configure the sensor */
/* this should be called each time we change a sensor setting so the chip can be updated */
void LSM6DS3_Configure(LSM6DS3* sensor)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	LSM6DS3_StopAccel(sensor);  /* disable the sensor before messing with the parameters */
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f9d7 	bl	8000efc <LSM6DS3_StopAccel>
	LSM6DS3_StopGyro(sensor);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f9e2 	bl	8000f18 <LSM6DS3_StopGyro>

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_DRDY_PULSE_CFG_G, 0b10000000);  /* pulse the data ready pins instead of latching them */
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	210b      	movs	r1, #11
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fb3b 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT1_CTRL, 0x01);  /* INT1 set when accel data ready (p. 59) */
 8000b5e:	2201      	movs	r2, #1
 8000b60:	210d      	movs	r1, #13
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fb36 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT2_CTRL, 0x02);  /* INT2 set when gyro data ready (p. 60) */
 8000b68:	2202      	movs	r2, #2
 8000b6a:	210e      	movs	r1, #14
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fb31 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL4_C, 0b00000100);  /* disable the I2C interface, also disables the gyro LPF1 (p. 64) */
 8000b72:	2204      	movs	r2, #4
 8000b74:	2113      	movs	r1, #19
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fb2c 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL6_C, 0b00000000);  /* sets the user offset weights to 2^(-10) g/LSB and the gyro LPF bandwidth (p. 66) */
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2115      	movs	r1, #21
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fb27 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL7_G, 0b00000000);  /* disables the gyro HPF (p. 67) */
 8000b86:	2200      	movs	r2, #0
 8000b88:	2116      	movs	r1, #22
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fb22 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL8_XL, 0b00000000);  /* acceleration filters, configured to keep us on the LPF1 path (p. 67) */
 8000b90:	2200      	movs	r2, #0
 8000b92:	2117      	movs	r1, #23
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 fb1d 	bl	80011d4 <LSM6DS3_WriteRegister>

	float x, y, z;
	LSM6DS3_ReadAccel(sensor, &x, &y, &z);  /* just to make sure no status flags get stuck high, read out the data registers (this will reset the data status flags) */
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	f107 0210 	add.w	r2, r7, #16
 8000ba2:	f107 0114 	add.w	r1, r7, #20
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f9c4 	bl	8000f34 <LSM6DS3_ReadAccel>
	LSM6DS3_ReadGyro(sensor, &x, &y, &z);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	f107 0210 	add.w	r2, r7, #16
 8000bb4:	f107 0114 	add.w	r1, r7, #20
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 fa49 	bl	8001050 <LSM6DS3_ReadGyro>
	sensor->accel_x = 0;  /* then reset the local data storage since the values read will likely be garbage */
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
	sensor->accel_y = 0;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
	sensor->accel_z = 0;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	@ 0x28
	sensor->gyro_x = 0;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
	sensor->gyro_y = 0;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	631a      	str	r2, [r3, #48]	@ 0x30
	sensor->gyro_z = 0;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34

	LSM6DS3_WriteOffsets(sensor);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f804 	bl	8000bfc <LSM6DS3_WriteOffsets>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <LSM6DS3_WriteOffsets>:


void LSM6DS3_WriteOffsets(LSM6DS3* sensor)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	/* x, y, z are the DC offsets of the sensor in g */
	/* this function will write to the user offset registers of the accelerometer chip to correct the offset */
	/* we assume the weight of the user offsets is 2^(-10) g/LSB */

	int8_t x_b = (int8_t)(sensor->config->usr_offset_x / 0.0009765625f);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	ed93 7a00 	vldr	s14, [r3]
 8000c0c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c18:	edc7 7a00 	vstr	s15, [r7]
 8000c1c:	783b      	ldrb	r3, [r7, #0]
 8000c1e:	73fb      	strb	r3, [r7, #15]
	int8_t y_b = (int8_t)(sensor->config->usr_offset_y / 0.0009765625f);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c28:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c34:	edc7 7a00 	vstr	s15, [r7]
 8000c38:	783b      	ldrb	r3, [r7, #0]
 8000c3a:	73bb      	strb	r3, [r7, #14]
	int8_t z_b = (int8_t)(sensor->config->usr_offset_z / 0.0009765625f);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c44:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c50:	edc7 7a00 	vstr	s15, [r7]
 8000c54:	783b      	ldrb	r3, [r7, #0]
 8000c56:	737b      	strb	r3, [r7, #13]

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_X_OFS_USR, x_b);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2173      	movs	r1, #115	@ 0x73
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 fab8 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Y_OFS_USR, y_b);
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	461a      	mov	r2, r3
 8000c68:	2174      	movs	r1, #116	@ 0x74
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 fab2 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Z_OFS_USR, z_b);
 8000c70:	7b7b      	ldrb	r3, [r7, #13]
 8000c72:	461a      	mov	r2, r3
 8000c74:	2175      	movs	r1, #117	@ 0x75
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 faac 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	3a800000 	.word	0x3a800000

08000c88 <LSM6DS3_StartAccel>:


void LSM6DS3_StartAccel(LSM6DS3* sensor)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->accel_odr_hz)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d04d      	beq.n	8000d3a <LSM6DS3_StartAccel+0xb2>
 8000c9e:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d84c      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000ca6:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d042      	beq.n	8000d34 <LSM6DS3_StartAccel+0xac>
 8000cae:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d844      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cb6:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d037      	beq.n	8000d2e <LSM6DS3_StartAccel+0xa6>
 8000cbe:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d83c      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cc6:	f240 3241 	movw	r2, #833	@ 0x341
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d02c      	beq.n	8000d28 <LSM6DS3_StartAccel+0xa0>
 8000cce:	f240 3241 	movw	r2, #833	@ 0x341
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d834      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cd6:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000cda:	d022      	beq.n	8000d22 <LSM6DS3_StartAccel+0x9a>
 8000cdc:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000ce0:	d82e      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000ce2:	2bd0      	cmp	r3, #208	@ 0xd0
 8000ce4:	d01a      	beq.n	8000d1c <LSM6DS3_StartAccel+0x94>
 8000ce6:	2bd0      	cmp	r3, #208	@ 0xd0
 8000ce8:	d82a      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cea:	2b68      	cmp	r3, #104	@ 0x68
 8000cec:	d013      	beq.n	8000d16 <LSM6DS3_StartAccel+0x8e>
 8000cee:	2b68      	cmp	r3, #104	@ 0x68
 8000cf0:	d826      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cf2:	2b34      	cmp	r3, #52	@ 0x34
 8000cf4:	d00c      	beq.n	8000d10 <LSM6DS3_StartAccel+0x88>
 8000cf6:	2b34      	cmp	r3, #52	@ 0x34
 8000cf8:	d822      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cfa:	2b0d      	cmp	r3, #13
 8000cfc:	d002      	beq.n	8000d04 <LSM6DS3_StartAccel+0x7c>
 8000cfe:	2b1a      	cmp	r3, #26
 8000d00:	d003      	beq.n	8000d0a <LSM6DS3_StartAccel+0x82>
 8000d02:	e01d      	b.n	8000d40 <LSM6DS3_StartAccel+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_ACCEL_ODR_13HZ;
 8000d04:	2310      	movs	r3, #16
 8000d06:	73fb      	strb	r3, [r7, #15]
		break;
 8000d08:	e01d      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 26:
		odr_data = LSM6DS3_ACCEL_ODR_26HZ;
 8000d0a:	2320      	movs	r3, #32
 8000d0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d0e:	e01a      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 52:
		odr_data = LSM6DS3_ACCEL_ODR_52HZ;
 8000d10:	2330      	movs	r3, #48	@ 0x30
 8000d12:	73fb      	strb	r3, [r7, #15]
		break;
 8000d14:	e017      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 104:
		odr_data = LSM6DS3_ACCEL_ODR_104HZ;
 8000d16:	2340      	movs	r3, #64	@ 0x40
 8000d18:	73fb      	strb	r3, [r7, #15]
		break;
 8000d1a:	e014      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 208:
		odr_data = LSM6DS3_ACCEL_ODR_208HZ;
 8000d1c:	2350      	movs	r3, #80	@ 0x50
 8000d1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000d20:	e011      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 416:
		odr_data = LSM6DS3_ACCEL_ODR_416HZ;
 8000d22:	2360      	movs	r3, #96	@ 0x60
 8000d24:	73fb      	strb	r3, [r7, #15]
		break;
 8000d26:	e00e      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 833:
		odr_data = LSM6DS3_ACCEL_ODR_833HZ;
 8000d28:	2370      	movs	r3, #112	@ 0x70
 8000d2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d2c:	e00b      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 1660:
		odr_data = LSM6DS3_ACCEL_ODR_1660HZ;
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	73fb      	strb	r3, [r7, #15]
		break;
 8000d32:	e008      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 3330:
		odr_data = LSM6DS3_ACCEL_ODR_3330HZ;
 8000d34:	2390      	movs	r3, #144	@ 0x90
 8000d36:	73fb      	strb	r3, [r7, #15]
		break;
 8000d38:	e005      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 6660:
		odr_data = LSM6DS3_ACCEL_ODR_6660HZ;
 8000d3a:	23a0      	movs	r3, #160	@ 0xa0
 8000d3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d3e:	e002      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	default:
		odr_data = LSM6DS3_ACCEL_ODR_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
		break;
 8000d44:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->g_range)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	2b0e      	cmp	r3, #14
 8000d50:	d82c      	bhi.n	8000dac <LSM6DS3_StartAccel+0x124>
 8000d52:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <LSM6DS3_StartAccel+0xd0>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d95 	.word	0x08000d95
 8000d5c:	08000dad 	.word	0x08000dad
 8000d60:	08000d9b 	.word	0x08000d9b
 8000d64:	08000dad 	.word	0x08000dad
 8000d68:	08000dad 	.word	0x08000dad
 8000d6c:	08000dad 	.word	0x08000dad
 8000d70:	08000da1 	.word	0x08000da1
 8000d74:	08000dad 	.word	0x08000dad
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000dad 	.word	0x08000dad
 8000d80:	08000dad 	.word	0x08000dad
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	08000dad 	.word	0x08000dad
 8000d8c:	08000dad 	.word	0x08000dad
 8000d90:	08000da7 	.word	0x08000da7
	{
	case 2:
		range_data = LSM6DS3_G_RANGE_2;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73bb      	strb	r3, [r7, #14]
		break;
 8000d98:	e00b      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 4:
		range_data = LSM6DS3_G_RANGE_4;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	73bb      	strb	r3, [r7, #14]
		break;
 8000d9e:	e008      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 8:
		range_data = LSM6DS3_G_RANGE_8;
 8000da0:	230c      	movs	r3, #12
 8000da2:	73bb      	strb	r3, [r7, #14]
		break;
 8000da4:	e005      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 16:
		range_data = LSM6DS3_G_RANGE_16;
 8000da6:	2304      	movs	r3, #4
 8000da8:	73bb      	strb	r3, [r7, #14]
		break;
 8000daa:	e002      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	default:
		range_data = LSM6DS3_G_RANGE_2;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73bb      	strb	r3, [r7, #14]
		break;
 8000db0:	bf00      	nop
	}

	/* this register also contains LPF1_BW_SEL, here we will set BW to ODR/2 */
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, (odr_data | range_data));
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fa08 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DS3_StartGyro>:


void LSM6DS3_StartGyro(LSM6DS3* sensor)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->gyro_odr_hz)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d04d      	beq.n	8000e7e <LSM6DS3_StartGyro+0xb2>
 8000de2:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d84c      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000dea:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d042      	beq.n	8000e78 <LSM6DS3_StartGyro+0xac>
 8000df2:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d844      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000dfa:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d037      	beq.n	8000e72 <LSM6DS3_StartGyro+0xa6>
 8000e02:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d83c      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e0a:	f240 3241 	movw	r2, #833	@ 0x341
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d02c      	beq.n	8000e6c <LSM6DS3_StartGyro+0xa0>
 8000e12:	f240 3241 	movw	r2, #833	@ 0x341
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d834      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e1a:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000e1e:	d022      	beq.n	8000e66 <LSM6DS3_StartGyro+0x9a>
 8000e20:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000e24:	d82e      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e26:	2bd0      	cmp	r3, #208	@ 0xd0
 8000e28:	d01a      	beq.n	8000e60 <LSM6DS3_StartGyro+0x94>
 8000e2a:	2bd0      	cmp	r3, #208	@ 0xd0
 8000e2c:	d82a      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e2e:	2b68      	cmp	r3, #104	@ 0x68
 8000e30:	d013      	beq.n	8000e5a <LSM6DS3_StartGyro+0x8e>
 8000e32:	2b68      	cmp	r3, #104	@ 0x68
 8000e34:	d826      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e36:	2b34      	cmp	r3, #52	@ 0x34
 8000e38:	d00c      	beq.n	8000e54 <LSM6DS3_StartGyro+0x88>
 8000e3a:	2b34      	cmp	r3, #52	@ 0x34
 8000e3c:	d822      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e3e:	2b0d      	cmp	r3, #13
 8000e40:	d002      	beq.n	8000e48 <LSM6DS3_StartGyro+0x7c>
 8000e42:	2b1a      	cmp	r3, #26
 8000e44:	d003      	beq.n	8000e4e <LSM6DS3_StartGyro+0x82>
 8000e46:	e01d      	b.n	8000e84 <LSM6DS3_StartGyro+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_GYRO_ODR_13HZ;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e4c:	e01d      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 26:
		odr_data = LSM6DS3_GYRO_ODR_26HZ;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	73fb      	strb	r3, [r7, #15]
		break;
 8000e52:	e01a      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 52:
		odr_data = LSM6DS3_GYRO_ODR_52HZ;
 8000e54:	2330      	movs	r3, #48	@ 0x30
 8000e56:	73fb      	strb	r3, [r7, #15]
		break;
 8000e58:	e017      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 104:
		odr_data = LSM6DS3_GYRO_ODR_104HZ;
 8000e5a:	2340      	movs	r3, #64	@ 0x40
 8000e5c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e5e:	e014      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 208:
		odr_data = LSM6DS3_GYRO_ODR_208HZ;
 8000e60:	2350      	movs	r3, #80	@ 0x50
 8000e62:	73fb      	strb	r3, [r7, #15]
		break;
 8000e64:	e011      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 416:
		odr_data = LSM6DS3_GYRO_ODR_416HZ;
 8000e66:	2360      	movs	r3, #96	@ 0x60
 8000e68:	73fb      	strb	r3, [r7, #15]
		break;
 8000e6a:	e00e      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 833:
		odr_data = LSM6DS3_GYRO_ODR_833HZ;
 8000e6c:	2370      	movs	r3, #112	@ 0x70
 8000e6e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e70:	e00b      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 1660:
		odr_data = LSM6DS3_GYRO_ODR_1660HZ;
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	73fb      	strb	r3, [r7, #15]
		break;
 8000e76:	e008      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 3330:
		odr_data = LSM6DS3_GYRO_ODR_3330HZ;
 8000e78:	2390      	movs	r3, #144	@ 0x90
 8000e7a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e7c:	e005      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 6660:
		odr_data = LSM6DS3_GYRO_ODR_6660HZ;
 8000e7e:	23a0      	movs	r3, #160	@ 0xa0
 8000e80:	73fb      	strb	r3, [r7, #15]
		break;
 8000e82:	e002      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	default:
		odr_data = LSM6DS3_GYRO_ODR_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
		break;
 8000e88:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->dps_range)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e94:	d01f      	beq.n	8000ed6 <LSM6DS3_StartGyro+0x10a>
 8000e96:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e9a:	d81f      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000e9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea0:	d016      	beq.n	8000ed0 <LSM6DS3_StartGyro+0x104>
 8000ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea6:	d819      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000ea8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eac:	d00d      	beq.n	8000eca <LSM6DS3_StartGyro+0xfe>
 8000eae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eb2:	d813      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000eb4:	2b7d      	cmp	r3, #125	@ 0x7d
 8000eb6:	d002      	beq.n	8000ebe <LSM6DS3_StartGyro+0xf2>
 8000eb8:	2bf5      	cmp	r3, #245	@ 0xf5
 8000eba:	d003      	beq.n	8000ec4 <LSM6DS3_StartGyro+0xf8>
 8000ebc:	e00e      	b.n	8000edc <LSM6DS3_StartGyro+0x110>
	{
	case 125:
		range_data = LSM6DS3_DPS_RANGE_125;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	73bb      	strb	r3, [r7, #14]
		break;
 8000ec2:	e00e      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 245:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73bb      	strb	r3, [r7, #14]
		break;
 8000ec8:	e00b      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 500:
		range_data = LSM6DS3_DPS_RANGE_500;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	73bb      	strb	r3, [r7, #14]
		break;
 8000ece:	e008      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 1000:
		range_data = LSM6DS3_DPS_RANGE_1000;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	73bb      	strb	r3, [r7, #14]
		break;
 8000ed4:	e005      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 2000:
		range_data = LSM6DS3_DPS_RANGE_2000;
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	73bb      	strb	r3, [r7, #14]
		break;
 8000eda:	e002      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	default:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]
		break;
 8000ee0:	bf00      	nop
	}

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, (odr_data | range_data));
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	2111      	movs	r1, #17
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f970 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <LSM6DS3_StopAccel>:


void LSM6DS3_StopAccel(LSM6DS3* sensor)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, LSM6DS3_ACCEL_ODR_DISABLE);  /* power down accel. (p. 61) */
 8000f04:	2200      	movs	r2, #0
 8000f06:	2110      	movs	r1, #16
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f963 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop

08000f18 <LSM6DS3_StopGyro>:


void LSM6DS3_StopGyro(LSM6DS3* sensor)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, LSM6DS3_GYRO_ODR_DISABLE);  /* power down gyro. (p. 62) */
 8000f20:	2200      	movs	r2, #0
 8000f22:	2111      	movs	r1, #17
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f955 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop

08000f34 <LSM6DS3_ReadAccel>:


void LSM6DS3_ReadAccel(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b08d      	sub	sp, #52	@ 0x34
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
	/* get the acceleration in g */

	/* read multiple bytes corresponding to the raw accelerometer data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_XL | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000f42:	4a41      	ldr	r2, [pc, #260]	@ (8001048 <LSM6DS3_ReadAccel+0x114>)
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f4c:	6018      	str	r0, [r3, #0]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	8019      	strh	r1, [r3, #0]
 8000f52:	3302      	adds	r3, #2
 8000f54:	0c0a      	lsrs	r2, r1, #16
 8000f56:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681c      	ldr	r4, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	8912      	ldrh	r2, [r2, #8]
 8000f66:	f107 0110 	add.w	r1, r7, #16
 8000f6a:	f107 0018 	add.w	r0, r7, #24
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4623      	mov	r3, r4
 8000f74:	2207      	movs	r2, #7
 8000f76:	f000 f959 	bl	800122c <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8000f7a:	7c7b      	ldrb	r3, [r7, #17]
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7cbb      	ldrb	r3, [r7, #18]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8000f88:	7cfb      	ldrb	r3, [r7, #19]
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	7d3b      	ldrb	r3, [r7, #20]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 8000f96:	7d7b      	ldrb	r3, [r7, #21]
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7dbb      	ldrb	r3, [r7, #22]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->accel_x = sensor->config->g_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 8000fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	edc3 7a08 	vstr	s15, [r3, #32]
	sensor->accel_y = sensor->config->g_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fde:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fee:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	sensor->accel_z = sensor->config->g_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 800101e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	*x = sensor->accel_x;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	601a      	str	r2, [r3, #0]
	*y = sensor->accel_y;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	601a      	str	r2, [r3, #0]
	*z = sensor->accel_z;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	601a      	str	r2, [r3, #0]

}
 8001040:	bf00      	nop
 8001042:	372c      	adds	r7, #44	@ 0x2c
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	0801d7e0 	.word	0x0801d7e0
 800104c:	47000000 	.word	0x47000000

08001050 <LSM6DS3_ReadGyro>:


void LSM6DS3_ReadGyro(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08d      	sub	sp, #52	@ 0x34
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
	/* get the rotation rate in degrees per second */

	/* read multiple bytes corresponding to the raw gyroscope data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_G | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800105e:	4a41      	ldr	r2, [pc, #260]	@ (8001164 <LSM6DS3_ReadGyro+0x114>)
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001068:	6018      	str	r0, [r3, #0]
 800106a:	3304      	adds	r3, #4
 800106c:	8019      	strh	r1, [r3, #0]
 800106e:	3302      	adds	r3, #2
 8001070:	0c0a      	lsrs	r2, r1, #16
 8001072:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681c      	ldr	r4, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	8912      	ldrh	r2, [r2, #8]
 8001082:	f107 0110 	add.w	r1, r7, #16
 8001086:	f107 0018 	add.w	r0, r7, #24
 800108a:	9201      	str	r2, [sp, #4]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4623      	mov	r3, r4
 8001090:	2207      	movs	r2, #7
 8001092:	f000 f8cb 	bl	800122c <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8001096:	7c7b      	ldrb	r3, [r7, #17]
 8001098:	b21a      	sxth	r2, r3
 800109a:	7cbb      	ldrb	r3, [r7, #18]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 80010a4:	7cfb      	ldrb	r3, [r7, #19]
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7d3b      	ldrb	r3, [r7, #20]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 80010b2:	7d7b      	ldrb	r3, [r7, #21]
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->gyro_x = sensor->config->dps_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	sensor->gyro_y = sensor->config->dps_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110a:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	sensor->gyro_z = sensor->config->dps_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001126:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001136:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 800113a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	*x = sensor->gyro_x;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	601a      	str	r2, [r3, #0]
	*y = sensor->gyro_y;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
	*z = sensor->gyro_z;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	372c      	adds	r7, #44	@ 0x2c
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	0801d7e8 	.word	0x0801d7e8
 8001168:	47000000 	.word	0x47000000

0800116c <LSM6DS3_ReadRegister>:



HAL_StatusTypeDef LSM6DS3_ReadRegister(LSM6DS3* sensor, uint8_t reg, uint8_t* data)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af02      	add	r7, sp, #8
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	460b      	mov	r3, r1
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_buf[2] = {(reg | 0x80), 0x00};  // set the first bit to indicate a read communication
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001180:	b2db      	uxtb	r3, r3
 8001182:	753b      	strb	r3, [r7, #20]
 8001184:	2300      	movs	r3, #0
 8001186:	757b      	strb	r3, [r7, #21]
	uint8_t rx_buf[2];

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6858      	ldr	r0, [r3, #4]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	891b      	ldrh	r3, [r3, #8]
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	f00a fbf0 	bl	800b978 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(sensor->spi, tx_buf, rx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0114 	add.w	r1, r7, #20
 80011a4:	2301      	movs	r3, #1
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	f00f fe93 	bl	8010ed4 <HAL_SPI_TransmitReceive>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6858      	ldr	r0, [r3, #4]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	891b      	ldrh	r3, [r3, #8]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4619      	mov	r1, r3
 80011be:	f00a fbdb 	bl	800b978 <HAL_GPIO_WritePin>

	*data = rx_buf[1];
 80011c2:	7c7a      	ldrb	r2, [r7, #17]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	701a      	strb	r2, [r3, #0]

	return status;
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop

080011d4 <LSM6DS3_WriteRegister>:


HAL_StatusTypeDef LSM6DS3_WriteRegister(LSM6DS3* sensor, uint8_t reg, uint8_t data)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
 80011e0:	4613      	mov	r3, r2
 80011e2:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buf[2] = {reg, data};
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	733b      	strb	r3, [r7, #12]
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6858      	ldr	r0, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	891b      	ldrh	r3, [r3, #8]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f00a fbbe 	bl	800b978 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(sensor->spi, tx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	f107 010c 	add.w	r1, r7, #12
 8001204:	2301      	movs	r3, #1
 8001206:	2202      	movs	r2, #2
 8001208:	f00f fc76 	bl	8010af8 <HAL_SPI_Transmit>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6858      	ldr	r0, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	891b      	ldrh	r3, [r3, #8]
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	f00a fbac 	bl	800b978 <HAL_GPIO_WritePin>

	return status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop

0800122c <SPI_TxRx_Fast>:
/* this uses the SPI FIFO on the H7, so it only works for transactions 16 bytes or less */
/* (the FIFO size depends on the specific SPI channel too, so check the RM) */
/* On the H723, SPI1, 2, 3 have 16 byte FIFO and SPI4, 5, 6 have 8 bytes FIFO */
/* the peripheral is configured using Cube to have 8 bit data frames and 1 data frame FIFO threshold */
__attribute__((optimize("-Ofast"))) inline void SPI_TxRx_Fast(uint8_t* tx, uint8_t* rx, uint8_t len, SPI_TypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 800122c:	b470      	push	{r4, r5, r6}
 800122e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001232:	4684      	mov	ip, r0
 8001234:	9c03      	ldr	r4, [sp, #12]
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 8001236:	042e      	lsls	r6, r5, #16


	/* If using both the HAL SPI functions and our own, we need the next 2 lines to put SPI in a known state */
	/* If only using our function, I think these could be omitted */
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 8001238:	4816      	ldr	r0, [pc, #88]	@ (8001294 <SPI_TxRx_Fast+0x68>)
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 800123a:	61a6      	str	r6, [r4, #24]
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 800123c:	685e      	ldr	r6, [r3, #4]
 800123e:	4030      	ands	r0, r6
 8001240:	6058      	str	r0, [r3, #4]
	spi->CFG2 &= ~SPI_CFG2_COMM;  /* this puts the SPI in full-duplex mode (for some reason the HAL takes it out of this mode sometimes, even when it is configured in Cube as full-duplex) */
 8001242:	68d8      	ldr	r0, [r3, #12]
 8001244:	f420 20c0 	bic.w	r0, r0, #393216	@ 0x60000
 8001248:	60d8      	str	r0, [r3, #12]


	spi->CR1 |= SPI_CR1_SPE;  /* enable SPI */
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	f040 0001 	orr.w	r0, r0, #1
 8001250:	6018      	str	r0, [r3, #0]
	spi->CR1 |= SPI_CR1_CSTART;  /* start transmission */
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8001258:	6018      	str	r0, [r3, #0]

	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 800125a:	b1a2      	cbz	r2, 8001286 <SPI_TxRx_Fast+0x5a>
 800125c:	eb0c 0602 	add.w	r6, ip, r2
	{
		if(((spi->SR) & SPI_SR_TXP) == SPI_SR_TXP)  /* wait until TX FIFO has enough space for a data packet */
 8001260:	6958      	ldr	r0, [r3, #20]
 8001262:	0780      	lsls	r0, r0, #30
 8001264:	d5fc      	bpl.n	8001260 <SPI_TxRx_Fast+0x34>
		   *(__IO uint8_t*)&(spi->TXDR) = tx[i++];  /* put data in TXDR */
 8001266:	f81c 0b01 	ldrb.w	r0, [ip], #1
 800126a:	45b4      	cmp	ip, r6
 800126c:	f883 0020 	strb.w	r0, [r3, #32]
 8001270:	d1f6      	bne.n	8001260 <SPI_TxRx_Fast+0x34>
	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 8001272:	440a      	add	r2, r1
	}

	for (uint8_t i = 0; i < len; )  /* read out everything from the RX buffer */
	{
		if(((spi->SR) & SPI_SR_RXP) == SPI_SR_RXP)  /* wait until RX FIFO contains a data packet */
 8001274:	6958      	ldr	r0, [r3, #20]
 8001276:	07c0      	lsls	r0, r0, #31
 8001278:	d5fc      	bpl.n	8001274 <SPI_TxRx_Fast+0x48>
			rx[i++] = *(__IO uint8_t*)&(spi->RXDR);  /* read the data from RXDR */
 800127a:	f893 0030 	ldrb.w	r0, [r3, #48]	@ 0x30
 800127e:	f801 0b01 	strb.w	r0, [r1], #1
 8001282:	4291      	cmp	r1, r2
 8001284:	d1f6      	bne.n	8001274 <SPI_TxRx_Fast+0x48>
	}

	spi->CR1 &= ~SPI_CR1_SPE;  /* disable SPI */
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]
	cs_port->BSRR = cs_pin;  /* CS high */
 800128e:	61a5      	str	r5, [r4, #24]
}
 8001290:	bc70      	pop	{r4, r5, r6}
 8001292:	4770      	bx	lr
 8001294:	ffff0000 	.word	0xffff0000

08001298 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 80012a0:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80012a2:	f004 ff32 	bl	800610a <VibeCheckStrobe_PeriodElapsedUpdate>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	24011ddc 	.word	0x24011ddc

080012b4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 80012be:	f005 fd45 	bl	8006d4c <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	24011dfc 	.word	0x24011dfc

080012d0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 80012da:	f005 fd53 	bl	8006d84 <VibeCheckWaveGen_DMACpltCallback>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24011dfc 	.word	0x24011dfc

080012ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
	VibeCheckSensor_EXTICallback(&vc.sensor, GPIO_Pin);
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4803      	ldr	r0, [pc, #12]	@ (8001308 <HAL_GPIO_EXTI_Callback+0x1c>)
 80012fc:	f003 fc70 	bl	8004be0 <VibeCheckSensor_EXTICallback>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	240133c8 	.word	0x240133c8

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001312:	f000 ff23 	bl	800215c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f006 f831 	bl	800737c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f84d 	bl	80013b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800131e:	f000 f8bb 	bl	8001498 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 fdbf 	bl	8001ea4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001326:	f000 fd8d 	bl	8001e44 <MX_DMA_Init>
  MX_DAC1_Init();
 800132a:	f000 f9cb 	bl	80016c4 <MX_DAC1_Init>
  MX_I2C2_Init();
 800132e:	f000 fa05 	bl	800173c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001332:	f000 fa43 	bl	80017bc <MX_SPI2_Init>
  MX_SPI3_Init();
 8001336:	f000 fa97 	bl	8001868 <MX_SPI3_Init>
  MX_SPI4_Init();
 800133a:	f000 faeb 	bl	8001914 <MX_SPI4_Init>
  MX_TIM4_Init();
 800133e:	f000 fc6f 	bl	8001c20 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001342:	f000 fbdf 	bl	8001b04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001346:	f000 fd31 	bl	8001dac <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800134a:	f000 fb39 	bl	80019c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800134e:	f000 fb8b 	bl	8001a68 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001352:	f000 f8d1 	bl	80014f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001356:	f000 f94b 	bl	80015f0 <MX_ADC2_Init>
  MX_UART7_Init();
 800135a:	f000 fcd9 	bl	8001d10 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 800135e:	f016 fdd7 	bl	8017f10 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);  /* start the timer for sensor data time stamps */
 8001362:	480b      	ldr	r0, [pc, #44]	@ (8001390 <main+0x84>)
 8001364:	f010 fa30 	bl	80117c8 <HAL_TIM_Base_Start>
  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1, &htim4, &(TIM2->CNT), &hspi2, &hspi3, &hspi4);
 8001368:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <main+0x88>)
 800136a:	9304      	str	r3, [sp, #16]
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <main+0x8c>)
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <main+0x90>)
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <main+0x94>)
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <main+0x98>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <main+0x9c>)
 800137e:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <main+0xa0>)
 8001380:	490b      	ldr	r1, [pc, #44]	@ (80013b0 <main+0xa4>)
 8001382:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <main+0xa8>)
 8001384:	f001 fe84 	bl	8003090 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8001388:	480a      	ldr	r0, [pc, #40]	@ (80013b4 <main+0xa8>)
 800138a:	f002 f859 	bl	8003440 <VibeCheck_Loop>
 800138e:	e7fb      	b.n	8001388 <main+0x7c>
 8001390:	24000734 	.word	0x24000734
 8001394:	24000660 	.word	0x24000660
 8001398:	240005d8 	.word	0x240005d8
 800139c:	24000550 	.word	0x24000550
 80013a0:	40000024 	.word	0x40000024
 80013a4:	240007cc 	.word	0x240007cc
 80013a8:	240003f8 	.word	0x240003f8
 80013ac:	240006e8 	.word	0x240006e8
 80013b0:	24000780 	.word	0x24000780
 80013b4:	240009b8 	.word	0x240009b8

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b09c      	sub	sp, #112	@ 0x70
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c2:	224c      	movs	r2, #76	@ 0x4c
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f018 fe63 	bl	801a092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2220      	movs	r2, #32
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f018 fe5d 	bl	801a092 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013d8:	2002      	movs	r0, #2
 80013da:	f00b fed3 	bl	800d184 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001494 <SystemClock_Config+0xdc>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001494 <SystemClock_Config+0xdc>)
 80013e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <SystemClock_Config+0xdc>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013fa:	bf00      	nop
 80013fc:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <SystemClock_Config+0xdc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001408:	d1f8      	bne.n	80013fc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800140a:	2321      	movs	r3, #33	@ 0x21
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141c:	2302      	movs	r3, #2
 800141e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001420:	2302      	movs	r3, #2
 8001422:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001424:	2328      	movs	r3, #40	@ 0x28
 8001426:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001428:	2301      	movs	r3, #1
 800142a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001434:	230c      	movs	r3, #12
 8001436:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001438:	2300      	movs	r3, #0
 800143a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	4618      	mov	r0, r3
 8001446:	f00b fee7 	bl	800d218 <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001450:	f000 feb0 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	233f      	movs	r3, #63	@ 0x3f
 8001456:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001458:	2303      	movs	r3, #3
 800145a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001460:	2308      	movs	r3, #8
 8001462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001464:	2340      	movs	r3, #64	@ 0x40
 8001466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001468:	2340      	movs	r3, #64	@ 0x40
 800146a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800146c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001470:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001472:	2340      	movs	r3, #64	@ 0x40
 8001474:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2103      	movs	r1, #3
 800147a:	4618      	mov	r0, r3
 800147c:	f00c faa6 	bl	800d9cc <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001486:	f000 fe95 	bl	80021b4 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3770      	adds	r7, #112	@ 0x70
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	58024800 	.word	0x58024800

08001498 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ae      	sub	sp, #184	@ 0xb8
 800149c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	22b8      	movs	r2, #184	@ 0xb8
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f018 fdf4 	bl	801a092 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014ba:	2310      	movs	r3, #16
 80014bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014be:	2302      	movs	r3, #2
 80014c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014ca:	23c0      	movs	r3, #192	@ 0xc0
 80014cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	4618      	mov	r0, r3
 80014e0:	f00c fe00 	bl	800e0e4 <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80014ea:	f000 fe63 	bl	80021b4 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	37b8      	adds	r7, #184	@ 0xb8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	@ 0x30
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2224      	movs	r2, #36	@ 0x24
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f018 fdbe 	bl	801a092 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001516:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001518:	4a32      	ldr	r2, [pc, #200]	@ (80015e4 <MX_ADC1_Init+0xec>)
 800151a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800151e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001524:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001532:	2204      	movs	r2, #4
 8001534:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001536:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001538:	2200      	movs	r2, #0
 800153a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800153e:	2200      	movs	r2, #0
 8001540:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001542:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001544:	2201      	movs	r2, #1
 8001546:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001550:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001558:	2200      	movs	r2, #0
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800155e:	2200      	movs	r2, #0
 8001560:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001564:	2200      	movs	r2, #0
 8001566:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800156a:	2200      	movs	r2, #0
 800156c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001578:	2201      	movs	r2, #1
 800157a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157c:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800157e:	f006 f9f9 	bl	8007974 <HAL_ADC_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001588:	f000 fe14 	bl	80021b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	4812      	ldr	r0, [pc, #72]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001598:	f007 fa38 	bl	8008a0c <HAL_ADCEx_MultiModeConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80015a2:	f000 fe07 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <MX_ADC1_Init+0xf0>)
 80015a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015aa:	2306      	movs	r3, #6
 80015ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_ADC1_Init+0xf4>)
 80015b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b6:	2304      	movs	r3, #4
 80015b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 80015ca:	f006 fbdb 	bl	8007d84 <HAL_ADC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80015d4:	f000 fdee 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3730      	adds	r7, #48	@ 0x30
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24000318 	.word	0x24000318
 80015e4:	40022000 	.word	0x40022000
 80015e8:	10c00010 	.word	0x10c00010
 80015ec:	47ff0000 	.word	0x47ff0000

080015f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2224      	movs	r2, #36	@ 0x24
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f018 fd48 	bl	801a092 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001602:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001604:	4a2c      	ldr	r2, [pc, #176]	@ (80016b8 <MX_ADC2_Init+0xc8>)
 8001606:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001608:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800160a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800160e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800161c:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800161e:	2204      	movs	r2, #4
 8001620:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001624:	2200      	movs	r2, #0
 8001626:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800162a:	2200      	movs	r2, #0
 800162c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001630:	2201      	movs	r2, #1
 8001632:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800163e:	2200      	movs	r2, #0
 8001640:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001644:	2200      	movs	r2, #0
 8001646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800164a:	2200      	movs	r2, #0
 800164c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001650:	2200      	movs	r2, #0
 8001652:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001656:	2200      	movs	r2, #0
 8001658:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001664:	2201      	movs	r2, #1
 8001666:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001668:	4812      	ldr	r0, [pc, #72]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800166a:	f006 f983 	bl	8007974 <HAL_ADC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001674:	f000 fd9e 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001678:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <MX_ADC2_Init+0xcc>)
 800167a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	2306      	movs	r3, #6
 800167e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_ADC2_Init+0xd0>)
 8001686:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001688:	2304      	movs	r3, #4
 800168a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800169c:	f006 fb72 	bl	8007d84 <HAL_ADC_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80016a6:	f000 fd85 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	@ 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	24000388 	.word	0x24000388
 80016b8:	40022100 	.word	0x40022100
 80016bc:	0c900008 	.word	0x0c900008
 80016c0:	47ff0000 	.word	0x47ff0000

080016c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2224      	movs	r2, #36	@ 0x24
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f018 fcde 	bl	801a092 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_DAC1_Init+0x70>)
 80016d8:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <MX_DAC1_Init+0x74>)
 80016da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016dc:	4815      	ldr	r0, [pc, #84]	@ (8001734 <MX_DAC1_Init+0x70>)
 80016de:	f007 fbff 	bl	8008ee0 <HAL_DAC_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016e8:	f000 fd64 	bl	80021b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 80016f0:	2306      	movs	r3, #6
 80016f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80016f4:	2302      	movs	r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	480b      	ldr	r0, [pc, #44]	@ (8001734 <MX_DAC1_Init+0x70>)
 8001708:	f007 fcd6 	bl	80090b8 <HAL_DAC_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 fd4f 	bl	80021b4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2210      	movs	r2, #16
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_DAC1_Init+0x70>)
 800171e:	f007 fccb 	bl	80090b8 <HAL_DAC_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001728:	f000 fd44 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	@ 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	240003f8 	.word	0x240003f8
 8001738:	40007400 	.word	0x40007400

0800173c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <MX_I2C2_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001748:	4a1b      	ldr	r2, [pc, #108]	@ (80017b8 <MX_I2C2_Init+0x7c>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001754:	2201      	movs	r2, #1
 8001756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001778:	f00a f932 	bl	800b9e0 <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001782:	f000 fd17 	bl	80021b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800178a:	f00a f9c5 	bl	800bb18 <HAL_I2CEx_ConfigAnalogFilter>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 fd0e 	bl	80021b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800179c:	f00a fa07 	bl	800bbae <HAL_I2CEx_ConfigDigitalFilter>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 fd05 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	240004fc 	.word	0x240004fc
 80017b4:	40005800 	.word	0x40005800
 80017b8:	307075b1 	.word	0x307075b1

080017bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017c2:	4a28      	ldr	r2, [pc, #160]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017d6:	2207      	movs	r2, #7
 80017d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80017f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001802:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001810:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001814:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800181c:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001830:	2200      	movs	r2, #0
 8001832:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001836:	2200      	movs	r2, #0
 8001838:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800183c:	2200      	movs	r2, #0
 800183e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001842:	2200      	movs	r2, #0
 8001844:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001848:	2200      	movs	r2, #0
 800184a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800184e:	f00f f82f 	bl	80108b0 <HAL_SPI_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001858:	f000 fcac 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24000550 	.word	0x24000550
 8001864:	40003800 	.word	0x40003800

08001868 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <MX_SPI3_Init+0xa4>)
 800186e:	4a28      	ldr	r2, [pc, #160]	@ (8001910 <MX_SPI3_Init+0xa8>)
 8001870:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001872:	4b26      	ldr	r3, [pc, #152]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001874:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001878:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800187a:	4b24      	ldr	r3, [pc, #144]	@ (800190c <MX_SPI3_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001880:	4b22      	ldr	r3, [pc, #136]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001882:	2207      	movs	r2, #7
 8001884:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188c:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <MX_SPI3_Init+0xa4>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001894:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001898:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <MX_SPI3_Init+0xa4>)
 800189c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a8:	4b18      	ldr	r3, [pc, #96]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018c8:	4b10      	ldr	r3, [pc, #64]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018da:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018fa:	f00e ffd9 	bl	80108b0 <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001904:	f000 fc56 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	240005d8 	.word	0x240005d8
 8001910:	40003c00 	.word	0x40003c00

08001914 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800191a:	4a28      	ldr	r2, [pc, #160]	@ (80019bc <MX_SPI4_Init+0xa8>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001920:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001924:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800192c:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800192e:	2207      	movs	r2, #7
 8001930:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001940:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001944:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001946:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800194c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001954:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001960:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001966:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800196c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800196e:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001970:	2200      	movs	r2, #0
 8001972:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001974:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001976:	2200      	movs	r2, #0
 8001978:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800197a:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800197c:	2200      	movs	r2, #0
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001980:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800198c:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001994:	2200      	movs	r2, #0
 8001996:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800199a:	2200      	movs	r2, #0
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 80019a6:	f00e ff83 	bl	80108b0 <HAL_SPI_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80019b0:	f000 fc00 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	24000660 	.word	0x24000660
 80019bc:	40013400 	.word	0x40013400

080019c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019e0:	4a20      	ldr	r2, [pc, #128]	@ (8001a64 <MX_TIM1_Init+0xa4>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a0a:	4815      	ldr	r0, [pc, #84]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a0c:	f00f fe85 	bl	801171a <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a16:	f000 fbcd 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	480e      	ldr	r0, [pc, #56]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a28:	f010 fe36 	bl	8012698 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a32:	f000 fbbf 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a36:	2320      	movs	r3, #32
 8001a38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a48:	f011 fc78 	bl	801333c <HAL_TIMEx_MasterConfigSynchronization>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a52:	f000 fbaf 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	240006e8 	.word	0x240006e8
 8001a64:	40010000 	.word	0x40010000

08001a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a90:	22ef      	movs	r2, #239	@ 0xef
 8001a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aae:	4814      	ldr	r0, [pc, #80]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001ab0:	f00f fe33 	bl	801171a <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001aba:	f000 fb7b 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001acc:	f010 fde4 	bl	8012698 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ad6:	f000 fb6d 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ada:	2320      	movs	r3, #32
 8001adc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001ae8:	f011 fc28 	bl	801333c <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001af2:	f000 fb5f 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	24000734 	.word	0x24000734

08001b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08e      	sub	sp, #56	@ 0x38
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b36:	4b38      	ldr	r3, [pc, #224]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b38:	4a38      	ldr	r2, [pc, #224]	@ (8001c1c <MX_TIM3_Init+0x118>)
 8001b3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b3c:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b35      	ldr	r3, [pc, #212]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b48:	4b33      	ldr	r3, [pc, #204]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b50:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b5c:	482e      	ldr	r0, [pc, #184]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b5e:	f00f fddc 	bl	801171a <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b68:	f000 fb24 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4827      	ldr	r0, [pc, #156]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b7a:	f010 fd8d 	bl	8012698 <HAL_TIM_ConfigClockSource>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b84:	f000 fb16 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b88:	4823      	ldr	r0, [pc, #140]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b8a:	f00f ff21 	bl	80119d0 <HAL_TIM_PWM_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b94:	f000 fb0e 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	481c      	ldr	r0, [pc, #112]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001ba8:	f011 fbc8 	bl	801333c <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001bb2:	f000 faff 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb6:	2360      	movs	r3, #96	@ 0x60
 8001bb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4812      	ldr	r0, [pc, #72]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001bce:	f010 fc4f 	bl	8012470 <HAL_TIM_PWM_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001bd8:	f000 faec 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	2204      	movs	r2, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	480d      	ldr	r0, [pc, #52]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001be4:	f010 fc44 	bl	8012470 <HAL_TIM_PWM_ConfigChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001bee:	f000 fae1 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001bfa:	f010 fc39 	bl	8012470 <HAL_TIM_PWM_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001c04:	f000 fad6 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c08:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001c0a:	f000 fee3 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8001c0e:	bf00      	nop
 8001c10:	3738      	adds	r7, #56	@ 0x38
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24000780 	.word	0x24000780
 8001c1c:	40000400 	.word	0x40000400

08001c20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08e      	sub	sp, #56	@ 0x38
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	615a      	str	r2, [r3, #20]
 8001c50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c52:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c54:	4a2d      	ldr	r2, [pc, #180]	@ (8001d0c <MX_TIM4_Init+0xec>)
 8001c56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c58:	4b2b      	ldr	r3, [pc, #172]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c78:	4823      	ldr	r0, [pc, #140]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c7a:	f00f fd4e 	bl	801171a <HAL_TIM_Base_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001c84:	f000 fa96 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c92:	4619      	mov	r1, r3
 8001c94:	481c      	ldr	r0, [pc, #112]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c96:	f010 fcff 	bl	8012698 <HAL_TIM_ConfigClockSource>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001ca0:	f000 fa88 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ca4:	4818      	ldr	r0, [pc, #96]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001ca6:	f00f fe93 	bl	80119d0 <HAL_TIM_PWM_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001cb0:	f000 fa80 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4811      	ldr	r0, [pc, #68]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cc4:	f011 fb3a 	bl	801333c <HAL_TIMEx_MasterConfigSynchronization>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001cce:	f000 fa71 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd2:	2360      	movs	r3, #96	@ 0x60
 8001cd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cea:	f010 fbc1 	bl	8012470 <HAL_TIM_PWM_ConfigChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001cf4:	f000 fa5e 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001cf8:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cfa:	f000 fe6b 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8001cfe:	bf00      	nop
 8001d00:	3738      	adds	r7, #56	@ 0x38
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	240007cc 	.word	0x240007cc
 8001d0c:	40000800 	.word	0x40000800

08001d10 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d16:	4a24      	ldr	r2, [pc, #144]	@ (8001da8 <MX_UART7_Init+0x98>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001d1a:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d3c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d40:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d42:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d48:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001d5a:	4812      	ldr	r0, [pc, #72]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d5c:	f011 fba8 	bl	80134b0 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001d66:	f000 fa25 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d6e:	f012 fcb4 	bl	80146da <HAL_UARTEx_SetTxFifoThreshold>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001d78:	f000 fa1c 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4809      	ldr	r0, [pc, #36]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d80:	f012 fce9 	bl	8014756 <HAL_UARTEx_SetRxFifoThreshold>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001d8a:	f000 fa13 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d90:	f012 fc6a 	bl	8014668 <HAL_UARTEx_DisableFifoMode>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001d9a:	f000 fa0b 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	24000890 	.word	0x24000890
 8001da8:	40007800 	.word	0x40007800

08001dac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001db2:	4a23      	ldr	r2, [pc, #140]	@ (8001e40 <MX_USART1_UART_Init+0x94>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df4:	4811      	ldr	r0, [pc, #68]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001df6:	f011 fb5b 	bl	80134b0 <HAL_UART_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e00:	f000 f9d8 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e04:	2100      	movs	r1, #0
 8001e06:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e08:	f012 fc67 	bl	80146da <HAL_UARTEx_SetTxFifoThreshold>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e12:	f000 f9cf 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4808      	ldr	r0, [pc, #32]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e1a:	f012 fc9c 	bl	8014756 <HAL_UARTEx_SetRxFifoThreshold>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e24:	f000 f9c6 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e2a:	f012 fc1d 	bl	8014668 <HAL_UARTEx_DisableFifoMode>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e34:	f000 f9be 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	24000924 	.word	0x24000924
 8001e40:	40011000 	.word	0x40011000

08001e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e50:	4a13      	ldr	r2, [pc, #76]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	200b      	movs	r0, #11
 8001e6e:	f006 ff8a 	bl	8008d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e72:	200b      	movs	r0, #11
 8001e74:	f006 ffa1 	bl	8008dba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	200c      	movs	r0, #12
 8001e7e:	f006 ff82 	bl	8008d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e82:	200c      	movs	r0, #12
 8001e84:	f006 ff99 	bl	8008dba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	200d      	movs	r0, #13
 8001e8e:	f006 ff7a 	bl	8008d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e92:	200d      	movs	r0, #13
 8001e94:	f006 ff91 	bl	8008dba <HAL_NVIC_EnableIRQ>

}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	58024400 	.word	0x58024400

08001ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eba:	4ba2      	ldr	r3, [pc, #648]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec0:	4aa0      	ldr	r2, [pc, #640]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eca:	4b9e      	ldr	r3, [pc, #632]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed8:	4b9a      	ldr	r3, [pc, #616]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ede:	4a99      	ldr	r2, [pc, #612]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee8:	4b96      	ldr	r3, [pc, #600]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef6:	4b93      	ldr	r3, [pc, #588]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efc:	4a91      	ldr	r2, [pc, #580]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f06:	4b8f      	ldr	r3, [pc, #572]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b8b      	ldr	r3, [pc, #556]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1a:	4a8a      	ldr	r2, [pc, #552]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f24:	4b87      	ldr	r3, [pc, #540]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	4b84      	ldr	r3, [pc, #528]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f38:	4a82      	ldr	r2, [pc, #520]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f42:	4b80      	ldr	r3, [pc, #512]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f50:	4b7c      	ldr	r3, [pc, #496]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f56:	4a7b      	ldr	r2, [pc, #492]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f60:	4b78      	ldr	r3, [pc, #480]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS3_GPIO_Port, ACCEL_NCS3_Pin, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2110      	movs	r1, #16
 8001f72:	4875      	ldr	r0, [pc, #468]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001f74:	f009 fd00 	bl	800b978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	4873      	ldr	r0, [pc, #460]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8001f7e:	f009 fcfb 	bl	800b978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2101      	movs	r1, #1
 8001f86:	4872      	ldr	r0, [pc, #456]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8001f88:	f009 fcf6 	bl	800b978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	210a      	movs	r1, #10
 8001f90:	486f      	ldr	r0, [pc, #444]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8001f92:	f009 fcf1 	bl	800b978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS1_GPIO_Port, ACCEL_NCS1_Pin, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f9c:	486d      	ldr	r0, [pc, #436]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8001f9e:	f009 fceb 	bl	800b978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS2_GPIO_Port, ACCEL_NCS2_Pin, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	486c      	ldr	r0, [pc, #432]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 8001fa8:	f009 fce6 	bl	800b978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fb2:	4868      	ldr	r0, [pc, #416]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8001fb4:	f009 fce0 	bl	800b978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACCEL_INTA3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA3_Pin;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fbc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTA3_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	485e      	ldr	r0, [pc, #376]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001fce:	f009 fb13 	bl	800b5f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS3_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS3_Pin;
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS3_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4857      	ldr	r0, [pc, #348]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001fea:	f009 fb05 	bl	800b5f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INTB3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTB3_Pin;
 8001fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTB3_GPIO_Port, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	4851      	ldr	r0, [pc, #324]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8002006:	f009 faf7 	bl	800b5f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 800200a:	2304      	movs	r3, #4
 800200c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	484a      	ldr	r0, [pc, #296]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8002022:	f009 fae9 	bl	800b5f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8002026:	230b      	movs	r3, #11
 8002028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202a:	2301      	movs	r3, #1
 800202c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	4844      	ldr	r0, [pc, #272]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 800203e:	f009 fadb 	bl	800b5f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 8002042:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	483e      	ldr	r0, [pc, #248]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8002058:	f009 face 	bl	800b5f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS1_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin;
 800205c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS1_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	4837      	ldr	r0, [pc, #220]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8002076:	f009 fabf 	bl	800b5f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin ACCEL_INTA2_Pin ACCEL_INTB2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|ACCEL_INTA2_Pin|ACCEL_INTB2_Pin;
 800207a:	f240 3306 	movw	r3, #774	@ 0x306
 800207e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002080:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	4831      	ldr	r0, [pc, #196]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 8002092:	f009 fab1 	bl	800b5f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_EXT_Pin */
  GPIO_InitStruct.Pin = DAC_EXT_Pin;
 8002096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAC_EXT_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	4828      	ldr	r0, [pc, #160]	@ (800214c <MX_GPIO_Init+0x2a8>)
 80020ac:	f009 faa4 	bl	800b5f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS2_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS2_Pin;
 80020b0:	2301      	movs	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS2_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4824      	ldr	r0, [pc, #144]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 80020c8:	f009 fa96 	bl	800b5f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = RECORD_INDICATOR_Pin;
 80020cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RECORD_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	481b      	ldr	r0, [pc, #108]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 80020e6:	f009 fa87 	bl	800b5f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2007      	movs	r0, #7
 80020f0:	f006 fe49 	bl	8008d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020f4:	2007      	movs	r0, #7
 80020f6:	f006 fe60 	bl	8008dba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	2008      	movs	r0, #8
 8002100:	f006 fe41 	bl	8008d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002104:	2008      	movs	r0, #8
 8002106:	f006 fe58 	bl	8008dba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	2009      	movs	r0, #9
 8002110:	f006 fe39 	bl	8008d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002114:	2009      	movs	r0, #9
 8002116:	f006 fe50 	bl	8008dba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2017      	movs	r0, #23
 8002120:	f006 fe31 	bl	8008d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002124:	2017      	movs	r0, #23
 8002126:	f006 fe48 	bl	8008dba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2028      	movs	r0, #40	@ 0x28
 8002130:	f006 fe29 	bl	8008d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002134:	2028      	movs	r0, #40	@ 0x28
 8002136:	f006 fe40 	bl	8008dba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800213a:	bf00      	nop
 800213c:	3730      	adds	r7, #48	@ 0x30
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	58024400 	.word	0x58024400
 8002148:	58021000 	.word	0x58021000
 800214c:	58020800 	.word	0x58020800
 8002150:	58020000 	.word	0x58020000
 8002154:	58020400 	.word	0x58020400
 8002158:	58020c00 	.word	0x58020c00

0800215c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002162:	463b      	mov	r3, r7
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800216e:	f006 fe3f 	bl	8008df0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002172:	2301      	movs	r3, #1
 8002174:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002176:	2300      	movs	r3, #0
 8002178:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800217e:	231f      	movs	r3, #31
 8002180:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002182:	2387      	movs	r3, #135	@ 0x87
 8002184:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002186:	2300      	movs	r3, #0
 8002188:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800218a:	2300      	movs	r3, #0
 800218c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800219e:	463b      	mov	r3, r7
 80021a0:	4618      	mov	r0, r3
 80021a2:	f006 fe5d 	bl	8008e60 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021a6:	2004      	movs	r0, #4
 80021a8:	f006 fe3a 	bl	8008e20 <HAL_MPU_Enable>

}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <Error_Handler+0x8>

080021c0 <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	745a      	strb	r2, [r3, #17]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	745a      	strb	r2, [r3, #17]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	7c1b      	ldrb	r3, [r3, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d030      	beq.n	800229a <Sequencer_Update+0x76>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d02c      	beq.n	800229a <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	429a      	cmp	r2, r3
 8002248:	d927      	bls.n	800229a <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	441a      	add	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d10a      	bne.n	8002296 <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	7c5b      	ldrb	r3, [r3, #17]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	e002      	b.n	8002296 <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <Sequencer_Update+0x78>
		}
	}

	return 0;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	741a      	strb	r2, [r3, #16]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	741a      	strb	r2, [r3, #16]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <Sequencer_IsRunning>:

uint32_t Sequencer_IsRunning(Sequencer* sequencer)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	return sequencer->is_running;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7c1b      	ldrb	r3, [r3, #16]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_MspInit+0x34>)
 800230c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002310:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_MspInit+0x34>)
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <HAL_MspInit+0x34>)
 800231c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002328:	2005      	movs	r0, #5
 800232a:	f006 fd21 	bl	8008d70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	58024400 	.word	0x58024400

0800233c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	@ 0x30
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a39      	ldr	r2, [pc, #228]	@ (8002440 <HAL_ADC_MspInit+0x104>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d133      	bne.n	80023c6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800235e:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	4a37      	ldr	r2, [pc, #220]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 8002366:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002368:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10e      	bne.n	800238e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002370:	4b35      	ldr	r3, [pc, #212]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002376:	4a34      	ldr	r2, [pc, #208]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002378:	f043 0320 	orr.w	r3, r3, #32
 800237c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002380:	4b31      	ldr	r3, [pc, #196]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238e:	4b2e      	ldr	r3, [pc, #184]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002394:	4a2c      	ldr	r2, [pc, #176]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800239e:	4b2a      	ldr	r3, [pc, #168]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023ac:	2330      	movs	r3, #48	@ 0x30
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b0:	2303      	movs	r3, #3
 80023b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	4823      	ldr	r0, [pc, #140]	@ (800244c <HAL_ADC_MspInit+0x110>)
 80023c0:	f009 f91a 	bl	800b5f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023c4:	e037      	b.n	8002436 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <HAL_ADC_MspInit+0x114>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d132      	bne.n	8002436 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80023d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80023da:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10e      	bne.n	8002400 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80023e2:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023e8:	4a17      	ldr	r2, [pc, #92]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023ea:	f043 0320 	orr.w	r3, r3, #32
 80023ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002406:	4a10      	ldr	r2, [pc, #64]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002410:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800241e:	23c0      	movs	r3, #192	@ 0xc0
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002422:	2303      	movs	r3, #3
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	4808      	ldr	r0, [pc, #32]	@ (8002454 <HAL_ADC_MspInit+0x118>)
 8002432:	f009 f8e1 	bl	800b5f8 <HAL_GPIO_Init>
}
 8002436:	bf00      	nop
 8002438:	3730      	adds	r7, #48	@ 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40022000 	.word	0x40022000
 8002444:	240136a8 	.word	0x240136a8
 8002448:	58024400 	.word	0x58024400
 800244c:	58020800 	.word	0x58020800
 8002450:	40022100 	.word	0x40022100
 8002454:	58020000 	.word	0x58020000

08002458 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a48      	ldr	r2, [pc, #288]	@ (8002598 <HAL_DAC_MspInit+0x140>)
 8002476:	4293      	cmp	r3, r2
 8002478:	f040 808a 	bne.w	8002590 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800247c:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800247e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002482:	4a46      	ldr	r2, [pc, #280]	@ (800259c <HAL_DAC_MspInit+0x144>)
 8002484:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002488:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800248c:	4b43      	ldr	r3, [pc, #268]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800248e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002492:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	4b40      	ldr	r3, [pc, #256]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800249c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a0:	4a3e      	ldr	r2, [pc, #248]	@ (800259c <HAL_DAC_MspInit+0x144>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024aa:	4b3c      	ldr	r3, [pc, #240]	@ (800259c <HAL_DAC_MspInit+0x144>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024b8:	2330      	movs	r3, #48	@ 0x30
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024bc:	2303      	movs	r3, #3
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4835      	ldr	r0, [pc, #212]	@ (80025a0 <HAL_DAC_MspInit+0x148>)
 80024cc:	f009 f894 	bl	800b5f8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 80024d0:	4b34      	ldr	r3, [pc, #208]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024d2:	4a35      	ldr	r2, [pc, #212]	@ (80025a8 <HAL_DAC_MspInit+0x150>)
 80024d4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80024d6:	4b33      	ldr	r3, [pc, #204]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024d8:	2243      	movs	r2, #67	@ 0x43
 80024da:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024dc:	4b31      	ldr	r3, [pc, #196]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024de:	2240      	movs	r2, #64	@ 0x40
 80024e0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e2:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024e8:	4b2e      	ldr	r3, [pc, #184]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ee:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024f0:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024f6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024f8:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024fe:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002506:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002508:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800250e:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002510:	2200      	movs	r2, #0
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002514:	4823      	ldr	r0, [pc, #140]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002516:	f006 ff9b 	bl	8009450 <HAL_DMA_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8002520:	f7ff fe48 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a1f      	ldr	r2, [pc, #124]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	4a1e      	ldr	r2, [pc, #120]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8002530:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002532:	4a1f      	ldr	r2, [pc, #124]	@ (80025b0 <HAL_DAC_MspInit+0x158>)
 8002534:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002538:	2244      	movs	r2, #68	@ 0x44
 800253a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800253e:	2240      	movs	r2, #64	@ 0x40
 8002540:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002548:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800254a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800254e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002550:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002552:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002556:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800255a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800255e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002566:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256e:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8002574:	480d      	ldr	r0, [pc, #52]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002576:	f006 ff6b 	bl	8009450 <HAL_DMA_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8002580:	f7ff fe18 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	4a08      	ldr	r2, [pc, #32]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	@ 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40007400 	.word	0x40007400
 800259c:	58024400 	.word	0x58024400
 80025a0:	58020000 	.word	0x58020000
 80025a4:	2400040c 	.word	0x2400040c
 80025a8:	40020010 	.word	0x40020010
 80025ac:	24000484 	.word	0x24000484
 80025b0:	40020028 	.word	0x40020028

080025b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0b8      	sub	sp, #224	@ 0xe0
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	22b8      	movs	r2, #184	@ 0xb8
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f017 fd5c 	bl	801a092 <memset>
  if(hi2c->Instance==I2C2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a27      	ldr	r2, [pc, #156]	@ (800267c <HAL_I2C_MspInit+0xc8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d146      	bne.n	8002672 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80025e4:	f04f 0208 	mov.w	r2, #8
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	4618      	mov	r0, r3
 80025fc:	f00b fd72 	bl	800e0e4 <HAL_RCCEx_PeriphCLKConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002606:	f7ff fdd5 	bl	80021b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800261a:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002628:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800262c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002630:	2312      	movs	r3, #18
 8002632:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002642:	2304      	movs	r3, #4
 8002644:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002648:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800264c:	4619      	mov	r1, r3
 800264e:	480d      	ldr	r0, [pc, #52]	@ (8002684 <HAL_I2C_MspInit+0xd0>)
 8002650:	f008 ffd2 	bl	800b5f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800265a:	4a09      	ldr	r2, [pc, #36]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800265c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002660:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800266a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002672:	bf00      	nop
 8002674:	37e0      	adds	r7, #224	@ 0xe0
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40005800 	.word	0x40005800
 8002680:	58024400 	.word	0x58024400
 8002684:	58020400 	.word	0x58020400

08002688 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b0bc      	sub	sp, #240	@ 0xf0
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a0:	f107 0320 	add.w	r3, r7, #32
 80026a4:	22b8      	movs	r2, #184	@ 0xb8
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f017 fcf2 	bl	801a092 <memset>
  if(hspi->Instance==SPI2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a72      	ldr	r2, [pc, #456]	@ (800287c <HAL_SPI_MspInit+0x1f4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d146      	bne.n	8002746 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80026b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00b fd09 	bl	800e0e4 <HAL_RCCEx_PeriphCLKConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80026d8:	f7ff fd6c 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026dc:	4b68      	ldr	r3, [pc, #416]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026e2:	4a67      	ldr	r2, [pc, #412]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026ec:	4b64      	ldr	r3, [pc, #400]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	4b61      	ldr	r3, [pc, #388]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002700:	4a5f      	ldr	r2, [pc, #380]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800270a:	4b5d      	ldr	r3, [pc, #372]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8002718:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800271c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002732:	2305      	movs	r3, #5
 8002734:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800273c:	4619      	mov	r1, r3
 800273e:	4851      	ldr	r0, [pc, #324]	@ (8002884 <HAL_SPI_MspInit+0x1fc>)
 8002740:	f008 ff5a 	bl	800b5f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002744:	e096      	b.n	8002874 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a4f      	ldr	r2, [pc, #316]	@ (8002888 <HAL_SPI_MspInit+0x200>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d146      	bne.n	80027de <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002750:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800275c:	2300      	movs	r3, #0
 800275e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	4618      	mov	r0, r3
 8002766:	f00b fcbd 	bl	800e0e4 <HAL_RCCEx_PeriphCLKConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8002770:	f7ff fd20 	bl	80021b4 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002774:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800277a:	4a41      	ldr	r2, [pc, #260]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800277c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002780:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002784:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800278a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	4b3b      	ldr	r3, [pc, #236]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002798:	4a39      	ldr	r2, [pc, #228]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027a2:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ACCEL_SCK2_Pin|ACCEL_MISO2_Pin|ACCEL_MOSI2_Pin;
 80027b0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80027b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027ca:	2306      	movs	r3, #6
 80027cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027d4:	4619      	mov	r1, r3
 80027d6:	482d      	ldr	r0, [pc, #180]	@ (800288c <HAL_SPI_MspInit+0x204>)
 80027d8:	f008 ff0e 	bl	800b5f8 <HAL_GPIO_Init>
}
 80027dc:	e04a      	b.n	8002874 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <HAL_SPI_MspInit+0x208>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d145      	bne.n	8002874 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80027e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fa:	f107 0320 	add.w	r3, r7, #32
 80027fe:	4618      	mov	r0, r3
 8002800:	f00b fc70 	bl	800e0e4 <HAL_RCCEx_PeriphCLKConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_SPI_MspInit+0x186>
      Error_Handler();
 800280a:	f7ff fcd3 	bl	80021b4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800280e:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002814:	4a1a      	ldr	r2, [pc, #104]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002816:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800281a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800281e:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002832:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800283c:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_SCK3_Pin|ACCEL_MISO3_Pin|ACCEL_MOSI3_Pin;
 800284a:	2364      	movs	r3, #100	@ 0x64
 800284c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002862:	2305      	movs	r3, #5
 8002864:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002868:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800286c:	4619      	mov	r1, r3
 800286e:	4809      	ldr	r0, [pc, #36]	@ (8002894 <HAL_SPI_MspInit+0x20c>)
 8002870:	f008 fec2 	bl	800b5f8 <HAL_GPIO_Init>
}
 8002874:	bf00      	nop
 8002876:	37f0      	adds	r7, #240	@ 0xf0
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40003800 	.word	0x40003800
 8002880:	58024400 	.word	0x58024400
 8002884:	58020400 	.word	0x58020400
 8002888:	40003c00 	.word	0x40003c00
 800288c:	58020800 	.word	0x58020800
 8002890:	40013400 	.word	0x40013400
 8002894:	58021000 	.word	0x58021000

08002898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a45      	ldr	r2, [pc, #276]	@ (80029bc <HAL_TIM_Base_MspInit+0x124>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d10f      	bne.n	80028ca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028aa:	4b45      	ldr	r3, [pc, #276]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b0:	4a43      	ldr	r2, [pc, #268]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ba:	4b41      	ldr	r3, [pc, #260]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028c8:	e074      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d2:	d10f      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d4:	4b3a      	ldr	r3, [pc, #232]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028da:	4a39      	ldr	r2, [pc, #228]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028e4:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
}
 80028f2:	e05f      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <HAL_TIM_Base_MspInit+0x12c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d117      	bne.n	800292e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028fe:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002904:	4a2e      	ldr	r2, [pc, #184]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800290e:	4b2c      	ldr	r3, [pc, #176]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	2100      	movs	r1, #0
 8002920:	201d      	movs	r0, #29
 8002922:	f006 fa30 	bl	8008d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002926:	201d      	movs	r0, #29
 8002928:	f006 fa47 	bl	8008dba <HAL_NVIC_EnableIRQ>
}
 800292c:	e042      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a25      	ldr	r2, [pc, #148]	@ (80029c8 <HAL_TIM_Base_MspInit+0x130>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d13d      	bne.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002938:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 800293a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800293e:	4a20      	ldr	r2, [pc, #128]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002948:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 800294a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 8002956:	4b1d      	ldr	r3, [pc, #116]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002958:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_TIM_Base_MspInit+0x138>)
 800295a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800295e:	221d      	movs	r2, #29
 8002960:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002962:	4b1a      	ldr	r3, [pc, #104]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002964:	2240      	movs	r2, #64	@ 0x40
 8002966:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002968:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800296e:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002970:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002974:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002978:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800297c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800297e:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002984:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002986:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800298c:	4b0f      	ldr	r3, [pc, #60]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800298e:	2200      	movs	r2, #0
 8002990:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002992:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002994:	2200      	movs	r2, #0
 8002996:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002998:	480c      	ldr	r0, [pc, #48]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800299a:	f006 fd59 	bl	8009450 <HAL_DMA_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 80029a4:	f7ff fc06 	bl	80021b4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80029ae:	4a07      	ldr	r2, [pc, #28]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80029b4:	bf00      	nop
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40010000 	.word	0x40010000
 80029c0:	58024400 	.word	0x58024400
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	24000818 	.word	0x24000818
 80029d0:	40020040 	.word	0x40020040

080029d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a26      	ldr	r2, [pc, #152]	@ (8002a8c <HAL_TIM_MspPostInit+0xb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d120      	bne.n	8002a38 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 80029f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029fc:	4a24      	ldr	r2, [pc, #144]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a06:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8002a14:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a26:	2302      	movs	r3, #2
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4818      	ldr	r0, [pc, #96]	@ (8002a94 <HAL_TIM_MspPostInit+0xc0>)
 8002a32:	f008 fde1 	bl	800b5f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a36:	e024      	b.n	8002a82 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a16      	ldr	r2, [pc, #88]	@ (8002a98 <HAL_TIM_MspPostInit+0xc4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d11f      	bne.n	8002a82 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a42:	4b13      	ldr	r3, [pc, #76]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a52:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8002a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a72:	2302      	movs	r3, #2
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4807      	ldr	r0, [pc, #28]	@ (8002a9c <HAL_TIM_MspPostInit+0xc8>)
 8002a7e:	f008 fdbb 	bl	800b5f8 <HAL_GPIO_Init>
}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	@ 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	58024400 	.word	0x58024400
 8002a94:	58020800 	.word	0x58020800
 8002a98:	40000800 	.word	0x40000800
 8002a9c:	58020c00 	.word	0x58020c00

08002aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b0ba      	sub	sp, #232	@ 0xe8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab8:	f107 0318 	add.w	r3, r7, #24
 8002abc:	22b8      	movs	r2, #184	@ 0xb8
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f017 fae6 	bl	801a092 <memset>
  if(huart->Instance==UART7)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a4d      	ldr	r2, [pc, #308]	@ (8002c00 <HAL_UART_MspInit+0x160>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d147      	bne.n	8002b60 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002ad0:	f04f 0202 	mov.w	r2, #2
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae2:	f107 0318 	add.w	r3, r7, #24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f00b fafc 	bl	800e0e4 <HAL_RCCEx_PeriphCLKConfig>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002af2:	f7ff fb5f 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002af6:	4b43      	ldr	r3, [pc, #268]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002afc:	4a41      	ldr	r2, [pc, #260]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002afe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b06:	4b3f      	ldr	r3, [pc, #252]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b14:	4b3b      	ldr	r3, [pc, #236]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b1a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b1c:	f043 0310 	orr.w	r3, r3, #16
 8002b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b24:	4b37      	ldr	r3, [pc, #220]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002b32:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002b36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002b4c:	2307      	movs	r3, #7
 8002b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b56:	4619      	mov	r1, r3
 8002b58:	482b      	ldr	r0, [pc, #172]	@ (8002c08 <HAL_UART_MspInit+0x168>)
 8002b5a:	f008 fd4d 	bl	800b5f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b5e:	e04a      	b.n	8002bf6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a29      	ldr	r2, [pc, #164]	@ (8002c0c <HAL_UART_MspInit+0x16c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d145      	bne.n	8002bf6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b6a:	f04f 0201 	mov.w	r2, #1
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b7c:	f107 0318 	add.w	r3, r7, #24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f00b faaf 	bl	800e0e4 <HAL_RCCEx_PeriphCLKConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002b8c:	f7ff fb12 	bl	80021b4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b90:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b96:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b98:	f043 0310 	orr.w	r3, r3, #16
 8002b9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ba0:	4b18      	ldr	r3, [pc, #96]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bb4:	4a13      	ldr	r2, [pc, #76]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bbe:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002bcc:	23c0      	movs	r3, #192	@ 0xc0
 8002bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002be4:	2307      	movs	r3, #7
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4807      	ldr	r0, [pc, #28]	@ (8002c10 <HAL_UART_MspInit+0x170>)
 8002bf2:	f008 fd01 	bl	800b5f8 <HAL_GPIO_Init>
}
 8002bf6:	bf00      	nop
 8002bf8:	37e8      	adds	r7, #232	@ 0xe8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40007800 	.word	0x40007800
 8002c04:	58024400 	.word	0x58024400
 8002c08:	58021000 	.word	0x58021000
 8002c0c:	40011000 	.word	0x40011000
 8002c10:	58020400 	.word	0x58020400

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <NMI_Handler+0x4>

08002c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <BusFault_Handler+0x4>

08002c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <UsageFault_Handler+0x4>

08002c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6a:	f004 fbf9 	bl	8007460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA2_Pin);
 8002c76:	2002      	movs	r0, #2
 8002c78:	f008 fe97 	bl	800b9aa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB2_Pin);
 8002c84:	2004      	movs	r0, #4
 8002c86:	f008 fe90 	bl	800b9aa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA3_Pin);
 8002c92:	2008      	movs	r0, #8
 8002c94:	f008 fe89 	bl	800b9aa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002ca0:	4802      	ldr	r0, [pc, #8]	@ (8002cac <DMA1_Stream0_IRQHandler+0x10>)
 8002ca2:	f007 f997 	bl	8009fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2400040c 	.word	0x2400040c

08002cb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002cb4:	4802      	ldr	r0, [pc, #8]	@ (8002cc0 <DMA1_Stream1_IRQHandler+0x10>)
 8002cb6:	f007 f98d 	bl	8009fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	24000484 	.word	0x24000484

08002cc4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <DMA1_Stream2_IRQHandler+0x10>)
 8002cca:	f007 f983 	bl	8009fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	24000818 	.word	0x24000818

08002cd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA1_Pin);
 8002cdc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ce0:	f008 fe63 	bl	800b9aa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB1_Pin);
 8002ce4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002ce8:	f008 fe5f 	bl	800b9aa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cf4:	4802      	ldr	r0, [pc, #8]	@ (8002d00 <TIM3_IRQHandler+0x10>)
 8002cf6:	f00f fab3 	bl	8012260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	24000780 	.word	0x24000780

08002d04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB3_Pin);
 8002d08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d0c:	f008 fe4d 	bl	800b9aa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002d18:	4802      	ldr	r0, [pc, #8]	@ (8002d24 <OTG_HS_IRQHandler+0x10>)
 8002d1a:	f009 f8d5 	bl	800bec8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	24014b98 	.word	0x24014b98

08002d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return 1;
 8002d2c:	2301      	movs	r3, #1
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_kill>:

int _kill(int pid, int sig)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d42:	f017 fa17 	bl	801a174 <__errno>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2216      	movs	r2, #22
 8002d4a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_exit>:

void _exit (int status)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ffe7 	bl	8002d38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d6a:	bf00      	nop
 8002d6c:	e7fd      	b.n	8002d6a <_exit+0x12>

08002d6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e00a      	b.n	8002d96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d80:	f3af 8000 	nop.w
 8002d84:	4601      	mov	r1, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	60ba      	str	r2, [r7, #8]
 8002d8c:	b2ca      	uxtb	r2, r1
 8002d8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3301      	adds	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	dbf0      	blt.n	8002d80 <_read+0x12>
  }

  return len;
 8002d9e:	687b      	ldr	r3, [r7, #4]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e009      	b.n	8002dce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	60ba      	str	r2, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	dbf1      	blt.n	8002dba <_write+0x12>
  }
  return len;
 8002dd6:	687b      	ldr	r3, [r7, #4]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <_close>:

int _close(int file)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e08:	605a      	str	r2, [r3, #4]
  return 0;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <_isatty>:

int _isatty(int file)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e20:	2301      	movs	r3, #1
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e50:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <_sbrk+0x5c>)
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <_sbrk+0x60>)
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <_sbrk+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e64:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <_sbrk+0x64>)
 8002e66:	4a12      	ldr	r2, [pc, #72]	@ (8002eb0 <_sbrk+0x68>)
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <_sbrk+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d207      	bcs.n	8002e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e78:	f017 f97c 	bl	801a174 <__errno>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	220c      	movs	r2, #12
 8002e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	e009      	b.n	8002e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e88:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <_sbrk+0x64>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <_sbrk+0x64>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	4a05      	ldr	r2, [pc, #20]	@ (8002eac <_sbrk+0x64>)
 8002e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	24050000 	.word	0x24050000
 8002ea8:	00000800 	.word	0x00000800
 8002eac:	240136ac 	.word	0x240136ac
 8002eb0:	240153e8 	.word	0x240153e8

08002eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eb8:	4b32      	ldr	r3, [pc, #200]	@ (8002f84 <SystemInit+0xd0>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebe:	4a31      	ldr	r2, [pc, #196]	@ (8002f84 <SystemInit+0xd0>)
 8002ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f88 <SystemInit+0xd4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d807      	bhi.n	8002ee4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f88 <SystemInit+0xd4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 030f 	bic.w	r3, r3, #15
 8002edc:	4a2a      	ldr	r2, [pc, #168]	@ (8002f88 <SystemInit+0xd4>)
 8002ede:	f043 0307 	orr.w	r3, r3, #7
 8002ee2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ee4:	4b29      	ldr	r3, [pc, #164]	@ (8002f8c <SystemInit+0xd8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	@ (8002f8c <SystemInit+0xd8>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ef0:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <SystemInit+0xd8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ef6:	4b25      	ldr	r3, [pc, #148]	@ (8002f8c <SystemInit+0xd8>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4924      	ldr	r1, [pc, #144]	@ (8002f8c <SystemInit+0xd8>)
 8002efc:	4b24      	ldr	r3, [pc, #144]	@ (8002f90 <SystemInit+0xdc>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f02:	4b21      	ldr	r3, [pc, #132]	@ (8002f88 <SystemInit+0xd4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <SystemInit+0xd4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 030f 	bic.w	r3, r3, #15
 8002f16:	4a1c      	ldr	r2, [pc, #112]	@ (8002f88 <SystemInit+0xd4>)
 8002f18:	f043 0307 	orr.w	r3, r3, #7
 8002f1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <SystemInit+0xd8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f24:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <SystemInit+0xd8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f2a:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <SystemInit+0xd8>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f30:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <SystemInit+0xd8>)
 8002f32:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <SystemInit+0xe0>)
 8002f34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <SystemInit+0xd8>)
 8002f38:	4a17      	ldr	r2, [pc, #92]	@ (8002f98 <SystemInit+0xe4>)
 8002f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <SystemInit+0xd8>)
 8002f3e:	4a17      	ldr	r2, [pc, #92]	@ (8002f9c <SystemInit+0xe8>)
 8002f40:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f42:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <SystemInit+0xd8>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f48:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <SystemInit+0xd8>)
 8002f4a:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <SystemInit+0xe8>)
 8002f4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f8c <SystemInit+0xd8>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f54:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <SystemInit+0xd8>)
 8002f56:	4a11      	ldr	r2, [pc, #68]	@ (8002f9c <SystemInit+0xe8>)
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <SystemInit+0xd8>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <SystemInit+0xd8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <SystemInit+0xd8>)
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f6c:	4b07      	ldr	r3, [pc, #28]	@ (8002f8c <SystemInit+0xd8>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <SystemInit+0xec>)
 8002f74:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002f78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00
 8002f88:	52002000 	.word	0x52002000
 8002f8c:	58024400 	.word	0x58024400
 8002f90:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f94:	02020200 	.word	0x02020200
 8002f98:	01ff0000 	.word	0x01ff0000
 8002f9c:	01010280 	.word	0x01010280
 8002fa0:	52004000 	.word	0x52004000

08002fa4 <FindClosest>:
 */

#include "util.h"

uint32_t FindClosest(const uint32_t* arr, uint32_t len, uint32_t target)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
	uint32_t min_diff = 0xFFFFFFFF;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	61fb      	str	r3, [r7, #28]
	uint32_t closest_value = arr[0];
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < len; i++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e019      	b.n	8002ff6 <FindClosest+0x52>
	{
		uint32_t diff = abs(arr[i] - target);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bfb8      	it	lt
 8002fd4:	425b      	neglt	r3, r3
 8002fd6:	613b      	str	r3, [r7, #16]

		if (diff < min_diff)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <FindClosest+0x4c>
		{
			min_diff = diff;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	61fb      	str	r3, [r7, #28]
			closest_value = arr[i];
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < len; i++)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d3e1      	bcc.n	8002fc2 <FindClosest+0x1e>
		}
	}

	return closest_value;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3724      	adds	r7, #36	@ 0x24
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800301a:	2b00      	cmp	r3, #0
 800301c:	db0b      	blt.n	8003036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4907      	ldr	r1, [pc, #28]	@ (8003044 <__NVIC_EnableIRQ+0x38>)
 8003026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2001      	movs	r0, #1
 800302e:	fa00 f202 	lsl.w	r2, r0, r2
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000e100 	.word	0xe000e100

08003048 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003056:	2b00      	cmp	r3, #0
 8003058:	db12      	blt.n	8003080 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	490a      	ldr	r1, [pc, #40]	@ (800308c <__NVIC_DisableIRQ+0x44>)
 8003062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2001      	movs	r0, #1
 800306a:	fa00 f202 	lsl.w	r2, r0, r2
 800306e:	3320      	adds	r3, #32
 8003070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003074:	f3bf 8f4f 	dsb	sy
}
 8003078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800307a:	f3bf 8f6f 	isb	sy
}
 800307e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000e100 	.word	0xe000e100

08003090 <VibeCheck_Init>:
		TIM_HandleTypeDef* htim_rgb,
		volatile uint32_t* time_micros,
		SPI_HandleTypeDef* hspi_accel0,
		SPI_HandleTypeDef* hspi_accel1,
		SPI_HandleTypeDef* hspi_accel2)
{
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b0e5      	sub	sp, #404	@ 0x194
 8003094:	af10      	add	r7, sp, #64	@ 0x40
 8003096:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 800309a:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 800309e:	6020      	str	r0, [r4, #0]
 80030a0:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 80030a4:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 80030a8:	6001      	str	r1, [r0, #0]
 80030aa:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80030ae:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 80030b2:	600a      	str	r2, [r1, #0]
 80030b4:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80030b8:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80030bc:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);  /* wait for steady power so the RGB LEDs don't get into a weird state */
 80030be:	200a      	movs	r0, #10
 80030c0:	f004 f9ee 	bl	80074a0 <HAL_Delay>

	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 80030c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f002 fa44 	bl	800555c <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 80030d4:	4ac6      	ldr	r2, [pc, #792]	@ (80033f0 <VibeCheck_Init+0x360>)
 80030d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80030da:	6810      	ldr	r0, [r2, #0]
 80030dc:	6018      	str	r0, [r3, #0]
 80030de:	8891      	ldrh	r1, [r2, #4]
 80030e0:	7992      	ldrb	r2, [r2, #6]
 80030e2:	8099      	strh	r1, [r3, #4]
 80030e4:	719a      	strb	r2, [r3, #6]
 80030e6:	f207 130f 	addw	r3, r7, #271	@ 0x10f
 80030ea:	2239      	movs	r2, #57	@ 0x39
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f016 ffcf 	bl	801a092 <memset>
 80030f4:	4bbf      	ldr	r3, [pc, #764]	@ (80033f4 <VibeCheck_Init+0x364>)
 80030f6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 80030fa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4bbc      	ldr	r3, [pc, #752]	@ (80033f8 <VibeCheck_Init+0x368>)
 8003106:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8003108:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 800310c:	4abb      	ldr	r2, [pc, #748]	@ (80033fc <VibeCheck_Init+0x36c>)
 800310e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003112:	6810      	ldr	r0, [r2, #0]
 8003114:	6851      	ldr	r1, [r2, #4]
 8003116:	c303      	stmia	r3!, {r0, r1}
 8003118:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800311c:	2238      	movs	r2, #56	@ 0x38
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f016 ffb6 	bl	801a092 <memset>
 8003126:	4bb6      	ldr	r3, [pc, #728]	@ (8003400 <VibeCheck_Init+0x370>)
 8003128:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 800312c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003130:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4bb3      	ldr	r3, [pc, #716]	@ (8003404 <VibeCheck_Init+0x374>)
 8003138:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 800313a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	};

	VibeCheckShell_InputHandler rgb_cmd = {
 800313e:	4bb2      	ldr	r3, [pc, #712]	@ (8003408 <VibeCheck_Init+0x378>)
 8003140:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003142:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003146:	223c      	movs	r2, #60	@ 0x3c
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f016 ffa1 	bl	801a092 <memset>
 8003150:	4bae      	ldr	r3, [pc, #696]	@ (800340c <VibeCheck_Init+0x37c>)
 8003152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			.name = "rgb",
			.execute = VibeCheckRGBCMD_Execute,
			.obj = &vc->rgb
 8003156:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800315a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4bab      	ldr	r3, [pc, #684]	@ (8003410 <VibeCheck_Init+0x380>)
 8003162:	4413      	add	r3, r2
	VibeCheckShell_InputHandler rgb_cmd = {
 8003164:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	};

	VibeCheckShell_InputHandler sensor_cmd = {
 8003168:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800316c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003170:	4aa8      	ldr	r2, [pc, #672]	@ (8003414 <VibeCheck_Init+0x384>)
 8003172:	460b      	mov	r3, r1
 8003174:	6810      	ldr	r0, [r2, #0]
 8003176:	6018      	str	r0, [r3, #0]
 8003178:	8890      	ldrh	r0, [r2, #4]
 800317a:	7992      	ldrb	r2, [r2, #6]
 800317c:	8098      	strh	r0, [r3, #4]
 800317e:	719a      	strb	r2, [r3, #6]
 8003180:	1dcb      	adds	r3, r1, #7
 8003182:	2239      	movs	r2, #57	@ 0x39
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f016 ff83 	bl	801a092 <memset>
 800318c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003190:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003194:	4aa0      	ldr	r2, [pc, #640]	@ (8003418 <VibeCheck_Init+0x388>)
 8003196:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "sensor",
			.execute = VibeCheckSensorCMD_Execute,
			.obj = &vc->sensor
 8003198:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800319c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4b9e      	ldr	r3, [pc, #632]	@ (800341c <VibeCheck_Init+0x38c>)
 80031a4:	4413      	add	r3, r2
	VibeCheckShell_InputHandler sensor_cmd = {
 80031a6:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80031aa:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80031ae:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 80031b0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031b8:	681e      	ldr	r6, [r3, #0]
 80031ba:	466d      	mov	r5, sp
 80031bc:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 80031c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031cc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80031d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031da:	4630      	mov	r0, r6
 80031dc:	f002 fb08 	bl	80057f0 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 80031e0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031e4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031e8:	681e      	ldr	r6, [r3, #0]
 80031ea:	466d      	mov	r5, sp
 80031ec:	f107 04cc 	add.w	r4, r7, #204	@ 0xcc
 80031f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003200:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003204:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800320a:	4630      	mov	r0, r6
 800320c:	f002 faf0 	bl	80057f0 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, rgb_cmd);
 8003210:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003214:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003218:	681e      	ldr	r6, [r3, #0]
 800321a:	466d      	mov	r5, sp
 800321c:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 8003220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003230:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003234:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800323a:	4630      	mov	r0, r6
 800323c:	f002 fad8 	bl	80057f0 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, sensor_cmd);
 8003240:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003244:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	607b      	str	r3, [r7, #4]
 800324c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003250:	f5a3 7690 	sub.w	r6, r3, #288	@ 0x120
 8003254:	466d      	mov	r5, sp
 8003256:	f106 040c 	add.w	r4, r6, #12
 800325a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800325c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800325e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003266:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800326a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800326e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f002 fabc 	bl	80057f0 <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_OutputHandler wavegen_sender = {
 8003278:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800327c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003280:	4a67      	ldr	r2, [pc, #412]	@ (8003420 <VibeCheck_Init+0x390>)
 8003282:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckWaveGenSender_Execute,
			.obj = &vc->wavegen
 8003284:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003288:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4b5d      	ldr	r3, [pc, #372]	@ (8003404 <VibeCheck_Init+0x374>)
 8003290:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler wavegen_sender = {
 8003292:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003296:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 800329a:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_data_sender = {
 800329c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032a0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80032a4:	4a5f      	ldr	r2, [pc, #380]	@ (8003424 <VibeCheck_Init+0x394>)
 80032a6:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Data_Execute,
			.obj = &vc->sensor
 80032a8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b5a      	ldr	r3, [pc, #360]	@ (800341c <VibeCheck_Init+0x38c>)
 80032b4:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_data_sender = {
 80032b6:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80032ba:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80032be:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_status_sender = {
 80032c0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032c4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80032c8:	4a57      	ldr	r2, [pc, #348]	@ (8003428 <VibeCheck_Init+0x398>)
 80032ca:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Status_Execute,
			.obj = &vc->sensor
 80032cc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b51      	ldr	r3, [pc, #324]	@ (800341c <VibeCheck_Init+0x38c>)
 80032d8:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_status_sender = {
 80032da:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80032de:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80032e2:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_RegisterOutputHandler(&vc->shell, wavegen_sender);
 80032e4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032e8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80032f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80032fa:	f002 faad 	bl	8005858 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_data_sender);
 80032fe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003302:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800330c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003310:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003314:	f002 faa0 	bl	8005858 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_status_sender);
 8003318:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800331c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003326:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800332a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800332e:	f002 fa93 	bl	8005858 <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 8003332:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003336:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b2e      	ldr	r3, [pc, #184]	@ (80033f8 <VibeCheck_Init+0x368>)
 800333e:	4413      	add	r3, r2
 8003340:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003344:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8003348:	6811      	ldr	r1, [r2, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f002 fd30 	bl	8005db0 <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 8003350:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003354:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b2a      	ldr	r3, [pc, #168]	@ (8003404 <VibeCheck_Init+0x374>)
 800335c:	4413      	add	r3, r2
 800335e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003362:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8003366:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800336a:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	6809      	ldr	r1, [r1, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f003 fa6e 	bl	8006854 <VibeCheckWaveGen_Init>
	VibeCheckRGB_Init(&vc->rgb, htim_rgb);
 8003378:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800337c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b23      	ldr	r3, [pc, #140]	@ (8003410 <VibeCheck_Init+0x380>)
 8003384:	4413      	add	r3, r2
 8003386:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fae2 	bl	8003954 <VibeCheckRGB_Init>
	VibeCheckRGB_SetBaseSequence(&vc->rgb, base_sequence_times, base_sequence_colors, base_sequence_len);
 8003390:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003394:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	481d      	ldr	r0, [pc, #116]	@ (8003410 <VibeCheck_Init+0x380>)
 800339c:	4418      	add	r0, r3
 800339e:	2310      	movs	r3, #16
 80033a0:	4a22      	ldr	r2, [pc, #136]	@ (800342c <VibeCheck_Init+0x39c>)
 80033a2:	4923      	ldr	r1, [pc, #140]	@ (8003430 <VibeCheck_Init+0x3a0>)
 80033a4:	f000 fb89 	bl	8003aba <VibeCheckRGB_SetBaseSequence>
	VibeCheckRGB_SetTopSequence(&vc->rgb, top_sequence_times, top_sequence_colors, top_sequence_len);
 80033a8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80033ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4817      	ldr	r0, [pc, #92]	@ (8003410 <VibeCheck_Init+0x380>)
 80033b4:	4418      	add	r0, r3
 80033b6:	2304      	movs	r3, #4
 80033b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003434 <VibeCheck_Init+0x3a4>)
 80033ba:	491f      	ldr	r1, [pc, #124]	@ (8003438 <VibeCheck_Init+0x3a8>)
 80033bc:	f000 fbb4 	bl	8003b28 <VibeCheckRGB_SetTopSequence>
	VibeCheckSensor_Init(&vc->sensor, time_micros, hspi_accel0, hspi_accel1, hspi_accel2);
 80033c0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80033c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4814      	ldr	r0, [pc, #80]	@ (800341c <VibeCheck_Init+0x38c>)
 80033cc:	4418      	add	r0, r3
 80033ce:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80033d8:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80033dc:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80033e0:	f000 fdb8 	bl	8003f54 <VibeCheckSensor_Init>
}
 80033e4:	bf00      	nop
 80033e6:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ee:	bf00      	nop
 80033f0:	0801d7f0 	.word	0x0801d7f0
 80033f4:	08006351 	.word	0x08006351
 80033f8:	00011424 	.word	0x00011424
 80033fc:	0801d7f8 	.word	0x0801d7f8
 8003400:	08007155 	.word	0x08007155
 8003404:	00011444 	.word	0x00011444
 8003408:	00626772 	.word	0x00626772
 800340c:	08003d8d 	.word	0x08003d8d
 8003410:	00012490 	.word	0x00012490
 8003414:	0801d800 	.word	0x0801d800
 8003418:	080051b1 	.word	0x080051b1
 800341c:	00012a10 	.word	0x00012a10
 8003420:	080072b1 	.word	0x080072b1
 8003424:	08005401 	.word	0x08005401
 8003428:	080054d1 	.word	0x080054d1
 800342c:	0801dad4 	.word	0x0801dad4
 8003430:	0801da94 	.word	0x0801da94
 8003434:	0801da28 	.word	0x0801da28
 8003438:	0801da18 	.word	0x0801da18
 800343c:	00000000 	.word	0x00000000

08003440 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b08d      	sub	sp, #52	@ 0x34
 8003444:	af02      	add	r7, sp, #8
 8003446:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003448:	f004 f81e 	bl	8007488 <HAL_GetTick>
 800344c:	6238      	str	r0, [r7, #32]


	/* call object update functions */
	VibeCheckWaveGen_Update(&vc->wavegen);
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4b9d      	ldr	r3, [pc, #628]	@ (80036c8 <VibeCheck_Loop+0x288>)
 8003452:	4413      	add	r3, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f003 fa9d 	bl	8006994 <VibeCheckWaveGen_Update>
	VibeCheckRGB_Update(&vc->rgb);
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4b9b      	ldr	r3, [pc, #620]	@ (80036cc <VibeCheck_Loop+0x28c>)
 800345e:	4413      	add	r3, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f000 faad 	bl	80039c0 <VibeCheckRGB_Update>
	VibeCheckSensor_Update(&vc->sensor);
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4b99      	ldr	r3, [pc, #612]	@ (80036d0 <VibeCheck_Loop+0x290>)
 800346a:	4413      	add	r3, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fe83 	bl	8004178 <VibeCheckSensor_Update>


	/* update the shell */
	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4618      	mov	r0, r3
 8003476:	f002 f8b3 	bl	80055e0 <VibeCheckShell_Update>
 800347a:	4603      	mov	r3, r0
 800347c:	61fb      	str	r3, [r7, #28]

	/* blink indicator LEDs based on shell status */
	if (shell_status.ihandl_status == VC_SHELL_INPUT_PROCESSED)
 800347e:	7f3b      	ldrb	r3, [r7, #28]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10e      	bne.n	80034a2 <VibeCheck_Loop+0x62>
	{
		VibeCheckRGB_SetTopSequence(&vc->rgb, led_shell_success_times, led_shell_success_colors, led_shell_success_len);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4891      	ldr	r0, [pc, #580]	@ (80036cc <VibeCheck_Loop+0x28c>)
 8003488:	4418      	add	r0, r3
 800348a:	2304      	movs	r3, #4
 800348c:	4a91      	ldr	r2, [pc, #580]	@ (80036d4 <VibeCheck_Loop+0x294>)
 800348e:	4992      	ldr	r1, [pc, #584]	@ (80036d8 <VibeCheck_Loop+0x298>)
 8003490:	f000 fb4a 	bl	8003b28 <VibeCheckRGB_SetTopSequence>
		VibeCheckRGB_StartTopSequence(&vc->rgb);
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4b8d      	ldr	r3, [pc, #564]	@ (80036cc <VibeCheck_Loop+0x28c>)
 8003498:	4413      	add	r3, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fb5b 	bl	8003b56 <VibeCheckRGB_StartTopSequence>
 80034a0:	e013      	b.n	80034ca <VibeCheck_Loop+0x8a>
	}
	else if (shell_status.ihandl_status == VC_SHELL_INPUT_ERROR_NO_HANDLER || shell_status.ihandl_status == VC_SHELL_INPUT_ERROR_EXECUTING)
 80034a2:	7f3b      	ldrb	r3, [r7, #28]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d002      	beq.n	80034ae <VibeCheck_Loop+0x6e>
 80034a8:	7f3b      	ldrb	r3, [r7, #28]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d10d      	bne.n	80034ca <VibeCheck_Loop+0x8a>
	{
		VibeCheckRGB_SetTopSequence(&vc->rgb, led_shell_failure_times, led_shell_failure_colors, led_shell_failure_len);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4886      	ldr	r0, [pc, #536]	@ (80036cc <VibeCheck_Loop+0x28c>)
 80034b2:	4418      	add	r0, r3
 80034b4:	2304      	movs	r3, #4
 80034b6:	4a89      	ldr	r2, [pc, #548]	@ (80036dc <VibeCheck_Loop+0x29c>)
 80034b8:	4989      	ldr	r1, [pc, #548]	@ (80036e0 <VibeCheck_Loop+0x2a0>)
 80034ba:	f000 fb35 	bl	8003b28 <VibeCheckRGB_SetTopSequence>
		VibeCheckRGB_StartTopSequence(&vc->rgb);
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4b82      	ldr	r3, [pc, #520]	@ (80036cc <VibeCheck_Loop+0x28c>)
 80034c2:	4413      	add	r3, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fb46 	bl	8003b56 <VibeCheckRGB_StartTopSequence>


	/* send stuff over USB */
	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f107 0214 	add.w	r2, r7, #20
 80034d0:	f107 0118 	add.w	r1, r7, #24
 80034d4:	4618      	mov	r0, r3
 80034d6:	f002 fa3d 	bl	8005954 <VibeCheckShell_GetOutput>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d015      	beq.n	800350c <VibeCheck_Loop+0xcc>
	{
		NVIC_DisableIRQ(OTG_HS_IRQn);
 80034e0:	204d      	movs	r0, #77	@ 0x4d
 80034e2:	f7ff fdb1 	bl	8003048 <__NVIC_DisableIRQ>
		if (CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len) == USBD_OK)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	b292      	uxth	r2, r2
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f014 fdd6 	bl	80180a0 <CDC_Transmit_HS>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d105      	bne.n	8003506 <VibeCheck_Loop+0xc6>
			VibeCheckShell_UpdateOutputBuffer(&vc->shell, usb_tx_len);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f002 fa75 	bl	80059f0 <VibeCheckShell_UpdateOutputBuffer>
		NVIC_EnableIRQ(OTG_HS_IRQn);
 8003506:	204d      	movs	r0, #77	@ 0x4d
 8003508:	f7ff fd80 	bl	800300c <__NVIC_EnableIRQ>
	}


	/* visualize the acceleration with the RGB LEDs */
	/* TODO: turn off the LEDs when done measuring */
	if (time - time_prev_led_update > 30)
 800350c:	4b75      	ldr	r3, [pc, #468]	@ (80036e4 <VibeCheck_Loop+0x2a4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6a3a      	ldr	r2, [r7, #32]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b1e      	cmp	r3, #30
 8003516:	f240 81b1 	bls.w	800387c <VibeCheck_Loop+0x43c>
	{
		time_prev_led_update = time;
 800351a:	4a72      	ldr	r2, [pc, #456]	@ (80036e4 <VibeCheck_Loop+0x2a4>)
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	6013      	str	r3, [r2, #0]

		if (!vc->rgb.top_sequence.is_running)  /* let the top sequence have precedence over the visualization */
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8003526:	f893 3a08 	ldrb.w	r3, [r3, #2568]	@ 0xa08
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 81a6 	bne.w	800387c <VibeCheck_Loop+0x43c>
		{
			for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003530:	2300      	movs	r3, #0
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
 8003534:	e19e      	b.n	8003874 <VibeCheck_Loop+0x434>
			{
				if (vc->sensor.status[i].is_connected)
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	18ca      	adds	r2, r1, r3
 8003544:	4b68      	ldr	r3, [pc, #416]	@ (80036e8 <VibeCheck_Loop+0x2a8>)
 8003546:	4413      	add	r3, r2
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 818f 	beq.w	800386e <VibeCheck_Loop+0x42e>
				{
					if (vc->sensor.status[i].accel_measuring)
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	18ca      	adds	r2, r1, r3
 800355e:	4b63      	ldr	r3, [pc, #396]	@ (80036ec <VibeCheck_Loop+0x2ac>)
 8003560:	4413      	add	r3, r2
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80cb 	beq.w	8003700 <VibeCheck_Loop+0x2c0>
					{
						/* write the LEDs */
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].accel_x) / vc->sensor.sensor_config[i].g_range, 0, 0);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4857      	ldr	r0, [pc, #348]	@ (80036cc <VibeCheck_Loop+0x28c>)
 800356e:	4418      	add	r0, r3
 8003570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	189c      	adds	r4, r3, r2
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	18ca      	adds	r2, r1, r3
 8003586:	4b5a      	ldr	r3, [pc, #360]	@ (80036f0 <VibeCheck_Loop+0x2b0>)
 8003588:	4413      	add	r3, r2
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	eef0 7ae7 	vabs.f32	s15, s15
 8003592:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003596:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 80036c0 <VibeCheck_Loop+0x280>
 800359a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	18ca      	adds	r2, r1, r3
 80035ac:	4b51      	ldr	r3, [pc, #324]	@ (80036f4 <VibeCheck_Loop+0x2b4>)
 80035ae:	4413      	add	r3, r2
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80035ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80035be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035c2:	edc7 7a00 	vstr	s15, [r7]
 80035c6:	783b      	ldrb	r3, [r7, #0]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	2300      	movs	r3, #0
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	2300      	movs	r3, #0
 80035d0:	4621      	mov	r1, r4
 80035d2:	f000 fae0 	bl	8003b96 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_y) / vc->sensor.sensor_config[i].g_range, 0);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	483c      	ldr	r0, [pc, #240]	@ (80036cc <VibeCheck_Loop+0x28c>)
 80035da:	4418      	add	r0, r3
 80035dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035de:	4613      	mov	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	4413      	add	r3, r2
 80035e4:	1c5c      	adds	r4, r3, #1
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	18ca      	adds	r2, r1, r3
 80035f4:	4b40      	ldr	r3, [pc, #256]	@ (80036f8 <VibeCheck_Loop+0x2b8>)
 80035f6:	4413      	add	r3, r2
 80035f8:	edd3 7a00 	vldr	s15, [r3]
 80035fc:	eef0 7ae7 	vabs.f32	s15, s15
 8003600:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003604:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 80036c0 <VibeCheck_Loop+0x280>
 8003608:	ee27 5b06 	vmul.f64	d5, d7, d6
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	18ca      	adds	r2, r1, r3
 800361a:	4b36      	ldr	r3, [pc, #216]	@ (80036f4 <VibeCheck_Loop+0x2b4>)
 800361c:	4413      	add	r3, r2
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	ee07 3a90 	vmov	s15, r3
 8003624:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003628:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800362c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003630:	edc7 7a00 	vstr	s15, [r7]
 8003634:	783b      	ldrb	r3, [r7, #0]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2200      	movs	r2, #0
 800363a:	9200      	str	r2, [sp, #0]
 800363c:	2200      	movs	r2, #0
 800363e:	4621      	mov	r1, r4
 8003640:	f000 faa9 	bl	8003b96 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_z) / vc->sensor.sensor_config[i].g_range);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4821      	ldr	r0, [pc, #132]	@ (80036cc <VibeCheck_Loop+0x28c>)
 8003648:	4418      	add	r0, r3
 800364a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	1c9c      	adds	r4, r3, #2
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	18ca      	adds	r2, r1, r3
 8003662:	4b26      	ldr	r3, [pc, #152]	@ (80036fc <VibeCheck_Loop+0x2bc>)
 8003664:	4413      	add	r3, r2
 8003666:	edd3 7a00 	vldr	s15, [r3]
 800366a:	eef0 7ae7 	vabs.f32	s15, s15
 800366e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003672:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80036c0 <VibeCheck_Loop+0x280>
 8003676:	ee27 5b06 	vmul.f64	d5, d7, d6
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	18ca      	adds	r2, r1, r3
 8003688:	4b1a      	ldr	r3, [pc, #104]	@ (80036f4 <VibeCheck_Loop+0x2b4>)
 800368a:	4413      	add	r3, r2
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003696:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800369a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800369e:	edc7 7a00 	vstr	s15, [r7]
 80036a2:	783b      	ldrb	r3, [r7, #0]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2300      	movs	r3, #0
 80036aa:	2200      	movs	r2, #0
 80036ac:	4621      	mov	r1, r4
 80036ae:	f000 fa72 	bl	8003b96 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SendColors(&vc->rgb);
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <VibeCheck_Loop+0x28c>)
 80036b6:	4413      	add	r3, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fade 	bl	8003c7a <VibeCheckRGB_SendColors>
 80036be:	e0d6      	b.n	800386e <VibeCheck_Loop+0x42e>
 80036c0:	00000000 	.word	0x00000000
 80036c4:	406fe000 	.word	0x406fe000
 80036c8:	00011444 	.word	0x00011444
 80036cc:	00012490 	.word	0x00012490
 80036d0:	00012a10 	.word	0x00012a10
 80036d4:	0801dc94 	.word	0x0801dc94
 80036d8:	0801dc84 	.word	0x0801dc84
 80036dc:	0801dd10 	.word	0x0801dd10
 80036e0:	0801dd00 	.word	0x0801dd00
 80036e4:	240136b0 	.word	0x240136b0
 80036e8:	00012b0c 	.word	0x00012b0c
 80036ec:	00012b10 	.word	0x00012b10
 80036f0:	00012a84 	.word	0x00012a84
 80036f4:	00012a20 	.word	0x00012a20
 80036f8:	00012a88 	.word	0x00012a88
 80036fc:	00012a8c 	.word	0x00012a8c
					}
					else if (vc->sensor.status[i].gyro_measuring)
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	18ca      	adds	r2, r1, r3
 800370e:	4b84      	ldr	r3, [pc, #528]	@ (8003920 <VibeCheck_Loop+0x4e0>)
 8003710:	4413      	add	r3, r2
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80aa 	beq.w	800386e <VibeCheck_Loop+0x42e>
					{
						/* write the LEDs */
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_x) / vc->sensor.sensor_config[i].dps_range, 0, 0);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4881      	ldr	r0, [pc, #516]	@ (8003924 <VibeCheck_Loop+0x4e4>)
 800371e:	4418      	add	r0, r3
 8003720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	189c      	adds	r4, r3, r2
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	18ca      	adds	r2, r1, r3
 8003736:	4b7c      	ldr	r3, [pc, #496]	@ (8003928 <VibeCheck_Loop+0x4e8>)
 8003738:	4413      	add	r3, r2
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	eef0 7ae7 	vabs.f32	s15, s15
 8003742:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003746:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8003918 <VibeCheck_Loop+0x4d8>
 800374a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	18ca      	adds	r2, r1, r3
 800375c:	4b73      	ldr	r3, [pc, #460]	@ (800392c <VibeCheck_Loop+0x4ec>)
 800375e:	4413      	add	r3, r2
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800376a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800376e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003772:	edc7 7a00 	vstr	s15, [r7]
 8003776:	783b      	ldrb	r3, [r7, #0]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	2300      	movs	r3, #0
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2300      	movs	r3, #0
 8003780:	4621      	mov	r1, r4
 8003782:	f000 fa08 	bl	8003b96 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_y) / vc->sensor.sensor_config[i].dps_range, 0);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4866      	ldr	r0, [pc, #408]	@ (8003924 <VibeCheck_Loop+0x4e4>)
 800378a:	4418      	add	r0, r3
 800378c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	1c5c      	adds	r4, r3, #1
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	18ca      	adds	r2, r1, r3
 80037a4:	4b62      	ldr	r3, [pc, #392]	@ (8003930 <VibeCheck_Loop+0x4f0>)
 80037a6:	4413      	add	r3, r2
 80037a8:	edd3 7a00 	vldr	s15, [r3]
 80037ac:	eef0 7ae7 	vabs.f32	s15, s15
 80037b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037b4:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8003918 <VibeCheck_Loop+0x4d8>
 80037b8:	ee27 5b06 	vmul.f64	d5, d7, d6
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	18ca      	adds	r2, r1, r3
 80037ca:	4b58      	ldr	r3, [pc, #352]	@ (800392c <VibeCheck_Loop+0x4ec>)
 80037cc:	4413      	add	r3, r2
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	ee07 3a90 	vmov	s15, r3
 80037d4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80037d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80037dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80037e0:	edc7 7a00 	vstr	s15, [r7]
 80037e4:	783b      	ldrb	r3, [r7, #0]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2200      	movs	r2, #0
 80037ea:	9200      	str	r2, [sp, #0]
 80037ec:	2200      	movs	r2, #0
 80037ee:	4621      	mov	r1, r4
 80037f0:	f000 f9d1 	bl	8003b96 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_z) / vc->sensor.sensor_config[i].dps_range);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	484b      	ldr	r0, [pc, #300]	@ (8003924 <VibeCheck_Loop+0x4e4>)
 80037f8:	4418      	add	r0, r3
 80037fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	1c9c      	adds	r4, r3, #2
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	18ca      	adds	r2, r1, r3
 8003812:	4b48      	ldr	r3, [pc, #288]	@ (8003934 <VibeCheck_Loop+0x4f4>)
 8003814:	4413      	add	r3, r2
 8003816:	edd3 7a00 	vldr	s15, [r3]
 800381a:	eef0 7ae7 	vabs.f32	s15, s15
 800381e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003822:	ed9f 6b3d 	vldr	d6, [pc, #244]	@ 8003918 <VibeCheck_Loop+0x4d8>
 8003826:	ee27 5b06 	vmul.f64	d5, d7, d6
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	18ca      	adds	r2, r1, r3
 8003838:	4b3c      	ldr	r3, [pc, #240]	@ (800392c <VibeCheck_Loop+0x4ec>)
 800383a:	4413      	add	r3, r2
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003846:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800384a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800384e:	edc7 7a00 	vstr	s15, [r7]
 8003852:	783b      	ldrb	r3, [r7, #0]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2300      	movs	r3, #0
 800385a:	2200      	movs	r2, #0
 800385c:	4621      	mov	r1, r4
 800385e:	f000 f99a 	bl	8003b96 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SendColors(&vc->rgb);
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4b2f      	ldr	r3, [pc, #188]	@ (8003924 <VibeCheck_Loop+0x4e4>)
 8003866:	4413      	add	r3, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fa06 	bl	8003c7a <VibeCheckRGB_SendColors>
			for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	3301      	adds	r3, #1
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
 8003874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003876:	2b02      	cmp	r3, #2
 8003878:	f67f ae5d 	bls.w	8003536 <VibeCheck_Loop+0xf6>


	/* use RGB LEDs to indicate when sensors are connected or disconnected */
	uint32_t channel;
	uint32_t is_connected;
	if (VibeCheckSensor_ConnectionChanged(&vc->sensor, &channel, &is_connected))
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4b2e      	ldr	r3, [pc, #184]	@ (8003938 <VibeCheck_Loop+0x4f8>)
 8003880:	4413      	add	r3, r2
 8003882:	f107 020c 	add.w	r2, r7, #12
 8003886:	f107 0110 	add.w	r1, r7, #16
 800388a:	4618      	mov	r0, r3
 800388c:	f001 f86d 	bl	800496a <VibeCheckSensor_ConnectionChanged>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d039      	beq.n	800390a <VibeCheck_Loop+0x4ca>
	{
		if (is_connected)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d017      	beq.n	80038cc <VibeCheck_Loop+0x48c>
		{
			VibeCheckRGB_SetTopSequence(&vc->rgb, led_sensor_connected_times[channel], led_sensor_connected_colors[channel], led_sensor_connected_len[channel]);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4821      	ldr	r0, [pc, #132]	@ (8003924 <VibeCheck_Loop+0x4e4>)
 80038a0:	4418      	add	r0, r3
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4a25      	ldr	r2, [pc, #148]	@ (800393c <VibeCheck_Loop+0x4fc>)
 80038a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4a24      	ldr	r2, [pc, #144]	@ (8003940 <VibeCheck_Loop+0x500>)
 80038ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4c23      	ldr	r4, [pc, #140]	@ (8003944 <VibeCheck_Loop+0x504>)
 80038b6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80038ba:	f000 f935 	bl	8003b28 <VibeCheckRGB_SetTopSequence>
			VibeCheckRGB_StartTopSequence(&vc->rgb);
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	4b18      	ldr	r3, [pc, #96]	@ (8003924 <VibeCheck_Loop+0x4e4>)
 80038c2:	4413      	add	r3, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 f946 	bl	8003b56 <VibeCheckRGB_StartTopSequence>
 80038ca:	e016      	b.n	80038fa <VibeCheck_Loop+0x4ba>
		}
		else
		{
			VibeCheckRGB_SetTopSequence(&vc->rgb, led_sensor_disconnected_times[channel], led_sensor_disconnected_colors[channel], led_sensor_disconnected_len[channel]);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4815      	ldr	r0, [pc, #84]	@ (8003924 <VibeCheck_Loop+0x4e4>)
 80038d0:	4418      	add	r0, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003948 <VibeCheck_Loop+0x508>)
 80038d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4a1b      	ldr	r2, [pc, #108]	@ (800394c <VibeCheck_Loop+0x50c>)
 80038de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4c1a      	ldr	r4, [pc, #104]	@ (8003950 <VibeCheck_Loop+0x510>)
 80038e6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80038ea:	f000 f91d 	bl	8003b28 <VibeCheckRGB_SetTopSequence>
			VibeCheckRGB_StartTopSequence(&vc->rgb);
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <VibeCheck_Loop+0x4e4>)
 80038f2:	4413      	add	r3, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f92e 	bl	8003b56 <VibeCheckRGB_StartTopSequence>
		}

		VibeCheckSensor_ResetConnectionFlag(&vc->sensor, channel);
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <VibeCheck_Loop+0x4f8>)
 80038fe:	4413      	add	r3, r2
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f001 f862 	bl	80049ce <VibeCheckSensor_ResetConnectionFlag>
	}
}
 800390a:	bf00      	nop
 800390c:	372c      	adds	r7, #44	@ 0x2c
 800390e:	46bd      	mov	sp, r7
 8003910:	bd90      	pop	{r4, r7, pc}
 8003912:	bf00      	nop
 8003914:	f3af 8000 	nop.w
 8003918:	00000000 	.word	0x00000000
 800391c:	406fe000 	.word	0x406fe000
 8003920:	00012b14 	.word	0x00012b14
 8003924:	00012490 	.word	0x00012490
 8003928:	00012a90 	.word	0x00012a90
 800392c:	00012a28 	.word	0x00012a28
 8003930:	00012a94 	.word	0x00012a94
 8003934:	00012a98 	.word	0x00012a98
 8003938:	00012a10 	.word	0x00012a10
 800393c:	24000008 	.word	0x24000008
 8003940:	24000014 	.word	0x24000014
 8003944:	0801e064 	.word	0x0801e064
 8003948:	24000020 	.word	0x24000020
 800394c:	2400002c 	.word	0x2400002c
 8003950:	0801e070 	.word	0x0801e070

08003954 <VibeCheckRGB_Init>:

#include "vibecheck_rgb.h"


void VibeCheckRGB_Init(VibeCheckRGB* rgb, TIM_HandleTypeDef* htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
	Sequencer_Init(&rgb->base_sequence);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe fc2b 	bl	80021c0 <Sequencer_Init>
	Sequencer_Init(&rgb->top_sequence);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fc25 	bl	80021c0 <Sequencer_Init>

	htim->Instance->PSC = VC_RGB_TIM_PSC - 1;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2202      	movs	r2, #2
 800397c:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = VC_RGB_TIM_ARR - 1;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2263      	movs	r2, #99	@ 0x63
 8003984:	62da      	str	r2, [r3, #44]	@ 0x2c
	rgb->htim = htim;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	601a      	str	r2, [r3, #0]

	/* clear the DMA buffer, particularly setting all zeros during the reset time */
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e008      	b.n	80039a4 <VibeCheckRGB_Init+0x50>
		rgb->bit_stream[i] = 0;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	3210      	adds	r2, #16
 8003998:	2100      	movs	r1, #0
 800399a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3301      	adds	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f5b3 7f26 	cmp.w	r3, #664	@ 0x298
 80039aa:	d3f2      	bcc.n	8003992 <VibeCheckRGB_Init+0x3e>

	/* turn off all LEDs */
	VibeCheckRGB_SetAllOff(rgb);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f94a 	bl	8003c46 <VibeCheckRGB_SetAllOff>
	VibeCheckRGB_SendColors(rgb);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f961 	bl	8003c7a <VibeCheckRGB_SendColors>
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <VibeCheckRGB_Update>:


void VibeCheckRGB_Update(VibeCheckRGB* rgb)  /* call repeatedly in the main loop */
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	@ 0x28
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 80039c8:	f003 fd5e 	bl	8007488 <HAL_GetTick>
 80039cc:	6178      	str	r0, [r7, #20]
	uint32_t step;
	if (Sequencer_Update(&rgb->top_sequence, time, &step))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80039d4:	f107 0210 	add.w	r2, r7, #16
 80039d8:	6979      	ldr	r1, [r7, #20]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fc22 	bl	8002224 <Sequencer_Update>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d028      	beq.n	8003a38 <VibeCheckRGB_Update+0x78>
	{
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	e01e      	b.n	8003a2a <VibeCheckRGB_Update+0x6a>
		{
			VibeCheckRGB_Color color = rgb->top_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 157c 	ldr.w	r1, [r3, #1404]	@ 0x57c
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	441a      	add	r2, r3
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	441a      	add	r2, r3
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	18ca      	adds	r2, r1, r3
 8003a06:	f107 030c 	add.w	r3, r7, #12
 8003a0a:	8811      	ldrh	r1, [r2, #0]
 8003a0c:	7892      	ldrb	r2, [r2, #2]
 8003a0e:	8019      	strh	r1, [r3, #0]
 8003a10:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8003a12:	7b3a      	ldrb	r2, [r7, #12]
 8003a14:	7b79      	ldrb	r1, [r7, #13]
 8003a16:	7bbb      	ldrb	r3, [r7, #14]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	69f9      	ldr	r1, [r7, #28]
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8b9 	bl	8003b96 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	3301      	adds	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d9dd      	bls.n	80039ec <VibeCheckRGB_Update+0x2c>
		}
		VibeCheckRGB_SendColors(rgb);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f922 	bl	8003c7a <VibeCheckRGB_SendColors>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
		}
		VibeCheckRGB_SendColors(rgb);
	}
}
 8003a36:	e03c      	b.n	8003ab2 <VibeCheckRGB_Update+0xf2>
	else if (!Sequencer_IsRunning(&rgb->top_sequence) && Sequencer_Update(&rgb->base_sequence, time, &step))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fc53 	bl	80022ea <Sequencer_IsRunning>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d133      	bne.n	8003ab2 <VibeCheckRGB_Update+0xf2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003a50:	f107 0210 	add.w	r2, r7, #16
 8003a54:	6979      	ldr	r1, [r7, #20]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fbe4 	bl	8002224 <Sequencer_Update>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d027      	beq.n	8003ab2 <VibeCheckRGB_Update+0xf2>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	e01e      	b.n	8003aa6 <VibeCheckRGB_Update+0xe6>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 1564 	ldr.w	r1, [r3, #1380]	@ 0x564
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	441a      	add	r2, r3
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	441a      	add	r2, r3
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	18ca      	adds	r2, r1, r3
 8003a82:	f107 0308 	add.w	r3, r7, #8
 8003a86:	8811      	ldrh	r1, [r2, #0]
 8003a88:	7892      	ldrb	r2, [r2, #2]
 8003a8a:	8019      	strh	r1, [r3, #0]
 8003a8c:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8003a8e:	7a3a      	ldrb	r2, [r7, #8]
 8003a90:	7a79      	ldrb	r1, [r7, #9]
 8003a92:	7abb      	ldrb	r3, [r7, #10]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	460b      	mov	r3, r1
 8003a98:	69b9      	ldr	r1, [r7, #24]
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f87b 	bl	8003b96 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d9dd      	bls.n	8003a68 <VibeCheckRGB_Update+0xa8>
		VibeCheckRGB_SendColors(rgb);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f8e4 	bl	8003c7a <VibeCheckRGB_SendColors>
}
 8003ab2:	bf00      	nop
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <VibeCheckRGB_SetBaseSequence>:


void VibeCheckRGB_SetBaseSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	603b      	str	r3, [r7, #0]
	rgb->base_sequence_colors = color;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	f8c3 2564 	str.w	r2, [r3, #1380]	@ 0x564
	Sequencer_SetSequence(&rgb->base_sequence, time, len, 1);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f503 60aa 	add.w	r0, r3, #1360	@ 0x550
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	f7fe fb8c 	bl	80021f8 <Sequencer_SetSequence>
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <VibeCheckRGB_StartBaseSequence>:

void VibeCheckRGB_StartBaseSequence(VibeCheckRGB* rgb)
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->base_sequence, HAL_GetTick());
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 64aa 	add.w	r4, r3, #1360	@ 0x550
 8003af6:	f003 fcc7 	bl	8007488 <HAL_GetTick>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4619      	mov	r1, r3
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7fe fbd2 	bl	80022a8 <Sequencer_Start>
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd90      	pop	{r4, r7, pc}

08003b0c <VibeCheckRGB_StopBaseSequence>:

void VibeCheckRGB_StopBaseSequence(VibeCheckRGB* rgb)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->base_sequence);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe fbd8 	bl	80022d0 <Sequencer_Stop>
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <VibeCheckRGB_SetTopSequence>:

void VibeCheckRGB_SetTopSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
	rgb->top_sequence_colors = color;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	f8c3 257c 	str.w	r2, [r3, #1404]	@ 0x57c
	Sequencer_SetSequence(&rgb->top_sequence, time, len, 0);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f503 60ad 	add.w	r0, r3, #1384	@ 0x568
 8003b44:	2300      	movs	r3, #0
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	f7fe fb55 	bl	80021f8 <Sequencer_SetSequence>
}
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <VibeCheckRGB_StartTopSequence>:

void VibeCheckRGB_StartTopSequence(VibeCheckRGB* rgb)
{
 8003b56:	b590      	push	{r4, r7, lr}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->top_sequence, HAL_GetTick());
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f503 64ad 	add.w	r4, r3, #1384	@ 0x568
 8003b64:	f003 fc90 	bl	8007488 <HAL_GetTick>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	f7fe fb9b 	bl	80022a8 <Sequencer_Start>
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd90      	pop	{r4, r7, pc}

08003b7a <VibeCheckRGB_StopTopSequence>:

void VibeCheckRGB_StopTopSequence(VibeCheckRGB* rgb)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->top_sequence);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe fba1 	bl	80022d0 <Sequencer_Stop>
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <VibeCheckRGB_SetColor>:


void VibeCheckRGB_SetColor(VibeCheckRGB* rgb, uint32_t index, uint8_t r, uint8_t g, uint8_t b)  /* set the color of an individual LED */
{
 8003b96:	b480      	push	{r7}
 8003b98:	b085      	sub	sp, #20
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	71fb      	strb	r3, [r7, #7]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	71bb      	strb	r3, [r7, #6]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d901      	bls.n	8003bb6 <VibeCheckRGB_SetColor+0x20>
		index = VC_RGB_NUM_LEDS - 1;
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	60bb      	str	r3, [r7, #8]

	rgb->colors[index].r = r;
 8003bb6:	68f9      	ldr	r1, [r7, #12]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4413      	add	r3, r2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	79fa      	ldrb	r2, [r7, #7]
 8003bc6:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].g = g;
 8003bc8:	68f9      	ldr	r1, [r7, #12]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3305      	adds	r3, #5
 8003bd6:	79ba      	ldrb	r2, [r7, #6]
 8003bd8:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].b = b;
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	440b      	add	r3, r1
 8003be6:	3306      	adds	r3, #6
 8003be8:	7e3a      	ldrb	r2, [r7, #24]
 8003bea:	701a      	strb	r2, [r3, #0]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <VibeCheckRGB_GetColor>:


VibeCheckRGB_Color VibeCheckRGB_GetColor(VibeCheckRGB* rgb, uint32_t index)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d901      	bls.n	8003c0c <VibeCheckRGB_GetColor+0x14>
			index = VC_RGB_NUM_LEDS - 1;
 8003c08:	2308      	movs	r3, #8
 8003c0a:	603b      	str	r3, [r7, #0]

	return rgb->colors[index];
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	18ca      	adds	r2, r1, r3
 8003c18:	f107 030c 	add.w	r3, r7, #12
 8003c1c:	3204      	adds	r2, #4
 8003c1e:	8811      	ldrh	r1, [r2, #0]
 8003c20:	7892      	ldrb	r2, [r2, #2]
 8003c22:	8019      	strh	r1, [r3, #0]
 8003c24:	709a      	strb	r2, [r3, #2]
 8003c26:	2300      	movs	r3, #0
 8003c28:	7b3a      	ldrb	r2, [r7, #12]
 8003c2a:	f362 0307 	bfi	r3, r2, #0, #8
 8003c2e:	7b7a      	ldrb	r2, [r7, #13]
 8003c30:	f362 230f 	bfi	r3, r2, #8, #8
 8003c34:	7bba      	ldrb	r2, [r7, #14]
 8003c36:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <VibeCheckRGB_SetAllOff>:


void VibeCheckRGB_SetAllOff(VibeCheckRGB* rgb)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b086      	sub	sp, #24
 8003c4a:	af02      	add	r7, sp, #8
 8003c4c:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	e00a      	b.n	8003c6a <VibeCheckRGB_SetAllOff+0x24>
		VibeCheckRGB_SetColor(rgb, i, 0, 0, 0);
 8003c54:	2300      	movs	r3, #0
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	68f9      	ldr	r1, [r7, #12]
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff ff99 	bl	8003b96 <VibeCheckRGB_SetColor>
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3301      	adds	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d9f1      	bls.n	8003c54 <VibeCheckRGB_SetAllOff+0xe>
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <VibeCheckRGB_SendColors>:


void VibeCheckRGB_SendColors(VibeCheckRGB* rgb)  /* send the colors to the LEDs */
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b088      	sub	sp, #32
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
	/* compute the bit stream timings */
	uint32_t i = VC_RGB_RESET_PERIODS;  /* put the reset periods first so we are not affected by spurious pin events at startup and such */
 8003c82:	23e0      	movs	r3, #224	@ 0xe0
 8003c84:	61fb      	str	r3, [r7, #28]
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	e06e      	b.n	8003d6a <VibeCheckRGB_SendColors+0xf0>
	{
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003c8c:	2308      	movs	r3, #8
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e01d      	b.n	8003cce <VibeCheckRGB_SendColors+0x54>
			rgb->bit_stream[i++] = ((rgb->colors[j].g >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3305      	adds	r3, #5
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	fa42 f303 	asr.w	r3, r2, r3
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <VibeCheckRGB_SendColors+0x3e>
 8003cb4:	2130      	movs	r1, #48	@ 0x30
 8003cb6:	e000      	b.n	8003cba <VibeCheckRGB_SendColors+0x40>
 8003cb8:	2118      	movs	r1, #24
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	61fa      	str	r2, [r7, #28]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	3310      	adds	r3, #16
 8003cc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1de      	bne.n	8003c92 <VibeCheckRGB_SendColors+0x18>

		for (uint32_t k = 8; k > 0; k--)  /* red */
 8003cd4:	2308      	movs	r3, #8
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	e01d      	b.n	8003d16 <VibeCheckRGB_SendColors+0x9c>
			rgb->bit_stream[i++] = ((rgb->colors[j].r >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	fa42 f303 	asr.w	r3, r2, r3
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <VibeCheckRGB_SendColors+0x86>
 8003cfc:	2130      	movs	r1, #48	@ 0x30
 8003cfe:	e000      	b.n	8003d02 <VibeCheckRGB_SendColors+0x88>
 8003d00:	2118      	movs	r1, #24
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	61fa      	str	r2, [r7, #28]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	3310      	adds	r3, #16
 8003d0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* red */
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1de      	bne.n	8003cda <VibeCheckRGB_SendColors+0x60>

		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	e01d      	b.n	8003d5e <VibeCheckRGB_SendColors+0xe4>
			rgb->bit_stream[i++] = ((rgb->colors[j].b >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4613      	mov	r3, r2
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	3306      	adds	r3, #6
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	fa42 f303 	asr.w	r3, r2, r3
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <VibeCheckRGB_SendColors+0xce>
 8003d44:	2130      	movs	r1, #48	@ 0x30
 8003d46:	e000      	b.n	8003d4a <VibeCheckRGB_SendColors+0xd0>
 8003d48:	2118      	movs	r1, #24
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	61fa      	str	r2, [r7, #28]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	3310      	adds	r3, #16
 8003d54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1de      	bne.n	8003d22 <VibeCheckRGB_SendColors+0xa8>
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	3301      	adds	r3, #1
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d98d      	bls.n	8003c8c <VibeCheckRGB_SendColors+0x12>
	}

	/* start the DMA transfer */
	(void)HAL_TIM_PWM_Start_DMA(rgb->htim, VC_RGB_TIM_CHANNEL, (uint32_t*)rgb->bit_stream, VC_RGB_BUF_LEN);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f103 0220 	add.w	r2, r3, #32
 8003d7a:	f44f 7326 	mov.w	r3, #664	@ 0x298
 8003d7e:	2100      	movs	r1, #0
 8003d80:	f00e f83a 	bl	8011df8 <HAL_TIM_PWM_Start_DMA>
}
 8003d84:	bf00      	nop
 8003d86:	3720      	adds	r7, #32
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <VibeCheckRGBCMD_Execute>:

*/


uint32_t VibeCheckRGBCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b09c      	sub	sp, #112	@ 0x70
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	667b      	str	r3, [r7, #100]	@ 0x64

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d9e:	2240      	movs	r2, #64	@ 0x40
 8003da0:	4619      	mov	r1, r3
 8003da2:	6838      	ldr	r0, [r7, #0]
 8003da4:	f001 fe56 	bl	8005a54 <VibeCheckShell_GetNextString>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80c2 	beq.w	8003f34 <VibeCheckRGBCMD_Execute+0x1a8>
	{
		if (!strcmp(str, "set"))
 8003db0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003db4:	4962      	ldr	r1, [pc, #392]	@ (8003f40 <VibeCheckRGBCMD_Execute+0x1b4>)
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc faaa 	bl	8000310 <strcmp>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d141      	bne.n	8003e46 <VibeCheckRGBCMD_Execute+0xba>
		{
			int32_t index, r, g, b;
			if (VibeCheckShell_GetNextInt(shell, &index)
 8003dc2:	f107 0320 	add.w	r3, r7, #32
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6838      	ldr	r0, [r7, #0]
 8003dca:	f001 febb 	bl	8005b44 <VibeCheckShell_GetNextInt>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80af 	beq.w	8003f34 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &r)
 8003dd6:	f107 031c 	add.w	r3, r7, #28
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6838      	ldr	r0, [r7, #0]
 8003dde:	f001 feb1 	bl	8005b44 <VibeCheckShell_GetNextInt>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80a5 	beq.w	8003f34 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &g)
 8003dea:	f107 0318 	add.w	r3, r7, #24
 8003dee:	4619      	mov	r1, r3
 8003df0:	6838      	ldr	r0, [r7, #0]
 8003df2:	f001 fea7 	bl	8005b44 <VibeCheckShell_GetNextInt>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 809b 	beq.w	8003f34 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &b))
 8003dfe:	f107 0314 	add.w	r3, r7, #20
 8003e02:	4619      	mov	r1, r3
 8003e04:	6838      	ldr	r0, [r7, #0]
 8003e06:	f001 fe9d 	bl	8005b44 <VibeCheckShell_GetNextInt>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8091 	beq.w	8003f34 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_SetColor(rgb, index, r, g, b);
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	4618      	mov	r0, r3
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	b2d9      	uxtb	r1, r3
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	460b      	mov	r3, r1
 8003e26:	4601      	mov	r1, r0
 8003e28:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003e2a:	f7ff feb4 	bl	8003b96 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(rgb);
 8003e2e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003e30:	f7ff ff23 	bl	8003c7a <VibeCheckRGB_SendColors>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003e34:	4943      	ldr	r1, [pc, #268]	@ (8003f44 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003e36:	6838      	ldr	r0, [r7, #0]
 8003e38:	f001 ff2c 	bl	8005c94 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003e3c:	6838      	ldr	r0, [r7, #0]
 8003e3e:	f001 ffa9 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e077      	b.n	8003f36 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "get"))
 8003e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e4a:	493f      	ldr	r1, [pc, #252]	@ (8003f48 <VibeCheckRGBCMD_Execute+0x1bc>)
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc fa5f 	bl	8000310 <strcmp>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d137      	bne.n	8003ec8 <VibeCheckRGBCMD_Execute+0x13c>
		{
			int32_t index;
			if (VibeCheckShell_GetNextInt(shell, &index))
 8003e58:	f107 0310 	add.w	r3, r7, #16
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6838      	ldr	r0, [r7, #0]
 8003e60:	f001 fe70 	bl	8005b44 <VibeCheckShell_GetNextInt>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d064      	beq.n	8003f34 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_Color color = VibeCheckRGB_GetColor(rgb, index);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003e70:	f7ff fec2 	bl	8003bf8 <VibeCheckRGB_GetColor>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	733a      	strb	r2, [r7, #12]
 8003e7a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003e7e:	737a      	strb	r2, [r7, #13]
 8003e80:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003e84:	73bb      	strb	r3, [r7, #14]

				VibeCheckShell_PutOutputString(shell, "ack");
 8003e86:	492f      	ldr	r1, [pc, #188]	@ (8003f44 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003e88:	6838      	ldr	r0, [r7, #0]
 8003e8a:	f001 ff03 	bl	8005c94 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputSeparator(shell);
 8003e8e:	6838      	ldr	r0, [r7, #0]
 8003e90:	f001 ff72 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.r);
 8003e94:	7b3b      	ldrb	r3, [r7, #12]
 8003e96:	4619      	mov	r1, r3
 8003e98:	6838      	ldr	r0, [r7, #0]
 8003e9a:	f001 ff37 	bl	8005d0c <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 8003e9e:	6838      	ldr	r0, [r7, #0]
 8003ea0:	f001 ff6a 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.g);
 8003ea4:	7b7b      	ldrb	r3, [r7, #13]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6838      	ldr	r0, [r7, #0]
 8003eaa:	f001 ff2f 	bl	8005d0c <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 8003eae:	6838      	ldr	r0, [r7, #0]
 8003eb0:	f001 ff62 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.b);
 8003eb4:	7bbb      	ldrb	r3, [r7, #14]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6838      	ldr	r0, [r7, #0]
 8003eba:	f001 ff27 	bl	8005d0c <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003ebe:	6838      	ldr	r0, [r7, #0]
 8003ec0:	f001 ff68 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e036      	b.n	8003f36 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "start"))  /* TODO: revisit this once we have a clearer idea of how the LED sequence should behave */
 8003ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ecc:	491f      	ldr	r1, [pc, #124]	@ (8003f4c <VibeCheckRGBCMD_Execute+0x1c0>)
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fc fa1e 	bl	8000310 <strcmp>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10e      	bne.n	8003ef8 <VibeCheckRGBCMD_Execute+0x16c>
		{
			VibeCheckRGB_StartBaseSequence(rgb);
 8003eda:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003edc:	f7ff fe04 	bl	8003ae8 <VibeCheckRGB_StartBaseSequence>
			VibeCheckRGB_StartTopSequence(rgb);
 8003ee0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003ee2:	f7ff fe38 	bl	8003b56 <VibeCheckRGB_StartTopSequence>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003ee6:	4917      	ldr	r1, [pc, #92]	@ (8003f44 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003ee8:	6838      	ldr	r0, [r7, #0]
 8003eea:	f001 fed3 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003eee:	6838      	ldr	r0, [r7, #0]
 8003ef0:	f001 ff50 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e01e      	b.n	8003f36 <VibeCheckRGBCMD_Execute+0x1aa>
		}
		else if (!strcmp(str, "stop"))
 8003ef8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003efc:	4914      	ldr	r1, [pc, #80]	@ (8003f50 <VibeCheckRGBCMD_Execute+0x1c4>)
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fc fa06 	bl	8000310 <strcmp>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d114      	bne.n	8003f34 <VibeCheckRGBCMD_Execute+0x1a8>
		{
			VibeCheckRGB_StopBaseSequence(rgb);
 8003f0a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003f0c:	f7ff fdfe 	bl	8003b0c <VibeCheckRGB_StopBaseSequence>
			VibeCheckRGB_StopTopSequence(rgb);
 8003f10:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003f12:	f7ff fe32 	bl	8003b7a <VibeCheckRGB_StopTopSequence>
			VibeCheckRGB_SetAllOff(rgb);
 8003f16:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003f18:	f7ff fe95 	bl	8003c46 <VibeCheckRGB_SetAllOff>
			VibeCheckRGB_SendColors(rgb);
 8003f1c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003f1e:	f7ff feac 	bl	8003c7a <VibeCheckRGB_SendColors>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003f22:	4908      	ldr	r1, [pc, #32]	@ (8003f44 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003f24:	6838      	ldr	r0, [r7, #0]
 8003f26:	f001 feb5 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003f2a:	6838      	ldr	r0, [r7, #0]
 8003f2c:	f001 ff32 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <VibeCheckRGBCMD_Execute+0x1aa>
		}
	}

	return 0;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3768      	adds	r7, #104	@ 0x68
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	0801d808 	.word	0x0801d808
 8003f44:	0801d80c 	.word	0x0801d80c
 8003f48:	0801d810 	.word	0x0801d810
 8003f4c:	0801d814 	.word	0x0801d814
 8003f50:	0801d81c 	.word	0x0801d81c

08003f54 <VibeCheckSensor_Init>:

#include "vibecheck_sensor.h"


void VibeCheckSensor_Init(VibeCheckSensor* sensor, volatile uint32_t* time_micros, SPI_HandleTypeDef* hspi0, SPI_HandleTypeDef* hspi1, SPI_HandleTypeDef* hspi2)
{
 8003f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f56:	b0a1      	sub	sp, #132	@ 0x84
 8003f58:	af06      	add	r7, sp, #24
 8003f5a:	6178      	str	r0, [r7, #20]
 8003f5c:	6139      	str	r1, [r7, #16]
 8003f5e:	60fa      	str	r2, [r7, #12]
 8003f60:	60bb      	str	r3, [r7, #8]
	sensor->data_ind = 0;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
	sensor->data_ready = 0;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
	sensor->time_prev_update = 0;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
	sensor->generate_fake_data = 0;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

	sensor->time_micros = time_micros;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

	/* set all the configurations to defaults */
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f8e:	e04a      	b.n	8004026 <VibeCheckSensor_Init+0xd2>
	{
		sensor->sensor_config[i].usr_offset_x = 0.0f;
 8003f90:	6979      	ldr	r1, [r7, #20]
 8003f92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_y = 0.0f;
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_z = 0.0f;
 8003fba:	6979      	ldr	r1, [r7, #20]
 8003fbc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	3308      	adds	r3, #8
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].accel_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003fd0:	6979      	ldr	r1, [r7, #20]
 8003fd2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	330c      	adds	r3, #12
 8003fe0:	220d      	movs	r2, #13
 8003fe2:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].g_range = VC_SENSOR_DEFAULT_G_RANGE;
 8003fe4:	6979      	ldr	r1, [r7, #20]
 8003fe6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3310      	adds	r3, #16
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].gyro_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003ff8:	6979      	ldr	r1, [r7, #20]
 8003ffa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	3314      	adds	r3, #20
 8004008:	220d      	movs	r2, #13
 800400a:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].dps_range = VC_SENSOR_DEFAULT_DPS_RANGE;
 800400c:	6979      	ldr	r1, [r7, #20]
 800400e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	3318      	adds	r3, #24
 800401c:	227d      	movs	r2, #125	@ 0x7d
 800401e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004022:	3301      	adds	r3, #1
 8004024:	667b      	str	r3, [r7, #100]	@ 0x64
 8004026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004028:	2b02      	cmp	r3, #2
 800402a:	d9b1      	bls.n	8003f90 <VibeCheckSensor_Init+0x3c>
	}


	/* initialize the sensor chips */
	SPI_HandleTypeDef* hspi[VC_SENSOR_NUM_SENSORS] = {hspi0, hspi1, hspi2};
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004038:	65fb      	str	r3, [r7, #92]	@ 0x5c

	GPIO_TypeDef* cs_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_GPIO_Port, ACCEL_NCS2_GPIO_Port, ACCEL_NCS3_GPIO_Port};
 800403a:	4a49      	ldr	r2, [pc, #292]	@ (8004160 <VibeCheckSensor_Init+0x20c>)
 800403c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004040:	ca07      	ldmia	r2, {r0, r1, r2}
 8004042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t cs_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_Pin, ACCEL_NCS2_Pin, ACCEL_NCS3_Pin};
 8004046:	4a47      	ldr	r2, [pc, #284]	@ (8004164 <VibeCheckSensor_Init+0x210>)
 8004048:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800404c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004050:	6018      	str	r0, [r3, #0]
 8004052:	3304      	adds	r3, #4
 8004054:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int1_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_GPIO_Port, ACCEL_INTA2_GPIO_Port, ACCEL_INTA3_GPIO_Port};
 8004056:	4a44      	ldr	r2, [pc, #272]	@ (8004168 <VibeCheckSensor_Init+0x214>)
 8004058:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800405c:	ca07      	ldmia	r2, {r0, r1, r2}
 800405e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int1_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_Pin, ACCEL_INTA2_Pin, ACCEL_INTA3_Pin};
 8004062:	4a42      	ldr	r2, [pc, #264]	@ (800416c <VibeCheckSensor_Init+0x218>)
 8004064:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800406c:	6018      	str	r0, [r3, #0]
 800406e:	3304      	adds	r3, #4
 8004070:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int2_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_GPIO_Port, ACCEL_INTB2_GPIO_Port, ACCEL_INTB3_GPIO_Port};
 8004072:	4a3f      	ldr	r2, [pc, #252]	@ (8004170 <VibeCheckSensor_Init+0x21c>)
 8004074:	f107 0320 	add.w	r3, r7, #32
 8004078:	ca07      	ldmia	r2, {r0, r1, r2}
 800407a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int2_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_Pin, ACCEL_INTB2_Pin, ACCEL_INTB3_Pin};
 800407e:	4a3d      	ldr	r2, [pc, #244]	@ (8004174 <VibeCheckSensor_Init+0x220>)
 8004080:	f107 0318 	add.w	r3, r7, #24
 8004084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004088:	6018      	str	r0, [r3, #0]
 800408a:	3304      	adds	r3, #4
 800408c:	8019      	strh	r1, [r3, #0]

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	663b      	str	r3, [r7, #96]	@ 0x60
 8004092:	e05c      	b.n	800414e <VibeCheckSensor_Init+0x1fa>
	{
		LSM6DS3_Init(&sensor->sensor_array[i], &sensor->sensor_config[i],
 8004094:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	3350      	adds	r3, #80	@ 0x50
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4413      	add	r3, r2
 80040a4:	1d1d      	adds	r5, r3, #4
 80040a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	18d6      	adds	r6, r2, r3
 80040b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	3360      	adds	r3, #96	@ 0x60
 80040ba:	f107 0208 	add.w	r2, r7, #8
 80040be:	4413      	add	r3, r2
 80040c0:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80040ce:	f107 0308 	add.w	r3, r7, #8
 80040d2:	18cb      	adds	r3, r1, r3
 80040d4:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80040d8:	6039      	str	r1, [r7, #0]
 80040da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80040e2:	f107 0308 	add.w	r3, r7, #8
 80040e6:	18c3      	adds	r3, r0, r3
 80040e8:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 80040ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80040f4:	f107 0308 	add.w	r3, r7, #8
 80040f8:	18c3      	adds	r3, r0, r3
 80040fa:	f853 1c34 	ldr.w	r1, [r3, #-52]
 80040fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8004106:	f107 0308 	add.w	r3, r7, #8
 800410a:	18c3      	adds	r3, r0, r3
 800410c:	f833 0c3c 	ldrh.w	r0, [r3, #-60]
 8004110:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 8004118:	f107 0308 	add.w	r3, r7, #8
 800411c:	18e3      	adds	r3, r4, r3
 800411e:	f853 4c48 	ldr.w	r4, [r3, #-72]
 8004122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	3360      	adds	r3, #96	@ 0x60
 8004128:	f107 0c08 	add.w	ip, r7, #8
 800412c:	4463      	add	r3, ip
 800412e:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8004132:	9304      	str	r3, [sp, #16]
 8004134:	9403      	str	r4, [sp, #12]
 8004136:	9002      	str	r0, [sp, #8]
 8004138:	9101      	str	r1, [sp, #4]
 800413a:	9200      	str	r2, [sp, #0]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4631      	mov	r1, r6
 8004142:	4628      	mov	r0, r5
 8004144:	f7fc fcb8 	bl	8000ab8 <LSM6DS3_Init>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004148:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800414a:	3301      	adds	r3, #1
 800414c:	663b      	str	r3, [r7, #96]	@ 0x60
 800414e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004150:	2b02      	cmp	r3, #2
 8004152:	d99f      	bls.n	8004094 <VibeCheckSensor_Init+0x140>
				hspi[i], cs_ports[i], cs_pins[i], int1_ports[i], int1_pins[i], int2_ports[i], int2_pins[i]);
	}

}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	376c      	adds	r7, #108	@ 0x6c
 800415a:	46bd      	mov	sp, r7
 800415c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800415e:	bf00      	nop
 8004160:	0801d824 	.word	0x0801d824
 8004164:	0801d830 	.word	0x0801d830
 8004168:	0801d838 	.word	0x0801d838
 800416c:	0801d844 	.word	0x0801d844
 8004170:	0801d84c 	.word	0x0801d84c
 8004174:	0801d858 	.word	0x0801d858

08004178 <VibeCheckSensor_Update>:


void VibeCheckSensor_Update(VibeCheckSensor* sensor)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8004180:	f003 f982 	bl	8007488 <HAL_GetTick>
 8004184:	61b8      	str	r0, [r7, #24]
	if (time - sensor->time_prev_update > VC_SENSOR_UPDATE_INTERVAL_MS)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004194:	f240 8113 	bls.w	80043be <VibeCheckSensor_Update+0x246>

		/* if not connected -> test for connection -> if success, set connected flag, configure the sensor, and send message to host */
		/* if connected but not running -> test for connection -> if failure, reset connected flag, send message to host */
		/* if running either accelerometer or gyro -> check data received status flag and reset it -> if no data received, reset connected flag, send message to host */

		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	e0ac      	b.n	80042f8 <VibeCheckSensor_Update+0x180>
		{
			if (!sensor->status[i].is_connected)
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	33fc      	adds	r3, #252	@ 0xfc
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d134      	bne.n	800421e <VibeCheckSensor_Update+0xa6>
			{
				if (LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	4613      	mov	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	3350      	adds	r3, #80	@ 0x50
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	4413      	add	r3, r2
 80041c4:	3304      	adds	r3, #4
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fc fca0 	bl	8000b0c <LSM6DS3_TestCommunication>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 808f 	beq.w	80042f2 <VibeCheckSensor_Update+0x17a>
				{
					sensor->status[i].is_connected = 1;
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	33fc      	adds	r3, #252	@ 0xfc
 80041e4:	2201      	movs	r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
					sensor->status[i].connection_change_flag = 1;
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
					sensor->status[i].received_data_flag = 1;  /* give ourselves a grace period to receive data by artificially setting the flag */
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
					VibeCheckSensor_UpdateSensor(sensor, i);
 8004214:	69f9      	ldr	r1, [r7, #28]
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fbf4 	bl	8004a04 <VibeCheckSensor_UpdateSensor>
 800421c:	e069      	b.n	80042f2 <VibeCheckSensor_Update+0x17a>
				}
			}
			else
			{
				if (!sensor->status[i].accel_measuring && !sensor->status[i].gyro_measuring)
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d130      	bne.n	8004298 <VibeCheckSensor_Update+0x120>
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d124      	bne.n	8004298 <VibeCheckSensor_Update+0x120>
				{
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	3350      	adds	r3, #80	@ 0x50
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	3304      	adds	r3, #4
 8004260:	4618      	mov	r0, r3
 8004262:	f7fc fc53 	bl	8000b0c <LSM6DS3_TestCommunication>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d142      	bne.n	80042f2 <VibeCheckSensor_Update+0x17a>
					{
						sensor->status[i].is_connected = 0;
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	33fc      	adds	r3, #252	@ 0xfc
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8004296:	e02c      	b.n	80042f2 <VibeCheckSensor_Update+0x17a>
					}
				}
				else
				{
					if (sensor->status[i].received_data_flag)
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <VibeCheckSensor_Update+0x150>
					{
						sensor->status[i].received_data_flag = 0;
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e014      	b.n	80042f2 <VibeCheckSensor_Update+0x17a>
					}
					else
					{
						sensor->status[i].is_connected = 0;
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	33fc      	adds	r3, #252	@ 0xfc
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3301      	adds	r3, #1
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	f67f af4f 	bls.w	800419e <VibeCheckSensor_Update+0x26>
				}
			}
		}

		/* make some random data (3 sine wave phases) for testing the host plotting/data logging */
		if (sensor->generate_fake_data)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004306:	2b00      	cmp	r3, #0
 8004308:	d055      	beq.n	80043b6 <VibeCheckSensor_Update+0x23e>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	ee07 3a90 	vmov	s15, r3
 8004310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004314:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80043c8 <VibeCheckSensor_Update+0x250>
 8004318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800431c:	eeb0 0a67 	vmov.f32	s0, s15
 8004320:	f018 fc1a 	bl	801cb58 <sinf>
 8004324:	ed87 0a05 	vstr	s0, [r7, #20]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004332:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80043c8 <VibeCheckSensor_Update+0x250>
 8004336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800433a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80043cc <VibeCheckSensor_Update+0x254>
 800433e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004342:	eeb0 0a67 	vmov.f32	s0, s15
 8004346:	f018 fc07 	bl	801cb58 <sinf>
 800434a:	ed87 0a04 	vstr	s0, [r7, #16]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004358:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80043c8 <VibeCheckSensor_Update+0x250>
 800435c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004360:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80043d0 <VibeCheckSensor_Update+0x258>
 8004364:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004368:	eeb0 0a67 	vmov.f32	s0, s15
 800436c:	f018 fbf4 	bl	801cb58 <sinf>
 8004370:	ed87 0a03 	vstr	s0, [r7, #12]

			VibeCheckSensor_AddData(sensor, 1, time, val1, val2, val3);
 8004374:	ed97 1a03 	vldr	s2, [r7, #12]
 8004378:	edd7 0a04 	vldr	s1, [r7, #16]
 800437c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	2101      	movs	r1, #1
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fb92 	bl	8004aae <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 2, time, val3, val1, val2);
 800438a:	ed97 1a04 	vldr	s2, [r7, #16]
 800438e:	edd7 0a05 	vldr	s1, [r7, #20]
 8004392:	ed97 0a03 	vldr	s0, [r7, #12]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	2102      	movs	r1, #2
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fb87 	bl	8004aae <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 3, time, val2, val3, val1);
 80043a0:	ed97 1a05 	vldr	s2, [r7, #20]
 80043a4:	edd7 0a03 	vldr	s1, [r7, #12]
 80043a8:	ed97 0a04 	vldr	s0, [r7, #16]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	2103      	movs	r1, #3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fb7c 	bl	8004aae <VibeCheckSensor_AddData>
		}

		sensor->time_prev_update = time;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
	}
}
 80043be:	bf00      	nop
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40c90fd0 	.word	0x40c90fd0
 80043cc:	3f860a8b 	.word	0x3f860a8b
 80043d0:	40060a8b 	.word	0x40060a8b

080043d4 <VibeCheckSensor_StartAccel>:

void VibeCheckSensor_StartAccel(VibeCheckSensor* sensor, uint32_t channel)  /* start acceleration measurement of specified channel */
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <VibeCheckSensor_StartAccel+0x14>
 80043e4:	2302      	movs	r3, #2
 80043e6:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].accel_measuring)
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	33fc      	adds	r3, #252	@ 0xfc
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d017      	beq.n	800442e <VibeCheckSensor_StartAccel+0x5a>
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10b      	bne.n	800442e <VibeCheckSensor_StartAccel+0x5a>
		LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	3350      	adds	r3, #80	@ 0x50
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4413      	add	r3, r2
 8004426:	3304      	adds	r3, #4
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc fc2d 	bl	8000c88 <LSM6DS3_StartAccel>
	/*
	 * I choose to set the flag here immediately, even if the accelerometer is not currently connected. This way, it can be set
	 * to start sampling immediately once the accelerometer is plugged in.
	 */

	sensor->status[channel].accel_measuring = 1;
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <VibeCheckSensor_StopAccel>:

void VibeCheckSensor_StopAccel(VibeCheckSensor* sensor, uint32_t channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <VibeCheckSensor_StopAccel+0x14>
 800445c:	2302      	movs	r3, #2
 800445e:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].accel_measuring)
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	33fc      	adds	r3, #252	@ 0xfc
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d017      	beq.n	80044a6 <VibeCheckSensor_StopAccel+0x5a>
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <VibeCheckSensor_StopAccel+0x5a>
		LSM6DS3_StopAccel(&sensor->sensor_array[channel]);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	3350      	adds	r3, #80	@ 0x50
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	4413      	add	r3, r2
 800449e:	3304      	adds	r3, #4
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fc fd2b 	bl	8000efc <LSM6DS3_StopAccel>

	sensor->status[channel].accel_measuring = 0;
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <VibeCheckSensor_StartGyro>:

void VibeCheckSensor_StartGyro(VibeCheckSensor* sensor, uint32_t channel)  /* start gyroscope measurement of specified channel */
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <VibeCheckSensor_StartGyro+0x14>
 80044d4:	2302      	movs	r3, #2
 80044d6:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].gyro_measuring)
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	33fc      	adds	r3, #252	@ 0xfc
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d017      	beq.n	800451e <VibeCheckSensor_StartGyro+0x5a>
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10b      	bne.n	800451e <VibeCheckSensor_StartGyro+0x5a>
		LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	3350      	adds	r3, #80	@ 0x50
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	4413      	add	r3, r2
 8004516:	3304      	adds	r3, #4
 8004518:	4618      	mov	r0, r3
 800451a:	f7fc fc57 	bl	8000dcc <LSM6DS3_StartGyro>

	sensor->status[channel].gyro_measuring = 1;
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <VibeCheckSensor_StopGyro>:

void VibeCheckSensor_StopGyro(VibeCheckSensor* sensor, uint32_t channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <VibeCheckSensor_StopGyro+0x14>
 800454c:	2302      	movs	r3, #2
 800454e:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].gyro_measuring)
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	33fc      	adds	r3, #252	@ 0xfc
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d017      	beq.n	8004596 <VibeCheckSensor_StopGyro+0x5a>
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <VibeCheckSensor_StopGyro+0x5a>
		LSM6DS3_StopGyro(&sensor->sensor_array[channel]);
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	3350      	adds	r3, #80	@ 0x50
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	3304      	adds	r3, #4
 8004590:	4618      	mov	r0, r3
 8004592:	f7fc fcc1 	bl	8000f18 <LSM6DS3_StopGyro>

	sensor->status[channel].gyro_measuring = 0;
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <VibeCheckSensor_SetAccelODR>:

void VibeCheckSensor_SetAccelODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <VibeCheckSensor_SetAccelODR+0x16>
 80045c6:	2302      	movs	r3, #2
 80045c8:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].accel_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	210a      	movs	r1, #10
 80045ce:	480a      	ldr	r0, [pc, #40]	@ (80045f8 <VibeCheckSensor_SetAccelODR+0x44>)
 80045d0:	f7fe fce8 	bl	8002fa4 <FindClosest>
 80045d4:	68f9      	ldr	r1, [r7, #12]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	330c      	adds	r3, #12
 80045e4:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fa0b 	bl	8004a04 <VibeCheckSensor_UpdateSensor>
}
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	0801e07c 	.word	0x0801e07c

080045fc <VibeCheckSensor_SetGyroODR>:

void VibeCheckSensor_SetGyroODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <VibeCheckSensor_SetGyroODR+0x16>
 800460e:	2302      	movs	r3, #2
 8004610:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].gyro_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	210a      	movs	r1, #10
 8004616:	480a      	ldr	r0, [pc, #40]	@ (8004640 <VibeCheckSensor_SetGyroODR+0x44>)
 8004618:	f7fe fcc4 	bl	8002fa4 <FindClosest>
 800461c:	68f9      	ldr	r1, [r7, #12]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3314      	adds	r3, #20
 800462c:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f9e7 	bl	8004a04 <VibeCheckSensor_UpdateSensor>
}
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	0801e07c 	.word	0x0801e07c

08004644 <VibeCheckSensor_SetAccelRange>:

void VibeCheckSensor_SetAccelRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <VibeCheckSensor_SetAccelRange+0x16>
 8004656:	2302      	movs	r3, #2
 8004658:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].g_range = FindClosest(VC_SENSOR_ALLOWED_G_RANGE, sizeof(VC_SENSOR_ALLOWED_G_RANGE) / sizeof(VC_SENSOR_ALLOWED_G_RANGE[0]), range);
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	2104      	movs	r1, #4
 800465e:	480a      	ldr	r0, [pc, #40]	@ (8004688 <VibeCheckSensor_SetAccelRange+0x44>)
 8004660:	f7fe fca0 	bl	8002fa4 <FindClosest>
 8004664:	68f9      	ldr	r1, [r7, #12]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	3310      	adds	r3, #16
 8004674:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f9c3 	bl	8004a04 <VibeCheckSensor_UpdateSensor>
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	0801e0a4 	.word	0x0801e0a4

0800468c <VibeCheckSensor_SetGyroRange>:

void VibeCheckSensor_SetGyroRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <VibeCheckSensor_SetGyroRange+0x16>
 800469e:	2302      	movs	r3, #2
 80046a0:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].dps_range = FindClosest(VC_SENSOR_ALLOWED_DPS_RANGE, sizeof(VC_SENSOR_ALLOWED_DPS_RANGE) / sizeof(VC_SENSOR_ALLOWED_DPS_RANGE[0]), range);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	2105      	movs	r1, #5
 80046a6:	480a      	ldr	r0, [pc, #40]	@ (80046d0 <VibeCheckSensor_SetGyroRange+0x44>)
 80046a8:	f7fe fc7c 	bl	8002fa4 <FindClosest>
 80046ac:	68f9      	ldr	r1, [r7, #12]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	3318      	adds	r3, #24
 80046bc:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f99f 	bl	8004a04 <VibeCheckSensor_UpdateSensor>
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	0801e0b4 	.word	0x0801e0b4

080046d4 <VibeCheckSensor_SetOffsets>:

void VibeCheckSensor_SetOffsets(VibeCheckSensor* sensor, uint32_t channel, float x, float y, float z)  /* accelerometer DC offsets in g */
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6178      	str	r0, [r7, #20]
 80046dc:	6139      	str	r1, [r7, #16]
 80046de:	ed87 0a03 	vstr	s0, [r7, #12]
 80046e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80046e6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <VibeCheckSensor_SetOffsets+0x20>
 80046f0:	2302      	movs	r3, #2
 80046f2:	613b      	str	r3, [r7, #16]

	/* TODO: test that setting the sensor user offset registers works */

	if (x > VC_SENSOR_MAX_OFFSET) x = VC_SENSOR_MAX_OFFSET;  /* clamp the offsets to the max value that can fit in the register */
 80046f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80046f8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80047c4 <VibeCheckSensor_SetOffsets+0xf0>
 80046fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004704:	dd01      	ble.n	800470a <VibeCheckSensor_SetOffsets+0x36>
 8004706:	4b30      	ldr	r3, [pc, #192]	@ (80047c8 <VibeCheckSensor_SetOffsets+0xf4>)
 8004708:	60fb      	str	r3, [r7, #12]
	if (x < -VC_SENSOR_MAX_OFFSET) x = -VC_SENSOR_MAX_OFFSET;
 800470a:	edd7 7a03 	vldr	s15, [r7, #12]
 800470e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80047cc <VibeCheckSensor_SetOffsets+0xf8>
 8004712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471a:	d501      	bpl.n	8004720 <VibeCheckSensor_SetOffsets+0x4c>
 800471c:	4b2c      	ldr	r3, [pc, #176]	@ (80047d0 <VibeCheckSensor_SetOffsets+0xfc>)
 800471e:	60fb      	str	r3, [r7, #12]
	if (y > VC_SENSOR_MAX_OFFSET) y = VC_SENSOR_MAX_OFFSET;
 8004720:	edd7 7a02 	vldr	s15, [r7, #8]
 8004724:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80047c4 <VibeCheckSensor_SetOffsets+0xf0>
 8004728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800472c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004730:	dd01      	ble.n	8004736 <VibeCheckSensor_SetOffsets+0x62>
 8004732:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <VibeCheckSensor_SetOffsets+0xf4>)
 8004734:	60bb      	str	r3, [r7, #8]
	if (y < -VC_SENSOR_MAX_OFFSET) y = -VC_SENSOR_MAX_OFFSET;
 8004736:	edd7 7a02 	vldr	s15, [r7, #8]
 800473a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80047cc <VibeCheckSensor_SetOffsets+0xf8>
 800473e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	d501      	bpl.n	800474c <VibeCheckSensor_SetOffsets+0x78>
 8004748:	4b21      	ldr	r3, [pc, #132]	@ (80047d0 <VibeCheckSensor_SetOffsets+0xfc>)
 800474a:	60bb      	str	r3, [r7, #8]
	if (z > VC_SENSOR_MAX_OFFSET) z = VC_SENSOR_MAX_OFFSET;
 800474c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004750:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80047c4 <VibeCheckSensor_SetOffsets+0xf0>
 8004754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475c:	dd01      	ble.n	8004762 <VibeCheckSensor_SetOffsets+0x8e>
 800475e:	4b1a      	ldr	r3, [pc, #104]	@ (80047c8 <VibeCheckSensor_SetOffsets+0xf4>)
 8004760:	607b      	str	r3, [r7, #4]
	if (z < -VC_SENSOR_MAX_OFFSET) z = -VC_SENSOR_MAX_OFFSET;
 8004762:	edd7 7a01 	vldr	s15, [r7, #4]
 8004766:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80047cc <VibeCheckSensor_SetOffsets+0xf8>
 800476a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800476e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004772:	d501      	bpl.n	8004778 <VibeCheckSensor_SetOffsets+0xa4>
 8004774:	4b16      	ldr	r3, [pc, #88]	@ (80047d0 <VibeCheckSensor_SetOffsets+0xfc>)
 8004776:	607b      	str	r3, [r7, #4]

	sensor->sensor_config[channel].usr_offset_x = x;
 8004778:	6979      	ldr	r1, [r7, #20]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_y = y;
 800478a:	6979      	ldr	r1, [r7, #20]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	3304      	adds	r3, #4
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_z = z;
 800479e:	6979      	ldr	r1, [r7, #20]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4613      	mov	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	3308      	adds	r3, #8
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	601a      	str	r2, [r3, #0]

	VibeCheckSensor_UpdateSensor(sensor, channel);
 80047b2:	6939      	ldr	r1, [r7, #16]
 80047b4:	6978      	ldr	r0, [r7, #20]
 80047b6:	f000 f925 	bl	8004a04 <VibeCheckSensor_UpdateSensor>
}
 80047ba:	bf00      	nop
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	3dfe0000 	.word	0x3dfe0000
 80047c8:	3dfe0000 	.word	0x3dfe0000
 80047cc:	bdfe0000 	.word	0xbdfe0000
 80047d0:	bdfe0000 	.word	0xbdfe0000

080047d4 <VibeCheckSensor_GetAccelODR>:

uint32_t VibeCheckSensor_GetAccelODR(VibeCheckSensor* sensor, uint32_t channel)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <VibeCheckSensor_GetAccelODR+0x14>
 80047e4:	2302      	movs	r3, #2
 80047e6:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].accel_odr_hz;
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	330c      	adds	r3, #12
 80047f8:	681b      	ldr	r3, [r3, #0]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <VibeCheckSensor_GetGyroODR>:

uint32_t VibeCheckSensor_GetGyroODR(VibeCheckSensor* sensor, uint32_t channel)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <VibeCheckSensor_GetGyroODR+0x14>
 8004816:	2302      	movs	r3, #2
 8004818:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].gyro_odr_hz;
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	4613      	mov	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	3314      	adds	r3, #20
 800482a:	681b      	ldr	r3, [r3, #0]
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <VibeCheckSensor_GetAccelRange>:

uint32_t VibeCheckSensor_GetAccelRange(VibeCheckSensor* sensor, uint32_t channel)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <VibeCheckSensor_GetAccelRange+0x14>
 8004848:	2302      	movs	r3, #2
 800484a:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].g_range;
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	3310      	adds	r3, #16
 800485c:	681b      	ldr	r3, [r3, #0]
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <VibeCheckSensor_GetGyroRange>:

uint32_t VibeCheckSensor_GetGyroRange(VibeCheckSensor* sensor, uint32_t channel)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <VibeCheckSensor_GetGyroRange+0x14>
 800487a:	2302      	movs	r3, #2
 800487c:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].dps_range;
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	1a9b      	subs	r3, r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	3318      	adds	r3, #24
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <VibeCheckSensor_GetOffsets>:

void VibeCheckSensor_GetOffsets(VibeCheckSensor* sensor, uint32_t channel, float* x, float* y, float* z)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <VibeCheckSensor_GetOffsets+0x18>
 80048b0:	2302      	movs	r3, #2
 80048b2:	60bb      	str	r3, [r7, #8]
	*x = sensor->sensor_config[channel].usr_offset_x;
 80048b4:	68f9      	ldr	r1, [r7, #12]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	601a      	str	r2, [r3, #0]
	*y = sensor->sensor_config[channel].usr_offset_y;
 80048c8:	68f9      	ldr	r1, [r7, #12]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	3304      	adds	r3, #4
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	601a      	str	r2, [r3, #0]
	*z = sensor->sensor_config[channel].usr_offset_z;
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	3308      	adds	r3, #8
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	601a      	str	r2, [r3, #0]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <VibeCheckSensor_StartFakeData>:


void VibeCheckSensor_StartFakeData(VibeCheckSensor* sensor)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 1;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <VibeCheckSensor_StopFakeData>:


void VibeCheckSensor_StopFakeData(VibeCheckSensor* sensor)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 0;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <VibeCheckSensor_IsConnected>:
	sensor->start_time = *sensor->time_micros;
}


uint32_t VibeCheckSensor_IsConnected(VibeCheckSensor* sensor, uint32_t channel)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <VibeCheckSensor_IsConnected+0x14>
 8004948:	2302      	movs	r3, #2
 800494a:	603b      	str	r3, [r7, #0]
	return sensor->status[channel].is_connected;
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	33fc      	adds	r3, #252	@ 0xfc
 800495c:	681b      	ldr	r3, [r3, #0]
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <VibeCheckSensor_ConnectionChanged>:


uint32_t VibeCheckSensor_ConnectionChanged(VibeCheckSensor* sensor, uint32_t* channel, uint32_t* is_connected)
{
 800496a:	b480      	push	{r7}
 800496c:	b087      	sub	sp, #28
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e01e      	b.n	80049ba <VibeCheckSensor_ConnectionChanged+0x50>
	{
		if (sensor->status[i].connection_change_flag)
 800497c:	68f9      	ldr	r1, [r7, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00f      	beq.n	80049b4 <VibeCheckSensor_ConnectionChanged+0x4a>
		{
			*channel = i;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	601a      	str	r2, [r3, #0]
			*is_connected = sensor->status[i].is_connected;
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	33fc      	adds	r3, #252	@ 0xfc
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	601a      	str	r2, [r3, #0]
			return 1;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e006      	b.n	80049c2 <VibeCheckSensor_ConnectionChanged+0x58>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	3301      	adds	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d9dd      	bls.n	800497c <VibeCheckSensor_ConnectionChanged+0x12>
		}
	}

	return 0;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <VibeCheckSensor_ResetConnectionFlag>:


void VibeCheckSensor_ResetConnectionFlag(VibeCheckSensor* sensor, uint32_t channel)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <VibeCheckSensor_ResetConnectionFlag+0x14>
 80049de:	2302      	movs	r3, #2
 80049e0:	603b      	str	r3, [r7, #0]
	sensor->status[channel].connection_change_flag = 0;
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <VibeCheckSensor_UpdateSensor>:


void VibeCheckSensor_UpdateSensor(VibeCheckSensor* sensor, uint32_t channel)  /* send the new configuration parameters to a sensor chip */
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <VibeCheckSensor_UpdateSensor+0x14>
 8004a14:	2302      	movs	r3, #2
 8004a16:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected)
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	33fc      	adds	r3, #252	@ 0xfc
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d03b      	beq.n	8004aa6 <VibeCheckSensor_UpdateSensor+0xa2>
	{
		LSM6DS3_Configure(&sensor->sensor_array[channel]);
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	3350      	adds	r3, #80	@ 0x50
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fc f87d 	bl	8000b40 <LSM6DS3_Configure>
		if (sensor->status[channel].accel_measuring)
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <VibeCheckSensor_UpdateSensor+0x72>
			LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	4613      	mov	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3350      	adds	r3, #80	@ 0x50
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3304      	adds	r3, #4
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fc f909 	bl	8000c88 <LSM6DS3_StartAccel>
		if (sensor->status[channel].gyro_measuring)
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <VibeCheckSensor_UpdateSensor+0xa2>
			LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	3350      	adds	r3, #80	@ 0x50
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fc f993 	bl	8000dcc <LSM6DS3_StartGyro>
	}
}
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <VibeCheckSensor_AddData>:


void VibeCheckSensor_AddData(VibeCheckSensor* sensor, uint8_t id, uint32_t time, float x, float y, float z)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b087      	sub	sp, #28
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6178      	str	r0, [r7, #20]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	60fa      	str	r2, [r7, #12]
 8004aba:	ed87 0a02 	vstr	s0, [r7, #8]
 8004abe:	edc7 0a01 	vstr	s1, [r7, #4]
 8004ac2:	ed87 1a00 	vstr	s2, [r7]
 8004ac6:	74fb      	strb	r3, [r7, #19]
	sensor->data[sensor->data_ind].id = id;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 8004ace:	6979      	ldr	r1, [r7, #20]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8004ade:	7cfa      	ldrb	r2, [r7, #19]
 8004ae0:	701a      	strb	r2, [r3, #0]
	sensor->data[sensor->data_ind].time = time;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 8004ae8:	6979      	ldr	r1, [r7, #20]
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].x = x;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 8004b02:	6979      	ldr	r1, [r7, #20]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].y = y;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].z = z;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 8004b36:	6979      	ldr	r1, [r7, #20]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	601a      	str	r2, [r3, #0]

	sensor->data_ind++;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
	if (sensor->data_ind == VC_SENSOR_DATA_PER_PACKET)
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004b5e:	2b0a      	cmp	r3, #10
 8004b60:	d104      	bne.n	8004b6c <VibeCheckSensor_AddData+0xbe>
	{
		sensor->data_ready = 1;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
	{
		sensor->data_ind = 0;
		sensor->data_ready = 1;
	}
}
 8004b6a:	e00c      	b.n	8004b86 <VibeCheckSensor_AddData+0xd8>
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004b72:	2b14      	cmp	r3, #20
 8004b74:	d107      	bne.n	8004b86 <VibeCheckSensor_AddData+0xd8>
		sensor->data_ind = 0;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
		sensor->data_ready = 1;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <VibeCheckSensor_GetDataReady>:


uint32_t VibeCheckSensor_GetDataReady(VibeCheckSensor* sensor, volatile VibeCheckSensor_Data** data)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	6039      	str	r1, [r7, #0]
	if (sensor->data_ready)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	@ 0x2cc
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d015      	beq.n	8004bd2 <VibeCheckSensor_GetDataReady+0x40>
	{
		sensor->data_ready = 0;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
		if (sensor->data_ind < VC_SENSOR_DATA_PER_PACKET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004bb4:	2b09      	cmp	r3, #9
 8004bb6:	d805      	bhi.n	8004bc4 <VibeCheckSensor_GetDataReady+0x32>
		{
			/* ready to send the second half */
			*data = &sensor->data[VC_SENSOR_DATA_PER_PACKET];
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f503 7200 	add.w	r2, r3, #512	@ 0x200
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e004      	b.n	8004bce <VibeCheckSensor_GetDataReady+0x3c>
		}
		else
		{
			/* ready to send the first half */
			*data = &sensor->data[0];
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <VibeCheckSensor_GetDataReady+0x42>
	}
	return 0;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <VibeCheckSensor_EXTICallback>:


void VibeCheckSensor_EXTICallback(VibeCheckSensor* sensor, uint16_t GPIO_Pin)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	@ 0x28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
	/*
	 * Read the sensor data when a signal occurs on a data ready pin. We assume that the INT1 pin indicates acceleration
	 * data ready and that the INT2 pin indicates gyroscope data ready.
	 */

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004bec:	2300      	movs	r3, #0
 8004bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf0:	e0a6      	b.n	8004d40 <VibeCheckSensor_EXTICallback+0x160>
	{
		if (GPIO_Pin == sensor->sensor_array[i].int1_pin && sensor->status[i].accel_measuring)
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	440b      	add	r3, r1
 8004c00:	3364      	adds	r3, #100	@ 0x64
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	887a      	ldrh	r2, [r7, #2]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d144      	bne.n	8004c94 <VibeCheckSensor_EXTICallback+0xb4>
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d038      	beq.n	8004c94 <VibeCheckSensor_EXTICallback+0xb4>
		{
			float x, y, z;
			LSM6DS3_ReadAccel(&sensor->sensor_array[i], &x, &y, &z);
 8004c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	1a9b      	subs	r3, r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	3350      	adds	r3, #80	@ 0x50
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	1d18      	adds	r0, r3, #4
 8004c34:	f107 0318 	add.w	r3, r7, #24
 8004c38:	f107 021c 	add.w	r2, r7, #28
 8004c3c:	f107 0120 	add.w	r1, r7, #32
 8004c40:	f7fc f978 	bl	8000f34 <LSM6DS3_ReadAccel>
			VibeCheckSensor_AddData(sensor, 2 * i, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	b2d9      	uxtb	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c60:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c64:	edd7 6a06 	vldr	s13, [r7, #24]
 8004c68:	eeb0 1a66 	vmov.f32	s2, s13
 8004c6c:	eef0 0a47 	vmov.f32	s1, s14
 8004c70:	eeb0 0a67 	vmov.f32	s0, s15
 8004c74:	461a      	mov	r2, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff ff19 	bl	8004aae <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
			break;
 8004c92:	e05a      	b.n	8004d4a <VibeCheckSensor_EXTICallback+0x16a>
		}

		if (GPIO_Pin == sensor->sensor_array[i].int2_pin && sensor->status[i].gyro_measuring)
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	440b      	add	r3, r1
 8004ca2:	336c      	adds	r3, #108	@ 0x6c
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	887a      	ldrh	r2, [r7, #2]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d146      	bne.n	8004d3a <VibeCheckSensor_EXTICallback+0x15a>
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d03a      	beq.n	8004d3a <VibeCheckSensor_EXTICallback+0x15a>
		{
			float x, y, z;
			LSM6DS3_ReadGyro(&sensor->sensor_array[i], &x, &y, &z);
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	3350      	adds	r3, #80	@ 0x50
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	1d18      	adds	r0, r3, #4
 8004cd6:	f107 030c 	add.w	r3, r7, #12
 8004cda:	f107 0210 	add.w	r2, r7, #16
 8004cde:	f107 0114 	add.w	r1, r7, #20
 8004ce2:	f7fc f9b5 	bl	8001050 <LSM6DS3_ReadGyro>
			VibeCheckSensor_AddData(sensor, 2 * i + 1, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	b2d9      	uxtb	r1, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d06:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d0a:	edd7 6a03 	vldr	s13, [r7, #12]
 8004d0e:	eeb0 1a66 	vmov.f32	s2, s13
 8004d12:	eef0 0a47 	vmov.f32	s1, s14
 8004d16:	eeb0 0a67 	vmov.f32	s0, s15
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff fec6 	bl	8004aae <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004d34:	2201      	movs	r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
			break;
 8004d38:	e007      	b.n	8004d4a <VibeCheckSensor_EXTICallback+0x16a>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	f67f af55 	bls.w	8004bf2 <VibeCheckSensor_EXTICallback+0x12>
		}
	}
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	3728      	adds	r7, #40	@ 0x28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <VibeCheckSensorCMD_Set>:

#include "vibecheck_sensor_handler.h"


static uint32_t VibeCheckSensorCMD_Set(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b09c      	sub	sp, #112	@ 0x70
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004d60:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d64:	2240      	movs	r2, #64	@ 0x40
 8004d66:	4619      	mov	r1, r3
 8004d68:	68b8      	ldr	r0, [r7, #8]
 8004d6a:	f000 fe73 	bl	8005a54 <VibeCheckShell_GetNextString>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80eb 	beq.w	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
	{
		if (!strcmp(str, "accel"))
 8004d76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d7a:	4977      	ldr	r1, [pc, #476]	@ (8004f58 <VibeCheckSensorCMD_Set+0x204>)
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fb fac7 	bl	8000310 <strcmp>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d14f      	bne.n	8004e28 <VibeCheckSensorCMD_Set+0xd4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004d88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d8c:	2240      	movs	r2, #64	@ 0x40
 8004d8e:	4619      	mov	r1, r3
 8004d90:	68b8      	ldr	r0, [r7, #8]
 8004d92:	f000 fe5f 	bl	8005a54 <VibeCheckShell_GetNextString>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80d7 	beq.w	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 8004d9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004da2:	496e      	ldr	r1, [pc, #440]	@ (8004f5c <VibeCheckSensorCMD_Set+0x208>)
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fb fab3 	bl	8000310 <strcmp>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d118      	bne.n	8004de2 <VibeCheckSensorCMD_Set+0x8e>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8004db0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004db4:	4619      	mov	r1, r3
 8004db6:	68b8      	ldr	r0, [r7, #8]
 8004db8:	f000 fec4 	bl	8005b44 <VibeCheckShell_GetNextInt>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 80c4 	beq.w	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelODR(sensor, channel, odr);
 8004dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff fbf2 	bl	80045b4 <VibeCheckSensor_SetAccelODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004dd0:	4963      	ldr	r1, [pc, #396]	@ (8004f60 <VibeCheckSensorCMD_Set+0x20c>)
 8004dd2:	68b8      	ldr	r0, [r7, #8]
 8004dd4:	f000 ff5e 	bl	8005c94 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004dd8:	68b8      	ldr	r0, [r7, #8]
 8004dda:	f000 ffdb 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e0b5      	b.n	8004f4e <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8004de2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004de6:	495f      	ldr	r1, [pc, #380]	@ (8004f64 <VibeCheckSensorCMD_Set+0x210>)
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fb fa91 	bl	8000310 <strcmp>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f040 80ab 	bne.w	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8004df6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	68b8      	ldr	r0, [r7, #8]
 8004dfe:	f000 fea1 	bl	8005b44 <VibeCheckShell_GetNextInt>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80a1 	beq.w	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelRange(sensor, channel, range);
 8004e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff fc17 	bl	8004644 <VibeCheckSensor_SetAccelRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004e16:	4952      	ldr	r1, [pc, #328]	@ (8004f60 <VibeCheckSensorCMD_Set+0x20c>)
 8004e18:	68b8      	ldr	r0, [r7, #8]
 8004e1a:	f000 ff3b 	bl	8005c94 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004e1e:	68b8      	ldr	r0, [r7, #8]
 8004e20:	f000 ffb8 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e092      	b.n	8004f4e <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8004e28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e2c:	494e      	ldr	r1, [pc, #312]	@ (8004f68 <VibeCheckSensorCMD_Set+0x214>)
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fb fa6e 	bl	8000310 <strcmp>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d14b      	bne.n	8004ed2 <VibeCheckSensorCMD_Set+0x17e>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004e3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e3e:	2240      	movs	r2, #64	@ 0x40
 8004e40:	4619      	mov	r1, r3
 8004e42:	68b8      	ldr	r0, [r7, #8]
 8004e44:	f000 fe06 	bl	8005a54 <VibeCheckShell_GetNextString>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d07e      	beq.n	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 8004e4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e52:	4942      	ldr	r1, [pc, #264]	@ (8004f5c <VibeCheckSensorCMD_Set+0x208>)
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fb fa5b 	bl	8000310 <strcmp>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d117      	bne.n	8004e90 <VibeCheckSensorCMD_Set+0x13c>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8004e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e64:	4619      	mov	r1, r3
 8004e66:	68b8      	ldr	r0, [r7, #8]
 8004e68:	f000 fe6c 	bl	8005b44 <VibeCheckShell_GetNextInt>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d06c      	beq.n	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroODR(sensor, channel, odr);
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	461a      	mov	r2, r3
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7ff fbbf 	bl	80045fc <VibeCheckSensor_SetGyroODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004e7e:	4938      	ldr	r1, [pc, #224]	@ (8004f60 <VibeCheckSensorCMD_Set+0x20c>)
 8004e80:	68b8      	ldr	r0, [r7, #8]
 8004e82:	f000 ff07 	bl	8005c94 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004e86:	68b8      	ldr	r0, [r7, #8]
 8004e88:	f000 ff84 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e05e      	b.n	8004f4e <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8004e90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e94:	4933      	ldr	r1, [pc, #204]	@ (8004f64 <VibeCheckSensorCMD_Set+0x210>)
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fb fa3a 	bl	8000310 <strcmp>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d154      	bne.n	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8004ea2:	f107 0320 	add.w	r3, r7, #32
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	68b8      	ldr	r0, [r7, #8]
 8004eaa:	f000 fe4b 	bl	8005b44 <VibeCheckShell_GetNextInt>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d04b      	beq.n	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroRange(sensor, channel, range);
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff fbe6 	bl	800468c <VibeCheckSensor_SetGyroRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004ec0:	4927      	ldr	r1, [pc, #156]	@ (8004f60 <VibeCheckSensorCMD_Set+0x20c>)
 8004ec2:	68b8      	ldr	r0, [r7, #8]
 8004ec4:	f000 fee6 	bl	8005c94 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004ec8:	68b8      	ldr	r0, [r7, #8]
 8004eca:	f000 ff63 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e03d      	b.n	8004f4e <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 8004ed2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004ed6:	4925      	ldr	r1, [pc, #148]	@ (8004f6c <VibeCheckSensorCMD_Set+0x218>)
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fb fa19 	bl	8000310 <strcmp>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d133      	bne.n	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
		{
			float x, y, z;
			if (VibeCheckShell_GetNextFloat(shell, &x)
 8004ee4:	f107 031c 	add.w	r3, r7, #28
 8004ee8:	4619      	mov	r1, r3
 8004eea:	68b8      	ldr	r0, [r7, #8]
 8004eec:	f000 fe46 	bl	8005b7c <VibeCheckShell_GetNextFloat>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d02a      	beq.n	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &y)
 8004ef6:	f107 0318 	add.w	r3, r7, #24
 8004efa:	4619      	mov	r1, r3
 8004efc:	68b8      	ldr	r0, [r7, #8]
 8004efe:	f000 fe3d 	bl	8005b7c <VibeCheckShell_GetNextFloat>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d021      	beq.n	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &z))
 8004f08:	f107 0314 	add.w	r3, r7, #20
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	68b8      	ldr	r0, [r7, #8]
 8004f10:	f000 fe34 	bl	8005b7c <VibeCheckShell_GetNextFloat>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d018      	beq.n	8004f4c <VibeCheckSensorCMD_Set+0x1f8>
			{
				VibeCheckSensor_SetOffsets(sensor, channel, x, y, z);
 8004f1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004f22:	edd7 6a05 	vldr	s13, [r7, #20]
 8004f26:	eeb0 1a66 	vmov.f32	s2, s13
 8004f2a:	eef0 0a47 	vmov.f32	s1, s14
 8004f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff fbcd 	bl	80046d4 <VibeCheckSensor_SetOffsets>
				VibeCheckShell_PutOutputString(shell, "ack");
 8004f3a:	4909      	ldr	r1, [pc, #36]	@ (8004f60 <VibeCheckSensorCMD_Set+0x20c>)
 8004f3c:	68b8      	ldr	r0, [r7, #8]
 8004f3e:	f000 fea9 	bl	8005c94 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004f42:	68b8      	ldr	r0, [r7, #8]
 8004f44:	f000 ff26 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e000      	b.n	8004f4e <VibeCheckSensorCMD_Set+0x1fa>
			}
		}
	}


	return 0;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3770      	adds	r7, #112	@ 0x70
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	0801d860 	.word	0x0801d860
 8004f5c:	0801d868 	.word	0x0801d868
 8004f60:	0801d86c 	.word	0x0801d86c
 8004f64:	0801d870 	.word	0x0801d870
 8004f68:	0801d878 	.word	0x0801d878
 8004f6c:	0801d880 	.word	0x0801d880

08004f70 <VibeCheckSensorCMD_Get>:


static uint32_t VibeCheckSensorCMD_Get(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b09a      	sub	sp, #104	@ 0x68
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004f7c:	f107 0320 	add.w	r3, r7, #32
 8004f80:	2240      	movs	r2, #64	@ 0x40
 8004f82:	4619      	mov	r1, r3
 8004f84:	68b8      	ldr	r0, [r7, #8]
 8004f86:	f000 fd65 	bl	8005a54 <VibeCheckShell_GetNextString>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80fb 	beq.w	8005188 <VibeCheckSensorCMD_Get+0x218>
	{
		if (!strcmp(str, "accel"))
 8004f92:	f107 0320 	add.w	r3, r7, #32
 8004f96:	497f      	ldr	r1, [pc, #508]	@ (8005194 <VibeCheckSensorCMD_Get+0x224>)
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fb f9b9 	bl	8000310 <strcmp>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d147      	bne.n	8005034 <VibeCheckSensorCMD_Get+0xc4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004fa4:	f107 0320 	add.w	r3, r7, #32
 8004fa8:	2240      	movs	r2, #64	@ 0x40
 8004faa:	4619      	mov	r1, r3
 8004fac:	68b8      	ldr	r0, [r7, #8]
 8004fae:	f000 fd51 	bl	8005a54 <VibeCheckShell_GetNextString>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80e7 	beq.w	8005188 <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 8004fba:	f107 0320 	add.w	r3, r7, #32
 8004fbe:	4976      	ldr	r1, [pc, #472]	@ (8005198 <VibeCheckSensorCMD_Get+0x228>)
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fb f9a5 	bl	8000310 <strcmp>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d114      	bne.n	8004ff6 <VibeCheckSensorCMD_Get+0x86>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004fcc:	4973      	ldr	r1, [pc, #460]	@ (800519c <VibeCheckSensorCMD_Get+0x22c>)
 8004fce:	68b8      	ldr	r0, [r7, #8]
 8004fd0:	f000 fe60 	bl	8005c94 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004fd4:	68b8      	ldr	r0, [r7, #8]
 8004fd6:	f000 fecf 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelODR(sensor, channel));
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7ff fbf9 	bl	80047d4 <VibeCheckSensor_GetAccelODR>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	68b8      	ldr	r0, [r7, #8]
 8004fe8:	f000 fe90 	bl	8005d0c <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004fec:	68b8      	ldr	r0, [r7, #8]
 8004fee:	f000 fed1 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e0c9      	b.n	800518a <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 8004ff6:	f107 0320 	add.w	r3, r7, #32
 8004ffa:	4969      	ldr	r1, [pc, #420]	@ (80051a0 <VibeCheckSensorCMD_Get+0x230>)
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fb f987 	bl	8000310 <strcmp>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	f040 80bf 	bne.w	8005188 <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800500a:	4964      	ldr	r1, [pc, #400]	@ (800519c <VibeCheckSensorCMD_Get+0x22c>)
 800500c:	68b8      	ldr	r0, [r7, #8]
 800500e:	f000 fe41 	bl	8005c94 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8005012:	68b8      	ldr	r0, [r7, #8]
 8005014:	f000 feb0 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelRange(sensor, channel));
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff fc0c 	bl	8004838 <VibeCheckSensor_GetAccelRange>
 8005020:	4603      	mov	r3, r0
 8005022:	4619      	mov	r1, r3
 8005024:	68b8      	ldr	r0, [r7, #8]
 8005026:	f000 fe71 	bl	8005d0c <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800502a:	68b8      	ldr	r0, [r7, #8]
 800502c:	f000 feb2 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005030:	2301      	movs	r3, #1
 8005032:	e0aa      	b.n	800518a <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8005034:	f107 0320 	add.w	r3, r7, #32
 8005038:	495a      	ldr	r1, [pc, #360]	@ (80051a4 <VibeCheckSensorCMD_Get+0x234>)
 800503a:	4618      	mov	r0, r3
 800503c:	f7fb f968 	bl	8000310 <strcmp>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d146      	bne.n	80050d4 <VibeCheckSensorCMD_Get+0x164>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005046:	f107 0320 	add.w	r3, r7, #32
 800504a:	2240      	movs	r2, #64	@ 0x40
 800504c:	4619      	mov	r1, r3
 800504e:	68b8      	ldr	r0, [r7, #8]
 8005050:	f000 fd00 	bl	8005a54 <VibeCheckShell_GetNextString>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 8096 	beq.w	8005188 <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 800505c:	f107 0320 	add.w	r3, r7, #32
 8005060:	494d      	ldr	r1, [pc, #308]	@ (8005198 <VibeCheckSensorCMD_Get+0x228>)
 8005062:	4618      	mov	r0, r3
 8005064:	f7fb f954 	bl	8000310 <strcmp>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d114      	bne.n	8005098 <VibeCheckSensorCMD_Get+0x128>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800506e:	494b      	ldr	r1, [pc, #300]	@ (800519c <VibeCheckSensorCMD_Get+0x22c>)
 8005070:	68b8      	ldr	r0, [r7, #8]
 8005072:	f000 fe0f 	bl	8005c94 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8005076:	68b8      	ldr	r0, [r7, #8]
 8005078:	f000 fe7e 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroODR(sensor, channel));
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff fbc1 	bl	8004806 <VibeCheckSensor_GetGyroODR>
 8005084:	4603      	mov	r3, r0
 8005086:	4619      	mov	r1, r3
 8005088:	68b8      	ldr	r0, [r7, #8]
 800508a:	f000 fe3f 	bl	8005d0c <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800508e:	68b8      	ldr	r0, [r7, #8]
 8005090:	f000 fe80 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005094:	2301      	movs	r3, #1
 8005096:	e078      	b.n	800518a <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 8005098:	f107 0320 	add.w	r3, r7, #32
 800509c:	4940      	ldr	r1, [pc, #256]	@ (80051a0 <VibeCheckSensorCMD_Get+0x230>)
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fb f936 	bl	8000310 <strcmp>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d16e      	bne.n	8005188 <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 80050aa:	493c      	ldr	r1, [pc, #240]	@ (800519c <VibeCheckSensorCMD_Get+0x22c>)
 80050ac:	68b8      	ldr	r0, [r7, #8]
 80050ae:	f000 fdf1 	bl	8005c94 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 80050b2:	68b8      	ldr	r0, [r7, #8]
 80050b4:	f000 fe60 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroRange(sensor, channel));
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7ff fbd5 	bl	800486a <VibeCheckSensor_GetGyroRange>
 80050c0:	4603      	mov	r3, r0
 80050c2:	4619      	mov	r1, r3
 80050c4:	68b8      	ldr	r0, [r7, #8]
 80050c6:	f000 fe21 	bl	8005d0c <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 80050ca:	68b8      	ldr	r0, [r7, #8]
 80050cc:	f000 fe62 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e05a      	b.n	800518a <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 80050d4:	f107 0320 	add.w	r3, r7, #32
 80050d8:	4933      	ldr	r1, [pc, #204]	@ (80051a8 <VibeCheckSensorCMD_Get+0x238>)
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fb f918 	bl	8000310 <strcmp>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d132      	bne.n	800514c <VibeCheckSensorCMD_Get+0x1dc>
		{
			float x, y, z;
			VibeCheckSensor_GetOffsets(sensor, channel, &x, &y, &z);
 80050e6:	f107 0118 	add.w	r1, r7, #24
 80050ea:	f107 021c 	add.w	r2, r7, #28
 80050ee:	f107 0314 	add.w	r3, r7, #20
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	460b      	mov	r3, r1
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff fbcf 	bl	800489c <VibeCheckSensor_GetOffsets>

			VibeCheckShell_PutOutputString(shell, "ack");
 80050fe:	4927      	ldr	r1, [pc, #156]	@ (800519c <VibeCheckSensorCMD_Get+0x22c>)
 8005100:	68b8      	ldr	r0, [r7, #8]
 8005102:	f000 fdc7 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005106:	68b8      	ldr	r0, [r7, #8]
 8005108:	f000 fe36 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, x);
 800510c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005110:	eeb0 0a67 	vmov.f32	s0, s15
 8005114:	68b8      	ldr	r0, [r7, #8]
 8005116:	f000 fe11 	bl	8005d3c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 800511a:	68b8      	ldr	r0, [r7, #8]
 800511c:	f000 fe2c 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, y);
 8005120:	edd7 7a06 	vldr	s15, [r7, #24]
 8005124:	eeb0 0a67 	vmov.f32	s0, s15
 8005128:	68b8      	ldr	r0, [r7, #8]
 800512a:	f000 fe07 	bl	8005d3c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 800512e:	68b8      	ldr	r0, [r7, #8]
 8005130:	f000 fe22 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, z);
 8005134:	edd7 7a05 	vldr	s15, [r7, #20]
 8005138:	eeb0 0a67 	vmov.f32	s0, s15
 800513c:	68b8      	ldr	r0, [r7, #8]
 800513e:	f000 fdfd 	bl	8005d3c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005142:	68b8      	ldr	r0, [r7, #8]
 8005144:	f000 fe26 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005148:	2301      	movs	r3, #1
 800514a:	e01e      	b.n	800518a <VibeCheckSensorCMD_Get+0x21a>
		}
		else if (!strcmp(str, "connected"))
 800514c:	f107 0320 	add.w	r3, r7, #32
 8005150:	4916      	ldr	r1, [pc, #88]	@ (80051ac <VibeCheckSensorCMD_Get+0x23c>)
 8005152:	4618      	mov	r0, r3
 8005154:	f7fb f8dc 	bl	8000310 <strcmp>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d114      	bne.n	8005188 <VibeCheckSensorCMD_Get+0x218>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 800515e:	490f      	ldr	r1, [pc, #60]	@ (800519c <VibeCheckSensorCMD_Get+0x22c>)
 8005160:	68b8      	ldr	r0, [r7, #8]
 8005162:	f000 fd97 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005166:	68b8      	ldr	r0, [r7, #8]
 8005168:	f000 fe06 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_IsConnected(sensor, channel));
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff fbe2 	bl	8004938 <VibeCheckSensor_IsConnected>
 8005174:	4603      	mov	r3, r0
 8005176:	4619      	mov	r1, r3
 8005178:	68b8      	ldr	r0, [r7, #8]
 800517a:	f000 fdc7 	bl	8005d0c <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputDelimiter(shell);
 800517e:	68b8      	ldr	r0, [r7, #8]
 8005180:	f000 fe08 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <VibeCheckSensorCMD_Get+0x21a>
		}
	}

	return 0;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3760      	adds	r7, #96	@ 0x60
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	0801d860 	.word	0x0801d860
 8005198:	0801d868 	.word	0x0801d868
 800519c:	0801d86c 	.word	0x0801d86c
 80051a0:	0801d870 	.word	0x0801d870
 80051a4:	0801d878 	.word	0x0801d878
 80051a8:	0801d880 	.word	0x0801d880
 80051ac:	0801d888 	.word	0x0801d888

080051b0 <VibeCheckSensorCMD_Execute>:


uint32_t VibeCheckSensorCMD_Execute(void* obj, VibeCheckShell* shell)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b094      	sub	sp, #80	@ 0x50
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	int32_t channel;
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80051be:	f107 030c 	add.w	r3, r7, #12
 80051c2:	2240      	movs	r2, #64	@ 0x40
 80051c4:	4619      	mov	r1, r3
 80051c6:	6838      	ldr	r0, [r7, #0]
 80051c8:	f000 fc44 	bl	8005a54 <VibeCheckShell_GetNextString>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8101 	beq.w	80053d6 <VibeCheckSensorCMD_Execute+0x226>
	{
		if (!strcmp(str, "fakedata"))
 80051d4:	f107 030c 	add.w	r3, r7, #12
 80051d8:	4981      	ldr	r1, [pc, #516]	@ (80053e0 <VibeCheckSensorCMD_Execute+0x230>)
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fb f898 	bl	8000310 <strcmp>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d135      	bne.n	8005252 <VibeCheckSensorCMD_Execute+0xa2>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80051e6:	f107 030c 	add.w	r3, r7, #12
 80051ea:	2240      	movs	r2, #64	@ 0x40
 80051ec:	4619      	mov	r1, r3
 80051ee:	6838      	ldr	r0, [r7, #0]
 80051f0:	f000 fc30 	bl	8005a54 <VibeCheckShell_GetNextString>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80ed 	beq.w	80053d6 <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 80051fc:	f107 030c 	add.w	r3, r7, #12
 8005200:	4978      	ldr	r1, [pc, #480]	@ (80053e4 <VibeCheckSensorCMD_Execute+0x234>)
 8005202:	4618      	mov	r0, r3
 8005204:	f7fb f884 	bl	8000310 <strcmp>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10b      	bne.n	8005226 <VibeCheckSensorCMD_Execute+0x76>
				{
					VibeCheckSensor_StartFakeData(sensor);
 800520e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005210:	f7ff fb76 	bl	8004900 <VibeCheckSensor_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005214:	4974      	ldr	r1, [pc, #464]	@ (80053e8 <VibeCheckSensorCMD_Execute+0x238>)
 8005216:	6838      	ldr	r0, [r7, #0]
 8005218:	f000 fd3c 	bl	8005c94 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800521c:	6838      	ldr	r0, [r7, #0]
 800521e:	f000 fdb9 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005222:	2301      	movs	r3, #1
 8005224:	e0d8      	b.n	80053d8 <VibeCheckSensorCMD_Execute+0x228>
				}
				else if (!strcmp(str, "stop"))
 8005226:	f107 030c 	add.w	r3, r7, #12
 800522a:	4970      	ldr	r1, [pc, #448]	@ (80053ec <VibeCheckSensorCMD_Execute+0x23c>)
 800522c:	4618      	mov	r0, r3
 800522e:	f7fb f86f 	bl	8000310 <strcmp>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	f040 80ce 	bne.w	80053d6 <VibeCheckSensorCMD_Execute+0x226>
				{
					VibeCheckSensor_StopFakeData(sensor);
 800523a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800523c:	f7ff fb6e 	bl	800491c <VibeCheckSensor_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005240:	4969      	ldr	r1, [pc, #420]	@ (80053e8 <VibeCheckSensorCMD_Execute+0x238>)
 8005242:	6838      	ldr	r0, [r7, #0]
 8005244:	f000 fd26 	bl	8005c94 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005248:	6838      	ldr	r0, [r7, #0]
 800524a:	f000 fda3 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800524e:	2301      	movs	r3, #1
 8005250:	e0c2      	b.n	80053d8 <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
		else if (VibeCheckShell_TurnToInt(str, &channel))
 8005252:	f107 0208 	add.w	r2, r7, #8
 8005256:	f107 030c 	add.w	r3, r7, #12
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fca9 	bl	8005bb4 <VibeCheckShell_TurnToInt>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80b6 	beq.w	80053d6 <VibeCheckSensorCMD_Execute+0x226>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800526a:	f107 030c 	add.w	r3, r7, #12
 800526e:	2240      	movs	r2, #64	@ 0x40
 8005270:	4619      	mov	r1, r3
 8005272:	6838      	ldr	r0, [r7, #0]
 8005274:	f000 fbee 	bl	8005a54 <VibeCheckShell_GetNextString>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 80ab 	beq.w	80053d6 <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 8005280:	f107 030c 	add.w	r3, r7, #12
 8005284:	4957      	ldr	r1, [pc, #348]	@ (80053e4 <VibeCheckSensorCMD_Execute+0x234>)
 8005286:	4618      	mov	r0, r3
 8005288:	f7fb f842 	bl	8000310 <strcmp>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d138      	bne.n	8005304 <VibeCheckSensorCMD_Execute+0x154>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005292:	f107 030c 	add.w	r3, r7, #12
 8005296:	2240      	movs	r2, #64	@ 0x40
 8005298:	4619      	mov	r1, r3
 800529a:	6838      	ldr	r0, [r7, #0]
 800529c:	f000 fbda 	bl	8005a54 <VibeCheckShell_GetNextString>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 8097 	beq.w	80053d6 <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 80052a8:	f107 030c 	add.w	r3, r7, #12
 80052ac:	4950      	ldr	r1, [pc, #320]	@ (80053f0 <VibeCheckSensorCMD_Execute+0x240>)
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fb f82e 	bl	8000310 <strcmp>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10d      	bne.n	80052d6 <VibeCheckSensorCMD_Execute+0x126>
						{
							VibeCheckSensor_StartAccel(sensor, channel);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4619      	mov	r1, r3
 80052be:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80052c0:	f7ff f888 	bl	80043d4 <VibeCheckSensor_StartAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 80052c4:	4948      	ldr	r1, [pc, #288]	@ (80053e8 <VibeCheckSensorCMD_Execute+0x238>)
 80052c6:	6838      	ldr	r0, [r7, #0]
 80052c8:	f000 fce4 	bl	8005c94 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 80052cc:	6838      	ldr	r0, [r7, #0]
 80052ce:	f000 fd61 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e080      	b.n	80053d8 <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 80052d6:	f107 030c 	add.w	r3, r7, #12
 80052da:	4946      	ldr	r1, [pc, #280]	@ (80053f4 <VibeCheckSensorCMD_Execute+0x244>)
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fb f817 	bl	8000310 <strcmp>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d176      	bne.n	80053d6 <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StartGyro(sensor, channel);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4619      	mov	r1, r3
 80052ec:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80052ee:	f7ff f8e9 	bl	80044c4 <VibeCheckSensor_StartGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 80052f2:	493d      	ldr	r1, [pc, #244]	@ (80053e8 <VibeCheckSensorCMD_Execute+0x238>)
 80052f4:	6838      	ldr	r0, [r7, #0]
 80052f6:	f000 fccd 	bl	8005c94 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 80052fa:	6838      	ldr	r0, [r7, #0]
 80052fc:	f000 fd4a 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005300:	2301      	movs	r3, #1
 8005302:	e069      	b.n	80053d8 <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "stop"))
 8005304:	f107 030c 	add.w	r3, r7, #12
 8005308:	4938      	ldr	r1, [pc, #224]	@ (80053ec <VibeCheckSensorCMD_Execute+0x23c>)
 800530a:	4618      	mov	r0, r3
 800530c:	f7fb f800 	bl	8000310 <strcmp>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d137      	bne.n	8005386 <VibeCheckSensorCMD_Execute+0x1d6>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005316:	f107 030c 	add.w	r3, r7, #12
 800531a:	2240      	movs	r2, #64	@ 0x40
 800531c:	4619      	mov	r1, r3
 800531e:	6838      	ldr	r0, [r7, #0]
 8005320:	f000 fb98 	bl	8005a54 <VibeCheckShell_GetNextString>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d055      	beq.n	80053d6 <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 800532a:	f107 030c 	add.w	r3, r7, #12
 800532e:	4930      	ldr	r1, [pc, #192]	@ (80053f0 <VibeCheckSensorCMD_Execute+0x240>)
 8005330:	4618      	mov	r0, r3
 8005332:	f7fa ffed 	bl	8000310 <strcmp>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10d      	bne.n	8005358 <VibeCheckSensorCMD_Execute+0x1a8>
						{
							VibeCheckSensor_StopAccel(sensor, channel);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4619      	mov	r1, r3
 8005340:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005342:	f7ff f883 	bl	800444c <VibeCheckSensor_StopAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005346:	4928      	ldr	r1, [pc, #160]	@ (80053e8 <VibeCheckSensorCMD_Execute+0x238>)
 8005348:	6838      	ldr	r0, [r7, #0]
 800534a:	f000 fca3 	bl	8005c94 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 800534e:	6838      	ldr	r0, [r7, #0]
 8005350:	f000 fd20 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005354:	2301      	movs	r3, #1
 8005356:	e03f      	b.n	80053d8 <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	4925      	ldr	r1, [pc, #148]	@ (80053f4 <VibeCheckSensorCMD_Execute+0x244>)
 800535e:	4618      	mov	r0, r3
 8005360:	f7fa ffd6 	bl	8000310 <strcmp>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d135      	bne.n	80053d6 <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StopGyro(sensor, channel);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4619      	mov	r1, r3
 800536e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005370:	f7ff f8e4 	bl	800453c <VibeCheckSensor_StopGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005374:	491c      	ldr	r1, [pc, #112]	@ (80053e8 <VibeCheckSensorCMD_Execute+0x238>)
 8005376:	6838      	ldr	r0, [r7, #0]
 8005378:	f000 fc8c 	bl	8005c94 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 800537c:	6838      	ldr	r0, [r7, #0]
 800537e:	f000 fd09 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005382:	2301      	movs	r3, #1
 8005384:	e028      	b.n	80053d8 <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "set"))
 8005386:	f107 030c 	add.w	r3, r7, #12
 800538a:	491b      	ldr	r1, [pc, #108]	@ (80053f8 <VibeCheckSensorCMD_Execute+0x248>)
 800538c:	4618      	mov	r0, r3
 800538e:	f7fa ffbf 	bl	8000310 <strcmp>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <VibeCheckSensorCMD_Execute+0x1fe>
				{
					if (VibeCheckSensorCMD_Set(sensor, shell, channel))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	461a      	mov	r2, r3
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80053a0:	f7ff fcd8 	bl	8004d54 <VibeCheckSensorCMD_Set>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d015      	beq.n	80053d6 <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e014      	b.n	80053d8 <VibeCheckSensorCMD_Execute+0x228>
					}
				}
				else if (!strcmp(str, "get"))
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	4912      	ldr	r1, [pc, #72]	@ (80053fc <VibeCheckSensorCMD_Execute+0x24c>)
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fa ffab 	bl	8000310 <strcmp>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <VibeCheckSensorCMD_Execute+0x226>
				{
					if (VibeCheckSensorCMD_Get(sensor, shell, channel))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	461a      	mov	r2, r3
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80053c8:	f7ff fdd2 	bl	8004f70 <VibeCheckSensorCMD_Get>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
	}

	return 0;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3750      	adds	r7, #80	@ 0x50
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	0801d894 	.word	0x0801d894
 80053e4:	0801d8a0 	.word	0x0801d8a0
 80053e8:	0801d86c 	.word	0x0801d86c
 80053ec:	0801d8a8 	.word	0x0801d8a8
 80053f0:	0801d860 	.word	0x0801d860
 80053f4:	0801d878 	.word	0x0801d878
 80053f8:	0801d8b0 	.word	0x0801d8b0
 80053fc:	0801d8b4 	.word	0x0801d8b4

08005400 <VibeCheckSensorSender_Data_Execute>:


uint32_t VibeCheckSensorSender_Data_Execute(void* obj, VibeCheckShell* shell)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	613b      	str	r3, [r7, #16]

	volatile VibeCheckSensor_Data* data;
	if (VibeCheckSensor_GetDataReady(sensor, &data))
 800540e:	f107 030c 	add.w	r3, r7, #12
 8005412:	4619      	mov	r1, r3
 8005414:	6938      	ldr	r0, [r7, #16]
 8005416:	f7ff fbbc 	bl	8004b92 <VibeCheckSensor_GetDataReady>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d04f      	beq.n	80054c0 <VibeCheckSensorSender_Data_Execute+0xc0>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8005420:	492a      	ldr	r1, [pc, #168]	@ (80054cc <VibeCheckSensorSender_Data_Execute+0xcc>)
 8005422:	6838      	ldr	r0, [r7, #0]
 8005424:	f000 fc36 	bl	8005c94 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8005428:	6838      	ldr	r0, [r7, #0]
 800542a:	f000 fca5 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_SENSOR_DATA_PER_PACKET);
 800542e:	210a      	movs	r1, #10
 8005430:	6838      	ldr	r0, [r7, #0]
 8005432:	f000 fc6b 	bl	8005d0c <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]

		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 800543a:	e039      	b.n	80054b0 <VibeCheckSensorSender_Data_Execute+0xb0>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 800543c:	6838      	ldr	r0, [r7, #0]
 800543e:	f000 fc9b 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	4619      	mov	r1, r3
 800544a:	6838      	ldr	r0, [r7, #0]
 800544c:	f000 fc5e 	bl	8005d0c <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8005450:	6838      	ldr	r0, [r7, #0]
 8005452:	f000 fc91 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4619      	mov	r1, r3
 800545c:	6838      	ldr	r0, [r7, #0]
 800545e:	f000 fc55 	bl	8005d0c <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8005462:	6838      	ldr	r0, [r7, #0]
 8005464:	f000 fc88 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	edd3 7a02 	vldr	s15, [r3, #8]
 800546e:	eeb0 0a67 	vmov.f32	s0, s15
 8005472:	6838      	ldr	r0, [r7, #0]
 8005474:	f000 fc62 	bl	8005d3c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8005478:	6838      	ldr	r0, [r7, #0]
 800547a:	f000 fc7d 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	edd3 7a03 	vldr	s15, [r3, #12]
 8005484:	eeb0 0a67 	vmov.f32	s0, s15
 8005488:	6838      	ldr	r0, [r7, #0]
 800548a:	f000 fc57 	bl	8005d3c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 800548e:	6838      	ldr	r0, [r7, #0]
 8005490:	f000 fc72 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	edd3 7a04 	vldr	s15, [r3, #16]
 800549a:	eeb0 0a67 	vmov.f32	s0, s15
 800549e:	6838      	ldr	r0, [r7, #0]
 80054a0:	f000 fc4c 	bl	8005d3c <VibeCheckShell_PutOutputFloat>


			data++;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3314      	adds	r3, #20
 80054a8:	60fb      	str	r3, [r7, #12]
			data_written++;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	3301      	adds	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2b09      	cmp	r3, #9
 80054b4:	d9c2      	bls.n	800543c <VibeCheckSensorSender_Data_Execute+0x3c>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 80054b6:	6838      	ldr	r0, [r7, #0]
 80054b8:	f000 fc6c 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <VibeCheckSensorSender_Data_Execute+0xc2>
	}

	return 0;
 80054c0:	2300      	movs	r3, #0

}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	0801d8b8 	.word	0x0801d8b8

080054d0 <VibeCheckSensorSender_Status_Execute>:


uint32_t VibeCheckSensorSender_Status_Execute(void* obj, VibeCheckShell* shell)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	617b      	str	r3, [r7, #20]

	uint32_t channel, is_connected;
	if (VibeCheckSensor_ConnectionChanged(sensor, &channel, &is_connected))
 80054de:	f107 020c 	add.w	r2, r7, #12
 80054e2:	f107 0310 	add.w	r3, r7, #16
 80054e6:	4619      	mov	r1, r3
 80054e8:	6978      	ldr	r0, [r7, #20]
 80054ea:	f7ff fa3e 	bl	800496a <VibeCheckSensor_ConnectionChanged>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d026      	beq.n	8005542 <VibeCheckSensorSender_Status_Execute+0x72>
	{
		VibeCheckShell_PutOutputString(shell, "event");
 80054f4:	4915      	ldr	r1, [pc, #84]	@ (800554c <VibeCheckSensorSender_Status_Execute+0x7c>)
 80054f6:	6838      	ldr	r0, [r7, #0]
 80054f8:	f000 fbcc 	bl	8005c94 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80054fc:	6838      	ldr	r0, [r7, #0]
 80054fe:	f000 fc3b 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "sensor");
 8005502:	4913      	ldr	r1, [pc, #76]	@ (8005550 <VibeCheckSensorSender_Status_Execute+0x80>)
 8005504:	6838      	ldr	r0, [r7, #0]
 8005506:	f000 fbc5 	bl	8005c94 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 800550a:	6838      	ldr	r0, [r7, #0]
 800550c:	f000 fc34 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, channel);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4619      	mov	r1, r3
 8005514:	6838      	ldr	r0, [r7, #0]
 8005516:	f000 fbf9 	bl	8005d0c <VibeCheckShell_PutOutputInt>
		VibeCheckShell_PutOutputSeparator(shell);
 800551a:	6838      	ldr	r0, [r7, #0]
 800551c:	f000 fc2c 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>

		if (is_connected)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d004      	beq.n	8005530 <VibeCheckSensorSender_Status_Execute+0x60>
			VibeCheckShell_PutOutputString(shell, "connected");
 8005526:	490b      	ldr	r1, [pc, #44]	@ (8005554 <VibeCheckSensorSender_Status_Execute+0x84>)
 8005528:	6838      	ldr	r0, [r7, #0]
 800552a:	f000 fbb3 	bl	8005c94 <VibeCheckShell_PutOutputString>
 800552e:	e003      	b.n	8005538 <VibeCheckSensorSender_Status_Execute+0x68>
		else
			VibeCheckShell_PutOutputString(shell, "disconnected");
 8005530:	4909      	ldr	r1, [pc, #36]	@ (8005558 <VibeCheckSensorSender_Status_Execute+0x88>)
 8005532:	6838      	ldr	r0, [r7, #0]
 8005534:	f000 fbae 	bl	8005c94 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8005538:	6838      	ldr	r0, [r7, #0]
 800553a:	f000 fc2b 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
		return 1;
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <VibeCheckSensorSender_Status_Execute+0x74>
	}

	return 0;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	0801d8c0 	.word	0x0801d8c0
 8005550:	0801d8c8 	.word	0x0801d8c8
 8005554:	0801d888 	.word	0x0801d888
 8005558:	0801d8d0 	.word	0x0801d8d0

0800555c <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800556a:	461a      	mov	r2, r3
 800556c:	2300      	movs	r3, #0
 800556e:	6013      	str	r3, [r2, #0]
	shell->input_tail = 0;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005576:	461a      	mov	r2, r3
 8005578:	2300      	movs	r3, #0
 800557a:	6053      	str	r3, [r2, #4]
	shell->input_count = 0;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005582:	461a      	mov	r2, r3
 8005584:	2300      	movs	r3, #0
 8005586:	6093      	str	r3, [r2, #8]
	shell->input_delimiter_count = 0;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800558e:	461a      	mov	r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	60d3      	str	r3, [r2, #12]

	shell->output_head = 0;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800559a:	461a      	mov	r2, r3
 800559c:	2300      	movs	r3, #0
 800559e:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80055a6:	461a      	mov	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	6153      	str	r3, [r2, #20]
	shell->output_count = 0;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80055b2:	461a      	mov	r2, r3
 80055b4:	2300      	movs	r3, #0
 80055b6:	6193      	str	r3, [r2, #24]

	shell->ih_count = 0;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80055be:	461a      	mov	r2, r3
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	shell->oh_count = 0;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80055cc:	461a      	mov	r2, r3
 80055ce:	2300      	movs	r3, #0
 80055d0:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b099      	sub	sp, #100	@ 0x64
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 80055e8:	2300      	movs	r3, #0
 80055ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055f8:	d302      	bcc.n	8005600 <VibeCheckShell_Update+0x20>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 809a 	beq.w	8005742 <VibeCheckShell_Update+0x162>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 8005614:	e095      	b.n	8005742 <VibeCheckShell_Update+0x162>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 8005616:	f107 030c 	add.w	r3, r7, #12
 800561a:	2240      	movs	r2, #64	@ 0x40
 800561c:	4619      	mov	r1, r3
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa18 	bl	8005a54 <VibeCheckShell_GetNextString>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d04b      	beq.n	80056c2 <VibeCheckShell_Update+0xe2>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 800562a:	2300      	movs	r3, #0
 800562c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800562e:	e03f      	b.n	80056b0 <VibeCheckShell_Update+0xd0>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8005630:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005632:	4613      	mov	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4413      	add	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4a69      	ldr	r2, [pc, #420]	@ (80057e0 <VibeCheckShell_Update+0x200>)
 800563c:	441a      	add	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4413      	add	r3, r2
 8005642:	3304      	adds	r3, #4
 8005644:	f107 020c 	add.w	r2, r7, #12
 8005648:	4611      	mov	r1, r2
 800564a:	4618      	mov	r0, r3
 800564c:	f7fa fe60 	bl	8000310 <strcmp>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d11d      	bne.n	8005692 <VibeCheckShell_Update+0xb2>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800565a:	4613      	mov	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4413      	add	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	18ca      	adds	r2, r1, r3
 8005664:	4b5f      	ldr	r3, [pc, #380]	@ (80057e4 <VibeCheckShell_Update+0x204>)
 8005666:	4413      	add	r3, r2
 8005668:	681c      	ldr	r4, [r3, #0]
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800566e:	4613      	mov	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4413      	add	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	18ca      	adds	r2, r1, r3
 8005678:	4b5b      	ldr	r3, [pc, #364]	@ (80057e8 <VibeCheckShell_Update+0x208>)
 800567a:	4413      	add	r3, r2
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4618      	mov	r0, r3
 8005682:	47a0      	blx	r4
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d11f      	bne.n	80056ca <VibeCheckShell_Update+0xea>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 800568a:	2303      	movs	r3, #3
 800568c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8005690:	e01b      	b.n	80056ca <VibeCheckShell_Update+0xea>
				}

				if (i == shell->ih_count - 1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005698:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800569c:	3b01      	subs	r3, #1
 800569e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d102      	bne.n	80056aa <VibeCheckShell_Update+0xca>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 80056a4:	2302      	movs	r3, #2
 80056a6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 80056aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056ac:	3301      	adds	r3, #1
 80056ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80056b6:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80056ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80056bc:	429a      	cmp	r2, r3
 80056be:	d3b7      	bcc.n	8005630 <VibeCheckShell_Update+0x50>
 80056c0:	e004      	b.n	80056cc <VibeCheckShell_Update+0xec>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 80056c2:	2302      	movs	r3, #2
 80056c4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80056c8:	e000      	b.n	80056cc <VibeCheckShell_Update+0xec>
					break;
 80056ca:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	5cd3      	ldrb	r3, [r2, r3]
 80056d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80056ec:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	3301      	adds	r3, #1
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80056fe:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800570c:	d105      	bne.n	800571a <VibeCheckShell_Update+0x13a>
				shell->input_tail = 0;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005714:	461a      	mov	r2, r3
 8005716:	2300      	movs	r3, #0
 8005718:	6053      	str	r3, [r2, #4]

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 800571a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800571e:	4619      	mov	r1, r3
 8005720:	4832      	ldr	r0, [pc, #200]	@ (80057ec <VibeCheckShell_Update+0x20c>)
 8005722:	f014 fcbe 	bl	801a0a2 <strchr>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d100      	bne.n	800572e <VibeCheckShell_Update+0x14e>
		{
 800572c:	e7ce      	b.n	80056cc <VibeCheckShell_Update+0xec>
				break;  /* found the delimiter */
 800572e:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	3b01      	subs	r3, #1
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005740:	60d3      	str	r3, [r2, #12]
	while (shell->input_delimiter_count)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f47f af63 	bne.w	8005616 <VibeCheckShell_Update+0x36>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8005750:	2300      	movs	r3, #0
 8005752:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005754:	e01a      	b.n	800578c <VibeCheckShell_Update+0x1ac>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800575a:	f242 2344 	movw	r3, #8772	@ 0x2244
 800575e:	440b      	add	r3, r1
 8005760:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005768:	f242 2344 	movw	r3, #8772	@ 0x2244
 800576c:	4403      	add	r3, r0
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	440b      	add	r3, r1
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4618      	mov	r0, r3
 8005778:	4790      	blx	r2
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <VibeCheckShell_Update+0x1a6>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 8005780:	2301      	movs	r3, #1
 8005782:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8005786:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005788:	3301      	adds	r3, #1
 800578a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005792:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8005796:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005798:	429a      	cmp	r2, r3
 800579a:	d3dc      	bcc.n	8005756 <VibeCheckShell_Update+0x176>
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057a8:	d302      	bcc.n	80057b0 <VibeCheckShell_Update+0x1d0>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 80057b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80057b4:	2300      	movs	r3, #0
 80057b6:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80057ba:	f362 0307 	bfi	r3, r2, #0, #8
 80057be:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 80057c2:	f362 230f 	bfi	r3, r2, #8, #8
 80057c6:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80057ca:	f362 4317 	bfi	r3, r2, #16, #8
 80057ce:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80057d2:	f362 631f 	bfi	r3, r2, #24, #8
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3764      	adds	r7, #100	@ 0x64
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd90      	pop	{r4, r7, pc}
 80057de:	bf00      	nop
 80057e0:	00010018 	.word	0x00010018
 80057e4:	0001005c 	.word	0x0001005c
 80057e8:	00010060 	.word	0x00010060
 80057ec:	0801d8e0 	.word	0x0801d8e0

080057f0 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 80057f0:	b084      	sub	sp, #16
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	f107 0014 	add.w	r0, r7, #20
 80057fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005808:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800580c:	2b3f      	cmp	r3, #63	@ 0x3f
 800580e:	d819      	bhi.n	8005844 <VibeCheckShell_RegisterInputHandler+0x54>
		shell->input_handlers[shell->ih_count++] = handler;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005816:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800581a:	1c53      	adds	r3, r2, #1
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 8005822:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	4613      	mov	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4413      	add	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	18ca      	adds	r2, r1, r3
 8005832:	4b08      	ldr	r3, [pc, #32]	@ (8005854 <VibeCheckShell_RegisterInputHandler+0x64>)
 8005834:	4413      	add	r3, r2
 8005836:	3304      	adds	r3, #4
 8005838:	f107 0114 	add.w	r1, r7, #20
 800583c:	2248      	movs	r2, #72	@ 0x48
 800583e:	4618      	mov	r0, r3
 8005840:	f014 fcc5 	bl	801a1ce <memcpy>
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800584e:	b004      	add	sp, #16
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	00010018 	.word	0x00010018

08005858 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800586c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8005870:	2b3f      	cmp	r3, #63	@ 0x3f
 8005872:	d815      	bhi.n	80058a0 <VibeCheckShell_RegisterOutputHandler+0x48>
		shell->output_handlers[shell->oh_count++] = handler;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800587a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	@ 0x420
 800587e:	1c53      	adds	r3, r2, #1
 8005880:	68f9      	ldr	r1, [r7, #12]
 8005882:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 8005886:	f8c1 3420 	str.w	r3, [r1, #1056]	@ 0x420
 800588a:	68f9      	ldr	r1, [r7, #12]
 800588c:	f242 2344 	movw	r3, #8772	@ 0x2244
 8005890:	4413      	add	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	440b      	add	r3, r1
 8005896:	1d3a      	adds	r2, r7, #4
 8005898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800589c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80058a0:	bf00      	nop
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	e03e      	b.n	800593c <VibeCheckShell_PutInput+0x90>
	{
		if (*input)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d03f      	beq.n	8005946 <VibeCheckShell_PutInput+0x9a>
		{
			shell->input[shell->input_head++] = *input;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	68f9      	ldr	r1, [r7, #12]
 80058d2:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 80058d6:	600a      	str	r2, [r1, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	7811      	ldrb	r1, [r2, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ec:	d105      	bne.n	80058fa <VibeCheckShell_PutInput+0x4e>
					shell->input_head = 0;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80058f4:	461a      	mov	r2, r3
 80058f6:	2300      	movs	r3, #0
 80058f8:	6013      	str	r3, [r2, #0]
			shell->input_count++;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	3301      	adds	r3, #1
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800590a:	6093      	str	r3, [r2, #8]

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	4619      	mov	r1, r3
 8005912:	480f      	ldr	r0, [pc, #60]	@ (8005950 <VibeCheckShell_PutInput+0xa4>)
 8005914:	f014 fbc5 	bl	801a0a2 <strchr>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d008      	beq.n	8005930 <VibeCheckShell_PutInput+0x84>
				shell->input_delimiter_count++;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800592e:	60d3      	str	r3, [r2, #12]

			input++;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	3301      	adds	r3, #1
 8005934:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	3301      	adds	r3, #1
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	429a      	cmp	r2, r3
 8005942:	d3bc      	bcc.n	80058be <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 8005944:	e000      	b.n	8005948 <VibeCheckShell_PutInput+0x9c>
			break;
 8005946:	bf00      	nop
}
 8005948:	bf00      	nop
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	0801d8e0 	.word	0x0801d8e0

08005954 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	if (shell->output_head == shell->output_tail)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	429a      	cmp	r2, r3
 8005972:	d101      	bne.n	8005978 <VibeCheckShell_GetOutput+0x24>
		return 0;
 8005974:	2300      	movs	r3, #0
 8005976:	e035      	b.n	80059e4 <VibeCheckShell_GetOutput+0x90>

	if (shell->output_head > shell->output_tail)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	429a      	cmp	r2, r3
 800598a:	d917      	bls.n	80059bc <VibeCheckShell_GetOutput+0x68>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[shell->output_tail];
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005992:	695a      	ldr	r2, [r3, #20]
 8005994:	f248 0310 	movw	r3, #32784	@ 0x8010
 8005998:	4413      	add	r3, r2
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	441a      	add	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	601a      	str	r2, [r3, #0]
		*len = shell->output_head - shell->output_tail;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	1ad2      	subs	r2, r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]
		return 1;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e013      	b.n	80059e4 <VibeCheckShell_GetOutput+0x90>
	}
	else
	{
		/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
		*output = &shell->output[shell->output_tail];
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	f248 0310 	movw	r3, #32784	@ 0x8010
 80059c8:	4413      	add	r3, r2
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	441a      	add	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	601a      	str	r2, [r3, #0]
		*len = VC_SHELL_IO_BUF_LEN - shell->output_tail;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f5c3 4200 	rsb	r2, r3, #32768	@ 0x8000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
		return 1;
 80059e2:	2301      	movs	r3, #1
//			return 0;
//
//	}


}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <VibeCheckShell_UpdateOutputBuffer>:


void VibeCheckShell_UpdateOutputBuffer(VibeCheckShell* shell, uint32_t len)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
	/* length argument tells how many characters we successfully transmitted */

	/* update the tail of the output buffer now that we have confirmed transmission */
	shell->output_count -= len;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005a0c:	6193      	str	r3, [r2, #24]
	shell->output_tail += len;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	4413      	add	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005a20:	6153      	str	r3, [r2, #20]
	while (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
 8005a22:	e009      	b.n	8005a38 <VibeCheckShell_UpdateOutputBuffer+0x48>
		shell->output_tail -= VC_SHELL_IO_BUF_LEN;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005a36:	6153      	str	r3, [r2, #20]
	while (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a44:	d2ee      	bcs.n	8005a24 <VibeCheckShell_UpdateOutputBuffer+0x34>
}
 8005a46:	bf00      	nop
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e05f      	b.n	8005b26 <VibeCheckShell_GetNextString+0xd2>
	{

		char x = shell->input[shell->input_tail];
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	5cd3      	ldrb	r3, [r2, r3]
 8005a72:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	4619      	mov	r1, r3
 8005a78:	482f      	ldr	r0, [pc, #188]	@ (8005b38 <VibeCheckShell_GetNextString+0xe4>)
 8005a7a:	f014 fb12 	bl	801a0a2 <strchr>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d009      	beq.n	8005a98 <VibeCheckShell_GetNextString+0x44>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <VibeCheckShell_GetNextString+0x40>
			{
				*next = '\0';
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
				return 1;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e04d      	b.n	8005b30 <VibeCheckShell_GetNextString+0xdc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 8005a94:	2300      	movs	r3, #0
 8005a96:	e04b      	b.n	8005b30 <VibeCheckShell_GetNextString+0xdc>
		}
		else
		{
			shell->input_count--;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005aa8:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005aba:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ac8:	d105      	bne.n	8005ad6 <VibeCheckShell_GetNextString+0x82>
				shell->input_tail = 0;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6053      	str	r3, [r2, #4]

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 8005ad6:	7cfb      	ldrb	r3, [r7, #19]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4818      	ldr	r0, [pc, #96]	@ (8005b3c <VibeCheckShell_GetNextString+0xe8>)
 8005adc:	f014 fae1 	bl	801a0a2 <strchr>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <VibeCheckShell_GetNextString+0xa2>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01c      	beq.n	8005b26 <VibeCheckShell_GetNextString+0xd2>
				{
					*next = '\0';
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]
					return 1;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e01c      	b.n	8005b30 <VibeCheckShell_GetNextString+0xdc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 8005af6:	7cfb      	ldrb	r3, [r7, #19]
 8005af8:	74bb      	strb	r3, [r7, #18]
 8005afa:	7cbb      	ldrb	r3, [r7, #18]
 8005afc:	3301      	adds	r3, #1
 8005afe:	4a10      	ldr	r2, [pc, #64]	@ (8005b40 <VibeCheckShell_GetNextString+0xec>)
 8005b00:	4413      	add	r3, r2
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d103      	bne.n	8005b14 <VibeCheckShell_GetNextString+0xc0>
 8005b0c:	7cbb      	ldrb	r3, [r7, #18]
 8005b0e:	f103 0220 	add.w	r2, r3, #32
 8005b12:	e000      	b.n	8005b16 <VibeCheckShell_GetNextString+0xc2>
 8005b14:	7cba      	ldrb	r2, [r7, #18]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	1c59      	adds	r1, r3, #1
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
				i++;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	3301      	adds	r3, #1
 8005b24:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d39b      	bcc.n	8005a66 <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	0801d8e0 	.word	0x0801d8e0
 8005b3c:	0801d8e4 	.word	0x0801d8e4
 8005b40:	0801e388 	.word	0x0801e388

08005b44 <VibeCheckShell_GetNextInt>:


uint32_t VibeCheckShell_GetNextInt(VibeCheckShell* shell, int32_t* next)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b092      	sub	sp, #72	@ 0x48
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005b4e:	f107 0308 	add.w	r3, r7, #8
 8005b52:	2240      	movs	r2, #64	@ 0x40
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff ff7c 	bl	8005a54 <VibeCheckShell_GetNextString>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <VibeCheckShell_GetNextInt+0x2e>
	{
		return VibeCheckShell_TurnToInt(str, next);
 8005b62:	f107 0308 	add.w	r3, r7, #8
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 f823 	bl	8005bb4 <VibeCheckShell_TurnToInt>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	e000      	b.n	8005b74 <VibeCheckShell_GetNextInt+0x30>
	}

	return 0;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3748      	adds	r7, #72	@ 0x48
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <VibeCheckShell_GetNextFloat>:


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b092      	sub	sp, #72	@ 0x48
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005b86:	f107 0308 	add.w	r3, r7, #8
 8005b8a:	2240      	movs	r2, #64	@ 0x40
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff ff60 	bl	8005a54 <VibeCheckShell_GetNextString>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <VibeCheckShell_GetNextFloat+0x2e>
	{
		return VibeCheckShell_TurnToFloat(str, next);
 8005b9a:	f107 0308 	add.w	r3, r7, #8
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 f83d 	bl	8005c20 <VibeCheckShell_TurnToFloat>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	e000      	b.n	8005bac <VibeCheckShell_GetNextFloat+0x30>
	}

	return 0;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3748      	adds	r7, #72	@ 0x48
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <VibeCheckShell_TurnToInt>:

/* if the type of the next token is not known, get it as a string and then try to convert it to numeric using these functions */
uint32_t VibeCheckShell_TurnToInt(char* str, int32_t* next)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
	char valid[] = "-0123456789";
 8005bbe:	4a17      	ldr	r2, [pc, #92]	@ (8005c1c <VibeCheckShell_TurnToInt+0x68>)
 8005bc0:	f107 0308 	add.w	r3, r7, #8
 8005bc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint32_t i = 0; i < strlen(str); i++)
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	e012      	b.n	8005bf6 <VibeCheckShell_TurnToInt+0x42>
		if (strchr(valid, str[i]) == NULL)
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f107 0308 	add.w	r3, r7, #8
 8005bde:	4611      	mov	r1, r2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f014 fa5e 	bl	801a0a2 <strchr>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <VibeCheckShell_TurnToInt+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8005bec:	2300      	movs	r3, #0
 8005bee:	e010      	b.n	8005c12 <VibeCheckShell_TurnToInt+0x5e>
	for (uint32_t i = 0; i < strlen(str); i++)
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fa fbea 	bl	80003d0 <strlen>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d3e5      	bcc.n	8005bd0 <VibeCheckShell_TurnToInt+0x1c>
	*next = atoi(str);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f012 fea2 	bl	801894e <atoi>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	601a      	str	r2, [r3, #0]
	return 1;
 8005c10:	2301      	movs	r3, #1
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	0801d8e8 	.word	0x0801d8e8

08005c20 <VibeCheckShell_TurnToFloat>:

uint32_t VibeCheckShell_TurnToFloat(char* str, float* next)
{
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b089      	sub	sp, #36	@ 0x24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	char valid[] = ".-0123456789";
 8005c2a:	4b19      	ldr	r3, [pc, #100]	@ (8005c90 <VibeCheckShell_TurnToFloat+0x70>)
 8005c2c:	f107 040c 	add.w	r4, r7, #12
 8005c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c32:	c407      	stmia	r4!, {r0, r1, r2}
 8005c34:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < strlen(str); i++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	e012      	b.n	8005c62 <VibeCheckShell_TurnToFloat+0x42>
		if (strchr(valid, str[i]) == NULL)
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	f107 030c 	add.w	r3, r7, #12
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f014 fa28 	bl	801a0a2 <strchr>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <VibeCheckShell_TurnToFloat+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e014      	b.n	8005c86 <VibeCheckShell_TurnToFloat+0x66>
	for (uint32_t i = 0; i < strlen(str); i++)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fa fbb4 	bl	80003d0 <strlen>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d3e5      	bcc.n	8005c3c <VibeCheckShell_TurnToFloat+0x1c>
	*next = atof(str);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f012 fe69 	bl	8018948 <atof>
 8005c76:	eeb0 7b40 	vmov.f64	d7, d0
 8005c7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 8005c84:	2301      	movs	r3, #1
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3724      	adds	r7, #36	@ 0x24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd90      	pop	{r4, r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	0801d8f4 	.word	0x0801d8f4

08005c94 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
	while (*str)
 8005c9e:	e029      	b.n	8005cf4 <VibeCheckShell_PutOutputString+0x60>
	{
		shell->output[shell->output_head++] = *(str++);
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	1c53      	adds	r3, r2, #1
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 8005cb6:	6101      	str	r1, [r0, #16]
 8005cb8:	7811      	ldrb	r1, [r2, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	441a      	add	r2, r3
 8005cbe:	f248 0310 	movw	r3, #32784	@ 0x8010
 8005cc2:	4413      	add	r3, r2
 8005cc4:	460a      	mov	r2, r1
 8005cc6:	701a      	strb	r2, [r3, #0]
		shell->output_count++;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005cd8:	6193      	str	r3, [r2, #24]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ce6:	d105      	bne.n	8005cf4 <VibeCheckShell_PutOutputString+0x60>
			shell->output_head = 0;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005cee:	461a      	mov	r2, r3
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6113      	str	r3, [r2, #16]
	while (*str)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1d1      	bne.n	8005ca0 <VibeCheckShell_PutOutputString+0xc>
	}
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
	...

08005d0c <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b092      	sub	sp, #72	@ 0x48
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 8005d16:	f107 0308 	add.w	r3, r7, #8
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	4906      	ldr	r1, [pc, #24]	@ (8005d38 <VibeCheckShell_PutOutputInt+0x2c>)
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f014 f954 	bl	8019fcc <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8005d24:	f107 0308 	add.w	r3, r7, #8
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff ffb2 	bl	8005c94 <VibeCheckShell_PutOutputString>
}
 8005d30:	bf00      	nop
 8005d32:	3748      	adds	r7, #72	@ 0x48
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	0801d904 	.word	0x0801d904

08005d3c <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b092      	sub	sp, #72	@ 0x48
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%f", val);
 8005d48:	edd7 7a00 	vldr	s15, [r7]
 8005d4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d50:	f107 0008 	add.w	r0, r7, #8
 8005d54:	ec53 2b17 	vmov	r2, r3, d7
 8005d58:	4906      	ldr	r1, [pc, #24]	@ (8005d74 <VibeCheckShell_PutOutputFloat+0x38>)
 8005d5a:	f014 f937 	bl	8019fcc <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8005d5e:	f107 0308 	add.w	r3, r7, #8
 8005d62:	4619      	mov	r1, r3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff ff95 	bl	8005c94 <VibeCheckShell_PutOutputString>
}
 8005d6a:	bf00      	nop
 8005d6c:	3748      	adds	r7, #72	@ 0x48
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	0801d908 	.word	0x0801d908

08005d78 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 8005d80:	4903      	ldr	r1, [pc, #12]	@ (8005d90 <VibeCheckShell_PutOutputSeparator+0x18>)
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff ff86 	bl	8005c94 <VibeCheckShell_PutOutputString>
}
 8005d88:	bf00      	nop
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	0801d90c 	.word	0x0801d90c

08005d94 <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 8005d9c:	4903      	ldr	r1, [pc, #12]	@ (8005dac <VibeCheckShell_PutOutputDelimiter+0x18>)
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff ff78 	bl	8005c94 <VibeCheckShell_PutOutputString>
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	0801d8e0 	.word	0x0801d8e0

08005db0 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005dc6:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005dce:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f640 125f 	movw	r2, #2399	@ 0x95f
 8005de2:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dea:	eeb0 0a67 	vmov.f32	s0, s15
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f84a 	bl	8005e88 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	edd3 7a02 	vldr	s15, [r3, #8]
 8005dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f928 	bl	8006054 <VibeCheckStrobe_SetExposure>

}
 8005e04:	bf00      	nop
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f00b fd53 	bl	80118c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2100      	movs	r1, #0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f00b fe35 	bl	8011a94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2104      	movs	r1, #4
 8005e30:	4618      	mov	r0, r3
 8005e32:	f00b fe2f 	bl	8011a94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2108      	movs	r1, #8
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f00b fe29 	bl	8011a94 <HAL_TIM_PWM_Start>
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f00b fd34 	bl	80118c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2100      	movs	r1, #0
 8005e62:	4618      	mov	r0, r3
 8005e64:	f00b ff32 	bl	8011ccc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2104      	movs	r1, #4
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f00b ff2c 	bl	8011ccc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2108      	movs	r1, #8
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f00b ff26 	bl	8011ccc <HAL_TIM_PWM_Stop>
}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8005e94:	edd7 7a00 	vldr	s15, [r7]
 8005e98:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8005e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea4:	d502      	bpl.n	8005eac <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005ea6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005eaa:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 8005eac:	edd7 7a00 	vldr	s15, [r7]
 8005eb0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005f1c <VibeCheckStrobe_SetFrequency+0x94>
 8005eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebc:	dd01      	ble.n	8005ec2 <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 8005ebe:	4b18      	ldr	r3, [pc, #96]	@ (8005f20 <VibeCheckStrobe_SetFrequency+0x98>)
 8005ec0:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 8005ec2:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8005f24 <VibeCheckStrobe_SetFrequency+0x9c>
 8005ec6:	ed97 7a00 	vldr	s14, [r7]
 8005eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ece:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ed2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eda:	ee17 2a90 	vmov	r2, s15
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ef6:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8005f24 <VibeCheckStrobe_SetFrequency+0x9c>
 8005efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6912      	ldr	r2, [r2, #16]
 8005f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	447a0000 	.word	0x447a0000
 8005f20:	447a0000 	.word	0x447a0000
 8005f24:	47c35000 	.word	0x47c35000

08005f28 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	ee07 3a90 	vmov	s15, r3
}
 8005f38:	eeb0 0a67 	vmov.f32	s0, s15
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8005f54:	edd7 7a00 	vldr	s15, [r7]
 8005f58:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006020 <VibeCheckStrobe_SetPhase+0xd8>
 8005f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f64:	d501      	bpl.n	8005f6a <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 8005f66:	4b2f      	ldr	r3, [pc, #188]	@ (8006024 <VibeCheckStrobe_SetPhase+0xdc>)
 8005f68:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 8005f6a:	edd7 7a00 	vldr	s15, [r7]
 8005f6e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006028 <VibeCheckStrobe_SetPhase+0xe0>
 8005f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f7a:	dd01      	ble.n	8005f80 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 8005f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800602c <VibeCheckStrobe_SetPhase+0xe4>)
 8005f7e:	603b      	str	r3, [r7, #0]


	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f86:	ed97 7a00 	vldr	s14, [r7]
 8005f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f8e:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 8005f92:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006030 <VibeCheckStrobe_SetPhase+0xe8>
 8005f9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fb2:	ee17 3a90 	vmov	r3, s15
 8005fb6:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d029      	beq.n	8006012 <VibeCheckStrobe_SetPhase+0xca>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d125      	bne.n	8006012 <VibeCheckStrobe_SetPhase+0xca>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d121      	bne.n	8006012 <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005fee:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8006030 <VibeCheckStrobe_SetPhase+0xe8>
 8005ff2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	441a      	add	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	619a      	str	r2, [r3, #24]
	}
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	c3340000 	.word	0xc3340000
 8006024:	c3340000 	.word	0xc3340000
 8006028:	43340000 	.word	0x43340000
 800602c:	43340000 	.word	0x43340000
 8006030:	43b40000 	.word	0x43b40000

08006034 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	ee07 3a90 	vmov	s15, r3
}
 8006044:	eeb0 0a67 	vmov.f32	s0, s15
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
	...

08006054 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 8006060:	edd7 7a00 	vldr	s15, [r7]
 8006064:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80060e0 <VibeCheckStrobe_SetExposure+0x8c>
 8006068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800606c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80060e4 <VibeCheckStrobe_SetExposure+0x90>
 8006070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006078:	ee17 3a90 	vmov	r3, s15
 800607c:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	429a      	cmp	r2, r3
 800608a:	d904      	bls.n	8006096 <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006094:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060a0:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80060e4 <VibeCheckStrobe_SetExposure+0x90>
 80060a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060a8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80060e8 <VibeCheckStrobe_SetExposure+0x94>
 80060ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80060d4:	bf00      	nop
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	3a83126f 	.word	0x3a83126f
 80060e4:	47c35000 	.word	0x47c35000
 80060e8:	447a0000 	.word	0x447a0000

080060ec <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	ee07 3a90 	vmov	s15, r3
}
 80060fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6912      	ldr	r2, [r2, #16]
 8006124:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00b      	beq.n	800614c <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6952      	ldr	r2, [r2, #20]
 800613e:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	619a      	str	r2, [r3, #24]
	}
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b096      	sub	sp, #88	@ 0x58
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006162:	f107 0318 	add.w	r3, r7, #24
 8006166:	2240      	movs	r2, #64	@ 0x40
 8006168:	4619      	mov	r1, r3
 800616a:	6838      	ldr	r0, [r7, #0]
 800616c:	f7ff fc72 	bl	8005a54 <VibeCheckShell_GetNextString>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d065      	beq.n	8006242 <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 8006176:	f107 0318 	add.w	r3, r7, #24
 800617a:	4934      	ldr	r1, [pc, #208]	@ (800624c <VibeCheckStrobeCMD_Set+0xf4>)
 800617c:	4618      	mov	r0, r3
 800617e:	f7fa f8c7 	bl	8000310 <strcmp>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d118      	bne.n	80061ba <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006188:	f107 0314 	add.w	r3, r7, #20
 800618c:	4619      	mov	r1, r3
 800618e:	6838      	ldr	r0, [r7, #0]
 8006190:	f7ff fcf4 	bl	8005b7c <VibeCheckShell_GetNextFloat>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d053      	beq.n	8006242 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 800619a:	edd7 7a05 	vldr	s15, [r7, #20]
 800619e:	eeb0 0a67 	vmov.f32	s0, s15
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fe70 	bl	8005e88 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 80061a8:	4929      	ldr	r1, [pc, #164]	@ (8006250 <VibeCheckStrobeCMD_Set+0xf8>)
 80061aa:	6838      	ldr	r0, [r7, #0]
 80061ac:	f7ff fd72 	bl	8005c94 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80061b0:	6838      	ldr	r0, [r7, #0]
 80061b2:	f7ff fdef 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e044      	b.n	8006244 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 80061ba:	f107 0318 	add.w	r3, r7, #24
 80061be:	4925      	ldr	r1, [pc, #148]	@ (8006254 <VibeCheckStrobeCMD_Set+0xfc>)
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fa f8a5 	bl	8000310 <strcmp>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d118      	bne.n	80061fe <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80061cc:	f107 0310 	add.w	r3, r7, #16
 80061d0:	4619      	mov	r1, r3
 80061d2:	6838      	ldr	r0, [r7, #0]
 80061d4:	f7ff fcd2 	bl	8005b7c <VibeCheckShell_GetNextFloat>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d031      	beq.n	8006242 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 80061de:	edd7 7a04 	vldr	s15, [r7, #16]
 80061e2:	eeb0 0a67 	vmov.f32	s0, s15
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff feae 	bl	8005f48 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 80061ec:	4918      	ldr	r1, [pc, #96]	@ (8006250 <VibeCheckStrobeCMD_Set+0xf8>)
 80061ee:	6838      	ldr	r0, [r7, #0]
 80061f0:	f7ff fd50 	bl	8005c94 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80061f4:	6838      	ldr	r0, [r7, #0]
 80061f6:	f7ff fdcd 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e022      	b.n	8006244 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 80061fe:	f107 0318 	add.w	r3, r7, #24
 8006202:	4915      	ldr	r1, [pc, #84]	@ (8006258 <VibeCheckStrobeCMD_Set+0x100>)
 8006204:	4618      	mov	r0, r3
 8006206:	f7fa f883 	bl	8000310 <strcmp>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d118      	bne.n	8006242 <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006210:	f107 030c 	add.w	r3, r7, #12
 8006214:	4619      	mov	r1, r3
 8006216:	6838      	ldr	r0, [r7, #0]
 8006218:	f7ff fcb0 	bl	8005b7c <VibeCheckShell_GetNextFloat>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00f      	beq.n	8006242 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 8006222:	edd7 7a03 	vldr	s15, [r7, #12]
 8006226:	eeb0 0a67 	vmov.f32	s0, s15
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff ff12 	bl	8006054 <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006230:	4907      	ldr	r1, [pc, #28]	@ (8006250 <VibeCheckStrobeCMD_Set+0xf8>)
 8006232:	6838      	ldr	r0, [r7, #0]
 8006234:	f7ff fd2e 	bl	8005c94 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006238:	6838      	ldr	r0, [r7, #0]
 800623a:	f7ff fdab 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3758      	adds	r7, #88	@ 0x58
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	0801d910 	.word	0x0801d910
 8006250:	0801d91c 	.word	0x0801d91c
 8006254:	0801d920 	.word	0x0801d920
 8006258:	0801d928 	.word	0x0801d928

0800625c <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b092      	sub	sp, #72	@ 0x48
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006266:	f107 0308 	add.w	r3, r7, #8
 800626a:	2240      	movs	r2, #64	@ 0x40
 800626c:	4619      	mov	r1, r3
 800626e:	6838      	ldr	r0, [r7, #0]
 8006270:	f7ff fbf0 	bl	8005a54 <VibeCheckShell_GetNextString>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d05c      	beq.n	8006334 <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 800627a:	f107 0308 	add.w	r3, r7, #8
 800627e:	4930      	ldr	r1, [pc, #192]	@ (8006340 <VibeCheckStrobeCMD_Get+0xe4>)
 8006280:	4618      	mov	r0, r3
 8006282:	f7fa f845 	bl	8000310 <strcmp>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d115      	bne.n	80062b8 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 800628c:	492d      	ldr	r1, [pc, #180]	@ (8006344 <VibeCheckStrobeCMD_Get+0xe8>)
 800628e:	6838      	ldr	r0, [r7, #0]
 8006290:	f7ff fd00 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006294:	6838      	ldr	r0, [r7, #0]
 8006296:	f7ff fd6f 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7ff fe44 	bl	8005f28 <VibeCheckStrobe_GetFrequency>
 80062a0:	eef0 7a40 	vmov.f32	s15, s0
 80062a4:	eeb0 0a67 	vmov.f32	s0, s15
 80062a8:	6838      	ldr	r0, [r7, #0]
 80062aa:	f7ff fd47 	bl	8005d3c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80062ae:	6838      	ldr	r0, [r7, #0]
 80062b0:	f7ff fd70 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e03e      	b.n	8006336 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 80062b8:	f107 0308 	add.w	r3, r7, #8
 80062bc:	4922      	ldr	r1, [pc, #136]	@ (8006348 <VibeCheckStrobeCMD_Get+0xec>)
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fa f826 	bl	8000310 <strcmp>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d115      	bne.n	80062f6 <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80062ca:	491e      	ldr	r1, [pc, #120]	@ (8006344 <VibeCheckStrobeCMD_Get+0xe8>)
 80062cc:	6838      	ldr	r0, [r7, #0]
 80062ce:	f7ff fce1 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80062d2:	6838      	ldr	r0, [r7, #0]
 80062d4:	f7ff fd50 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff feab 	bl	8006034 <VibeCheckStrobe_GetPhase>
 80062de:	eef0 7a40 	vmov.f32	s15, s0
 80062e2:	eeb0 0a67 	vmov.f32	s0, s15
 80062e6:	6838      	ldr	r0, [r7, #0]
 80062e8:	f7ff fd28 	bl	8005d3c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80062ec:	6838      	ldr	r0, [r7, #0]
 80062ee:	f7ff fd51 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e01f      	b.n	8006336 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 80062f6:	f107 0308 	add.w	r3, r7, #8
 80062fa:	4914      	ldr	r1, [pc, #80]	@ (800634c <VibeCheckStrobeCMD_Get+0xf0>)
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fa f807 	bl	8000310 <strcmp>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d115      	bne.n	8006334 <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006308:	490e      	ldr	r1, [pc, #56]	@ (8006344 <VibeCheckStrobeCMD_Get+0xe8>)
 800630a:	6838      	ldr	r0, [r7, #0]
 800630c:	f7ff fcc2 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006310:	6838      	ldr	r0, [r7, #0]
 8006312:	f7ff fd31 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff fee8 	bl	80060ec <VibeCheckStrobe_GetExposure>
 800631c:	eef0 7a40 	vmov.f32	s15, s0
 8006320:	eeb0 0a67 	vmov.f32	s0, s15
 8006324:	6838      	ldr	r0, [r7, #0]
 8006326:	f7ff fd09 	bl	8005d3c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 800632a:	6838      	ldr	r0, [r7, #0]
 800632c:	f7ff fd32 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3748      	adds	r7, #72	@ 0x48
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	0801d910 	.word	0x0801d910
 8006344:	0801d91c 	.word	0x0801d91c
 8006348:	0801d920 	.word	0x0801d920
 800634c:	0801d928 	.word	0x0801d928

08006350 <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b094      	sub	sp, #80	@ 0x50
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800635e:	f107 030c 	add.w	r3, r7, #12
 8006362:	2240      	movs	r2, #64	@ 0x40
 8006364:	4619      	mov	r1, r3
 8006366:	6838      	ldr	r0, [r7, #0]
 8006368:	f7ff fb74 	bl	8005a54 <VibeCheckShell_GetNextString>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d04d      	beq.n	800640e <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 8006372:	f107 030c 	add.w	r3, r7, #12
 8006376:	4928      	ldr	r1, [pc, #160]	@ (8006418 <VibeCheckStrobeCMD_Execute+0xc8>)
 8006378:	4618      	mov	r0, r3
 800637a:	f7f9 ffc9 	bl	8000310 <strcmp>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10b      	bne.n	800639c <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 8006384:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006386:	f7ff fd41 	bl	8005e0c <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 800638a:	4924      	ldr	r1, [pc, #144]	@ (800641c <VibeCheckStrobeCMD_Execute+0xcc>)
 800638c:	6838      	ldr	r0, [r7, #0]
 800638e:	f7ff fc81 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006392:	6838      	ldr	r0, [r7, #0]
 8006394:	f7ff fcfe 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006398:	2301      	movs	r3, #1
 800639a:	e039      	b.n	8006410 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 800639c:	f107 030c 	add.w	r3, r7, #12
 80063a0:	491f      	ldr	r1, [pc, #124]	@ (8006420 <VibeCheckStrobeCMD_Execute+0xd0>)
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7f9 ffb4 	bl	8000310 <strcmp>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 80063ae:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80063b0:	f7ff fd4b 	bl	8005e4a <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 80063b4:	4919      	ldr	r1, [pc, #100]	@ (800641c <VibeCheckStrobeCMD_Execute+0xcc>)
 80063b6:	6838      	ldr	r0, [r7, #0]
 80063b8:	f7ff fc6c 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80063bc:	6838      	ldr	r0, [r7, #0]
 80063be:	f7ff fce9 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e024      	b.n	8006410 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 80063c6:	f107 030c 	add.w	r3, r7, #12
 80063ca:	4916      	ldr	r1, [pc, #88]	@ (8006424 <VibeCheckStrobeCMD_Execute+0xd4>)
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7f9 ff9f 	bl	8000310 <strcmp>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d108      	bne.n	80063ea <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80063dc:	f7ff febc 	bl	8006158 <VibeCheckStrobeCMD_Set>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d013      	beq.n	800640e <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e012      	b.n	8006410 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 80063ea:	f107 030c 	add.w	r3, r7, #12
 80063ee:	490e      	ldr	r1, [pc, #56]	@ (8006428 <VibeCheckStrobeCMD_Execute+0xd8>)
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7f9 ff8d 	bl	8000310 <strcmp>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d108      	bne.n	800640e <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006400:	f7ff ff2c 	bl	800625c <VibeCheckStrobeCMD_Get>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3750      	adds	r7, #80	@ 0x50
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	0801d934 	.word	0x0801d934
 800641c:	0801d91c 	.word	0x0801d91c
 8006420:	0801d93c 	.word	0x0801d93c
 8006424:	0801d944 	.word	0x0801d944
 8006428:	0801d948 	.word	0x0801d948
 800642c:	00000000 	.word	0x00000000

08006430 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	ed2d 8b02 	vpush	{d8}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e032      	b.n	80064ae <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 8006448:	edd7 7a01 	vldr	s15, [r7, #4]
 800644c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800645e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80064d0 <ComputeSineWave+0xa0>
 8006462:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	ee07 3a90 	vmov	s15, r3
 800646c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006474:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006478:	eeb0 0b47 	vmov.f64	d0, d7
 800647c:	f016 faf4 	bl	801ca68 <sin>
 8006480:	eeb0 7b40 	vmov.f64	d7, d0
 8006484:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006488:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800648c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006490:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80064c8 <ComputeSineWave+0x98>
 8006494:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	1d1a      	adds	r2, r3, #4
 800649c:	60fa      	str	r2, [r7, #12]
 800649e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80064a2:	ee17 2a90 	vmov	r2, s15
 80064a6:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	3301      	adds	r3, #1
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d3c8      	bcc.n	8006448 <ComputeSineWave+0x18>
}
 80064b6:	bf00      	nop
 80064b8:	bf00      	nop
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	ecbd 8b02 	vpop	{d8}
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	f3af 8000 	nop.w
 80064c8:	00000000 	.word	0x00000000
 80064cc:	409ffe00 	.word	0x409ffe00
 80064d0:	40490fd0 	.word	0x40490fd0

080064d4 <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	e02c      	b.n	8006542 <ComputeSquareWave+0x6e>
		if (i < len / 2)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	085b      	lsrs	r3, r3, #1
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d212      	bcs.n	8006518 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 80064f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80064f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064fe:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006558 <ComputeSquareWave+0x84>
 8006502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	1d1a      	adds	r2, r3, #4
 800650a:	60fa      	str	r2, [r7, #12]
 800650c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006510:	ee17 2a90 	vmov	r2, s15
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	e011      	b.n	800653c <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8006518:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800651c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006524:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006558 <ComputeSquareWave+0x84>
 8006528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	1d1a      	adds	r2, r3, #4
 8006530:	60fa      	str	r2, [r7, #12]
 8006532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006536:	ee17 2a90 	vmov	r2, s15
 800653a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	3301      	adds	r3, #1
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	429a      	cmp	r2, r3
 8006548:	d3ce      	bcc.n	80064e8 <ComputeSquareWave+0x14>
}
 800654a:	bf00      	nop
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	44fff000 	.word	0x44fff000

0800655c <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800656a:	2300      	movs	r3, #0
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	e052      	b.n	8006616 <ComputeSawWave+0xba>
		if (i < len / 2)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	085b      	lsrs	r3, r3, #1
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	429a      	cmp	r2, r3
 8006578:	d222      	bcs.n	80065c0 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	ee07 3a90 	vmov	s15, r3
 8006580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006584:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006588:	edd7 7a01 	vldr	s15, [r7, #4]
 800658c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800659a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800659e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065a6:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800662c <ComputeSawWave+0xd0>
 80065aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	1d1a      	adds	r2, r3, #4
 80065b2:	60fa      	str	r2, [r7, #12]
 80065b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065b8:	ee17 2a90 	vmov	r2, s15
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	e027      	b.n	8006610 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 80065c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80065c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80065c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065da:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80065de:	edd7 7a01 	vldr	s15, [r7, #4]
 80065e2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80065f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800662c <ComputeSawWave+0xd0>
 80065fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	1d1a      	adds	r2, r3, #4
 8006604:	60fa      	str	r2, [r7, #12]
 8006606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800660a:	ee17 2a90 	vmov	r2, s15
 800660e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	3301      	adds	r3, #1
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	429a      	cmp	r2, r3
 800661c:	d3a8      	bcc.n	8006570 <ComputeSawWave+0x14>
}
 800661e:	bf00      	nop
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	44fff000 	.word	0x44fff000

08006630 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	e082      	b.n	800674a <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	089b      	lsrs	r3, r3, #2
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	429a      	cmp	r2, r3
 800664c:	d221      	bcs.n	8006692 <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800665a:	edd7 7a01 	vldr	s15, [r7, #4]
 800665e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	ee07 3a90 	vmov	s15, r3
 8006668:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800666c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006670:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006674:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006678:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006764 <ComputeTriangleWave+0x134>
 800667c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	1d1a      	adds	r2, r3, #4
 8006684:	60fa      	str	r2, [r7, #12]
 8006686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800668a:	ee17 2a90 	vmov	r2, s15
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	e058      	b.n	8006744 <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	4613      	mov	r3, r2
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	4413      	add	r3, r2
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d227      	bcs.n	80066f2 <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 80066a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80066a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80066aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066be:	edd7 7a01 	vldr	s15, [r7, #4]
 80066c2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80066d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066d8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006764 <ComputeTriangleWave+0x134>
 80066dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	1d1a      	adds	r2, r3, #4
 80066e4:	60fa      	str	r2, [r7, #12]
 80066e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ea:	ee17 2a90 	vmov	r2, s15
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	e028      	b.n	8006744 <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 80066f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80066f6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80066fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006702:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006712:	edd7 7a01 	vldr	s15, [r7, #4]
 8006716:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	ee07 3a90 	vmov	s15, r3
 8006720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006724:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800672c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8006764 <ComputeTriangleWave+0x134>
 8006730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	1d1a      	adds	r2, r3, #4
 8006738:	60fa      	str	r2, [r7, #12]
 800673a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800673e:	ee17 2a90 	vmov	r2, s15
 8006742:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	3301      	adds	r3, #1
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	429a      	cmp	r2, r3
 8006750:	f4ff af78 	bcc.w	8006644 <ComputeTriangleWave+0x14>
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	44fff000 	.word	0x44fff000

08006768 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	e008      	b.n	800678a <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	1d1a      	adds	r2, r3, #4
 800677c:	607a      	str	r2, [r7, #4]
 800677e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006782:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d3f2      	bcc.n	8006778 <ComputeNullWave+0x10>
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d044      	beq.n	8006840 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067bc:	7e1b      	ldrb	r3, [r3, #24]
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d844      	bhi.n	800684c <VibeCheckWaveGen_RecomputeWave+0xac>
 80067c2:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <VibeCheckWaveGen_RecomputeWave+0x28>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	080067f3 	.word	0x080067f3
 80067d0:	0800680d 	.word	0x0800680d
 80067d4:	08006827 	.word	0x08006827
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067de:	edd3 7a08 	vldr	s15, [r3, #32]
 80067e2:	eeb0 0a67 	vmov.f32	s0, s15
 80067e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80067ea:	6838      	ldr	r0, [r7, #0]
 80067ec:	f7ff fe20 	bl	8006430 <ComputeSineWave>
			break;
 80067f0:	e02c      	b.n	800684c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80067fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006800:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006804:	6838      	ldr	r0, [r7, #0]
 8006806:	f7ff fe65 	bl	80064d4 <ComputeSquareWave>
			break;
 800680a:	e01f      	b.n	800684c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006812:	edd3 7a08 	vldr	s15, [r3, #32]
 8006816:	eeb0 0a67 	vmov.f32	s0, s15
 800681a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800681e:	6838      	ldr	r0, [r7, #0]
 8006820:	f7ff fe9c 	bl	800655c <ComputeSawWave>
			break;
 8006824:	e012      	b.n	800684c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800682c:	edd3 7a08 	vldr	s15, [r3, #32]
 8006830:	eeb0 0a67 	vmov.f32	s0, s15
 8006834:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006838:	6838      	ldr	r0, [r7, #0]
 800683a:	f7ff fef9 	bl	8006630 <ComputeTriangleWave>
			break;
 800683e:	e005      	b.n	800684c <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 8006840:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006844:	6838      	ldr	r0, [r7, #0]
 8006846:	f7ff ff8f 	bl	8006768 <ComputeNullWave>
	}
}
 800684a:	e7ff      	b.n	800684c <VibeCheckWaveGen_RecomputeWave+0xac>
 800684c:	bf00      	nop
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af02      	add	r7, sp, #8
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = 440.0f;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006872:	461a      	mov	r2, r3
 8006874:	4b44      	ldr	r3, [pc, #272]	@ (8006988 <VibeCheckWaveGen_Init+0x134>)
 8006876:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = 0.001f;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800687e:	461a      	mov	r2, r3
 8006880:	4b42      	ldr	r3, [pc, #264]	@ (800698c <VibeCheckWaveGen_Init+0x138>)
 8006882:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800688a:	2200      	movs	r2, #0
 800688c:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006894:	461a      	mov	r2, r3
 8006896:	2300      	movs	r3, #0
 8006898:	6253      	str	r3, [r2, #36]	@ 0x24
	wavegen->is_muted = 0;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068a0:	461a      	mov	r2, r3
 80068a2:	2300      	movs	r3, #0
 80068a4:	6293      	str	r3, [r2, #40]	@ 0x28
	wavegen->mute_button_flag = 0;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ac:	461a      	mov	r2, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wavegen->time_prev_button_press = 0;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068b8:	461a      	mov	r2, r3
 80068ba:	2300      	movs	r3, #0
 80068bc:	6313      	str	r3, [r2, #48]	@ 0x30

	wavegen->wave_ping_compute_pending = 0;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c4:	461a      	mov	r2, r3
 80068c6:	2300      	movs	r3, #0
 80068c8:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d0:	461a      	mov	r2, r3
 80068d2:	2300      	movs	r3, #0
 80068d4:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068dc:	461a      	mov	r2, r3
 80068de:	2300      	movs	r3, #0
 80068e0:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068e8:	461a      	mov	r2, r3
 80068ea:	2300      	movs	r3, #0
 80068ec:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f4:	461a      	mov	r2, r3
 80068f6:	2300      	movs	r3, #0
 80068f8:	6353      	str	r3, [r2, #52]	@ 0x34

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	220b      	movs	r2, #11
 8006902:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800690a:	edd3 7a07 	vldr	s15, [r3, #28]
 800690e:	eeb0 0a67 	vmov.f32	s0, s15
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 f920 	bl	8006b58 <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3308      	adds	r3, #8
 800691c:	4619      	mov	r1, r3
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff ff3e 	bl	80067a0 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 800692a:	4619      	mov	r1, r3
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff ff37 	bl	80067a0 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6858      	ldr	r0, [r3, #4]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f103 0208 	add.w	r2, r3, #8
 800693c:	2300      	movs	r3, #0
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006944:	2100      	movs	r1, #0
 8006946:	f002 faed 	bl	8008f24 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6858      	ldr	r0, [r3, #4]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f103 0208 	add.w	r2, r3, #8
 8006954:	2300      	movs	r3, #0
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800695c:	2110      	movs	r1, #16
 800695e:	f002 fae1 	bl	8008f24 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f00a ff2e 	bl	80117c8 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 800696c:	2200      	movs	r2, #0
 800696e:	2108      	movs	r1, #8
 8006970:	4807      	ldr	r0, [pc, #28]	@ (8006990 <VibeCheckWaveGen_Init+0x13c>)
 8006972:	f005 f801 	bl	800b978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 8006976:	2200      	movs	r2, #0
 8006978:	2102      	movs	r1, #2
 800697a:	4805      	ldr	r0, [pc, #20]	@ (8006990 <VibeCheckWaveGen_Init+0x13c>)
 800697c:	f004 fffc 	bl	800b978 <HAL_GPIO_WritePin>
}
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	43dc0000 	.word	0x43dc0000
 800698c:	3a83126f 	.word	0x3a83126f
 8006990:	58020000 	.word	0x58020000

08006994 <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 800699c:	f000 fd74 	bl	8007488 <HAL_GetTick>
 80069a0:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2bfa      	cmp	r3, #250	@ 0xfa
 80069b0:	d939      	bls.n	8006a26 <VibeCheckWaveGen_Update+0x92>
 80069b2:	2104      	movs	r1, #4
 80069b4:	4843      	ldr	r0, [pc, #268]	@ (8006ac4 <VibeCheckWaveGen_Update+0x130>)
 80069b6:	f004 ffc7 	bl	800b948 <HAL_GPIO_ReadPin>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d032      	beq.n	8006a26 <VibeCheckWaveGen_Update+0x92>

		/*
		 * the line driver seems to have some kind of slow start built in so no
		 * need to worry about pops when muting via the hardware pin
		 */
		if (wavegen->is_muted)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d010      	beq.n	80069ee <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069d2:	461a      	mov	r2, r3
 80069d4:	2300      	movs	r3, #0
 80069d6:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 80069d8:	2200      	movs	r2, #0
 80069da:	2108      	movs	r1, #8
 80069dc:	4839      	ldr	r0, [pc, #228]	@ (8006ac4 <VibeCheckWaveGen_Update+0x130>)
 80069de:	f004 ffcb 	bl	800b978 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 80069e2:	2200      	movs	r2, #0
 80069e4:	2102      	movs	r1, #2
 80069e6:	4837      	ldr	r0, [pc, #220]	@ (8006ac4 <VibeCheckWaveGen_Update+0x130>)
 80069e8:	f004 ffc6 	bl	800b978 <HAL_GPIO_WritePin>
 80069ec:	e00f      	b.n	8006a0e <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069f4:	461a      	mov	r2, r3
 80069f6:	2301      	movs	r3, #1
 80069f8:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 80069fa:	2201      	movs	r2, #1
 80069fc:	2108      	movs	r1, #8
 80069fe:	4831      	ldr	r0, [pc, #196]	@ (8006ac4 <VibeCheckWaveGen_Update+0x130>)
 8006a00:	f004 ffba 	bl	800b978 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8006a04:	2201      	movs	r2, #1
 8006a06:	2102      	movs	r1, #2
 8006a08:	482e      	ldr	r0, [pc, #184]	@ (8006ac4 <VibeCheckWaveGen_Update+0x130>)
 8006a0a:	f004 ffb5 	bl	800b978 <HAL_GPIO_WritePin>
		}

		wavegen->mute_button_flag = 1;  /* can alert the shell via this flag when we press the mute button */
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a14:	461a      	mov	r2, r3
 8006a16:	2301      	movs	r3, #1
 8006a18:	62d3      	str	r3, [r2, #44]	@ 0x2c
		wavegen->time_prev_button_press = time;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a20:	461a      	mov	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <VibeCheckWaveGen_Update+0xb6>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3308      	adds	r3, #8
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff feb1 	bl	80067a0 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a44:	461a      	mov	r2, r3
 8006a46:	2300      	movs	r3, #0
 8006a48:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00c      	beq.n	8006a70 <VibeCheckWaveGen_Update+0xdc>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff fe9e 	bl	80067a0 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006a76:	4413      	add	r3, r2
 8006a78:	f107 0208 	add.w	r2, r7, #8
 8006a7c:	68f9      	ldr	r1, [r7, #12]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fb fbd0 	bl	8002224 <Sequencer_Update>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d017      	beq.n	8006aba <VibeCheckWaveGen_Update+0x126>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d006      	beq.n	8006aa4 <VibeCheckWaveGen_Update+0x110>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	4a0b      	ldr	r2, [pc, #44]	@ (8006ac8 <VibeCheckWaveGen_Update+0x134>)
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	edd3 7a00 	vldr	s15, [r3]
 8006aa2:	e005      	b.n	8006ab0 <VibeCheckWaveGen_Update+0x11c>
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4a09      	ldr	r2, [pc, #36]	@ (8006acc <VibeCheckWaveGen_Update+0x138>)
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	edd3 7a00 	vldr	s15, [r3]
 8006ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f84f 	bl	8006b58 <VibeCheckWaveGen_SetFrequency>
	}

}
 8006aba:	bf00      	nop
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	58020000 	.word	0x58020000
 8006ac8:	0801e24c 	.word	0x0801e24c
 8006acc:	0801e130 	.word	0x0801e130

08006ad0 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d111      	bne.n	8006b08 <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aea:	461a      	mov	r2, r3
 8006aec:	2301      	movs	r3, #1
 8006aee:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006af6:	461a      	mov	r2, r3
 8006af8:	2301      	movs	r3, #1
 8006afa:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b02:	461a      	mov	r2, r3
 8006b04:	2301      	movs	r3, #1
 8006b06:	60d3      	str	r3, [r2, #12]
	}

}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d011      	beq.n	8006b4c <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b2e:	461a      	mov	r2, r3
 8006b30:	2300      	movs	r3, #0
 8006b32:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b46:	461a      	mov	r2, r3
 8006b48:	2301      	movs	r3, #1
 8006b4a:	60d3      	str	r3, [r2, #12]
	}
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 8006b64:	edd7 7a00 	vldr	s15, [r7]
 8006b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b70:	d502      	bpl.n	8006b78 <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 8006b72:	f04f 0300 	mov.w	r3, #0
 8006b76:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 8006b78:	edd7 7a00 	vldr	s15, [r7]
 8006b7c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006bf8 <VibeCheckWaveGen_SetFrequency+0xa0>
 8006b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b88:	dd01      	ble.n	8006b8e <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 8006b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8006bfc <VibeCheckWaveGen_SetFrequency+0xa4>)
 8006b8c:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 8006b8e:	edd7 7a00 	vldr	s15, [r7]
 8006b92:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8006c00 <VibeCheckWaveGen_SetFrequency+0xa8>
 8006b96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b9a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8006c04 <VibeCheckWaveGen_SetFrequency+0xac>
 8006b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ba6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bae:	ee17 3a90 	vmov	r3, s15
 8006bb2:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bc6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8006c04 <VibeCheckWaveGen_SetFrequency+0xac>
 8006bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bce:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8006c00 <VibeCheckWaveGen_SetFrequency+0xa8>
 8006bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bdc:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	46989600 	.word	0x46989600
 8006bfc:	46989600 	.word	0x46989600
 8006c00:	44000000 	.word	0x44000000
 8006c04:	4b989680 	.word	0x4b989680

08006c08 <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	ee07 3a90 	vmov	s15, r3
}
 8006c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 8006c36:	edd7 7a00 	vldr	s15, [r7]
 8006c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c42:	d502      	bpl.n	8006c4a <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 8006c4a:	edd7 7a00 	vldr	s15, [r7]
 8006c4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5a:	dd02      	ble.n	8006c62 <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 8006c5c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006c60:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c68:	461a      	mov	r2, r3
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c74:	461a      	mov	r2, r3
 8006c76:	2301      	movs	r3, #1
 8006c78:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c80:	461a      	mov	r2, r3
 8006c82:	2301      	movs	r3, #1
 8006c84:	60d3      	str	r3, [r2, #12]
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	ee07 3a90 	vmov	s15, r3
}
 8006ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cde:	461a      	mov	r2, r3
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	60d3      	str	r3, [r2, #12]
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cfe:	7e1b      	ldrb	r3, [r3, #24]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <VibeCheckWaveGen_WasMuteButtonPressed>:

uint32_t VibeCheckWaveGen_WasMuteButtonPressed(VibeCheckWaveGen* wavegen, uint32_t* is_muted)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
	if (wavegen->mute_button_flag)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00d      	beq.n	8006d3e <VibeCheckWaveGen_WasMuteButtonPressed+0x32>
	{
		wavegen->mute_button_flag = 0;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
		*is_muted = wavegen->is_muted;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	601a      	str	r2, [r3, #0]
		return 1;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <VibeCheckWaveGen_WasMuteButtonPressed+0x34>
	}

	return 0;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d66:	461a      	mov	r2, r3
 8006d68:	2300      	movs	r3, #0
 8006d6a:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d72:	461a      	mov	r2, r3
 8006d74:	2301      	movs	r3, #1
 8006d76:	6113      	str	r3, [r2, #16]
	}
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2300      	movs	r3, #0
 8006da2:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006daa:	461a      	mov	r2, r3
 8006dac:	2301      	movs	r3, #1
 8006dae:	6153      	str	r3, [r2, #20]
	}
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 8006dbc:	b590      	push	{r4, r7, lr}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006dca:	4413      	add	r3, r2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fb f9f7 	bl	80021c0 <Sequencer_Init>
	if (wavegen->demo_num)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d009      	beq.n	8006df2 <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f241 0038 	movw	r0, #4152	@ 0x1038
 8006de4:	4418      	add	r0, r3
 8006de6:	2301      	movs	r3, #1
 8006de8:	221a      	movs	r2, #26
 8006dea:	4916      	ldr	r1, [pc, #88]	@ (8006e44 <VibeCheckWaveGen_StartDemo+0x88>)
 8006dec:	f7fb fa04 	bl	80021f8 <Sequencer_SetSequence>
 8006df0:	e008      	b.n	8006e04 <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f241 0038 	movw	r0, #4152	@ 0x1038
 8006df8:	4418      	add	r0, r3
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	222d      	movs	r2, #45	@ 0x2d
 8006dfe:	4912      	ldr	r1, [pc, #72]	@ (8006e48 <VibeCheckWaveGen_StartDemo+0x8c>)
 8006e00:	f7fb f9fa 	bl	80021f8 <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	bf0c      	ite	eq
 8006e10:	2301      	moveq	r3, #1
 8006e12:	2300      	movne	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e1e:	635a      	str	r2, [r3, #52]	@ 0x34
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f241 0438 	movw	r4, #4152	@ 0x1038
 8006e26:	441c      	add	r4, r3
 8006e28:	f000 fb2e 	bl	8007488 <HAL_GetTick>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4620      	mov	r0, r4
 8006e32:	f7fb fa39 	bl	80022a8 <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff fe4a 	bl	8006ad0 <VibeCheckWaveGen_Start>
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd90      	pop	{r4, r7, pc}
 8006e44:	0801e0c8 	.word	0x0801e0c8
 8006e48:	0801e198 	.word	0x0801e198

08006e4c <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fe5d 	bl	8006b14 <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006e60:	4413      	add	r3, r2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fb fa34 	bl	80022d0 <Sequencer_Stop>
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b094      	sub	sp, #80	@ 0x50
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006e7a:	f107 0310 	add.w	r3, r7, #16
 8006e7e:	2240      	movs	r2, #64	@ 0x40
 8006e80:	4619      	mov	r1, r3
 8006e82:	6838      	ldr	r0, [r7, #0]
 8006e84:	f7fe fde6 	bl	8005a54 <VibeCheckShell_GetNextString>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 80b0 	beq.w	8006ff0 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 8006e90:	f107 0310 	add.w	r3, r7, #16
 8006e94:	4959      	ldr	r1, [pc, #356]	@ (8006ffc <VibeCheckWaveGenCMD_Set+0x18c>)
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7f9 fa3a 	bl	8000310 <strcmp>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d119      	bne.n	8006ed6 <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006ea2:	f107 030c 	add.w	r3, r7, #12
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6838      	ldr	r0, [r7, #0]
 8006eaa:	f7fe fe67 	bl	8005b7c <VibeCheckShell_GetNextFloat>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 809d 	beq.w	8006ff0 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 8006eb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006eba:	eeb0 0a67 	vmov.f32	s0, s15
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff fe4a 	bl	8006b58 <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006ec4:	494e      	ldr	r1, [pc, #312]	@ (8007000 <VibeCheckWaveGenCMD_Set+0x190>)
 8006ec6:	6838      	ldr	r0, [r7, #0]
 8006ec8:	f7fe fee4 	bl	8005c94 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006ecc:	6838      	ldr	r0, [r7, #0]
 8006ece:	f7fe ff61 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e08d      	b.n	8006ff2 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 8006ed6:	f107 0310 	add.w	r3, r7, #16
 8006eda:	494a      	ldr	r1, [pc, #296]	@ (8007004 <VibeCheckWaveGenCMD_Set+0x194>)
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7f9 fa17 	bl	8000310 <strcmp>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d118      	bne.n	8006f1a <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006ee8:	f107 0308 	add.w	r3, r7, #8
 8006eec:	4619      	mov	r1, r3
 8006eee:	6838      	ldr	r0, [r7, #0]
 8006ef0:	f7fe fe44 	bl	8005b7c <VibeCheckShell_GetNextFloat>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d07a      	beq.n	8006ff0 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 8006efa:	edd7 7a02 	vldr	s15, [r7, #8]
 8006efe:	eeb0 0a67 	vmov.f32	s0, s15
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7ff fe91 	bl	8006c2a <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006f08:	493d      	ldr	r1, [pc, #244]	@ (8007000 <VibeCheckWaveGenCMD_Set+0x190>)
 8006f0a:	6838      	ldr	r0, [r7, #0]
 8006f0c:	f7fe fec2 	bl	8005c94 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006f10:	6838      	ldr	r0, [r7, #0]
 8006f12:	f7fe ff3f 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e06b      	b.n	8006ff2 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 8006f1a:	f107 0310 	add.w	r3, r7, #16
 8006f1e:	493a      	ldr	r1, [pc, #232]	@ (8007008 <VibeCheckWaveGenCMD_Set+0x198>)
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7f9 f9f5 	bl	8000310 <strcmp>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d161      	bne.n	8006ff0 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006f2c:	f107 0310 	add.w	r3, r7, #16
 8006f30:	2240      	movs	r2, #64	@ 0x40
 8006f32:	4619      	mov	r1, r3
 8006f34:	6838      	ldr	r0, [r7, #0]
 8006f36:	f7fe fd8d 	bl	8005a54 <VibeCheckShell_GetNextString>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d057      	beq.n	8006ff0 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 8006f40:	f107 0310 	add.w	r3, r7, #16
 8006f44:	4931      	ldr	r1, [pc, #196]	@ (800700c <VibeCheckWaveGenCMD_Set+0x19c>)
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7f9 f9e2 	bl	8000310 <strcmp>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10c      	bne.n	8006f6c <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 8006f52:	2100      	movs	r1, #0
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff fead 	bl	8006cb4 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006f5a:	4929      	ldr	r1, [pc, #164]	@ (8007000 <VibeCheckWaveGenCMD_Set+0x190>)
 8006f5c:	6838      	ldr	r0, [r7, #0]
 8006f5e:	f7fe fe99 	bl	8005c94 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006f62:	6838      	ldr	r0, [r7, #0]
 8006f64:	f7fe ff16 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e042      	b.n	8006ff2 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 8006f6c:	f107 0310 	add.w	r3, r7, #16
 8006f70:	4927      	ldr	r1, [pc, #156]	@ (8007010 <VibeCheckWaveGenCMD_Set+0x1a0>)
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7f9 f9cc 	bl	8000310 <strcmp>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10c      	bne.n	8006f98 <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 8006f7e:	2101      	movs	r1, #1
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff fe97 	bl	8006cb4 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006f86:	491e      	ldr	r1, [pc, #120]	@ (8007000 <VibeCheckWaveGenCMD_Set+0x190>)
 8006f88:	6838      	ldr	r0, [r7, #0]
 8006f8a:	f7fe fe83 	bl	8005c94 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006f8e:	6838      	ldr	r0, [r7, #0]
 8006f90:	f7fe ff00 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e02c      	b.n	8006ff2 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 8006f98:	f107 0310 	add.w	r3, r7, #16
 8006f9c:	491d      	ldr	r1, [pc, #116]	@ (8007014 <VibeCheckWaveGenCMD_Set+0x1a4>)
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7f9 f9b6 	bl	8000310 <strcmp>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10c      	bne.n	8006fc4 <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 8006faa:	2102      	movs	r1, #2
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff fe81 	bl	8006cb4 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006fb2:	4913      	ldr	r1, [pc, #76]	@ (8007000 <VibeCheckWaveGenCMD_Set+0x190>)
 8006fb4:	6838      	ldr	r0, [r7, #0]
 8006fb6:	f7fe fe6d 	bl	8005c94 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006fba:	6838      	ldr	r0, [r7, #0]
 8006fbc:	f7fe feea 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e016      	b.n	8006ff2 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 8006fc4:	f107 0310 	add.w	r3, r7, #16
 8006fc8:	4913      	ldr	r1, [pc, #76]	@ (8007018 <VibeCheckWaveGenCMD_Set+0x1a8>)
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7f9 f9a0 	bl	8000310 <strcmp>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10c      	bne.n	8006ff0 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 8006fd6:	2103      	movs	r1, #3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff fe6b 	bl	8006cb4 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006fde:	4908      	ldr	r1, [pc, #32]	@ (8007000 <VibeCheckWaveGenCMD_Set+0x190>)
 8006fe0:	6838      	ldr	r0, [r7, #0]
 8006fe2:	f7fe fe57 	bl	8005c94 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006fe6:	6838      	ldr	r0, [r7, #0]
 8006fe8:	f7fe fed4 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e000      	b.n	8006ff2 <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3750      	adds	r7, #80	@ 0x50
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	0801d94c 	.word	0x0801d94c
 8007000:	0801d958 	.word	0x0801d958
 8007004:	0801d95c 	.word	0x0801d95c
 8007008:	0801d968 	.word	0x0801d968
 800700c:	0801d974 	.word	0x0801d974
 8007010:	0801d97c 	.word	0x0801d97c
 8007014:	0801d984 	.word	0x0801d984
 8007018:	0801d988 	.word	0x0801d988

0800701c <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b092      	sub	sp, #72	@ 0x48
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007026:	f107 0308 	add.w	r3, r7, #8
 800702a:	2240      	movs	r2, #64	@ 0x40
 800702c:	4619      	mov	r1, r3
 800702e:	6838      	ldr	r0, [r7, #0]
 8007030:	f7fe fd10 	bl	8005a54 <VibeCheckShell_GetNextString>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d077      	beq.n	800712a <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 800703a:	f107 0308 	add.w	r3, r7, #8
 800703e:	493d      	ldr	r1, [pc, #244]	@ (8007134 <VibeCheckWaveGenCMD_Get+0x118>)
 8007040:	4618      	mov	r0, r3
 8007042:	f7f9 f965 	bl	8000310 <strcmp>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d115      	bne.n	8007078 <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 800704c:	493a      	ldr	r1, [pc, #232]	@ (8007138 <VibeCheckWaveGenCMD_Get+0x11c>)
 800704e:	6838      	ldr	r0, [r7, #0]
 8007050:	f7fe fe20 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8007054:	6838      	ldr	r0, [r7, #0]
 8007056:	f7fe fe8f 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff fdd4 	bl	8006c08 <VibeCheckWaveGen_GetFrequency>
 8007060:	eef0 7a40 	vmov.f32	s15, s0
 8007064:	eeb0 0a67 	vmov.f32	s0, s15
 8007068:	6838      	ldr	r0, [r7, #0]
 800706a:	f7fe fe67 	bl	8005d3c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 800706e:	6838      	ldr	r0, [r7, #0]
 8007070:	f7fe fe90 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007074:	2301      	movs	r3, #1
 8007076:	e059      	b.n	800712c <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 8007078:	f107 0308 	add.w	r3, r7, #8
 800707c:	492f      	ldr	r1, [pc, #188]	@ (800713c <VibeCheckWaveGenCMD_Get+0x120>)
 800707e:	4618      	mov	r0, r3
 8007080:	f7f9 f946 	bl	8000310 <strcmp>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d115      	bne.n	80070b6 <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 800708a:	492b      	ldr	r1, [pc, #172]	@ (8007138 <VibeCheckWaveGenCMD_Get+0x11c>)
 800708c:	6838      	ldr	r0, [r7, #0]
 800708e:	f7fe fe01 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8007092:	6838      	ldr	r0, [r7, #0]
 8007094:	f7fe fe70 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff fdfa 	bl	8006c92 <VibeCheckWaveGen_GetAmplitude>
 800709e:	eef0 7a40 	vmov.f32	s15, s0
 80070a2:	eeb0 0a67 	vmov.f32	s0, s15
 80070a6:	6838      	ldr	r0, [r7, #0]
 80070a8:	f7fe fe48 	bl	8005d3c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80070ac:	6838      	ldr	r0, [r7, #0]
 80070ae:	f7fe fe71 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e03a      	b.n	800712c <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 80070b6:	f107 0308 	add.w	r3, r7, #8
 80070ba:	4921      	ldr	r1, [pc, #132]	@ (8007140 <VibeCheckWaveGenCMD_Get+0x124>)
 80070bc:	4618      	mov	r0, r3
 80070be:	f7f9 f927 	bl	8000310 <strcmp>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d130      	bne.n	800712a <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80070c8:	491b      	ldr	r1, [pc, #108]	@ (8007138 <VibeCheckWaveGenCMD_Get+0x11c>)
 80070ca:	6838      	ldr	r0, [r7, #0]
 80070cc:	f7fe fde2 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80070d0:	6838      	ldr	r0, [r7, #0]
 80070d2:	f7fe fe51 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7ff fe0a 	bl	8006cf0 <VibeCheckWaveGen_GetWaveform>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d81e      	bhi.n	8007120 <VibeCheckWaveGenCMD_Get+0x104>
 80070e2:	a201      	add	r2, pc, #4	@ (adr r2, 80070e8 <VibeCheckWaveGenCMD_Get+0xcc>)
 80070e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e8:	080070f9 	.word	0x080070f9
 80070ec:	08007103 	.word	0x08007103
 80070f0:	0800710d 	.word	0x0800710d
 80070f4:	08007117 	.word	0x08007117
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 80070f8:	4912      	ldr	r1, [pc, #72]	@ (8007144 <VibeCheckWaveGenCMD_Get+0x128>)
 80070fa:	6838      	ldr	r0, [r7, #0]
 80070fc:	f7fe fdca 	bl	8005c94 <VibeCheckShell_PutOutputString>
				break;
 8007100:	e00e      	b.n	8007120 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 8007102:	4911      	ldr	r1, [pc, #68]	@ (8007148 <VibeCheckWaveGenCMD_Get+0x12c>)
 8007104:	6838      	ldr	r0, [r7, #0]
 8007106:	f7fe fdc5 	bl	8005c94 <VibeCheckShell_PutOutputString>
				break;
 800710a:	e009      	b.n	8007120 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 800710c:	490f      	ldr	r1, [pc, #60]	@ (800714c <VibeCheckWaveGenCMD_Get+0x130>)
 800710e:	6838      	ldr	r0, [r7, #0]
 8007110:	f7fe fdc0 	bl	8005c94 <VibeCheckShell_PutOutputString>
				break;
 8007114:	e004      	b.n	8007120 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 8007116:	490e      	ldr	r1, [pc, #56]	@ (8007150 <VibeCheckWaveGenCMD_Get+0x134>)
 8007118:	6838      	ldr	r0, [r7, #0]
 800711a:	f7fe fdbb 	bl	8005c94 <VibeCheckShell_PutOutputString>
				break;
 800711e:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 8007120:	6838      	ldr	r0, [r7, #0]
 8007122:	f7fe fe37 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3748      	adds	r7, #72	@ 0x48
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	0801d94c 	.word	0x0801d94c
 8007138:	0801d958 	.word	0x0801d958
 800713c:	0801d95c 	.word	0x0801d95c
 8007140:	0801d968 	.word	0x0801d968
 8007144:	0801d974 	.word	0x0801d974
 8007148:	0801d97c 	.word	0x0801d97c
 800714c:	0801d984 	.word	0x0801d984
 8007150:	0801d988 	.word	0x0801d988

08007154 <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b094      	sub	sp, #80	@ 0x50
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007162:	f107 030c 	add.w	r3, r7, #12
 8007166:	2240      	movs	r2, #64	@ 0x40
 8007168:	4619      	mov	r1, r3
 800716a:	6838      	ldr	r0, [r7, #0]
 800716c:	f7fe fc72 	bl	8005a54 <VibeCheckShell_GetNextString>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 808b 	beq.w	800728e <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	4946      	ldr	r1, [pc, #280]	@ (8007298 <VibeCheckWaveGenCMD_Execute+0x144>)
 800717e:	4618      	mov	r0, r3
 8007180:	f7f9 f8c6 	bl	8000310 <strcmp>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10b      	bne.n	80071a2 <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 800718a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800718c:	f7ff fca0 	bl	8006ad0 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8007190:	4942      	ldr	r1, [pc, #264]	@ (800729c <VibeCheckWaveGenCMD_Execute+0x148>)
 8007192:	6838      	ldr	r0, [r7, #0]
 8007194:	f7fe fd7e 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8007198:	6838      	ldr	r0, [r7, #0]
 800719a:	f7fe fdfb 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800719e:	2301      	movs	r3, #1
 80071a0:	e076      	b.n	8007290 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 80071a2:	f107 030c 	add.w	r3, r7, #12
 80071a6:	493e      	ldr	r1, [pc, #248]	@ (80072a0 <VibeCheckWaveGenCMD_Execute+0x14c>)
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7f9 f8b1 	bl	8000310 <strcmp>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10b      	bne.n	80071cc <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 80071b4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80071b6:	f7ff fcad 	bl	8006b14 <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 80071ba:	4938      	ldr	r1, [pc, #224]	@ (800729c <VibeCheckWaveGenCMD_Execute+0x148>)
 80071bc:	6838      	ldr	r0, [r7, #0]
 80071be:	f7fe fd69 	bl	8005c94 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80071c2:	6838      	ldr	r0, [r7, #0]
 80071c4:	f7fe fde6 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e061      	b.n	8007290 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 80071cc:	f107 030c 	add.w	r3, r7, #12
 80071d0:	4934      	ldr	r1, [pc, #208]	@ (80072a4 <VibeCheckWaveGenCMD_Execute+0x150>)
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7f9 f89c 	bl	8000310 <strcmp>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d108      	bne.n	80071f0 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80071e2:	f7ff fe45 	bl	8006e70 <VibeCheckWaveGenCMD_Set>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d050      	beq.n	800728e <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e04f      	b.n	8007290 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 80071f0:	f107 030c 	add.w	r3, r7, #12
 80071f4:	492c      	ldr	r1, [pc, #176]	@ (80072a8 <VibeCheckWaveGenCMD_Execute+0x154>)
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7f9 f88a 	bl	8000310 <strcmp>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d108      	bne.n	8007214 <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007206:	f7ff ff09 	bl	800701c <VibeCheckWaveGenCMD_Get>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d03e      	beq.n	800728e <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8007210:	2301      	movs	r3, #1
 8007212:	e03d      	b.n	8007290 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 8007214:	f107 030c 	add.w	r3, r7, #12
 8007218:	4924      	ldr	r1, [pc, #144]	@ (80072ac <VibeCheckWaveGenCMD_Execute+0x158>)
 800721a:	4618      	mov	r0, r3
 800721c:	f7f9 f878 	bl	8000310 <strcmp>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d133      	bne.n	800728e <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007226:	f107 030c 	add.w	r3, r7, #12
 800722a:	2240      	movs	r2, #64	@ 0x40
 800722c:	4619      	mov	r1, r3
 800722e:	6838      	ldr	r0, [r7, #0]
 8007230:	f7fe fc10 	bl	8005a54 <VibeCheckShell_GetNextString>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d029      	beq.n	800728e <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 800723a:	f107 030c 	add.w	r3, r7, #12
 800723e:	4916      	ldr	r1, [pc, #88]	@ (8007298 <VibeCheckWaveGenCMD_Execute+0x144>)
 8007240:	4618      	mov	r0, r3
 8007242:	f7f9 f865 	bl	8000310 <strcmp>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10b      	bne.n	8007264 <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 800724c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800724e:	f7ff fdb5 	bl	8006dbc <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8007252:	4912      	ldr	r1, [pc, #72]	@ (800729c <VibeCheckWaveGenCMD_Execute+0x148>)
 8007254:	6838      	ldr	r0, [r7, #0]
 8007256:	f7fe fd1d 	bl	8005c94 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800725a:	6838      	ldr	r0, [r7, #0]
 800725c:	f7fe fd9a 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007260:	2301      	movs	r3, #1
 8007262:	e015      	b.n	8007290 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 8007264:	f107 030c 	add.w	r3, r7, #12
 8007268:	490d      	ldr	r1, [pc, #52]	@ (80072a0 <VibeCheckWaveGenCMD_Execute+0x14c>)
 800726a:	4618      	mov	r0, r3
 800726c:	f7f9 f850 	bl	8000310 <strcmp>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10b      	bne.n	800728e <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 8007276:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007278:	f7ff fde8 	bl	8006e4c <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 800727c:	4907      	ldr	r1, [pc, #28]	@ (800729c <VibeCheckWaveGenCMD_Execute+0x148>)
 800727e:	6838      	ldr	r0, [r7, #0]
 8007280:	f7fe fd08 	bl	8005c94 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007284:	6838      	ldr	r0, [r7, #0]
 8007286:	f7fe fd85 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3750      	adds	r7, #80	@ 0x50
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	0801d994 	.word	0x0801d994
 800729c:	0801d958 	.word	0x0801d958
 80072a0:	0801d99c 	.word	0x0801d99c
 80072a4:	0801d9a4 	.word	0x0801d9a4
 80072a8:	0801d9a8 	.word	0x0801d9a8
 80072ac:	0801d9ac 	.word	0x0801d9ac

080072b0 <VibeCheckWaveGenSender_Execute>:


uint32_t VibeCheckWaveGenSender_Execute(void* obj, VibeCheckShell* shell)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
	/* this will send a message to the host when the mute button is pressed */

	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60fb      	str	r3, [r7, #12]

	uint32_t is_muted;
	if (VibeCheckWaveGen_WasMuteButtonPressed(wavegen, &is_muted))
 80072be:	f107 0308 	add.w	r3, r7, #8
 80072c2:	4619      	mov	r1, r3
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f7ff fd21 	bl	8006d0c <VibeCheckWaveGen_WasMuteButtonPressed>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01e      	beq.n	800730e <VibeCheckWaveGenSender_Execute+0x5e>
	{
		VibeCheckShell_PutOutputString(shell, "event");
 80072d0:	4911      	ldr	r1, [pc, #68]	@ (8007318 <VibeCheckWaveGenSender_Execute+0x68>)
 80072d2:	6838      	ldr	r0, [r7, #0]
 80072d4:	f7fe fcde 	bl	8005c94 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80072d8:	6838      	ldr	r0, [r7, #0]
 80072da:	f7fe fd4d 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "wavegen");
 80072de:	490f      	ldr	r1, [pc, #60]	@ (800731c <VibeCheckWaveGenSender_Execute+0x6c>)
 80072e0:	6838      	ldr	r0, [r7, #0]
 80072e2:	f7fe fcd7 	bl	8005c94 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80072e6:	6838      	ldr	r0, [r7, #0]
 80072e8:	f7fe fd46 	bl	8005d78 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <VibeCheckWaveGenSender_Execute+0x4c>
			VibeCheckShell_PutOutputString(shell, "muted");
 80072f2:	490b      	ldr	r1, [pc, #44]	@ (8007320 <VibeCheckWaveGenSender_Execute+0x70>)
 80072f4:	6838      	ldr	r0, [r7, #0]
 80072f6:	f7fe fccd 	bl	8005c94 <VibeCheckShell_PutOutputString>
 80072fa:	e003      	b.n	8007304 <VibeCheckWaveGenSender_Execute+0x54>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 80072fc:	4909      	ldr	r1, [pc, #36]	@ (8007324 <VibeCheckWaveGenSender_Execute+0x74>)
 80072fe:	6838      	ldr	r0, [r7, #0]
 8007300:	f7fe fcc8 	bl	8005c94 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8007304:	6838      	ldr	r0, [r7, #0]
 8007306:	f7fe fd45 	bl	8005d94 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 800730a:	2301      	movs	r3, #1
 800730c:	e000      	b.n	8007310 <VibeCheckWaveGenSender_Execute+0x60>
	}

	return 0;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	0801d9b4 	.word	0x0801d9b4
 800731c:	0801d9bc 	.word	0x0801d9bc
 8007320:	0801d9c4 	.word	0x0801d9c4
 8007324:	0801d9cc 	.word	0x0801d9cc

08007328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007328:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007360 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800732c:	f7fb fdc2 	bl	8002eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007330:	480c      	ldr	r0, [pc, #48]	@ (8007364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007332:	490d      	ldr	r1, [pc, #52]	@ (8007368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007334:	4a0d      	ldr	r2, [pc, #52]	@ (800736c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007338:	e002      	b.n	8007340 <LoopCopyDataInit>

0800733a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800733a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800733c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800733e:	3304      	adds	r3, #4

08007340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007344:	d3f9      	bcc.n	800733a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007346:	4a0a      	ldr	r2, [pc, #40]	@ (8007370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007348:	4c0a      	ldr	r4, [pc, #40]	@ (8007374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800734a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800734c:	e001      	b.n	8007352 <LoopFillZerobss>

0800734e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800734e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007350:	3204      	adds	r2, #4

08007352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007354:	d3fb      	bcc.n	800734e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007356:	f012 ff13 	bl	801a180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800735a:	f7f9 ffd7 	bl	800130c <main>
  bx  lr
 800735e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007360:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8007364:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007368:	240002fc 	.word	0x240002fc
  ldr r2, =_sidata
 800736c:	0801ea80 	.word	0x0801ea80
  ldr r2, =_sbss
 8007370:	240002fc 	.word	0x240002fc
  ldr r4, =_ebss
 8007374:	240153e8 	.word	0x240153e8

08007378 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007378:	e7fe      	b.n	8007378 <ADC3_IRQHandler>
	...

0800737c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007382:	2003      	movs	r0, #3
 8007384:	f001 fcf4 	bl	8008d70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007388:	f006 fcd6 	bl	800dd38 <HAL_RCC_GetSysClockFreq>
 800738c:	4602      	mov	r2, r0
 800738e:	4b15      	ldr	r3, [pc, #84]	@ (80073e4 <HAL_Init+0x68>)
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	0a1b      	lsrs	r3, r3, #8
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	4913      	ldr	r1, [pc, #76]	@ (80073e8 <HAL_Init+0x6c>)
 800739a:	5ccb      	ldrb	r3, [r1, r3]
 800739c:	f003 031f 	and.w	r3, r3, #31
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
 80073a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073a6:	4b0f      	ldr	r3, [pc, #60]	@ (80073e4 <HAL_Init+0x68>)
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	f003 030f 	and.w	r3, r3, #15
 80073ae:	4a0e      	ldr	r2, [pc, #56]	@ (80073e8 <HAL_Init+0x6c>)
 80073b0:	5cd3      	ldrb	r3, [r2, r3]
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	fa22 f303 	lsr.w	r3, r2, r3
 80073bc:	4a0b      	ldr	r2, [pc, #44]	@ (80073ec <HAL_Init+0x70>)
 80073be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073c0:	4a0b      	ldr	r2, [pc, #44]	@ (80073f0 <HAL_Init+0x74>)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80073c6:	2002      	movs	r0, #2
 80073c8:	f000 f814 	bl	80073f4 <HAL_InitTick>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e002      	b.n	80073dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80073d6:	f7fa ff95 	bl	8002304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	58024400 	.word	0x58024400
 80073e8:	0801da08 	.word	0x0801da08
 80073ec:	24000004 	.word	0x24000004
 80073f0:	24000000 	.word	0x24000000

080073f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80073fc:	4b15      	ldr	r3, [pc, #84]	@ (8007454 <HAL_InitTick+0x60>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e021      	b.n	800744c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007408:	4b13      	ldr	r3, [pc, #76]	@ (8007458 <HAL_InitTick+0x64>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	4b11      	ldr	r3, [pc, #68]	@ (8007454 <HAL_InitTick+0x60>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	4619      	mov	r1, r3
 8007412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007416:	fbb3 f3f1 	udiv	r3, r3, r1
 800741a:	fbb2 f3f3 	udiv	r3, r2, r3
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fcd9 	bl	8008dd6 <HAL_SYSTICK_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e00e      	b.n	800744c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b0f      	cmp	r3, #15
 8007432:	d80a      	bhi.n	800744a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007434:	2200      	movs	r2, #0
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	f04f 30ff 	mov.w	r0, #4294967295
 800743c:	f001 fca3 	bl	8008d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007440:	4a06      	ldr	r2, [pc, #24]	@ (800745c <HAL_InitTick+0x68>)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	e000      	b.n	800744c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	2400003c 	.word	0x2400003c
 8007458:	24000000 	.word	0x24000000
 800745c:	24000038 	.word	0x24000038

08007460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007464:	4b06      	ldr	r3, [pc, #24]	@ (8007480 <HAL_IncTick+0x20>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	4b06      	ldr	r3, [pc, #24]	@ (8007484 <HAL_IncTick+0x24>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4413      	add	r3, r2
 8007470:	4a04      	ldr	r2, [pc, #16]	@ (8007484 <HAL_IncTick+0x24>)
 8007472:	6013      	str	r3, [r2, #0]
}
 8007474:	bf00      	nop
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	2400003c 	.word	0x2400003c
 8007484:	240136b4 	.word	0x240136b4

08007488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  return uwTick;
 800748c:	4b03      	ldr	r3, [pc, #12]	@ (800749c <HAL_GetTick+0x14>)
 800748e:	681b      	ldr	r3, [r3, #0]
}
 8007490:	4618      	mov	r0, r3
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	240136b4 	.word	0x240136b4

080074a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80074a8:	f7ff ffee 	bl	8007488 <HAL_GetTick>
 80074ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b8:	d005      	beq.n	80074c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80074ba:	4b0a      	ldr	r3, [pc, #40]	@ (80074e4 <HAL_Delay+0x44>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80074c6:	bf00      	nop
 80074c8:	f7ff ffde 	bl	8007488 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d8f7      	bhi.n	80074c8 <HAL_Delay+0x28>
  {
  }
}
 80074d8:	bf00      	nop
 80074da:	bf00      	nop
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	2400003c 	.word	0x2400003c

080074e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	609a      	str	r2, [r3, #8]
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	609a      	str	r2, [r3, #8]
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3360      	adds	r3, #96	@ 0x60
 8007562:	461a      	mov	r2, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4a10      	ldr	r2, [pc, #64]	@ (80075b0 <LL_ADC_SetOffset+0x60>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d10b      	bne.n	800758c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	4313      	orrs	r3, r2
 8007582:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800758a:	e00b      	b.n	80075a4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	430b      	orrs	r3, r1
 800759e:	431a      	orrs	r2, r3
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	601a      	str	r2, [r3, #0]
}
 80075a4:	bf00      	nop
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	58026000 	.word	0x58026000

080075b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	3360      	adds	r3, #96	@ 0x60
 80075c2:	461a      	mov	r2, r3
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f003 031f 	and.w	r3, r3, #31
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007600:	431a      	orrs	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	611a      	str	r2, [r3, #16]
}
 8007606:	bf00      	nop
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
	...

08007614 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4a0c      	ldr	r2, [pc, #48]	@ (8007654 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00e      	beq.n	8007646 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3360      	adds	r3, #96	@ 0x60
 800762c:	461a      	mov	r2, r3
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	431a      	orrs	r2, r3
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	601a      	str	r2, [r3, #0]
  }
}
 8007646:	bf00      	nop
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	58026000 	.word	0x58026000

08007658 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4a0c      	ldr	r2, [pc, #48]	@ (8007698 <LL_ADC_SetOffsetSaturation+0x40>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d10e      	bne.n	800768a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3360      	adds	r3, #96	@ 0x60
 8007670:	461a      	mov	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	431a      	orrs	r2, r3
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	58026000 	.word	0x58026000

0800769c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4a0c      	ldr	r2, [pc, #48]	@ (80076dc <LL_ADC_SetOffsetSign+0x40>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d10e      	bne.n	80076ce <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	3360      	adds	r3, #96	@ 0x60
 80076b4:	461a      	mov	r2, r3
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	431a      	orrs	r2, r3
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80076ce:	bf00      	nop
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	58026000 	.word	0x58026000

080076e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3360      	adds	r3, #96	@ 0x60
 80076f0:	461a      	mov	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007730 <LL_ADC_SetOffsetState+0x50>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d108      	bne.n	8007714 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	431a      	orrs	r2, r3
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8007712:	e007      	b.n	8007724 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	431a      	orrs	r2, r3
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	601a      	str	r2, [r3, #0]
}
 8007724:	bf00      	nop
 8007726:	371c      	adds	r7, #28
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	58026000 	.word	0x58026000

08007734 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3330      	adds	r3, #48	@ 0x30
 8007744:	461a      	mov	r2, r3
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	0a1b      	lsrs	r3, r3, #8
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	f003 030c 	and.w	r3, r3, #12
 8007750:	4413      	add	r3, r2
 8007752:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f003 031f 	and.w	r3, r3, #31
 800775e:	211f      	movs	r1, #31
 8007760:	fa01 f303 	lsl.w	r3, r1, r3
 8007764:	43db      	mvns	r3, r3
 8007766:	401a      	ands	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	0e9b      	lsrs	r3, r3, #26
 800776c:	f003 011f 	and.w	r1, r3, #31
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f003 031f 	and.w	r3, r3, #31
 8007776:	fa01 f303 	lsl.w	r3, r1, r3
 800777a:	431a      	orrs	r2, r3
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007780:	bf00      	nop
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3314      	adds	r3, #20
 800779c:	461a      	mov	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	0e5b      	lsrs	r3, r3, #25
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	4413      	add	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	0d1b      	lsrs	r3, r3, #20
 80077b4:	f003 031f 	and.w	r3, r3, #31
 80077b8:	2107      	movs	r1, #7
 80077ba:	fa01 f303 	lsl.w	r3, r1, r3
 80077be:	43db      	mvns	r3, r3
 80077c0:	401a      	ands	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	0d1b      	lsrs	r3, r3, #20
 80077c6:	f003 031f 	and.w	r3, r3, #31
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	fa01 f303 	lsl.w	r3, r1, r3
 80077d0:	431a      	orrs	r2, r3
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80077d6:	bf00      	nop
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4a1a      	ldr	r2, [pc, #104]	@ (800785c <LL_ADC_SetChannelSingleDiff+0x78>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d115      	bne.n	8007824 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007804:	43db      	mvns	r3, r3
 8007806:	401a      	ands	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f003 0318 	and.w	r3, r3, #24
 800780e:	4914      	ldr	r1, [pc, #80]	@ (8007860 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007810:	40d9      	lsrs	r1, r3
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	400b      	ands	r3, r1
 8007816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800781a:	431a      	orrs	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8007822:	e014      	b.n	800784e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007830:	43db      	mvns	r3, r3
 8007832:	401a      	ands	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f003 0318 	and.w	r3, r3, #24
 800783a:	4909      	ldr	r1, [pc, #36]	@ (8007860 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800783c:	40d9      	lsrs	r1, r3
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	400b      	ands	r3, r1
 8007842:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007846:	431a      	orrs	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800784e:	bf00      	nop
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	58026000 	.word	0x58026000
 8007860:	000fffff 	.word	0x000fffff

08007864 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	4b04      	ldr	r3, [pc, #16]	@ (8007884 <LL_ADC_DisableDeepPowerDown+0x20>)
 8007872:	4013      	ands	r3, r2
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6093      	str	r3, [r2, #8]
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	5fffffc0 	.word	0x5fffffc0

08007888 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800789c:	d101      	bne.n	80078a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800789e:	2301      	movs	r3, #1
 80078a0:	e000      	b.n	80078a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	4b05      	ldr	r3, [pc, #20]	@ (80078d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80078be:	4013      	ands	r3, r2
 80078c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	6fffffc0 	.word	0x6fffffc0

080078d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ec:	d101      	bne.n	80078f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80078ee:	2301      	movs	r3, #1
 80078f0:	e000      	b.n	80078f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <LL_ADC_IsEnabled+0x18>
 8007914:	2301      	movs	r3, #1
 8007916:	e000      	b.n	800791a <LL_ADC_IsEnabled+0x1a>
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	2b04      	cmp	r3, #4
 8007938:	d101      	bne.n	800793e <LL_ADC_REG_IsConversionOngoing+0x18>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f003 0308 	and.w	r3, r3, #8
 800795c:	2b08      	cmp	r3, #8
 800795e:	d101      	bne.n	8007964 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007960:	2301      	movs	r3, #1
 8007962:	e000      	b.n	8007966 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
	...

08007974 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007974:	b590      	push	{r4, r7, lr}
 8007976:	b089      	sub	sp, #36	@ 0x24
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007980:	2300      	movs	r3, #0
 8007982:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e1ee      	b.n	8007d6c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007998:	2b00      	cmp	r3, #0
 800799a:	d109      	bne.n	80079b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7fa fccd 	bl	800233c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff ff67 	bl	8007888 <LL_ADC_IsDeepPowerDownEnabled>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d004      	beq.n	80079ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff ff4d 	bl	8007864 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff ff82 	bl	80078d8 <LL_ADC_IsInternalRegulatorEnabled>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d114      	bne.n	8007a04 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4618      	mov	r0, r3
 80079e0:	f7ff ff66 	bl	80078b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80079e4:	4b8e      	ldr	r3, [pc, #568]	@ (8007c20 <HAL_ADC_Init+0x2ac>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	099b      	lsrs	r3, r3, #6
 80079ea:	4a8e      	ldr	r2, [pc, #568]	@ (8007c24 <HAL_ADC_Init+0x2b0>)
 80079ec:	fba2 2303 	umull	r2, r3, r2, r3
 80079f0:	099b      	lsrs	r3, r3, #6
 80079f2:	3301      	adds	r3, #1
 80079f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80079f6:	e002      	b.n	80079fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	3b01      	subs	r3, #1
 80079fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1f9      	bne.n	80079f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff ff65 	bl	80078d8 <LL_ADC_IsInternalRegulatorEnabled>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10d      	bne.n	8007a30 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a18:	f043 0210 	orr.w	r2, r3, #16
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a24:	f043 0201 	orr.w	r2, r3, #1
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff ff76 	bl	8007926 <LL_ADC_REG_IsConversionOngoing>
 8007a3a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a40:	f003 0310 	and.w	r3, r3, #16
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f040 8188 	bne.w	8007d5a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 8184 	bne.w	8007d5a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a56:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007a5a:	f043 0202 	orr.w	r2, r3, #2
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff ff4a 	bl	8007900 <LL_ADC_IsEnabled>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d136      	bne.n	8007ae0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a6c      	ldr	r2, [pc, #432]	@ (8007c28 <HAL_ADC_Init+0x2b4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d004      	beq.n	8007a86 <HAL_ADC_Init+0x112>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a6a      	ldr	r2, [pc, #424]	@ (8007c2c <HAL_ADC_Init+0x2b8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d10e      	bne.n	8007aa4 <HAL_ADC_Init+0x130>
 8007a86:	4868      	ldr	r0, [pc, #416]	@ (8007c28 <HAL_ADC_Init+0x2b4>)
 8007a88:	f7ff ff3a 	bl	8007900 <LL_ADC_IsEnabled>
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	4867      	ldr	r0, [pc, #412]	@ (8007c2c <HAL_ADC_Init+0x2b8>)
 8007a90:	f7ff ff36 	bl	8007900 <LL_ADC_IsEnabled>
 8007a94:	4603      	mov	r3, r0
 8007a96:	4323      	orrs	r3, r4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bf0c      	ite	eq
 8007a9c:	2301      	moveq	r3, #1
 8007a9e:	2300      	movne	r3, #0
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	e008      	b.n	8007ab6 <HAL_ADC_Init+0x142>
 8007aa4:	4862      	ldr	r0, [pc, #392]	@ (8007c30 <HAL_ADC_Init+0x2bc>)
 8007aa6:	f7ff ff2b 	bl	8007900 <LL_ADC_IsEnabled>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bf0c      	ite	eq
 8007ab0:	2301      	moveq	r3, #1
 8007ab2:	2300      	movne	r3, #0
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d012      	beq.n	8007ae0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a5a      	ldr	r2, [pc, #360]	@ (8007c28 <HAL_ADC_Init+0x2b4>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d004      	beq.n	8007ace <HAL_ADC_Init+0x15a>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a58      	ldr	r2, [pc, #352]	@ (8007c2c <HAL_ADC_Init+0x2b8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d101      	bne.n	8007ad2 <HAL_ADC_Init+0x15e>
 8007ace:	4a59      	ldr	r2, [pc, #356]	@ (8007c34 <HAL_ADC_Init+0x2c0>)
 8007ad0:	e000      	b.n	8007ad4 <HAL_ADC_Init+0x160>
 8007ad2:	4a59      	ldr	r2, [pc, #356]	@ (8007c38 <HAL_ADC_Init+0x2c4>)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4610      	mov	r0, r2
 8007adc:	f7ff fd04 	bl	80074e8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a52      	ldr	r2, [pc, #328]	@ (8007c30 <HAL_ADC_Init+0x2bc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d129      	bne.n	8007b3e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	7e5b      	ldrb	r3, [r3, #25]
 8007aee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007af4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8007afa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d013      	beq.n	8007b2c <HAL_ADC_Init+0x1b8>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b0c      	cmp	r3, #12
 8007b0a:	d00d      	beq.n	8007b28 <HAL_ADC_Init+0x1b4>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b1c      	cmp	r3, #28
 8007b12:	d007      	beq.n	8007b24 <HAL_ADC_Init+0x1b0>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	2b18      	cmp	r3, #24
 8007b1a:	d101      	bne.n	8007b20 <HAL_ADC_Init+0x1ac>
 8007b1c:	2318      	movs	r3, #24
 8007b1e:	e006      	b.n	8007b2e <HAL_ADC_Init+0x1ba>
 8007b20:	2300      	movs	r3, #0
 8007b22:	e004      	b.n	8007b2e <HAL_ADC_Init+0x1ba>
 8007b24:	2310      	movs	r3, #16
 8007b26:	e002      	b.n	8007b2e <HAL_ADC_Init+0x1ba>
 8007b28:	2308      	movs	r3, #8
 8007b2a:	e000      	b.n	8007b2e <HAL_ADC_Init+0x1ba>
 8007b2c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8007b2e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b36:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	e00e      	b.n	8007b5c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	7e5b      	ldrb	r3, [r3, #25]
 8007b42:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007b48:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007b4e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b56:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d106      	bne.n	8007b74 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	045b      	lsls	r3, r3, #17
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d009      	beq.n	8007b90 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b88:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a26      	ldr	r2, [pc, #152]	@ (8007c30 <HAL_ADC_Init+0x2bc>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d115      	bne.n	8007bc6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	4b26      	ldr	r3, [pc, #152]	@ (8007c3c <HAL_ADC_Init+0x2c8>)
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6812      	ldr	r2, [r2, #0]
 8007ba8:	69b9      	ldr	r1, [r7, #24]
 8007baa:	430b      	orrs	r3, r1
 8007bac:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	611a      	str	r2, [r3, #16]
 8007bc4:	e009      	b.n	8007bda <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8007c40 <HAL_ADC_Init+0x2cc>)
 8007bce:	4013      	ands	r3, r2
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6812      	ldr	r2, [r2, #0]
 8007bd4:	69b9      	ldr	r1, [r7, #24]
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7ff fea1 	bl	8007926 <LL_ADC_REG_IsConversionOngoing>
 8007be4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7ff feae 	bl	800794c <LL_ADC_INJ_IsConversionOngoing>
 8007bf0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f040 808e 	bne.w	8007d16 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f040 808a 	bne.w	8007d16 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a0a      	ldr	r2, [pc, #40]	@ (8007c30 <HAL_ADC_Init+0x2bc>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d11b      	bne.n	8007c44 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	7e1b      	ldrb	r3, [r3, #24]
 8007c10:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007c18:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	61bb      	str	r3, [r7, #24]
 8007c1e:	e018      	b.n	8007c52 <HAL_ADC_Init+0x2de>
 8007c20:	24000000 	.word	0x24000000
 8007c24:	053e2d63 	.word	0x053e2d63
 8007c28:	40022000 	.word	0x40022000
 8007c2c:	40022100 	.word	0x40022100
 8007c30:	58026000 	.word	0x58026000
 8007c34:	40022300 	.word	0x40022300
 8007c38:	58026300 	.word	0x58026300
 8007c3c:	fff04007 	.word	0xfff04007
 8007c40:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7e1b      	ldrb	r3, [r3, #24]
 8007c48:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	4b46      	ldr	r3, [pc, #280]	@ (8007d74 <HAL_ADC_Init+0x400>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6812      	ldr	r2, [r2, #0]
 8007c60:	69b9      	ldr	r1, [r7, #24]
 8007c62:	430b      	orrs	r3, r1
 8007c64:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d137      	bne.n	8007ce0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c74:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a3f      	ldr	r2, [pc, #252]	@ (8007d78 <HAL_ADC_Init+0x404>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d116      	bne.n	8007cae <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691a      	ldr	r2, [r3, #16]
 8007c86:	4b3d      	ldr	r3, [pc, #244]	@ (8007d7c <HAL_ADC_Init+0x408>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007c92:	4311      	orrs	r1, r2
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c98:	4311      	orrs	r1, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0201 	orr.w	r2, r2, #1
 8007caa:	611a      	str	r2, [r3, #16]
 8007cac:	e020      	b.n	8007cf0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	691a      	ldr	r2, [r3, #16]
 8007cb4:	4b32      	ldr	r3, [pc, #200]	@ (8007d80 <HAL_ADC_Init+0x40c>)
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007cbc:	3a01      	subs	r2, #1
 8007cbe:	0411      	lsls	r1, r2, #16
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007cc4:	4311      	orrs	r1, r2
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007cca:	4311      	orrs	r1, r2
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0201 	orr.w	r2, r2, #1
 8007cdc:	611a      	str	r2, [r3, #16]
 8007cde:	e007      	b.n	8007cf0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691a      	ldr	r2, [r3, #16]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 0201 	bic.w	r2, r2, #1
 8007cee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d78 <HAL_ADC_Init+0x404>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d002      	beq.n	8007d16 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fd67 	bl	80087e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d10c      	bne.n	8007d38 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d24:	f023 010f 	bic.w	r1, r3, #15
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	1e5a      	subs	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d36:	e007      	b.n	8007d48 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 020f 	bic.w	r2, r2, #15
 8007d46:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d4c:	f023 0303 	bic.w	r3, r3, #3
 8007d50:	f043 0201 	orr.w	r2, r3, #1
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	661a      	str	r2, [r3, #96]	@ 0x60
 8007d58:	e007      	b.n	8007d6a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d5e:	f043 0210 	orr.w	r2, r3, #16
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007d6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3724      	adds	r7, #36	@ 0x24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd90      	pop	{r4, r7, pc}
 8007d74:	ffffbffc 	.word	0xffffbffc
 8007d78:	58026000 	.word	0x58026000
 8007d7c:	fc00f81f 	.word	0xfc00f81f
 8007d80:	fc00f81e 	.word	0xfc00f81e

08007d84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007d84:	b590      	push	{r4, r7, lr}
 8007d86:	b0b9      	sub	sp, #228	@ 0xe4
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007d94:	2300      	movs	r3, #0
 8007d96:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d9e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	4aab      	ldr	r2, [pc, #684]	@ (8008054 <HAL_ADC_ConfigChannel+0x2d0>)
 8007da6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d102      	bne.n	8007db8 <HAL_ADC_ConfigChannel+0x34>
 8007db2:	2302      	movs	r3, #2
 8007db4:	f000 bcfe 	b.w	80087b4 <HAL_ADC_ConfigChannel+0xa30>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff fdae 	bl	8007926 <LL_ADC_REG_IsConversionOngoing>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f040 84e2 	bne.w	8008796 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	db38      	blt.n	8007e4c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a9e      	ldr	r2, [pc, #632]	@ (8008058 <HAL_ADC_ConfigChannel+0x2d4>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d033      	beq.n	8007e4c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d108      	bne.n	8007e02 <HAL_ADC_ConfigChannel+0x7e>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	0e9b      	lsrs	r3, r3, #26
 8007df6:	f003 031f 	and.w	r3, r3, #31
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007e00:	e01d      	b.n	8007e3e <HAL_ADC_ConfigChannel+0xba>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e0e:	fa93 f3a3 	rbit	r3, r3
 8007e12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007e16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007e1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8007e26:	2320      	movs	r3, #32
 8007e28:	e004      	b.n	8007e34 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8007e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e2e:	fab3 f383 	clz	r3, r3
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	f003 031f 	and.w	r3, r3, #31
 8007e38:	2201      	movs	r2, #1
 8007e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6812      	ldr	r2, [r2, #0]
 8007e42:	69d1      	ldr	r1, [r2, #28]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6818      	ldr	r0, [r3, #0]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	6859      	ldr	r1, [r3, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	f7ff fc6b 	bl	8007734 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7ff fd5f 	bl	8007926 <LL_ADC_REG_IsConversionOngoing>
 8007e68:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fd6b 	bl	800794c <LL_ADC_INJ_IsConversionOngoing>
 8007e76:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f040 8270 	bne.w	8008364 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007e84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f040 826b 	bne.w	8008364 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	6819      	ldr	r1, [r3, #0]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f7ff fc76 	bl	800778c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a6c      	ldr	r2, [pc, #432]	@ (8008058 <HAL_ADC_ConfigChannel+0x2d4>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d10d      	bne.n	8007ec6 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	695a      	ldr	r2, [r3, #20]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	08db      	lsrs	r3, r3, #3
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ec4:	e032      	b.n	8007f2c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007ec6:	4b65      	ldr	r3, [pc, #404]	@ (800805c <HAL_ADC_ConfigChannel+0x2d8>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ed2:	d10b      	bne.n	8007eec <HAL_ADC_ConfigChannel+0x168>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	695a      	ldr	r2, [r3, #20]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	089b      	lsrs	r3, r3, #2
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eea:	e01d      	b.n	8007f28 <HAL_ADC_ConfigChannel+0x1a4>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f003 0310 	and.w	r3, r3, #16
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <HAL_ADC_ConfigChannel+0x18e>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	695a      	ldr	r2, [r3, #20]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	089b      	lsrs	r3, r3, #2
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f10:	e00a      	b.n	8007f28 <HAL_ADC_ConfigChannel+0x1a4>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	695a      	ldr	r2, [r3, #20]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	089b      	lsrs	r3, r3, #2
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	fa02 f303 	lsl.w	r3, r2, r3
 8007f28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d048      	beq.n	8007fc6 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	6919      	ldr	r1, [r3, #16]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f44:	f7ff fb04 	bl	8007550 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a42      	ldr	r2, [pc, #264]	@ (8008058 <HAL_ADC_ConfigChannel+0x2d4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d119      	bne.n	8007f86 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6919      	ldr	r1, [r3, #16]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f7ff fb9c 	bl	800769c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	6919      	ldr	r1, [r3, #16]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d102      	bne.n	8007f7c <HAL_ADC_ConfigChannel+0x1f8>
 8007f76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f7a:	e000      	b.n	8007f7e <HAL_ADC_ConfigChannel+0x1fa>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f7ff fb6a 	bl	8007658 <LL_ADC_SetOffsetSaturation>
 8007f84:	e1ee      	b.n	8008364 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6919      	ldr	r1, [r3, #16]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d102      	bne.n	8007f9e <HAL_ADC_ConfigChannel+0x21a>
 8007f98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f9c:	e000      	b.n	8007fa0 <HAL_ADC_ConfigChannel+0x21c>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	f7ff fb37 	bl	8007614 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6919      	ldr	r1, [r3, #16]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	7e1b      	ldrb	r3, [r3, #24]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d102      	bne.n	8007fbc <HAL_ADC_ConfigChannel+0x238>
 8007fb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007fba:	e000      	b.n	8007fbe <HAL_ADC_ConfigChannel+0x23a>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f7ff fb0e 	bl	80075e0 <LL_ADC_SetDataRightShift>
 8007fc4:	e1ce      	b.n	8008364 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a23      	ldr	r2, [pc, #140]	@ (8008058 <HAL_ADC_ConfigChannel+0x2d4>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	f040 8181 	bne.w	80082d4 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff faeb 	bl	80075b4 <LL_ADC_GetOffsetChannel>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10a      	bne.n	8007ffe <HAL_ADC_ConfigChannel+0x27a>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7ff fae0 	bl	80075b4 <LL_ADC_GetOffsetChannel>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	0e9b      	lsrs	r3, r3, #26
 8007ff8:	f003 021f 	and.w	r2, r3, #31
 8007ffc:	e01e      	b.n	800803c <HAL_ADC_ConfigChannel+0x2b8>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2100      	movs	r1, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff fad5 	bl	80075b4 <LL_ADC_GetOffsetChannel>
 800800a:	4603      	mov	r3, r0
 800800c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008010:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008014:	fa93 f3a3 	rbit	r3, r3
 8008018:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800801c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008020:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8008024:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800802c:	2320      	movs	r3, #32
 800802e:	e004      	b.n	800803a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8008030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008034:	fab3 f383 	clz	r3, r3
 8008038:	b2db      	uxtb	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10b      	bne.n	8008060 <HAL_ADC_ConfigChannel+0x2dc>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	0e9b      	lsrs	r3, r3, #26
 800804e:	f003 031f 	and.w	r3, r3, #31
 8008052:	e01e      	b.n	8008092 <HAL_ADC_ConfigChannel+0x30e>
 8008054:	47ff0000 	.word	0x47ff0000
 8008058:	58026000 	.word	0x58026000
 800805c:	5c001000 	.word	0x5c001000
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800806c:	fa93 f3a3 	rbit	r3, r3
 8008070:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8008074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800807c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8008084:	2320      	movs	r3, #32
 8008086:	e004      	b.n	8008092 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8008088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800808c:	fab3 f383 	clz	r3, r3
 8008090:	b2db      	uxtb	r3, r3
 8008092:	429a      	cmp	r2, r3
 8008094:	d106      	bne.n	80080a4 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2200      	movs	r2, #0
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff fb1e 	bl	80076e0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2101      	movs	r1, #1
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff fa82 	bl	80075b4 <LL_ADC_GetOffsetChannel>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10a      	bne.n	80080d0 <HAL_ADC_ConfigChannel+0x34c>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2101      	movs	r1, #1
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7ff fa77 	bl	80075b4 <LL_ADC_GetOffsetChannel>
 80080c6:	4603      	mov	r3, r0
 80080c8:	0e9b      	lsrs	r3, r3, #26
 80080ca:	f003 021f 	and.w	r2, r3, #31
 80080ce:	e01e      	b.n	800810e <HAL_ADC_ConfigChannel+0x38a>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2101      	movs	r1, #1
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fa6c 	bl	80075b4 <LL_ADC_GetOffsetChannel>
 80080dc:	4603      	mov	r3, r0
 80080de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080e6:	fa93 f3a3 	rbit	r3, r3
 80080ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80080ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80080f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80080fe:	2320      	movs	r3, #32
 8008100:	e004      	b.n	800810c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8008102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008106:	fab3 f383 	clz	r3, r3
 800810a:	b2db      	uxtb	r3, r3
 800810c:	461a      	mov	r2, r3
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008116:	2b00      	cmp	r3, #0
 8008118:	d105      	bne.n	8008126 <HAL_ADC_ConfigChannel+0x3a2>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	0e9b      	lsrs	r3, r3, #26
 8008120:	f003 031f 	and.w	r3, r3, #31
 8008124:	e018      	b.n	8008158 <HAL_ADC_ConfigChannel+0x3d4>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800812e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008132:	fa93 f3a3 	rbit	r3, r3
 8008136:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800813a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800813e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8008142:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800814a:	2320      	movs	r3, #32
 800814c:	e004      	b.n	8008158 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800814e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008152:	fab3 f383 	clz	r3, r3
 8008156:	b2db      	uxtb	r3, r3
 8008158:	429a      	cmp	r2, r3
 800815a:	d106      	bne.n	800816a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2200      	movs	r2, #0
 8008162:	2101      	movs	r1, #1
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff fabb 	bl	80076e0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2102      	movs	r1, #2
 8008170:	4618      	mov	r0, r3
 8008172:	f7ff fa1f 	bl	80075b4 <LL_ADC_GetOffsetChannel>
 8008176:	4603      	mov	r3, r0
 8008178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <HAL_ADC_ConfigChannel+0x412>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2102      	movs	r1, #2
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff fa14 	bl	80075b4 <LL_ADC_GetOffsetChannel>
 800818c:	4603      	mov	r3, r0
 800818e:	0e9b      	lsrs	r3, r3, #26
 8008190:	f003 021f 	and.w	r2, r3, #31
 8008194:	e01e      	b.n	80081d4 <HAL_ADC_ConfigChannel+0x450>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2102      	movs	r1, #2
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff fa09 	bl	80075b4 <LL_ADC_GetOffsetChannel>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081ac:	fa93 f3a3 	rbit	r3, r3
 80081b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80081b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80081bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80081c4:	2320      	movs	r3, #32
 80081c6:	e004      	b.n	80081d2 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80081c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081cc:	fab3 f383 	clz	r3, r3
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	461a      	mov	r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d105      	bne.n	80081ec <HAL_ADC_ConfigChannel+0x468>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	0e9b      	lsrs	r3, r3, #26
 80081e6:	f003 031f 	and.w	r3, r3, #31
 80081ea:	e014      	b.n	8008216 <HAL_ADC_ConfigChannel+0x492>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081f4:	fa93 f3a3 	rbit	r3, r3
 80081f8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80081fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8008200:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008208:	2320      	movs	r3, #32
 800820a:	e004      	b.n	8008216 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800820c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008210:	fab3 f383 	clz	r3, r3
 8008214:	b2db      	uxtb	r3, r3
 8008216:	429a      	cmp	r2, r3
 8008218:	d106      	bne.n	8008228 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2200      	movs	r2, #0
 8008220:	2102      	movs	r1, #2
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff fa5c 	bl	80076e0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2103      	movs	r1, #3
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff f9c0 	bl	80075b4 <LL_ADC_GetOffsetChannel>
 8008234:	4603      	mov	r3, r0
 8008236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <HAL_ADC_ConfigChannel+0x4d0>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2103      	movs	r1, #3
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff f9b5 	bl	80075b4 <LL_ADC_GetOffsetChannel>
 800824a:	4603      	mov	r3, r0
 800824c:	0e9b      	lsrs	r3, r3, #26
 800824e:	f003 021f 	and.w	r2, r3, #31
 8008252:	e017      	b.n	8008284 <HAL_ADC_ConfigChannel+0x500>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2103      	movs	r1, #3
 800825a:	4618      	mov	r0, r3
 800825c:	f7ff f9aa 	bl	80075b4 <LL_ADC_GetOffsetChannel>
 8008260:	4603      	mov	r3, r0
 8008262:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008264:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008266:	fa93 f3a3 	rbit	r3, r3
 800826a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800826c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800826e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8008270:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8008276:	2320      	movs	r3, #32
 8008278:	e003      	b.n	8008282 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800827a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800827c:	fab3 f383 	clz	r3, r3
 8008280:	b2db      	uxtb	r3, r3
 8008282:	461a      	mov	r2, r3
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800828c:	2b00      	cmp	r3, #0
 800828e:	d105      	bne.n	800829c <HAL_ADC_ConfigChannel+0x518>
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	0e9b      	lsrs	r3, r3, #26
 8008296:	f003 031f 	and.w	r3, r3, #31
 800829a:	e011      	b.n	80082c0 <HAL_ADC_ConfigChannel+0x53c>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082a4:	fa93 f3a3 	rbit	r3, r3
 80082a8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80082aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80082ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80082b4:	2320      	movs	r3, #32
 80082b6:	e003      	b.n	80082c0 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80082b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082ba:	fab3 f383 	clz	r3, r3
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d14f      	bne.n	8008364 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2200      	movs	r2, #0
 80082ca:	2103      	movs	r1, #3
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff fa07 	bl	80076e0 <LL_ADC_SetOffsetState>
 80082d2:	e047      	b.n	8008364 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	069b      	lsls	r3, r3, #26
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d107      	bne.n	80082f8 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80082f6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	069b      	lsls	r3, r3, #26
 8008308:	429a      	cmp	r2, r3
 800830a:	d107      	bne.n	800831c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800831a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008322:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	069b      	lsls	r3, r3, #26
 800832c:	429a      	cmp	r2, r3
 800832e:	d107      	bne.n	8008340 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800833e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008346:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	069b      	lsls	r3, r3, #26
 8008350:	429a      	cmp	r2, r3
 8008352:	d107      	bne.n	8008364 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008362:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff fac9 	bl	8007900 <LL_ADC_IsEnabled>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	f040 8219 	bne.w	80087a8 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6818      	ldr	r0, [r3, #0]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	6819      	ldr	r1, [r3, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	461a      	mov	r2, r3
 8008384:	f7ff fa2e 	bl	80077e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	4aa1      	ldr	r2, [pc, #644]	@ (8008614 <HAL_ADC_ConfigChannel+0x890>)
 800838e:	4293      	cmp	r3, r2
 8008390:	f040 812e 	bne.w	80085f0 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10b      	bne.n	80083bc <HAL_ADC_ConfigChannel+0x638>
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	0e9b      	lsrs	r3, r3, #26
 80083aa:	3301      	adds	r3, #1
 80083ac:	f003 031f 	and.w	r3, r3, #31
 80083b0:	2b09      	cmp	r3, #9
 80083b2:	bf94      	ite	ls
 80083b4:	2301      	movls	r3, #1
 80083b6:	2300      	movhi	r3, #0
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	e019      	b.n	80083f0 <HAL_ADC_ConfigChannel+0x66c>
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083c4:	fa93 f3a3 	rbit	r3, r3
 80083c8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80083ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80083ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80083d4:	2320      	movs	r3, #32
 80083d6:	e003      	b.n	80083e0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80083d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083da:	fab3 f383 	clz	r3, r3
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	3301      	adds	r3, #1
 80083e2:	f003 031f 	and.w	r3, r3, #31
 80083e6:	2b09      	cmp	r3, #9
 80083e8:	bf94      	ite	ls
 80083ea:	2301      	movls	r3, #1
 80083ec:	2300      	movhi	r3, #0
 80083ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d079      	beq.n	80084e8 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d107      	bne.n	8008410 <HAL_ADC_ConfigChannel+0x68c>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	0e9b      	lsrs	r3, r3, #26
 8008406:	3301      	adds	r3, #1
 8008408:	069b      	lsls	r3, r3, #26
 800840a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800840e:	e015      	b.n	800843c <HAL_ADC_ConfigChannel+0x6b8>
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008418:	fa93 f3a3 	rbit	r3, r3
 800841c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800841e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008420:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8008422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8008428:	2320      	movs	r3, #32
 800842a:	e003      	b.n	8008434 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800842c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800842e:	fab3 f383 	clz	r3, r3
 8008432:	b2db      	uxtb	r3, r3
 8008434:	3301      	adds	r3, #1
 8008436:	069b      	lsls	r3, r3, #26
 8008438:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008444:	2b00      	cmp	r3, #0
 8008446:	d109      	bne.n	800845c <HAL_ADC_ConfigChannel+0x6d8>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	0e9b      	lsrs	r3, r3, #26
 800844e:	3301      	adds	r3, #1
 8008450:	f003 031f 	and.w	r3, r3, #31
 8008454:	2101      	movs	r1, #1
 8008456:	fa01 f303 	lsl.w	r3, r1, r3
 800845a:	e017      	b.n	800848c <HAL_ADC_ConfigChannel+0x708>
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008464:	fa93 f3a3 	rbit	r3, r3
 8008468:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800846a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800846c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800846e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8008474:	2320      	movs	r3, #32
 8008476:	e003      	b.n	8008480 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8008478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800847a:	fab3 f383 	clz	r3, r3
 800847e:	b2db      	uxtb	r3, r3
 8008480:	3301      	adds	r3, #1
 8008482:	f003 031f 	and.w	r3, r3, #31
 8008486:	2101      	movs	r1, #1
 8008488:	fa01 f303 	lsl.w	r3, r1, r3
 800848c:	ea42 0103 	orr.w	r1, r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10a      	bne.n	80084b2 <HAL_ADC_ConfigChannel+0x72e>
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	0e9b      	lsrs	r3, r3, #26
 80084a2:	3301      	adds	r3, #1
 80084a4:	f003 021f 	and.w	r2, r3, #31
 80084a8:	4613      	mov	r3, r2
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	4413      	add	r3, r2
 80084ae:	051b      	lsls	r3, r3, #20
 80084b0:	e018      	b.n	80084e4 <HAL_ADC_ConfigChannel+0x760>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ba:	fa93 f3a3 	rbit	r3, r3
 80084be:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80084c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80084c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80084ca:	2320      	movs	r3, #32
 80084cc:	e003      	b.n	80084d6 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80084ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d0:	fab3 f383 	clz	r3, r3
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	3301      	adds	r3, #1
 80084d8:	f003 021f 	and.w	r2, r3, #31
 80084dc:	4613      	mov	r3, r2
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	4413      	add	r3, r2
 80084e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80084e4:	430b      	orrs	r3, r1
 80084e6:	e07e      	b.n	80085e6 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d107      	bne.n	8008504 <HAL_ADC_ConfigChannel+0x780>
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	0e9b      	lsrs	r3, r3, #26
 80084fa:	3301      	adds	r3, #1
 80084fc:	069b      	lsls	r3, r3, #26
 80084fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008502:	e015      	b.n	8008530 <HAL_ADC_ConfigChannel+0x7ac>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800850a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850c:	fa93 f3a3 	rbit	r3, r3
 8008510:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8008516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800851c:	2320      	movs	r3, #32
 800851e:	e003      	b.n	8008528 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8008520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008522:	fab3 f383 	clz	r3, r3
 8008526:	b2db      	uxtb	r3, r3
 8008528:	3301      	adds	r3, #1
 800852a:	069b      	lsls	r3, r3, #26
 800852c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008538:	2b00      	cmp	r3, #0
 800853a:	d109      	bne.n	8008550 <HAL_ADC_ConfigChannel+0x7cc>
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	0e9b      	lsrs	r3, r3, #26
 8008542:	3301      	adds	r3, #1
 8008544:	f003 031f 	and.w	r3, r3, #31
 8008548:	2101      	movs	r1, #1
 800854a:	fa01 f303 	lsl.w	r3, r1, r3
 800854e:	e017      	b.n	8008580 <HAL_ADC_ConfigChannel+0x7fc>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	fa93 f3a3 	rbit	r3, r3
 800855c:	61bb      	str	r3, [r7, #24]
  return result;
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8008568:	2320      	movs	r3, #32
 800856a:	e003      	b.n	8008574 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	fab3 f383 	clz	r3, r3
 8008572:	b2db      	uxtb	r3, r3
 8008574:	3301      	adds	r3, #1
 8008576:	f003 031f 	and.w	r3, r3, #31
 800857a:	2101      	movs	r1, #1
 800857c:	fa01 f303 	lsl.w	r3, r1, r3
 8008580:	ea42 0103 	orr.w	r1, r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10d      	bne.n	80085ac <HAL_ADC_ConfigChannel+0x828>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	0e9b      	lsrs	r3, r3, #26
 8008596:	3301      	adds	r3, #1
 8008598:	f003 021f 	and.w	r2, r3, #31
 800859c:	4613      	mov	r3, r2
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	4413      	add	r3, r2
 80085a2:	3b1e      	subs	r3, #30
 80085a4:	051b      	lsls	r3, r3, #20
 80085a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80085aa:	e01b      	b.n	80085e4 <HAL_ADC_ConfigChannel+0x860>
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	fa93 f3a3 	rbit	r3, r3
 80085b8:	60fb      	str	r3, [r7, #12]
  return result;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80085c4:	2320      	movs	r3, #32
 80085c6:	e003      	b.n	80085d0 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	fab3 f383 	clz	r3, r3
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	3301      	adds	r3, #1
 80085d2:	f003 021f 	and.w	r2, r3, #31
 80085d6:	4613      	mov	r3, r2
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	4413      	add	r3, r2
 80085dc:	3b1e      	subs	r3, #30
 80085de:	051b      	lsls	r3, r3, #20
 80085e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80085e4:	430b      	orrs	r3, r1
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	6892      	ldr	r2, [r2, #8]
 80085ea:	4619      	mov	r1, r3
 80085ec:	f7ff f8ce 	bl	800778c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f280 80d7 	bge.w	80087a8 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a06      	ldr	r2, [pc, #24]	@ (8008618 <HAL_ADC_ConfigChannel+0x894>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d004      	beq.n	800860e <HAL_ADC_ConfigChannel+0x88a>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a04      	ldr	r2, [pc, #16]	@ (800861c <HAL_ADC_ConfigChannel+0x898>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d10a      	bne.n	8008624 <HAL_ADC_ConfigChannel+0x8a0>
 800860e:	4b04      	ldr	r3, [pc, #16]	@ (8008620 <HAL_ADC_ConfigChannel+0x89c>)
 8008610:	e009      	b.n	8008626 <HAL_ADC_ConfigChannel+0x8a2>
 8008612:	bf00      	nop
 8008614:	47ff0000 	.word	0x47ff0000
 8008618:	40022000 	.word	0x40022000
 800861c:	40022100 	.word	0x40022100
 8008620:	40022300 	.word	0x40022300
 8008624:	4b65      	ldr	r3, [pc, #404]	@ (80087bc <HAL_ADC_ConfigChannel+0xa38>)
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe ff84 	bl	8007534 <LL_ADC_GetCommonPathInternalCh>
 800862c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a62      	ldr	r2, [pc, #392]	@ (80087c0 <HAL_ADC_ConfigChannel+0xa3c>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d004      	beq.n	8008644 <HAL_ADC_ConfigChannel+0x8c0>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a61      	ldr	r2, [pc, #388]	@ (80087c4 <HAL_ADC_ConfigChannel+0xa40>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d10e      	bne.n	8008662 <HAL_ADC_ConfigChannel+0x8de>
 8008644:	485e      	ldr	r0, [pc, #376]	@ (80087c0 <HAL_ADC_ConfigChannel+0xa3c>)
 8008646:	f7ff f95b 	bl	8007900 <LL_ADC_IsEnabled>
 800864a:	4604      	mov	r4, r0
 800864c:	485d      	ldr	r0, [pc, #372]	@ (80087c4 <HAL_ADC_ConfigChannel+0xa40>)
 800864e:	f7ff f957 	bl	8007900 <LL_ADC_IsEnabled>
 8008652:	4603      	mov	r3, r0
 8008654:	4323      	orrs	r3, r4
 8008656:	2b00      	cmp	r3, #0
 8008658:	bf0c      	ite	eq
 800865a:	2301      	moveq	r3, #1
 800865c:	2300      	movne	r3, #0
 800865e:	b2db      	uxtb	r3, r3
 8008660:	e008      	b.n	8008674 <HAL_ADC_ConfigChannel+0x8f0>
 8008662:	4859      	ldr	r0, [pc, #356]	@ (80087c8 <HAL_ADC_ConfigChannel+0xa44>)
 8008664:	f7ff f94c 	bl	8007900 <LL_ADC_IsEnabled>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	bf0c      	ite	eq
 800866e:	2301      	moveq	r3, #1
 8008670:	2300      	movne	r3, #0
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 8084 	beq.w	8008782 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a53      	ldr	r2, [pc, #332]	@ (80087cc <HAL_ADC_ConfigChannel+0xa48>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d132      	bne.n	80086ea <HAL_ADC_ConfigChannel+0x966>
 8008684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008688:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d12c      	bne.n	80086ea <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a4c      	ldr	r2, [pc, #304]	@ (80087c8 <HAL_ADC_ConfigChannel+0xa44>)
 8008696:	4293      	cmp	r3, r2
 8008698:	f040 8086 	bne.w	80087a8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a47      	ldr	r2, [pc, #284]	@ (80087c0 <HAL_ADC_ConfigChannel+0xa3c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d004      	beq.n	80086b0 <HAL_ADC_ConfigChannel+0x92c>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a46      	ldr	r2, [pc, #280]	@ (80087c4 <HAL_ADC_ConfigChannel+0xa40>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d101      	bne.n	80086b4 <HAL_ADC_ConfigChannel+0x930>
 80086b0:	4a47      	ldr	r2, [pc, #284]	@ (80087d0 <HAL_ADC_ConfigChannel+0xa4c>)
 80086b2:	e000      	b.n	80086b6 <HAL_ADC_ConfigChannel+0x932>
 80086b4:	4a41      	ldr	r2, [pc, #260]	@ (80087bc <HAL_ADC_ConfigChannel+0xa38>)
 80086b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f7fe ff24 	bl	800750e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80086c6:	4b43      	ldr	r3, [pc, #268]	@ (80087d4 <HAL_ADC_ConfigChannel+0xa50>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	099b      	lsrs	r3, r3, #6
 80086cc:	4a42      	ldr	r2, [pc, #264]	@ (80087d8 <HAL_ADC_ConfigChannel+0xa54>)
 80086ce:	fba2 2303 	umull	r2, r3, r2, r3
 80086d2:	099b      	lsrs	r3, r3, #6
 80086d4:	3301      	adds	r3, #1
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80086da:	e002      	b.n	80086e2 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	3b01      	subs	r3, #1
 80086e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1f9      	bne.n	80086dc <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80086e8:	e05e      	b.n	80087a8 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a3b      	ldr	r2, [pc, #236]	@ (80087dc <HAL_ADC_ConfigChannel+0xa58>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d120      	bne.n	8008736 <HAL_ADC_ConfigChannel+0x9b2>
 80086f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d11a      	bne.n	8008736 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a30      	ldr	r2, [pc, #192]	@ (80087c8 <HAL_ADC_ConfigChannel+0xa44>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d14e      	bne.n	80087a8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a2c      	ldr	r2, [pc, #176]	@ (80087c0 <HAL_ADC_ConfigChannel+0xa3c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d004      	beq.n	800871e <HAL_ADC_ConfigChannel+0x99a>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a2a      	ldr	r2, [pc, #168]	@ (80087c4 <HAL_ADC_ConfigChannel+0xa40>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d101      	bne.n	8008722 <HAL_ADC_ConfigChannel+0x99e>
 800871e:	4a2c      	ldr	r2, [pc, #176]	@ (80087d0 <HAL_ADC_ConfigChannel+0xa4c>)
 8008720:	e000      	b.n	8008724 <HAL_ADC_ConfigChannel+0x9a0>
 8008722:	4a26      	ldr	r2, [pc, #152]	@ (80087bc <HAL_ADC_ConfigChannel+0xa38>)
 8008724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008728:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800872c:	4619      	mov	r1, r3
 800872e:	4610      	mov	r0, r2
 8008730:	f7fe feed 	bl	800750e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008734:	e038      	b.n	80087a8 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a29      	ldr	r2, [pc, #164]	@ (80087e0 <HAL_ADC_ConfigChannel+0xa5c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d133      	bne.n	80087a8 <HAL_ADC_ConfigChannel+0xa24>
 8008740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d12d      	bne.n	80087a8 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a1d      	ldr	r2, [pc, #116]	@ (80087c8 <HAL_ADC_ConfigChannel+0xa44>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d128      	bne.n	80087a8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a19      	ldr	r2, [pc, #100]	@ (80087c0 <HAL_ADC_ConfigChannel+0xa3c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d004      	beq.n	800876a <HAL_ADC_ConfigChannel+0x9e6>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a17      	ldr	r2, [pc, #92]	@ (80087c4 <HAL_ADC_ConfigChannel+0xa40>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d101      	bne.n	800876e <HAL_ADC_ConfigChannel+0x9ea>
 800876a:	4a19      	ldr	r2, [pc, #100]	@ (80087d0 <HAL_ADC_ConfigChannel+0xa4c>)
 800876c:	e000      	b.n	8008770 <HAL_ADC_ConfigChannel+0x9ec>
 800876e:	4a13      	ldr	r2, [pc, #76]	@ (80087bc <HAL_ADC_ConfigChannel+0xa38>)
 8008770:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008774:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f7fe fec7 	bl	800750e <LL_ADC_SetCommonPathInternalCh>
 8008780:	e012      	b.n	80087a8 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008786:	f043 0220 	orr.w	r2, r3, #32
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8008794:	e008      	b.n	80087a8 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800879a:	f043 0220 	orr.w	r2, r3, #32
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80087b0:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	37e4      	adds	r7, #228	@ 0xe4
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd90      	pop	{r4, r7, pc}
 80087bc:	58026300 	.word	0x58026300
 80087c0:	40022000 	.word	0x40022000
 80087c4:	40022100 	.word	0x40022100
 80087c8:	58026000 	.word	0x58026000
 80087cc:	c7520000 	.word	0xc7520000
 80087d0:	40022300 	.word	0x40022300
 80087d4:	24000000 	.word	0x24000000
 80087d8:	053e2d63 	.word	0x053e2d63
 80087dc:	c3210000 	.word	0xc3210000
 80087e0:	cb840000 	.word	0xcb840000

080087e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a6c      	ldr	r2, [pc, #432]	@ (80089a4 <ADC_ConfigureBoostMode+0x1c0>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <ADC_ConfigureBoostMode+0x1c>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a6b      	ldr	r2, [pc, #428]	@ (80089a8 <ADC_ConfigureBoostMode+0x1c4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d109      	bne.n	8008814 <ADC_ConfigureBoostMode+0x30>
 8008800:	4b6a      	ldr	r3, [pc, #424]	@ (80089ac <ADC_ConfigureBoostMode+0x1c8>)
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008808:	2b00      	cmp	r3, #0
 800880a:	bf14      	ite	ne
 800880c:	2301      	movne	r3, #1
 800880e:	2300      	moveq	r3, #0
 8008810:	b2db      	uxtb	r3, r3
 8008812:	e008      	b.n	8008826 <ADC_ConfigureBoostMode+0x42>
 8008814:	4b66      	ldr	r3, [pc, #408]	@ (80089b0 <ADC_ConfigureBoostMode+0x1cc>)
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800881c:	2b00      	cmp	r3, #0
 800881e:	bf14      	ite	ne
 8008820:	2301      	movne	r3, #1
 8008822:	2300      	moveq	r3, #0
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d01c      	beq.n	8008864 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800882a:	f005 fbff 	bl	800e02c <HAL_RCC_GetHCLKFreq>
 800882e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008838:	d010      	beq.n	800885c <ADC_ConfigureBoostMode+0x78>
 800883a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800883e:	d873      	bhi.n	8008928 <ADC_ConfigureBoostMode+0x144>
 8008840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008844:	d002      	beq.n	800884c <ADC_ConfigureBoostMode+0x68>
 8008846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800884a:	d16d      	bne.n	8008928 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	0c1b      	lsrs	r3, r3, #16
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	fbb2 f3f3 	udiv	r3, r2, r3
 8008858:	60fb      	str	r3, [r7, #12]
        break;
 800885a:	e068      	b.n	800892e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	089b      	lsrs	r3, r3, #2
 8008860:	60fb      	str	r3, [r7, #12]
        break;
 8008862:	e064      	b.n	800892e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008864:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008868:	f04f 0100 	mov.w	r1, #0
 800886c:	f006 fdda 	bl	800f424 <HAL_RCCEx_GetPeriphCLKFreq>
 8008870:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800887a:	d051      	beq.n	8008920 <ADC_ConfigureBoostMode+0x13c>
 800887c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8008880:	d854      	bhi.n	800892c <ADC_ConfigureBoostMode+0x148>
 8008882:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8008886:	d047      	beq.n	8008918 <ADC_ConfigureBoostMode+0x134>
 8008888:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800888c:	d84e      	bhi.n	800892c <ADC_ConfigureBoostMode+0x148>
 800888e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8008892:	d03d      	beq.n	8008910 <ADC_ConfigureBoostMode+0x12c>
 8008894:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8008898:	d848      	bhi.n	800892c <ADC_ConfigureBoostMode+0x148>
 800889a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800889e:	d033      	beq.n	8008908 <ADC_ConfigureBoostMode+0x124>
 80088a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088a4:	d842      	bhi.n	800892c <ADC_ConfigureBoostMode+0x148>
 80088a6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80088aa:	d029      	beq.n	8008900 <ADC_ConfigureBoostMode+0x11c>
 80088ac:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80088b0:	d83c      	bhi.n	800892c <ADC_ConfigureBoostMode+0x148>
 80088b2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80088b6:	d01a      	beq.n	80088ee <ADC_ConfigureBoostMode+0x10a>
 80088b8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80088bc:	d836      	bhi.n	800892c <ADC_ConfigureBoostMode+0x148>
 80088be:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80088c2:	d014      	beq.n	80088ee <ADC_ConfigureBoostMode+0x10a>
 80088c4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80088c8:	d830      	bhi.n	800892c <ADC_ConfigureBoostMode+0x148>
 80088ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088ce:	d00e      	beq.n	80088ee <ADC_ConfigureBoostMode+0x10a>
 80088d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088d4:	d82a      	bhi.n	800892c <ADC_ConfigureBoostMode+0x148>
 80088d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80088da:	d008      	beq.n	80088ee <ADC_ConfigureBoostMode+0x10a>
 80088dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80088e0:	d824      	bhi.n	800892c <ADC_ConfigureBoostMode+0x148>
 80088e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088e6:	d002      	beq.n	80088ee <ADC_ConfigureBoostMode+0x10a>
 80088e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80088ec:	d11e      	bne.n	800892c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	0c9b      	lsrs	r3, r3, #18
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fc:	60fb      	str	r3, [r7, #12]
        break;
 80088fe:	e016      	b.n	800892e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	091b      	lsrs	r3, r3, #4
 8008904:	60fb      	str	r3, [r7, #12]
        break;
 8008906:	e012      	b.n	800892e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	095b      	lsrs	r3, r3, #5
 800890c:	60fb      	str	r3, [r7, #12]
        break;
 800890e:	e00e      	b.n	800892e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	099b      	lsrs	r3, r3, #6
 8008914:	60fb      	str	r3, [r7, #12]
        break;
 8008916:	e00a      	b.n	800892e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	09db      	lsrs	r3, r3, #7
 800891c:	60fb      	str	r3, [r7, #12]
        break;
 800891e:	e006      	b.n	800892e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	0a1b      	lsrs	r3, r3, #8
 8008924:	60fb      	str	r3, [r7, #12]
        break;
 8008926:	e002      	b.n	800892e <ADC_ConfigureBoostMode+0x14a>
        break;
 8008928:	bf00      	nop
 800892a:	e000      	b.n	800892e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800892c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	085b      	lsrs	r3, r3, #1
 8008932:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4a1f      	ldr	r2, [pc, #124]	@ (80089b4 <ADC_ConfigureBoostMode+0x1d0>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d808      	bhi.n	800894e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689a      	ldr	r2, [r3, #8]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800894a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800894c:	e025      	b.n	800899a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4a19      	ldr	r2, [pc, #100]	@ (80089b8 <ADC_ConfigureBoostMode+0x1d4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d80a      	bhi.n	800896c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008968:	609a      	str	r2, [r3, #8]
}
 800896a:	e016      	b.n	800899a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4a13      	ldr	r2, [pc, #76]	@ (80089bc <ADC_ConfigureBoostMode+0x1d8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d80a      	bhi.n	800898a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008986:	609a      	str	r2, [r3, #8]
}
 8008988:	e007      	b.n	800899a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689a      	ldr	r2, [r3, #8]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008998:	609a      	str	r2, [r3, #8]
}
 800899a:	bf00      	nop
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	40022000 	.word	0x40022000
 80089a8:	40022100 	.word	0x40022100
 80089ac:	40022300 	.word	0x40022300
 80089b0:	58026300 	.word	0x58026300
 80089b4:	005f5e10 	.word	0x005f5e10
 80089b8:	00bebc20 	.word	0x00bebc20
 80089bc:	017d7840 	.word	0x017d7840

080089c0 <LL_ADC_IsEnabled>:
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d101      	bne.n	80089d8 <LL_ADC_IsEnabled+0x18>
 80089d4:	2301      	movs	r3, #1
 80089d6:	e000      	b.n	80089da <LL_ADC_IsEnabled+0x1a>
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f003 0304 	and.w	r3, r3, #4
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	d101      	bne.n	80089fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e000      	b.n	8008a00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008a0c:	b590      	push	{r4, r7, lr}
 8008a0e:	b0a3      	sub	sp, #140	@ 0x8c
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d101      	bne.n	8008a2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008a26:	2302      	movs	r3, #2
 8008a28:	e0c1      	b.n	8008bae <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008a32:	2300      	movs	r3, #0
 8008a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008a36:	2300      	movs	r3, #0
 8008a38:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a5e      	ldr	r2, [pc, #376]	@ (8008bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d102      	bne.n	8008a4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008a44:	4b5d      	ldr	r3, [pc, #372]	@ (8008bbc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	e001      	b.n	8008a4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10b      	bne.n	8008a6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a58:	f043 0220 	orr.w	r2, r3, #32
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e0a0      	b.n	8008bae <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff ffb9 	bl	80089e6 <LL_ADC_REG_IsConversionOngoing>
 8008a74:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff ffb2 	bl	80089e6 <LL_ADC_REG_IsConversionOngoing>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f040 8081 	bne.w	8008b8c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d17c      	bne.n	8008b8c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a48      	ldr	r2, [pc, #288]	@ (8008bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d004      	beq.n	8008aa6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a46      	ldr	r2, [pc, #280]	@ (8008bbc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d101      	bne.n	8008aaa <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8008aa6:	4b46      	ldr	r3, [pc, #280]	@ (8008bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008aa8:	e000      	b.n	8008aac <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008aaa:	4b46      	ldr	r3, [pc, #280]	@ (8008bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008aac:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d039      	beq.n	8008b2a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008ab6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008ac6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a3a      	ldr	r2, [pc, #232]	@ (8008bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d004      	beq.n	8008adc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a39      	ldr	r2, [pc, #228]	@ (8008bbc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d10e      	bne.n	8008afa <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8008adc:	4836      	ldr	r0, [pc, #216]	@ (8008bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008ade:	f7ff ff6f 	bl	80089c0 <LL_ADC_IsEnabled>
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	4835      	ldr	r0, [pc, #212]	@ (8008bbc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008ae6:	f7ff ff6b 	bl	80089c0 <LL_ADC_IsEnabled>
 8008aea:	4603      	mov	r3, r0
 8008aec:	4323      	orrs	r3, r4
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bf0c      	ite	eq
 8008af2:	2301      	moveq	r3, #1
 8008af4:	2300      	movne	r3, #0
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	e008      	b.n	8008b0c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008afa:	4833      	ldr	r0, [pc, #204]	@ (8008bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008afc:	f7ff ff60 	bl	80089c0 <LL_ADC_IsEnabled>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	bf0c      	ite	eq
 8008b06:	2301      	moveq	r3, #1
 8008b08:	2300      	movne	r3, #0
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d047      	beq.n	8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008b10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	4b2d      	ldr	r3, [pc, #180]	@ (8008bcc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008b16:	4013      	ands	r3, r2
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	6811      	ldr	r1, [r2, #0]
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	6892      	ldr	r2, [r2, #8]
 8008b20:	430a      	orrs	r2, r1
 8008b22:	431a      	orrs	r2, r3
 8008b24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b26:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b28:	e03a      	b.n	8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008b2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008b32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b34:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8008bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d004      	beq.n	8008b4a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a1d      	ldr	r2, [pc, #116]	@ (8008bbc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d10e      	bne.n	8008b68 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8008b4a:	481b      	ldr	r0, [pc, #108]	@ (8008bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008b4c:	f7ff ff38 	bl	80089c0 <LL_ADC_IsEnabled>
 8008b50:	4604      	mov	r4, r0
 8008b52:	481a      	ldr	r0, [pc, #104]	@ (8008bbc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008b54:	f7ff ff34 	bl	80089c0 <LL_ADC_IsEnabled>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	4323      	orrs	r3, r4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	bf0c      	ite	eq
 8008b60:	2301      	moveq	r3, #1
 8008b62:	2300      	movne	r3, #0
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	e008      	b.n	8008b7a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8008b68:	4817      	ldr	r0, [pc, #92]	@ (8008bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008b6a:	f7ff ff29 	bl	80089c0 <LL_ADC_IsEnabled>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bf0c      	ite	eq
 8008b74:	2301      	moveq	r3, #1
 8008b76:	2300      	movne	r3, #0
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d010      	beq.n	8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008b7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	4b12      	ldr	r3, [pc, #72]	@ (8008bcc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008b84:	4013      	ands	r3, r2
 8008b86:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008b88:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b8a:	e009      	b.n	8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b90:	f043 0220 	orr.w	r2, r3, #32
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8008b9e:	e000      	b.n	8008ba2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008ba0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008baa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	378c      	adds	r7, #140	@ 0x8c
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd90      	pop	{r4, r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	40022000 	.word	0x40022000
 8008bbc:	40022100 	.word	0x40022100
 8008bc0:	40022300 	.word	0x40022300
 8008bc4:	58026300 	.word	0x58026300
 8008bc8:	58026000 	.word	0x58026000
 8008bcc:	fffff0e0 	.word	0xfffff0e0

08008bd0 <__NVIC_SetPriorityGrouping>:
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008be0:	4b0b      	ldr	r3, [pc, #44]	@ (8008c10 <__NVIC_SetPriorityGrouping+0x40>)
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008bec:	4013      	ands	r3, r2
 8008bee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008bf8:	4b06      	ldr	r3, [pc, #24]	@ (8008c14 <__NVIC_SetPriorityGrouping+0x44>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008bfe:	4a04      	ldr	r2, [pc, #16]	@ (8008c10 <__NVIC_SetPriorityGrouping+0x40>)
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	60d3      	str	r3, [r2, #12]
}
 8008c04:	bf00      	nop
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	e000ed00 	.word	0xe000ed00
 8008c14:	05fa0000 	.word	0x05fa0000

08008c18 <__NVIC_GetPriorityGrouping>:
{
 8008c18:	b480      	push	{r7}
 8008c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c1c:	4b04      	ldr	r3, [pc, #16]	@ (8008c30 <__NVIC_GetPriorityGrouping+0x18>)
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	0a1b      	lsrs	r3, r3, #8
 8008c22:	f003 0307 	and.w	r3, r3, #7
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	e000ed00 	.word	0xe000ed00

08008c34 <__NVIC_EnableIRQ>:
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	db0b      	blt.n	8008c5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c46:	88fb      	ldrh	r3, [r7, #6]
 8008c48:	f003 021f 	and.w	r2, r3, #31
 8008c4c:	4907      	ldr	r1, [pc, #28]	@ (8008c6c <__NVIC_EnableIRQ+0x38>)
 8008c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c52:	095b      	lsrs	r3, r3, #5
 8008c54:	2001      	movs	r0, #1
 8008c56:	fa00 f202 	lsl.w	r2, r0, r2
 8008c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	e000e100 	.word	0xe000e100

08008c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	6039      	str	r1, [r7, #0]
 8008c7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	db0a      	blt.n	8008c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	490c      	ldr	r1, [pc, #48]	@ (8008cbc <__NVIC_SetPriority+0x4c>)
 8008c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c8e:	0112      	lsls	r2, r2, #4
 8008c90:	b2d2      	uxtb	r2, r2
 8008c92:	440b      	add	r3, r1
 8008c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c98:	e00a      	b.n	8008cb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	4908      	ldr	r1, [pc, #32]	@ (8008cc0 <__NVIC_SetPriority+0x50>)
 8008ca0:	88fb      	ldrh	r3, [r7, #6]
 8008ca2:	f003 030f 	and.w	r3, r3, #15
 8008ca6:	3b04      	subs	r3, #4
 8008ca8:	0112      	lsls	r2, r2, #4
 8008caa:	b2d2      	uxtb	r2, r2
 8008cac:	440b      	add	r3, r1
 8008cae:	761a      	strb	r2, [r3, #24]
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	e000e100 	.word	0xe000e100
 8008cc0:	e000ed00 	.word	0xe000ed00

08008cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b089      	sub	sp, #36	@ 0x24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	f1c3 0307 	rsb	r3, r3, #7
 8008cde:	2b04      	cmp	r3, #4
 8008ce0:	bf28      	it	cs
 8008ce2:	2304      	movcs	r3, #4
 8008ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	2b06      	cmp	r3, #6
 8008cec:	d902      	bls.n	8008cf4 <NVIC_EncodePriority+0x30>
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	3b03      	subs	r3, #3
 8008cf2:	e000      	b.n	8008cf6 <NVIC_EncodePriority+0x32>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008d02:	43da      	mvns	r2, r3
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	401a      	ands	r2, r3
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	fa01 f303 	lsl.w	r3, r1, r3
 8008d16:	43d9      	mvns	r1, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d1c:	4313      	orrs	r3, r2
         );
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3724      	adds	r7, #36	@ 0x24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
	...

08008d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d3c:	d301      	bcc.n	8008d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e00f      	b.n	8008d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d42:	4a0a      	ldr	r2, [pc, #40]	@ (8008d6c <SysTick_Config+0x40>)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d4a:	210f      	movs	r1, #15
 8008d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d50:	f7ff ff8e 	bl	8008c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d54:	4b05      	ldr	r3, [pc, #20]	@ (8008d6c <SysTick_Config+0x40>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d5a:	4b04      	ldr	r3, [pc, #16]	@ (8008d6c <SysTick_Config+0x40>)
 8008d5c:	2207      	movs	r2, #7
 8008d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	e000e010 	.word	0xe000e010

08008d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff ff29 	bl	8008bd0 <__NVIC_SetPriorityGrouping>
}
 8008d7e:	bf00      	nop
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b086      	sub	sp, #24
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	60b9      	str	r1, [r7, #8]
 8008d90:	607a      	str	r2, [r7, #4]
 8008d92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008d94:	f7ff ff40 	bl	8008c18 <__NVIC_GetPriorityGrouping>
 8008d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	68b9      	ldr	r1, [r7, #8]
 8008d9e:	6978      	ldr	r0, [r7, #20]
 8008da0:	f7ff ff90 	bl	8008cc4 <NVIC_EncodePriority>
 8008da4:	4602      	mov	r2, r0
 8008da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008daa:	4611      	mov	r1, r2
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7ff ff5f 	bl	8008c70 <__NVIC_SetPriority>
}
 8008db2:	bf00      	nop
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7ff ff33 	bl	8008c34 <__NVIC_EnableIRQ>
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff ffa4 	bl	8008d2c <SysTick_Config>
 8008de4:	4603      	mov	r3, r0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008df0:	b480      	push	{r7}
 8008df2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8008df4:	f3bf 8f5f 	dmb	sy
}
 8008df8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008dfa:	4b07      	ldr	r3, [pc, #28]	@ (8008e18 <HAL_MPU_Disable+0x28>)
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfe:	4a06      	ldr	r2, [pc, #24]	@ (8008e18 <HAL_MPU_Disable+0x28>)
 8008e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e04:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008e06:	4b05      	ldr	r3, [pc, #20]	@ (8008e1c <HAL_MPU_Disable+0x2c>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	605a      	str	r2, [r3, #4]
}
 8008e0c:	bf00      	nop
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	e000ed00 	.word	0xe000ed00
 8008e1c:	e000ed90 	.word	0xe000ed90

08008e20 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008e28:	4a0b      	ldr	r2, [pc, #44]	@ (8008e58 <HAL_MPU_Enable+0x38>)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f043 0301 	orr.w	r3, r3, #1
 8008e30:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008e32:	4b0a      	ldr	r3, [pc, #40]	@ (8008e5c <HAL_MPU_Enable+0x3c>)
 8008e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e36:	4a09      	ldr	r2, [pc, #36]	@ (8008e5c <HAL_MPU_Enable+0x3c>)
 8008e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e3c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008e3e:	f3bf 8f4f 	dsb	sy
}
 8008e42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008e44:	f3bf 8f6f 	isb	sy
}
 8008e48:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008e4a:	bf00      	nop
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	e000ed90 	.word	0xe000ed90
 8008e5c:	e000ed00 	.word	0xe000ed00

08008e60 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	785a      	ldrb	r2, [r3, #1]
 8008e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8008edc <HAL_MPU_ConfigRegion+0x7c>)
 8008e6e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8008e70:	4b1a      	ldr	r3, [pc, #104]	@ (8008edc <HAL_MPU_ConfigRegion+0x7c>)
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	4a19      	ldr	r2, [pc, #100]	@ (8008edc <HAL_MPU_ConfigRegion+0x7c>)
 8008e76:	f023 0301 	bic.w	r3, r3, #1
 8008e7a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8008e7c:	4a17      	ldr	r2, [pc, #92]	@ (8008edc <HAL_MPU_ConfigRegion+0x7c>)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	7b1b      	ldrb	r3, [r3, #12]
 8008e88:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7adb      	ldrb	r3, [r3, #11]
 8008e8e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008e90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	7a9b      	ldrb	r3, [r3, #10]
 8008e96:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008e98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7b5b      	ldrb	r3, [r3, #13]
 8008e9e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008ea0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7b9b      	ldrb	r3, [r3, #14]
 8008ea6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008ea8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	7bdb      	ldrb	r3, [r3, #15]
 8008eae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008eb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	7a5b      	ldrb	r3, [r3, #9]
 8008eb6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	7a1b      	ldrb	r3, [r3, #8]
 8008ebe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008ec0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	7812      	ldrb	r2, [r2, #0]
 8008ec6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008ec8:	4a04      	ldr	r2, [pc, #16]	@ (8008edc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008eca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008ecc:	6113      	str	r3, [r2, #16]
}
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	e000ed90 	.word	0xe000ed90

08008ee0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e014      	b.n	8008f1c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	791b      	ldrb	r3, [r3, #4]
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d105      	bne.n	8008f08 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7f9 faa8 	bl	8002458 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e0a2      	b.n	8009082 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	795b      	ldrb	r3, [r3, #5]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_DAC_Start_DMA+0x24>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e09c      	b.n	8009082 <HAL_DAC_Start_DMA+0x15e>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2202      	movs	r2, #2
 8008f52:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d129      	bne.n	8008fae <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	4a4b      	ldr	r2, [pc, #300]	@ (800908c <HAL_DAC_Start_DMA+0x168>)
 8008f60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	4a4a      	ldr	r2, [pc, #296]	@ (8009090 <HAL_DAC_Start_DMA+0x16c>)
 8008f68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	4a49      	ldr	r2, [pc, #292]	@ (8009094 <HAL_DAC_Start_DMA+0x170>)
 8008f70:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008f80:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d003      	beq.n	8008f90 <HAL_DAC_Start_DMA+0x6c>
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	2b04      	cmp	r3, #4
 8008f8c:	d005      	beq.n	8008f9a <HAL_DAC_Start_DMA+0x76>
 8008f8e:	e009      	b.n	8008fa4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3308      	adds	r3, #8
 8008f96:	613b      	str	r3, [r7, #16]
        break;
 8008f98:	e033      	b.n	8009002 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	330c      	adds	r3, #12
 8008fa0:	613b      	str	r3, [r7, #16]
        break;
 8008fa2:	e02e      	b.n	8009002 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3310      	adds	r3, #16
 8008faa:	613b      	str	r3, [r7, #16]
        break;
 8008fac:	e029      	b.n	8009002 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	4a39      	ldr	r2, [pc, #228]	@ (8009098 <HAL_DAC_Start_DMA+0x174>)
 8008fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	4a38      	ldr	r2, [pc, #224]	@ (800909c <HAL_DAC_Start_DMA+0x178>)
 8008fbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	4a37      	ldr	r2, [pc, #220]	@ (80090a0 <HAL_DAC_Start_DMA+0x17c>)
 8008fc4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008fd4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d003      	beq.n	8008fe4 <HAL_DAC_Start_DMA+0xc0>
 8008fdc:	6a3b      	ldr	r3, [r7, #32]
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	d005      	beq.n	8008fee <HAL_DAC_Start_DMA+0xca>
 8008fe2:	e009      	b.n	8008ff8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3314      	adds	r3, #20
 8008fea:	613b      	str	r3, [r7, #16]
        break;
 8008fec:	e009      	b.n	8009002 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3318      	adds	r3, #24
 8008ff4:	613b      	str	r3, [r7, #16]
        break;
 8008ff6:	e004      	b.n	8009002 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	331c      	adds	r3, #28
 8008ffe:	613b      	str	r3, [r7, #16]
        break;
 8009000:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d111      	bne.n	800902c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009016:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6898      	ldr	r0, [r3, #8]
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	f000 fd6d 	bl	8009b00 <HAL_DMA_Start_IT>
 8009026:	4603      	mov	r3, r0
 8009028:	75fb      	strb	r3, [r7, #23]
 800902a:	e010      	b.n	800904e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800903a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	68d8      	ldr	r0, [r3, #12]
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	f000 fd5b 	bl	8009b00 <HAL_DMA_Start_IT>
 800904a:	4603      	mov	r3, r0
 800904c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009054:	7dfb      	ldrb	r3, [r7, #23]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10c      	bne.n	8009074 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6819      	ldr	r1, [r3, #0]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	f003 0310 	and.w	r3, r3, #16
 8009066:	2201      	movs	r2, #1
 8009068:	409a      	lsls	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	e005      	b.n	8009080 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	f043 0204 	orr.w	r2, r3, #4
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009080:	7dfb      	ldrb	r3, [r7, #23]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	0800933d 	.word	0x0800933d
 8009090:	0800935f 	.word	0x0800935f
 8009094:	0800937b 	.word	0x0800937b
 8009098:	080093e5 	.word	0x080093e5
 800909c:	08009407 	.word	0x08009407
 80090a0:	08009423 	.word	0x08009423

080090a4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08a      	sub	sp, #40	@ 0x28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <HAL_DAC_ConfigChannel+0x1e>
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e12a      	b.n	8009330 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	795b      	ldrb	r3, [r3, #5]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d101      	bne.n	80090e6 <HAL_DAC_ConfigChannel+0x2e>
 80090e2:	2302      	movs	r3, #2
 80090e4:	e124      	b.n	8009330 <HAL_DAC_ConfigChannel+0x278>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2201      	movs	r2, #1
 80090ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2202      	movs	r2, #2
 80090f0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d17a      	bne.n	80091f0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80090fa:	f7fe f9c5 	bl	8007488 <HAL_GetTick>
 80090fe:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d13d      	bne.n	8009182 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009106:	e018      	b.n	800913a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009108:	f7fe f9be 	bl	8007488 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	2b01      	cmp	r3, #1
 8009114:	d911      	bls.n	800913a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800911c:	4b86      	ldr	r3, [pc, #536]	@ (8009338 <HAL_DAC_ConfigChannel+0x280>)
 800911e:	4013      	ands	r3, r2
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00a      	beq.n	800913a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	f043 0208 	orr.w	r2, r3, #8
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2203      	movs	r2, #3
 8009134:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e0fa      	b.n	8009330 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009140:	4b7d      	ldr	r3, [pc, #500]	@ (8009338 <HAL_DAC_ConfigChannel+0x280>)
 8009142:	4013      	ands	r3, r2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1df      	bne.n	8009108 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	6992      	ldr	r2, [r2, #24]
 8009150:	641a      	str	r2, [r3, #64]	@ 0x40
 8009152:	e020      	b.n	8009196 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009154:	f7fe f998 	bl	8007488 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	2b01      	cmp	r3, #1
 8009160:	d90f      	bls.n	8009182 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009168:	2b00      	cmp	r3, #0
 800916a:	da0a      	bge.n	8009182 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	f043 0208 	orr.w	r2, r3, #8
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2203      	movs	r2, #3
 800917c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e0d6      	b.n	8009330 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009188:	2b00      	cmp	r3, #0
 800918a:	dbe3      	blt.n	8009154 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	6992      	ldr	r2, [r2, #24]
 8009194:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f003 0310 	and.w	r3, r3, #16
 80091a2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80091a6:	fa01 f303 	lsl.w	r3, r1, r3
 80091aa:	43db      	mvns	r3, r3
 80091ac:	ea02 0103 	and.w	r1, r2, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	69da      	ldr	r2, [r3, #28]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f003 0310 	and.w	r3, r3, #16
 80091ba:	409a      	lsls	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	430a      	orrs	r2, r1
 80091c2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f003 0310 	and.w	r3, r3, #16
 80091d0:	21ff      	movs	r1, #255	@ 0xff
 80091d2:	fa01 f303 	lsl.w	r3, r1, r3
 80091d6:	43db      	mvns	r3, r3
 80091d8:	ea02 0103 	and.w	r1, r2, r3
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	6a1a      	ldr	r2, [r3, #32]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f003 0310 	and.w	r3, r3, #16
 80091e6:	409a      	lsls	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d11d      	bne.n	8009234 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091fe:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f003 0310 	and.w	r3, r3, #16
 8009206:	221f      	movs	r2, #31
 8009208:	fa02 f303 	lsl.w	r3, r2, r3
 800920c:	43db      	mvns	r3, r3
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	4013      	ands	r3, r2
 8009212:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	fa02 f303 	lsl.w	r3, r2, r3
 8009226:	69ba      	ldr	r2, [r7, #24]
 8009228:	4313      	orrs	r3, r2
 800922a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	69ba      	ldr	r2, [r7, #24]
 8009232:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800923a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f003 0310 	and.w	r3, r3, #16
 8009242:	2207      	movs	r2, #7
 8009244:	fa02 f303 	lsl.w	r3, r2, r3
 8009248:	43db      	mvns	r3, r3
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	4013      	ands	r3, r2
 800924e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d102      	bne.n	800925e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8009258:	2300      	movs	r3, #0
 800925a:	627b      	str	r3, [r7, #36]	@ 0x24
 800925c:	e00f      	b.n	800927e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	2b02      	cmp	r3, #2
 8009264:	d102      	bne.n	800926c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009266:	2301      	movs	r3, #1
 8009268:	627b      	str	r3, [r7, #36]	@ 0x24
 800926a:	e008      	b.n	800927e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d102      	bne.n	800927a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009274:	2301      	movs	r3, #1
 8009276:	627b      	str	r3, [r7, #36]	@ 0x24
 8009278:	e001      	b.n	800927e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800927a:	2300      	movs	r3, #0
 800927c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	4313      	orrs	r3, r2
 8009288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800928a:	4313      	orrs	r3, r2
 800928c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f003 0310 	and.w	r3, r3, #16
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	fa02 f303 	lsl.w	r3, r2, r3
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	4313      	orrs	r3, r2
 800929e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6819      	ldr	r1, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f003 0310 	and.w	r3, r3, #16
 80092b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80092b8:	fa02 f303 	lsl.w	r3, r2, r3
 80092bc:	43da      	mvns	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	400a      	ands	r2, r1
 80092c4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f003 0310 	and.w	r3, r3, #16
 80092d4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80092d8:	fa02 f303 	lsl.w	r3, r2, r3
 80092dc:	43db      	mvns	r3, r3
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	4013      	ands	r3, r2
 80092e2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f003 0310 	and.w	r3, r3, #16
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	fa02 f303 	lsl.w	r3, r2, r3
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6819      	ldr	r1, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f003 0310 	and.w	r3, r3, #16
 8009310:	22c0      	movs	r2, #192	@ 0xc0
 8009312:	fa02 f303 	lsl.w	r3, r2, r3
 8009316:	43da      	mvns	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	400a      	ands	r2, r1
 800931e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2201      	movs	r2, #1
 8009324:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800932c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009330:	4618      	mov	r0, r3
 8009332:	3728      	adds	r7, #40	@ 0x28
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	20008000 	.word	0x20008000

0800933c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009348:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7f7 ffc0 	bl	80012d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	711a      	strb	r2, [r3, #4]
}
 8009356:	bf00      	nop
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f7f7 ffa1 	bl	80012b4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009372:	bf00      	nop
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009386:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	f043 0204 	orr.w	r2, r3, #4
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f7ff fe85 	bl	80090a4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2201      	movs	r2, #1
 800939e:	711a      	strb	r2, [r3, #4]
}
 80093a0:	bf00      	nop
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f7ff ffd8 	bl	80093a8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	711a      	strb	r2, [r3, #4]
}
 80093fe:	bf00      	nop
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009412:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff ffd1 	bl	80093bc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800941a:	bf00      	nop
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800942e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	f043 0204 	orr.w	r2, r3, #4
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7ff ffc7 	bl	80093d0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2201      	movs	r2, #1
 8009446:	711a      	strb	r2, [r3, #4]
}
 8009448:	bf00      	nop
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009458:	f7fe f816 	bl	8007488 <HAL_GetTick>
 800945c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e312      	b.n	8009a8e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a66      	ldr	r2, [pc, #408]	@ (8009608 <HAL_DMA_Init+0x1b8>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d04a      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a65      	ldr	r2, [pc, #404]	@ (800960c <HAL_DMA_Init+0x1bc>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d045      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a63      	ldr	r2, [pc, #396]	@ (8009610 <HAL_DMA_Init+0x1c0>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d040      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a62      	ldr	r2, [pc, #392]	@ (8009614 <HAL_DMA_Init+0x1c4>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d03b      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a60      	ldr	r2, [pc, #384]	@ (8009618 <HAL_DMA_Init+0x1c8>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d036      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a5f      	ldr	r2, [pc, #380]	@ (800961c <HAL_DMA_Init+0x1cc>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d031      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a5d      	ldr	r2, [pc, #372]	@ (8009620 <HAL_DMA_Init+0x1d0>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d02c      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a5c      	ldr	r2, [pc, #368]	@ (8009624 <HAL_DMA_Init+0x1d4>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d027      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a5a      	ldr	r2, [pc, #360]	@ (8009628 <HAL_DMA_Init+0x1d8>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d022      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a59      	ldr	r2, [pc, #356]	@ (800962c <HAL_DMA_Init+0x1dc>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d01d      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a57      	ldr	r2, [pc, #348]	@ (8009630 <HAL_DMA_Init+0x1e0>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d018      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a56      	ldr	r2, [pc, #344]	@ (8009634 <HAL_DMA_Init+0x1e4>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d013      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a54      	ldr	r2, [pc, #336]	@ (8009638 <HAL_DMA_Init+0x1e8>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d00e      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a53      	ldr	r2, [pc, #332]	@ (800963c <HAL_DMA_Init+0x1ec>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d009      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a51      	ldr	r2, [pc, #324]	@ (8009640 <HAL_DMA_Init+0x1f0>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d004      	beq.n	8009508 <HAL_DMA_Init+0xb8>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a50      	ldr	r2, [pc, #320]	@ (8009644 <HAL_DMA_Init+0x1f4>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d101      	bne.n	800950c <HAL_DMA_Init+0xbc>
 8009508:	2301      	movs	r3, #1
 800950a:	e000      	b.n	800950e <HAL_DMA_Init+0xbe>
 800950c:	2300      	movs	r3, #0
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 813c 	beq.w	800978c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2202      	movs	r2, #2
 8009518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a37      	ldr	r2, [pc, #220]	@ (8009608 <HAL_DMA_Init+0x1b8>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d04a      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a36      	ldr	r2, [pc, #216]	@ (800960c <HAL_DMA_Init+0x1bc>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d045      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a34      	ldr	r2, [pc, #208]	@ (8009610 <HAL_DMA_Init+0x1c0>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d040      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a33      	ldr	r2, [pc, #204]	@ (8009614 <HAL_DMA_Init+0x1c4>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d03b      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a31      	ldr	r2, [pc, #196]	@ (8009618 <HAL_DMA_Init+0x1c8>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d036      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a30      	ldr	r2, [pc, #192]	@ (800961c <HAL_DMA_Init+0x1cc>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d031      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a2e      	ldr	r2, [pc, #184]	@ (8009620 <HAL_DMA_Init+0x1d0>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d02c      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a2d      	ldr	r2, [pc, #180]	@ (8009624 <HAL_DMA_Init+0x1d4>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d027      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a2b      	ldr	r2, [pc, #172]	@ (8009628 <HAL_DMA_Init+0x1d8>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d022      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a2a      	ldr	r2, [pc, #168]	@ (800962c <HAL_DMA_Init+0x1dc>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d01d      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a28      	ldr	r2, [pc, #160]	@ (8009630 <HAL_DMA_Init+0x1e0>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d018      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a27      	ldr	r2, [pc, #156]	@ (8009634 <HAL_DMA_Init+0x1e4>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d013      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a25      	ldr	r2, [pc, #148]	@ (8009638 <HAL_DMA_Init+0x1e8>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d00e      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a24      	ldr	r2, [pc, #144]	@ (800963c <HAL_DMA_Init+0x1ec>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d009      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a22      	ldr	r2, [pc, #136]	@ (8009640 <HAL_DMA_Init+0x1f0>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d004      	beq.n	80095c4 <HAL_DMA_Init+0x174>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a21      	ldr	r2, [pc, #132]	@ (8009644 <HAL_DMA_Init+0x1f4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d108      	bne.n	80095d6 <HAL_DMA_Init+0x186>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f022 0201 	bic.w	r2, r2, #1
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	e007      	b.n	80095e6 <HAL_DMA_Init+0x196>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 0201 	bic.w	r2, r2, #1
 80095e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80095e6:	e02f      	b.n	8009648 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80095e8:	f7fd ff4e 	bl	8007488 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	d928      	bls.n	8009648 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2220      	movs	r2, #32
 80095fa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2203      	movs	r2, #3
 8009600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e242      	b.n	8009a8e <HAL_DMA_Init+0x63e>
 8009608:	40020010 	.word	0x40020010
 800960c:	40020028 	.word	0x40020028
 8009610:	40020040 	.word	0x40020040
 8009614:	40020058 	.word	0x40020058
 8009618:	40020070 	.word	0x40020070
 800961c:	40020088 	.word	0x40020088
 8009620:	400200a0 	.word	0x400200a0
 8009624:	400200b8 	.word	0x400200b8
 8009628:	40020410 	.word	0x40020410
 800962c:	40020428 	.word	0x40020428
 8009630:	40020440 	.word	0x40020440
 8009634:	40020458 	.word	0x40020458
 8009638:	40020470 	.word	0x40020470
 800963c:	40020488 	.word	0x40020488
 8009640:	400204a0 	.word	0x400204a0
 8009644:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1c8      	bne.n	80095e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	4b83      	ldr	r3, [pc, #524]	@ (8009870 <HAL_DMA_Init+0x420>)
 8009662:	4013      	ands	r3, r2
 8009664:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800966e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800967a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009686:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	4313      	orrs	r3, r2
 8009692:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009698:	2b04      	cmp	r3, #4
 800969a:	d107      	bne.n	80096ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a4:	4313      	orrs	r3, r2
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	2b28      	cmp	r3, #40	@ 0x28
 80096b2:	d903      	bls.n	80096bc <HAL_DMA_Init+0x26c>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80096ba:	d91f      	bls.n	80096fc <HAL_DMA_Init+0x2ac>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80096c2:	d903      	bls.n	80096cc <HAL_DMA_Init+0x27c>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	2b42      	cmp	r3, #66	@ 0x42
 80096ca:	d917      	bls.n	80096fc <HAL_DMA_Init+0x2ac>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	2b46      	cmp	r3, #70	@ 0x46
 80096d2:	d903      	bls.n	80096dc <HAL_DMA_Init+0x28c>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	2b48      	cmp	r3, #72	@ 0x48
 80096da:	d90f      	bls.n	80096fc <HAL_DMA_Init+0x2ac>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80096e2:	d903      	bls.n	80096ec <HAL_DMA_Init+0x29c>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	2b52      	cmp	r3, #82	@ 0x52
 80096ea:	d907      	bls.n	80096fc <HAL_DMA_Init+0x2ac>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2b73      	cmp	r3, #115	@ 0x73
 80096f2:	d905      	bls.n	8009700 <HAL_DMA_Init+0x2b0>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	2b77      	cmp	r3, #119	@ 0x77
 80096fa:	d801      	bhi.n	8009700 <HAL_DMA_Init+0x2b0>
 80096fc:	2301      	movs	r3, #1
 80096fe:	e000      	b.n	8009702 <HAL_DMA_Init+0x2b2>
 8009700:	2300      	movs	r3, #0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d003      	beq.n	800970e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800970c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f023 0307 	bic.w	r3, r3, #7
 8009724:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	4313      	orrs	r3, r2
 800972e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009734:	2b04      	cmp	r3, #4
 8009736:	d117      	bne.n	8009768 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	4313      	orrs	r3, r2
 8009740:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00e      	beq.n	8009768 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 fdca 	bl	800b2e4 <DMA_CheckFifoParam>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d008      	beq.n	8009768 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2240      	movs	r2, #64	@ 0x40
 800975a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e192      	b.n	8009a8e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f001 fd05 	bl	800b180 <DMA_CalcBaseAndBitshift>
 8009776:	4603      	mov	r3, r0
 8009778:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800977e:	f003 031f 	and.w	r3, r3, #31
 8009782:	223f      	movs	r2, #63	@ 0x3f
 8009784:	409a      	lsls	r2, r3
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	609a      	str	r2, [r3, #8]
 800978a:	e0c8      	b.n	800991e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a38      	ldr	r2, [pc, #224]	@ (8009874 <HAL_DMA_Init+0x424>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d022      	beq.n	80097dc <HAL_DMA_Init+0x38c>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a37      	ldr	r2, [pc, #220]	@ (8009878 <HAL_DMA_Init+0x428>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d01d      	beq.n	80097dc <HAL_DMA_Init+0x38c>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a35      	ldr	r2, [pc, #212]	@ (800987c <HAL_DMA_Init+0x42c>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d018      	beq.n	80097dc <HAL_DMA_Init+0x38c>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a34      	ldr	r2, [pc, #208]	@ (8009880 <HAL_DMA_Init+0x430>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d013      	beq.n	80097dc <HAL_DMA_Init+0x38c>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a32      	ldr	r2, [pc, #200]	@ (8009884 <HAL_DMA_Init+0x434>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d00e      	beq.n	80097dc <HAL_DMA_Init+0x38c>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a31      	ldr	r2, [pc, #196]	@ (8009888 <HAL_DMA_Init+0x438>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d009      	beq.n	80097dc <HAL_DMA_Init+0x38c>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a2f      	ldr	r2, [pc, #188]	@ (800988c <HAL_DMA_Init+0x43c>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d004      	beq.n	80097dc <HAL_DMA_Init+0x38c>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a2e      	ldr	r2, [pc, #184]	@ (8009890 <HAL_DMA_Init+0x440>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d101      	bne.n	80097e0 <HAL_DMA_Init+0x390>
 80097dc:	2301      	movs	r3, #1
 80097de:	e000      	b.n	80097e2 <HAL_DMA_Init+0x392>
 80097e0:	2300      	movs	r3, #0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 8092 	beq.w	800990c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a21      	ldr	r2, [pc, #132]	@ (8009874 <HAL_DMA_Init+0x424>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d021      	beq.n	8009836 <HAL_DMA_Init+0x3e6>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a20      	ldr	r2, [pc, #128]	@ (8009878 <HAL_DMA_Init+0x428>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d01c      	beq.n	8009836 <HAL_DMA_Init+0x3e6>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a1e      	ldr	r2, [pc, #120]	@ (800987c <HAL_DMA_Init+0x42c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d017      	beq.n	8009836 <HAL_DMA_Init+0x3e6>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a1d      	ldr	r2, [pc, #116]	@ (8009880 <HAL_DMA_Init+0x430>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d012      	beq.n	8009836 <HAL_DMA_Init+0x3e6>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a1b      	ldr	r2, [pc, #108]	@ (8009884 <HAL_DMA_Init+0x434>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00d      	beq.n	8009836 <HAL_DMA_Init+0x3e6>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a1a      	ldr	r2, [pc, #104]	@ (8009888 <HAL_DMA_Init+0x438>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d008      	beq.n	8009836 <HAL_DMA_Init+0x3e6>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a18      	ldr	r2, [pc, #96]	@ (800988c <HAL_DMA_Init+0x43c>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d003      	beq.n	8009836 <HAL_DMA_Init+0x3e6>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a17      	ldr	r2, [pc, #92]	@ (8009890 <HAL_DMA_Init+0x440>)
 8009834:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2202      	movs	r2, #2
 800983a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	4b10      	ldr	r3, [pc, #64]	@ (8009894 <HAL_DMA_Init+0x444>)
 8009852:	4013      	ands	r3, r2
 8009854:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	2b40      	cmp	r3, #64	@ 0x40
 800985c:	d01c      	beq.n	8009898 <HAL_DMA_Init+0x448>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	2b80      	cmp	r3, #128	@ 0x80
 8009864:	d102      	bne.n	800986c <HAL_DMA_Init+0x41c>
 8009866:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800986a:	e016      	b.n	800989a <HAL_DMA_Init+0x44a>
 800986c:	2300      	movs	r3, #0
 800986e:	e014      	b.n	800989a <HAL_DMA_Init+0x44a>
 8009870:	fe10803f 	.word	0xfe10803f
 8009874:	58025408 	.word	0x58025408
 8009878:	5802541c 	.word	0x5802541c
 800987c:	58025430 	.word	0x58025430
 8009880:	58025444 	.word	0x58025444
 8009884:	58025458 	.word	0x58025458
 8009888:	5802546c 	.word	0x5802546c
 800988c:	58025480 	.word	0x58025480
 8009890:	58025494 	.word	0x58025494
 8009894:	fffe000f 	.word	0xfffe000f
 8009898:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	68d2      	ldr	r2, [r2, #12]
 800989e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80098a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80098a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80098b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80098b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80098c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80098c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	461a      	mov	r2, r3
 80098de:	4b6e      	ldr	r3, [pc, #440]	@ (8009a98 <HAL_DMA_Init+0x648>)
 80098e0:	4413      	add	r3, r2
 80098e2:	4a6e      	ldr	r2, [pc, #440]	@ (8009a9c <HAL_DMA_Init+0x64c>)
 80098e4:	fba2 2303 	umull	r2, r3, r2, r3
 80098e8:	091b      	lsrs	r3, r3, #4
 80098ea:	009a      	lsls	r2, r3, #2
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f001 fc45 	bl	800b180 <DMA_CalcBaseAndBitshift>
 80098f6:	4603      	mov	r3, r0
 80098f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098fe:	f003 031f 	and.w	r3, r3, #31
 8009902:	2201      	movs	r2, #1
 8009904:	409a      	lsls	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	605a      	str	r2, [r3, #4]
 800990a:	e008      	b.n	800991e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2240      	movs	r2, #64	@ 0x40
 8009910:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2203      	movs	r2, #3
 8009916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e0b7      	b.n	8009a8e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a5f      	ldr	r2, [pc, #380]	@ (8009aa0 <HAL_DMA_Init+0x650>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d072      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a5d      	ldr	r2, [pc, #372]	@ (8009aa4 <HAL_DMA_Init+0x654>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d06d      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a5c      	ldr	r2, [pc, #368]	@ (8009aa8 <HAL_DMA_Init+0x658>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d068      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a5a      	ldr	r2, [pc, #360]	@ (8009aac <HAL_DMA_Init+0x65c>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d063      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a59      	ldr	r2, [pc, #356]	@ (8009ab0 <HAL_DMA_Init+0x660>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d05e      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a57      	ldr	r2, [pc, #348]	@ (8009ab4 <HAL_DMA_Init+0x664>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d059      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a56      	ldr	r2, [pc, #344]	@ (8009ab8 <HAL_DMA_Init+0x668>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d054      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a54      	ldr	r2, [pc, #336]	@ (8009abc <HAL_DMA_Init+0x66c>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d04f      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a53      	ldr	r2, [pc, #332]	@ (8009ac0 <HAL_DMA_Init+0x670>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d04a      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a51      	ldr	r2, [pc, #324]	@ (8009ac4 <HAL_DMA_Init+0x674>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d045      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a50      	ldr	r2, [pc, #320]	@ (8009ac8 <HAL_DMA_Init+0x678>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d040      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a4e      	ldr	r2, [pc, #312]	@ (8009acc <HAL_DMA_Init+0x67c>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d03b      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a4d      	ldr	r2, [pc, #308]	@ (8009ad0 <HAL_DMA_Init+0x680>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d036      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a4b      	ldr	r2, [pc, #300]	@ (8009ad4 <HAL_DMA_Init+0x684>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d031      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a4a      	ldr	r2, [pc, #296]	@ (8009ad8 <HAL_DMA_Init+0x688>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d02c      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a48      	ldr	r2, [pc, #288]	@ (8009adc <HAL_DMA_Init+0x68c>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d027      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a47      	ldr	r2, [pc, #284]	@ (8009ae0 <HAL_DMA_Init+0x690>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d022      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a45      	ldr	r2, [pc, #276]	@ (8009ae4 <HAL_DMA_Init+0x694>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d01d      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a44      	ldr	r2, [pc, #272]	@ (8009ae8 <HAL_DMA_Init+0x698>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d018      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a42      	ldr	r2, [pc, #264]	@ (8009aec <HAL_DMA_Init+0x69c>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d013      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a41      	ldr	r2, [pc, #260]	@ (8009af0 <HAL_DMA_Init+0x6a0>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00e      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a3f      	ldr	r2, [pc, #252]	@ (8009af4 <HAL_DMA_Init+0x6a4>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d009      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a3e      	ldr	r2, [pc, #248]	@ (8009af8 <HAL_DMA_Init+0x6a8>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d004      	beq.n	8009a0e <HAL_DMA_Init+0x5be>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a3c      	ldr	r2, [pc, #240]	@ (8009afc <HAL_DMA_Init+0x6ac>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d101      	bne.n	8009a12 <HAL_DMA_Init+0x5c2>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e000      	b.n	8009a14 <HAL_DMA_Init+0x5c4>
 8009a12:	2300      	movs	r3, #0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d032      	beq.n	8009a7e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 fcdf 	bl	800b3dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	2b80      	cmp	r3, #128	@ 0x80
 8009a24:	d102      	bne.n	8009a2c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a34:	b2d2      	uxtb	r2, r2
 8009a36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009a40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d010      	beq.n	8009a6c <HAL_DMA_Init+0x61c>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	2b08      	cmp	r3, #8
 8009a50:	d80c      	bhi.n	8009a6c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f001 fd5c 	bl	800b510 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009a68:	605a      	str	r2, [r3, #4]
 8009a6a:	e008      	b.n	8009a7e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	a7fdabf8 	.word	0xa7fdabf8
 8009a9c:	cccccccd 	.word	0xcccccccd
 8009aa0:	40020010 	.word	0x40020010
 8009aa4:	40020028 	.word	0x40020028
 8009aa8:	40020040 	.word	0x40020040
 8009aac:	40020058 	.word	0x40020058
 8009ab0:	40020070 	.word	0x40020070
 8009ab4:	40020088 	.word	0x40020088
 8009ab8:	400200a0 	.word	0x400200a0
 8009abc:	400200b8 	.word	0x400200b8
 8009ac0:	40020410 	.word	0x40020410
 8009ac4:	40020428 	.word	0x40020428
 8009ac8:	40020440 	.word	0x40020440
 8009acc:	40020458 	.word	0x40020458
 8009ad0:	40020470 	.word	0x40020470
 8009ad4:	40020488 	.word	0x40020488
 8009ad8:	400204a0 	.word	0x400204a0
 8009adc:	400204b8 	.word	0x400204b8
 8009ae0:	58025408 	.word	0x58025408
 8009ae4:	5802541c 	.word	0x5802541c
 8009ae8:	58025430 	.word	0x58025430
 8009aec:	58025444 	.word	0x58025444
 8009af0:	58025458 	.word	0x58025458
 8009af4:	5802546c 	.word	0x5802546c
 8009af8:	58025480 	.word	0x58025480
 8009afc:	58025494 	.word	0x58025494

08009b00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e226      	b.n	8009f6a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d101      	bne.n	8009b2a <HAL_DMA_Start_IT+0x2a>
 8009b26:	2302      	movs	r3, #2
 8009b28:	e21f      	b.n	8009f6a <HAL_DMA_Start_IT+0x46a>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	f040 820a 	bne.w	8009f54 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2202      	movs	r2, #2
 8009b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a68      	ldr	r2, [pc, #416]	@ (8009cf4 <HAL_DMA_Start_IT+0x1f4>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d04a      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a66      	ldr	r2, [pc, #408]	@ (8009cf8 <HAL_DMA_Start_IT+0x1f8>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d045      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a65      	ldr	r2, [pc, #404]	@ (8009cfc <HAL_DMA_Start_IT+0x1fc>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d040      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a63      	ldr	r2, [pc, #396]	@ (8009d00 <HAL_DMA_Start_IT+0x200>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d03b      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a62      	ldr	r2, [pc, #392]	@ (8009d04 <HAL_DMA_Start_IT+0x204>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d036      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a60      	ldr	r2, [pc, #384]	@ (8009d08 <HAL_DMA_Start_IT+0x208>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d031      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a5f      	ldr	r2, [pc, #380]	@ (8009d0c <HAL_DMA_Start_IT+0x20c>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d02c      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a5d      	ldr	r2, [pc, #372]	@ (8009d10 <HAL_DMA_Start_IT+0x210>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d027      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a5c      	ldr	r2, [pc, #368]	@ (8009d14 <HAL_DMA_Start_IT+0x214>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d022      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a5a      	ldr	r2, [pc, #360]	@ (8009d18 <HAL_DMA_Start_IT+0x218>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d01d      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a59      	ldr	r2, [pc, #356]	@ (8009d1c <HAL_DMA_Start_IT+0x21c>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d018      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a57      	ldr	r2, [pc, #348]	@ (8009d20 <HAL_DMA_Start_IT+0x220>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d013      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a56      	ldr	r2, [pc, #344]	@ (8009d24 <HAL_DMA_Start_IT+0x224>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d00e      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a54      	ldr	r2, [pc, #336]	@ (8009d28 <HAL_DMA_Start_IT+0x228>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d009      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a53      	ldr	r2, [pc, #332]	@ (8009d2c <HAL_DMA_Start_IT+0x22c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d004      	beq.n	8009bee <HAL_DMA_Start_IT+0xee>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a51      	ldr	r2, [pc, #324]	@ (8009d30 <HAL_DMA_Start_IT+0x230>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d108      	bne.n	8009c00 <HAL_DMA_Start_IT+0x100>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f022 0201 	bic.w	r2, r2, #1
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	e007      	b.n	8009c10 <HAL_DMA_Start_IT+0x110>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f022 0201 	bic.w	r2, r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	68b9      	ldr	r1, [r7, #8]
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f001 f906 	bl	800ae28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a34      	ldr	r2, [pc, #208]	@ (8009cf4 <HAL_DMA_Start_IT+0x1f4>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d04a      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a33      	ldr	r2, [pc, #204]	@ (8009cf8 <HAL_DMA_Start_IT+0x1f8>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d045      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a31      	ldr	r2, [pc, #196]	@ (8009cfc <HAL_DMA_Start_IT+0x1fc>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d040      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a30      	ldr	r2, [pc, #192]	@ (8009d00 <HAL_DMA_Start_IT+0x200>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d03b      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a2e      	ldr	r2, [pc, #184]	@ (8009d04 <HAL_DMA_Start_IT+0x204>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d036      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a2d      	ldr	r2, [pc, #180]	@ (8009d08 <HAL_DMA_Start_IT+0x208>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d031      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8009d0c <HAL_DMA_Start_IT+0x20c>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d02c      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a2a      	ldr	r2, [pc, #168]	@ (8009d10 <HAL_DMA_Start_IT+0x210>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d027      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a28      	ldr	r2, [pc, #160]	@ (8009d14 <HAL_DMA_Start_IT+0x214>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d022      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a27      	ldr	r2, [pc, #156]	@ (8009d18 <HAL_DMA_Start_IT+0x218>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d01d      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a25      	ldr	r2, [pc, #148]	@ (8009d1c <HAL_DMA_Start_IT+0x21c>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d018      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a24      	ldr	r2, [pc, #144]	@ (8009d20 <HAL_DMA_Start_IT+0x220>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d013      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a22      	ldr	r2, [pc, #136]	@ (8009d24 <HAL_DMA_Start_IT+0x224>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d00e      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a21      	ldr	r2, [pc, #132]	@ (8009d28 <HAL_DMA_Start_IT+0x228>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d009      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a1f      	ldr	r2, [pc, #124]	@ (8009d2c <HAL_DMA_Start_IT+0x22c>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d004      	beq.n	8009cbc <HAL_DMA_Start_IT+0x1bc>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8009d30 <HAL_DMA_Start_IT+0x230>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d101      	bne.n	8009cc0 <HAL_DMA_Start_IT+0x1c0>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e000      	b.n	8009cc2 <HAL_DMA_Start_IT+0x1c2>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d036      	beq.n	8009d34 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f023 021e 	bic.w	r2, r3, #30
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f042 0216 	orr.w	r2, r2, #22
 8009cd8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d03e      	beq.n	8009d60 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f042 0208 	orr.w	r2, r2, #8
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	e035      	b.n	8009d60 <HAL_DMA_Start_IT+0x260>
 8009cf4:	40020010 	.word	0x40020010
 8009cf8:	40020028 	.word	0x40020028
 8009cfc:	40020040 	.word	0x40020040
 8009d00:	40020058 	.word	0x40020058
 8009d04:	40020070 	.word	0x40020070
 8009d08:	40020088 	.word	0x40020088
 8009d0c:	400200a0 	.word	0x400200a0
 8009d10:	400200b8 	.word	0x400200b8
 8009d14:	40020410 	.word	0x40020410
 8009d18:	40020428 	.word	0x40020428
 8009d1c:	40020440 	.word	0x40020440
 8009d20:	40020458 	.word	0x40020458
 8009d24:	40020470 	.word	0x40020470
 8009d28:	40020488 	.word	0x40020488
 8009d2c:	400204a0 	.word	0x400204a0
 8009d30:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f023 020e 	bic.w	r2, r3, #14
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f042 020a 	orr.w	r2, r2, #10
 8009d46:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d007      	beq.n	8009d60 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f042 0204 	orr.w	r2, r2, #4
 8009d5e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a83      	ldr	r2, [pc, #524]	@ (8009f74 <HAL_DMA_Start_IT+0x474>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d072      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a82      	ldr	r2, [pc, #520]	@ (8009f78 <HAL_DMA_Start_IT+0x478>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d06d      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a80      	ldr	r2, [pc, #512]	@ (8009f7c <HAL_DMA_Start_IT+0x47c>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d068      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a7f      	ldr	r2, [pc, #508]	@ (8009f80 <HAL_DMA_Start_IT+0x480>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d063      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a7d      	ldr	r2, [pc, #500]	@ (8009f84 <HAL_DMA_Start_IT+0x484>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d05e      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a7c      	ldr	r2, [pc, #496]	@ (8009f88 <HAL_DMA_Start_IT+0x488>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d059      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a7a      	ldr	r2, [pc, #488]	@ (8009f8c <HAL_DMA_Start_IT+0x48c>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d054      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a79      	ldr	r2, [pc, #484]	@ (8009f90 <HAL_DMA_Start_IT+0x490>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d04f      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a77      	ldr	r2, [pc, #476]	@ (8009f94 <HAL_DMA_Start_IT+0x494>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d04a      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a76      	ldr	r2, [pc, #472]	@ (8009f98 <HAL_DMA_Start_IT+0x498>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d045      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a74      	ldr	r2, [pc, #464]	@ (8009f9c <HAL_DMA_Start_IT+0x49c>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d040      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a73      	ldr	r2, [pc, #460]	@ (8009fa0 <HAL_DMA_Start_IT+0x4a0>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d03b      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a71      	ldr	r2, [pc, #452]	@ (8009fa4 <HAL_DMA_Start_IT+0x4a4>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d036      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a70      	ldr	r2, [pc, #448]	@ (8009fa8 <HAL_DMA_Start_IT+0x4a8>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d031      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a6e      	ldr	r2, [pc, #440]	@ (8009fac <HAL_DMA_Start_IT+0x4ac>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d02c      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a6d      	ldr	r2, [pc, #436]	@ (8009fb0 <HAL_DMA_Start_IT+0x4b0>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d027      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a6b      	ldr	r2, [pc, #428]	@ (8009fb4 <HAL_DMA_Start_IT+0x4b4>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d022      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a6a      	ldr	r2, [pc, #424]	@ (8009fb8 <HAL_DMA_Start_IT+0x4b8>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d01d      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a68      	ldr	r2, [pc, #416]	@ (8009fbc <HAL_DMA_Start_IT+0x4bc>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d018      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a67      	ldr	r2, [pc, #412]	@ (8009fc0 <HAL_DMA_Start_IT+0x4c0>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d013      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a65      	ldr	r2, [pc, #404]	@ (8009fc4 <HAL_DMA_Start_IT+0x4c4>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d00e      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a64      	ldr	r2, [pc, #400]	@ (8009fc8 <HAL_DMA_Start_IT+0x4c8>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d009      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a62      	ldr	r2, [pc, #392]	@ (8009fcc <HAL_DMA_Start_IT+0x4cc>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d004      	beq.n	8009e50 <HAL_DMA_Start_IT+0x350>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a61      	ldr	r2, [pc, #388]	@ (8009fd0 <HAL_DMA_Start_IT+0x4d0>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d101      	bne.n	8009e54 <HAL_DMA_Start_IT+0x354>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e000      	b.n	8009e56 <HAL_DMA_Start_IT+0x356>
 8009e54:	2300      	movs	r3, #0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d01a      	beq.n	8009e90 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d007      	beq.n	8009e78 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e76:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d007      	beq.n	8009e90 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e8e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a37      	ldr	r2, [pc, #220]	@ (8009f74 <HAL_DMA_Start_IT+0x474>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d04a      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a36      	ldr	r2, [pc, #216]	@ (8009f78 <HAL_DMA_Start_IT+0x478>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d045      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a34      	ldr	r2, [pc, #208]	@ (8009f7c <HAL_DMA_Start_IT+0x47c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d040      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a33      	ldr	r2, [pc, #204]	@ (8009f80 <HAL_DMA_Start_IT+0x480>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d03b      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a31      	ldr	r2, [pc, #196]	@ (8009f84 <HAL_DMA_Start_IT+0x484>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d036      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a30      	ldr	r2, [pc, #192]	@ (8009f88 <HAL_DMA_Start_IT+0x488>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d031      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8009f8c <HAL_DMA_Start_IT+0x48c>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d02c      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a2d      	ldr	r2, [pc, #180]	@ (8009f90 <HAL_DMA_Start_IT+0x490>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d027      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8009f94 <HAL_DMA_Start_IT+0x494>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d022      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a2a      	ldr	r2, [pc, #168]	@ (8009f98 <HAL_DMA_Start_IT+0x498>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d01d      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a28      	ldr	r2, [pc, #160]	@ (8009f9c <HAL_DMA_Start_IT+0x49c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d018      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a27      	ldr	r2, [pc, #156]	@ (8009fa0 <HAL_DMA_Start_IT+0x4a0>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d013      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a25      	ldr	r2, [pc, #148]	@ (8009fa4 <HAL_DMA_Start_IT+0x4a4>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d00e      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a24      	ldr	r2, [pc, #144]	@ (8009fa8 <HAL_DMA_Start_IT+0x4a8>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d009      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a22      	ldr	r2, [pc, #136]	@ (8009fac <HAL_DMA_Start_IT+0x4ac>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d004      	beq.n	8009f30 <HAL_DMA_Start_IT+0x430>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a21      	ldr	r2, [pc, #132]	@ (8009fb0 <HAL_DMA_Start_IT+0x4b0>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d108      	bne.n	8009f42 <HAL_DMA_Start_IT+0x442>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f042 0201 	orr.w	r2, r2, #1
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	e012      	b.n	8009f68 <HAL_DMA_Start_IT+0x468>
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f042 0201 	orr.w	r2, r2, #1
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	e009      	b.n	8009f68 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	40020010 	.word	0x40020010
 8009f78:	40020028 	.word	0x40020028
 8009f7c:	40020040 	.word	0x40020040
 8009f80:	40020058 	.word	0x40020058
 8009f84:	40020070 	.word	0x40020070
 8009f88:	40020088 	.word	0x40020088
 8009f8c:	400200a0 	.word	0x400200a0
 8009f90:	400200b8 	.word	0x400200b8
 8009f94:	40020410 	.word	0x40020410
 8009f98:	40020428 	.word	0x40020428
 8009f9c:	40020440 	.word	0x40020440
 8009fa0:	40020458 	.word	0x40020458
 8009fa4:	40020470 	.word	0x40020470
 8009fa8:	40020488 	.word	0x40020488
 8009fac:	400204a0 	.word	0x400204a0
 8009fb0:	400204b8 	.word	0x400204b8
 8009fb4:	58025408 	.word	0x58025408
 8009fb8:	5802541c 	.word	0x5802541c
 8009fbc:	58025430 	.word	0x58025430
 8009fc0:	58025444 	.word	0x58025444
 8009fc4:	58025458 	.word	0x58025458
 8009fc8:	5802546c 	.word	0x5802546c
 8009fcc:	58025480 	.word	0x58025480
 8009fd0:	58025494 	.word	0x58025494

08009fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08a      	sub	sp, #40	@ 0x28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009fe0:	4b67      	ldr	r3, [pc, #412]	@ (800a180 <HAL_DMA_IRQHandler+0x1ac>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a67      	ldr	r2, [pc, #412]	@ (800a184 <HAL_DMA_IRQHandler+0x1b0>)
 8009fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fea:	0a9b      	lsrs	r3, r3, #10
 8009fec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ff2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ff8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a5f      	ldr	r2, [pc, #380]	@ (800a188 <HAL_DMA_IRQHandler+0x1b4>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d04a      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a5d      	ldr	r2, [pc, #372]	@ (800a18c <HAL_DMA_IRQHandler+0x1b8>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d045      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a5c      	ldr	r2, [pc, #368]	@ (800a190 <HAL_DMA_IRQHandler+0x1bc>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d040      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a5a      	ldr	r2, [pc, #360]	@ (800a194 <HAL_DMA_IRQHandler+0x1c0>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d03b      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a59      	ldr	r2, [pc, #356]	@ (800a198 <HAL_DMA_IRQHandler+0x1c4>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d036      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a57      	ldr	r2, [pc, #348]	@ (800a19c <HAL_DMA_IRQHandler+0x1c8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d031      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a56      	ldr	r2, [pc, #344]	@ (800a1a0 <HAL_DMA_IRQHandler+0x1cc>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d02c      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a54      	ldr	r2, [pc, #336]	@ (800a1a4 <HAL_DMA_IRQHandler+0x1d0>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d027      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a53      	ldr	r2, [pc, #332]	@ (800a1a8 <HAL_DMA_IRQHandler+0x1d4>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d022      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a51      	ldr	r2, [pc, #324]	@ (800a1ac <HAL_DMA_IRQHandler+0x1d8>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d01d      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a50      	ldr	r2, [pc, #320]	@ (800a1b0 <HAL_DMA_IRQHandler+0x1dc>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d018      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a4e      	ldr	r2, [pc, #312]	@ (800a1b4 <HAL_DMA_IRQHandler+0x1e0>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d013      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a4d      	ldr	r2, [pc, #308]	@ (800a1b8 <HAL_DMA_IRQHandler+0x1e4>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d00e      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a4b      	ldr	r2, [pc, #300]	@ (800a1bc <HAL_DMA_IRQHandler+0x1e8>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d009      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a4a      	ldr	r2, [pc, #296]	@ (800a1c0 <HAL_DMA_IRQHandler+0x1ec>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d004      	beq.n	800a0a6 <HAL_DMA_IRQHandler+0xd2>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a48      	ldr	r2, [pc, #288]	@ (800a1c4 <HAL_DMA_IRQHandler+0x1f0>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d101      	bne.n	800a0aa <HAL_DMA_IRQHandler+0xd6>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e000      	b.n	800a0ac <HAL_DMA_IRQHandler+0xd8>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 842b 	beq.w	800a908 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0b6:	f003 031f 	and.w	r3, r3, #31
 800a0ba:	2208      	movs	r2, #8
 800a0bc:	409a      	lsls	r2, r3
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 80a2 	beq.w	800a20c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a2e      	ldr	r2, [pc, #184]	@ (800a188 <HAL_DMA_IRQHandler+0x1b4>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d04a      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a2d      	ldr	r2, [pc, #180]	@ (800a18c <HAL_DMA_IRQHandler+0x1b8>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d045      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a2b      	ldr	r2, [pc, #172]	@ (800a190 <HAL_DMA_IRQHandler+0x1bc>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d040      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a2a      	ldr	r2, [pc, #168]	@ (800a194 <HAL_DMA_IRQHandler+0x1c0>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d03b      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a28      	ldr	r2, [pc, #160]	@ (800a198 <HAL_DMA_IRQHandler+0x1c4>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d036      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a27      	ldr	r2, [pc, #156]	@ (800a19c <HAL_DMA_IRQHandler+0x1c8>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d031      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a25      	ldr	r2, [pc, #148]	@ (800a1a0 <HAL_DMA_IRQHandler+0x1cc>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d02c      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a24      	ldr	r2, [pc, #144]	@ (800a1a4 <HAL_DMA_IRQHandler+0x1d0>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d027      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a22      	ldr	r2, [pc, #136]	@ (800a1a8 <HAL_DMA_IRQHandler+0x1d4>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d022      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a21      	ldr	r2, [pc, #132]	@ (800a1ac <HAL_DMA_IRQHandler+0x1d8>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d01d      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a1f      	ldr	r2, [pc, #124]	@ (800a1b0 <HAL_DMA_IRQHandler+0x1dc>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d018      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a1e      	ldr	r2, [pc, #120]	@ (800a1b4 <HAL_DMA_IRQHandler+0x1e0>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d013      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a1c      	ldr	r2, [pc, #112]	@ (800a1b8 <HAL_DMA_IRQHandler+0x1e4>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d00e      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a1b      	ldr	r2, [pc, #108]	@ (800a1bc <HAL_DMA_IRQHandler+0x1e8>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d009      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a19      	ldr	r2, [pc, #100]	@ (800a1c0 <HAL_DMA_IRQHandler+0x1ec>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d004      	beq.n	800a168 <HAL_DMA_IRQHandler+0x194>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a18      	ldr	r2, [pc, #96]	@ (800a1c4 <HAL_DMA_IRQHandler+0x1f0>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d12f      	bne.n	800a1c8 <HAL_DMA_IRQHandler+0x1f4>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 0304 	and.w	r3, r3, #4
 800a172:	2b00      	cmp	r3, #0
 800a174:	bf14      	ite	ne
 800a176:	2301      	movne	r3, #1
 800a178:	2300      	moveq	r3, #0
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	e02e      	b.n	800a1dc <HAL_DMA_IRQHandler+0x208>
 800a17e:	bf00      	nop
 800a180:	24000000 	.word	0x24000000
 800a184:	1b4e81b5 	.word	0x1b4e81b5
 800a188:	40020010 	.word	0x40020010
 800a18c:	40020028 	.word	0x40020028
 800a190:	40020040 	.word	0x40020040
 800a194:	40020058 	.word	0x40020058
 800a198:	40020070 	.word	0x40020070
 800a19c:	40020088 	.word	0x40020088
 800a1a0:	400200a0 	.word	0x400200a0
 800a1a4:	400200b8 	.word	0x400200b8
 800a1a8:	40020410 	.word	0x40020410
 800a1ac:	40020428 	.word	0x40020428
 800a1b0:	40020440 	.word	0x40020440
 800a1b4:	40020458 	.word	0x40020458
 800a1b8:	40020470 	.word	0x40020470
 800a1bc:	40020488 	.word	0x40020488
 800a1c0:	400204a0 	.word	0x400204a0
 800a1c4:	400204b8 	.word	0x400204b8
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 0308 	and.w	r3, r3, #8
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	bf14      	ite	ne
 800a1d6:	2301      	movne	r3, #1
 800a1d8:	2300      	moveq	r3, #0
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d015      	beq.n	800a20c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f022 0204 	bic.w	r2, r2, #4
 800a1ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1f4:	f003 031f 	and.w	r3, r3, #31
 800a1f8:	2208      	movs	r2, #8
 800a1fa:	409a      	lsls	r2, r3
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a204:	f043 0201 	orr.w	r2, r3, #1
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a210:	f003 031f 	and.w	r3, r3, #31
 800a214:	69ba      	ldr	r2, [r7, #24]
 800a216:	fa22 f303 	lsr.w	r3, r2, r3
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d06e      	beq.n	800a300 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a69      	ldr	r2, [pc, #420]	@ (800a3cc <HAL_DMA_IRQHandler+0x3f8>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d04a      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a67      	ldr	r2, [pc, #412]	@ (800a3d0 <HAL_DMA_IRQHandler+0x3fc>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d045      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a66      	ldr	r2, [pc, #408]	@ (800a3d4 <HAL_DMA_IRQHandler+0x400>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d040      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a64      	ldr	r2, [pc, #400]	@ (800a3d8 <HAL_DMA_IRQHandler+0x404>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d03b      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a63      	ldr	r2, [pc, #396]	@ (800a3dc <HAL_DMA_IRQHandler+0x408>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d036      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a61      	ldr	r2, [pc, #388]	@ (800a3e0 <HAL_DMA_IRQHandler+0x40c>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d031      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a60      	ldr	r2, [pc, #384]	@ (800a3e4 <HAL_DMA_IRQHandler+0x410>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d02c      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a5e      	ldr	r2, [pc, #376]	@ (800a3e8 <HAL_DMA_IRQHandler+0x414>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d027      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a5d      	ldr	r2, [pc, #372]	@ (800a3ec <HAL_DMA_IRQHandler+0x418>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d022      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a5b      	ldr	r2, [pc, #364]	@ (800a3f0 <HAL_DMA_IRQHandler+0x41c>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d01d      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a5a      	ldr	r2, [pc, #360]	@ (800a3f4 <HAL_DMA_IRQHandler+0x420>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d018      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a58      	ldr	r2, [pc, #352]	@ (800a3f8 <HAL_DMA_IRQHandler+0x424>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d013      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a57      	ldr	r2, [pc, #348]	@ (800a3fc <HAL_DMA_IRQHandler+0x428>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d00e      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a55      	ldr	r2, [pc, #340]	@ (800a400 <HAL_DMA_IRQHandler+0x42c>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d009      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a54      	ldr	r2, [pc, #336]	@ (800a404 <HAL_DMA_IRQHandler+0x430>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d004      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x2ee>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a52      	ldr	r2, [pc, #328]	@ (800a408 <HAL_DMA_IRQHandler+0x434>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d10a      	bne.n	800a2d8 <HAL_DMA_IRQHandler+0x304>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bf14      	ite	ne
 800a2d0:	2301      	movne	r3, #1
 800a2d2:	2300      	moveq	r3, #0
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	e003      	b.n	800a2e0 <HAL_DMA_IRQHandler+0x30c>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2300      	movs	r3, #0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00d      	beq.n	800a300 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2e8:	f003 031f 	and.w	r3, r3, #31
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	409a      	lsls	r2, r3
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2f8:	f043 0202 	orr.w	r2, r3, #2
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a304:	f003 031f 	and.w	r3, r3, #31
 800a308:	2204      	movs	r2, #4
 800a30a:	409a      	lsls	r2, r3
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	4013      	ands	r3, r2
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 808f 	beq.w	800a434 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a2c      	ldr	r2, [pc, #176]	@ (800a3cc <HAL_DMA_IRQHandler+0x3f8>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d04a      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a2a      	ldr	r2, [pc, #168]	@ (800a3d0 <HAL_DMA_IRQHandler+0x3fc>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d045      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a29      	ldr	r2, [pc, #164]	@ (800a3d4 <HAL_DMA_IRQHandler+0x400>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d040      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a27      	ldr	r2, [pc, #156]	@ (800a3d8 <HAL_DMA_IRQHandler+0x404>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d03b      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a26      	ldr	r2, [pc, #152]	@ (800a3dc <HAL_DMA_IRQHandler+0x408>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d036      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a24      	ldr	r2, [pc, #144]	@ (800a3e0 <HAL_DMA_IRQHandler+0x40c>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d031      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a23      	ldr	r2, [pc, #140]	@ (800a3e4 <HAL_DMA_IRQHandler+0x410>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d02c      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a21      	ldr	r2, [pc, #132]	@ (800a3e8 <HAL_DMA_IRQHandler+0x414>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d027      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a20      	ldr	r2, [pc, #128]	@ (800a3ec <HAL_DMA_IRQHandler+0x418>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d022      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a1e      	ldr	r2, [pc, #120]	@ (800a3f0 <HAL_DMA_IRQHandler+0x41c>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d01d      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a1d      	ldr	r2, [pc, #116]	@ (800a3f4 <HAL_DMA_IRQHandler+0x420>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d018      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a1b      	ldr	r2, [pc, #108]	@ (800a3f8 <HAL_DMA_IRQHandler+0x424>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d013      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a1a      	ldr	r2, [pc, #104]	@ (800a3fc <HAL_DMA_IRQHandler+0x428>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d00e      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a18      	ldr	r2, [pc, #96]	@ (800a400 <HAL_DMA_IRQHandler+0x42c>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d009      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a17      	ldr	r2, [pc, #92]	@ (800a404 <HAL_DMA_IRQHandler+0x430>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d004      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x3e2>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a15      	ldr	r2, [pc, #84]	@ (800a408 <HAL_DMA_IRQHandler+0x434>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d12a      	bne.n	800a40c <HAL_DMA_IRQHandler+0x438>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0302 	and.w	r3, r3, #2
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	bf14      	ite	ne
 800a3c4:	2301      	movne	r3, #1
 800a3c6:	2300      	moveq	r3, #0
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	e023      	b.n	800a414 <HAL_DMA_IRQHandler+0x440>
 800a3cc:	40020010 	.word	0x40020010
 800a3d0:	40020028 	.word	0x40020028
 800a3d4:	40020040 	.word	0x40020040
 800a3d8:	40020058 	.word	0x40020058
 800a3dc:	40020070 	.word	0x40020070
 800a3e0:	40020088 	.word	0x40020088
 800a3e4:	400200a0 	.word	0x400200a0
 800a3e8:	400200b8 	.word	0x400200b8
 800a3ec:	40020410 	.word	0x40020410
 800a3f0:	40020428 	.word	0x40020428
 800a3f4:	40020440 	.word	0x40020440
 800a3f8:	40020458 	.word	0x40020458
 800a3fc:	40020470 	.word	0x40020470
 800a400:	40020488 	.word	0x40020488
 800a404:	400204a0 	.word	0x400204a0
 800a408:	400204b8 	.word	0x400204b8
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2300      	movs	r3, #0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00d      	beq.n	800a434 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a41c:	f003 031f 	and.w	r3, r3, #31
 800a420:	2204      	movs	r2, #4
 800a422:	409a      	lsls	r2, r3
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a42c:	f043 0204 	orr.w	r2, r3, #4
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a438:	f003 031f 	and.w	r3, r3, #31
 800a43c:	2210      	movs	r2, #16
 800a43e:	409a      	lsls	r2, r3
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	4013      	ands	r3, r2
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 80a6 	beq.w	800a596 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a85      	ldr	r2, [pc, #532]	@ (800a664 <HAL_DMA_IRQHandler+0x690>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d04a      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a83      	ldr	r2, [pc, #524]	@ (800a668 <HAL_DMA_IRQHandler+0x694>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d045      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a82      	ldr	r2, [pc, #520]	@ (800a66c <HAL_DMA_IRQHandler+0x698>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d040      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a80      	ldr	r2, [pc, #512]	@ (800a670 <HAL_DMA_IRQHandler+0x69c>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d03b      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a7f      	ldr	r2, [pc, #508]	@ (800a674 <HAL_DMA_IRQHandler+0x6a0>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d036      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a7d      	ldr	r2, [pc, #500]	@ (800a678 <HAL_DMA_IRQHandler+0x6a4>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d031      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a7c      	ldr	r2, [pc, #496]	@ (800a67c <HAL_DMA_IRQHandler+0x6a8>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d02c      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a7a      	ldr	r2, [pc, #488]	@ (800a680 <HAL_DMA_IRQHandler+0x6ac>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d027      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a79      	ldr	r2, [pc, #484]	@ (800a684 <HAL_DMA_IRQHandler+0x6b0>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d022      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a77      	ldr	r2, [pc, #476]	@ (800a688 <HAL_DMA_IRQHandler+0x6b4>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d01d      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a76      	ldr	r2, [pc, #472]	@ (800a68c <HAL_DMA_IRQHandler+0x6b8>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d018      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a74      	ldr	r2, [pc, #464]	@ (800a690 <HAL_DMA_IRQHandler+0x6bc>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d013      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a73      	ldr	r2, [pc, #460]	@ (800a694 <HAL_DMA_IRQHandler+0x6c0>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d00e      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a71      	ldr	r2, [pc, #452]	@ (800a698 <HAL_DMA_IRQHandler+0x6c4>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d009      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a70      	ldr	r2, [pc, #448]	@ (800a69c <HAL_DMA_IRQHandler+0x6c8>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d004      	beq.n	800a4ea <HAL_DMA_IRQHandler+0x516>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a6e      	ldr	r2, [pc, #440]	@ (800a6a0 <HAL_DMA_IRQHandler+0x6cc>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d10a      	bne.n	800a500 <HAL_DMA_IRQHandler+0x52c>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0308 	and.w	r3, r3, #8
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	bf14      	ite	ne
 800a4f8:	2301      	movne	r3, #1
 800a4fa:	2300      	moveq	r3, #0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	e009      	b.n	800a514 <HAL_DMA_IRQHandler+0x540>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0304 	and.w	r3, r3, #4
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	bf14      	ite	ne
 800a50e:	2301      	movne	r3, #1
 800a510:	2300      	moveq	r3, #0
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b00      	cmp	r3, #0
 800a516:	d03e      	beq.n	800a596 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a51c:	f003 031f 	and.w	r3, r3, #31
 800a520:	2210      	movs	r2, #16
 800a522:	409a      	lsls	r2, r3
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d018      	beq.n	800a568 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d108      	bne.n	800a556 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d024      	beq.n	800a596 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	4798      	blx	r3
 800a554:	e01f      	b.n	800a596 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d01b      	beq.n	800a596 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	4798      	blx	r3
 800a566:	e016      	b.n	800a596 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a572:	2b00      	cmp	r3, #0
 800a574:	d107      	bne.n	800a586 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f022 0208 	bic.w	r2, r2, #8
 800a584:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a59a:	f003 031f 	and.w	r3, r3, #31
 800a59e:	2220      	movs	r2, #32
 800a5a0:	409a      	lsls	r2, r3
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 8110 	beq.w	800a7cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a2c      	ldr	r2, [pc, #176]	@ (800a664 <HAL_DMA_IRQHandler+0x690>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d04a      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a2b      	ldr	r2, [pc, #172]	@ (800a668 <HAL_DMA_IRQHandler+0x694>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d045      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a29      	ldr	r2, [pc, #164]	@ (800a66c <HAL_DMA_IRQHandler+0x698>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d040      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a28      	ldr	r2, [pc, #160]	@ (800a670 <HAL_DMA_IRQHandler+0x69c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d03b      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a26      	ldr	r2, [pc, #152]	@ (800a674 <HAL_DMA_IRQHandler+0x6a0>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d036      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a25      	ldr	r2, [pc, #148]	@ (800a678 <HAL_DMA_IRQHandler+0x6a4>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d031      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a23      	ldr	r2, [pc, #140]	@ (800a67c <HAL_DMA_IRQHandler+0x6a8>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d02c      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a22      	ldr	r2, [pc, #136]	@ (800a680 <HAL_DMA_IRQHandler+0x6ac>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d027      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a20      	ldr	r2, [pc, #128]	@ (800a684 <HAL_DMA_IRQHandler+0x6b0>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d022      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a1f      	ldr	r2, [pc, #124]	@ (800a688 <HAL_DMA_IRQHandler+0x6b4>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d01d      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a1d      	ldr	r2, [pc, #116]	@ (800a68c <HAL_DMA_IRQHandler+0x6b8>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d018      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a1c      	ldr	r2, [pc, #112]	@ (800a690 <HAL_DMA_IRQHandler+0x6bc>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d013      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a1a      	ldr	r2, [pc, #104]	@ (800a694 <HAL_DMA_IRQHandler+0x6c0>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d00e      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a19      	ldr	r2, [pc, #100]	@ (800a698 <HAL_DMA_IRQHandler+0x6c4>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d009      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a17      	ldr	r2, [pc, #92]	@ (800a69c <HAL_DMA_IRQHandler+0x6c8>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d004      	beq.n	800a64c <HAL_DMA_IRQHandler+0x678>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a16      	ldr	r2, [pc, #88]	@ (800a6a0 <HAL_DMA_IRQHandler+0x6cc>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d12b      	bne.n	800a6a4 <HAL_DMA_IRQHandler+0x6d0>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0310 	and.w	r3, r3, #16
 800a656:	2b00      	cmp	r3, #0
 800a658:	bf14      	ite	ne
 800a65a:	2301      	movne	r3, #1
 800a65c:	2300      	moveq	r3, #0
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	e02a      	b.n	800a6b8 <HAL_DMA_IRQHandler+0x6e4>
 800a662:	bf00      	nop
 800a664:	40020010 	.word	0x40020010
 800a668:	40020028 	.word	0x40020028
 800a66c:	40020040 	.word	0x40020040
 800a670:	40020058 	.word	0x40020058
 800a674:	40020070 	.word	0x40020070
 800a678:	40020088 	.word	0x40020088
 800a67c:	400200a0 	.word	0x400200a0
 800a680:	400200b8 	.word	0x400200b8
 800a684:	40020410 	.word	0x40020410
 800a688:	40020428 	.word	0x40020428
 800a68c:	40020440 	.word	0x40020440
 800a690:	40020458 	.word	0x40020458
 800a694:	40020470 	.word	0x40020470
 800a698:	40020488 	.word	0x40020488
 800a69c:	400204a0 	.word	0x400204a0
 800a6a0:	400204b8 	.word	0x400204b8
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0302 	and.w	r3, r3, #2
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	bf14      	ite	ne
 800a6b2:	2301      	movne	r3, #1
 800a6b4:	2300      	moveq	r3, #0
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 8087 	beq.w	800a7cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6c2:	f003 031f 	and.w	r3, r3, #31
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	409a      	lsls	r2, r3
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	d139      	bne.n	800a74e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f022 0216 	bic.w	r2, r2, #22
 800a6e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	695a      	ldr	r2, [r3, #20]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a6f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d103      	bne.n	800a70a <HAL_DMA_IRQHandler+0x736>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a706:	2b00      	cmp	r3, #0
 800a708:	d007      	beq.n	800a71a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f022 0208 	bic.w	r2, r2, #8
 800a718:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a71e:	f003 031f 	and.w	r3, r3, #31
 800a722:	223f      	movs	r2, #63	@ 0x3f
 800a724:	409a      	lsls	r2, r3
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f000 834a 	beq.w	800add8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	4798      	blx	r3
          }
          return;
 800a74c:	e344      	b.n	800add8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d018      	beq.n	800a78e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a766:	2b00      	cmp	r3, #0
 800a768:	d108      	bne.n	800a77c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d02c      	beq.n	800a7cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	4798      	blx	r3
 800a77a:	e027      	b.n	800a7cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a780:	2b00      	cmp	r3, #0
 800a782:	d023      	beq.n	800a7cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	4798      	blx	r3
 800a78c:	e01e      	b.n	800a7cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10f      	bne.n	800a7bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f022 0210 	bic.w	r2, r2, #16
 800a7aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d003      	beq.n	800a7cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 8306 	beq.w	800ade2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f000 8088 	beq.w	800a8f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2204      	movs	r2, #4
 800a7e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a7a      	ldr	r2, [pc, #488]	@ (800a9dc <HAL_DMA_IRQHandler+0xa08>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d04a      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a79      	ldr	r2, [pc, #484]	@ (800a9e0 <HAL_DMA_IRQHandler+0xa0c>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d045      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a77      	ldr	r2, [pc, #476]	@ (800a9e4 <HAL_DMA_IRQHandler+0xa10>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d040      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a76      	ldr	r2, [pc, #472]	@ (800a9e8 <HAL_DMA_IRQHandler+0xa14>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d03b      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a74      	ldr	r2, [pc, #464]	@ (800a9ec <HAL_DMA_IRQHandler+0xa18>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d036      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a73      	ldr	r2, [pc, #460]	@ (800a9f0 <HAL_DMA_IRQHandler+0xa1c>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d031      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a71      	ldr	r2, [pc, #452]	@ (800a9f4 <HAL_DMA_IRQHandler+0xa20>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d02c      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a70      	ldr	r2, [pc, #448]	@ (800a9f8 <HAL_DMA_IRQHandler+0xa24>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d027      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a6e      	ldr	r2, [pc, #440]	@ (800a9fc <HAL_DMA_IRQHandler+0xa28>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d022      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a6d      	ldr	r2, [pc, #436]	@ (800aa00 <HAL_DMA_IRQHandler+0xa2c>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d01d      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a6b      	ldr	r2, [pc, #428]	@ (800aa04 <HAL_DMA_IRQHandler+0xa30>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d018      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a6a      	ldr	r2, [pc, #424]	@ (800aa08 <HAL_DMA_IRQHandler+0xa34>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d013      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a68      	ldr	r2, [pc, #416]	@ (800aa0c <HAL_DMA_IRQHandler+0xa38>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d00e      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a67      	ldr	r2, [pc, #412]	@ (800aa10 <HAL_DMA_IRQHandler+0xa3c>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d009      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a65      	ldr	r2, [pc, #404]	@ (800aa14 <HAL_DMA_IRQHandler+0xa40>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d004      	beq.n	800a88c <HAL_DMA_IRQHandler+0x8b8>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a64      	ldr	r2, [pc, #400]	@ (800aa18 <HAL_DMA_IRQHandler+0xa44>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d108      	bne.n	800a89e <HAL_DMA_IRQHandler+0x8ca>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f022 0201 	bic.w	r2, r2, #1
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	e007      	b.n	800a8ae <HAL_DMA_IRQHandler+0x8da>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 0201 	bic.w	r2, r2, #1
 800a8ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	60fb      	str	r3, [r7, #12]
 800a8b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d307      	bcc.n	800a8ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1f2      	bne.n	800a8ae <HAL_DMA_IRQHandler+0x8da>
 800a8c8:	e000      	b.n	800a8cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a8ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d004      	beq.n	800a8e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2203      	movs	r2, #3
 800a8de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a8e2:	e003      	b.n	800a8ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 8272 	beq.w	800ade2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	4798      	blx	r3
 800a906:	e26c      	b.n	800ade2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a43      	ldr	r2, [pc, #268]	@ (800aa1c <HAL_DMA_IRQHandler+0xa48>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d022      	beq.n	800a958 <HAL_DMA_IRQHandler+0x984>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a42      	ldr	r2, [pc, #264]	@ (800aa20 <HAL_DMA_IRQHandler+0xa4c>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d01d      	beq.n	800a958 <HAL_DMA_IRQHandler+0x984>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a40      	ldr	r2, [pc, #256]	@ (800aa24 <HAL_DMA_IRQHandler+0xa50>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d018      	beq.n	800a958 <HAL_DMA_IRQHandler+0x984>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a3f      	ldr	r2, [pc, #252]	@ (800aa28 <HAL_DMA_IRQHandler+0xa54>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d013      	beq.n	800a958 <HAL_DMA_IRQHandler+0x984>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a3d      	ldr	r2, [pc, #244]	@ (800aa2c <HAL_DMA_IRQHandler+0xa58>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d00e      	beq.n	800a958 <HAL_DMA_IRQHandler+0x984>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a3c      	ldr	r2, [pc, #240]	@ (800aa30 <HAL_DMA_IRQHandler+0xa5c>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d009      	beq.n	800a958 <HAL_DMA_IRQHandler+0x984>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a3a      	ldr	r2, [pc, #232]	@ (800aa34 <HAL_DMA_IRQHandler+0xa60>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d004      	beq.n	800a958 <HAL_DMA_IRQHandler+0x984>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a39      	ldr	r2, [pc, #228]	@ (800aa38 <HAL_DMA_IRQHandler+0xa64>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d101      	bne.n	800a95c <HAL_DMA_IRQHandler+0x988>
 800a958:	2301      	movs	r3, #1
 800a95a:	e000      	b.n	800a95e <HAL_DMA_IRQHandler+0x98a>
 800a95c:	2300      	movs	r3, #0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 823f 	beq.w	800ade2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a970:	f003 031f 	and.w	r3, r3, #31
 800a974:	2204      	movs	r2, #4
 800a976:	409a      	lsls	r2, r3
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	4013      	ands	r3, r2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 80cd 	beq.w	800ab1c <HAL_DMA_IRQHandler+0xb48>
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	f003 0304 	and.w	r3, r3, #4
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 80c7 	beq.w	800ab1c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a992:	f003 031f 	and.w	r3, r3, #31
 800a996:	2204      	movs	r2, #4
 800a998:	409a      	lsls	r2, r3
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d049      	beq.n	800aa3c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d109      	bne.n	800a9c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 8210 	beq.w	800addc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9c4:	e20a      	b.n	800addc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 8206 	beq.w	800addc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9d8:	e200      	b.n	800addc <HAL_DMA_IRQHandler+0xe08>
 800a9da:	bf00      	nop
 800a9dc:	40020010 	.word	0x40020010
 800a9e0:	40020028 	.word	0x40020028
 800a9e4:	40020040 	.word	0x40020040
 800a9e8:	40020058 	.word	0x40020058
 800a9ec:	40020070 	.word	0x40020070
 800a9f0:	40020088 	.word	0x40020088
 800a9f4:	400200a0 	.word	0x400200a0
 800a9f8:	400200b8 	.word	0x400200b8
 800a9fc:	40020410 	.word	0x40020410
 800aa00:	40020428 	.word	0x40020428
 800aa04:	40020440 	.word	0x40020440
 800aa08:	40020458 	.word	0x40020458
 800aa0c:	40020470 	.word	0x40020470
 800aa10:	40020488 	.word	0x40020488
 800aa14:	400204a0 	.word	0x400204a0
 800aa18:	400204b8 	.word	0x400204b8
 800aa1c:	58025408 	.word	0x58025408
 800aa20:	5802541c 	.word	0x5802541c
 800aa24:	58025430 	.word	0x58025430
 800aa28:	58025444 	.word	0x58025444
 800aa2c:	58025458 	.word	0x58025458
 800aa30:	5802546c 	.word	0x5802546c
 800aa34:	58025480 	.word	0x58025480
 800aa38:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d160      	bne.n	800ab08 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a7f      	ldr	r2, [pc, #508]	@ (800ac48 <HAL_DMA_IRQHandler+0xc74>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d04a      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a7d      	ldr	r2, [pc, #500]	@ (800ac4c <HAL_DMA_IRQHandler+0xc78>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d045      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a7c      	ldr	r2, [pc, #496]	@ (800ac50 <HAL_DMA_IRQHandler+0xc7c>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d040      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a7a      	ldr	r2, [pc, #488]	@ (800ac54 <HAL_DMA_IRQHandler+0xc80>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d03b      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a79      	ldr	r2, [pc, #484]	@ (800ac58 <HAL_DMA_IRQHandler+0xc84>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d036      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a77      	ldr	r2, [pc, #476]	@ (800ac5c <HAL_DMA_IRQHandler+0xc88>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d031      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a76      	ldr	r2, [pc, #472]	@ (800ac60 <HAL_DMA_IRQHandler+0xc8c>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d02c      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a74      	ldr	r2, [pc, #464]	@ (800ac64 <HAL_DMA_IRQHandler+0xc90>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d027      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a73      	ldr	r2, [pc, #460]	@ (800ac68 <HAL_DMA_IRQHandler+0xc94>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d022      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a71      	ldr	r2, [pc, #452]	@ (800ac6c <HAL_DMA_IRQHandler+0xc98>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d01d      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a70      	ldr	r2, [pc, #448]	@ (800ac70 <HAL_DMA_IRQHandler+0xc9c>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d018      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a6e      	ldr	r2, [pc, #440]	@ (800ac74 <HAL_DMA_IRQHandler+0xca0>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d013      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a6d      	ldr	r2, [pc, #436]	@ (800ac78 <HAL_DMA_IRQHandler+0xca4>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d00e      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a6b      	ldr	r2, [pc, #428]	@ (800ac7c <HAL_DMA_IRQHandler+0xca8>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d009      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a6a      	ldr	r2, [pc, #424]	@ (800ac80 <HAL_DMA_IRQHandler+0xcac>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d004      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xb12>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a68      	ldr	r2, [pc, #416]	@ (800ac84 <HAL_DMA_IRQHandler+0xcb0>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d108      	bne.n	800aaf8 <HAL_DMA_IRQHandler+0xb24>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f022 0208 	bic.w	r2, r2, #8
 800aaf4:	601a      	str	r2, [r3, #0]
 800aaf6:	e007      	b.n	800ab08 <HAL_DMA_IRQHandler+0xb34>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f022 0204 	bic.w	r2, r2, #4
 800ab06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 8165 	beq.w	800addc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab1a:	e15f      	b.n	800addc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab20:	f003 031f 	and.w	r3, r3, #31
 800ab24:	2202      	movs	r2, #2
 800ab26:	409a      	lsls	r2, r3
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 80c5 	beq.w	800acbc <HAL_DMA_IRQHandler+0xce8>
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	f003 0302 	and.w	r3, r3, #2
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f000 80bf 	beq.w	800acbc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab42:	f003 031f 	and.w	r3, r3, #31
 800ab46:	2202      	movs	r2, #2
 800ab48:	409a      	lsls	r2, r3
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d018      	beq.n	800ab8a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d109      	bne.n	800ab76 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 813a 	beq.w	800ade0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab74:	e134      	b.n	800ade0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f000 8130 	beq.w	800ade0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab88:	e12a      	b.n	800ade0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	f003 0320 	and.w	r3, r3, #32
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f040 8089 	bne.w	800aca8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a2b      	ldr	r2, [pc, #172]	@ (800ac48 <HAL_DMA_IRQHandler+0xc74>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d04a      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a29      	ldr	r2, [pc, #164]	@ (800ac4c <HAL_DMA_IRQHandler+0xc78>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d045      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a28      	ldr	r2, [pc, #160]	@ (800ac50 <HAL_DMA_IRQHandler+0xc7c>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d040      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a26      	ldr	r2, [pc, #152]	@ (800ac54 <HAL_DMA_IRQHandler+0xc80>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d03b      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a25      	ldr	r2, [pc, #148]	@ (800ac58 <HAL_DMA_IRQHandler+0xc84>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d036      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a23      	ldr	r2, [pc, #140]	@ (800ac5c <HAL_DMA_IRQHandler+0xc88>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d031      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a22      	ldr	r2, [pc, #136]	@ (800ac60 <HAL_DMA_IRQHandler+0xc8c>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d02c      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a20      	ldr	r2, [pc, #128]	@ (800ac64 <HAL_DMA_IRQHandler+0xc90>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d027      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a1f      	ldr	r2, [pc, #124]	@ (800ac68 <HAL_DMA_IRQHandler+0xc94>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d022      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a1d      	ldr	r2, [pc, #116]	@ (800ac6c <HAL_DMA_IRQHandler+0xc98>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d01d      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a1c      	ldr	r2, [pc, #112]	@ (800ac70 <HAL_DMA_IRQHandler+0xc9c>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d018      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a1a      	ldr	r2, [pc, #104]	@ (800ac74 <HAL_DMA_IRQHandler+0xca0>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d013      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a19      	ldr	r2, [pc, #100]	@ (800ac78 <HAL_DMA_IRQHandler+0xca4>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d00e      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a17      	ldr	r2, [pc, #92]	@ (800ac7c <HAL_DMA_IRQHandler+0xca8>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d009      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a16      	ldr	r2, [pc, #88]	@ (800ac80 <HAL_DMA_IRQHandler+0xcac>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d004      	beq.n	800ac36 <HAL_DMA_IRQHandler+0xc62>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a14      	ldr	r2, [pc, #80]	@ (800ac84 <HAL_DMA_IRQHandler+0xcb0>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d128      	bne.n	800ac88 <HAL_DMA_IRQHandler+0xcb4>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f022 0214 	bic.w	r2, r2, #20
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	e027      	b.n	800ac98 <HAL_DMA_IRQHandler+0xcc4>
 800ac48:	40020010 	.word	0x40020010
 800ac4c:	40020028 	.word	0x40020028
 800ac50:	40020040 	.word	0x40020040
 800ac54:	40020058 	.word	0x40020058
 800ac58:	40020070 	.word	0x40020070
 800ac5c:	40020088 	.word	0x40020088
 800ac60:	400200a0 	.word	0x400200a0
 800ac64:	400200b8 	.word	0x400200b8
 800ac68:	40020410 	.word	0x40020410
 800ac6c:	40020428 	.word	0x40020428
 800ac70:	40020440 	.word	0x40020440
 800ac74:	40020458 	.word	0x40020458
 800ac78:	40020470 	.word	0x40020470
 800ac7c:	40020488 	.word	0x40020488
 800ac80:	400204a0 	.word	0x400204a0
 800ac84:	400204b8 	.word	0x400204b8
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f022 020a 	bic.w	r2, r2, #10
 800ac96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 8097 	beq.w	800ade0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800acba:	e091      	b.n	800ade0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acc0:	f003 031f 	and.w	r3, r3, #31
 800acc4:	2208      	movs	r2, #8
 800acc6:	409a      	lsls	r2, r3
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	4013      	ands	r3, r2
 800accc:	2b00      	cmp	r3, #0
 800acce:	f000 8088 	beq.w	800ade2 <HAL_DMA_IRQHandler+0xe0e>
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	f003 0308 	and.w	r3, r3, #8
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f000 8082 	beq.w	800ade2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a41      	ldr	r2, [pc, #260]	@ (800ade8 <HAL_DMA_IRQHandler+0xe14>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d04a      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a3f      	ldr	r2, [pc, #252]	@ (800adec <HAL_DMA_IRQHandler+0xe18>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d045      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a3e      	ldr	r2, [pc, #248]	@ (800adf0 <HAL_DMA_IRQHandler+0xe1c>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d040      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a3c      	ldr	r2, [pc, #240]	@ (800adf4 <HAL_DMA_IRQHandler+0xe20>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d03b      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a3b      	ldr	r2, [pc, #236]	@ (800adf8 <HAL_DMA_IRQHandler+0xe24>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d036      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a39      	ldr	r2, [pc, #228]	@ (800adfc <HAL_DMA_IRQHandler+0xe28>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d031      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a38      	ldr	r2, [pc, #224]	@ (800ae00 <HAL_DMA_IRQHandler+0xe2c>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d02c      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a36      	ldr	r2, [pc, #216]	@ (800ae04 <HAL_DMA_IRQHandler+0xe30>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d027      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a35      	ldr	r2, [pc, #212]	@ (800ae08 <HAL_DMA_IRQHandler+0xe34>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d022      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a33      	ldr	r2, [pc, #204]	@ (800ae0c <HAL_DMA_IRQHandler+0xe38>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d01d      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a32      	ldr	r2, [pc, #200]	@ (800ae10 <HAL_DMA_IRQHandler+0xe3c>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d018      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a30      	ldr	r2, [pc, #192]	@ (800ae14 <HAL_DMA_IRQHandler+0xe40>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d013      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a2f      	ldr	r2, [pc, #188]	@ (800ae18 <HAL_DMA_IRQHandler+0xe44>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d00e      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a2d      	ldr	r2, [pc, #180]	@ (800ae1c <HAL_DMA_IRQHandler+0xe48>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d009      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a2c      	ldr	r2, [pc, #176]	@ (800ae20 <HAL_DMA_IRQHandler+0xe4c>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d004      	beq.n	800ad7e <HAL_DMA_IRQHandler+0xdaa>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a2a      	ldr	r2, [pc, #168]	@ (800ae24 <HAL_DMA_IRQHandler+0xe50>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d108      	bne.n	800ad90 <HAL_DMA_IRQHandler+0xdbc>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f022 021c 	bic.w	r2, r2, #28
 800ad8c:	601a      	str	r2, [r3, #0]
 800ad8e:	e007      	b.n	800ada0 <HAL_DMA_IRQHandler+0xdcc>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f022 020e 	bic.w	r2, r2, #14
 800ad9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ada4:	f003 031f 	and.w	r3, r3, #31
 800ada8:	2201      	movs	r2, #1
 800adaa:	409a      	lsls	r2, r3
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d009      	beq.n	800ade2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	4798      	blx	r3
 800add6:	e004      	b.n	800ade2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800add8:	bf00      	nop
 800adda:	e002      	b.n	800ade2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800addc:	bf00      	nop
 800adde:	e000      	b.n	800ade2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ade0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ade2:	3728      	adds	r7, #40	@ 0x28
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	40020010 	.word	0x40020010
 800adec:	40020028 	.word	0x40020028
 800adf0:	40020040 	.word	0x40020040
 800adf4:	40020058 	.word	0x40020058
 800adf8:	40020070 	.word	0x40020070
 800adfc:	40020088 	.word	0x40020088
 800ae00:	400200a0 	.word	0x400200a0
 800ae04:	400200b8 	.word	0x400200b8
 800ae08:	40020410 	.word	0x40020410
 800ae0c:	40020428 	.word	0x40020428
 800ae10:	40020440 	.word	0x40020440
 800ae14:	40020458 	.word	0x40020458
 800ae18:	40020470 	.word	0x40020470
 800ae1c:	40020488 	.word	0x40020488
 800ae20:	400204a0 	.word	0x400204a0
 800ae24:	400204b8 	.word	0x400204b8

0800ae28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b087      	sub	sp, #28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a7f      	ldr	r2, [pc, #508]	@ (800b044 <DMA_SetConfig+0x21c>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d072      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a7d      	ldr	r2, [pc, #500]	@ (800b048 <DMA_SetConfig+0x220>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d06d      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a7c      	ldr	r2, [pc, #496]	@ (800b04c <DMA_SetConfig+0x224>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d068      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a7a      	ldr	r2, [pc, #488]	@ (800b050 <DMA_SetConfig+0x228>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d063      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a79      	ldr	r2, [pc, #484]	@ (800b054 <DMA_SetConfig+0x22c>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d05e      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a77      	ldr	r2, [pc, #476]	@ (800b058 <DMA_SetConfig+0x230>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d059      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a76      	ldr	r2, [pc, #472]	@ (800b05c <DMA_SetConfig+0x234>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d054      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a74      	ldr	r2, [pc, #464]	@ (800b060 <DMA_SetConfig+0x238>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d04f      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a73      	ldr	r2, [pc, #460]	@ (800b064 <DMA_SetConfig+0x23c>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d04a      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a71      	ldr	r2, [pc, #452]	@ (800b068 <DMA_SetConfig+0x240>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d045      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a70      	ldr	r2, [pc, #448]	@ (800b06c <DMA_SetConfig+0x244>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d040      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a6e      	ldr	r2, [pc, #440]	@ (800b070 <DMA_SetConfig+0x248>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d03b      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a6d      	ldr	r2, [pc, #436]	@ (800b074 <DMA_SetConfig+0x24c>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d036      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a6b      	ldr	r2, [pc, #428]	@ (800b078 <DMA_SetConfig+0x250>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d031      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a6a      	ldr	r2, [pc, #424]	@ (800b07c <DMA_SetConfig+0x254>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d02c      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a68      	ldr	r2, [pc, #416]	@ (800b080 <DMA_SetConfig+0x258>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d027      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a67      	ldr	r2, [pc, #412]	@ (800b084 <DMA_SetConfig+0x25c>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d022      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a65      	ldr	r2, [pc, #404]	@ (800b088 <DMA_SetConfig+0x260>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d01d      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a64      	ldr	r2, [pc, #400]	@ (800b08c <DMA_SetConfig+0x264>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d018      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a62      	ldr	r2, [pc, #392]	@ (800b090 <DMA_SetConfig+0x268>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d013      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a61      	ldr	r2, [pc, #388]	@ (800b094 <DMA_SetConfig+0x26c>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d00e      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a5f      	ldr	r2, [pc, #380]	@ (800b098 <DMA_SetConfig+0x270>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d009      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a5e      	ldr	r2, [pc, #376]	@ (800b09c <DMA_SetConfig+0x274>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d004      	beq.n	800af32 <DMA_SetConfig+0x10a>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a5c      	ldr	r2, [pc, #368]	@ (800b0a0 <DMA_SetConfig+0x278>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d101      	bne.n	800af36 <DMA_SetConfig+0x10e>
 800af32:	2301      	movs	r3, #1
 800af34:	e000      	b.n	800af38 <DMA_SetConfig+0x110>
 800af36:	2300      	movs	r3, #0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00d      	beq.n	800af58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800af44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d004      	beq.n	800af58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800af56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a39      	ldr	r2, [pc, #228]	@ (800b044 <DMA_SetConfig+0x21c>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d04a      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a38      	ldr	r2, [pc, #224]	@ (800b048 <DMA_SetConfig+0x220>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d045      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a36      	ldr	r2, [pc, #216]	@ (800b04c <DMA_SetConfig+0x224>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d040      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a35      	ldr	r2, [pc, #212]	@ (800b050 <DMA_SetConfig+0x228>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d03b      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a33      	ldr	r2, [pc, #204]	@ (800b054 <DMA_SetConfig+0x22c>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d036      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a32      	ldr	r2, [pc, #200]	@ (800b058 <DMA_SetConfig+0x230>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d031      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a30      	ldr	r2, [pc, #192]	@ (800b05c <DMA_SetConfig+0x234>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d02c      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a2f      	ldr	r2, [pc, #188]	@ (800b060 <DMA_SetConfig+0x238>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d027      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a2d      	ldr	r2, [pc, #180]	@ (800b064 <DMA_SetConfig+0x23c>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d022      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a2c      	ldr	r2, [pc, #176]	@ (800b068 <DMA_SetConfig+0x240>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d01d      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a2a      	ldr	r2, [pc, #168]	@ (800b06c <DMA_SetConfig+0x244>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d018      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a29      	ldr	r2, [pc, #164]	@ (800b070 <DMA_SetConfig+0x248>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d013      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a27      	ldr	r2, [pc, #156]	@ (800b074 <DMA_SetConfig+0x24c>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d00e      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a26      	ldr	r2, [pc, #152]	@ (800b078 <DMA_SetConfig+0x250>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d009      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a24      	ldr	r2, [pc, #144]	@ (800b07c <DMA_SetConfig+0x254>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d004      	beq.n	800aff8 <DMA_SetConfig+0x1d0>
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a23      	ldr	r2, [pc, #140]	@ (800b080 <DMA_SetConfig+0x258>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d101      	bne.n	800affc <DMA_SetConfig+0x1d4>
 800aff8:	2301      	movs	r3, #1
 800affa:	e000      	b.n	800affe <DMA_SetConfig+0x1d6>
 800affc:	2300      	movs	r3, #0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d059      	beq.n	800b0b6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b006:	f003 031f 	and.w	r3, r3, #31
 800b00a:	223f      	movs	r2, #63	@ 0x3f
 800b00c:	409a      	lsls	r2, r3
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b020:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	2b40      	cmp	r3, #64	@ 0x40
 800b030:	d138      	bne.n	800b0a4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b042:	e086      	b.n	800b152 <DMA_SetConfig+0x32a>
 800b044:	40020010 	.word	0x40020010
 800b048:	40020028 	.word	0x40020028
 800b04c:	40020040 	.word	0x40020040
 800b050:	40020058 	.word	0x40020058
 800b054:	40020070 	.word	0x40020070
 800b058:	40020088 	.word	0x40020088
 800b05c:	400200a0 	.word	0x400200a0
 800b060:	400200b8 	.word	0x400200b8
 800b064:	40020410 	.word	0x40020410
 800b068:	40020428 	.word	0x40020428
 800b06c:	40020440 	.word	0x40020440
 800b070:	40020458 	.word	0x40020458
 800b074:	40020470 	.word	0x40020470
 800b078:	40020488 	.word	0x40020488
 800b07c:	400204a0 	.word	0x400204a0
 800b080:	400204b8 	.word	0x400204b8
 800b084:	58025408 	.word	0x58025408
 800b088:	5802541c 	.word	0x5802541c
 800b08c:	58025430 	.word	0x58025430
 800b090:	58025444 	.word	0x58025444
 800b094:	58025458 	.word	0x58025458
 800b098:	5802546c 	.word	0x5802546c
 800b09c:	58025480 	.word	0x58025480
 800b0a0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	60da      	str	r2, [r3, #12]
}
 800b0b4:	e04d      	b.n	800b152 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a29      	ldr	r2, [pc, #164]	@ (800b160 <DMA_SetConfig+0x338>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d022      	beq.n	800b106 <DMA_SetConfig+0x2de>
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a27      	ldr	r2, [pc, #156]	@ (800b164 <DMA_SetConfig+0x33c>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d01d      	beq.n	800b106 <DMA_SetConfig+0x2de>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a26      	ldr	r2, [pc, #152]	@ (800b168 <DMA_SetConfig+0x340>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d018      	beq.n	800b106 <DMA_SetConfig+0x2de>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a24      	ldr	r2, [pc, #144]	@ (800b16c <DMA_SetConfig+0x344>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d013      	beq.n	800b106 <DMA_SetConfig+0x2de>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a23      	ldr	r2, [pc, #140]	@ (800b170 <DMA_SetConfig+0x348>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d00e      	beq.n	800b106 <DMA_SetConfig+0x2de>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a21      	ldr	r2, [pc, #132]	@ (800b174 <DMA_SetConfig+0x34c>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d009      	beq.n	800b106 <DMA_SetConfig+0x2de>
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a20      	ldr	r2, [pc, #128]	@ (800b178 <DMA_SetConfig+0x350>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d004      	beq.n	800b106 <DMA_SetConfig+0x2de>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a1e      	ldr	r2, [pc, #120]	@ (800b17c <DMA_SetConfig+0x354>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d101      	bne.n	800b10a <DMA_SetConfig+0x2e2>
 800b106:	2301      	movs	r3, #1
 800b108:	e000      	b.n	800b10c <DMA_SetConfig+0x2e4>
 800b10a:	2300      	movs	r3, #0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d020      	beq.n	800b152 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b114:	f003 031f 	and.w	r3, r3, #31
 800b118:	2201      	movs	r2, #1
 800b11a:	409a      	lsls	r2, r3
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	2b40      	cmp	r3, #64	@ 0x40
 800b12e:	d108      	bne.n	800b142 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	60da      	str	r2, [r3, #12]
}
 800b140:	e007      	b.n	800b152 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	60da      	str	r2, [r3, #12]
}
 800b152:	bf00      	nop
 800b154:	371c      	adds	r7, #28
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	58025408 	.word	0x58025408
 800b164:	5802541c 	.word	0x5802541c
 800b168:	58025430 	.word	0x58025430
 800b16c:	58025444 	.word	0x58025444
 800b170:	58025458 	.word	0x58025458
 800b174:	5802546c 	.word	0x5802546c
 800b178:	58025480 	.word	0x58025480
 800b17c:	58025494 	.word	0x58025494

0800b180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a42      	ldr	r2, [pc, #264]	@ (800b298 <DMA_CalcBaseAndBitshift+0x118>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d04a      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a41      	ldr	r2, [pc, #260]	@ (800b29c <DMA_CalcBaseAndBitshift+0x11c>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d045      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a3f      	ldr	r2, [pc, #252]	@ (800b2a0 <DMA_CalcBaseAndBitshift+0x120>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d040      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a3e      	ldr	r2, [pc, #248]	@ (800b2a4 <DMA_CalcBaseAndBitshift+0x124>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d03b      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a3c      	ldr	r2, [pc, #240]	@ (800b2a8 <DMA_CalcBaseAndBitshift+0x128>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d036      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a3b      	ldr	r2, [pc, #236]	@ (800b2ac <DMA_CalcBaseAndBitshift+0x12c>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d031      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a39      	ldr	r2, [pc, #228]	@ (800b2b0 <DMA_CalcBaseAndBitshift+0x130>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d02c      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a38      	ldr	r2, [pc, #224]	@ (800b2b4 <DMA_CalcBaseAndBitshift+0x134>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d027      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a36      	ldr	r2, [pc, #216]	@ (800b2b8 <DMA_CalcBaseAndBitshift+0x138>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d022      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a35      	ldr	r2, [pc, #212]	@ (800b2bc <DMA_CalcBaseAndBitshift+0x13c>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d01d      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a33      	ldr	r2, [pc, #204]	@ (800b2c0 <DMA_CalcBaseAndBitshift+0x140>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d018      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a32      	ldr	r2, [pc, #200]	@ (800b2c4 <DMA_CalcBaseAndBitshift+0x144>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d013      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a30      	ldr	r2, [pc, #192]	@ (800b2c8 <DMA_CalcBaseAndBitshift+0x148>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d00e      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a2f      	ldr	r2, [pc, #188]	@ (800b2cc <DMA_CalcBaseAndBitshift+0x14c>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d009      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a2d      	ldr	r2, [pc, #180]	@ (800b2d0 <DMA_CalcBaseAndBitshift+0x150>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d004      	beq.n	800b228 <DMA_CalcBaseAndBitshift+0xa8>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a2c      	ldr	r2, [pc, #176]	@ (800b2d4 <DMA_CalcBaseAndBitshift+0x154>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d101      	bne.n	800b22c <DMA_CalcBaseAndBitshift+0xac>
 800b228:	2301      	movs	r3, #1
 800b22a:	e000      	b.n	800b22e <DMA_CalcBaseAndBitshift+0xae>
 800b22c:	2300      	movs	r3, #0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d024      	beq.n	800b27c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	b2db      	uxtb	r3, r3
 800b238:	3b10      	subs	r3, #16
 800b23a:	4a27      	ldr	r2, [pc, #156]	@ (800b2d8 <DMA_CalcBaseAndBitshift+0x158>)
 800b23c:	fba2 2303 	umull	r2, r3, r2, r3
 800b240:	091b      	lsrs	r3, r3, #4
 800b242:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f003 0307 	and.w	r3, r3, #7
 800b24a:	4a24      	ldr	r2, [pc, #144]	@ (800b2dc <DMA_CalcBaseAndBitshift+0x15c>)
 800b24c:	5cd3      	ldrb	r3, [r2, r3]
 800b24e:	461a      	mov	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b03      	cmp	r3, #3
 800b258:	d908      	bls.n	800b26c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	461a      	mov	r2, r3
 800b260:	4b1f      	ldr	r3, [pc, #124]	@ (800b2e0 <DMA_CalcBaseAndBitshift+0x160>)
 800b262:	4013      	ands	r3, r2
 800b264:	1d1a      	adds	r2, r3, #4
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	659a      	str	r2, [r3, #88]	@ 0x58
 800b26a:	e00d      	b.n	800b288 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	461a      	mov	r2, r3
 800b272:	4b1b      	ldr	r3, [pc, #108]	@ (800b2e0 <DMA_CalcBaseAndBitshift+0x160>)
 800b274:	4013      	ands	r3, r2
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	6593      	str	r3, [r2, #88]	@ 0x58
 800b27a:	e005      	b.n	800b288 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr
 800b298:	40020010 	.word	0x40020010
 800b29c:	40020028 	.word	0x40020028
 800b2a0:	40020040 	.word	0x40020040
 800b2a4:	40020058 	.word	0x40020058
 800b2a8:	40020070 	.word	0x40020070
 800b2ac:	40020088 	.word	0x40020088
 800b2b0:	400200a0 	.word	0x400200a0
 800b2b4:	400200b8 	.word	0x400200b8
 800b2b8:	40020410 	.word	0x40020410
 800b2bc:	40020428 	.word	0x40020428
 800b2c0:	40020440 	.word	0x40020440
 800b2c4:	40020458 	.word	0x40020458
 800b2c8:	40020470 	.word	0x40020470
 800b2cc:	40020488 	.word	0x40020488
 800b2d0:	400204a0 	.word	0x400204a0
 800b2d4:	400204b8 	.word	0x400204b8
 800b2d8:	aaaaaaab 	.word	0xaaaaaaab
 800b2dc:	0801e300 	.word	0x0801e300
 800b2e0:	fffffc00 	.word	0xfffffc00

0800b2e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d120      	bne.n	800b33a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2fc:	2b03      	cmp	r3, #3
 800b2fe:	d858      	bhi.n	800b3b2 <DMA_CheckFifoParam+0xce>
 800b300:	a201      	add	r2, pc, #4	@ (adr r2, 800b308 <DMA_CheckFifoParam+0x24>)
 800b302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b306:	bf00      	nop
 800b308:	0800b319 	.word	0x0800b319
 800b30c:	0800b32b 	.word	0x0800b32b
 800b310:	0800b319 	.word	0x0800b319
 800b314:	0800b3b3 	.word	0x0800b3b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b31c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d048      	beq.n	800b3b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b328:	e045      	b.n	800b3b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b32e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b332:	d142      	bne.n	800b3ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b338:	e03f      	b.n	800b3ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b342:	d123      	bne.n	800b38c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b348:	2b03      	cmp	r3, #3
 800b34a:	d838      	bhi.n	800b3be <DMA_CheckFifoParam+0xda>
 800b34c:	a201      	add	r2, pc, #4	@ (adr r2, 800b354 <DMA_CheckFifoParam+0x70>)
 800b34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b352:	bf00      	nop
 800b354:	0800b365 	.word	0x0800b365
 800b358:	0800b36b 	.word	0x0800b36b
 800b35c:	0800b365 	.word	0x0800b365
 800b360:	0800b37d 	.word	0x0800b37d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b364:	2301      	movs	r3, #1
 800b366:	73fb      	strb	r3, [r7, #15]
        break;
 800b368:	e030      	b.n	800b3cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b36e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b372:	2b00      	cmp	r3, #0
 800b374:	d025      	beq.n	800b3c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b37a:	e022      	b.n	800b3c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b380:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b384:	d11f      	bne.n	800b3c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b38a:	e01c      	b.n	800b3c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b390:	2b02      	cmp	r3, #2
 800b392:	d902      	bls.n	800b39a <DMA_CheckFifoParam+0xb6>
 800b394:	2b03      	cmp	r3, #3
 800b396:	d003      	beq.n	800b3a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b398:	e018      	b.n	800b3cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	73fb      	strb	r3, [r7, #15]
        break;
 800b39e:	e015      	b.n	800b3cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00e      	beq.n	800b3ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b0:	e00b      	b.n	800b3ca <DMA_CheckFifoParam+0xe6>
        break;
 800b3b2:	bf00      	nop
 800b3b4:	e00a      	b.n	800b3cc <DMA_CheckFifoParam+0xe8>
        break;
 800b3b6:	bf00      	nop
 800b3b8:	e008      	b.n	800b3cc <DMA_CheckFifoParam+0xe8>
        break;
 800b3ba:	bf00      	nop
 800b3bc:	e006      	b.n	800b3cc <DMA_CheckFifoParam+0xe8>
        break;
 800b3be:	bf00      	nop
 800b3c0:	e004      	b.n	800b3cc <DMA_CheckFifoParam+0xe8>
        break;
 800b3c2:	bf00      	nop
 800b3c4:	e002      	b.n	800b3cc <DMA_CheckFifoParam+0xe8>
        break;
 800b3c6:	bf00      	nop
 800b3c8:	e000      	b.n	800b3cc <DMA_CheckFifoParam+0xe8>
    break;
 800b3ca:	bf00      	nop
    }
  }

  return status;
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3714      	adds	r7, #20
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop

0800b3dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a38      	ldr	r2, [pc, #224]	@ (800b4d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d022      	beq.n	800b43a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a36      	ldr	r2, [pc, #216]	@ (800b4d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d01d      	beq.n	800b43a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a35      	ldr	r2, [pc, #212]	@ (800b4d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d018      	beq.n	800b43a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a33      	ldr	r2, [pc, #204]	@ (800b4dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d013      	beq.n	800b43a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a32      	ldr	r2, [pc, #200]	@ (800b4e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d00e      	beq.n	800b43a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a30      	ldr	r2, [pc, #192]	@ (800b4e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d009      	beq.n	800b43a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a2f      	ldr	r2, [pc, #188]	@ (800b4e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d004      	beq.n	800b43a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a2d      	ldr	r2, [pc, #180]	@ (800b4ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d101      	bne.n	800b43e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b43a:	2301      	movs	r3, #1
 800b43c:	e000      	b.n	800b440 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b43e:	2300      	movs	r3, #0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01a      	beq.n	800b47a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	3b08      	subs	r3, #8
 800b44c:	4a28      	ldr	r2, [pc, #160]	@ (800b4f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b44e:	fba2 2303 	umull	r2, r3, r2, r3
 800b452:	091b      	lsrs	r3, r3, #4
 800b454:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	4b26      	ldr	r3, [pc, #152]	@ (800b4f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b45a:	4413      	add	r3, r2
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	461a      	mov	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a24      	ldr	r2, [pc, #144]	@ (800b4f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b468:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f003 031f 	and.w	r3, r3, #31
 800b470:	2201      	movs	r2, #1
 800b472:	409a      	lsls	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b478:	e024      	b.n	800b4c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	3b10      	subs	r3, #16
 800b482:	4a1e      	ldr	r2, [pc, #120]	@ (800b4fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b484:	fba2 2303 	umull	r2, r3, r2, r3
 800b488:	091b      	lsrs	r3, r3, #4
 800b48a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	4a1c      	ldr	r2, [pc, #112]	@ (800b500 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d806      	bhi.n	800b4a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	4a1b      	ldr	r2, [pc, #108]	@ (800b504 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d902      	bls.n	800b4a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3308      	adds	r3, #8
 800b4a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	4b18      	ldr	r3, [pc, #96]	@ (800b508 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b4a6:	4413      	add	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a16      	ldr	r2, [pc, #88]	@ (800b50c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b4b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f003 031f 	and.w	r3, r3, #31
 800b4bc:	2201      	movs	r2, #1
 800b4be:	409a      	lsls	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b4c4:	bf00      	nop
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	58025408 	.word	0x58025408
 800b4d4:	5802541c 	.word	0x5802541c
 800b4d8:	58025430 	.word	0x58025430
 800b4dc:	58025444 	.word	0x58025444
 800b4e0:	58025458 	.word	0x58025458
 800b4e4:	5802546c 	.word	0x5802546c
 800b4e8:	58025480 	.word	0x58025480
 800b4ec:	58025494 	.word	0x58025494
 800b4f0:	cccccccd 	.word	0xcccccccd
 800b4f4:	16009600 	.word	0x16009600
 800b4f8:	58025880 	.word	0x58025880
 800b4fc:	aaaaaaab 	.word	0xaaaaaaab
 800b500:	400204b8 	.word	0x400204b8
 800b504:	4002040f 	.word	0x4002040f
 800b508:	10008200 	.word	0x10008200
 800b50c:	40020880 	.word	0x40020880

0800b510 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d04a      	beq.n	800b5bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b08      	cmp	r3, #8
 800b52a:	d847      	bhi.n	800b5bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a25      	ldr	r2, [pc, #148]	@ (800b5c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d022      	beq.n	800b57c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a24      	ldr	r2, [pc, #144]	@ (800b5cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d01d      	beq.n	800b57c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a22      	ldr	r2, [pc, #136]	@ (800b5d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d018      	beq.n	800b57c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a21      	ldr	r2, [pc, #132]	@ (800b5d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d013      	beq.n	800b57c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a1f      	ldr	r2, [pc, #124]	@ (800b5d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d00e      	beq.n	800b57c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a1e      	ldr	r2, [pc, #120]	@ (800b5dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d009      	beq.n	800b57c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a1c      	ldr	r2, [pc, #112]	@ (800b5e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d004      	beq.n	800b57c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a1b      	ldr	r2, [pc, #108]	@ (800b5e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d101      	bne.n	800b580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b57c:	2301      	movs	r3, #1
 800b57e:	e000      	b.n	800b582 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b580:	2300      	movs	r3, #0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00a      	beq.n	800b59c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	4b17      	ldr	r3, [pc, #92]	@ (800b5e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b58a:	4413      	add	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	461a      	mov	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a15      	ldr	r2, [pc, #84]	@ (800b5ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b598:	671a      	str	r2, [r3, #112]	@ 0x70
 800b59a:	e009      	b.n	800b5b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	4b14      	ldr	r3, [pc, #80]	@ (800b5f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b5a0:	4413      	add	r3, r2
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a11      	ldr	r2, [pc, #68]	@ (800b5f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b5ae:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	409a      	lsls	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800b5bc:	bf00      	nop
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	58025408 	.word	0x58025408
 800b5cc:	5802541c 	.word	0x5802541c
 800b5d0:	58025430 	.word	0x58025430
 800b5d4:	58025444 	.word	0x58025444
 800b5d8:	58025458 	.word	0x58025458
 800b5dc:	5802546c 	.word	0x5802546c
 800b5e0:	58025480 	.word	0x58025480
 800b5e4:	58025494 	.word	0x58025494
 800b5e8:	1600963f 	.word	0x1600963f
 800b5ec:	58025940 	.word	0x58025940
 800b5f0:	1000823f 	.word	0x1000823f
 800b5f4:	40020940 	.word	0x40020940

0800b5f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b089      	sub	sp, #36	@ 0x24
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b602:	2300      	movs	r3, #0
 800b604:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b606:	4b86      	ldr	r3, [pc, #536]	@ (800b820 <HAL_GPIO_Init+0x228>)
 800b608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b60a:	e18c      	b.n	800b926 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	2101      	movs	r1, #1
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	fa01 f303 	lsl.w	r3, r1, r3
 800b618:	4013      	ands	r3, r2
 800b61a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 817e 	beq.w	800b920 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	f003 0303 	and.w	r3, r3, #3
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d005      	beq.n	800b63c <HAL_GPIO_Init+0x44>
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	f003 0303 	and.w	r3, r3, #3
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d130      	bne.n	800b69e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	2203      	movs	r2, #3
 800b648:	fa02 f303 	lsl.w	r3, r2, r3
 800b64c:	43db      	mvns	r3, r3
 800b64e:	69ba      	ldr	r2, [r7, #24]
 800b650:	4013      	ands	r3, r2
 800b652:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	68da      	ldr	r2, [r3, #12]
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	005b      	lsls	r3, r3, #1
 800b65c:	fa02 f303 	lsl.w	r3, r2, r3
 800b660:	69ba      	ldr	r2, [r7, #24]
 800b662:	4313      	orrs	r3, r2
 800b664:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	69ba      	ldr	r2, [r7, #24]
 800b66a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b672:	2201      	movs	r2, #1
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	fa02 f303 	lsl.w	r3, r2, r3
 800b67a:	43db      	mvns	r3, r3
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	4013      	ands	r3, r2
 800b680:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	091b      	lsrs	r3, r3, #4
 800b688:	f003 0201 	and.w	r2, r3, #1
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	fa02 f303 	lsl.w	r3, r2, r3
 800b692:	69ba      	ldr	r2, [r7, #24]
 800b694:	4313      	orrs	r3, r2
 800b696:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	69ba      	ldr	r2, [r7, #24]
 800b69c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	f003 0303 	and.w	r3, r3, #3
 800b6a6:	2b03      	cmp	r3, #3
 800b6a8:	d017      	beq.n	800b6da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	005b      	lsls	r3, r3, #1
 800b6b4:	2203      	movs	r2, #3
 800b6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ba:	43db      	mvns	r3, r3
 800b6bc:	69ba      	ldr	r2, [r7, #24]
 800b6be:	4013      	ands	r3, r2
 800b6c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	689a      	ldr	r2, [r3, #8]
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	005b      	lsls	r3, r3, #1
 800b6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ce:	69ba      	ldr	r2, [r7, #24]
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	69ba      	ldr	r2, [r7, #24]
 800b6d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	f003 0303 	and.w	r3, r3, #3
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d123      	bne.n	800b72e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	08da      	lsrs	r2, r3, #3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	3208      	adds	r2, #8
 800b6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	f003 0307 	and.w	r3, r3, #7
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	220f      	movs	r2, #15
 800b6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b702:	43db      	mvns	r3, r3
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	4013      	ands	r3, r2
 800b708:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	691a      	ldr	r2, [r3, #16]
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	f003 0307 	and.w	r3, r3, #7
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	fa02 f303 	lsl.w	r3, r2, r3
 800b71a:	69ba      	ldr	r2, [r7, #24]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	08da      	lsrs	r2, r3, #3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3208      	adds	r2, #8
 800b728:	69b9      	ldr	r1, [r7, #24]
 800b72a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	005b      	lsls	r3, r3, #1
 800b738:	2203      	movs	r2, #3
 800b73a:	fa02 f303 	lsl.w	r3, r2, r3
 800b73e:	43db      	mvns	r3, r3
 800b740:	69ba      	ldr	r2, [r7, #24]
 800b742:	4013      	ands	r3, r2
 800b744:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	f003 0203 	and.w	r2, r3, #3
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	fa02 f303 	lsl.w	r3, r2, r3
 800b756:	69ba      	ldr	r2, [r7, #24]
 800b758:	4313      	orrs	r3, r2
 800b75a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	69ba      	ldr	r2, [r7, #24]
 800b760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f000 80d8 	beq.w	800b920 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b770:	4b2c      	ldr	r3, [pc, #176]	@ (800b824 <HAL_GPIO_Init+0x22c>)
 800b772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b776:	4a2b      	ldr	r2, [pc, #172]	@ (800b824 <HAL_GPIO_Init+0x22c>)
 800b778:	f043 0302 	orr.w	r3, r3, #2
 800b77c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b780:	4b28      	ldr	r3, [pc, #160]	@ (800b824 <HAL_GPIO_Init+0x22c>)
 800b782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b786:	f003 0302 	and.w	r3, r3, #2
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b78e:	4a26      	ldr	r2, [pc, #152]	@ (800b828 <HAL_GPIO_Init+0x230>)
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	089b      	lsrs	r3, r3, #2
 800b794:	3302      	adds	r3, #2
 800b796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b79a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	f003 0303 	and.w	r3, r3, #3
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	220f      	movs	r2, #15
 800b7a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7aa:	43db      	mvns	r3, r3
 800b7ac:	69ba      	ldr	r2, [r7, #24]
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a1d      	ldr	r2, [pc, #116]	@ (800b82c <HAL_GPIO_Init+0x234>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d04a      	beq.n	800b850 <HAL_GPIO_Init+0x258>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a1c      	ldr	r2, [pc, #112]	@ (800b830 <HAL_GPIO_Init+0x238>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d02b      	beq.n	800b81a <HAL_GPIO_Init+0x222>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a1b      	ldr	r2, [pc, #108]	@ (800b834 <HAL_GPIO_Init+0x23c>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d025      	beq.n	800b816 <HAL_GPIO_Init+0x21e>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a1a      	ldr	r2, [pc, #104]	@ (800b838 <HAL_GPIO_Init+0x240>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d01f      	beq.n	800b812 <HAL_GPIO_Init+0x21a>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a19      	ldr	r2, [pc, #100]	@ (800b83c <HAL_GPIO_Init+0x244>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d019      	beq.n	800b80e <HAL_GPIO_Init+0x216>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a18      	ldr	r2, [pc, #96]	@ (800b840 <HAL_GPIO_Init+0x248>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d013      	beq.n	800b80a <HAL_GPIO_Init+0x212>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a17      	ldr	r2, [pc, #92]	@ (800b844 <HAL_GPIO_Init+0x24c>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d00d      	beq.n	800b806 <HAL_GPIO_Init+0x20e>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a16      	ldr	r2, [pc, #88]	@ (800b848 <HAL_GPIO_Init+0x250>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d007      	beq.n	800b802 <HAL_GPIO_Init+0x20a>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a15      	ldr	r2, [pc, #84]	@ (800b84c <HAL_GPIO_Init+0x254>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d101      	bne.n	800b7fe <HAL_GPIO_Init+0x206>
 800b7fa:	2309      	movs	r3, #9
 800b7fc:	e029      	b.n	800b852 <HAL_GPIO_Init+0x25a>
 800b7fe:	230a      	movs	r3, #10
 800b800:	e027      	b.n	800b852 <HAL_GPIO_Init+0x25a>
 800b802:	2307      	movs	r3, #7
 800b804:	e025      	b.n	800b852 <HAL_GPIO_Init+0x25a>
 800b806:	2306      	movs	r3, #6
 800b808:	e023      	b.n	800b852 <HAL_GPIO_Init+0x25a>
 800b80a:	2305      	movs	r3, #5
 800b80c:	e021      	b.n	800b852 <HAL_GPIO_Init+0x25a>
 800b80e:	2304      	movs	r3, #4
 800b810:	e01f      	b.n	800b852 <HAL_GPIO_Init+0x25a>
 800b812:	2303      	movs	r3, #3
 800b814:	e01d      	b.n	800b852 <HAL_GPIO_Init+0x25a>
 800b816:	2302      	movs	r3, #2
 800b818:	e01b      	b.n	800b852 <HAL_GPIO_Init+0x25a>
 800b81a:	2301      	movs	r3, #1
 800b81c:	e019      	b.n	800b852 <HAL_GPIO_Init+0x25a>
 800b81e:	bf00      	nop
 800b820:	58000080 	.word	0x58000080
 800b824:	58024400 	.word	0x58024400
 800b828:	58000400 	.word	0x58000400
 800b82c:	58020000 	.word	0x58020000
 800b830:	58020400 	.word	0x58020400
 800b834:	58020800 	.word	0x58020800
 800b838:	58020c00 	.word	0x58020c00
 800b83c:	58021000 	.word	0x58021000
 800b840:	58021400 	.word	0x58021400
 800b844:	58021800 	.word	0x58021800
 800b848:	58021c00 	.word	0x58021c00
 800b84c:	58022400 	.word	0x58022400
 800b850:	2300      	movs	r3, #0
 800b852:	69fa      	ldr	r2, [r7, #28]
 800b854:	f002 0203 	and.w	r2, r2, #3
 800b858:	0092      	lsls	r2, r2, #2
 800b85a:	4093      	lsls	r3, r2
 800b85c:	69ba      	ldr	r2, [r7, #24]
 800b85e:	4313      	orrs	r3, r2
 800b860:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b862:	4938      	ldr	r1, [pc, #224]	@ (800b944 <HAL_GPIO_Init+0x34c>)
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	089b      	lsrs	r3, r3, #2
 800b868:	3302      	adds	r3, #2
 800b86a:	69ba      	ldr	r2, [r7, #24]
 800b86c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	43db      	mvns	r3, r3
 800b87c:	69ba      	ldr	r2, [r7, #24]
 800b87e:	4013      	ands	r3, r2
 800b880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d003      	beq.n	800b896 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b88e:	69ba      	ldr	r2, [r7, #24]
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	4313      	orrs	r3, r2
 800b894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b896:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b89e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	43db      	mvns	r3, r3
 800b8aa:	69ba      	ldr	r2, [r7, #24]
 800b8ac:	4013      	ands	r3, r2
 800b8ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d003      	beq.n	800b8c4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b8bc:	69ba      	ldr	r2, [r7, #24]
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b8c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	43db      	mvns	r3, r3
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	4013      	ands	r3, r2
 800b8da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d003      	beq.n	800b8f0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b8e8:	69ba      	ldr	r2, [r7, #24]
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	69ba      	ldr	r2, [r7, #24]
 800b8f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	43db      	mvns	r3, r3
 800b900:	69ba      	ldr	r2, [r7, #24]
 800b902:	4013      	ands	r3, r2
 800b904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b912:	69ba      	ldr	r2, [r7, #24]
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	4313      	orrs	r3, r2
 800b918:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	69ba      	ldr	r2, [r7, #24]
 800b91e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	3301      	adds	r3, #1
 800b924:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	fa22 f303 	lsr.w	r3, r2, r3
 800b930:	2b00      	cmp	r3, #0
 800b932:	f47f ae6b 	bne.w	800b60c <HAL_GPIO_Init+0x14>
  }
}
 800b936:	bf00      	nop
 800b938:	bf00      	nop
 800b93a:	3724      	adds	r7, #36	@ 0x24
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	58000400 	.word	0x58000400

0800b948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	460b      	mov	r3, r1
 800b952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	691a      	ldr	r2, [r3, #16]
 800b958:	887b      	ldrh	r3, [r7, #2]
 800b95a:	4013      	ands	r3, r2
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b960:	2301      	movs	r3, #1
 800b962:	73fb      	strb	r3, [r7, #15]
 800b964:	e001      	b.n	800b96a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b966:	2300      	movs	r3, #0
 800b968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	460b      	mov	r3, r1
 800b982:	807b      	strh	r3, [r7, #2]
 800b984:	4613      	mov	r3, r2
 800b986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b988:	787b      	ldrb	r3, [r7, #1]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d003      	beq.n	800b996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b98e:	887a      	ldrh	r2, [r7, #2]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b994:	e003      	b.n	800b99e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b996:	887b      	ldrh	r3, [r7, #2]
 800b998:	041a      	lsls	r2, r3, #16
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	619a      	str	r2, [r3, #24]
}
 800b99e:	bf00      	nop
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b082      	sub	sp, #8
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b9b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b9bc:	88fb      	ldrh	r3, [r7, #6]
 800b9be:	4013      	ands	r3, r2
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d008      	beq.n	800b9d6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b9c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9c8:	88fb      	ldrh	r3, [r7, #6]
 800b9ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b9ce:	88fb      	ldrh	r3, [r7, #6]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7f5 fc8b 	bl	80012ec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800b9d6:	bf00      	nop
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
	...

0800b9e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d101      	bne.n	800b9f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e08b      	b.n	800bb0a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d106      	bne.n	800ba0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7f6 fdd4 	bl	80025b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2224      	movs	r2, #36	@ 0x24
 800ba10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f022 0201 	bic.w	r2, r2, #1
 800ba22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	685a      	ldr	r2, [r3, #4]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ba30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	689a      	ldr	r2, [r3, #8]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ba40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d107      	bne.n	800ba5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	689a      	ldr	r2, [r3, #8]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba56:	609a      	str	r2, [r3, #8]
 800ba58:	e006      	b.n	800ba68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689a      	ldr	r2, [r3, #8]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800ba66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d108      	bne.n	800ba82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	685a      	ldr	r2, [r3, #4]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba7e:	605a      	str	r2, [r3, #4]
 800ba80:	e007      	b.n	800ba92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	685a      	ldr	r2, [r3, #4]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ba90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	6859      	ldr	r1, [r3, #4]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	4b1d      	ldr	r3, [pc, #116]	@ (800bb14 <HAL_I2C_Init+0x134>)
 800ba9e:	430b      	orrs	r3, r1
 800baa0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68da      	ldr	r2, [r3, #12]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bab0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	691a      	ldr	r2, [r3, #16]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	699b      	ldr	r3, [r3, #24]
 800bac2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	430a      	orrs	r2, r1
 800baca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	69d9      	ldr	r1, [r3, #28]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6a1a      	ldr	r2, [r3, #32]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	430a      	orrs	r2, r1
 800bada:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f042 0201 	orr.w	r2, r2, #1
 800baea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2220      	movs	r2, #32
 800baf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	02008000 	.word	0x02008000

0800bb18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b20      	cmp	r3, #32
 800bb2c:	d138      	bne.n	800bba0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d101      	bne.n	800bb3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bb38:	2302      	movs	r3, #2
 800bb3a:	e032      	b.n	800bba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2224      	movs	r2, #36	@ 0x24
 800bb48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f022 0201 	bic.w	r2, r2, #1
 800bb5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bb6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6819      	ldr	r1, [r3, #0]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	683a      	ldr	r2, [r7, #0]
 800bb78:	430a      	orrs	r2, r1
 800bb7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f042 0201 	orr.w	r2, r2, #1
 800bb8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2220      	movs	r2, #32
 800bb90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	e000      	b.n	800bba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bba0:	2302      	movs	r3, #2
  }
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b085      	sub	sp, #20
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	2b20      	cmp	r3, #32
 800bbc2:	d139      	bne.n	800bc38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d101      	bne.n	800bbd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bbce:	2302      	movs	r3, #2
 800bbd0:	e033      	b.n	800bc3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2224      	movs	r2, #36	@ 0x24
 800bbde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f022 0201 	bic.w	r2, r2, #1
 800bbf0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bc00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	021b      	lsls	r3, r3, #8
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f042 0201 	orr.w	r2, r2, #1
 800bc22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2220      	movs	r2, #32
 800bc28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	e000      	b.n	800bc3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bc38:	2302      	movs	r3, #2
  }
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3714      	adds	r7, #20
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr

0800bc46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b086      	sub	sp, #24
 800bc4a:	af02      	add	r7, sp, #8
 800bc4c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d101      	bne.n	800bc58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bc54:	2301      	movs	r3, #1
 800bc56:	e0fe      	b.n	800be56 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d106      	bne.n	800bc72 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f00c fb5f 	bl	8018330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2203      	movs	r2, #3
 800bc76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f008 ff1b 	bl	8014aba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6818      	ldr	r0, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	7c1a      	ldrb	r2, [r3, #16]
 800bc8c:	f88d 2000 	strb.w	r2, [sp]
 800bc90:	3304      	adds	r3, #4
 800bc92:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc94:	f008 fdec 	bl	8014870 <USB_CoreInit>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d005      	beq.n	800bcaa <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2202      	movs	r2, #2
 800bca2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e0d5      	b.n	800be56 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2100      	movs	r1, #0
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f008 ff13 	bl	8014adc <USB_SetCurrentMode>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d005      	beq.n	800bcc8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e0c6      	b.n	800be56 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bcc8:	2300      	movs	r3, #0
 800bcca:	73fb      	strb	r3, [r7, #15]
 800bccc:	e04a      	b.n	800bd64 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bcce:	7bfa      	ldrb	r2, [r7, #15]
 800bcd0:	6879      	ldr	r1, [r7, #4]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	00db      	lsls	r3, r3, #3
 800bcd6:	4413      	add	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	440b      	add	r3, r1
 800bcdc:	3315      	adds	r3, #21
 800bcde:	2201      	movs	r2, #1
 800bce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bce2:	7bfa      	ldrb	r2, [r7, #15]
 800bce4:	6879      	ldr	r1, [r7, #4]
 800bce6:	4613      	mov	r3, r2
 800bce8:	00db      	lsls	r3, r3, #3
 800bcea:	4413      	add	r3, r2
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	440b      	add	r3, r1
 800bcf0:	3314      	adds	r3, #20
 800bcf2:	7bfa      	ldrb	r2, [r7, #15]
 800bcf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bcf6:	7bfa      	ldrb	r2, [r7, #15]
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
 800bcfa:	b298      	uxth	r0, r3
 800bcfc:	6879      	ldr	r1, [r7, #4]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	00db      	lsls	r3, r3, #3
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	440b      	add	r3, r1
 800bd08:	332e      	adds	r3, #46	@ 0x2e
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bd0e:	7bfa      	ldrb	r2, [r7, #15]
 800bd10:	6879      	ldr	r1, [r7, #4]
 800bd12:	4613      	mov	r3, r2
 800bd14:	00db      	lsls	r3, r3, #3
 800bd16:	4413      	add	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	440b      	add	r3, r1
 800bd1c:	3318      	adds	r3, #24
 800bd1e:	2200      	movs	r2, #0
 800bd20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bd22:	7bfa      	ldrb	r2, [r7, #15]
 800bd24:	6879      	ldr	r1, [r7, #4]
 800bd26:	4613      	mov	r3, r2
 800bd28:	00db      	lsls	r3, r3, #3
 800bd2a:	4413      	add	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	440b      	add	r3, r1
 800bd30:	331c      	adds	r3, #28
 800bd32:	2200      	movs	r2, #0
 800bd34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bd36:	7bfa      	ldrb	r2, [r7, #15]
 800bd38:	6879      	ldr	r1, [r7, #4]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	00db      	lsls	r3, r3, #3
 800bd3e:	4413      	add	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	440b      	add	r3, r1
 800bd44:	3320      	adds	r3, #32
 800bd46:	2200      	movs	r2, #0
 800bd48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bd4a:	7bfa      	ldrb	r2, [r7, #15]
 800bd4c:	6879      	ldr	r1, [r7, #4]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	00db      	lsls	r3, r3, #3
 800bd52:	4413      	add	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	440b      	add	r3, r1
 800bd58:	3324      	adds	r3, #36	@ 0x24
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd5e:	7bfb      	ldrb	r3, [r7, #15]
 800bd60:	3301      	adds	r3, #1
 800bd62:	73fb      	strb	r3, [r7, #15]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	791b      	ldrb	r3, [r3, #4]
 800bd68:	7bfa      	ldrb	r2, [r7, #15]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d3af      	bcc.n	800bcce <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd6e:	2300      	movs	r3, #0
 800bd70:	73fb      	strb	r3, [r7, #15]
 800bd72:	e044      	b.n	800bdfe <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bd74:	7bfa      	ldrb	r2, [r7, #15]
 800bd76:	6879      	ldr	r1, [r7, #4]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	00db      	lsls	r3, r3, #3
 800bd7c:	4413      	add	r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	440b      	add	r3, r1
 800bd82:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800bd86:	2200      	movs	r2, #0
 800bd88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bd8a:	7bfa      	ldrb	r2, [r7, #15]
 800bd8c:	6879      	ldr	r1, [r7, #4]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	00db      	lsls	r3, r3, #3
 800bd92:	4413      	add	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	440b      	add	r3, r1
 800bd98:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800bd9c:	7bfa      	ldrb	r2, [r7, #15]
 800bd9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bda0:	7bfa      	ldrb	r2, [r7, #15]
 800bda2:	6879      	ldr	r1, [r7, #4]
 800bda4:	4613      	mov	r3, r2
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	4413      	add	r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	440b      	add	r3, r1
 800bdae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bdb6:	7bfa      	ldrb	r2, [r7, #15]
 800bdb8:	6879      	ldr	r1, [r7, #4]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	00db      	lsls	r3, r3, #3
 800bdbe:	4413      	add	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	440b      	add	r3, r1
 800bdc4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bdcc:	7bfa      	ldrb	r2, [r7, #15]
 800bdce:	6879      	ldr	r1, [r7, #4]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	00db      	lsls	r3, r3, #3
 800bdd4:	4413      	add	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	440b      	add	r3, r1
 800bdda:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bdde:	2200      	movs	r2, #0
 800bde0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bde2:	7bfa      	ldrb	r2, [r7, #15]
 800bde4:	6879      	ldr	r1, [r7, #4]
 800bde6:	4613      	mov	r3, r2
 800bde8:	00db      	lsls	r3, r3, #3
 800bdea:	4413      	add	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	440b      	add	r3, r1
 800bdf0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdf8:	7bfb      	ldrb	r3, [r7, #15]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	73fb      	strb	r3, [r7, #15]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	791b      	ldrb	r3, [r3, #4]
 800be02:	7bfa      	ldrb	r2, [r7, #15]
 800be04:	429a      	cmp	r2, r3
 800be06:	d3b5      	bcc.n	800bd74 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6818      	ldr	r0, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	7c1a      	ldrb	r2, [r3, #16]
 800be10:	f88d 2000 	strb.w	r2, [sp]
 800be14:	3304      	adds	r3, #4
 800be16:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be18:	f008 feac 	bl	8014b74 <USB_DevInit>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d005      	beq.n	800be2e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2202      	movs	r2, #2
 800be26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	e013      	b.n	800be56 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	7b1b      	ldrb	r3, [r3, #12]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d102      	bne.n	800be4a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f001 f96d 	bl	800d124 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4618      	mov	r0, r3
 800be50:	f009 feeb 	bl	8015c2a <USB_DevDisconnect>

  return HAL_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b084      	sub	sp, #16
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800be72:	2b01      	cmp	r3, #1
 800be74:	d101      	bne.n	800be7a <HAL_PCD_Start+0x1c>
 800be76:	2302      	movs	r3, #2
 800be78:	e022      	b.n	800bec0 <HAL_PCD_Start+0x62>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d009      	beq.n	800bea2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800be92:	2b01      	cmp	r3, #1
 800be94:	d105      	bne.n	800bea2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be9a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f008 fdf6 	bl	8014a98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f009 fe99 	bl	8015be8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800bec8:	b590      	push	{r4, r7, lr}
 800beca:	b08d      	sub	sp, #52	@ 0x34
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bed6:	6a3b      	ldr	r3, [r7, #32]
 800bed8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4618      	mov	r0, r3
 800bee0:	f009 ff57 	bl	8015d92 <USB_GetMode>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f040 84b9 	bne.w	800c85e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f009 febb 	bl	8015c6c <USB_ReadInterrupts>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f000 84af 	beq.w	800c85c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	0a1b      	lsrs	r3, r3, #8
 800bf08:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f009 fea8 	bl	8015c6c <USB_ReadInterrupts>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	f003 0302 	and.w	r3, r3, #2
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d107      	bne.n	800bf36 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	695a      	ldr	r2, [r3, #20]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f002 0202 	and.w	r2, r2, #2
 800bf34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f009 fe96 	bl	8015c6c <USB_ReadInterrupts>
 800bf40:	4603      	mov	r3, r0
 800bf42:	f003 0310 	and.w	r3, r3, #16
 800bf46:	2b10      	cmp	r3, #16
 800bf48:	d161      	bne.n	800c00e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	699a      	ldr	r2, [r3, #24]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f022 0210 	bic.w	r2, r2, #16
 800bf58:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800bf5a:	6a3b      	ldr	r3, [r7, #32]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	f003 020f 	and.w	r2, r3, #15
 800bf66:	4613      	mov	r3, r2
 800bf68:	00db      	lsls	r3, r3, #3
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	4413      	add	r3, r2
 800bf76:	3304      	adds	r3, #4
 800bf78:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	0c5b      	lsrs	r3, r3, #17
 800bf7e:	f003 030f 	and.w	r3, r3, #15
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d124      	bne.n	800bfd0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800bf86:	69ba      	ldr	r2, [r7, #24]
 800bf88:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800bf8c:	4013      	ands	r3, r2
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d035      	beq.n	800bffe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	091b      	lsrs	r3, r3, #4
 800bf9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bf9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	6a38      	ldr	r0, [r7, #32]
 800bfa6:	f009 fccd 	bl	8015944 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	68da      	ldr	r2, [r3, #12]
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	091b      	lsrs	r3, r3, #4
 800bfb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfb6:	441a      	add	r2, r3
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	695a      	ldr	r2, [r3, #20]
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	091b      	lsrs	r3, r3, #4
 800bfc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfc8:	441a      	add	r2, r3
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	615a      	str	r2, [r3, #20]
 800bfce:	e016      	b.n	800bffe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	0c5b      	lsrs	r3, r3, #17
 800bfd4:	f003 030f 	and.w	r3, r3, #15
 800bfd8:	2b06      	cmp	r3, #6
 800bfda:	d110      	bne.n	800bffe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bfe2:	2208      	movs	r2, #8
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6a38      	ldr	r0, [r7, #32]
 800bfe8:	f009 fcac 	bl	8015944 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	695a      	ldr	r2, [r3, #20]
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	091b      	lsrs	r3, r3, #4
 800bff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bff8:	441a      	add	r2, r3
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	699a      	ldr	r2, [r3, #24]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f042 0210 	orr.w	r2, r2, #16
 800c00c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4618      	mov	r0, r3
 800c014:	f009 fe2a 	bl	8015c6c <USB_ReadInterrupts>
 800c018:	4603      	mov	r3, r0
 800c01a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c01e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c022:	f040 80a7 	bne.w	800c174 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4618      	mov	r0, r3
 800c030:	f009 fe2f 	bl	8015c92 <USB_ReadDevAllOutEpInterrupt>
 800c034:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c036:	e099      	b.n	800c16c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 808e 	beq.w	800c160 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c04a:	b2d2      	uxtb	r2, r2
 800c04c:	4611      	mov	r1, r2
 800c04e:	4618      	mov	r0, r3
 800c050:	f009 fe53 	bl	8015cfa <USB_ReadDevOutEPInterrupt>
 800c054:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	f003 0301 	and.w	r3, r3, #1
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00c      	beq.n	800c07a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c062:	015a      	lsls	r2, r3, #5
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	4413      	add	r3, r2
 800c068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c06c:	461a      	mov	r2, r3
 800c06e:	2301      	movs	r3, #1
 800c070:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c072:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fecf 	bl	800ce18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	f003 0308 	and.w	r3, r3, #8
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00c      	beq.n	800c09e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c086:	015a      	lsls	r2, r3, #5
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	4413      	add	r3, r2
 800c08c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c090:	461a      	mov	r2, r3
 800c092:	2308      	movs	r3, #8
 800c094:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c096:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 ffa5 	bl	800cfe8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	f003 0310 	and.w	r3, r3, #16
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d008      	beq.n	800c0ba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0aa:	015a      	lsls	r2, r3, #5
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	2310      	movs	r3, #16
 800c0b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	f003 0302 	and.w	r3, r3, #2
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d030      	beq.n	800c126 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	695b      	ldr	r3, [r3, #20]
 800c0c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0cc:	2b80      	cmp	r3, #128	@ 0x80
 800c0ce:	d109      	bne.n	800c0e4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	69fa      	ldr	r2, [r7, #28]
 800c0da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c0de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c0e2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c0e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	00db      	lsls	r3, r3, #3
 800c0ea:	4413      	add	r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	78db      	ldrb	r3, [r3, #3]
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d108      	bne.n	800c114 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	2200      	movs	r2, #0
 800c106:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f00c fa06 	bl	8018520 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c116:	015a      	lsls	r2, r3, #5
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	4413      	add	r3, r2
 800c11c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c120:	461a      	mov	r2, r3
 800c122:	2302      	movs	r3, #2
 800c124:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	f003 0320 	and.w	r3, r3, #32
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d008      	beq.n	800c142 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c132:	015a      	lsls	r2, r3, #5
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	4413      	add	r3, r2
 800c138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c13c:	461a      	mov	r2, r3
 800c13e:	2320      	movs	r3, #32
 800c140:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d009      	beq.n	800c160 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	4413      	add	r3, r2
 800c154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c158:	461a      	mov	r2, r3
 800c15a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c15e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c162:	3301      	adds	r3, #1
 800c164:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c168:	085b      	lsrs	r3, r3, #1
 800c16a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f47f af62 	bne.w	800c038 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4618      	mov	r0, r3
 800c17a:	f009 fd77 	bl	8015c6c <USB_ReadInterrupts>
 800c17e:	4603      	mov	r3, r0
 800c180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c184:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c188:	f040 80db 	bne.w	800c342 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4618      	mov	r0, r3
 800c192:	f009 fd98 	bl	8015cc6 <USB_ReadDevAllInEpInterrupt>
 800c196:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c198:	2300      	movs	r3, #0
 800c19a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c19c:	e0cd      	b.n	800c33a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a0:	f003 0301 	and.w	r3, r3, #1
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f000 80c2 	beq.w	800c32e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1b0:	b2d2      	uxtb	r2, r2
 800c1b2:	4611      	mov	r1, r2
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f009 fdbe 	bl	8015d36 <USB_ReadDevInEPInterrupt>
 800c1ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	f003 0301 	and.w	r3, r3, #1
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d057      	beq.n	800c276 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c8:	f003 030f 	and.w	r3, r3, #15
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c1d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	43db      	mvns	r3, r3
 800c1e0:	69f9      	ldr	r1, [r7, #28]
 800c1e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c1e6:	4013      	ands	r3, r2
 800c1e8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ec:	015a      	lsls	r2, r3, #5
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	799b      	ldrb	r3, [r3, #6]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d132      	bne.n	800c26a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c204:	6879      	ldr	r1, [r7, #4]
 800c206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c208:	4613      	mov	r3, r2
 800c20a:	00db      	lsls	r3, r3, #3
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	440b      	add	r3, r1
 800c212:	3320      	adds	r3, #32
 800c214:	6819      	ldr	r1, [r3, #0]
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c21a:	4613      	mov	r3, r2
 800c21c:	00db      	lsls	r3, r3, #3
 800c21e:	4413      	add	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4403      	add	r3, r0
 800c224:	331c      	adds	r3, #28
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4419      	add	r1, r3
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c22e:	4613      	mov	r3, r2
 800c230:	00db      	lsls	r3, r3, #3
 800c232:	4413      	add	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	4403      	add	r3, r0
 800c238:	3320      	adds	r3, #32
 800c23a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d113      	bne.n	800c26a <HAL_PCD_IRQHandler+0x3a2>
 800c242:	6879      	ldr	r1, [r7, #4]
 800c244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c246:	4613      	mov	r3, r2
 800c248:	00db      	lsls	r3, r3, #3
 800c24a:	4413      	add	r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	440b      	add	r3, r1
 800c250:	3324      	adds	r3, #36	@ 0x24
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d108      	bne.n	800c26a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6818      	ldr	r0, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c262:	461a      	mov	r2, r3
 800c264:	2101      	movs	r1, #1
 800c266:	f009 fdc7 	bl	8015df8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f00c f8d0 	bl	8018416 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	f003 0308 	and.w	r3, r3, #8
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d008      	beq.n	800c292 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c282:	015a      	lsls	r2, r3, #5
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	4413      	add	r3, r2
 800c288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c28c:	461a      	mov	r2, r3
 800c28e:	2308      	movs	r3, #8
 800c290:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f003 0310 	and.w	r3, r3, #16
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d008      	beq.n	800c2ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29e:	015a      	lsls	r2, r3, #5
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	2310      	movs	r3, #16
 800c2ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d008      	beq.n	800c2ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ba:	015a      	lsls	r2, r3, #5
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	4413      	add	r3, r2
 800c2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	2340      	movs	r3, #64	@ 0x40
 800c2c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	f003 0302 	and.w	r3, r3, #2
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d023      	beq.n	800c31c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c2d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2d6:	6a38      	ldr	r0, [r7, #32]
 800c2d8:	f008 fdaa 	bl	8014e30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c2dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2de:	4613      	mov	r3, r2
 800c2e0:	00db      	lsls	r3, r3, #3
 800c2e2:	4413      	add	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	3310      	adds	r3, #16
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	78db      	ldrb	r3, [r3, #3]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d108      	bne.n	800c30a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c300:	b2db      	uxtb	r3, r3
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f00c f91d 	bl	8018544 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30c:	015a      	lsls	r2, r3, #5
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	4413      	add	r3, r2
 800c312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c316:	461a      	mov	r2, r3
 800c318:	2302      	movs	r3, #2
 800c31a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c326:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 fce8 	bl	800ccfe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c330:	3301      	adds	r3, #1
 800c332:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c336:	085b      	lsrs	r3, r3, #1
 800c338:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f47f af2e 	bne.w	800c19e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4618      	mov	r0, r3
 800c348:	f009 fc90 	bl	8015c6c <USB_ReadInterrupts>
 800c34c:	4603      	mov	r3, r0
 800c34e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c352:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c356:	d122      	bne.n	800c39e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	69fa      	ldr	r2, [r7, #28]
 800c362:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c366:	f023 0301 	bic.w	r3, r3, #1
 800c36a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c372:	2b01      	cmp	r3, #1
 800c374:	d108      	bne.n	800c388 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c37e:	2100      	movs	r1, #0
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fef3 	bl	800d16c <HAL_PCDEx_LPM_Callback>
 800c386:	e002      	b.n	800c38e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f00c f8bb 	bl	8018504 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	695a      	ldr	r2, [r3, #20]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c39c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f009 fc62 	bl	8015c6c <USB_ReadInterrupts>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3b2:	d112      	bne.n	800c3da <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	f003 0301 	and.w	r3, r3, #1
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d102      	bne.n	800c3ca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f00c f877 	bl	80184b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	695a      	ldr	r2, [r3, #20]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c3d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f009 fc44 	bl	8015c6c <USB_ReadInterrupts>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3ee:	d121      	bne.n	800c434 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	695a      	ldr	r2, [r3, #20]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800c3fe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c406:	2b00      	cmp	r3, #0
 800c408:	d111      	bne.n	800c42e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c418:	089b      	lsrs	r3, r3, #2
 800c41a:	f003 020f 	and.w	r2, r3, #15
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c424:	2101      	movs	r1, #1
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fea0 	bl	800d16c <HAL_PCDEx_LPM_Callback>
 800c42c:	e002      	b.n	800c434 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f00c f842 	bl	80184b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4618      	mov	r0, r3
 800c43a:	f009 fc17 	bl	8015c6c <USB_ReadInterrupts>
 800c43e:	4603      	mov	r3, r0
 800c440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c448:	f040 80b7 	bne.w	800c5ba <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	69fa      	ldr	r2, [r7, #28]
 800c456:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c45a:	f023 0301 	bic.w	r3, r3, #1
 800c45e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2110      	movs	r1, #16
 800c466:	4618      	mov	r0, r3
 800c468:	f008 fce2 	bl	8014e30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c46c:	2300      	movs	r3, #0
 800c46e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c470:	e046      	b.n	800c500 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c47e:	461a      	mov	r2, r3
 800c480:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c484:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c488:	015a      	lsls	r2, r3, #5
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	4413      	add	r3, r2
 800c48e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c496:	0151      	lsls	r1, r2, #5
 800c498:	69fa      	ldr	r2, [r7, #28]
 800c49a:	440a      	add	r2, r1
 800c49c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c4a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c4a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a8:	015a      	lsls	r2, r3, #5
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c4b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4bc:	015a      	lsls	r2, r3, #5
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4ca:	0151      	lsls	r1, r2, #5
 800c4cc:	69fa      	ldr	r2, [r7, #28]
 800c4ce:	440a      	add	r2, r1
 800c4d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c4d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4dc:	015a      	lsls	r2, r3, #5
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4ea:	0151      	lsls	r1, r2, #5
 800c4ec:	69fa      	ldr	r2, [r7, #28]
 800c4ee:	440a      	add	r2, r1
 800c4f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c4f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	791b      	ldrb	r3, [r3, #4]
 800c504:	461a      	mov	r2, r3
 800c506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c508:	4293      	cmp	r3, r2
 800c50a:	d3b2      	bcc.n	800c472 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c512:	69db      	ldr	r3, [r3, #28]
 800c514:	69fa      	ldr	r2, [r7, #28]
 800c516:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c51a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c51e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	7bdb      	ldrb	r3, [r3, #15]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d016      	beq.n	800c556 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c52e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c532:	69fa      	ldr	r2, [r7, #28]
 800c534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c538:	f043 030b 	orr.w	r3, r3, #11
 800c53c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c548:	69fa      	ldr	r2, [r7, #28]
 800c54a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c54e:	f043 030b 	orr.w	r3, r3, #11
 800c552:	6453      	str	r3, [r2, #68]	@ 0x44
 800c554:	e015      	b.n	800c582 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c55c:	695a      	ldr	r2, [r3, #20]
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c564:	4619      	mov	r1, r3
 800c566:	f242 032b 	movw	r3, #8235	@ 0x202b
 800c56a:	4313      	orrs	r3, r2
 800c56c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	69fa      	ldr	r2, [r7, #28]
 800c578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c57c:	f043 030b 	orr.w	r3, r3, #11
 800c580:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	69fa      	ldr	r2, [r7, #28]
 800c58c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c590:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c594:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6818      	ldr	r0, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	f009 fc27 	bl	8015df8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	695a      	ldr	r2, [r3, #20]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c5b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f009 fb54 	bl	8015c6c <USB_ReadInterrupts>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c5ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5ce:	d123      	bne.n	800c618 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f009 fbeb 	bl	8015db0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f008 fc9f 	bl	8014f22 <USB_GetDevSpeed>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681c      	ldr	r4, [r3, #0]
 800c5f0:	f001 fd1c 	bl	800e02c <HAL_RCC_GetHCLKFreq>
 800c5f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f008 f9a9 	bl	8014954 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f00b ff2f 	bl	8018466 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	695a      	ldr	r2, [r3, #20]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c616:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4618      	mov	r0, r3
 800c61e:	f009 fb25 	bl	8015c6c <USB_ReadInterrupts>
 800c622:	4603      	mov	r3, r0
 800c624:	f003 0308 	and.w	r3, r3, #8
 800c628:	2b08      	cmp	r3, #8
 800c62a:	d10a      	bne.n	800c642 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f00b ff0c 	bl	801844a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	695a      	ldr	r2, [r3, #20]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f002 0208 	and.w	r2, r2, #8
 800c640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4618      	mov	r0, r3
 800c648:	f009 fb10 	bl	8015c6c <USB_ReadInterrupts>
 800c64c:	4603      	mov	r3, r0
 800c64e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c652:	2b80      	cmp	r3, #128	@ 0x80
 800c654:	d123      	bne.n	800c69e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c656:	6a3b      	ldr	r3, [r7, #32]
 800c658:	699b      	ldr	r3, [r3, #24]
 800c65a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c65e:	6a3b      	ldr	r3, [r7, #32]
 800c660:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c662:	2301      	movs	r3, #1
 800c664:	627b      	str	r3, [r7, #36]	@ 0x24
 800c666:	e014      	b.n	800c692 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c668:	6879      	ldr	r1, [r7, #4]
 800c66a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c66c:	4613      	mov	r3, r2
 800c66e:	00db      	lsls	r3, r3, #3
 800c670:	4413      	add	r3, r2
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	440b      	add	r3, r1
 800c676:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d105      	bne.n	800c68c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c682:	b2db      	uxtb	r3, r3
 800c684:	4619      	mov	r1, r3
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fb08 	bl	800cc9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68e:	3301      	adds	r3, #1
 800c690:	627b      	str	r3, [r7, #36]	@ 0x24
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	791b      	ldrb	r3, [r3, #4]
 800c696:	461a      	mov	r2, r3
 800c698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d3e4      	bcc.n	800c668 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f009 fae2 	bl	8015c6c <USB_ReadInterrupts>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c6ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6b2:	d13c      	bne.n	800c72e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6b8:	e02b      	b.n	800c712 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6bc:	015a      	lsls	r2, r3, #5
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c6ca:	6879      	ldr	r1, [r7, #4]
 800c6cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	00db      	lsls	r3, r3, #3
 800c6d2:	4413      	add	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	440b      	add	r3, r1
 800c6d8:	3318      	adds	r3, #24
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d115      	bne.n	800c70c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c6e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	da12      	bge.n	800c70c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c6e6:	6879      	ldr	r1, [r7, #4]
 800c6e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	00db      	lsls	r3, r3, #3
 800c6ee:	4413      	add	r3, r2
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	440b      	add	r3, r1
 800c6f4:	3317      	adds	r3, #23
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c702:	b2db      	uxtb	r3, r3
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fac8 	bl	800cc9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c70e:	3301      	adds	r3, #1
 800c710:	627b      	str	r3, [r7, #36]	@ 0x24
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	791b      	ldrb	r3, [r3, #4]
 800c716:	461a      	mov	r2, r3
 800c718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d3cd      	bcc.n	800c6ba <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	695a      	ldr	r2, [r3, #20]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800c72c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4618      	mov	r0, r3
 800c734:	f009 fa9a 	bl	8015c6c <USB_ReadInterrupts>
 800c738:	4603      	mov	r3, r0
 800c73a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c73e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c742:	d156      	bne.n	800c7f2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c744:	2301      	movs	r3, #1
 800c746:	627b      	str	r3, [r7, #36]	@ 0x24
 800c748:	e045      	b.n	800c7d6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74c:	015a      	lsls	r2, r3, #5
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	4413      	add	r3, r2
 800c752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c75a:	6879      	ldr	r1, [r7, #4]
 800c75c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c75e:	4613      	mov	r3, r2
 800c760:	00db      	lsls	r3, r3, #3
 800c762:	4413      	add	r3, r2
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	440b      	add	r3, r1
 800c768:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d12e      	bne.n	800c7d0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c772:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c774:	2b00      	cmp	r3, #0
 800c776:	da2b      	bge.n	800c7d0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c784:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c788:	429a      	cmp	r2, r3
 800c78a:	d121      	bne.n	800c7d0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c78c:	6879      	ldr	r1, [r7, #4]
 800c78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c790:	4613      	mov	r3, r2
 800c792:	00db      	lsls	r3, r3, #3
 800c794:	4413      	add	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	440b      	add	r3, r1
 800c79a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c79e:	2201      	movs	r2, #1
 800c7a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c7a2:	6a3b      	ldr	r3, [r7, #32]
 800c7a4:	699b      	ldr	r3, [r3, #24]
 800c7a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c7ae:	6a3b      	ldr	r3, [r7, #32]
 800c7b0:	695b      	ldr	r3, [r3, #20]
 800c7b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10a      	bne.n	800c7d0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	69fa      	ldr	r2, [r7, #28]
 800c7c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c7c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c7cc:	6053      	str	r3, [r2, #4]
            break;
 800c7ce:	e008      	b.n	800c7e2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	791b      	ldrb	r3, [r3, #4]
 800c7da:	461a      	mov	r2, r3
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d3b3      	bcc.n	800c74a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	695a      	ldr	r2, [r3, #20]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c7f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f009 fa38 	bl	8015c6c <USB_ReadInterrupts>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c806:	d10a      	bne.n	800c81e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f00b fead 	bl	8018568 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	695a      	ldr	r2, [r3, #20]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c81c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4618      	mov	r0, r3
 800c824:	f009 fa22 	bl	8015c6c <USB_ReadInterrupts>
 800c828:	4603      	mov	r3, r0
 800c82a:	f003 0304 	and.w	r3, r3, #4
 800c82e:	2b04      	cmp	r3, #4
 800c830:	d115      	bne.n	800c85e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c83a:	69bb      	ldr	r3, [r7, #24]
 800c83c:	f003 0304 	and.w	r3, r3, #4
 800c840:	2b00      	cmp	r3, #0
 800c842:	d002      	beq.n	800c84a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f00b fe9d 	bl	8018584 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6859      	ldr	r1, [r3, #4]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	69ba      	ldr	r2, [r7, #24]
 800c856:	430a      	orrs	r2, r1
 800c858:	605a      	str	r2, [r3, #4]
 800c85a:	e000      	b.n	800c85e <HAL_PCD_IRQHandler+0x996>
      return;
 800c85c:	bf00      	nop
    }
  }
}
 800c85e:	3734      	adds	r7, #52	@ 0x34
 800c860:	46bd      	mov	sp, r7
 800c862:	bd90      	pop	{r4, r7, pc}

0800c864 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	460b      	mov	r3, r1
 800c86e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c876:	2b01      	cmp	r3, #1
 800c878:	d101      	bne.n	800c87e <HAL_PCD_SetAddress+0x1a>
 800c87a:	2302      	movs	r3, #2
 800c87c:	e012      	b.n	800c8a4 <HAL_PCD_SetAddress+0x40>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	78fa      	ldrb	r2, [r7, #3]
 800c88a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	78fa      	ldrb	r2, [r7, #3]
 800c892:	4611      	mov	r1, r2
 800c894:	4618      	mov	r0, r3
 800c896:	f009 f981 	bl	8015b9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	70fb      	strb	r3, [r7, #3]
 800c8be:	460b      	mov	r3, r1
 800c8c0:	803b      	strh	r3, [r7, #0]
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c8ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	da0f      	bge.n	800c8f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c8d2:	78fb      	ldrb	r3, [r7, #3]
 800c8d4:	f003 020f 	and.w	r2, r3, #15
 800c8d8:	4613      	mov	r3, r2
 800c8da:	00db      	lsls	r3, r3, #3
 800c8dc:	4413      	add	r3, r2
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	3310      	adds	r3, #16
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	3304      	adds	r3, #4
 800c8e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	705a      	strb	r2, [r3, #1]
 800c8f0:	e00f      	b.n	800c912 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c8f2:	78fb      	ldrb	r3, [r7, #3]
 800c8f4:	f003 020f 	and.w	r2, r3, #15
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	00db      	lsls	r3, r3, #3
 800c8fc:	4413      	add	r3, r2
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	4413      	add	r3, r2
 800c908:	3304      	adds	r3, #4
 800c90a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c912:	78fb      	ldrb	r3, [r7, #3]
 800c914:	f003 030f 	and.w	r3, r3, #15
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c91e:	883a      	ldrh	r2, [r7, #0]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	78ba      	ldrb	r2, [r7, #2]
 800c928:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	785b      	ldrb	r3, [r3, #1]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d004      	beq.n	800c93c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	461a      	mov	r2, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c93c:	78bb      	ldrb	r3, [r7, #2]
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d102      	bne.n	800c948 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d101      	bne.n	800c956 <HAL_PCD_EP_Open+0xaa>
 800c952:	2302      	movs	r3, #2
 800c954:	e00e      	b.n	800c974 <HAL_PCD_EP_Open+0xc8>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2201      	movs	r2, #1
 800c95a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	68f9      	ldr	r1, [r7, #12]
 800c964:	4618      	mov	r0, r3
 800c966:	f008 fb01 	bl	8014f6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c972:	7afb      	ldrb	r3, [r7, #11]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	460b      	mov	r3, r1
 800c986:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c988:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	da0f      	bge.n	800c9b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c990:	78fb      	ldrb	r3, [r7, #3]
 800c992:	f003 020f 	and.w	r2, r3, #15
 800c996:	4613      	mov	r3, r2
 800c998:	00db      	lsls	r3, r3, #3
 800c99a:	4413      	add	r3, r2
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	3310      	adds	r3, #16
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	3304      	adds	r3, #4
 800c9a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	705a      	strb	r2, [r3, #1]
 800c9ae:	e00f      	b.n	800c9d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c9b0:	78fb      	ldrb	r3, [r7, #3]
 800c9b2:	f003 020f 	and.w	r2, r3, #15
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	00db      	lsls	r3, r3, #3
 800c9ba:	4413      	add	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c9d0:	78fb      	ldrb	r3, [r7, #3]
 800c9d2:	f003 030f 	and.w	r3, r3, #15
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d101      	bne.n	800c9ea <HAL_PCD_EP_Close+0x6e>
 800c9e6:	2302      	movs	r3, #2
 800c9e8:	e00e      	b.n	800ca08 <HAL_PCD_EP_Close+0x8c>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68f9      	ldr	r1, [r7, #12]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f008 fb3f 	bl	801507c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b086      	sub	sp, #24
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	607a      	str	r2, [r7, #4]
 800ca1a:	603b      	str	r3, [r7, #0]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ca20:	7afb      	ldrb	r3, [r7, #11]
 800ca22:	f003 020f 	and.w	r2, r3, #15
 800ca26:	4613      	mov	r3, r2
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	4413      	add	r3, r2
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	4413      	add	r3, r2
 800ca36:	3304      	adds	r3, #4
 800ca38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	683a      	ldr	r2, [r7, #0]
 800ca44:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca52:	7afb      	ldrb	r3, [r7, #11]
 800ca54:	f003 030f 	and.w	r3, r3, #15
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	799b      	ldrb	r3, [r3, #6]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d102      	bne.n	800ca6c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6818      	ldr	r0, [r3, #0]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	799b      	ldrb	r3, [r3, #6]
 800ca74:	461a      	mov	r2, r3
 800ca76:	6979      	ldr	r1, [r7, #20]
 800ca78:	f008 fbdc 	bl	8015234 <USB_EPStartXfer>

  return HAL_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ca86:	b480      	push	{r7}
 800ca88:	b083      	sub	sp, #12
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
 800ca8e:	460b      	mov	r3, r1
 800ca90:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ca92:	78fb      	ldrb	r3, [r7, #3]
 800ca94:	f003 020f 	and.w	r2, r3, #15
 800ca98:	6879      	ldr	r1, [r7, #4]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	00db      	lsls	r3, r3, #3
 800ca9e:	4413      	add	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	440b      	add	r3, r1
 800caa4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800caa8:	681b      	ldr	r3, [r3, #0]
}
 800caaa:	4618      	mov	r0, r3
 800caac:	370c      	adds	r7, #12
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr

0800cab6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b086      	sub	sp, #24
 800caba:	af00      	add	r7, sp, #0
 800cabc:	60f8      	str	r0, [r7, #12]
 800cabe:	607a      	str	r2, [r7, #4]
 800cac0:	603b      	str	r3, [r7, #0]
 800cac2:	460b      	mov	r3, r1
 800cac4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cac6:	7afb      	ldrb	r3, [r7, #11]
 800cac8:	f003 020f 	and.w	r2, r3, #15
 800cacc:	4613      	mov	r3, r2
 800cace:	00db      	lsls	r3, r3, #3
 800cad0:	4413      	add	r3, r2
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	3310      	adds	r3, #16
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	4413      	add	r3, r2
 800cada:	3304      	adds	r3, #4
 800cadc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	683a      	ldr	r2, [r7, #0]
 800cae8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	2200      	movs	r2, #0
 800caee:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	2201      	movs	r2, #1
 800caf4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800caf6:	7afb      	ldrb	r3, [r7, #11]
 800caf8:	f003 030f 	and.w	r3, r3, #15
 800cafc:	b2da      	uxtb	r2, r3
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	799b      	ldrb	r3, [r3, #6]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d102      	bne.n	800cb10 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6818      	ldr	r0, [r3, #0]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	799b      	ldrb	r3, [r3, #6]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	6979      	ldr	r1, [r7, #20]
 800cb1c:	f008 fb8a 	bl	8015234 <USB_EPStartXfer>

  return HAL_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3718      	adds	r7, #24
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b084      	sub	sp, #16
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	460b      	mov	r3, r1
 800cb34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cb36:	78fb      	ldrb	r3, [r7, #3]
 800cb38:	f003 030f 	and.w	r3, r3, #15
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	7912      	ldrb	r2, [r2, #4]
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d901      	bls.n	800cb48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cb44:	2301      	movs	r3, #1
 800cb46:	e04f      	b.n	800cbe8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cb48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	da0f      	bge.n	800cb70 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb50:	78fb      	ldrb	r3, [r7, #3]
 800cb52:	f003 020f 	and.w	r2, r3, #15
 800cb56:	4613      	mov	r3, r2
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	4413      	add	r3, r2
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	3310      	adds	r3, #16
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	4413      	add	r3, r2
 800cb64:	3304      	adds	r3, #4
 800cb66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	705a      	strb	r2, [r3, #1]
 800cb6e:	e00d      	b.n	800cb8c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cb70:	78fa      	ldrb	r2, [r7, #3]
 800cb72:	4613      	mov	r3, r2
 800cb74:	00db      	lsls	r3, r3, #3
 800cb76:	4413      	add	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	4413      	add	r3, r2
 800cb82:	3304      	adds	r3, #4
 800cb84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb92:	78fb      	ldrb	r3, [r7, #3]
 800cb94:	f003 030f 	and.w	r3, r3, #15
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d101      	bne.n	800cbac <HAL_PCD_EP_SetStall+0x82>
 800cba8:	2302      	movs	r3, #2
 800cbaa:	e01d      	b.n	800cbe8 <HAL_PCD_EP_SetStall+0xbe>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68f9      	ldr	r1, [r7, #12]
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f008 ff1a 	bl	80159f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cbc0:	78fb      	ldrb	r3, [r7, #3]
 800cbc2:	f003 030f 	and.w	r3, r3, #15
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d109      	bne.n	800cbde <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6818      	ldr	r0, [r3, #0]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	7999      	ldrb	r1, [r3, #6]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cbd8:	461a      	mov	r2, r3
 800cbda:	f009 f90d 	bl	8015df8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cbfc:	78fb      	ldrb	r3, [r7, #3]
 800cbfe:	f003 030f 	and.w	r3, r3, #15
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	7912      	ldrb	r2, [r2, #4]
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d901      	bls.n	800cc0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e042      	b.n	800cc94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cc0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	da0f      	bge.n	800cc36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc16:	78fb      	ldrb	r3, [r7, #3]
 800cc18:	f003 020f 	and.w	r2, r3, #15
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	00db      	lsls	r3, r3, #3
 800cc20:	4413      	add	r3, r2
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	3310      	adds	r3, #16
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	4413      	add	r3, r2
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2201      	movs	r2, #1
 800cc32:	705a      	strb	r2, [r3, #1]
 800cc34:	e00f      	b.n	800cc56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc36:	78fb      	ldrb	r3, [r7, #3]
 800cc38:	f003 020f 	and.w	r2, r3, #15
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	00db      	lsls	r3, r3, #3
 800cc40:	4413      	add	r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	3304      	adds	r3, #4
 800cc4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2200      	movs	r2, #0
 800cc54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cc5c:	78fb      	ldrb	r3, [r7, #3]
 800cc5e:	f003 030f 	and.w	r3, r3, #15
 800cc62:	b2da      	uxtb	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d101      	bne.n	800cc76 <HAL_PCD_EP_ClrStall+0x86>
 800cc72:	2302      	movs	r3, #2
 800cc74:	e00e      	b.n	800cc94 <HAL_PCD_EP_ClrStall+0xa4>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2201      	movs	r2, #1
 800cc7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	68f9      	ldr	r1, [r7, #12]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f008 ff23 	bl	8015ad0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	460b      	mov	r3, r1
 800cca6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800cca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	da0c      	bge.n	800ccca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ccb0:	78fb      	ldrb	r3, [r7, #3]
 800ccb2:	f003 020f 	and.w	r2, r3, #15
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	00db      	lsls	r3, r3, #3
 800ccba:	4413      	add	r3, r2
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	3310      	adds	r3, #16
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	60fb      	str	r3, [r7, #12]
 800ccc8:	e00c      	b.n	800cce4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ccca:	78fb      	ldrb	r3, [r7, #3]
 800cccc:	f003 020f 	and.w	r2, r3, #15
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	00db      	lsls	r3, r3, #3
 800ccd4:	4413      	add	r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	4413      	add	r3, r2
 800cce0:	3304      	adds	r3, #4
 800cce2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68f9      	ldr	r1, [r7, #12]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f008 fd42 	bl	8015774 <USB_EPStopXfer>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ccf4:	7afb      	ldrb	r3, [r7, #11]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3710      	adds	r7, #16
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b08a      	sub	sp, #40	@ 0x28
 800cd02:	af02      	add	r7, sp, #8
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	4613      	mov	r3, r2
 800cd16:	00db      	lsls	r3, r3, #3
 800cd18:	4413      	add	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	3310      	adds	r3, #16
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	4413      	add	r3, r2
 800cd22:	3304      	adds	r3, #4
 800cd24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	695a      	ldr	r2, [r3, #20]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d901      	bls.n	800cd36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cd32:	2301      	movs	r3, #1
 800cd34:	e06b      	b.n	800ce0e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	691a      	ldr	r2, [r3, #16]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	1ad3      	subs	r3, r2, r3
 800cd40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	69fa      	ldr	r2, [r7, #28]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d902      	bls.n	800cd52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	3303      	adds	r3, #3
 800cd56:	089b      	lsrs	r3, r3, #2
 800cd58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cd5a:	e02a      	b.n	800cdb2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	691a      	ldr	r2, [r3, #16]
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	695b      	ldr	r3, [r3, #20]
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	69fa      	ldr	r2, [r7, #28]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d902      	bls.n	800cd78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	3303      	adds	r3, #3
 800cd7c:	089b      	lsrs	r3, r3, #2
 800cd7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	68d9      	ldr	r1, [r3, #12]
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	b2da      	uxtb	r2, r3
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	4603      	mov	r3, r0
 800cd94:	6978      	ldr	r0, [r7, #20]
 800cd96:	f008 fd97 	bl	80158c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	68da      	ldr	r2, [r3, #12]
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	441a      	add	r2, r3
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	695a      	ldr	r2, [r3, #20]
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	441a      	add	r2, r3
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	015a      	lsls	r2, r3, #5
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	4413      	add	r3, r2
 800cdba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdbe:	699b      	ldr	r3, [r3, #24]
 800cdc0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cdc2:	69ba      	ldr	r2, [r7, #24]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d809      	bhi.n	800cddc <PCD_WriteEmptyTxFifo+0xde>
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	695a      	ldr	r2, [r3, #20]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d203      	bcs.n	800cddc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1bf      	bne.n	800cd5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	691a      	ldr	r2, [r3, #16]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	695b      	ldr	r3, [r3, #20]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d811      	bhi.n	800ce0c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	f003 030f 	and.w	r3, r3, #15
 800cdee:	2201      	movs	r2, #1
 800cdf0:	fa02 f303 	lsl.w	r3, r2, r3
 800cdf4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	43db      	mvns	r3, r3
 800ce02:	6939      	ldr	r1, [r7, #16]
 800ce04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ce08:	4013      	ands	r3, r2
 800ce0a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3720      	adds	r7, #32
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
	...

0800ce18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b088      	sub	sp, #32
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	333c      	adds	r3, #60	@ 0x3c
 800ce30:	3304      	adds	r3, #4
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	015a      	lsls	r2, r3, #5
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	799b      	ldrb	r3, [r3, #6]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d17b      	bne.n	800cf46 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	f003 0308 	and.w	r3, r3, #8
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d015      	beq.n	800ce84 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	4a61      	ldr	r2, [pc, #388]	@ (800cfe0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	f240 80b9 	bls.w	800cfd4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f000 80b3 	beq.w	800cfd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	015a      	lsls	r2, r3, #5
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	4413      	add	r3, r2
 800ce76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce80:	6093      	str	r3, [r2, #8]
 800ce82:	e0a7      	b.n	800cfd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	f003 0320 	and.w	r3, r3, #32
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d009      	beq.n	800cea2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	015a      	lsls	r2, r3, #5
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	4413      	add	r3, r2
 800ce96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	2320      	movs	r3, #32
 800ce9e:	6093      	str	r3, [r2, #8]
 800cea0:	e098      	b.n	800cfd4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f040 8093 	bne.w	800cfd4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	4a4b      	ldr	r2, [pc, #300]	@ (800cfe0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d90f      	bls.n	800ced6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00a      	beq.n	800ced6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	015a      	lsls	r2, r3, #5
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	4413      	add	r3, r2
 800cec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cecc:	461a      	mov	r2, r3
 800cece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ced2:	6093      	str	r3, [r2, #8]
 800ced4:	e07e      	b.n	800cfd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	4613      	mov	r3, r2
 800ceda:	00db      	lsls	r3, r3, #3
 800cedc:	4413      	add	r3, r2
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	4413      	add	r3, r2
 800cee8:	3304      	adds	r3, #4
 800ceea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6a1a      	ldr	r2, [r3, #32]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	0159      	lsls	r1, r3, #5
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	440b      	add	r3, r1
 800cef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf02:	1ad2      	subs	r2, r2, r3
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d114      	bne.n	800cf38 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	691b      	ldr	r3, [r3, #16]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d109      	bne.n	800cf2a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6818      	ldr	r0, [r3, #0]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cf20:	461a      	mov	r2, r3
 800cf22:	2101      	movs	r1, #1
 800cf24:	f008 ff68 	bl	8015df8 <USB_EP0_OutStart>
 800cf28:	e006      	b.n	800cf38 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	68da      	ldr	r2, [r3, #12]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	695b      	ldr	r3, [r3, #20]
 800cf32:	441a      	add	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f00b fa4e 	bl	80183e0 <HAL_PCD_DataOutStageCallback>
 800cf44:	e046      	b.n	800cfd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	4a26      	ldr	r2, [pc, #152]	@ (800cfe4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d124      	bne.n	800cf98 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00a      	beq.n	800cf6e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	015a      	lsls	r2, r3, #5
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	4413      	add	r3, r2
 800cf60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf64:	461a      	mov	r2, r3
 800cf66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf6a:	6093      	str	r3, [r2, #8]
 800cf6c:	e032      	b.n	800cfd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	f003 0320 	and.w	r3, r3, #32
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d008      	beq.n	800cf8a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	015a      	lsls	r2, r3, #5
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	4413      	add	r3, r2
 800cf80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf84:	461a      	mov	r2, r3
 800cf86:	2320      	movs	r3, #32
 800cf88:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	4619      	mov	r1, r3
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f00b fa25 	bl	80183e0 <HAL_PCD_DataOutStageCallback>
 800cf96:	e01d      	b.n	800cfd4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d114      	bne.n	800cfc8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800cf9e:	6879      	ldr	r1, [r7, #4]
 800cfa0:	683a      	ldr	r2, [r7, #0]
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	00db      	lsls	r3, r3, #3
 800cfa6:	4413      	add	r3, r2
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	440b      	add	r3, r1
 800cfac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d108      	bne.n	800cfc8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6818      	ldr	r0, [r3, #0]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	f008 ff18 	bl	8015df8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f00b fa06 	bl	80183e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3720      	adds	r7, #32
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	4f54300a 	.word	0x4f54300a
 800cfe4:	4f54310a 	.word	0x4f54310a

0800cfe8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	333c      	adds	r3, #60	@ 0x3c
 800d000:	3304      	adds	r3, #4
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	015a      	lsls	r2, r3, #5
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	4413      	add	r3, r2
 800d00e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	4a15      	ldr	r2, [pc, #84]	@ (800d070 <PCD_EP_OutSetupPacket_int+0x88>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d90e      	bls.n	800d03c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d024:	2b00      	cmp	r3, #0
 800d026:	d009      	beq.n	800d03c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	015a      	lsls	r2, r3, #5
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	4413      	add	r3, r2
 800d030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d034:	461a      	mov	r2, r3
 800d036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d03a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f00b f9bd 	bl	80183bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	4a0a      	ldr	r2, [pc, #40]	@ (800d070 <PCD_EP_OutSetupPacket_int+0x88>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d90c      	bls.n	800d064 <PCD_EP_OutSetupPacket_int+0x7c>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	799b      	ldrb	r3, [r3, #6]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d108      	bne.n	800d064 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6818      	ldr	r0, [r3, #0]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d05c:	461a      	mov	r2, r3
 800d05e:	2101      	movs	r1, #1
 800d060:	f008 feca 	bl	8015df8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	4f54300a 	.word	0x4f54300a

0800d074 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d074:	b480      	push	{r7}
 800d076:	b085      	sub	sp, #20
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	460b      	mov	r3, r1
 800d07e:	70fb      	strb	r3, [r7, #3]
 800d080:	4613      	mov	r3, r2
 800d082:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d08a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d08c:	78fb      	ldrb	r3, [r7, #3]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d107      	bne.n	800d0a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d092:	883b      	ldrh	r3, [r7, #0]
 800d094:	0419      	lsls	r1, r3, #16
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	430a      	orrs	r2, r1
 800d09e:	629a      	str	r2, [r3, #40]	@ 0x28
 800d0a0:	e028      	b.n	800d0f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0a8:	0c1b      	lsrs	r3, r3, #16
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	73fb      	strb	r3, [r7, #15]
 800d0b4:	e00d      	b.n	800d0d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
 800d0bc:	3340      	adds	r3, #64	@ 0x40
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	4413      	add	r3, r2
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	0c1b      	lsrs	r3, r3, #16
 800d0c6:	68ba      	ldr	r2, [r7, #8]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d0cc:	7bfb      	ldrb	r3, [r7, #15]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	73fb      	strb	r3, [r7, #15]
 800d0d2:	7bfa      	ldrb	r2, [r7, #15]
 800d0d4:	78fb      	ldrb	r3, [r7, #3]
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d3ec      	bcc.n	800d0b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d0dc:	883b      	ldrh	r3, [r7, #0]
 800d0de:	0418      	lsls	r0, r3, #16
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6819      	ldr	r1, [r3, #0]
 800d0e4:	78fb      	ldrb	r3, [r7, #3]
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	68ba      	ldr	r2, [r7, #8]
 800d0ea:	4302      	orrs	r2, r0
 800d0ec:	3340      	adds	r3, #64	@ 0x40
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	440b      	add	r3, r1
 800d0f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3714      	adds	r7, #20
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr

0800d102 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d102:	b480      	push	{r7}
 800d104:	b083      	sub	sp, #12
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	460b      	mov	r3, r1
 800d10c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	887a      	ldrh	r2, [r7, #2]
 800d114:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2201      	movs	r2, #1
 800d136:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	699b      	ldr	r3, [r3, #24]
 800d146:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d152:	4b05      	ldr	r3, [pc, #20]	@ (800d168 <HAL_PCDEx_ActivateLPM+0x44>)
 800d154:	4313      	orrs	r3, r2
 800d156:	68fa      	ldr	r2, [r7, #12]
 800d158:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d15a:	2300      	movs	r3, #0
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3714      	adds	r7, #20
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr
 800d168:	10000003 	.word	0x10000003

0800d16c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	460b      	mov	r3, r1
 800d176:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d178:	bf00      	nop
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d18c:	4b19      	ldr	r3, [pc, #100]	@ (800d1f4 <HAL_PWREx_ConfigSupply+0x70>)
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	f003 0304 	and.w	r3, r3, #4
 800d194:	2b04      	cmp	r3, #4
 800d196:	d00a      	beq.n	800d1ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d198:	4b16      	ldr	r3, [pc, #88]	@ (800d1f4 <HAL_PWREx_ConfigSupply+0x70>)
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	f003 0307 	and.w	r3, r3, #7
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d001      	beq.n	800d1aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e01f      	b.n	800d1ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	e01d      	b.n	800d1ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d1ae:	4b11      	ldr	r3, [pc, #68]	@ (800d1f4 <HAL_PWREx_ConfigSupply+0x70>)
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	f023 0207 	bic.w	r2, r3, #7
 800d1b6:	490f      	ldr	r1, [pc, #60]	@ (800d1f4 <HAL_PWREx_ConfigSupply+0x70>)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d1be:	f7fa f963 	bl	8007488 <HAL_GetTick>
 800d1c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d1c4:	e009      	b.n	800d1da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d1c6:	f7fa f95f 	bl	8007488 <HAL_GetTick>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d1d4:	d901      	bls.n	800d1da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e007      	b.n	800d1ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d1da:	4b06      	ldr	r3, [pc, #24]	@ (800d1f4 <HAL_PWREx_ConfigSupply+0x70>)
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d1e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d1e6:	d1ee      	bne.n	800d1c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	58024800 	.word	0x58024800

0800d1f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d1fc:	4b05      	ldr	r3, [pc, #20]	@ (800d214 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	4a04      	ldr	r2, [pc, #16]	@ (800d214 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d206:	60d3      	str	r3, [r2, #12]
}
 800d208:	bf00      	nop
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop
 800d214:	58024800 	.word	0x58024800

0800d218 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b08c      	sub	sp, #48	@ 0x30
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d101      	bne.n	800d22a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d226:	2301      	movs	r3, #1
 800d228:	e3c8      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f003 0301 	and.w	r3, r3, #1
 800d232:	2b00      	cmp	r3, #0
 800d234:	f000 8087 	beq.w	800d346 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d238:	4b88      	ldr	r3, [pc, #544]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d23a:	691b      	ldr	r3, [r3, #16]
 800d23c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d240:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d242:	4b86      	ldr	r3, [pc, #536]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d246:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24a:	2b10      	cmp	r3, #16
 800d24c:	d007      	beq.n	800d25e <HAL_RCC_OscConfig+0x46>
 800d24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d250:	2b18      	cmp	r3, #24
 800d252:	d110      	bne.n	800d276 <HAL_RCC_OscConfig+0x5e>
 800d254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d256:	f003 0303 	and.w	r3, r3, #3
 800d25a:	2b02      	cmp	r3, #2
 800d25c:	d10b      	bne.n	800d276 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d25e:	4b7f      	ldr	r3, [pc, #508]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d266:	2b00      	cmp	r3, #0
 800d268:	d06c      	beq.n	800d344 <HAL_RCC_OscConfig+0x12c>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d168      	bne.n	800d344 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	e3a2      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d27e:	d106      	bne.n	800d28e <HAL_RCC_OscConfig+0x76>
 800d280:	4b76      	ldr	r3, [pc, #472]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a75      	ldr	r2, [pc, #468]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d28a:	6013      	str	r3, [r2, #0]
 800d28c:	e02e      	b.n	800d2ec <HAL_RCC_OscConfig+0xd4>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10c      	bne.n	800d2b0 <HAL_RCC_OscConfig+0x98>
 800d296:	4b71      	ldr	r3, [pc, #452]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a70      	ldr	r2, [pc, #448]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d29c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2a0:	6013      	str	r3, [r2, #0]
 800d2a2:	4b6e      	ldr	r3, [pc, #440]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a6d      	ldr	r2, [pc, #436]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d2a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d2ac:	6013      	str	r3, [r2, #0]
 800d2ae:	e01d      	b.n	800d2ec <HAL_RCC_OscConfig+0xd4>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d2b8:	d10c      	bne.n	800d2d4 <HAL_RCC_OscConfig+0xbc>
 800d2ba:	4b68      	ldr	r3, [pc, #416]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4a67      	ldr	r2, [pc, #412]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d2c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d2c4:	6013      	str	r3, [r2, #0]
 800d2c6:	4b65      	ldr	r3, [pc, #404]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a64      	ldr	r2, [pc, #400]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d2cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d2d0:	6013      	str	r3, [r2, #0]
 800d2d2:	e00b      	b.n	800d2ec <HAL_RCC_OscConfig+0xd4>
 800d2d4:	4b61      	ldr	r3, [pc, #388]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a60      	ldr	r2, [pc, #384]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d2da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2de:	6013      	str	r3, [r2, #0]
 800d2e0:	4b5e      	ldr	r3, [pc, #376]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a5d      	ldr	r2, [pc, #372]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d2e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d2ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d013      	beq.n	800d31c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2f4:	f7fa f8c8 	bl	8007488 <HAL_GetTick>
 800d2f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d2fa:	e008      	b.n	800d30e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d2fc:	f7fa f8c4 	bl	8007488 <HAL_GetTick>
 800d300:	4602      	mov	r2, r0
 800d302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d304:	1ad3      	subs	r3, r2, r3
 800d306:	2b64      	cmp	r3, #100	@ 0x64
 800d308:	d901      	bls.n	800d30e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d30a:	2303      	movs	r3, #3
 800d30c:	e356      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d30e:	4b53      	ldr	r3, [pc, #332]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d316:	2b00      	cmp	r3, #0
 800d318:	d0f0      	beq.n	800d2fc <HAL_RCC_OscConfig+0xe4>
 800d31a:	e014      	b.n	800d346 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d31c:	f7fa f8b4 	bl	8007488 <HAL_GetTick>
 800d320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d322:	e008      	b.n	800d336 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d324:	f7fa f8b0 	bl	8007488 <HAL_GetTick>
 800d328:	4602      	mov	r2, r0
 800d32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	2b64      	cmp	r3, #100	@ 0x64
 800d330:	d901      	bls.n	800d336 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d332:	2303      	movs	r3, #3
 800d334:	e342      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d336:	4b49      	ldr	r3, [pc, #292]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1f0      	bne.n	800d324 <HAL_RCC_OscConfig+0x10c>
 800d342:	e000      	b.n	800d346 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f003 0302 	and.w	r3, r3, #2
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 808c 	beq.w	800d46c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d354:	4b41      	ldr	r3, [pc, #260]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d356:	691b      	ldr	r3, [r3, #16]
 800d358:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d35c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d35e:	4b3f      	ldr	r3, [pc, #252]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d362:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d364:	6a3b      	ldr	r3, [r7, #32]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d007      	beq.n	800d37a <HAL_RCC_OscConfig+0x162>
 800d36a:	6a3b      	ldr	r3, [r7, #32]
 800d36c:	2b18      	cmp	r3, #24
 800d36e:	d137      	bne.n	800d3e0 <HAL_RCC_OscConfig+0x1c8>
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	f003 0303 	and.w	r3, r3, #3
 800d376:	2b00      	cmp	r3, #0
 800d378:	d132      	bne.n	800d3e0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d37a:	4b38      	ldr	r3, [pc, #224]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f003 0304 	and.w	r3, r3, #4
 800d382:	2b00      	cmp	r3, #0
 800d384:	d005      	beq.n	800d392 <HAL_RCC_OscConfig+0x17a>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d38e:	2301      	movs	r3, #1
 800d390:	e314      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d392:	4b32      	ldr	r3, [pc, #200]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f023 0219 	bic.w	r2, r3, #25
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	492f      	ldr	r1, [pc, #188]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3a4:	f7fa f870 	bl	8007488 <HAL_GetTick>
 800d3a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3aa:	e008      	b.n	800d3be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3ac:	f7fa f86c 	bl	8007488 <HAL_GetTick>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	2b02      	cmp	r3, #2
 800d3b8:	d901      	bls.n	800d3be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800d3ba:	2303      	movs	r3, #3
 800d3bc:	e2fe      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3be:	4b27      	ldr	r3, [pc, #156]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f003 0304 	and.w	r3, r3, #4
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d0f0      	beq.n	800d3ac <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d3ca:	4b24      	ldr	r3, [pc, #144]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	691b      	ldr	r3, [r3, #16]
 800d3d6:	061b      	lsls	r3, r3, #24
 800d3d8:	4920      	ldr	r1, [pc, #128]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d3de:	e045      	b.n	800d46c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d026      	beq.n	800d436 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d3e8:	4b1c      	ldr	r3, [pc, #112]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f023 0219 	bic.w	r2, r3, #25
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	68db      	ldr	r3, [r3, #12]
 800d3f4:	4919      	ldr	r1, [pc, #100]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3fa:	f7fa f845 	bl	8007488 <HAL_GetTick>
 800d3fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d400:	e008      	b.n	800d414 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d402:	f7fa f841 	bl	8007488 <HAL_GetTick>
 800d406:	4602      	mov	r2, r0
 800d408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d901      	bls.n	800d414 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800d410:	2303      	movs	r3, #3
 800d412:	e2d3      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d414:	4b11      	ldr	r3, [pc, #68]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f003 0304 	and.w	r3, r3, #4
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d0f0      	beq.n	800d402 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d420:	4b0e      	ldr	r3, [pc, #56]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	691b      	ldr	r3, [r3, #16]
 800d42c:	061b      	lsls	r3, r3, #24
 800d42e:	490b      	ldr	r1, [pc, #44]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d430:	4313      	orrs	r3, r2
 800d432:	604b      	str	r3, [r1, #4]
 800d434:	e01a      	b.n	800d46c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d436:	4b09      	ldr	r3, [pc, #36]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a08      	ldr	r2, [pc, #32]	@ (800d45c <HAL_RCC_OscConfig+0x244>)
 800d43c:	f023 0301 	bic.w	r3, r3, #1
 800d440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d442:	f7fa f821 	bl	8007488 <HAL_GetTick>
 800d446:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d448:	e00a      	b.n	800d460 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d44a:	f7fa f81d 	bl	8007488 <HAL_GetTick>
 800d44e:	4602      	mov	r2, r0
 800d450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d452:	1ad3      	subs	r3, r2, r3
 800d454:	2b02      	cmp	r3, #2
 800d456:	d903      	bls.n	800d460 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d458:	2303      	movs	r3, #3
 800d45a:	e2af      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
 800d45c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d460:	4b96      	ldr	r3, [pc, #600]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f003 0304 	and.w	r3, r3, #4
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1ee      	bne.n	800d44a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f003 0310 	and.w	r3, r3, #16
 800d474:	2b00      	cmp	r3, #0
 800d476:	d06a      	beq.n	800d54e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d478:	4b90      	ldr	r3, [pc, #576]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d480:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d482:	4b8e      	ldr	r3, [pc, #568]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d486:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	2b08      	cmp	r3, #8
 800d48c:	d007      	beq.n	800d49e <HAL_RCC_OscConfig+0x286>
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	2b18      	cmp	r3, #24
 800d492:	d11b      	bne.n	800d4cc <HAL_RCC_OscConfig+0x2b4>
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	f003 0303 	and.w	r3, r3, #3
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d116      	bne.n	800d4cc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d49e:	4b87      	ldr	r3, [pc, #540]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d005      	beq.n	800d4b6 <HAL_RCC_OscConfig+0x29e>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	69db      	ldr	r3, [r3, #28]
 800d4ae:	2b80      	cmp	r3, #128	@ 0x80
 800d4b0:	d001      	beq.n	800d4b6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e282      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d4b6:	4b81      	ldr	r3, [pc, #516]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6a1b      	ldr	r3, [r3, #32]
 800d4c2:	061b      	lsls	r3, r3, #24
 800d4c4:	497d      	ldr	r1, [pc, #500]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d4ca:	e040      	b.n	800d54e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	69db      	ldr	r3, [r3, #28]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d023      	beq.n	800d51c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d4d4:	4b79      	ldr	r3, [pc, #484]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a78      	ldr	r2, [pc, #480]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d4da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4e0:	f7f9 ffd2 	bl	8007488 <HAL_GetTick>
 800d4e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d4e6:	e008      	b.n	800d4fa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d4e8:	f7f9 ffce 	bl	8007488 <HAL_GetTick>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d901      	bls.n	800d4fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d4f6:	2303      	movs	r3, #3
 800d4f8:	e260      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d4fa:	4b70      	ldr	r3, [pc, #448]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d502:	2b00      	cmp	r3, #0
 800d504:	d0f0      	beq.n	800d4e8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d506:	4b6d      	ldr	r3, [pc, #436]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d508:	68db      	ldr	r3, [r3, #12]
 800d50a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a1b      	ldr	r3, [r3, #32]
 800d512:	061b      	lsls	r3, r3, #24
 800d514:	4969      	ldr	r1, [pc, #420]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d516:	4313      	orrs	r3, r2
 800d518:	60cb      	str	r3, [r1, #12]
 800d51a:	e018      	b.n	800d54e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d51c:	4b67      	ldr	r3, [pc, #412]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a66      	ldr	r2, [pc, #408]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d528:	f7f9 ffae 	bl	8007488 <HAL_GetTick>
 800d52c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d52e:	e008      	b.n	800d542 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d530:	f7f9 ffaa 	bl	8007488 <HAL_GetTick>
 800d534:	4602      	mov	r2, r0
 800d536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d538:	1ad3      	subs	r3, r2, r3
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d901      	bls.n	800d542 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800d53e:	2303      	movs	r3, #3
 800d540:	e23c      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d542:	4b5e      	ldr	r3, [pc, #376]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d1f0      	bne.n	800d530 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f003 0308 	and.w	r3, r3, #8
 800d556:	2b00      	cmp	r3, #0
 800d558:	d036      	beq.n	800d5c8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d019      	beq.n	800d596 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d562:	4b56      	ldr	r3, [pc, #344]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d566:	4a55      	ldr	r2, [pc, #340]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d568:	f043 0301 	orr.w	r3, r3, #1
 800d56c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d56e:	f7f9 ff8b 	bl	8007488 <HAL_GetTick>
 800d572:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d574:	e008      	b.n	800d588 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d576:	f7f9 ff87 	bl	8007488 <HAL_GetTick>
 800d57a:	4602      	mov	r2, r0
 800d57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57e:	1ad3      	subs	r3, r2, r3
 800d580:	2b02      	cmp	r3, #2
 800d582:	d901      	bls.n	800d588 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800d584:	2303      	movs	r3, #3
 800d586:	e219      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d588:	4b4c      	ldr	r3, [pc, #304]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d58a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d58c:	f003 0302 	and.w	r3, r3, #2
 800d590:	2b00      	cmp	r3, #0
 800d592:	d0f0      	beq.n	800d576 <HAL_RCC_OscConfig+0x35e>
 800d594:	e018      	b.n	800d5c8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d596:	4b49      	ldr	r3, [pc, #292]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d59a:	4a48      	ldr	r2, [pc, #288]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d59c:	f023 0301 	bic.w	r3, r3, #1
 800d5a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5a2:	f7f9 ff71 	bl	8007488 <HAL_GetTick>
 800d5a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d5a8:	e008      	b.n	800d5bc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d5aa:	f7f9 ff6d 	bl	8007488 <HAL_GetTick>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	2b02      	cmp	r3, #2
 800d5b6:	d901      	bls.n	800d5bc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e1ff      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d5bc:	4b3f      	ldr	r3, [pc, #252]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d5be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5c0:	f003 0302 	and.w	r3, r3, #2
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1f0      	bne.n	800d5aa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f003 0320 	and.w	r3, r3, #32
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d036      	beq.n	800d642 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	699b      	ldr	r3, [r3, #24]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d019      	beq.n	800d610 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d5dc:	4b37      	ldr	r3, [pc, #220]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a36      	ldr	r2, [pc, #216]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d5e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d5e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d5e8:	f7f9 ff4e 	bl	8007488 <HAL_GetTick>
 800d5ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d5ee:	e008      	b.n	800d602 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d5f0:	f7f9 ff4a 	bl	8007488 <HAL_GetTick>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	2b02      	cmp	r3, #2
 800d5fc:	d901      	bls.n	800d602 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800d5fe:	2303      	movs	r3, #3
 800d600:	e1dc      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d602:	4b2e      	ldr	r3, [pc, #184]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d0f0      	beq.n	800d5f0 <HAL_RCC_OscConfig+0x3d8>
 800d60e:	e018      	b.n	800d642 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d610:	4b2a      	ldr	r3, [pc, #168]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a29      	ldr	r2, [pc, #164]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d616:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d61a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d61c:	f7f9 ff34 	bl	8007488 <HAL_GetTick>
 800d620:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d622:	e008      	b.n	800d636 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d624:	f7f9 ff30 	bl	8007488 <HAL_GetTick>
 800d628:	4602      	mov	r2, r0
 800d62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62c:	1ad3      	subs	r3, r2, r3
 800d62e:	2b02      	cmp	r3, #2
 800d630:	d901      	bls.n	800d636 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800d632:	2303      	movs	r3, #3
 800d634:	e1c2      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d636:	4b21      	ldr	r3, [pc, #132]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d1f0      	bne.n	800d624 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f003 0304 	and.w	r3, r3, #4
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	f000 8086 	beq.w	800d75c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d650:	4b1b      	ldr	r3, [pc, #108]	@ (800d6c0 <HAL_RCC_OscConfig+0x4a8>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a1a      	ldr	r2, [pc, #104]	@ (800d6c0 <HAL_RCC_OscConfig+0x4a8>)
 800d656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d65a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d65c:	f7f9 ff14 	bl	8007488 <HAL_GetTick>
 800d660:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d662:	e008      	b.n	800d676 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d664:	f7f9 ff10 	bl	8007488 <HAL_GetTick>
 800d668:	4602      	mov	r2, r0
 800d66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66c:	1ad3      	subs	r3, r2, r3
 800d66e:	2b64      	cmp	r3, #100	@ 0x64
 800d670:	d901      	bls.n	800d676 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800d672:	2303      	movs	r3, #3
 800d674:	e1a2      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d676:	4b12      	ldr	r3, [pc, #72]	@ (800d6c0 <HAL_RCC_OscConfig+0x4a8>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d0f0      	beq.n	800d664 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	2b01      	cmp	r3, #1
 800d688:	d106      	bne.n	800d698 <HAL_RCC_OscConfig+0x480>
 800d68a:	4b0c      	ldr	r3, [pc, #48]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d68c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d68e:	4a0b      	ldr	r2, [pc, #44]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d690:	f043 0301 	orr.w	r3, r3, #1
 800d694:	6713      	str	r3, [r2, #112]	@ 0x70
 800d696:	e032      	b.n	800d6fe <HAL_RCC_OscConfig+0x4e6>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	689b      	ldr	r3, [r3, #8]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d111      	bne.n	800d6c4 <HAL_RCC_OscConfig+0x4ac>
 800d6a0:	4b06      	ldr	r3, [pc, #24]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d6a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6a4:	4a05      	ldr	r2, [pc, #20]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d6a6:	f023 0301 	bic.w	r3, r3, #1
 800d6aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6ac:	4b03      	ldr	r3, [pc, #12]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d6ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6b0:	4a02      	ldr	r2, [pc, #8]	@ (800d6bc <HAL_RCC_OscConfig+0x4a4>)
 800d6b2:	f023 0304 	bic.w	r3, r3, #4
 800d6b6:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6b8:	e021      	b.n	800d6fe <HAL_RCC_OscConfig+0x4e6>
 800d6ba:	bf00      	nop
 800d6bc:	58024400 	.word	0x58024400
 800d6c0:	58024800 	.word	0x58024800
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	2b05      	cmp	r3, #5
 800d6ca:	d10c      	bne.n	800d6e6 <HAL_RCC_OscConfig+0x4ce>
 800d6cc:	4b83      	ldr	r3, [pc, #524]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d6ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6d0:	4a82      	ldr	r2, [pc, #520]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d6d2:	f043 0304 	orr.w	r3, r3, #4
 800d6d6:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6d8:	4b80      	ldr	r3, [pc, #512]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d6da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6dc:	4a7f      	ldr	r2, [pc, #508]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d6de:	f043 0301 	orr.w	r3, r3, #1
 800d6e2:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6e4:	e00b      	b.n	800d6fe <HAL_RCC_OscConfig+0x4e6>
 800d6e6:	4b7d      	ldr	r3, [pc, #500]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d6e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6ea:	4a7c      	ldr	r2, [pc, #496]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d6ec:	f023 0301 	bic.w	r3, r3, #1
 800d6f0:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6f2:	4b7a      	ldr	r3, [pc, #488]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d6f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6f6:	4a79      	ldr	r2, [pc, #484]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d6f8:	f023 0304 	bic.w	r3, r3, #4
 800d6fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d015      	beq.n	800d732 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d706:	f7f9 febf 	bl	8007488 <HAL_GetTick>
 800d70a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d70c:	e00a      	b.n	800d724 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d70e:	f7f9 febb 	bl	8007488 <HAL_GetTick>
 800d712:	4602      	mov	r2, r0
 800d714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d716:	1ad3      	subs	r3, r2, r3
 800d718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d901      	bls.n	800d724 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800d720:	2303      	movs	r3, #3
 800d722:	e14b      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d724:	4b6d      	ldr	r3, [pc, #436]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d728:	f003 0302 	and.w	r3, r3, #2
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d0ee      	beq.n	800d70e <HAL_RCC_OscConfig+0x4f6>
 800d730:	e014      	b.n	800d75c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d732:	f7f9 fea9 	bl	8007488 <HAL_GetTick>
 800d736:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d738:	e00a      	b.n	800d750 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d73a:	f7f9 fea5 	bl	8007488 <HAL_GetTick>
 800d73e:	4602      	mov	r2, r0
 800d740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d748:	4293      	cmp	r3, r2
 800d74a:	d901      	bls.n	800d750 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800d74c:	2303      	movs	r3, #3
 800d74e:	e135      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d750:	4b62      	ldr	r3, [pc, #392]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d754:	f003 0302 	and.w	r3, r3, #2
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1ee      	bne.n	800d73a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d760:	2b00      	cmp	r3, #0
 800d762:	f000 812a 	beq.w	800d9ba <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d766:	4b5d      	ldr	r3, [pc, #372]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d768:	691b      	ldr	r3, [r3, #16]
 800d76a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d76e:	2b18      	cmp	r3, #24
 800d770:	f000 80ba 	beq.w	800d8e8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d778:	2b02      	cmp	r3, #2
 800d77a:	f040 8095 	bne.w	800d8a8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d77e:	4b57      	ldr	r3, [pc, #348]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a56      	ldr	r2, [pc, #344]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d784:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d78a:	f7f9 fe7d 	bl	8007488 <HAL_GetTick>
 800d78e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d790:	e008      	b.n	800d7a4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d792:	f7f9 fe79 	bl	8007488 <HAL_GetTick>
 800d796:	4602      	mov	r2, r0
 800d798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d901      	bls.n	800d7a4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800d7a0:	2303      	movs	r3, #3
 800d7a2:	e10b      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d7a4:	4b4d      	ldr	r3, [pc, #308]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1f0      	bne.n	800d792 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d7b0:	4b4a      	ldr	r3, [pc, #296]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d7b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d7b4:	4b4a      	ldr	r3, [pc, #296]	@ (800d8e0 <HAL_RCC_OscConfig+0x6c8>)
 800d7b6:	4013      	ands	r3, r2
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d7c0:	0112      	lsls	r2, r2, #4
 800d7c2:	430a      	orrs	r2, r1
 800d7c4:	4945      	ldr	r1, [pc, #276]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	628b      	str	r3, [r1, #40]	@ 0x28
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	025b      	lsls	r3, r3, #9
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	431a      	orrs	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	041b      	lsls	r3, r3, #16
 800d7e8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d7ec:	431a      	orrs	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	061b      	lsls	r3, r3, #24
 800d7f6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d7fa:	4938      	ldr	r1, [pc, #224]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d800:	4b36      	ldr	r3, [pc, #216]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d804:	4a35      	ldr	r2, [pc, #212]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d806:	f023 0301 	bic.w	r3, r3, #1
 800d80a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d80c:	4b33      	ldr	r3, [pc, #204]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d80e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d810:	4b34      	ldr	r3, [pc, #208]	@ (800d8e4 <HAL_RCC_OscConfig+0x6cc>)
 800d812:	4013      	ands	r3, r2
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d818:	00d2      	lsls	r2, r2, #3
 800d81a:	4930      	ldr	r1, [pc, #192]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d81c:	4313      	orrs	r3, r2
 800d81e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d820:	4b2e      	ldr	r3, [pc, #184]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d824:	f023 020c 	bic.w	r2, r3, #12
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d82c:	492b      	ldr	r1, [pc, #172]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d82e:	4313      	orrs	r3, r2
 800d830:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d832:	4b2a      	ldr	r3, [pc, #168]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d836:	f023 0202 	bic.w	r2, r3, #2
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d83e:	4927      	ldr	r1, [pc, #156]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d840:	4313      	orrs	r3, r2
 800d842:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d844:	4b25      	ldr	r3, [pc, #148]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d848:	4a24      	ldr	r2, [pc, #144]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d84a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d84e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d850:	4b22      	ldr	r3, [pc, #136]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d854:	4a21      	ldr	r2, [pc, #132]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d85a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d85c:	4b1f      	ldr	r3, [pc, #124]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d860:	4a1e      	ldr	r2, [pc, #120]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d862:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d868:	4b1c      	ldr	r3, [pc, #112]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d86c:	4a1b      	ldr	r2, [pc, #108]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d86e:	f043 0301 	orr.w	r3, r3, #1
 800d872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d874:	4b19      	ldr	r3, [pc, #100]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a18      	ldr	r2, [pc, #96]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d87a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d87e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d880:	f7f9 fe02 	bl	8007488 <HAL_GetTick>
 800d884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d886:	e008      	b.n	800d89a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d888:	f7f9 fdfe 	bl	8007488 <HAL_GetTick>
 800d88c:	4602      	mov	r2, r0
 800d88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	2b02      	cmp	r3, #2
 800d894:	d901      	bls.n	800d89a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d896:	2303      	movs	r3, #3
 800d898:	e090      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d89a:	4b10      	ldr	r3, [pc, #64]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d0f0      	beq.n	800d888 <HAL_RCC_OscConfig+0x670>
 800d8a6:	e088      	b.n	800d9ba <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d8a8:	4b0c      	ldr	r3, [pc, #48]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a0b      	ldr	r2, [pc, #44]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d8ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d8b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8b4:	f7f9 fde8 	bl	8007488 <HAL_GetTick>
 800d8b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d8ba:	e008      	b.n	800d8ce <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d8bc:	f7f9 fde4 	bl	8007488 <HAL_GetTick>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d901      	bls.n	800d8ce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	e076      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d8ce:	4b03      	ldr	r3, [pc, #12]	@ (800d8dc <HAL_RCC_OscConfig+0x6c4>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1f0      	bne.n	800d8bc <HAL_RCC_OscConfig+0x6a4>
 800d8da:	e06e      	b.n	800d9ba <HAL_RCC_OscConfig+0x7a2>
 800d8dc:	58024400 	.word	0x58024400
 800d8e0:	fffffc0c 	.word	0xfffffc0c
 800d8e4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d8e8:	4b36      	ldr	r3, [pc, #216]	@ (800d9c4 <HAL_RCC_OscConfig+0x7ac>)
 800d8ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d8ee:	4b35      	ldr	r3, [pc, #212]	@ (800d9c4 <HAL_RCC_OscConfig+0x7ac>)
 800d8f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d031      	beq.n	800d960 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	f003 0203 	and.w	r2, r3, #3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d906:	429a      	cmp	r2, r3
 800d908:	d12a      	bne.n	800d960 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	091b      	lsrs	r3, r3, #4
 800d90e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d916:	429a      	cmp	r2, r3
 800d918:	d122      	bne.n	800d960 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d924:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d926:	429a      	cmp	r2, r3
 800d928:	d11a      	bne.n	800d960 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	0a5b      	lsrs	r3, r3, #9
 800d92e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d936:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d938:	429a      	cmp	r2, r3
 800d93a:	d111      	bne.n	800d960 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	0c1b      	lsrs	r3, r3, #16
 800d940:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d948:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d108      	bne.n	800d960 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	0e1b      	lsrs	r3, r3, #24
 800d952:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d95a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d001      	beq.n	800d964 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800d960:	2301      	movs	r3, #1
 800d962:	e02b      	b.n	800d9bc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d964:	4b17      	ldr	r3, [pc, #92]	@ (800d9c4 <HAL_RCC_OscConfig+0x7ac>)
 800d966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d968:	08db      	lsrs	r3, r3, #3
 800d96a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d96e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d974:	693a      	ldr	r2, [r7, #16]
 800d976:	429a      	cmp	r2, r3
 800d978:	d01f      	beq.n	800d9ba <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d97a:	4b12      	ldr	r3, [pc, #72]	@ (800d9c4 <HAL_RCC_OscConfig+0x7ac>)
 800d97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d97e:	4a11      	ldr	r2, [pc, #68]	@ (800d9c4 <HAL_RCC_OscConfig+0x7ac>)
 800d980:	f023 0301 	bic.w	r3, r3, #1
 800d984:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d986:	f7f9 fd7f 	bl	8007488 <HAL_GetTick>
 800d98a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d98c:	bf00      	nop
 800d98e:	f7f9 fd7b 	bl	8007488 <HAL_GetTick>
 800d992:	4602      	mov	r2, r0
 800d994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d996:	4293      	cmp	r3, r2
 800d998:	d0f9      	beq.n	800d98e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d99a:	4b0a      	ldr	r3, [pc, #40]	@ (800d9c4 <HAL_RCC_OscConfig+0x7ac>)
 800d99c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d99e:	4b0a      	ldr	r3, [pc, #40]	@ (800d9c8 <HAL_RCC_OscConfig+0x7b0>)
 800d9a0:	4013      	ands	r3, r2
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d9a6:	00d2      	lsls	r2, r2, #3
 800d9a8:	4906      	ldr	r1, [pc, #24]	@ (800d9c4 <HAL_RCC_OscConfig+0x7ac>)
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d9ae:	4b05      	ldr	r3, [pc, #20]	@ (800d9c4 <HAL_RCC_OscConfig+0x7ac>)
 800d9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b2:	4a04      	ldr	r2, [pc, #16]	@ (800d9c4 <HAL_RCC_OscConfig+0x7ac>)
 800d9b4:	f043 0301 	orr.w	r3, r3, #1
 800d9b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d9ba:	2300      	movs	r3, #0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3730      	adds	r7, #48	@ 0x30
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	58024400 	.word	0x58024400
 800d9c8:	ffff0007 	.word	0xffff0007

0800d9cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b086      	sub	sp, #24
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d101      	bne.n	800d9e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e19c      	b.n	800dd1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d9e0:	4b8a      	ldr	r3, [pc, #552]	@ (800dc0c <HAL_RCC_ClockConfig+0x240>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f003 030f 	and.w	r3, r3, #15
 800d9e8:	683a      	ldr	r2, [r7, #0]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d910      	bls.n	800da10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9ee:	4b87      	ldr	r3, [pc, #540]	@ (800dc0c <HAL_RCC_ClockConfig+0x240>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f023 020f 	bic.w	r2, r3, #15
 800d9f6:	4985      	ldr	r1, [pc, #532]	@ (800dc0c <HAL_RCC_ClockConfig+0x240>)
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9fe:	4b83      	ldr	r3, [pc, #524]	@ (800dc0c <HAL_RCC_ClockConfig+0x240>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f003 030f 	and.w	r3, r3, #15
 800da06:	683a      	ldr	r2, [r7, #0]
 800da08:	429a      	cmp	r2, r3
 800da0a:	d001      	beq.n	800da10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800da0c:	2301      	movs	r3, #1
 800da0e:	e184      	b.n	800dd1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f003 0304 	and.w	r3, r3, #4
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d010      	beq.n	800da3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	691a      	ldr	r2, [r3, #16]
 800da20:	4b7b      	ldr	r3, [pc, #492]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800da22:	699b      	ldr	r3, [r3, #24]
 800da24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800da28:	429a      	cmp	r2, r3
 800da2a:	d908      	bls.n	800da3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800da2c:	4b78      	ldr	r3, [pc, #480]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800da2e:	699b      	ldr	r3, [r3, #24]
 800da30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	691b      	ldr	r3, [r3, #16]
 800da38:	4975      	ldr	r1, [pc, #468]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800da3a:	4313      	orrs	r3, r2
 800da3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f003 0308 	and.w	r3, r3, #8
 800da46:	2b00      	cmp	r3, #0
 800da48:	d010      	beq.n	800da6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	695a      	ldr	r2, [r3, #20]
 800da4e:	4b70      	ldr	r3, [pc, #448]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800da50:	69db      	ldr	r3, [r3, #28]
 800da52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800da56:	429a      	cmp	r2, r3
 800da58:	d908      	bls.n	800da6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800da5a:	4b6d      	ldr	r3, [pc, #436]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800da5c:	69db      	ldr	r3, [r3, #28]
 800da5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	695b      	ldr	r3, [r3, #20]
 800da66:	496a      	ldr	r1, [pc, #424]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800da68:	4313      	orrs	r3, r2
 800da6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f003 0310 	and.w	r3, r3, #16
 800da74:	2b00      	cmp	r3, #0
 800da76:	d010      	beq.n	800da9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	699a      	ldr	r2, [r3, #24]
 800da7c:	4b64      	ldr	r3, [pc, #400]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800da7e:	69db      	ldr	r3, [r3, #28]
 800da80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800da84:	429a      	cmp	r2, r3
 800da86:	d908      	bls.n	800da9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800da88:	4b61      	ldr	r3, [pc, #388]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800da8a:	69db      	ldr	r3, [r3, #28]
 800da8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	699b      	ldr	r3, [r3, #24]
 800da94:	495e      	ldr	r1, [pc, #376]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800da96:	4313      	orrs	r3, r2
 800da98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f003 0320 	and.w	r3, r3, #32
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d010      	beq.n	800dac8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	69da      	ldr	r2, [r3, #28]
 800daaa:	4b59      	ldr	r3, [pc, #356]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800daac:	6a1b      	ldr	r3, [r3, #32]
 800daae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d908      	bls.n	800dac8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800dab6:	4b56      	ldr	r3, [pc, #344]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800dab8:	6a1b      	ldr	r3, [r3, #32]
 800daba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	69db      	ldr	r3, [r3, #28]
 800dac2:	4953      	ldr	r1, [pc, #332]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800dac4:	4313      	orrs	r3, r2
 800dac6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f003 0302 	and.w	r3, r3, #2
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d010      	beq.n	800daf6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	68da      	ldr	r2, [r3, #12]
 800dad8:	4b4d      	ldr	r3, [pc, #308]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800dada:	699b      	ldr	r3, [r3, #24]
 800dadc:	f003 030f 	and.w	r3, r3, #15
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d908      	bls.n	800daf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dae4:	4b4a      	ldr	r3, [pc, #296]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800dae6:	699b      	ldr	r3, [r3, #24]
 800dae8:	f023 020f 	bic.w	r2, r3, #15
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	4947      	ldr	r1, [pc, #284]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800daf2:	4313      	orrs	r3, r2
 800daf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f003 0301 	and.w	r3, r3, #1
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d055      	beq.n	800dbae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800db02:	4b43      	ldr	r3, [pc, #268]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800db04:	699b      	ldr	r3, [r3, #24]
 800db06:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	4940      	ldr	r1, [pc, #256]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800db10:	4313      	orrs	r3, r2
 800db12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	2b02      	cmp	r3, #2
 800db1a:	d107      	bne.n	800db2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800db1c:	4b3c      	ldr	r3, [pc, #240]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db24:	2b00      	cmp	r3, #0
 800db26:	d121      	bne.n	800db6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db28:	2301      	movs	r3, #1
 800db2a:	e0f6      	b.n	800dd1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	2b03      	cmp	r3, #3
 800db32:	d107      	bne.n	800db44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800db34:	4b36      	ldr	r3, [pc, #216]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d115      	bne.n	800db6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db40:	2301      	movs	r3, #1
 800db42:	e0ea      	b.n	800dd1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d107      	bne.n	800db5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800db4c:	4b30      	ldr	r3, [pc, #192]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db54:	2b00      	cmp	r3, #0
 800db56:	d109      	bne.n	800db6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db58:	2301      	movs	r3, #1
 800db5a:	e0de      	b.n	800dd1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db5c:	4b2c      	ldr	r3, [pc, #176]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f003 0304 	and.w	r3, r3, #4
 800db64:	2b00      	cmp	r3, #0
 800db66:	d101      	bne.n	800db6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db68:	2301      	movs	r3, #1
 800db6a:	e0d6      	b.n	800dd1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800db6c:	4b28      	ldr	r3, [pc, #160]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800db6e:	691b      	ldr	r3, [r3, #16]
 800db70:	f023 0207 	bic.w	r2, r3, #7
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	4925      	ldr	r1, [pc, #148]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800db7a:	4313      	orrs	r3, r2
 800db7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db7e:	f7f9 fc83 	bl	8007488 <HAL_GetTick>
 800db82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db84:	e00a      	b.n	800db9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db86:	f7f9 fc7f 	bl	8007488 <HAL_GetTick>
 800db8a:	4602      	mov	r2, r0
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db94:	4293      	cmp	r3, r2
 800db96:	d901      	bls.n	800db9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800db98:	2303      	movs	r3, #3
 800db9a:	e0be      	b.n	800dd1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db9c:	4b1c      	ldr	r3, [pc, #112]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800db9e:	691b      	ldr	r3, [r3, #16]
 800dba0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	00db      	lsls	r3, r3, #3
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d1eb      	bne.n	800db86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f003 0302 	and.w	r3, r3, #2
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d010      	beq.n	800dbdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	68da      	ldr	r2, [r3, #12]
 800dbbe:	4b14      	ldr	r3, [pc, #80]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800dbc0:	699b      	ldr	r3, [r3, #24]
 800dbc2:	f003 030f 	and.w	r3, r3, #15
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d208      	bcs.n	800dbdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dbca:	4b11      	ldr	r3, [pc, #68]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800dbcc:	699b      	ldr	r3, [r3, #24]
 800dbce:	f023 020f 	bic.w	r2, r3, #15
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	490e      	ldr	r1, [pc, #56]	@ (800dc10 <HAL_RCC_ClockConfig+0x244>)
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dbdc:	4b0b      	ldr	r3, [pc, #44]	@ (800dc0c <HAL_RCC_ClockConfig+0x240>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f003 030f 	and.w	r3, r3, #15
 800dbe4:	683a      	ldr	r2, [r7, #0]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d214      	bcs.n	800dc14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbea:	4b08      	ldr	r3, [pc, #32]	@ (800dc0c <HAL_RCC_ClockConfig+0x240>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f023 020f 	bic.w	r2, r3, #15
 800dbf2:	4906      	ldr	r1, [pc, #24]	@ (800dc0c <HAL_RCC_ClockConfig+0x240>)
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dbfa:	4b04      	ldr	r3, [pc, #16]	@ (800dc0c <HAL_RCC_ClockConfig+0x240>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f003 030f 	and.w	r3, r3, #15
 800dc02:	683a      	ldr	r2, [r7, #0]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d005      	beq.n	800dc14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e086      	b.n	800dd1a <HAL_RCC_ClockConfig+0x34e>
 800dc0c:	52002000 	.word	0x52002000
 800dc10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f003 0304 	and.w	r3, r3, #4
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d010      	beq.n	800dc42 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	691a      	ldr	r2, [r3, #16]
 800dc24:	4b3f      	ldr	r3, [pc, #252]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dc26:	699b      	ldr	r3, [r3, #24]
 800dc28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d208      	bcs.n	800dc42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dc30:	4b3c      	ldr	r3, [pc, #240]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dc32:	699b      	ldr	r3, [r3, #24]
 800dc34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	691b      	ldr	r3, [r3, #16]
 800dc3c:	4939      	ldr	r1, [pc, #228]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f003 0308 	and.w	r3, r3, #8
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d010      	beq.n	800dc70 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	695a      	ldr	r2, [r3, #20]
 800dc52:	4b34      	ldr	r3, [pc, #208]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dc54:	69db      	ldr	r3, [r3, #28]
 800dc56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d208      	bcs.n	800dc70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dc5e:	4b31      	ldr	r3, [pc, #196]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dc60:	69db      	ldr	r3, [r3, #28]
 800dc62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	695b      	ldr	r3, [r3, #20]
 800dc6a:	492e      	ldr	r1, [pc, #184]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dc6c:	4313      	orrs	r3, r2
 800dc6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f003 0310 	and.w	r3, r3, #16
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d010      	beq.n	800dc9e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	699a      	ldr	r2, [r3, #24]
 800dc80:	4b28      	ldr	r3, [pc, #160]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dc82:	69db      	ldr	r3, [r3, #28]
 800dc84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d208      	bcs.n	800dc9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dc8c:	4b25      	ldr	r3, [pc, #148]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dc8e:	69db      	ldr	r3, [r3, #28]
 800dc90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	699b      	ldr	r3, [r3, #24]
 800dc98:	4922      	ldr	r1, [pc, #136]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f003 0320 	and.w	r3, r3, #32
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d010      	beq.n	800dccc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	69da      	ldr	r2, [r3, #28]
 800dcae:	4b1d      	ldr	r3, [pc, #116]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dcb0:	6a1b      	ldr	r3, [r3, #32]
 800dcb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d208      	bcs.n	800dccc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800dcba:	4b1a      	ldr	r3, [pc, #104]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	69db      	ldr	r3, [r3, #28]
 800dcc6:	4917      	ldr	r1, [pc, #92]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dccc:	f000 f834 	bl	800dd38 <HAL_RCC_GetSysClockFreq>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	4b14      	ldr	r3, [pc, #80]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dcd4:	699b      	ldr	r3, [r3, #24]
 800dcd6:	0a1b      	lsrs	r3, r3, #8
 800dcd8:	f003 030f 	and.w	r3, r3, #15
 800dcdc:	4912      	ldr	r1, [pc, #72]	@ (800dd28 <HAL_RCC_ClockConfig+0x35c>)
 800dcde:	5ccb      	ldrb	r3, [r1, r3]
 800dce0:	f003 031f 	and.w	r3, r3, #31
 800dce4:	fa22 f303 	lsr.w	r3, r2, r3
 800dce8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dcea:	4b0e      	ldr	r3, [pc, #56]	@ (800dd24 <HAL_RCC_ClockConfig+0x358>)
 800dcec:	699b      	ldr	r3, [r3, #24]
 800dcee:	f003 030f 	and.w	r3, r3, #15
 800dcf2:	4a0d      	ldr	r2, [pc, #52]	@ (800dd28 <HAL_RCC_ClockConfig+0x35c>)
 800dcf4:	5cd3      	ldrb	r3, [r2, r3]
 800dcf6:	f003 031f 	and.w	r3, r3, #31
 800dcfa:	693a      	ldr	r2, [r7, #16]
 800dcfc:	fa22 f303 	lsr.w	r3, r2, r3
 800dd00:	4a0a      	ldr	r2, [pc, #40]	@ (800dd2c <HAL_RCC_ClockConfig+0x360>)
 800dd02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dd04:	4a0a      	ldr	r2, [pc, #40]	@ (800dd30 <HAL_RCC_ClockConfig+0x364>)
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800dd0a:	4b0a      	ldr	r3, [pc, #40]	@ (800dd34 <HAL_RCC_ClockConfig+0x368>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7f9 fb70 	bl	80073f4 <HAL_InitTick>
 800dd14:	4603      	mov	r3, r0
 800dd16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800dd18:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3718      	adds	r7, #24
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	58024400 	.word	0x58024400
 800dd28:	0801da08 	.word	0x0801da08
 800dd2c:	24000004 	.word	0x24000004
 800dd30:	24000000 	.word	0x24000000
 800dd34:	24000038 	.word	0x24000038

0800dd38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b089      	sub	sp, #36	@ 0x24
 800dd3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dd3e:	4bb3      	ldr	r3, [pc, #716]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dd46:	2b18      	cmp	r3, #24
 800dd48:	f200 8155 	bhi.w	800dff6 <HAL_RCC_GetSysClockFreq+0x2be>
 800dd4c:	a201      	add	r2, pc, #4	@ (adr r2, 800dd54 <HAL_RCC_GetSysClockFreq+0x1c>)
 800dd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd52:	bf00      	nop
 800dd54:	0800ddb9 	.word	0x0800ddb9
 800dd58:	0800dff7 	.word	0x0800dff7
 800dd5c:	0800dff7 	.word	0x0800dff7
 800dd60:	0800dff7 	.word	0x0800dff7
 800dd64:	0800dff7 	.word	0x0800dff7
 800dd68:	0800dff7 	.word	0x0800dff7
 800dd6c:	0800dff7 	.word	0x0800dff7
 800dd70:	0800dff7 	.word	0x0800dff7
 800dd74:	0800dddf 	.word	0x0800dddf
 800dd78:	0800dff7 	.word	0x0800dff7
 800dd7c:	0800dff7 	.word	0x0800dff7
 800dd80:	0800dff7 	.word	0x0800dff7
 800dd84:	0800dff7 	.word	0x0800dff7
 800dd88:	0800dff7 	.word	0x0800dff7
 800dd8c:	0800dff7 	.word	0x0800dff7
 800dd90:	0800dff7 	.word	0x0800dff7
 800dd94:	0800dde5 	.word	0x0800dde5
 800dd98:	0800dff7 	.word	0x0800dff7
 800dd9c:	0800dff7 	.word	0x0800dff7
 800dda0:	0800dff7 	.word	0x0800dff7
 800dda4:	0800dff7 	.word	0x0800dff7
 800dda8:	0800dff7 	.word	0x0800dff7
 800ddac:	0800dff7 	.word	0x0800dff7
 800ddb0:	0800dff7 	.word	0x0800dff7
 800ddb4:	0800ddeb 	.word	0x0800ddeb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddb8:	4b94      	ldr	r3, [pc, #592]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f003 0320 	and.w	r3, r3, #32
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d009      	beq.n	800ddd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ddc4:	4b91      	ldr	r3, [pc, #580]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	08db      	lsrs	r3, r3, #3
 800ddca:	f003 0303 	and.w	r3, r3, #3
 800ddce:	4a90      	ldr	r2, [pc, #576]	@ (800e010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ddd0:	fa22 f303 	lsr.w	r3, r2, r3
 800ddd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ddd6:	e111      	b.n	800dffc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ddd8:	4b8d      	ldr	r3, [pc, #564]	@ (800e010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ddda:	61bb      	str	r3, [r7, #24]
      break;
 800dddc:	e10e      	b.n	800dffc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ddde:	4b8d      	ldr	r3, [pc, #564]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dde0:	61bb      	str	r3, [r7, #24]
      break;
 800dde2:	e10b      	b.n	800dffc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800dde4:	4b8c      	ldr	r3, [pc, #560]	@ (800e018 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800dde6:	61bb      	str	r3, [r7, #24]
      break;
 800dde8:	e108      	b.n	800dffc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ddea:	4b88      	ldr	r3, [pc, #544]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddee:	f003 0303 	and.w	r3, r3, #3
 800ddf2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ddf4:	4b85      	ldr	r3, [pc, #532]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddf8:	091b      	lsrs	r3, r3, #4
 800ddfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ddfe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800de00:	4b82      	ldr	r3, [pc, #520]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de04:	f003 0301 	and.w	r3, r3, #1
 800de08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800de0a:	4b80      	ldr	r3, [pc, #512]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de0e:	08db      	lsrs	r3, r3, #3
 800de10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	fb02 f303 	mul.w	r3, r2, r3
 800de1a:	ee07 3a90 	vmov	s15, r3
 800de1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	f000 80e1 	beq.w	800dff0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	2b02      	cmp	r3, #2
 800de32:	f000 8083 	beq.w	800df3c <HAL_RCC_GetSysClockFreq+0x204>
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2b02      	cmp	r3, #2
 800de3a:	f200 80a1 	bhi.w	800df80 <HAL_RCC_GetSysClockFreq+0x248>
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d003      	beq.n	800de4c <HAL_RCC_GetSysClockFreq+0x114>
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	2b01      	cmp	r3, #1
 800de48:	d056      	beq.n	800def8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800de4a:	e099      	b.n	800df80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de4c:	4b6f      	ldr	r3, [pc, #444]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f003 0320 	and.w	r3, r3, #32
 800de54:	2b00      	cmp	r3, #0
 800de56:	d02d      	beq.n	800deb4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de58:	4b6c      	ldr	r3, [pc, #432]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	08db      	lsrs	r3, r3, #3
 800de5e:	f003 0303 	and.w	r3, r3, #3
 800de62:	4a6b      	ldr	r2, [pc, #428]	@ (800e010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de64:	fa22 f303 	lsr.w	r3, r2, r3
 800de68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	ee07 3a90 	vmov	s15, r3
 800de70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	ee07 3a90 	vmov	s15, r3
 800de7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de82:	4b62      	ldr	r3, [pc, #392]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de8a:	ee07 3a90 	vmov	s15, r3
 800de8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de92:	ed97 6a02 	vldr	s12, [r7, #8]
 800de96:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e01c <HAL_RCC_GetSysClockFreq+0x2e4>
 800de9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800deaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800deb2:	e087      	b.n	800dfc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	ee07 3a90 	vmov	s15, r3
 800deba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800debe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e020 <HAL_RCC_GetSysClockFreq+0x2e8>
 800dec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dec6:	4b51      	ldr	r3, [pc, #324]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dece:	ee07 3a90 	vmov	s15, r3
 800ded2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ded6:	ed97 6a02 	vldr	s12, [r7, #8]
 800deda:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e01c <HAL_RCC_GetSysClockFreq+0x2e4>
 800dede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800deea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800deee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800def2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800def6:	e065      	b.n	800dfc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	ee07 3a90 	vmov	s15, r3
 800defe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df02:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e024 <HAL_RCC_GetSysClockFreq+0x2ec>
 800df06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df0a:	4b40      	ldr	r3, [pc, #256]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df12:	ee07 3a90 	vmov	s15, r3
 800df16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800df1e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e01c <HAL_RCC_GetSysClockFreq+0x2e4>
 800df22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800df3a:	e043      	b.n	800dfc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	ee07 3a90 	vmov	s15, r3
 800df42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df46:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e028 <HAL_RCC_GetSysClockFreq+0x2f0>
 800df4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df4e:	4b2f      	ldr	r3, [pc, #188]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df56:	ee07 3a90 	vmov	s15, r3
 800df5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800df62:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e01c <HAL_RCC_GetSysClockFreq+0x2e4>
 800df66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800df7e:	e021      	b.n	800dfc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	ee07 3a90 	vmov	s15, r3
 800df86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df8a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e024 <HAL_RCC_GetSysClockFreq+0x2ec>
 800df8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df92:	4b1e      	ldr	r3, [pc, #120]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df9a:	ee07 3a90 	vmov	s15, r3
 800df9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfa2:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfa6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e01c <HAL_RCC_GetSysClockFreq+0x2e4>
 800dfaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dfc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800dfc4:	4b11      	ldr	r3, [pc, #68]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dfc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfc8:	0a5b      	lsrs	r3, r3, #9
 800dfca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfce:	3301      	adds	r3, #1
 800dfd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	ee07 3a90 	vmov	s15, r3
 800dfd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dfdc:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfe8:	ee17 3a90 	vmov	r3, s15
 800dfec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800dfee:	e005      	b.n	800dffc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800dff0:	2300      	movs	r3, #0
 800dff2:	61bb      	str	r3, [r7, #24]
      break;
 800dff4:	e002      	b.n	800dffc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800dff6:	4b07      	ldr	r3, [pc, #28]	@ (800e014 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dff8:	61bb      	str	r3, [r7, #24]
      break;
 800dffa:	bf00      	nop
  }

  return sysclockfreq;
 800dffc:	69bb      	ldr	r3, [r7, #24]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3724      	adds	r7, #36	@ 0x24
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	58024400 	.word	0x58024400
 800e010:	03d09000 	.word	0x03d09000
 800e014:	003d0900 	.word	0x003d0900
 800e018:	016e3600 	.word	0x016e3600
 800e01c:	46000000 	.word	0x46000000
 800e020:	4c742400 	.word	0x4c742400
 800e024:	4a742400 	.word	0x4a742400
 800e028:	4bb71b00 	.word	0x4bb71b00

0800e02c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e032:	f7ff fe81 	bl	800dd38 <HAL_RCC_GetSysClockFreq>
 800e036:	4602      	mov	r2, r0
 800e038:	4b10      	ldr	r3, [pc, #64]	@ (800e07c <HAL_RCC_GetHCLKFreq+0x50>)
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	0a1b      	lsrs	r3, r3, #8
 800e03e:	f003 030f 	and.w	r3, r3, #15
 800e042:	490f      	ldr	r1, [pc, #60]	@ (800e080 <HAL_RCC_GetHCLKFreq+0x54>)
 800e044:	5ccb      	ldrb	r3, [r1, r3]
 800e046:	f003 031f 	and.w	r3, r3, #31
 800e04a:	fa22 f303 	lsr.w	r3, r2, r3
 800e04e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e050:	4b0a      	ldr	r3, [pc, #40]	@ (800e07c <HAL_RCC_GetHCLKFreq+0x50>)
 800e052:	699b      	ldr	r3, [r3, #24]
 800e054:	f003 030f 	and.w	r3, r3, #15
 800e058:	4a09      	ldr	r2, [pc, #36]	@ (800e080 <HAL_RCC_GetHCLKFreq+0x54>)
 800e05a:	5cd3      	ldrb	r3, [r2, r3]
 800e05c:	f003 031f 	and.w	r3, r3, #31
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	fa22 f303 	lsr.w	r3, r2, r3
 800e066:	4a07      	ldr	r2, [pc, #28]	@ (800e084 <HAL_RCC_GetHCLKFreq+0x58>)
 800e068:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e06a:	4a07      	ldr	r2, [pc, #28]	@ (800e088 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e070:	4b04      	ldr	r3, [pc, #16]	@ (800e084 <HAL_RCC_GetHCLKFreq+0x58>)
 800e072:	681b      	ldr	r3, [r3, #0]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	58024400 	.word	0x58024400
 800e080:	0801da08 	.word	0x0801da08
 800e084:	24000004 	.word	0x24000004
 800e088:	24000000 	.word	0x24000000

0800e08c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e090:	f7ff ffcc 	bl	800e02c <HAL_RCC_GetHCLKFreq>
 800e094:	4602      	mov	r2, r0
 800e096:	4b06      	ldr	r3, [pc, #24]	@ (800e0b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e098:	69db      	ldr	r3, [r3, #28]
 800e09a:	091b      	lsrs	r3, r3, #4
 800e09c:	f003 0307 	and.w	r3, r3, #7
 800e0a0:	4904      	ldr	r1, [pc, #16]	@ (800e0b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e0a2:	5ccb      	ldrb	r3, [r1, r3]
 800e0a4:	f003 031f 	and.w	r3, r3, #31
 800e0a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	58024400 	.word	0x58024400
 800e0b4:	0801da08 	.word	0x0801da08

0800e0b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e0bc:	f7ff ffb6 	bl	800e02c <HAL_RCC_GetHCLKFreq>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	4b06      	ldr	r3, [pc, #24]	@ (800e0dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800e0c4:	69db      	ldr	r3, [r3, #28]
 800e0c6:	0a1b      	lsrs	r3, r3, #8
 800e0c8:	f003 0307 	and.w	r3, r3, #7
 800e0cc:	4904      	ldr	r1, [pc, #16]	@ (800e0e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e0ce:	5ccb      	ldrb	r3, [r1, r3]
 800e0d0:	f003 031f 	and.w	r3, r3, #31
 800e0d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	58024400 	.word	0x58024400
 800e0e0:	0801da08 	.word	0x0801da08

0800e0e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e0e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0e8:	b0c6      	sub	sp, #280	@ 0x118
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e104:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e108:	2500      	movs	r5, #0
 800e10a:	ea54 0305 	orrs.w	r3, r4, r5
 800e10e:	d049      	beq.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e116:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e11a:	d02f      	beq.n	800e17c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e11c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e120:	d828      	bhi.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e122:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e126:	d01a      	beq.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e128:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e12c:	d822      	bhi.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d003      	beq.n	800e13a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e136:	d007      	beq.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e138:	e01c      	b.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e13a:	4bab      	ldr	r3, [pc, #684]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e13e:	4aaa      	ldr	r2, [pc, #680]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e144:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e146:	e01a      	b.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e14c:	3308      	adds	r3, #8
 800e14e:	2102      	movs	r1, #2
 800e150:	4618      	mov	r0, r3
 800e152:	f002 fa49 	bl	80105e8 <RCCEx_PLL2_Config>
 800e156:	4603      	mov	r3, r0
 800e158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e15c:	e00f      	b.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e162:	3328      	adds	r3, #40	@ 0x28
 800e164:	2102      	movs	r1, #2
 800e166:	4618      	mov	r0, r3
 800e168:	f002 faf0 	bl	801074c <RCCEx_PLL3_Config>
 800e16c:	4603      	mov	r3, r0
 800e16e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e172:	e004      	b.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e17a:	e000      	b.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e17c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e17e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e182:	2b00      	cmp	r3, #0
 800e184:	d10a      	bne.n	800e19c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e186:	4b98      	ldr	r3, [pc, #608]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e18a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e194:	4a94      	ldr	r2, [pc, #592]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e196:	430b      	orrs	r3, r1
 800e198:	6513      	str	r3, [r2, #80]	@ 0x50
 800e19a:	e003      	b.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e19c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e1b0:	f04f 0900 	mov.w	r9, #0
 800e1b4:	ea58 0309 	orrs.w	r3, r8, r9
 800e1b8:	d047      	beq.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1c0:	2b04      	cmp	r3, #4
 800e1c2:	d82a      	bhi.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e1c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e1cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ca:	bf00      	nop
 800e1cc:	0800e1e1 	.word	0x0800e1e1
 800e1d0:	0800e1ef 	.word	0x0800e1ef
 800e1d4:	0800e205 	.word	0x0800e205
 800e1d8:	0800e223 	.word	0x0800e223
 800e1dc:	0800e223 	.word	0x0800e223
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1e0:	4b81      	ldr	r3, [pc, #516]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e4:	4a80      	ldr	r2, [pc, #512]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e1e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e1ec:	e01a      	b.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1f2:	3308      	adds	r3, #8
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f002 f9f6 	bl	80105e8 <RCCEx_PLL2_Config>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e202:	e00f      	b.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e208:	3328      	adds	r3, #40	@ 0x28
 800e20a:	2100      	movs	r1, #0
 800e20c:	4618      	mov	r0, r3
 800e20e:	f002 fa9d 	bl	801074c <RCCEx_PLL3_Config>
 800e212:	4603      	mov	r3, r0
 800e214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e218:	e004      	b.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e21a:	2301      	movs	r3, #1
 800e21c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e220:	e000      	b.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e222:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d10a      	bne.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e22c:	4b6e      	ldr	r3, [pc, #440]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e22e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e230:	f023 0107 	bic.w	r1, r3, #7
 800e234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e23a:	4a6b      	ldr	r2, [pc, #428]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e23c:	430b      	orrs	r3, r1
 800e23e:	6513      	str	r3, [r2, #80]	@ 0x50
 800e240:	e003      	b.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e242:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e246:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e252:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800e256:	f04f 0b00 	mov.w	fp, #0
 800e25a:	ea5a 030b 	orrs.w	r3, sl, fp
 800e25e:	d05b      	beq.n	800e318 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e264:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e268:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800e26c:	d03b      	beq.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800e26e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800e272:	d834      	bhi.n	800e2de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e274:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e278:	d037      	beq.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 800e27a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e27e:	d82e      	bhi.n	800e2de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e280:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e284:	d033      	beq.n	800e2ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800e286:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e28a:	d828      	bhi.n	800e2de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e28c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e290:	d01a      	beq.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800e292:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e296:	d822      	bhi.n	800e2de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d003      	beq.n	800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800e29c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e2a0:	d007      	beq.n	800e2b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800e2a2:	e01c      	b.n	800e2de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2a4:	4b50      	ldr	r3, [pc, #320]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2a8:	4a4f      	ldr	r2, [pc, #316]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e2aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e2ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e2b0:	e01e      	b.n	800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2b6:	3308      	adds	r3, #8
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f002 f994 	bl	80105e8 <RCCEx_PLL2_Config>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e2c6:	e013      	b.n	800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2cc:	3328      	adds	r3, #40	@ 0x28
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f002 fa3b 	bl	801074c <RCCEx_PLL3_Config>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e2dc:	e008      	b.n	800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e2e4:	e004      	b.n	800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e2e6:	bf00      	nop
 800e2e8:	e002      	b.n	800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e2ea:	bf00      	nop
 800e2ec:	e000      	b.n	800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e2ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10b      	bne.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e2f8:	4b3b      	ldr	r3, [pc, #236]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e2fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2fc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e308:	4a37      	ldr	r2, [pc, #220]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e30a:	430b      	orrs	r3, r1
 800e30c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e30e:	e003      	b.n	800e318 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e314:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e320:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e324:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e328:	2300      	movs	r3, #0
 800e32a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e32e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800e332:	460b      	mov	r3, r1
 800e334:	4313      	orrs	r3, r2
 800e336:	d05d      	beq.n	800e3f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e33c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e340:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e344:	d03b      	beq.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800e346:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e34a:	d834      	bhi.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e34c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e350:	d037      	beq.n	800e3c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800e352:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e356:	d82e      	bhi.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e358:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e35c:	d033      	beq.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800e35e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e362:	d828      	bhi.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e364:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e368:	d01a      	beq.n	800e3a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800e36a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e36e:	d822      	bhi.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e370:	2b00      	cmp	r3, #0
 800e372:	d003      	beq.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800e374:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e378:	d007      	beq.n	800e38a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800e37a:	e01c      	b.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e37c:	4b1a      	ldr	r3, [pc, #104]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e380:	4a19      	ldr	r2, [pc, #100]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e386:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e388:	e01e      	b.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e38e:	3308      	adds	r3, #8
 800e390:	2100      	movs	r1, #0
 800e392:	4618      	mov	r0, r3
 800e394:	f002 f928 	bl	80105e8 <RCCEx_PLL2_Config>
 800e398:	4603      	mov	r3, r0
 800e39a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e39e:	e013      	b.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3a4:	3328      	adds	r3, #40	@ 0x28
 800e3a6:	2100      	movs	r1, #0
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f002 f9cf 	bl	801074c <RCCEx_PLL3_Config>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e3b4:	e008      	b.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e3bc:	e004      	b.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e3be:	bf00      	nop
 800e3c0:	e002      	b.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e3c2:	bf00      	nop
 800e3c4:	e000      	b.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e3c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10d      	bne.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e3d0:	4b05      	ldr	r3, [pc, #20]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e3d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e3e0:	4a01      	ldr	r2, [pc, #4]	@ (800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e3e2:	430b      	orrs	r3, r1
 800e3e4:	6593      	str	r3, [r2, #88]	@ 0x58
 800e3e6:	e005      	b.n	800e3f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800e3e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e3f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e400:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e404:	2300      	movs	r3, #0
 800e406:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e40a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e40e:	460b      	mov	r3, r1
 800e410:	4313      	orrs	r3, r2
 800e412:	d03a      	beq.n	800e48a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800e414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e41a:	2b30      	cmp	r3, #48	@ 0x30
 800e41c:	d01f      	beq.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800e41e:	2b30      	cmp	r3, #48	@ 0x30
 800e420:	d819      	bhi.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e422:	2b20      	cmp	r3, #32
 800e424:	d00c      	beq.n	800e440 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800e426:	2b20      	cmp	r3, #32
 800e428:	d815      	bhi.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d019      	beq.n	800e462 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e42e:	2b10      	cmp	r3, #16
 800e430:	d111      	bne.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e432:	4baa      	ldr	r3, [pc, #680]	@ (800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e436:	4aa9      	ldr	r2, [pc, #676]	@ (800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e43c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e43e:	e011      	b.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e444:	3308      	adds	r3, #8
 800e446:	2102      	movs	r1, #2
 800e448:	4618      	mov	r0, r3
 800e44a:	f002 f8cd 	bl	80105e8 <RCCEx_PLL2_Config>
 800e44e:	4603      	mov	r3, r0
 800e450:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e454:	e006      	b.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e45c:	e002      	b.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800e45e:	bf00      	nop
 800e460:	e000      	b.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800e462:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d10a      	bne.n	800e482 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e46c:	4b9b      	ldr	r3, [pc, #620]	@ (800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e46e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e470:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e47a:	4a98      	ldr	r2, [pc, #608]	@ (800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e47c:	430b      	orrs	r3, r1
 800e47e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e480:	e003      	b.n	800e48a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e482:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e486:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e492:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e496:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e49a:	2300      	movs	r3, #0
 800e49c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e4a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	d051      	beq.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e4b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4b4:	d035      	beq.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800e4b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4ba:	d82e      	bhi.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e4bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e4c0:	d031      	beq.n	800e526 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800e4c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e4c6:	d828      	bhi.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e4c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e4cc:	d01a      	beq.n	800e504 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800e4ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e4d2:	d822      	bhi.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d003      	beq.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800e4d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4dc:	d007      	beq.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800e4de:	e01c      	b.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4e0:	4b7e      	ldr	r3, [pc, #504]	@ (800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e4:	4a7d      	ldr	r2, [pc, #500]	@ (800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e4e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e4ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e4ec:	e01c      	b.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4f2:	3308      	adds	r3, #8
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f002 f876 	bl	80105e8 <RCCEx_PLL2_Config>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e502:	e011      	b.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e508:	3328      	adds	r3, #40	@ 0x28
 800e50a:	2100      	movs	r1, #0
 800e50c:	4618      	mov	r0, r3
 800e50e:	f002 f91d 	bl	801074c <RCCEx_PLL3_Config>
 800e512:	4603      	mov	r3, r0
 800e514:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e518:	e006      	b.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e51a:	2301      	movs	r3, #1
 800e51c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e520:	e002      	b.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e522:	bf00      	nop
 800e524:	e000      	b.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e526:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e528:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d10a      	bne.n	800e546 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e530:	4b6a      	ldr	r3, [pc, #424]	@ (800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e534:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e53c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e53e:	4a67      	ldr	r2, [pc, #412]	@ (800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e540:	430b      	orrs	r3, r1
 800e542:	6513      	str	r3, [r2, #80]	@ 0x50
 800e544:	e003      	b.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e546:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e54a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e54e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e556:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e55a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e55e:	2300      	movs	r3, #0
 800e560:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e564:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e568:	460b      	mov	r3, r1
 800e56a:	4313      	orrs	r3, r2
 800e56c:	d053      	beq.n	800e616 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e578:	d033      	beq.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800e57a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e57e:	d82c      	bhi.n	800e5da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e580:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e584:	d02f      	beq.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800e586:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e58a:	d826      	bhi.n	800e5da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e58c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e590:	d02b      	beq.n	800e5ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 800e592:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e596:	d820      	bhi.n	800e5da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e598:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e59c:	d012      	beq.n	800e5c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800e59e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5a2:	d81a      	bhi.n	800e5da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d022      	beq.n	800e5ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e5a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5ac:	d115      	bne.n	800e5da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5b2:	3308      	adds	r3, #8
 800e5b4:	2101      	movs	r1, #1
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f002 f816 	bl	80105e8 <RCCEx_PLL2_Config>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e5c2:	e015      	b.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5c8:	3328      	adds	r3, #40	@ 0x28
 800e5ca:	2101      	movs	r1, #1
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f002 f8bd 	bl	801074c <RCCEx_PLL3_Config>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e5d8:	e00a      	b.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e5e0:	e006      	b.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e5e2:	bf00      	nop
 800e5e4:	e004      	b.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e5e6:	bf00      	nop
 800e5e8:	e002      	b.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e5ea:	bf00      	nop
 800e5ec:	e000      	b.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e5ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d10a      	bne.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e5f8:	4b38      	ldr	r3, [pc, #224]	@ (800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e5fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e606:	4a35      	ldr	r2, [pc, #212]	@ (800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e608:	430b      	orrs	r3, r1
 800e60a:	6513      	str	r3, [r2, #80]	@ 0x50
 800e60c:	e003      	b.n	800e616 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e60e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e612:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e626:	2300      	movs	r3, #0
 800e628:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e62c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e630:	460b      	mov	r3, r1
 800e632:	4313      	orrs	r3, r2
 800e634:	d058      	beq.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e63a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e63e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e642:	d033      	beq.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800e644:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e648:	d82c      	bhi.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e64a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e64e:	d02f      	beq.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800e650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e654:	d826      	bhi.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e656:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e65a:	d02b      	beq.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800e65c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e660:	d820      	bhi.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e666:	d012      	beq.n	800e68e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800e668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e66c:	d81a      	bhi.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d022      	beq.n	800e6b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e672:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e676:	d115      	bne.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e67c:	3308      	adds	r3, #8
 800e67e:	2101      	movs	r1, #1
 800e680:	4618      	mov	r0, r3
 800e682:	f001 ffb1 	bl	80105e8 <RCCEx_PLL2_Config>
 800e686:	4603      	mov	r3, r0
 800e688:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e68c:	e015      	b.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e692:	3328      	adds	r3, #40	@ 0x28
 800e694:	2101      	movs	r1, #1
 800e696:	4618      	mov	r0, r3
 800e698:	f002 f858 	bl	801074c <RCCEx_PLL3_Config>
 800e69c:	4603      	mov	r3, r0
 800e69e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e6a2:	e00a      	b.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e6aa:	e006      	b.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e6ac:	bf00      	nop
 800e6ae:	e004      	b.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e6b0:	bf00      	nop
 800e6b2:	e002      	b.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e6b4:	bf00      	nop
 800e6b6:	e000      	b.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e6b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10e      	bne.n	800e6e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e6c2:	4b06      	ldr	r3, [pc, #24]	@ (800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e6c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e6d2:	4a02      	ldr	r2, [pc, #8]	@ (800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e6d4:	430b      	orrs	r3, r1
 800e6d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800e6d8:	e006      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e6da:	bf00      	nop
 800e6dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e6f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e6fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e702:	460b      	mov	r3, r1
 800e704:	4313      	orrs	r3, r2
 800e706:	d037      	beq.n	800e778 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e70c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e70e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e712:	d00e      	beq.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800e714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e718:	d816      	bhi.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d018      	beq.n	800e750 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800e71e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e722:	d111      	bne.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e724:	4bc4      	ldr	r3, [pc, #784]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e728:	4ac3      	ldr	r2, [pc, #780]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e72a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e72e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e730:	e00f      	b.n	800e752 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e736:	3308      	adds	r3, #8
 800e738:	2101      	movs	r1, #1
 800e73a:	4618      	mov	r0, r3
 800e73c:	f001 ff54 	bl	80105e8 <RCCEx_PLL2_Config>
 800e740:	4603      	mov	r3, r0
 800e742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e746:	e004      	b.n	800e752 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e748:	2301      	movs	r3, #1
 800e74a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e74e:	e000      	b.n	800e752 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800e750:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e752:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e756:	2b00      	cmp	r3, #0
 800e758:	d10a      	bne.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e75a:	4bb7      	ldr	r3, [pc, #732]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e75c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e75e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e768:	4ab3      	ldr	r2, [pc, #716]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e76a:	430b      	orrs	r3, r1
 800e76c:	6513      	str	r3, [r2, #80]	@ 0x50
 800e76e:	e003      	b.n	800e778 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e774:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e780:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e784:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e788:	2300      	movs	r3, #0
 800e78a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e78e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e792:	460b      	mov	r3, r1
 800e794:	4313      	orrs	r3, r2
 800e796:	d039      	beq.n	800e80c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e79c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e79e:	2b03      	cmp	r3, #3
 800e7a0:	d81c      	bhi.n	800e7dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800e7a2:	a201      	add	r2, pc, #4	@ (adr r2, 800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800e7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a8:	0800e7e5 	.word	0x0800e7e5
 800e7ac:	0800e7b9 	.word	0x0800e7b9
 800e7b0:	0800e7c7 	.word	0x0800e7c7
 800e7b4:	0800e7e5 	.word	0x0800e7e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7b8:	4b9f      	ldr	r3, [pc, #636]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7bc:	4a9e      	ldr	r2, [pc, #632]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e7be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e7c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e7c4:	e00f      	b.n	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7ca:	3308      	adds	r3, #8
 800e7cc:	2102      	movs	r1, #2
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f001 ff0a 	bl	80105e8 <RCCEx_PLL2_Config>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e7da:	e004      	b.n	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e7e2:	e000      	b.n	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800e7e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d10a      	bne.n	800e804 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e7ee:	4b92      	ldr	r3, [pc, #584]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e7f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7f2:	f023 0103 	bic.w	r1, r3, #3
 800e7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e7fc:	4a8e      	ldr	r2, [pc, #568]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e7fe:	430b      	orrs	r3, r1
 800e800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e802:	e003      	b.n	800e80c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e808:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e81c:	2300      	movs	r3, #0
 800e81e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e822:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e826:	460b      	mov	r3, r1
 800e828:	4313      	orrs	r3, r2
 800e82a:	f000 8099 	beq.w	800e960 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e82e:	4b83      	ldr	r3, [pc, #524]	@ (800ea3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a82      	ldr	r2, [pc, #520]	@ (800ea3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e838:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e83a:	f7f8 fe25 	bl	8007488 <HAL_GetTick>
 800e83e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e842:	e00b      	b.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e844:	f7f8 fe20 	bl	8007488 <HAL_GetTick>
 800e848:	4602      	mov	r2, r0
 800e84a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e84e:	1ad3      	subs	r3, r2, r3
 800e850:	2b64      	cmp	r3, #100	@ 0x64
 800e852:	d903      	bls.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800e854:	2303      	movs	r3, #3
 800e856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e85a:	e005      	b.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e85c:	4b77      	ldr	r3, [pc, #476]	@ (800ea3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e864:	2b00      	cmp	r3, #0
 800e866:	d0ed      	beq.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800e868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d173      	bne.n	800e958 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e870:	4b71      	ldr	r3, [pc, #452]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e872:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e878:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e87c:	4053      	eors	r3, r2
 800e87e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e882:	2b00      	cmp	r3, #0
 800e884:	d015      	beq.n	800e8b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e886:	4b6c      	ldr	r3, [pc, #432]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e88a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e88e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e892:	4b69      	ldr	r3, [pc, #420]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e896:	4a68      	ldr	r2, [pc, #416]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e89c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e89e:	4b66      	ldr	r3, [pc, #408]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8a2:	4a65      	ldr	r2, [pc, #404]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e8a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e8aa:	4a63      	ldr	r2, [pc, #396]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e8b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e8ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8be:	d118      	bne.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8c0:	f7f8 fde2 	bl	8007488 <HAL_GetTick>
 800e8c4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e8c8:	e00d      	b.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e8ca:	f7f8 fddd 	bl	8007488 <HAL_GetTick>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e8d4:	1ad2      	subs	r2, r2, r3
 800e8d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d903      	bls.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800e8de:	2303      	movs	r3, #3
 800e8e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800e8e4:	e005      	b.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e8e6:	4b54      	ldr	r3, [pc, #336]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8ea:	f003 0302 	and.w	r3, r3, #2
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d0eb      	beq.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800e8f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d129      	bne.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e906:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e90a:	d10e      	bne.n	800e92a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800e90c:	4b4a      	ldr	r3, [pc, #296]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e918:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e91c:	091a      	lsrs	r2, r3, #4
 800e91e:	4b48      	ldr	r3, [pc, #288]	@ (800ea40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800e920:	4013      	ands	r3, r2
 800e922:	4a45      	ldr	r2, [pc, #276]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e924:	430b      	orrs	r3, r1
 800e926:	6113      	str	r3, [r2, #16]
 800e928:	e005      	b.n	800e936 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800e92a:	4b43      	ldr	r3, [pc, #268]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e92c:	691b      	ldr	r3, [r3, #16]
 800e92e:	4a42      	ldr	r2, [pc, #264]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e930:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e934:	6113      	str	r3, [r2, #16]
 800e936:	4b40      	ldr	r3, [pc, #256]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e938:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e93e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e946:	4a3c      	ldr	r2, [pc, #240]	@ (800ea38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e948:	430b      	orrs	r3, r1
 800e94a:	6713      	str	r3, [r2, #112]	@ 0x70
 800e94c:	e008      	b.n	800e960 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e94e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e952:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e956:	e003      	b.n	800e960 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e958:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e95c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	f002 0301 	and.w	r3, r2, #1
 800e96c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e970:	2300      	movs	r3, #0
 800e972:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e976:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e97a:	460b      	mov	r3, r1
 800e97c:	4313      	orrs	r3, r2
 800e97e:	f000 808f 	beq.w	800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e986:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e988:	2b28      	cmp	r3, #40	@ 0x28
 800e98a:	d871      	bhi.n	800ea70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e98c:	a201      	add	r2, pc, #4	@ (adr r2, 800e994 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e992:	bf00      	nop
 800e994:	0800ea79 	.word	0x0800ea79
 800e998:	0800ea71 	.word	0x0800ea71
 800e99c:	0800ea71 	.word	0x0800ea71
 800e9a0:	0800ea71 	.word	0x0800ea71
 800e9a4:	0800ea71 	.word	0x0800ea71
 800e9a8:	0800ea71 	.word	0x0800ea71
 800e9ac:	0800ea71 	.word	0x0800ea71
 800e9b0:	0800ea71 	.word	0x0800ea71
 800e9b4:	0800ea45 	.word	0x0800ea45
 800e9b8:	0800ea71 	.word	0x0800ea71
 800e9bc:	0800ea71 	.word	0x0800ea71
 800e9c0:	0800ea71 	.word	0x0800ea71
 800e9c4:	0800ea71 	.word	0x0800ea71
 800e9c8:	0800ea71 	.word	0x0800ea71
 800e9cc:	0800ea71 	.word	0x0800ea71
 800e9d0:	0800ea71 	.word	0x0800ea71
 800e9d4:	0800ea5b 	.word	0x0800ea5b
 800e9d8:	0800ea71 	.word	0x0800ea71
 800e9dc:	0800ea71 	.word	0x0800ea71
 800e9e0:	0800ea71 	.word	0x0800ea71
 800e9e4:	0800ea71 	.word	0x0800ea71
 800e9e8:	0800ea71 	.word	0x0800ea71
 800e9ec:	0800ea71 	.word	0x0800ea71
 800e9f0:	0800ea71 	.word	0x0800ea71
 800e9f4:	0800ea79 	.word	0x0800ea79
 800e9f8:	0800ea71 	.word	0x0800ea71
 800e9fc:	0800ea71 	.word	0x0800ea71
 800ea00:	0800ea71 	.word	0x0800ea71
 800ea04:	0800ea71 	.word	0x0800ea71
 800ea08:	0800ea71 	.word	0x0800ea71
 800ea0c:	0800ea71 	.word	0x0800ea71
 800ea10:	0800ea71 	.word	0x0800ea71
 800ea14:	0800ea79 	.word	0x0800ea79
 800ea18:	0800ea71 	.word	0x0800ea71
 800ea1c:	0800ea71 	.word	0x0800ea71
 800ea20:	0800ea71 	.word	0x0800ea71
 800ea24:	0800ea71 	.word	0x0800ea71
 800ea28:	0800ea71 	.word	0x0800ea71
 800ea2c:	0800ea71 	.word	0x0800ea71
 800ea30:	0800ea71 	.word	0x0800ea71
 800ea34:	0800ea79 	.word	0x0800ea79
 800ea38:	58024400 	.word	0x58024400
 800ea3c:	58024800 	.word	0x58024800
 800ea40:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ea44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea48:	3308      	adds	r3, #8
 800ea4a:	2101      	movs	r1, #1
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f001 fdcb 	bl	80105e8 <RCCEx_PLL2_Config>
 800ea52:	4603      	mov	r3, r0
 800ea54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ea58:	e00f      	b.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea5e:	3328      	adds	r3, #40	@ 0x28
 800ea60:	2101      	movs	r1, #1
 800ea62:	4618      	mov	r0, r3
 800ea64:	f001 fe72 	bl	801074c <RCCEx_PLL3_Config>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ea6e:	e004      	b.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea70:	2301      	movs	r3, #1
 800ea72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ea76:	e000      	b.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ea78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d10a      	bne.n	800ea98 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ea82:	4bbf      	ldr	r3, [pc, #764]	@ (800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ea84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ea8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea90:	4abb      	ldr	r2, [pc, #748]	@ (800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ea92:	430b      	orrs	r3, r1
 800ea94:	6553      	str	r3, [r2, #84]	@ 0x54
 800ea96:	e003      	b.n	800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800eaa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa8:	f002 0302 	and.w	r3, r2, #2
 800eaac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800eab0:	2300      	movs	r3, #0
 800eab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eab6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800eaba:	460b      	mov	r3, r1
 800eabc:	4313      	orrs	r3, r2
 800eabe:	d041      	beq.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800eac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eac6:	2b05      	cmp	r3, #5
 800eac8:	d824      	bhi.n	800eb14 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800eaca:	a201      	add	r2, pc, #4	@ (adr r2, 800ead0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800eacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead0:	0800eb1d 	.word	0x0800eb1d
 800ead4:	0800eae9 	.word	0x0800eae9
 800ead8:	0800eaff 	.word	0x0800eaff
 800eadc:	0800eb1d 	.word	0x0800eb1d
 800eae0:	0800eb1d 	.word	0x0800eb1d
 800eae4:	0800eb1d 	.word	0x0800eb1d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaec:	3308      	adds	r3, #8
 800eaee:	2101      	movs	r1, #1
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f001 fd79 	bl	80105e8 <RCCEx_PLL2_Config>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eafc:	e00f      	b.n	800eb1e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb02:	3328      	adds	r3, #40	@ 0x28
 800eb04:	2101      	movs	r1, #1
 800eb06:	4618      	mov	r0, r3
 800eb08:	f001 fe20 	bl	801074c <RCCEx_PLL3_Config>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eb12:	e004      	b.n	800eb1e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb14:	2301      	movs	r3, #1
 800eb16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eb1a:	e000      	b.n	800eb1e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800eb1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d10a      	bne.n	800eb3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800eb26:	4b96      	ldr	r3, [pc, #600]	@ (800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eb28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb2a:	f023 0107 	bic.w	r1, r3, #7
 800eb2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb34:	4a92      	ldr	r2, [pc, #584]	@ (800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eb36:	430b      	orrs	r3, r1
 800eb38:	6553      	str	r3, [r2, #84]	@ 0x54
 800eb3a:	e003      	b.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800eb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4c:	f002 0304 	and.w	r3, r2, #4
 800eb50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eb54:	2300      	movs	r3, #0
 800eb56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eb5a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800eb5e:	460b      	mov	r3, r1
 800eb60:	4313      	orrs	r3, r2
 800eb62:	d044      	beq.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800eb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb6c:	2b05      	cmp	r3, #5
 800eb6e:	d825      	bhi.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800eb70:	a201      	add	r2, pc, #4	@ (adr r2, 800eb78 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800eb72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb76:	bf00      	nop
 800eb78:	0800ebc5 	.word	0x0800ebc5
 800eb7c:	0800eb91 	.word	0x0800eb91
 800eb80:	0800eba7 	.word	0x0800eba7
 800eb84:	0800ebc5 	.word	0x0800ebc5
 800eb88:	0800ebc5 	.word	0x0800ebc5
 800eb8c:	0800ebc5 	.word	0x0800ebc5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb94:	3308      	adds	r3, #8
 800eb96:	2101      	movs	r1, #1
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f001 fd25 	bl	80105e8 <RCCEx_PLL2_Config>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800eba4:	e00f      	b.n	800ebc6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebaa:	3328      	adds	r3, #40	@ 0x28
 800ebac:	2101      	movs	r1, #1
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f001 fdcc 	bl	801074c <RCCEx_PLL3_Config>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ebba:	e004      	b.n	800ebc6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ebc2:	e000      	b.n	800ebc6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800ebc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d10b      	bne.n	800ebe6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ebce:	4b6c      	ldr	r3, [pc, #432]	@ (800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ebd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebd2:	f023 0107 	bic.w	r1, r3, #7
 800ebd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebde:	4a68      	ldr	r2, [pc, #416]	@ (800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ebe0:	430b      	orrs	r3, r1
 800ebe2:	6593      	str	r3, [r2, #88]	@ 0x58
 800ebe4:	e003      	b.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebe6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ebee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf6:	f002 0320 	and.w	r3, r2, #32
 800ebfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ebfe:	2300      	movs	r3, #0
 800ec00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ec04:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ec08:	460b      	mov	r3, r1
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	d055      	beq.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ec0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec1a:	d033      	beq.n	800ec84 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800ec1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec20:	d82c      	bhi.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec26:	d02f      	beq.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ec28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec2c:	d826      	bhi.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ec32:	d02b      	beq.n	800ec8c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800ec34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ec38:	d820      	bhi.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec3e:	d012      	beq.n	800ec66 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800ec40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec44:	d81a      	bhi.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d022      	beq.n	800ec90 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800ec4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec4e:	d115      	bne.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec54:	3308      	adds	r3, #8
 800ec56:	2100      	movs	r1, #0
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f001 fcc5 	bl	80105e8 <RCCEx_PLL2_Config>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ec64:	e015      	b.n	800ec92 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec6a:	3328      	adds	r3, #40	@ 0x28
 800ec6c:	2102      	movs	r1, #2
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f001 fd6c 	bl	801074c <RCCEx_PLL3_Config>
 800ec74:	4603      	mov	r3, r0
 800ec76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ec7a:	e00a      	b.n	800ec92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ec82:	e006      	b.n	800ec92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ec84:	bf00      	nop
 800ec86:	e004      	b.n	800ec92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ec88:	bf00      	nop
 800ec8a:	e002      	b.n	800ec92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ec8c:	bf00      	nop
 800ec8e:	e000      	b.n	800ec92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ec90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d10b      	bne.n	800ecb2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ec9a:	4b39      	ldr	r3, [pc, #228]	@ (800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ec9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800eca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ecaa:	4a35      	ldr	r2, [pc, #212]	@ (800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ecac:	430b      	orrs	r3, r1
 800ecae:	6553      	str	r3, [r2, #84]	@ 0x54
 800ecb0:	e003      	b.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ecba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ecc6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ecca:	2300      	movs	r3, #0
 800eccc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ecd0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	d058      	beq.n	800ed8c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ecda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ece2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ece6:	d033      	beq.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ece8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ecec:	d82c      	bhi.n	800ed48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ecee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ecf2:	d02f      	beq.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ecf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ecf8:	d826      	bhi.n	800ed48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ecfa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ecfe:	d02b      	beq.n	800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ed00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ed04:	d820      	bhi.n	800ed48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ed06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed0a:	d012      	beq.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ed0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed10:	d81a      	bhi.n	800ed48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d022      	beq.n	800ed5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ed16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed1a:	d115      	bne.n	800ed48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed20:	3308      	adds	r3, #8
 800ed22:	2100      	movs	r1, #0
 800ed24:	4618      	mov	r0, r3
 800ed26:	f001 fc5f 	bl	80105e8 <RCCEx_PLL2_Config>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ed30:	e015      	b.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ed32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed36:	3328      	adds	r3, #40	@ 0x28
 800ed38:	2102      	movs	r1, #2
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f001 fd06 	bl	801074c <RCCEx_PLL3_Config>
 800ed40:	4603      	mov	r3, r0
 800ed42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ed46:	e00a      	b.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed48:	2301      	movs	r3, #1
 800ed4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ed4e:	e006      	b.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ed50:	bf00      	nop
 800ed52:	e004      	b.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ed54:	bf00      	nop
 800ed56:	e002      	b.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ed58:	bf00      	nop
 800ed5a:	e000      	b.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ed5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d10e      	bne.n	800ed84 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ed66:	4b06      	ldr	r3, [pc, #24]	@ (800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ed68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed6a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ed6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ed76:	4a02      	ldr	r2, [pc, #8]	@ (800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ed78:	430b      	orrs	r3, r1
 800ed7a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ed7c:	e006      	b.n	800ed8c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ed7e:	bf00      	nop
 800ed80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ed88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ed8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ed98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eda2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800eda6:	460b      	mov	r3, r1
 800eda8:	4313      	orrs	r3, r2
 800edaa:	d055      	beq.n	800ee58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800edac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800edb4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800edb8:	d033      	beq.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800edba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800edbe:	d82c      	bhi.n	800ee1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800edc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800edc4:	d02f      	beq.n	800ee26 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800edc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800edca:	d826      	bhi.n	800ee1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800edcc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800edd0:	d02b      	beq.n	800ee2a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800edd2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800edd6:	d820      	bhi.n	800ee1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800edd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eddc:	d012      	beq.n	800ee04 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800edde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ede2:	d81a      	bhi.n	800ee1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d022      	beq.n	800ee2e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ede8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800edec:	d115      	bne.n	800ee1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800edee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edf2:	3308      	adds	r3, #8
 800edf4:	2100      	movs	r1, #0
 800edf6:	4618      	mov	r0, r3
 800edf8:	f001 fbf6 	bl	80105e8 <RCCEx_PLL2_Config>
 800edfc:	4603      	mov	r3, r0
 800edfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ee02:	e015      	b.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ee04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee08:	3328      	adds	r3, #40	@ 0x28
 800ee0a:	2102      	movs	r1, #2
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f001 fc9d 	bl	801074c <RCCEx_PLL3_Config>
 800ee12:	4603      	mov	r3, r0
 800ee14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ee18:	e00a      	b.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ee20:	e006      	b.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ee22:	bf00      	nop
 800ee24:	e004      	b.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ee26:	bf00      	nop
 800ee28:	e002      	b.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ee2a:	bf00      	nop
 800ee2c:	e000      	b.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ee2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d10b      	bne.n	800ee50 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ee38:	4ba0      	ldr	r3, [pc, #640]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ee3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee3c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ee40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee48:	4a9c      	ldr	r2, [pc, #624]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ee4a:	430b      	orrs	r3, r1
 800ee4c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ee4e:	e003      	b.n	800ee58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ee58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee60:	f002 0308 	and.w	r3, r2, #8
 800ee64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ee68:	2300      	movs	r3, #0
 800ee6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ee6e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ee72:	460b      	mov	r3, r1
 800ee74:	4313      	orrs	r3, r2
 800ee76:	d01e      	beq.n	800eeb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ee78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee84:	d10c      	bne.n	800eea0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ee86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee8a:	3328      	adds	r3, #40	@ 0x28
 800ee8c:	2102      	movs	r1, #2
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f001 fc5c 	bl	801074c <RCCEx_PLL3_Config>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d002      	beq.n	800eea0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800eea0:	4b86      	ldr	r3, [pc, #536]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eea4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800eea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeb0:	4a82      	ldr	r2, [pc, #520]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eeb2:	430b      	orrs	r3, r1
 800eeb4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800eeb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eebe:	f002 0310 	and.w	r3, r2, #16
 800eec2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eec6:	2300      	movs	r3, #0
 800eec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eecc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800eed0:	460b      	mov	r3, r1
 800eed2:	4313      	orrs	r3, r2
 800eed4:	d01e      	beq.n	800ef14 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800eed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eee2:	d10c      	bne.n	800eefe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800eee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eee8:	3328      	adds	r3, #40	@ 0x28
 800eeea:	2102      	movs	r1, #2
 800eeec:	4618      	mov	r0, r3
 800eeee:	f001 fc2d 	bl	801074c <RCCEx_PLL3_Config>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d002      	beq.n	800eefe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800eef8:	2301      	movs	r3, #1
 800eefa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800eefe:	4b6f      	ldr	r3, [pc, #444]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ef00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ef06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ef0e:	4a6b      	ldr	r2, [pc, #428]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ef10:	430b      	orrs	r3, r1
 800ef12:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ef14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ef20:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ef22:	2300      	movs	r3, #0
 800ef24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ef26:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	4313      	orrs	r3, r2
 800ef2e:	d03e      	beq.n	800efae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ef30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef3c:	d022      	beq.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ef3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef42:	d81b      	bhi.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d003      	beq.n	800ef50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ef48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef4c:	d00b      	beq.n	800ef66 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ef4e:	e015      	b.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ef50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef54:	3308      	adds	r3, #8
 800ef56:	2100      	movs	r1, #0
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f001 fb45 	bl	80105e8 <RCCEx_PLL2_Config>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ef64:	e00f      	b.n	800ef86 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef6a:	3328      	adds	r3, #40	@ 0x28
 800ef6c:	2102      	movs	r1, #2
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f001 fbec 	bl	801074c <RCCEx_PLL3_Config>
 800ef74:	4603      	mov	r3, r0
 800ef76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ef7a:	e004      	b.n	800ef86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ef82:	e000      	b.n	800ef86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ef84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d10b      	bne.n	800efa6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ef8e:	4b4b      	ldr	r3, [pc, #300]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ef90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ef96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef9e:	4a47      	ldr	r2, [pc, #284]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800efa0:	430b      	orrs	r3, r1
 800efa2:	6593      	str	r3, [r2, #88]	@ 0x58
 800efa4:	e003      	b.n	800efae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800efaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800efae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800efba:	673b      	str	r3, [r7, #112]	@ 0x70
 800efbc:	2300      	movs	r3, #0
 800efbe:	677b      	str	r3, [r7, #116]	@ 0x74
 800efc0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800efc4:	460b      	mov	r3, r1
 800efc6:	4313      	orrs	r3, r2
 800efc8:	d03b      	beq.n	800f042 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800efca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800efd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800efd6:	d01f      	beq.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800efd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800efdc:	d818      	bhi.n	800f010 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800efde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800efe2:	d003      	beq.n	800efec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800efe4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800efe8:	d007      	beq.n	800effa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800efea:	e011      	b.n	800f010 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800efec:	4b33      	ldr	r3, [pc, #204]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800efee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff0:	4a32      	ldr	r2, [pc, #200]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800eff8:	e00f      	b.n	800f01a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800effa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800effe:	3328      	adds	r3, #40	@ 0x28
 800f000:	2101      	movs	r1, #1
 800f002:	4618      	mov	r0, r3
 800f004:	f001 fba2 	bl	801074c <RCCEx_PLL3_Config>
 800f008:	4603      	mov	r3, r0
 800f00a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800f00e:	e004      	b.n	800f01a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f010:	2301      	movs	r3, #1
 800f012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f016:	e000      	b.n	800f01a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800f018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f01a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d10b      	bne.n	800f03a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f022:	4b26      	ldr	r3, [pc, #152]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f026:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f02e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f032:	4a22      	ldr	r2, [pc, #136]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f034:	430b      	orrs	r3, r1
 800f036:	6553      	str	r3, [r2, #84]	@ 0x54
 800f038:	e003      	b.n	800f042 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f03a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f03e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f04e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f050:	2300      	movs	r3, #0
 800f052:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f054:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f058:	460b      	mov	r3, r1
 800f05a:	4313      	orrs	r3, r2
 800f05c:	d034      	beq.n	800f0c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f064:	2b00      	cmp	r3, #0
 800f066:	d003      	beq.n	800f070 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800f068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f06c:	d007      	beq.n	800f07e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800f06e:	e011      	b.n	800f094 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f070:	4b12      	ldr	r3, [pc, #72]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f074:	4a11      	ldr	r2, [pc, #68]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f07a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f07c:	e00e      	b.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f082:	3308      	adds	r3, #8
 800f084:	2102      	movs	r1, #2
 800f086:	4618      	mov	r0, r3
 800f088:	f001 faae 	bl	80105e8 <RCCEx_PLL2_Config>
 800f08c:	4603      	mov	r3, r0
 800f08e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f092:	e003      	b.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800f094:	2301      	movs	r3, #1
 800f096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f09a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f09c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d10d      	bne.n	800f0c0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f0a4:	4b05      	ldr	r3, [pc, #20]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f0a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0b2:	4a02      	ldr	r2, [pc, #8]	@ (800f0bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f0b4:	430b      	orrs	r3, r1
 800f0b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f0b8:	e006      	b.n	800f0c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800f0ba:	bf00      	nop
 800f0bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f0d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	667b      	str	r3, [r7, #100]	@ 0x64
 800f0da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f0de:	460b      	mov	r3, r1
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	d00c      	beq.n	800f0fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0e8:	3328      	adds	r3, #40	@ 0x28
 800f0ea:	2102      	movs	r1, #2
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f001 fb2d 	bl	801074c <RCCEx_PLL3_Config>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d002      	beq.n	800f0fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f106:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f10a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f10c:	2300      	movs	r3, #0
 800f10e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f110:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800f114:	460b      	mov	r3, r1
 800f116:	4313      	orrs	r3, r2
 800f118:	d036      	beq.n	800f188 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f11e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f120:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f124:	d018      	beq.n	800f158 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800f126:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f12a:	d811      	bhi.n	800f150 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800f12c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f130:	d014      	beq.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800f132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f136:	d80b      	bhi.n	800f150 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d011      	beq.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800f13c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f140:	d106      	bne.n	800f150 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f142:	4bb7      	ldr	r3, [pc, #732]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f146:	4ab6      	ldr	r2, [pc, #728]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f14c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f14e:	e008      	b.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f150:	2301      	movs	r3, #1
 800f152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f156:	e004      	b.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800f158:	bf00      	nop
 800f15a:	e002      	b.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800f15c:	bf00      	nop
 800f15e:	e000      	b.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800f160:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f166:	2b00      	cmp	r3, #0
 800f168:	d10a      	bne.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f16a:	4bad      	ldr	r3, [pc, #692]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f16c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f16e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f178:	4aa9      	ldr	r2, [pc, #676]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f17a:	430b      	orrs	r3, r1
 800f17c:	6553      	str	r3, [r2, #84]	@ 0x54
 800f17e:	e003      	b.n	800f188 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f180:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f184:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f190:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800f194:	653b      	str	r3, [r7, #80]	@ 0x50
 800f196:	2300      	movs	r3, #0
 800f198:	657b      	str	r3, [r7, #84]	@ 0x54
 800f19a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800f19e:	460b      	mov	r3, r1
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	d009      	beq.n	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f1a4:	4b9e      	ldr	r3, [pc, #632]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f1a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1b2:	4a9b      	ldr	r2, [pc, #620]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f1b4:	430b      	orrs	r3, r1
 800f1b6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f1c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f1ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	d009      	beq.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f1d4:	4b92      	ldr	r3, [pc, #584]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1d8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800f1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f1e2:	4a8f      	ldr	r2, [pc, #572]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f1e4:	430b      	orrs	r3, r1
 800f1e6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f1e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800f1f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f1fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800f1fe:	460b      	mov	r3, r1
 800f200:	4313      	orrs	r3, r2
 800f202:	d00e      	beq.n	800f222 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f204:	4b86      	ldr	r3, [pc, #536]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f206:	691b      	ldr	r3, [r3, #16]
 800f208:	4a85      	ldr	r2, [pc, #532]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f20a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f20e:	6113      	str	r3, [r2, #16]
 800f210:	4b83      	ldr	r3, [pc, #524]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f212:	6919      	ldr	r1, [r3, #16]
 800f214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f218:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f21c:	4a80      	ldr	r2, [pc, #512]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f21e:	430b      	orrs	r3, r1
 800f220:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800f22e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f230:	2300      	movs	r3, #0
 800f232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f234:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800f238:	460b      	mov	r3, r1
 800f23a:	4313      	orrs	r3, r2
 800f23c:	d009      	beq.n	800f252 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f23e:	4b78      	ldr	r3, [pc, #480]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f242:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f24a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f24c:	4a74      	ldr	r2, [pc, #464]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f24e:	430b      	orrs	r3, r1
 800f250:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800f25e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f260:	2300      	movs	r3, #0
 800f262:	637b      	str	r3, [r7, #52]	@ 0x34
 800f264:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f268:	460b      	mov	r3, r1
 800f26a:	4313      	orrs	r3, r2
 800f26c:	d00a      	beq.n	800f284 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f26e:	4b6c      	ldr	r3, [pc, #432]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f272:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f27e:	4a68      	ldr	r2, [pc, #416]	@ (800f420 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f280:	430b      	orrs	r3, r1
 800f282:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28c:	2100      	movs	r1, #0
 800f28e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f290:	f003 0301 	and.w	r3, r3, #1
 800f294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f296:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f29a:	460b      	mov	r3, r1
 800f29c:	4313      	orrs	r3, r2
 800f29e:	d011      	beq.n	800f2c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2a4:	3308      	adds	r3, #8
 800f2a6:	2100      	movs	r1, #0
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f001 f99d 	bl	80105e8 <RCCEx_PLL2_Config>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f2b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d003      	beq.n	800f2c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f2c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f2c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	6239      	str	r1, [r7, #32]
 800f2d0:	f003 0302 	and.w	r3, r3, #2
 800f2d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f2da:	460b      	mov	r3, r1
 800f2dc:	4313      	orrs	r3, r2
 800f2de:	d011      	beq.n	800f304 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2e4:	3308      	adds	r3, #8
 800f2e6:	2101      	movs	r1, #1
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f001 f97d 	bl	80105e8 <RCCEx_PLL2_Config>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f2f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d003      	beq.n	800f304 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f300:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30c:	2100      	movs	r1, #0
 800f30e:	61b9      	str	r1, [r7, #24]
 800f310:	f003 0304 	and.w	r3, r3, #4
 800f314:	61fb      	str	r3, [r7, #28]
 800f316:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f31a:	460b      	mov	r3, r1
 800f31c:	4313      	orrs	r3, r2
 800f31e:	d011      	beq.n	800f344 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f324:	3308      	adds	r3, #8
 800f326:	2102      	movs	r1, #2
 800f328:	4618      	mov	r0, r3
 800f32a:	f001 f95d 	bl	80105e8 <RCCEx_PLL2_Config>
 800f32e:	4603      	mov	r3, r0
 800f330:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d003      	beq.n	800f344 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f33c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f340:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34c:	2100      	movs	r1, #0
 800f34e:	6139      	str	r1, [r7, #16]
 800f350:	f003 0308 	and.w	r3, r3, #8
 800f354:	617b      	str	r3, [r7, #20]
 800f356:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f35a:	460b      	mov	r3, r1
 800f35c:	4313      	orrs	r3, r2
 800f35e:	d011      	beq.n	800f384 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f364:	3328      	adds	r3, #40	@ 0x28
 800f366:	2100      	movs	r1, #0
 800f368:	4618      	mov	r0, r3
 800f36a:	f001 f9ef 	bl	801074c <RCCEx_PLL3_Config>
 800f36e:	4603      	mov	r3, r0
 800f370:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800f374:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d003      	beq.n	800f384 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f37c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f380:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38c:	2100      	movs	r1, #0
 800f38e:	60b9      	str	r1, [r7, #8]
 800f390:	f003 0310 	and.w	r3, r3, #16
 800f394:	60fb      	str	r3, [r7, #12]
 800f396:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f39a:	460b      	mov	r3, r1
 800f39c:	4313      	orrs	r3, r2
 800f39e:	d011      	beq.n	800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3a4:	3328      	adds	r3, #40	@ 0x28
 800f3a6:	2101      	movs	r1, #1
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f001 f9cf 	bl	801074c <RCCEx_PLL3_Config>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f3b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d003      	beq.n	800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f3c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3cc:	2100      	movs	r1, #0
 800f3ce:	6039      	str	r1, [r7, #0]
 800f3d0:	f003 0320 	and.w	r3, r3, #32
 800f3d4:	607b      	str	r3, [r7, #4]
 800f3d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f3da:	460b      	mov	r3, r1
 800f3dc:	4313      	orrs	r3, r2
 800f3de:	d011      	beq.n	800f404 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3e4:	3328      	adds	r3, #40	@ 0x28
 800f3e6:	2102      	movs	r1, #2
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f001 f9af 	bl	801074c <RCCEx_PLL3_Config>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f3f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d003      	beq.n	800f404 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f400:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800f404:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800f40c:	2300      	movs	r3, #0
 800f40e:	e000      	b.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800f410:	2301      	movs	r3, #1
}
 800f412:	4618      	mov	r0, r3
 800f414:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800f418:	46bd      	mov	sp, r7
 800f41a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f41e:	bf00      	nop
 800f420:	58024400 	.word	0x58024400

0800f424 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b090      	sub	sp, #64	@ 0x40
 800f428:	af00      	add	r7, sp, #0
 800f42a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f42e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f432:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800f436:	430b      	orrs	r3, r1
 800f438:	f040 8094 	bne.w	800f564 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f43c:	4b9b      	ldr	r3, [pc, #620]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f43e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f440:	f003 0307 	and.w	r3, r3, #7
 800f444:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f448:	2b04      	cmp	r3, #4
 800f44a:	f200 8087 	bhi.w	800f55c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f44e:	a201      	add	r2, pc, #4	@ (adr r2, 800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f454:	0800f469 	.word	0x0800f469
 800f458:	0800f491 	.word	0x0800f491
 800f45c:	0800f4b9 	.word	0x0800f4b9
 800f460:	0800f555 	.word	0x0800f555
 800f464:	0800f4e1 	.word	0x0800f4e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f468:	4b90      	ldr	r3, [pc, #576]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f470:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f474:	d108      	bne.n	800f488 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f47a:	4618      	mov	r0, r3
 800f47c:	f000 ff62 	bl	8010344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f484:	f000 bc93 	b.w	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f488:	2300      	movs	r3, #0
 800f48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f48c:	f000 bc8f 	b.w	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f490:	4b86      	ldr	r3, [pc, #536]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f498:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f49c:	d108      	bne.n	800f4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f49e:	f107 0318 	add.w	r3, r7, #24
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f000 fca6 	bl	800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f4a8:	69bb      	ldr	r3, [r7, #24]
 800f4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4ac:	f000 bc7f 	b.w	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4b4:	f000 bc7b 	b.w	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f4b8:	4b7c      	ldr	r3, [pc, #496]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f4c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4c4:	d108      	bne.n	800f4d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4c6:	f107 030c 	add.w	r3, r7, #12
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f000 fde6 	bl	801009c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4d4:	f000 bc6b 	b.w	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4dc:	f000 bc67 	b.w	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f4e0:	4b72      	ldr	r3, [pc, #456]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f4e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f4ea:	4b70      	ldr	r3, [pc, #448]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f003 0304 	and.w	r3, r3, #4
 800f4f2:	2b04      	cmp	r3, #4
 800f4f4:	d10c      	bne.n	800f510 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f4f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d109      	bne.n	800f510 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f4fc:	4b6b      	ldr	r3, [pc, #428]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	08db      	lsrs	r3, r3, #3
 800f502:	f003 0303 	and.w	r3, r3, #3
 800f506:	4a6a      	ldr	r2, [pc, #424]	@ (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f508:	fa22 f303 	lsr.w	r3, r2, r3
 800f50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f50e:	e01f      	b.n	800f550 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f510:	4b66      	ldr	r3, [pc, #408]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f51c:	d106      	bne.n	800f52c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f51e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f524:	d102      	bne.n	800f52c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f526:	4b63      	ldr	r3, [pc, #396]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f528:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f52a:	e011      	b.n	800f550 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f52c:	4b5f      	ldr	r3, [pc, #380]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f538:	d106      	bne.n	800f548 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f53a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f53c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f540:	d102      	bne.n	800f548 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f542:	4b5d      	ldr	r3, [pc, #372]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f546:	e003      	b.n	800f550 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f548:	2300      	movs	r3, #0
 800f54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f54c:	f000 bc2f 	b.w	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f550:	f000 bc2d 	b.w	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f554:	4b59      	ldr	r3, [pc, #356]	@ (800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f558:	f000 bc29 	b.w	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800f55c:	2300      	movs	r3, #0
 800f55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f560:	f000 bc25 	b.w	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f564:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f568:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800f56c:	430b      	orrs	r3, r1
 800f56e:	f040 80a7 	bne.w	800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f572:	4b4e      	ldr	r3, [pc, #312]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f576:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800f57a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f57e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f582:	d054      	beq.n	800f62e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800f584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f586:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f58a:	f200 808b 	bhi.w	800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f590:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f594:	f000 8083 	beq.w	800f69e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800f598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f59a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f59e:	f200 8081 	bhi.w	800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f5a8:	d02f      	beq.n	800f60a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f5b0:	d878      	bhi.n	800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d004      	beq.n	800f5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800f5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f5be:	d012      	beq.n	800f5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800f5c0:	e070      	b.n	800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f5c2:	4b3a      	ldr	r3, [pc, #232]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f5ce:	d107      	bne.n	800f5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f5d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f000 feb5 	bl	8010344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5de:	e3e6      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5e4:	e3e3      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f5e6:	4b31      	ldr	r3, [pc, #196]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f5ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f5f2:	d107      	bne.n	800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5f4:	f107 0318 	add.w	r3, r7, #24
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f000 fbfb 	bl	800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f602:	e3d4      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f604:	2300      	movs	r3, #0
 800f606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f608:	e3d1      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f60a:	4b28      	ldr	r3, [pc, #160]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f616:	d107      	bne.n	800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f618:	f107 030c 	add.w	r3, r7, #12
 800f61c:	4618      	mov	r0, r3
 800f61e:	f000 fd3d 	bl	801009c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f626:	e3c2      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f628:	2300      	movs	r3, #0
 800f62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f62c:	e3bf      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f62e:	4b1f      	ldr	r3, [pc, #124]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f632:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f636:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f638:	4b1c      	ldr	r3, [pc, #112]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f003 0304 	and.w	r3, r3, #4
 800f640:	2b04      	cmp	r3, #4
 800f642:	d10c      	bne.n	800f65e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800f644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f646:	2b00      	cmp	r3, #0
 800f648:	d109      	bne.n	800f65e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f64a:	4b18      	ldr	r3, [pc, #96]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	08db      	lsrs	r3, r3, #3
 800f650:	f003 0303 	and.w	r3, r3, #3
 800f654:	4a16      	ldr	r2, [pc, #88]	@ (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f656:	fa22 f303 	lsr.w	r3, r2, r3
 800f65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f65c:	e01e      	b.n	800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f65e:	4b13      	ldr	r3, [pc, #76]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f66a:	d106      	bne.n	800f67a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800f66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f66e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f672:	d102      	bne.n	800f67a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f674:	4b0f      	ldr	r3, [pc, #60]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f678:	e010      	b.n	800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f67a:	4b0c      	ldr	r3, [pc, #48]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f682:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f686:	d106      	bne.n	800f696 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800f688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f68a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f68e:	d102      	bne.n	800f696 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f690:	4b09      	ldr	r3, [pc, #36]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f694:	e002      	b.n	800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f696:	2300      	movs	r3, #0
 800f698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f69a:	e388      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f69c:	e387      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f69e:	4b07      	ldr	r3, [pc, #28]	@ (800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6a2:	e384      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6a8:	e381      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f6aa:	bf00      	nop
 800f6ac:	58024400 	.word	0x58024400
 800f6b0:	03d09000 	.word	0x03d09000
 800f6b4:	003d0900 	.word	0x003d0900
 800f6b8:	016e3600 	.word	0x016e3600
 800f6bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f6c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6c4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f6c8:	430b      	orrs	r3, r1
 800f6ca:	f040 809c 	bne.w	800f806 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f6ce:	4b9e      	ldr	r3, [pc, #632]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f6d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6d2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800f6d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f6de:	d054      	beq.n	800f78a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800f6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f6e6:	f200 808b 	bhi.w	800f800 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f6f0:	f000 8083 	beq.w	800f7fa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800f6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f6fa:	f200 8081 	bhi.w	800f800 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f700:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f704:	d02f      	beq.n	800f766 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800f706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f70c:	d878      	bhi.n	800f800 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f710:	2b00      	cmp	r3, #0
 800f712:	d004      	beq.n	800f71e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800f714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f716:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f71a:	d012      	beq.n	800f742 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f71c:	e070      	b.n	800f800 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f71e:	4b8a      	ldr	r3, [pc, #552]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f726:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f72a:	d107      	bne.n	800f73c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f72c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f730:	4618      	mov	r0, r3
 800f732:	f000 fe07 	bl	8010344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f73a:	e338      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f73c:	2300      	movs	r3, #0
 800f73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f740:	e335      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f742:	4b81      	ldr	r3, [pc, #516]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f74a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f74e:	d107      	bne.n	800f760 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f750:	f107 0318 	add.w	r3, r7, #24
 800f754:	4618      	mov	r0, r3
 800f756:	f000 fb4d 	bl	800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f75e:	e326      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f760:	2300      	movs	r3, #0
 800f762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f764:	e323      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f766:	4b78      	ldr	r3, [pc, #480]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f76e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f772:	d107      	bne.n	800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f774:	f107 030c 	add.w	r3, r7, #12
 800f778:	4618      	mov	r0, r3
 800f77a:	f000 fc8f 	bl	801009c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f782:	e314      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f784:	2300      	movs	r3, #0
 800f786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f788:	e311      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f78a:	4b6f      	ldr	r3, [pc, #444]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f78c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f78e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f792:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f794:	4b6c      	ldr	r3, [pc, #432]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	f003 0304 	and.w	r3, r3, #4
 800f79c:	2b04      	cmp	r3, #4
 800f79e:	d10c      	bne.n	800f7ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800f7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d109      	bne.n	800f7ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f7a6:	4b68      	ldr	r3, [pc, #416]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	08db      	lsrs	r3, r3, #3
 800f7ac:	f003 0303 	and.w	r3, r3, #3
 800f7b0:	4a66      	ldr	r2, [pc, #408]	@ (800f94c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f7b2:	fa22 f303 	lsr.w	r3, r2, r3
 800f7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7b8:	e01e      	b.n	800f7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f7ba:	4b63      	ldr	r3, [pc, #396]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f7c6:	d106      	bne.n	800f7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f7c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f7ce:	d102      	bne.n	800f7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f7d0:	4b5f      	ldr	r3, [pc, #380]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7d4:	e010      	b.n	800f7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f7d6:	4b5c      	ldr	r3, [pc, #368]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f7de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f7e2:	d106      	bne.n	800f7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800f7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f7ea:	d102      	bne.n	800f7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f7ec:	4b59      	ldr	r3, [pc, #356]	@ (800f954 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7f0:	e002      	b.n	800f7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f7f6:	e2da      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f7f8:	e2d9      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f7fa:	4b57      	ldr	r3, [pc, #348]	@ (800f958 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f7fe:	e2d6      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f800:	2300      	movs	r3, #0
 800f802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f804:	e2d3      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f80a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f80e:	430b      	orrs	r3, r1
 800f810:	f040 80a7 	bne.w	800f962 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f814:	4b4c      	ldr	r3, [pc, #304]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f818:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f81c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f820:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f824:	d055      	beq.n	800f8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800f826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f828:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f82c:	f200 8096 	bhi.w	800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f832:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f836:	f000 8084 	beq.w	800f942 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800f83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f83c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f840:	f200 808c 	bhi.w	800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f84a:	d030      	beq.n	800f8ae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800f84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f84e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f852:	f200 8083 	bhi.w	800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d004      	beq.n	800f866 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800f85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f85e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f862:	d012      	beq.n	800f88a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800f864:	e07a      	b.n	800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f866:	4b38      	ldr	r3, [pc, #224]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f86e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f872:	d107      	bne.n	800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f878:	4618      	mov	r0, r3
 800f87a:	f000 fd63 	bl	8010344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f882:	e294      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f884:	2300      	movs	r3, #0
 800f886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f888:	e291      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f88a:	4b2f      	ldr	r3, [pc, #188]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f892:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f896:	d107      	bne.n	800f8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f898:	f107 0318 	add.w	r3, r7, #24
 800f89c:	4618      	mov	r0, r3
 800f89e:	f000 faa9 	bl	800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f8a2:	69bb      	ldr	r3, [r7, #24]
 800f8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8a6:	e282      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8ac:	e27f      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f8ae:	4b26      	ldr	r3, [pc, #152]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f8b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f8ba:	d107      	bne.n	800f8cc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8bc:	f107 030c 	add.w	r3, r7, #12
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f000 fbeb 	bl	801009c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8ca:	e270      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8d0:	e26d      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f8d2:	4b1d      	ldr	r3, [pc, #116]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f8d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f8da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f8dc:	4b1a      	ldr	r3, [pc, #104]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f003 0304 	and.w	r3, r3, #4
 800f8e4:	2b04      	cmp	r3, #4
 800f8e6:	d10c      	bne.n	800f902 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800f8e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d109      	bne.n	800f902 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f8ee:	4b16      	ldr	r3, [pc, #88]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	08db      	lsrs	r3, r3, #3
 800f8f4:	f003 0303 	and.w	r3, r3, #3
 800f8f8:	4a14      	ldr	r2, [pc, #80]	@ (800f94c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800f8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f900:	e01e      	b.n	800f940 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f902:	4b11      	ldr	r3, [pc, #68]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f90a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f90e:	d106      	bne.n	800f91e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f916:	d102      	bne.n	800f91e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f918:	4b0d      	ldr	r3, [pc, #52]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f91c:	e010      	b.n	800f940 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f91e:	4b0a      	ldr	r3, [pc, #40]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f92a:	d106      	bne.n	800f93a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800f92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f92e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f932:	d102      	bne.n	800f93a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f934:	4b07      	ldr	r3, [pc, #28]	@ (800f954 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f938:	e002      	b.n	800f940 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f93a:	2300      	movs	r3, #0
 800f93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f93e:	e236      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f940:	e235      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f942:	4b05      	ldr	r3, [pc, #20]	@ (800f958 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f946:	e232      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f948:	58024400 	.word	0x58024400
 800f94c:	03d09000 	.word	0x03d09000
 800f950:	003d0900 	.word	0x003d0900
 800f954:	016e3600 	.word	0x016e3600
 800f958:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800f95c:	2300      	movs	r3, #0
 800f95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f960:	e225      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f962:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f966:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f96a:	430b      	orrs	r3, r1
 800f96c:	f040 8085 	bne.w	800fa7a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f970:	4b9c      	ldr	r3, [pc, #624]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f974:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f978:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800f97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f97c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f980:	d06b      	beq.n	800fa5a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800f982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f988:	d874      	bhi.n	800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f98c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f990:	d056      	beq.n	800fa40 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800f992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f994:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f998:	d86c      	bhi.n	800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f99c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f9a0:	d03b      	beq.n	800fa1a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f9a8:	d864      	bhi.n	800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f9b0:	d021      	beq.n	800f9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f9b8:	d85c      	bhi.n	800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d004      	beq.n	800f9ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800f9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f9c6:	d004      	beq.n	800f9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800f9c8:	e054      	b.n	800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f9ca:	f7fe fb5f 	bl	800e08c <HAL_RCC_GetPCLK1Freq>
 800f9ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f9d0:	e1ed      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f9d2:	4b84      	ldr	r3, [pc, #528]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f9da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f9de:	d107      	bne.n	800f9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9e0:	f107 0318 	add.w	r3, r7, #24
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f000 fa05 	bl	800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9ee:	e1de      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9f4:	e1db      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f9f6:	4b7b      	ldr	r3, [pc, #492]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f9fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa02:	d107      	bne.n	800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa04:	f107 030c 	add.w	r3, r7, #12
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f000 fb47 	bl	801009c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa12:	e1cc      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa14:	2300      	movs	r3, #0
 800fa16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa18:	e1c9      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fa1a:	4b72      	ldr	r3, [pc, #456]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f003 0304 	and.w	r3, r3, #4
 800fa22:	2b04      	cmp	r3, #4
 800fa24:	d109      	bne.n	800fa3a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fa26:	4b6f      	ldr	r3, [pc, #444]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	08db      	lsrs	r3, r3, #3
 800fa2c:	f003 0303 	and.w	r3, r3, #3
 800fa30:	4a6d      	ldr	r2, [pc, #436]	@ (800fbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800fa32:	fa22 f303 	lsr.w	r3, r2, r3
 800fa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa38:	e1b9      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa3e:	e1b6      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fa40:	4b68      	ldr	r3, [pc, #416]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa4c:	d102      	bne.n	800fa54 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800fa4e:	4b67      	ldr	r3, [pc, #412]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800fa50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa52:	e1ac      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa54:	2300      	movs	r3, #0
 800fa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa58:	e1a9      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fa5a:	4b62      	ldr	r3, [pc, #392]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fa66:	d102      	bne.n	800fa6e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800fa68:	4b61      	ldr	r3, [pc, #388]	@ (800fbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800fa6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa6c:	e19f      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa72:	e19c      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800fa74:	2300      	movs	r3, #0
 800fa76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa78:	e199      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800fa7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa7e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800fa82:	430b      	orrs	r3, r1
 800fa84:	d173      	bne.n	800fb6e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800fa86:	4b57      	ldr	r3, [pc, #348]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800fa8e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fa90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fa96:	d02f      	beq.n	800faf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800fa98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fa9e:	d863      	bhi.n	800fb68 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800faa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d004      	beq.n	800fab0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800faa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800faac:	d012      	beq.n	800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800faae:	e05b      	b.n	800fb68 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fab0:	4b4c      	ldr	r3, [pc, #304]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fab8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fabc:	d107      	bne.n	800face <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fabe:	f107 0318 	add.w	r3, r7, #24
 800fac2:	4618      	mov	r0, r3
 800fac4:	f000 f996 	bl	800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fac8:	69bb      	ldr	r3, [r7, #24]
 800faca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800facc:	e16f      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800face:	2300      	movs	r3, #0
 800fad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fad2:	e16c      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fad4:	4b43      	ldr	r3, [pc, #268]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fadc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fae0:	d107      	bne.n	800faf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fae2:	f107 030c 	add.w	r3, r7, #12
 800fae6:	4618      	mov	r0, r3
 800fae8:	f000 fad8 	bl	801009c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800faf0:	e15d      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800faf2:	2300      	movs	r3, #0
 800faf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800faf6:	e15a      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800faf8:	4b3a      	ldr	r3, [pc, #232]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fafa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fafc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fb00:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fb02:	4b38      	ldr	r3, [pc, #224]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f003 0304 	and.w	r3, r3, #4
 800fb0a:	2b04      	cmp	r3, #4
 800fb0c:	d10c      	bne.n	800fb28 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800fb0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d109      	bne.n	800fb28 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fb14:	4b33      	ldr	r3, [pc, #204]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	08db      	lsrs	r3, r3, #3
 800fb1a:	f003 0303 	and.w	r3, r3, #3
 800fb1e:	4a32      	ldr	r2, [pc, #200]	@ (800fbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800fb20:	fa22 f303 	lsr.w	r3, r2, r3
 800fb24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb26:	e01e      	b.n	800fb66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fb28:	4b2e      	ldr	r3, [pc, #184]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb34:	d106      	bne.n	800fb44 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800fb36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fb3c:	d102      	bne.n	800fb44 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fb3e:	4b2b      	ldr	r3, [pc, #172]	@ (800fbec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800fb40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb42:	e010      	b.n	800fb66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fb44:	4b27      	ldr	r3, [pc, #156]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb50:	d106      	bne.n	800fb60 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800fb52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb58:	d102      	bne.n	800fb60 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fb5a:	4b25      	ldr	r3, [pc, #148]	@ (800fbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800fb5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb5e:	e002      	b.n	800fb66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fb60:	2300      	movs	r3, #0
 800fb62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fb64:	e123      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fb66:	e122      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb6c:	e11f      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800fb6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb72:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800fb76:	430b      	orrs	r3, r1
 800fb78:	d13c      	bne.n	800fbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800fb7a:	4b1a      	ldr	r3, [pc, #104]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fb82:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fb84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d004      	beq.n	800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800fb8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb90:	d012      	beq.n	800fbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800fb92:	e023      	b.n	800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fb94:	4b13      	ldr	r3, [pc, #76]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fb9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fba0:	d107      	bne.n	800fbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fba6:	4618      	mov	r0, r3
 800fba8:	f000 fbcc 	bl	8010344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fbb0:	e0fd      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbb6:	e0fa      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fbb8:	4b0a      	ldr	r3, [pc, #40]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fbc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fbc4:	d107      	bne.n	800fbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbc6:	f107 0318 	add.w	r3, r7, #24
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f000 f912 	bl	800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800fbd0:	6a3b      	ldr	r3, [r7, #32]
 800fbd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fbd4:	e0eb      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbda:	e0e8      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbe0:	e0e5      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fbe2:	bf00      	nop
 800fbe4:	58024400 	.word	0x58024400
 800fbe8:	03d09000 	.word	0x03d09000
 800fbec:	003d0900 	.word	0x003d0900
 800fbf0:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800fbf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbf8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800fbfc:	430b      	orrs	r3, r1
 800fbfe:	f040 8085 	bne.w	800fd0c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800fc02:	4b6d      	ldr	r3, [pc, #436]	@ (800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fc04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc06:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800fc0a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fc12:	d06b      	beq.n	800fcec <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800fc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fc1a:	d874      	bhi.n	800fd06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc22:	d056      	beq.n	800fcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800fc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc2a:	d86c      	bhi.n	800fd06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fc2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc32:	d03b      	beq.n	800fcac <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800fc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc3a:	d864      	bhi.n	800fd06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc42:	d021      	beq.n	800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800fc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc4a:	d85c      	bhi.n	800fd06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d004      	beq.n	800fc5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800fc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc58:	d004      	beq.n	800fc64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800fc5a:	e054      	b.n	800fd06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800fc5c:	f000 f8b4 	bl	800fdc8 <HAL_RCCEx_GetD3PCLK1Freq>
 800fc60:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fc62:	e0a4      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fc64:	4b54      	ldr	r3, [pc, #336]	@ (800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fc6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fc70:	d107      	bne.n	800fc82 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc72:	f107 0318 	add.w	r3, r7, #24
 800fc76:	4618      	mov	r0, r3
 800fc78:	f000 f8bc 	bl	800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc80:	e095      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fc82:	2300      	movs	r3, #0
 800fc84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc86:	e092      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fc88:	4b4b      	ldr	r3, [pc, #300]	@ (800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fc90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc94:	d107      	bne.n	800fca6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc96:	f107 030c 	add.w	r3, r7, #12
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f000 f9fe 	bl	801009c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fca4:	e083      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fca6:	2300      	movs	r3, #0
 800fca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcaa:	e080      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fcac:	4b42      	ldr	r3, [pc, #264]	@ (800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	f003 0304 	and.w	r3, r3, #4
 800fcb4:	2b04      	cmp	r3, #4
 800fcb6:	d109      	bne.n	800fccc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fcb8:	4b3f      	ldr	r3, [pc, #252]	@ (800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	08db      	lsrs	r3, r3, #3
 800fcbe:	f003 0303 	and.w	r3, r3, #3
 800fcc2:	4a3e      	ldr	r2, [pc, #248]	@ (800fdbc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800fcc4:	fa22 f303 	lsr.w	r3, r2, r3
 800fcc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcca:	e070      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fccc:	2300      	movs	r3, #0
 800fcce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcd0:	e06d      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fcd2:	4b39      	ldr	r3, [pc, #228]	@ (800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fcda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fcde:	d102      	bne.n	800fce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800fce0:	4b37      	ldr	r3, [pc, #220]	@ (800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800fce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fce4:	e063      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fce6:	2300      	movs	r3, #0
 800fce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcea:	e060      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fcec:	4b32      	ldr	r3, [pc, #200]	@ (800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fcf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fcf8:	d102      	bne.n	800fd00 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800fcfa:	4b32      	ldr	r3, [pc, #200]	@ (800fdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800fcfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcfe:	e056      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd00:	2300      	movs	r3, #0
 800fd02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd04:	e053      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800fd06:	2300      	movs	r3, #0
 800fd08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd0a:	e050      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800fd0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd10:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800fd14:	430b      	orrs	r3, r1
 800fd16:	d148      	bne.n	800fdaa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800fd18:	4b27      	ldr	r3, [pc, #156]	@ (800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fd20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd28:	d02a      	beq.n	800fd80 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800fd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd30:	d838      	bhi.n	800fda4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800fd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d004      	beq.n	800fd42 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800fd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd3e:	d00d      	beq.n	800fd5c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800fd40:	e030      	b.n	800fda4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fd42:	4b1d      	ldr	r3, [pc, #116]	@ (800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fd4e:	d102      	bne.n	800fd56 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800fd50:	4b1c      	ldr	r3, [pc, #112]	@ (800fdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800fd52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd54:	e02b      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd56:	2300      	movs	r3, #0
 800fd58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd5a:	e028      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fd5c:	4b16      	ldr	r3, [pc, #88]	@ (800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fd68:	d107      	bne.n	800fd7a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f000 fae8 	bl	8010344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd78:	e019      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd7e:	e016      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fd80:	4b0d      	ldr	r3, [pc, #52]	@ (800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fd88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fd8c:	d107      	bne.n	800fd9e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd8e:	f107 0318 	add.w	r3, r7, #24
 800fd92:	4618      	mov	r0, r3
 800fd94:	f000 f82e 	bl	800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd9c:	e007      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fda2:	e004      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800fda4:	2300      	movs	r3, #0
 800fda6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fda8:	e001      	b.n	800fdae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800fdae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3740      	adds	r7, #64	@ 0x40
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	58024400 	.word	0x58024400
 800fdbc:	03d09000 	.word	0x03d09000
 800fdc0:	003d0900 	.word	0x003d0900
 800fdc4:	016e3600 	.word	0x016e3600

0800fdc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fdcc:	f7fe f92e 	bl	800e02c <HAL_RCC_GetHCLKFreq>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	4b06      	ldr	r3, [pc, #24]	@ (800fdec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fdd4:	6a1b      	ldr	r3, [r3, #32]
 800fdd6:	091b      	lsrs	r3, r3, #4
 800fdd8:	f003 0307 	and.w	r3, r3, #7
 800fddc:	4904      	ldr	r1, [pc, #16]	@ (800fdf0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fdde:	5ccb      	ldrb	r3, [r1, r3]
 800fde0:	f003 031f 	and.w	r3, r3, #31
 800fde4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	bd80      	pop	{r7, pc}
 800fdec:	58024400 	.word	0x58024400
 800fdf0:	0801da08 	.word	0x0801da08

0800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b089      	sub	sp, #36	@ 0x24
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fdfc:	4ba1      	ldr	r3, [pc, #644]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fdfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe00:	f003 0303 	and.w	r3, r3, #3
 800fe04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fe06:	4b9f      	ldr	r3, [pc, #636]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe0a:	0b1b      	lsrs	r3, r3, #12
 800fe0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fe12:	4b9c      	ldr	r3, [pc, #624]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe16:	091b      	lsrs	r3, r3, #4
 800fe18:	f003 0301 	and.w	r3, r3, #1
 800fe1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fe1e:	4b99      	ldr	r3, [pc, #612]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe22:	08db      	lsrs	r3, r3, #3
 800fe24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe28:	693a      	ldr	r2, [r7, #16]
 800fe2a:	fb02 f303 	mul.w	r3, r2, r3
 800fe2e:	ee07 3a90 	vmov	s15, r3
 800fe32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	f000 8111 	beq.w	8010064 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fe42:	69bb      	ldr	r3, [r7, #24]
 800fe44:	2b02      	cmp	r3, #2
 800fe46:	f000 8083 	beq.w	800ff50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fe4a:	69bb      	ldr	r3, [r7, #24]
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	f200 80a1 	bhi.w	800ff94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fe52:	69bb      	ldr	r3, [r7, #24]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d003      	beq.n	800fe60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d056      	beq.n	800ff0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fe5e:	e099      	b.n	800ff94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe60:	4b88      	ldr	r3, [pc, #544]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f003 0320 	and.w	r3, r3, #32
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d02d      	beq.n	800fec8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe6c:	4b85      	ldr	r3, [pc, #532]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	08db      	lsrs	r3, r3, #3
 800fe72:	f003 0303 	and.w	r3, r3, #3
 800fe76:	4a84      	ldr	r2, [pc, #528]	@ (8010088 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fe78:	fa22 f303 	lsr.w	r3, r2, r3
 800fe7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	ee07 3a90 	vmov	s15, r3
 800fe84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	ee07 3a90 	vmov	s15, r3
 800fe8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe96:	4b7b      	ldr	r3, [pc, #492]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe9e:	ee07 3a90 	vmov	s15, r3
 800fea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fea6:	ed97 6a03 	vldr	s12, [r7, #12]
 800feaa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801008c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800feae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800feb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800feba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800febe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fec2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fec6:	e087      	b.n	800ffd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	ee07 3a90 	vmov	s15, r3
 800fece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fed2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010090 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800feda:	4b6a      	ldr	r3, [pc, #424]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fedc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fee2:	ee07 3a90 	vmov	s15, r3
 800fee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800feea:	ed97 6a03 	vldr	s12, [r7, #12]
 800feee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801008c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fefa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fefe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff0a:	e065      	b.n	800ffd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	ee07 3a90 	vmov	s15, r3
 800ff12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ff1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff1e:	4b59      	ldr	r3, [pc, #356]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff26:	ee07 3a90 	vmov	s15, r3
 800ff2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801008c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff4e:	e043      	b.n	800ffd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	ee07 3a90 	vmov	s15, r3
 800ff56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ff5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff62:	4b48      	ldr	r3, [pc, #288]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff6a:	ee07 3a90 	vmov	s15, r3
 800ff6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801008c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff92:	e021      	b.n	800ffd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	ee07 3a90 	vmov	s15, r3
 800ff9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ffa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffa6:	4b37      	ldr	r3, [pc, #220]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffae:	ee07 3a90 	vmov	s15, r3
 800ffb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ffba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801008c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ffbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ffca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ffd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ffd8:	4b2a      	ldr	r3, [pc, #168]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffdc:	0a5b      	lsrs	r3, r3, #9
 800ffde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffe2:	ee07 3a90 	vmov	s15, r3
 800ffe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ffee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fff2:	edd7 6a07 	vldr	s13, [r7, #28]
 800fff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fffe:	ee17 2a90 	vmov	r2, s15
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010006:	4b1f      	ldr	r3, [pc, #124]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801000a:	0c1b      	lsrs	r3, r3, #16
 801000c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010010:	ee07 3a90 	vmov	s15, r3
 8010014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010018:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801001c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010020:	edd7 6a07 	vldr	s13, [r7, #28]
 8010024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801002c:	ee17 2a90 	vmov	r2, s15
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8010034:	4b13      	ldr	r3, [pc, #76]	@ (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010038:	0e1b      	lsrs	r3, r3, #24
 801003a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801003e:	ee07 3a90 	vmov	s15, r3
 8010042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010046:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801004a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801004e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801005a:	ee17 2a90 	vmov	r2, s15
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010062:	e008      	b.n	8010076 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2200      	movs	r2, #0
 801006e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	609a      	str	r2, [r3, #8]
}
 8010076:	bf00      	nop
 8010078:	3724      	adds	r7, #36	@ 0x24
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	58024400 	.word	0x58024400
 8010088:	03d09000 	.word	0x03d09000
 801008c:	46000000 	.word	0x46000000
 8010090:	4c742400 	.word	0x4c742400
 8010094:	4a742400 	.word	0x4a742400
 8010098:	4bb71b00 	.word	0x4bb71b00

0801009c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801009c:	b480      	push	{r7}
 801009e:	b089      	sub	sp, #36	@ 0x24
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80100a4:	4ba1      	ldr	r3, [pc, #644]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100a8:	f003 0303 	and.w	r3, r3, #3
 80100ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80100ae:	4b9f      	ldr	r3, [pc, #636]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100b2:	0d1b      	lsrs	r3, r3, #20
 80100b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80100b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80100ba:	4b9c      	ldr	r3, [pc, #624]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100be:	0a1b      	lsrs	r3, r3, #8
 80100c0:	f003 0301 	and.w	r3, r3, #1
 80100c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80100c6:	4b99      	ldr	r3, [pc, #612]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100ca:	08db      	lsrs	r3, r3, #3
 80100cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80100d0:	693a      	ldr	r2, [r7, #16]
 80100d2:	fb02 f303 	mul.w	r3, r2, r3
 80100d6:	ee07 3a90 	vmov	s15, r3
 80100da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	f000 8111 	beq.w	801030c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80100ea:	69bb      	ldr	r3, [r7, #24]
 80100ec:	2b02      	cmp	r3, #2
 80100ee:	f000 8083 	beq.w	80101f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	2b02      	cmp	r3, #2
 80100f6:	f200 80a1 	bhi.w	801023c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80100fa:	69bb      	ldr	r3, [r7, #24]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d003      	beq.n	8010108 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	2b01      	cmp	r3, #1
 8010104:	d056      	beq.n	80101b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010106:	e099      	b.n	801023c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010108:	4b88      	ldr	r3, [pc, #544]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f003 0320 	and.w	r3, r3, #32
 8010110:	2b00      	cmp	r3, #0
 8010112:	d02d      	beq.n	8010170 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010114:	4b85      	ldr	r3, [pc, #532]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	08db      	lsrs	r3, r3, #3
 801011a:	f003 0303 	and.w	r3, r3, #3
 801011e:	4a84      	ldr	r2, [pc, #528]	@ (8010330 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010120:	fa22 f303 	lsr.w	r3, r2, r3
 8010124:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	ee07 3a90 	vmov	s15, r3
 801012c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	ee07 3a90 	vmov	s15, r3
 8010136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801013a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801013e:	4b7b      	ldr	r3, [pc, #492]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010146:	ee07 3a90 	vmov	s15, r3
 801014a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801014e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010152:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801015a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801015e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010166:	ee67 7a27 	vmul.f32	s15, s14, s15
 801016a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801016e:	e087      	b.n	8010280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	ee07 3a90 	vmov	s15, r3
 8010176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801017a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010338 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801017e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010182:	4b6a      	ldr	r3, [pc, #424]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801018a:	ee07 3a90 	vmov	s15, r3
 801018e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010192:	ed97 6a03 	vldr	s12, [r7, #12]
 8010196:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801019a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801019e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80101a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80101b2:	e065      	b.n	8010280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	ee07 3a90 	vmov	s15, r3
 80101ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801033c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80101c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101c6:	4b59      	ldr	r3, [pc, #356]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101ce:	ee07 3a90 	vmov	s15, r3
 80101d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80101da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80101de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80101ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80101f6:	e043      	b.n	8010280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	ee07 3a90 	vmov	s15, r3
 80101fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010202:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801020a:	4b48      	ldr	r3, [pc, #288]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801020c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801020e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010212:	ee07 3a90 	vmov	s15, r3
 8010216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801021a:	ed97 6a03 	vldr	s12, [r7, #12]
 801021e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801022a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801022e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801023a:	e021      	b.n	8010280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	ee07 3a90 	vmov	s15, r3
 8010242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010246:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801033c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801024a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801024e:	4b37      	ldr	r3, [pc, #220]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010256:	ee07 3a90 	vmov	s15, r3
 801025a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801025e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010262:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801026a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801026e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010276:	ee67 7a27 	vmul.f32	s15, s14, s15
 801027a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801027e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010280:	4b2a      	ldr	r3, [pc, #168]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010284:	0a5b      	lsrs	r3, r3, #9
 8010286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801028a:	ee07 3a90 	vmov	s15, r3
 801028e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010292:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010296:	ee37 7a87 	vadd.f32	s14, s15, s14
 801029a:	edd7 6a07 	vldr	s13, [r7, #28]
 801029e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102a6:	ee17 2a90 	vmov	r2, s15
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80102ae:	4b1f      	ldr	r3, [pc, #124]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102b2:	0c1b      	lsrs	r3, r3, #16
 80102b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102b8:	ee07 3a90 	vmov	s15, r3
 80102bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80102c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80102cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102d4:	ee17 2a90 	vmov	r2, s15
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80102dc:	4b13      	ldr	r3, [pc, #76]	@ (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102e0:	0e1b      	lsrs	r3, r3, #24
 80102e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102e6:	ee07 3a90 	vmov	s15, r3
 80102ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80102f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80102fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010302:	ee17 2a90 	vmov	r2, s15
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801030a:	e008      	b.n	801031e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2200      	movs	r2, #0
 8010310:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2200      	movs	r2, #0
 801031c:	609a      	str	r2, [r3, #8]
}
 801031e:	bf00      	nop
 8010320:	3724      	adds	r7, #36	@ 0x24
 8010322:	46bd      	mov	sp, r7
 8010324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010328:	4770      	bx	lr
 801032a:	bf00      	nop
 801032c:	58024400 	.word	0x58024400
 8010330:	03d09000 	.word	0x03d09000
 8010334:	46000000 	.word	0x46000000
 8010338:	4c742400 	.word	0x4c742400
 801033c:	4a742400 	.word	0x4a742400
 8010340:	4bb71b00 	.word	0x4bb71b00

08010344 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010344:	b480      	push	{r7}
 8010346:	b089      	sub	sp, #36	@ 0x24
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801034c:	4ba0      	ldr	r3, [pc, #640]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801034e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010350:	f003 0303 	and.w	r3, r3, #3
 8010354:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010356:	4b9e      	ldr	r3, [pc, #632]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801035a:	091b      	lsrs	r3, r3, #4
 801035c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010360:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010362:	4b9b      	ldr	r3, [pc, #620]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010366:	f003 0301 	and.w	r3, r3, #1
 801036a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801036c:	4b98      	ldr	r3, [pc, #608]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801036e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010370:	08db      	lsrs	r3, r3, #3
 8010372:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010376:	693a      	ldr	r2, [r7, #16]
 8010378:	fb02 f303 	mul.w	r3, r2, r3
 801037c:	ee07 3a90 	vmov	s15, r3
 8010380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010384:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	2b00      	cmp	r3, #0
 801038c:	f000 8111 	beq.w	80105b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	2b02      	cmp	r3, #2
 8010394:	f000 8083 	beq.w	801049e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010398:	69bb      	ldr	r3, [r7, #24]
 801039a:	2b02      	cmp	r3, #2
 801039c:	f200 80a1 	bhi.w	80104e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d003      	beq.n	80103ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d056      	beq.n	801045a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80103ac:	e099      	b.n	80104e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80103ae:	4b88      	ldr	r3, [pc, #544]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f003 0320 	and.w	r3, r3, #32
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d02d      	beq.n	8010416 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103ba:	4b85      	ldr	r3, [pc, #532]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	08db      	lsrs	r3, r3, #3
 80103c0:	f003 0303 	and.w	r3, r3, #3
 80103c4:	4a83      	ldr	r2, [pc, #524]	@ (80105d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80103c6:	fa22 f303 	lsr.w	r3, r2, r3
 80103ca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	ee07 3a90 	vmov	s15, r3
 80103d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	ee07 3a90 	vmov	s15, r3
 80103dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80103e4:	4b7a      	ldr	r3, [pc, #488]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103ec:	ee07 3a90 	vmov	s15, r3
 80103f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80103f8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80103fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010404:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801040c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010410:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010414:	e087      	b.n	8010526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	ee07 3a90 	vmov	s15, r3
 801041c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010420:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80105dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010428:	4b69      	ldr	r3, [pc, #420]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801042a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801042c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010430:	ee07 3a90 	vmov	s15, r3
 8010434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010438:	ed97 6a03 	vldr	s12, [r7, #12]
 801043c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010448:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801044c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010454:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010458:	e065      	b.n	8010526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	ee07 3a90 	vmov	s15, r3
 8010460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010464:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80105e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801046c:	4b58      	ldr	r3, [pc, #352]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801046e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010474:	ee07 3a90 	vmov	s15, r3
 8010478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801047c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010480:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801048c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010498:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801049c:	e043      	b.n	8010526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	ee07 3a90 	vmov	s15, r3
 80104a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104a8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80105e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80104ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104b0:	4b47      	ldr	r3, [pc, #284]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104b8:	ee07 3a90 	vmov	s15, r3
 80104bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80104c4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80104c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80104d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80104e0:	e021      	b.n	8010526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	ee07 3a90 	vmov	s15, r3
 80104e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104ec:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80105dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80104f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104f4:	4b36      	ldr	r3, [pc, #216]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104fc:	ee07 3a90 	vmov	s15, r3
 8010500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010504:	ed97 6a03 	vldr	s12, [r7, #12]
 8010508:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80105d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801050c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010514:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801051c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010520:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010524:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010526:	4b2a      	ldr	r3, [pc, #168]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801052a:	0a5b      	lsrs	r3, r3, #9
 801052c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010530:	ee07 3a90 	vmov	s15, r3
 8010534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010538:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801053c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010540:	edd7 6a07 	vldr	s13, [r7, #28]
 8010544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801054c:	ee17 2a90 	vmov	r2, s15
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010554:	4b1e      	ldr	r3, [pc, #120]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010558:	0c1b      	lsrs	r3, r3, #16
 801055a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801055e:	ee07 3a90 	vmov	s15, r3
 8010562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801056a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801056e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801057a:	ee17 2a90 	vmov	r2, s15
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010582:	4b13      	ldr	r3, [pc, #76]	@ (80105d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010586:	0e1b      	lsrs	r3, r3, #24
 8010588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801058c:	ee07 3a90 	vmov	s15, r3
 8010590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010594:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010598:	ee37 7a87 	vadd.f32	s14, s15, s14
 801059c:	edd7 6a07 	vldr	s13, [r7, #28]
 80105a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105a8:	ee17 2a90 	vmov	r2, s15
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80105b0:	e008      	b.n	80105c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2200      	movs	r2, #0
 80105b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2200      	movs	r2, #0
 80105c2:	609a      	str	r2, [r3, #8]
}
 80105c4:	bf00      	nop
 80105c6:	3724      	adds	r7, #36	@ 0x24
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr
 80105d0:	58024400 	.word	0x58024400
 80105d4:	03d09000 	.word	0x03d09000
 80105d8:	46000000 	.word	0x46000000
 80105dc:	4c742400 	.word	0x4c742400
 80105e0:	4a742400 	.word	0x4a742400
 80105e4:	4bb71b00 	.word	0x4bb71b00

080105e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80105f2:	2300      	movs	r3, #0
 80105f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80105f6:	4b53      	ldr	r3, [pc, #332]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80105f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105fa:	f003 0303 	and.w	r3, r3, #3
 80105fe:	2b03      	cmp	r3, #3
 8010600:	d101      	bne.n	8010606 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010602:	2301      	movs	r3, #1
 8010604:	e099      	b.n	801073a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010606:	4b4f      	ldr	r3, [pc, #316]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	4a4e      	ldr	r2, [pc, #312]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 801060c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010612:	f7f6 ff39 	bl	8007488 <HAL_GetTick>
 8010616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010618:	e008      	b.n	801062c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801061a:	f7f6 ff35 	bl	8007488 <HAL_GetTick>
 801061e:	4602      	mov	r2, r0
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	1ad3      	subs	r3, r2, r3
 8010624:	2b02      	cmp	r3, #2
 8010626:	d901      	bls.n	801062c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010628:	2303      	movs	r3, #3
 801062a:	e086      	b.n	801073a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801062c:	4b45      	ldr	r3, [pc, #276]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010634:	2b00      	cmp	r3, #0
 8010636:	d1f0      	bne.n	801061a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010638:	4b42      	ldr	r3, [pc, #264]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 801063a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801063c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	031b      	lsls	r3, r3, #12
 8010646:	493f      	ldr	r1, [pc, #252]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 8010648:	4313      	orrs	r3, r2
 801064a:	628b      	str	r3, [r1, #40]	@ 0x28
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	685b      	ldr	r3, [r3, #4]
 8010650:	3b01      	subs	r3, #1
 8010652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	689b      	ldr	r3, [r3, #8]
 801065a:	3b01      	subs	r3, #1
 801065c:	025b      	lsls	r3, r3, #9
 801065e:	b29b      	uxth	r3, r3
 8010660:	431a      	orrs	r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	3b01      	subs	r3, #1
 8010668:	041b      	lsls	r3, r3, #16
 801066a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801066e:	431a      	orrs	r2, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	691b      	ldr	r3, [r3, #16]
 8010674:	3b01      	subs	r3, #1
 8010676:	061b      	lsls	r3, r3, #24
 8010678:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801067c:	4931      	ldr	r1, [pc, #196]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 801067e:	4313      	orrs	r3, r2
 8010680:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8010682:	4b30      	ldr	r3, [pc, #192]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 8010684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010686:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	695b      	ldr	r3, [r3, #20]
 801068e:	492d      	ldr	r1, [pc, #180]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 8010690:	4313      	orrs	r3, r2
 8010692:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010694:	4b2b      	ldr	r3, [pc, #172]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 8010696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010698:	f023 0220 	bic.w	r2, r3, #32
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	699b      	ldr	r3, [r3, #24]
 80106a0:	4928      	ldr	r1, [pc, #160]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80106a2:	4313      	orrs	r3, r2
 80106a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80106a6:	4b27      	ldr	r3, [pc, #156]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80106a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106aa:	4a26      	ldr	r2, [pc, #152]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80106ac:	f023 0310 	bic.w	r3, r3, #16
 80106b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80106b2:	4b24      	ldr	r3, [pc, #144]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80106b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80106b6:	4b24      	ldr	r3, [pc, #144]	@ (8010748 <RCCEx_PLL2_Config+0x160>)
 80106b8:	4013      	ands	r3, r2
 80106ba:	687a      	ldr	r2, [r7, #4]
 80106bc:	69d2      	ldr	r2, [r2, #28]
 80106be:	00d2      	lsls	r2, r2, #3
 80106c0:	4920      	ldr	r1, [pc, #128]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80106c2:	4313      	orrs	r3, r2
 80106c4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80106c6:	4b1f      	ldr	r3, [pc, #124]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80106c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106ca:	4a1e      	ldr	r2, [pc, #120]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80106cc:	f043 0310 	orr.w	r3, r3, #16
 80106d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d106      	bne.n	80106e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80106d8:	4b1a      	ldr	r3, [pc, #104]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80106da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106dc:	4a19      	ldr	r2, [pc, #100]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80106de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80106e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80106e4:	e00f      	b.n	8010706 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d106      	bne.n	80106fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80106ec:	4b15      	ldr	r3, [pc, #84]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80106ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106f0:	4a14      	ldr	r2, [pc, #80]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80106f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80106f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80106f8:	e005      	b.n	8010706 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80106fa:	4b12      	ldr	r3, [pc, #72]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 80106fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106fe:	4a11      	ldr	r2, [pc, #68]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 8010700:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010704:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010706:	4b0f      	ldr	r3, [pc, #60]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4a0e      	ldr	r2, [pc, #56]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 801070c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010712:	f7f6 feb9 	bl	8007488 <HAL_GetTick>
 8010716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010718:	e008      	b.n	801072c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801071a:	f7f6 feb5 	bl	8007488 <HAL_GetTick>
 801071e:	4602      	mov	r2, r0
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	1ad3      	subs	r3, r2, r3
 8010724:	2b02      	cmp	r3, #2
 8010726:	d901      	bls.n	801072c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010728:	2303      	movs	r3, #3
 801072a:	e006      	b.n	801073a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801072c:	4b05      	ldr	r3, [pc, #20]	@ (8010744 <RCCEx_PLL2_Config+0x15c>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010734:	2b00      	cmp	r3, #0
 8010736:	d0f0      	beq.n	801071a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010738:	7bfb      	ldrb	r3, [r7, #15]
}
 801073a:	4618      	mov	r0, r3
 801073c:	3710      	adds	r7, #16
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	58024400 	.word	0x58024400
 8010748:	ffff0007 	.word	0xffff0007

0801074c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010756:	2300      	movs	r3, #0
 8010758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801075a:	4b53      	ldr	r3, [pc, #332]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 801075c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801075e:	f003 0303 	and.w	r3, r3, #3
 8010762:	2b03      	cmp	r3, #3
 8010764:	d101      	bne.n	801076a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8010766:	2301      	movs	r3, #1
 8010768:	e099      	b.n	801089e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801076a:	4b4f      	ldr	r3, [pc, #316]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	4a4e      	ldr	r2, [pc, #312]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010776:	f7f6 fe87 	bl	8007488 <HAL_GetTick>
 801077a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801077c:	e008      	b.n	8010790 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801077e:	f7f6 fe83 	bl	8007488 <HAL_GetTick>
 8010782:	4602      	mov	r2, r0
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	1ad3      	subs	r3, r2, r3
 8010788:	2b02      	cmp	r3, #2
 801078a:	d901      	bls.n	8010790 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801078c:	2303      	movs	r3, #3
 801078e:	e086      	b.n	801089e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010790:	4b45      	ldr	r3, [pc, #276]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1f0      	bne.n	801077e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801079c:	4b42      	ldr	r3, [pc, #264]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 801079e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	051b      	lsls	r3, r3, #20
 80107aa:	493f      	ldr	r1, [pc, #252]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 80107ac:	4313      	orrs	r3, r2
 80107ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	3b01      	subs	r3, #1
 80107b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	689b      	ldr	r3, [r3, #8]
 80107be:	3b01      	subs	r3, #1
 80107c0:	025b      	lsls	r3, r3, #9
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	431a      	orrs	r2, r3
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	68db      	ldr	r3, [r3, #12]
 80107ca:	3b01      	subs	r3, #1
 80107cc:	041b      	lsls	r3, r3, #16
 80107ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80107d2:	431a      	orrs	r2, r3
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	691b      	ldr	r3, [r3, #16]
 80107d8:	3b01      	subs	r3, #1
 80107da:	061b      	lsls	r3, r3, #24
 80107dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80107e0:	4931      	ldr	r1, [pc, #196]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 80107e2:	4313      	orrs	r3, r2
 80107e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80107e6:	4b30      	ldr	r3, [pc, #192]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 80107e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	695b      	ldr	r3, [r3, #20]
 80107f2:	492d      	ldr	r1, [pc, #180]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 80107f4:	4313      	orrs	r3, r2
 80107f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80107f8:	4b2b      	ldr	r3, [pc, #172]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 80107fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	699b      	ldr	r3, [r3, #24]
 8010804:	4928      	ldr	r1, [pc, #160]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010806:	4313      	orrs	r3, r2
 8010808:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801080a:	4b27      	ldr	r3, [pc, #156]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 801080c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801080e:	4a26      	ldr	r2, [pc, #152]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010814:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010816:	4b24      	ldr	r3, [pc, #144]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801081a:	4b24      	ldr	r3, [pc, #144]	@ (80108ac <RCCEx_PLL3_Config+0x160>)
 801081c:	4013      	ands	r3, r2
 801081e:	687a      	ldr	r2, [r7, #4]
 8010820:	69d2      	ldr	r2, [r2, #28]
 8010822:	00d2      	lsls	r2, r2, #3
 8010824:	4920      	ldr	r1, [pc, #128]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010826:	4313      	orrs	r3, r2
 8010828:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801082a:	4b1f      	ldr	r3, [pc, #124]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 801082c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801082e:	4a1e      	ldr	r2, [pc, #120]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010834:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d106      	bne.n	801084a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801083c:	4b1a      	ldr	r3, [pc, #104]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 801083e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010840:	4a19      	ldr	r2, [pc, #100]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010842:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8010846:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010848:	e00f      	b.n	801086a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	2b01      	cmp	r3, #1
 801084e:	d106      	bne.n	801085e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010850:	4b15      	ldr	r3, [pc, #84]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010854:	4a14      	ldr	r2, [pc, #80]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010856:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801085a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801085c:	e005      	b.n	801086a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801085e:	4b12      	ldr	r3, [pc, #72]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010862:	4a11      	ldr	r2, [pc, #68]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010864:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010868:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801086a:	4b0f      	ldr	r3, [pc, #60]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	4a0e      	ldr	r2, [pc, #56]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010876:	f7f6 fe07 	bl	8007488 <HAL_GetTick>
 801087a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801087c:	e008      	b.n	8010890 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801087e:	f7f6 fe03 	bl	8007488 <HAL_GetTick>
 8010882:	4602      	mov	r2, r0
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	1ad3      	subs	r3, r2, r3
 8010888:	2b02      	cmp	r3, #2
 801088a:	d901      	bls.n	8010890 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801088c:	2303      	movs	r3, #3
 801088e:	e006      	b.n	801089e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010890:	4b05      	ldr	r3, [pc, #20]	@ (80108a8 <RCCEx_PLL3_Config+0x15c>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010898:	2b00      	cmp	r3, #0
 801089a:	d0f0      	beq.n	801087e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801089c:	7bfb      	ldrb	r3, [r7, #15]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3710      	adds	r7, #16
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
 80108a6:	bf00      	nop
 80108a8:	58024400 	.word	0x58024400
 80108ac:	ffff0007 	.word	0xffff0007

080108b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b084      	sub	sp, #16
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d101      	bne.n	80108c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80108be:	2301      	movs	r3, #1
 80108c0:	e10f      	b.n	8010ae2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2200      	movs	r2, #0
 80108c6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	4a87      	ldr	r2, [pc, #540]	@ (8010aec <HAL_SPI_Init+0x23c>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d00f      	beq.n	80108f2 <HAL_SPI_Init+0x42>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	4a86      	ldr	r2, [pc, #536]	@ (8010af0 <HAL_SPI_Init+0x240>)
 80108d8:	4293      	cmp	r3, r2
 80108da:	d00a      	beq.n	80108f2 <HAL_SPI_Init+0x42>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4a84      	ldr	r2, [pc, #528]	@ (8010af4 <HAL_SPI_Init+0x244>)
 80108e2:	4293      	cmp	r3, r2
 80108e4:	d005      	beq.n	80108f2 <HAL_SPI_Init+0x42>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	2b0f      	cmp	r3, #15
 80108ec:	d901      	bls.n	80108f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80108ee:	2301      	movs	r3, #1
 80108f0:	e0f7      	b.n	8010ae2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f000 fef6 	bl	80116e4 <SPI_GetPacketSize>
 80108f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	4a7b      	ldr	r2, [pc, #492]	@ (8010aec <HAL_SPI_Init+0x23c>)
 8010900:	4293      	cmp	r3, r2
 8010902:	d00c      	beq.n	801091e <HAL_SPI_Init+0x6e>
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	4a79      	ldr	r2, [pc, #484]	@ (8010af0 <HAL_SPI_Init+0x240>)
 801090a:	4293      	cmp	r3, r2
 801090c:	d007      	beq.n	801091e <HAL_SPI_Init+0x6e>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	4a78      	ldr	r2, [pc, #480]	@ (8010af4 <HAL_SPI_Init+0x244>)
 8010914:	4293      	cmp	r3, r2
 8010916:	d002      	beq.n	801091e <HAL_SPI_Init+0x6e>
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2b08      	cmp	r3, #8
 801091c:	d811      	bhi.n	8010942 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010922:	4a72      	ldr	r2, [pc, #456]	@ (8010aec <HAL_SPI_Init+0x23c>)
 8010924:	4293      	cmp	r3, r2
 8010926:	d009      	beq.n	801093c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4a70      	ldr	r2, [pc, #448]	@ (8010af0 <HAL_SPI_Init+0x240>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d004      	beq.n	801093c <HAL_SPI_Init+0x8c>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	4a6f      	ldr	r2, [pc, #444]	@ (8010af4 <HAL_SPI_Init+0x244>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d104      	bne.n	8010946 <HAL_SPI_Init+0x96>
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2b10      	cmp	r3, #16
 8010940:	d901      	bls.n	8010946 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8010942:	2301      	movs	r3, #1
 8010944:	e0cd      	b.n	8010ae2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801094c:	b2db      	uxtb	r3, r3
 801094e:	2b00      	cmp	r3, #0
 8010950:	d106      	bne.n	8010960 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2200      	movs	r2, #0
 8010956:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7f1 fe94 	bl	8002688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2202      	movs	r2, #2
 8010964:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	681a      	ldr	r2, [r3, #0]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	f022 0201 	bic.w	r2, r2, #1
 8010976:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	689b      	ldr	r3, [r3, #8]
 801097e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8010982:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	699b      	ldr	r3, [r3, #24]
 8010988:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801098c:	d119      	bne.n	80109c2 <HAL_SPI_Init+0x112>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010996:	d103      	bne.n	80109a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801099c:	2b00      	cmp	r3, #0
 801099e:	d008      	beq.n	80109b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d10c      	bne.n	80109c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80109ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80109b0:	d107      	bne.n	80109c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80109c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d00f      	beq.n	80109ee <HAL_SPI_Init+0x13e>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	68db      	ldr	r3, [r3, #12]
 80109d2:	2b06      	cmp	r3, #6
 80109d4:	d90b      	bls.n	80109ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	430a      	orrs	r2, r1
 80109ea:	601a      	str	r2, [r3, #0]
 80109ec:	e007      	b.n	80109fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	681a      	ldr	r2, [r3, #0]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80109fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	69da      	ldr	r2, [r3, #28]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a06:	431a      	orrs	r2, r3
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	431a      	orrs	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a10:	ea42 0103 	orr.w	r1, r2, r3
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	68da      	ldr	r2, [r3, #12]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	430a      	orrs	r2, r1
 8010a1e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a28:	431a      	orrs	r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a2e:	431a      	orrs	r2, r3
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	699b      	ldr	r3, [r3, #24]
 8010a34:	431a      	orrs	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	691b      	ldr	r3, [r3, #16]
 8010a3a:	431a      	orrs	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	695b      	ldr	r3, [r3, #20]
 8010a40:	431a      	orrs	r2, r3
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6a1b      	ldr	r3, [r3, #32]
 8010a46:	431a      	orrs	r2, r3
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	431a      	orrs	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a52:	431a      	orrs	r2, r3
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	689b      	ldr	r3, [r3, #8]
 8010a58:	431a      	orrs	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010a5e:	ea42 0103 	orr.w	r1, r2, r3
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	430a      	orrs	r2, r1
 8010a6c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d113      	bne.n	8010a9e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	689b      	ldr	r3, [r3, #8]
 8010a7c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010a88:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	689b      	ldr	r3, [r3, #8]
 8010a90:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010a9c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	f022 0201 	bic.w	r2, r2, #1
 8010aac:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00a      	beq.n	8010ad0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	430a      	orrs	r2, r1
 8010ace:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2201      	movs	r2, #1
 8010adc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8010ae0:	2300      	movs	r3, #0
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	40013000 	.word	0x40013000
 8010af0:	40003800 	.word	0x40003800
 8010af4:	40003c00 	.word	0x40003c00

08010af8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b088      	sub	sp, #32
 8010afc:	af02      	add	r7, sp, #8
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	603b      	str	r3, [r7, #0]
 8010b04:	4613      	mov	r3, r2
 8010b06:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	3320      	adds	r3, #32
 8010b0e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010b10:	f7f6 fcba 	bl	8007488 <HAL_GetTick>
 8010b14:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010b1c:	b2db      	uxtb	r3, r3
 8010b1e:	2b01      	cmp	r3, #1
 8010b20:	d001      	beq.n	8010b26 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8010b22:	2302      	movs	r3, #2
 8010b24:	e1d1      	b.n	8010eca <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d002      	beq.n	8010b32 <HAL_SPI_Transmit+0x3a>
 8010b2c:	88fb      	ldrh	r3, [r7, #6]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d101      	bne.n	8010b36 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8010b32:	2301      	movs	r3, #1
 8010b34:	e1c9      	b.n	8010eca <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d101      	bne.n	8010b44 <HAL_SPI_Transmit+0x4c>
 8010b40:	2302      	movs	r3, #2
 8010b42:	e1c2      	b.n	8010eca <HAL_SPI_Transmit+0x3d2>
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2201      	movs	r2, #1
 8010b48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2203      	movs	r2, #3
 8010b50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2200      	movs	r2, #0
 8010b58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	68ba      	ldr	r2, [r7, #8]
 8010b60:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	88fa      	ldrh	r2, [r7, #6]
 8010b66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	88fa      	ldrh	r2, [r7, #6]
 8010b6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2200      	movs	r2, #0
 8010b76:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2200      	movs	r2, #0
 8010b84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2200      	movs	r2, #0
 8010b92:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	689b      	ldr	r3, [r3, #8]
 8010b98:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010b9c:	d108      	bne.n	8010bb0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	681a      	ldr	r2, [r3, #0]
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010bac:	601a      	str	r2, [r3, #0]
 8010bae:	e009      	b.n	8010bc4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010bc2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	685a      	ldr	r2, [r3, #4]
 8010bca:	4b96      	ldr	r3, [pc, #600]	@ (8010e24 <HAL_SPI_Transmit+0x32c>)
 8010bcc:	4013      	ands	r3, r2
 8010bce:	88f9      	ldrh	r1, [r7, #6]
 8010bd0:	68fa      	ldr	r2, [r7, #12]
 8010bd2:	6812      	ldr	r2, [r2, #0]
 8010bd4:	430b      	orrs	r3, r1
 8010bd6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	681a      	ldr	r2, [r3, #0]
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	f042 0201 	orr.w	r2, r2, #1
 8010be6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	685b      	ldr	r3, [r3, #4]
 8010bec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010bf0:	d107      	bne.n	8010c02 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	681a      	ldr	r2, [r3, #0]
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010c00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	68db      	ldr	r3, [r3, #12]
 8010c06:	2b0f      	cmp	r3, #15
 8010c08:	d947      	bls.n	8010c9a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010c0a:	e03f      	b.n	8010c8c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	695b      	ldr	r3, [r3, #20]
 8010c12:	f003 0302 	and.w	r3, r3, #2
 8010c16:	2b02      	cmp	r3, #2
 8010c18:	d114      	bne.n	8010c44 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	6812      	ldr	r2, [r2, #0]
 8010c24:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c2a:	1d1a      	adds	r2, r3, #4
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	3b01      	subs	r3, #1
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010c42:	e023      	b.n	8010c8c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010c44:	f7f6 fc20 	bl	8007488 <HAL_GetTick>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	1ad3      	subs	r3, r2, r3
 8010c4e:	683a      	ldr	r2, [r7, #0]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d803      	bhi.n	8010c5c <HAL_SPI_Transmit+0x164>
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c5a:	d102      	bne.n	8010c62 <HAL_SPI_Transmit+0x16a>
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d114      	bne.n	8010c8c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f000 fc70 	bl	8011548 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010c6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2200      	movs	r2, #0
 8010c84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010c88:	2303      	movs	r3, #3
 8010c8a:	e11e      	b.n	8010eca <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d1b9      	bne.n	8010c0c <HAL_SPI_Transmit+0x114>
 8010c98:	e0f1      	b.n	8010e7e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	2b07      	cmp	r3, #7
 8010ca0:	f240 80e6 	bls.w	8010e70 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010ca4:	e05d      	b.n	8010d62 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	695b      	ldr	r3, [r3, #20]
 8010cac:	f003 0302 	and.w	r3, r3, #2
 8010cb0:	2b02      	cmp	r3, #2
 8010cb2:	d132      	bne.n	8010d1a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	d918      	bls.n	8010cf2 <HAL_SPI_Transmit+0x1fa>
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d014      	beq.n	8010cf2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	6812      	ldr	r2, [r2, #0]
 8010cd2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010cd8:	1d1a      	adds	r2, r3, #4
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	3b02      	subs	r3, #2
 8010ce8:	b29a      	uxth	r2, r3
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010cf0:	e037      	b.n	8010d62 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010cf6:	881a      	ldrh	r2, [r3, #0]
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d00:	1c9a      	adds	r2, r3, #2
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	3b01      	subs	r3, #1
 8010d10:	b29a      	uxth	r2, r3
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010d18:	e023      	b.n	8010d62 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d1a:	f7f6 fbb5 	bl	8007488 <HAL_GetTick>
 8010d1e:	4602      	mov	r2, r0
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	683a      	ldr	r2, [r7, #0]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d803      	bhi.n	8010d32 <HAL_SPI_Transmit+0x23a>
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d30:	d102      	bne.n	8010d38 <HAL_SPI_Transmit+0x240>
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d114      	bne.n	8010d62 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010d38:	68f8      	ldr	r0, [r7, #12]
 8010d3a:	f000 fc05 	bl	8011548 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	2201      	movs	r2, #1
 8010d52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010d5e:	2303      	movs	r3, #3
 8010d60:	e0b3      	b.n	8010eca <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010d68:	b29b      	uxth	r3, r3
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d19b      	bne.n	8010ca6 <HAL_SPI_Transmit+0x1ae>
 8010d6e:	e086      	b.n	8010e7e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	695b      	ldr	r3, [r3, #20]
 8010d76:	f003 0302 	and.w	r3, r3, #2
 8010d7a:	2b02      	cmp	r3, #2
 8010d7c:	d154      	bne.n	8010e28 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	2b03      	cmp	r3, #3
 8010d88:	d918      	bls.n	8010dbc <HAL_SPI_Transmit+0x2c4>
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d8e:	2b40      	cmp	r3, #64	@ 0x40
 8010d90:	d914      	bls.n	8010dbc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	6812      	ldr	r2, [r2, #0]
 8010d9c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010da2:	1d1a      	adds	r2, r3, #4
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	3b04      	subs	r3, #4
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010dba:	e059      	b.n	8010e70 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d917      	bls.n	8010df8 <HAL_SPI_Transmit+0x300>
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d013      	beq.n	8010df8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010dd4:	881a      	ldrh	r2, [r3, #0]
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010dde:	1c9a      	adds	r2, r3, #2
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	3b02      	subs	r3, #2
 8010dee:	b29a      	uxth	r2, r3
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010df6:	e03b      	b.n	8010e70 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	3320      	adds	r3, #32
 8010e02:	7812      	ldrb	r2, [r2, #0]
 8010e04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e0a:	1c5a      	adds	r2, r3, #1
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	3b01      	subs	r3, #1
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010e22:	e025      	b.n	8010e70 <HAL_SPI_Transmit+0x378>
 8010e24:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e28:	f7f6 fb2e 	bl	8007488 <HAL_GetTick>
 8010e2c:	4602      	mov	r2, r0
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	1ad3      	subs	r3, r2, r3
 8010e32:	683a      	ldr	r2, [r7, #0]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d803      	bhi.n	8010e40 <HAL_SPI_Transmit+0x348>
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e3e:	d102      	bne.n	8010e46 <HAL_SPI_Transmit+0x34e>
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d114      	bne.n	8010e70 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	f000 fb7e 	bl	8011548 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2201      	movs	r2, #1
 8010e60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2200      	movs	r2, #0
 8010e68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010e6c:	2303      	movs	r3, #3
 8010e6e:	e02c      	b.n	8010eca <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010e76:	b29b      	uxth	r3, r3
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f47f af79 	bne.w	8010d70 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	9300      	str	r3, [sp, #0]
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	2200      	movs	r2, #0
 8010e86:	2108      	movs	r1, #8
 8010e88:	68f8      	ldr	r0, [r7, #12]
 8010e8a:	f000 fbfd 	bl	8011688 <SPI_WaitOnFlagUntilTimeout>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d007      	beq.n	8010ea4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e9a:	f043 0220 	orr.w	r2, r3, #32
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010ea4:	68f8      	ldr	r0, [r7, #12]
 8010ea6:	f000 fb4f 	bl	8011548 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	2201      	movs	r2, #1
 8010eae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d001      	beq.n	8010ec8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	e000      	b.n	8010eca <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8010ec8:	2300      	movs	r3, #0
  }
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3718      	adds	r7, #24
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop

08010ed4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b08e      	sub	sp, #56	@ 0x38
 8010ed8:	af02      	add	r7, sp, #8
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	607a      	str	r2, [r7, #4]
 8010ee0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	3320      	adds	r3, #32
 8010ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	3330      	adds	r3, #48	@ 0x30
 8010ef0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ef6:	095b      	lsrs	r3, r3, #5
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	3301      	adds	r3, #1
 8010efc:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010efe:	f7f6 fac3 	bl	8007488 <HAL_GetTick>
 8010f02:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8010f04:	887b      	ldrh	r3, [r7, #2]
 8010f06:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8010f08:	887b      	ldrh	r3, [r7, #2]
 8010f0a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d001      	beq.n	8010f1c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8010f18:	2302      	movs	r3, #2
 8010f1a:	e310      	b.n	801153e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d005      	beq.n	8010f2e <HAL_SPI_TransmitReceive+0x5a>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d002      	beq.n	8010f2e <HAL_SPI_TransmitReceive+0x5a>
 8010f28:	887b      	ldrh	r3, [r7, #2]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d101      	bne.n	8010f32 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8010f2e:	2301      	movs	r3, #1
 8010f30:	e305      	b.n	801153e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010f38:	2b01      	cmp	r3, #1
 8010f3a:	d101      	bne.n	8010f40 <HAL_SPI_TransmitReceive+0x6c>
 8010f3c:	2302      	movs	r3, #2
 8010f3e:	e2fe      	b.n	801153e <HAL_SPI_TransmitReceive+0x66a>
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	2201      	movs	r2, #1
 8010f44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	2205      	movs	r2, #5
 8010f4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2200      	movs	r2, #0
 8010f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	687a      	ldr	r2, [r7, #4]
 8010f5c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	887a      	ldrh	r2, [r7, #2]
 8010f62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	887a      	ldrh	r2, [r7, #2]
 8010f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	68ba      	ldr	r2, [r7, #8]
 8010f72:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	887a      	ldrh	r2, [r7, #2]
 8010f78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	887a      	ldrh	r2, [r7, #2]
 8010f80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2200      	movs	r2, #0
 8010f88:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	68da      	ldr	r2, [r3, #12]
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8010f9e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	4a70      	ldr	r2, [pc, #448]	@ (8011168 <HAL_SPI_TransmitReceive+0x294>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d009      	beq.n	8010fbe <HAL_SPI_TransmitReceive+0xea>
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	4a6f      	ldr	r2, [pc, #444]	@ (801116c <HAL_SPI_TransmitReceive+0x298>)
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	d004      	beq.n	8010fbe <HAL_SPI_TransmitReceive+0xea>
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	4a6d      	ldr	r2, [pc, #436]	@ (8011170 <HAL_SPI_TransmitReceive+0x29c>)
 8010fba:	4293      	cmp	r3, r2
 8010fbc:	d102      	bne.n	8010fc4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8010fbe:	2310      	movs	r3, #16
 8010fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010fc2:	e001      	b.n	8010fc8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8010fc4:	2308      	movs	r3, #8
 8010fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	685a      	ldr	r2, [r3, #4]
 8010fce:	4b69      	ldr	r3, [pc, #420]	@ (8011174 <HAL_SPI_TransmitReceive+0x2a0>)
 8010fd0:	4013      	ands	r3, r2
 8010fd2:	8879      	ldrh	r1, [r7, #2]
 8010fd4:	68fa      	ldr	r2, [r7, #12]
 8010fd6:	6812      	ldr	r2, [r2, #0]
 8010fd8:	430b      	orrs	r3, r1
 8010fda:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f042 0201 	orr.w	r2, r2, #1
 8010fea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010ff4:	d107      	bne.n	8011006 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	681a      	ldr	r2, [r3, #0]
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011004:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	68db      	ldr	r3, [r3, #12]
 801100a:	2b0f      	cmp	r3, #15
 801100c:	f240 80a2 	bls.w	8011154 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8011010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011012:	089b      	lsrs	r3, r3, #2
 8011014:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011016:	e094      	b.n	8011142 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	695b      	ldr	r3, [r3, #20]
 801101e:	f003 0302 	and.w	r3, r3, #2
 8011022:	2b02      	cmp	r3, #2
 8011024:	d120      	bne.n	8011068 <HAL_SPI_TransmitReceive+0x194>
 8011026:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011028:	2b00      	cmp	r3, #0
 801102a:	d01d      	beq.n	8011068 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801102c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801102e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8011030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011032:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011034:	429a      	cmp	r2, r3
 8011036:	d217      	bcs.n	8011068 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	6812      	ldr	r2, [r2, #0]
 8011042:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011048:	1d1a      	adds	r2, r3, #4
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011054:	b29b      	uxth	r3, r3
 8011056:	3b01      	subs	r3, #1
 8011058:	b29a      	uxth	r2, r3
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011066:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	695b      	ldr	r3, [r3, #20]
 801106e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011070:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011072:	2b00      	cmp	r3, #0
 8011074:	d065      	beq.n	8011142 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	695b      	ldr	r3, [r3, #20]
 801107c:	f003 0301 	and.w	r3, r3, #1
 8011080:	2b01      	cmp	r3, #1
 8011082:	d118      	bne.n	80110b6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	681a      	ldr	r2, [r3, #0]
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801108c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801108e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011094:	1d1a      	adds	r2, r3, #4
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	3b01      	subs	r3, #1
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80110b4:	e045      	b.n	8011142 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80110b6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80110b8:	8bfb      	ldrh	r3, [r7, #30]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d21d      	bcs.n	80110fa <HAL_SPI_TransmitReceive+0x226>
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d018      	beq.n	80110fa <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80110d2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110d8:	1d1a      	adds	r2, r3, #4
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	3b01      	subs	r3, #1
 80110e8:	b29a      	uxth	r2, r3
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80110f8:	e023      	b.n	8011142 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80110fa:	f7f6 f9c5 	bl	8007488 <HAL_GetTick>
 80110fe:	4602      	mov	r2, r0
 8011100:	69bb      	ldr	r3, [r7, #24]
 8011102:	1ad3      	subs	r3, r2, r3
 8011104:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011106:	429a      	cmp	r2, r3
 8011108:	d803      	bhi.n	8011112 <HAL_SPI_TransmitReceive+0x23e>
 801110a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011110:	d102      	bne.n	8011118 <HAL_SPI_TransmitReceive+0x244>
 8011112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011114:	2b00      	cmp	r3, #0
 8011116:	d114      	bne.n	8011142 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011118:	68f8      	ldr	r0, [r7, #12]
 801111a:	f000 fa15 	bl	8011548 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011124:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2201      	movs	r2, #1
 8011132:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2200      	movs	r2, #0
 801113a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801113e:	2303      	movs	r3, #3
 8011140:	e1fd      	b.n	801153e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011142:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011144:	2b00      	cmp	r3, #0
 8011146:	f47f af67 	bne.w	8011018 <HAL_SPI_TransmitReceive+0x144>
 801114a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801114c:	2b00      	cmp	r3, #0
 801114e:	f47f af63 	bne.w	8011018 <HAL_SPI_TransmitReceive+0x144>
 8011152:	e1ce      	b.n	80114f2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	68db      	ldr	r3, [r3, #12]
 8011158:	2b07      	cmp	r3, #7
 801115a:	f240 81c2 	bls.w	80114e2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 801115e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011160:	085b      	lsrs	r3, r3, #1
 8011162:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011164:	e0c9      	b.n	80112fa <HAL_SPI_TransmitReceive+0x426>
 8011166:	bf00      	nop
 8011168:	40013000 	.word	0x40013000
 801116c:	40003800 	.word	0x40003800
 8011170:	40003c00 	.word	0x40003c00
 8011174:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	695b      	ldr	r3, [r3, #20]
 801117e:	f003 0302 	and.w	r3, r3, #2
 8011182:	2b02      	cmp	r3, #2
 8011184:	d11f      	bne.n	80111c6 <HAL_SPI_TransmitReceive+0x2f2>
 8011186:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011188:	2b00      	cmp	r3, #0
 801118a:	d01c      	beq.n	80111c6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801118c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801118e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8011190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011192:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011194:	429a      	cmp	r2, r3
 8011196:	d216      	bcs.n	80111c6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801119c:	881a      	ldrh	r2, [r3, #0]
 801119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80111a6:	1c9a      	adds	r2, r3, #2
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	3b01      	subs	r3, #1
 80111b6:	b29a      	uxth	r2, r3
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80111c4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	695b      	ldr	r3, [r3, #20]
 80111cc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80111ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	f000 8092 	beq.w	80112fa <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	695b      	ldr	r3, [r3, #20]
 80111dc:	f003 0301 	and.w	r3, r3, #1
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d118      	bne.n	8011216 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111e8:	6a3a      	ldr	r2, [r7, #32]
 80111ea:	8812      	ldrh	r2, [r2, #0]
 80111ec:	b292      	uxth	r2, r2
 80111ee:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111f4:	1c9a      	adds	r2, r3, #2
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011200:	b29b      	uxth	r3, r3
 8011202:	3b01      	subs	r3, #1
 8011204:	b29a      	uxth	r2, r3
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011212:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011214:	e071      	b.n	80112fa <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8011216:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011218:	8bfb      	ldrh	r3, [r7, #30]
 801121a:	429a      	cmp	r2, r3
 801121c:	d228      	bcs.n	8011270 <HAL_SPI_TransmitReceive+0x39c>
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011224:	2b00      	cmp	r3, #0
 8011226:	d023      	beq.n	8011270 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801122c:	6a3a      	ldr	r2, [r7, #32]
 801122e:	8812      	ldrh	r2, [r2, #0]
 8011230:	b292      	uxth	r2, r2
 8011232:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011238:	1c9a      	adds	r2, r3, #2
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011242:	6a3a      	ldr	r2, [r7, #32]
 8011244:	8812      	ldrh	r2, [r2, #0]
 8011246:	b292      	uxth	r2, r2
 8011248:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801124e:	1c9a      	adds	r2, r3, #2
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801125a:	b29b      	uxth	r3, r3
 801125c:	3b02      	subs	r3, #2
 801125e:	b29a      	uxth	r2, r3
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801126c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801126e:	e044      	b.n	80112fa <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8011270:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011272:	2b01      	cmp	r3, #1
 8011274:	d11d      	bne.n	80112b2 <HAL_SPI_TransmitReceive+0x3de>
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801127c:	2b00      	cmp	r3, #0
 801127e:	d018      	beq.n	80112b2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011284:	6a3a      	ldr	r2, [r7, #32]
 8011286:	8812      	ldrh	r2, [r2, #0]
 8011288:	b292      	uxth	r2, r2
 801128a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011290:	1c9a      	adds	r2, r3, #2
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801129c:	b29b      	uxth	r3, r3
 801129e:	3b01      	subs	r3, #1
 80112a0:	b29a      	uxth	r2, r3
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80112b0:	e023      	b.n	80112fa <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80112b2:	f7f6 f8e9 	bl	8007488 <HAL_GetTick>
 80112b6:	4602      	mov	r2, r0
 80112b8:	69bb      	ldr	r3, [r7, #24]
 80112ba:	1ad3      	subs	r3, r2, r3
 80112bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112be:	429a      	cmp	r2, r3
 80112c0:	d803      	bhi.n	80112ca <HAL_SPI_TransmitReceive+0x3f6>
 80112c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112c8:	d102      	bne.n	80112d0 <HAL_SPI_TransmitReceive+0x3fc>
 80112ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d114      	bne.n	80112fa <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80112d0:	68f8      	ldr	r0, [r7, #12]
 80112d2:	f000 f939 	bl	8011548 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80112dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2201      	movs	r2, #1
 80112ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	2200      	movs	r2, #0
 80112f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80112f6:	2303      	movs	r3, #3
 80112f8:	e121      	b.n	801153e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80112fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	f47f af3b 	bne.w	8011178 <HAL_SPI_TransmitReceive+0x2a4>
 8011302:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011304:	2b00      	cmp	r3, #0
 8011306:	f47f af37 	bne.w	8011178 <HAL_SPI_TransmitReceive+0x2a4>
 801130a:	e0f2      	b.n	80114f2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	695b      	ldr	r3, [r3, #20]
 8011312:	f003 0302 	and.w	r3, r3, #2
 8011316:	2b02      	cmp	r3, #2
 8011318:	d121      	bne.n	801135e <HAL_SPI_TransmitReceive+0x48a>
 801131a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801131c:	2b00      	cmp	r3, #0
 801131e:	d01e      	beq.n	801135e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011320:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011322:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8011324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011326:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011328:	429a      	cmp	r2, r3
 801132a:	d218      	bcs.n	801135e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	3320      	adds	r3, #32
 8011336:	7812      	ldrb	r2, [r2, #0]
 8011338:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801133e:	1c5a      	adds	r2, r3, #1
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801134a:	b29b      	uxth	r3, r3
 801134c:	3b01      	subs	r3, #1
 801134e:	b29a      	uxth	r2, r3
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801135c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	695b      	ldr	r3, [r3, #20]
 8011364:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011366:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011368:	2b00      	cmp	r3, #0
 801136a:	f000 80ba 	beq.w	80114e2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	695b      	ldr	r3, [r3, #20]
 8011374:	f003 0301 	and.w	r3, r3, #1
 8011378:	2b01      	cmp	r3, #1
 801137a:	d11b      	bne.n	80113b4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011388:	7812      	ldrb	r2, [r2, #0]
 801138a:	b2d2      	uxtb	r2, r2
 801138c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011392:	1c5a      	adds	r2, r3, #1
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801139e:	b29b      	uxth	r3, r3
 80113a0:	3b01      	subs	r3, #1
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80113b0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80113b2:	e096      	b.n	80114e2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80113b4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80113b6:	8bfb      	ldrh	r3, [r7, #30]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d24a      	bcs.n	8011452 <HAL_SPI_TransmitReceive+0x57e>
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d045      	beq.n	8011452 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113d2:	7812      	ldrb	r2, [r2, #0]
 80113d4:	b2d2      	uxtb	r2, r2
 80113d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113dc:	1c5a      	adds	r2, r3, #1
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113ee:	7812      	ldrb	r2, [r2, #0]
 80113f0:	b2d2      	uxtb	r2, r2
 80113f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113f8:	1c5a      	adds	r2, r3, #1
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801140a:	7812      	ldrb	r2, [r2, #0]
 801140c:	b2d2      	uxtb	r2, r2
 801140e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011414:	1c5a      	adds	r2, r3, #1
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011426:	7812      	ldrb	r2, [r2, #0]
 8011428:	b2d2      	uxtb	r2, r2
 801142a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011430:	1c5a      	adds	r2, r3, #1
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801143c:	b29b      	uxth	r3, r3
 801143e:	3b04      	subs	r3, #4
 8011440:	b29a      	uxth	r2, r3
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801144e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011450:	e047      	b.n	80114e2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8011452:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011454:	2b03      	cmp	r3, #3
 8011456:	d820      	bhi.n	801149a <HAL_SPI_TransmitReceive+0x5c6>
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801145e:	2b00      	cmp	r3, #0
 8011460:	d01b      	beq.n	801149a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801146e:	7812      	ldrb	r2, [r2, #0]
 8011470:	b2d2      	uxtb	r2, r2
 8011472:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011478:	1c5a      	adds	r2, r3, #1
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011484:	b29b      	uxth	r3, r3
 8011486:	3b01      	subs	r3, #1
 8011488:	b29a      	uxth	r2, r3
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011496:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011498:	e023      	b.n	80114e2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801149a:	f7f5 fff5 	bl	8007488 <HAL_GetTick>
 801149e:	4602      	mov	r2, r0
 80114a0:	69bb      	ldr	r3, [r7, #24]
 80114a2:	1ad3      	subs	r3, r2, r3
 80114a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d803      	bhi.n	80114b2 <HAL_SPI_TransmitReceive+0x5de>
 80114aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114b0:	d102      	bne.n	80114b8 <HAL_SPI_TransmitReceive+0x5e4>
 80114b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d114      	bne.n	80114e2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f000 f845 	bl	8011548 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80114c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	2201      	movs	r2, #1
 80114d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2200      	movs	r2, #0
 80114da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80114de:	2303      	movs	r3, #3
 80114e0:	e02d      	b.n	801153e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80114e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	f47f af11 	bne.w	801130c <HAL_SPI_TransmitReceive+0x438>
 80114ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	f47f af0d 	bne.w	801130c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80114f2:	69bb      	ldr	r3, [r7, #24]
 80114f4:	9300      	str	r3, [sp, #0]
 80114f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114f8:	2200      	movs	r2, #0
 80114fa:	2108      	movs	r1, #8
 80114fc:	68f8      	ldr	r0, [r7, #12]
 80114fe:	f000 f8c3 	bl	8011688 <SPI_WaitOnFlagUntilTimeout>
 8011502:	4603      	mov	r3, r0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d007      	beq.n	8011518 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801150e:	f043 0220 	orr.w	r2, r3, #32
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011518:	68f8      	ldr	r0, [r7, #12]
 801151a:	f000 f815 	bl	8011548 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2201      	movs	r2, #1
 8011522:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2200      	movs	r2, #0
 801152a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011534:	2b00      	cmp	r3, #0
 8011536:	d001      	beq.n	801153c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8011538:	2301      	movs	r3, #1
 801153a:	e000      	b.n	801153e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 801153c:	2300      	movs	r3, #0
  }
}
 801153e:	4618      	mov	r0, r3
 8011540:	3730      	adds	r7, #48	@ 0x30
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
 8011546:	bf00      	nop

08011548 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011548:	b480      	push	{r7}
 801154a:	b085      	sub	sp, #20
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	695b      	ldr	r3, [r3, #20]
 8011556:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	699a      	ldr	r2, [r3, #24]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	f042 0208 	orr.w	r2, r2, #8
 8011566:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	699a      	ldr	r2, [r3, #24]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	f042 0210 	orr.w	r2, r2, #16
 8011576:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f022 0201 	bic.w	r2, r2, #1
 8011586:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	6919      	ldr	r1, [r3, #16]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	4b3c      	ldr	r3, [pc, #240]	@ (8011684 <SPI_CloseTransfer+0x13c>)
 8011594:	400b      	ands	r3, r1
 8011596:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	689a      	ldr	r2, [r3, #8]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80115a6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80115ae:	b2db      	uxtb	r3, r3
 80115b0:	2b04      	cmp	r3, #4
 80115b2:	d014      	beq.n	80115de <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	f003 0320 	and.w	r3, r3, #32
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d00f      	beq.n	80115de <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80115c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	699a      	ldr	r2, [r3, #24]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	f042 0220 	orr.w	r2, r2, #32
 80115dc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	2b03      	cmp	r3, #3
 80115e8:	d014      	beq.n	8011614 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d00f      	beq.n	8011614 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80115fa:	f043 0204 	orr.w	r2, r3, #4
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	699a      	ldr	r2, [r3, #24]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011612:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801161a:	2b00      	cmp	r3, #0
 801161c:	d00f      	beq.n	801163e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011624:	f043 0201 	orr.w	r2, r3, #1
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	699a      	ldr	r2, [r3, #24]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801163c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011644:	2b00      	cmp	r3, #0
 8011646:	d00f      	beq.n	8011668 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801164e:	f043 0208 	orr.w	r2, r3, #8
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	699a      	ldr	r2, [r3, #24]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011666:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2200      	movs	r2, #0
 801166c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2200      	movs	r2, #0
 8011674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8011678:	bf00      	nop
 801167a:	3714      	adds	r7, #20
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr
 8011684:	fffffc90 	.word	0xfffffc90

08011688 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b084      	sub	sp, #16
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	603b      	str	r3, [r7, #0]
 8011694:	4613      	mov	r3, r2
 8011696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011698:	e010      	b.n	80116bc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801169a:	f7f5 fef5 	bl	8007488 <HAL_GetTick>
 801169e:	4602      	mov	r2, r0
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	1ad3      	subs	r3, r2, r3
 80116a4:	683a      	ldr	r2, [r7, #0]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d803      	bhi.n	80116b2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116b0:	d102      	bne.n	80116b8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d101      	bne.n	80116bc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80116b8:	2303      	movs	r3, #3
 80116ba:	e00f      	b.n	80116dc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	695a      	ldr	r2, [r3, #20]
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	4013      	ands	r3, r2
 80116c6:	68ba      	ldr	r2, [r7, #8]
 80116c8:	429a      	cmp	r2, r3
 80116ca:	bf0c      	ite	eq
 80116cc:	2301      	moveq	r3, #1
 80116ce:	2300      	movne	r3, #0
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	461a      	mov	r2, r3
 80116d4:	79fb      	ldrb	r3, [r7, #7]
 80116d6:	429a      	cmp	r2, r3
 80116d8:	d0df      	beq.n	801169a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80116da:	2300      	movs	r3, #0
}
 80116dc:	4618      	mov	r0, r3
 80116de:	3710      	adds	r7, #16
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80116e4:	b480      	push	{r7}
 80116e6:	b085      	sub	sp, #20
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116f0:	095b      	lsrs	r3, r3, #5
 80116f2:	3301      	adds	r3, #1
 80116f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	68db      	ldr	r3, [r3, #12]
 80116fa:	3301      	adds	r3, #1
 80116fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	3307      	adds	r3, #7
 8011702:	08db      	lsrs	r3, r3, #3
 8011704:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	68fa      	ldr	r2, [r7, #12]
 801170a:	fb02 f303 	mul.w	r3, r2, r3
}
 801170e:	4618      	mov	r0, r3
 8011710:	3714      	adds	r7, #20
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr

0801171a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801171a:	b580      	push	{r7, lr}
 801171c:	b082      	sub	sp, #8
 801171e:	af00      	add	r7, sp, #0
 8011720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d101      	bne.n	801172c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011728:	2301      	movs	r3, #1
 801172a:	e049      	b.n	80117c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011732:	b2db      	uxtb	r3, r3
 8011734:	2b00      	cmp	r3, #0
 8011736:	d106      	bne.n	8011746 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2200      	movs	r2, #0
 801173c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f7f1 f8a9 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2202      	movs	r2, #2
 801174a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	3304      	adds	r3, #4
 8011756:	4619      	mov	r1, r3
 8011758:	4610      	mov	r0, r2
 801175a:	f001 f9a3 	bl	8012aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2201      	movs	r2, #1
 8011762:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2201      	movs	r2, #1
 801176a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2201      	movs	r2, #1
 8011772:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2201      	movs	r2, #1
 801177a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2201      	movs	r2, #1
 8011782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2201      	movs	r2, #1
 801178a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2201      	movs	r2, #1
 8011792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2201      	movs	r2, #1
 801179a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2201      	movs	r2, #1
 80117a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2201      	movs	r2, #1
 80117aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2201      	movs	r2, #1
 80117b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2201      	movs	r2, #1
 80117ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80117be:	2300      	movs	r3, #0
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	3708      	adds	r7, #8
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}

080117c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b085      	sub	sp, #20
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	2b01      	cmp	r3, #1
 80117da:	d001      	beq.n	80117e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80117dc:	2301      	movs	r3, #1
 80117de:	e056      	b.n	801188e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2202      	movs	r2, #2
 80117e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	4a2b      	ldr	r2, [pc, #172]	@ (801189c <HAL_TIM_Base_Start+0xd4>)
 80117ee:	4293      	cmp	r3, r2
 80117f0:	d02c      	beq.n	801184c <HAL_TIM_Base_Start+0x84>
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80117fa:	d027      	beq.n	801184c <HAL_TIM_Base_Start+0x84>
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	4a27      	ldr	r2, [pc, #156]	@ (80118a0 <HAL_TIM_Base_Start+0xd8>)
 8011802:	4293      	cmp	r3, r2
 8011804:	d022      	beq.n	801184c <HAL_TIM_Base_Start+0x84>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	4a26      	ldr	r2, [pc, #152]	@ (80118a4 <HAL_TIM_Base_Start+0xdc>)
 801180c:	4293      	cmp	r3, r2
 801180e:	d01d      	beq.n	801184c <HAL_TIM_Base_Start+0x84>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	4a24      	ldr	r2, [pc, #144]	@ (80118a8 <HAL_TIM_Base_Start+0xe0>)
 8011816:	4293      	cmp	r3, r2
 8011818:	d018      	beq.n	801184c <HAL_TIM_Base_Start+0x84>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	4a23      	ldr	r2, [pc, #140]	@ (80118ac <HAL_TIM_Base_Start+0xe4>)
 8011820:	4293      	cmp	r3, r2
 8011822:	d013      	beq.n	801184c <HAL_TIM_Base_Start+0x84>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4a21      	ldr	r2, [pc, #132]	@ (80118b0 <HAL_TIM_Base_Start+0xe8>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d00e      	beq.n	801184c <HAL_TIM_Base_Start+0x84>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	4a20      	ldr	r2, [pc, #128]	@ (80118b4 <HAL_TIM_Base_Start+0xec>)
 8011834:	4293      	cmp	r3, r2
 8011836:	d009      	beq.n	801184c <HAL_TIM_Base_Start+0x84>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	4a1e      	ldr	r2, [pc, #120]	@ (80118b8 <HAL_TIM_Base_Start+0xf0>)
 801183e:	4293      	cmp	r3, r2
 8011840:	d004      	beq.n	801184c <HAL_TIM_Base_Start+0x84>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	4a1d      	ldr	r2, [pc, #116]	@ (80118bc <HAL_TIM_Base_Start+0xf4>)
 8011848:	4293      	cmp	r3, r2
 801184a:	d115      	bne.n	8011878 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	689a      	ldr	r2, [r3, #8]
 8011852:	4b1b      	ldr	r3, [pc, #108]	@ (80118c0 <HAL_TIM_Base_Start+0xf8>)
 8011854:	4013      	ands	r3, r2
 8011856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	2b06      	cmp	r3, #6
 801185c:	d015      	beq.n	801188a <HAL_TIM_Base_Start+0xc2>
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011864:	d011      	beq.n	801188a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	f042 0201 	orr.w	r2, r2, #1
 8011874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011876:	e008      	b.n	801188a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	f042 0201 	orr.w	r2, r2, #1
 8011886:	601a      	str	r2, [r3, #0]
 8011888:	e000      	b.n	801188c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801188a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801188c:	2300      	movs	r3, #0
}
 801188e:	4618      	mov	r0, r3
 8011890:	3714      	adds	r7, #20
 8011892:	46bd      	mov	sp, r7
 8011894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011898:	4770      	bx	lr
 801189a:	bf00      	nop
 801189c:	40010000 	.word	0x40010000
 80118a0:	40000400 	.word	0x40000400
 80118a4:	40000800 	.word	0x40000800
 80118a8:	40000c00 	.word	0x40000c00
 80118ac:	40010400 	.word	0x40010400
 80118b0:	40001800 	.word	0x40001800
 80118b4:	40014000 	.word	0x40014000
 80118b8:	4000e000 	.word	0x4000e000
 80118bc:	4000e400 	.word	0x4000e400
 80118c0:	00010007 	.word	0x00010007

080118c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80118c4:	b480      	push	{r7}
 80118c6:	b085      	sub	sp, #20
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d001      	beq.n	80118dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80118d8:	2301      	movs	r3, #1
 80118da:	e05e      	b.n	801199a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2202      	movs	r2, #2
 80118e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	68da      	ldr	r2, [r3, #12]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f042 0201 	orr.w	r2, r2, #1
 80118f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	4a2b      	ldr	r2, [pc, #172]	@ (80119a8 <HAL_TIM_Base_Start_IT+0xe4>)
 80118fa:	4293      	cmp	r3, r2
 80118fc:	d02c      	beq.n	8011958 <HAL_TIM_Base_Start_IT+0x94>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011906:	d027      	beq.n	8011958 <HAL_TIM_Base_Start_IT+0x94>
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	4a27      	ldr	r2, [pc, #156]	@ (80119ac <HAL_TIM_Base_Start_IT+0xe8>)
 801190e:	4293      	cmp	r3, r2
 8011910:	d022      	beq.n	8011958 <HAL_TIM_Base_Start_IT+0x94>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	4a26      	ldr	r2, [pc, #152]	@ (80119b0 <HAL_TIM_Base_Start_IT+0xec>)
 8011918:	4293      	cmp	r3, r2
 801191a:	d01d      	beq.n	8011958 <HAL_TIM_Base_Start_IT+0x94>
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	4a24      	ldr	r2, [pc, #144]	@ (80119b4 <HAL_TIM_Base_Start_IT+0xf0>)
 8011922:	4293      	cmp	r3, r2
 8011924:	d018      	beq.n	8011958 <HAL_TIM_Base_Start_IT+0x94>
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	4a23      	ldr	r2, [pc, #140]	@ (80119b8 <HAL_TIM_Base_Start_IT+0xf4>)
 801192c:	4293      	cmp	r3, r2
 801192e:	d013      	beq.n	8011958 <HAL_TIM_Base_Start_IT+0x94>
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	4a21      	ldr	r2, [pc, #132]	@ (80119bc <HAL_TIM_Base_Start_IT+0xf8>)
 8011936:	4293      	cmp	r3, r2
 8011938:	d00e      	beq.n	8011958 <HAL_TIM_Base_Start_IT+0x94>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	4a20      	ldr	r2, [pc, #128]	@ (80119c0 <HAL_TIM_Base_Start_IT+0xfc>)
 8011940:	4293      	cmp	r3, r2
 8011942:	d009      	beq.n	8011958 <HAL_TIM_Base_Start_IT+0x94>
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	4a1e      	ldr	r2, [pc, #120]	@ (80119c4 <HAL_TIM_Base_Start_IT+0x100>)
 801194a:	4293      	cmp	r3, r2
 801194c:	d004      	beq.n	8011958 <HAL_TIM_Base_Start_IT+0x94>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	4a1d      	ldr	r2, [pc, #116]	@ (80119c8 <HAL_TIM_Base_Start_IT+0x104>)
 8011954:	4293      	cmp	r3, r2
 8011956:	d115      	bne.n	8011984 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	689a      	ldr	r2, [r3, #8]
 801195e:	4b1b      	ldr	r3, [pc, #108]	@ (80119cc <HAL_TIM_Base_Start_IT+0x108>)
 8011960:	4013      	ands	r3, r2
 8011962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	2b06      	cmp	r3, #6
 8011968:	d015      	beq.n	8011996 <HAL_TIM_Base_Start_IT+0xd2>
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011970:	d011      	beq.n	8011996 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	f042 0201 	orr.w	r2, r2, #1
 8011980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011982:	e008      	b.n	8011996 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f042 0201 	orr.w	r2, r2, #1
 8011992:	601a      	str	r2, [r3, #0]
 8011994:	e000      	b.n	8011998 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011998:	2300      	movs	r3, #0
}
 801199a:	4618      	mov	r0, r3
 801199c:	3714      	adds	r7, #20
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	40010000 	.word	0x40010000
 80119ac:	40000400 	.word	0x40000400
 80119b0:	40000800 	.word	0x40000800
 80119b4:	40000c00 	.word	0x40000c00
 80119b8:	40010400 	.word	0x40010400
 80119bc:	40001800 	.word	0x40001800
 80119c0:	40014000 	.word	0x40014000
 80119c4:	4000e000 	.word	0x4000e000
 80119c8:	4000e400 	.word	0x4000e400
 80119cc:	00010007 	.word	0x00010007

080119d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d101      	bne.n	80119e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80119de:	2301      	movs	r3, #1
 80119e0:	e049      	b.n	8011a76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80119e8:	b2db      	uxtb	r3, r3
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d106      	bne.n	80119fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2200      	movs	r2, #0
 80119f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f000 f841 	bl	8011a7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2202      	movs	r2, #2
 8011a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681a      	ldr	r2, [r3, #0]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	3304      	adds	r3, #4
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	4610      	mov	r0, r2
 8011a10:	f001 f848 	bl	8012aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2201      	movs	r2, #1
 8011a18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2201      	movs	r2, #1
 8011a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2201      	movs	r2, #1
 8011a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2201      	movs	r2, #1
 8011a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2201      	movs	r2, #1
 8011a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2201      	movs	r2, #1
 8011a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2201      	movs	r2, #1
 8011a48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2201      	movs	r2, #1
 8011a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2201      	movs	r2, #1
 8011a58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2201      	movs	r2, #1
 8011a68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011a74:	2300      	movs	r3, #0
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3708      	adds	r7, #8
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011a7e:	b480      	push	{r7}
 8011a80:	b083      	sub	sp, #12
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011a86:	bf00      	nop
 8011a88:	370c      	adds	r7, #12
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a90:	4770      	bx	lr
	...

08011a94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d109      	bne.n	8011ab8 <HAL_TIM_PWM_Start+0x24>
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	bf14      	ite	ne
 8011ab0:	2301      	movne	r3, #1
 8011ab2:	2300      	moveq	r3, #0
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	e03c      	b.n	8011b32 <HAL_TIM_PWM_Start+0x9e>
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	2b04      	cmp	r3, #4
 8011abc:	d109      	bne.n	8011ad2 <HAL_TIM_PWM_Start+0x3e>
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	2b01      	cmp	r3, #1
 8011ac8:	bf14      	ite	ne
 8011aca:	2301      	movne	r3, #1
 8011acc:	2300      	moveq	r3, #0
 8011ace:	b2db      	uxtb	r3, r3
 8011ad0:	e02f      	b.n	8011b32 <HAL_TIM_PWM_Start+0x9e>
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	2b08      	cmp	r3, #8
 8011ad6:	d109      	bne.n	8011aec <HAL_TIM_PWM_Start+0x58>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	2b01      	cmp	r3, #1
 8011ae2:	bf14      	ite	ne
 8011ae4:	2301      	movne	r3, #1
 8011ae6:	2300      	moveq	r3, #0
 8011ae8:	b2db      	uxtb	r3, r3
 8011aea:	e022      	b.n	8011b32 <HAL_TIM_PWM_Start+0x9e>
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	2b0c      	cmp	r3, #12
 8011af0:	d109      	bne.n	8011b06 <HAL_TIM_PWM_Start+0x72>
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	bf14      	ite	ne
 8011afe:	2301      	movne	r3, #1
 8011b00:	2300      	moveq	r3, #0
 8011b02:	b2db      	uxtb	r3, r3
 8011b04:	e015      	b.n	8011b32 <HAL_TIM_PWM_Start+0x9e>
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	2b10      	cmp	r3, #16
 8011b0a:	d109      	bne.n	8011b20 <HAL_TIM_PWM_Start+0x8c>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011b12:	b2db      	uxtb	r3, r3
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	bf14      	ite	ne
 8011b18:	2301      	movne	r3, #1
 8011b1a:	2300      	moveq	r3, #0
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	e008      	b.n	8011b32 <HAL_TIM_PWM_Start+0x9e>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	bf14      	ite	ne
 8011b2c:	2301      	movne	r3, #1
 8011b2e:	2300      	moveq	r3, #0
 8011b30:	b2db      	uxtb	r3, r3
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d001      	beq.n	8011b3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8011b36:	2301      	movs	r3, #1
 8011b38:	e0ab      	b.n	8011c92 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d104      	bne.n	8011b4a <HAL_TIM_PWM_Start+0xb6>
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2202      	movs	r2, #2
 8011b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011b48:	e023      	b.n	8011b92 <HAL_TIM_PWM_Start+0xfe>
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	2b04      	cmp	r3, #4
 8011b4e:	d104      	bne.n	8011b5a <HAL_TIM_PWM_Start+0xc6>
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2202      	movs	r2, #2
 8011b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011b58:	e01b      	b.n	8011b92 <HAL_TIM_PWM_Start+0xfe>
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	2b08      	cmp	r3, #8
 8011b5e:	d104      	bne.n	8011b6a <HAL_TIM_PWM_Start+0xd6>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2202      	movs	r2, #2
 8011b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011b68:	e013      	b.n	8011b92 <HAL_TIM_PWM_Start+0xfe>
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	2b0c      	cmp	r3, #12
 8011b6e:	d104      	bne.n	8011b7a <HAL_TIM_PWM_Start+0xe6>
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2202      	movs	r2, #2
 8011b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011b78:	e00b      	b.n	8011b92 <HAL_TIM_PWM_Start+0xfe>
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	2b10      	cmp	r3, #16
 8011b7e:	d104      	bne.n	8011b8a <HAL_TIM_PWM_Start+0xf6>
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2202      	movs	r2, #2
 8011b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011b88:	e003      	b.n	8011b92 <HAL_TIM_PWM_Start+0xfe>
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2202      	movs	r2, #2
 8011b8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	2201      	movs	r2, #1
 8011b98:	6839      	ldr	r1, [r7, #0]
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f001 fba8 	bl	80132f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	4a3d      	ldr	r2, [pc, #244]	@ (8011c9c <HAL_TIM_PWM_Start+0x208>)
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	d013      	beq.n	8011bd2 <HAL_TIM_PWM_Start+0x13e>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	4a3c      	ldr	r2, [pc, #240]	@ (8011ca0 <HAL_TIM_PWM_Start+0x20c>)
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	d00e      	beq.n	8011bd2 <HAL_TIM_PWM_Start+0x13e>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8011ca4 <HAL_TIM_PWM_Start+0x210>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d009      	beq.n	8011bd2 <HAL_TIM_PWM_Start+0x13e>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	4a39      	ldr	r2, [pc, #228]	@ (8011ca8 <HAL_TIM_PWM_Start+0x214>)
 8011bc4:	4293      	cmp	r3, r2
 8011bc6:	d004      	beq.n	8011bd2 <HAL_TIM_PWM_Start+0x13e>
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	4a37      	ldr	r2, [pc, #220]	@ (8011cac <HAL_TIM_PWM_Start+0x218>)
 8011bce:	4293      	cmp	r3, r2
 8011bd0:	d101      	bne.n	8011bd6 <HAL_TIM_PWM_Start+0x142>
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	e000      	b.n	8011bd8 <HAL_TIM_PWM_Start+0x144>
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d007      	beq.n	8011bec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011bea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8011c9c <HAL_TIM_PWM_Start+0x208>)
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d02c      	beq.n	8011c50 <HAL_TIM_PWM_Start+0x1bc>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011bfe:	d027      	beq.n	8011c50 <HAL_TIM_PWM_Start+0x1bc>
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	4a2a      	ldr	r2, [pc, #168]	@ (8011cb0 <HAL_TIM_PWM_Start+0x21c>)
 8011c06:	4293      	cmp	r3, r2
 8011c08:	d022      	beq.n	8011c50 <HAL_TIM_PWM_Start+0x1bc>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	4a29      	ldr	r2, [pc, #164]	@ (8011cb4 <HAL_TIM_PWM_Start+0x220>)
 8011c10:	4293      	cmp	r3, r2
 8011c12:	d01d      	beq.n	8011c50 <HAL_TIM_PWM_Start+0x1bc>
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	4a27      	ldr	r2, [pc, #156]	@ (8011cb8 <HAL_TIM_PWM_Start+0x224>)
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	d018      	beq.n	8011c50 <HAL_TIM_PWM_Start+0x1bc>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4a1f      	ldr	r2, [pc, #124]	@ (8011ca0 <HAL_TIM_PWM_Start+0x20c>)
 8011c24:	4293      	cmp	r3, r2
 8011c26:	d013      	beq.n	8011c50 <HAL_TIM_PWM_Start+0x1bc>
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	4a23      	ldr	r2, [pc, #140]	@ (8011cbc <HAL_TIM_PWM_Start+0x228>)
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d00e      	beq.n	8011c50 <HAL_TIM_PWM_Start+0x1bc>
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	4a1b      	ldr	r2, [pc, #108]	@ (8011ca4 <HAL_TIM_PWM_Start+0x210>)
 8011c38:	4293      	cmp	r3, r2
 8011c3a:	d009      	beq.n	8011c50 <HAL_TIM_PWM_Start+0x1bc>
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	4a1f      	ldr	r2, [pc, #124]	@ (8011cc0 <HAL_TIM_PWM_Start+0x22c>)
 8011c42:	4293      	cmp	r3, r2
 8011c44:	d004      	beq.n	8011c50 <HAL_TIM_PWM_Start+0x1bc>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8011cc4 <HAL_TIM_PWM_Start+0x230>)
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d115      	bne.n	8011c7c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	689a      	ldr	r2, [r3, #8]
 8011c56:	4b1c      	ldr	r3, [pc, #112]	@ (8011cc8 <HAL_TIM_PWM_Start+0x234>)
 8011c58:	4013      	ands	r3, r2
 8011c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	2b06      	cmp	r3, #6
 8011c60:	d015      	beq.n	8011c8e <HAL_TIM_PWM_Start+0x1fa>
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011c68:	d011      	beq.n	8011c8e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	681a      	ldr	r2, [r3, #0]
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f042 0201 	orr.w	r2, r2, #1
 8011c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c7a:	e008      	b.n	8011c8e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	f042 0201 	orr.w	r2, r2, #1
 8011c8a:	601a      	str	r2, [r3, #0]
 8011c8c:	e000      	b.n	8011c90 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011c90:	2300      	movs	r3, #0
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	3710      	adds	r7, #16
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	40010000 	.word	0x40010000
 8011ca0:	40010400 	.word	0x40010400
 8011ca4:	40014000 	.word	0x40014000
 8011ca8:	40014400 	.word	0x40014400
 8011cac:	40014800 	.word	0x40014800
 8011cb0:	40000400 	.word	0x40000400
 8011cb4:	40000800 	.word	0x40000800
 8011cb8:	40000c00 	.word	0x40000c00
 8011cbc:	40001800 	.word	0x40001800
 8011cc0:	4000e000 	.word	0x4000e000
 8011cc4:	4000e400 	.word	0x4000e400
 8011cc8:	00010007 	.word	0x00010007

08011ccc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
 8011cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	6839      	ldr	r1, [r7, #0]
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f001 fb06 	bl	80132f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8011de4 <HAL_TIM_PWM_Stop+0x118>)
 8011cea:	4293      	cmp	r3, r2
 8011cec:	d013      	beq.n	8011d16 <HAL_TIM_PWM_Stop+0x4a>
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8011de8 <HAL_TIM_PWM_Stop+0x11c>)
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	d00e      	beq.n	8011d16 <HAL_TIM_PWM_Stop+0x4a>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	4a3b      	ldr	r2, [pc, #236]	@ (8011dec <HAL_TIM_PWM_Stop+0x120>)
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d009      	beq.n	8011d16 <HAL_TIM_PWM_Stop+0x4a>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	4a3a      	ldr	r2, [pc, #232]	@ (8011df0 <HAL_TIM_PWM_Stop+0x124>)
 8011d08:	4293      	cmp	r3, r2
 8011d0a:	d004      	beq.n	8011d16 <HAL_TIM_PWM_Stop+0x4a>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	4a38      	ldr	r2, [pc, #224]	@ (8011df4 <HAL_TIM_PWM_Stop+0x128>)
 8011d12:	4293      	cmp	r3, r2
 8011d14:	d101      	bne.n	8011d1a <HAL_TIM_PWM_Stop+0x4e>
 8011d16:	2301      	movs	r3, #1
 8011d18:	e000      	b.n	8011d1c <HAL_TIM_PWM_Stop+0x50>
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d017      	beq.n	8011d50 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	6a1a      	ldr	r2, [r3, #32]
 8011d26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011d2a:	4013      	ands	r3, r2
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d10f      	bne.n	8011d50 <HAL_TIM_PWM_Stop+0x84>
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	6a1a      	ldr	r2, [r3, #32]
 8011d36:	f240 4344 	movw	r3, #1092	@ 0x444
 8011d3a:	4013      	ands	r3, r2
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d107      	bne.n	8011d50 <HAL_TIM_PWM_Stop+0x84>
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011d4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	6a1a      	ldr	r2, [r3, #32]
 8011d56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011d5a:	4013      	ands	r3, r2
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d10f      	bne.n	8011d80 <HAL_TIM_PWM_Stop+0xb4>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	6a1a      	ldr	r2, [r3, #32]
 8011d66:	f240 4344 	movw	r3, #1092	@ 0x444
 8011d6a:	4013      	ands	r3, r2
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d107      	bne.n	8011d80 <HAL_TIM_PWM_Stop+0xb4>
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	681a      	ldr	r2, [r3, #0]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	f022 0201 	bic.w	r2, r2, #1
 8011d7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d104      	bne.n	8011d90 <HAL_TIM_PWM_Stop+0xc4>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2201      	movs	r2, #1
 8011d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011d8e:	e023      	b.n	8011dd8 <HAL_TIM_PWM_Stop+0x10c>
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	2b04      	cmp	r3, #4
 8011d94:	d104      	bne.n	8011da0 <HAL_TIM_PWM_Stop+0xd4>
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2201      	movs	r2, #1
 8011d9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011d9e:	e01b      	b.n	8011dd8 <HAL_TIM_PWM_Stop+0x10c>
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	2b08      	cmp	r3, #8
 8011da4:	d104      	bne.n	8011db0 <HAL_TIM_PWM_Stop+0xe4>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2201      	movs	r2, #1
 8011daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011dae:	e013      	b.n	8011dd8 <HAL_TIM_PWM_Stop+0x10c>
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	2b0c      	cmp	r3, #12
 8011db4:	d104      	bne.n	8011dc0 <HAL_TIM_PWM_Stop+0xf4>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2201      	movs	r2, #1
 8011dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011dbe:	e00b      	b.n	8011dd8 <HAL_TIM_PWM_Stop+0x10c>
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	2b10      	cmp	r3, #16
 8011dc4:	d104      	bne.n	8011dd0 <HAL_TIM_PWM_Stop+0x104>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2201      	movs	r2, #1
 8011dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011dce:	e003      	b.n	8011dd8 <HAL_TIM_PWM_Stop+0x10c>
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8011dd8:	2300      	movs	r3, #0
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3708      	adds	r7, #8
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
 8011de2:	bf00      	nop
 8011de4:	40010000 	.word	0x40010000
 8011de8:	40010400 	.word	0x40010400
 8011dec:	40014000 	.word	0x40014000
 8011df0:	40014400 	.word	0x40014400
 8011df4:	40014800 	.word	0x40014800

08011df8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b086      	sub	sp, #24
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	60f8      	str	r0, [r7, #12]
 8011e00:	60b9      	str	r1, [r7, #8]
 8011e02:	607a      	str	r2, [r7, #4]
 8011e04:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8011e06:	2300      	movs	r3, #0
 8011e08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d109      	bne.n	8011e24 <HAL_TIM_PWM_Start_DMA+0x2c>
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011e16:	b2db      	uxtb	r3, r3
 8011e18:	2b02      	cmp	r3, #2
 8011e1a:	bf0c      	ite	eq
 8011e1c:	2301      	moveq	r3, #1
 8011e1e:	2300      	movne	r3, #0
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	e03c      	b.n	8011e9e <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	2b04      	cmp	r3, #4
 8011e28:	d109      	bne.n	8011e3e <HAL_TIM_PWM_Start_DMA+0x46>
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	2b02      	cmp	r3, #2
 8011e34:	bf0c      	ite	eq
 8011e36:	2301      	moveq	r3, #1
 8011e38:	2300      	movne	r3, #0
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	e02f      	b.n	8011e9e <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	2b08      	cmp	r3, #8
 8011e42:	d109      	bne.n	8011e58 <HAL_TIM_PWM_Start_DMA+0x60>
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	2b02      	cmp	r3, #2
 8011e4e:	bf0c      	ite	eq
 8011e50:	2301      	moveq	r3, #1
 8011e52:	2300      	movne	r3, #0
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	e022      	b.n	8011e9e <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	2b0c      	cmp	r3, #12
 8011e5c:	d109      	bne.n	8011e72 <HAL_TIM_PWM_Start_DMA+0x7a>
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	2b02      	cmp	r3, #2
 8011e68:	bf0c      	ite	eq
 8011e6a:	2301      	moveq	r3, #1
 8011e6c:	2300      	movne	r3, #0
 8011e6e:	b2db      	uxtb	r3, r3
 8011e70:	e015      	b.n	8011e9e <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	2b10      	cmp	r3, #16
 8011e76:	d109      	bne.n	8011e8c <HAL_TIM_PWM_Start_DMA+0x94>
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011e7e:	b2db      	uxtb	r3, r3
 8011e80:	2b02      	cmp	r3, #2
 8011e82:	bf0c      	ite	eq
 8011e84:	2301      	moveq	r3, #1
 8011e86:	2300      	movne	r3, #0
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	e008      	b.n	8011e9e <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	2b02      	cmp	r3, #2
 8011e96:	bf0c      	ite	eq
 8011e98:	2301      	moveq	r3, #1
 8011e9a:	2300      	movne	r3, #0
 8011e9c:	b2db      	uxtb	r3, r3
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d001      	beq.n	8011ea6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8011ea2:	2302      	movs	r3, #2
 8011ea4:	e1ba      	b.n	801221c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d109      	bne.n	8011ec0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	bf0c      	ite	eq
 8011eb8:	2301      	moveq	r3, #1
 8011eba:	2300      	movne	r3, #0
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	e03c      	b.n	8011f3a <HAL_TIM_PWM_Start_DMA+0x142>
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	2b04      	cmp	r3, #4
 8011ec4:	d109      	bne.n	8011eda <HAL_TIM_PWM_Start_DMA+0xe2>
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011ecc:	b2db      	uxtb	r3, r3
 8011ece:	2b01      	cmp	r3, #1
 8011ed0:	bf0c      	ite	eq
 8011ed2:	2301      	moveq	r3, #1
 8011ed4:	2300      	movne	r3, #0
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	e02f      	b.n	8011f3a <HAL_TIM_PWM_Start_DMA+0x142>
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	2b08      	cmp	r3, #8
 8011ede:	d109      	bne.n	8011ef4 <HAL_TIM_PWM_Start_DMA+0xfc>
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ee6:	b2db      	uxtb	r3, r3
 8011ee8:	2b01      	cmp	r3, #1
 8011eea:	bf0c      	ite	eq
 8011eec:	2301      	moveq	r3, #1
 8011eee:	2300      	movne	r3, #0
 8011ef0:	b2db      	uxtb	r3, r3
 8011ef2:	e022      	b.n	8011f3a <HAL_TIM_PWM_Start_DMA+0x142>
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	2b0c      	cmp	r3, #12
 8011ef8:	d109      	bne.n	8011f0e <HAL_TIM_PWM_Start_DMA+0x116>
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011f00:	b2db      	uxtb	r3, r3
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	bf0c      	ite	eq
 8011f06:	2301      	moveq	r3, #1
 8011f08:	2300      	movne	r3, #0
 8011f0a:	b2db      	uxtb	r3, r3
 8011f0c:	e015      	b.n	8011f3a <HAL_TIM_PWM_Start_DMA+0x142>
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	2b10      	cmp	r3, #16
 8011f12:	d109      	bne.n	8011f28 <HAL_TIM_PWM_Start_DMA+0x130>
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011f1a:	b2db      	uxtb	r3, r3
 8011f1c:	2b01      	cmp	r3, #1
 8011f1e:	bf0c      	ite	eq
 8011f20:	2301      	moveq	r3, #1
 8011f22:	2300      	movne	r3, #0
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	e008      	b.n	8011f3a <HAL_TIM_PWM_Start_DMA+0x142>
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011f2e:	b2db      	uxtb	r3, r3
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	bf0c      	ite	eq
 8011f34:	2301      	moveq	r3, #1
 8011f36:	2300      	movne	r3, #0
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d034      	beq.n	8011fa8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d002      	beq.n	8011f4a <HAL_TIM_PWM_Start_DMA+0x152>
 8011f44:	887b      	ldrh	r3, [r7, #2]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d101      	bne.n	8011f4e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	e166      	b.n	801221c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d104      	bne.n	8011f5e <HAL_TIM_PWM_Start_DMA+0x166>
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	2202      	movs	r2, #2
 8011f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011f5c:	e026      	b.n	8011fac <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011f5e:	68bb      	ldr	r3, [r7, #8]
 8011f60:	2b04      	cmp	r3, #4
 8011f62:	d104      	bne.n	8011f6e <HAL_TIM_PWM_Start_DMA+0x176>
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	2202      	movs	r2, #2
 8011f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011f6c:	e01e      	b.n	8011fac <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	2b08      	cmp	r3, #8
 8011f72:	d104      	bne.n	8011f7e <HAL_TIM_PWM_Start_DMA+0x186>
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2202      	movs	r2, #2
 8011f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011f7c:	e016      	b.n	8011fac <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	2b0c      	cmp	r3, #12
 8011f82:	d104      	bne.n	8011f8e <HAL_TIM_PWM_Start_DMA+0x196>
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	2202      	movs	r2, #2
 8011f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011f8c:	e00e      	b.n	8011fac <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	2b10      	cmp	r3, #16
 8011f92:	d104      	bne.n	8011f9e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	2202      	movs	r2, #2
 8011f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011f9c:	e006      	b.n	8011fac <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	2202      	movs	r2, #2
 8011fa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011fa6:	e001      	b.n	8011fac <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8011fa8:	2301      	movs	r3, #1
 8011faa:	e137      	b.n	801221c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	2b0c      	cmp	r3, #12
 8011fb0:	f200 80ae 	bhi.w	8012110 <HAL_TIM_PWM_Start_DMA+0x318>
 8011fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8011fbc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8011fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fba:	bf00      	nop
 8011fbc:	08011ff1 	.word	0x08011ff1
 8011fc0:	08012111 	.word	0x08012111
 8011fc4:	08012111 	.word	0x08012111
 8011fc8:	08012111 	.word	0x08012111
 8011fcc:	08012039 	.word	0x08012039
 8011fd0:	08012111 	.word	0x08012111
 8011fd4:	08012111 	.word	0x08012111
 8011fd8:	08012111 	.word	0x08012111
 8011fdc:	08012081 	.word	0x08012081
 8011fe0:	08012111 	.word	0x08012111
 8011fe4:	08012111 	.word	0x08012111
 8011fe8:	08012111 	.word	0x08012111
 8011fec:	080120c9 	.word	0x080120c9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ff4:	4a8b      	ldr	r2, [pc, #556]	@ (8012224 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8011ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ffc:	4a8a      	ldr	r2, [pc, #552]	@ (8012228 <HAL_TIM_PWM_Start_DMA+0x430>)
 8011ffe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012004:	4a89      	ldr	r2, [pc, #548]	@ (801222c <HAL_TIM_PWM_Start_DMA+0x434>)
 8012006:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801200c:	6879      	ldr	r1, [r7, #4]
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	3334      	adds	r3, #52	@ 0x34
 8012014:	461a      	mov	r2, r3
 8012016:	887b      	ldrh	r3, [r7, #2]
 8012018:	f7f7 fd72 	bl	8009b00 <HAL_DMA_Start_IT>
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	d001      	beq.n	8012026 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012022:	2301      	movs	r3, #1
 8012024:	e0fa      	b.n	801221c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	68da      	ldr	r2, [r3, #12]
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012034:	60da      	str	r2, [r3, #12]
      break;
 8012036:	e06e      	b.n	8012116 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801203c:	4a79      	ldr	r2, [pc, #484]	@ (8012224 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801203e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012044:	4a78      	ldr	r2, [pc, #480]	@ (8012228 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012046:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801204c:	4a77      	ldr	r2, [pc, #476]	@ (801222c <HAL_TIM_PWM_Start_DMA+0x434>)
 801204e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8012054:	6879      	ldr	r1, [r7, #4]
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	3338      	adds	r3, #56	@ 0x38
 801205c:	461a      	mov	r2, r3
 801205e:	887b      	ldrh	r3, [r7, #2]
 8012060:	f7f7 fd4e 	bl	8009b00 <HAL_DMA_Start_IT>
 8012064:	4603      	mov	r3, r0
 8012066:	2b00      	cmp	r3, #0
 8012068:	d001      	beq.n	801206e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801206a:	2301      	movs	r3, #1
 801206c:	e0d6      	b.n	801221c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	68da      	ldr	r2, [r3, #12]
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801207c:	60da      	str	r2, [r3, #12]
      break;
 801207e:	e04a      	b.n	8012116 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012084:	4a67      	ldr	r2, [pc, #412]	@ (8012224 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012086:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801208c:	4a66      	ldr	r2, [pc, #408]	@ (8012228 <HAL_TIM_PWM_Start_DMA+0x430>)
 801208e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012094:	4a65      	ldr	r2, [pc, #404]	@ (801222c <HAL_TIM_PWM_Start_DMA+0x434>)
 8012096:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801209c:	6879      	ldr	r1, [r7, #4]
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	333c      	adds	r3, #60	@ 0x3c
 80120a4:	461a      	mov	r2, r3
 80120a6:	887b      	ldrh	r3, [r7, #2]
 80120a8:	f7f7 fd2a 	bl	8009b00 <HAL_DMA_Start_IT>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d001      	beq.n	80120b6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80120b2:	2301      	movs	r3, #1
 80120b4:	e0b2      	b.n	801221c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	68da      	ldr	r2, [r3, #12]
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80120c4:	60da      	str	r2, [r3, #12]
      break;
 80120c6:	e026      	b.n	8012116 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120cc:	4a55      	ldr	r2, [pc, #340]	@ (8012224 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80120ce:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120d4:	4a54      	ldr	r2, [pc, #336]	@ (8012228 <HAL_TIM_PWM_Start_DMA+0x430>)
 80120d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120dc:	4a53      	ldr	r2, [pc, #332]	@ (801222c <HAL_TIM_PWM_Start_DMA+0x434>)
 80120de:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80120e4:	6879      	ldr	r1, [r7, #4]
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	3340      	adds	r3, #64	@ 0x40
 80120ec:	461a      	mov	r2, r3
 80120ee:	887b      	ldrh	r3, [r7, #2]
 80120f0:	f7f7 fd06 	bl	8009b00 <HAL_DMA_Start_IT>
 80120f4:	4603      	mov	r3, r0
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d001      	beq.n	80120fe <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80120fa:	2301      	movs	r3, #1
 80120fc:	e08e      	b.n	801221c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	68da      	ldr	r2, [r3, #12]
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801210c:	60da      	str	r2, [r3, #12]
      break;
 801210e:	e002      	b.n	8012116 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8012110:	2301      	movs	r3, #1
 8012112:	75fb      	strb	r3, [r7, #23]
      break;
 8012114:	bf00      	nop
  }

  if (status == HAL_OK)
 8012116:	7dfb      	ldrb	r3, [r7, #23]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d17e      	bne.n	801221a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	2201      	movs	r2, #1
 8012122:	68b9      	ldr	r1, [r7, #8]
 8012124:	4618      	mov	r0, r3
 8012126:	f001 f8e3 	bl	80132f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	4a40      	ldr	r2, [pc, #256]	@ (8012230 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012130:	4293      	cmp	r3, r2
 8012132:	d013      	beq.n	801215c <HAL_TIM_PWM_Start_DMA+0x364>
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	4a3e      	ldr	r2, [pc, #248]	@ (8012234 <HAL_TIM_PWM_Start_DMA+0x43c>)
 801213a:	4293      	cmp	r3, r2
 801213c:	d00e      	beq.n	801215c <HAL_TIM_PWM_Start_DMA+0x364>
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	4a3d      	ldr	r2, [pc, #244]	@ (8012238 <HAL_TIM_PWM_Start_DMA+0x440>)
 8012144:	4293      	cmp	r3, r2
 8012146:	d009      	beq.n	801215c <HAL_TIM_PWM_Start_DMA+0x364>
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	4a3b      	ldr	r2, [pc, #236]	@ (801223c <HAL_TIM_PWM_Start_DMA+0x444>)
 801214e:	4293      	cmp	r3, r2
 8012150:	d004      	beq.n	801215c <HAL_TIM_PWM_Start_DMA+0x364>
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	4a3a      	ldr	r2, [pc, #232]	@ (8012240 <HAL_TIM_PWM_Start_DMA+0x448>)
 8012158:	4293      	cmp	r3, r2
 801215a:	d101      	bne.n	8012160 <HAL_TIM_PWM_Start_DMA+0x368>
 801215c:	2301      	movs	r3, #1
 801215e:	e000      	b.n	8012162 <HAL_TIM_PWM_Start_DMA+0x36a>
 8012160:	2300      	movs	r3, #0
 8012162:	2b00      	cmp	r3, #0
 8012164:	d007      	beq.n	8012176 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	4a2d      	ldr	r2, [pc, #180]	@ (8012230 <HAL_TIM_PWM_Start_DMA+0x438>)
 801217c:	4293      	cmp	r3, r2
 801217e:	d02c      	beq.n	80121da <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012188:	d027      	beq.n	80121da <HAL_TIM_PWM_Start_DMA+0x3e2>
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	4a2d      	ldr	r2, [pc, #180]	@ (8012244 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8012190:	4293      	cmp	r3, r2
 8012192:	d022      	beq.n	80121da <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	4a2b      	ldr	r2, [pc, #172]	@ (8012248 <HAL_TIM_PWM_Start_DMA+0x450>)
 801219a:	4293      	cmp	r3, r2
 801219c:	d01d      	beq.n	80121da <HAL_TIM_PWM_Start_DMA+0x3e2>
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	4a2a      	ldr	r2, [pc, #168]	@ (801224c <HAL_TIM_PWM_Start_DMA+0x454>)
 80121a4:	4293      	cmp	r3, r2
 80121a6:	d018      	beq.n	80121da <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	4a21      	ldr	r2, [pc, #132]	@ (8012234 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80121ae:	4293      	cmp	r3, r2
 80121b0:	d013      	beq.n	80121da <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	4a26      	ldr	r2, [pc, #152]	@ (8012250 <HAL_TIM_PWM_Start_DMA+0x458>)
 80121b8:	4293      	cmp	r3, r2
 80121ba:	d00e      	beq.n	80121da <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	4a1d      	ldr	r2, [pc, #116]	@ (8012238 <HAL_TIM_PWM_Start_DMA+0x440>)
 80121c2:	4293      	cmp	r3, r2
 80121c4:	d009      	beq.n	80121da <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	4a22      	ldr	r2, [pc, #136]	@ (8012254 <HAL_TIM_PWM_Start_DMA+0x45c>)
 80121cc:	4293      	cmp	r3, r2
 80121ce:	d004      	beq.n	80121da <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	4a20      	ldr	r2, [pc, #128]	@ (8012258 <HAL_TIM_PWM_Start_DMA+0x460>)
 80121d6:	4293      	cmp	r3, r2
 80121d8:	d115      	bne.n	8012206 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	689a      	ldr	r2, [r3, #8]
 80121e0:	4b1e      	ldr	r3, [pc, #120]	@ (801225c <HAL_TIM_PWM_Start_DMA+0x464>)
 80121e2:	4013      	ands	r3, r2
 80121e4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	2b06      	cmp	r3, #6
 80121ea:	d015      	beq.n	8012218 <HAL_TIM_PWM_Start_DMA+0x420>
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80121f2:	d011      	beq.n	8012218 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	681a      	ldr	r2, [r3, #0]
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	f042 0201 	orr.w	r2, r2, #1
 8012202:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012204:	e008      	b.n	8012218 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	681a      	ldr	r2, [r3, #0]
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	f042 0201 	orr.w	r2, r2, #1
 8012214:	601a      	str	r2, [r3, #0]
 8012216:	e000      	b.n	801221a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012218:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801221a:	7dfb      	ldrb	r3, [r7, #23]
}
 801221c:	4618      	mov	r0, r3
 801221e:	3718      	adds	r7, #24
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	08012993 	.word	0x08012993
 8012228:	08012a3b 	.word	0x08012a3b
 801222c:	08012901 	.word	0x08012901
 8012230:	40010000 	.word	0x40010000
 8012234:	40010400 	.word	0x40010400
 8012238:	40014000 	.word	0x40014000
 801223c:	40014400 	.word	0x40014400
 8012240:	40014800 	.word	0x40014800
 8012244:	40000400 	.word	0x40000400
 8012248:	40000800 	.word	0x40000800
 801224c:	40000c00 	.word	0x40000c00
 8012250:	40001800 	.word	0x40001800
 8012254:	4000e000 	.word	0x4000e000
 8012258:	4000e400 	.word	0x4000e400
 801225c:	00010007 	.word	0x00010007

08012260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	691b      	ldr	r3, [r3, #16]
 8012276:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	f003 0302 	and.w	r3, r3, #2
 801227e:	2b00      	cmp	r3, #0
 8012280:	d020      	beq.n	80122c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	f003 0302 	and.w	r3, r3, #2
 8012288:	2b00      	cmp	r3, #0
 801228a:	d01b      	beq.n	80122c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	f06f 0202 	mvn.w	r2, #2
 8012294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2201      	movs	r2, #1
 801229a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	699b      	ldr	r3, [r3, #24]
 80122a2:	f003 0303 	and.w	r3, r3, #3
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d003      	beq.n	80122b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f000 faf6 	bl	801289c <HAL_TIM_IC_CaptureCallback>
 80122b0:	e005      	b.n	80122be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f000 fae8 	bl	8012888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 faf9 	bl	80128b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2200      	movs	r2, #0
 80122c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	f003 0304 	and.w	r3, r3, #4
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d020      	beq.n	8012310 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	f003 0304 	and.w	r3, r3, #4
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d01b      	beq.n	8012310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f06f 0204 	mvn.w	r2, #4
 80122e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	2202      	movs	r2, #2
 80122e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	699b      	ldr	r3, [r3, #24]
 80122ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d003      	beq.n	80122fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 fad0 	bl	801289c <HAL_TIM_IC_CaptureCallback>
 80122fc:	e005      	b.n	801230a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 fac2 	bl	8012888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f000 fad3 	bl	80128b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2200      	movs	r2, #0
 801230e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	f003 0308 	and.w	r3, r3, #8
 8012316:	2b00      	cmp	r3, #0
 8012318:	d020      	beq.n	801235c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f003 0308 	and.w	r3, r3, #8
 8012320:	2b00      	cmp	r3, #0
 8012322:	d01b      	beq.n	801235c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	f06f 0208 	mvn.w	r2, #8
 801232c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2204      	movs	r2, #4
 8012332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	69db      	ldr	r3, [r3, #28]
 801233a:	f003 0303 	and.w	r3, r3, #3
 801233e:	2b00      	cmp	r3, #0
 8012340:	d003      	beq.n	801234a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f000 faaa 	bl	801289c <HAL_TIM_IC_CaptureCallback>
 8012348:	e005      	b.n	8012356 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f000 fa9c 	bl	8012888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f000 faad 	bl	80128b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2200      	movs	r2, #0
 801235a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	f003 0310 	and.w	r3, r3, #16
 8012362:	2b00      	cmp	r3, #0
 8012364:	d020      	beq.n	80123a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	f003 0310 	and.w	r3, r3, #16
 801236c:	2b00      	cmp	r3, #0
 801236e:	d01b      	beq.n	80123a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	f06f 0210 	mvn.w	r2, #16
 8012378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2208      	movs	r2, #8
 801237e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	69db      	ldr	r3, [r3, #28]
 8012386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801238a:	2b00      	cmp	r3, #0
 801238c:	d003      	beq.n	8012396 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f000 fa84 	bl	801289c <HAL_TIM_IC_CaptureCallback>
 8012394:	e005      	b.n	80123a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f000 fa76 	bl	8012888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f000 fa87 	bl	80128b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2200      	movs	r2, #0
 80123a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	f003 0301 	and.w	r3, r3, #1
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d00c      	beq.n	80123cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	f003 0301 	and.w	r3, r3, #1
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d007      	beq.n	80123cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f06f 0201 	mvn.w	r2, #1
 80123c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f7ee ff66 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d104      	bne.n	80123e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d00c      	beq.n	80123fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d007      	beq.n	80123fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80123f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f001 f847 	bl	8013488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012400:	2b00      	cmp	r3, #0
 8012402:	d00c      	beq.n	801241e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801240a:	2b00      	cmp	r3, #0
 801240c:	d007      	beq.n	801241e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8012416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f001 f83f 	bl	801349c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012424:	2b00      	cmp	r3, #0
 8012426:	d00c      	beq.n	8012442 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801242e:	2b00      	cmp	r3, #0
 8012430:	d007      	beq.n	8012442 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801243a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f000 fa4b 	bl	80128d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	f003 0320 	and.w	r3, r3, #32
 8012448:	2b00      	cmp	r3, #0
 801244a:	d00c      	beq.n	8012466 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	f003 0320 	and.w	r3, r3, #32
 8012452:	2b00      	cmp	r3, #0
 8012454:	d007      	beq.n	8012466 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	f06f 0220 	mvn.w	r2, #32
 801245e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f001 f807 	bl	8013474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012466:	bf00      	nop
 8012468:	3710      	adds	r7, #16
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}
	...

08012470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b086      	sub	sp, #24
 8012474:	af00      	add	r7, sp, #0
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801247c:	2300      	movs	r3, #0
 801247e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012486:	2b01      	cmp	r3, #1
 8012488:	d101      	bne.n	801248e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801248a:	2302      	movs	r3, #2
 801248c:	e0ff      	b.n	801268e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	2201      	movs	r2, #1
 8012492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2b14      	cmp	r3, #20
 801249a:	f200 80f0 	bhi.w	801267e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801249e:	a201      	add	r2, pc, #4	@ (adr r2, 80124a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80124a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124a4:	080124f9 	.word	0x080124f9
 80124a8:	0801267f 	.word	0x0801267f
 80124ac:	0801267f 	.word	0x0801267f
 80124b0:	0801267f 	.word	0x0801267f
 80124b4:	08012539 	.word	0x08012539
 80124b8:	0801267f 	.word	0x0801267f
 80124bc:	0801267f 	.word	0x0801267f
 80124c0:	0801267f 	.word	0x0801267f
 80124c4:	0801257b 	.word	0x0801257b
 80124c8:	0801267f 	.word	0x0801267f
 80124cc:	0801267f 	.word	0x0801267f
 80124d0:	0801267f 	.word	0x0801267f
 80124d4:	080125bb 	.word	0x080125bb
 80124d8:	0801267f 	.word	0x0801267f
 80124dc:	0801267f 	.word	0x0801267f
 80124e0:	0801267f 	.word	0x0801267f
 80124e4:	080125fd 	.word	0x080125fd
 80124e8:	0801267f 	.word	0x0801267f
 80124ec:	0801267f 	.word	0x0801267f
 80124f0:	0801267f 	.word	0x0801267f
 80124f4:	0801263d 	.word	0x0801263d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	68b9      	ldr	r1, [r7, #8]
 80124fe:	4618      	mov	r0, r3
 8012500:	f000 fb82 	bl	8012c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	699a      	ldr	r2, [r3, #24]
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f042 0208 	orr.w	r2, r2, #8
 8012512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	699a      	ldr	r2, [r3, #24]
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	f022 0204 	bic.w	r2, r2, #4
 8012522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	6999      	ldr	r1, [r3, #24]
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	691a      	ldr	r2, [r3, #16]
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	430a      	orrs	r2, r1
 8012534:	619a      	str	r2, [r3, #24]
      break;
 8012536:	e0a5      	b.n	8012684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	68b9      	ldr	r1, [r7, #8]
 801253e:	4618      	mov	r0, r3
 8012540:	f000 fbf2 	bl	8012d28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	699a      	ldr	r2, [r3, #24]
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	699a      	ldr	r2, [r3, #24]
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	6999      	ldr	r1, [r3, #24]
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	691b      	ldr	r3, [r3, #16]
 801256e:	021a      	lsls	r2, r3, #8
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	430a      	orrs	r2, r1
 8012576:	619a      	str	r2, [r3, #24]
      break;
 8012578:	e084      	b.n	8012684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	68b9      	ldr	r1, [r7, #8]
 8012580:	4618      	mov	r0, r3
 8012582:	f000 fc5b 	bl	8012e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	69da      	ldr	r2, [r3, #28]
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	f042 0208 	orr.w	r2, r2, #8
 8012594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	69da      	ldr	r2, [r3, #28]
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	f022 0204 	bic.w	r2, r2, #4
 80125a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	69d9      	ldr	r1, [r3, #28]
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	691a      	ldr	r2, [r3, #16]
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	430a      	orrs	r2, r1
 80125b6:	61da      	str	r2, [r3, #28]
      break;
 80125b8:	e064      	b.n	8012684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	68b9      	ldr	r1, [r7, #8]
 80125c0:	4618      	mov	r0, r3
 80125c2:	f000 fcc3 	bl	8012f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	69da      	ldr	r2, [r3, #28]
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80125d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	69da      	ldr	r2, [r3, #28]
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80125e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	69d9      	ldr	r1, [r3, #28]
 80125ec:	68bb      	ldr	r3, [r7, #8]
 80125ee:	691b      	ldr	r3, [r3, #16]
 80125f0:	021a      	lsls	r2, r3, #8
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	430a      	orrs	r2, r1
 80125f8:	61da      	str	r2, [r3, #28]
      break;
 80125fa:	e043      	b.n	8012684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	68b9      	ldr	r1, [r7, #8]
 8012602:	4618      	mov	r0, r3
 8012604:	f000 fd0c 	bl	8013020 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	f042 0208 	orr.w	r2, r2, #8
 8012616:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	f022 0204 	bic.w	r2, r2, #4
 8012626:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	691a      	ldr	r2, [r3, #16]
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	430a      	orrs	r2, r1
 8012638:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801263a:	e023      	b.n	8012684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	68b9      	ldr	r1, [r7, #8]
 8012642:	4618      	mov	r0, r3
 8012644:	f000 fd50 	bl	80130e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012656:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012666:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	691b      	ldr	r3, [r3, #16]
 8012672:	021a      	lsls	r2, r3, #8
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	430a      	orrs	r2, r1
 801267a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801267c:	e002      	b.n	8012684 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801267e:	2301      	movs	r3, #1
 8012680:	75fb      	strb	r3, [r7, #23]
      break;
 8012682:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2200      	movs	r2, #0
 8012688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801268c:	7dfb      	ldrb	r3, [r7, #23]
}
 801268e:	4618      	mov	r0, r3
 8012690:	3718      	adds	r7, #24
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop

08012698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b084      	sub	sp, #16
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80126a2:	2300      	movs	r3, #0
 80126a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80126ac:	2b01      	cmp	r3, #1
 80126ae:	d101      	bne.n	80126b4 <HAL_TIM_ConfigClockSource+0x1c>
 80126b0:	2302      	movs	r3, #2
 80126b2:	e0dc      	b.n	801286e <HAL_TIM_ConfigClockSource+0x1d6>
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2201      	movs	r2, #1
 80126b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2202      	movs	r2, #2
 80126c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	689b      	ldr	r3, [r3, #8]
 80126ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80126cc:	68ba      	ldr	r2, [r7, #8]
 80126ce:	4b6a      	ldr	r3, [pc, #424]	@ (8012878 <HAL_TIM_ConfigClockSource+0x1e0>)
 80126d0:	4013      	ands	r3, r2
 80126d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80126da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	68ba      	ldr	r2, [r7, #8]
 80126e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	4a64      	ldr	r2, [pc, #400]	@ (801287c <HAL_TIM_ConfigClockSource+0x1e4>)
 80126ea:	4293      	cmp	r3, r2
 80126ec:	f000 80a9 	beq.w	8012842 <HAL_TIM_ConfigClockSource+0x1aa>
 80126f0:	4a62      	ldr	r2, [pc, #392]	@ (801287c <HAL_TIM_ConfigClockSource+0x1e4>)
 80126f2:	4293      	cmp	r3, r2
 80126f4:	f200 80ae 	bhi.w	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 80126f8:	4a61      	ldr	r2, [pc, #388]	@ (8012880 <HAL_TIM_ConfigClockSource+0x1e8>)
 80126fa:	4293      	cmp	r3, r2
 80126fc:	f000 80a1 	beq.w	8012842 <HAL_TIM_ConfigClockSource+0x1aa>
 8012700:	4a5f      	ldr	r2, [pc, #380]	@ (8012880 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012702:	4293      	cmp	r3, r2
 8012704:	f200 80a6 	bhi.w	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 8012708:	4a5e      	ldr	r2, [pc, #376]	@ (8012884 <HAL_TIM_ConfigClockSource+0x1ec>)
 801270a:	4293      	cmp	r3, r2
 801270c:	f000 8099 	beq.w	8012842 <HAL_TIM_ConfigClockSource+0x1aa>
 8012710:	4a5c      	ldr	r2, [pc, #368]	@ (8012884 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012712:	4293      	cmp	r3, r2
 8012714:	f200 809e 	bhi.w	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 8012718:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801271c:	f000 8091 	beq.w	8012842 <HAL_TIM_ConfigClockSource+0x1aa>
 8012720:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012724:	f200 8096 	bhi.w	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 8012728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801272c:	f000 8089 	beq.w	8012842 <HAL_TIM_ConfigClockSource+0x1aa>
 8012730:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012734:	f200 808e 	bhi.w	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 8012738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801273c:	d03e      	beq.n	80127bc <HAL_TIM_ConfigClockSource+0x124>
 801273e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012742:	f200 8087 	bhi.w	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 8012746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801274a:	f000 8086 	beq.w	801285a <HAL_TIM_ConfigClockSource+0x1c2>
 801274e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012752:	d87f      	bhi.n	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 8012754:	2b70      	cmp	r3, #112	@ 0x70
 8012756:	d01a      	beq.n	801278e <HAL_TIM_ConfigClockSource+0xf6>
 8012758:	2b70      	cmp	r3, #112	@ 0x70
 801275a:	d87b      	bhi.n	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 801275c:	2b60      	cmp	r3, #96	@ 0x60
 801275e:	d050      	beq.n	8012802 <HAL_TIM_ConfigClockSource+0x16a>
 8012760:	2b60      	cmp	r3, #96	@ 0x60
 8012762:	d877      	bhi.n	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 8012764:	2b50      	cmp	r3, #80	@ 0x50
 8012766:	d03c      	beq.n	80127e2 <HAL_TIM_ConfigClockSource+0x14a>
 8012768:	2b50      	cmp	r3, #80	@ 0x50
 801276a:	d873      	bhi.n	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 801276c:	2b40      	cmp	r3, #64	@ 0x40
 801276e:	d058      	beq.n	8012822 <HAL_TIM_ConfigClockSource+0x18a>
 8012770:	2b40      	cmp	r3, #64	@ 0x40
 8012772:	d86f      	bhi.n	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 8012774:	2b30      	cmp	r3, #48	@ 0x30
 8012776:	d064      	beq.n	8012842 <HAL_TIM_ConfigClockSource+0x1aa>
 8012778:	2b30      	cmp	r3, #48	@ 0x30
 801277a:	d86b      	bhi.n	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 801277c:	2b20      	cmp	r3, #32
 801277e:	d060      	beq.n	8012842 <HAL_TIM_ConfigClockSource+0x1aa>
 8012780:	2b20      	cmp	r3, #32
 8012782:	d867      	bhi.n	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
 8012784:	2b00      	cmp	r3, #0
 8012786:	d05c      	beq.n	8012842 <HAL_TIM_ConfigClockSource+0x1aa>
 8012788:	2b10      	cmp	r3, #16
 801278a:	d05a      	beq.n	8012842 <HAL_TIM_ConfigClockSource+0x1aa>
 801278c:	e062      	b.n	8012854 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801279e:	f000 fd87 	bl	80132b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	689b      	ldr	r3, [r3, #8]
 80127a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80127aa:	68bb      	ldr	r3, [r7, #8]
 80127ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80127b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	68ba      	ldr	r2, [r7, #8]
 80127b8:	609a      	str	r2, [r3, #8]
      break;
 80127ba:	e04f      	b.n	801285c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80127cc:	f000 fd70 	bl	80132b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	689a      	ldr	r2, [r3, #8]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80127de:	609a      	str	r2, [r3, #8]
      break;
 80127e0:	e03c      	b.n	801285c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80127ee:	461a      	mov	r2, r3
 80127f0:	f000 fce0 	bl	80131b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	2150      	movs	r1, #80	@ 0x50
 80127fa:	4618      	mov	r0, r3
 80127fc:	f000 fd3a 	bl	8013274 <TIM_ITRx_SetConfig>
      break;
 8012800:	e02c      	b.n	801285c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801280e:	461a      	mov	r2, r3
 8012810:	f000 fcff 	bl	8013212 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	2160      	movs	r1, #96	@ 0x60
 801281a:	4618      	mov	r0, r3
 801281c:	f000 fd2a 	bl	8013274 <TIM_ITRx_SetConfig>
      break;
 8012820:	e01c      	b.n	801285c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801282e:	461a      	mov	r2, r3
 8012830:	f000 fcc0 	bl	80131b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	2140      	movs	r1, #64	@ 0x40
 801283a:	4618      	mov	r0, r3
 801283c:	f000 fd1a 	bl	8013274 <TIM_ITRx_SetConfig>
      break;
 8012840:	e00c      	b.n	801285c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681a      	ldr	r2, [r3, #0]
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4619      	mov	r1, r3
 801284c:	4610      	mov	r0, r2
 801284e:	f000 fd11 	bl	8013274 <TIM_ITRx_SetConfig>
      break;
 8012852:	e003      	b.n	801285c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8012854:	2301      	movs	r3, #1
 8012856:	73fb      	strb	r3, [r7, #15]
      break;
 8012858:	e000      	b.n	801285c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801285a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2201      	movs	r2, #1
 8012860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2200      	movs	r2, #0
 8012868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801286c:	7bfb      	ldrb	r3, [r7, #15]
}
 801286e:	4618      	mov	r0, r3
 8012870:	3710      	adds	r7, #16
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
 8012876:	bf00      	nop
 8012878:	ffceff88 	.word	0xffceff88
 801287c:	00100040 	.word	0x00100040
 8012880:	00100030 	.word	0x00100030
 8012884:	00100020 	.word	0x00100020

08012888 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012888:	b480      	push	{r7}
 801288a:	b083      	sub	sp, #12
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012890:	bf00      	nop
 8012892:	370c      	adds	r7, #12
 8012894:	46bd      	mov	sp, r7
 8012896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289a:	4770      	bx	lr

0801289c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801289c:	b480      	push	{r7}
 801289e:	b083      	sub	sp, #12
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80128a4:	bf00      	nop
 80128a6:	370c      	adds	r7, #12
 80128a8:	46bd      	mov	sp, r7
 80128aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ae:	4770      	bx	lr

080128b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80128b0:	b480      	push	{r7}
 80128b2:	b083      	sub	sp, #12
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80128b8:	bf00      	nop
 80128ba:	370c      	adds	r7, #12
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr

080128c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80128c4:	b480      	push	{r7}
 80128c6:	b083      	sub	sp, #12
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80128cc:	bf00      	nop
 80128ce:	370c      	adds	r7, #12
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr

080128d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80128d8:	b480      	push	{r7}
 80128da:	b083      	sub	sp, #12
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80128e0:	bf00      	nop
 80128e2:	370c      	adds	r7, #12
 80128e4:	46bd      	mov	sp, r7
 80128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ea:	4770      	bx	lr

080128ec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80128ec:	b480      	push	{r7}
 80128ee:	b083      	sub	sp, #12
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80128f4:	bf00      	nop
 80128f6:	370c      	adds	r7, #12
 80128f8:	46bd      	mov	sp, r7
 80128fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fe:	4770      	bx	lr

08012900 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b084      	sub	sp, #16
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801290c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012912:	687a      	ldr	r2, [r7, #4]
 8012914:	429a      	cmp	r2, r3
 8012916:	d107      	bne.n	8012928 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	2201      	movs	r2, #1
 801291c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2201      	movs	r2, #1
 8012922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012926:	e02a      	b.n	801297e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801292c:	687a      	ldr	r2, [r7, #4]
 801292e:	429a      	cmp	r2, r3
 8012930:	d107      	bne.n	8012942 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	2202      	movs	r2, #2
 8012936:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2201      	movs	r2, #1
 801293c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012940:	e01d      	b.n	801297e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012946:	687a      	ldr	r2, [r7, #4]
 8012948:	429a      	cmp	r2, r3
 801294a:	d107      	bne.n	801295c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2204      	movs	r2, #4
 8012950:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	2201      	movs	r2, #1
 8012956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801295a:	e010      	b.n	801297e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	429a      	cmp	r2, r3
 8012964:	d107      	bne.n	8012976 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2208      	movs	r2, #8
 801296a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2201      	movs	r2, #1
 8012970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012974:	e003      	b.n	801297e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	2201      	movs	r2, #1
 801297a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801297e:	68f8      	ldr	r0, [r7, #12]
 8012980:	f7ff ffb4 	bl	80128ec <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2200      	movs	r2, #0
 8012988:	771a      	strb	r2, [r3, #28]
}
 801298a:	bf00      	nop
 801298c:	3710      	adds	r7, #16
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}

08012992 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8012992:	b580      	push	{r7, lr}
 8012994:	b084      	sub	sp, #16
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801299e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129a4:	687a      	ldr	r2, [r7, #4]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d10b      	bne.n	80129c2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	2201      	movs	r2, #1
 80129ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	69db      	ldr	r3, [r3, #28]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d136      	bne.n	8012a26 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2201      	movs	r2, #1
 80129bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80129c0:	e031      	b.n	8012a26 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129c6:	687a      	ldr	r2, [r7, #4]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d10b      	bne.n	80129e4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	2202      	movs	r2, #2
 80129d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	69db      	ldr	r3, [r3, #28]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d125      	bne.n	8012a26 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2201      	movs	r2, #1
 80129de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80129e2:	e020      	b.n	8012a26 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129e8:	687a      	ldr	r2, [r7, #4]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d10b      	bne.n	8012a06 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	2204      	movs	r2, #4
 80129f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	69db      	ldr	r3, [r3, #28]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d114      	bne.n	8012a26 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	2201      	movs	r2, #1
 8012a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012a04:	e00f      	b.n	8012a26 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a0a:	687a      	ldr	r2, [r7, #4]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d10a      	bne.n	8012a26 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	2208      	movs	r2, #8
 8012a14:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	69db      	ldr	r3, [r3, #28]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d103      	bne.n	8012a26 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	2201      	movs	r2, #1
 8012a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012a26:	68f8      	ldr	r0, [r7, #12]
 8012a28:	f7ff ff42 	bl	80128b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	771a      	strb	r2, [r3, #28]
}
 8012a32:	bf00      	nop
 8012a34:	3710      	adds	r7, #16
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}

08012a3a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012a3a:	b580      	push	{r7, lr}
 8012a3c:	b084      	sub	sp, #16
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a46:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a4c:	687a      	ldr	r2, [r7, #4]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d103      	bne.n	8012a5a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	2201      	movs	r2, #1
 8012a56:	771a      	strb	r2, [r3, #28]
 8012a58:	e019      	b.n	8012a8e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a5e:	687a      	ldr	r2, [r7, #4]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d103      	bne.n	8012a6c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	2202      	movs	r2, #2
 8012a68:	771a      	strb	r2, [r3, #28]
 8012a6a:	e010      	b.n	8012a8e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a70:	687a      	ldr	r2, [r7, #4]
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d103      	bne.n	8012a7e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	2204      	movs	r2, #4
 8012a7a:	771a      	strb	r2, [r3, #28]
 8012a7c:	e007      	b.n	8012a8e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a82:	687a      	ldr	r2, [r7, #4]
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d102      	bne.n	8012a8e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2208      	movs	r2, #8
 8012a8c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8012a8e:	68f8      	ldr	r0, [r7, #12]
 8012a90:	f7ff ff18 	bl	80128c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2200      	movs	r2, #0
 8012a98:	771a      	strb	r2, [r3, #28]
}
 8012a9a:	bf00      	nop
 8012a9c:	3710      	adds	r7, #16
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
	...

08012aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	b085      	sub	sp, #20
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	4a4a      	ldr	r2, [pc, #296]	@ (8012be0 <TIM_Base_SetConfig+0x13c>)
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d013      	beq.n	8012ae4 <TIM_Base_SetConfig+0x40>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ac2:	d00f      	beq.n	8012ae4 <TIM_Base_SetConfig+0x40>
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	4a47      	ldr	r2, [pc, #284]	@ (8012be4 <TIM_Base_SetConfig+0x140>)
 8012ac8:	4293      	cmp	r3, r2
 8012aca:	d00b      	beq.n	8012ae4 <TIM_Base_SetConfig+0x40>
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	4a46      	ldr	r2, [pc, #280]	@ (8012be8 <TIM_Base_SetConfig+0x144>)
 8012ad0:	4293      	cmp	r3, r2
 8012ad2:	d007      	beq.n	8012ae4 <TIM_Base_SetConfig+0x40>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	4a45      	ldr	r2, [pc, #276]	@ (8012bec <TIM_Base_SetConfig+0x148>)
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	d003      	beq.n	8012ae4 <TIM_Base_SetConfig+0x40>
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	4a44      	ldr	r2, [pc, #272]	@ (8012bf0 <TIM_Base_SetConfig+0x14c>)
 8012ae0:	4293      	cmp	r3, r2
 8012ae2:	d108      	bne.n	8012af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	68fa      	ldr	r2, [r7, #12]
 8012af2:	4313      	orrs	r3, r2
 8012af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	4a39      	ldr	r2, [pc, #228]	@ (8012be0 <TIM_Base_SetConfig+0x13c>)
 8012afa:	4293      	cmp	r3, r2
 8012afc:	d027      	beq.n	8012b4e <TIM_Base_SetConfig+0xaa>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012b04:	d023      	beq.n	8012b4e <TIM_Base_SetConfig+0xaa>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	4a36      	ldr	r2, [pc, #216]	@ (8012be4 <TIM_Base_SetConfig+0x140>)
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d01f      	beq.n	8012b4e <TIM_Base_SetConfig+0xaa>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	4a35      	ldr	r2, [pc, #212]	@ (8012be8 <TIM_Base_SetConfig+0x144>)
 8012b12:	4293      	cmp	r3, r2
 8012b14:	d01b      	beq.n	8012b4e <TIM_Base_SetConfig+0xaa>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	4a34      	ldr	r2, [pc, #208]	@ (8012bec <TIM_Base_SetConfig+0x148>)
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d017      	beq.n	8012b4e <TIM_Base_SetConfig+0xaa>
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	4a33      	ldr	r2, [pc, #204]	@ (8012bf0 <TIM_Base_SetConfig+0x14c>)
 8012b22:	4293      	cmp	r3, r2
 8012b24:	d013      	beq.n	8012b4e <TIM_Base_SetConfig+0xaa>
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4a32      	ldr	r2, [pc, #200]	@ (8012bf4 <TIM_Base_SetConfig+0x150>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d00f      	beq.n	8012b4e <TIM_Base_SetConfig+0xaa>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4a31      	ldr	r2, [pc, #196]	@ (8012bf8 <TIM_Base_SetConfig+0x154>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d00b      	beq.n	8012b4e <TIM_Base_SetConfig+0xaa>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	4a30      	ldr	r2, [pc, #192]	@ (8012bfc <TIM_Base_SetConfig+0x158>)
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	d007      	beq.n	8012b4e <TIM_Base_SetConfig+0xaa>
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	4a2f      	ldr	r2, [pc, #188]	@ (8012c00 <TIM_Base_SetConfig+0x15c>)
 8012b42:	4293      	cmp	r3, r2
 8012b44:	d003      	beq.n	8012b4e <TIM_Base_SetConfig+0xaa>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4a2e      	ldr	r2, [pc, #184]	@ (8012c04 <TIM_Base_SetConfig+0x160>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d108      	bne.n	8012b60 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	68db      	ldr	r3, [r3, #12]
 8012b5a:	68fa      	ldr	r2, [r7, #12]
 8012b5c:	4313      	orrs	r3, r2
 8012b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	695b      	ldr	r3, [r3, #20]
 8012b6a:	4313      	orrs	r3, r2
 8012b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	68fa      	ldr	r2, [r7, #12]
 8012b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	689a      	ldr	r2, [r3, #8]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	4a16      	ldr	r2, [pc, #88]	@ (8012be0 <TIM_Base_SetConfig+0x13c>)
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	d00f      	beq.n	8012bac <TIM_Base_SetConfig+0x108>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	4a18      	ldr	r2, [pc, #96]	@ (8012bf0 <TIM_Base_SetConfig+0x14c>)
 8012b90:	4293      	cmp	r3, r2
 8012b92:	d00b      	beq.n	8012bac <TIM_Base_SetConfig+0x108>
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	4a17      	ldr	r2, [pc, #92]	@ (8012bf4 <TIM_Base_SetConfig+0x150>)
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d007      	beq.n	8012bac <TIM_Base_SetConfig+0x108>
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	4a16      	ldr	r2, [pc, #88]	@ (8012bf8 <TIM_Base_SetConfig+0x154>)
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d003      	beq.n	8012bac <TIM_Base_SetConfig+0x108>
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	4a15      	ldr	r2, [pc, #84]	@ (8012bfc <TIM_Base_SetConfig+0x158>)
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	d103      	bne.n	8012bb4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	691a      	ldr	r2, [r3, #16]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2201      	movs	r2, #1
 8012bb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	691b      	ldr	r3, [r3, #16]
 8012bbe:	f003 0301 	and.w	r3, r3, #1
 8012bc2:	2b01      	cmp	r3, #1
 8012bc4:	d105      	bne.n	8012bd2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	691b      	ldr	r3, [r3, #16]
 8012bca:	f023 0201 	bic.w	r2, r3, #1
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	611a      	str	r2, [r3, #16]
  }
}
 8012bd2:	bf00      	nop
 8012bd4:	3714      	adds	r7, #20
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bdc:	4770      	bx	lr
 8012bde:	bf00      	nop
 8012be0:	40010000 	.word	0x40010000
 8012be4:	40000400 	.word	0x40000400
 8012be8:	40000800 	.word	0x40000800
 8012bec:	40000c00 	.word	0x40000c00
 8012bf0:	40010400 	.word	0x40010400
 8012bf4:	40014000 	.word	0x40014000
 8012bf8:	40014400 	.word	0x40014400
 8012bfc:	40014800 	.word	0x40014800
 8012c00:	4000e000 	.word	0x4000e000
 8012c04:	4000e400 	.word	0x4000e400

08012c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012c08:	b480      	push	{r7}
 8012c0a:	b087      	sub	sp, #28
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6a1b      	ldr	r3, [r3, #32]
 8012c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	6a1b      	ldr	r3, [r3, #32]
 8012c1c:	f023 0201 	bic.w	r2, r3, #1
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	685b      	ldr	r3, [r3, #4]
 8012c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	699b      	ldr	r3, [r3, #24]
 8012c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012c30:	68fa      	ldr	r2, [r7, #12]
 8012c32:	4b37      	ldr	r3, [pc, #220]	@ (8012d10 <TIM_OC1_SetConfig+0x108>)
 8012c34:	4013      	ands	r3, r2
 8012c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	f023 0303 	bic.w	r3, r3, #3
 8012c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	68fa      	ldr	r2, [r7, #12]
 8012c46:	4313      	orrs	r3, r2
 8012c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	f023 0302 	bic.w	r3, r3, #2
 8012c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	689b      	ldr	r3, [r3, #8]
 8012c56:	697a      	ldr	r2, [r7, #20]
 8012c58:	4313      	orrs	r3, r2
 8012c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	4a2d      	ldr	r2, [pc, #180]	@ (8012d14 <TIM_OC1_SetConfig+0x10c>)
 8012c60:	4293      	cmp	r3, r2
 8012c62:	d00f      	beq.n	8012c84 <TIM_OC1_SetConfig+0x7c>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	4a2c      	ldr	r2, [pc, #176]	@ (8012d18 <TIM_OC1_SetConfig+0x110>)
 8012c68:	4293      	cmp	r3, r2
 8012c6a:	d00b      	beq.n	8012c84 <TIM_OC1_SetConfig+0x7c>
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8012d1c <TIM_OC1_SetConfig+0x114>)
 8012c70:	4293      	cmp	r3, r2
 8012c72:	d007      	beq.n	8012c84 <TIM_OC1_SetConfig+0x7c>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	4a2a      	ldr	r2, [pc, #168]	@ (8012d20 <TIM_OC1_SetConfig+0x118>)
 8012c78:	4293      	cmp	r3, r2
 8012c7a:	d003      	beq.n	8012c84 <TIM_OC1_SetConfig+0x7c>
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	4a29      	ldr	r2, [pc, #164]	@ (8012d24 <TIM_OC1_SetConfig+0x11c>)
 8012c80:	4293      	cmp	r3, r2
 8012c82:	d10c      	bne.n	8012c9e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	f023 0308 	bic.w	r3, r3, #8
 8012c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	697a      	ldr	r2, [r7, #20]
 8012c92:	4313      	orrs	r3, r2
 8012c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	f023 0304 	bic.w	r3, r3, #4
 8012c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8012d14 <TIM_OC1_SetConfig+0x10c>)
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d00f      	beq.n	8012cc6 <TIM_OC1_SetConfig+0xbe>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8012d18 <TIM_OC1_SetConfig+0x110>)
 8012caa:	4293      	cmp	r3, r2
 8012cac:	d00b      	beq.n	8012cc6 <TIM_OC1_SetConfig+0xbe>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8012d1c <TIM_OC1_SetConfig+0x114>)
 8012cb2:	4293      	cmp	r3, r2
 8012cb4:	d007      	beq.n	8012cc6 <TIM_OC1_SetConfig+0xbe>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	4a19      	ldr	r2, [pc, #100]	@ (8012d20 <TIM_OC1_SetConfig+0x118>)
 8012cba:	4293      	cmp	r3, r2
 8012cbc:	d003      	beq.n	8012cc6 <TIM_OC1_SetConfig+0xbe>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	4a18      	ldr	r2, [pc, #96]	@ (8012d24 <TIM_OC1_SetConfig+0x11c>)
 8012cc2:	4293      	cmp	r3, r2
 8012cc4:	d111      	bne.n	8012cea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012cc6:	693b      	ldr	r3, [r7, #16]
 8012cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	695b      	ldr	r3, [r3, #20]
 8012cda:	693a      	ldr	r2, [r7, #16]
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	699b      	ldr	r3, [r3, #24]
 8012ce4:	693a      	ldr	r2, [r7, #16]
 8012ce6:	4313      	orrs	r3, r2
 8012ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	693a      	ldr	r2, [r7, #16]
 8012cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	68fa      	ldr	r2, [r7, #12]
 8012cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	685a      	ldr	r2, [r3, #4]
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	697a      	ldr	r2, [r7, #20]
 8012d02:	621a      	str	r2, [r3, #32]
}
 8012d04:	bf00      	nop
 8012d06:	371c      	adds	r7, #28
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0e:	4770      	bx	lr
 8012d10:	fffeff8f 	.word	0xfffeff8f
 8012d14:	40010000 	.word	0x40010000
 8012d18:	40010400 	.word	0x40010400
 8012d1c:	40014000 	.word	0x40014000
 8012d20:	40014400 	.word	0x40014400
 8012d24:	40014800 	.word	0x40014800

08012d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012d28:	b480      	push	{r7}
 8012d2a:	b087      	sub	sp, #28
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6a1b      	ldr	r3, [r3, #32]
 8012d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6a1b      	ldr	r3, [r3, #32]
 8012d3c:	f023 0210 	bic.w	r2, r3, #16
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	699b      	ldr	r3, [r3, #24]
 8012d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012d50:	68fa      	ldr	r2, [r7, #12]
 8012d52:	4b34      	ldr	r3, [pc, #208]	@ (8012e24 <TIM_OC2_SetConfig+0xfc>)
 8012d54:	4013      	ands	r3, r2
 8012d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	021b      	lsls	r3, r3, #8
 8012d66:	68fa      	ldr	r2, [r7, #12]
 8012d68:	4313      	orrs	r3, r2
 8012d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	f023 0320 	bic.w	r3, r3, #32
 8012d72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	689b      	ldr	r3, [r3, #8]
 8012d78:	011b      	lsls	r3, r3, #4
 8012d7a:	697a      	ldr	r2, [r7, #20]
 8012d7c:	4313      	orrs	r3, r2
 8012d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	4a29      	ldr	r2, [pc, #164]	@ (8012e28 <TIM_OC2_SetConfig+0x100>)
 8012d84:	4293      	cmp	r3, r2
 8012d86:	d003      	beq.n	8012d90 <TIM_OC2_SetConfig+0x68>
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	4a28      	ldr	r2, [pc, #160]	@ (8012e2c <TIM_OC2_SetConfig+0x104>)
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	d10d      	bne.n	8012dac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012d90:	697b      	ldr	r3, [r7, #20]
 8012d92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	68db      	ldr	r3, [r3, #12]
 8012d9c:	011b      	lsls	r3, r3, #4
 8012d9e:	697a      	ldr	r2, [r7, #20]
 8012da0:	4313      	orrs	r3, r2
 8012da2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012daa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	4a1e      	ldr	r2, [pc, #120]	@ (8012e28 <TIM_OC2_SetConfig+0x100>)
 8012db0:	4293      	cmp	r3, r2
 8012db2:	d00f      	beq.n	8012dd4 <TIM_OC2_SetConfig+0xac>
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	4a1d      	ldr	r2, [pc, #116]	@ (8012e2c <TIM_OC2_SetConfig+0x104>)
 8012db8:	4293      	cmp	r3, r2
 8012dba:	d00b      	beq.n	8012dd4 <TIM_OC2_SetConfig+0xac>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8012e30 <TIM_OC2_SetConfig+0x108>)
 8012dc0:	4293      	cmp	r3, r2
 8012dc2:	d007      	beq.n	8012dd4 <TIM_OC2_SetConfig+0xac>
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8012e34 <TIM_OC2_SetConfig+0x10c>)
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	d003      	beq.n	8012dd4 <TIM_OC2_SetConfig+0xac>
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	4a1a      	ldr	r2, [pc, #104]	@ (8012e38 <TIM_OC2_SetConfig+0x110>)
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	d113      	bne.n	8012dfc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012dd4:	693b      	ldr	r3, [r7, #16]
 8012dd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	695b      	ldr	r3, [r3, #20]
 8012de8:	009b      	lsls	r3, r3, #2
 8012dea:	693a      	ldr	r2, [r7, #16]
 8012dec:	4313      	orrs	r3, r2
 8012dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	699b      	ldr	r3, [r3, #24]
 8012df4:	009b      	lsls	r3, r3, #2
 8012df6:	693a      	ldr	r2, [r7, #16]
 8012df8:	4313      	orrs	r3, r2
 8012dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	693a      	ldr	r2, [r7, #16]
 8012e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	68fa      	ldr	r2, [r7, #12]
 8012e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	685a      	ldr	r2, [r3, #4]
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	697a      	ldr	r2, [r7, #20]
 8012e14:	621a      	str	r2, [r3, #32]
}
 8012e16:	bf00      	nop
 8012e18:	371c      	adds	r7, #28
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e20:	4770      	bx	lr
 8012e22:	bf00      	nop
 8012e24:	feff8fff 	.word	0xfeff8fff
 8012e28:	40010000 	.word	0x40010000
 8012e2c:	40010400 	.word	0x40010400
 8012e30:	40014000 	.word	0x40014000
 8012e34:	40014400 	.word	0x40014400
 8012e38:	40014800 	.word	0x40014800

08012e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b087      	sub	sp, #28
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6a1b      	ldr	r3, [r3, #32]
 8012e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6a1b      	ldr	r3, [r3, #32]
 8012e50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	69db      	ldr	r3, [r3, #28]
 8012e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012e64:	68fa      	ldr	r2, [r7, #12]
 8012e66:	4b33      	ldr	r3, [pc, #204]	@ (8012f34 <TIM_OC3_SetConfig+0xf8>)
 8012e68:	4013      	ands	r3, r2
 8012e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	f023 0303 	bic.w	r3, r3, #3
 8012e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	68fa      	ldr	r2, [r7, #12]
 8012e7a:	4313      	orrs	r3, r2
 8012e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	689b      	ldr	r3, [r3, #8]
 8012e8a:	021b      	lsls	r3, r3, #8
 8012e8c:	697a      	ldr	r2, [r7, #20]
 8012e8e:	4313      	orrs	r3, r2
 8012e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	4a28      	ldr	r2, [pc, #160]	@ (8012f38 <TIM_OC3_SetConfig+0xfc>)
 8012e96:	4293      	cmp	r3, r2
 8012e98:	d003      	beq.n	8012ea2 <TIM_OC3_SetConfig+0x66>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	4a27      	ldr	r2, [pc, #156]	@ (8012f3c <TIM_OC3_SetConfig+0x100>)
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d10d      	bne.n	8012ebe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	68db      	ldr	r3, [r3, #12]
 8012eae:	021b      	lsls	r3, r3, #8
 8012eb0:	697a      	ldr	r2, [r7, #20]
 8012eb2:	4313      	orrs	r3, r2
 8012eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8012f38 <TIM_OC3_SetConfig+0xfc>)
 8012ec2:	4293      	cmp	r3, r2
 8012ec4:	d00f      	beq.n	8012ee6 <TIM_OC3_SetConfig+0xaa>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8012f3c <TIM_OC3_SetConfig+0x100>)
 8012eca:	4293      	cmp	r3, r2
 8012ecc:	d00b      	beq.n	8012ee6 <TIM_OC3_SetConfig+0xaa>
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8012f40 <TIM_OC3_SetConfig+0x104>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d007      	beq.n	8012ee6 <TIM_OC3_SetConfig+0xaa>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8012f44 <TIM_OC3_SetConfig+0x108>)
 8012eda:	4293      	cmp	r3, r2
 8012edc:	d003      	beq.n	8012ee6 <TIM_OC3_SetConfig+0xaa>
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	4a19      	ldr	r2, [pc, #100]	@ (8012f48 <TIM_OC3_SetConfig+0x10c>)
 8012ee2:	4293      	cmp	r3, r2
 8012ee4:	d113      	bne.n	8012f0e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	695b      	ldr	r3, [r3, #20]
 8012efa:	011b      	lsls	r3, r3, #4
 8012efc:	693a      	ldr	r2, [r7, #16]
 8012efe:	4313      	orrs	r3, r2
 8012f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	699b      	ldr	r3, [r3, #24]
 8012f06:	011b      	lsls	r3, r3, #4
 8012f08:	693a      	ldr	r2, [r7, #16]
 8012f0a:	4313      	orrs	r3, r2
 8012f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	693a      	ldr	r2, [r7, #16]
 8012f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	68fa      	ldr	r2, [r7, #12]
 8012f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	685a      	ldr	r2, [r3, #4]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	697a      	ldr	r2, [r7, #20]
 8012f26:	621a      	str	r2, [r3, #32]
}
 8012f28:	bf00      	nop
 8012f2a:	371c      	adds	r7, #28
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f32:	4770      	bx	lr
 8012f34:	fffeff8f 	.word	0xfffeff8f
 8012f38:	40010000 	.word	0x40010000
 8012f3c:	40010400 	.word	0x40010400
 8012f40:	40014000 	.word	0x40014000
 8012f44:	40014400 	.word	0x40014400
 8012f48:	40014800 	.word	0x40014800

08012f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b087      	sub	sp, #28
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	6a1b      	ldr	r3, [r3, #32]
 8012f5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	6a1b      	ldr	r3, [r3, #32]
 8012f60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	69db      	ldr	r3, [r3, #28]
 8012f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012f74:	68fa      	ldr	r2, [r7, #12]
 8012f76:	4b24      	ldr	r3, [pc, #144]	@ (8013008 <TIM_OC4_SetConfig+0xbc>)
 8012f78:	4013      	ands	r3, r2
 8012f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	021b      	lsls	r3, r3, #8
 8012f8a:	68fa      	ldr	r2, [r7, #12]
 8012f8c:	4313      	orrs	r3, r2
 8012f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012f90:	693b      	ldr	r3, [r7, #16]
 8012f92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	689b      	ldr	r3, [r3, #8]
 8012f9c:	031b      	lsls	r3, r3, #12
 8012f9e:	693a      	ldr	r2, [r7, #16]
 8012fa0:	4313      	orrs	r3, r2
 8012fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	4a19      	ldr	r2, [pc, #100]	@ (801300c <TIM_OC4_SetConfig+0xc0>)
 8012fa8:	4293      	cmp	r3, r2
 8012faa:	d00f      	beq.n	8012fcc <TIM_OC4_SetConfig+0x80>
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	4a18      	ldr	r2, [pc, #96]	@ (8013010 <TIM_OC4_SetConfig+0xc4>)
 8012fb0:	4293      	cmp	r3, r2
 8012fb2:	d00b      	beq.n	8012fcc <TIM_OC4_SetConfig+0x80>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	4a17      	ldr	r2, [pc, #92]	@ (8013014 <TIM_OC4_SetConfig+0xc8>)
 8012fb8:	4293      	cmp	r3, r2
 8012fba:	d007      	beq.n	8012fcc <TIM_OC4_SetConfig+0x80>
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	4a16      	ldr	r2, [pc, #88]	@ (8013018 <TIM_OC4_SetConfig+0xcc>)
 8012fc0:	4293      	cmp	r3, r2
 8012fc2:	d003      	beq.n	8012fcc <TIM_OC4_SetConfig+0x80>
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	4a15      	ldr	r2, [pc, #84]	@ (801301c <TIM_OC4_SetConfig+0xd0>)
 8012fc8:	4293      	cmp	r3, r2
 8012fca:	d109      	bne.n	8012fe0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	695b      	ldr	r3, [r3, #20]
 8012fd8:	019b      	lsls	r3, r3, #6
 8012fda:	697a      	ldr	r2, [r7, #20]
 8012fdc:	4313      	orrs	r3, r2
 8012fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	697a      	ldr	r2, [r7, #20]
 8012fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	68fa      	ldr	r2, [r7, #12]
 8012fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	685a      	ldr	r2, [r3, #4]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	693a      	ldr	r2, [r7, #16]
 8012ff8:	621a      	str	r2, [r3, #32]
}
 8012ffa:	bf00      	nop
 8012ffc:	371c      	adds	r7, #28
 8012ffe:	46bd      	mov	sp, r7
 8013000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013004:	4770      	bx	lr
 8013006:	bf00      	nop
 8013008:	feff8fff 	.word	0xfeff8fff
 801300c:	40010000 	.word	0x40010000
 8013010:	40010400 	.word	0x40010400
 8013014:	40014000 	.word	0x40014000
 8013018:	40014400 	.word	0x40014400
 801301c:	40014800 	.word	0x40014800

08013020 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013020:	b480      	push	{r7}
 8013022:	b087      	sub	sp, #28
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6a1b      	ldr	r3, [r3, #32]
 801302e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	6a1b      	ldr	r3, [r3, #32]
 8013034:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	685b      	ldr	r3, [r3, #4]
 8013040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013048:	68fa      	ldr	r2, [r7, #12]
 801304a:	4b21      	ldr	r3, [pc, #132]	@ (80130d0 <TIM_OC5_SetConfig+0xb0>)
 801304c:	4013      	ands	r3, r2
 801304e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	68fa      	ldr	r2, [r7, #12]
 8013056:	4313      	orrs	r3, r2
 8013058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013060:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013062:	683b      	ldr	r3, [r7, #0]
 8013064:	689b      	ldr	r3, [r3, #8]
 8013066:	041b      	lsls	r3, r3, #16
 8013068:	693a      	ldr	r2, [r7, #16]
 801306a:	4313      	orrs	r3, r2
 801306c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	4a18      	ldr	r2, [pc, #96]	@ (80130d4 <TIM_OC5_SetConfig+0xb4>)
 8013072:	4293      	cmp	r3, r2
 8013074:	d00f      	beq.n	8013096 <TIM_OC5_SetConfig+0x76>
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	4a17      	ldr	r2, [pc, #92]	@ (80130d8 <TIM_OC5_SetConfig+0xb8>)
 801307a:	4293      	cmp	r3, r2
 801307c:	d00b      	beq.n	8013096 <TIM_OC5_SetConfig+0x76>
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	4a16      	ldr	r2, [pc, #88]	@ (80130dc <TIM_OC5_SetConfig+0xbc>)
 8013082:	4293      	cmp	r3, r2
 8013084:	d007      	beq.n	8013096 <TIM_OC5_SetConfig+0x76>
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	4a15      	ldr	r2, [pc, #84]	@ (80130e0 <TIM_OC5_SetConfig+0xc0>)
 801308a:	4293      	cmp	r3, r2
 801308c:	d003      	beq.n	8013096 <TIM_OC5_SetConfig+0x76>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	4a14      	ldr	r2, [pc, #80]	@ (80130e4 <TIM_OC5_SetConfig+0xc4>)
 8013092:	4293      	cmp	r3, r2
 8013094:	d109      	bne.n	80130aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801309c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	695b      	ldr	r3, [r3, #20]
 80130a2:	021b      	lsls	r3, r3, #8
 80130a4:	697a      	ldr	r2, [r7, #20]
 80130a6:	4313      	orrs	r3, r2
 80130a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	697a      	ldr	r2, [r7, #20]
 80130ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	68fa      	ldr	r2, [r7, #12]
 80130b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	685a      	ldr	r2, [r3, #4]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	693a      	ldr	r2, [r7, #16]
 80130c2:	621a      	str	r2, [r3, #32]
}
 80130c4:	bf00      	nop
 80130c6:	371c      	adds	r7, #28
 80130c8:	46bd      	mov	sp, r7
 80130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ce:	4770      	bx	lr
 80130d0:	fffeff8f 	.word	0xfffeff8f
 80130d4:	40010000 	.word	0x40010000
 80130d8:	40010400 	.word	0x40010400
 80130dc:	40014000 	.word	0x40014000
 80130e0:	40014400 	.word	0x40014400
 80130e4:	40014800 	.word	0x40014800

080130e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80130e8:	b480      	push	{r7}
 80130ea:	b087      	sub	sp, #28
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6a1b      	ldr	r3, [r3, #32]
 80130f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6a1b      	ldr	r3, [r3, #32]
 80130fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801310e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013110:	68fa      	ldr	r2, [r7, #12]
 8013112:	4b22      	ldr	r3, [pc, #136]	@ (801319c <TIM_OC6_SetConfig+0xb4>)
 8013114:	4013      	ands	r3, r2
 8013116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	021b      	lsls	r3, r3, #8
 801311e:	68fa      	ldr	r2, [r7, #12]
 8013120:	4313      	orrs	r3, r2
 8013122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801312a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	689b      	ldr	r3, [r3, #8]
 8013130:	051b      	lsls	r3, r3, #20
 8013132:	693a      	ldr	r2, [r7, #16]
 8013134:	4313      	orrs	r3, r2
 8013136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	4a19      	ldr	r2, [pc, #100]	@ (80131a0 <TIM_OC6_SetConfig+0xb8>)
 801313c:	4293      	cmp	r3, r2
 801313e:	d00f      	beq.n	8013160 <TIM_OC6_SetConfig+0x78>
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	4a18      	ldr	r2, [pc, #96]	@ (80131a4 <TIM_OC6_SetConfig+0xbc>)
 8013144:	4293      	cmp	r3, r2
 8013146:	d00b      	beq.n	8013160 <TIM_OC6_SetConfig+0x78>
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	4a17      	ldr	r2, [pc, #92]	@ (80131a8 <TIM_OC6_SetConfig+0xc0>)
 801314c:	4293      	cmp	r3, r2
 801314e:	d007      	beq.n	8013160 <TIM_OC6_SetConfig+0x78>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	4a16      	ldr	r2, [pc, #88]	@ (80131ac <TIM_OC6_SetConfig+0xc4>)
 8013154:	4293      	cmp	r3, r2
 8013156:	d003      	beq.n	8013160 <TIM_OC6_SetConfig+0x78>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	4a15      	ldr	r2, [pc, #84]	@ (80131b0 <TIM_OC6_SetConfig+0xc8>)
 801315c:	4293      	cmp	r3, r2
 801315e:	d109      	bne.n	8013174 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013166:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	695b      	ldr	r3, [r3, #20]
 801316c:	029b      	lsls	r3, r3, #10
 801316e:	697a      	ldr	r2, [r7, #20]
 8013170:	4313      	orrs	r3, r2
 8013172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	697a      	ldr	r2, [r7, #20]
 8013178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	68fa      	ldr	r2, [r7, #12]
 801317e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	685a      	ldr	r2, [r3, #4]
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	693a      	ldr	r2, [r7, #16]
 801318c:	621a      	str	r2, [r3, #32]
}
 801318e:	bf00      	nop
 8013190:	371c      	adds	r7, #28
 8013192:	46bd      	mov	sp, r7
 8013194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013198:	4770      	bx	lr
 801319a:	bf00      	nop
 801319c:	feff8fff 	.word	0xfeff8fff
 80131a0:	40010000 	.word	0x40010000
 80131a4:	40010400 	.word	0x40010400
 80131a8:	40014000 	.word	0x40014000
 80131ac:	40014400 	.word	0x40014400
 80131b0:	40014800 	.word	0x40014800

080131b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b087      	sub	sp, #28
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	60f8      	str	r0, [r7, #12]
 80131bc:	60b9      	str	r1, [r7, #8]
 80131be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	6a1b      	ldr	r3, [r3, #32]
 80131c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	6a1b      	ldr	r3, [r3, #32]
 80131ca:	f023 0201 	bic.w	r2, r3, #1
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	699b      	ldr	r3, [r3, #24]
 80131d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80131de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	011b      	lsls	r3, r3, #4
 80131e4:	693a      	ldr	r2, [r7, #16]
 80131e6:	4313      	orrs	r3, r2
 80131e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	f023 030a 	bic.w	r3, r3, #10
 80131f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80131f2:	697a      	ldr	r2, [r7, #20]
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	4313      	orrs	r3, r2
 80131f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	693a      	ldr	r2, [r7, #16]
 80131fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	697a      	ldr	r2, [r7, #20]
 8013204:	621a      	str	r2, [r3, #32]
}
 8013206:	bf00      	nop
 8013208:	371c      	adds	r7, #28
 801320a:	46bd      	mov	sp, r7
 801320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013210:	4770      	bx	lr

08013212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013212:	b480      	push	{r7}
 8013214:	b087      	sub	sp, #28
 8013216:	af00      	add	r7, sp, #0
 8013218:	60f8      	str	r0, [r7, #12]
 801321a:	60b9      	str	r1, [r7, #8]
 801321c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	6a1b      	ldr	r3, [r3, #32]
 8013222:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	6a1b      	ldr	r3, [r3, #32]
 8013228:	f023 0210 	bic.w	r2, r3, #16
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	699b      	ldr	r3, [r3, #24]
 8013234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801323c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	031b      	lsls	r3, r3, #12
 8013242:	693a      	ldr	r2, [r7, #16]
 8013244:	4313      	orrs	r3, r2
 8013246:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801324e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	011b      	lsls	r3, r3, #4
 8013254:	697a      	ldr	r2, [r7, #20]
 8013256:	4313      	orrs	r3, r2
 8013258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	693a      	ldr	r2, [r7, #16]
 801325e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	697a      	ldr	r2, [r7, #20]
 8013264:	621a      	str	r2, [r3, #32]
}
 8013266:	bf00      	nop
 8013268:	371c      	adds	r7, #28
 801326a:	46bd      	mov	sp, r7
 801326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013270:	4770      	bx	lr
	...

08013274 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013274:	b480      	push	{r7}
 8013276:	b085      	sub	sp, #20
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	689b      	ldr	r3, [r3, #8]
 8013282:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013284:	68fa      	ldr	r2, [r7, #12]
 8013286:	4b09      	ldr	r3, [pc, #36]	@ (80132ac <TIM_ITRx_SetConfig+0x38>)
 8013288:	4013      	ands	r3, r2
 801328a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801328c:	683a      	ldr	r2, [r7, #0]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	4313      	orrs	r3, r2
 8013292:	f043 0307 	orr.w	r3, r3, #7
 8013296:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	68fa      	ldr	r2, [r7, #12]
 801329c:	609a      	str	r2, [r3, #8]
}
 801329e:	bf00      	nop
 80132a0:	3714      	adds	r7, #20
 80132a2:	46bd      	mov	sp, r7
 80132a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a8:	4770      	bx	lr
 80132aa:	bf00      	nop
 80132ac:	ffcfff8f 	.word	0xffcfff8f

080132b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80132b0:	b480      	push	{r7}
 80132b2:	b087      	sub	sp, #28
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	60b9      	str	r1, [r7, #8]
 80132ba:	607a      	str	r2, [r7, #4]
 80132bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	689b      	ldr	r3, [r3, #8]
 80132c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80132c4:	697b      	ldr	r3, [r7, #20]
 80132c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80132ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	021a      	lsls	r2, r3, #8
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	431a      	orrs	r2, r3
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	4313      	orrs	r3, r2
 80132d8:	697a      	ldr	r2, [r7, #20]
 80132da:	4313      	orrs	r3, r2
 80132dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	697a      	ldr	r2, [r7, #20]
 80132e2:	609a      	str	r2, [r3, #8]
}
 80132e4:	bf00      	nop
 80132e6:	371c      	adds	r7, #28
 80132e8:	46bd      	mov	sp, r7
 80132ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ee:	4770      	bx	lr

080132f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80132f0:	b480      	push	{r7}
 80132f2:	b087      	sub	sp, #28
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	60f8      	str	r0, [r7, #12]
 80132f8:	60b9      	str	r1, [r7, #8]
 80132fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	f003 031f 	and.w	r3, r3, #31
 8013302:	2201      	movs	r2, #1
 8013304:	fa02 f303 	lsl.w	r3, r2, r3
 8013308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	6a1a      	ldr	r2, [r3, #32]
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	43db      	mvns	r3, r3
 8013312:	401a      	ands	r2, r3
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	6a1a      	ldr	r2, [r3, #32]
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	f003 031f 	and.w	r3, r3, #31
 8013322:	6879      	ldr	r1, [r7, #4]
 8013324:	fa01 f303 	lsl.w	r3, r1, r3
 8013328:	431a      	orrs	r2, r3
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	621a      	str	r2, [r3, #32]
}
 801332e:	bf00      	nop
 8013330:	371c      	adds	r7, #28
 8013332:	46bd      	mov	sp, r7
 8013334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013338:	4770      	bx	lr
	...

0801333c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801333c:	b480      	push	{r7}
 801333e:	b085      	sub	sp, #20
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801334c:	2b01      	cmp	r3, #1
 801334e:	d101      	bne.n	8013354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013350:	2302      	movs	r3, #2
 8013352:	e077      	b.n	8013444 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2201      	movs	r2, #1
 8013358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2202      	movs	r2, #2
 8013360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	689b      	ldr	r3, [r3, #8]
 8013372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	4a35      	ldr	r2, [pc, #212]	@ (8013450 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801337a:	4293      	cmp	r3, r2
 801337c:	d004      	beq.n	8013388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	4a34      	ldr	r2, [pc, #208]	@ (8013454 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013384:	4293      	cmp	r3, r2
 8013386:	d108      	bne.n	801339a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801338e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	68fa      	ldr	r2, [r7, #12]
 8013396:	4313      	orrs	r3, r2
 8013398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80133a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	68fa      	ldr	r2, [r7, #12]
 80133a8:	4313      	orrs	r3, r2
 80133aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	68fa      	ldr	r2, [r7, #12]
 80133b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	4a25      	ldr	r2, [pc, #148]	@ (8013450 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80133ba:	4293      	cmp	r3, r2
 80133bc:	d02c      	beq.n	8013418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80133c6:	d027      	beq.n	8013418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	4a22      	ldr	r2, [pc, #136]	@ (8013458 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80133ce:	4293      	cmp	r3, r2
 80133d0:	d022      	beq.n	8013418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	4a21      	ldr	r2, [pc, #132]	@ (801345c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80133d8:	4293      	cmp	r3, r2
 80133da:	d01d      	beq.n	8013418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	4a1f      	ldr	r2, [pc, #124]	@ (8013460 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80133e2:	4293      	cmp	r3, r2
 80133e4:	d018      	beq.n	8013418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	4a1a      	ldr	r2, [pc, #104]	@ (8013454 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d013      	beq.n	8013418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	4a1b      	ldr	r2, [pc, #108]	@ (8013464 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80133f6:	4293      	cmp	r3, r2
 80133f8:	d00e      	beq.n	8013418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	4a1a      	ldr	r2, [pc, #104]	@ (8013468 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8013400:	4293      	cmp	r3, r2
 8013402:	d009      	beq.n	8013418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	4a18      	ldr	r2, [pc, #96]	@ (801346c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801340a:	4293      	cmp	r3, r2
 801340c:	d004      	beq.n	8013418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	4a17      	ldr	r2, [pc, #92]	@ (8013470 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8013414:	4293      	cmp	r3, r2
 8013416:	d10c      	bne.n	8013432 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801341e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	689b      	ldr	r3, [r3, #8]
 8013424:	68ba      	ldr	r2, [r7, #8]
 8013426:	4313      	orrs	r3, r2
 8013428:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	68ba      	ldr	r2, [r7, #8]
 8013430:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	2201      	movs	r2, #1
 8013436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	2200      	movs	r2, #0
 801343e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013442:	2300      	movs	r3, #0
}
 8013444:	4618      	mov	r0, r3
 8013446:	3714      	adds	r7, #20
 8013448:	46bd      	mov	sp, r7
 801344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344e:	4770      	bx	lr
 8013450:	40010000 	.word	0x40010000
 8013454:	40010400 	.word	0x40010400
 8013458:	40000400 	.word	0x40000400
 801345c:	40000800 	.word	0x40000800
 8013460:	40000c00 	.word	0x40000c00
 8013464:	40001800 	.word	0x40001800
 8013468:	40014000 	.word	0x40014000
 801346c:	4000e000 	.word	0x4000e000
 8013470:	4000e400 	.word	0x4000e400

08013474 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013474:	b480      	push	{r7}
 8013476:	b083      	sub	sp, #12
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801347c:	bf00      	nop
 801347e:	370c      	adds	r7, #12
 8013480:	46bd      	mov	sp, r7
 8013482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013486:	4770      	bx	lr

08013488 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013488:	b480      	push	{r7}
 801348a:	b083      	sub	sp, #12
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013490:	bf00      	nop
 8013492:	370c      	adds	r7, #12
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr

0801349c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80134a4:	bf00      	nop
 80134a6:	370c      	adds	r7, #12
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr

080134b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b082      	sub	sp, #8
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d101      	bne.n	80134c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80134be:	2301      	movs	r3, #1
 80134c0:	e042      	b.n	8013548 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d106      	bne.n	80134da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2200      	movs	r2, #0
 80134d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f7ef fae3 	bl	8002aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	2224      	movs	r2, #36	@ 0x24
 80134de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	681a      	ldr	r2, [r3, #0]
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	f022 0201 	bic.w	r2, r2, #1
 80134f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d002      	beq.n	8013500 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f000 fe94 	bl	8014228 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f000 f825 	bl	8013550 <UART_SetConfig>
 8013506:	4603      	mov	r3, r0
 8013508:	2b01      	cmp	r3, #1
 801350a:	d101      	bne.n	8013510 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801350c:	2301      	movs	r3, #1
 801350e:	e01b      	b.n	8013548 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	685a      	ldr	r2, [r3, #4]
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801351e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	689a      	ldr	r2, [r3, #8]
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801352e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	681a      	ldr	r2, [r3, #0]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	f042 0201 	orr.w	r2, r2, #1
 801353e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f000 ff13 	bl	801436c <UART_CheckIdleState>
 8013546:	4603      	mov	r3, r0
}
 8013548:	4618      	mov	r0, r3
 801354a:	3708      	adds	r7, #8
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}

08013550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013554:	b092      	sub	sp, #72	@ 0x48
 8013556:	af00      	add	r7, sp, #0
 8013558:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801355a:	2300      	movs	r3, #0
 801355c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	689a      	ldr	r2, [r3, #8]
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	691b      	ldr	r3, [r3, #16]
 8013568:	431a      	orrs	r2, r3
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	695b      	ldr	r3, [r3, #20]
 801356e:	431a      	orrs	r2, r3
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	69db      	ldr	r3, [r3, #28]
 8013574:	4313      	orrs	r3, r2
 8013576:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	681a      	ldr	r2, [r3, #0]
 801357e:	4bbe      	ldr	r3, [pc, #760]	@ (8013878 <UART_SetConfig+0x328>)
 8013580:	4013      	ands	r3, r2
 8013582:	697a      	ldr	r2, [r7, #20]
 8013584:	6812      	ldr	r2, [r2, #0]
 8013586:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013588:	430b      	orrs	r3, r1
 801358a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801358c:	697b      	ldr	r3, [r7, #20]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	685b      	ldr	r3, [r3, #4]
 8013592:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	68da      	ldr	r2, [r3, #12]
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	430a      	orrs	r2, r1
 80135a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	699b      	ldr	r3, [r3, #24]
 80135a6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	4ab3      	ldr	r2, [pc, #716]	@ (801387c <UART_SetConfig+0x32c>)
 80135ae:	4293      	cmp	r3, r2
 80135b0:	d004      	beq.n	80135bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80135b2:	697b      	ldr	r3, [r7, #20]
 80135b4:	6a1b      	ldr	r3, [r3, #32]
 80135b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80135b8:	4313      	orrs	r3, r2
 80135ba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	689a      	ldr	r2, [r3, #8]
 80135c2:	4baf      	ldr	r3, [pc, #700]	@ (8013880 <UART_SetConfig+0x330>)
 80135c4:	4013      	ands	r3, r2
 80135c6:	697a      	ldr	r2, [r7, #20]
 80135c8:	6812      	ldr	r2, [r2, #0]
 80135ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80135cc:	430b      	orrs	r3, r1
 80135ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80135d0:	697b      	ldr	r3, [r7, #20]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135d6:	f023 010f 	bic.w	r1, r3, #15
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	430a      	orrs	r2, r1
 80135e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	4aa6      	ldr	r2, [pc, #664]	@ (8013884 <UART_SetConfig+0x334>)
 80135ec:	4293      	cmp	r3, r2
 80135ee:	d177      	bne.n	80136e0 <UART_SetConfig+0x190>
 80135f0:	4ba5      	ldr	r3, [pc, #660]	@ (8013888 <UART_SetConfig+0x338>)
 80135f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80135f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80135f8:	2b28      	cmp	r3, #40	@ 0x28
 80135fa:	d86d      	bhi.n	80136d8 <UART_SetConfig+0x188>
 80135fc:	a201      	add	r2, pc, #4	@ (adr r2, 8013604 <UART_SetConfig+0xb4>)
 80135fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013602:	bf00      	nop
 8013604:	080136a9 	.word	0x080136a9
 8013608:	080136d9 	.word	0x080136d9
 801360c:	080136d9 	.word	0x080136d9
 8013610:	080136d9 	.word	0x080136d9
 8013614:	080136d9 	.word	0x080136d9
 8013618:	080136d9 	.word	0x080136d9
 801361c:	080136d9 	.word	0x080136d9
 8013620:	080136d9 	.word	0x080136d9
 8013624:	080136b1 	.word	0x080136b1
 8013628:	080136d9 	.word	0x080136d9
 801362c:	080136d9 	.word	0x080136d9
 8013630:	080136d9 	.word	0x080136d9
 8013634:	080136d9 	.word	0x080136d9
 8013638:	080136d9 	.word	0x080136d9
 801363c:	080136d9 	.word	0x080136d9
 8013640:	080136d9 	.word	0x080136d9
 8013644:	080136b9 	.word	0x080136b9
 8013648:	080136d9 	.word	0x080136d9
 801364c:	080136d9 	.word	0x080136d9
 8013650:	080136d9 	.word	0x080136d9
 8013654:	080136d9 	.word	0x080136d9
 8013658:	080136d9 	.word	0x080136d9
 801365c:	080136d9 	.word	0x080136d9
 8013660:	080136d9 	.word	0x080136d9
 8013664:	080136c1 	.word	0x080136c1
 8013668:	080136d9 	.word	0x080136d9
 801366c:	080136d9 	.word	0x080136d9
 8013670:	080136d9 	.word	0x080136d9
 8013674:	080136d9 	.word	0x080136d9
 8013678:	080136d9 	.word	0x080136d9
 801367c:	080136d9 	.word	0x080136d9
 8013680:	080136d9 	.word	0x080136d9
 8013684:	080136c9 	.word	0x080136c9
 8013688:	080136d9 	.word	0x080136d9
 801368c:	080136d9 	.word	0x080136d9
 8013690:	080136d9 	.word	0x080136d9
 8013694:	080136d9 	.word	0x080136d9
 8013698:	080136d9 	.word	0x080136d9
 801369c:	080136d9 	.word	0x080136d9
 80136a0:	080136d9 	.word	0x080136d9
 80136a4:	080136d1 	.word	0x080136d1
 80136a8:	2301      	movs	r3, #1
 80136aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136ae:	e326      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80136b0:	2304      	movs	r3, #4
 80136b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136b6:	e322      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80136b8:	2308      	movs	r3, #8
 80136ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136be:	e31e      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80136c0:	2310      	movs	r3, #16
 80136c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136c6:	e31a      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80136c8:	2320      	movs	r3, #32
 80136ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136ce:	e316      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80136d0:	2340      	movs	r3, #64	@ 0x40
 80136d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136d6:	e312      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80136d8:	2380      	movs	r3, #128	@ 0x80
 80136da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136de:	e30e      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	4a69      	ldr	r2, [pc, #420]	@ (801388c <UART_SetConfig+0x33c>)
 80136e6:	4293      	cmp	r3, r2
 80136e8:	d130      	bne.n	801374c <UART_SetConfig+0x1fc>
 80136ea:	4b67      	ldr	r3, [pc, #412]	@ (8013888 <UART_SetConfig+0x338>)
 80136ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80136ee:	f003 0307 	and.w	r3, r3, #7
 80136f2:	2b05      	cmp	r3, #5
 80136f4:	d826      	bhi.n	8013744 <UART_SetConfig+0x1f4>
 80136f6:	a201      	add	r2, pc, #4	@ (adr r2, 80136fc <UART_SetConfig+0x1ac>)
 80136f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136fc:	08013715 	.word	0x08013715
 8013700:	0801371d 	.word	0x0801371d
 8013704:	08013725 	.word	0x08013725
 8013708:	0801372d 	.word	0x0801372d
 801370c:	08013735 	.word	0x08013735
 8013710:	0801373d 	.word	0x0801373d
 8013714:	2300      	movs	r3, #0
 8013716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801371a:	e2f0      	b.n	8013cfe <UART_SetConfig+0x7ae>
 801371c:	2304      	movs	r3, #4
 801371e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013722:	e2ec      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013724:	2308      	movs	r3, #8
 8013726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801372a:	e2e8      	b.n	8013cfe <UART_SetConfig+0x7ae>
 801372c:	2310      	movs	r3, #16
 801372e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013732:	e2e4      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013734:	2320      	movs	r3, #32
 8013736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801373a:	e2e0      	b.n	8013cfe <UART_SetConfig+0x7ae>
 801373c:	2340      	movs	r3, #64	@ 0x40
 801373e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013742:	e2dc      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013744:	2380      	movs	r3, #128	@ 0x80
 8013746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801374a:	e2d8      	b.n	8013cfe <UART_SetConfig+0x7ae>
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	4a4f      	ldr	r2, [pc, #316]	@ (8013890 <UART_SetConfig+0x340>)
 8013752:	4293      	cmp	r3, r2
 8013754:	d130      	bne.n	80137b8 <UART_SetConfig+0x268>
 8013756:	4b4c      	ldr	r3, [pc, #304]	@ (8013888 <UART_SetConfig+0x338>)
 8013758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801375a:	f003 0307 	and.w	r3, r3, #7
 801375e:	2b05      	cmp	r3, #5
 8013760:	d826      	bhi.n	80137b0 <UART_SetConfig+0x260>
 8013762:	a201      	add	r2, pc, #4	@ (adr r2, 8013768 <UART_SetConfig+0x218>)
 8013764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013768:	08013781 	.word	0x08013781
 801376c:	08013789 	.word	0x08013789
 8013770:	08013791 	.word	0x08013791
 8013774:	08013799 	.word	0x08013799
 8013778:	080137a1 	.word	0x080137a1
 801377c:	080137a9 	.word	0x080137a9
 8013780:	2300      	movs	r3, #0
 8013782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013786:	e2ba      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013788:	2304      	movs	r3, #4
 801378a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801378e:	e2b6      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013790:	2308      	movs	r3, #8
 8013792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013796:	e2b2      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013798:	2310      	movs	r3, #16
 801379a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801379e:	e2ae      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80137a0:	2320      	movs	r3, #32
 80137a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137a6:	e2aa      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80137a8:	2340      	movs	r3, #64	@ 0x40
 80137aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137ae:	e2a6      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80137b0:	2380      	movs	r3, #128	@ 0x80
 80137b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137b6:	e2a2      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	4a35      	ldr	r2, [pc, #212]	@ (8013894 <UART_SetConfig+0x344>)
 80137be:	4293      	cmp	r3, r2
 80137c0:	d130      	bne.n	8013824 <UART_SetConfig+0x2d4>
 80137c2:	4b31      	ldr	r3, [pc, #196]	@ (8013888 <UART_SetConfig+0x338>)
 80137c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137c6:	f003 0307 	and.w	r3, r3, #7
 80137ca:	2b05      	cmp	r3, #5
 80137cc:	d826      	bhi.n	801381c <UART_SetConfig+0x2cc>
 80137ce:	a201      	add	r2, pc, #4	@ (adr r2, 80137d4 <UART_SetConfig+0x284>)
 80137d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137d4:	080137ed 	.word	0x080137ed
 80137d8:	080137f5 	.word	0x080137f5
 80137dc:	080137fd 	.word	0x080137fd
 80137e0:	08013805 	.word	0x08013805
 80137e4:	0801380d 	.word	0x0801380d
 80137e8:	08013815 	.word	0x08013815
 80137ec:	2300      	movs	r3, #0
 80137ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137f2:	e284      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80137f4:	2304      	movs	r3, #4
 80137f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137fa:	e280      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80137fc:	2308      	movs	r3, #8
 80137fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013802:	e27c      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013804:	2310      	movs	r3, #16
 8013806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801380a:	e278      	b.n	8013cfe <UART_SetConfig+0x7ae>
 801380c:	2320      	movs	r3, #32
 801380e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013812:	e274      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013814:	2340      	movs	r3, #64	@ 0x40
 8013816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801381a:	e270      	b.n	8013cfe <UART_SetConfig+0x7ae>
 801381c:	2380      	movs	r3, #128	@ 0x80
 801381e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013822:	e26c      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	4a1b      	ldr	r2, [pc, #108]	@ (8013898 <UART_SetConfig+0x348>)
 801382a:	4293      	cmp	r3, r2
 801382c:	d142      	bne.n	80138b4 <UART_SetConfig+0x364>
 801382e:	4b16      	ldr	r3, [pc, #88]	@ (8013888 <UART_SetConfig+0x338>)
 8013830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013832:	f003 0307 	and.w	r3, r3, #7
 8013836:	2b05      	cmp	r3, #5
 8013838:	d838      	bhi.n	80138ac <UART_SetConfig+0x35c>
 801383a:	a201      	add	r2, pc, #4	@ (adr r2, 8013840 <UART_SetConfig+0x2f0>)
 801383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013840:	08013859 	.word	0x08013859
 8013844:	08013861 	.word	0x08013861
 8013848:	08013869 	.word	0x08013869
 801384c:	08013871 	.word	0x08013871
 8013850:	0801389d 	.word	0x0801389d
 8013854:	080138a5 	.word	0x080138a5
 8013858:	2300      	movs	r3, #0
 801385a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801385e:	e24e      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013860:	2304      	movs	r3, #4
 8013862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013866:	e24a      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013868:	2308      	movs	r3, #8
 801386a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801386e:	e246      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013870:	2310      	movs	r3, #16
 8013872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013876:	e242      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013878:	cfff69f3 	.word	0xcfff69f3
 801387c:	58000c00 	.word	0x58000c00
 8013880:	11fff4ff 	.word	0x11fff4ff
 8013884:	40011000 	.word	0x40011000
 8013888:	58024400 	.word	0x58024400
 801388c:	40004400 	.word	0x40004400
 8013890:	40004800 	.word	0x40004800
 8013894:	40004c00 	.word	0x40004c00
 8013898:	40005000 	.word	0x40005000
 801389c:	2320      	movs	r3, #32
 801389e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138a2:	e22c      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80138a4:	2340      	movs	r3, #64	@ 0x40
 80138a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138aa:	e228      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80138ac:	2380      	movs	r3, #128	@ 0x80
 80138ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138b2:	e224      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	4ab1      	ldr	r2, [pc, #708]	@ (8013b80 <UART_SetConfig+0x630>)
 80138ba:	4293      	cmp	r3, r2
 80138bc:	d176      	bne.n	80139ac <UART_SetConfig+0x45c>
 80138be:	4bb1      	ldr	r3, [pc, #708]	@ (8013b84 <UART_SetConfig+0x634>)
 80138c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80138c6:	2b28      	cmp	r3, #40	@ 0x28
 80138c8:	d86c      	bhi.n	80139a4 <UART_SetConfig+0x454>
 80138ca:	a201      	add	r2, pc, #4	@ (adr r2, 80138d0 <UART_SetConfig+0x380>)
 80138cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138d0:	08013975 	.word	0x08013975
 80138d4:	080139a5 	.word	0x080139a5
 80138d8:	080139a5 	.word	0x080139a5
 80138dc:	080139a5 	.word	0x080139a5
 80138e0:	080139a5 	.word	0x080139a5
 80138e4:	080139a5 	.word	0x080139a5
 80138e8:	080139a5 	.word	0x080139a5
 80138ec:	080139a5 	.word	0x080139a5
 80138f0:	0801397d 	.word	0x0801397d
 80138f4:	080139a5 	.word	0x080139a5
 80138f8:	080139a5 	.word	0x080139a5
 80138fc:	080139a5 	.word	0x080139a5
 8013900:	080139a5 	.word	0x080139a5
 8013904:	080139a5 	.word	0x080139a5
 8013908:	080139a5 	.word	0x080139a5
 801390c:	080139a5 	.word	0x080139a5
 8013910:	08013985 	.word	0x08013985
 8013914:	080139a5 	.word	0x080139a5
 8013918:	080139a5 	.word	0x080139a5
 801391c:	080139a5 	.word	0x080139a5
 8013920:	080139a5 	.word	0x080139a5
 8013924:	080139a5 	.word	0x080139a5
 8013928:	080139a5 	.word	0x080139a5
 801392c:	080139a5 	.word	0x080139a5
 8013930:	0801398d 	.word	0x0801398d
 8013934:	080139a5 	.word	0x080139a5
 8013938:	080139a5 	.word	0x080139a5
 801393c:	080139a5 	.word	0x080139a5
 8013940:	080139a5 	.word	0x080139a5
 8013944:	080139a5 	.word	0x080139a5
 8013948:	080139a5 	.word	0x080139a5
 801394c:	080139a5 	.word	0x080139a5
 8013950:	08013995 	.word	0x08013995
 8013954:	080139a5 	.word	0x080139a5
 8013958:	080139a5 	.word	0x080139a5
 801395c:	080139a5 	.word	0x080139a5
 8013960:	080139a5 	.word	0x080139a5
 8013964:	080139a5 	.word	0x080139a5
 8013968:	080139a5 	.word	0x080139a5
 801396c:	080139a5 	.word	0x080139a5
 8013970:	0801399d 	.word	0x0801399d
 8013974:	2301      	movs	r3, #1
 8013976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801397a:	e1c0      	b.n	8013cfe <UART_SetConfig+0x7ae>
 801397c:	2304      	movs	r3, #4
 801397e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013982:	e1bc      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013984:	2308      	movs	r3, #8
 8013986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801398a:	e1b8      	b.n	8013cfe <UART_SetConfig+0x7ae>
 801398c:	2310      	movs	r3, #16
 801398e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013992:	e1b4      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013994:	2320      	movs	r3, #32
 8013996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801399a:	e1b0      	b.n	8013cfe <UART_SetConfig+0x7ae>
 801399c:	2340      	movs	r3, #64	@ 0x40
 801399e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139a2:	e1ac      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80139a4:	2380      	movs	r3, #128	@ 0x80
 80139a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139aa:	e1a8      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	4a75      	ldr	r2, [pc, #468]	@ (8013b88 <UART_SetConfig+0x638>)
 80139b2:	4293      	cmp	r3, r2
 80139b4:	d130      	bne.n	8013a18 <UART_SetConfig+0x4c8>
 80139b6:	4b73      	ldr	r3, [pc, #460]	@ (8013b84 <UART_SetConfig+0x634>)
 80139b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80139ba:	f003 0307 	and.w	r3, r3, #7
 80139be:	2b05      	cmp	r3, #5
 80139c0:	d826      	bhi.n	8013a10 <UART_SetConfig+0x4c0>
 80139c2:	a201      	add	r2, pc, #4	@ (adr r2, 80139c8 <UART_SetConfig+0x478>)
 80139c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139c8:	080139e1 	.word	0x080139e1
 80139cc:	080139e9 	.word	0x080139e9
 80139d0:	080139f1 	.word	0x080139f1
 80139d4:	080139f9 	.word	0x080139f9
 80139d8:	08013a01 	.word	0x08013a01
 80139dc:	08013a09 	.word	0x08013a09
 80139e0:	2300      	movs	r3, #0
 80139e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139e6:	e18a      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80139e8:	2304      	movs	r3, #4
 80139ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139ee:	e186      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80139f0:	2308      	movs	r3, #8
 80139f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139f6:	e182      	b.n	8013cfe <UART_SetConfig+0x7ae>
 80139f8:	2310      	movs	r3, #16
 80139fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139fe:	e17e      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013a00:	2320      	movs	r3, #32
 8013a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a06:	e17a      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013a08:	2340      	movs	r3, #64	@ 0x40
 8013a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a0e:	e176      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013a10:	2380      	movs	r3, #128	@ 0x80
 8013a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a16:	e172      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013a18:	697b      	ldr	r3, [r7, #20]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	4a5b      	ldr	r2, [pc, #364]	@ (8013b8c <UART_SetConfig+0x63c>)
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	d130      	bne.n	8013a84 <UART_SetConfig+0x534>
 8013a22:	4b58      	ldr	r3, [pc, #352]	@ (8013b84 <UART_SetConfig+0x634>)
 8013a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a26:	f003 0307 	and.w	r3, r3, #7
 8013a2a:	2b05      	cmp	r3, #5
 8013a2c:	d826      	bhi.n	8013a7c <UART_SetConfig+0x52c>
 8013a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8013a34 <UART_SetConfig+0x4e4>)
 8013a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a34:	08013a4d 	.word	0x08013a4d
 8013a38:	08013a55 	.word	0x08013a55
 8013a3c:	08013a5d 	.word	0x08013a5d
 8013a40:	08013a65 	.word	0x08013a65
 8013a44:	08013a6d 	.word	0x08013a6d
 8013a48:	08013a75 	.word	0x08013a75
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a52:	e154      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013a54:	2304      	movs	r3, #4
 8013a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a5a:	e150      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013a5c:	2308      	movs	r3, #8
 8013a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a62:	e14c      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013a64:	2310      	movs	r3, #16
 8013a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a6a:	e148      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013a6c:	2320      	movs	r3, #32
 8013a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a72:	e144      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013a74:	2340      	movs	r3, #64	@ 0x40
 8013a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a7a:	e140      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013a7c:	2380      	movs	r3, #128	@ 0x80
 8013a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a82:	e13c      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	4a41      	ldr	r2, [pc, #260]	@ (8013b90 <UART_SetConfig+0x640>)
 8013a8a:	4293      	cmp	r3, r2
 8013a8c:	f040 8082 	bne.w	8013b94 <UART_SetConfig+0x644>
 8013a90:	4b3c      	ldr	r3, [pc, #240]	@ (8013b84 <UART_SetConfig+0x634>)
 8013a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013a98:	2b28      	cmp	r3, #40	@ 0x28
 8013a9a:	d86d      	bhi.n	8013b78 <UART_SetConfig+0x628>
 8013a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8013aa4 <UART_SetConfig+0x554>)
 8013a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013aa2:	bf00      	nop
 8013aa4:	08013b49 	.word	0x08013b49
 8013aa8:	08013b79 	.word	0x08013b79
 8013aac:	08013b79 	.word	0x08013b79
 8013ab0:	08013b79 	.word	0x08013b79
 8013ab4:	08013b79 	.word	0x08013b79
 8013ab8:	08013b79 	.word	0x08013b79
 8013abc:	08013b79 	.word	0x08013b79
 8013ac0:	08013b79 	.word	0x08013b79
 8013ac4:	08013b51 	.word	0x08013b51
 8013ac8:	08013b79 	.word	0x08013b79
 8013acc:	08013b79 	.word	0x08013b79
 8013ad0:	08013b79 	.word	0x08013b79
 8013ad4:	08013b79 	.word	0x08013b79
 8013ad8:	08013b79 	.word	0x08013b79
 8013adc:	08013b79 	.word	0x08013b79
 8013ae0:	08013b79 	.word	0x08013b79
 8013ae4:	08013b59 	.word	0x08013b59
 8013ae8:	08013b79 	.word	0x08013b79
 8013aec:	08013b79 	.word	0x08013b79
 8013af0:	08013b79 	.word	0x08013b79
 8013af4:	08013b79 	.word	0x08013b79
 8013af8:	08013b79 	.word	0x08013b79
 8013afc:	08013b79 	.word	0x08013b79
 8013b00:	08013b79 	.word	0x08013b79
 8013b04:	08013b61 	.word	0x08013b61
 8013b08:	08013b79 	.word	0x08013b79
 8013b0c:	08013b79 	.word	0x08013b79
 8013b10:	08013b79 	.word	0x08013b79
 8013b14:	08013b79 	.word	0x08013b79
 8013b18:	08013b79 	.word	0x08013b79
 8013b1c:	08013b79 	.word	0x08013b79
 8013b20:	08013b79 	.word	0x08013b79
 8013b24:	08013b69 	.word	0x08013b69
 8013b28:	08013b79 	.word	0x08013b79
 8013b2c:	08013b79 	.word	0x08013b79
 8013b30:	08013b79 	.word	0x08013b79
 8013b34:	08013b79 	.word	0x08013b79
 8013b38:	08013b79 	.word	0x08013b79
 8013b3c:	08013b79 	.word	0x08013b79
 8013b40:	08013b79 	.word	0x08013b79
 8013b44:	08013b71 	.word	0x08013b71
 8013b48:	2301      	movs	r3, #1
 8013b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b4e:	e0d6      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013b50:	2304      	movs	r3, #4
 8013b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b56:	e0d2      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013b58:	2308      	movs	r3, #8
 8013b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b5e:	e0ce      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013b60:	2310      	movs	r3, #16
 8013b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b66:	e0ca      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013b68:	2320      	movs	r3, #32
 8013b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b6e:	e0c6      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013b70:	2340      	movs	r3, #64	@ 0x40
 8013b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b76:	e0c2      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013b78:	2380      	movs	r3, #128	@ 0x80
 8013b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b7e:	e0be      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013b80:	40011400 	.word	0x40011400
 8013b84:	58024400 	.word	0x58024400
 8013b88:	40007800 	.word	0x40007800
 8013b8c:	40007c00 	.word	0x40007c00
 8013b90:	40011800 	.word	0x40011800
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	4aad      	ldr	r2, [pc, #692]	@ (8013e50 <UART_SetConfig+0x900>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d176      	bne.n	8013c8c <UART_SetConfig+0x73c>
 8013b9e:	4bad      	ldr	r3, [pc, #692]	@ (8013e54 <UART_SetConfig+0x904>)
 8013ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ba2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013ba6:	2b28      	cmp	r3, #40	@ 0x28
 8013ba8:	d86c      	bhi.n	8013c84 <UART_SetConfig+0x734>
 8013baa:	a201      	add	r2, pc, #4	@ (adr r2, 8013bb0 <UART_SetConfig+0x660>)
 8013bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bb0:	08013c55 	.word	0x08013c55
 8013bb4:	08013c85 	.word	0x08013c85
 8013bb8:	08013c85 	.word	0x08013c85
 8013bbc:	08013c85 	.word	0x08013c85
 8013bc0:	08013c85 	.word	0x08013c85
 8013bc4:	08013c85 	.word	0x08013c85
 8013bc8:	08013c85 	.word	0x08013c85
 8013bcc:	08013c85 	.word	0x08013c85
 8013bd0:	08013c5d 	.word	0x08013c5d
 8013bd4:	08013c85 	.word	0x08013c85
 8013bd8:	08013c85 	.word	0x08013c85
 8013bdc:	08013c85 	.word	0x08013c85
 8013be0:	08013c85 	.word	0x08013c85
 8013be4:	08013c85 	.word	0x08013c85
 8013be8:	08013c85 	.word	0x08013c85
 8013bec:	08013c85 	.word	0x08013c85
 8013bf0:	08013c65 	.word	0x08013c65
 8013bf4:	08013c85 	.word	0x08013c85
 8013bf8:	08013c85 	.word	0x08013c85
 8013bfc:	08013c85 	.word	0x08013c85
 8013c00:	08013c85 	.word	0x08013c85
 8013c04:	08013c85 	.word	0x08013c85
 8013c08:	08013c85 	.word	0x08013c85
 8013c0c:	08013c85 	.word	0x08013c85
 8013c10:	08013c6d 	.word	0x08013c6d
 8013c14:	08013c85 	.word	0x08013c85
 8013c18:	08013c85 	.word	0x08013c85
 8013c1c:	08013c85 	.word	0x08013c85
 8013c20:	08013c85 	.word	0x08013c85
 8013c24:	08013c85 	.word	0x08013c85
 8013c28:	08013c85 	.word	0x08013c85
 8013c2c:	08013c85 	.word	0x08013c85
 8013c30:	08013c75 	.word	0x08013c75
 8013c34:	08013c85 	.word	0x08013c85
 8013c38:	08013c85 	.word	0x08013c85
 8013c3c:	08013c85 	.word	0x08013c85
 8013c40:	08013c85 	.word	0x08013c85
 8013c44:	08013c85 	.word	0x08013c85
 8013c48:	08013c85 	.word	0x08013c85
 8013c4c:	08013c85 	.word	0x08013c85
 8013c50:	08013c7d 	.word	0x08013c7d
 8013c54:	2301      	movs	r3, #1
 8013c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c5a:	e050      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013c5c:	2304      	movs	r3, #4
 8013c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c62:	e04c      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013c64:	2308      	movs	r3, #8
 8013c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c6a:	e048      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013c6c:	2310      	movs	r3, #16
 8013c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c72:	e044      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013c74:	2320      	movs	r3, #32
 8013c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c7a:	e040      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013c7c:	2340      	movs	r3, #64	@ 0x40
 8013c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c82:	e03c      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013c84:	2380      	movs	r3, #128	@ 0x80
 8013c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c8a:	e038      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013c8c:	697b      	ldr	r3, [r7, #20]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	4a71      	ldr	r2, [pc, #452]	@ (8013e58 <UART_SetConfig+0x908>)
 8013c92:	4293      	cmp	r3, r2
 8013c94:	d130      	bne.n	8013cf8 <UART_SetConfig+0x7a8>
 8013c96:	4b6f      	ldr	r3, [pc, #444]	@ (8013e54 <UART_SetConfig+0x904>)
 8013c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013c9a:	f003 0307 	and.w	r3, r3, #7
 8013c9e:	2b05      	cmp	r3, #5
 8013ca0:	d826      	bhi.n	8013cf0 <UART_SetConfig+0x7a0>
 8013ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8013ca8 <UART_SetConfig+0x758>)
 8013ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ca8:	08013cc1 	.word	0x08013cc1
 8013cac:	08013cc9 	.word	0x08013cc9
 8013cb0:	08013cd1 	.word	0x08013cd1
 8013cb4:	08013cd9 	.word	0x08013cd9
 8013cb8:	08013ce1 	.word	0x08013ce1
 8013cbc:	08013ce9 	.word	0x08013ce9
 8013cc0:	2302      	movs	r3, #2
 8013cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cc6:	e01a      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013cc8:	2304      	movs	r3, #4
 8013cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cce:	e016      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013cd0:	2308      	movs	r3, #8
 8013cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cd6:	e012      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013cd8:	2310      	movs	r3, #16
 8013cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cde:	e00e      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013ce0:	2320      	movs	r3, #32
 8013ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ce6:	e00a      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013ce8:	2340      	movs	r3, #64	@ 0x40
 8013cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cee:	e006      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013cf0:	2380      	movs	r3, #128	@ 0x80
 8013cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cf6:	e002      	b.n	8013cfe <UART_SetConfig+0x7ae>
 8013cf8:	2380      	movs	r3, #128	@ 0x80
 8013cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	4a55      	ldr	r2, [pc, #340]	@ (8013e58 <UART_SetConfig+0x908>)
 8013d04:	4293      	cmp	r3, r2
 8013d06:	f040 80f8 	bne.w	8013efa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013d0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013d0e:	2b20      	cmp	r3, #32
 8013d10:	dc46      	bgt.n	8013da0 <UART_SetConfig+0x850>
 8013d12:	2b02      	cmp	r3, #2
 8013d14:	db75      	blt.n	8013e02 <UART_SetConfig+0x8b2>
 8013d16:	3b02      	subs	r3, #2
 8013d18:	2b1e      	cmp	r3, #30
 8013d1a:	d872      	bhi.n	8013e02 <UART_SetConfig+0x8b2>
 8013d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8013d24 <UART_SetConfig+0x7d4>)
 8013d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d22:	bf00      	nop
 8013d24:	08013da7 	.word	0x08013da7
 8013d28:	08013e03 	.word	0x08013e03
 8013d2c:	08013daf 	.word	0x08013daf
 8013d30:	08013e03 	.word	0x08013e03
 8013d34:	08013e03 	.word	0x08013e03
 8013d38:	08013e03 	.word	0x08013e03
 8013d3c:	08013dbf 	.word	0x08013dbf
 8013d40:	08013e03 	.word	0x08013e03
 8013d44:	08013e03 	.word	0x08013e03
 8013d48:	08013e03 	.word	0x08013e03
 8013d4c:	08013e03 	.word	0x08013e03
 8013d50:	08013e03 	.word	0x08013e03
 8013d54:	08013e03 	.word	0x08013e03
 8013d58:	08013e03 	.word	0x08013e03
 8013d5c:	08013dcf 	.word	0x08013dcf
 8013d60:	08013e03 	.word	0x08013e03
 8013d64:	08013e03 	.word	0x08013e03
 8013d68:	08013e03 	.word	0x08013e03
 8013d6c:	08013e03 	.word	0x08013e03
 8013d70:	08013e03 	.word	0x08013e03
 8013d74:	08013e03 	.word	0x08013e03
 8013d78:	08013e03 	.word	0x08013e03
 8013d7c:	08013e03 	.word	0x08013e03
 8013d80:	08013e03 	.word	0x08013e03
 8013d84:	08013e03 	.word	0x08013e03
 8013d88:	08013e03 	.word	0x08013e03
 8013d8c:	08013e03 	.word	0x08013e03
 8013d90:	08013e03 	.word	0x08013e03
 8013d94:	08013e03 	.word	0x08013e03
 8013d98:	08013e03 	.word	0x08013e03
 8013d9c:	08013df5 	.word	0x08013df5
 8013da0:	2b40      	cmp	r3, #64	@ 0x40
 8013da2:	d02a      	beq.n	8013dfa <UART_SetConfig+0x8aa>
 8013da4:	e02d      	b.n	8013e02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013da6:	f7fc f80f 	bl	800fdc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8013daa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013dac:	e02f      	b.n	8013e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7fc f81e 	bl	800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013dbc:	e027      	b.n	8013e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013dbe:	f107 0318 	add.w	r3, r7, #24
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7fc f96a 	bl	801009c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013dc8:	69fb      	ldr	r3, [r7, #28]
 8013dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013dcc:	e01f      	b.n	8013e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013dce:	4b21      	ldr	r3, [pc, #132]	@ (8013e54 <UART_SetConfig+0x904>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	f003 0320 	and.w	r3, r3, #32
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d009      	beq.n	8013dee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013dda:	4b1e      	ldr	r3, [pc, #120]	@ (8013e54 <UART_SetConfig+0x904>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	08db      	lsrs	r3, r3, #3
 8013de0:	f003 0303 	and.w	r3, r3, #3
 8013de4:	4a1d      	ldr	r2, [pc, #116]	@ (8013e5c <UART_SetConfig+0x90c>)
 8013de6:	fa22 f303 	lsr.w	r3, r2, r3
 8013dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013dec:	e00f      	b.n	8013e0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013dee:	4b1b      	ldr	r3, [pc, #108]	@ (8013e5c <UART_SetConfig+0x90c>)
 8013df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013df2:	e00c      	b.n	8013e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013df4:	4b1a      	ldr	r3, [pc, #104]	@ (8013e60 <UART_SetConfig+0x910>)
 8013df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013df8:	e009      	b.n	8013e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e00:	e005      	b.n	8013e0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013e02:	2300      	movs	r3, #0
 8013e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013e06:	2301      	movs	r3, #1
 8013e08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013e0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	f000 81ee 	beq.w	80141f2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e1a:	4a12      	ldr	r2, [pc, #72]	@ (8013e64 <UART_SetConfig+0x914>)
 8013e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e20:	461a      	mov	r2, r3
 8013e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e28:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	685a      	ldr	r2, [r3, #4]
 8013e2e:	4613      	mov	r3, r2
 8013e30:	005b      	lsls	r3, r3, #1
 8013e32:	4413      	add	r3, r2
 8013e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d305      	bcc.n	8013e46 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d910      	bls.n	8013e68 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8013e46:	2301      	movs	r3, #1
 8013e48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013e4c:	e1d1      	b.n	80141f2 <UART_SetConfig+0xca2>
 8013e4e:	bf00      	nop
 8013e50:	40011c00 	.word	0x40011c00
 8013e54:	58024400 	.word	0x58024400
 8013e58:	58000c00 	.word	0x58000c00
 8013e5c:	03d09000 	.word	0x03d09000
 8013e60:	003d0900 	.word	0x003d0900
 8013e64:	0801e308 	.word	0x0801e308
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	60bb      	str	r3, [r7, #8]
 8013e6e:	60fa      	str	r2, [r7, #12]
 8013e70:	697b      	ldr	r3, [r7, #20]
 8013e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e74:	4ac0      	ldr	r2, [pc, #768]	@ (8014178 <UART_SetConfig+0xc28>)
 8013e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e7a:	b29b      	uxth	r3, r3
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	603b      	str	r3, [r7, #0]
 8013e80:	607a      	str	r2, [r7, #4]
 8013e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013e86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013e8a:	f7ec fc65 	bl	8000758 <__aeabi_uldivmod>
 8013e8e:	4602      	mov	r2, r0
 8013e90:	460b      	mov	r3, r1
 8013e92:	4610      	mov	r0, r2
 8013e94:	4619      	mov	r1, r3
 8013e96:	f04f 0200 	mov.w	r2, #0
 8013e9a:	f04f 0300 	mov.w	r3, #0
 8013e9e:	020b      	lsls	r3, r1, #8
 8013ea0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013ea4:	0202      	lsls	r2, r0, #8
 8013ea6:	6979      	ldr	r1, [r7, #20]
 8013ea8:	6849      	ldr	r1, [r1, #4]
 8013eaa:	0849      	lsrs	r1, r1, #1
 8013eac:	2000      	movs	r0, #0
 8013eae:	460c      	mov	r4, r1
 8013eb0:	4605      	mov	r5, r0
 8013eb2:	eb12 0804 	adds.w	r8, r2, r4
 8013eb6:	eb43 0905 	adc.w	r9, r3, r5
 8013eba:	697b      	ldr	r3, [r7, #20]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	469a      	mov	sl, r3
 8013ec2:	4693      	mov	fp, r2
 8013ec4:	4652      	mov	r2, sl
 8013ec6:	465b      	mov	r3, fp
 8013ec8:	4640      	mov	r0, r8
 8013eca:	4649      	mov	r1, r9
 8013ecc:	f7ec fc44 	bl	8000758 <__aeabi_uldivmod>
 8013ed0:	4602      	mov	r2, r0
 8013ed2:	460b      	mov	r3, r1
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013ede:	d308      	bcc.n	8013ef2 <UART_SetConfig+0x9a2>
 8013ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013ee6:	d204      	bcs.n	8013ef2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8013ee8:	697b      	ldr	r3, [r7, #20]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013eee:	60da      	str	r2, [r3, #12]
 8013ef0:	e17f      	b.n	80141f2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013ef8:	e17b      	b.n	80141f2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013efa:	697b      	ldr	r3, [r7, #20]
 8013efc:	69db      	ldr	r3, [r3, #28]
 8013efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013f02:	f040 80bd 	bne.w	8014080 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8013f06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013f0a:	2b20      	cmp	r3, #32
 8013f0c:	dc48      	bgt.n	8013fa0 <UART_SetConfig+0xa50>
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	db7b      	blt.n	801400a <UART_SetConfig+0xaba>
 8013f12:	2b20      	cmp	r3, #32
 8013f14:	d879      	bhi.n	801400a <UART_SetConfig+0xaba>
 8013f16:	a201      	add	r2, pc, #4	@ (adr r2, 8013f1c <UART_SetConfig+0x9cc>)
 8013f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f1c:	08013fa7 	.word	0x08013fa7
 8013f20:	08013faf 	.word	0x08013faf
 8013f24:	0801400b 	.word	0x0801400b
 8013f28:	0801400b 	.word	0x0801400b
 8013f2c:	08013fb7 	.word	0x08013fb7
 8013f30:	0801400b 	.word	0x0801400b
 8013f34:	0801400b 	.word	0x0801400b
 8013f38:	0801400b 	.word	0x0801400b
 8013f3c:	08013fc7 	.word	0x08013fc7
 8013f40:	0801400b 	.word	0x0801400b
 8013f44:	0801400b 	.word	0x0801400b
 8013f48:	0801400b 	.word	0x0801400b
 8013f4c:	0801400b 	.word	0x0801400b
 8013f50:	0801400b 	.word	0x0801400b
 8013f54:	0801400b 	.word	0x0801400b
 8013f58:	0801400b 	.word	0x0801400b
 8013f5c:	08013fd7 	.word	0x08013fd7
 8013f60:	0801400b 	.word	0x0801400b
 8013f64:	0801400b 	.word	0x0801400b
 8013f68:	0801400b 	.word	0x0801400b
 8013f6c:	0801400b 	.word	0x0801400b
 8013f70:	0801400b 	.word	0x0801400b
 8013f74:	0801400b 	.word	0x0801400b
 8013f78:	0801400b 	.word	0x0801400b
 8013f7c:	0801400b 	.word	0x0801400b
 8013f80:	0801400b 	.word	0x0801400b
 8013f84:	0801400b 	.word	0x0801400b
 8013f88:	0801400b 	.word	0x0801400b
 8013f8c:	0801400b 	.word	0x0801400b
 8013f90:	0801400b 	.word	0x0801400b
 8013f94:	0801400b 	.word	0x0801400b
 8013f98:	0801400b 	.word	0x0801400b
 8013f9c:	08013ffd 	.word	0x08013ffd
 8013fa0:	2b40      	cmp	r3, #64	@ 0x40
 8013fa2:	d02e      	beq.n	8014002 <UART_SetConfig+0xab2>
 8013fa4:	e031      	b.n	801400a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013fa6:	f7fa f871 	bl	800e08c <HAL_RCC_GetPCLK1Freq>
 8013faa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013fac:	e033      	b.n	8014016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013fae:	f7fa f883 	bl	800e0b8 <HAL_RCC_GetPCLK2Freq>
 8013fb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013fb4:	e02f      	b.n	8014016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7fb ff1a 	bl	800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013fc4:	e027      	b.n	8014016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013fc6:	f107 0318 	add.w	r3, r7, #24
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7fc f866 	bl	801009c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013fd0:	69fb      	ldr	r3, [r7, #28]
 8013fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013fd4:	e01f      	b.n	8014016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013fd6:	4b69      	ldr	r3, [pc, #420]	@ (801417c <UART_SetConfig+0xc2c>)
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	f003 0320 	and.w	r3, r3, #32
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d009      	beq.n	8013ff6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013fe2:	4b66      	ldr	r3, [pc, #408]	@ (801417c <UART_SetConfig+0xc2c>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	08db      	lsrs	r3, r3, #3
 8013fe8:	f003 0303 	and.w	r3, r3, #3
 8013fec:	4a64      	ldr	r2, [pc, #400]	@ (8014180 <UART_SetConfig+0xc30>)
 8013fee:	fa22 f303 	lsr.w	r3, r2, r3
 8013ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013ff4:	e00f      	b.n	8014016 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8013ff6:	4b62      	ldr	r3, [pc, #392]	@ (8014180 <UART_SetConfig+0xc30>)
 8013ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ffa:	e00c      	b.n	8014016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013ffc:	4b61      	ldr	r3, [pc, #388]	@ (8014184 <UART_SetConfig+0xc34>)
 8013ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014000:	e009      	b.n	8014016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014008:	e005      	b.n	8014016 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801400a:	2300      	movs	r3, #0
 801400c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801400e:	2301      	movs	r3, #1
 8014010:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014014:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014018:	2b00      	cmp	r3, #0
 801401a:	f000 80ea 	beq.w	80141f2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014022:	4a55      	ldr	r2, [pc, #340]	@ (8014178 <UART_SetConfig+0xc28>)
 8014024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014028:	461a      	mov	r2, r3
 801402a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801402c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014030:	005a      	lsls	r2, r3, #1
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	685b      	ldr	r3, [r3, #4]
 8014036:	085b      	lsrs	r3, r3, #1
 8014038:	441a      	add	r2, r3
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	685b      	ldr	r3, [r3, #4]
 801403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014042:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014046:	2b0f      	cmp	r3, #15
 8014048:	d916      	bls.n	8014078 <UART_SetConfig+0xb28>
 801404a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801404c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014050:	d212      	bcs.n	8014078 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014054:	b29b      	uxth	r3, r3
 8014056:	f023 030f 	bic.w	r3, r3, #15
 801405a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801405c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801405e:	085b      	lsrs	r3, r3, #1
 8014060:	b29b      	uxth	r3, r3
 8014062:	f003 0307 	and.w	r3, r3, #7
 8014066:	b29a      	uxth	r2, r3
 8014068:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801406a:	4313      	orrs	r3, r2
 801406c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014074:	60da      	str	r2, [r3, #12]
 8014076:	e0bc      	b.n	80141f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014078:	2301      	movs	r3, #1
 801407a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801407e:	e0b8      	b.n	80141f2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014080:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014084:	2b20      	cmp	r3, #32
 8014086:	dc4b      	bgt.n	8014120 <UART_SetConfig+0xbd0>
 8014088:	2b00      	cmp	r3, #0
 801408a:	f2c0 8087 	blt.w	801419c <UART_SetConfig+0xc4c>
 801408e:	2b20      	cmp	r3, #32
 8014090:	f200 8084 	bhi.w	801419c <UART_SetConfig+0xc4c>
 8014094:	a201      	add	r2, pc, #4	@ (adr r2, 801409c <UART_SetConfig+0xb4c>)
 8014096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801409a:	bf00      	nop
 801409c:	08014127 	.word	0x08014127
 80140a0:	0801412f 	.word	0x0801412f
 80140a4:	0801419d 	.word	0x0801419d
 80140a8:	0801419d 	.word	0x0801419d
 80140ac:	08014137 	.word	0x08014137
 80140b0:	0801419d 	.word	0x0801419d
 80140b4:	0801419d 	.word	0x0801419d
 80140b8:	0801419d 	.word	0x0801419d
 80140bc:	08014147 	.word	0x08014147
 80140c0:	0801419d 	.word	0x0801419d
 80140c4:	0801419d 	.word	0x0801419d
 80140c8:	0801419d 	.word	0x0801419d
 80140cc:	0801419d 	.word	0x0801419d
 80140d0:	0801419d 	.word	0x0801419d
 80140d4:	0801419d 	.word	0x0801419d
 80140d8:	0801419d 	.word	0x0801419d
 80140dc:	08014157 	.word	0x08014157
 80140e0:	0801419d 	.word	0x0801419d
 80140e4:	0801419d 	.word	0x0801419d
 80140e8:	0801419d 	.word	0x0801419d
 80140ec:	0801419d 	.word	0x0801419d
 80140f0:	0801419d 	.word	0x0801419d
 80140f4:	0801419d 	.word	0x0801419d
 80140f8:	0801419d 	.word	0x0801419d
 80140fc:	0801419d 	.word	0x0801419d
 8014100:	0801419d 	.word	0x0801419d
 8014104:	0801419d 	.word	0x0801419d
 8014108:	0801419d 	.word	0x0801419d
 801410c:	0801419d 	.word	0x0801419d
 8014110:	0801419d 	.word	0x0801419d
 8014114:	0801419d 	.word	0x0801419d
 8014118:	0801419d 	.word	0x0801419d
 801411c:	0801418f 	.word	0x0801418f
 8014120:	2b40      	cmp	r3, #64	@ 0x40
 8014122:	d037      	beq.n	8014194 <UART_SetConfig+0xc44>
 8014124:	e03a      	b.n	801419c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014126:	f7f9 ffb1 	bl	800e08c <HAL_RCC_GetPCLK1Freq>
 801412a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801412c:	e03c      	b.n	80141a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801412e:	f7f9 ffc3 	bl	800e0b8 <HAL_RCC_GetPCLK2Freq>
 8014132:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014134:	e038      	b.n	80141a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801413a:	4618      	mov	r0, r3
 801413c:	f7fb fe5a 	bl	800fdf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014144:	e030      	b.n	80141a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014146:	f107 0318 	add.w	r3, r7, #24
 801414a:	4618      	mov	r0, r3
 801414c:	f7fb ffa6 	bl	801009c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014150:	69fb      	ldr	r3, [r7, #28]
 8014152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014154:	e028      	b.n	80141a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014156:	4b09      	ldr	r3, [pc, #36]	@ (801417c <UART_SetConfig+0xc2c>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	f003 0320 	and.w	r3, r3, #32
 801415e:	2b00      	cmp	r3, #0
 8014160:	d012      	beq.n	8014188 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014162:	4b06      	ldr	r3, [pc, #24]	@ (801417c <UART_SetConfig+0xc2c>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	08db      	lsrs	r3, r3, #3
 8014168:	f003 0303 	and.w	r3, r3, #3
 801416c:	4a04      	ldr	r2, [pc, #16]	@ (8014180 <UART_SetConfig+0xc30>)
 801416e:	fa22 f303 	lsr.w	r3, r2, r3
 8014172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014174:	e018      	b.n	80141a8 <UART_SetConfig+0xc58>
 8014176:	bf00      	nop
 8014178:	0801e308 	.word	0x0801e308
 801417c:	58024400 	.word	0x58024400
 8014180:	03d09000 	.word	0x03d09000
 8014184:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8014188:	4b24      	ldr	r3, [pc, #144]	@ (801421c <UART_SetConfig+0xccc>)
 801418a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801418c:	e00c      	b.n	80141a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801418e:	4b24      	ldr	r3, [pc, #144]	@ (8014220 <UART_SetConfig+0xcd0>)
 8014190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014192:	e009      	b.n	80141a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801419a:	e005      	b.n	80141a8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801419c:	2300      	movs	r3, #0
 801419e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80141a0:	2301      	movs	r3, #1
 80141a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80141a6:	bf00      	nop
    }

    if (pclk != 0U)
 80141a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d021      	beq.n	80141f2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80141ae:	697b      	ldr	r3, [r7, #20]
 80141b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141b2:	4a1c      	ldr	r2, [pc, #112]	@ (8014224 <UART_SetConfig+0xcd4>)
 80141b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141b8:	461a      	mov	r2, r3
 80141ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	685b      	ldr	r3, [r3, #4]
 80141c4:	085b      	lsrs	r3, r3, #1
 80141c6:	441a      	add	r2, r3
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	685b      	ldr	r3, [r3, #4]
 80141cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80141d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80141d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141d4:	2b0f      	cmp	r3, #15
 80141d6:	d909      	bls.n	80141ec <UART_SetConfig+0xc9c>
 80141d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80141de:	d205      	bcs.n	80141ec <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80141e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141e2:	b29a      	uxth	r2, r3
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	60da      	str	r2, [r3, #12]
 80141ea:	e002      	b.n	80141f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80141ec:	2301      	movs	r3, #1
 80141ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80141f2:	697b      	ldr	r3, [r7, #20]
 80141f4:	2201      	movs	r2, #1
 80141f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	2201      	movs	r2, #1
 80141fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	2200      	movs	r2, #0
 8014206:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	2200      	movs	r2, #0
 801420c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801420e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8014212:	4618      	mov	r0, r3
 8014214:	3748      	adds	r7, #72	@ 0x48
 8014216:	46bd      	mov	sp, r7
 8014218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801421c:	03d09000 	.word	0x03d09000
 8014220:	003d0900 	.word	0x003d0900
 8014224:	0801e308 	.word	0x0801e308

08014228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014228:	b480      	push	{r7}
 801422a:	b083      	sub	sp, #12
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014234:	f003 0308 	and.w	r3, r3, #8
 8014238:	2b00      	cmp	r3, #0
 801423a:	d00a      	beq.n	8014252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	430a      	orrs	r2, r1
 8014250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014256:	f003 0301 	and.w	r3, r3, #1
 801425a:	2b00      	cmp	r3, #0
 801425c:	d00a      	beq.n	8014274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	430a      	orrs	r2, r1
 8014272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014278:	f003 0302 	and.w	r3, r3, #2
 801427c:	2b00      	cmp	r3, #0
 801427e:	d00a      	beq.n	8014296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	685b      	ldr	r3, [r3, #4]
 8014286:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	430a      	orrs	r2, r1
 8014294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801429a:	f003 0304 	and.w	r3, r3, #4
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d00a      	beq.n	80142b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	685b      	ldr	r3, [r3, #4]
 80142a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	430a      	orrs	r2, r1
 80142b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142bc:	f003 0310 	and.w	r3, r3, #16
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d00a      	beq.n	80142da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	689b      	ldr	r3, [r3, #8]
 80142ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	430a      	orrs	r2, r1
 80142d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142de:	f003 0320 	and.w	r3, r3, #32
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d00a      	beq.n	80142fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	689b      	ldr	r3, [r3, #8]
 80142ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	430a      	orrs	r2, r1
 80142fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014304:	2b00      	cmp	r3, #0
 8014306:	d01a      	beq.n	801433e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	685b      	ldr	r3, [r3, #4]
 801430e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	430a      	orrs	r2, r1
 801431c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014322:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014326:	d10a      	bne.n	801433e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	430a      	orrs	r2, r1
 801433c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014346:	2b00      	cmp	r3, #0
 8014348:	d00a      	beq.n	8014360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	430a      	orrs	r2, r1
 801435e:	605a      	str	r2, [r3, #4]
  }
}
 8014360:	bf00      	nop
 8014362:	370c      	adds	r7, #12
 8014364:	46bd      	mov	sp, r7
 8014366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436a:	4770      	bx	lr

0801436c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b098      	sub	sp, #96	@ 0x60
 8014370:	af02      	add	r7, sp, #8
 8014372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	2200      	movs	r2, #0
 8014378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801437c:	f7f3 f884 	bl	8007488 <HAL_GetTick>
 8014380:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	f003 0308 	and.w	r3, r3, #8
 801438c:	2b08      	cmp	r3, #8
 801438e:	d12f      	bne.n	80143f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014390:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014394:	9300      	str	r3, [sp, #0]
 8014396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014398:	2200      	movs	r2, #0
 801439a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f000 f88e 	bl	80144c0 <UART_WaitOnFlagUntilTimeout>
 80143a4:	4603      	mov	r3, r0
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d022      	beq.n	80143f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143b2:	e853 3f00 	ldrex	r3, [r3]
 80143b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80143b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80143be:	653b      	str	r3, [r7, #80]	@ 0x50
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	461a      	mov	r2, r3
 80143c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80143ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80143ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80143d0:	e841 2300 	strex	r3, r2, [r1]
 80143d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80143d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d1e6      	bne.n	80143aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	2220      	movs	r2, #32
 80143e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2200      	movs	r2, #0
 80143e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80143ec:	2303      	movs	r3, #3
 80143ee:	e063      	b.n	80144b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	f003 0304 	and.w	r3, r3, #4
 80143fa:	2b04      	cmp	r3, #4
 80143fc:	d149      	bne.n	8014492 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80143fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014402:	9300      	str	r3, [sp, #0]
 8014404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014406:	2200      	movs	r2, #0
 8014408:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f000 f857 	bl	80144c0 <UART_WaitOnFlagUntilTimeout>
 8014412:	4603      	mov	r3, r0
 8014414:	2b00      	cmp	r3, #0
 8014416:	d03c      	beq.n	8014492 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014420:	e853 3f00 	ldrex	r3, [r3]
 8014424:	623b      	str	r3, [r7, #32]
   return(result);
 8014426:	6a3b      	ldr	r3, [r7, #32]
 8014428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801442c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	461a      	mov	r2, r3
 8014434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014436:	633b      	str	r3, [r7, #48]	@ 0x30
 8014438:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801443a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801443c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801443e:	e841 2300 	strex	r3, r2, [r1]
 8014442:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014446:	2b00      	cmp	r3, #0
 8014448:	d1e6      	bne.n	8014418 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	3308      	adds	r3, #8
 8014450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	e853 3f00 	ldrex	r3, [r3]
 8014458:	60fb      	str	r3, [r7, #12]
   return(result);
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	f023 0301 	bic.w	r3, r3, #1
 8014460:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	3308      	adds	r3, #8
 8014468:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801446a:	61fa      	str	r2, [r7, #28]
 801446c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801446e:	69b9      	ldr	r1, [r7, #24]
 8014470:	69fa      	ldr	r2, [r7, #28]
 8014472:	e841 2300 	strex	r3, r2, [r1]
 8014476:	617b      	str	r3, [r7, #20]
   return(result);
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d1e5      	bne.n	801444a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	2220      	movs	r2, #32
 8014482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	2200      	movs	r2, #0
 801448a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801448e:	2303      	movs	r3, #3
 8014490:	e012      	b.n	80144b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2220      	movs	r2, #32
 8014496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2220      	movs	r2, #32
 801449e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2200      	movs	r2, #0
 80144a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2200      	movs	r2, #0
 80144ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2200      	movs	r2, #0
 80144b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80144b6:	2300      	movs	r3, #0
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	3758      	adds	r7, #88	@ 0x58
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}

080144c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b084      	sub	sp, #16
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	60f8      	str	r0, [r7, #12]
 80144c8:	60b9      	str	r1, [r7, #8]
 80144ca:	603b      	str	r3, [r7, #0]
 80144cc:	4613      	mov	r3, r2
 80144ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80144d0:	e04f      	b.n	8014572 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144d8:	d04b      	beq.n	8014572 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80144da:	f7f2 ffd5 	bl	8007488 <HAL_GetTick>
 80144de:	4602      	mov	r2, r0
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	1ad3      	subs	r3, r2, r3
 80144e4:	69ba      	ldr	r2, [r7, #24]
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d302      	bcc.n	80144f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80144ea:	69bb      	ldr	r3, [r7, #24]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d101      	bne.n	80144f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80144f0:	2303      	movs	r3, #3
 80144f2:	e04e      	b.n	8014592 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	f003 0304 	and.w	r3, r3, #4
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d037      	beq.n	8014572 <UART_WaitOnFlagUntilTimeout+0xb2>
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	2b80      	cmp	r3, #128	@ 0x80
 8014506:	d034      	beq.n	8014572 <UART_WaitOnFlagUntilTimeout+0xb2>
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	2b40      	cmp	r3, #64	@ 0x40
 801450c:	d031      	beq.n	8014572 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	69db      	ldr	r3, [r3, #28]
 8014514:	f003 0308 	and.w	r3, r3, #8
 8014518:	2b08      	cmp	r3, #8
 801451a:	d110      	bne.n	801453e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	2208      	movs	r2, #8
 8014522:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014524:	68f8      	ldr	r0, [r7, #12]
 8014526:	f000 f839 	bl	801459c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	2208      	movs	r2, #8
 801452e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	2200      	movs	r2, #0
 8014536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801453a:	2301      	movs	r3, #1
 801453c:	e029      	b.n	8014592 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	69db      	ldr	r3, [r3, #28]
 8014544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801454c:	d111      	bne.n	8014572 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014556:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014558:	68f8      	ldr	r0, [r7, #12]
 801455a:	f000 f81f 	bl	801459c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2220      	movs	r2, #32
 8014562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	2200      	movs	r2, #0
 801456a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801456e:	2303      	movs	r3, #3
 8014570:	e00f      	b.n	8014592 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	69da      	ldr	r2, [r3, #28]
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	4013      	ands	r3, r2
 801457c:	68ba      	ldr	r2, [r7, #8]
 801457e:	429a      	cmp	r2, r3
 8014580:	bf0c      	ite	eq
 8014582:	2301      	moveq	r3, #1
 8014584:	2300      	movne	r3, #0
 8014586:	b2db      	uxtb	r3, r3
 8014588:	461a      	mov	r2, r3
 801458a:	79fb      	ldrb	r3, [r7, #7]
 801458c:	429a      	cmp	r2, r3
 801458e:	d0a0      	beq.n	80144d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014590:	2300      	movs	r3, #0
}
 8014592:	4618      	mov	r0, r3
 8014594:	3710      	adds	r7, #16
 8014596:	46bd      	mov	sp, r7
 8014598:	bd80      	pop	{r7, pc}
	...

0801459c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801459c:	b480      	push	{r7}
 801459e:	b095      	sub	sp, #84	@ 0x54
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145ac:	e853 3f00 	ldrex	r3, [r3]
 80145b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80145b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80145b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	461a      	mov	r2, r3
 80145c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80145c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80145c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80145ca:	e841 2300 	strex	r3, r2, [r1]
 80145ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80145d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d1e6      	bne.n	80145a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	3308      	adds	r3, #8
 80145dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145de:	6a3b      	ldr	r3, [r7, #32]
 80145e0:	e853 3f00 	ldrex	r3, [r3]
 80145e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80145e6:	69fa      	ldr	r2, [r7, #28]
 80145e8:	4b1e      	ldr	r3, [pc, #120]	@ (8014664 <UART_EndRxTransfer+0xc8>)
 80145ea:	4013      	ands	r3, r2
 80145ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	3308      	adds	r3, #8
 80145f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80145f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80145f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80145fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80145fe:	e841 2300 	strex	r3, r2, [r1]
 8014602:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014606:	2b00      	cmp	r3, #0
 8014608:	d1e5      	bne.n	80145d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801460e:	2b01      	cmp	r3, #1
 8014610:	d118      	bne.n	8014644 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	e853 3f00 	ldrex	r3, [r3]
 801461e:	60bb      	str	r3, [r7, #8]
   return(result);
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	f023 0310 	bic.w	r3, r3, #16
 8014626:	647b      	str	r3, [r7, #68]	@ 0x44
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	461a      	mov	r2, r3
 801462e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014630:	61bb      	str	r3, [r7, #24]
 8014632:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014634:	6979      	ldr	r1, [r7, #20]
 8014636:	69ba      	ldr	r2, [r7, #24]
 8014638:	e841 2300 	strex	r3, r2, [r1]
 801463c:	613b      	str	r3, [r7, #16]
   return(result);
 801463e:	693b      	ldr	r3, [r7, #16]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d1e6      	bne.n	8014612 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2220      	movs	r2, #32
 8014648:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2200      	movs	r2, #0
 8014650:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	2200      	movs	r2, #0
 8014656:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8014658:	bf00      	nop
 801465a:	3754      	adds	r7, #84	@ 0x54
 801465c:	46bd      	mov	sp, r7
 801465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014662:	4770      	bx	lr
 8014664:	effffffe 	.word	0xeffffffe

08014668 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014668:	b480      	push	{r7}
 801466a:	b085      	sub	sp, #20
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014676:	2b01      	cmp	r3, #1
 8014678:	d101      	bne.n	801467e <HAL_UARTEx_DisableFifoMode+0x16>
 801467a:	2302      	movs	r3, #2
 801467c:	e027      	b.n	80146ce <HAL_UARTEx_DisableFifoMode+0x66>
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	2201      	movs	r2, #1
 8014682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2224      	movs	r2, #36	@ 0x24
 801468a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	681a      	ldr	r2, [r3, #0]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	f022 0201 	bic.w	r2, r2, #1
 80146a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80146ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	2200      	movs	r2, #0
 80146b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	68fa      	ldr	r2, [r7, #12]
 80146ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	2220      	movs	r2, #32
 80146c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2200      	movs	r2, #0
 80146c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80146cc:	2300      	movs	r3, #0
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	3714      	adds	r7, #20
 80146d2:	46bd      	mov	sp, r7
 80146d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d8:	4770      	bx	lr

080146da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80146da:	b580      	push	{r7, lr}
 80146dc:	b084      	sub	sp, #16
 80146de:	af00      	add	r7, sp, #0
 80146e0:	6078      	str	r0, [r7, #4]
 80146e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80146ea:	2b01      	cmp	r3, #1
 80146ec:	d101      	bne.n	80146f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80146ee:	2302      	movs	r3, #2
 80146f0:	e02d      	b.n	801474e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	2201      	movs	r2, #1
 80146f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2224      	movs	r2, #36	@ 0x24
 80146fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	681a      	ldr	r2, [r3, #0]
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	f022 0201 	bic.w	r2, r2, #1
 8014718:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	689b      	ldr	r3, [r3, #8]
 8014720:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	683a      	ldr	r2, [r7, #0]
 801472a:	430a      	orrs	r2, r1
 801472c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f000 f850 	bl	80147d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	68fa      	ldr	r2, [r7, #12]
 801473a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2220      	movs	r2, #32
 8014740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2200      	movs	r2, #0
 8014748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801474c:	2300      	movs	r3, #0
}
 801474e:	4618      	mov	r0, r3
 8014750:	3710      	adds	r7, #16
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}

08014756 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014756:	b580      	push	{r7, lr}
 8014758:	b084      	sub	sp, #16
 801475a:	af00      	add	r7, sp, #0
 801475c:	6078      	str	r0, [r7, #4]
 801475e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014766:	2b01      	cmp	r3, #1
 8014768:	d101      	bne.n	801476e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801476a:	2302      	movs	r3, #2
 801476c:	e02d      	b.n	80147ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2201      	movs	r2, #1
 8014772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2224      	movs	r2, #36	@ 0x24
 801477a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	681a      	ldr	r2, [r3, #0]
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	f022 0201 	bic.w	r2, r2, #1
 8014794:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	689b      	ldr	r3, [r3, #8]
 801479c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	683a      	ldr	r2, [r7, #0]
 80147a6:	430a      	orrs	r2, r1
 80147a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f000 f812 	bl	80147d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	68fa      	ldr	r2, [r7, #12]
 80147b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2220      	movs	r2, #32
 80147bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2200      	movs	r2, #0
 80147c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80147c8:	2300      	movs	r3, #0
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	3710      	adds	r7, #16
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}
	...

080147d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80147d4:	b480      	push	{r7}
 80147d6:	b085      	sub	sp, #20
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d108      	bne.n	80147f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	2201      	movs	r2, #1
 80147e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2201      	movs	r2, #1
 80147f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80147f4:	e031      	b.n	801485a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80147f6:	2310      	movs	r3, #16
 80147f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80147fa:	2310      	movs	r3, #16
 80147fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	689b      	ldr	r3, [r3, #8]
 8014804:	0e5b      	lsrs	r3, r3, #25
 8014806:	b2db      	uxtb	r3, r3
 8014808:	f003 0307 	and.w	r3, r3, #7
 801480c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	689b      	ldr	r3, [r3, #8]
 8014814:	0f5b      	lsrs	r3, r3, #29
 8014816:	b2db      	uxtb	r3, r3
 8014818:	f003 0307 	and.w	r3, r3, #7
 801481c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801481e:	7bbb      	ldrb	r3, [r7, #14]
 8014820:	7b3a      	ldrb	r2, [r7, #12]
 8014822:	4911      	ldr	r1, [pc, #68]	@ (8014868 <UARTEx_SetNbDataToProcess+0x94>)
 8014824:	5c8a      	ldrb	r2, [r1, r2]
 8014826:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801482a:	7b3a      	ldrb	r2, [r7, #12]
 801482c:	490f      	ldr	r1, [pc, #60]	@ (801486c <UARTEx_SetNbDataToProcess+0x98>)
 801482e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014830:	fb93 f3f2 	sdiv	r3, r3, r2
 8014834:	b29a      	uxth	r2, r3
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801483c:	7bfb      	ldrb	r3, [r7, #15]
 801483e:	7b7a      	ldrb	r2, [r7, #13]
 8014840:	4909      	ldr	r1, [pc, #36]	@ (8014868 <UARTEx_SetNbDataToProcess+0x94>)
 8014842:	5c8a      	ldrb	r2, [r1, r2]
 8014844:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014848:	7b7a      	ldrb	r2, [r7, #13]
 801484a:	4908      	ldr	r1, [pc, #32]	@ (801486c <UARTEx_SetNbDataToProcess+0x98>)
 801484c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801484e:	fb93 f3f2 	sdiv	r3, r3, r2
 8014852:	b29a      	uxth	r2, r3
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801485a:	bf00      	nop
 801485c:	3714      	adds	r7, #20
 801485e:	46bd      	mov	sp, r7
 8014860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014864:	4770      	bx	lr
 8014866:	bf00      	nop
 8014868:	0801e320 	.word	0x0801e320
 801486c:	0801e328 	.word	0x0801e328

08014870 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014870:	b084      	sub	sp, #16
 8014872:	b580      	push	{r7, lr}
 8014874:	b084      	sub	sp, #16
 8014876:	af00      	add	r7, sp, #0
 8014878:	6078      	str	r0, [r7, #4]
 801487a:	f107 001c 	add.w	r0, r7, #28
 801487e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014882:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014886:	2b01      	cmp	r3, #1
 8014888:	d121      	bne.n	80148ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801488e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	68da      	ldr	r2, [r3, #12]
 801489a:	4b2c      	ldr	r3, [pc, #176]	@ (801494c <USB_CoreInit+0xdc>)
 801489c:	4013      	ands	r3, r2
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	68db      	ldr	r3, [r3, #12]
 80148a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80148ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80148b2:	2b01      	cmp	r3, #1
 80148b4:	d105      	bne.n	80148c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	68db      	ldr	r3, [r3, #12]
 80148ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80148c2:	6878      	ldr	r0, [r7, #4]
 80148c4:	f001 faf6 	bl	8015eb4 <USB_CoreReset>
 80148c8:	4603      	mov	r3, r0
 80148ca:	73fb      	strb	r3, [r7, #15]
 80148cc:	e01b      	b.n	8014906 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	68db      	ldr	r3, [r3, #12]
 80148d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f001 faea 	bl	8015eb4 <USB_CoreReset>
 80148e0:	4603      	mov	r3, r0
 80148e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80148e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d106      	bne.n	80148fa <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80148f8:	e005      	b.n	8014906 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014906:	7fbb      	ldrb	r3, [r7, #30]
 8014908:	2b01      	cmp	r3, #1
 801490a:	d116      	bne.n	801493a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014910:	b29a      	uxth	r2, r3
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801491a:	4b0d      	ldr	r3, [pc, #52]	@ (8014950 <USB_CoreInit+0xe0>)
 801491c:	4313      	orrs	r3, r2
 801491e:	687a      	ldr	r2, [r7, #4]
 8014920:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	689b      	ldr	r3, [r3, #8]
 8014926:	f043 0206 	orr.w	r2, r3, #6
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	689b      	ldr	r3, [r3, #8]
 8014932:	f043 0220 	orr.w	r2, r3, #32
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801493a:	7bfb      	ldrb	r3, [r7, #15]
}
 801493c:	4618      	mov	r0, r3
 801493e:	3710      	adds	r7, #16
 8014940:	46bd      	mov	sp, r7
 8014942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014946:	b004      	add	sp, #16
 8014948:	4770      	bx	lr
 801494a:	bf00      	nop
 801494c:	ffbdffbf 	.word	0xffbdffbf
 8014950:	03ee0000 	.word	0x03ee0000

08014954 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8014954:	b480      	push	{r7}
 8014956:	b087      	sub	sp, #28
 8014958:	af00      	add	r7, sp, #0
 801495a:	60f8      	str	r0, [r7, #12]
 801495c:	60b9      	str	r1, [r7, #8]
 801495e:	4613      	mov	r3, r2
 8014960:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8014962:	79fb      	ldrb	r3, [r7, #7]
 8014964:	2b02      	cmp	r3, #2
 8014966:	d165      	bne.n	8014a34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	4a41      	ldr	r2, [pc, #260]	@ (8014a70 <USB_SetTurnaroundTime+0x11c>)
 801496c:	4293      	cmp	r3, r2
 801496e:	d906      	bls.n	801497e <USB_SetTurnaroundTime+0x2a>
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	4a40      	ldr	r2, [pc, #256]	@ (8014a74 <USB_SetTurnaroundTime+0x120>)
 8014974:	4293      	cmp	r3, r2
 8014976:	d202      	bcs.n	801497e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014978:	230f      	movs	r3, #15
 801497a:	617b      	str	r3, [r7, #20]
 801497c:	e062      	b.n	8014a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	4a3c      	ldr	r2, [pc, #240]	@ (8014a74 <USB_SetTurnaroundTime+0x120>)
 8014982:	4293      	cmp	r3, r2
 8014984:	d306      	bcc.n	8014994 <USB_SetTurnaroundTime+0x40>
 8014986:	68bb      	ldr	r3, [r7, #8]
 8014988:	4a3b      	ldr	r2, [pc, #236]	@ (8014a78 <USB_SetTurnaroundTime+0x124>)
 801498a:	4293      	cmp	r3, r2
 801498c:	d202      	bcs.n	8014994 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801498e:	230e      	movs	r3, #14
 8014990:	617b      	str	r3, [r7, #20]
 8014992:	e057      	b.n	8014a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014994:	68bb      	ldr	r3, [r7, #8]
 8014996:	4a38      	ldr	r2, [pc, #224]	@ (8014a78 <USB_SetTurnaroundTime+0x124>)
 8014998:	4293      	cmp	r3, r2
 801499a:	d306      	bcc.n	80149aa <USB_SetTurnaroundTime+0x56>
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	4a37      	ldr	r2, [pc, #220]	@ (8014a7c <USB_SetTurnaroundTime+0x128>)
 80149a0:	4293      	cmp	r3, r2
 80149a2:	d202      	bcs.n	80149aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80149a4:	230d      	movs	r3, #13
 80149a6:	617b      	str	r3, [r7, #20]
 80149a8:	e04c      	b.n	8014a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80149aa:	68bb      	ldr	r3, [r7, #8]
 80149ac:	4a33      	ldr	r2, [pc, #204]	@ (8014a7c <USB_SetTurnaroundTime+0x128>)
 80149ae:	4293      	cmp	r3, r2
 80149b0:	d306      	bcc.n	80149c0 <USB_SetTurnaroundTime+0x6c>
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	4a32      	ldr	r2, [pc, #200]	@ (8014a80 <USB_SetTurnaroundTime+0x12c>)
 80149b6:	4293      	cmp	r3, r2
 80149b8:	d802      	bhi.n	80149c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80149ba:	230c      	movs	r3, #12
 80149bc:	617b      	str	r3, [r7, #20]
 80149be:	e041      	b.n	8014a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	4a2f      	ldr	r2, [pc, #188]	@ (8014a80 <USB_SetTurnaroundTime+0x12c>)
 80149c4:	4293      	cmp	r3, r2
 80149c6:	d906      	bls.n	80149d6 <USB_SetTurnaroundTime+0x82>
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	4a2e      	ldr	r2, [pc, #184]	@ (8014a84 <USB_SetTurnaroundTime+0x130>)
 80149cc:	4293      	cmp	r3, r2
 80149ce:	d802      	bhi.n	80149d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80149d0:	230b      	movs	r3, #11
 80149d2:	617b      	str	r3, [r7, #20]
 80149d4:	e036      	b.n	8014a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80149d6:	68bb      	ldr	r3, [r7, #8]
 80149d8:	4a2a      	ldr	r2, [pc, #168]	@ (8014a84 <USB_SetTurnaroundTime+0x130>)
 80149da:	4293      	cmp	r3, r2
 80149dc:	d906      	bls.n	80149ec <USB_SetTurnaroundTime+0x98>
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	4a29      	ldr	r2, [pc, #164]	@ (8014a88 <USB_SetTurnaroundTime+0x134>)
 80149e2:	4293      	cmp	r3, r2
 80149e4:	d802      	bhi.n	80149ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80149e6:	230a      	movs	r3, #10
 80149e8:	617b      	str	r3, [r7, #20]
 80149ea:	e02b      	b.n	8014a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	4a26      	ldr	r2, [pc, #152]	@ (8014a88 <USB_SetTurnaroundTime+0x134>)
 80149f0:	4293      	cmp	r3, r2
 80149f2:	d906      	bls.n	8014a02 <USB_SetTurnaroundTime+0xae>
 80149f4:	68bb      	ldr	r3, [r7, #8]
 80149f6:	4a25      	ldr	r2, [pc, #148]	@ (8014a8c <USB_SetTurnaroundTime+0x138>)
 80149f8:	4293      	cmp	r3, r2
 80149fa:	d202      	bcs.n	8014a02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80149fc:	2309      	movs	r3, #9
 80149fe:	617b      	str	r3, [r7, #20]
 8014a00:	e020      	b.n	8014a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	4a21      	ldr	r2, [pc, #132]	@ (8014a8c <USB_SetTurnaroundTime+0x138>)
 8014a06:	4293      	cmp	r3, r2
 8014a08:	d306      	bcc.n	8014a18 <USB_SetTurnaroundTime+0xc4>
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	4a20      	ldr	r2, [pc, #128]	@ (8014a90 <USB_SetTurnaroundTime+0x13c>)
 8014a0e:	4293      	cmp	r3, r2
 8014a10:	d802      	bhi.n	8014a18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014a12:	2308      	movs	r3, #8
 8014a14:	617b      	str	r3, [r7, #20]
 8014a16:	e015      	b.n	8014a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8014a90 <USB_SetTurnaroundTime+0x13c>)
 8014a1c:	4293      	cmp	r3, r2
 8014a1e:	d906      	bls.n	8014a2e <USB_SetTurnaroundTime+0xda>
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	4a1c      	ldr	r2, [pc, #112]	@ (8014a94 <USB_SetTurnaroundTime+0x140>)
 8014a24:	4293      	cmp	r3, r2
 8014a26:	d202      	bcs.n	8014a2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014a28:	2307      	movs	r3, #7
 8014a2a:	617b      	str	r3, [r7, #20]
 8014a2c:	e00a      	b.n	8014a44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014a2e:	2306      	movs	r3, #6
 8014a30:	617b      	str	r3, [r7, #20]
 8014a32:	e007      	b.n	8014a44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8014a34:	79fb      	ldrb	r3, [r7, #7]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d102      	bne.n	8014a40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014a3a:	2309      	movs	r3, #9
 8014a3c:	617b      	str	r3, [r7, #20]
 8014a3e:	e001      	b.n	8014a44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014a40:	2309      	movs	r3, #9
 8014a42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	68db      	ldr	r3, [r3, #12]
 8014a48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	68da      	ldr	r2, [r3, #12]
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	029b      	lsls	r3, r3, #10
 8014a58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014a5c:	431a      	orrs	r2, r3
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014a62:	2300      	movs	r3, #0
}
 8014a64:	4618      	mov	r0, r3
 8014a66:	371c      	adds	r7, #28
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6e:	4770      	bx	lr
 8014a70:	00d8acbf 	.word	0x00d8acbf
 8014a74:	00e4e1c0 	.word	0x00e4e1c0
 8014a78:	00f42400 	.word	0x00f42400
 8014a7c:	01067380 	.word	0x01067380
 8014a80:	011a499f 	.word	0x011a499f
 8014a84:	01312cff 	.word	0x01312cff
 8014a88:	014ca43f 	.word	0x014ca43f
 8014a8c:	016e3600 	.word	0x016e3600
 8014a90:	01a6ab1f 	.word	0x01a6ab1f
 8014a94:	01e84800 	.word	0x01e84800

08014a98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014a98:	b480      	push	{r7}
 8014a9a:	b083      	sub	sp, #12
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	689b      	ldr	r3, [r3, #8]
 8014aa4:	f043 0201 	orr.w	r2, r3, #1
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014aac:	2300      	movs	r3, #0
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	370c      	adds	r7, #12
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab8:	4770      	bx	lr

08014aba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014aba:	b480      	push	{r7}
 8014abc:	b083      	sub	sp, #12
 8014abe:	af00      	add	r7, sp, #0
 8014ac0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	689b      	ldr	r3, [r3, #8]
 8014ac6:	f023 0201 	bic.w	r2, r3, #1
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014ace:	2300      	movs	r3, #0
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	370c      	adds	r7, #12
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ada:	4770      	bx	lr

08014adc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b084      	sub	sp, #16
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	460b      	mov	r3, r1
 8014ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014ae8:	2300      	movs	r3, #0
 8014aea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	68db      	ldr	r3, [r3, #12]
 8014af0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014af8:	78fb      	ldrb	r3, [r7, #3]
 8014afa:	2b01      	cmp	r3, #1
 8014afc:	d115      	bne.n	8014b2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	68db      	ldr	r3, [r3, #12]
 8014b02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014b0a:	200a      	movs	r0, #10
 8014b0c:	f7f2 fcc8 	bl	80074a0 <HAL_Delay>
      ms += 10U;
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	330a      	adds	r3, #10
 8014b14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f001 f93b 	bl	8015d92 <USB_GetMode>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	2b01      	cmp	r3, #1
 8014b20:	d01e      	beq.n	8014b60 <USB_SetCurrentMode+0x84>
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	2bc7      	cmp	r3, #199	@ 0xc7
 8014b26:	d9f0      	bls.n	8014b0a <USB_SetCurrentMode+0x2e>
 8014b28:	e01a      	b.n	8014b60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014b2a:	78fb      	ldrb	r3, [r7, #3]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d115      	bne.n	8014b5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	68db      	ldr	r3, [r3, #12]
 8014b34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014b3c:	200a      	movs	r0, #10
 8014b3e:	f7f2 fcaf 	bl	80074a0 <HAL_Delay>
      ms += 10U;
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	330a      	adds	r3, #10
 8014b46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f001 f922 	bl	8015d92 <USB_GetMode>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d005      	beq.n	8014b60 <USB_SetCurrentMode+0x84>
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	2bc7      	cmp	r3, #199	@ 0xc7
 8014b58:	d9f0      	bls.n	8014b3c <USB_SetCurrentMode+0x60>
 8014b5a:	e001      	b.n	8014b60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	e005      	b.n	8014b6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	2bc8      	cmp	r3, #200	@ 0xc8
 8014b64:	d101      	bne.n	8014b6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014b66:	2301      	movs	r3, #1
 8014b68:	e000      	b.n	8014b6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014b6a:	2300      	movs	r3, #0
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	3710      	adds	r7, #16
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd80      	pop	{r7, pc}

08014b74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014b74:	b084      	sub	sp, #16
 8014b76:	b580      	push	{r7, lr}
 8014b78:	b086      	sub	sp, #24
 8014b7a:	af00      	add	r7, sp, #0
 8014b7c:	6078      	str	r0, [r7, #4]
 8014b7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8014b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014b86:	2300      	movs	r3, #0
 8014b88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014b8e:	2300      	movs	r3, #0
 8014b90:	613b      	str	r3, [r7, #16]
 8014b92:	e009      	b.n	8014ba8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014b94:	687a      	ldr	r2, [r7, #4]
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	3340      	adds	r3, #64	@ 0x40
 8014b9a:	009b      	lsls	r3, r3, #2
 8014b9c:	4413      	add	r3, r2
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	613b      	str	r3, [r7, #16]
 8014ba8:	693b      	ldr	r3, [r7, #16]
 8014baa:	2b0e      	cmp	r3, #14
 8014bac:	d9f2      	bls.n	8014b94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014bae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d11c      	bne.n	8014bf0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	68fa      	ldr	r2, [r7, #12]
 8014bc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014bc4:	f043 0302 	orr.w	r3, r3, #2
 8014bc8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	601a      	str	r2, [r3, #0]
 8014bee:	e005      	b.n	8014bfc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bf4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014c02:	461a      	mov	r2, r3
 8014c04:	2300      	movs	r3, #0
 8014c06:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014c08:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	d10d      	bne.n	8014c2c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d104      	bne.n	8014c22 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014c18:	2100      	movs	r1, #0
 8014c1a:	6878      	ldr	r0, [r7, #4]
 8014c1c:	f000 f968 	bl	8014ef0 <USB_SetDevSpeed>
 8014c20:	e008      	b.n	8014c34 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014c22:	2101      	movs	r1, #1
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f000 f963 	bl	8014ef0 <USB_SetDevSpeed>
 8014c2a:	e003      	b.n	8014c34 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014c2c:	2103      	movs	r1, #3
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f000 f95e 	bl	8014ef0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014c34:	2110      	movs	r1, #16
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f000 f8fa 	bl	8014e30 <USB_FlushTxFifo>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d001      	beq.n	8014c46 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8014c42:	2301      	movs	r3, #1
 8014c44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f000 f924 	bl	8014e94 <USB_FlushRxFifo>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d001      	beq.n	8014c56 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8014c52:	2301      	movs	r3, #1
 8014c54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c5c:	461a      	mov	r2, r3
 8014c5e:	2300      	movs	r3, #0
 8014c60:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c68:	461a      	mov	r2, r3
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c74:	461a      	mov	r2, r3
 8014c76:	2300      	movs	r3, #0
 8014c78:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	613b      	str	r3, [r7, #16]
 8014c7e:	e043      	b.n	8014d08 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014c80:	693b      	ldr	r3, [r7, #16]
 8014c82:	015a      	lsls	r2, r3, #5
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	4413      	add	r3, r2
 8014c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014c92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014c96:	d118      	bne.n	8014cca <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d10a      	bne.n	8014cb4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014c9e:	693b      	ldr	r3, [r7, #16]
 8014ca0:	015a      	lsls	r2, r3, #5
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	4413      	add	r3, r2
 8014ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014caa:	461a      	mov	r2, r3
 8014cac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014cb0:	6013      	str	r3, [r2, #0]
 8014cb2:	e013      	b.n	8014cdc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	015a      	lsls	r2, r3, #5
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	4413      	add	r3, r2
 8014cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cc0:	461a      	mov	r2, r3
 8014cc2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014cc6:	6013      	str	r3, [r2, #0]
 8014cc8:	e008      	b.n	8014cdc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	015a      	lsls	r2, r3, #5
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	4413      	add	r3, r2
 8014cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cd6:	461a      	mov	r2, r3
 8014cd8:	2300      	movs	r3, #0
 8014cda:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014cdc:	693b      	ldr	r3, [r7, #16]
 8014cde:	015a      	lsls	r2, r3, #5
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	4413      	add	r3, r2
 8014ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ce8:	461a      	mov	r2, r3
 8014cea:	2300      	movs	r3, #0
 8014cec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	015a      	lsls	r2, r3, #5
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	4413      	add	r3, r2
 8014cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014d00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	3301      	adds	r3, #1
 8014d06:	613b      	str	r3, [r7, #16]
 8014d08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	4293      	cmp	r3, r2
 8014d12:	d3b5      	bcc.n	8014c80 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014d14:	2300      	movs	r3, #0
 8014d16:	613b      	str	r3, [r7, #16]
 8014d18:	e043      	b.n	8014da2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	015a      	lsls	r2, r3, #5
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	4413      	add	r3, r2
 8014d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014d30:	d118      	bne.n	8014d64 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8014d32:	693b      	ldr	r3, [r7, #16]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d10a      	bne.n	8014d4e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	015a      	lsls	r2, r3, #5
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	4413      	add	r3, r2
 8014d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d44:	461a      	mov	r2, r3
 8014d46:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014d4a:	6013      	str	r3, [r2, #0]
 8014d4c:	e013      	b.n	8014d76 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014d4e:	693b      	ldr	r3, [r7, #16]
 8014d50:	015a      	lsls	r2, r3, #5
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	4413      	add	r3, r2
 8014d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014d60:	6013      	str	r3, [r2, #0]
 8014d62:	e008      	b.n	8014d76 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014d64:	693b      	ldr	r3, [r7, #16]
 8014d66:	015a      	lsls	r2, r3, #5
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	4413      	add	r3, r2
 8014d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d70:	461a      	mov	r2, r3
 8014d72:	2300      	movs	r3, #0
 8014d74:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	015a      	lsls	r2, r3, #5
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	4413      	add	r3, r2
 8014d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d82:	461a      	mov	r2, r3
 8014d84:	2300      	movs	r3, #0
 8014d86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014d88:	693b      	ldr	r3, [r7, #16]
 8014d8a:	015a      	lsls	r2, r3, #5
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	4413      	add	r3, r2
 8014d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d94:	461a      	mov	r2, r3
 8014d96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014d9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	3301      	adds	r3, #1
 8014da0:	613b      	str	r3, [r7, #16]
 8014da2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014da6:	461a      	mov	r2, r3
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	4293      	cmp	r3, r2
 8014dac:	d3b5      	bcc.n	8014d1a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014db4:	691b      	ldr	r3, [r3, #16]
 8014db6:	68fa      	ldr	r2, [r7, #12]
 8014db8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014dc0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8014dce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014dd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d105      	bne.n	8014de4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	699b      	ldr	r3, [r3, #24]
 8014ddc:	f043 0210 	orr.w	r2, r3, #16
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	699a      	ldr	r2, [r3, #24]
 8014de8:	4b0f      	ldr	r3, [pc, #60]	@ (8014e28 <USB_DevInit+0x2b4>)
 8014dea:	4313      	orrs	r3, r2
 8014dec:	687a      	ldr	r2, [r7, #4]
 8014dee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014df0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d005      	beq.n	8014e04 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	699b      	ldr	r3, [r3, #24]
 8014dfc:	f043 0208 	orr.w	r2, r3, #8
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8014e04:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014e08:	2b01      	cmp	r3, #1
 8014e0a:	d105      	bne.n	8014e18 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	699a      	ldr	r2, [r3, #24]
 8014e10:	4b06      	ldr	r3, [pc, #24]	@ (8014e2c <USB_DevInit+0x2b8>)
 8014e12:	4313      	orrs	r3, r2
 8014e14:	687a      	ldr	r2, [r7, #4]
 8014e16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3718      	adds	r7, #24
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014e24:	b004      	add	sp, #16
 8014e26:	4770      	bx	lr
 8014e28:	803c3800 	.word	0x803c3800
 8014e2c:	40000004 	.word	0x40000004

08014e30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014e30:	b480      	push	{r7}
 8014e32:	b085      	sub	sp, #20
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	3301      	adds	r3, #1
 8014e42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014e4a:	d901      	bls.n	8014e50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014e4c:	2303      	movs	r3, #3
 8014e4e:	e01b      	b.n	8014e88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	691b      	ldr	r3, [r3, #16]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	daf2      	bge.n	8014e3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014e58:	2300      	movs	r3, #0
 8014e5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	019b      	lsls	r3, r3, #6
 8014e60:	f043 0220 	orr.w	r2, r3, #32
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	3301      	adds	r3, #1
 8014e6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014e74:	d901      	bls.n	8014e7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014e76:	2303      	movs	r3, #3
 8014e78:	e006      	b.n	8014e88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	691b      	ldr	r3, [r3, #16]
 8014e7e:	f003 0320 	and.w	r3, r3, #32
 8014e82:	2b20      	cmp	r3, #32
 8014e84:	d0f0      	beq.n	8014e68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014e86:	2300      	movs	r3, #0
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	3714      	adds	r7, #20
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e92:	4770      	bx	lr

08014e94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014e94:	b480      	push	{r7}
 8014e96:	b085      	sub	sp, #20
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014eac:	d901      	bls.n	8014eb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014eae:	2303      	movs	r3, #3
 8014eb0:	e018      	b.n	8014ee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	691b      	ldr	r3, [r3, #16]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	daf2      	bge.n	8014ea0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	2210      	movs	r2, #16
 8014ec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014ed0:	d901      	bls.n	8014ed6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014ed2:	2303      	movs	r3, #3
 8014ed4:	e006      	b.n	8014ee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	691b      	ldr	r3, [r3, #16]
 8014eda:	f003 0310 	and.w	r3, r3, #16
 8014ede:	2b10      	cmp	r3, #16
 8014ee0:	d0f0      	beq.n	8014ec4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014ee2:	2300      	movs	r3, #0
}
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	3714      	adds	r7, #20
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eee:	4770      	bx	lr

08014ef0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	b085      	sub	sp, #20
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	460b      	mov	r3, r1
 8014efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f06:	681a      	ldr	r2, [r3, #0]
 8014f08:	78fb      	ldrb	r3, [r7, #3]
 8014f0a:	68f9      	ldr	r1, [r7, #12]
 8014f0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014f10:	4313      	orrs	r3, r2
 8014f12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014f14:	2300      	movs	r3, #0
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	3714      	adds	r7, #20
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f20:	4770      	bx	lr

08014f22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8014f22:	b480      	push	{r7}
 8014f24:	b087      	sub	sp, #28
 8014f26:	af00      	add	r7, sp, #0
 8014f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014f2e:	693b      	ldr	r3, [r7, #16]
 8014f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f34:	689b      	ldr	r3, [r3, #8]
 8014f36:	f003 0306 	and.w	r3, r3, #6
 8014f3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d102      	bne.n	8014f48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8014f42:	2300      	movs	r3, #0
 8014f44:	75fb      	strb	r3, [r7, #23]
 8014f46:	e00a      	b.n	8014f5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	2b02      	cmp	r3, #2
 8014f4c:	d002      	beq.n	8014f54 <USB_GetDevSpeed+0x32>
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	2b06      	cmp	r3, #6
 8014f52:	d102      	bne.n	8014f5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014f54:	2302      	movs	r3, #2
 8014f56:	75fb      	strb	r3, [r7, #23]
 8014f58:	e001      	b.n	8014f5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014f5a:	230f      	movs	r3, #15
 8014f5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f60:	4618      	mov	r0, r3
 8014f62:	371c      	adds	r7, #28
 8014f64:	46bd      	mov	sp, r7
 8014f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6a:	4770      	bx	lr

08014f6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014f6c:	b480      	push	{r7}
 8014f6e:	b085      	sub	sp, #20
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
 8014f74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	785b      	ldrb	r3, [r3, #1]
 8014f84:	2b01      	cmp	r3, #1
 8014f86:	d139      	bne.n	8014ffc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f8e:	69da      	ldr	r2, [r3, #28]
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	781b      	ldrb	r3, [r3, #0]
 8014f94:	f003 030f 	and.w	r3, r3, #15
 8014f98:	2101      	movs	r1, #1
 8014f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8014f9e:	b29b      	uxth	r3, r3
 8014fa0:	68f9      	ldr	r1, [r7, #12]
 8014fa2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014fa6:	4313      	orrs	r3, r2
 8014fa8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014faa:	68bb      	ldr	r3, [r7, #8]
 8014fac:	015a      	lsls	r2, r3, #5
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	4413      	add	r3, r2
 8014fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d153      	bne.n	8015068 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	015a      	lsls	r2, r3, #5
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	4413      	add	r3, r2
 8014fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fcc:	681a      	ldr	r2, [r3, #0]
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	689b      	ldr	r3, [r3, #8]
 8014fd2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	791b      	ldrb	r3, [r3, #4]
 8014fda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014fdc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014fde:	68bb      	ldr	r3, [r7, #8]
 8014fe0:	059b      	lsls	r3, r3, #22
 8014fe2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014fe4:	431a      	orrs	r2, r3
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	0159      	lsls	r1, r3, #5
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	440b      	add	r3, r1
 8014fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	4b20      	ldr	r3, [pc, #128]	@ (8015078 <USB_ActivateEndpoint+0x10c>)
 8014ff6:	4313      	orrs	r3, r2
 8014ff8:	600b      	str	r3, [r1, #0]
 8014ffa:	e035      	b.n	8015068 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015002:	69da      	ldr	r2, [r3, #28]
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	781b      	ldrb	r3, [r3, #0]
 8015008:	f003 030f 	and.w	r3, r3, #15
 801500c:	2101      	movs	r1, #1
 801500e:	fa01 f303 	lsl.w	r3, r1, r3
 8015012:	041b      	lsls	r3, r3, #16
 8015014:	68f9      	ldr	r1, [r7, #12]
 8015016:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801501a:	4313      	orrs	r3, r2
 801501c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801501e:	68bb      	ldr	r3, [r7, #8]
 8015020:	015a      	lsls	r2, r3, #5
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	4413      	add	r3, r2
 8015026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015030:	2b00      	cmp	r3, #0
 8015032:	d119      	bne.n	8015068 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	015a      	lsls	r2, r3, #5
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	4413      	add	r3, r2
 801503c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015040:	681a      	ldr	r2, [r3, #0]
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	689b      	ldr	r3, [r3, #8]
 8015046:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	791b      	ldrb	r3, [r3, #4]
 801504e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015050:	430b      	orrs	r3, r1
 8015052:	431a      	orrs	r2, r3
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	0159      	lsls	r1, r3, #5
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	440b      	add	r3, r1
 801505c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015060:	4619      	mov	r1, r3
 8015062:	4b05      	ldr	r3, [pc, #20]	@ (8015078 <USB_ActivateEndpoint+0x10c>)
 8015064:	4313      	orrs	r3, r2
 8015066:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8015068:	2300      	movs	r3, #0
}
 801506a:	4618      	mov	r0, r3
 801506c:	3714      	adds	r7, #20
 801506e:	46bd      	mov	sp, r7
 8015070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015074:	4770      	bx	lr
 8015076:	bf00      	nop
 8015078:	10008000 	.word	0x10008000

0801507c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801507c:	b480      	push	{r7}
 801507e:	b085      	sub	sp, #20
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	781b      	ldrb	r3, [r3, #0]
 801508e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8015090:	683b      	ldr	r3, [r7, #0]
 8015092:	785b      	ldrb	r3, [r3, #1]
 8015094:	2b01      	cmp	r3, #1
 8015096:	d161      	bne.n	801515c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015098:	68bb      	ldr	r3, [r7, #8]
 801509a:	015a      	lsls	r2, r3, #5
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	4413      	add	r3, r2
 80150a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80150aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80150ae:	d11f      	bne.n	80150f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	015a      	lsls	r2, r3, #5
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	4413      	add	r3, r2
 80150b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	68ba      	ldr	r2, [r7, #8]
 80150c0:	0151      	lsls	r1, r2, #5
 80150c2:	68fa      	ldr	r2, [r7, #12]
 80150c4:	440a      	add	r2, r1
 80150c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80150ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80150ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	015a      	lsls	r2, r3, #5
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	4413      	add	r3, r2
 80150d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	68ba      	ldr	r2, [r7, #8]
 80150e0:	0151      	lsls	r1, r2, #5
 80150e2:	68fa      	ldr	r2, [r7, #12]
 80150e4:	440a      	add	r2, r1
 80150e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80150ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80150ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80150f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	f003 030f 	and.w	r3, r3, #15
 8015100:	2101      	movs	r1, #1
 8015102:	fa01 f303 	lsl.w	r3, r1, r3
 8015106:	b29b      	uxth	r3, r3
 8015108:	43db      	mvns	r3, r3
 801510a:	68f9      	ldr	r1, [r7, #12]
 801510c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015110:	4013      	ands	r3, r2
 8015112:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801511a:	69da      	ldr	r2, [r3, #28]
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	781b      	ldrb	r3, [r3, #0]
 8015120:	f003 030f 	and.w	r3, r3, #15
 8015124:	2101      	movs	r1, #1
 8015126:	fa01 f303 	lsl.w	r3, r1, r3
 801512a:	b29b      	uxth	r3, r3
 801512c:	43db      	mvns	r3, r3
 801512e:	68f9      	ldr	r1, [r7, #12]
 8015130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015134:	4013      	ands	r3, r2
 8015136:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	015a      	lsls	r2, r3, #5
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	4413      	add	r3, r2
 8015140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015144:	681a      	ldr	r2, [r3, #0]
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	0159      	lsls	r1, r3, #5
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	440b      	add	r3, r1
 801514e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015152:	4619      	mov	r1, r3
 8015154:	4b35      	ldr	r3, [pc, #212]	@ (801522c <USB_DeactivateEndpoint+0x1b0>)
 8015156:	4013      	ands	r3, r2
 8015158:	600b      	str	r3, [r1, #0]
 801515a:	e060      	b.n	801521e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	015a      	lsls	r2, r3, #5
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	4413      	add	r3, r2
 8015164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801516e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015172:	d11f      	bne.n	80151b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	015a      	lsls	r2, r3, #5
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	4413      	add	r3, r2
 801517c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	68ba      	ldr	r2, [r7, #8]
 8015184:	0151      	lsls	r1, r2, #5
 8015186:	68fa      	ldr	r2, [r7, #12]
 8015188:	440a      	add	r2, r1
 801518a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801518e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015192:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	015a      	lsls	r2, r3, #5
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	4413      	add	r3, r2
 801519c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	68ba      	ldr	r2, [r7, #8]
 80151a4:	0151      	lsls	r1, r2, #5
 80151a6:	68fa      	ldr	r2, [r7, #12]
 80151a8:	440a      	add	r2, r1
 80151aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80151ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80151b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	781b      	ldrb	r3, [r3, #0]
 80151c0:	f003 030f 	and.w	r3, r3, #15
 80151c4:	2101      	movs	r1, #1
 80151c6:	fa01 f303 	lsl.w	r3, r1, r3
 80151ca:	041b      	lsls	r3, r3, #16
 80151cc:	43db      	mvns	r3, r3
 80151ce:	68f9      	ldr	r1, [r7, #12]
 80151d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80151d4:	4013      	ands	r3, r2
 80151d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151de:	69da      	ldr	r2, [r3, #28]
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	781b      	ldrb	r3, [r3, #0]
 80151e4:	f003 030f 	and.w	r3, r3, #15
 80151e8:	2101      	movs	r1, #1
 80151ea:	fa01 f303 	lsl.w	r3, r1, r3
 80151ee:	041b      	lsls	r3, r3, #16
 80151f0:	43db      	mvns	r3, r3
 80151f2:	68f9      	ldr	r1, [r7, #12]
 80151f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80151f8:	4013      	ands	r3, r2
 80151fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	015a      	lsls	r2, r3, #5
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	4413      	add	r3, r2
 8015204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015208:	681a      	ldr	r2, [r3, #0]
 801520a:	68bb      	ldr	r3, [r7, #8]
 801520c:	0159      	lsls	r1, r3, #5
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	440b      	add	r3, r1
 8015212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015216:	4619      	mov	r1, r3
 8015218:	4b05      	ldr	r3, [pc, #20]	@ (8015230 <USB_DeactivateEndpoint+0x1b4>)
 801521a:	4013      	ands	r3, r2
 801521c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801521e:	2300      	movs	r3, #0
}
 8015220:	4618      	mov	r0, r3
 8015222:	3714      	adds	r7, #20
 8015224:	46bd      	mov	sp, r7
 8015226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522a:	4770      	bx	lr
 801522c:	ec337800 	.word	0xec337800
 8015230:	eff37800 	.word	0xeff37800

08015234 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b08a      	sub	sp, #40	@ 0x28
 8015238:	af02      	add	r7, sp, #8
 801523a:	60f8      	str	r0, [r7, #12]
 801523c:	60b9      	str	r1, [r7, #8]
 801523e:	4613      	mov	r3, r2
 8015240:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	781b      	ldrb	r3, [r3, #0]
 801524a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	785b      	ldrb	r3, [r3, #1]
 8015250:	2b01      	cmp	r3, #1
 8015252:	f040 8181 	bne.w	8015558 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	691b      	ldr	r3, [r3, #16]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d132      	bne.n	80152c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801525e:	69bb      	ldr	r3, [r7, #24]
 8015260:	015a      	lsls	r2, r3, #5
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	4413      	add	r3, r2
 8015266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801526a:	691a      	ldr	r2, [r3, #16]
 801526c:	69bb      	ldr	r3, [r7, #24]
 801526e:	0159      	lsls	r1, r3, #5
 8015270:	69fb      	ldr	r3, [r7, #28]
 8015272:	440b      	add	r3, r1
 8015274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015278:	4619      	mov	r1, r3
 801527a:	4ba5      	ldr	r3, [pc, #660]	@ (8015510 <USB_EPStartXfer+0x2dc>)
 801527c:	4013      	ands	r3, r2
 801527e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015280:	69bb      	ldr	r3, [r7, #24]
 8015282:	015a      	lsls	r2, r3, #5
 8015284:	69fb      	ldr	r3, [r7, #28]
 8015286:	4413      	add	r3, r2
 8015288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801528c:	691b      	ldr	r3, [r3, #16]
 801528e:	69ba      	ldr	r2, [r7, #24]
 8015290:	0151      	lsls	r1, r2, #5
 8015292:	69fa      	ldr	r2, [r7, #28]
 8015294:	440a      	add	r2, r1
 8015296:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801529a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801529e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80152a0:	69bb      	ldr	r3, [r7, #24]
 80152a2:	015a      	lsls	r2, r3, #5
 80152a4:	69fb      	ldr	r3, [r7, #28]
 80152a6:	4413      	add	r3, r2
 80152a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152ac:	691a      	ldr	r2, [r3, #16]
 80152ae:	69bb      	ldr	r3, [r7, #24]
 80152b0:	0159      	lsls	r1, r3, #5
 80152b2:	69fb      	ldr	r3, [r7, #28]
 80152b4:	440b      	add	r3, r1
 80152b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152ba:	4619      	mov	r1, r3
 80152bc:	4b95      	ldr	r3, [pc, #596]	@ (8015514 <USB_EPStartXfer+0x2e0>)
 80152be:	4013      	ands	r3, r2
 80152c0:	610b      	str	r3, [r1, #16]
 80152c2:	e092      	b.n	80153ea <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80152c4:	69bb      	ldr	r3, [r7, #24]
 80152c6:	015a      	lsls	r2, r3, #5
 80152c8:	69fb      	ldr	r3, [r7, #28]
 80152ca:	4413      	add	r3, r2
 80152cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152d0:	691a      	ldr	r2, [r3, #16]
 80152d2:	69bb      	ldr	r3, [r7, #24]
 80152d4:	0159      	lsls	r1, r3, #5
 80152d6:	69fb      	ldr	r3, [r7, #28]
 80152d8:	440b      	add	r3, r1
 80152da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152de:	4619      	mov	r1, r3
 80152e0:	4b8c      	ldr	r3, [pc, #560]	@ (8015514 <USB_EPStartXfer+0x2e0>)
 80152e2:	4013      	ands	r3, r2
 80152e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80152e6:	69bb      	ldr	r3, [r7, #24]
 80152e8:	015a      	lsls	r2, r3, #5
 80152ea:	69fb      	ldr	r3, [r7, #28]
 80152ec:	4413      	add	r3, r2
 80152ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152f2:	691a      	ldr	r2, [r3, #16]
 80152f4:	69bb      	ldr	r3, [r7, #24]
 80152f6:	0159      	lsls	r1, r3, #5
 80152f8:	69fb      	ldr	r3, [r7, #28]
 80152fa:	440b      	add	r3, r1
 80152fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015300:	4619      	mov	r1, r3
 8015302:	4b83      	ldr	r3, [pc, #524]	@ (8015510 <USB_EPStartXfer+0x2dc>)
 8015304:	4013      	ands	r3, r2
 8015306:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8015308:	69bb      	ldr	r3, [r7, #24]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d11a      	bne.n	8015344 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801530e:	68bb      	ldr	r3, [r7, #8]
 8015310:	691a      	ldr	r2, [r3, #16]
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	689b      	ldr	r3, [r3, #8]
 8015316:	429a      	cmp	r2, r3
 8015318:	d903      	bls.n	8015322 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	689a      	ldr	r2, [r3, #8]
 801531e:	68bb      	ldr	r3, [r7, #8]
 8015320:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015322:	69bb      	ldr	r3, [r7, #24]
 8015324:	015a      	lsls	r2, r3, #5
 8015326:	69fb      	ldr	r3, [r7, #28]
 8015328:	4413      	add	r3, r2
 801532a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801532e:	691b      	ldr	r3, [r3, #16]
 8015330:	69ba      	ldr	r2, [r7, #24]
 8015332:	0151      	lsls	r1, r2, #5
 8015334:	69fa      	ldr	r2, [r7, #28]
 8015336:	440a      	add	r2, r1
 8015338:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801533c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015340:	6113      	str	r3, [r2, #16]
 8015342:	e01b      	b.n	801537c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015344:	69bb      	ldr	r3, [r7, #24]
 8015346:	015a      	lsls	r2, r3, #5
 8015348:	69fb      	ldr	r3, [r7, #28]
 801534a:	4413      	add	r3, r2
 801534c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015350:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8015352:	68bb      	ldr	r3, [r7, #8]
 8015354:	6919      	ldr	r1, [r3, #16]
 8015356:	68bb      	ldr	r3, [r7, #8]
 8015358:	689b      	ldr	r3, [r3, #8]
 801535a:	440b      	add	r3, r1
 801535c:	1e59      	subs	r1, r3, #1
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	689b      	ldr	r3, [r3, #8]
 8015362:	fbb1 f3f3 	udiv	r3, r1, r3
 8015366:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015368:	4b6b      	ldr	r3, [pc, #428]	@ (8015518 <USB_EPStartXfer+0x2e4>)
 801536a:	400b      	ands	r3, r1
 801536c:	69b9      	ldr	r1, [r7, #24]
 801536e:	0148      	lsls	r0, r1, #5
 8015370:	69f9      	ldr	r1, [r7, #28]
 8015372:	4401      	add	r1, r0
 8015374:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8015378:	4313      	orrs	r3, r2
 801537a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801537c:	69bb      	ldr	r3, [r7, #24]
 801537e:	015a      	lsls	r2, r3, #5
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	4413      	add	r3, r2
 8015384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015388:	691a      	ldr	r2, [r3, #16]
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	691b      	ldr	r3, [r3, #16]
 801538e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015392:	69b9      	ldr	r1, [r7, #24]
 8015394:	0148      	lsls	r0, r1, #5
 8015396:	69f9      	ldr	r1, [r7, #28]
 8015398:	4401      	add	r1, r0
 801539a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801539e:	4313      	orrs	r3, r2
 80153a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80153a2:	68bb      	ldr	r3, [r7, #8]
 80153a4:	791b      	ldrb	r3, [r3, #4]
 80153a6:	2b01      	cmp	r3, #1
 80153a8:	d11f      	bne.n	80153ea <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80153aa:	69bb      	ldr	r3, [r7, #24]
 80153ac:	015a      	lsls	r2, r3, #5
 80153ae:	69fb      	ldr	r3, [r7, #28]
 80153b0:	4413      	add	r3, r2
 80153b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153b6:	691b      	ldr	r3, [r3, #16]
 80153b8:	69ba      	ldr	r2, [r7, #24]
 80153ba:	0151      	lsls	r1, r2, #5
 80153bc:	69fa      	ldr	r2, [r7, #28]
 80153be:	440a      	add	r2, r1
 80153c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80153c4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80153c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80153ca:	69bb      	ldr	r3, [r7, #24]
 80153cc:	015a      	lsls	r2, r3, #5
 80153ce:	69fb      	ldr	r3, [r7, #28]
 80153d0:	4413      	add	r3, r2
 80153d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153d6:	691b      	ldr	r3, [r3, #16]
 80153d8:	69ba      	ldr	r2, [r7, #24]
 80153da:	0151      	lsls	r1, r2, #5
 80153dc:	69fa      	ldr	r2, [r7, #28]
 80153de:	440a      	add	r2, r1
 80153e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80153e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80153e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80153ea:	79fb      	ldrb	r3, [r7, #7]
 80153ec:	2b01      	cmp	r3, #1
 80153ee:	d14b      	bne.n	8015488 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80153f0:	68bb      	ldr	r3, [r7, #8]
 80153f2:	69db      	ldr	r3, [r3, #28]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d009      	beq.n	801540c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80153f8:	69bb      	ldr	r3, [r7, #24]
 80153fa:	015a      	lsls	r2, r3, #5
 80153fc:	69fb      	ldr	r3, [r7, #28]
 80153fe:	4413      	add	r3, r2
 8015400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015404:	461a      	mov	r2, r3
 8015406:	68bb      	ldr	r3, [r7, #8]
 8015408:	69db      	ldr	r3, [r3, #28]
 801540a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	791b      	ldrb	r3, [r3, #4]
 8015410:	2b01      	cmp	r3, #1
 8015412:	d128      	bne.n	8015466 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015414:	69fb      	ldr	r3, [r7, #28]
 8015416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801541a:	689b      	ldr	r3, [r3, #8]
 801541c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015420:	2b00      	cmp	r3, #0
 8015422:	d110      	bne.n	8015446 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015424:	69bb      	ldr	r3, [r7, #24]
 8015426:	015a      	lsls	r2, r3, #5
 8015428:	69fb      	ldr	r3, [r7, #28]
 801542a:	4413      	add	r3, r2
 801542c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	69ba      	ldr	r2, [r7, #24]
 8015434:	0151      	lsls	r1, r2, #5
 8015436:	69fa      	ldr	r2, [r7, #28]
 8015438:	440a      	add	r2, r1
 801543a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801543e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015442:	6013      	str	r3, [r2, #0]
 8015444:	e00f      	b.n	8015466 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015446:	69bb      	ldr	r3, [r7, #24]
 8015448:	015a      	lsls	r2, r3, #5
 801544a:	69fb      	ldr	r3, [r7, #28]
 801544c:	4413      	add	r3, r2
 801544e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	69ba      	ldr	r2, [r7, #24]
 8015456:	0151      	lsls	r1, r2, #5
 8015458:	69fa      	ldr	r2, [r7, #28]
 801545a:	440a      	add	r2, r1
 801545c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015464:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015466:	69bb      	ldr	r3, [r7, #24]
 8015468:	015a      	lsls	r2, r3, #5
 801546a:	69fb      	ldr	r3, [r7, #28]
 801546c:	4413      	add	r3, r2
 801546e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	69ba      	ldr	r2, [r7, #24]
 8015476:	0151      	lsls	r1, r2, #5
 8015478:	69fa      	ldr	r2, [r7, #28]
 801547a:	440a      	add	r2, r1
 801547c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015480:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015484:	6013      	str	r3, [r2, #0]
 8015486:	e16a      	b.n	801575e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015488:	69bb      	ldr	r3, [r7, #24]
 801548a:	015a      	lsls	r2, r3, #5
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	4413      	add	r3, r2
 8015490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	69ba      	ldr	r2, [r7, #24]
 8015498:	0151      	lsls	r1, r2, #5
 801549a:	69fa      	ldr	r2, [r7, #28]
 801549c:	440a      	add	r2, r1
 801549e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80154a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80154a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	791b      	ldrb	r3, [r3, #4]
 80154ac:	2b01      	cmp	r3, #1
 80154ae:	d015      	beq.n	80154dc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	691b      	ldr	r3, [r3, #16]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	f000 8152 	beq.w	801575e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80154ba:	69fb      	ldr	r3, [r7, #28]
 80154bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80154c2:	68bb      	ldr	r3, [r7, #8]
 80154c4:	781b      	ldrb	r3, [r3, #0]
 80154c6:	f003 030f 	and.w	r3, r3, #15
 80154ca:	2101      	movs	r1, #1
 80154cc:	fa01 f303 	lsl.w	r3, r1, r3
 80154d0:	69f9      	ldr	r1, [r7, #28]
 80154d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80154d6:	4313      	orrs	r3, r2
 80154d8:	634b      	str	r3, [r1, #52]	@ 0x34
 80154da:	e140      	b.n	801575e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80154dc:	69fb      	ldr	r3, [r7, #28]
 80154de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154e2:	689b      	ldr	r3, [r3, #8]
 80154e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d117      	bne.n	801551c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80154ec:	69bb      	ldr	r3, [r7, #24]
 80154ee:	015a      	lsls	r2, r3, #5
 80154f0:	69fb      	ldr	r3, [r7, #28]
 80154f2:	4413      	add	r3, r2
 80154f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	69ba      	ldr	r2, [r7, #24]
 80154fc:	0151      	lsls	r1, r2, #5
 80154fe:	69fa      	ldr	r2, [r7, #28]
 8015500:	440a      	add	r2, r1
 8015502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015506:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801550a:	6013      	str	r3, [r2, #0]
 801550c:	e016      	b.n	801553c <USB_EPStartXfer+0x308>
 801550e:	bf00      	nop
 8015510:	e007ffff 	.word	0xe007ffff
 8015514:	fff80000 	.word	0xfff80000
 8015518:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801551c:	69bb      	ldr	r3, [r7, #24]
 801551e:	015a      	lsls	r2, r3, #5
 8015520:	69fb      	ldr	r3, [r7, #28]
 8015522:	4413      	add	r3, r2
 8015524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	69ba      	ldr	r2, [r7, #24]
 801552c:	0151      	lsls	r1, r2, #5
 801552e:	69fa      	ldr	r2, [r7, #28]
 8015530:	440a      	add	r2, r1
 8015532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801553a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801553c:	68bb      	ldr	r3, [r7, #8]
 801553e:	68d9      	ldr	r1, [r3, #12]
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	781a      	ldrb	r2, [r3, #0]
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	691b      	ldr	r3, [r3, #16]
 8015548:	b298      	uxth	r0, r3
 801554a:	79fb      	ldrb	r3, [r7, #7]
 801554c:	9300      	str	r3, [sp, #0]
 801554e:	4603      	mov	r3, r0
 8015550:	68f8      	ldr	r0, [r7, #12]
 8015552:	f000 f9b9 	bl	80158c8 <USB_WritePacket>
 8015556:	e102      	b.n	801575e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015558:	69bb      	ldr	r3, [r7, #24]
 801555a:	015a      	lsls	r2, r3, #5
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	4413      	add	r3, r2
 8015560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015564:	691a      	ldr	r2, [r3, #16]
 8015566:	69bb      	ldr	r3, [r7, #24]
 8015568:	0159      	lsls	r1, r3, #5
 801556a:	69fb      	ldr	r3, [r7, #28]
 801556c:	440b      	add	r3, r1
 801556e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015572:	4619      	mov	r1, r3
 8015574:	4b7c      	ldr	r3, [pc, #496]	@ (8015768 <USB_EPStartXfer+0x534>)
 8015576:	4013      	ands	r3, r2
 8015578:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801557a:	69bb      	ldr	r3, [r7, #24]
 801557c:	015a      	lsls	r2, r3, #5
 801557e:	69fb      	ldr	r3, [r7, #28]
 8015580:	4413      	add	r3, r2
 8015582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015586:	691a      	ldr	r2, [r3, #16]
 8015588:	69bb      	ldr	r3, [r7, #24]
 801558a:	0159      	lsls	r1, r3, #5
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	440b      	add	r3, r1
 8015590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015594:	4619      	mov	r1, r3
 8015596:	4b75      	ldr	r3, [pc, #468]	@ (801576c <USB_EPStartXfer+0x538>)
 8015598:	4013      	ands	r3, r2
 801559a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801559c:	69bb      	ldr	r3, [r7, #24]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d12f      	bne.n	8015602 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80155a2:	68bb      	ldr	r3, [r7, #8]
 80155a4:	691b      	ldr	r3, [r3, #16]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d003      	beq.n	80155b2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	689a      	ldr	r2, [r3, #8]
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	689a      	ldr	r2, [r3, #8]
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80155ba:	69bb      	ldr	r3, [r7, #24]
 80155bc:	015a      	lsls	r2, r3, #5
 80155be:	69fb      	ldr	r3, [r7, #28]
 80155c0:	4413      	add	r3, r2
 80155c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155c6:	691a      	ldr	r2, [r3, #16]
 80155c8:	68bb      	ldr	r3, [r7, #8]
 80155ca:	6a1b      	ldr	r3, [r3, #32]
 80155cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80155d0:	69b9      	ldr	r1, [r7, #24]
 80155d2:	0148      	lsls	r0, r1, #5
 80155d4:	69f9      	ldr	r1, [r7, #28]
 80155d6:	4401      	add	r1, r0
 80155d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80155dc:	4313      	orrs	r3, r2
 80155de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80155e0:	69bb      	ldr	r3, [r7, #24]
 80155e2:	015a      	lsls	r2, r3, #5
 80155e4:	69fb      	ldr	r3, [r7, #28]
 80155e6:	4413      	add	r3, r2
 80155e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155ec:	691b      	ldr	r3, [r3, #16]
 80155ee:	69ba      	ldr	r2, [r7, #24]
 80155f0:	0151      	lsls	r1, r2, #5
 80155f2:	69fa      	ldr	r2, [r7, #28]
 80155f4:	440a      	add	r2, r1
 80155f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80155fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80155fe:	6113      	str	r3, [r2, #16]
 8015600:	e05f      	b.n	80156c2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8015602:	68bb      	ldr	r3, [r7, #8]
 8015604:	691b      	ldr	r3, [r3, #16]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d123      	bne.n	8015652 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801560a:	69bb      	ldr	r3, [r7, #24]
 801560c:	015a      	lsls	r2, r3, #5
 801560e:	69fb      	ldr	r3, [r7, #28]
 8015610:	4413      	add	r3, r2
 8015612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015616:	691a      	ldr	r2, [r3, #16]
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	689b      	ldr	r3, [r3, #8]
 801561c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015620:	69b9      	ldr	r1, [r7, #24]
 8015622:	0148      	lsls	r0, r1, #5
 8015624:	69f9      	ldr	r1, [r7, #28]
 8015626:	4401      	add	r1, r0
 8015628:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801562c:	4313      	orrs	r3, r2
 801562e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015630:	69bb      	ldr	r3, [r7, #24]
 8015632:	015a      	lsls	r2, r3, #5
 8015634:	69fb      	ldr	r3, [r7, #28]
 8015636:	4413      	add	r3, r2
 8015638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801563c:	691b      	ldr	r3, [r3, #16]
 801563e:	69ba      	ldr	r2, [r7, #24]
 8015640:	0151      	lsls	r1, r2, #5
 8015642:	69fa      	ldr	r2, [r7, #28]
 8015644:	440a      	add	r2, r1
 8015646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801564a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801564e:	6113      	str	r3, [r2, #16]
 8015650:	e037      	b.n	80156c2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	691a      	ldr	r2, [r3, #16]
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	689b      	ldr	r3, [r3, #8]
 801565a:	4413      	add	r3, r2
 801565c:	1e5a      	subs	r2, r3, #1
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	689b      	ldr	r3, [r3, #8]
 8015662:	fbb2 f3f3 	udiv	r3, r2, r3
 8015666:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8015668:	68bb      	ldr	r3, [r7, #8]
 801566a:	689b      	ldr	r3, [r3, #8]
 801566c:	8afa      	ldrh	r2, [r7, #22]
 801566e:	fb03 f202 	mul.w	r2, r3, r2
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8015676:	69bb      	ldr	r3, [r7, #24]
 8015678:	015a      	lsls	r2, r3, #5
 801567a:	69fb      	ldr	r3, [r7, #28]
 801567c:	4413      	add	r3, r2
 801567e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015682:	691a      	ldr	r2, [r3, #16]
 8015684:	8afb      	ldrh	r3, [r7, #22]
 8015686:	04d9      	lsls	r1, r3, #19
 8015688:	4b39      	ldr	r3, [pc, #228]	@ (8015770 <USB_EPStartXfer+0x53c>)
 801568a:	400b      	ands	r3, r1
 801568c:	69b9      	ldr	r1, [r7, #24]
 801568e:	0148      	lsls	r0, r1, #5
 8015690:	69f9      	ldr	r1, [r7, #28]
 8015692:	4401      	add	r1, r0
 8015694:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015698:	4313      	orrs	r3, r2
 801569a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801569c:	69bb      	ldr	r3, [r7, #24]
 801569e:	015a      	lsls	r2, r3, #5
 80156a0:	69fb      	ldr	r3, [r7, #28]
 80156a2:	4413      	add	r3, r2
 80156a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156a8:	691a      	ldr	r2, [r3, #16]
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	6a1b      	ldr	r3, [r3, #32]
 80156ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80156b2:	69b9      	ldr	r1, [r7, #24]
 80156b4:	0148      	lsls	r0, r1, #5
 80156b6:	69f9      	ldr	r1, [r7, #28]
 80156b8:	4401      	add	r1, r0
 80156ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80156be:	4313      	orrs	r3, r2
 80156c0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80156c2:	79fb      	ldrb	r3, [r7, #7]
 80156c4:	2b01      	cmp	r3, #1
 80156c6:	d10d      	bne.n	80156e4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80156c8:	68bb      	ldr	r3, [r7, #8]
 80156ca:	68db      	ldr	r3, [r3, #12]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d009      	beq.n	80156e4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	68d9      	ldr	r1, [r3, #12]
 80156d4:	69bb      	ldr	r3, [r7, #24]
 80156d6:	015a      	lsls	r2, r3, #5
 80156d8:	69fb      	ldr	r3, [r7, #28]
 80156da:	4413      	add	r3, r2
 80156dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156e0:	460a      	mov	r2, r1
 80156e2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	791b      	ldrb	r3, [r3, #4]
 80156e8:	2b01      	cmp	r3, #1
 80156ea:	d128      	bne.n	801573e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80156ec:	69fb      	ldr	r3, [r7, #28]
 80156ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80156f2:	689b      	ldr	r3, [r3, #8]
 80156f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d110      	bne.n	801571e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80156fc:	69bb      	ldr	r3, [r7, #24]
 80156fe:	015a      	lsls	r2, r3, #5
 8015700:	69fb      	ldr	r3, [r7, #28]
 8015702:	4413      	add	r3, r2
 8015704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	69ba      	ldr	r2, [r7, #24]
 801570c:	0151      	lsls	r1, r2, #5
 801570e:	69fa      	ldr	r2, [r7, #28]
 8015710:	440a      	add	r2, r1
 8015712:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015716:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801571a:	6013      	str	r3, [r2, #0]
 801571c:	e00f      	b.n	801573e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801571e:	69bb      	ldr	r3, [r7, #24]
 8015720:	015a      	lsls	r2, r3, #5
 8015722:	69fb      	ldr	r3, [r7, #28]
 8015724:	4413      	add	r3, r2
 8015726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	69ba      	ldr	r2, [r7, #24]
 801572e:	0151      	lsls	r1, r2, #5
 8015730:	69fa      	ldr	r2, [r7, #28]
 8015732:	440a      	add	r2, r1
 8015734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801573c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801573e:	69bb      	ldr	r3, [r7, #24]
 8015740:	015a      	lsls	r2, r3, #5
 8015742:	69fb      	ldr	r3, [r7, #28]
 8015744:	4413      	add	r3, r2
 8015746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	69ba      	ldr	r2, [r7, #24]
 801574e:	0151      	lsls	r1, r2, #5
 8015750:	69fa      	ldr	r2, [r7, #28]
 8015752:	440a      	add	r2, r1
 8015754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015758:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801575c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801575e:	2300      	movs	r3, #0
}
 8015760:	4618      	mov	r0, r3
 8015762:	3720      	adds	r7, #32
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}
 8015768:	fff80000 	.word	0xfff80000
 801576c:	e007ffff 	.word	0xe007ffff
 8015770:	1ff80000 	.word	0x1ff80000

08015774 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015774:	b480      	push	{r7}
 8015776:	b087      	sub	sp, #28
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801577e:	2300      	movs	r3, #0
 8015780:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8015782:	2300      	movs	r3, #0
 8015784:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	785b      	ldrb	r3, [r3, #1]
 801578e:	2b01      	cmp	r3, #1
 8015790:	d14a      	bne.n	8015828 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	781b      	ldrb	r3, [r3, #0]
 8015796:	015a      	lsls	r2, r3, #5
 8015798:	693b      	ldr	r3, [r7, #16]
 801579a:	4413      	add	r3, r2
 801579c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80157a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80157aa:	f040 8086 	bne.w	80158ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	015a      	lsls	r2, r3, #5
 80157b4:	693b      	ldr	r3, [r7, #16]
 80157b6:	4413      	add	r3, r2
 80157b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	683a      	ldr	r2, [r7, #0]
 80157c0:	7812      	ldrb	r2, [r2, #0]
 80157c2:	0151      	lsls	r1, r2, #5
 80157c4:	693a      	ldr	r2, [r7, #16]
 80157c6:	440a      	add	r2, r1
 80157c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80157cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80157d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	781b      	ldrb	r3, [r3, #0]
 80157d6:	015a      	lsls	r2, r3, #5
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	4413      	add	r3, r2
 80157dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	683a      	ldr	r2, [r7, #0]
 80157e4:	7812      	ldrb	r2, [r2, #0]
 80157e6:	0151      	lsls	r1, r2, #5
 80157e8:	693a      	ldr	r2, [r7, #16]
 80157ea:	440a      	add	r2, r1
 80157ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80157f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80157f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	3301      	adds	r3, #1
 80157fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015802:	4293      	cmp	r3, r2
 8015804:	d902      	bls.n	801580c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8015806:	2301      	movs	r3, #1
 8015808:	75fb      	strb	r3, [r7, #23]
          break;
 801580a:	e056      	b.n	80158ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801580c:	683b      	ldr	r3, [r7, #0]
 801580e:	781b      	ldrb	r3, [r3, #0]
 8015810:	015a      	lsls	r2, r3, #5
 8015812:	693b      	ldr	r3, [r7, #16]
 8015814:	4413      	add	r3, r2
 8015816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015820:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015824:	d0e7      	beq.n	80157f6 <USB_EPStopXfer+0x82>
 8015826:	e048      	b.n	80158ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	781b      	ldrb	r3, [r3, #0]
 801582c:	015a      	lsls	r2, r3, #5
 801582e:	693b      	ldr	r3, [r7, #16]
 8015830:	4413      	add	r3, r2
 8015832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801583c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015840:	d13b      	bne.n	80158ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	781b      	ldrb	r3, [r3, #0]
 8015846:	015a      	lsls	r2, r3, #5
 8015848:	693b      	ldr	r3, [r7, #16]
 801584a:	4413      	add	r3, r2
 801584c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	683a      	ldr	r2, [r7, #0]
 8015854:	7812      	ldrb	r2, [r2, #0]
 8015856:	0151      	lsls	r1, r2, #5
 8015858:	693a      	ldr	r2, [r7, #16]
 801585a:	440a      	add	r2, r1
 801585c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015860:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015864:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	781b      	ldrb	r3, [r3, #0]
 801586a:	015a      	lsls	r2, r3, #5
 801586c:	693b      	ldr	r3, [r7, #16]
 801586e:	4413      	add	r3, r2
 8015870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	683a      	ldr	r2, [r7, #0]
 8015878:	7812      	ldrb	r2, [r2, #0]
 801587a:	0151      	lsls	r1, r2, #5
 801587c:	693a      	ldr	r2, [r7, #16]
 801587e:	440a      	add	r2, r1
 8015880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015884:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015888:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	3301      	adds	r3, #1
 801588e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015896:	4293      	cmp	r3, r2
 8015898:	d902      	bls.n	80158a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801589a:	2301      	movs	r3, #1
 801589c:	75fb      	strb	r3, [r7, #23]
          break;
 801589e:	e00c      	b.n	80158ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	781b      	ldrb	r3, [r3, #0]
 80158a4:	015a      	lsls	r2, r3, #5
 80158a6:	693b      	ldr	r3, [r7, #16]
 80158a8:	4413      	add	r3, r2
 80158aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80158b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80158b8:	d0e7      	beq.n	801588a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80158ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80158bc:	4618      	mov	r0, r3
 80158be:	371c      	adds	r7, #28
 80158c0:	46bd      	mov	sp, r7
 80158c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c6:	4770      	bx	lr

080158c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80158c8:	b480      	push	{r7}
 80158ca:	b089      	sub	sp, #36	@ 0x24
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	60f8      	str	r0, [r7, #12]
 80158d0:	60b9      	str	r1, [r7, #8]
 80158d2:	4611      	mov	r1, r2
 80158d4:	461a      	mov	r2, r3
 80158d6:	460b      	mov	r3, r1
 80158d8:	71fb      	strb	r3, [r7, #7]
 80158da:	4613      	mov	r3, r2
 80158dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80158e2:	68bb      	ldr	r3, [r7, #8]
 80158e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80158e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d123      	bne.n	8015936 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80158ee:	88bb      	ldrh	r3, [r7, #4]
 80158f0:	3303      	adds	r3, #3
 80158f2:	089b      	lsrs	r3, r3, #2
 80158f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80158f6:	2300      	movs	r3, #0
 80158f8:	61bb      	str	r3, [r7, #24]
 80158fa:	e018      	b.n	801592e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80158fc:	79fb      	ldrb	r3, [r7, #7]
 80158fe:	031a      	lsls	r2, r3, #12
 8015900:	697b      	ldr	r3, [r7, #20]
 8015902:	4413      	add	r3, r2
 8015904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015908:	461a      	mov	r2, r3
 801590a:	69fb      	ldr	r3, [r7, #28]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015910:	69fb      	ldr	r3, [r7, #28]
 8015912:	3301      	adds	r3, #1
 8015914:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015916:	69fb      	ldr	r3, [r7, #28]
 8015918:	3301      	adds	r3, #1
 801591a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801591c:	69fb      	ldr	r3, [r7, #28]
 801591e:	3301      	adds	r3, #1
 8015920:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015922:	69fb      	ldr	r3, [r7, #28]
 8015924:	3301      	adds	r3, #1
 8015926:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015928:	69bb      	ldr	r3, [r7, #24]
 801592a:	3301      	adds	r3, #1
 801592c:	61bb      	str	r3, [r7, #24]
 801592e:	69ba      	ldr	r2, [r7, #24]
 8015930:	693b      	ldr	r3, [r7, #16]
 8015932:	429a      	cmp	r2, r3
 8015934:	d3e2      	bcc.n	80158fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015936:	2300      	movs	r3, #0
}
 8015938:	4618      	mov	r0, r3
 801593a:	3724      	adds	r7, #36	@ 0x24
 801593c:	46bd      	mov	sp, r7
 801593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015942:	4770      	bx	lr

08015944 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015944:	b480      	push	{r7}
 8015946:	b08b      	sub	sp, #44	@ 0x2c
 8015948:	af00      	add	r7, sp, #0
 801594a:	60f8      	str	r0, [r7, #12]
 801594c:	60b9      	str	r1, [r7, #8]
 801594e:	4613      	mov	r3, r2
 8015950:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801595a:	88fb      	ldrh	r3, [r7, #6]
 801595c:	089b      	lsrs	r3, r3, #2
 801595e:	b29b      	uxth	r3, r3
 8015960:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015962:	88fb      	ldrh	r3, [r7, #6]
 8015964:	f003 0303 	and.w	r3, r3, #3
 8015968:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801596a:	2300      	movs	r3, #0
 801596c:	623b      	str	r3, [r7, #32]
 801596e:	e014      	b.n	801599a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015970:	69bb      	ldr	r3, [r7, #24]
 8015972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015976:	681a      	ldr	r2, [r3, #0]
 8015978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801597a:	601a      	str	r2, [r3, #0]
    pDest++;
 801597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801597e:	3301      	adds	r3, #1
 8015980:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015984:	3301      	adds	r3, #1
 8015986:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801598a:	3301      	adds	r3, #1
 801598c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015990:	3301      	adds	r3, #1
 8015992:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8015994:	6a3b      	ldr	r3, [r7, #32]
 8015996:	3301      	adds	r3, #1
 8015998:	623b      	str	r3, [r7, #32]
 801599a:	6a3a      	ldr	r2, [r7, #32]
 801599c:	697b      	ldr	r3, [r7, #20]
 801599e:	429a      	cmp	r2, r3
 80159a0:	d3e6      	bcc.n	8015970 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80159a2:	8bfb      	ldrh	r3, [r7, #30]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d01e      	beq.n	80159e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80159a8:	2300      	movs	r3, #0
 80159aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80159ac:	69bb      	ldr	r3, [r7, #24]
 80159ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80159b2:	461a      	mov	r2, r3
 80159b4:	f107 0310 	add.w	r3, r7, #16
 80159b8:	6812      	ldr	r2, [r2, #0]
 80159ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80159bc:	693a      	ldr	r2, [r7, #16]
 80159be:	6a3b      	ldr	r3, [r7, #32]
 80159c0:	b2db      	uxtb	r3, r3
 80159c2:	00db      	lsls	r3, r3, #3
 80159c4:	fa22 f303 	lsr.w	r3, r2, r3
 80159c8:	b2da      	uxtb	r2, r3
 80159ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159cc:	701a      	strb	r2, [r3, #0]
      i++;
 80159ce:	6a3b      	ldr	r3, [r7, #32]
 80159d0:	3301      	adds	r3, #1
 80159d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80159d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159d6:	3301      	adds	r3, #1
 80159d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80159da:	8bfb      	ldrh	r3, [r7, #30]
 80159dc:	3b01      	subs	r3, #1
 80159de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80159e0:	8bfb      	ldrh	r3, [r7, #30]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d1ea      	bne.n	80159bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80159e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80159e8:	4618      	mov	r0, r3
 80159ea:	372c      	adds	r7, #44	@ 0x2c
 80159ec:	46bd      	mov	sp, r7
 80159ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f2:	4770      	bx	lr

080159f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80159f4:	b480      	push	{r7}
 80159f6:	b085      	sub	sp, #20
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
 80159fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015a02:	683b      	ldr	r3, [r7, #0]
 8015a04:	781b      	ldrb	r3, [r3, #0]
 8015a06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	785b      	ldrb	r3, [r3, #1]
 8015a0c:	2b01      	cmp	r3, #1
 8015a0e:	d12c      	bne.n	8015a6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015a10:	68bb      	ldr	r3, [r7, #8]
 8015a12:	015a      	lsls	r2, r3, #5
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	4413      	add	r3, r2
 8015a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	db12      	blt.n	8015a48 <USB_EPSetStall+0x54>
 8015a22:	68bb      	ldr	r3, [r7, #8]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d00f      	beq.n	8015a48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	015a      	lsls	r2, r3, #5
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	4413      	add	r3, r2
 8015a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	68ba      	ldr	r2, [r7, #8]
 8015a38:	0151      	lsls	r1, r2, #5
 8015a3a:	68fa      	ldr	r2, [r7, #12]
 8015a3c:	440a      	add	r2, r1
 8015a3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015a42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015a46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	015a      	lsls	r2, r3, #5
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	4413      	add	r3, r2
 8015a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	68ba      	ldr	r2, [r7, #8]
 8015a58:	0151      	lsls	r1, r2, #5
 8015a5a:	68fa      	ldr	r2, [r7, #12]
 8015a5c:	440a      	add	r2, r1
 8015a5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015a62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015a66:	6013      	str	r3, [r2, #0]
 8015a68:	e02b      	b.n	8015ac2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015a6a:	68bb      	ldr	r3, [r7, #8]
 8015a6c:	015a      	lsls	r2, r3, #5
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	4413      	add	r3, r2
 8015a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	db12      	blt.n	8015aa2 <USB_EPSetStall+0xae>
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d00f      	beq.n	8015aa2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015a82:	68bb      	ldr	r3, [r7, #8]
 8015a84:	015a      	lsls	r2, r3, #5
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	4413      	add	r3, r2
 8015a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	68ba      	ldr	r2, [r7, #8]
 8015a92:	0151      	lsls	r1, r2, #5
 8015a94:	68fa      	ldr	r2, [r7, #12]
 8015a96:	440a      	add	r2, r1
 8015a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015a9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015aa0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015aa2:	68bb      	ldr	r3, [r7, #8]
 8015aa4:	015a      	lsls	r2, r3, #5
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	4413      	add	r3, r2
 8015aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	68ba      	ldr	r2, [r7, #8]
 8015ab2:	0151      	lsls	r1, r2, #5
 8015ab4:	68fa      	ldr	r2, [r7, #12]
 8015ab6:	440a      	add	r2, r1
 8015ab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015abc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015ac0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015ac2:	2300      	movs	r3, #0
}
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	3714      	adds	r7, #20
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ace:	4770      	bx	lr

08015ad0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015ad0:	b480      	push	{r7}
 8015ad2:	b085      	sub	sp, #20
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
 8015ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015ade:	683b      	ldr	r3, [r7, #0]
 8015ae0:	781b      	ldrb	r3, [r3, #0]
 8015ae2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015ae4:	683b      	ldr	r3, [r7, #0]
 8015ae6:	785b      	ldrb	r3, [r3, #1]
 8015ae8:	2b01      	cmp	r3, #1
 8015aea:	d128      	bne.n	8015b3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015aec:	68bb      	ldr	r3, [r7, #8]
 8015aee:	015a      	lsls	r2, r3, #5
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	4413      	add	r3, r2
 8015af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	68ba      	ldr	r2, [r7, #8]
 8015afc:	0151      	lsls	r1, r2, #5
 8015afe:	68fa      	ldr	r2, [r7, #12]
 8015b00:	440a      	add	r2, r1
 8015b02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015b06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015b0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	791b      	ldrb	r3, [r3, #4]
 8015b10:	2b03      	cmp	r3, #3
 8015b12:	d003      	beq.n	8015b1c <USB_EPClearStall+0x4c>
 8015b14:	683b      	ldr	r3, [r7, #0]
 8015b16:	791b      	ldrb	r3, [r3, #4]
 8015b18:	2b02      	cmp	r3, #2
 8015b1a:	d138      	bne.n	8015b8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015b1c:	68bb      	ldr	r3, [r7, #8]
 8015b1e:	015a      	lsls	r2, r3, #5
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	4413      	add	r3, r2
 8015b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	68ba      	ldr	r2, [r7, #8]
 8015b2c:	0151      	lsls	r1, r2, #5
 8015b2e:	68fa      	ldr	r2, [r7, #12]
 8015b30:	440a      	add	r2, r1
 8015b32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015b3a:	6013      	str	r3, [r2, #0]
 8015b3c:	e027      	b.n	8015b8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	015a      	lsls	r2, r3, #5
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	4413      	add	r3, r2
 8015b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	68ba      	ldr	r2, [r7, #8]
 8015b4e:	0151      	lsls	r1, r2, #5
 8015b50:	68fa      	ldr	r2, [r7, #12]
 8015b52:	440a      	add	r2, r1
 8015b54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015b58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015b5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	791b      	ldrb	r3, [r3, #4]
 8015b62:	2b03      	cmp	r3, #3
 8015b64:	d003      	beq.n	8015b6e <USB_EPClearStall+0x9e>
 8015b66:	683b      	ldr	r3, [r7, #0]
 8015b68:	791b      	ldrb	r3, [r3, #4]
 8015b6a:	2b02      	cmp	r3, #2
 8015b6c:	d10f      	bne.n	8015b8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015b6e:	68bb      	ldr	r3, [r7, #8]
 8015b70:	015a      	lsls	r2, r3, #5
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	4413      	add	r3, r2
 8015b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	68ba      	ldr	r2, [r7, #8]
 8015b7e:	0151      	lsls	r1, r2, #5
 8015b80:	68fa      	ldr	r2, [r7, #12]
 8015b82:	440a      	add	r2, r1
 8015b84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015b8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015b8e:	2300      	movs	r3, #0
}
 8015b90:	4618      	mov	r0, r3
 8015b92:	3714      	adds	r7, #20
 8015b94:	46bd      	mov	sp, r7
 8015b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9a:	4770      	bx	lr

08015b9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015b9c:	b480      	push	{r7}
 8015b9e:	b085      	sub	sp, #20
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
 8015ba4:	460b      	mov	r3, r1
 8015ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	68fa      	ldr	r2, [r7, #12]
 8015bb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015bba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8015bbe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015bc6:	681a      	ldr	r2, [r3, #0]
 8015bc8:	78fb      	ldrb	r3, [r7, #3]
 8015bca:	011b      	lsls	r3, r3, #4
 8015bcc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015bd0:	68f9      	ldr	r1, [r7, #12]
 8015bd2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015bd6:	4313      	orrs	r3, r2
 8015bd8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8015bda:	2300      	movs	r3, #0
}
 8015bdc:	4618      	mov	r0, r3
 8015bde:	3714      	adds	r7, #20
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr

08015be8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015be8:	b480      	push	{r7}
 8015bea:	b085      	sub	sp, #20
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	68fa      	ldr	r2, [r7, #12]
 8015bfe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015c02:	f023 0303 	bic.w	r3, r3, #3
 8015c06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	68fa      	ldr	r2, [r7, #12]
 8015c12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015c16:	f023 0302 	bic.w	r3, r3, #2
 8015c1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015c1c:	2300      	movs	r3, #0
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	3714      	adds	r7, #20
 8015c22:	46bd      	mov	sp, r7
 8015c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c28:	4770      	bx	lr

08015c2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015c2a:	b480      	push	{r7}
 8015c2c:	b085      	sub	sp, #20
 8015c2e:	af00      	add	r7, sp, #0
 8015c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	68fa      	ldr	r2, [r7, #12]
 8015c40:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015c44:	f023 0303 	bic.w	r3, r3, #3
 8015c48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015c50:	685b      	ldr	r3, [r3, #4]
 8015c52:	68fa      	ldr	r2, [r7, #12]
 8015c54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015c58:	f043 0302 	orr.w	r3, r3, #2
 8015c5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015c5e:	2300      	movs	r3, #0
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3714      	adds	r7, #20
 8015c64:	46bd      	mov	sp, r7
 8015c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6a:	4770      	bx	lr

08015c6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8015c6c:	b480      	push	{r7}
 8015c6e:	b085      	sub	sp, #20
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	695b      	ldr	r3, [r3, #20]
 8015c78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	699b      	ldr	r3, [r3, #24]
 8015c7e:	68fa      	ldr	r2, [r7, #12]
 8015c80:	4013      	ands	r3, r2
 8015c82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015c84:	68fb      	ldr	r3, [r7, #12]
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	3714      	adds	r7, #20
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c90:	4770      	bx	lr

08015c92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015c92:	b480      	push	{r7}
 8015c94:	b085      	sub	sp, #20
 8015c96:	af00      	add	r7, sp, #0
 8015c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015ca4:	699b      	ldr	r3, [r3, #24]
 8015ca6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015cae:	69db      	ldr	r3, [r3, #28]
 8015cb0:	68ba      	ldr	r2, [r7, #8]
 8015cb2:	4013      	ands	r3, r2
 8015cb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015cb6:	68bb      	ldr	r3, [r7, #8]
 8015cb8:	0c1b      	lsrs	r3, r3, #16
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3714      	adds	r7, #20
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc4:	4770      	bx	lr

08015cc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015cc6:	b480      	push	{r7}
 8015cc8:	b085      	sub	sp, #20
 8015cca:	af00      	add	r7, sp, #0
 8015ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015cd8:	699b      	ldr	r3, [r3, #24]
 8015cda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015ce2:	69db      	ldr	r3, [r3, #28]
 8015ce4:	68ba      	ldr	r2, [r7, #8]
 8015ce6:	4013      	ands	r3, r2
 8015ce8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8015cea:	68bb      	ldr	r3, [r7, #8]
 8015cec:	b29b      	uxth	r3, r3
}
 8015cee:	4618      	mov	r0, r3
 8015cf0:	3714      	adds	r7, #20
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf8:	4770      	bx	lr

08015cfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015cfa:	b480      	push	{r7}
 8015cfc:	b085      	sub	sp, #20
 8015cfe:	af00      	add	r7, sp, #0
 8015d00:	6078      	str	r0, [r7, #4]
 8015d02:	460b      	mov	r3, r1
 8015d04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8015d0a:	78fb      	ldrb	r3, [r7, #3]
 8015d0c:	015a      	lsls	r2, r3, #5
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	4413      	add	r3, r2
 8015d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015d16:	689b      	ldr	r3, [r3, #8]
 8015d18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d20:	695b      	ldr	r3, [r3, #20]
 8015d22:	68ba      	ldr	r2, [r7, #8]
 8015d24:	4013      	ands	r3, r2
 8015d26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015d28:	68bb      	ldr	r3, [r7, #8]
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3714      	adds	r7, #20
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d34:	4770      	bx	lr

08015d36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015d36:	b480      	push	{r7}
 8015d38:	b087      	sub	sp, #28
 8015d3a:	af00      	add	r7, sp, #0
 8015d3c:	6078      	str	r0, [r7, #4]
 8015d3e:	460b      	mov	r3, r1
 8015d40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d4c:	691b      	ldr	r3, [r3, #16]
 8015d4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015d50:	697b      	ldr	r3, [r7, #20]
 8015d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015d58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015d5a:	78fb      	ldrb	r3, [r7, #3]
 8015d5c:	f003 030f 	and.w	r3, r3, #15
 8015d60:	68fa      	ldr	r2, [r7, #12]
 8015d62:	fa22 f303 	lsr.w	r3, r2, r3
 8015d66:	01db      	lsls	r3, r3, #7
 8015d68:	b2db      	uxtb	r3, r3
 8015d6a:	693a      	ldr	r2, [r7, #16]
 8015d6c:	4313      	orrs	r3, r2
 8015d6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015d70:	78fb      	ldrb	r3, [r7, #3]
 8015d72:	015a      	lsls	r2, r3, #5
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	4413      	add	r3, r2
 8015d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d7c:	689b      	ldr	r3, [r3, #8]
 8015d7e:	693a      	ldr	r2, [r7, #16]
 8015d80:	4013      	ands	r3, r2
 8015d82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015d84:	68bb      	ldr	r3, [r7, #8]
}
 8015d86:	4618      	mov	r0, r3
 8015d88:	371c      	adds	r7, #28
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d90:	4770      	bx	lr

08015d92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8015d92:	b480      	push	{r7}
 8015d94:	b083      	sub	sp, #12
 8015d96:	af00      	add	r7, sp, #0
 8015d98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	695b      	ldr	r3, [r3, #20]
 8015d9e:	f003 0301 	and.w	r3, r3, #1
}
 8015da2:	4618      	mov	r0, r3
 8015da4:	370c      	adds	r7, #12
 8015da6:	46bd      	mov	sp, r7
 8015da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dac:	4770      	bx	lr
	...

08015db0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8015db0:	b480      	push	{r7}
 8015db2:	b085      	sub	sp, #20
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015dc2:	681a      	ldr	r2, [r3, #0]
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015dca:	4619      	mov	r1, r3
 8015dcc:	4b09      	ldr	r3, [pc, #36]	@ (8015df4 <USB_ActivateSetup+0x44>)
 8015dce:	4013      	ands	r3, r2
 8015dd0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015dd8:	685b      	ldr	r3, [r3, #4]
 8015dda:	68fa      	ldr	r2, [r7, #12]
 8015ddc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015de4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015de6:	2300      	movs	r3, #0
}
 8015de8:	4618      	mov	r0, r3
 8015dea:	3714      	adds	r7, #20
 8015dec:	46bd      	mov	sp, r7
 8015dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df2:	4770      	bx	lr
 8015df4:	fffff800 	.word	0xfffff800

08015df8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8015df8:	b480      	push	{r7}
 8015dfa:	b087      	sub	sp, #28
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	60f8      	str	r0, [r7, #12]
 8015e00:	460b      	mov	r3, r1
 8015e02:	607a      	str	r2, [r7, #4]
 8015e04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	333c      	adds	r3, #60	@ 0x3c
 8015e0e:	3304      	adds	r3, #4
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015e14:	693b      	ldr	r3, [r7, #16]
 8015e16:	4a26      	ldr	r2, [pc, #152]	@ (8015eb0 <USB_EP0_OutStart+0xb8>)
 8015e18:	4293      	cmp	r3, r2
 8015e1a:	d90a      	bls.n	8015e32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015e28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015e2c:	d101      	bne.n	8015e32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	e037      	b.n	8015ea2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015e32:	697b      	ldr	r3, [r7, #20]
 8015e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e38:	461a      	mov	r2, r3
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e44:	691b      	ldr	r3, [r3, #16]
 8015e46:	697a      	ldr	r2, [r7, #20]
 8015e48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015e50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015e52:	697b      	ldr	r3, [r7, #20]
 8015e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e58:	691b      	ldr	r3, [r3, #16]
 8015e5a:	697a      	ldr	r2, [r7, #20]
 8015e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e60:	f043 0318 	orr.w	r3, r3, #24
 8015e64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015e66:	697b      	ldr	r3, [r7, #20]
 8015e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e6c:	691b      	ldr	r3, [r3, #16]
 8015e6e:	697a      	ldr	r2, [r7, #20]
 8015e70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e74:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015e78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015e7a:	7afb      	ldrb	r3, [r7, #11]
 8015e7c:	2b01      	cmp	r3, #1
 8015e7e:	d10f      	bne.n	8015ea0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015e80:	697b      	ldr	r3, [r7, #20]
 8015e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e86:	461a      	mov	r2, r3
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	697a      	ldr	r2, [r7, #20]
 8015e96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e9a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8015e9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015ea0:	2300      	movs	r3, #0
}
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	371c      	adds	r7, #28
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eac:	4770      	bx	lr
 8015eae:	bf00      	nop
 8015eb0:	4f54300a 	.word	0x4f54300a

08015eb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015eb4:	b480      	push	{r7}
 8015eb6:	b085      	sub	sp, #20
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	3301      	adds	r3, #1
 8015ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015ecc:	d901      	bls.n	8015ed2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015ece:	2303      	movs	r3, #3
 8015ed0:	e01b      	b.n	8015f0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	691b      	ldr	r3, [r3, #16]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	daf2      	bge.n	8015ec0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015eda:	2300      	movs	r3, #0
 8015edc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	691b      	ldr	r3, [r3, #16]
 8015ee2:	f043 0201 	orr.w	r2, r3, #1
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	3301      	adds	r3, #1
 8015eee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015ef6:	d901      	bls.n	8015efc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015ef8:	2303      	movs	r3, #3
 8015efa:	e006      	b.n	8015f0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	691b      	ldr	r3, [r3, #16]
 8015f00:	f003 0301 	and.w	r3, r3, #1
 8015f04:	2b01      	cmp	r3, #1
 8015f06:	d0f0      	beq.n	8015eea <USB_CoreReset+0x36>

  return HAL_OK;
 8015f08:	2300      	movs	r3, #0
}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	3714      	adds	r7, #20
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f14:	4770      	bx	lr
	...

08015f18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b084      	sub	sp, #16
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
 8015f20:	460b      	mov	r3, r1
 8015f22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015f24:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015f28:	f002 fcca 	bl	80188c0 <USBD_static_malloc>
 8015f2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d109      	bne.n	8015f48 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	32b0      	adds	r2, #176	@ 0xb0
 8015f3e:	2100      	movs	r1, #0
 8015f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015f44:	2302      	movs	r3, #2
 8015f46:	e0d4      	b.n	80160f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015f48:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015f4c:	2100      	movs	r1, #0
 8015f4e:	68f8      	ldr	r0, [r7, #12]
 8015f50:	f004 f89f 	bl	801a092 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	32b0      	adds	r2, #176	@ 0xb0
 8015f5e:	68f9      	ldr	r1, [r7, #12]
 8015f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	32b0      	adds	r2, #176	@ 0xb0
 8015f6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	7c1b      	ldrb	r3, [r3, #16]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d138      	bne.n	8015ff2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015f80:	4b5e      	ldr	r3, [pc, #376]	@ (80160fc <USBD_CDC_Init+0x1e4>)
 8015f82:	7819      	ldrb	r1, [r3, #0]
 8015f84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015f88:	2202      	movs	r2, #2
 8015f8a:	6878      	ldr	r0, [r7, #4]
 8015f8c:	f002 fb75 	bl	801867a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015f90:	4b5a      	ldr	r3, [pc, #360]	@ (80160fc <USBD_CDC_Init+0x1e4>)
 8015f92:	781b      	ldrb	r3, [r3, #0]
 8015f94:	f003 020f 	and.w	r2, r3, #15
 8015f98:	6879      	ldr	r1, [r7, #4]
 8015f9a:	4613      	mov	r3, r2
 8015f9c:	009b      	lsls	r3, r3, #2
 8015f9e:	4413      	add	r3, r2
 8015fa0:	009b      	lsls	r3, r3, #2
 8015fa2:	440b      	add	r3, r1
 8015fa4:	3324      	adds	r3, #36	@ 0x24
 8015fa6:	2201      	movs	r2, #1
 8015fa8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015faa:	4b55      	ldr	r3, [pc, #340]	@ (8016100 <USBD_CDC_Init+0x1e8>)
 8015fac:	7819      	ldrb	r1, [r3, #0]
 8015fae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015fb2:	2202      	movs	r2, #2
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f002 fb60 	bl	801867a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015fba:	4b51      	ldr	r3, [pc, #324]	@ (8016100 <USBD_CDC_Init+0x1e8>)
 8015fbc:	781b      	ldrb	r3, [r3, #0]
 8015fbe:	f003 020f 	and.w	r2, r3, #15
 8015fc2:	6879      	ldr	r1, [r7, #4]
 8015fc4:	4613      	mov	r3, r2
 8015fc6:	009b      	lsls	r3, r3, #2
 8015fc8:	4413      	add	r3, r2
 8015fca:	009b      	lsls	r3, r3, #2
 8015fcc:	440b      	add	r3, r1
 8015fce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015fd2:	2201      	movs	r2, #1
 8015fd4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8016104 <USBD_CDC_Init+0x1ec>)
 8015fd8:	781b      	ldrb	r3, [r3, #0]
 8015fda:	f003 020f 	and.w	r2, r3, #15
 8015fde:	6879      	ldr	r1, [r7, #4]
 8015fe0:	4613      	mov	r3, r2
 8015fe2:	009b      	lsls	r3, r3, #2
 8015fe4:	4413      	add	r3, r2
 8015fe6:	009b      	lsls	r3, r3, #2
 8015fe8:	440b      	add	r3, r1
 8015fea:	3326      	adds	r3, #38	@ 0x26
 8015fec:	2210      	movs	r2, #16
 8015fee:	801a      	strh	r2, [r3, #0]
 8015ff0:	e035      	b.n	801605e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015ff2:	4b42      	ldr	r3, [pc, #264]	@ (80160fc <USBD_CDC_Init+0x1e4>)
 8015ff4:	7819      	ldrb	r1, [r3, #0]
 8015ff6:	2340      	movs	r3, #64	@ 0x40
 8015ff8:	2202      	movs	r2, #2
 8015ffa:	6878      	ldr	r0, [r7, #4]
 8015ffc:	f002 fb3d 	bl	801867a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8016000:	4b3e      	ldr	r3, [pc, #248]	@ (80160fc <USBD_CDC_Init+0x1e4>)
 8016002:	781b      	ldrb	r3, [r3, #0]
 8016004:	f003 020f 	and.w	r2, r3, #15
 8016008:	6879      	ldr	r1, [r7, #4]
 801600a:	4613      	mov	r3, r2
 801600c:	009b      	lsls	r3, r3, #2
 801600e:	4413      	add	r3, r2
 8016010:	009b      	lsls	r3, r3, #2
 8016012:	440b      	add	r3, r1
 8016014:	3324      	adds	r3, #36	@ 0x24
 8016016:	2201      	movs	r2, #1
 8016018:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801601a:	4b39      	ldr	r3, [pc, #228]	@ (8016100 <USBD_CDC_Init+0x1e8>)
 801601c:	7819      	ldrb	r1, [r3, #0]
 801601e:	2340      	movs	r3, #64	@ 0x40
 8016020:	2202      	movs	r2, #2
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	f002 fb29 	bl	801867a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8016028:	4b35      	ldr	r3, [pc, #212]	@ (8016100 <USBD_CDC_Init+0x1e8>)
 801602a:	781b      	ldrb	r3, [r3, #0]
 801602c:	f003 020f 	and.w	r2, r3, #15
 8016030:	6879      	ldr	r1, [r7, #4]
 8016032:	4613      	mov	r3, r2
 8016034:	009b      	lsls	r3, r3, #2
 8016036:	4413      	add	r3, r2
 8016038:	009b      	lsls	r3, r3, #2
 801603a:	440b      	add	r3, r1
 801603c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016040:	2201      	movs	r2, #1
 8016042:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8016044:	4b2f      	ldr	r3, [pc, #188]	@ (8016104 <USBD_CDC_Init+0x1ec>)
 8016046:	781b      	ldrb	r3, [r3, #0]
 8016048:	f003 020f 	and.w	r2, r3, #15
 801604c:	6879      	ldr	r1, [r7, #4]
 801604e:	4613      	mov	r3, r2
 8016050:	009b      	lsls	r3, r3, #2
 8016052:	4413      	add	r3, r2
 8016054:	009b      	lsls	r3, r3, #2
 8016056:	440b      	add	r3, r1
 8016058:	3326      	adds	r3, #38	@ 0x26
 801605a:	2210      	movs	r2, #16
 801605c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801605e:	4b29      	ldr	r3, [pc, #164]	@ (8016104 <USBD_CDC_Init+0x1ec>)
 8016060:	7819      	ldrb	r1, [r3, #0]
 8016062:	2308      	movs	r3, #8
 8016064:	2203      	movs	r2, #3
 8016066:	6878      	ldr	r0, [r7, #4]
 8016068:	f002 fb07 	bl	801867a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801606c:	4b25      	ldr	r3, [pc, #148]	@ (8016104 <USBD_CDC_Init+0x1ec>)
 801606e:	781b      	ldrb	r3, [r3, #0]
 8016070:	f003 020f 	and.w	r2, r3, #15
 8016074:	6879      	ldr	r1, [r7, #4]
 8016076:	4613      	mov	r3, r2
 8016078:	009b      	lsls	r3, r3, #2
 801607a:	4413      	add	r3, r2
 801607c:	009b      	lsls	r3, r3, #2
 801607e:	440b      	add	r3, r1
 8016080:	3324      	adds	r3, #36	@ 0x24
 8016082:	2201      	movs	r2, #1
 8016084:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	2200      	movs	r2, #0
 801608a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016094:	687a      	ldr	r2, [r7, #4]
 8016096:	33b0      	adds	r3, #176	@ 0xb0
 8016098:	009b      	lsls	r3, r3, #2
 801609a:	4413      	add	r3, r2
 801609c:	685b      	ldr	r3, [r3, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	2200      	movs	r2, #0
 80160a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2200      	movs	r2, #0
 80160ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d101      	bne.n	80160c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80160bc:	2302      	movs	r3, #2
 80160be:	e018      	b.n	80160f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	7c1b      	ldrb	r3, [r3, #16]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d10a      	bne.n	80160de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80160c8:	4b0d      	ldr	r3, [pc, #52]	@ (8016100 <USBD_CDC_Init+0x1e8>)
 80160ca:	7819      	ldrb	r1, [r3, #0]
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80160d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f002 fbbe 	bl	8018858 <USBD_LL_PrepareReceive>
 80160dc:	e008      	b.n	80160f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80160de:	4b08      	ldr	r3, [pc, #32]	@ (8016100 <USBD_CDC_Init+0x1e8>)
 80160e0:	7819      	ldrb	r1, [r3, #0]
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80160e8:	2340      	movs	r3, #64	@ 0x40
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f002 fbb4 	bl	8018858 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80160f0:	2300      	movs	r3, #0
}
 80160f2:	4618      	mov	r0, r3
 80160f4:	3710      	adds	r7, #16
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}
 80160fa:	bf00      	nop
 80160fc:	240000c7 	.word	0x240000c7
 8016100:	240000c8 	.word	0x240000c8
 8016104:	240000c9 	.word	0x240000c9

08016108 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b082      	sub	sp, #8
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
 8016110:	460b      	mov	r3, r1
 8016112:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8016114:	4b3a      	ldr	r3, [pc, #232]	@ (8016200 <USBD_CDC_DeInit+0xf8>)
 8016116:	781b      	ldrb	r3, [r3, #0]
 8016118:	4619      	mov	r1, r3
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	f002 fad3 	bl	80186c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8016120:	4b37      	ldr	r3, [pc, #220]	@ (8016200 <USBD_CDC_DeInit+0xf8>)
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	f003 020f 	and.w	r2, r3, #15
 8016128:	6879      	ldr	r1, [r7, #4]
 801612a:	4613      	mov	r3, r2
 801612c:	009b      	lsls	r3, r3, #2
 801612e:	4413      	add	r3, r2
 8016130:	009b      	lsls	r3, r3, #2
 8016132:	440b      	add	r3, r1
 8016134:	3324      	adds	r3, #36	@ 0x24
 8016136:	2200      	movs	r2, #0
 8016138:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801613a:	4b32      	ldr	r3, [pc, #200]	@ (8016204 <USBD_CDC_DeInit+0xfc>)
 801613c:	781b      	ldrb	r3, [r3, #0]
 801613e:	4619      	mov	r1, r3
 8016140:	6878      	ldr	r0, [r7, #4]
 8016142:	f002 fac0 	bl	80186c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8016146:	4b2f      	ldr	r3, [pc, #188]	@ (8016204 <USBD_CDC_DeInit+0xfc>)
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	f003 020f 	and.w	r2, r3, #15
 801614e:	6879      	ldr	r1, [r7, #4]
 8016150:	4613      	mov	r3, r2
 8016152:	009b      	lsls	r3, r3, #2
 8016154:	4413      	add	r3, r2
 8016156:	009b      	lsls	r3, r3, #2
 8016158:	440b      	add	r3, r1
 801615a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801615e:	2200      	movs	r2, #0
 8016160:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8016162:	4b29      	ldr	r3, [pc, #164]	@ (8016208 <USBD_CDC_DeInit+0x100>)
 8016164:	781b      	ldrb	r3, [r3, #0]
 8016166:	4619      	mov	r1, r3
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f002 faac 	bl	80186c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801616e:	4b26      	ldr	r3, [pc, #152]	@ (8016208 <USBD_CDC_DeInit+0x100>)
 8016170:	781b      	ldrb	r3, [r3, #0]
 8016172:	f003 020f 	and.w	r2, r3, #15
 8016176:	6879      	ldr	r1, [r7, #4]
 8016178:	4613      	mov	r3, r2
 801617a:	009b      	lsls	r3, r3, #2
 801617c:	4413      	add	r3, r2
 801617e:	009b      	lsls	r3, r3, #2
 8016180:	440b      	add	r3, r1
 8016182:	3324      	adds	r3, #36	@ 0x24
 8016184:	2200      	movs	r2, #0
 8016186:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8016188:	4b1f      	ldr	r3, [pc, #124]	@ (8016208 <USBD_CDC_DeInit+0x100>)
 801618a:	781b      	ldrb	r3, [r3, #0]
 801618c:	f003 020f 	and.w	r2, r3, #15
 8016190:	6879      	ldr	r1, [r7, #4]
 8016192:	4613      	mov	r3, r2
 8016194:	009b      	lsls	r3, r3, #2
 8016196:	4413      	add	r3, r2
 8016198:	009b      	lsls	r3, r3, #2
 801619a:	440b      	add	r3, r1
 801619c:	3326      	adds	r3, #38	@ 0x26
 801619e:	2200      	movs	r2, #0
 80161a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	32b0      	adds	r2, #176	@ 0xb0
 80161ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d01f      	beq.n	80161f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80161ba:	687a      	ldr	r2, [r7, #4]
 80161bc:	33b0      	adds	r3, #176	@ 0xb0
 80161be:	009b      	lsls	r3, r3, #2
 80161c0:	4413      	add	r3, r2
 80161c2:	685b      	ldr	r3, [r3, #4]
 80161c4:	685b      	ldr	r3, [r3, #4]
 80161c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	32b0      	adds	r2, #176	@ 0xb0
 80161d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161d6:	4618      	mov	r0, r3
 80161d8:	f002 fb80 	bl	80188dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	32b0      	adds	r2, #176	@ 0xb0
 80161e6:	2100      	movs	r1, #0
 80161e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2200      	movs	r2, #0
 80161f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80161f4:	2300      	movs	r3, #0
}
 80161f6:	4618      	mov	r0, r3
 80161f8:	3708      	adds	r7, #8
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}
 80161fe:	bf00      	nop
 8016200:	240000c7 	.word	0x240000c7
 8016204:	240000c8 	.word	0x240000c8
 8016208:	240000c9 	.word	0x240000c9

0801620c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b086      	sub	sp, #24
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
 8016214:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	32b0      	adds	r2, #176	@ 0xb0
 8016220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016224:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8016226:	2300      	movs	r3, #0
 8016228:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801622a:	2300      	movs	r3, #0
 801622c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801622e:	2300      	movs	r3, #0
 8016230:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8016232:	693b      	ldr	r3, [r7, #16]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d101      	bne.n	801623c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8016238:	2303      	movs	r3, #3
 801623a:	e0bf      	b.n	80163bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	781b      	ldrb	r3, [r3, #0]
 8016240:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016244:	2b00      	cmp	r3, #0
 8016246:	d050      	beq.n	80162ea <USBD_CDC_Setup+0xde>
 8016248:	2b20      	cmp	r3, #32
 801624a:	f040 80af 	bne.w	80163ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801624e:	683b      	ldr	r3, [r7, #0]
 8016250:	88db      	ldrh	r3, [r3, #6]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d03a      	beq.n	80162cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8016256:	683b      	ldr	r3, [r7, #0]
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	b25b      	sxtb	r3, r3
 801625c:	2b00      	cmp	r3, #0
 801625e:	da1b      	bge.n	8016298 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016266:	687a      	ldr	r2, [r7, #4]
 8016268:	33b0      	adds	r3, #176	@ 0xb0
 801626a:	009b      	lsls	r3, r3, #2
 801626c:	4413      	add	r3, r2
 801626e:	685b      	ldr	r3, [r3, #4]
 8016270:	689b      	ldr	r3, [r3, #8]
 8016272:	683a      	ldr	r2, [r7, #0]
 8016274:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8016276:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016278:	683a      	ldr	r2, [r7, #0]
 801627a:	88d2      	ldrh	r2, [r2, #6]
 801627c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801627e:	683b      	ldr	r3, [r7, #0]
 8016280:	88db      	ldrh	r3, [r3, #6]
 8016282:	2b07      	cmp	r3, #7
 8016284:	bf28      	it	cs
 8016286:	2307      	movcs	r3, #7
 8016288:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801628a:	693b      	ldr	r3, [r7, #16]
 801628c:	89fa      	ldrh	r2, [r7, #14]
 801628e:	4619      	mov	r1, r3
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	f001 fdbd 	bl	8017e10 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8016296:	e090      	b.n	80163ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8016298:	683b      	ldr	r3, [r7, #0]
 801629a:	785a      	ldrb	r2, [r3, #1]
 801629c:	693b      	ldr	r3, [r7, #16]
 801629e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80162a2:	683b      	ldr	r3, [r7, #0]
 80162a4:	88db      	ldrh	r3, [r3, #6]
 80162a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80162a8:	d803      	bhi.n	80162b2 <USBD_CDC_Setup+0xa6>
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	88db      	ldrh	r3, [r3, #6]
 80162ae:	b2da      	uxtb	r2, r3
 80162b0:	e000      	b.n	80162b4 <USBD_CDC_Setup+0xa8>
 80162b2:	2240      	movs	r2, #64	@ 0x40
 80162b4:	693b      	ldr	r3, [r7, #16]
 80162b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80162ba:	6939      	ldr	r1, [r7, #16]
 80162bc:	693b      	ldr	r3, [r7, #16]
 80162be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80162c2:	461a      	mov	r2, r3
 80162c4:	6878      	ldr	r0, [r7, #4]
 80162c6:	f001 fdcf 	bl	8017e68 <USBD_CtlPrepareRx>
      break;
 80162ca:	e076      	b.n	80163ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80162d2:	687a      	ldr	r2, [r7, #4]
 80162d4:	33b0      	adds	r3, #176	@ 0xb0
 80162d6:	009b      	lsls	r3, r3, #2
 80162d8:	4413      	add	r3, r2
 80162da:	685b      	ldr	r3, [r3, #4]
 80162dc:	689b      	ldr	r3, [r3, #8]
 80162de:	683a      	ldr	r2, [r7, #0]
 80162e0:	7850      	ldrb	r0, [r2, #1]
 80162e2:	2200      	movs	r2, #0
 80162e4:	6839      	ldr	r1, [r7, #0]
 80162e6:	4798      	blx	r3
      break;
 80162e8:	e067      	b.n	80163ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80162ea:	683b      	ldr	r3, [r7, #0]
 80162ec:	785b      	ldrb	r3, [r3, #1]
 80162ee:	2b0b      	cmp	r3, #11
 80162f0:	d851      	bhi.n	8016396 <USBD_CDC_Setup+0x18a>
 80162f2:	a201      	add	r2, pc, #4	@ (adr r2, 80162f8 <USBD_CDC_Setup+0xec>)
 80162f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162f8:	08016329 	.word	0x08016329
 80162fc:	080163a5 	.word	0x080163a5
 8016300:	08016397 	.word	0x08016397
 8016304:	08016397 	.word	0x08016397
 8016308:	08016397 	.word	0x08016397
 801630c:	08016397 	.word	0x08016397
 8016310:	08016397 	.word	0x08016397
 8016314:	08016397 	.word	0x08016397
 8016318:	08016397 	.word	0x08016397
 801631c:	08016397 	.word	0x08016397
 8016320:	08016353 	.word	0x08016353
 8016324:	0801637d 	.word	0x0801637d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801632e:	b2db      	uxtb	r3, r3
 8016330:	2b03      	cmp	r3, #3
 8016332:	d107      	bne.n	8016344 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016334:	f107 030a 	add.w	r3, r7, #10
 8016338:	2202      	movs	r2, #2
 801633a:	4619      	mov	r1, r3
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f001 fd67 	bl	8017e10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016342:	e032      	b.n	80163aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8016344:	6839      	ldr	r1, [r7, #0]
 8016346:	6878      	ldr	r0, [r7, #4]
 8016348:	f001 fce5 	bl	8017d16 <USBD_CtlError>
            ret = USBD_FAIL;
 801634c:	2303      	movs	r3, #3
 801634e:	75fb      	strb	r3, [r7, #23]
          break;
 8016350:	e02b      	b.n	80163aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016358:	b2db      	uxtb	r3, r3
 801635a:	2b03      	cmp	r3, #3
 801635c:	d107      	bne.n	801636e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801635e:	f107 030d 	add.w	r3, r7, #13
 8016362:	2201      	movs	r2, #1
 8016364:	4619      	mov	r1, r3
 8016366:	6878      	ldr	r0, [r7, #4]
 8016368:	f001 fd52 	bl	8017e10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801636c:	e01d      	b.n	80163aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801636e:	6839      	ldr	r1, [r7, #0]
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f001 fcd0 	bl	8017d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8016376:	2303      	movs	r3, #3
 8016378:	75fb      	strb	r3, [r7, #23]
          break;
 801637a:	e016      	b.n	80163aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016382:	b2db      	uxtb	r3, r3
 8016384:	2b03      	cmp	r3, #3
 8016386:	d00f      	beq.n	80163a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8016388:	6839      	ldr	r1, [r7, #0]
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f001 fcc3 	bl	8017d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8016390:	2303      	movs	r3, #3
 8016392:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016394:	e008      	b.n	80163a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016396:	6839      	ldr	r1, [r7, #0]
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f001 fcbc 	bl	8017d16 <USBD_CtlError>
          ret = USBD_FAIL;
 801639e:	2303      	movs	r3, #3
 80163a0:	75fb      	strb	r3, [r7, #23]
          break;
 80163a2:	e002      	b.n	80163aa <USBD_CDC_Setup+0x19e>
          break;
 80163a4:	bf00      	nop
 80163a6:	e008      	b.n	80163ba <USBD_CDC_Setup+0x1ae>
          break;
 80163a8:	bf00      	nop
      }
      break;
 80163aa:	e006      	b.n	80163ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80163ac:	6839      	ldr	r1, [r7, #0]
 80163ae:	6878      	ldr	r0, [r7, #4]
 80163b0:	f001 fcb1 	bl	8017d16 <USBD_CtlError>
      ret = USBD_FAIL;
 80163b4:	2303      	movs	r3, #3
 80163b6:	75fb      	strb	r3, [r7, #23]
      break;
 80163b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80163ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80163bc:	4618      	mov	r0, r3
 80163be:	3718      	adds	r7, #24
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}

080163c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b084      	sub	sp, #16
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	460b      	mov	r3, r1
 80163ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80163d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	32b0      	adds	r2, #176	@ 0xb0
 80163e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d101      	bne.n	80163ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80163ea:	2303      	movs	r3, #3
 80163ec:	e065      	b.n	80164ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	32b0      	adds	r2, #176	@ 0xb0
 80163f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80163fe:	78fb      	ldrb	r3, [r7, #3]
 8016400:	f003 020f 	and.w	r2, r3, #15
 8016404:	6879      	ldr	r1, [r7, #4]
 8016406:	4613      	mov	r3, r2
 8016408:	009b      	lsls	r3, r3, #2
 801640a:	4413      	add	r3, r2
 801640c:	009b      	lsls	r3, r3, #2
 801640e:	440b      	add	r3, r1
 8016410:	3318      	adds	r3, #24
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d02f      	beq.n	8016478 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8016418:	78fb      	ldrb	r3, [r7, #3]
 801641a:	f003 020f 	and.w	r2, r3, #15
 801641e:	6879      	ldr	r1, [r7, #4]
 8016420:	4613      	mov	r3, r2
 8016422:	009b      	lsls	r3, r3, #2
 8016424:	4413      	add	r3, r2
 8016426:	009b      	lsls	r3, r3, #2
 8016428:	440b      	add	r3, r1
 801642a:	3318      	adds	r3, #24
 801642c:	681a      	ldr	r2, [r3, #0]
 801642e:	78fb      	ldrb	r3, [r7, #3]
 8016430:	f003 010f 	and.w	r1, r3, #15
 8016434:	68f8      	ldr	r0, [r7, #12]
 8016436:	460b      	mov	r3, r1
 8016438:	00db      	lsls	r3, r3, #3
 801643a:	440b      	add	r3, r1
 801643c:	009b      	lsls	r3, r3, #2
 801643e:	4403      	add	r3, r0
 8016440:	331c      	adds	r3, #28
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	fbb2 f1f3 	udiv	r1, r2, r3
 8016448:	fb01 f303 	mul.w	r3, r1, r3
 801644c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801644e:	2b00      	cmp	r3, #0
 8016450:	d112      	bne.n	8016478 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8016452:	78fb      	ldrb	r3, [r7, #3]
 8016454:	f003 020f 	and.w	r2, r3, #15
 8016458:	6879      	ldr	r1, [r7, #4]
 801645a:	4613      	mov	r3, r2
 801645c:	009b      	lsls	r3, r3, #2
 801645e:	4413      	add	r3, r2
 8016460:	009b      	lsls	r3, r3, #2
 8016462:	440b      	add	r3, r1
 8016464:	3318      	adds	r3, #24
 8016466:	2200      	movs	r2, #0
 8016468:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801646a:	78f9      	ldrb	r1, [r7, #3]
 801646c:	2300      	movs	r3, #0
 801646e:	2200      	movs	r2, #0
 8016470:	6878      	ldr	r0, [r7, #4]
 8016472:	f002 f9d0 	bl	8018816 <USBD_LL_Transmit>
 8016476:	e01f      	b.n	80164b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	2200      	movs	r2, #0
 801647c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016486:	687a      	ldr	r2, [r7, #4]
 8016488:	33b0      	adds	r3, #176	@ 0xb0
 801648a:	009b      	lsls	r3, r3, #2
 801648c:	4413      	add	r3, r2
 801648e:	685b      	ldr	r3, [r3, #4]
 8016490:	691b      	ldr	r3, [r3, #16]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d010      	beq.n	80164b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801649c:	687a      	ldr	r2, [r7, #4]
 801649e:	33b0      	adds	r3, #176	@ 0xb0
 80164a0:	009b      	lsls	r3, r3, #2
 80164a2:	4413      	add	r3, r2
 80164a4:	685b      	ldr	r3, [r3, #4]
 80164a6:	691b      	ldr	r3, [r3, #16]
 80164a8:	68ba      	ldr	r2, [r7, #8]
 80164aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80164ae:	68ba      	ldr	r2, [r7, #8]
 80164b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80164b4:	78fa      	ldrb	r2, [r7, #3]
 80164b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80164b8:	2300      	movs	r3, #0
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	3710      	adds	r7, #16
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}

080164c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80164c2:	b580      	push	{r7, lr}
 80164c4:	b084      	sub	sp, #16
 80164c6:	af00      	add	r7, sp, #0
 80164c8:	6078      	str	r0, [r7, #4]
 80164ca:	460b      	mov	r3, r1
 80164cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	32b0      	adds	r2, #176	@ 0xb0
 80164d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	32b0      	adds	r2, #176	@ 0xb0
 80164e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d101      	bne.n	80164f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80164f0:	2303      	movs	r3, #3
 80164f2:	e01a      	b.n	801652a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80164f4:	78fb      	ldrb	r3, [r7, #3]
 80164f6:	4619      	mov	r1, r3
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f002 f9ce 	bl	801889a <USBD_LL_GetRxDataSize>
 80164fe:	4602      	mov	r2, r0
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801650c:	687a      	ldr	r2, [r7, #4]
 801650e:	33b0      	adds	r3, #176	@ 0xb0
 8016510:	009b      	lsls	r3, r3, #2
 8016512:	4413      	add	r3, r2
 8016514:	685b      	ldr	r3, [r3, #4]
 8016516:	68db      	ldr	r3, [r3, #12]
 8016518:	68fa      	ldr	r2, [r7, #12]
 801651a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801651e:	68fa      	ldr	r2, [r7, #12]
 8016520:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8016524:	4611      	mov	r1, r2
 8016526:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016528:	2300      	movs	r3, #0
}
 801652a:	4618      	mov	r0, r3
 801652c:	3710      	adds	r7, #16
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}

08016532 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016532:	b580      	push	{r7, lr}
 8016534:	b084      	sub	sp, #16
 8016536:	af00      	add	r7, sp, #0
 8016538:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	32b0      	adds	r2, #176	@ 0xb0
 8016544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016548:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d101      	bne.n	8016554 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016550:	2303      	movs	r3, #3
 8016552:	e024      	b.n	801659e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801655a:	687a      	ldr	r2, [r7, #4]
 801655c:	33b0      	adds	r3, #176	@ 0xb0
 801655e:	009b      	lsls	r3, r3, #2
 8016560:	4413      	add	r3, r2
 8016562:	685b      	ldr	r3, [r3, #4]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d019      	beq.n	801659c <USBD_CDC_EP0_RxReady+0x6a>
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801656e:	2bff      	cmp	r3, #255	@ 0xff
 8016570:	d014      	beq.n	801659c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016578:	687a      	ldr	r2, [r7, #4]
 801657a:	33b0      	adds	r3, #176	@ 0xb0
 801657c:	009b      	lsls	r3, r3, #2
 801657e:	4413      	add	r3, r2
 8016580:	685b      	ldr	r3, [r3, #4]
 8016582:	689b      	ldr	r3, [r3, #8]
 8016584:	68fa      	ldr	r2, [r7, #12]
 8016586:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801658a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801658c:	68fa      	ldr	r2, [r7, #12]
 801658e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8016592:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	22ff      	movs	r2, #255	@ 0xff
 8016598:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801659c:	2300      	movs	r3, #0
}
 801659e:	4618      	mov	r0, r3
 80165a0:	3710      	adds	r7, #16
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}
	...

080165a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b086      	sub	sp, #24
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80165b0:	2182      	movs	r1, #130	@ 0x82
 80165b2:	4818      	ldr	r0, [pc, #96]	@ (8016614 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80165b4:	f000 fd4f 	bl	8017056 <USBD_GetEpDesc>
 80165b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80165ba:	2101      	movs	r1, #1
 80165bc:	4815      	ldr	r0, [pc, #84]	@ (8016614 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80165be:	f000 fd4a 	bl	8017056 <USBD_GetEpDesc>
 80165c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80165c4:	2181      	movs	r1, #129	@ 0x81
 80165c6:	4813      	ldr	r0, [pc, #76]	@ (8016614 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80165c8:	f000 fd45 	bl	8017056 <USBD_GetEpDesc>
 80165cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d002      	beq.n	80165da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80165d4:	697b      	ldr	r3, [r7, #20]
 80165d6:	2210      	movs	r2, #16
 80165d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80165da:	693b      	ldr	r3, [r7, #16]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d006      	beq.n	80165ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80165e0:	693b      	ldr	r3, [r7, #16]
 80165e2:	2200      	movs	r2, #0
 80165e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80165e8:	711a      	strb	r2, [r3, #4]
 80165ea:	2200      	movs	r2, #0
 80165ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d006      	beq.n	8016602 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	2200      	movs	r2, #0
 80165f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80165fc:	711a      	strb	r2, [r3, #4]
 80165fe:	2200      	movs	r2, #0
 8016600:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	2243      	movs	r2, #67	@ 0x43
 8016606:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016608:	4b02      	ldr	r3, [pc, #8]	@ (8016614 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801660a:	4618      	mov	r0, r3
 801660c:	3718      	adds	r7, #24
 801660e:	46bd      	mov	sp, r7
 8016610:	bd80      	pop	{r7, pc}
 8016612:	bf00      	nop
 8016614:	24000084 	.word	0x24000084

08016618 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b086      	sub	sp, #24
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016620:	2182      	movs	r1, #130	@ 0x82
 8016622:	4818      	ldr	r0, [pc, #96]	@ (8016684 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016624:	f000 fd17 	bl	8017056 <USBD_GetEpDesc>
 8016628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801662a:	2101      	movs	r1, #1
 801662c:	4815      	ldr	r0, [pc, #84]	@ (8016684 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801662e:	f000 fd12 	bl	8017056 <USBD_GetEpDesc>
 8016632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016634:	2181      	movs	r1, #129	@ 0x81
 8016636:	4813      	ldr	r0, [pc, #76]	@ (8016684 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016638:	f000 fd0d 	bl	8017056 <USBD_GetEpDesc>
 801663c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801663e:	697b      	ldr	r3, [r7, #20]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d002      	beq.n	801664a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	2210      	movs	r2, #16
 8016648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801664a:	693b      	ldr	r3, [r7, #16]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d006      	beq.n	801665e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016650:	693b      	ldr	r3, [r7, #16]
 8016652:	2200      	movs	r2, #0
 8016654:	711a      	strb	r2, [r3, #4]
 8016656:	2200      	movs	r2, #0
 8016658:	f042 0202 	orr.w	r2, r2, #2
 801665c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d006      	beq.n	8016672 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	2200      	movs	r2, #0
 8016668:	711a      	strb	r2, [r3, #4]
 801666a:	2200      	movs	r2, #0
 801666c:	f042 0202 	orr.w	r2, r2, #2
 8016670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	2243      	movs	r2, #67	@ 0x43
 8016676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016678:	4b02      	ldr	r3, [pc, #8]	@ (8016684 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801667a:	4618      	mov	r0, r3
 801667c:	3718      	adds	r7, #24
 801667e:	46bd      	mov	sp, r7
 8016680:	bd80      	pop	{r7, pc}
 8016682:	bf00      	nop
 8016684:	24000084 	.word	0x24000084

08016688 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b086      	sub	sp, #24
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016690:	2182      	movs	r1, #130	@ 0x82
 8016692:	4818      	ldr	r0, [pc, #96]	@ (80166f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016694:	f000 fcdf 	bl	8017056 <USBD_GetEpDesc>
 8016698:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801669a:	2101      	movs	r1, #1
 801669c:	4815      	ldr	r0, [pc, #84]	@ (80166f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801669e:	f000 fcda 	bl	8017056 <USBD_GetEpDesc>
 80166a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80166a4:	2181      	movs	r1, #129	@ 0x81
 80166a6:	4813      	ldr	r0, [pc, #76]	@ (80166f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80166a8:	f000 fcd5 	bl	8017056 <USBD_GetEpDesc>
 80166ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80166ae:	697b      	ldr	r3, [r7, #20]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d002      	beq.n	80166ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80166b4:	697b      	ldr	r3, [r7, #20]
 80166b6:	2210      	movs	r2, #16
 80166b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80166ba:	693b      	ldr	r3, [r7, #16]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d006      	beq.n	80166ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	2200      	movs	r2, #0
 80166c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80166c8:	711a      	strb	r2, [r3, #4]
 80166ca:	2200      	movs	r2, #0
 80166cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d006      	beq.n	80166e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	2200      	movs	r2, #0
 80166d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80166dc:	711a      	strb	r2, [r3, #4]
 80166de:	2200      	movs	r2, #0
 80166e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	2243      	movs	r2, #67	@ 0x43
 80166e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80166e8:	4b02      	ldr	r3, [pc, #8]	@ (80166f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80166ea:	4618      	mov	r0, r3
 80166ec:	3718      	adds	r7, #24
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
 80166f2:	bf00      	nop
 80166f4:	24000084 	.word	0x24000084

080166f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80166f8:	b480      	push	{r7}
 80166fa:	b083      	sub	sp, #12
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	220a      	movs	r2, #10
 8016704:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016706:	4b03      	ldr	r3, [pc, #12]	@ (8016714 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016708:	4618      	mov	r0, r3
 801670a:	370c      	adds	r7, #12
 801670c:	46bd      	mov	sp, r7
 801670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016712:	4770      	bx	lr
 8016714:	24000040 	.word	0x24000040

08016718 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016718:	b480      	push	{r7}
 801671a:	b083      	sub	sp, #12
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
 8016720:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d101      	bne.n	801672c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016728:	2303      	movs	r3, #3
 801672a:	e009      	b.n	8016740 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016732:	687a      	ldr	r2, [r7, #4]
 8016734:	33b0      	adds	r3, #176	@ 0xb0
 8016736:	009b      	lsls	r3, r3, #2
 8016738:	4413      	add	r3, r2
 801673a:	683a      	ldr	r2, [r7, #0]
 801673c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801673e:	2300      	movs	r3, #0
}
 8016740:	4618      	mov	r0, r3
 8016742:	370c      	adds	r7, #12
 8016744:	46bd      	mov	sp, r7
 8016746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674a:	4770      	bx	lr

0801674c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801674c:	b480      	push	{r7}
 801674e:	b087      	sub	sp, #28
 8016750:	af00      	add	r7, sp, #0
 8016752:	60f8      	str	r0, [r7, #12]
 8016754:	60b9      	str	r1, [r7, #8]
 8016756:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	32b0      	adds	r2, #176	@ 0xb0
 8016762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016766:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016768:	697b      	ldr	r3, [r7, #20]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d101      	bne.n	8016772 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801676e:	2303      	movs	r3, #3
 8016770:	e008      	b.n	8016784 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8016772:	697b      	ldr	r3, [r7, #20]
 8016774:	68ba      	ldr	r2, [r7, #8]
 8016776:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801677a:	697b      	ldr	r3, [r7, #20]
 801677c:	687a      	ldr	r2, [r7, #4]
 801677e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8016782:	2300      	movs	r3, #0
}
 8016784:	4618      	mov	r0, r3
 8016786:	371c      	adds	r7, #28
 8016788:	46bd      	mov	sp, r7
 801678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801678e:	4770      	bx	lr

08016790 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016790:	b480      	push	{r7}
 8016792:	b085      	sub	sp, #20
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	32b0      	adds	r2, #176	@ 0xb0
 80167a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d101      	bne.n	80167b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80167b0:	2303      	movs	r3, #3
 80167b2:	e004      	b.n	80167be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	683a      	ldr	r2, [r7, #0]
 80167b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80167bc:	2300      	movs	r3, #0
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3714      	adds	r7, #20
 80167c2:	46bd      	mov	sp, r7
 80167c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c8:	4770      	bx	lr
	...

080167cc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b084      	sub	sp, #16
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	32b0      	adds	r2, #176	@ 0xb0
 80167de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167e2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80167e4:	2301      	movs	r3, #1
 80167e6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80167e8:	68bb      	ldr	r3, [r7, #8]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d101      	bne.n	80167f2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80167ee:	2303      	movs	r3, #3
 80167f0:	e025      	b.n	801683e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80167f2:	68bb      	ldr	r3, [r7, #8]
 80167f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d11f      	bne.n	801683c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80167fc:	68bb      	ldr	r3, [r7, #8]
 80167fe:	2201      	movs	r2, #1
 8016800:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8016804:	4b10      	ldr	r3, [pc, #64]	@ (8016848 <USBD_CDC_TransmitPacket+0x7c>)
 8016806:	781b      	ldrb	r3, [r3, #0]
 8016808:	f003 020f 	and.w	r2, r3, #15
 801680c:	68bb      	ldr	r3, [r7, #8]
 801680e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	4613      	mov	r3, r2
 8016816:	009b      	lsls	r3, r3, #2
 8016818:	4413      	add	r3, r2
 801681a:	009b      	lsls	r3, r3, #2
 801681c:	4403      	add	r3, r0
 801681e:	3318      	adds	r3, #24
 8016820:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8016822:	4b09      	ldr	r3, [pc, #36]	@ (8016848 <USBD_CDC_TransmitPacket+0x7c>)
 8016824:	7819      	ldrb	r1, [r3, #0]
 8016826:	68bb      	ldr	r3, [r7, #8]
 8016828:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801682c:	68bb      	ldr	r3, [r7, #8]
 801682e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8016832:	6878      	ldr	r0, [r7, #4]
 8016834:	f001 ffef 	bl	8018816 <USBD_LL_Transmit>

    ret = USBD_OK;
 8016838:	2300      	movs	r3, #0
 801683a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801683c:	7bfb      	ldrb	r3, [r7, #15]
}
 801683e:	4618      	mov	r0, r3
 8016840:	3710      	adds	r7, #16
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}
 8016846:	bf00      	nop
 8016848:	240000c7 	.word	0x240000c7

0801684c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b084      	sub	sp, #16
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	32b0      	adds	r2, #176	@ 0xb0
 801685e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016862:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	32b0      	adds	r2, #176	@ 0xb0
 801686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d101      	bne.n	801687a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8016876:	2303      	movs	r3, #3
 8016878:	e018      	b.n	80168ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	7c1b      	ldrb	r3, [r3, #16]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d10a      	bne.n	8016898 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016882:	4b0c      	ldr	r3, [pc, #48]	@ (80168b4 <USBD_CDC_ReceivePacket+0x68>)
 8016884:	7819      	ldrb	r1, [r3, #0]
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801688c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016890:	6878      	ldr	r0, [r7, #4]
 8016892:	f001 ffe1 	bl	8018858 <USBD_LL_PrepareReceive>
 8016896:	e008      	b.n	80168aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016898:	4b06      	ldr	r3, [pc, #24]	@ (80168b4 <USBD_CDC_ReceivePacket+0x68>)
 801689a:	7819      	ldrb	r1, [r3, #0]
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80168a2:	2340      	movs	r3, #64	@ 0x40
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f001 ffd7 	bl	8018858 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80168aa:	2300      	movs	r3, #0
}
 80168ac:	4618      	mov	r0, r3
 80168ae:	3710      	adds	r7, #16
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}
 80168b4:	240000c8 	.word	0x240000c8

080168b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b086      	sub	sp, #24
 80168bc:	af00      	add	r7, sp, #0
 80168be:	60f8      	str	r0, [r7, #12]
 80168c0:	60b9      	str	r1, [r7, #8]
 80168c2:	4613      	mov	r3, r2
 80168c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d101      	bne.n	80168d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80168cc:	2303      	movs	r3, #3
 80168ce:	e01f      	b.n	8016910 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	2200      	movs	r2, #0
 80168d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	2200      	movs	r2, #0
 80168dc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	2200      	movs	r2, #0
 80168e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80168e8:	68bb      	ldr	r3, [r7, #8]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d003      	beq.n	80168f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	68ba      	ldr	r2, [r7, #8]
 80168f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	2201      	movs	r2, #1
 80168fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	79fa      	ldrb	r2, [r7, #7]
 8016902:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016904:	68f8      	ldr	r0, [r7, #12]
 8016906:	f001 fe4b 	bl	80185a0 <USBD_LL_Init>
 801690a:	4603      	mov	r3, r0
 801690c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801690e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016910:	4618      	mov	r0, r3
 8016912:	3718      	adds	r7, #24
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}

08016918 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b084      	sub	sp, #16
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016922:	2300      	movs	r3, #0
 8016924:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016926:	683b      	ldr	r3, [r7, #0]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d101      	bne.n	8016930 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801692c:	2303      	movs	r3, #3
 801692e:	e025      	b.n	801697c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	683a      	ldr	r2, [r7, #0]
 8016934:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	32ae      	adds	r2, #174	@ 0xae
 8016942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016948:	2b00      	cmp	r3, #0
 801694a:	d00f      	beq.n	801696c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	32ae      	adds	r2, #174	@ 0xae
 8016956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801695a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801695c:	f107 020e 	add.w	r2, r7, #14
 8016960:	4610      	mov	r0, r2
 8016962:	4798      	blx	r3
 8016964:	4602      	mov	r2, r0
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016972:	1c5a      	adds	r2, r3, #1
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801697a:	2300      	movs	r3, #0
}
 801697c:	4618      	mov	r0, r3
 801697e:	3710      	adds	r7, #16
 8016980:	46bd      	mov	sp, r7
 8016982:	bd80      	pop	{r7, pc}

08016984 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b082      	sub	sp, #8
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801698c:	6878      	ldr	r0, [r7, #4]
 801698e:	f001 fe59 	bl	8018644 <USBD_LL_Start>
 8016992:	4603      	mov	r3, r0
}
 8016994:	4618      	mov	r0, r3
 8016996:	3708      	adds	r7, #8
 8016998:	46bd      	mov	sp, r7
 801699a:	bd80      	pop	{r7, pc}

0801699c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801699c:	b480      	push	{r7}
 801699e:	b083      	sub	sp, #12
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80169a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	370c      	adds	r7, #12
 80169aa:	46bd      	mov	sp, r7
 80169ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b0:	4770      	bx	lr

080169b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80169b2:	b580      	push	{r7, lr}
 80169b4:	b084      	sub	sp, #16
 80169b6:	af00      	add	r7, sp, #0
 80169b8:	6078      	str	r0, [r7, #4]
 80169ba:	460b      	mov	r3, r1
 80169bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80169be:	2300      	movs	r3, #0
 80169c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d009      	beq.n	80169e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	78fa      	ldrb	r2, [r7, #3]
 80169d6:	4611      	mov	r1, r2
 80169d8:	6878      	ldr	r0, [r7, #4]
 80169da:	4798      	blx	r3
 80169dc:	4603      	mov	r3, r0
 80169de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80169e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80169e2:	4618      	mov	r0, r3
 80169e4:	3710      	adds	r7, #16
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd80      	pop	{r7, pc}

080169ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80169ea:	b580      	push	{r7, lr}
 80169ec:	b084      	sub	sp, #16
 80169ee:	af00      	add	r7, sp, #0
 80169f0:	6078      	str	r0, [r7, #4]
 80169f2:	460b      	mov	r3, r1
 80169f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80169f6:	2300      	movs	r3, #0
 80169f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a00:	685b      	ldr	r3, [r3, #4]
 8016a02:	78fa      	ldrb	r2, [r7, #3]
 8016a04:	4611      	mov	r1, r2
 8016a06:	6878      	ldr	r0, [r7, #4]
 8016a08:	4798      	blx	r3
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d001      	beq.n	8016a14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016a10:	2303      	movs	r3, #3
 8016a12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a16:	4618      	mov	r0, r3
 8016a18:	3710      	adds	r7, #16
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	bd80      	pop	{r7, pc}

08016a1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016a1e:	b580      	push	{r7, lr}
 8016a20:	b084      	sub	sp, #16
 8016a22:	af00      	add	r7, sp, #0
 8016a24:	6078      	str	r0, [r7, #4]
 8016a26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016a2e:	6839      	ldr	r1, [r7, #0]
 8016a30:	4618      	mov	r0, r3
 8016a32:	f001 f936 	bl	8017ca2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	2201      	movs	r2, #1
 8016a3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016a44:	461a      	mov	r2, r3
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016a52:	f003 031f 	and.w	r3, r3, #31
 8016a56:	2b02      	cmp	r3, #2
 8016a58:	d01a      	beq.n	8016a90 <USBD_LL_SetupStage+0x72>
 8016a5a:	2b02      	cmp	r3, #2
 8016a5c:	d822      	bhi.n	8016aa4 <USBD_LL_SetupStage+0x86>
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d002      	beq.n	8016a68 <USBD_LL_SetupStage+0x4a>
 8016a62:	2b01      	cmp	r3, #1
 8016a64:	d00a      	beq.n	8016a7c <USBD_LL_SetupStage+0x5e>
 8016a66:	e01d      	b.n	8016aa4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016a6e:	4619      	mov	r1, r3
 8016a70:	6878      	ldr	r0, [r7, #4]
 8016a72:	f000 fb63 	bl	801713c <USBD_StdDevReq>
 8016a76:	4603      	mov	r3, r0
 8016a78:	73fb      	strb	r3, [r7, #15]
      break;
 8016a7a:	e020      	b.n	8016abe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016a82:	4619      	mov	r1, r3
 8016a84:	6878      	ldr	r0, [r7, #4]
 8016a86:	f000 fbcb 	bl	8017220 <USBD_StdItfReq>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8016a8e:	e016      	b.n	8016abe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016a96:	4619      	mov	r1, r3
 8016a98:	6878      	ldr	r0, [r7, #4]
 8016a9a:	f000 fc2d 	bl	80172f8 <USBD_StdEPReq>
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8016aa2:	e00c      	b.n	8016abe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016aaa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8016aae:	b2db      	uxtb	r3, r3
 8016ab0:	4619      	mov	r1, r3
 8016ab2:	6878      	ldr	r0, [r7, #4]
 8016ab4:	f001 fe26 	bl	8018704 <USBD_LL_StallEP>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	73fb      	strb	r3, [r7, #15]
      break;
 8016abc:	bf00      	nop
  }

  return ret;
 8016abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	3710      	adds	r7, #16
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}

08016ac8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b086      	sub	sp, #24
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	60f8      	str	r0, [r7, #12]
 8016ad0:	460b      	mov	r3, r1
 8016ad2:	607a      	str	r2, [r7, #4]
 8016ad4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016ada:	7afb      	ldrb	r3, [r7, #11]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d16e      	bne.n	8016bbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016ae6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016aee:	2b03      	cmp	r3, #3
 8016af0:	f040 8098 	bne.w	8016c24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	689a      	ldr	r2, [r3, #8]
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	68db      	ldr	r3, [r3, #12]
 8016afc:	429a      	cmp	r2, r3
 8016afe:	d913      	bls.n	8016b28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016b00:	693b      	ldr	r3, [r7, #16]
 8016b02:	689a      	ldr	r2, [r3, #8]
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	68db      	ldr	r3, [r3, #12]
 8016b08:	1ad2      	subs	r2, r2, r3
 8016b0a:	693b      	ldr	r3, [r7, #16]
 8016b0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	68da      	ldr	r2, [r3, #12]
 8016b12:	693b      	ldr	r3, [r7, #16]
 8016b14:	689b      	ldr	r3, [r3, #8]
 8016b16:	4293      	cmp	r3, r2
 8016b18:	bf28      	it	cs
 8016b1a:	4613      	movcs	r3, r2
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	6879      	ldr	r1, [r7, #4]
 8016b20:	68f8      	ldr	r0, [r7, #12]
 8016b22:	f001 f9be 	bl	8017ea2 <USBD_CtlContinueRx>
 8016b26:	e07d      	b.n	8016c24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016b2e:	f003 031f 	and.w	r3, r3, #31
 8016b32:	2b02      	cmp	r3, #2
 8016b34:	d014      	beq.n	8016b60 <USBD_LL_DataOutStage+0x98>
 8016b36:	2b02      	cmp	r3, #2
 8016b38:	d81d      	bhi.n	8016b76 <USBD_LL_DataOutStage+0xae>
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d002      	beq.n	8016b44 <USBD_LL_DataOutStage+0x7c>
 8016b3e:	2b01      	cmp	r3, #1
 8016b40:	d003      	beq.n	8016b4a <USBD_LL_DataOutStage+0x82>
 8016b42:	e018      	b.n	8016b76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016b44:	2300      	movs	r3, #0
 8016b46:	75bb      	strb	r3, [r7, #22]
            break;
 8016b48:	e018      	b.n	8016b7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016b50:	b2db      	uxtb	r3, r3
 8016b52:	4619      	mov	r1, r3
 8016b54:	68f8      	ldr	r0, [r7, #12]
 8016b56:	f000 fa64 	bl	8017022 <USBD_CoreFindIF>
 8016b5a:	4603      	mov	r3, r0
 8016b5c:	75bb      	strb	r3, [r7, #22]
            break;
 8016b5e:	e00d      	b.n	8016b7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016b66:	b2db      	uxtb	r3, r3
 8016b68:	4619      	mov	r1, r3
 8016b6a:	68f8      	ldr	r0, [r7, #12]
 8016b6c:	f000 fa66 	bl	801703c <USBD_CoreFindEP>
 8016b70:	4603      	mov	r3, r0
 8016b72:	75bb      	strb	r3, [r7, #22]
            break;
 8016b74:	e002      	b.n	8016b7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016b76:	2300      	movs	r3, #0
 8016b78:	75bb      	strb	r3, [r7, #22]
            break;
 8016b7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016b7c:	7dbb      	ldrb	r3, [r7, #22]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d119      	bne.n	8016bb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b88:	b2db      	uxtb	r3, r3
 8016b8a:	2b03      	cmp	r3, #3
 8016b8c:	d113      	bne.n	8016bb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016b8e:	7dba      	ldrb	r2, [r7, #22]
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	32ae      	adds	r2, #174	@ 0xae
 8016b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b98:	691b      	ldr	r3, [r3, #16]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d00b      	beq.n	8016bb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8016b9e:	7dba      	ldrb	r2, [r7, #22]
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016ba6:	7dba      	ldrb	r2, [r7, #22]
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	32ae      	adds	r2, #174	@ 0xae
 8016bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bb0:	691b      	ldr	r3, [r3, #16]
 8016bb2:	68f8      	ldr	r0, [r7, #12]
 8016bb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016bb6:	68f8      	ldr	r0, [r7, #12]
 8016bb8:	f001 f984 	bl	8017ec4 <USBD_CtlSendStatus>
 8016bbc:	e032      	b.n	8016c24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016bbe:	7afb      	ldrb	r3, [r7, #11]
 8016bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016bc4:	b2db      	uxtb	r3, r3
 8016bc6:	4619      	mov	r1, r3
 8016bc8:	68f8      	ldr	r0, [r7, #12]
 8016bca:	f000 fa37 	bl	801703c <USBD_CoreFindEP>
 8016bce:	4603      	mov	r3, r0
 8016bd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016bd2:	7dbb      	ldrb	r3, [r7, #22]
 8016bd4:	2bff      	cmp	r3, #255	@ 0xff
 8016bd6:	d025      	beq.n	8016c24 <USBD_LL_DataOutStage+0x15c>
 8016bd8:	7dbb      	ldrb	r3, [r7, #22]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d122      	bne.n	8016c24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016be4:	b2db      	uxtb	r3, r3
 8016be6:	2b03      	cmp	r3, #3
 8016be8:	d117      	bne.n	8016c1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016bea:	7dba      	ldrb	r2, [r7, #22]
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	32ae      	adds	r2, #174	@ 0xae
 8016bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bf4:	699b      	ldr	r3, [r3, #24]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d00f      	beq.n	8016c1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016bfa:	7dba      	ldrb	r2, [r7, #22]
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016c02:	7dba      	ldrb	r2, [r7, #22]
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	32ae      	adds	r2, #174	@ 0xae
 8016c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c0c:	699b      	ldr	r3, [r3, #24]
 8016c0e:	7afa      	ldrb	r2, [r7, #11]
 8016c10:	4611      	mov	r1, r2
 8016c12:	68f8      	ldr	r0, [r7, #12]
 8016c14:	4798      	blx	r3
 8016c16:	4603      	mov	r3, r0
 8016c18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016c1a:	7dfb      	ldrb	r3, [r7, #23]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d001      	beq.n	8016c24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016c20:	7dfb      	ldrb	r3, [r7, #23]
 8016c22:	e000      	b.n	8016c26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016c24:	2300      	movs	r3, #0
}
 8016c26:	4618      	mov	r0, r3
 8016c28:	3718      	adds	r7, #24
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	bd80      	pop	{r7, pc}

08016c2e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016c2e:	b580      	push	{r7, lr}
 8016c30:	b086      	sub	sp, #24
 8016c32:	af00      	add	r7, sp, #0
 8016c34:	60f8      	str	r0, [r7, #12]
 8016c36:	460b      	mov	r3, r1
 8016c38:	607a      	str	r2, [r7, #4]
 8016c3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016c3c:	7afb      	ldrb	r3, [r7, #11]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d16f      	bne.n	8016d22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	3314      	adds	r3, #20
 8016c46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016c4e:	2b02      	cmp	r3, #2
 8016c50:	d15a      	bne.n	8016d08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016c52:	693b      	ldr	r3, [r7, #16]
 8016c54:	689a      	ldr	r2, [r3, #8]
 8016c56:	693b      	ldr	r3, [r7, #16]
 8016c58:	68db      	ldr	r3, [r3, #12]
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d914      	bls.n	8016c88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	689a      	ldr	r2, [r3, #8]
 8016c62:	693b      	ldr	r3, [r7, #16]
 8016c64:	68db      	ldr	r3, [r3, #12]
 8016c66:	1ad2      	subs	r2, r2, r3
 8016c68:	693b      	ldr	r3, [r7, #16]
 8016c6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016c6c:	693b      	ldr	r3, [r7, #16]
 8016c6e:	689b      	ldr	r3, [r3, #8]
 8016c70:	461a      	mov	r2, r3
 8016c72:	6879      	ldr	r1, [r7, #4]
 8016c74:	68f8      	ldr	r0, [r7, #12]
 8016c76:	f001 f8e6 	bl	8017e46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	2100      	movs	r1, #0
 8016c80:	68f8      	ldr	r0, [r7, #12]
 8016c82:	f001 fde9 	bl	8018858 <USBD_LL_PrepareReceive>
 8016c86:	e03f      	b.n	8016d08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016c88:	693b      	ldr	r3, [r7, #16]
 8016c8a:	68da      	ldr	r2, [r3, #12]
 8016c8c:	693b      	ldr	r3, [r7, #16]
 8016c8e:	689b      	ldr	r3, [r3, #8]
 8016c90:	429a      	cmp	r2, r3
 8016c92:	d11c      	bne.n	8016cce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016c94:	693b      	ldr	r3, [r7, #16]
 8016c96:	685a      	ldr	r2, [r3, #4]
 8016c98:	693b      	ldr	r3, [r7, #16]
 8016c9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d316      	bcc.n	8016cce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016ca0:	693b      	ldr	r3, [r7, #16]
 8016ca2:	685a      	ldr	r2, [r3, #4]
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016caa:	429a      	cmp	r2, r3
 8016cac:	d20f      	bcs.n	8016cce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016cae:	2200      	movs	r2, #0
 8016cb0:	2100      	movs	r1, #0
 8016cb2:	68f8      	ldr	r0, [r7, #12]
 8016cb4:	f001 f8c7 	bl	8017e46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	2200      	movs	r2, #0
 8016cbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	2100      	movs	r1, #0
 8016cc6:	68f8      	ldr	r0, [r7, #12]
 8016cc8:	f001 fdc6 	bl	8018858 <USBD_LL_PrepareReceive>
 8016ccc:	e01c      	b.n	8016d08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016cd4:	b2db      	uxtb	r3, r3
 8016cd6:	2b03      	cmp	r3, #3
 8016cd8:	d10f      	bne.n	8016cfa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016ce0:	68db      	ldr	r3, [r3, #12]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d009      	beq.n	8016cfa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	2200      	movs	r2, #0
 8016cea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016cf4:	68db      	ldr	r3, [r3, #12]
 8016cf6:	68f8      	ldr	r0, [r7, #12]
 8016cf8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016cfa:	2180      	movs	r1, #128	@ 0x80
 8016cfc:	68f8      	ldr	r0, [r7, #12]
 8016cfe:	f001 fd01 	bl	8018704 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016d02:	68f8      	ldr	r0, [r7, #12]
 8016d04:	f001 f8f1 	bl	8017eea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d03a      	beq.n	8016d88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016d12:	68f8      	ldr	r0, [r7, #12]
 8016d14:	f7ff fe42 	bl	801699c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8016d20:	e032      	b.n	8016d88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016d22:	7afb      	ldrb	r3, [r7, #11]
 8016d24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016d28:	b2db      	uxtb	r3, r3
 8016d2a:	4619      	mov	r1, r3
 8016d2c:	68f8      	ldr	r0, [r7, #12]
 8016d2e:	f000 f985 	bl	801703c <USBD_CoreFindEP>
 8016d32:	4603      	mov	r3, r0
 8016d34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016d36:	7dfb      	ldrb	r3, [r7, #23]
 8016d38:	2bff      	cmp	r3, #255	@ 0xff
 8016d3a:	d025      	beq.n	8016d88 <USBD_LL_DataInStage+0x15a>
 8016d3c:	7dfb      	ldrb	r3, [r7, #23]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d122      	bne.n	8016d88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d48:	b2db      	uxtb	r3, r3
 8016d4a:	2b03      	cmp	r3, #3
 8016d4c:	d11c      	bne.n	8016d88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016d4e:	7dfa      	ldrb	r2, [r7, #23]
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	32ae      	adds	r2, #174	@ 0xae
 8016d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d58:	695b      	ldr	r3, [r3, #20]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d014      	beq.n	8016d88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016d5e:	7dfa      	ldrb	r2, [r7, #23]
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016d66:	7dfa      	ldrb	r2, [r7, #23]
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	32ae      	adds	r2, #174	@ 0xae
 8016d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d70:	695b      	ldr	r3, [r3, #20]
 8016d72:	7afa      	ldrb	r2, [r7, #11]
 8016d74:	4611      	mov	r1, r2
 8016d76:	68f8      	ldr	r0, [r7, #12]
 8016d78:	4798      	blx	r3
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016d7e:	7dbb      	ldrb	r3, [r7, #22]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d001      	beq.n	8016d88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016d84:	7dbb      	ldrb	r3, [r7, #22]
 8016d86:	e000      	b.n	8016d8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016d88:	2300      	movs	r3, #0
}
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	3718      	adds	r7, #24
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}

08016d92 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016d92:	b580      	push	{r7, lr}
 8016d94:	b084      	sub	sp, #16
 8016d96:	af00      	add	r7, sp, #0
 8016d98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	2201      	movs	r2, #1
 8016da2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	2200      	movs	r2, #0
 8016daa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	2200      	movs	r2, #0
 8016db2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	2200      	movs	r2, #0
 8016db8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d014      	beq.n	8016df8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016dd4:	685b      	ldr	r3, [r3, #4]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d00e      	beq.n	8016df8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016de0:	685b      	ldr	r3, [r3, #4]
 8016de2:	687a      	ldr	r2, [r7, #4]
 8016de4:	6852      	ldr	r2, [r2, #4]
 8016de6:	b2d2      	uxtb	r2, r2
 8016de8:	4611      	mov	r1, r2
 8016dea:	6878      	ldr	r0, [r7, #4]
 8016dec:	4798      	blx	r3
 8016dee:	4603      	mov	r3, r0
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d001      	beq.n	8016df8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016df4:	2303      	movs	r3, #3
 8016df6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016df8:	2340      	movs	r3, #64	@ 0x40
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	2100      	movs	r1, #0
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	f001 fc3b 	bl	801867a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	2201      	movs	r2, #1
 8016e08:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	2240      	movs	r2, #64	@ 0x40
 8016e10:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016e14:	2340      	movs	r3, #64	@ 0x40
 8016e16:	2200      	movs	r2, #0
 8016e18:	2180      	movs	r1, #128	@ 0x80
 8016e1a:	6878      	ldr	r0, [r7, #4]
 8016e1c:	f001 fc2d 	bl	801867a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	2201      	movs	r2, #1
 8016e24:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	2240      	movs	r2, #64	@ 0x40
 8016e2a:	621a      	str	r2, [r3, #32]

  return ret;
 8016e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e2e:	4618      	mov	r0, r3
 8016e30:	3710      	adds	r7, #16
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}

08016e36 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016e36:	b480      	push	{r7}
 8016e38:	b083      	sub	sp, #12
 8016e3a:	af00      	add	r7, sp, #0
 8016e3c:	6078      	str	r0, [r7, #4]
 8016e3e:	460b      	mov	r3, r1
 8016e40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	78fa      	ldrb	r2, [r7, #3]
 8016e46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016e48:	2300      	movs	r3, #0
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	370c      	adds	r7, #12
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e54:	4770      	bx	lr

08016e56 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016e56:	b480      	push	{r7}
 8016e58:	b083      	sub	sp, #12
 8016e5a:	af00      	add	r7, sp, #0
 8016e5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016e64:	b2db      	uxtb	r3, r3
 8016e66:	2b04      	cmp	r3, #4
 8016e68:	d006      	beq.n	8016e78 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016e70:	b2da      	uxtb	r2, r3
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	2204      	movs	r2, #4
 8016e7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016e80:	2300      	movs	r3, #0
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	370c      	adds	r7, #12
 8016e86:	46bd      	mov	sp, r7
 8016e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8c:	4770      	bx	lr

08016e8e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016e8e:	b480      	push	{r7}
 8016e90:	b083      	sub	sp, #12
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016e9c:	b2db      	uxtb	r3, r3
 8016e9e:	2b04      	cmp	r3, #4
 8016ea0:	d106      	bne.n	8016eb0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016ea8:	b2da      	uxtb	r2, r3
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016eb0:	2300      	movs	r3, #0
}
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	370c      	adds	r7, #12
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ebc:	4770      	bx	lr

08016ebe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016ebe:	b580      	push	{r7, lr}
 8016ec0:	b082      	sub	sp, #8
 8016ec2:	af00      	add	r7, sp, #0
 8016ec4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ecc:	b2db      	uxtb	r3, r3
 8016ece:	2b03      	cmp	r3, #3
 8016ed0:	d110      	bne.n	8016ef4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d00b      	beq.n	8016ef4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016ee2:	69db      	ldr	r3, [r3, #28]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d005      	beq.n	8016ef4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016eee:	69db      	ldr	r3, [r3, #28]
 8016ef0:	6878      	ldr	r0, [r7, #4]
 8016ef2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016ef4:	2300      	movs	r3, #0
}
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	3708      	adds	r7, #8
 8016efa:	46bd      	mov	sp, r7
 8016efc:	bd80      	pop	{r7, pc}

08016efe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016efe:	b580      	push	{r7, lr}
 8016f00:	b082      	sub	sp, #8
 8016f02:	af00      	add	r7, sp, #0
 8016f04:	6078      	str	r0, [r7, #4]
 8016f06:	460b      	mov	r3, r1
 8016f08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	32ae      	adds	r2, #174	@ 0xae
 8016f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d101      	bne.n	8016f20 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016f1c:	2303      	movs	r3, #3
 8016f1e:	e01c      	b.n	8016f5a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f26:	b2db      	uxtb	r3, r3
 8016f28:	2b03      	cmp	r3, #3
 8016f2a:	d115      	bne.n	8016f58 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	32ae      	adds	r2, #174	@ 0xae
 8016f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f3a:	6a1b      	ldr	r3, [r3, #32]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d00b      	beq.n	8016f58 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	32ae      	adds	r2, #174	@ 0xae
 8016f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f4e:	6a1b      	ldr	r3, [r3, #32]
 8016f50:	78fa      	ldrb	r2, [r7, #3]
 8016f52:	4611      	mov	r1, r2
 8016f54:	6878      	ldr	r0, [r7, #4]
 8016f56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016f58:	2300      	movs	r3, #0
}
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	3708      	adds	r7, #8
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	bd80      	pop	{r7, pc}

08016f62 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016f62:	b580      	push	{r7, lr}
 8016f64:	b082      	sub	sp, #8
 8016f66:	af00      	add	r7, sp, #0
 8016f68:	6078      	str	r0, [r7, #4]
 8016f6a:	460b      	mov	r3, r1
 8016f6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	32ae      	adds	r2, #174	@ 0xae
 8016f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d101      	bne.n	8016f84 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016f80:	2303      	movs	r3, #3
 8016f82:	e01c      	b.n	8016fbe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f8a:	b2db      	uxtb	r3, r3
 8016f8c:	2b03      	cmp	r3, #3
 8016f8e:	d115      	bne.n	8016fbc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	32ae      	adds	r2, #174	@ 0xae
 8016f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d00b      	beq.n	8016fbc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	32ae      	adds	r2, #174	@ 0xae
 8016fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fb4:	78fa      	ldrb	r2, [r7, #3]
 8016fb6:	4611      	mov	r1, r2
 8016fb8:	6878      	ldr	r0, [r7, #4]
 8016fba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016fbc:	2300      	movs	r3, #0
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	3708      	adds	r7, #8
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	bd80      	pop	{r7, pc}

08016fc6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016fc6:	b480      	push	{r7}
 8016fc8:	b083      	sub	sp, #12
 8016fca:	af00      	add	r7, sp, #0
 8016fcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016fce:	2300      	movs	r3, #0
}
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	370c      	adds	r7, #12
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fda:	4770      	bx	lr

08016fdc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b084      	sub	sp, #16
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	2201      	movs	r2, #1
 8016fec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d00e      	beq.n	8017018 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017000:	685b      	ldr	r3, [r3, #4]
 8017002:	687a      	ldr	r2, [r7, #4]
 8017004:	6852      	ldr	r2, [r2, #4]
 8017006:	b2d2      	uxtb	r2, r2
 8017008:	4611      	mov	r1, r2
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	4798      	blx	r3
 801700e:	4603      	mov	r3, r0
 8017010:	2b00      	cmp	r3, #0
 8017012:	d001      	beq.n	8017018 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8017014:	2303      	movs	r3, #3
 8017016:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017018:	7bfb      	ldrb	r3, [r7, #15]
}
 801701a:	4618      	mov	r0, r3
 801701c:	3710      	adds	r7, #16
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}

08017022 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8017022:	b480      	push	{r7}
 8017024:	b083      	sub	sp, #12
 8017026:	af00      	add	r7, sp, #0
 8017028:	6078      	str	r0, [r7, #4]
 801702a:	460b      	mov	r3, r1
 801702c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801702e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8017030:	4618      	mov	r0, r3
 8017032:	370c      	adds	r7, #12
 8017034:	46bd      	mov	sp, r7
 8017036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703a:	4770      	bx	lr

0801703c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801703c:	b480      	push	{r7}
 801703e:	b083      	sub	sp, #12
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
 8017044:	460b      	mov	r3, r1
 8017046:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8017048:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801704a:	4618      	mov	r0, r3
 801704c:	370c      	adds	r7, #12
 801704e:	46bd      	mov	sp, r7
 8017050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017054:	4770      	bx	lr

08017056 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8017056:	b580      	push	{r7, lr}
 8017058:	b086      	sub	sp, #24
 801705a:	af00      	add	r7, sp, #0
 801705c:	6078      	str	r0, [r7, #4]
 801705e:	460b      	mov	r3, r1
 8017060:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801706a:	2300      	movs	r3, #0
 801706c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	885b      	ldrh	r3, [r3, #2]
 8017072:	b29b      	uxth	r3, r3
 8017074:	68fa      	ldr	r2, [r7, #12]
 8017076:	7812      	ldrb	r2, [r2, #0]
 8017078:	4293      	cmp	r3, r2
 801707a:	d91f      	bls.n	80170bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	781b      	ldrb	r3, [r3, #0]
 8017080:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8017082:	e013      	b.n	80170ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8017084:	f107 030a 	add.w	r3, r7, #10
 8017088:	4619      	mov	r1, r3
 801708a:	6978      	ldr	r0, [r7, #20]
 801708c:	f000 f81b 	bl	80170c6 <USBD_GetNextDesc>
 8017090:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8017092:	697b      	ldr	r3, [r7, #20]
 8017094:	785b      	ldrb	r3, [r3, #1]
 8017096:	2b05      	cmp	r3, #5
 8017098:	d108      	bne.n	80170ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801709a:	697b      	ldr	r3, [r7, #20]
 801709c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801709e:	693b      	ldr	r3, [r7, #16]
 80170a0:	789b      	ldrb	r3, [r3, #2]
 80170a2:	78fa      	ldrb	r2, [r7, #3]
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d008      	beq.n	80170ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80170a8:	2300      	movs	r3, #0
 80170aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	885b      	ldrh	r3, [r3, #2]
 80170b0:	b29a      	uxth	r2, r3
 80170b2:	897b      	ldrh	r3, [r7, #10]
 80170b4:	429a      	cmp	r2, r3
 80170b6:	d8e5      	bhi.n	8017084 <USBD_GetEpDesc+0x2e>
 80170b8:	e000      	b.n	80170bc <USBD_GetEpDesc+0x66>
          break;
 80170ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80170bc:	693b      	ldr	r3, [r7, #16]
}
 80170be:	4618      	mov	r0, r3
 80170c0:	3718      	adds	r7, #24
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}

080170c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80170c6:	b480      	push	{r7}
 80170c8:	b085      	sub	sp, #20
 80170ca:	af00      	add	r7, sp, #0
 80170cc:	6078      	str	r0, [r7, #4]
 80170ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80170d4:	683b      	ldr	r3, [r7, #0]
 80170d6:	881b      	ldrh	r3, [r3, #0]
 80170d8:	68fa      	ldr	r2, [r7, #12]
 80170da:	7812      	ldrb	r2, [r2, #0]
 80170dc:	4413      	add	r3, r2
 80170de:	b29a      	uxth	r2, r3
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	781b      	ldrb	r3, [r3, #0]
 80170e8:	461a      	mov	r2, r3
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	4413      	add	r3, r2
 80170ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80170f0:	68fb      	ldr	r3, [r7, #12]
}
 80170f2:	4618      	mov	r0, r3
 80170f4:	3714      	adds	r7, #20
 80170f6:	46bd      	mov	sp, r7
 80170f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fc:	4770      	bx	lr

080170fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80170fe:	b480      	push	{r7}
 8017100:	b087      	sub	sp, #28
 8017102:	af00      	add	r7, sp, #0
 8017104:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801710a:	697b      	ldr	r3, [r7, #20]
 801710c:	781b      	ldrb	r3, [r3, #0]
 801710e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017110:	697b      	ldr	r3, [r7, #20]
 8017112:	3301      	adds	r3, #1
 8017114:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017116:	697b      	ldr	r3, [r7, #20]
 8017118:	781b      	ldrb	r3, [r3, #0]
 801711a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801711c:	8a3b      	ldrh	r3, [r7, #16]
 801711e:	021b      	lsls	r3, r3, #8
 8017120:	b21a      	sxth	r2, r3
 8017122:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017126:	4313      	orrs	r3, r2
 8017128:	b21b      	sxth	r3, r3
 801712a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801712c:	89fb      	ldrh	r3, [r7, #14]
}
 801712e:	4618      	mov	r0, r3
 8017130:	371c      	adds	r7, #28
 8017132:	46bd      	mov	sp, r7
 8017134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017138:	4770      	bx	lr
	...

0801713c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b084      	sub	sp, #16
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017146:	2300      	movs	r3, #0
 8017148:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801714a:	683b      	ldr	r3, [r7, #0]
 801714c:	781b      	ldrb	r3, [r3, #0]
 801714e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017152:	2b40      	cmp	r3, #64	@ 0x40
 8017154:	d005      	beq.n	8017162 <USBD_StdDevReq+0x26>
 8017156:	2b40      	cmp	r3, #64	@ 0x40
 8017158:	d857      	bhi.n	801720a <USBD_StdDevReq+0xce>
 801715a:	2b00      	cmp	r3, #0
 801715c:	d00f      	beq.n	801717e <USBD_StdDevReq+0x42>
 801715e:	2b20      	cmp	r3, #32
 8017160:	d153      	bne.n	801720a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	32ae      	adds	r2, #174	@ 0xae
 801716c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017170:	689b      	ldr	r3, [r3, #8]
 8017172:	6839      	ldr	r1, [r7, #0]
 8017174:	6878      	ldr	r0, [r7, #4]
 8017176:	4798      	blx	r3
 8017178:	4603      	mov	r3, r0
 801717a:	73fb      	strb	r3, [r7, #15]
      break;
 801717c:	e04a      	b.n	8017214 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801717e:	683b      	ldr	r3, [r7, #0]
 8017180:	785b      	ldrb	r3, [r3, #1]
 8017182:	2b09      	cmp	r3, #9
 8017184:	d83b      	bhi.n	80171fe <USBD_StdDevReq+0xc2>
 8017186:	a201      	add	r2, pc, #4	@ (adr r2, 801718c <USBD_StdDevReq+0x50>)
 8017188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801718c:	080171e1 	.word	0x080171e1
 8017190:	080171f5 	.word	0x080171f5
 8017194:	080171ff 	.word	0x080171ff
 8017198:	080171eb 	.word	0x080171eb
 801719c:	080171ff 	.word	0x080171ff
 80171a0:	080171bf 	.word	0x080171bf
 80171a4:	080171b5 	.word	0x080171b5
 80171a8:	080171ff 	.word	0x080171ff
 80171ac:	080171d7 	.word	0x080171d7
 80171b0:	080171c9 	.word	0x080171c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80171b4:	6839      	ldr	r1, [r7, #0]
 80171b6:	6878      	ldr	r0, [r7, #4]
 80171b8:	f000 fa3c 	bl	8017634 <USBD_GetDescriptor>
          break;
 80171bc:	e024      	b.n	8017208 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80171be:	6839      	ldr	r1, [r7, #0]
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f000 fbcb 	bl	801795c <USBD_SetAddress>
          break;
 80171c6:	e01f      	b.n	8017208 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80171c8:	6839      	ldr	r1, [r7, #0]
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f000 fc0a 	bl	80179e4 <USBD_SetConfig>
 80171d0:	4603      	mov	r3, r0
 80171d2:	73fb      	strb	r3, [r7, #15]
          break;
 80171d4:	e018      	b.n	8017208 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80171d6:	6839      	ldr	r1, [r7, #0]
 80171d8:	6878      	ldr	r0, [r7, #4]
 80171da:	f000 fcad 	bl	8017b38 <USBD_GetConfig>
          break;
 80171de:	e013      	b.n	8017208 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80171e0:	6839      	ldr	r1, [r7, #0]
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	f000 fcde 	bl	8017ba4 <USBD_GetStatus>
          break;
 80171e8:	e00e      	b.n	8017208 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80171ea:	6839      	ldr	r1, [r7, #0]
 80171ec:	6878      	ldr	r0, [r7, #4]
 80171ee:	f000 fd0d 	bl	8017c0c <USBD_SetFeature>
          break;
 80171f2:	e009      	b.n	8017208 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80171f4:	6839      	ldr	r1, [r7, #0]
 80171f6:	6878      	ldr	r0, [r7, #4]
 80171f8:	f000 fd31 	bl	8017c5e <USBD_ClrFeature>
          break;
 80171fc:	e004      	b.n	8017208 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80171fe:	6839      	ldr	r1, [r7, #0]
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f000 fd88 	bl	8017d16 <USBD_CtlError>
          break;
 8017206:	bf00      	nop
      }
      break;
 8017208:	e004      	b.n	8017214 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801720a:	6839      	ldr	r1, [r7, #0]
 801720c:	6878      	ldr	r0, [r7, #4]
 801720e:	f000 fd82 	bl	8017d16 <USBD_CtlError>
      break;
 8017212:	bf00      	nop
  }

  return ret;
 8017214:	7bfb      	ldrb	r3, [r7, #15]
}
 8017216:	4618      	mov	r0, r3
 8017218:	3710      	adds	r7, #16
 801721a:	46bd      	mov	sp, r7
 801721c:	bd80      	pop	{r7, pc}
 801721e:	bf00      	nop

08017220 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b084      	sub	sp, #16
 8017224:	af00      	add	r7, sp, #0
 8017226:	6078      	str	r0, [r7, #4]
 8017228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801722a:	2300      	movs	r3, #0
 801722c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801722e:	683b      	ldr	r3, [r7, #0]
 8017230:	781b      	ldrb	r3, [r3, #0]
 8017232:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017236:	2b40      	cmp	r3, #64	@ 0x40
 8017238:	d005      	beq.n	8017246 <USBD_StdItfReq+0x26>
 801723a:	2b40      	cmp	r3, #64	@ 0x40
 801723c:	d852      	bhi.n	80172e4 <USBD_StdItfReq+0xc4>
 801723e:	2b00      	cmp	r3, #0
 8017240:	d001      	beq.n	8017246 <USBD_StdItfReq+0x26>
 8017242:	2b20      	cmp	r3, #32
 8017244:	d14e      	bne.n	80172e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801724c:	b2db      	uxtb	r3, r3
 801724e:	3b01      	subs	r3, #1
 8017250:	2b02      	cmp	r3, #2
 8017252:	d840      	bhi.n	80172d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017254:	683b      	ldr	r3, [r7, #0]
 8017256:	889b      	ldrh	r3, [r3, #4]
 8017258:	b2db      	uxtb	r3, r3
 801725a:	2b01      	cmp	r3, #1
 801725c:	d836      	bhi.n	80172cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	889b      	ldrh	r3, [r3, #4]
 8017262:	b2db      	uxtb	r3, r3
 8017264:	4619      	mov	r1, r3
 8017266:	6878      	ldr	r0, [r7, #4]
 8017268:	f7ff fedb 	bl	8017022 <USBD_CoreFindIF>
 801726c:	4603      	mov	r3, r0
 801726e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017270:	7bbb      	ldrb	r3, [r7, #14]
 8017272:	2bff      	cmp	r3, #255	@ 0xff
 8017274:	d01d      	beq.n	80172b2 <USBD_StdItfReq+0x92>
 8017276:	7bbb      	ldrb	r3, [r7, #14]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d11a      	bne.n	80172b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801727c:	7bba      	ldrb	r2, [r7, #14]
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	32ae      	adds	r2, #174	@ 0xae
 8017282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017286:	689b      	ldr	r3, [r3, #8]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d00f      	beq.n	80172ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801728c:	7bba      	ldrb	r2, [r7, #14]
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017294:	7bba      	ldrb	r2, [r7, #14]
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	32ae      	adds	r2, #174	@ 0xae
 801729a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801729e:	689b      	ldr	r3, [r3, #8]
 80172a0:	6839      	ldr	r1, [r7, #0]
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	4798      	blx	r3
 80172a6:	4603      	mov	r3, r0
 80172a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80172aa:	e004      	b.n	80172b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80172ac:	2303      	movs	r3, #3
 80172ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80172b0:	e001      	b.n	80172b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80172b2:	2303      	movs	r3, #3
 80172b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	88db      	ldrh	r3, [r3, #6]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d110      	bne.n	80172e0 <USBD_StdItfReq+0xc0>
 80172be:	7bfb      	ldrb	r3, [r7, #15]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d10d      	bne.n	80172e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80172c4:	6878      	ldr	r0, [r7, #4]
 80172c6:	f000 fdfd 	bl	8017ec4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80172ca:	e009      	b.n	80172e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80172cc:	6839      	ldr	r1, [r7, #0]
 80172ce:	6878      	ldr	r0, [r7, #4]
 80172d0:	f000 fd21 	bl	8017d16 <USBD_CtlError>
          break;
 80172d4:	e004      	b.n	80172e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80172d6:	6839      	ldr	r1, [r7, #0]
 80172d8:	6878      	ldr	r0, [r7, #4]
 80172da:	f000 fd1c 	bl	8017d16 <USBD_CtlError>
          break;
 80172de:	e000      	b.n	80172e2 <USBD_StdItfReq+0xc2>
          break;
 80172e0:	bf00      	nop
      }
      break;
 80172e2:	e004      	b.n	80172ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80172e4:	6839      	ldr	r1, [r7, #0]
 80172e6:	6878      	ldr	r0, [r7, #4]
 80172e8:	f000 fd15 	bl	8017d16 <USBD_CtlError>
      break;
 80172ec:	bf00      	nop
  }

  return ret;
 80172ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80172f0:	4618      	mov	r0, r3
 80172f2:	3710      	adds	r7, #16
 80172f4:	46bd      	mov	sp, r7
 80172f6:	bd80      	pop	{r7, pc}

080172f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b084      	sub	sp, #16
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	6078      	str	r0, [r7, #4]
 8017300:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8017302:	2300      	movs	r3, #0
 8017304:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8017306:	683b      	ldr	r3, [r7, #0]
 8017308:	889b      	ldrh	r3, [r3, #4]
 801730a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801730c:	683b      	ldr	r3, [r7, #0]
 801730e:	781b      	ldrb	r3, [r3, #0]
 8017310:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017314:	2b40      	cmp	r3, #64	@ 0x40
 8017316:	d007      	beq.n	8017328 <USBD_StdEPReq+0x30>
 8017318:	2b40      	cmp	r3, #64	@ 0x40
 801731a:	f200 817f 	bhi.w	801761c <USBD_StdEPReq+0x324>
 801731e:	2b00      	cmp	r3, #0
 8017320:	d02a      	beq.n	8017378 <USBD_StdEPReq+0x80>
 8017322:	2b20      	cmp	r3, #32
 8017324:	f040 817a 	bne.w	801761c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8017328:	7bbb      	ldrb	r3, [r7, #14]
 801732a:	4619      	mov	r1, r3
 801732c:	6878      	ldr	r0, [r7, #4]
 801732e:	f7ff fe85 	bl	801703c <USBD_CoreFindEP>
 8017332:	4603      	mov	r3, r0
 8017334:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017336:	7b7b      	ldrb	r3, [r7, #13]
 8017338:	2bff      	cmp	r3, #255	@ 0xff
 801733a:	f000 8174 	beq.w	8017626 <USBD_StdEPReq+0x32e>
 801733e:	7b7b      	ldrb	r3, [r7, #13]
 8017340:	2b00      	cmp	r3, #0
 8017342:	f040 8170 	bne.w	8017626 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8017346:	7b7a      	ldrb	r2, [r7, #13]
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801734e:	7b7a      	ldrb	r2, [r7, #13]
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	32ae      	adds	r2, #174	@ 0xae
 8017354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017358:	689b      	ldr	r3, [r3, #8]
 801735a:	2b00      	cmp	r3, #0
 801735c:	f000 8163 	beq.w	8017626 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8017360:	7b7a      	ldrb	r2, [r7, #13]
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	32ae      	adds	r2, #174	@ 0xae
 8017366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801736a:	689b      	ldr	r3, [r3, #8]
 801736c:	6839      	ldr	r1, [r7, #0]
 801736e:	6878      	ldr	r0, [r7, #4]
 8017370:	4798      	blx	r3
 8017372:	4603      	mov	r3, r0
 8017374:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8017376:	e156      	b.n	8017626 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017378:	683b      	ldr	r3, [r7, #0]
 801737a:	785b      	ldrb	r3, [r3, #1]
 801737c:	2b03      	cmp	r3, #3
 801737e:	d008      	beq.n	8017392 <USBD_StdEPReq+0x9a>
 8017380:	2b03      	cmp	r3, #3
 8017382:	f300 8145 	bgt.w	8017610 <USBD_StdEPReq+0x318>
 8017386:	2b00      	cmp	r3, #0
 8017388:	f000 809b 	beq.w	80174c2 <USBD_StdEPReq+0x1ca>
 801738c:	2b01      	cmp	r3, #1
 801738e:	d03c      	beq.n	801740a <USBD_StdEPReq+0x112>
 8017390:	e13e      	b.n	8017610 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017398:	b2db      	uxtb	r3, r3
 801739a:	2b02      	cmp	r3, #2
 801739c:	d002      	beq.n	80173a4 <USBD_StdEPReq+0xac>
 801739e:	2b03      	cmp	r3, #3
 80173a0:	d016      	beq.n	80173d0 <USBD_StdEPReq+0xd8>
 80173a2:	e02c      	b.n	80173fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80173a4:	7bbb      	ldrb	r3, [r7, #14]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d00d      	beq.n	80173c6 <USBD_StdEPReq+0xce>
 80173aa:	7bbb      	ldrb	r3, [r7, #14]
 80173ac:	2b80      	cmp	r3, #128	@ 0x80
 80173ae:	d00a      	beq.n	80173c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80173b0:	7bbb      	ldrb	r3, [r7, #14]
 80173b2:	4619      	mov	r1, r3
 80173b4:	6878      	ldr	r0, [r7, #4]
 80173b6:	f001 f9a5 	bl	8018704 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80173ba:	2180      	movs	r1, #128	@ 0x80
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	f001 f9a1 	bl	8018704 <USBD_LL_StallEP>
 80173c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80173c4:	e020      	b.n	8017408 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80173c6:	6839      	ldr	r1, [r7, #0]
 80173c8:	6878      	ldr	r0, [r7, #4]
 80173ca:	f000 fca4 	bl	8017d16 <USBD_CtlError>
              break;
 80173ce:	e01b      	b.n	8017408 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	885b      	ldrh	r3, [r3, #2]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d10e      	bne.n	80173f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80173d8:	7bbb      	ldrb	r3, [r7, #14]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d00b      	beq.n	80173f6 <USBD_StdEPReq+0xfe>
 80173de:	7bbb      	ldrb	r3, [r7, #14]
 80173e0:	2b80      	cmp	r3, #128	@ 0x80
 80173e2:	d008      	beq.n	80173f6 <USBD_StdEPReq+0xfe>
 80173e4:	683b      	ldr	r3, [r7, #0]
 80173e6:	88db      	ldrh	r3, [r3, #6]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d104      	bne.n	80173f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80173ec:	7bbb      	ldrb	r3, [r7, #14]
 80173ee:	4619      	mov	r1, r3
 80173f0:	6878      	ldr	r0, [r7, #4]
 80173f2:	f001 f987 	bl	8018704 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80173f6:	6878      	ldr	r0, [r7, #4]
 80173f8:	f000 fd64 	bl	8017ec4 <USBD_CtlSendStatus>

              break;
 80173fc:	e004      	b.n	8017408 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80173fe:	6839      	ldr	r1, [r7, #0]
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f000 fc88 	bl	8017d16 <USBD_CtlError>
              break;
 8017406:	bf00      	nop
          }
          break;
 8017408:	e107      	b.n	801761a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017410:	b2db      	uxtb	r3, r3
 8017412:	2b02      	cmp	r3, #2
 8017414:	d002      	beq.n	801741c <USBD_StdEPReq+0x124>
 8017416:	2b03      	cmp	r3, #3
 8017418:	d016      	beq.n	8017448 <USBD_StdEPReq+0x150>
 801741a:	e04b      	b.n	80174b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801741c:	7bbb      	ldrb	r3, [r7, #14]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d00d      	beq.n	801743e <USBD_StdEPReq+0x146>
 8017422:	7bbb      	ldrb	r3, [r7, #14]
 8017424:	2b80      	cmp	r3, #128	@ 0x80
 8017426:	d00a      	beq.n	801743e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017428:	7bbb      	ldrb	r3, [r7, #14]
 801742a:	4619      	mov	r1, r3
 801742c:	6878      	ldr	r0, [r7, #4]
 801742e:	f001 f969 	bl	8018704 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017432:	2180      	movs	r1, #128	@ 0x80
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	f001 f965 	bl	8018704 <USBD_LL_StallEP>
 801743a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801743c:	e040      	b.n	80174c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801743e:	6839      	ldr	r1, [r7, #0]
 8017440:	6878      	ldr	r0, [r7, #4]
 8017442:	f000 fc68 	bl	8017d16 <USBD_CtlError>
              break;
 8017446:	e03b      	b.n	80174c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017448:	683b      	ldr	r3, [r7, #0]
 801744a:	885b      	ldrh	r3, [r3, #2]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d136      	bne.n	80174be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017450:	7bbb      	ldrb	r3, [r7, #14]
 8017452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017456:	2b00      	cmp	r3, #0
 8017458:	d004      	beq.n	8017464 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801745a:	7bbb      	ldrb	r3, [r7, #14]
 801745c:	4619      	mov	r1, r3
 801745e:	6878      	ldr	r0, [r7, #4]
 8017460:	f001 f96f 	bl	8018742 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	f000 fd2d 	bl	8017ec4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801746a:	7bbb      	ldrb	r3, [r7, #14]
 801746c:	4619      	mov	r1, r3
 801746e:	6878      	ldr	r0, [r7, #4]
 8017470:	f7ff fde4 	bl	801703c <USBD_CoreFindEP>
 8017474:	4603      	mov	r3, r0
 8017476:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017478:	7b7b      	ldrb	r3, [r7, #13]
 801747a:	2bff      	cmp	r3, #255	@ 0xff
 801747c:	d01f      	beq.n	80174be <USBD_StdEPReq+0x1c6>
 801747e:	7b7b      	ldrb	r3, [r7, #13]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d11c      	bne.n	80174be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8017484:	7b7a      	ldrb	r2, [r7, #13]
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801748c:	7b7a      	ldrb	r2, [r7, #13]
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	32ae      	adds	r2, #174	@ 0xae
 8017492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017496:	689b      	ldr	r3, [r3, #8]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d010      	beq.n	80174be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801749c:	7b7a      	ldrb	r2, [r7, #13]
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	32ae      	adds	r2, #174	@ 0xae
 80174a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174a6:	689b      	ldr	r3, [r3, #8]
 80174a8:	6839      	ldr	r1, [r7, #0]
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	4798      	blx	r3
 80174ae:	4603      	mov	r3, r0
 80174b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80174b2:	e004      	b.n	80174be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80174b4:	6839      	ldr	r1, [r7, #0]
 80174b6:	6878      	ldr	r0, [r7, #4]
 80174b8:	f000 fc2d 	bl	8017d16 <USBD_CtlError>
              break;
 80174bc:	e000      	b.n	80174c0 <USBD_StdEPReq+0x1c8>
              break;
 80174be:	bf00      	nop
          }
          break;
 80174c0:	e0ab      	b.n	801761a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80174c8:	b2db      	uxtb	r3, r3
 80174ca:	2b02      	cmp	r3, #2
 80174cc:	d002      	beq.n	80174d4 <USBD_StdEPReq+0x1dc>
 80174ce:	2b03      	cmp	r3, #3
 80174d0:	d032      	beq.n	8017538 <USBD_StdEPReq+0x240>
 80174d2:	e097      	b.n	8017604 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80174d4:	7bbb      	ldrb	r3, [r7, #14]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d007      	beq.n	80174ea <USBD_StdEPReq+0x1f2>
 80174da:	7bbb      	ldrb	r3, [r7, #14]
 80174dc:	2b80      	cmp	r3, #128	@ 0x80
 80174de:	d004      	beq.n	80174ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80174e0:	6839      	ldr	r1, [r7, #0]
 80174e2:	6878      	ldr	r0, [r7, #4]
 80174e4:	f000 fc17 	bl	8017d16 <USBD_CtlError>
                break;
 80174e8:	e091      	b.n	801760e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80174ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	da0b      	bge.n	801750a <USBD_StdEPReq+0x212>
 80174f2:	7bbb      	ldrb	r3, [r7, #14]
 80174f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80174f8:	4613      	mov	r3, r2
 80174fa:	009b      	lsls	r3, r3, #2
 80174fc:	4413      	add	r3, r2
 80174fe:	009b      	lsls	r3, r3, #2
 8017500:	3310      	adds	r3, #16
 8017502:	687a      	ldr	r2, [r7, #4]
 8017504:	4413      	add	r3, r2
 8017506:	3304      	adds	r3, #4
 8017508:	e00b      	b.n	8017522 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801750a:	7bbb      	ldrb	r3, [r7, #14]
 801750c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017510:	4613      	mov	r3, r2
 8017512:	009b      	lsls	r3, r3, #2
 8017514:	4413      	add	r3, r2
 8017516:	009b      	lsls	r3, r3, #2
 8017518:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801751c:	687a      	ldr	r2, [r7, #4]
 801751e:	4413      	add	r3, r2
 8017520:	3304      	adds	r3, #4
 8017522:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017524:	68bb      	ldr	r3, [r7, #8]
 8017526:	2200      	movs	r2, #0
 8017528:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	2202      	movs	r2, #2
 801752e:	4619      	mov	r1, r3
 8017530:	6878      	ldr	r0, [r7, #4]
 8017532:	f000 fc6d 	bl	8017e10 <USBD_CtlSendData>
              break;
 8017536:	e06a      	b.n	801760e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801753c:	2b00      	cmp	r3, #0
 801753e:	da11      	bge.n	8017564 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017540:	7bbb      	ldrb	r3, [r7, #14]
 8017542:	f003 020f 	and.w	r2, r3, #15
 8017546:	6879      	ldr	r1, [r7, #4]
 8017548:	4613      	mov	r3, r2
 801754a:	009b      	lsls	r3, r3, #2
 801754c:	4413      	add	r3, r2
 801754e:	009b      	lsls	r3, r3, #2
 8017550:	440b      	add	r3, r1
 8017552:	3324      	adds	r3, #36	@ 0x24
 8017554:	881b      	ldrh	r3, [r3, #0]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d117      	bne.n	801758a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801755a:	6839      	ldr	r1, [r7, #0]
 801755c:	6878      	ldr	r0, [r7, #4]
 801755e:	f000 fbda 	bl	8017d16 <USBD_CtlError>
                  break;
 8017562:	e054      	b.n	801760e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017564:	7bbb      	ldrb	r3, [r7, #14]
 8017566:	f003 020f 	and.w	r2, r3, #15
 801756a:	6879      	ldr	r1, [r7, #4]
 801756c:	4613      	mov	r3, r2
 801756e:	009b      	lsls	r3, r3, #2
 8017570:	4413      	add	r3, r2
 8017572:	009b      	lsls	r3, r3, #2
 8017574:	440b      	add	r3, r1
 8017576:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801757a:	881b      	ldrh	r3, [r3, #0]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d104      	bne.n	801758a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017580:	6839      	ldr	r1, [r7, #0]
 8017582:	6878      	ldr	r0, [r7, #4]
 8017584:	f000 fbc7 	bl	8017d16 <USBD_CtlError>
                  break;
 8017588:	e041      	b.n	801760e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801758a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801758e:	2b00      	cmp	r3, #0
 8017590:	da0b      	bge.n	80175aa <USBD_StdEPReq+0x2b2>
 8017592:	7bbb      	ldrb	r3, [r7, #14]
 8017594:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017598:	4613      	mov	r3, r2
 801759a:	009b      	lsls	r3, r3, #2
 801759c:	4413      	add	r3, r2
 801759e:	009b      	lsls	r3, r3, #2
 80175a0:	3310      	adds	r3, #16
 80175a2:	687a      	ldr	r2, [r7, #4]
 80175a4:	4413      	add	r3, r2
 80175a6:	3304      	adds	r3, #4
 80175a8:	e00b      	b.n	80175c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80175aa:	7bbb      	ldrb	r3, [r7, #14]
 80175ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80175b0:	4613      	mov	r3, r2
 80175b2:	009b      	lsls	r3, r3, #2
 80175b4:	4413      	add	r3, r2
 80175b6:	009b      	lsls	r3, r3, #2
 80175b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80175bc:	687a      	ldr	r2, [r7, #4]
 80175be:	4413      	add	r3, r2
 80175c0:	3304      	adds	r3, #4
 80175c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80175c4:	7bbb      	ldrb	r3, [r7, #14]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d002      	beq.n	80175d0 <USBD_StdEPReq+0x2d8>
 80175ca:	7bbb      	ldrb	r3, [r7, #14]
 80175cc:	2b80      	cmp	r3, #128	@ 0x80
 80175ce:	d103      	bne.n	80175d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	2200      	movs	r2, #0
 80175d4:	601a      	str	r2, [r3, #0]
 80175d6:	e00e      	b.n	80175f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80175d8:	7bbb      	ldrb	r3, [r7, #14]
 80175da:	4619      	mov	r1, r3
 80175dc:	6878      	ldr	r0, [r7, #4]
 80175de:	f001 f8cf 	bl	8018780 <USBD_LL_IsStallEP>
 80175e2:	4603      	mov	r3, r0
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d003      	beq.n	80175f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	2201      	movs	r2, #1
 80175ec:	601a      	str	r2, [r3, #0]
 80175ee:	e002      	b.n	80175f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80175f0:	68bb      	ldr	r3, [r7, #8]
 80175f2:	2200      	movs	r2, #0
 80175f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80175f6:	68bb      	ldr	r3, [r7, #8]
 80175f8:	2202      	movs	r2, #2
 80175fa:	4619      	mov	r1, r3
 80175fc:	6878      	ldr	r0, [r7, #4]
 80175fe:	f000 fc07 	bl	8017e10 <USBD_CtlSendData>
              break;
 8017602:	e004      	b.n	801760e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8017604:	6839      	ldr	r1, [r7, #0]
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	f000 fb85 	bl	8017d16 <USBD_CtlError>
              break;
 801760c:	bf00      	nop
          }
          break;
 801760e:	e004      	b.n	801761a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8017610:	6839      	ldr	r1, [r7, #0]
 8017612:	6878      	ldr	r0, [r7, #4]
 8017614:	f000 fb7f 	bl	8017d16 <USBD_CtlError>
          break;
 8017618:	bf00      	nop
      }
      break;
 801761a:	e005      	b.n	8017628 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801761c:	6839      	ldr	r1, [r7, #0]
 801761e:	6878      	ldr	r0, [r7, #4]
 8017620:	f000 fb79 	bl	8017d16 <USBD_CtlError>
      break;
 8017624:	e000      	b.n	8017628 <USBD_StdEPReq+0x330>
      break;
 8017626:	bf00      	nop
  }

  return ret;
 8017628:	7bfb      	ldrb	r3, [r7, #15]
}
 801762a:	4618      	mov	r0, r3
 801762c:	3710      	adds	r7, #16
 801762e:	46bd      	mov	sp, r7
 8017630:	bd80      	pop	{r7, pc}
	...

08017634 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b084      	sub	sp, #16
 8017638:	af00      	add	r7, sp, #0
 801763a:	6078      	str	r0, [r7, #4]
 801763c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801763e:	2300      	movs	r3, #0
 8017640:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017642:	2300      	movs	r3, #0
 8017644:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017646:	2300      	movs	r3, #0
 8017648:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	885b      	ldrh	r3, [r3, #2]
 801764e:	0a1b      	lsrs	r3, r3, #8
 8017650:	b29b      	uxth	r3, r3
 8017652:	3b01      	subs	r3, #1
 8017654:	2b0e      	cmp	r3, #14
 8017656:	f200 8152 	bhi.w	80178fe <USBD_GetDescriptor+0x2ca>
 801765a:	a201      	add	r2, pc, #4	@ (adr r2, 8017660 <USBD_GetDescriptor+0x2c>)
 801765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017660:	080176d1 	.word	0x080176d1
 8017664:	080176e9 	.word	0x080176e9
 8017668:	08017729 	.word	0x08017729
 801766c:	080178ff 	.word	0x080178ff
 8017670:	080178ff 	.word	0x080178ff
 8017674:	0801789f 	.word	0x0801789f
 8017678:	080178cb 	.word	0x080178cb
 801767c:	080178ff 	.word	0x080178ff
 8017680:	080178ff 	.word	0x080178ff
 8017684:	080178ff 	.word	0x080178ff
 8017688:	080178ff 	.word	0x080178ff
 801768c:	080178ff 	.word	0x080178ff
 8017690:	080178ff 	.word	0x080178ff
 8017694:	080178ff 	.word	0x080178ff
 8017698:	0801769d 	.word	0x0801769d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80176a2:	69db      	ldr	r3, [r3, #28]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d00b      	beq.n	80176c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80176ae:	69db      	ldr	r3, [r3, #28]
 80176b0:	687a      	ldr	r2, [r7, #4]
 80176b2:	7c12      	ldrb	r2, [r2, #16]
 80176b4:	f107 0108 	add.w	r1, r7, #8
 80176b8:	4610      	mov	r0, r2
 80176ba:	4798      	blx	r3
 80176bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80176be:	e126      	b.n	801790e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80176c0:	6839      	ldr	r1, [r7, #0]
 80176c2:	6878      	ldr	r0, [r7, #4]
 80176c4:	f000 fb27 	bl	8017d16 <USBD_CtlError>
        err++;
 80176c8:	7afb      	ldrb	r3, [r7, #11]
 80176ca:	3301      	adds	r3, #1
 80176cc:	72fb      	strb	r3, [r7, #11]
      break;
 80176ce:	e11e      	b.n	801790e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	687a      	ldr	r2, [r7, #4]
 80176da:	7c12      	ldrb	r2, [r2, #16]
 80176dc:	f107 0108 	add.w	r1, r7, #8
 80176e0:	4610      	mov	r0, r2
 80176e2:	4798      	blx	r3
 80176e4:	60f8      	str	r0, [r7, #12]
      break;
 80176e6:	e112      	b.n	801790e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	7c1b      	ldrb	r3, [r3, #16]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d10d      	bne.n	801770c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80176f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176f8:	f107 0208 	add.w	r2, r7, #8
 80176fc:	4610      	mov	r0, r2
 80176fe:	4798      	blx	r3
 8017700:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	3301      	adds	r3, #1
 8017706:	2202      	movs	r2, #2
 8017708:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801770a:	e100      	b.n	801790e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017714:	f107 0208 	add.w	r2, r7, #8
 8017718:	4610      	mov	r0, r2
 801771a:	4798      	blx	r3
 801771c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	3301      	adds	r3, #1
 8017722:	2202      	movs	r2, #2
 8017724:	701a      	strb	r2, [r3, #0]
      break;
 8017726:	e0f2      	b.n	801790e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017728:	683b      	ldr	r3, [r7, #0]
 801772a:	885b      	ldrh	r3, [r3, #2]
 801772c:	b2db      	uxtb	r3, r3
 801772e:	2b05      	cmp	r3, #5
 8017730:	f200 80ac 	bhi.w	801788c <USBD_GetDescriptor+0x258>
 8017734:	a201      	add	r2, pc, #4	@ (adr r2, 801773c <USBD_GetDescriptor+0x108>)
 8017736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801773a:	bf00      	nop
 801773c:	08017755 	.word	0x08017755
 8017740:	08017789 	.word	0x08017789
 8017744:	080177bd 	.word	0x080177bd
 8017748:	080177f1 	.word	0x080177f1
 801774c:	08017825 	.word	0x08017825
 8017750:	08017859 	.word	0x08017859
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801775a:	685b      	ldr	r3, [r3, #4]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d00b      	beq.n	8017778 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017766:	685b      	ldr	r3, [r3, #4]
 8017768:	687a      	ldr	r2, [r7, #4]
 801776a:	7c12      	ldrb	r2, [r2, #16]
 801776c:	f107 0108 	add.w	r1, r7, #8
 8017770:	4610      	mov	r0, r2
 8017772:	4798      	blx	r3
 8017774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017776:	e091      	b.n	801789c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017778:	6839      	ldr	r1, [r7, #0]
 801777a:	6878      	ldr	r0, [r7, #4]
 801777c:	f000 facb 	bl	8017d16 <USBD_CtlError>
            err++;
 8017780:	7afb      	ldrb	r3, [r7, #11]
 8017782:	3301      	adds	r3, #1
 8017784:	72fb      	strb	r3, [r7, #11]
          break;
 8017786:	e089      	b.n	801789c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801778e:	689b      	ldr	r3, [r3, #8]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d00b      	beq.n	80177ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801779a:	689b      	ldr	r3, [r3, #8]
 801779c:	687a      	ldr	r2, [r7, #4]
 801779e:	7c12      	ldrb	r2, [r2, #16]
 80177a0:	f107 0108 	add.w	r1, r7, #8
 80177a4:	4610      	mov	r0, r2
 80177a6:	4798      	blx	r3
 80177a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80177aa:	e077      	b.n	801789c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80177ac:	6839      	ldr	r1, [r7, #0]
 80177ae:	6878      	ldr	r0, [r7, #4]
 80177b0:	f000 fab1 	bl	8017d16 <USBD_CtlError>
            err++;
 80177b4:	7afb      	ldrb	r3, [r7, #11]
 80177b6:	3301      	adds	r3, #1
 80177b8:	72fb      	strb	r3, [r7, #11]
          break;
 80177ba:	e06f      	b.n	801789c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80177c2:	68db      	ldr	r3, [r3, #12]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d00b      	beq.n	80177e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80177ce:	68db      	ldr	r3, [r3, #12]
 80177d0:	687a      	ldr	r2, [r7, #4]
 80177d2:	7c12      	ldrb	r2, [r2, #16]
 80177d4:	f107 0108 	add.w	r1, r7, #8
 80177d8:	4610      	mov	r0, r2
 80177da:	4798      	blx	r3
 80177dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80177de:	e05d      	b.n	801789c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80177e0:	6839      	ldr	r1, [r7, #0]
 80177e2:	6878      	ldr	r0, [r7, #4]
 80177e4:	f000 fa97 	bl	8017d16 <USBD_CtlError>
            err++;
 80177e8:	7afb      	ldrb	r3, [r7, #11]
 80177ea:	3301      	adds	r3, #1
 80177ec:	72fb      	strb	r3, [r7, #11]
          break;
 80177ee:	e055      	b.n	801789c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80177f6:	691b      	ldr	r3, [r3, #16]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d00b      	beq.n	8017814 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017802:	691b      	ldr	r3, [r3, #16]
 8017804:	687a      	ldr	r2, [r7, #4]
 8017806:	7c12      	ldrb	r2, [r2, #16]
 8017808:	f107 0108 	add.w	r1, r7, #8
 801780c:	4610      	mov	r0, r2
 801780e:	4798      	blx	r3
 8017810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017812:	e043      	b.n	801789c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017814:	6839      	ldr	r1, [r7, #0]
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f000 fa7d 	bl	8017d16 <USBD_CtlError>
            err++;
 801781c:	7afb      	ldrb	r3, [r7, #11]
 801781e:	3301      	adds	r3, #1
 8017820:	72fb      	strb	r3, [r7, #11]
          break;
 8017822:	e03b      	b.n	801789c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801782a:	695b      	ldr	r3, [r3, #20]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d00b      	beq.n	8017848 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017836:	695b      	ldr	r3, [r3, #20]
 8017838:	687a      	ldr	r2, [r7, #4]
 801783a:	7c12      	ldrb	r2, [r2, #16]
 801783c:	f107 0108 	add.w	r1, r7, #8
 8017840:	4610      	mov	r0, r2
 8017842:	4798      	blx	r3
 8017844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017846:	e029      	b.n	801789c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017848:	6839      	ldr	r1, [r7, #0]
 801784a:	6878      	ldr	r0, [r7, #4]
 801784c:	f000 fa63 	bl	8017d16 <USBD_CtlError>
            err++;
 8017850:	7afb      	ldrb	r3, [r7, #11]
 8017852:	3301      	adds	r3, #1
 8017854:	72fb      	strb	r3, [r7, #11]
          break;
 8017856:	e021      	b.n	801789c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801785e:	699b      	ldr	r3, [r3, #24]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d00b      	beq.n	801787c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801786a:	699b      	ldr	r3, [r3, #24]
 801786c:	687a      	ldr	r2, [r7, #4]
 801786e:	7c12      	ldrb	r2, [r2, #16]
 8017870:	f107 0108 	add.w	r1, r7, #8
 8017874:	4610      	mov	r0, r2
 8017876:	4798      	blx	r3
 8017878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801787a:	e00f      	b.n	801789c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801787c:	6839      	ldr	r1, [r7, #0]
 801787e:	6878      	ldr	r0, [r7, #4]
 8017880:	f000 fa49 	bl	8017d16 <USBD_CtlError>
            err++;
 8017884:	7afb      	ldrb	r3, [r7, #11]
 8017886:	3301      	adds	r3, #1
 8017888:	72fb      	strb	r3, [r7, #11]
          break;
 801788a:	e007      	b.n	801789c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801788c:	6839      	ldr	r1, [r7, #0]
 801788e:	6878      	ldr	r0, [r7, #4]
 8017890:	f000 fa41 	bl	8017d16 <USBD_CtlError>
          err++;
 8017894:	7afb      	ldrb	r3, [r7, #11]
 8017896:	3301      	adds	r3, #1
 8017898:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801789a:	bf00      	nop
      }
      break;
 801789c:	e037      	b.n	801790e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	7c1b      	ldrb	r3, [r3, #16]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d109      	bne.n	80178ba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80178ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80178ae:	f107 0208 	add.w	r2, r7, #8
 80178b2:	4610      	mov	r0, r2
 80178b4:	4798      	blx	r3
 80178b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80178b8:	e029      	b.n	801790e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80178ba:	6839      	ldr	r1, [r7, #0]
 80178bc:	6878      	ldr	r0, [r7, #4]
 80178be:	f000 fa2a 	bl	8017d16 <USBD_CtlError>
        err++;
 80178c2:	7afb      	ldrb	r3, [r7, #11]
 80178c4:	3301      	adds	r3, #1
 80178c6:	72fb      	strb	r3, [r7, #11]
      break;
 80178c8:	e021      	b.n	801790e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	7c1b      	ldrb	r3, [r3, #16]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d10d      	bne.n	80178ee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80178d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80178da:	f107 0208 	add.w	r2, r7, #8
 80178de:	4610      	mov	r0, r2
 80178e0:	4798      	blx	r3
 80178e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	3301      	adds	r3, #1
 80178e8:	2207      	movs	r2, #7
 80178ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80178ec:	e00f      	b.n	801790e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80178ee:	6839      	ldr	r1, [r7, #0]
 80178f0:	6878      	ldr	r0, [r7, #4]
 80178f2:	f000 fa10 	bl	8017d16 <USBD_CtlError>
        err++;
 80178f6:	7afb      	ldrb	r3, [r7, #11]
 80178f8:	3301      	adds	r3, #1
 80178fa:	72fb      	strb	r3, [r7, #11]
      break;
 80178fc:	e007      	b.n	801790e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80178fe:	6839      	ldr	r1, [r7, #0]
 8017900:	6878      	ldr	r0, [r7, #4]
 8017902:	f000 fa08 	bl	8017d16 <USBD_CtlError>
      err++;
 8017906:	7afb      	ldrb	r3, [r7, #11]
 8017908:	3301      	adds	r3, #1
 801790a:	72fb      	strb	r3, [r7, #11]
      break;
 801790c:	bf00      	nop
  }

  if (err != 0U)
 801790e:	7afb      	ldrb	r3, [r7, #11]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d11e      	bne.n	8017952 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8017914:	683b      	ldr	r3, [r7, #0]
 8017916:	88db      	ldrh	r3, [r3, #6]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d016      	beq.n	801794a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801791c:	893b      	ldrh	r3, [r7, #8]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d00e      	beq.n	8017940 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8017922:	683b      	ldr	r3, [r7, #0]
 8017924:	88da      	ldrh	r2, [r3, #6]
 8017926:	893b      	ldrh	r3, [r7, #8]
 8017928:	4293      	cmp	r3, r2
 801792a:	bf28      	it	cs
 801792c:	4613      	movcs	r3, r2
 801792e:	b29b      	uxth	r3, r3
 8017930:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017932:	893b      	ldrh	r3, [r7, #8]
 8017934:	461a      	mov	r2, r3
 8017936:	68f9      	ldr	r1, [r7, #12]
 8017938:	6878      	ldr	r0, [r7, #4]
 801793a:	f000 fa69 	bl	8017e10 <USBD_CtlSendData>
 801793e:	e009      	b.n	8017954 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017940:	6839      	ldr	r1, [r7, #0]
 8017942:	6878      	ldr	r0, [r7, #4]
 8017944:	f000 f9e7 	bl	8017d16 <USBD_CtlError>
 8017948:	e004      	b.n	8017954 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f000 faba 	bl	8017ec4 <USBD_CtlSendStatus>
 8017950:	e000      	b.n	8017954 <USBD_GetDescriptor+0x320>
    return;
 8017952:	bf00      	nop
  }
}
 8017954:	3710      	adds	r7, #16
 8017956:	46bd      	mov	sp, r7
 8017958:	bd80      	pop	{r7, pc}
 801795a:	bf00      	nop

0801795c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b084      	sub	sp, #16
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
 8017964:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017966:	683b      	ldr	r3, [r7, #0]
 8017968:	889b      	ldrh	r3, [r3, #4]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d131      	bne.n	80179d2 <USBD_SetAddress+0x76>
 801796e:	683b      	ldr	r3, [r7, #0]
 8017970:	88db      	ldrh	r3, [r3, #6]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d12d      	bne.n	80179d2 <USBD_SetAddress+0x76>
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	885b      	ldrh	r3, [r3, #2]
 801797a:	2b7f      	cmp	r3, #127	@ 0x7f
 801797c:	d829      	bhi.n	80179d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801797e:	683b      	ldr	r3, [r7, #0]
 8017980:	885b      	ldrh	r3, [r3, #2]
 8017982:	b2db      	uxtb	r3, r3
 8017984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017988:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017990:	b2db      	uxtb	r3, r3
 8017992:	2b03      	cmp	r3, #3
 8017994:	d104      	bne.n	80179a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017996:	6839      	ldr	r1, [r7, #0]
 8017998:	6878      	ldr	r0, [r7, #4]
 801799a:	f000 f9bc 	bl	8017d16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801799e:	e01d      	b.n	80179dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	7bfa      	ldrb	r2, [r7, #15]
 80179a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80179a8:	7bfb      	ldrb	r3, [r7, #15]
 80179aa:	4619      	mov	r1, r3
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f000 ff13 	bl	80187d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80179b2:	6878      	ldr	r0, [r7, #4]
 80179b4:	f000 fa86 	bl	8017ec4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80179b8:	7bfb      	ldrb	r3, [r7, #15]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d004      	beq.n	80179c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	2202      	movs	r2, #2
 80179c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80179c6:	e009      	b.n	80179dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	2201      	movs	r2, #1
 80179cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80179d0:	e004      	b.n	80179dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80179d2:	6839      	ldr	r1, [r7, #0]
 80179d4:	6878      	ldr	r0, [r7, #4]
 80179d6:	f000 f99e 	bl	8017d16 <USBD_CtlError>
  }
}
 80179da:	bf00      	nop
 80179dc:	bf00      	nop
 80179de:	3710      	adds	r7, #16
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}

080179e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b084      	sub	sp, #16
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
 80179ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80179ee:	2300      	movs	r3, #0
 80179f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80179f2:	683b      	ldr	r3, [r7, #0]
 80179f4:	885b      	ldrh	r3, [r3, #2]
 80179f6:	b2da      	uxtb	r2, r3
 80179f8:	4b4e      	ldr	r3, [pc, #312]	@ (8017b34 <USBD_SetConfig+0x150>)
 80179fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80179fc:	4b4d      	ldr	r3, [pc, #308]	@ (8017b34 <USBD_SetConfig+0x150>)
 80179fe:	781b      	ldrb	r3, [r3, #0]
 8017a00:	2b01      	cmp	r3, #1
 8017a02:	d905      	bls.n	8017a10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017a04:	6839      	ldr	r1, [r7, #0]
 8017a06:	6878      	ldr	r0, [r7, #4]
 8017a08:	f000 f985 	bl	8017d16 <USBD_CtlError>
    return USBD_FAIL;
 8017a0c:	2303      	movs	r3, #3
 8017a0e:	e08c      	b.n	8017b2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017a16:	b2db      	uxtb	r3, r3
 8017a18:	2b02      	cmp	r3, #2
 8017a1a:	d002      	beq.n	8017a22 <USBD_SetConfig+0x3e>
 8017a1c:	2b03      	cmp	r3, #3
 8017a1e:	d029      	beq.n	8017a74 <USBD_SetConfig+0x90>
 8017a20:	e075      	b.n	8017b0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017a22:	4b44      	ldr	r3, [pc, #272]	@ (8017b34 <USBD_SetConfig+0x150>)
 8017a24:	781b      	ldrb	r3, [r3, #0]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d020      	beq.n	8017a6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8017a2a:	4b42      	ldr	r3, [pc, #264]	@ (8017b34 <USBD_SetConfig+0x150>)
 8017a2c:	781b      	ldrb	r3, [r3, #0]
 8017a2e:	461a      	mov	r2, r3
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017a34:	4b3f      	ldr	r3, [pc, #252]	@ (8017b34 <USBD_SetConfig+0x150>)
 8017a36:	781b      	ldrb	r3, [r3, #0]
 8017a38:	4619      	mov	r1, r3
 8017a3a:	6878      	ldr	r0, [r7, #4]
 8017a3c:	f7fe ffb9 	bl	80169b2 <USBD_SetClassConfig>
 8017a40:	4603      	mov	r3, r0
 8017a42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017a44:	7bfb      	ldrb	r3, [r7, #15]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d008      	beq.n	8017a5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8017a4a:	6839      	ldr	r1, [r7, #0]
 8017a4c:	6878      	ldr	r0, [r7, #4]
 8017a4e:	f000 f962 	bl	8017d16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	2202      	movs	r2, #2
 8017a56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017a5a:	e065      	b.n	8017b28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017a5c:	6878      	ldr	r0, [r7, #4]
 8017a5e:	f000 fa31 	bl	8017ec4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	2203      	movs	r2, #3
 8017a66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017a6a:	e05d      	b.n	8017b28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017a6c:	6878      	ldr	r0, [r7, #4]
 8017a6e:	f000 fa29 	bl	8017ec4 <USBD_CtlSendStatus>
      break;
 8017a72:	e059      	b.n	8017b28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017a74:	4b2f      	ldr	r3, [pc, #188]	@ (8017b34 <USBD_SetConfig+0x150>)
 8017a76:	781b      	ldrb	r3, [r3, #0]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d112      	bne.n	8017aa2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	2202      	movs	r2, #2
 8017a80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017a84:	4b2b      	ldr	r3, [pc, #172]	@ (8017b34 <USBD_SetConfig+0x150>)
 8017a86:	781b      	ldrb	r3, [r3, #0]
 8017a88:	461a      	mov	r2, r3
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017a8e:	4b29      	ldr	r3, [pc, #164]	@ (8017b34 <USBD_SetConfig+0x150>)
 8017a90:	781b      	ldrb	r3, [r3, #0]
 8017a92:	4619      	mov	r1, r3
 8017a94:	6878      	ldr	r0, [r7, #4]
 8017a96:	f7fe ffa8 	bl	80169ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017a9a:	6878      	ldr	r0, [r7, #4]
 8017a9c:	f000 fa12 	bl	8017ec4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017aa0:	e042      	b.n	8017b28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017aa2:	4b24      	ldr	r3, [pc, #144]	@ (8017b34 <USBD_SetConfig+0x150>)
 8017aa4:	781b      	ldrb	r3, [r3, #0]
 8017aa6:	461a      	mov	r2, r3
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	685b      	ldr	r3, [r3, #4]
 8017aac:	429a      	cmp	r2, r3
 8017aae:	d02a      	beq.n	8017b06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	685b      	ldr	r3, [r3, #4]
 8017ab4:	b2db      	uxtb	r3, r3
 8017ab6:	4619      	mov	r1, r3
 8017ab8:	6878      	ldr	r0, [r7, #4]
 8017aba:	f7fe ff96 	bl	80169ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017abe:	4b1d      	ldr	r3, [pc, #116]	@ (8017b34 <USBD_SetConfig+0x150>)
 8017ac0:	781b      	ldrb	r3, [r3, #0]
 8017ac2:	461a      	mov	r2, r3
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8017b34 <USBD_SetConfig+0x150>)
 8017aca:	781b      	ldrb	r3, [r3, #0]
 8017acc:	4619      	mov	r1, r3
 8017ace:	6878      	ldr	r0, [r7, #4]
 8017ad0:	f7fe ff6f 	bl	80169b2 <USBD_SetClassConfig>
 8017ad4:	4603      	mov	r3, r0
 8017ad6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017ad8:	7bfb      	ldrb	r3, [r7, #15]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d00f      	beq.n	8017afe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8017ade:	6839      	ldr	r1, [r7, #0]
 8017ae0:	6878      	ldr	r0, [r7, #4]
 8017ae2:	f000 f918 	bl	8017d16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	685b      	ldr	r3, [r3, #4]
 8017aea:	b2db      	uxtb	r3, r3
 8017aec:	4619      	mov	r1, r3
 8017aee:	6878      	ldr	r0, [r7, #4]
 8017af0:	f7fe ff7b 	bl	80169ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	2202      	movs	r2, #2
 8017af8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017afc:	e014      	b.n	8017b28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017afe:	6878      	ldr	r0, [r7, #4]
 8017b00:	f000 f9e0 	bl	8017ec4 <USBD_CtlSendStatus>
      break;
 8017b04:	e010      	b.n	8017b28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f000 f9dc 	bl	8017ec4 <USBD_CtlSendStatus>
      break;
 8017b0c:	e00c      	b.n	8017b28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8017b0e:	6839      	ldr	r1, [r7, #0]
 8017b10:	6878      	ldr	r0, [r7, #4]
 8017b12:	f000 f900 	bl	8017d16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017b16:	4b07      	ldr	r3, [pc, #28]	@ (8017b34 <USBD_SetConfig+0x150>)
 8017b18:	781b      	ldrb	r3, [r3, #0]
 8017b1a:	4619      	mov	r1, r3
 8017b1c:	6878      	ldr	r0, [r7, #4]
 8017b1e:	f7fe ff64 	bl	80169ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017b22:	2303      	movs	r3, #3
 8017b24:	73fb      	strb	r3, [r7, #15]
      break;
 8017b26:	bf00      	nop
  }

  return ret;
 8017b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	3710      	adds	r7, #16
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd80      	pop	{r7, pc}
 8017b32:	bf00      	nop
 8017b34:	240136b8 	.word	0x240136b8

08017b38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b082      	sub	sp, #8
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
 8017b40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017b42:	683b      	ldr	r3, [r7, #0]
 8017b44:	88db      	ldrh	r3, [r3, #6]
 8017b46:	2b01      	cmp	r3, #1
 8017b48:	d004      	beq.n	8017b54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017b4a:	6839      	ldr	r1, [r7, #0]
 8017b4c:	6878      	ldr	r0, [r7, #4]
 8017b4e:	f000 f8e2 	bl	8017d16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017b52:	e023      	b.n	8017b9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017b5a:	b2db      	uxtb	r3, r3
 8017b5c:	2b02      	cmp	r3, #2
 8017b5e:	dc02      	bgt.n	8017b66 <USBD_GetConfig+0x2e>
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	dc03      	bgt.n	8017b6c <USBD_GetConfig+0x34>
 8017b64:	e015      	b.n	8017b92 <USBD_GetConfig+0x5a>
 8017b66:	2b03      	cmp	r3, #3
 8017b68:	d00b      	beq.n	8017b82 <USBD_GetConfig+0x4a>
 8017b6a:	e012      	b.n	8017b92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	2200      	movs	r2, #0
 8017b70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	3308      	adds	r3, #8
 8017b76:	2201      	movs	r2, #1
 8017b78:	4619      	mov	r1, r3
 8017b7a:	6878      	ldr	r0, [r7, #4]
 8017b7c:	f000 f948 	bl	8017e10 <USBD_CtlSendData>
        break;
 8017b80:	e00c      	b.n	8017b9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	3304      	adds	r3, #4
 8017b86:	2201      	movs	r2, #1
 8017b88:	4619      	mov	r1, r3
 8017b8a:	6878      	ldr	r0, [r7, #4]
 8017b8c:	f000 f940 	bl	8017e10 <USBD_CtlSendData>
        break;
 8017b90:	e004      	b.n	8017b9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017b92:	6839      	ldr	r1, [r7, #0]
 8017b94:	6878      	ldr	r0, [r7, #4]
 8017b96:	f000 f8be 	bl	8017d16 <USBD_CtlError>
        break;
 8017b9a:	bf00      	nop
}
 8017b9c:	bf00      	nop
 8017b9e:	3708      	adds	r7, #8
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	bd80      	pop	{r7, pc}

08017ba4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	b082      	sub	sp, #8
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	6078      	str	r0, [r7, #4]
 8017bac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017bb4:	b2db      	uxtb	r3, r3
 8017bb6:	3b01      	subs	r3, #1
 8017bb8:	2b02      	cmp	r3, #2
 8017bba:	d81e      	bhi.n	8017bfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	88db      	ldrh	r3, [r3, #6]
 8017bc0:	2b02      	cmp	r3, #2
 8017bc2:	d004      	beq.n	8017bce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017bc4:	6839      	ldr	r1, [r7, #0]
 8017bc6:	6878      	ldr	r0, [r7, #4]
 8017bc8:	f000 f8a5 	bl	8017d16 <USBD_CtlError>
        break;
 8017bcc:	e01a      	b.n	8017c04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	2201      	movs	r2, #1
 8017bd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d005      	beq.n	8017bea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	68db      	ldr	r3, [r3, #12]
 8017be2:	f043 0202 	orr.w	r2, r3, #2
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	330c      	adds	r3, #12
 8017bee:	2202      	movs	r2, #2
 8017bf0:	4619      	mov	r1, r3
 8017bf2:	6878      	ldr	r0, [r7, #4]
 8017bf4:	f000 f90c 	bl	8017e10 <USBD_CtlSendData>
      break;
 8017bf8:	e004      	b.n	8017c04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017bfa:	6839      	ldr	r1, [r7, #0]
 8017bfc:	6878      	ldr	r0, [r7, #4]
 8017bfe:	f000 f88a 	bl	8017d16 <USBD_CtlError>
      break;
 8017c02:	bf00      	nop
  }
}
 8017c04:	bf00      	nop
 8017c06:	3708      	adds	r7, #8
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd80      	pop	{r7, pc}

08017c0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b082      	sub	sp, #8
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
 8017c14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	885b      	ldrh	r3, [r3, #2]
 8017c1a:	2b01      	cmp	r3, #1
 8017c1c:	d107      	bne.n	8017c2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	2201      	movs	r2, #1
 8017c22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017c26:	6878      	ldr	r0, [r7, #4]
 8017c28:	f000 f94c 	bl	8017ec4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017c2c:	e013      	b.n	8017c56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017c2e:	683b      	ldr	r3, [r7, #0]
 8017c30:	885b      	ldrh	r3, [r3, #2]
 8017c32:	2b02      	cmp	r3, #2
 8017c34:	d10b      	bne.n	8017c4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8017c36:	683b      	ldr	r3, [r7, #0]
 8017c38:	889b      	ldrh	r3, [r3, #4]
 8017c3a:	0a1b      	lsrs	r3, r3, #8
 8017c3c:	b29b      	uxth	r3, r3
 8017c3e:	b2da      	uxtb	r2, r3
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017c46:	6878      	ldr	r0, [r7, #4]
 8017c48:	f000 f93c 	bl	8017ec4 <USBD_CtlSendStatus>
}
 8017c4c:	e003      	b.n	8017c56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017c4e:	6839      	ldr	r1, [r7, #0]
 8017c50:	6878      	ldr	r0, [r7, #4]
 8017c52:	f000 f860 	bl	8017d16 <USBD_CtlError>
}
 8017c56:	bf00      	nop
 8017c58:	3708      	adds	r7, #8
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	bd80      	pop	{r7, pc}

08017c5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c5e:	b580      	push	{r7, lr}
 8017c60:	b082      	sub	sp, #8
 8017c62:	af00      	add	r7, sp, #0
 8017c64:	6078      	str	r0, [r7, #4]
 8017c66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017c6e:	b2db      	uxtb	r3, r3
 8017c70:	3b01      	subs	r3, #1
 8017c72:	2b02      	cmp	r3, #2
 8017c74:	d80b      	bhi.n	8017c8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017c76:	683b      	ldr	r3, [r7, #0]
 8017c78:	885b      	ldrh	r3, [r3, #2]
 8017c7a:	2b01      	cmp	r3, #1
 8017c7c:	d10c      	bne.n	8017c98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	2200      	movs	r2, #0
 8017c82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017c86:	6878      	ldr	r0, [r7, #4]
 8017c88:	f000 f91c 	bl	8017ec4 <USBD_CtlSendStatus>
      }
      break;
 8017c8c:	e004      	b.n	8017c98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017c8e:	6839      	ldr	r1, [r7, #0]
 8017c90:	6878      	ldr	r0, [r7, #4]
 8017c92:	f000 f840 	bl	8017d16 <USBD_CtlError>
      break;
 8017c96:	e000      	b.n	8017c9a <USBD_ClrFeature+0x3c>
      break;
 8017c98:	bf00      	nop
  }
}
 8017c9a:	bf00      	nop
 8017c9c:	3708      	adds	r7, #8
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	bd80      	pop	{r7, pc}

08017ca2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017ca2:	b580      	push	{r7, lr}
 8017ca4:	b084      	sub	sp, #16
 8017ca6:	af00      	add	r7, sp, #0
 8017ca8:	6078      	str	r0, [r7, #4]
 8017caa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	781a      	ldrb	r2, [r3, #0]
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	3301      	adds	r3, #1
 8017cbc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	781a      	ldrb	r2, [r3, #0]
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	3301      	adds	r3, #1
 8017cca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017ccc:	68f8      	ldr	r0, [r7, #12]
 8017cce:	f7ff fa16 	bl	80170fe <SWAPBYTE>
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	461a      	mov	r2, r3
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	3301      	adds	r3, #1
 8017cde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	3301      	adds	r3, #1
 8017ce4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017ce6:	68f8      	ldr	r0, [r7, #12]
 8017ce8:	f7ff fa09 	bl	80170fe <SWAPBYTE>
 8017cec:	4603      	mov	r3, r0
 8017cee:	461a      	mov	r2, r3
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	3301      	adds	r3, #1
 8017cf8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	3301      	adds	r3, #1
 8017cfe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017d00:	68f8      	ldr	r0, [r7, #12]
 8017d02:	f7ff f9fc 	bl	80170fe <SWAPBYTE>
 8017d06:	4603      	mov	r3, r0
 8017d08:	461a      	mov	r2, r3
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	80da      	strh	r2, [r3, #6]
}
 8017d0e:	bf00      	nop
 8017d10:	3710      	adds	r7, #16
 8017d12:	46bd      	mov	sp, r7
 8017d14:	bd80      	pop	{r7, pc}

08017d16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d16:	b580      	push	{r7, lr}
 8017d18:	b082      	sub	sp, #8
 8017d1a:	af00      	add	r7, sp, #0
 8017d1c:	6078      	str	r0, [r7, #4]
 8017d1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017d20:	2180      	movs	r1, #128	@ 0x80
 8017d22:	6878      	ldr	r0, [r7, #4]
 8017d24:	f000 fcee 	bl	8018704 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017d28:	2100      	movs	r1, #0
 8017d2a:	6878      	ldr	r0, [r7, #4]
 8017d2c:	f000 fcea 	bl	8018704 <USBD_LL_StallEP>
}
 8017d30:	bf00      	nop
 8017d32:	3708      	adds	r7, #8
 8017d34:	46bd      	mov	sp, r7
 8017d36:	bd80      	pop	{r7, pc}

08017d38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b086      	sub	sp, #24
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	60f8      	str	r0, [r7, #12]
 8017d40:	60b9      	str	r1, [r7, #8]
 8017d42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017d44:	2300      	movs	r3, #0
 8017d46:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d042      	beq.n	8017dd4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8017d52:	6938      	ldr	r0, [r7, #16]
 8017d54:	f000 f842 	bl	8017ddc <USBD_GetLen>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	3301      	adds	r3, #1
 8017d5c:	005b      	lsls	r3, r3, #1
 8017d5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d62:	d808      	bhi.n	8017d76 <USBD_GetString+0x3e>
 8017d64:	6938      	ldr	r0, [r7, #16]
 8017d66:	f000 f839 	bl	8017ddc <USBD_GetLen>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	3301      	adds	r3, #1
 8017d6e:	b29b      	uxth	r3, r3
 8017d70:	005b      	lsls	r3, r3, #1
 8017d72:	b29a      	uxth	r2, r3
 8017d74:	e001      	b.n	8017d7a <USBD_GetString+0x42>
 8017d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017d7e:	7dfb      	ldrb	r3, [r7, #23]
 8017d80:	68ba      	ldr	r2, [r7, #8]
 8017d82:	4413      	add	r3, r2
 8017d84:	687a      	ldr	r2, [r7, #4]
 8017d86:	7812      	ldrb	r2, [r2, #0]
 8017d88:	701a      	strb	r2, [r3, #0]
  idx++;
 8017d8a:	7dfb      	ldrb	r3, [r7, #23]
 8017d8c:	3301      	adds	r3, #1
 8017d8e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017d90:	7dfb      	ldrb	r3, [r7, #23]
 8017d92:	68ba      	ldr	r2, [r7, #8]
 8017d94:	4413      	add	r3, r2
 8017d96:	2203      	movs	r2, #3
 8017d98:	701a      	strb	r2, [r3, #0]
  idx++;
 8017d9a:	7dfb      	ldrb	r3, [r7, #23]
 8017d9c:	3301      	adds	r3, #1
 8017d9e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017da0:	e013      	b.n	8017dca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8017da2:	7dfb      	ldrb	r3, [r7, #23]
 8017da4:	68ba      	ldr	r2, [r7, #8]
 8017da6:	4413      	add	r3, r2
 8017da8:	693a      	ldr	r2, [r7, #16]
 8017daa:	7812      	ldrb	r2, [r2, #0]
 8017dac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017dae:	693b      	ldr	r3, [r7, #16]
 8017db0:	3301      	adds	r3, #1
 8017db2:	613b      	str	r3, [r7, #16]
    idx++;
 8017db4:	7dfb      	ldrb	r3, [r7, #23]
 8017db6:	3301      	adds	r3, #1
 8017db8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017dba:	7dfb      	ldrb	r3, [r7, #23]
 8017dbc:	68ba      	ldr	r2, [r7, #8]
 8017dbe:	4413      	add	r3, r2
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	701a      	strb	r2, [r3, #0]
    idx++;
 8017dc4:	7dfb      	ldrb	r3, [r7, #23]
 8017dc6:	3301      	adds	r3, #1
 8017dc8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017dca:	693b      	ldr	r3, [r7, #16]
 8017dcc:	781b      	ldrb	r3, [r3, #0]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d1e7      	bne.n	8017da2 <USBD_GetString+0x6a>
 8017dd2:	e000      	b.n	8017dd6 <USBD_GetString+0x9e>
    return;
 8017dd4:	bf00      	nop
  }
}
 8017dd6:	3718      	adds	r7, #24
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	bd80      	pop	{r7, pc}

08017ddc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017ddc:	b480      	push	{r7}
 8017dde:	b085      	sub	sp, #20
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017de4:	2300      	movs	r3, #0
 8017de6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017dec:	e005      	b.n	8017dfa <USBD_GetLen+0x1e>
  {
    len++;
 8017dee:	7bfb      	ldrb	r3, [r7, #15]
 8017df0:	3301      	adds	r3, #1
 8017df2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017df4:	68bb      	ldr	r3, [r7, #8]
 8017df6:	3301      	adds	r3, #1
 8017df8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017dfa:	68bb      	ldr	r3, [r7, #8]
 8017dfc:	781b      	ldrb	r3, [r3, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d1f5      	bne.n	8017dee <USBD_GetLen+0x12>
  }

  return len;
 8017e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e04:	4618      	mov	r0, r3
 8017e06:	3714      	adds	r7, #20
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0e:	4770      	bx	lr

08017e10 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b084      	sub	sp, #16
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	60f8      	str	r0, [r7, #12]
 8017e18:	60b9      	str	r1, [r7, #8]
 8017e1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	2202      	movs	r2, #2
 8017e20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	687a      	ldr	r2, [r7, #4]
 8017e28:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	687a      	ldr	r2, [r7, #4]
 8017e2e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	68ba      	ldr	r2, [r7, #8]
 8017e34:	2100      	movs	r1, #0
 8017e36:	68f8      	ldr	r0, [r7, #12]
 8017e38:	f000 fced 	bl	8018816 <USBD_LL_Transmit>

  return USBD_OK;
 8017e3c:	2300      	movs	r3, #0
}
 8017e3e:	4618      	mov	r0, r3
 8017e40:	3710      	adds	r7, #16
 8017e42:	46bd      	mov	sp, r7
 8017e44:	bd80      	pop	{r7, pc}

08017e46 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017e46:	b580      	push	{r7, lr}
 8017e48:	b084      	sub	sp, #16
 8017e4a:	af00      	add	r7, sp, #0
 8017e4c:	60f8      	str	r0, [r7, #12]
 8017e4e:	60b9      	str	r1, [r7, #8]
 8017e50:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	68ba      	ldr	r2, [r7, #8]
 8017e56:	2100      	movs	r1, #0
 8017e58:	68f8      	ldr	r0, [r7, #12]
 8017e5a:	f000 fcdc 	bl	8018816 <USBD_LL_Transmit>

  return USBD_OK;
 8017e5e:	2300      	movs	r3, #0
}
 8017e60:	4618      	mov	r0, r3
 8017e62:	3710      	adds	r7, #16
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bd80      	pop	{r7, pc}

08017e68 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b084      	sub	sp, #16
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	60f8      	str	r0, [r7, #12]
 8017e70:	60b9      	str	r1, [r7, #8]
 8017e72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	2203      	movs	r2, #3
 8017e78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	687a      	ldr	r2, [r7, #4]
 8017e80:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	687a      	ldr	r2, [r7, #4]
 8017e88:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	68ba      	ldr	r2, [r7, #8]
 8017e90:	2100      	movs	r1, #0
 8017e92:	68f8      	ldr	r0, [r7, #12]
 8017e94:	f000 fce0 	bl	8018858 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017e98:	2300      	movs	r3, #0
}
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	3710      	adds	r7, #16
 8017e9e:	46bd      	mov	sp, r7
 8017ea0:	bd80      	pop	{r7, pc}

08017ea2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017ea2:	b580      	push	{r7, lr}
 8017ea4:	b084      	sub	sp, #16
 8017ea6:	af00      	add	r7, sp, #0
 8017ea8:	60f8      	str	r0, [r7, #12]
 8017eaa:	60b9      	str	r1, [r7, #8]
 8017eac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	68ba      	ldr	r2, [r7, #8]
 8017eb2:	2100      	movs	r1, #0
 8017eb4:	68f8      	ldr	r0, [r7, #12]
 8017eb6:	f000 fccf 	bl	8018858 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017eba:	2300      	movs	r3, #0
}
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	3710      	adds	r7, #16
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	bd80      	pop	{r7, pc}

08017ec4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017ec4:	b580      	push	{r7, lr}
 8017ec6:	b082      	sub	sp, #8
 8017ec8:	af00      	add	r7, sp, #0
 8017eca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	2204      	movs	r2, #4
 8017ed0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	2100      	movs	r1, #0
 8017eda:	6878      	ldr	r0, [r7, #4]
 8017edc:	f000 fc9b 	bl	8018816 <USBD_LL_Transmit>

  return USBD_OK;
 8017ee0:	2300      	movs	r3, #0
}
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	3708      	adds	r7, #8
 8017ee6:	46bd      	mov	sp, r7
 8017ee8:	bd80      	pop	{r7, pc}

08017eea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017eea:	b580      	push	{r7, lr}
 8017eec:	b082      	sub	sp, #8
 8017eee:	af00      	add	r7, sp, #0
 8017ef0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	2205      	movs	r2, #5
 8017ef6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017efa:	2300      	movs	r3, #0
 8017efc:	2200      	movs	r2, #0
 8017efe:	2100      	movs	r1, #0
 8017f00:	6878      	ldr	r0, [r7, #4]
 8017f02:	f000 fca9 	bl	8018858 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017f06:	2300      	movs	r3, #0
}
 8017f08:	4618      	mov	r0, r3
 8017f0a:	3708      	adds	r7, #8
 8017f0c:	46bd      	mov	sp, r7
 8017f0e:	bd80      	pop	{r7, pc}

08017f10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8017f14:	2201      	movs	r2, #1
 8017f16:	4913      	ldr	r1, [pc, #76]	@ (8017f64 <MX_USB_DEVICE_Init+0x54>)
 8017f18:	4813      	ldr	r0, [pc, #76]	@ (8017f68 <MX_USB_DEVICE_Init+0x58>)
 8017f1a:	f7fe fccd 	bl	80168b8 <USBD_Init>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d001      	beq.n	8017f28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017f24:	f7ea f946 	bl	80021b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8017f28:	4910      	ldr	r1, [pc, #64]	@ (8017f6c <MX_USB_DEVICE_Init+0x5c>)
 8017f2a:	480f      	ldr	r0, [pc, #60]	@ (8017f68 <MX_USB_DEVICE_Init+0x58>)
 8017f2c:	f7fe fcf4 	bl	8016918 <USBD_RegisterClass>
 8017f30:	4603      	mov	r3, r0
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d001      	beq.n	8017f3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017f36:	f7ea f93d 	bl	80021b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8017f3a:	490d      	ldr	r1, [pc, #52]	@ (8017f70 <MX_USB_DEVICE_Init+0x60>)
 8017f3c:	480a      	ldr	r0, [pc, #40]	@ (8017f68 <MX_USB_DEVICE_Init+0x58>)
 8017f3e:	f7fe fbeb 	bl	8016718 <USBD_CDC_RegisterInterface>
 8017f42:	4603      	mov	r3, r0
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d001      	beq.n	8017f4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017f48:	f7ea f934 	bl	80021b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8017f4c:	4806      	ldr	r0, [pc, #24]	@ (8017f68 <MX_USB_DEVICE_Init+0x58>)
 8017f4e:	f7fe fd19 	bl	8016984 <USBD_Start>
 8017f52:	4603      	mov	r3, r0
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d001      	beq.n	8017f5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017f58:	f7ea f92c 	bl	80021b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017f5c:	f7f5 f94c 	bl	800d1f8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017f60:	bf00      	nop
 8017f62:	bd80      	pop	{r7, pc}
 8017f64:	240000e0 	.word	0x240000e0
 8017f68:	240136bc 	.word	0x240136bc
 8017f6c:	2400004c 	.word	0x2400004c
 8017f70:	240000cc 	.word	0x240000cc

08017f74 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8017f78:	2200      	movs	r2, #0
 8017f7a:	4905      	ldr	r1, [pc, #20]	@ (8017f90 <CDC_Init_HS+0x1c>)
 8017f7c:	4805      	ldr	r0, [pc, #20]	@ (8017f94 <CDC_Init_HS+0x20>)
 8017f7e:	f7fe fbe5 	bl	801674c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8017f82:	4905      	ldr	r1, [pc, #20]	@ (8017f98 <CDC_Init_HS+0x24>)
 8017f84:	4803      	ldr	r0, [pc, #12]	@ (8017f94 <CDC_Init_HS+0x20>)
 8017f86:	f7fe fc03 	bl	8016790 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017f8a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	bd80      	pop	{r7, pc}
 8017f90:	24014198 	.word	0x24014198
 8017f94:	240136bc 	.word	0x240136bc
 8017f98:	24013998 	.word	0x24013998

08017f9c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8017f9c:	b480      	push	{r7}
 8017f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8017fa0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017faa:	4770      	bx	lr

08017fac <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017fac:	b480      	push	{r7}
 8017fae:	b083      	sub	sp, #12
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	6039      	str	r1, [r7, #0]
 8017fb6:	71fb      	strb	r3, [r7, #7]
 8017fb8:	4613      	mov	r3, r2
 8017fba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8017fbc:	79fb      	ldrb	r3, [r7, #7]
 8017fbe:	2b23      	cmp	r3, #35	@ 0x23
 8017fc0:	d84a      	bhi.n	8018058 <CDC_Control_HS+0xac>
 8017fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8017fc8 <CDC_Control_HS+0x1c>)
 8017fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fc8:	08018059 	.word	0x08018059
 8017fcc:	08018059 	.word	0x08018059
 8017fd0:	08018059 	.word	0x08018059
 8017fd4:	08018059 	.word	0x08018059
 8017fd8:	08018059 	.word	0x08018059
 8017fdc:	08018059 	.word	0x08018059
 8017fe0:	08018059 	.word	0x08018059
 8017fe4:	08018059 	.word	0x08018059
 8017fe8:	08018059 	.word	0x08018059
 8017fec:	08018059 	.word	0x08018059
 8017ff0:	08018059 	.word	0x08018059
 8017ff4:	08018059 	.word	0x08018059
 8017ff8:	08018059 	.word	0x08018059
 8017ffc:	08018059 	.word	0x08018059
 8018000:	08018059 	.word	0x08018059
 8018004:	08018059 	.word	0x08018059
 8018008:	08018059 	.word	0x08018059
 801800c:	08018059 	.word	0x08018059
 8018010:	08018059 	.word	0x08018059
 8018014:	08018059 	.word	0x08018059
 8018018:	08018059 	.word	0x08018059
 801801c:	08018059 	.word	0x08018059
 8018020:	08018059 	.word	0x08018059
 8018024:	08018059 	.word	0x08018059
 8018028:	08018059 	.word	0x08018059
 801802c:	08018059 	.word	0x08018059
 8018030:	08018059 	.word	0x08018059
 8018034:	08018059 	.word	0x08018059
 8018038:	08018059 	.word	0x08018059
 801803c:	08018059 	.word	0x08018059
 8018040:	08018059 	.word	0x08018059
 8018044:	08018059 	.word	0x08018059
 8018048:	08018059 	.word	0x08018059
 801804c:	08018059 	.word	0x08018059
 8018050:	08018059 	.word	0x08018059
 8018054:	08018059 	.word	0x08018059
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018058:	bf00      	nop
  }

  return (USBD_OK);
 801805a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801805c:	4618      	mov	r0, r3
 801805e:	370c      	adds	r7, #12
 8018060:	46bd      	mov	sp, r7
 8018062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018066:	4770      	bx	lr

08018068 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b082      	sub	sp, #8
 801806c:	af00      	add	r7, sp, #0
 801806e:	6078      	str	r0, [r7, #4]
 8018070:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8018072:	6879      	ldr	r1, [r7, #4]
 8018074:	4808      	ldr	r0, [pc, #32]	@ (8018098 <CDC_Receive_HS+0x30>)
 8018076:	f7fe fb8b 	bl	8016790 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801807a:	4807      	ldr	r0, [pc, #28]	@ (8018098 <CDC_Receive_HS+0x30>)
 801807c:	f7fe fbe6 	bl	801684c <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 8018080:	683b      	ldr	r3, [r7, #0]
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	461a      	mov	r2, r3
 8018086:	6879      	ldr	r1, [r7, #4]
 8018088:	4804      	ldr	r0, [pc, #16]	@ (801809c <CDC_Receive_HS+0x34>)
 801808a:	f7ed fc0f 	bl	80058ac <VibeCheckShell_PutInput>

	return (USBD_OK);
 801808e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8018090:	4618      	mov	r0, r3
 8018092:	3708      	adds	r7, #8
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}
 8018098:	240136bc 	.word	0x240136bc
 801809c:	240009b8 	.word	0x240009b8

080180a0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b084      	sub	sp, #16
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
 80180a8:	460b      	mov	r3, r1
 80180aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80180ac:	2300      	movs	r3, #0
 80180ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80180b0:	4b0d      	ldr	r3, [pc, #52]	@ (80180e8 <CDC_Transmit_HS+0x48>)
 80180b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80180b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80180b8:	68bb      	ldr	r3, [r7, #8]
 80180ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d001      	beq.n	80180c6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80180c2:	2301      	movs	r3, #1
 80180c4:	e00b      	b.n	80180de <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80180c6:	887b      	ldrh	r3, [r7, #2]
 80180c8:	461a      	mov	r2, r3
 80180ca:	6879      	ldr	r1, [r7, #4]
 80180cc:	4806      	ldr	r0, [pc, #24]	@ (80180e8 <CDC_Transmit_HS+0x48>)
 80180ce:	f7fe fb3d 	bl	801674c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80180d2:	4805      	ldr	r0, [pc, #20]	@ (80180e8 <CDC_Transmit_HS+0x48>)
 80180d4:	f7fe fb7a 	bl	80167cc <USBD_CDC_TransmitPacket>
 80180d8:	4603      	mov	r3, r0
 80180da:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 12 */
  return result;
 80180dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80180de:	4618      	mov	r0, r3
 80180e0:	3710      	adds	r7, #16
 80180e2:	46bd      	mov	sp, r7
 80180e4:	bd80      	pop	{r7, pc}
 80180e6:	bf00      	nop
 80180e8:	240136bc 	.word	0x240136bc

080180ec <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80180ec:	b480      	push	{r7}
 80180ee:	b087      	sub	sp, #28
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	60f8      	str	r0, [r7, #12]
 80180f4:	60b9      	str	r1, [r7, #8]
 80180f6:	4613      	mov	r3, r2
 80180f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80180fa:	2300      	movs	r3, #0
 80180fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80180fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018102:	4618      	mov	r0, r3
 8018104:	371c      	adds	r7, #28
 8018106:	46bd      	mov	sp, r7
 8018108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801810c:	4770      	bx	lr
	...

08018110 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018110:	b480      	push	{r7}
 8018112:	b083      	sub	sp, #12
 8018114:	af00      	add	r7, sp, #0
 8018116:	4603      	mov	r3, r0
 8018118:	6039      	str	r1, [r7, #0]
 801811a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801811c:	683b      	ldr	r3, [r7, #0]
 801811e:	2212      	movs	r2, #18
 8018120:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8018122:	4b03      	ldr	r3, [pc, #12]	@ (8018130 <USBD_HS_DeviceDescriptor+0x20>)
}
 8018124:	4618      	mov	r0, r3
 8018126:	370c      	adds	r7, #12
 8018128:	46bd      	mov	sp, r7
 801812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812e:	4770      	bx	lr
 8018130:	24000100 	.word	0x24000100

08018134 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018134:	b480      	push	{r7}
 8018136:	b083      	sub	sp, #12
 8018138:	af00      	add	r7, sp, #0
 801813a:	4603      	mov	r3, r0
 801813c:	6039      	str	r1, [r7, #0]
 801813e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018140:	683b      	ldr	r3, [r7, #0]
 8018142:	2204      	movs	r2, #4
 8018144:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018146:	4b03      	ldr	r3, [pc, #12]	@ (8018154 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8018148:	4618      	mov	r0, r3
 801814a:	370c      	adds	r7, #12
 801814c:	46bd      	mov	sp, r7
 801814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018152:	4770      	bx	lr
 8018154:	24000114 	.word	0x24000114

08018158 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b082      	sub	sp, #8
 801815c:	af00      	add	r7, sp, #0
 801815e:	4603      	mov	r3, r0
 8018160:	6039      	str	r1, [r7, #0]
 8018162:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018164:	79fb      	ldrb	r3, [r7, #7]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d105      	bne.n	8018176 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801816a:	683a      	ldr	r2, [r7, #0]
 801816c:	4907      	ldr	r1, [pc, #28]	@ (801818c <USBD_HS_ProductStrDescriptor+0x34>)
 801816e:	4808      	ldr	r0, [pc, #32]	@ (8018190 <USBD_HS_ProductStrDescriptor+0x38>)
 8018170:	f7ff fde2 	bl	8017d38 <USBD_GetString>
 8018174:	e004      	b.n	8018180 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8018176:	683a      	ldr	r2, [r7, #0]
 8018178:	4904      	ldr	r1, [pc, #16]	@ (801818c <USBD_HS_ProductStrDescriptor+0x34>)
 801817a:	4805      	ldr	r0, [pc, #20]	@ (8018190 <USBD_HS_ProductStrDescriptor+0x38>)
 801817c:	f7ff fddc 	bl	8017d38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018180:	4b02      	ldr	r3, [pc, #8]	@ (801818c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8018182:	4618      	mov	r0, r3
 8018184:	3708      	adds	r7, #8
 8018186:	46bd      	mov	sp, r7
 8018188:	bd80      	pop	{r7, pc}
 801818a:	bf00      	nop
 801818c:	24014998 	.word	0x24014998
 8018190:	0801d9d4 	.word	0x0801d9d4

08018194 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b082      	sub	sp, #8
 8018198:	af00      	add	r7, sp, #0
 801819a:	4603      	mov	r3, r0
 801819c:	6039      	str	r1, [r7, #0]
 801819e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80181a0:	683a      	ldr	r2, [r7, #0]
 80181a2:	4904      	ldr	r1, [pc, #16]	@ (80181b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80181a4:	4804      	ldr	r0, [pc, #16]	@ (80181b8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80181a6:	f7ff fdc7 	bl	8017d38 <USBD_GetString>
  return USBD_StrDesc;
 80181aa:	4b02      	ldr	r3, [pc, #8]	@ (80181b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80181ac:	4618      	mov	r0, r3
 80181ae:	3708      	adds	r7, #8
 80181b0:	46bd      	mov	sp, r7
 80181b2:	bd80      	pop	{r7, pc}
 80181b4:	24014998 	.word	0x24014998
 80181b8:	0801d9e0 	.word	0x0801d9e0

080181bc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	b082      	sub	sp, #8
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	4603      	mov	r3, r0
 80181c4:	6039      	str	r1, [r7, #0]
 80181c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80181c8:	683b      	ldr	r3, [r7, #0]
 80181ca:	221a      	movs	r2, #26
 80181cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80181ce:	f000 f843 	bl	8018258 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80181d2:	4b02      	ldr	r3, [pc, #8]	@ (80181dc <USBD_HS_SerialStrDescriptor+0x20>)
}
 80181d4:	4618      	mov	r0, r3
 80181d6:	3708      	adds	r7, #8
 80181d8:	46bd      	mov	sp, r7
 80181da:	bd80      	pop	{r7, pc}
 80181dc:	24000118 	.word	0x24000118

080181e0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b082      	sub	sp, #8
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	4603      	mov	r3, r0
 80181e8:	6039      	str	r1, [r7, #0]
 80181ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80181ec:	79fb      	ldrb	r3, [r7, #7]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d105      	bne.n	80181fe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80181f2:	683a      	ldr	r2, [r7, #0]
 80181f4:	4907      	ldr	r1, [pc, #28]	@ (8018214 <USBD_HS_ConfigStrDescriptor+0x34>)
 80181f6:	4808      	ldr	r0, [pc, #32]	@ (8018218 <USBD_HS_ConfigStrDescriptor+0x38>)
 80181f8:	f7ff fd9e 	bl	8017d38 <USBD_GetString>
 80181fc:	e004      	b.n	8018208 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80181fe:	683a      	ldr	r2, [r7, #0]
 8018200:	4904      	ldr	r1, [pc, #16]	@ (8018214 <USBD_HS_ConfigStrDescriptor+0x34>)
 8018202:	4805      	ldr	r0, [pc, #20]	@ (8018218 <USBD_HS_ConfigStrDescriptor+0x38>)
 8018204:	f7ff fd98 	bl	8017d38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018208:	4b02      	ldr	r3, [pc, #8]	@ (8018214 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801820a:	4618      	mov	r0, r3
 801820c:	3708      	adds	r7, #8
 801820e:	46bd      	mov	sp, r7
 8018210:	bd80      	pop	{r7, pc}
 8018212:	bf00      	nop
 8018214:	24014998 	.word	0x24014998
 8018218:	0801d9ec 	.word	0x0801d9ec

0801821c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b082      	sub	sp, #8
 8018220:	af00      	add	r7, sp, #0
 8018222:	4603      	mov	r3, r0
 8018224:	6039      	str	r1, [r7, #0]
 8018226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018228:	79fb      	ldrb	r3, [r7, #7]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d105      	bne.n	801823a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801822e:	683a      	ldr	r2, [r7, #0]
 8018230:	4907      	ldr	r1, [pc, #28]	@ (8018250 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8018232:	4808      	ldr	r0, [pc, #32]	@ (8018254 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8018234:	f7ff fd80 	bl	8017d38 <USBD_GetString>
 8018238:	e004      	b.n	8018244 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801823a:	683a      	ldr	r2, [r7, #0]
 801823c:	4904      	ldr	r1, [pc, #16]	@ (8018250 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801823e:	4805      	ldr	r0, [pc, #20]	@ (8018254 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8018240:	f7ff fd7a 	bl	8017d38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018244:	4b02      	ldr	r3, [pc, #8]	@ (8018250 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8018246:	4618      	mov	r0, r3
 8018248:	3708      	adds	r7, #8
 801824a:	46bd      	mov	sp, r7
 801824c:	bd80      	pop	{r7, pc}
 801824e:	bf00      	nop
 8018250:	24014998 	.word	0x24014998
 8018254:	0801d9f8 	.word	0x0801d9f8

08018258 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018258:	b580      	push	{r7, lr}
 801825a:	b084      	sub	sp, #16
 801825c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801825e:	4b0f      	ldr	r3, [pc, #60]	@ (801829c <Get_SerialNum+0x44>)
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018264:	4b0e      	ldr	r3, [pc, #56]	@ (80182a0 <Get_SerialNum+0x48>)
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801826a:	4b0e      	ldr	r3, [pc, #56]	@ (80182a4 <Get_SerialNum+0x4c>)
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018270:	68fa      	ldr	r2, [r7, #12]
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	4413      	add	r3, r2
 8018276:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d009      	beq.n	8018292 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801827e:	2208      	movs	r2, #8
 8018280:	4909      	ldr	r1, [pc, #36]	@ (80182a8 <Get_SerialNum+0x50>)
 8018282:	68f8      	ldr	r0, [r7, #12]
 8018284:	f000 f814 	bl	80182b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018288:	2204      	movs	r2, #4
 801828a:	4908      	ldr	r1, [pc, #32]	@ (80182ac <Get_SerialNum+0x54>)
 801828c:	68b8      	ldr	r0, [r7, #8]
 801828e:	f000 f80f 	bl	80182b0 <IntToUnicode>
  }
}
 8018292:	bf00      	nop
 8018294:	3710      	adds	r7, #16
 8018296:	46bd      	mov	sp, r7
 8018298:	bd80      	pop	{r7, pc}
 801829a:	bf00      	nop
 801829c:	1ff1e800 	.word	0x1ff1e800
 80182a0:	1ff1e804 	.word	0x1ff1e804
 80182a4:	1ff1e808 	.word	0x1ff1e808
 80182a8:	2400011a 	.word	0x2400011a
 80182ac:	2400012a 	.word	0x2400012a

080182b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80182b0:	b480      	push	{r7}
 80182b2:	b087      	sub	sp, #28
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	60f8      	str	r0, [r7, #12]
 80182b8:	60b9      	str	r1, [r7, #8]
 80182ba:	4613      	mov	r3, r2
 80182bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80182be:	2300      	movs	r3, #0
 80182c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80182c2:	2300      	movs	r3, #0
 80182c4:	75fb      	strb	r3, [r7, #23]
 80182c6:	e027      	b.n	8018318 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	0f1b      	lsrs	r3, r3, #28
 80182cc:	2b09      	cmp	r3, #9
 80182ce:	d80b      	bhi.n	80182e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	0f1b      	lsrs	r3, r3, #28
 80182d4:	b2da      	uxtb	r2, r3
 80182d6:	7dfb      	ldrb	r3, [r7, #23]
 80182d8:	005b      	lsls	r3, r3, #1
 80182da:	4619      	mov	r1, r3
 80182dc:	68bb      	ldr	r3, [r7, #8]
 80182de:	440b      	add	r3, r1
 80182e0:	3230      	adds	r2, #48	@ 0x30
 80182e2:	b2d2      	uxtb	r2, r2
 80182e4:	701a      	strb	r2, [r3, #0]
 80182e6:	e00a      	b.n	80182fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	0f1b      	lsrs	r3, r3, #28
 80182ec:	b2da      	uxtb	r2, r3
 80182ee:	7dfb      	ldrb	r3, [r7, #23]
 80182f0:	005b      	lsls	r3, r3, #1
 80182f2:	4619      	mov	r1, r3
 80182f4:	68bb      	ldr	r3, [r7, #8]
 80182f6:	440b      	add	r3, r1
 80182f8:	3237      	adds	r2, #55	@ 0x37
 80182fa:	b2d2      	uxtb	r2, r2
 80182fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	011b      	lsls	r3, r3, #4
 8018302:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018304:	7dfb      	ldrb	r3, [r7, #23]
 8018306:	005b      	lsls	r3, r3, #1
 8018308:	3301      	adds	r3, #1
 801830a:	68ba      	ldr	r2, [r7, #8]
 801830c:	4413      	add	r3, r2
 801830e:	2200      	movs	r2, #0
 8018310:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018312:	7dfb      	ldrb	r3, [r7, #23]
 8018314:	3301      	adds	r3, #1
 8018316:	75fb      	strb	r3, [r7, #23]
 8018318:	7dfa      	ldrb	r2, [r7, #23]
 801831a:	79fb      	ldrb	r3, [r7, #7]
 801831c:	429a      	cmp	r2, r3
 801831e:	d3d3      	bcc.n	80182c8 <IntToUnicode+0x18>
  }
}
 8018320:	bf00      	nop
 8018322:	bf00      	nop
 8018324:	371c      	adds	r7, #28
 8018326:	46bd      	mov	sp, r7
 8018328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801832c:	4770      	bx	lr
	...

08018330 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b0b2      	sub	sp, #200	@ 0xc8
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018338:	f107 0310 	add.w	r3, r7, #16
 801833c:	22b8      	movs	r2, #184	@ 0xb8
 801833e:	2100      	movs	r1, #0
 8018340:	4618      	mov	r0, r3
 8018342:	f001 fea6 	bl	801a092 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	4a1a      	ldr	r2, [pc, #104]	@ (80183b4 <HAL_PCD_MspInit+0x84>)
 801834c:	4293      	cmp	r3, r2
 801834e:	d12c      	bne.n	80183aa <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018350:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8018354:	f04f 0300 	mov.w	r3, #0
 8018358:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801835c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8018360:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018364:	f107 0310 	add.w	r3, r7, #16
 8018368:	4618      	mov	r0, r3
 801836a:	f7f5 febb 	bl	800e0e4 <HAL_RCCEx_PeriphCLKConfig>
 801836e:	4603      	mov	r3, r0
 8018370:	2b00      	cmp	r3, #0
 8018372:	d001      	beq.n	8018378 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8018374:	f7e9 ff1e 	bl	80021b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8018378:	f7f4 ff3e 	bl	800d1f8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801837c:	4b0e      	ldr	r3, [pc, #56]	@ (80183b8 <HAL_PCD_MspInit+0x88>)
 801837e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018382:	4a0d      	ldr	r2, [pc, #52]	@ (80183b8 <HAL_PCD_MspInit+0x88>)
 8018384:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8018388:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801838c:	4b0a      	ldr	r3, [pc, #40]	@ (80183b8 <HAL_PCD_MspInit+0x88>)
 801838e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018396:	60fb      	str	r3, [r7, #12]
 8018398:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 1);
 801839a:	2201      	movs	r2, #1
 801839c:	2101      	movs	r1, #1
 801839e:	204d      	movs	r0, #77	@ 0x4d
 80183a0:	f7f0 fcf1 	bl	8008d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80183a4:	204d      	movs	r0, #77	@ 0x4d
 80183a6:	f7f0 fd08 	bl	8008dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80183aa:	bf00      	nop
 80183ac:	37c8      	adds	r7, #200	@ 0xc8
 80183ae:	46bd      	mov	sp, r7
 80183b0:	bd80      	pop	{r7, pc}
 80183b2:	bf00      	nop
 80183b4:	40040000 	.word	0x40040000
 80183b8:	58024400 	.word	0x58024400

080183bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183bc:	b580      	push	{r7, lr}
 80183be:	b082      	sub	sp, #8
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80183d0:	4619      	mov	r1, r3
 80183d2:	4610      	mov	r0, r2
 80183d4:	f7fe fb23 	bl	8016a1e <USBD_LL_SetupStage>
}
 80183d8:	bf00      	nop
 80183da:	3708      	adds	r7, #8
 80183dc:	46bd      	mov	sp, r7
 80183de:	bd80      	pop	{r7, pc}

080183e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b082      	sub	sp, #8
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	6078      	str	r0, [r7, #4]
 80183e8:	460b      	mov	r3, r1
 80183ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80183f2:	78fa      	ldrb	r2, [r7, #3]
 80183f4:	6879      	ldr	r1, [r7, #4]
 80183f6:	4613      	mov	r3, r2
 80183f8:	00db      	lsls	r3, r3, #3
 80183fa:	4413      	add	r3, r2
 80183fc:	009b      	lsls	r3, r3, #2
 80183fe:	440b      	add	r3, r1
 8018400:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018404:	681a      	ldr	r2, [r3, #0]
 8018406:	78fb      	ldrb	r3, [r7, #3]
 8018408:	4619      	mov	r1, r3
 801840a:	f7fe fb5d 	bl	8016ac8 <USBD_LL_DataOutStage>
}
 801840e:	bf00      	nop
 8018410:	3708      	adds	r7, #8
 8018412:	46bd      	mov	sp, r7
 8018414:	bd80      	pop	{r7, pc}

08018416 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018416:	b580      	push	{r7, lr}
 8018418:	b082      	sub	sp, #8
 801841a:	af00      	add	r7, sp, #0
 801841c:	6078      	str	r0, [r7, #4]
 801841e:	460b      	mov	r3, r1
 8018420:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018428:	78fa      	ldrb	r2, [r7, #3]
 801842a:	6879      	ldr	r1, [r7, #4]
 801842c:	4613      	mov	r3, r2
 801842e:	00db      	lsls	r3, r3, #3
 8018430:	4413      	add	r3, r2
 8018432:	009b      	lsls	r3, r3, #2
 8018434:	440b      	add	r3, r1
 8018436:	3320      	adds	r3, #32
 8018438:	681a      	ldr	r2, [r3, #0]
 801843a:	78fb      	ldrb	r3, [r7, #3]
 801843c:	4619      	mov	r1, r3
 801843e:	f7fe fbf6 	bl	8016c2e <USBD_LL_DataInStage>
}
 8018442:	bf00      	nop
 8018444:	3708      	adds	r7, #8
 8018446:	46bd      	mov	sp, r7
 8018448:	bd80      	pop	{r7, pc}

0801844a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801844a:	b580      	push	{r7, lr}
 801844c:	b082      	sub	sp, #8
 801844e:	af00      	add	r7, sp, #0
 8018450:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018458:	4618      	mov	r0, r3
 801845a:	f7fe fd30 	bl	8016ebe <USBD_LL_SOF>
}
 801845e:	bf00      	nop
 8018460:	3708      	adds	r7, #8
 8018462:	46bd      	mov	sp, r7
 8018464:	bd80      	pop	{r7, pc}

08018466 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018466:	b580      	push	{r7, lr}
 8018468:	b084      	sub	sp, #16
 801846a:	af00      	add	r7, sp, #0
 801846c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801846e:	2301      	movs	r3, #1
 8018470:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	79db      	ldrb	r3, [r3, #7]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d102      	bne.n	8018480 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801847a:	2300      	movs	r3, #0
 801847c:	73fb      	strb	r3, [r7, #15]
 801847e:	e008      	b.n	8018492 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	79db      	ldrb	r3, [r3, #7]
 8018484:	2b02      	cmp	r3, #2
 8018486:	d102      	bne.n	801848e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018488:	2301      	movs	r3, #1
 801848a:	73fb      	strb	r3, [r7, #15]
 801848c:	e001      	b.n	8018492 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801848e:	f7e9 fe91 	bl	80021b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018498:	7bfa      	ldrb	r2, [r7, #15]
 801849a:	4611      	mov	r1, r2
 801849c:	4618      	mov	r0, r3
 801849e:	f7fe fcca 	bl	8016e36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80184a8:	4618      	mov	r0, r3
 80184aa:	f7fe fc72 	bl	8016d92 <USBD_LL_Reset>
}
 80184ae:	bf00      	nop
 80184b0:	3710      	adds	r7, #16
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}
	...

080184b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b082      	sub	sp, #8
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80184c6:	4618      	mov	r0, r3
 80184c8:	f7fe fcc5 	bl	8016e56 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	687a      	ldr	r2, [r7, #4]
 80184d8:	6812      	ldr	r2, [r2, #0]
 80184da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80184de:	f043 0301 	orr.w	r3, r3, #1
 80184e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	7adb      	ldrb	r3, [r3, #11]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d005      	beq.n	80184f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80184ec:	4b04      	ldr	r3, [pc, #16]	@ (8018500 <HAL_PCD_SuspendCallback+0x48>)
 80184ee:	691b      	ldr	r3, [r3, #16]
 80184f0:	4a03      	ldr	r2, [pc, #12]	@ (8018500 <HAL_PCD_SuspendCallback+0x48>)
 80184f2:	f043 0306 	orr.w	r3, r3, #6
 80184f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80184f8:	bf00      	nop
 80184fa:	3708      	adds	r7, #8
 80184fc:	46bd      	mov	sp, r7
 80184fe:	bd80      	pop	{r7, pc}
 8018500:	e000ed00 	.word	0xe000ed00

08018504 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018504:	b580      	push	{r7, lr}
 8018506:	b082      	sub	sp, #8
 8018508:	af00      	add	r7, sp, #0
 801850a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018512:	4618      	mov	r0, r3
 8018514:	f7fe fcbb 	bl	8016e8e <USBD_LL_Resume>
}
 8018518:	bf00      	nop
 801851a:	3708      	adds	r7, #8
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}

08018520 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b082      	sub	sp, #8
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
 8018528:	460b      	mov	r3, r1
 801852a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018532:	78fa      	ldrb	r2, [r7, #3]
 8018534:	4611      	mov	r1, r2
 8018536:	4618      	mov	r0, r3
 8018538:	f7fe fd13 	bl	8016f62 <USBD_LL_IsoOUTIncomplete>
}
 801853c:	bf00      	nop
 801853e:	3708      	adds	r7, #8
 8018540:	46bd      	mov	sp, r7
 8018542:	bd80      	pop	{r7, pc}

08018544 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018544:	b580      	push	{r7, lr}
 8018546:	b082      	sub	sp, #8
 8018548:	af00      	add	r7, sp, #0
 801854a:	6078      	str	r0, [r7, #4]
 801854c:	460b      	mov	r3, r1
 801854e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018556:	78fa      	ldrb	r2, [r7, #3]
 8018558:	4611      	mov	r1, r2
 801855a:	4618      	mov	r0, r3
 801855c:	f7fe fccf 	bl	8016efe <USBD_LL_IsoINIncomplete>
}
 8018560:	bf00      	nop
 8018562:	3708      	adds	r7, #8
 8018564:	46bd      	mov	sp, r7
 8018566:	bd80      	pop	{r7, pc}

08018568 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b082      	sub	sp, #8
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018576:	4618      	mov	r0, r3
 8018578:	f7fe fd25 	bl	8016fc6 <USBD_LL_DevConnected>
}
 801857c:	bf00      	nop
 801857e:	3708      	adds	r7, #8
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}

08018584 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b082      	sub	sp, #8
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018592:	4618      	mov	r0, r3
 8018594:	f7fe fd22 	bl	8016fdc <USBD_LL_DevDisconnected>
}
 8018598:	bf00      	nop
 801859a:	3708      	adds	r7, #8
 801859c:	46bd      	mov	sp, r7
 801859e:	bd80      	pop	{r7, pc}

080185a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b082      	sub	sp, #8
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	781b      	ldrb	r3, [r3, #0]
 80185ac:	2b01      	cmp	r3, #1
 80185ae:	d140      	bne.n	8018632 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80185b0:	4a22      	ldr	r2, [pc, #136]	@ (801863c <USBD_LL_Init+0x9c>)
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	4a20      	ldr	r2, [pc, #128]	@ (801863c <USBD_LL_Init+0x9c>)
 80185bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80185c0:	4b1e      	ldr	r3, [pc, #120]	@ (801863c <USBD_LL_Init+0x9c>)
 80185c2:	4a1f      	ldr	r2, [pc, #124]	@ (8018640 <USBD_LL_Init+0xa0>)
 80185c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80185c6:	4b1d      	ldr	r3, [pc, #116]	@ (801863c <USBD_LL_Init+0x9c>)
 80185c8:	2209      	movs	r2, #9
 80185ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80185cc:	4b1b      	ldr	r3, [pc, #108]	@ (801863c <USBD_LL_Init+0x9c>)
 80185ce:	2202      	movs	r2, #2
 80185d0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80185d2:	4b1a      	ldr	r3, [pc, #104]	@ (801863c <USBD_LL_Init+0x9c>)
 80185d4:	2200      	movs	r2, #0
 80185d6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80185d8:	4b18      	ldr	r3, [pc, #96]	@ (801863c <USBD_LL_Init+0x9c>)
 80185da:	2202      	movs	r2, #2
 80185dc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80185de:	4b17      	ldr	r3, [pc, #92]	@ (801863c <USBD_LL_Init+0x9c>)
 80185e0:	2200      	movs	r2, #0
 80185e2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80185e4:	4b15      	ldr	r3, [pc, #84]	@ (801863c <USBD_LL_Init+0x9c>)
 80185e6:	2200      	movs	r2, #0
 80185e8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80185ea:	4b14      	ldr	r3, [pc, #80]	@ (801863c <USBD_LL_Init+0x9c>)
 80185ec:	2200      	movs	r2, #0
 80185ee:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80185f0:	4b12      	ldr	r3, [pc, #72]	@ (801863c <USBD_LL_Init+0x9c>)
 80185f2:	2200      	movs	r2, #0
 80185f4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80185f6:	4b11      	ldr	r3, [pc, #68]	@ (801863c <USBD_LL_Init+0x9c>)
 80185f8:	2200      	movs	r2, #0
 80185fa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80185fc:	4b0f      	ldr	r3, [pc, #60]	@ (801863c <USBD_LL_Init+0x9c>)
 80185fe:	2200      	movs	r2, #0
 8018600:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8018602:	480e      	ldr	r0, [pc, #56]	@ (801863c <USBD_LL_Init+0x9c>)
 8018604:	f7f3 fb1f 	bl	800bc46 <HAL_PCD_Init>
 8018608:	4603      	mov	r3, r0
 801860a:	2b00      	cmp	r3, #0
 801860c:	d001      	beq.n	8018612 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801860e:	f7e9 fdd1 	bl	80021b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8018612:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018616:	4809      	ldr	r0, [pc, #36]	@ (801863c <USBD_LL_Init+0x9c>)
 8018618:	f7f4 fd73 	bl	800d102 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801861c:	2280      	movs	r2, #128	@ 0x80
 801861e:	2100      	movs	r1, #0
 8018620:	4806      	ldr	r0, [pc, #24]	@ (801863c <USBD_LL_Init+0x9c>)
 8018622:	f7f4 fd27 	bl	800d074 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8018626:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801862a:	2101      	movs	r1, #1
 801862c:	4803      	ldr	r0, [pc, #12]	@ (801863c <USBD_LL_Init+0x9c>)
 801862e:	f7f4 fd21 	bl	800d074 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8018632:	2300      	movs	r3, #0
}
 8018634:	4618      	mov	r0, r3
 8018636:	3708      	adds	r7, #8
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}
 801863c:	24014b98 	.word	0x24014b98
 8018640:	40040000 	.word	0x40040000

08018644 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b084      	sub	sp, #16
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801864c:	2300      	movs	r3, #0
 801864e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018650:	2300      	movs	r3, #0
 8018652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801865a:	4618      	mov	r0, r3
 801865c:	f7f3 fbff 	bl	800be5e <HAL_PCD_Start>
 8018660:	4603      	mov	r3, r0
 8018662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018664:	7bfb      	ldrb	r3, [r7, #15]
 8018666:	4618      	mov	r0, r3
 8018668:	f000 f942 	bl	80188f0 <USBD_Get_USB_Status>
 801866c:	4603      	mov	r3, r0
 801866e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018670:	7bbb      	ldrb	r3, [r7, #14]
}
 8018672:	4618      	mov	r0, r3
 8018674:	3710      	adds	r7, #16
 8018676:	46bd      	mov	sp, r7
 8018678:	bd80      	pop	{r7, pc}

0801867a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801867a:	b580      	push	{r7, lr}
 801867c:	b084      	sub	sp, #16
 801867e:	af00      	add	r7, sp, #0
 8018680:	6078      	str	r0, [r7, #4]
 8018682:	4608      	mov	r0, r1
 8018684:	4611      	mov	r1, r2
 8018686:	461a      	mov	r2, r3
 8018688:	4603      	mov	r3, r0
 801868a:	70fb      	strb	r3, [r7, #3]
 801868c:	460b      	mov	r3, r1
 801868e:	70bb      	strb	r3, [r7, #2]
 8018690:	4613      	mov	r3, r2
 8018692:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018694:	2300      	movs	r3, #0
 8018696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018698:	2300      	movs	r3, #0
 801869a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80186a2:	78bb      	ldrb	r3, [r7, #2]
 80186a4:	883a      	ldrh	r2, [r7, #0]
 80186a6:	78f9      	ldrb	r1, [r7, #3]
 80186a8:	f7f4 f900 	bl	800c8ac <HAL_PCD_EP_Open>
 80186ac:	4603      	mov	r3, r0
 80186ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186b0:	7bfb      	ldrb	r3, [r7, #15]
 80186b2:	4618      	mov	r0, r3
 80186b4:	f000 f91c 	bl	80188f0 <USBD_Get_USB_Status>
 80186b8:	4603      	mov	r3, r0
 80186ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80186bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80186be:	4618      	mov	r0, r3
 80186c0:	3710      	adds	r7, #16
 80186c2:	46bd      	mov	sp, r7
 80186c4:	bd80      	pop	{r7, pc}

080186c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186c6:	b580      	push	{r7, lr}
 80186c8:	b084      	sub	sp, #16
 80186ca:	af00      	add	r7, sp, #0
 80186cc:	6078      	str	r0, [r7, #4]
 80186ce:	460b      	mov	r3, r1
 80186d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80186d2:	2300      	movs	r3, #0
 80186d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80186d6:	2300      	movs	r3, #0
 80186d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80186e0:	78fa      	ldrb	r2, [r7, #3]
 80186e2:	4611      	mov	r1, r2
 80186e4:	4618      	mov	r0, r3
 80186e6:	f7f4 f949 	bl	800c97c <HAL_PCD_EP_Close>
 80186ea:	4603      	mov	r3, r0
 80186ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186ee:	7bfb      	ldrb	r3, [r7, #15]
 80186f0:	4618      	mov	r0, r3
 80186f2:	f000 f8fd 	bl	80188f0 <USBD_Get_USB_Status>
 80186f6:	4603      	mov	r3, r0
 80186f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80186fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80186fc:	4618      	mov	r0, r3
 80186fe:	3710      	adds	r7, #16
 8018700:	46bd      	mov	sp, r7
 8018702:	bd80      	pop	{r7, pc}

08018704 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b084      	sub	sp, #16
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
 801870c:	460b      	mov	r3, r1
 801870e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018710:	2300      	movs	r3, #0
 8018712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018714:	2300      	movs	r3, #0
 8018716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801871e:	78fa      	ldrb	r2, [r7, #3]
 8018720:	4611      	mov	r1, r2
 8018722:	4618      	mov	r0, r3
 8018724:	f7f4 fa01 	bl	800cb2a <HAL_PCD_EP_SetStall>
 8018728:	4603      	mov	r3, r0
 801872a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801872c:	7bfb      	ldrb	r3, [r7, #15]
 801872e:	4618      	mov	r0, r3
 8018730:	f000 f8de 	bl	80188f0 <USBD_Get_USB_Status>
 8018734:	4603      	mov	r3, r0
 8018736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018738:	7bbb      	ldrb	r3, [r7, #14]
}
 801873a:	4618      	mov	r0, r3
 801873c:	3710      	adds	r7, #16
 801873e:	46bd      	mov	sp, r7
 8018740:	bd80      	pop	{r7, pc}

08018742 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018742:	b580      	push	{r7, lr}
 8018744:	b084      	sub	sp, #16
 8018746:	af00      	add	r7, sp, #0
 8018748:	6078      	str	r0, [r7, #4]
 801874a:	460b      	mov	r3, r1
 801874c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801874e:	2300      	movs	r3, #0
 8018750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018752:	2300      	movs	r3, #0
 8018754:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801875c:	78fa      	ldrb	r2, [r7, #3]
 801875e:	4611      	mov	r1, r2
 8018760:	4618      	mov	r0, r3
 8018762:	f7f4 fa45 	bl	800cbf0 <HAL_PCD_EP_ClrStall>
 8018766:	4603      	mov	r3, r0
 8018768:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801876a:	7bfb      	ldrb	r3, [r7, #15]
 801876c:	4618      	mov	r0, r3
 801876e:	f000 f8bf 	bl	80188f0 <USBD_Get_USB_Status>
 8018772:	4603      	mov	r3, r0
 8018774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018776:	7bbb      	ldrb	r3, [r7, #14]
}
 8018778:	4618      	mov	r0, r3
 801877a:	3710      	adds	r7, #16
 801877c:	46bd      	mov	sp, r7
 801877e:	bd80      	pop	{r7, pc}

08018780 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018780:	b480      	push	{r7}
 8018782:	b085      	sub	sp, #20
 8018784:	af00      	add	r7, sp, #0
 8018786:	6078      	str	r0, [r7, #4]
 8018788:	460b      	mov	r3, r1
 801878a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018792:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018798:	2b00      	cmp	r3, #0
 801879a:	da0b      	bge.n	80187b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801879c:	78fb      	ldrb	r3, [r7, #3]
 801879e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80187a2:	68f9      	ldr	r1, [r7, #12]
 80187a4:	4613      	mov	r3, r2
 80187a6:	00db      	lsls	r3, r3, #3
 80187a8:	4413      	add	r3, r2
 80187aa:	009b      	lsls	r3, r3, #2
 80187ac:	440b      	add	r3, r1
 80187ae:	3316      	adds	r3, #22
 80187b0:	781b      	ldrb	r3, [r3, #0]
 80187b2:	e00b      	b.n	80187cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80187b4:	78fb      	ldrb	r3, [r7, #3]
 80187b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80187ba:	68f9      	ldr	r1, [r7, #12]
 80187bc:	4613      	mov	r3, r2
 80187be:	00db      	lsls	r3, r3, #3
 80187c0:	4413      	add	r3, r2
 80187c2:	009b      	lsls	r3, r3, #2
 80187c4:	440b      	add	r3, r1
 80187c6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80187ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80187cc:	4618      	mov	r0, r3
 80187ce:	3714      	adds	r7, #20
 80187d0:	46bd      	mov	sp, r7
 80187d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187d6:	4770      	bx	lr

080187d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b084      	sub	sp, #16
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
 80187e0:	460b      	mov	r3, r1
 80187e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187e4:	2300      	movs	r3, #0
 80187e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187e8:	2300      	movs	r3, #0
 80187ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80187f2:	78fa      	ldrb	r2, [r7, #3]
 80187f4:	4611      	mov	r1, r2
 80187f6:	4618      	mov	r0, r3
 80187f8:	f7f4 f834 	bl	800c864 <HAL_PCD_SetAddress>
 80187fc:	4603      	mov	r3, r0
 80187fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018800:	7bfb      	ldrb	r3, [r7, #15]
 8018802:	4618      	mov	r0, r3
 8018804:	f000 f874 	bl	80188f0 <USBD_Get_USB_Status>
 8018808:	4603      	mov	r3, r0
 801880a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801880c:	7bbb      	ldrb	r3, [r7, #14]
}
 801880e:	4618      	mov	r0, r3
 8018810:	3710      	adds	r7, #16
 8018812:	46bd      	mov	sp, r7
 8018814:	bd80      	pop	{r7, pc}

08018816 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018816:	b580      	push	{r7, lr}
 8018818:	b086      	sub	sp, #24
 801881a:	af00      	add	r7, sp, #0
 801881c:	60f8      	str	r0, [r7, #12]
 801881e:	607a      	str	r2, [r7, #4]
 8018820:	603b      	str	r3, [r7, #0]
 8018822:	460b      	mov	r3, r1
 8018824:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018826:	2300      	movs	r3, #0
 8018828:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801882a:	2300      	movs	r3, #0
 801882c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018834:	7af9      	ldrb	r1, [r7, #11]
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	687a      	ldr	r2, [r7, #4]
 801883a:	f7f4 f93c 	bl	800cab6 <HAL_PCD_EP_Transmit>
 801883e:	4603      	mov	r3, r0
 8018840:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018842:	7dfb      	ldrb	r3, [r7, #23]
 8018844:	4618      	mov	r0, r3
 8018846:	f000 f853 	bl	80188f0 <USBD_Get_USB_Status>
 801884a:	4603      	mov	r3, r0
 801884c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801884e:	7dbb      	ldrb	r3, [r7, #22]
}
 8018850:	4618      	mov	r0, r3
 8018852:	3718      	adds	r7, #24
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}

08018858 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b086      	sub	sp, #24
 801885c:	af00      	add	r7, sp, #0
 801885e:	60f8      	str	r0, [r7, #12]
 8018860:	607a      	str	r2, [r7, #4]
 8018862:	603b      	str	r3, [r7, #0]
 8018864:	460b      	mov	r3, r1
 8018866:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018868:	2300      	movs	r3, #0
 801886a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801886c:	2300      	movs	r3, #0
 801886e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018876:	7af9      	ldrb	r1, [r7, #11]
 8018878:	683b      	ldr	r3, [r7, #0]
 801887a:	687a      	ldr	r2, [r7, #4]
 801887c:	f7f4 f8c8 	bl	800ca10 <HAL_PCD_EP_Receive>
 8018880:	4603      	mov	r3, r0
 8018882:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018884:	7dfb      	ldrb	r3, [r7, #23]
 8018886:	4618      	mov	r0, r3
 8018888:	f000 f832 	bl	80188f0 <USBD_Get_USB_Status>
 801888c:	4603      	mov	r3, r0
 801888e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018890:	7dbb      	ldrb	r3, [r7, #22]
}
 8018892:	4618      	mov	r0, r3
 8018894:	3718      	adds	r7, #24
 8018896:	46bd      	mov	sp, r7
 8018898:	bd80      	pop	{r7, pc}

0801889a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801889a:	b580      	push	{r7, lr}
 801889c:	b082      	sub	sp, #8
 801889e:	af00      	add	r7, sp, #0
 80188a0:	6078      	str	r0, [r7, #4]
 80188a2:	460b      	mov	r3, r1
 80188a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80188ac:	78fa      	ldrb	r2, [r7, #3]
 80188ae:	4611      	mov	r1, r2
 80188b0:	4618      	mov	r0, r3
 80188b2:	f7f4 f8e8 	bl	800ca86 <HAL_PCD_EP_GetRxCount>
 80188b6:	4603      	mov	r3, r0
}
 80188b8:	4618      	mov	r0, r3
 80188ba:	3708      	adds	r7, #8
 80188bc:	46bd      	mov	sp, r7
 80188be:	bd80      	pop	{r7, pc}

080188c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80188c0:	b480      	push	{r7}
 80188c2:	b083      	sub	sp, #12
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80188c8:	4b03      	ldr	r3, [pc, #12]	@ (80188d8 <USBD_static_malloc+0x18>)
}
 80188ca:	4618      	mov	r0, r3
 80188cc:	370c      	adds	r7, #12
 80188ce:	46bd      	mov	sp, r7
 80188d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188d4:	4770      	bx	lr
 80188d6:	bf00      	nop
 80188d8:	2401507c 	.word	0x2401507c

080188dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80188dc:	b480      	push	{r7}
 80188de:	b083      	sub	sp, #12
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80188e4:	bf00      	nop
 80188e6:	370c      	adds	r7, #12
 80188e8:	46bd      	mov	sp, r7
 80188ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ee:	4770      	bx	lr

080188f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80188f0:	b480      	push	{r7}
 80188f2:	b085      	sub	sp, #20
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	4603      	mov	r3, r0
 80188f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188fa:	2300      	movs	r3, #0
 80188fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80188fe:	79fb      	ldrb	r3, [r7, #7]
 8018900:	2b03      	cmp	r3, #3
 8018902:	d817      	bhi.n	8018934 <USBD_Get_USB_Status+0x44>
 8018904:	a201      	add	r2, pc, #4	@ (adr r2, 801890c <USBD_Get_USB_Status+0x1c>)
 8018906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801890a:	bf00      	nop
 801890c:	0801891d 	.word	0x0801891d
 8018910:	08018923 	.word	0x08018923
 8018914:	08018929 	.word	0x08018929
 8018918:	0801892f 	.word	0x0801892f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801891c:	2300      	movs	r3, #0
 801891e:	73fb      	strb	r3, [r7, #15]
    break;
 8018920:	e00b      	b.n	801893a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018922:	2303      	movs	r3, #3
 8018924:	73fb      	strb	r3, [r7, #15]
    break;
 8018926:	e008      	b.n	801893a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018928:	2301      	movs	r3, #1
 801892a:	73fb      	strb	r3, [r7, #15]
    break;
 801892c:	e005      	b.n	801893a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801892e:	2303      	movs	r3, #3
 8018930:	73fb      	strb	r3, [r7, #15]
    break;
 8018932:	e002      	b.n	801893a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018934:	2303      	movs	r3, #3
 8018936:	73fb      	strb	r3, [r7, #15]
    break;
 8018938:	bf00      	nop
  }
  return usb_status;
 801893a:	7bfb      	ldrb	r3, [r7, #15]
}
 801893c:	4618      	mov	r0, r3
 801893e:	3714      	adds	r7, #20
 8018940:	46bd      	mov	sp, r7
 8018942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018946:	4770      	bx	lr

08018948 <atof>:
 8018948:	2100      	movs	r1, #0
 801894a:	f000 bdb7 	b.w	80194bc <strtod>

0801894e <atoi>:
 801894e:	220a      	movs	r2, #10
 8018950:	2100      	movs	r1, #0
 8018952:	f000 be39 	b.w	80195c8 <strtol>

08018956 <sulp>:
 8018956:	b570      	push	{r4, r5, r6, lr}
 8018958:	4604      	mov	r4, r0
 801895a:	460d      	mov	r5, r1
 801895c:	4616      	mov	r6, r2
 801895e:	ec45 4b10 	vmov	d0, r4, r5
 8018962:	f003 f9eb 	bl	801bd3c <__ulp>
 8018966:	b17e      	cbz	r6, 8018988 <sulp+0x32>
 8018968:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801896c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018970:	2b00      	cmp	r3, #0
 8018972:	dd09      	ble.n	8018988 <sulp+0x32>
 8018974:	051b      	lsls	r3, r3, #20
 8018976:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801897a:	2000      	movs	r0, #0
 801897c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8018980:	ec41 0b17 	vmov	d7, r0, r1
 8018984:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018988:	bd70      	pop	{r4, r5, r6, pc}
 801898a:	0000      	movs	r0, r0
 801898c:	0000      	movs	r0, r0
	...

08018990 <_strtod_l>:
 8018990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018994:	ed2d 8b0a 	vpush	{d8-d12}
 8018998:	b097      	sub	sp, #92	@ 0x5c
 801899a:	4688      	mov	r8, r1
 801899c:	920e      	str	r2, [sp, #56]	@ 0x38
 801899e:	2200      	movs	r2, #0
 80189a0:	9212      	str	r2, [sp, #72]	@ 0x48
 80189a2:	9005      	str	r0, [sp, #20]
 80189a4:	f04f 0a00 	mov.w	sl, #0
 80189a8:	f04f 0b00 	mov.w	fp, #0
 80189ac:	460a      	mov	r2, r1
 80189ae:	9211      	str	r2, [sp, #68]	@ 0x44
 80189b0:	7811      	ldrb	r1, [r2, #0]
 80189b2:	292b      	cmp	r1, #43	@ 0x2b
 80189b4:	d04c      	beq.n	8018a50 <_strtod_l+0xc0>
 80189b6:	d839      	bhi.n	8018a2c <_strtod_l+0x9c>
 80189b8:	290d      	cmp	r1, #13
 80189ba:	d833      	bhi.n	8018a24 <_strtod_l+0x94>
 80189bc:	2908      	cmp	r1, #8
 80189be:	d833      	bhi.n	8018a28 <_strtod_l+0x98>
 80189c0:	2900      	cmp	r1, #0
 80189c2:	d03c      	beq.n	8018a3e <_strtod_l+0xae>
 80189c4:	2200      	movs	r2, #0
 80189c6:	9208      	str	r2, [sp, #32]
 80189c8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80189ca:	782a      	ldrb	r2, [r5, #0]
 80189cc:	2a30      	cmp	r2, #48	@ 0x30
 80189ce:	f040 80b5 	bne.w	8018b3c <_strtod_l+0x1ac>
 80189d2:	786a      	ldrb	r2, [r5, #1]
 80189d4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80189d8:	2a58      	cmp	r2, #88	@ 0x58
 80189da:	d170      	bne.n	8018abe <_strtod_l+0x12e>
 80189dc:	9302      	str	r3, [sp, #8]
 80189de:	9b08      	ldr	r3, [sp, #32]
 80189e0:	9301      	str	r3, [sp, #4]
 80189e2:	ab12      	add	r3, sp, #72	@ 0x48
 80189e4:	9300      	str	r3, [sp, #0]
 80189e6:	4a8b      	ldr	r2, [pc, #556]	@ (8018c14 <_strtod_l+0x284>)
 80189e8:	9805      	ldr	r0, [sp, #20]
 80189ea:	ab13      	add	r3, sp, #76	@ 0x4c
 80189ec:	a911      	add	r1, sp, #68	@ 0x44
 80189ee:	f002 fa97 	bl	801af20 <__gethex>
 80189f2:	f010 060f 	ands.w	r6, r0, #15
 80189f6:	4604      	mov	r4, r0
 80189f8:	d005      	beq.n	8018a06 <_strtod_l+0x76>
 80189fa:	2e06      	cmp	r6, #6
 80189fc:	d12a      	bne.n	8018a54 <_strtod_l+0xc4>
 80189fe:	3501      	adds	r5, #1
 8018a00:	2300      	movs	r3, #0
 8018a02:	9511      	str	r5, [sp, #68]	@ 0x44
 8018a04:	9308      	str	r3, [sp, #32]
 8018a06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	f040 852f 	bne.w	801946c <_strtod_l+0xadc>
 8018a0e:	9b08      	ldr	r3, [sp, #32]
 8018a10:	ec4b ab10 	vmov	d0, sl, fp
 8018a14:	b1cb      	cbz	r3, 8018a4a <_strtod_l+0xba>
 8018a16:	eeb1 0b40 	vneg.f64	d0, d0
 8018a1a:	b017      	add	sp, #92	@ 0x5c
 8018a1c:	ecbd 8b0a 	vpop	{d8-d12}
 8018a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a24:	2920      	cmp	r1, #32
 8018a26:	d1cd      	bne.n	80189c4 <_strtod_l+0x34>
 8018a28:	3201      	adds	r2, #1
 8018a2a:	e7c0      	b.n	80189ae <_strtod_l+0x1e>
 8018a2c:	292d      	cmp	r1, #45	@ 0x2d
 8018a2e:	d1c9      	bne.n	80189c4 <_strtod_l+0x34>
 8018a30:	2101      	movs	r1, #1
 8018a32:	9108      	str	r1, [sp, #32]
 8018a34:	1c51      	adds	r1, r2, #1
 8018a36:	9111      	str	r1, [sp, #68]	@ 0x44
 8018a38:	7852      	ldrb	r2, [r2, #1]
 8018a3a:	2a00      	cmp	r2, #0
 8018a3c:	d1c4      	bne.n	80189c8 <_strtod_l+0x38>
 8018a3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a40:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	f040 850f 	bne.w	8019468 <_strtod_l+0xad8>
 8018a4a:	ec4b ab10 	vmov	d0, sl, fp
 8018a4e:	e7e4      	b.n	8018a1a <_strtod_l+0x8a>
 8018a50:	2100      	movs	r1, #0
 8018a52:	e7ee      	b.n	8018a32 <_strtod_l+0xa2>
 8018a54:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018a56:	b13a      	cbz	r2, 8018a68 <_strtod_l+0xd8>
 8018a58:	2135      	movs	r1, #53	@ 0x35
 8018a5a:	a814      	add	r0, sp, #80	@ 0x50
 8018a5c:	f003 fa65 	bl	801bf2a <__copybits>
 8018a60:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018a62:	9805      	ldr	r0, [sp, #20]
 8018a64:	f002 fe36 	bl	801b6d4 <_Bfree>
 8018a68:	1e73      	subs	r3, r6, #1
 8018a6a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018a6c:	2b04      	cmp	r3, #4
 8018a6e:	d806      	bhi.n	8018a7e <_strtod_l+0xee>
 8018a70:	e8df f003 	tbb	[pc, r3]
 8018a74:	201d0314 	.word	0x201d0314
 8018a78:	14          	.byte	0x14
 8018a79:	00          	.byte	0x00
 8018a7a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8018a7e:	05e3      	lsls	r3, r4, #23
 8018a80:	bf48      	it	mi
 8018a82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8018a86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018a8a:	0d1b      	lsrs	r3, r3, #20
 8018a8c:	051b      	lsls	r3, r3, #20
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d1b9      	bne.n	8018a06 <_strtod_l+0x76>
 8018a92:	f001 fb6f 	bl	801a174 <__errno>
 8018a96:	2322      	movs	r3, #34	@ 0x22
 8018a98:	6003      	str	r3, [r0, #0]
 8018a9a:	e7b4      	b.n	8018a06 <_strtod_l+0x76>
 8018a9c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8018aa0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8018aa4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8018aa8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018aac:	e7e7      	b.n	8018a7e <_strtod_l+0xee>
 8018aae:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8018c1c <_strtod_l+0x28c>
 8018ab2:	e7e4      	b.n	8018a7e <_strtod_l+0xee>
 8018ab4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8018ab8:	f04f 3aff 	mov.w	sl, #4294967295
 8018abc:	e7df      	b.n	8018a7e <_strtod_l+0xee>
 8018abe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018ac0:	1c5a      	adds	r2, r3, #1
 8018ac2:	9211      	str	r2, [sp, #68]	@ 0x44
 8018ac4:	785b      	ldrb	r3, [r3, #1]
 8018ac6:	2b30      	cmp	r3, #48	@ 0x30
 8018ac8:	d0f9      	beq.n	8018abe <_strtod_l+0x12e>
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d09b      	beq.n	8018a06 <_strtod_l+0x76>
 8018ace:	2301      	movs	r3, #1
 8018ad0:	2600      	movs	r6, #0
 8018ad2:	9307      	str	r3, [sp, #28]
 8018ad4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8018ad8:	46b1      	mov	r9, r6
 8018ada:	4635      	mov	r5, r6
 8018adc:	220a      	movs	r2, #10
 8018ade:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018ae0:	7804      	ldrb	r4, [r0, #0]
 8018ae2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8018ae6:	b2d9      	uxtb	r1, r3
 8018ae8:	2909      	cmp	r1, #9
 8018aea:	d929      	bls.n	8018b40 <_strtod_l+0x1b0>
 8018aec:	494a      	ldr	r1, [pc, #296]	@ (8018c18 <_strtod_l+0x288>)
 8018aee:	2201      	movs	r2, #1
 8018af0:	f001 fae4 	bl	801a0bc <strncmp>
 8018af4:	b378      	cbz	r0, 8018b56 <_strtod_l+0x1c6>
 8018af6:	2000      	movs	r0, #0
 8018af8:	4622      	mov	r2, r4
 8018afa:	462b      	mov	r3, r5
 8018afc:	4607      	mov	r7, r0
 8018afe:	9006      	str	r0, [sp, #24]
 8018b00:	2a65      	cmp	r2, #101	@ 0x65
 8018b02:	d001      	beq.n	8018b08 <_strtod_l+0x178>
 8018b04:	2a45      	cmp	r2, #69	@ 0x45
 8018b06:	d117      	bne.n	8018b38 <_strtod_l+0x1a8>
 8018b08:	b91b      	cbnz	r3, 8018b12 <_strtod_l+0x182>
 8018b0a:	9b07      	ldr	r3, [sp, #28]
 8018b0c:	4303      	orrs	r3, r0
 8018b0e:	d096      	beq.n	8018a3e <_strtod_l+0xae>
 8018b10:	2300      	movs	r3, #0
 8018b12:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8018b16:	f108 0201 	add.w	r2, r8, #1
 8018b1a:	9211      	str	r2, [sp, #68]	@ 0x44
 8018b1c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018b20:	2a2b      	cmp	r2, #43	@ 0x2b
 8018b22:	d06b      	beq.n	8018bfc <_strtod_l+0x26c>
 8018b24:	2a2d      	cmp	r2, #45	@ 0x2d
 8018b26:	d071      	beq.n	8018c0c <_strtod_l+0x27c>
 8018b28:	f04f 0e00 	mov.w	lr, #0
 8018b2c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018b30:	2c09      	cmp	r4, #9
 8018b32:	d979      	bls.n	8018c28 <_strtod_l+0x298>
 8018b34:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8018b38:	2400      	movs	r4, #0
 8018b3a:	e094      	b.n	8018c66 <_strtod_l+0x2d6>
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	e7c7      	b.n	8018ad0 <_strtod_l+0x140>
 8018b40:	2d08      	cmp	r5, #8
 8018b42:	f100 0001 	add.w	r0, r0, #1
 8018b46:	bfd4      	ite	le
 8018b48:	fb02 3909 	mlale	r9, r2, r9, r3
 8018b4c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8018b50:	3501      	adds	r5, #1
 8018b52:	9011      	str	r0, [sp, #68]	@ 0x44
 8018b54:	e7c3      	b.n	8018ade <_strtod_l+0x14e>
 8018b56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018b58:	1c5a      	adds	r2, r3, #1
 8018b5a:	9211      	str	r2, [sp, #68]	@ 0x44
 8018b5c:	785a      	ldrb	r2, [r3, #1]
 8018b5e:	b375      	cbz	r5, 8018bbe <_strtod_l+0x22e>
 8018b60:	4607      	mov	r7, r0
 8018b62:	462b      	mov	r3, r5
 8018b64:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8018b68:	2909      	cmp	r1, #9
 8018b6a:	d913      	bls.n	8018b94 <_strtod_l+0x204>
 8018b6c:	2101      	movs	r1, #1
 8018b6e:	9106      	str	r1, [sp, #24]
 8018b70:	e7c6      	b.n	8018b00 <_strtod_l+0x170>
 8018b72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018b74:	1c5a      	adds	r2, r3, #1
 8018b76:	9211      	str	r2, [sp, #68]	@ 0x44
 8018b78:	785a      	ldrb	r2, [r3, #1]
 8018b7a:	3001      	adds	r0, #1
 8018b7c:	2a30      	cmp	r2, #48	@ 0x30
 8018b7e:	d0f8      	beq.n	8018b72 <_strtod_l+0x1e2>
 8018b80:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8018b84:	2b08      	cmp	r3, #8
 8018b86:	f200 8476 	bhi.w	8019476 <_strtod_l+0xae6>
 8018b8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018b8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8018b8e:	4607      	mov	r7, r0
 8018b90:	2000      	movs	r0, #0
 8018b92:	4603      	mov	r3, r0
 8018b94:	3a30      	subs	r2, #48	@ 0x30
 8018b96:	f100 0101 	add.w	r1, r0, #1
 8018b9a:	d023      	beq.n	8018be4 <_strtod_l+0x254>
 8018b9c:	440f      	add	r7, r1
 8018b9e:	eb00 0c03 	add.w	ip, r0, r3
 8018ba2:	4619      	mov	r1, r3
 8018ba4:	240a      	movs	r4, #10
 8018ba6:	4561      	cmp	r1, ip
 8018ba8:	d10b      	bne.n	8018bc2 <_strtod_l+0x232>
 8018baa:	1c5c      	adds	r4, r3, #1
 8018bac:	4403      	add	r3, r0
 8018bae:	2b08      	cmp	r3, #8
 8018bb0:	4404      	add	r4, r0
 8018bb2:	dc11      	bgt.n	8018bd8 <_strtod_l+0x248>
 8018bb4:	230a      	movs	r3, #10
 8018bb6:	fb03 2909 	mla	r9, r3, r9, r2
 8018bba:	2100      	movs	r1, #0
 8018bbc:	e013      	b.n	8018be6 <_strtod_l+0x256>
 8018bbe:	4628      	mov	r0, r5
 8018bc0:	e7dc      	b.n	8018b7c <_strtod_l+0x1ec>
 8018bc2:	2908      	cmp	r1, #8
 8018bc4:	f101 0101 	add.w	r1, r1, #1
 8018bc8:	dc02      	bgt.n	8018bd0 <_strtod_l+0x240>
 8018bca:	fb04 f909 	mul.w	r9, r4, r9
 8018bce:	e7ea      	b.n	8018ba6 <_strtod_l+0x216>
 8018bd0:	2910      	cmp	r1, #16
 8018bd2:	bfd8      	it	le
 8018bd4:	4366      	mulle	r6, r4
 8018bd6:	e7e6      	b.n	8018ba6 <_strtod_l+0x216>
 8018bd8:	2b0f      	cmp	r3, #15
 8018bda:	dcee      	bgt.n	8018bba <_strtod_l+0x22a>
 8018bdc:	230a      	movs	r3, #10
 8018bde:	fb03 2606 	mla	r6, r3, r6, r2
 8018be2:	e7ea      	b.n	8018bba <_strtod_l+0x22a>
 8018be4:	461c      	mov	r4, r3
 8018be6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018be8:	1c5a      	adds	r2, r3, #1
 8018bea:	9211      	str	r2, [sp, #68]	@ 0x44
 8018bec:	785a      	ldrb	r2, [r3, #1]
 8018bee:	4608      	mov	r0, r1
 8018bf0:	4623      	mov	r3, r4
 8018bf2:	e7b7      	b.n	8018b64 <_strtod_l+0x1d4>
 8018bf4:	2301      	movs	r3, #1
 8018bf6:	2700      	movs	r7, #0
 8018bf8:	9306      	str	r3, [sp, #24]
 8018bfa:	e786      	b.n	8018b0a <_strtod_l+0x17a>
 8018bfc:	f04f 0e00 	mov.w	lr, #0
 8018c00:	f108 0202 	add.w	r2, r8, #2
 8018c04:	9211      	str	r2, [sp, #68]	@ 0x44
 8018c06:	f898 2002 	ldrb.w	r2, [r8, #2]
 8018c0a:	e78f      	b.n	8018b2c <_strtod_l+0x19c>
 8018c0c:	f04f 0e01 	mov.w	lr, #1
 8018c10:	e7f6      	b.n	8018c00 <_strtod_l+0x270>
 8018c12:	bf00      	nop
 8018c14:	0801e348 	.word	0x0801e348
 8018c18:	0801e330 	.word	0x0801e330
 8018c1c:	7ff00000 	.word	0x7ff00000
 8018c20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018c22:	1c54      	adds	r4, r2, #1
 8018c24:	9411      	str	r4, [sp, #68]	@ 0x44
 8018c26:	7852      	ldrb	r2, [r2, #1]
 8018c28:	2a30      	cmp	r2, #48	@ 0x30
 8018c2a:	d0f9      	beq.n	8018c20 <_strtod_l+0x290>
 8018c2c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8018c30:	2c08      	cmp	r4, #8
 8018c32:	d881      	bhi.n	8018b38 <_strtod_l+0x1a8>
 8018c34:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8018c38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c3c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018c3e:	1c51      	adds	r1, r2, #1
 8018c40:	9111      	str	r1, [sp, #68]	@ 0x44
 8018c42:	7852      	ldrb	r2, [r2, #1]
 8018c44:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018c48:	2c09      	cmp	r4, #9
 8018c4a:	d938      	bls.n	8018cbe <_strtod_l+0x32e>
 8018c4c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018c4e:	1b0c      	subs	r4, r1, r4
 8018c50:	2c08      	cmp	r4, #8
 8018c52:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8018c56:	dc02      	bgt.n	8018c5e <_strtod_l+0x2ce>
 8018c58:	4564      	cmp	r4, ip
 8018c5a:	bfa8      	it	ge
 8018c5c:	4664      	movge	r4, ip
 8018c5e:	f1be 0f00 	cmp.w	lr, #0
 8018c62:	d000      	beq.n	8018c66 <_strtod_l+0x2d6>
 8018c64:	4264      	negs	r4, r4
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d14e      	bne.n	8018d08 <_strtod_l+0x378>
 8018c6a:	9b07      	ldr	r3, [sp, #28]
 8018c6c:	4318      	orrs	r0, r3
 8018c6e:	f47f aeca 	bne.w	8018a06 <_strtod_l+0x76>
 8018c72:	9b06      	ldr	r3, [sp, #24]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	f47f aee2 	bne.w	8018a3e <_strtod_l+0xae>
 8018c7a:	2a69      	cmp	r2, #105	@ 0x69
 8018c7c:	d027      	beq.n	8018cce <_strtod_l+0x33e>
 8018c7e:	dc24      	bgt.n	8018cca <_strtod_l+0x33a>
 8018c80:	2a49      	cmp	r2, #73	@ 0x49
 8018c82:	d024      	beq.n	8018cce <_strtod_l+0x33e>
 8018c84:	2a4e      	cmp	r2, #78	@ 0x4e
 8018c86:	f47f aeda 	bne.w	8018a3e <_strtod_l+0xae>
 8018c8a:	4997      	ldr	r1, [pc, #604]	@ (8018ee8 <_strtod_l+0x558>)
 8018c8c:	a811      	add	r0, sp, #68	@ 0x44
 8018c8e:	f002 fb69 	bl	801b364 <__match>
 8018c92:	2800      	cmp	r0, #0
 8018c94:	f43f aed3 	beq.w	8018a3e <_strtod_l+0xae>
 8018c98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018c9a:	781b      	ldrb	r3, [r3, #0]
 8018c9c:	2b28      	cmp	r3, #40	@ 0x28
 8018c9e:	d12d      	bne.n	8018cfc <_strtod_l+0x36c>
 8018ca0:	4992      	ldr	r1, [pc, #584]	@ (8018eec <_strtod_l+0x55c>)
 8018ca2:	aa14      	add	r2, sp, #80	@ 0x50
 8018ca4:	a811      	add	r0, sp, #68	@ 0x44
 8018ca6:	f002 fb71 	bl	801b38c <__hexnan>
 8018caa:	2805      	cmp	r0, #5
 8018cac:	d126      	bne.n	8018cfc <_strtod_l+0x36c>
 8018cae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018cb0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8018cb4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8018cb8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8018cbc:	e6a3      	b.n	8018a06 <_strtod_l+0x76>
 8018cbe:	240a      	movs	r4, #10
 8018cc0:	fb04 2c0c 	mla	ip, r4, ip, r2
 8018cc4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8018cc8:	e7b8      	b.n	8018c3c <_strtod_l+0x2ac>
 8018cca:	2a6e      	cmp	r2, #110	@ 0x6e
 8018ccc:	e7db      	b.n	8018c86 <_strtod_l+0x2f6>
 8018cce:	4988      	ldr	r1, [pc, #544]	@ (8018ef0 <_strtod_l+0x560>)
 8018cd0:	a811      	add	r0, sp, #68	@ 0x44
 8018cd2:	f002 fb47 	bl	801b364 <__match>
 8018cd6:	2800      	cmp	r0, #0
 8018cd8:	f43f aeb1 	beq.w	8018a3e <_strtod_l+0xae>
 8018cdc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018cde:	4985      	ldr	r1, [pc, #532]	@ (8018ef4 <_strtod_l+0x564>)
 8018ce0:	3b01      	subs	r3, #1
 8018ce2:	a811      	add	r0, sp, #68	@ 0x44
 8018ce4:	9311      	str	r3, [sp, #68]	@ 0x44
 8018ce6:	f002 fb3d 	bl	801b364 <__match>
 8018cea:	b910      	cbnz	r0, 8018cf2 <_strtod_l+0x362>
 8018cec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018cee:	3301      	adds	r3, #1
 8018cf0:	9311      	str	r3, [sp, #68]	@ 0x44
 8018cf2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8018f08 <_strtod_l+0x578>
 8018cf6:	f04f 0a00 	mov.w	sl, #0
 8018cfa:	e684      	b.n	8018a06 <_strtod_l+0x76>
 8018cfc:	487e      	ldr	r0, [pc, #504]	@ (8018ef8 <_strtod_l+0x568>)
 8018cfe:	f001 fa77 	bl	801a1f0 <nan>
 8018d02:	ec5b ab10 	vmov	sl, fp, d0
 8018d06:	e67e      	b.n	8018a06 <_strtod_l+0x76>
 8018d08:	ee07 9a90 	vmov	s15, r9
 8018d0c:	1be2      	subs	r2, r4, r7
 8018d0e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018d12:	2d00      	cmp	r5, #0
 8018d14:	bf08      	it	eq
 8018d16:	461d      	moveq	r5, r3
 8018d18:	2b10      	cmp	r3, #16
 8018d1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8018d1c:	461a      	mov	r2, r3
 8018d1e:	bfa8      	it	ge
 8018d20:	2210      	movge	r2, #16
 8018d22:	2b09      	cmp	r3, #9
 8018d24:	ec5b ab17 	vmov	sl, fp, d7
 8018d28:	dc15      	bgt.n	8018d56 <_strtod_l+0x3c6>
 8018d2a:	1be1      	subs	r1, r4, r7
 8018d2c:	2900      	cmp	r1, #0
 8018d2e:	f43f ae6a 	beq.w	8018a06 <_strtod_l+0x76>
 8018d32:	eba4 0107 	sub.w	r1, r4, r7
 8018d36:	dd72      	ble.n	8018e1e <_strtod_l+0x48e>
 8018d38:	2916      	cmp	r1, #22
 8018d3a:	dc59      	bgt.n	8018df0 <_strtod_l+0x460>
 8018d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8018efc <_strtod_l+0x56c>)
 8018d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018d44:	ed93 7b00 	vldr	d7, [r3]
 8018d48:	ec4b ab16 	vmov	d6, sl, fp
 8018d4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018d50:	ec5b ab17 	vmov	sl, fp, d7
 8018d54:	e657      	b.n	8018a06 <_strtod_l+0x76>
 8018d56:	4969      	ldr	r1, [pc, #420]	@ (8018efc <_strtod_l+0x56c>)
 8018d58:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018d5c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8018d60:	ee06 6a90 	vmov	s13, r6
 8018d64:	2b0f      	cmp	r3, #15
 8018d66:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8018d6a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018d6e:	ec5b ab16 	vmov	sl, fp, d6
 8018d72:	ddda      	ble.n	8018d2a <_strtod_l+0x39a>
 8018d74:	1a9a      	subs	r2, r3, r2
 8018d76:	1be1      	subs	r1, r4, r7
 8018d78:	440a      	add	r2, r1
 8018d7a:	2a00      	cmp	r2, #0
 8018d7c:	f340 8094 	ble.w	8018ea8 <_strtod_l+0x518>
 8018d80:	f012 000f 	ands.w	r0, r2, #15
 8018d84:	d00a      	beq.n	8018d9c <_strtod_l+0x40c>
 8018d86:	495d      	ldr	r1, [pc, #372]	@ (8018efc <_strtod_l+0x56c>)
 8018d88:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018d8c:	ed91 7b00 	vldr	d7, [r1]
 8018d90:	ec4b ab16 	vmov	d6, sl, fp
 8018d94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018d98:	ec5b ab17 	vmov	sl, fp, d7
 8018d9c:	f032 020f 	bics.w	r2, r2, #15
 8018da0:	d073      	beq.n	8018e8a <_strtod_l+0x4fa>
 8018da2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8018da6:	dd47      	ble.n	8018e38 <_strtod_l+0x4a8>
 8018da8:	2400      	movs	r4, #0
 8018daa:	4625      	mov	r5, r4
 8018dac:	9407      	str	r4, [sp, #28]
 8018dae:	4626      	mov	r6, r4
 8018db0:	9a05      	ldr	r2, [sp, #20]
 8018db2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8018f08 <_strtod_l+0x578>
 8018db6:	2322      	movs	r3, #34	@ 0x22
 8018db8:	6013      	str	r3, [r2, #0]
 8018dba:	f04f 0a00 	mov.w	sl, #0
 8018dbe:	9b07      	ldr	r3, [sp, #28]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	f43f ae20 	beq.w	8018a06 <_strtod_l+0x76>
 8018dc6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018dc8:	9805      	ldr	r0, [sp, #20]
 8018dca:	f002 fc83 	bl	801b6d4 <_Bfree>
 8018dce:	9805      	ldr	r0, [sp, #20]
 8018dd0:	4631      	mov	r1, r6
 8018dd2:	f002 fc7f 	bl	801b6d4 <_Bfree>
 8018dd6:	9805      	ldr	r0, [sp, #20]
 8018dd8:	4629      	mov	r1, r5
 8018dda:	f002 fc7b 	bl	801b6d4 <_Bfree>
 8018dde:	9907      	ldr	r1, [sp, #28]
 8018de0:	9805      	ldr	r0, [sp, #20]
 8018de2:	f002 fc77 	bl	801b6d4 <_Bfree>
 8018de6:	9805      	ldr	r0, [sp, #20]
 8018de8:	4621      	mov	r1, r4
 8018dea:	f002 fc73 	bl	801b6d4 <_Bfree>
 8018dee:	e60a      	b.n	8018a06 <_strtod_l+0x76>
 8018df0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8018df4:	1be0      	subs	r0, r4, r7
 8018df6:	4281      	cmp	r1, r0
 8018df8:	dbbc      	blt.n	8018d74 <_strtod_l+0x3e4>
 8018dfa:	4a40      	ldr	r2, [pc, #256]	@ (8018efc <_strtod_l+0x56c>)
 8018dfc:	f1c3 030f 	rsb	r3, r3, #15
 8018e00:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018e04:	ed91 7b00 	vldr	d7, [r1]
 8018e08:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018e0a:	ec4b ab16 	vmov	d6, sl, fp
 8018e0e:	1acb      	subs	r3, r1, r3
 8018e10:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018e14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018e18:	ed92 6b00 	vldr	d6, [r2]
 8018e1c:	e796      	b.n	8018d4c <_strtod_l+0x3bc>
 8018e1e:	3116      	adds	r1, #22
 8018e20:	dba8      	blt.n	8018d74 <_strtod_l+0x3e4>
 8018e22:	4b36      	ldr	r3, [pc, #216]	@ (8018efc <_strtod_l+0x56c>)
 8018e24:	1b3c      	subs	r4, r7, r4
 8018e26:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8018e2a:	ed94 7b00 	vldr	d7, [r4]
 8018e2e:	ec4b ab16 	vmov	d6, sl, fp
 8018e32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018e36:	e78b      	b.n	8018d50 <_strtod_l+0x3c0>
 8018e38:	2000      	movs	r0, #0
 8018e3a:	ec4b ab17 	vmov	d7, sl, fp
 8018e3e:	4e30      	ldr	r6, [pc, #192]	@ (8018f00 <_strtod_l+0x570>)
 8018e40:	1112      	asrs	r2, r2, #4
 8018e42:	4601      	mov	r1, r0
 8018e44:	2a01      	cmp	r2, #1
 8018e46:	dc23      	bgt.n	8018e90 <_strtod_l+0x500>
 8018e48:	b108      	cbz	r0, 8018e4e <_strtod_l+0x4be>
 8018e4a:	ec5b ab17 	vmov	sl, fp, d7
 8018e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8018f00 <_strtod_l+0x570>)
 8018e50:	482c      	ldr	r0, [pc, #176]	@ (8018f04 <_strtod_l+0x574>)
 8018e52:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018e56:	ed92 7b00 	vldr	d7, [r2]
 8018e5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8018e5e:	ec4b ab16 	vmov	d6, sl, fp
 8018e62:	4a29      	ldr	r2, [pc, #164]	@ (8018f08 <_strtod_l+0x578>)
 8018e64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018e68:	ee17 1a90 	vmov	r1, s15
 8018e6c:	400a      	ands	r2, r1
 8018e6e:	4282      	cmp	r2, r0
 8018e70:	ec5b ab17 	vmov	sl, fp, d7
 8018e74:	d898      	bhi.n	8018da8 <_strtod_l+0x418>
 8018e76:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8018e7a:	4282      	cmp	r2, r0
 8018e7c:	bf86      	itte	hi
 8018e7e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8018f0c <_strtod_l+0x57c>
 8018e82:	f04f 3aff 	movhi.w	sl, #4294967295
 8018e86:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	9206      	str	r2, [sp, #24]
 8018e8e:	e076      	b.n	8018f7e <_strtod_l+0x5ee>
 8018e90:	f012 0f01 	tst.w	r2, #1
 8018e94:	d004      	beq.n	8018ea0 <_strtod_l+0x510>
 8018e96:	ed96 6b00 	vldr	d6, [r6]
 8018e9a:	2001      	movs	r0, #1
 8018e9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018ea0:	3101      	adds	r1, #1
 8018ea2:	1052      	asrs	r2, r2, #1
 8018ea4:	3608      	adds	r6, #8
 8018ea6:	e7cd      	b.n	8018e44 <_strtod_l+0x4b4>
 8018ea8:	d0ef      	beq.n	8018e8a <_strtod_l+0x4fa>
 8018eaa:	4252      	negs	r2, r2
 8018eac:	f012 000f 	ands.w	r0, r2, #15
 8018eb0:	d00a      	beq.n	8018ec8 <_strtod_l+0x538>
 8018eb2:	4912      	ldr	r1, [pc, #72]	@ (8018efc <_strtod_l+0x56c>)
 8018eb4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018eb8:	ed91 7b00 	vldr	d7, [r1]
 8018ebc:	ec4b ab16 	vmov	d6, sl, fp
 8018ec0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018ec4:	ec5b ab17 	vmov	sl, fp, d7
 8018ec8:	1112      	asrs	r2, r2, #4
 8018eca:	d0de      	beq.n	8018e8a <_strtod_l+0x4fa>
 8018ecc:	2a1f      	cmp	r2, #31
 8018ece:	dd1f      	ble.n	8018f10 <_strtod_l+0x580>
 8018ed0:	2400      	movs	r4, #0
 8018ed2:	4625      	mov	r5, r4
 8018ed4:	9407      	str	r4, [sp, #28]
 8018ed6:	4626      	mov	r6, r4
 8018ed8:	9a05      	ldr	r2, [sp, #20]
 8018eda:	2322      	movs	r3, #34	@ 0x22
 8018edc:	f04f 0a00 	mov.w	sl, #0
 8018ee0:	f04f 0b00 	mov.w	fp, #0
 8018ee4:	6013      	str	r3, [r2, #0]
 8018ee6:	e76a      	b.n	8018dbe <_strtod_l+0x42e>
 8018ee8:	0801e496 	.word	0x0801e496
 8018eec:	0801e334 	.word	0x0801e334
 8018ef0:	0801e48e 	.word	0x0801e48e
 8018ef4:	0801e4c8 	.word	0x0801e4c8
 8018ef8:	0801e754 	.word	0x0801e754
 8018efc:	0801e640 	.word	0x0801e640
 8018f00:	0801e618 	.word	0x0801e618
 8018f04:	7ca00000 	.word	0x7ca00000
 8018f08:	7ff00000 	.word	0x7ff00000
 8018f0c:	7fefffff 	.word	0x7fefffff
 8018f10:	f012 0110 	ands.w	r1, r2, #16
 8018f14:	bf18      	it	ne
 8018f16:	216a      	movne	r1, #106	@ 0x6a
 8018f18:	9106      	str	r1, [sp, #24]
 8018f1a:	ec4b ab17 	vmov	d7, sl, fp
 8018f1e:	49b0      	ldr	r1, [pc, #704]	@ (80191e0 <_strtod_l+0x850>)
 8018f20:	2000      	movs	r0, #0
 8018f22:	07d6      	lsls	r6, r2, #31
 8018f24:	d504      	bpl.n	8018f30 <_strtod_l+0x5a0>
 8018f26:	ed91 6b00 	vldr	d6, [r1]
 8018f2a:	2001      	movs	r0, #1
 8018f2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018f30:	1052      	asrs	r2, r2, #1
 8018f32:	f101 0108 	add.w	r1, r1, #8
 8018f36:	d1f4      	bne.n	8018f22 <_strtod_l+0x592>
 8018f38:	b108      	cbz	r0, 8018f3e <_strtod_l+0x5ae>
 8018f3a:	ec5b ab17 	vmov	sl, fp, d7
 8018f3e:	9a06      	ldr	r2, [sp, #24]
 8018f40:	b1b2      	cbz	r2, 8018f70 <_strtod_l+0x5e0>
 8018f42:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8018f46:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8018f4a:	2a00      	cmp	r2, #0
 8018f4c:	4658      	mov	r0, fp
 8018f4e:	dd0f      	ble.n	8018f70 <_strtod_l+0x5e0>
 8018f50:	2a1f      	cmp	r2, #31
 8018f52:	dd55      	ble.n	8019000 <_strtod_l+0x670>
 8018f54:	2a34      	cmp	r2, #52	@ 0x34
 8018f56:	bfde      	ittt	le
 8018f58:	f04f 32ff 	movle.w	r2, #4294967295
 8018f5c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8018f60:	408a      	lslle	r2, r1
 8018f62:	f04f 0a00 	mov.w	sl, #0
 8018f66:	bfcc      	ite	gt
 8018f68:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8018f6c:	ea02 0b00 	andle.w	fp, r2, r0
 8018f70:	ec4b ab17 	vmov	d7, sl, fp
 8018f74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f7c:	d0a8      	beq.n	8018ed0 <_strtod_l+0x540>
 8018f7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018f80:	9805      	ldr	r0, [sp, #20]
 8018f82:	f8cd 9000 	str.w	r9, [sp]
 8018f86:	462a      	mov	r2, r5
 8018f88:	f002 fc0c 	bl	801b7a4 <__s2b>
 8018f8c:	9007      	str	r0, [sp, #28]
 8018f8e:	2800      	cmp	r0, #0
 8018f90:	f43f af0a 	beq.w	8018da8 <_strtod_l+0x418>
 8018f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f96:	1b3f      	subs	r7, r7, r4
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	bfb4      	ite	lt
 8018f9c:	463b      	movlt	r3, r7
 8018f9e:	2300      	movge	r3, #0
 8018fa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8018fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fa4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80191d0 <_strtod_l+0x840>
 8018fa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018fac:	2400      	movs	r4, #0
 8018fae:	930d      	str	r3, [sp, #52]	@ 0x34
 8018fb0:	4625      	mov	r5, r4
 8018fb2:	9b07      	ldr	r3, [sp, #28]
 8018fb4:	9805      	ldr	r0, [sp, #20]
 8018fb6:	6859      	ldr	r1, [r3, #4]
 8018fb8:	f002 fb4c 	bl	801b654 <_Balloc>
 8018fbc:	4606      	mov	r6, r0
 8018fbe:	2800      	cmp	r0, #0
 8018fc0:	f43f aef6 	beq.w	8018db0 <_strtod_l+0x420>
 8018fc4:	9b07      	ldr	r3, [sp, #28]
 8018fc6:	691a      	ldr	r2, [r3, #16]
 8018fc8:	ec4b ab19 	vmov	d9, sl, fp
 8018fcc:	3202      	adds	r2, #2
 8018fce:	f103 010c 	add.w	r1, r3, #12
 8018fd2:	0092      	lsls	r2, r2, #2
 8018fd4:	300c      	adds	r0, #12
 8018fd6:	f001 f8fa 	bl	801a1ce <memcpy>
 8018fda:	eeb0 0b49 	vmov.f64	d0, d9
 8018fde:	9805      	ldr	r0, [sp, #20]
 8018fe0:	aa14      	add	r2, sp, #80	@ 0x50
 8018fe2:	a913      	add	r1, sp, #76	@ 0x4c
 8018fe4:	f002 ff1a 	bl	801be1c <__d2b>
 8018fe8:	9012      	str	r0, [sp, #72]	@ 0x48
 8018fea:	2800      	cmp	r0, #0
 8018fec:	f43f aee0 	beq.w	8018db0 <_strtod_l+0x420>
 8018ff0:	9805      	ldr	r0, [sp, #20]
 8018ff2:	2101      	movs	r1, #1
 8018ff4:	f002 fc6c 	bl	801b8d0 <__i2b>
 8018ff8:	4605      	mov	r5, r0
 8018ffa:	b940      	cbnz	r0, 801900e <_strtod_l+0x67e>
 8018ffc:	2500      	movs	r5, #0
 8018ffe:	e6d7      	b.n	8018db0 <_strtod_l+0x420>
 8019000:	f04f 31ff 	mov.w	r1, #4294967295
 8019004:	fa01 f202 	lsl.w	r2, r1, r2
 8019008:	ea02 0a0a 	and.w	sl, r2, sl
 801900c:	e7b0      	b.n	8018f70 <_strtod_l+0x5e0>
 801900e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8019010:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019012:	2f00      	cmp	r7, #0
 8019014:	bfab      	itete	ge
 8019016:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8019018:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801901a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801901e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8019022:	bfac      	ite	ge
 8019024:	eb07 0903 	addge.w	r9, r7, r3
 8019028:	eba3 0807 	sublt.w	r8, r3, r7
 801902c:	9b06      	ldr	r3, [sp, #24]
 801902e:	1aff      	subs	r7, r7, r3
 8019030:	4417      	add	r7, r2
 8019032:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8019036:	4a6b      	ldr	r2, [pc, #428]	@ (80191e4 <_strtod_l+0x854>)
 8019038:	3f01      	subs	r7, #1
 801903a:	4297      	cmp	r7, r2
 801903c:	da51      	bge.n	80190e2 <_strtod_l+0x752>
 801903e:	1bd1      	subs	r1, r2, r7
 8019040:	291f      	cmp	r1, #31
 8019042:	eba3 0301 	sub.w	r3, r3, r1
 8019046:	f04f 0201 	mov.w	r2, #1
 801904a:	dc3e      	bgt.n	80190ca <_strtod_l+0x73a>
 801904c:	408a      	lsls	r2, r1
 801904e:	920c      	str	r2, [sp, #48]	@ 0x30
 8019050:	2200      	movs	r2, #0
 8019052:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019054:	eb09 0703 	add.w	r7, r9, r3
 8019058:	4498      	add	r8, r3
 801905a:	9b06      	ldr	r3, [sp, #24]
 801905c:	45b9      	cmp	r9, r7
 801905e:	4498      	add	r8, r3
 8019060:	464b      	mov	r3, r9
 8019062:	bfa8      	it	ge
 8019064:	463b      	movge	r3, r7
 8019066:	4543      	cmp	r3, r8
 8019068:	bfa8      	it	ge
 801906a:	4643      	movge	r3, r8
 801906c:	2b00      	cmp	r3, #0
 801906e:	bfc2      	ittt	gt
 8019070:	1aff      	subgt	r7, r7, r3
 8019072:	eba8 0803 	subgt.w	r8, r8, r3
 8019076:	eba9 0903 	subgt.w	r9, r9, r3
 801907a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801907c:	2b00      	cmp	r3, #0
 801907e:	dd16      	ble.n	80190ae <_strtod_l+0x71e>
 8019080:	4629      	mov	r1, r5
 8019082:	9805      	ldr	r0, [sp, #20]
 8019084:	461a      	mov	r2, r3
 8019086:	f002 fce3 	bl	801ba50 <__pow5mult>
 801908a:	4605      	mov	r5, r0
 801908c:	2800      	cmp	r0, #0
 801908e:	d0b5      	beq.n	8018ffc <_strtod_l+0x66c>
 8019090:	4601      	mov	r1, r0
 8019092:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019094:	9805      	ldr	r0, [sp, #20]
 8019096:	f002 fc31 	bl	801b8fc <__multiply>
 801909a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801909c:	2800      	cmp	r0, #0
 801909e:	f43f ae87 	beq.w	8018db0 <_strtod_l+0x420>
 80190a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80190a4:	9805      	ldr	r0, [sp, #20]
 80190a6:	f002 fb15 	bl	801b6d4 <_Bfree>
 80190aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80190ac:	9312      	str	r3, [sp, #72]	@ 0x48
 80190ae:	2f00      	cmp	r7, #0
 80190b0:	dc1b      	bgt.n	80190ea <_strtod_l+0x75a>
 80190b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	dd21      	ble.n	80190fc <_strtod_l+0x76c>
 80190b8:	4631      	mov	r1, r6
 80190ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190bc:	9805      	ldr	r0, [sp, #20]
 80190be:	f002 fcc7 	bl	801ba50 <__pow5mult>
 80190c2:	4606      	mov	r6, r0
 80190c4:	b9d0      	cbnz	r0, 80190fc <_strtod_l+0x76c>
 80190c6:	2600      	movs	r6, #0
 80190c8:	e672      	b.n	8018db0 <_strtod_l+0x420>
 80190ca:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80190ce:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80190d2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80190d6:	37e2      	adds	r7, #226	@ 0xe2
 80190d8:	fa02 f107 	lsl.w	r1, r2, r7
 80190dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80190de:	920c      	str	r2, [sp, #48]	@ 0x30
 80190e0:	e7b8      	b.n	8019054 <_strtod_l+0x6c4>
 80190e2:	2200      	movs	r2, #0
 80190e4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80190e6:	2201      	movs	r2, #1
 80190e8:	e7f9      	b.n	80190de <_strtod_l+0x74e>
 80190ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80190ec:	9805      	ldr	r0, [sp, #20]
 80190ee:	463a      	mov	r2, r7
 80190f0:	f002 fd08 	bl	801bb04 <__lshift>
 80190f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80190f6:	2800      	cmp	r0, #0
 80190f8:	d1db      	bne.n	80190b2 <_strtod_l+0x722>
 80190fa:	e659      	b.n	8018db0 <_strtod_l+0x420>
 80190fc:	f1b8 0f00 	cmp.w	r8, #0
 8019100:	dd07      	ble.n	8019112 <_strtod_l+0x782>
 8019102:	4631      	mov	r1, r6
 8019104:	9805      	ldr	r0, [sp, #20]
 8019106:	4642      	mov	r2, r8
 8019108:	f002 fcfc 	bl	801bb04 <__lshift>
 801910c:	4606      	mov	r6, r0
 801910e:	2800      	cmp	r0, #0
 8019110:	d0d9      	beq.n	80190c6 <_strtod_l+0x736>
 8019112:	f1b9 0f00 	cmp.w	r9, #0
 8019116:	dd08      	ble.n	801912a <_strtod_l+0x79a>
 8019118:	4629      	mov	r1, r5
 801911a:	9805      	ldr	r0, [sp, #20]
 801911c:	464a      	mov	r2, r9
 801911e:	f002 fcf1 	bl	801bb04 <__lshift>
 8019122:	4605      	mov	r5, r0
 8019124:	2800      	cmp	r0, #0
 8019126:	f43f ae43 	beq.w	8018db0 <_strtod_l+0x420>
 801912a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801912c:	9805      	ldr	r0, [sp, #20]
 801912e:	4632      	mov	r2, r6
 8019130:	f002 fd70 	bl	801bc14 <__mdiff>
 8019134:	4604      	mov	r4, r0
 8019136:	2800      	cmp	r0, #0
 8019138:	f43f ae3a 	beq.w	8018db0 <_strtod_l+0x420>
 801913c:	2300      	movs	r3, #0
 801913e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019142:	60c3      	str	r3, [r0, #12]
 8019144:	4629      	mov	r1, r5
 8019146:	f002 fd49 	bl	801bbdc <__mcmp>
 801914a:	2800      	cmp	r0, #0
 801914c:	da4e      	bge.n	80191ec <_strtod_l+0x85c>
 801914e:	ea58 080a 	orrs.w	r8, r8, sl
 8019152:	d174      	bne.n	801923e <_strtod_l+0x8ae>
 8019154:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019158:	2b00      	cmp	r3, #0
 801915a:	d170      	bne.n	801923e <_strtod_l+0x8ae>
 801915c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019160:	0d1b      	lsrs	r3, r3, #20
 8019162:	051b      	lsls	r3, r3, #20
 8019164:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019168:	d969      	bls.n	801923e <_strtod_l+0x8ae>
 801916a:	6963      	ldr	r3, [r4, #20]
 801916c:	b913      	cbnz	r3, 8019174 <_strtod_l+0x7e4>
 801916e:	6923      	ldr	r3, [r4, #16]
 8019170:	2b01      	cmp	r3, #1
 8019172:	dd64      	ble.n	801923e <_strtod_l+0x8ae>
 8019174:	4621      	mov	r1, r4
 8019176:	2201      	movs	r2, #1
 8019178:	9805      	ldr	r0, [sp, #20]
 801917a:	f002 fcc3 	bl	801bb04 <__lshift>
 801917e:	4629      	mov	r1, r5
 8019180:	4604      	mov	r4, r0
 8019182:	f002 fd2b 	bl	801bbdc <__mcmp>
 8019186:	2800      	cmp	r0, #0
 8019188:	dd59      	ble.n	801923e <_strtod_l+0x8ae>
 801918a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801918e:	9a06      	ldr	r2, [sp, #24]
 8019190:	0d1b      	lsrs	r3, r3, #20
 8019192:	051b      	lsls	r3, r3, #20
 8019194:	2a00      	cmp	r2, #0
 8019196:	d070      	beq.n	801927a <_strtod_l+0x8ea>
 8019198:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801919c:	d86d      	bhi.n	801927a <_strtod_l+0x8ea>
 801919e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80191a2:	f67f ae99 	bls.w	8018ed8 <_strtod_l+0x548>
 80191a6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80191d8 <_strtod_l+0x848>
 80191aa:	ec4b ab16 	vmov	d6, sl, fp
 80191ae:	4b0e      	ldr	r3, [pc, #56]	@ (80191e8 <_strtod_l+0x858>)
 80191b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80191b4:	ee17 2a90 	vmov	r2, s15
 80191b8:	4013      	ands	r3, r2
 80191ba:	ec5b ab17 	vmov	sl, fp, d7
 80191be:	2b00      	cmp	r3, #0
 80191c0:	f47f ae01 	bne.w	8018dc6 <_strtod_l+0x436>
 80191c4:	9a05      	ldr	r2, [sp, #20]
 80191c6:	2322      	movs	r3, #34	@ 0x22
 80191c8:	6013      	str	r3, [r2, #0]
 80191ca:	e5fc      	b.n	8018dc6 <_strtod_l+0x436>
 80191cc:	f3af 8000 	nop.w
 80191d0:	ffc00000 	.word	0xffc00000
 80191d4:	41dfffff 	.word	0x41dfffff
 80191d8:	00000000 	.word	0x00000000
 80191dc:	39500000 	.word	0x39500000
 80191e0:	0801e360 	.word	0x0801e360
 80191e4:	fffffc02 	.word	0xfffffc02
 80191e8:	7ff00000 	.word	0x7ff00000
 80191ec:	46d9      	mov	r9, fp
 80191ee:	d15d      	bne.n	80192ac <_strtod_l+0x91c>
 80191f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80191f4:	f1b8 0f00 	cmp.w	r8, #0
 80191f8:	d02a      	beq.n	8019250 <_strtod_l+0x8c0>
 80191fa:	4aab      	ldr	r2, [pc, #684]	@ (80194a8 <_strtod_l+0xb18>)
 80191fc:	4293      	cmp	r3, r2
 80191fe:	d12a      	bne.n	8019256 <_strtod_l+0x8c6>
 8019200:	9b06      	ldr	r3, [sp, #24]
 8019202:	4652      	mov	r2, sl
 8019204:	b1fb      	cbz	r3, 8019246 <_strtod_l+0x8b6>
 8019206:	4ba9      	ldr	r3, [pc, #676]	@ (80194ac <_strtod_l+0xb1c>)
 8019208:	ea0b 0303 	and.w	r3, fp, r3
 801920c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019210:	f04f 31ff 	mov.w	r1, #4294967295
 8019214:	d81a      	bhi.n	801924c <_strtod_l+0x8bc>
 8019216:	0d1b      	lsrs	r3, r3, #20
 8019218:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801921c:	fa01 f303 	lsl.w	r3, r1, r3
 8019220:	429a      	cmp	r2, r3
 8019222:	d118      	bne.n	8019256 <_strtod_l+0x8c6>
 8019224:	4ba2      	ldr	r3, [pc, #648]	@ (80194b0 <_strtod_l+0xb20>)
 8019226:	4599      	cmp	r9, r3
 8019228:	d102      	bne.n	8019230 <_strtod_l+0x8a0>
 801922a:	3201      	adds	r2, #1
 801922c:	f43f adc0 	beq.w	8018db0 <_strtod_l+0x420>
 8019230:	4b9e      	ldr	r3, [pc, #632]	@ (80194ac <_strtod_l+0xb1c>)
 8019232:	ea09 0303 	and.w	r3, r9, r3
 8019236:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801923a:	f04f 0a00 	mov.w	sl, #0
 801923e:	9b06      	ldr	r3, [sp, #24]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d1b0      	bne.n	80191a6 <_strtod_l+0x816>
 8019244:	e5bf      	b.n	8018dc6 <_strtod_l+0x436>
 8019246:	f04f 33ff 	mov.w	r3, #4294967295
 801924a:	e7e9      	b.n	8019220 <_strtod_l+0x890>
 801924c:	460b      	mov	r3, r1
 801924e:	e7e7      	b.n	8019220 <_strtod_l+0x890>
 8019250:	ea53 030a 	orrs.w	r3, r3, sl
 8019254:	d099      	beq.n	801918a <_strtod_l+0x7fa>
 8019256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019258:	b1c3      	cbz	r3, 801928c <_strtod_l+0x8fc>
 801925a:	ea13 0f09 	tst.w	r3, r9
 801925e:	d0ee      	beq.n	801923e <_strtod_l+0x8ae>
 8019260:	9a06      	ldr	r2, [sp, #24]
 8019262:	4650      	mov	r0, sl
 8019264:	4659      	mov	r1, fp
 8019266:	f1b8 0f00 	cmp.w	r8, #0
 801926a:	d013      	beq.n	8019294 <_strtod_l+0x904>
 801926c:	f7ff fb73 	bl	8018956 <sulp>
 8019270:	ee39 7b00 	vadd.f64	d7, d9, d0
 8019274:	ec5b ab17 	vmov	sl, fp, d7
 8019278:	e7e1      	b.n	801923e <_strtod_l+0x8ae>
 801927a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801927e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019282:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8019286:	f04f 3aff 	mov.w	sl, #4294967295
 801928a:	e7d8      	b.n	801923e <_strtod_l+0x8ae>
 801928c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801928e:	ea13 0f0a 	tst.w	r3, sl
 8019292:	e7e4      	b.n	801925e <_strtod_l+0x8ce>
 8019294:	f7ff fb5f 	bl	8018956 <sulp>
 8019298:	ee39 0b40 	vsub.f64	d0, d9, d0
 801929c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80192a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192a4:	ec5b ab10 	vmov	sl, fp, d0
 80192a8:	d1c9      	bne.n	801923e <_strtod_l+0x8ae>
 80192aa:	e615      	b.n	8018ed8 <_strtod_l+0x548>
 80192ac:	4629      	mov	r1, r5
 80192ae:	4620      	mov	r0, r4
 80192b0:	f002 fe0c 	bl	801becc <__ratio>
 80192b4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80192b8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80192bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192c0:	d85d      	bhi.n	801937e <_strtod_l+0x9ee>
 80192c2:	f1b8 0f00 	cmp.w	r8, #0
 80192c6:	d164      	bne.n	8019392 <_strtod_l+0xa02>
 80192c8:	f1ba 0f00 	cmp.w	sl, #0
 80192cc:	d14b      	bne.n	8019366 <_strtod_l+0x9d6>
 80192ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80192d2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d160      	bne.n	801939c <_strtod_l+0xa0c>
 80192da:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80192de:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80192e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192e6:	d401      	bmi.n	80192ec <_strtod_l+0x95c>
 80192e8:	ee20 8b08 	vmul.f64	d8, d0, d8
 80192ec:	eeb1 ab48 	vneg.f64	d10, d8
 80192f0:	486e      	ldr	r0, [pc, #440]	@ (80194ac <_strtod_l+0xb1c>)
 80192f2:	4970      	ldr	r1, [pc, #448]	@ (80194b4 <_strtod_l+0xb24>)
 80192f4:	ea09 0700 	and.w	r7, r9, r0
 80192f8:	428f      	cmp	r7, r1
 80192fa:	ec53 2b1a 	vmov	r2, r3, d10
 80192fe:	d17d      	bne.n	80193fc <_strtod_l+0xa6c>
 8019300:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8019304:	ec4b ab1c 	vmov	d12, sl, fp
 8019308:	eeb0 0b4c 	vmov.f64	d0, d12
 801930c:	f002 fd16 	bl	801bd3c <__ulp>
 8019310:	4866      	ldr	r0, [pc, #408]	@ (80194ac <_strtod_l+0xb1c>)
 8019312:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8019316:	ee1c 3a90 	vmov	r3, s25
 801931a:	4a67      	ldr	r2, [pc, #412]	@ (80194b8 <_strtod_l+0xb28>)
 801931c:	ea03 0100 	and.w	r1, r3, r0
 8019320:	4291      	cmp	r1, r2
 8019322:	ec5b ab1c 	vmov	sl, fp, d12
 8019326:	d93c      	bls.n	80193a2 <_strtod_l+0xa12>
 8019328:	ee19 2a90 	vmov	r2, s19
 801932c:	4b60      	ldr	r3, [pc, #384]	@ (80194b0 <_strtod_l+0xb20>)
 801932e:	429a      	cmp	r2, r3
 8019330:	d104      	bne.n	801933c <_strtod_l+0x9ac>
 8019332:	ee19 3a10 	vmov	r3, s18
 8019336:	3301      	adds	r3, #1
 8019338:	f43f ad3a 	beq.w	8018db0 <_strtod_l+0x420>
 801933c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80194b0 <_strtod_l+0xb20>
 8019340:	f04f 3aff 	mov.w	sl, #4294967295
 8019344:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019346:	9805      	ldr	r0, [sp, #20]
 8019348:	f002 f9c4 	bl	801b6d4 <_Bfree>
 801934c:	9805      	ldr	r0, [sp, #20]
 801934e:	4631      	mov	r1, r6
 8019350:	f002 f9c0 	bl	801b6d4 <_Bfree>
 8019354:	9805      	ldr	r0, [sp, #20]
 8019356:	4629      	mov	r1, r5
 8019358:	f002 f9bc 	bl	801b6d4 <_Bfree>
 801935c:	9805      	ldr	r0, [sp, #20]
 801935e:	4621      	mov	r1, r4
 8019360:	f002 f9b8 	bl	801b6d4 <_Bfree>
 8019364:	e625      	b.n	8018fb2 <_strtod_l+0x622>
 8019366:	f1ba 0f01 	cmp.w	sl, #1
 801936a:	d103      	bne.n	8019374 <_strtod_l+0x9e4>
 801936c:	f1bb 0f00 	cmp.w	fp, #0
 8019370:	f43f adb2 	beq.w	8018ed8 <_strtod_l+0x548>
 8019374:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8019378:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801937c:	e7b8      	b.n	80192f0 <_strtod_l+0x960>
 801937e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8019382:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019386:	f1b8 0f00 	cmp.w	r8, #0
 801938a:	d0af      	beq.n	80192ec <_strtod_l+0x95c>
 801938c:	eeb0 ab48 	vmov.f64	d10, d8
 8019390:	e7ae      	b.n	80192f0 <_strtod_l+0x960>
 8019392:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8019396:	eeb0 8b4a 	vmov.f64	d8, d10
 801939a:	e7a9      	b.n	80192f0 <_strtod_l+0x960>
 801939c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80193a0:	e7a6      	b.n	80192f0 <_strtod_l+0x960>
 80193a2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80193a6:	9b06      	ldr	r3, [sp, #24]
 80193a8:	46d9      	mov	r9, fp
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d1ca      	bne.n	8019344 <_strtod_l+0x9b4>
 80193ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80193b2:	0d1b      	lsrs	r3, r3, #20
 80193b4:	051b      	lsls	r3, r3, #20
 80193b6:	429f      	cmp	r7, r3
 80193b8:	d1c4      	bne.n	8019344 <_strtod_l+0x9b4>
 80193ba:	ec51 0b18 	vmov	r0, r1, d8
 80193be:	f7e7 f9e3 	bl	8000788 <__aeabi_d2lz>
 80193c2:	f7e7 f99b 	bl	80006fc <__aeabi_l2d>
 80193c6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80193ca:	ec41 0b17 	vmov	d7, r0, r1
 80193ce:	ea49 090a 	orr.w	r9, r9, sl
 80193d2:	ea59 0908 	orrs.w	r9, r9, r8
 80193d6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80193da:	d03c      	beq.n	8019456 <_strtod_l+0xac6>
 80193dc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8019490 <_strtod_l+0xb00>
 80193e0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80193e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193e8:	f53f aced 	bmi.w	8018dc6 <_strtod_l+0x436>
 80193ec:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019498 <_strtod_l+0xb08>
 80193f0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80193f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193f8:	dda4      	ble.n	8019344 <_strtod_l+0x9b4>
 80193fa:	e4e4      	b.n	8018dc6 <_strtod_l+0x436>
 80193fc:	9906      	ldr	r1, [sp, #24]
 80193fe:	b1e1      	cbz	r1, 801943a <_strtod_l+0xaaa>
 8019400:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8019404:	d819      	bhi.n	801943a <_strtod_l+0xaaa>
 8019406:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801940a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801940e:	d811      	bhi.n	8019434 <_strtod_l+0xaa4>
 8019410:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8019414:	ee18 3a10 	vmov	r3, s16
 8019418:	2b01      	cmp	r3, #1
 801941a:	bf38      	it	cc
 801941c:	2301      	movcc	r3, #1
 801941e:	ee08 3a10 	vmov	s16, r3
 8019422:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8019426:	f1b8 0f00 	cmp.w	r8, #0
 801942a:	d111      	bne.n	8019450 <_strtod_l+0xac0>
 801942c:	eeb1 7b48 	vneg.f64	d7, d8
 8019430:	ec53 2b17 	vmov	r2, r3, d7
 8019434:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8019438:	1bcb      	subs	r3, r1, r7
 801943a:	eeb0 0b49 	vmov.f64	d0, d9
 801943e:	ec43 2b1a 	vmov	d10, r2, r3
 8019442:	f002 fc7b 	bl	801bd3c <__ulp>
 8019446:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801944a:	ec5b ab19 	vmov	sl, fp, d9
 801944e:	e7aa      	b.n	80193a6 <_strtod_l+0xa16>
 8019450:	eeb0 7b48 	vmov.f64	d7, d8
 8019454:	e7ec      	b.n	8019430 <_strtod_l+0xaa0>
 8019456:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80194a0 <_strtod_l+0xb10>
 801945a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801945e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019462:	f57f af6f 	bpl.w	8019344 <_strtod_l+0x9b4>
 8019466:	e4ae      	b.n	8018dc6 <_strtod_l+0x436>
 8019468:	2300      	movs	r3, #0
 801946a:	9308      	str	r3, [sp, #32]
 801946c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801946e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019470:	6013      	str	r3, [r2, #0]
 8019472:	f7ff bacc 	b.w	8018a0e <_strtod_l+0x7e>
 8019476:	2a65      	cmp	r2, #101	@ 0x65
 8019478:	f43f abbc 	beq.w	8018bf4 <_strtod_l+0x264>
 801947c:	2a45      	cmp	r2, #69	@ 0x45
 801947e:	f43f abb9 	beq.w	8018bf4 <_strtod_l+0x264>
 8019482:	2301      	movs	r3, #1
 8019484:	9306      	str	r3, [sp, #24]
 8019486:	f7ff bbf0 	b.w	8018c6a <_strtod_l+0x2da>
 801948a:	bf00      	nop
 801948c:	f3af 8000 	nop.w
 8019490:	94a03595 	.word	0x94a03595
 8019494:	3fdfffff 	.word	0x3fdfffff
 8019498:	35afe535 	.word	0x35afe535
 801949c:	3fe00000 	.word	0x3fe00000
 80194a0:	94a03595 	.word	0x94a03595
 80194a4:	3fcfffff 	.word	0x3fcfffff
 80194a8:	000fffff 	.word	0x000fffff
 80194ac:	7ff00000 	.word	0x7ff00000
 80194b0:	7fefffff 	.word	0x7fefffff
 80194b4:	7fe00000 	.word	0x7fe00000
 80194b8:	7c9fffff 	.word	0x7c9fffff

080194bc <strtod>:
 80194bc:	460a      	mov	r2, r1
 80194be:	4601      	mov	r1, r0
 80194c0:	4802      	ldr	r0, [pc, #8]	@ (80194cc <strtod+0x10>)
 80194c2:	4b03      	ldr	r3, [pc, #12]	@ (80194d0 <strtod+0x14>)
 80194c4:	6800      	ldr	r0, [r0, #0]
 80194c6:	f7ff ba63 	b.w	8018990 <_strtod_l>
 80194ca:	bf00      	nop
 80194cc:	240002ac 	.word	0x240002ac
 80194d0:	24000140 	.word	0x24000140

080194d4 <_strtol_l.constprop.0>:
 80194d4:	2b24      	cmp	r3, #36	@ 0x24
 80194d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194da:	4686      	mov	lr, r0
 80194dc:	4690      	mov	r8, r2
 80194de:	d801      	bhi.n	80194e4 <_strtol_l.constprop.0+0x10>
 80194e0:	2b01      	cmp	r3, #1
 80194e2:	d106      	bne.n	80194f2 <_strtol_l.constprop.0+0x1e>
 80194e4:	f000 fe46 	bl	801a174 <__errno>
 80194e8:	2316      	movs	r3, #22
 80194ea:	6003      	str	r3, [r0, #0]
 80194ec:	2000      	movs	r0, #0
 80194ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194f2:	4834      	ldr	r0, [pc, #208]	@ (80195c4 <_strtol_l.constprop.0+0xf0>)
 80194f4:	460d      	mov	r5, r1
 80194f6:	462a      	mov	r2, r5
 80194f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80194fc:	5d06      	ldrb	r6, [r0, r4]
 80194fe:	f016 0608 	ands.w	r6, r6, #8
 8019502:	d1f8      	bne.n	80194f6 <_strtol_l.constprop.0+0x22>
 8019504:	2c2d      	cmp	r4, #45	@ 0x2d
 8019506:	d12d      	bne.n	8019564 <_strtol_l.constprop.0+0x90>
 8019508:	782c      	ldrb	r4, [r5, #0]
 801950a:	2601      	movs	r6, #1
 801950c:	1c95      	adds	r5, r2, #2
 801950e:	f033 0210 	bics.w	r2, r3, #16
 8019512:	d109      	bne.n	8019528 <_strtol_l.constprop.0+0x54>
 8019514:	2c30      	cmp	r4, #48	@ 0x30
 8019516:	d12a      	bne.n	801956e <_strtol_l.constprop.0+0x9a>
 8019518:	782a      	ldrb	r2, [r5, #0]
 801951a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801951e:	2a58      	cmp	r2, #88	@ 0x58
 8019520:	d125      	bne.n	801956e <_strtol_l.constprop.0+0x9a>
 8019522:	786c      	ldrb	r4, [r5, #1]
 8019524:	2310      	movs	r3, #16
 8019526:	3502      	adds	r5, #2
 8019528:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801952c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019530:	2200      	movs	r2, #0
 8019532:	fbbc f9f3 	udiv	r9, ip, r3
 8019536:	4610      	mov	r0, r2
 8019538:	fb03 ca19 	mls	sl, r3, r9, ip
 801953c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8019540:	2f09      	cmp	r7, #9
 8019542:	d81b      	bhi.n	801957c <_strtol_l.constprop.0+0xa8>
 8019544:	463c      	mov	r4, r7
 8019546:	42a3      	cmp	r3, r4
 8019548:	dd27      	ble.n	801959a <_strtol_l.constprop.0+0xc6>
 801954a:	1c57      	adds	r7, r2, #1
 801954c:	d007      	beq.n	801955e <_strtol_l.constprop.0+0x8a>
 801954e:	4581      	cmp	r9, r0
 8019550:	d320      	bcc.n	8019594 <_strtol_l.constprop.0+0xc0>
 8019552:	d101      	bne.n	8019558 <_strtol_l.constprop.0+0x84>
 8019554:	45a2      	cmp	sl, r4
 8019556:	db1d      	blt.n	8019594 <_strtol_l.constprop.0+0xc0>
 8019558:	fb00 4003 	mla	r0, r0, r3, r4
 801955c:	2201      	movs	r2, #1
 801955e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019562:	e7eb      	b.n	801953c <_strtol_l.constprop.0+0x68>
 8019564:	2c2b      	cmp	r4, #43	@ 0x2b
 8019566:	bf04      	itt	eq
 8019568:	782c      	ldrbeq	r4, [r5, #0]
 801956a:	1c95      	addeq	r5, r2, #2
 801956c:	e7cf      	b.n	801950e <_strtol_l.constprop.0+0x3a>
 801956e:	2b00      	cmp	r3, #0
 8019570:	d1da      	bne.n	8019528 <_strtol_l.constprop.0+0x54>
 8019572:	2c30      	cmp	r4, #48	@ 0x30
 8019574:	bf0c      	ite	eq
 8019576:	2308      	moveq	r3, #8
 8019578:	230a      	movne	r3, #10
 801957a:	e7d5      	b.n	8019528 <_strtol_l.constprop.0+0x54>
 801957c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019580:	2f19      	cmp	r7, #25
 8019582:	d801      	bhi.n	8019588 <_strtol_l.constprop.0+0xb4>
 8019584:	3c37      	subs	r4, #55	@ 0x37
 8019586:	e7de      	b.n	8019546 <_strtol_l.constprop.0+0x72>
 8019588:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801958c:	2f19      	cmp	r7, #25
 801958e:	d804      	bhi.n	801959a <_strtol_l.constprop.0+0xc6>
 8019590:	3c57      	subs	r4, #87	@ 0x57
 8019592:	e7d8      	b.n	8019546 <_strtol_l.constprop.0+0x72>
 8019594:	f04f 32ff 	mov.w	r2, #4294967295
 8019598:	e7e1      	b.n	801955e <_strtol_l.constprop.0+0x8a>
 801959a:	1c53      	adds	r3, r2, #1
 801959c:	d108      	bne.n	80195b0 <_strtol_l.constprop.0+0xdc>
 801959e:	2322      	movs	r3, #34	@ 0x22
 80195a0:	f8ce 3000 	str.w	r3, [lr]
 80195a4:	4660      	mov	r0, ip
 80195a6:	f1b8 0f00 	cmp.w	r8, #0
 80195aa:	d0a0      	beq.n	80194ee <_strtol_l.constprop.0+0x1a>
 80195ac:	1e69      	subs	r1, r5, #1
 80195ae:	e006      	b.n	80195be <_strtol_l.constprop.0+0xea>
 80195b0:	b106      	cbz	r6, 80195b4 <_strtol_l.constprop.0+0xe0>
 80195b2:	4240      	negs	r0, r0
 80195b4:	f1b8 0f00 	cmp.w	r8, #0
 80195b8:	d099      	beq.n	80194ee <_strtol_l.constprop.0+0x1a>
 80195ba:	2a00      	cmp	r2, #0
 80195bc:	d1f6      	bne.n	80195ac <_strtol_l.constprop.0+0xd8>
 80195be:	f8c8 1000 	str.w	r1, [r8]
 80195c2:	e794      	b.n	80194ee <_strtol_l.constprop.0+0x1a>
 80195c4:	0801e389 	.word	0x0801e389

080195c8 <strtol>:
 80195c8:	4613      	mov	r3, r2
 80195ca:	460a      	mov	r2, r1
 80195cc:	4601      	mov	r1, r0
 80195ce:	4802      	ldr	r0, [pc, #8]	@ (80195d8 <strtol+0x10>)
 80195d0:	6800      	ldr	r0, [r0, #0]
 80195d2:	f7ff bf7f 	b.w	80194d4 <_strtol_l.constprop.0>
 80195d6:	bf00      	nop
 80195d8:	240002ac 	.word	0x240002ac

080195dc <__cvt>:
 80195dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195de:	ed2d 8b02 	vpush	{d8}
 80195e2:	eeb0 8b40 	vmov.f64	d8, d0
 80195e6:	b085      	sub	sp, #20
 80195e8:	4617      	mov	r7, r2
 80195ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80195ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80195ee:	ee18 2a90 	vmov	r2, s17
 80195f2:	f025 0520 	bic.w	r5, r5, #32
 80195f6:	2a00      	cmp	r2, #0
 80195f8:	bfb6      	itet	lt
 80195fa:	222d      	movlt	r2, #45	@ 0x2d
 80195fc:	2200      	movge	r2, #0
 80195fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8019602:	2d46      	cmp	r5, #70	@ 0x46
 8019604:	460c      	mov	r4, r1
 8019606:	701a      	strb	r2, [r3, #0]
 8019608:	d004      	beq.n	8019614 <__cvt+0x38>
 801960a:	2d45      	cmp	r5, #69	@ 0x45
 801960c:	d100      	bne.n	8019610 <__cvt+0x34>
 801960e:	3401      	adds	r4, #1
 8019610:	2102      	movs	r1, #2
 8019612:	e000      	b.n	8019616 <__cvt+0x3a>
 8019614:	2103      	movs	r1, #3
 8019616:	ab03      	add	r3, sp, #12
 8019618:	9301      	str	r3, [sp, #4]
 801961a:	ab02      	add	r3, sp, #8
 801961c:	9300      	str	r3, [sp, #0]
 801961e:	4622      	mov	r2, r4
 8019620:	4633      	mov	r3, r6
 8019622:	eeb0 0b48 	vmov.f64	d0, d8
 8019626:	f000 fe73 	bl	801a310 <_dtoa_r>
 801962a:	2d47      	cmp	r5, #71	@ 0x47
 801962c:	d114      	bne.n	8019658 <__cvt+0x7c>
 801962e:	07fb      	lsls	r3, r7, #31
 8019630:	d50a      	bpl.n	8019648 <__cvt+0x6c>
 8019632:	1902      	adds	r2, r0, r4
 8019634:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801963c:	bf08      	it	eq
 801963e:	9203      	streq	r2, [sp, #12]
 8019640:	2130      	movs	r1, #48	@ 0x30
 8019642:	9b03      	ldr	r3, [sp, #12]
 8019644:	4293      	cmp	r3, r2
 8019646:	d319      	bcc.n	801967c <__cvt+0xa0>
 8019648:	9b03      	ldr	r3, [sp, #12]
 801964a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801964c:	1a1b      	subs	r3, r3, r0
 801964e:	6013      	str	r3, [r2, #0]
 8019650:	b005      	add	sp, #20
 8019652:	ecbd 8b02 	vpop	{d8}
 8019656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019658:	2d46      	cmp	r5, #70	@ 0x46
 801965a:	eb00 0204 	add.w	r2, r0, r4
 801965e:	d1e9      	bne.n	8019634 <__cvt+0x58>
 8019660:	7803      	ldrb	r3, [r0, #0]
 8019662:	2b30      	cmp	r3, #48	@ 0x30
 8019664:	d107      	bne.n	8019676 <__cvt+0x9a>
 8019666:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801966a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801966e:	bf1c      	itt	ne
 8019670:	f1c4 0401 	rsbne	r4, r4, #1
 8019674:	6034      	strne	r4, [r6, #0]
 8019676:	6833      	ldr	r3, [r6, #0]
 8019678:	441a      	add	r2, r3
 801967a:	e7db      	b.n	8019634 <__cvt+0x58>
 801967c:	1c5c      	adds	r4, r3, #1
 801967e:	9403      	str	r4, [sp, #12]
 8019680:	7019      	strb	r1, [r3, #0]
 8019682:	e7de      	b.n	8019642 <__cvt+0x66>

08019684 <__exponent>:
 8019684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019686:	2900      	cmp	r1, #0
 8019688:	bfba      	itte	lt
 801968a:	4249      	neglt	r1, r1
 801968c:	232d      	movlt	r3, #45	@ 0x2d
 801968e:	232b      	movge	r3, #43	@ 0x2b
 8019690:	2909      	cmp	r1, #9
 8019692:	7002      	strb	r2, [r0, #0]
 8019694:	7043      	strb	r3, [r0, #1]
 8019696:	dd29      	ble.n	80196ec <__exponent+0x68>
 8019698:	f10d 0307 	add.w	r3, sp, #7
 801969c:	461d      	mov	r5, r3
 801969e:	270a      	movs	r7, #10
 80196a0:	461a      	mov	r2, r3
 80196a2:	fbb1 f6f7 	udiv	r6, r1, r7
 80196a6:	fb07 1416 	mls	r4, r7, r6, r1
 80196aa:	3430      	adds	r4, #48	@ 0x30
 80196ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80196b0:	460c      	mov	r4, r1
 80196b2:	2c63      	cmp	r4, #99	@ 0x63
 80196b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80196b8:	4631      	mov	r1, r6
 80196ba:	dcf1      	bgt.n	80196a0 <__exponent+0x1c>
 80196bc:	3130      	adds	r1, #48	@ 0x30
 80196be:	1e94      	subs	r4, r2, #2
 80196c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80196c4:	1c41      	adds	r1, r0, #1
 80196c6:	4623      	mov	r3, r4
 80196c8:	42ab      	cmp	r3, r5
 80196ca:	d30a      	bcc.n	80196e2 <__exponent+0x5e>
 80196cc:	f10d 0309 	add.w	r3, sp, #9
 80196d0:	1a9b      	subs	r3, r3, r2
 80196d2:	42ac      	cmp	r4, r5
 80196d4:	bf88      	it	hi
 80196d6:	2300      	movhi	r3, #0
 80196d8:	3302      	adds	r3, #2
 80196da:	4403      	add	r3, r0
 80196dc:	1a18      	subs	r0, r3, r0
 80196de:	b003      	add	sp, #12
 80196e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80196e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80196ea:	e7ed      	b.n	80196c8 <__exponent+0x44>
 80196ec:	2330      	movs	r3, #48	@ 0x30
 80196ee:	3130      	adds	r1, #48	@ 0x30
 80196f0:	7083      	strb	r3, [r0, #2]
 80196f2:	70c1      	strb	r1, [r0, #3]
 80196f4:	1d03      	adds	r3, r0, #4
 80196f6:	e7f1      	b.n	80196dc <__exponent+0x58>

080196f8 <_printf_float>:
 80196f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196fc:	b08d      	sub	sp, #52	@ 0x34
 80196fe:	460c      	mov	r4, r1
 8019700:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8019704:	4616      	mov	r6, r2
 8019706:	461f      	mov	r7, r3
 8019708:	4605      	mov	r5, r0
 801970a:	f000 fce9 	bl	801a0e0 <_localeconv_r>
 801970e:	f8d0 b000 	ldr.w	fp, [r0]
 8019712:	4658      	mov	r0, fp
 8019714:	f7e6 fe5c 	bl	80003d0 <strlen>
 8019718:	2300      	movs	r3, #0
 801971a:	930a      	str	r3, [sp, #40]	@ 0x28
 801971c:	f8d8 3000 	ldr.w	r3, [r8]
 8019720:	f894 9018 	ldrb.w	r9, [r4, #24]
 8019724:	6822      	ldr	r2, [r4, #0]
 8019726:	9005      	str	r0, [sp, #20]
 8019728:	3307      	adds	r3, #7
 801972a:	f023 0307 	bic.w	r3, r3, #7
 801972e:	f103 0108 	add.w	r1, r3, #8
 8019732:	f8c8 1000 	str.w	r1, [r8]
 8019736:	ed93 0b00 	vldr	d0, [r3]
 801973a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8019998 <_printf_float+0x2a0>
 801973e:	eeb0 7bc0 	vabs.f64	d7, d0
 8019742:	eeb4 7b46 	vcmp.f64	d7, d6
 8019746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801974a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801974e:	dd24      	ble.n	801979a <_printf_float+0xa2>
 8019750:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019758:	d502      	bpl.n	8019760 <_printf_float+0x68>
 801975a:	232d      	movs	r3, #45	@ 0x2d
 801975c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019760:	498f      	ldr	r1, [pc, #572]	@ (80199a0 <_printf_float+0x2a8>)
 8019762:	4b90      	ldr	r3, [pc, #576]	@ (80199a4 <_printf_float+0x2ac>)
 8019764:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8019768:	bf94      	ite	ls
 801976a:	4688      	movls	r8, r1
 801976c:	4698      	movhi	r8, r3
 801976e:	f022 0204 	bic.w	r2, r2, #4
 8019772:	2303      	movs	r3, #3
 8019774:	6123      	str	r3, [r4, #16]
 8019776:	6022      	str	r2, [r4, #0]
 8019778:	f04f 0a00 	mov.w	sl, #0
 801977c:	9700      	str	r7, [sp, #0]
 801977e:	4633      	mov	r3, r6
 8019780:	aa0b      	add	r2, sp, #44	@ 0x2c
 8019782:	4621      	mov	r1, r4
 8019784:	4628      	mov	r0, r5
 8019786:	f000 f9d1 	bl	8019b2c <_printf_common>
 801978a:	3001      	adds	r0, #1
 801978c:	f040 8089 	bne.w	80198a2 <_printf_float+0x1aa>
 8019790:	f04f 30ff 	mov.w	r0, #4294967295
 8019794:	b00d      	add	sp, #52	@ 0x34
 8019796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801979a:	eeb4 0b40 	vcmp.f64	d0, d0
 801979e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197a2:	d709      	bvc.n	80197b8 <_printf_float+0xc0>
 80197a4:	ee10 3a90 	vmov	r3, s1
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	bfbc      	itt	lt
 80197ac:	232d      	movlt	r3, #45	@ 0x2d
 80197ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80197b2:	497d      	ldr	r1, [pc, #500]	@ (80199a8 <_printf_float+0x2b0>)
 80197b4:	4b7d      	ldr	r3, [pc, #500]	@ (80199ac <_printf_float+0x2b4>)
 80197b6:	e7d5      	b.n	8019764 <_printf_float+0x6c>
 80197b8:	6863      	ldr	r3, [r4, #4]
 80197ba:	1c59      	adds	r1, r3, #1
 80197bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80197c0:	d139      	bne.n	8019836 <_printf_float+0x13e>
 80197c2:	2306      	movs	r3, #6
 80197c4:	6063      	str	r3, [r4, #4]
 80197c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80197ca:	2300      	movs	r3, #0
 80197cc:	6022      	str	r2, [r4, #0]
 80197ce:	9303      	str	r3, [sp, #12]
 80197d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80197d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80197d6:	ab09      	add	r3, sp, #36	@ 0x24
 80197d8:	9300      	str	r3, [sp, #0]
 80197da:	6861      	ldr	r1, [r4, #4]
 80197dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80197e0:	4628      	mov	r0, r5
 80197e2:	f7ff fefb 	bl	80195dc <__cvt>
 80197e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80197ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80197ec:	4680      	mov	r8, r0
 80197ee:	d129      	bne.n	8019844 <_printf_float+0x14c>
 80197f0:	1cc8      	adds	r0, r1, #3
 80197f2:	db02      	blt.n	80197fa <_printf_float+0x102>
 80197f4:	6863      	ldr	r3, [r4, #4]
 80197f6:	4299      	cmp	r1, r3
 80197f8:	dd41      	ble.n	801987e <_printf_float+0x186>
 80197fa:	f1a9 0902 	sub.w	r9, r9, #2
 80197fe:	fa5f f989 	uxtb.w	r9, r9
 8019802:	3901      	subs	r1, #1
 8019804:	464a      	mov	r2, r9
 8019806:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801980a:	9109      	str	r1, [sp, #36]	@ 0x24
 801980c:	f7ff ff3a 	bl	8019684 <__exponent>
 8019810:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019812:	1813      	adds	r3, r2, r0
 8019814:	2a01      	cmp	r2, #1
 8019816:	4682      	mov	sl, r0
 8019818:	6123      	str	r3, [r4, #16]
 801981a:	dc02      	bgt.n	8019822 <_printf_float+0x12a>
 801981c:	6822      	ldr	r2, [r4, #0]
 801981e:	07d2      	lsls	r2, r2, #31
 8019820:	d501      	bpl.n	8019826 <_printf_float+0x12e>
 8019822:	3301      	adds	r3, #1
 8019824:	6123      	str	r3, [r4, #16]
 8019826:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801982a:	2b00      	cmp	r3, #0
 801982c:	d0a6      	beq.n	801977c <_printf_float+0x84>
 801982e:	232d      	movs	r3, #45	@ 0x2d
 8019830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019834:	e7a2      	b.n	801977c <_printf_float+0x84>
 8019836:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801983a:	d1c4      	bne.n	80197c6 <_printf_float+0xce>
 801983c:	2b00      	cmp	r3, #0
 801983e:	d1c2      	bne.n	80197c6 <_printf_float+0xce>
 8019840:	2301      	movs	r3, #1
 8019842:	e7bf      	b.n	80197c4 <_printf_float+0xcc>
 8019844:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019848:	d9db      	bls.n	8019802 <_printf_float+0x10a>
 801984a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801984e:	d118      	bne.n	8019882 <_printf_float+0x18a>
 8019850:	2900      	cmp	r1, #0
 8019852:	6863      	ldr	r3, [r4, #4]
 8019854:	dd0b      	ble.n	801986e <_printf_float+0x176>
 8019856:	6121      	str	r1, [r4, #16]
 8019858:	b913      	cbnz	r3, 8019860 <_printf_float+0x168>
 801985a:	6822      	ldr	r2, [r4, #0]
 801985c:	07d0      	lsls	r0, r2, #31
 801985e:	d502      	bpl.n	8019866 <_printf_float+0x16e>
 8019860:	3301      	adds	r3, #1
 8019862:	440b      	add	r3, r1
 8019864:	6123      	str	r3, [r4, #16]
 8019866:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019868:	f04f 0a00 	mov.w	sl, #0
 801986c:	e7db      	b.n	8019826 <_printf_float+0x12e>
 801986e:	b913      	cbnz	r3, 8019876 <_printf_float+0x17e>
 8019870:	6822      	ldr	r2, [r4, #0]
 8019872:	07d2      	lsls	r2, r2, #31
 8019874:	d501      	bpl.n	801987a <_printf_float+0x182>
 8019876:	3302      	adds	r3, #2
 8019878:	e7f4      	b.n	8019864 <_printf_float+0x16c>
 801987a:	2301      	movs	r3, #1
 801987c:	e7f2      	b.n	8019864 <_printf_float+0x16c>
 801987e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8019882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019884:	4299      	cmp	r1, r3
 8019886:	db05      	blt.n	8019894 <_printf_float+0x19c>
 8019888:	6823      	ldr	r3, [r4, #0]
 801988a:	6121      	str	r1, [r4, #16]
 801988c:	07d8      	lsls	r0, r3, #31
 801988e:	d5ea      	bpl.n	8019866 <_printf_float+0x16e>
 8019890:	1c4b      	adds	r3, r1, #1
 8019892:	e7e7      	b.n	8019864 <_printf_float+0x16c>
 8019894:	2900      	cmp	r1, #0
 8019896:	bfd4      	ite	le
 8019898:	f1c1 0202 	rsble	r2, r1, #2
 801989c:	2201      	movgt	r2, #1
 801989e:	4413      	add	r3, r2
 80198a0:	e7e0      	b.n	8019864 <_printf_float+0x16c>
 80198a2:	6823      	ldr	r3, [r4, #0]
 80198a4:	055a      	lsls	r2, r3, #21
 80198a6:	d407      	bmi.n	80198b8 <_printf_float+0x1c0>
 80198a8:	6923      	ldr	r3, [r4, #16]
 80198aa:	4642      	mov	r2, r8
 80198ac:	4631      	mov	r1, r6
 80198ae:	4628      	mov	r0, r5
 80198b0:	47b8      	blx	r7
 80198b2:	3001      	adds	r0, #1
 80198b4:	d12a      	bne.n	801990c <_printf_float+0x214>
 80198b6:	e76b      	b.n	8019790 <_printf_float+0x98>
 80198b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80198bc:	f240 80e0 	bls.w	8019a80 <_printf_float+0x388>
 80198c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80198c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80198c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198cc:	d133      	bne.n	8019936 <_printf_float+0x23e>
 80198ce:	4a38      	ldr	r2, [pc, #224]	@ (80199b0 <_printf_float+0x2b8>)
 80198d0:	2301      	movs	r3, #1
 80198d2:	4631      	mov	r1, r6
 80198d4:	4628      	mov	r0, r5
 80198d6:	47b8      	blx	r7
 80198d8:	3001      	adds	r0, #1
 80198da:	f43f af59 	beq.w	8019790 <_printf_float+0x98>
 80198de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80198e2:	4543      	cmp	r3, r8
 80198e4:	db02      	blt.n	80198ec <_printf_float+0x1f4>
 80198e6:	6823      	ldr	r3, [r4, #0]
 80198e8:	07d8      	lsls	r0, r3, #31
 80198ea:	d50f      	bpl.n	801990c <_printf_float+0x214>
 80198ec:	9b05      	ldr	r3, [sp, #20]
 80198ee:	465a      	mov	r2, fp
 80198f0:	4631      	mov	r1, r6
 80198f2:	4628      	mov	r0, r5
 80198f4:	47b8      	blx	r7
 80198f6:	3001      	adds	r0, #1
 80198f8:	f43f af4a 	beq.w	8019790 <_printf_float+0x98>
 80198fc:	f04f 0900 	mov.w	r9, #0
 8019900:	f108 38ff 	add.w	r8, r8, #4294967295
 8019904:	f104 0a1a 	add.w	sl, r4, #26
 8019908:	45c8      	cmp	r8, r9
 801990a:	dc09      	bgt.n	8019920 <_printf_float+0x228>
 801990c:	6823      	ldr	r3, [r4, #0]
 801990e:	079b      	lsls	r3, r3, #30
 8019910:	f100 8107 	bmi.w	8019b22 <_printf_float+0x42a>
 8019914:	68e0      	ldr	r0, [r4, #12]
 8019916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019918:	4298      	cmp	r0, r3
 801991a:	bfb8      	it	lt
 801991c:	4618      	movlt	r0, r3
 801991e:	e739      	b.n	8019794 <_printf_float+0x9c>
 8019920:	2301      	movs	r3, #1
 8019922:	4652      	mov	r2, sl
 8019924:	4631      	mov	r1, r6
 8019926:	4628      	mov	r0, r5
 8019928:	47b8      	blx	r7
 801992a:	3001      	adds	r0, #1
 801992c:	f43f af30 	beq.w	8019790 <_printf_float+0x98>
 8019930:	f109 0901 	add.w	r9, r9, #1
 8019934:	e7e8      	b.n	8019908 <_printf_float+0x210>
 8019936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019938:	2b00      	cmp	r3, #0
 801993a:	dc3b      	bgt.n	80199b4 <_printf_float+0x2bc>
 801993c:	4a1c      	ldr	r2, [pc, #112]	@ (80199b0 <_printf_float+0x2b8>)
 801993e:	2301      	movs	r3, #1
 8019940:	4631      	mov	r1, r6
 8019942:	4628      	mov	r0, r5
 8019944:	47b8      	blx	r7
 8019946:	3001      	adds	r0, #1
 8019948:	f43f af22 	beq.w	8019790 <_printf_float+0x98>
 801994c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019950:	ea59 0303 	orrs.w	r3, r9, r3
 8019954:	d102      	bne.n	801995c <_printf_float+0x264>
 8019956:	6823      	ldr	r3, [r4, #0]
 8019958:	07d9      	lsls	r1, r3, #31
 801995a:	d5d7      	bpl.n	801990c <_printf_float+0x214>
 801995c:	9b05      	ldr	r3, [sp, #20]
 801995e:	465a      	mov	r2, fp
 8019960:	4631      	mov	r1, r6
 8019962:	4628      	mov	r0, r5
 8019964:	47b8      	blx	r7
 8019966:	3001      	adds	r0, #1
 8019968:	f43f af12 	beq.w	8019790 <_printf_float+0x98>
 801996c:	f04f 0a00 	mov.w	sl, #0
 8019970:	f104 0b1a 	add.w	fp, r4, #26
 8019974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019976:	425b      	negs	r3, r3
 8019978:	4553      	cmp	r3, sl
 801997a:	dc01      	bgt.n	8019980 <_printf_float+0x288>
 801997c:	464b      	mov	r3, r9
 801997e:	e794      	b.n	80198aa <_printf_float+0x1b2>
 8019980:	2301      	movs	r3, #1
 8019982:	465a      	mov	r2, fp
 8019984:	4631      	mov	r1, r6
 8019986:	4628      	mov	r0, r5
 8019988:	47b8      	blx	r7
 801998a:	3001      	adds	r0, #1
 801998c:	f43f af00 	beq.w	8019790 <_printf_float+0x98>
 8019990:	f10a 0a01 	add.w	sl, sl, #1
 8019994:	e7ee      	b.n	8019974 <_printf_float+0x27c>
 8019996:	bf00      	nop
 8019998:	ffffffff 	.word	0xffffffff
 801999c:	7fefffff 	.word	0x7fefffff
 80199a0:	0801e489 	.word	0x0801e489
 80199a4:	0801e48d 	.word	0x0801e48d
 80199a8:	0801e491 	.word	0x0801e491
 80199ac:	0801e495 	.word	0x0801e495
 80199b0:	0801e499 	.word	0x0801e499
 80199b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80199b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80199ba:	4553      	cmp	r3, sl
 80199bc:	bfa8      	it	ge
 80199be:	4653      	movge	r3, sl
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	4699      	mov	r9, r3
 80199c4:	dc37      	bgt.n	8019a36 <_printf_float+0x33e>
 80199c6:	2300      	movs	r3, #0
 80199c8:	9307      	str	r3, [sp, #28]
 80199ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80199ce:	f104 021a 	add.w	r2, r4, #26
 80199d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80199d4:	9907      	ldr	r1, [sp, #28]
 80199d6:	9306      	str	r3, [sp, #24]
 80199d8:	eba3 0309 	sub.w	r3, r3, r9
 80199dc:	428b      	cmp	r3, r1
 80199de:	dc31      	bgt.n	8019a44 <_printf_float+0x34c>
 80199e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199e2:	459a      	cmp	sl, r3
 80199e4:	dc3b      	bgt.n	8019a5e <_printf_float+0x366>
 80199e6:	6823      	ldr	r3, [r4, #0]
 80199e8:	07da      	lsls	r2, r3, #31
 80199ea:	d438      	bmi.n	8019a5e <_printf_float+0x366>
 80199ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199ee:	ebaa 0903 	sub.w	r9, sl, r3
 80199f2:	9b06      	ldr	r3, [sp, #24]
 80199f4:	ebaa 0303 	sub.w	r3, sl, r3
 80199f8:	4599      	cmp	r9, r3
 80199fa:	bfa8      	it	ge
 80199fc:	4699      	movge	r9, r3
 80199fe:	f1b9 0f00 	cmp.w	r9, #0
 8019a02:	dc34      	bgt.n	8019a6e <_printf_float+0x376>
 8019a04:	f04f 0800 	mov.w	r8, #0
 8019a08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019a0c:	f104 0b1a 	add.w	fp, r4, #26
 8019a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a12:	ebaa 0303 	sub.w	r3, sl, r3
 8019a16:	eba3 0309 	sub.w	r3, r3, r9
 8019a1a:	4543      	cmp	r3, r8
 8019a1c:	f77f af76 	ble.w	801990c <_printf_float+0x214>
 8019a20:	2301      	movs	r3, #1
 8019a22:	465a      	mov	r2, fp
 8019a24:	4631      	mov	r1, r6
 8019a26:	4628      	mov	r0, r5
 8019a28:	47b8      	blx	r7
 8019a2a:	3001      	adds	r0, #1
 8019a2c:	f43f aeb0 	beq.w	8019790 <_printf_float+0x98>
 8019a30:	f108 0801 	add.w	r8, r8, #1
 8019a34:	e7ec      	b.n	8019a10 <_printf_float+0x318>
 8019a36:	4642      	mov	r2, r8
 8019a38:	4631      	mov	r1, r6
 8019a3a:	4628      	mov	r0, r5
 8019a3c:	47b8      	blx	r7
 8019a3e:	3001      	adds	r0, #1
 8019a40:	d1c1      	bne.n	80199c6 <_printf_float+0x2ce>
 8019a42:	e6a5      	b.n	8019790 <_printf_float+0x98>
 8019a44:	2301      	movs	r3, #1
 8019a46:	4631      	mov	r1, r6
 8019a48:	4628      	mov	r0, r5
 8019a4a:	9206      	str	r2, [sp, #24]
 8019a4c:	47b8      	blx	r7
 8019a4e:	3001      	adds	r0, #1
 8019a50:	f43f ae9e 	beq.w	8019790 <_printf_float+0x98>
 8019a54:	9b07      	ldr	r3, [sp, #28]
 8019a56:	9a06      	ldr	r2, [sp, #24]
 8019a58:	3301      	adds	r3, #1
 8019a5a:	9307      	str	r3, [sp, #28]
 8019a5c:	e7b9      	b.n	80199d2 <_printf_float+0x2da>
 8019a5e:	9b05      	ldr	r3, [sp, #20]
 8019a60:	465a      	mov	r2, fp
 8019a62:	4631      	mov	r1, r6
 8019a64:	4628      	mov	r0, r5
 8019a66:	47b8      	blx	r7
 8019a68:	3001      	adds	r0, #1
 8019a6a:	d1bf      	bne.n	80199ec <_printf_float+0x2f4>
 8019a6c:	e690      	b.n	8019790 <_printf_float+0x98>
 8019a6e:	9a06      	ldr	r2, [sp, #24]
 8019a70:	464b      	mov	r3, r9
 8019a72:	4442      	add	r2, r8
 8019a74:	4631      	mov	r1, r6
 8019a76:	4628      	mov	r0, r5
 8019a78:	47b8      	blx	r7
 8019a7a:	3001      	adds	r0, #1
 8019a7c:	d1c2      	bne.n	8019a04 <_printf_float+0x30c>
 8019a7e:	e687      	b.n	8019790 <_printf_float+0x98>
 8019a80:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8019a84:	f1b9 0f01 	cmp.w	r9, #1
 8019a88:	dc01      	bgt.n	8019a8e <_printf_float+0x396>
 8019a8a:	07db      	lsls	r3, r3, #31
 8019a8c:	d536      	bpl.n	8019afc <_printf_float+0x404>
 8019a8e:	2301      	movs	r3, #1
 8019a90:	4642      	mov	r2, r8
 8019a92:	4631      	mov	r1, r6
 8019a94:	4628      	mov	r0, r5
 8019a96:	47b8      	blx	r7
 8019a98:	3001      	adds	r0, #1
 8019a9a:	f43f ae79 	beq.w	8019790 <_printf_float+0x98>
 8019a9e:	9b05      	ldr	r3, [sp, #20]
 8019aa0:	465a      	mov	r2, fp
 8019aa2:	4631      	mov	r1, r6
 8019aa4:	4628      	mov	r0, r5
 8019aa6:	47b8      	blx	r7
 8019aa8:	3001      	adds	r0, #1
 8019aaa:	f43f ae71 	beq.w	8019790 <_printf_float+0x98>
 8019aae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8019ab2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aba:	f109 39ff 	add.w	r9, r9, #4294967295
 8019abe:	d018      	beq.n	8019af2 <_printf_float+0x3fa>
 8019ac0:	464b      	mov	r3, r9
 8019ac2:	f108 0201 	add.w	r2, r8, #1
 8019ac6:	4631      	mov	r1, r6
 8019ac8:	4628      	mov	r0, r5
 8019aca:	47b8      	blx	r7
 8019acc:	3001      	adds	r0, #1
 8019ace:	d10c      	bne.n	8019aea <_printf_float+0x3f2>
 8019ad0:	e65e      	b.n	8019790 <_printf_float+0x98>
 8019ad2:	2301      	movs	r3, #1
 8019ad4:	465a      	mov	r2, fp
 8019ad6:	4631      	mov	r1, r6
 8019ad8:	4628      	mov	r0, r5
 8019ada:	47b8      	blx	r7
 8019adc:	3001      	adds	r0, #1
 8019ade:	f43f ae57 	beq.w	8019790 <_printf_float+0x98>
 8019ae2:	f108 0801 	add.w	r8, r8, #1
 8019ae6:	45c8      	cmp	r8, r9
 8019ae8:	dbf3      	blt.n	8019ad2 <_printf_float+0x3da>
 8019aea:	4653      	mov	r3, sl
 8019aec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019af0:	e6dc      	b.n	80198ac <_printf_float+0x1b4>
 8019af2:	f04f 0800 	mov.w	r8, #0
 8019af6:	f104 0b1a 	add.w	fp, r4, #26
 8019afa:	e7f4      	b.n	8019ae6 <_printf_float+0x3ee>
 8019afc:	2301      	movs	r3, #1
 8019afe:	4642      	mov	r2, r8
 8019b00:	e7e1      	b.n	8019ac6 <_printf_float+0x3ce>
 8019b02:	2301      	movs	r3, #1
 8019b04:	464a      	mov	r2, r9
 8019b06:	4631      	mov	r1, r6
 8019b08:	4628      	mov	r0, r5
 8019b0a:	47b8      	blx	r7
 8019b0c:	3001      	adds	r0, #1
 8019b0e:	f43f ae3f 	beq.w	8019790 <_printf_float+0x98>
 8019b12:	f108 0801 	add.w	r8, r8, #1
 8019b16:	68e3      	ldr	r3, [r4, #12]
 8019b18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019b1a:	1a5b      	subs	r3, r3, r1
 8019b1c:	4543      	cmp	r3, r8
 8019b1e:	dcf0      	bgt.n	8019b02 <_printf_float+0x40a>
 8019b20:	e6f8      	b.n	8019914 <_printf_float+0x21c>
 8019b22:	f04f 0800 	mov.w	r8, #0
 8019b26:	f104 0919 	add.w	r9, r4, #25
 8019b2a:	e7f4      	b.n	8019b16 <_printf_float+0x41e>

08019b2c <_printf_common>:
 8019b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b30:	4616      	mov	r6, r2
 8019b32:	4698      	mov	r8, r3
 8019b34:	688a      	ldr	r2, [r1, #8]
 8019b36:	690b      	ldr	r3, [r1, #16]
 8019b38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019b3c:	4293      	cmp	r3, r2
 8019b3e:	bfb8      	it	lt
 8019b40:	4613      	movlt	r3, r2
 8019b42:	6033      	str	r3, [r6, #0]
 8019b44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019b48:	4607      	mov	r7, r0
 8019b4a:	460c      	mov	r4, r1
 8019b4c:	b10a      	cbz	r2, 8019b52 <_printf_common+0x26>
 8019b4e:	3301      	adds	r3, #1
 8019b50:	6033      	str	r3, [r6, #0]
 8019b52:	6823      	ldr	r3, [r4, #0]
 8019b54:	0699      	lsls	r1, r3, #26
 8019b56:	bf42      	ittt	mi
 8019b58:	6833      	ldrmi	r3, [r6, #0]
 8019b5a:	3302      	addmi	r3, #2
 8019b5c:	6033      	strmi	r3, [r6, #0]
 8019b5e:	6825      	ldr	r5, [r4, #0]
 8019b60:	f015 0506 	ands.w	r5, r5, #6
 8019b64:	d106      	bne.n	8019b74 <_printf_common+0x48>
 8019b66:	f104 0a19 	add.w	sl, r4, #25
 8019b6a:	68e3      	ldr	r3, [r4, #12]
 8019b6c:	6832      	ldr	r2, [r6, #0]
 8019b6e:	1a9b      	subs	r3, r3, r2
 8019b70:	42ab      	cmp	r3, r5
 8019b72:	dc26      	bgt.n	8019bc2 <_printf_common+0x96>
 8019b74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019b78:	6822      	ldr	r2, [r4, #0]
 8019b7a:	3b00      	subs	r3, #0
 8019b7c:	bf18      	it	ne
 8019b7e:	2301      	movne	r3, #1
 8019b80:	0692      	lsls	r2, r2, #26
 8019b82:	d42b      	bmi.n	8019bdc <_printf_common+0xb0>
 8019b84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019b88:	4641      	mov	r1, r8
 8019b8a:	4638      	mov	r0, r7
 8019b8c:	47c8      	blx	r9
 8019b8e:	3001      	adds	r0, #1
 8019b90:	d01e      	beq.n	8019bd0 <_printf_common+0xa4>
 8019b92:	6823      	ldr	r3, [r4, #0]
 8019b94:	6922      	ldr	r2, [r4, #16]
 8019b96:	f003 0306 	and.w	r3, r3, #6
 8019b9a:	2b04      	cmp	r3, #4
 8019b9c:	bf02      	ittt	eq
 8019b9e:	68e5      	ldreq	r5, [r4, #12]
 8019ba0:	6833      	ldreq	r3, [r6, #0]
 8019ba2:	1aed      	subeq	r5, r5, r3
 8019ba4:	68a3      	ldr	r3, [r4, #8]
 8019ba6:	bf0c      	ite	eq
 8019ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019bac:	2500      	movne	r5, #0
 8019bae:	4293      	cmp	r3, r2
 8019bb0:	bfc4      	itt	gt
 8019bb2:	1a9b      	subgt	r3, r3, r2
 8019bb4:	18ed      	addgt	r5, r5, r3
 8019bb6:	2600      	movs	r6, #0
 8019bb8:	341a      	adds	r4, #26
 8019bba:	42b5      	cmp	r5, r6
 8019bbc:	d11a      	bne.n	8019bf4 <_printf_common+0xc8>
 8019bbe:	2000      	movs	r0, #0
 8019bc0:	e008      	b.n	8019bd4 <_printf_common+0xa8>
 8019bc2:	2301      	movs	r3, #1
 8019bc4:	4652      	mov	r2, sl
 8019bc6:	4641      	mov	r1, r8
 8019bc8:	4638      	mov	r0, r7
 8019bca:	47c8      	blx	r9
 8019bcc:	3001      	adds	r0, #1
 8019bce:	d103      	bne.n	8019bd8 <_printf_common+0xac>
 8019bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8019bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bd8:	3501      	adds	r5, #1
 8019bda:	e7c6      	b.n	8019b6a <_printf_common+0x3e>
 8019bdc:	18e1      	adds	r1, r4, r3
 8019bde:	1c5a      	adds	r2, r3, #1
 8019be0:	2030      	movs	r0, #48	@ 0x30
 8019be2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019be6:	4422      	add	r2, r4
 8019be8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019bec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019bf0:	3302      	adds	r3, #2
 8019bf2:	e7c7      	b.n	8019b84 <_printf_common+0x58>
 8019bf4:	2301      	movs	r3, #1
 8019bf6:	4622      	mov	r2, r4
 8019bf8:	4641      	mov	r1, r8
 8019bfa:	4638      	mov	r0, r7
 8019bfc:	47c8      	blx	r9
 8019bfe:	3001      	adds	r0, #1
 8019c00:	d0e6      	beq.n	8019bd0 <_printf_common+0xa4>
 8019c02:	3601      	adds	r6, #1
 8019c04:	e7d9      	b.n	8019bba <_printf_common+0x8e>
	...

08019c08 <_printf_i>:
 8019c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019c0c:	7e0f      	ldrb	r7, [r1, #24]
 8019c0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019c10:	2f78      	cmp	r7, #120	@ 0x78
 8019c12:	4691      	mov	r9, r2
 8019c14:	4680      	mov	r8, r0
 8019c16:	460c      	mov	r4, r1
 8019c18:	469a      	mov	sl, r3
 8019c1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019c1e:	d807      	bhi.n	8019c30 <_printf_i+0x28>
 8019c20:	2f62      	cmp	r7, #98	@ 0x62
 8019c22:	d80a      	bhi.n	8019c3a <_printf_i+0x32>
 8019c24:	2f00      	cmp	r7, #0
 8019c26:	f000 80d2 	beq.w	8019dce <_printf_i+0x1c6>
 8019c2a:	2f58      	cmp	r7, #88	@ 0x58
 8019c2c:	f000 80b9 	beq.w	8019da2 <_printf_i+0x19a>
 8019c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019c34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019c38:	e03a      	b.n	8019cb0 <_printf_i+0xa8>
 8019c3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019c3e:	2b15      	cmp	r3, #21
 8019c40:	d8f6      	bhi.n	8019c30 <_printf_i+0x28>
 8019c42:	a101      	add	r1, pc, #4	@ (adr r1, 8019c48 <_printf_i+0x40>)
 8019c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019c48:	08019ca1 	.word	0x08019ca1
 8019c4c:	08019cb5 	.word	0x08019cb5
 8019c50:	08019c31 	.word	0x08019c31
 8019c54:	08019c31 	.word	0x08019c31
 8019c58:	08019c31 	.word	0x08019c31
 8019c5c:	08019c31 	.word	0x08019c31
 8019c60:	08019cb5 	.word	0x08019cb5
 8019c64:	08019c31 	.word	0x08019c31
 8019c68:	08019c31 	.word	0x08019c31
 8019c6c:	08019c31 	.word	0x08019c31
 8019c70:	08019c31 	.word	0x08019c31
 8019c74:	08019db5 	.word	0x08019db5
 8019c78:	08019cdf 	.word	0x08019cdf
 8019c7c:	08019d6f 	.word	0x08019d6f
 8019c80:	08019c31 	.word	0x08019c31
 8019c84:	08019c31 	.word	0x08019c31
 8019c88:	08019dd7 	.word	0x08019dd7
 8019c8c:	08019c31 	.word	0x08019c31
 8019c90:	08019cdf 	.word	0x08019cdf
 8019c94:	08019c31 	.word	0x08019c31
 8019c98:	08019c31 	.word	0x08019c31
 8019c9c:	08019d77 	.word	0x08019d77
 8019ca0:	6833      	ldr	r3, [r6, #0]
 8019ca2:	1d1a      	adds	r2, r3, #4
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	6032      	str	r2, [r6, #0]
 8019ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019cac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019cb0:	2301      	movs	r3, #1
 8019cb2:	e09d      	b.n	8019df0 <_printf_i+0x1e8>
 8019cb4:	6833      	ldr	r3, [r6, #0]
 8019cb6:	6820      	ldr	r0, [r4, #0]
 8019cb8:	1d19      	adds	r1, r3, #4
 8019cba:	6031      	str	r1, [r6, #0]
 8019cbc:	0606      	lsls	r6, r0, #24
 8019cbe:	d501      	bpl.n	8019cc4 <_printf_i+0xbc>
 8019cc0:	681d      	ldr	r5, [r3, #0]
 8019cc2:	e003      	b.n	8019ccc <_printf_i+0xc4>
 8019cc4:	0645      	lsls	r5, r0, #25
 8019cc6:	d5fb      	bpl.n	8019cc0 <_printf_i+0xb8>
 8019cc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019ccc:	2d00      	cmp	r5, #0
 8019cce:	da03      	bge.n	8019cd8 <_printf_i+0xd0>
 8019cd0:	232d      	movs	r3, #45	@ 0x2d
 8019cd2:	426d      	negs	r5, r5
 8019cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019cd8:	4859      	ldr	r0, [pc, #356]	@ (8019e40 <_printf_i+0x238>)
 8019cda:	230a      	movs	r3, #10
 8019cdc:	e011      	b.n	8019d02 <_printf_i+0xfa>
 8019cde:	6821      	ldr	r1, [r4, #0]
 8019ce0:	6833      	ldr	r3, [r6, #0]
 8019ce2:	0608      	lsls	r0, r1, #24
 8019ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8019ce8:	d402      	bmi.n	8019cf0 <_printf_i+0xe8>
 8019cea:	0649      	lsls	r1, r1, #25
 8019cec:	bf48      	it	mi
 8019cee:	b2ad      	uxthmi	r5, r5
 8019cf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8019cf2:	4853      	ldr	r0, [pc, #332]	@ (8019e40 <_printf_i+0x238>)
 8019cf4:	6033      	str	r3, [r6, #0]
 8019cf6:	bf14      	ite	ne
 8019cf8:	230a      	movne	r3, #10
 8019cfa:	2308      	moveq	r3, #8
 8019cfc:	2100      	movs	r1, #0
 8019cfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019d02:	6866      	ldr	r6, [r4, #4]
 8019d04:	60a6      	str	r6, [r4, #8]
 8019d06:	2e00      	cmp	r6, #0
 8019d08:	bfa2      	ittt	ge
 8019d0a:	6821      	ldrge	r1, [r4, #0]
 8019d0c:	f021 0104 	bicge.w	r1, r1, #4
 8019d10:	6021      	strge	r1, [r4, #0]
 8019d12:	b90d      	cbnz	r5, 8019d18 <_printf_i+0x110>
 8019d14:	2e00      	cmp	r6, #0
 8019d16:	d04b      	beq.n	8019db0 <_printf_i+0x1a8>
 8019d18:	4616      	mov	r6, r2
 8019d1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8019d1e:	fb03 5711 	mls	r7, r3, r1, r5
 8019d22:	5dc7      	ldrb	r7, [r0, r7]
 8019d24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019d28:	462f      	mov	r7, r5
 8019d2a:	42bb      	cmp	r3, r7
 8019d2c:	460d      	mov	r5, r1
 8019d2e:	d9f4      	bls.n	8019d1a <_printf_i+0x112>
 8019d30:	2b08      	cmp	r3, #8
 8019d32:	d10b      	bne.n	8019d4c <_printf_i+0x144>
 8019d34:	6823      	ldr	r3, [r4, #0]
 8019d36:	07df      	lsls	r7, r3, #31
 8019d38:	d508      	bpl.n	8019d4c <_printf_i+0x144>
 8019d3a:	6923      	ldr	r3, [r4, #16]
 8019d3c:	6861      	ldr	r1, [r4, #4]
 8019d3e:	4299      	cmp	r1, r3
 8019d40:	bfde      	ittt	le
 8019d42:	2330      	movle	r3, #48	@ 0x30
 8019d44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019d48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019d4c:	1b92      	subs	r2, r2, r6
 8019d4e:	6122      	str	r2, [r4, #16]
 8019d50:	f8cd a000 	str.w	sl, [sp]
 8019d54:	464b      	mov	r3, r9
 8019d56:	aa03      	add	r2, sp, #12
 8019d58:	4621      	mov	r1, r4
 8019d5a:	4640      	mov	r0, r8
 8019d5c:	f7ff fee6 	bl	8019b2c <_printf_common>
 8019d60:	3001      	adds	r0, #1
 8019d62:	d14a      	bne.n	8019dfa <_printf_i+0x1f2>
 8019d64:	f04f 30ff 	mov.w	r0, #4294967295
 8019d68:	b004      	add	sp, #16
 8019d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d6e:	6823      	ldr	r3, [r4, #0]
 8019d70:	f043 0320 	orr.w	r3, r3, #32
 8019d74:	6023      	str	r3, [r4, #0]
 8019d76:	4833      	ldr	r0, [pc, #204]	@ (8019e44 <_printf_i+0x23c>)
 8019d78:	2778      	movs	r7, #120	@ 0x78
 8019d7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019d7e:	6823      	ldr	r3, [r4, #0]
 8019d80:	6831      	ldr	r1, [r6, #0]
 8019d82:	061f      	lsls	r7, r3, #24
 8019d84:	f851 5b04 	ldr.w	r5, [r1], #4
 8019d88:	d402      	bmi.n	8019d90 <_printf_i+0x188>
 8019d8a:	065f      	lsls	r7, r3, #25
 8019d8c:	bf48      	it	mi
 8019d8e:	b2ad      	uxthmi	r5, r5
 8019d90:	6031      	str	r1, [r6, #0]
 8019d92:	07d9      	lsls	r1, r3, #31
 8019d94:	bf44      	itt	mi
 8019d96:	f043 0320 	orrmi.w	r3, r3, #32
 8019d9a:	6023      	strmi	r3, [r4, #0]
 8019d9c:	b11d      	cbz	r5, 8019da6 <_printf_i+0x19e>
 8019d9e:	2310      	movs	r3, #16
 8019da0:	e7ac      	b.n	8019cfc <_printf_i+0xf4>
 8019da2:	4827      	ldr	r0, [pc, #156]	@ (8019e40 <_printf_i+0x238>)
 8019da4:	e7e9      	b.n	8019d7a <_printf_i+0x172>
 8019da6:	6823      	ldr	r3, [r4, #0]
 8019da8:	f023 0320 	bic.w	r3, r3, #32
 8019dac:	6023      	str	r3, [r4, #0]
 8019dae:	e7f6      	b.n	8019d9e <_printf_i+0x196>
 8019db0:	4616      	mov	r6, r2
 8019db2:	e7bd      	b.n	8019d30 <_printf_i+0x128>
 8019db4:	6833      	ldr	r3, [r6, #0]
 8019db6:	6825      	ldr	r5, [r4, #0]
 8019db8:	6961      	ldr	r1, [r4, #20]
 8019dba:	1d18      	adds	r0, r3, #4
 8019dbc:	6030      	str	r0, [r6, #0]
 8019dbe:	062e      	lsls	r6, r5, #24
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	d501      	bpl.n	8019dc8 <_printf_i+0x1c0>
 8019dc4:	6019      	str	r1, [r3, #0]
 8019dc6:	e002      	b.n	8019dce <_printf_i+0x1c6>
 8019dc8:	0668      	lsls	r0, r5, #25
 8019dca:	d5fb      	bpl.n	8019dc4 <_printf_i+0x1bc>
 8019dcc:	8019      	strh	r1, [r3, #0]
 8019dce:	2300      	movs	r3, #0
 8019dd0:	6123      	str	r3, [r4, #16]
 8019dd2:	4616      	mov	r6, r2
 8019dd4:	e7bc      	b.n	8019d50 <_printf_i+0x148>
 8019dd6:	6833      	ldr	r3, [r6, #0]
 8019dd8:	1d1a      	adds	r2, r3, #4
 8019dda:	6032      	str	r2, [r6, #0]
 8019ddc:	681e      	ldr	r6, [r3, #0]
 8019dde:	6862      	ldr	r2, [r4, #4]
 8019de0:	2100      	movs	r1, #0
 8019de2:	4630      	mov	r0, r6
 8019de4:	f7e6 faa4 	bl	8000330 <memchr>
 8019de8:	b108      	cbz	r0, 8019dee <_printf_i+0x1e6>
 8019dea:	1b80      	subs	r0, r0, r6
 8019dec:	6060      	str	r0, [r4, #4]
 8019dee:	6863      	ldr	r3, [r4, #4]
 8019df0:	6123      	str	r3, [r4, #16]
 8019df2:	2300      	movs	r3, #0
 8019df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019df8:	e7aa      	b.n	8019d50 <_printf_i+0x148>
 8019dfa:	6923      	ldr	r3, [r4, #16]
 8019dfc:	4632      	mov	r2, r6
 8019dfe:	4649      	mov	r1, r9
 8019e00:	4640      	mov	r0, r8
 8019e02:	47d0      	blx	sl
 8019e04:	3001      	adds	r0, #1
 8019e06:	d0ad      	beq.n	8019d64 <_printf_i+0x15c>
 8019e08:	6823      	ldr	r3, [r4, #0]
 8019e0a:	079b      	lsls	r3, r3, #30
 8019e0c:	d413      	bmi.n	8019e36 <_printf_i+0x22e>
 8019e0e:	68e0      	ldr	r0, [r4, #12]
 8019e10:	9b03      	ldr	r3, [sp, #12]
 8019e12:	4298      	cmp	r0, r3
 8019e14:	bfb8      	it	lt
 8019e16:	4618      	movlt	r0, r3
 8019e18:	e7a6      	b.n	8019d68 <_printf_i+0x160>
 8019e1a:	2301      	movs	r3, #1
 8019e1c:	4632      	mov	r2, r6
 8019e1e:	4649      	mov	r1, r9
 8019e20:	4640      	mov	r0, r8
 8019e22:	47d0      	blx	sl
 8019e24:	3001      	adds	r0, #1
 8019e26:	d09d      	beq.n	8019d64 <_printf_i+0x15c>
 8019e28:	3501      	adds	r5, #1
 8019e2a:	68e3      	ldr	r3, [r4, #12]
 8019e2c:	9903      	ldr	r1, [sp, #12]
 8019e2e:	1a5b      	subs	r3, r3, r1
 8019e30:	42ab      	cmp	r3, r5
 8019e32:	dcf2      	bgt.n	8019e1a <_printf_i+0x212>
 8019e34:	e7eb      	b.n	8019e0e <_printf_i+0x206>
 8019e36:	2500      	movs	r5, #0
 8019e38:	f104 0619 	add.w	r6, r4, #25
 8019e3c:	e7f5      	b.n	8019e2a <_printf_i+0x222>
 8019e3e:	bf00      	nop
 8019e40:	0801e49b 	.word	0x0801e49b
 8019e44:	0801e4ac 	.word	0x0801e4ac

08019e48 <std>:
 8019e48:	2300      	movs	r3, #0
 8019e4a:	b510      	push	{r4, lr}
 8019e4c:	4604      	mov	r4, r0
 8019e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8019e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019e56:	6083      	str	r3, [r0, #8]
 8019e58:	8181      	strh	r1, [r0, #12]
 8019e5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8019e5c:	81c2      	strh	r2, [r0, #14]
 8019e5e:	6183      	str	r3, [r0, #24]
 8019e60:	4619      	mov	r1, r3
 8019e62:	2208      	movs	r2, #8
 8019e64:	305c      	adds	r0, #92	@ 0x5c
 8019e66:	f000 f914 	bl	801a092 <memset>
 8019e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8019ea0 <std+0x58>)
 8019e6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8019e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8019ea4 <std+0x5c>)
 8019e70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019e72:	4b0d      	ldr	r3, [pc, #52]	@ (8019ea8 <std+0x60>)
 8019e74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019e76:	4b0d      	ldr	r3, [pc, #52]	@ (8019eac <std+0x64>)
 8019e78:	6323      	str	r3, [r4, #48]	@ 0x30
 8019e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8019eb0 <std+0x68>)
 8019e7c:	6224      	str	r4, [r4, #32]
 8019e7e:	429c      	cmp	r4, r3
 8019e80:	d006      	beq.n	8019e90 <std+0x48>
 8019e82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019e86:	4294      	cmp	r4, r2
 8019e88:	d002      	beq.n	8019e90 <std+0x48>
 8019e8a:	33d0      	adds	r3, #208	@ 0xd0
 8019e8c:	429c      	cmp	r4, r3
 8019e8e:	d105      	bne.n	8019e9c <std+0x54>
 8019e90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e98:	f000 b996 	b.w	801a1c8 <__retarget_lock_init_recursive>
 8019e9c:	bd10      	pop	{r4, pc}
 8019e9e:	bf00      	nop
 8019ea0:	0801a00d 	.word	0x0801a00d
 8019ea4:	0801a02f 	.word	0x0801a02f
 8019ea8:	0801a067 	.word	0x0801a067
 8019eac:	0801a08b 	.word	0x0801a08b
 8019eb0:	2401529c 	.word	0x2401529c

08019eb4 <stdio_exit_handler>:
 8019eb4:	4a02      	ldr	r2, [pc, #8]	@ (8019ec0 <stdio_exit_handler+0xc>)
 8019eb6:	4903      	ldr	r1, [pc, #12]	@ (8019ec4 <stdio_exit_handler+0x10>)
 8019eb8:	4803      	ldr	r0, [pc, #12]	@ (8019ec8 <stdio_exit_handler+0x14>)
 8019eba:	f000 b869 	b.w	8019f90 <_fwalk_sglue>
 8019ebe:	bf00      	nop
 8019ec0:	24000134 	.word	0x24000134
 8019ec4:	0801c385 	.word	0x0801c385
 8019ec8:	240002b0 	.word	0x240002b0

08019ecc <cleanup_stdio>:
 8019ecc:	6841      	ldr	r1, [r0, #4]
 8019ece:	4b0c      	ldr	r3, [pc, #48]	@ (8019f00 <cleanup_stdio+0x34>)
 8019ed0:	4299      	cmp	r1, r3
 8019ed2:	b510      	push	{r4, lr}
 8019ed4:	4604      	mov	r4, r0
 8019ed6:	d001      	beq.n	8019edc <cleanup_stdio+0x10>
 8019ed8:	f002 fa54 	bl	801c384 <_fflush_r>
 8019edc:	68a1      	ldr	r1, [r4, #8]
 8019ede:	4b09      	ldr	r3, [pc, #36]	@ (8019f04 <cleanup_stdio+0x38>)
 8019ee0:	4299      	cmp	r1, r3
 8019ee2:	d002      	beq.n	8019eea <cleanup_stdio+0x1e>
 8019ee4:	4620      	mov	r0, r4
 8019ee6:	f002 fa4d 	bl	801c384 <_fflush_r>
 8019eea:	68e1      	ldr	r1, [r4, #12]
 8019eec:	4b06      	ldr	r3, [pc, #24]	@ (8019f08 <cleanup_stdio+0x3c>)
 8019eee:	4299      	cmp	r1, r3
 8019ef0:	d004      	beq.n	8019efc <cleanup_stdio+0x30>
 8019ef2:	4620      	mov	r0, r4
 8019ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ef8:	f002 ba44 	b.w	801c384 <_fflush_r>
 8019efc:	bd10      	pop	{r4, pc}
 8019efe:	bf00      	nop
 8019f00:	2401529c 	.word	0x2401529c
 8019f04:	24015304 	.word	0x24015304
 8019f08:	2401536c 	.word	0x2401536c

08019f0c <global_stdio_init.part.0>:
 8019f0c:	b510      	push	{r4, lr}
 8019f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8019f3c <global_stdio_init.part.0+0x30>)
 8019f10:	4c0b      	ldr	r4, [pc, #44]	@ (8019f40 <global_stdio_init.part.0+0x34>)
 8019f12:	4a0c      	ldr	r2, [pc, #48]	@ (8019f44 <global_stdio_init.part.0+0x38>)
 8019f14:	601a      	str	r2, [r3, #0]
 8019f16:	4620      	mov	r0, r4
 8019f18:	2200      	movs	r2, #0
 8019f1a:	2104      	movs	r1, #4
 8019f1c:	f7ff ff94 	bl	8019e48 <std>
 8019f20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019f24:	2201      	movs	r2, #1
 8019f26:	2109      	movs	r1, #9
 8019f28:	f7ff ff8e 	bl	8019e48 <std>
 8019f2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019f30:	2202      	movs	r2, #2
 8019f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f36:	2112      	movs	r1, #18
 8019f38:	f7ff bf86 	b.w	8019e48 <std>
 8019f3c:	240153d4 	.word	0x240153d4
 8019f40:	2401529c 	.word	0x2401529c
 8019f44:	08019eb5 	.word	0x08019eb5

08019f48 <__sfp_lock_acquire>:
 8019f48:	4801      	ldr	r0, [pc, #4]	@ (8019f50 <__sfp_lock_acquire+0x8>)
 8019f4a:	f000 b93e 	b.w	801a1ca <__retarget_lock_acquire_recursive>
 8019f4e:	bf00      	nop
 8019f50:	240153dd 	.word	0x240153dd

08019f54 <__sfp_lock_release>:
 8019f54:	4801      	ldr	r0, [pc, #4]	@ (8019f5c <__sfp_lock_release+0x8>)
 8019f56:	f000 b939 	b.w	801a1cc <__retarget_lock_release_recursive>
 8019f5a:	bf00      	nop
 8019f5c:	240153dd 	.word	0x240153dd

08019f60 <__sinit>:
 8019f60:	b510      	push	{r4, lr}
 8019f62:	4604      	mov	r4, r0
 8019f64:	f7ff fff0 	bl	8019f48 <__sfp_lock_acquire>
 8019f68:	6a23      	ldr	r3, [r4, #32]
 8019f6a:	b11b      	cbz	r3, 8019f74 <__sinit+0x14>
 8019f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f70:	f7ff bff0 	b.w	8019f54 <__sfp_lock_release>
 8019f74:	4b04      	ldr	r3, [pc, #16]	@ (8019f88 <__sinit+0x28>)
 8019f76:	6223      	str	r3, [r4, #32]
 8019f78:	4b04      	ldr	r3, [pc, #16]	@ (8019f8c <__sinit+0x2c>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d1f5      	bne.n	8019f6c <__sinit+0xc>
 8019f80:	f7ff ffc4 	bl	8019f0c <global_stdio_init.part.0>
 8019f84:	e7f2      	b.n	8019f6c <__sinit+0xc>
 8019f86:	bf00      	nop
 8019f88:	08019ecd 	.word	0x08019ecd
 8019f8c:	240153d4 	.word	0x240153d4

08019f90 <_fwalk_sglue>:
 8019f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f94:	4607      	mov	r7, r0
 8019f96:	4688      	mov	r8, r1
 8019f98:	4614      	mov	r4, r2
 8019f9a:	2600      	movs	r6, #0
 8019f9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019fa0:	f1b9 0901 	subs.w	r9, r9, #1
 8019fa4:	d505      	bpl.n	8019fb2 <_fwalk_sglue+0x22>
 8019fa6:	6824      	ldr	r4, [r4, #0]
 8019fa8:	2c00      	cmp	r4, #0
 8019faa:	d1f7      	bne.n	8019f9c <_fwalk_sglue+0xc>
 8019fac:	4630      	mov	r0, r6
 8019fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fb2:	89ab      	ldrh	r3, [r5, #12]
 8019fb4:	2b01      	cmp	r3, #1
 8019fb6:	d907      	bls.n	8019fc8 <_fwalk_sglue+0x38>
 8019fb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019fbc:	3301      	adds	r3, #1
 8019fbe:	d003      	beq.n	8019fc8 <_fwalk_sglue+0x38>
 8019fc0:	4629      	mov	r1, r5
 8019fc2:	4638      	mov	r0, r7
 8019fc4:	47c0      	blx	r8
 8019fc6:	4306      	orrs	r6, r0
 8019fc8:	3568      	adds	r5, #104	@ 0x68
 8019fca:	e7e9      	b.n	8019fa0 <_fwalk_sglue+0x10>

08019fcc <siprintf>:
 8019fcc:	b40e      	push	{r1, r2, r3}
 8019fce:	b500      	push	{lr}
 8019fd0:	b09c      	sub	sp, #112	@ 0x70
 8019fd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8019fd4:	9002      	str	r0, [sp, #8]
 8019fd6:	9006      	str	r0, [sp, #24]
 8019fd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019fdc:	4809      	ldr	r0, [pc, #36]	@ (801a004 <siprintf+0x38>)
 8019fde:	9107      	str	r1, [sp, #28]
 8019fe0:	9104      	str	r1, [sp, #16]
 8019fe2:	4909      	ldr	r1, [pc, #36]	@ (801a008 <siprintf+0x3c>)
 8019fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8019fe8:	9105      	str	r1, [sp, #20]
 8019fea:	6800      	ldr	r0, [r0, #0]
 8019fec:	9301      	str	r3, [sp, #4]
 8019fee:	a902      	add	r1, sp, #8
 8019ff0:	f002 f848 	bl	801c084 <_svfiprintf_r>
 8019ff4:	9b02      	ldr	r3, [sp, #8]
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	701a      	strb	r2, [r3, #0]
 8019ffa:	b01c      	add	sp, #112	@ 0x70
 8019ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 801a000:	b003      	add	sp, #12
 801a002:	4770      	bx	lr
 801a004:	240002ac 	.word	0x240002ac
 801a008:	ffff0208 	.word	0xffff0208

0801a00c <__sread>:
 801a00c:	b510      	push	{r4, lr}
 801a00e:	460c      	mov	r4, r1
 801a010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a014:	f000 f88a 	bl	801a12c <_read_r>
 801a018:	2800      	cmp	r0, #0
 801a01a:	bfab      	itete	ge
 801a01c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a01e:	89a3      	ldrhlt	r3, [r4, #12]
 801a020:	181b      	addge	r3, r3, r0
 801a022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a026:	bfac      	ite	ge
 801a028:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a02a:	81a3      	strhlt	r3, [r4, #12]
 801a02c:	bd10      	pop	{r4, pc}

0801a02e <__swrite>:
 801a02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a032:	461f      	mov	r7, r3
 801a034:	898b      	ldrh	r3, [r1, #12]
 801a036:	05db      	lsls	r3, r3, #23
 801a038:	4605      	mov	r5, r0
 801a03a:	460c      	mov	r4, r1
 801a03c:	4616      	mov	r6, r2
 801a03e:	d505      	bpl.n	801a04c <__swrite+0x1e>
 801a040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a044:	2302      	movs	r3, #2
 801a046:	2200      	movs	r2, #0
 801a048:	f000 f85e 	bl	801a108 <_lseek_r>
 801a04c:	89a3      	ldrh	r3, [r4, #12]
 801a04e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a056:	81a3      	strh	r3, [r4, #12]
 801a058:	4632      	mov	r2, r6
 801a05a:	463b      	mov	r3, r7
 801a05c:	4628      	mov	r0, r5
 801a05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a062:	f000 b875 	b.w	801a150 <_write_r>

0801a066 <__sseek>:
 801a066:	b510      	push	{r4, lr}
 801a068:	460c      	mov	r4, r1
 801a06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a06e:	f000 f84b 	bl	801a108 <_lseek_r>
 801a072:	1c43      	adds	r3, r0, #1
 801a074:	89a3      	ldrh	r3, [r4, #12]
 801a076:	bf15      	itete	ne
 801a078:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a07a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a07e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a082:	81a3      	strheq	r3, [r4, #12]
 801a084:	bf18      	it	ne
 801a086:	81a3      	strhne	r3, [r4, #12]
 801a088:	bd10      	pop	{r4, pc}

0801a08a <__sclose>:
 801a08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a08e:	f000 b82b 	b.w	801a0e8 <_close_r>

0801a092 <memset>:
 801a092:	4402      	add	r2, r0
 801a094:	4603      	mov	r3, r0
 801a096:	4293      	cmp	r3, r2
 801a098:	d100      	bne.n	801a09c <memset+0xa>
 801a09a:	4770      	bx	lr
 801a09c:	f803 1b01 	strb.w	r1, [r3], #1
 801a0a0:	e7f9      	b.n	801a096 <memset+0x4>

0801a0a2 <strchr>:
 801a0a2:	b2c9      	uxtb	r1, r1
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0ac:	b112      	cbz	r2, 801a0b4 <strchr+0x12>
 801a0ae:	428a      	cmp	r2, r1
 801a0b0:	d1f9      	bne.n	801a0a6 <strchr+0x4>
 801a0b2:	4770      	bx	lr
 801a0b4:	2900      	cmp	r1, #0
 801a0b6:	bf18      	it	ne
 801a0b8:	2000      	movne	r0, #0
 801a0ba:	4770      	bx	lr

0801a0bc <strncmp>:
 801a0bc:	b510      	push	{r4, lr}
 801a0be:	b16a      	cbz	r2, 801a0dc <strncmp+0x20>
 801a0c0:	3901      	subs	r1, #1
 801a0c2:	1884      	adds	r4, r0, r2
 801a0c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a0c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a0cc:	429a      	cmp	r2, r3
 801a0ce:	d103      	bne.n	801a0d8 <strncmp+0x1c>
 801a0d0:	42a0      	cmp	r0, r4
 801a0d2:	d001      	beq.n	801a0d8 <strncmp+0x1c>
 801a0d4:	2a00      	cmp	r2, #0
 801a0d6:	d1f5      	bne.n	801a0c4 <strncmp+0x8>
 801a0d8:	1ad0      	subs	r0, r2, r3
 801a0da:	bd10      	pop	{r4, pc}
 801a0dc:	4610      	mov	r0, r2
 801a0de:	e7fc      	b.n	801a0da <strncmp+0x1e>

0801a0e0 <_localeconv_r>:
 801a0e0:	4800      	ldr	r0, [pc, #0]	@ (801a0e4 <_localeconv_r+0x4>)
 801a0e2:	4770      	bx	lr
 801a0e4:	24000230 	.word	0x24000230

0801a0e8 <_close_r>:
 801a0e8:	b538      	push	{r3, r4, r5, lr}
 801a0ea:	4d06      	ldr	r5, [pc, #24]	@ (801a104 <_close_r+0x1c>)
 801a0ec:	2300      	movs	r3, #0
 801a0ee:	4604      	mov	r4, r0
 801a0f0:	4608      	mov	r0, r1
 801a0f2:	602b      	str	r3, [r5, #0]
 801a0f4:	f7e8 fe74 	bl	8002de0 <_close>
 801a0f8:	1c43      	adds	r3, r0, #1
 801a0fa:	d102      	bne.n	801a102 <_close_r+0x1a>
 801a0fc:	682b      	ldr	r3, [r5, #0]
 801a0fe:	b103      	cbz	r3, 801a102 <_close_r+0x1a>
 801a100:	6023      	str	r3, [r4, #0]
 801a102:	bd38      	pop	{r3, r4, r5, pc}
 801a104:	240153d8 	.word	0x240153d8

0801a108 <_lseek_r>:
 801a108:	b538      	push	{r3, r4, r5, lr}
 801a10a:	4d07      	ldr	r5, [pc, #28]	@ (801a128 <_lseek_r+0x20>)
 801a10c:	4604      	mov	r4, r0
 801a10e:	4608      	mov	r0, r1
 801a110:	4611      	mov	r1, r2
 801a112:	2200      	movs	r2, #0
 801a114:	602a      	str	r2, [r5, #0]
 801a116:	461a      	mov	r2, r3
 801a118:	f7e8 fe89 	bl	8002e2e <_lseek>
 801a11c:	1c43      	adds	r3, r0, #1
 801a11e:	d102      	bne.n	801a126 <_lseek_r+0x1e>
 801a120:	682b      	ldr	r3, [r5, #0]
 801a122:	b103      	cbz	r3, 801a126 <_lseek_r+0x1e>
 801a124:	6023      	str	r3, [r4, #0]
 801a126:	bd38      	pop	{r3, r4, r5, pc}
 801a128:	240153d8 	.word	0x240153d8

0801a12c <_read_r>:
 801a12c:	b538      	push	{r3, r4, r5, lr}
 801a12e:	4d07      	ldr	r5, [pc, #28]	@ (801a14c <_read_r+0x20>)
 801a130:	4604      	mov	r4, r0
 801a132:	4608      	mov	r0, r1
 801a134:	4611      	mov	r1, r2
 801a136:	2200      	movs	r2, #0
 801a138:	602a      	str	r2, [r5, #0]
 801a13a:	461a      	mov	r2, r3
 801a13c:	f7e8 fe17 	bl	8002d6e <_read>
 801a140:	1c43      	adds	r3, r0, #1
 801a142:	d102      	bne.n	801a14a <_read_r+0x1e>
 801a144:	682b      	ldr	r3, [r5, #0]
 801a146:	b103      	cbz	r3, 801a14a <_read_r+0x1e>
 801a148:	6023      	str	r3, [r4, #0]
 801a14a:	bd38      	pop	{r3, r4, r5, pc}
 801a14c:	240153d8 	.word	0x240153d8

0801a150 <_write_r>:
 801a150:	b538      	push	{r3, r4, r5, lr}
 801a152:	4d07      	ldr	r5, [pc, #28]	@ (801a170 <_write_r+0x20>)
 801a154:	4604      	mov	r4, r0
 801a156:	4608      	mov	r0, r1
 801a158:	4611      	mov	r1, r2
 801a15a:	2200      	movs	r2, #0
 801a15c:	602a      	str	r2, [r5, #0]
 801a15e:	461a      	mov	r2, r3
 801a160:	f7e8 fe22 	bl	8002da8 <_write>
 801a164:	1c43      	adds	r3, r0, #1
 801a166:	d102      	bne.n	801a16e <_write_r+0x1e>
 801a168:	682b      	ldr	r3, [r5, #0]
 801a16a:	b103      	cbz	r3, 801a16e <_write_r+0x1e>
 801a16c:	6023      	str	r3, [r4, #0]
 801a16e:	bd38      	pop	{r3, r4, r5, pc}
 801a170:	240153d8 	.word	0x240153d8

0801a174 <__errno>:
 801a174:	4b01      	ldr	r3, [pc, #4]	@ (801a17c <__errno+0x8>)
 801a176:	6818      	ldr	r0, [r3, #0]
 801a178:	4770      	bx	lr
 801a17a:	bf00      	nop
 801a17c:	240002ac 	.word	0x240002ac

0801a180 <__libc_init_array>:
 801a180:	b570      	push	{r4, r5, r6, lr}
 801a182:	4d0d      	ldr	r5, [pc, #52]	@ (801a1b8 <__libc_init_array+0x38>)
 801a184:	4c0d      	ldr	r4, [pc, #52]	@ (801a1bc <__libc_init_array+0x3c>)
 801a186:	1b64      	subs	r4, r4, r5
 801a188:	10a4      	asrs	r4, r4, #2
 801a18a:	2600      	movs	r6, #0
 801a18c:	42a6      	cmp	r6, r4
 801a18e:	d109      	bne.n	801a1a4 <__libc_init_array+0x24>
 801a190:	4d0b      	ldr	r5, [pc, #44]	@ (801a1c0 <__libc_init_array+0x40>)
 801a192:	4c0c      	ldr	r4, [pc, #48]	@ (801a1c4 <__libc_init_array+0x44>)
 801a194:	f003 fb18 	bl	801d7c8 <_init>
 801a198:	1b64      	subs	r4, r4, r5
 801a19a:	10a4      	asrs	r4, r4, #2
 801a19c:	2600      	movs	r6, #0
 801a19e:	42a6      	cmp	r6, r4
 801a1a0:	d105      	bne.n	801a1ae <__libc_init_array+0x2e>
 801a1a2:	bd70      	pop	{r4, r5, r6, pc}
 801a1a4:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1a8:	4798      	blx	r3
 801a1aa:	3601      	adds	r6, #1
 801a1ac:	e7ee      	b.n	801a18c <__libc_init_array+0xc>
 801a1ae:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1b2:	4798      	blx	r3
 801a1b4:	3601      	adds	r6, #1
 801a1b6:	e7f2      	b.n	801a19e <__libc_init_array+0x1e>
 801a1b8:	0801ea78 	.word	0x0801ea78
 801a1bc:	0801ea78 	.word	0x0801ea78
 801a1c0:	0801ea78 	.word	0x0801ea78
 801a1c4:	0801ea7c 	.word	0x0801ea7c

0801a1c8 <__retarget_lock_init_recursive>:
 801a1c8:	4770      	bx	lr

0801a1ca <__retarget_lock_acquire_recursive>:
 801a1ca:	4770      	bx	lr

0801a1cc <__retarget_lock_release_recursive>:
 801a1cc:	4770      	bx	lr

0801a1ce <memcpy>:
 801a1ce:	440a      	add	r2, r1
 801a1d0:	4291      	cmp	r1, r2
 801a1d2:	f100 33ff 	add.w	r3, r0, #4294967295
 801a1d6:	d100      	bne.n	801a1da <memcpy+0xc>
 801a1d8:	4770      	bx	lr
 801a1da:	b510      	push	{r4, lr}
 801a1dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a1e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a1e4:	4291      	cmp	r1, r2
 801a1e6:	d1f9      	bne.n	801a1dc <memcpy+0xe>
 801a1e8:	bd10      	pop	{r4, pc}
 801a1ea:	0000      	movs	r0, r0
 801a1ec:	0000      	movs	r0, r0
	...

0801a1f0 <nan>:
 801a1f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a1f8 <nan+0x8>
 801a1f4:	4770      	bx	lr
 801a1f6:	bf00      	nop
 801a1f8:	00000000 	.word	0x00000000
 801a1fc:	7ff80000 	.word	0x7ff80000

0801a200 <quorem>:
 801a200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a204:	6903      	ldr	r3, [r0, #16]
 801a206:	690c      	ldr	r4, [r1, #16]
 801a208:	42a3      	cmp	r3, r4
 801a20a:	4607      	mov	r7, r0
 801a20c:	db7e      	blt.n	801a30c <quorem+0x10c>
 801a20e:	3c01      	subs	r4, #1
 801a210:	f101 0814 	add.w	r8, r1, #20
 801a214:	00a3      	lsls	r3, r4, #2
 801a216:	f100 0514 	add.w	r5, r0, #20
 801a21a:	9300      	str	r3, [sp, #0]
 801a21c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a220:	9301      	str	r3, [sp, #4]
 801a222:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a22a:	3301      	adds	r3, #1
 801a22c:	429a      	cmp	r2, r3
 801a22e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a232:	fbb2 f6f3 	udiv	r6, r2, r3
 801a236:	d32e      	bcc.n	801a296 <quorem+0x96>
 801a238:	f04f 0a00 	mov.w	sl, #0
 801a23c:	46c4      	mov	ip, r8
 801a23e:	46ae      	mov	lr, r5
 801a240:	46d3      	mov	fp, sl
 801a242:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a246:	b298      	uxth	r0, r3
 801a248:	fb06 a000 	mla	r0, r6, r0, sl
 801a24c:	0c02      	lsrs	r2, r0, #16
 801a24e:	0c1b      	lsrs	r3, r3, #16
 801a250:	fb06 2303 	mla	r3, r6, r3, r2
 801a254:	f8de 2000 	ldr.w	r2, [lr]
 801a258:	b280      	uxth	r0, r0
 801a25a:	b292      	uxth	r2, r2
 801a25c:	1a12      	subs	r2, r2, r0
 801a25e:	445a      	add	r2, fp
 801a260:	f8de 0000 	ldr.w	r0, [lr]
 801a264:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a268:	b29b      	uxth	r3, r3
 801a26a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a26e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a272:	b292      	uxth	r2, r2
 801a274:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a278:	45e1      	cmp	r9, ip
 801a27a:	f84e 2b04 	str.w	r2, [lr], #4
 801a27e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a282:	d2de      	bcs.n	801a242 <quorem+0x42>
 801a284:	9b00      	ldr	r3, [sp, #0]
 801a286:	58eb      	ldr	r3, [r5, r3]
 801a288:	b92b      	cbnz	r3, 801a296 <quorem+0x96>
 801a28a:	9b01      	ldr	r3, [sp, #4]
 801a28c:	3b04      	subs	r3, #4
 801a28e:	429d      	cmp	r5, r3
 801a290:	461a      	mov	r2, r3
 801a292:	d32f      	bcc.n	801a2f4 <quorem+0xf4>
 801a294:	613c      	str	r4, [r7, #16]
 801a296:	4638      	mov	r0, r7
 801a298:	f001 fca0 	bl	801bbdc <__mcmp>
 801a29c:	2800      	cmp	r0, #0
 801a29e:	db25      	blt.n	801a2ec <quorem+0xec>
 801a2a0:	4629      	mov	r1, r5
 801a2a2:	2000      	movs	r0, #0
 801a2a4:	f858 2b04 	ldr.w	r2, [r8], #4
 801a2a8:	f8d1 c000 	ldr.w	ip, [r1]
 801a2ac:	fa1f fe82 	uxth.w	lr, r2
 801a2b0:	fa1f f38c 	uxth.w	r3, ip
 801a2b4:	eba3 030e 	sub.w	r3, r3, lr
 801a2b8:	4403      	add	r3, r0
 801a2ba:	0c12      	lsrs	r2, r2, #16
 801a2bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a2c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a2c4:	b29b      	uxth	r3, r3
 801a2c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a2ca:	45c1      	cmp	r9, r8
 801a2cc:	f841 3b04 	str.w	r3, [r1], #4
 801a2d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a2d4:	d2e6      	bcs.n	801a2a4 <quorem+0xa4>
 801a2d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a2da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a2de:	b922      	cbnz	r2, 801a2ea <quorem+0xea>
 801a2e0:	3b04      	subs	r3, #4
 801a2e2:	429d      	cmp	r5, r3
 801a2e4:	461a      	mov	r2, r3
 801a2e6:	d30b      	bcc.n	801a300 <quorem+0x100>
 801a2e8:	613c      	str	r4, [r7, #16]
 801a2ea:	3601      	adds	r6, #1
 801a2ec:	4630      	mov	r0, r6
 801a2ee:	b003      	add	sp, #12
 801a2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2f4:	6812      	ldr	r2, [r2, #0]
 801a2f6:	3b04      	subs	r3, #4
 801a2f8:	2a00      	cmp	r2, #0
 801a2fa:	d1cb      	bne.n	801a294 <quorem+0x94>
 801a2fc:	3c01      	subs	r4, #1
 801a2fe:	e7c6      	b.n	801a28e <quorem+0x8e>
 801a300:	6812      	ldr	r2, [r2, #0]
 801a302:	3b04      	subs	r3, #4
 801a304:	2a00      	cmp	r2, #0
 801a306:	d1ef      	bne.n	801a2e8 <quorem+0xe8>
 801a308:	3c01      	subs	r4, #1
 801a30a:	e7ea      	b.n	801a2e2 <quorem+0xe2>
 801a30c:	2000      	movs	r0, #0
 801a30e:	e7ee      	b.n	801a2ee <quorem+0xee>

0801a310 <_dtoa_r>:
 801a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a314:	ed2d 8b02 	vpush	{d8}
 801a318:	69c7      	ldr	r7, [r0, #28]
 801a31a:	b091      	sub	sp, #68	@ 0x44
 801a31c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a320:	ec55 4b10 	vmov	r4, r5, d0
 801a324:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801a326:	9107      	str	r1, [sp, #28]
 801a328:	4681      	mov	r9, r0
 801a32a:	9209      	str	r2, [sp, #36]	@ 0x24
 801a32c:	930d      	str	r3, [sp, #52]	@ 0x34
 801a32e:	b97f      	cbnz	r7, 801a350 <_dtoa_r+0x40>
 801a330:	2010      	movs	r0, #16
 801a332:	f001 f8c7 	bl	801b4c4 <malloc>
 801a336:	4602      	mov	r2, r0
 801a338:	f8c9 001c 	str.w	r0, [r9, #28]
 801a33c:	b920      	cbnz	r0, 801a348 <_dtoa_r+0x38>
 801a33e:	4ba0      	ldr	r3, [pc, #640]	@ (801a5c0 <_dtoa_r+0x2b0>)
 801a340:	21ef      	movs	r1, #239	@ 0xef
 801a342:	48a0      	ldr	r0, [pc, #640]	@ (801a5c4 <_dtoa_r+0x2b4>)
 801a344:	f002 f870 	bl	801c428 <__assert_func>
 801a348:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a34c:	6007      	str	r7, [r0, #0]
 801a34e:	60c7      	str	r7, [r0, #12]
 801a350:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a354:	6819      	ldr	r1, [r3, #0]
 801a356:	b159      	cbz	r1, 801a370 <_dtoa_r+0x60>
 801a358:	685a      	ldr	r2, [r3, #4]
 801a35a:	604a      	str	r2, [r1, #4]
 801a35c:	2301      	movs	r3, #1
 801a35e:	4093      	lsls	r3, r2
 801a360:	608b      	str	r3, [r1, #8]
 801a362:	4648      	mov	r0, r9
 801a364:	f001 f9b6 	bl	801b6d4 <_Bfree>
 801a368:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a36c:	2200      	movs	r2, #0
 801a36e:	601a      	str	r2, [r3, #0]
 801a370:	1e2b      	subs	r3, r5, #0
 801a372:	bfbb      	ittet	lt
 801a374:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a378:	9303      	strlt	r3, [sp, #12]
 801a37a:	2300      	movge	r3, #0
 801a37c:	2201      	movlt	r2, #1
 801a37e:	bfac      	ite	ge
 801a380:	6033      	strge	r3, [r6, #0]
 801a382:	6032      	strlt	r2, [r6, #0]
 801a384:	4b90      	ldr	r3, [pc, #576]	@ (801a5c8 <_dtoa_r+0x2b8>)
 801a386:	9e03      	ldr	r6, [sp, #12]
 801a388:	43b3      	bics	r3, r6
 801a38a:	d110      	bne.n	801a3ae <_dtoa_r+0x9e>
 801a38c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a38e:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a392:	6013      	str	r3, [r2, #0]
 801a394:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801a398:	4323      	orrs	r3, r4
 801a39a:	f000 84de 	beq.w	801ad5a <_dtoa_r+0xa4a>
 801a39e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a3a0:	4f8a      	ldr	r7, [pc, #552]	@ (801a5cc <_dtoa_r+0x2bc>)
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	f000 84e0 	beq.w	801ad68 <_dtoa_r+0xa58>
 801a3a8:	1cfb      	adds	r3, r7, #3
 801a3aa:	f000 bcdb 	b.w	801ad64 <_dtoa_r+0xa54>
 801a3ae:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a3b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3ba:	d10a      	bne.n	801a3d2 <_dtoa_r+0xc2>
 801a3bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a3be:	2301      	movs	r3, #1
 801a3c0:	6013      	str	r3, [r2, #0]
 801a3c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a3c4:	b113      	cbz	r3, 801a3cc <_dtoa_r+0xbc>
 801a3c6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a3c8:	4b81      	ldr	r3, [pc, #516]	@ (801a5d0 <_dtoa_r+0x2c0>)
 801a3ca:	6013      	str	r3, [r2, #0]
 801a3cc:	4f81      	ldr	r7, [pc, #516]	@ (801a5d4 <_dtoa_r+0x2c4>)
 801a3ce:	f000 bccb 	b.w	801ad68 <_dtoa_r+0xa58>
 801a3d2:	aa0e      	add	r2, sp, #56	@ 0x38
 801a3d4:	a90f      	add	r1, sp, #60	@ 0x3c
 801a3d6:	4648      	mov	r0, r9
 801a3d8:	eeb0 0b48 	vmov.f64	d0, d8
 801a3dc:	f001 fd1e 	bl	801be1c <__d2b>
 801a3e0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801a3e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a3e6:	9001      	str	r0, [sp, #4]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d045      	beq.n	801a478 <_dtoa_r+0x168>
 801a3ec:	eeb0 7b48 	vmov.f64	d7, d8
 801a3f0:	ee18 1a90 	vmov	r1, s17
 801a3f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a3f8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801a3fc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801a400:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801a404:	2500      	movs	r5, #0
 801a406:	ee07 1a90 	vmov	s15, r1
 801a40a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801a40e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a5a8 <_dtoa_r+0x298>
 801a412:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a416:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801a5b0 <_dtoa_r+0x2a0>
 801a41a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a41e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a5b8 <_dtoa_r+0x2a8>
 801a422:	ee07 3a90 	vmov	s15, r3
 801a426:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a42a:	eeb0 7b46 	vmov.f64	d7, d6
 801a42e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a432:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a436:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a43e:	ee16 8a90 	vmov	r8, s13
 801a442:	d508      	bpl.n	801a456 <_dtoa_r+0x146>
 801a444:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a448:	eeb4 6b47 	vcmp.f64	d6, d7
 801a44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a450:	bf18      	it	ne
 801a452:	f108 38ff 	addne.w	r8, r8, #4294967295
 801a456:	f1b8 0f16 	cmp.w	r8, #22
 801a45a:	d82b      	bhi.n	801a4b4 <_dtoa_r+0x1a4>
 801a45c:	495e      	ldr	r1, [pc, #376]	@ (801a5d8 <_dtoa_r+0x2c8>)
 801a45e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801a462:	ed91 7b00 	vldr	d7, [r1]
 801a466:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a46e:	d501      	bpl.n	801a474 <_dtoa_r+0x164>
 801a470:	f108 38ff 	add.w	r8, r8, #4294967295
 801a474:	2100      	movs	r1, #0
 801a476:	e01e      	b.n	801a4b6 <_dtoa_r+0x1a6>
 801a478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a47a:	4413      	add	r3, r2
 801a47c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801a480:	2920      	cmp	r1, #32
 801a482:	bfc1      	itttt	gt
 801a484:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801a488:	408e      	lslgt	r6, r1
 801a48a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801a48e:	fa24 f101 	lsrgt.w	r1, r4, r1
 801a492:	bfd6      	itet	le
 801a494:	f1c1 0120 	rsble	r1, r1, #32
 801a498:	4331      	orrgt	r1, r6
 801a49a:	fa04 f101 	lslle.w	r1, r4, r1
 801a49e:	ee07 1a90 	vmov	s15, r1
 801a4a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a4a6:	3b01      	subs	r3, #1
 801a4a8:	ee17 1a90 	vmov	r1, s15
 801a4ac:	2501      	movs	r5, #1
 801a4ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801a4b2:	e7a8      	b.n	801a406 <_dtoa_r+0xf6>
 801a4b4:	2101      	movs	r1, #1
 801a4b6:	1ad2      	subs	r2, r2, r3
 801a4b8:	1e53      	subs	r3, r2, #1
 801a4ba:	9306      	str	r3, [sp, #24]
 801a4bc:	bf45      	ittet	mi
 801a4be:	f1c2 0301 	rsbmi	r3, r2, #1
 801a4c2:	9305      	strmi	r3, [sp, #20]
 801a4c4:	2300      	movpl	r3, #0
 801a4c6:	2300      	movmi	r3, #0
 801a4c8:	bf4c      	ite	mi
 801a4ca:	9306      	strmi	r3, [sp, #24]
 801a4cc:	9305      	strpl	r3, [sp, #20]
 801a4ce:	f1b8 0f00 	cmp.w	r8, #0
 801a4d2:	910c      	str	r1, [sp, #48]	@ 0x30
 801a4d4:	db18      	blt.n	801a508 <_dtoa_r+0x1f8>
 801a4d6:	9b06      	ldr	r3, [sp, #24]
 801a4d8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801a4dc:	4443      	add	r3, r8
 801a4de:	9306      	str	r3, [sp, #24]
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	9a07      	ldr	r2, [sp, #28]
 801a4e4:	2a09      	cmp	r2, #9
 801a4e6:	d849      	bhi.n	801a57c <_dtoa_r+0x26c>
 801a4e8:	2a05      	cmp	r2, #5
 801a4ea:	bfc4      	itt	gt
 801a4ec:	3a04      	subgt	r2, #4
 801a4ee:	9207      	strgt	r2, [sp, #28]
 801a4f0:	9a07      	ldr	r2, [sp, #28]
 801a4f2:	f1a2 0202 	sub.w	r2, r2, #2
 801a4f6:	bfcc      	ite	gt
 801a4f8:	2400      	movgt	r4, #0
 801a4fa:	2401      	movle	r4, #1
 801a4fc:	2a03      	cmp	r2, #3
 801a4fe:	d848      	bhi.n	801a592 <_dtoa_r+0x282>
 801a500:	e8df f002 	tbb	[pc, r2]
 801a504:	3a2c2e0b 	.word	0x3a2c2e0b
 801a508:	9b05      	ldr	r3, [sp, #20]
 801a50a:	2200      	movs	r2, #0
 801a50c:	eba3 0308 	sub.w	r3, r3, r8
 801a510:	9305      	str	r3, [sp, #20]
 801a512:	920a      	str	r2, [sp, #40]	@ 0x28
 801a514:	f1c8 0300 	rsb	r3, r8, #0
 801a518:	e7e3      	b.n	801a4e2 <_dtoa_r+0x1d2>
 801a51a:	2200      	movs	r2, #0
 801a51c:	9208      	str	r2, [sp, #32]
 801a51e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a520:	2a00      	cmp	r2, #0
 801a522:	dc39      	bgt.n	801a598 <_dtoa_r+0x288>
 801a524:	f04f 0b01 	mov.w	fp, #1
 801a528:	46da      	mov	sl, fp
 801a52a:	465a      	mov	r2, fp
 801a52c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801a530:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801a534:	2100      	movs	r1, #0
 801a536:	2004      	movs	r0, #4
 801a538:	f100 0614 	add.w	r6, r0, #20
 801a53c:	4296      	cmp	r6, r2
 801a53e:	d930      	bls.n	801a5a2 <_dtoa_r+0x292>
 801a540:	6079      	str	r1, [r7, #4]
 801a542:	4648      	mov	r0, r9
 801a544:	9304      	str	r3, [sp, #16]
 801a546:	f001 f885 	bl	801b654 <_Balloc>
 801a54a:	9b04      	ldr	r3, [sp, #16]
 801a54c:	4607      	mov	r7, r0
 801a54e:	2800      	cmp	r0, #0
 801a550:	d146      	bne.n	801a5e0 <_dtoa_r+0x2d0>
 801a552:	4b22      	ldr	r3, [pc, #136]	@ (801a5dc <_dtoa_r+0x2cc>)
 801a554:	4602      	mov	r2, r0
 801a556:	f240 11af 	movw	r1, #431	@ 0x1af
 801a55a:	e6f2      	b.n	801a342 <_dtoa_r+0x32>
 801a55c:	2201      	movs	r2, #1
 801a55e:	e7dd      	b.n	801a51c <_dtoa_r+0x20c>
 801a560:	2200      	movs	r2, #0
 801a562:	9208      	str	r2, [sp, #32]
 801a564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a566:	eb08 0b02 	add.w	fp, r8, r2
 801a56a:	f10b 0a01 	add.w	sl, fp, #1
 801a56e:	4652      	mov	r2, sl
 801a570:	2a01      	cmp	r2, #1
 801a572:	bfb8      	it	lt
 801a574:	2201      	movlt	r2, #1
 801a576:	e7db      	b.n	801a530 <_dtoa_r+0x220>
 801a578:	2201      	movs	r2, #1
 801a57a:	e7f2      	b.n	801a562 <_dtoa_r+0x252>
 801a57c:	2401      	movs	r4, #1
 801a57e:	2200      	movs	r2, #0
 801a580:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801a584:	f04f 3bff 	mov.w	fp, #4294967295
 801a588:	2100      	movs	r1, #0
 801a58a:	46da      	mov	sl, fp
 801a58c:	2212      	movs	r2, #18
 801a58e:	9109      	str	r1, [sp, #36]	@ 0x24
 801a590:	e7ce      	b.n	801a530 <_dtoa_r+0x220>
 801a592:	2201      	movs	r2, #1
 801a594:	9208      	str	r2, [sp, #32]
 801a596:	e7f5      	b.n	801a584 <_dtoa_r+0x274>
 801a598:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801a59c:	46da      	mov	sl, fp
 801a59e:	465a      	mov	r2, fp
 801a5a0:	e7c6      	b.n	801a530 <_dtoa_r+0x220>
 801a5a2:	3101      	adds	r1, #1
 801a5a4:	0040      	lsls	r0, r0, #1
 801a5a6:	e7c7      	b.n	801a538 <_dtoa_r+0x228>
 801a5a8:	636f4361 	.word	0x636f4361
 801a5ac:	3fd287a7 	.word	0x3fd287a7
 801a5b0:	8b60c8b3 	.word	0x8b60c8b3
 801a5b4:	3fc68a28 	.word	0x3fc68a28
 801a5b8:	509f79fb 	.word	0x509f79fb
 801a5bc:	3fd34413 	.word	0x3fd34413
 801a5c0:	0801e4d2 	.word	0x0801e4d2
 801a5c4:	0801e4e9 	.word	0x0801e4e9
 801a5c8:	7ff00000 	.word	0x7ff00000
 801a5cc:	0801e4ce 	.word	0x0801e4ce
 801a5d0:	0801e49a 	.word	0x0801e49a
 801a5d4:	0801e499 	.word	0x0801e499
 801a5d8:	0801e640 	.word	0x0801e640
 801a5dc:	0801e541 	.word	0x0801e541
 801a5e0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801a5e4:	f1ba 0f0e 	cmp.w	sl, #14
 801a5e8:	6010      	str	r0, [r2, #0]
 801a5ea:	d86f      	bhi.n	801a6cc <_dtoa_r+0x3bc>
 801a5ec:	2c00      	cmp	r4, #0
 801a5ee:	d06d      	beq.n	801a6cc <_dtoa_r+0x3bc>
 801a5f0:	f1b8 0f00 	cmp.w	r8, #0
 801a5f4:	f340 80c2 	ble.w	801a77c <_dtoa_r+0x46c>
 801a5f8:	4aca      	ldr	r2, [pc, #808]	@ (801a924 <_dtoa_r+0x614>)
 801a5fa:	f008 010f 	and.w	r1, r8, #15
 801a5fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a602:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801a606:	ed92 7b00 	vldr	d7, [r2]
 801a60a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801a60e:	f000 80a9 	beq.w	801a764 <_dtoa_r+0x454>
 801a612:	4ac5      	ldr	r2, [pc, #788]	@ (801a928 <_dtoa_r+0x618>)
 801a614:	ed92 6b08 	vldr	d6, [r2, #32]
 801a618:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a61c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a620:	f001 010f 	and.w	r1, r1, #15
 801a624:	2203      	movs	r2, #3
 801a626:	48c0      	ldr	r0, [pc, #768]	@ (801a928 <_dtoa_r+0x618>)
 801a628:	2900      	cmp	r1, #0
 801a62a:	f040 809d 	bne.w	801a768 <_dtoa_r+0x458>
 801a62e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a632:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a636:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a63a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a63c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a640:	2900      	cmp	r1, #0
 801a642:	f000 80c1 	beq.w	801a7c8 <_dtoa_r+0x4b8>
 801a646:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801a64a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a652:	f140 80b9 	bpl.w	801a7c8 <_dtoa_r+0x4b8>
 801a656:	f1ba 0f00 	cmp.w	sl, #0
 801a65a:	f000 80b5 	beq.w	801a7c8 <_dtoa_r+0x4b8>
 801a65e:	f1bb 0f00 	cmp.w	fp, #0
 801a662:	dd31      	ble.n	801a6c8 <_dtoa_r+0x3b8>
 801a664:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801a668:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a66c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a670:	f108 31ff 	add.w	r1, r8, #4294967295
 801a674:	9104      	str	r1, [sp, #16]
 801a676:	3201      	adds	r2, #1
 801a678:	465c      	mov	r4, fp
 801a67a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a67e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801a682:	ee07 2a90 	vmov	s15, r2
 801a686:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a68a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a68e:	ee15 2a90 	vmov	r2, s11
 801a692:	ec51 0b15 	vmov	r0, r1, d5
 801a696:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801a69a:	2c00      	cmp	r4, #0
 801a69c:	f040 8098 	bne.w	801a7d0 <_dtoa_r+0x4c0>
 801a6a0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a6a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a6a8:	ec41 0b17 	vmov	d7, r0, r1
 801a6ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6b4:	f300 8261 	bgt.w	801ab7a <_dtoa_r+0x86a>
 801a6b8:	eeb1 7b47 	vneg.f64	d7, d7
 801a6bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6c4:	f100 80f5 	bmi.w	801a8b2 <_dtoa_r+0x5a2>
 801a6c8:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a6cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a6ce:	2a00      	cmp	r2, #0
 801a6d0:	f2c0 812c 	blt.w	801a92c <_dtoa_r+0x61c>
 801a6d4:	f1b8 0f0e 	cmp.w	r8, #14
 801a6d8:	f300 8128 	bgt.w	801a92c <_dtoa_r+0x61c>
 801a6dc:	4b91      	ldr	r3, [pc, #580]	@ (801a924 <_dtoa_r+0x614>)
 801a6de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a6e2:	ed93 6b00 	vldr	d6, [r3]
 801a6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	da03      	bge.n	801a6f4 <_dtoa_r+0x3e4>
 801a6ec:	f1ba 0f00 	cmp.w	sl, #0
 801a6f0:	f340 80d2 	ble.w	801a898 <_dtoa_r+0x588>
 801a6f4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801a6f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a6fc:	463e      	mov	r6, r7
 801a6fe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a702:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a706:	ee15 3a10 	vmov	r3, s10
 801a70a:	3330      	adds	r3, #48	@ 0x30
 801a70c:	f806 3b01 	strb.w	r3, [r6], #1
 801a710:	1bf3      	subs	r3, r6, r7
 801a712:	459a      	cmp	sl, r3
 801a714:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a718:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a71c:	f040 80f8 	bne.w	801a910 <_dtoa_r+0x600>
 801a720:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a724:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a72c:	f300 80dd 	bgt.w	801a8ea <_dtoa_r+0x5da>
 801a730:	eeb4 7b46 	vcmp.f64	d7, d6
 801a734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a738:	d104      	bne.n	801a744 <_dtoa_r+0x434>
 801a73a:	ee15 3a10 	vmov	r3, s10
 801a73e:	07db      	lsls	r3, r3, #31
 801a740:	f100 80d3 	bmi.w	801a8ea <_dtoa_r+0x5da>
 801a744:	9901      	ldr	r1, [sp, #4]
 801a746:	4648      	mov	r0, r9
 801a748:	f000 ffc4 	bl	801b6d4 <_Bfree>
 801a74c:	2300      	movs	r3, #0
 801a74e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a750:	7033      	strb	r3, [r6, #0]
 801a752:	f108 0301 	add.w	r3, r8, #1
 801a756:	6013      	str	r3, [r2, #0]
 801a758:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	f000 8304 	beq.w	801ad68 <_dtoa_r+0xa58>
 801a760:	601e      	str	r6, [r3, #0]
 801a762:	e301      	b.n	801ad68 <_dtoa_r+0xa58>
 801a764:	2202      	movs	r2, #2
 801a766:	e75e      	b.n	801a626 <_dtoa_r+0x316>
 801a768:	07cc      	lsls	r4, r1, #31
 801a76a:	d504      	bpl.n	801a776 <_dtoa_r+0x466>
 801a76c:	ed90 6b00 	vldr	d6, [r0]
 801a770:	3201      	adds	r2, #1
 801a772:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a776:	1049      	asrs	r1, r1, #1
 801a778:	3008      	adds	r0, #8
 801a77a:	e755      	b.n	801a628 <_dtoa_r+0x318>
 801a77c:	d022      	beq.n	801a7c4 <_dtoa_r+0x4b4>
 801a77e:	f1c8 0100 	rsb	r1, r8, #0
 801a782:	4a68      	ldr	r2, [pc, #416]	@ (801a924 <_dtoa_r+0x614>)
 801a784:	f001 000f 	and.w	r0, r1, #15
 801a788:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a78c:	ed92 7b00 	vldr	d7, [r2]
 801a790:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a794:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a798:	4863      	ldr	r0, [pc, #396]	@ (801a928 <_dtoa_r+0x618>)
 801a79a:	1109      	asrs	r1, r1, #4
 801a79c:	2400      	movs	r4, #0
 801a79e:	2202      	movs	r2, #2
 801a7a0:	b929      	cbnz	r1, 801a7ae <_dtoa_r+0x49e>
 801a7a2:	2c00      	cmp	r4, #0
 801a7a4:	f43f af49 	beq.w	801a63a <_dtoa_r+0x32a>
 801a7a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a7ac:	e745      	b.n	801a63a <_dtoa_r+0x32a>
 801a7ae:	07ce      	lsls	r6, r1, #31
 801a7b0:	d505      	bpl.n	801a7be <_dtoa_r+0x4ae>
 801a7b2:	ed90 6b00 	vldr	d6, [r0]
 801a7b6:	3201      	adds	r2, #1
 801a7b8:	2401      	movs	r4, #1
 801a7ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a7be:	1049      	asrs	r1, r1, #1
 801a7c0:	3008      	adds	r0, #8
 801a7c2:	e7ed      	b.n	801a7a0 <_dtoa_r+0x490>
 801a7c4:	2202      	movs	r2, #2
 801a7c6:	e738      	b.n	801a63a <_dtoa_r+0x32a>
 801a7c8:	f8cd 8010 	str.w	r8, [sp, #16]
 801a7cc:	4654      	mov	r4, sl
 801a7ce:	e754      	b.n	801a67a <_dtoa_r+0x36a>
 801a7d0:	4a54      	ldr	r2, [pc, #336]	@ (801a924 <_dtoa_r+0x614>)
 801a7d2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a7d6:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a7da:	9a08      	ldr	r2, [sp, #32]
 801a7dc:	ec41 0b17 	vmov	d7, r0, r1
 801a7e0:	443c      	add	r4, r7
 801a7e2:	b34a      	cbz	r2, 801a838 <_dtoa_r+0x528>
 801a7e4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801a7e8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801a7ec:	463e      	mov	r6, r7
 801a7ee:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a7f2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a7f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a7fa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a7fe:	ee14 2a90 	vmov	r2, s9
 801a802:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a806:	3230      	adds	r2, #48	@ 0x30
 801a808:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a80c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a814:	f806 2b01 	strb.w	r2, [r6], #1
 801a818:	d438      	bmi.n	801a88c <_dtoa_r+0x57c>
 801a81a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a81e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a826:	d462      	bmi.n	801a8ee <_dtoa_r+0x5de>
 801a828:	42a6      	cmp	r6, r4
 801a82a:	f43f af4d 	beq.w	801a6c8 <_dtoa_r+0x3b8>
 801a82e:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a832:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a836:	e7e0      	b.n	801a7fa <_dtoa_r+0x4ea>
 801a838:	4621      	mov	r1, r4
 801a83a:	463e      	mov	r6, r7
 801a83c:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a840:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a844:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a848:	ee14 2a90 	vmov	r2, s9
 801a84c:	3230      	adds	r2, #48	@ 0x30
 801a84e:	f806 2b01 	strb.w	r2, [r6], #1
 801a852:	42a6      	cmp	r6, r4
 801a854:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a858:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a85c:	d119      	bne.n	801a892 <_dtoa_r+0x582>
 801a85e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801a862:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a866:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a86e:	dc3e      	bgt.n	801a8ee <_dtoa_r+0x5de>
 801a870:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a874:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a87c:	f57f af24 	bpl.w	801a6c8 <_dtoa_r+0x3b8>
 801a880:	460e      	mov	r6, r1
 801a882:	3901      	subs	r1, #1
 801a884:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a888:	2b30      	cmp	r3, #48	@ 0x30
 801a88a:	d0f9      	beq.n	801a880 <_dtoa_r+0x570>
 801a88c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a890:	e758      	b.n	801a744 <_dtoa_r+0x434>
 801a892:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a896:	e7d5      	b.n	801a844 <_dtoa_r+0x534>
 801a898:	d10b      	bne.n	801a8b2 <_dtoa_r+0x5a2>
 801a89a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a89e:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a8a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a8a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8ae:	f2c0 8161 	blt.w	801ab74 <_dtoa_r+0x864>
 801a8b2:	2400      	movs	r4, #0
 801a8b4:	4625      	mov	r5, r4
 801a8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8b8:	43db      	mvns	r3, r3
 801a8ba:	9304      	str	r3, [sp, #16]
 801a8bc:	463e      	mov	r6, r7
 801a8be:	f04f 0800 	mov.w	r8, #0
 801a8c2:	4621      	mov	r1, r4
 801a8c4:	4648      	mov	r0, r9
 801a8c6:	f000 ff05 	bl	801b6d4 <_Bfree>
 801a8ca:	2d00      	cmp	r5, #0
 801a8cc:	d0de      	beq.n	801a88c <_dtoa_r+0x57c>
 801a8ce:	f1b8 0f00 	cmp.w	r8, #0
 801a8d2:	d005      	beq.n	801a8e0 <_dtoa_r+0x5d0>
 801a8d4:	45a8      	cmp	r8, r5
 801a8d6:	d003      	beq.n	801a8e0 <_dtoa_r+0x5d0>
 801a8d8:	4641      	mov	r1, r8
 801a8da:	4648      	mov	r0, r9
 801a8dc:	f000 fefa 	bl	801b6d4 <_Bfree>
 801a8e0:	4629      	mov	r1, r5
 801a8e2:	4648      	mov	r0, r9
 801a8e4:	f000 fef6 	bl	801b6d4 <_Bfree>
 801a8e8:	e7d0      	b.n	801a88c <_dtoa_r+0x57c>
 801a8ea:	f8cd 8010 	str.w	r8, [sp, #16]
 801a8ee:	4633      	mov	r3, r6
 801a8f0:	461e      	mov	r6, r3
 801a8f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a8f6:	2a39      	cmp	r2, #57	@ 0x39
 801a8f8:	d106      	bne.n	801a908 <_dtoa_r+0x5f8>
 801a8fa:	429f      	cmp	r7, r3
 801a8fc:	d1f8      	bne.n	801a8f0 <_dtoa_r+0x5e0>
 801a8fe:	9a04      	ldr	r2, [sp, #16]
 801a900:	3201      	adds	r2, #1
 801a902:	9204      	str	r2, [sp, #16]
 801a904:	2230      	movs	r2, #48	@ 0x30
 801a906:	703a      	strb	r2, [r7, #0]
 801a908:	781a      	ldrb	r2, [r3, #0]
 801a90a:	3201      	adds	r2, #1
 801a90c:	701a      	strb	r2, [r3, #0]
 801a90e:	e7bd      	b.n	801a88c <_dtoa_r+0x57c>
 801a910:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a914:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a91c:	f47f aeef 	bne.w	801a6fe <_dtoa_r+0x3ee>
 801a920:	e710      	b.n	801a744 <_dtoa_r+0x434>
 801a922:	bf00      	nop
 801a924:	0801e640 	.word	0x0801e640
 801a928:	0801e618 	.word	0x0801e618
 801a92c:	9908      	ldr	r1, [sp, #32]
 801a92e:	2900      	cmp	r1, #0
 801a930:	f000 80e3 	beq.w	801aafa <_dtoa_r+0x7ea>
 801a934:	9907      	ldr	r1, [sp, #28]
 801a936:	2901      	cmp	r1, #1
 801a938:	f300 80c8 	bgt.w	801aacc <_dtoa_r+0x7bc>
 801a93c:	2d00      	cmp	r5, #0
 801a93e:	f000 80c1 	beq.w	801aac4 <_dtoa_r+0x7b4>
 801a942:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a946:	9e05      	ldr	r6, [sp, #20]
 801a948:	461c      	mov	r4, r3
 801a94a:	9304      	str	r3, [sp, #16]
 801a94c:	9b05      	ldr	r3, [sp, #20]
 801a94e:	4413      	add	r3, r2
 801a950:	9305      	str	r3, [sp, #20]
 801a952:	9b06      	ldr	r3, [sp, #24]
 801a954:	2101      	movs	r1, #1
 801a956:	4413      	add	r3, r2
 801a958:	4648      	mov	r0, r9
 801a95a:	9306      	str	r3, [sp, #24]
 801a95c:	f000 ffb8 	bl	801b8d0 <__i2b>
 801a960:	9b04      	ldr	r3, [sp, #16]
 801a962:	4605      	mov	r5, r0
 801a964:	b166      	cbz	r6, 801a980 <_dtoa_r+0x670>
 801a966:	9a06      	ldr	r2, [sp, #24]
 801a968:	2a00      	cmp	r2, #0
 801a96a:	dd09      	ble.n	801a980 <_dtoa_r+0x670>
 801a96c:	42b2      	cmp	r2, r6
 801a96e:	9905      	ldr	r1, [sp, #20]
 801a970:	bfa8      	it	ge
 801a972:	4632      	movge	r2, r6
 801a974:	1a89      	subs	r1, r1, r2
 801a976:	9105      	str	r1, [sp, #20]
 801a978:	9906      	ldr	r1, [sp, #24]
 801a97a:	1ab6      	subs	r6, r6, r2
 801a97c:	1a8a      	subs	r2, r1, r2
 801a97e:	9206      	str	r2, [sp, #24]
 801a980:	b1fb      	cbz	r3, 801a9c2 <_dtoa_r+0x6b2>
 801a982:	9a08      	ldr	r2, [sp, #32]
 801a984:	2a00      	cmp	r2, #0
 801a986:	f000 80bc 	beq.w	801ab02 <_dtoa_r+0x7f2>
 801a98a:	b19c      	cbz	r4, 801a9b4 <_dtoa_r+0x6a4>
 801a98c:	4629      	mov	r1, r5
 801a98e:	4622      	mov	r2, r4
 801a990:	4648      	mov	r0, r9
 801a992:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a994:	f001 f85c 	bl	801ba50 <__pow5mult>
 801a998:	9a01      	ldr	r2, [sp, #4]
 801a99a:	4601      	mov	r1, r0
 801a99c:	4605      	mov	r5, r0
 801a99e:	4648      	mov	r0, r9
 801a9a0:	f000 ffac 	bl	801b8fc <__multiply>
 801a9a4:	9901      	ldr	r1, [sp, #4]
 801a9a6:	9004      	str	r0, [sp, #16]
 801a9a8:	4648      	mov	r0, r9
 801a9aa:	f000 fe93 	bl	801b6d4 <_Bfree>
 801a9ae:	9a04      	ldr	r2, [sp, #16]
 801a9b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a9b2:	9201      	str	r2, [sp, #4]
 801a9b4:	1b1a      	subs	r2, r3, r4
 801a9b6:	d004      	beq.n	801a9c2 <_dtoa_r+0x6b2>
 801a9b8:	9901      	ldr	r1, [sp, #4]
 801a9ba:	4648      	mov	r0, r9
 801a9bc:	f001 f848 	bl	801ba50 <__pow5mult>
 801a9c0:	9001      	str	r0, [sp, #4]
 801a9c2:	2101      	movs	r1, #1
 801a9c4:	4648      	mov	r0, r9
 801a9c6:	f000 ff83 	bl	801b8d0 <__i2b>
 801a9ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a9cc:	4604      	mov	r4, r0
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	f000 81d0 	beq.w	801ad74 <_dtoa_r+0xa64>
 801a9d4:	461a      	mov	r2, r3
 801a9d6:	4601      	mov	r1, r0
 801a9d8:	4648      	mov	r0, r9
 801a9da:	f001 f839 	bl	801ba50 <__pow5mult>
 801a9de:	9b07      	ldr	r3, [sp, #28]
 801a9e0:	2b01      	cmp	r3, #1
 801a9e2:	4604      	mov	r4, r0
 801a9e4:	f300 8095 	bgt.w	801ab12 <_dtoa_r+0x802>
 801a9e8:	9b02      	ldr	r3, [sp, #8]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	f040 808b 	bne.w	801ab06 <_dtoa_r+0x7f6>
 801a9f0:	9b03      	ldr	r3, [sp, #12]
 801a9f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a9f6:	2a00      	cmp	r2, #0
 801a9f8:	f040 8087 	bne.w	801ab0a <_dtoa_r+0x7fa>
 801a9fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801aa00:	0d12      	lsrs	r2, r2, #20
 801aa02:	0512      	lsls	r2, r2, #20
 801aa04:	2a00      	cmp	r2, #0
 801aa06:	f000 8082 	beq.w	801ab0e <_dtoa_r+0x7fe>
 801aa0a:	9b05      	ldr	r3, [sp, #20]
 801aa0c:	3301      	adds	r3, #1
 801aa0e:	9305      	str	r3, [sp, #20]
 801aa10:	9b06      	ldr	r3, [sp, #24]
 801aa12:	3301      	adds	r3, #1
 801aa14:	9306      	str	r3, [sp, #24]
 801aa16:	2301      	movs	r3, #1
 801aa18:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aa1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	f000 81af 	beq.w	801ad80 <_dtoa_r+0xa70>
 801aa22:	6922      	ldr	r2, [r4, #16]
 801aa24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801aa28:	6910      	ldr	r0, [r2, #16]
 801aa2a:	f000 ff05 	bl	801b838 <__hi0bits>
 801aa2e:	f1c0 0020 	rsb	r0, r0, #32
 801aa32:	9b06      	ldr	r3, [sp, #24]
 801aa34:	4418      	add	r0, r3
 801aa36:	f010 001f 	ands.w	r0, r0, #31
 801aa3a:	d076      	beq.n	801ab2a <_dtoa_r+0x81a>
 801aa3c:	f1c0 0220 	rsb	r2, r0, #32
 801aa40:	2a04      	cmp	r2, #4
 801aa42:	dd69      	ble.n	801ab18 <_dtoa_r+0x808>
 801aa44:	9b05      	ldr	r3, [sp, #20]
 801aa46:	f1c0 001c 	rsb	r0, r0, #28
 801aa4a:	4403      	add	r3, r0
 801aa4c:	9305      	str	r3, [sp, #20]
 801aa4e:	9b06      	ldr	r3, [sp, #24]
 801aa50:	4406      	add	r6, r0
 801aa52:	4403      	add	r3, r0
 801aa54:	9306      	str	r3, [sp, #24]
 801aa56:	9b05      	ldr	r3, [sp, #20]
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	dd05      	ble.n	801aa68 <_dtoa_r+0x758>
 801aa5c:	9901      	ldr	r1, [sp, #4]
 801aa5e:	461a      	mov	r2, r3
 801aa60:	4648      	mov	r0, r9
 801aa62:	f001 f84f 	bl	801bb04 <__lshift>
 801aa66:	9001      	str	r0, [sp, #4]
 801aa68:	9b06      	ldr	r3, [sp, #24]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	dd05      	ble.n	801aa7a <_dtoa_r+0x76a>
 801aa6e:	4621      	mov	r1, r4
 801aa70:	461a      	mov	r2, r3
 801aa72:	4648      	mov	r0, r9
 801aa74:	f001 f846 	bl	801bb04 <__lshift>
 801aa78:	4604      	mov	r4, r0
 801aa7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d056      	beq.n	801ab2e <_dtoa_r+0x81e>
 801aa80:	9801      	ldr	r0, [sp, #4]
 801aa82:	4621      	mov	r1, r4
 801aa84:	f001 f8aa 	bl	801bbdc <__mcmp>
 801aa88:	2800      	cmp	r0, #0
 801aa8a:	da50      	bge.n	801ab2e <_dtoa_r+0x81e>
 801aa8c:	f108 33ff 	add.w	r3, r8, #4294967295
 801aa90:	9304      	str	r3, [sp, #16]
 801aa92:	9901      	ldr	r1, [sp, #4]
 801aa94:	2300      	movs	r3, #0
 801aa96:	220a      	movs	r2, #10
 801aa98:	4648      	mov	r0, r9
 801aa9a:	f000 fe3d 	bl	801b718 <__multadd>
 801aa9e:	9b08      	ldr	r3, [sp, #32]
 801aaa0:	9001      	str	r0, [sp, #4]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	f000 816e 	beq.w	801ad84 <_dtoa_r+0xa74>
 801aaa8:	4629      	mov	r1, r5
 801aaaa:	2300      	movs	r3, #0
 801aaac:	220a      	movs	r2, #10
 801aaae:	4648      	mov	r0, r9
 801aab0:	f000 fe32 	bl	801b718 <__multadd>
 801aab4:	f1bb 0f00 	cmp.w	fp, #0
 801aab8:	4605      	mov	r5, r0
 801aaba:	dc64      	bgt.n	801ab86 <_dtoa_r+0x876>
 801aabc:	9b07      	ldr	r3, [sp, #28]
 801aabe:	2b02      	cmp	r3, #2
 801aac0:	dc3e      	bgt.n	801ab40 <_dtoa_r+0x830>
 801aac2:	e060      	b.n	801ab86 <_dtoa_r+0x876>
 801aac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aac6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801aaca:	e73c      	b.n	801a946 <_dtoa_r+0x636>
 801aacc:	f10a 34ff 	add.w	r4, sl, #4294967295
 801aad0:	42a3      	cmp	r3, r4
 801aad2:	bfbf      	itttt	lt
 801aad4:	1ae2      	sublt	r2, r4, r3
 801aad6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801aad8:	189b      	addlt	r3, r3, r2
 801aada:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801aadc:	bfae      	itee	ge
 801aade:	1b1c      	subge	r4, r3, r4
 801aae0:	4623      	movlt	r3, r4
 801aae2:	2400      	movlt	r4, #0
 801aae4:	f1ba 0f00 	cmp.w	sl, #0
 801aae8:	bfb5      	itete	lt
 801aaea:	9a05      	ldrlt	r2, [sp, #20]
 801aaec:	9e05      	ldrge	r6, [sp, #20]
 801aaee:	eba2 060a 	sublt.w	r6, r2, sl
 801aaf2:	4652      	movge	r2, sl
 801aaf4:	bfb8      	it	lt
 801aaf6:	2200      	movlt	r2, #0
 801aaf8:	e727      	b.n	801a94a <_dtoa_r+0x63a>
 801aafa:	9e05      	ldr	r6, [sp, #20]
 801aafc:	9d08      	ldr	r5, [sp, #32]
 801aafe:	461c      	mov	r4, r3
 801ab00:	e730      	b.n	801a964 <_dtoa_r+0x654>
 801ab02:	461a      	mov	r2, r3
 801ab04:	e758      	b.n	801a9b8 <_dtoa_r+0x6a8>
 801ab06:	2300      	movs	r3, #0
 801ab08:	e786      	b.n	801aa18 <_dtoa_r+0x708>
 801ab0a:	9b02      	ldr	r3, [sp, #8]
 801ab0c:	e784      	b.n	801aa18 <_dtoa_r+0x708>
 801ab0e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ab10:	e783      	b.n	801aa1a <_dtoa_r+0x70a>
 801ab12:	2300      	movs	r3, #0
 801ab14:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ab16:	e784      	b.n	801aa22 <_dtoa_r+0x712>
 801ab18:	d09d      	beq.n	801aa56 <_dtoa_r+0x746>
 801ab1a:	9b05      	ldr	r3, [sp, #20]
 801ab1c:	321c      	adds	r2, #28
 801ab1e:	4413      	add	r3, r2
 801ab20:	9305      	str	r3, [sp, #20]
 801ab22:	9b06      	ldr	r3, [sp, #24]
 801ab24:	4416      	add	r6, r2
 801ab26:	4413      	add	r3, r2
 801ab28:	e794      	b.n	801aa54 <_dtoa_r+0x744>
 801ab2a:	4602      	mov	r2, r0
 801ab2c:	e7f5      	b.n	801ab1a <_dtoa_r+0x80a>
 801ab2e:	f1ba 0f00 	cmp.w	sl, #0
 801ab32:	f8cd 8010 	str.w	r8, [sp, #16]
 801ab36:	46d3      	mov	fp, sl
 801ab38:	dc21      	bgt.n	801ab7e <_dtoa_r+0x86e>
 801ab3a:	9b07      	ldr	r3, [sp, #28]
 801ab3c:	2b02      	cmp	r3, #2
 801ab3e:	dd1e      	ble.n	801ab7e <_dtoa_r+0x86e>
 801ab40:	f1bb 0f00 	cmp.w	fp, #0
 801ab44:	f47f aeb7 	bne.w	801a8b6 <_dtoa_r+0x5a6>
 801ab48:	4621      	mov	r1, r4
 801ab4a:	465b      	mov	r3, fp
 801ab4c:	2205      	movs	r2, #5
 801ab4e:	4648      	mov	r0, r9
 801ab50:	f000 fde2 	bl	801b718 <__multadd>
 801ab54:	4601      	mov	r1, r0
 801ab56:	4604      	mov	r4, r0
 801ab58:	9801      	ldr	r0, [sp, #4]
 801ab5a:	f001 f83f 	bl	801bbdc <__mcmp>
 801ab5e:	2800      	cmp	r0, #0
 801ab60:	f77f aea9 	ble.w	801a8b6 <_dtoa_r+0x5a6>
 801ab64:	463e      	mov	r6, r7
 801ab66:	2331      	movs	r3, #49	@ 0x31
 801ab68:	f806 3b01 	strb.w	r3, [r6], #1
 801ab6c:	9b04      	ldr	r3, [sp, #16]
 801ab6e:	3301      	adds	r3, #1
 801ab70:	9304      	str	r3, [sp, #16]
 801ab72:	e6a4      	b.n	801a8be <_dtoa_r+0x5ae>
 801ab74:	f8cd 8010 	str.w	r8, [sp, #16]
 801ab78:	4654      	mov	r4, sl
 801ab7a:	4625      	mov	r5, r4
 801ab7c:	e7f2      	b.n	801ab64 <_dtoa_r+0x854>
 801ab7e:	9b08      	ldr	r3, [sp, #32]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	f000 8103 	beq.w	801ad8c <_dtoa_r+0xa7c>
 801ab86:	2e00      	cmp	r6, #0
 801ab88:	dd05      	ble.n	801ab96 <_dtoa_r+0x886>
 801ab8a:	4629      	mov	r1, r5
 801ab8c:	4632      	mov	r2, r6
 801ab8e:	4648      	mov	r0, r9
 801ab90:	f000 ffb8 	bl	801bb04 <__lshift>
 801ab94:	4605      	mov	r5, r0
 801ab96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d058      	beq.n	801ac4e <_dtoa_r+0x93e>
 801ab9c:	6869      	ldr	r1, [r5, #4]
 801ab9e:	4648      	mov	r0, r9
 801aba0:	f000 fd58 	bl	801b654 <_Balloc>
 801aba4:	4606      	mov	r6, r0
 801aba6:	b928      	cbnz	r0, 801abb4 <_dtoa_r+0x8a4>
 801aba8:	4b82      	ldr	r3, [pc, #520]	@ (801adb4 <_dtoa_r+0xaa4>)
 801abaa:	4602      	mov	r2, r0
 801abac:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801abb0:	f7ff bbc7 	b.w	801a342 <_dtoa_r+0x32>
 801abb4:	692a      	ldr	r2, [r5, #16]
 801abb6:	3202      	adds	r2, #2
 801abb8:	0092      	lsls	r2, r2, #2
 801abba:	f105 010c 	add.w	r1, r5, #12
 801abbe:	300c      	adds	r0, #12
 801abc0:	f7ff fb05 	bl	801a1ce <memcpy>
 801abc4:	2201      	movs	r2, #1
 801abc6:	4631      	mov	r1, r6
 801abc8:	4648      	mov	r0, r9
 801abca:	f000 ff9b 	bl	801bb04 <__lshift>
 801abce:	1c7b      	adds	r3, r7, #1
 801abd0:	9305      	str	r3, [sp, #20]
 801abd2:	eb07 030b 	add.w	r3, r7, fp
 801abd6:	9309      	str	r3, [sp, #36]	@ 0x24
 801abd8:	9b02      	ldr	r3, [sp, #8]
 801abda:	f003 0301 	and.w	r3, r3, #1
 801abde:	46a8      	mov	r8, r5
 801abe0:	9308      	str	r3, [sp, #32]
 801abe2:	4605      	mov	r5, r0
 801abe4:	9b05      	ldr	r3, [sp, #20]
 801abe6:	9801      	ldr	r0, [sp, #4]
 801abe8:	4621      	mov	r1, r4
 801abea:	f103 3bff 	add.w	fp, r3, #4294967295
 801abee:	f7ff fb07 	bl	801a200 <quorem>
 801abf2:	4641      	mov	r1, r8
 801abf4:	9002      	str	r0, [sp, #8]
 801abf6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801abfa:	9801      	ldr	r0, [sp, #4]
 801abfc:	f000 ffee 	bl	801bbdc <__mcmp>
 801ac00:	462a      	mov	r2, r5
 801ac02:	9006      	str	r0, [sp, #24]
 801ac04:	4621      	mov	r1, r4
 801ac06:	4648      	mov	r0, r9
 801ac08:	f001 f804 	bl	801bc14 <__mdiff>
 801ac0c:	68c2      	ldr	r2, [r0, #12]
 801ac0e:	4606      	mov	r6, r0
 801ac10:	b9fa      	cbnz	r2, 801ac52 <_dtoa_r+0x942>
 801ac12:	4601      	mov	r1, r0
 801ac14:	9801      	ldr	r0, [sp, #4]
 801ac16:	f000 ffe1 	bl	801bbdc <__mcmp>
 801ac1a:	4602      	mov	r2, r0
 801ac1c:	4631      	mov	r1, r6
 801ac1e:	4648      	mov	r0, r9
 801ac20:	920a      	str	r2, [sp, #40]	@ 0x28
 801ac22:	f000 fd57 	bl	801b6d4 <_Bfree>
 801ac26:	9b07      	ldr	r3, [sp, #28]
 801ac28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ac2a:	9e05      	ldr	r6, [sp, #20]
 801ac2c:	ea43 0102 	orr.w	r1, r3, r2
 801ac30:	9b08      	ldr	r3, [sp, #32]
 801ac32:	4319      	orrs	r1, r3
 801ac34:	d10f      	bne.n	801ac56 <_dtoa_r+0x946>
 801ac36:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801ac3a:	d028      	beq.n	801ac8e <_dtoa_r+0x97e>
 801ac3c:	9b06      	ldr	r3, [sp, #24]
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	dd02      	ble.n	801ac48 <_dtoa_r+0x938>
 801ac42:	9b02      	ldr	r3, [sp, #8]
 801ac44:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801ac48:	f88b a000 	strb.w	sl, [fp]
 801ac4c:	e639      	b.n	801a8c2 <_dtoa_r+0x5b2>
 801ac4e:	4628      	mov	r0, r5
 801ac50:	e7bd      	b.n	801abce <_dtoa_r+0x8be>
 801ac52:	2201      	movs	r2, #1
 801ac54:	e7e2      	b.n	801ac1c <_dtoa_r+0x90c>
 801ac56:	9b06      	ldr	r3, [sp, #24]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	db04      	blt.n	801ac66 <_dtoa_r+0x956>
 801ac5c:	9907      	ldr	r1, [sp, #28]
 801ac5e:	430b      	orrs	r3, r1
 801ac60:	9908      	ldr	r1, [sp, #32]
 801ac62:	430b      	orrs	r3, r1
 801ac64:	d120      	bne.n	801aca8 <_dtoa_r+0x998>
 801ac66:	2a00      	cmp	r2, #0
 801ac68:	ddee      	ble.n	801ac48 <_dtoa_r+0x938>
 801ac6a:	9901      	ldr	r1, [sp, #4]
 801ac6c:	2201      	movs	r2, #1
 801ac6e:	4648      	mov	r0, r9
 801ac70:	f000 ff48 	bl	801bb04 <__lshift>
 801ac74:	4621      	mov	r1, r4
 801ac76:	9001      	str	r0, [sp, #4]
 801ac78:	f000 ffb0 	bl	801bbdc <__mcmp>
 801ac7c:	2800      	cmp	r0, #0
 801ac7e:	dc03      	bgt.n	801ac88 <_dtoa_r+0x978>
 801ac80:	d1e2      	bne.n	801ac48 <_dtoa_r+0x938>
 801ac82:	f01a 0f01 	tst.w	sl, #1
 801ac86:	d0df      	beq.n	801ac48 <_dtoa_r+0x938>
 801ac88:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801ac8c:	d1d9      	bne.n	801ac42 <_dtoa_r+0x932>
 801ac8e:	2339      	movs	r3, #57	@ 0x39
 801ac90:	f88b 3000 	strb.w	r3, [fp]
 801ac94:	4633      	mov	r3, r6
 801ac96:	461e      	mov	r6, r3
 801ac98:	3b01      	subs	r3, #1
 801ac9a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801ac9e:	2a39      	cmp	r2, #57	@ 0x39
 801aca0:	d053      	beq.n	801ad4a <_dtoa_r+0xa3a>
 801aca2:	3201      	adds	r2, #1
 801aca4:	701a      	strb	r2, [r3, #0]
 801aca6:	e60c      	b.n	801a8c2 <_dtoa_r+0x5b2>
 801aca8:	2a00      	cmp	r2, #0
 801acaa:	dd07      	ble.n	801acbc <_dtoa_r+0x9ac>
 801acac:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801acb0:	d0ed      	beq.n	801ac8e <_dtoa_r+0x97e>
 801acb2:	f10a 0301 	add.w	r3, sl, #1
 801acb6:	f88b 3000 	strb.w	r3, [fp]
 801acba:	e602      	b.n	801a8c2 <_dtoa_r+0x5b2>
 801acbc:	9b05      	ldr	r3, [sp, #20]
 801acbe:	9a05      	ldr	r2, [sp, #20]
 801acc0:	f803 ac01 	strb.w	sl, [r3, #-1]
 801acc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acc6:	4293      	cmp	r3, r2
 801acc8:	d029      	beq.n	801ad1e <_dtoa_r+0xa0e>
 801acca:	9901      	ldr	r1, [sp, #4]
 801accc:	2300      	movs	r3, #0
 801acce:	220a      	movs	r2, #10
 801acd0:	4648      	mov	r0, r9
 801acd2:	f000 fd21 	bl	801b718 <__multadd>
 801acd6:	45a8      	cmp	r8, r5
 801acd8:	9001      	str	r0, [sp, #4]
 801acda:	f04f 0300 	mov.w	r3, #0
 801acde:	f04f 020a 	mov.w	r2, #10
 801ace2:	4641      	mov	r1, r8
 801ace4:	4648      	mov	r0, r9
 801ace6:	d107      	bne.n	801acf8 <_dtoa_r+0x9e8>
 801ace8:	f000 fd16 	bl	801b718 <__multadd>
 801acec:	4680      	mov	r8, r0
 801acee:	4605      	mov	r5, r0
 801acf0:	9b05      	ldr	r3, [sp, #20]
 801acf2:	3301      	adds	r3, #1
 801acf4:	9305      	str	r3, [sp, #20]
 801acf6:	e775      	b.n	801abe4 <_dtoa_r+0x8d4>
 801acf8:	f000 fd0e 	bl	801b718 <__multadd>
 801acfc:	4629      	mov	r1, r5
 801acfe:	4680      	mov	r8, r0
 801ad00:	2300      	movs	r3, #0
 801ad02:	220a      	movs	r2, #10
 801ad04:	4648      	mov	r0, r9
 801ad06:	f000 fd07 	bl	801b718 <__multadd>
 801ad0a:	4605      	mov	r5, r0
 801ad0c:	e7f0      	b.n	801acf0 <_dtoa_r+0x9e0>
 801ad0e:	f1bb 0f00 	cmp.w	fp, #0
 801ad12:	bfcc      	ite	gt
 801ad14:	465e      	movgt	r6, fp
 801ad16:	2601      	movle	r6, #1
 801ad18:	443e      	add	r6, r7
 801ad1a:	f04f 0800 	mov.w	r8, #0
 801ad1e:	9901      	ldr	r1, [sp, #4]
 801ad20:	2201      	movs	r2, #1
 801ad22:	4648      	mov	r0, r9
 801ad24:	f000 feee 	bl	801bb04 <__lshift>
 801ad28:	4621      	mov	r1, r4
 801ad2a:	9001      	str	r0, [sp, #4]
 801ad2c:	f000 ff56 	bl	801bbdc <__mcmp>
 801ad30:	2800      	cmp	r0, #0
 801ad32:	dcaf      	bgt.n	801ac94 <_dtoa_r+0x984>
 801ad34:	d102      	bne.n	801ad3c <_dtoa_r+0xa2c>
 801ad36:	f01a 0f01 	tst.w	sl, #1
 801ad3a:	d1ab      	bne.n	801ac94 <_dtoa_r+0x984>
 801ad3c:	4633      	mov	r3, r6
 801ad3e:	461e      	mov	r6, r3
 801ad40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ad44:	2a30      	cmp	r2, #48	@ 0x30
 801ad46:	d0fa      	beq.n	801ad3e <_dtoa_r+0xa2e>
 801ad48:	e5bb      	b.n	801a8c2 <_dtoa_r+0x5b2>
 801ad4a:	429f      	cmp	r7, r3
 801ad4c:	d1a3      	bne.n	801ac96 <_dtoa_r+0x986>
 801ad4e:	9b04      	ldr	r3, [sp, #16]
 801ad50:	3301      	adds	r3, #1
 801ad52:	9304      	str	r3, [sp, #16]
 801ad54:	2331      	movs	r3, #49	@ 0x31
 801ad56:	703b      	strb	r3, [r7, #0]
 801ad58:	e5b3      	b.n	801a8c2 <_dtoa_r+0x5b2>
 801ad5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ad5c:	4f16      	ldr	r7, [pc, #88]	@ (801adb8 <_dtoa_r+0xaa8>)
 801ad5e:	b11b      	cbz	r3, 801ad68 <_dtoa_r+0xa58>
 801ad60:	f107 0308 	add.w	r3, r7, #8
 801ad64:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ad66:	6013      	str	r3, [r2, #0]
 801ad68:	4638      	mov	r0, r7
 801ad6a:	b011      	add	sp, #68	@ 0x44
 801ad6c:	ecbd 8b02 	vpop	{d8}
 801ad70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad74:	9b07      	ldr	r3, [sp, #28]
 801ad76:	2b01      	cmp	r3, #1
 801ad78:	f77f ae36 	ble.w	801a9e8 <_dtoa_r+0x6d8>
 801ad7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ad7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ad80:	2001      	movs	r0, #1
 801ad82:	e656      	b.n	801aa32 <_dtoa_r+0x722>
 801ad84:	f1bb 0f00 	cmp.w	fp, #0
 801ad88:	f77f aed7 	ble.w	801ab3a <_dtoa_r+0x82a>
 801ad8c:	463e      	mov	r6, r7
 801ad8e:	9801      	ldr	r0, [sp, #4]
 801ad90:	4621      	mov	r1, r4
 801ad92:	f7ff fa35 	bl	801a200 <quorem>
 801ad96:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801ad9a:	f806 ab01 	strb.w	sl, [r6], #1
 801ad9e:	1bf2      	subs	r2, r6, r7
 801ada0:	4593      	cmp	fp, r2
 801ada2:	ddb4      	ble.n	801ad0e <_dtoa_r+0x9fe>
 801ada4:	9901      	ldr	r1, [sp, #4]
 801ada6:	2300      	movs	r3, #0
 801ada8:	220a      	movs	r2, #10
 801adaa:	4648      	mov	r0, r9
 801adac:	f000 fcb4 	bl	801b718 <__multadd>
 801adb0:	9001      	str	r0, [sp, #4]
 801adb2:	e7ec      	b.n	801ad8e <_dtoa_r+0xa7e>
 801adb4:	0801e541 	.word	0x0801e541
 801adb8:	0801e4c5 	.word	0x0801e4c5

0801adbc <_free_r>:
 801adbc:	b538      	push	{r3, r4, r5, lr}
 801adbe:	4605      	mov	r5, r0
 801adc0:	2900      	cmp	r1, #0
 801adc2:	d041      	beq.n	801ae48 <_free_r+0x8c>
 801adc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801adc8:	1f0c      	subs	r4, r1, #4
 801adca:	2b00      	cmp	r3, #0
 801adcc:	bfb8      	it	lt
 801adce:	18e4      	addlt	r4, r4, r3
 801add0:	f000 fc34 	bl	801b63c <__malloc_lock>
 801add4:	4a1d      	ldr	r2, [pc, #116]	@ (801ae4c <_free_r+0x90>)
 801add6:	6813      	ldr	r3, [r2, #0]
 801add8:	b933      	cbnz	r3, 801ade8 <_free_r+0x2c>
 801adda:	6063      	str	r3, [r4, #4]
 801addc:	6014      	str	r4, [r2, #0]
 801adde:	4628      	mov	r0, r5
 801ade0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ade4:	f000 bc30 	b.w	801b648 <__malloc_unlock>
 801ade8:	42a3      	cmp	r3, r4
 801adea:	d908      	bls.n	801adfe <_free_r+0x42>
 801adec:	6820      	ldr	r0, [r4, #0]
 801adee:	1821      	adds	r1, r4, r0
 801adf0:	428b      	cmp	r3, r1
 801adf2:	bf01      	itttt	eq
 801adf4:	6819      	ldreq	r1, [r3, #0]
 801adf6:	685b      	ldreq	r3, [r3, #4]
 801adf8:	1809      	addeq	r1, r1, r0
 801adfa:	6021      	streq	r1, [r4, #0]
 801adfc:	e7ed      	b.n	801adda <_free_r+0x1e>
 801adfe:	461a      	mov	r2, r3
 801ae00:	685b      	ldr	r3, [r3, #4]
 801ae02:	b10b      	cbz	r3, 801ae08 <_free_r+0x4c>
 801ae04:	42a3      	cmp	r3, r4
 801ae06:	d9fa      	bls.n	801adfe <_free_r+0x42>
 801ae08:	6811      	ldr	r1, [r2, #0]
 801ae0a:	1850      	adds	r0, r2, r1
 801ae0c:	42a0      	cmp	r0, r4
 801ae0e:	d10b      	bne.n	801ae28 <_free_r+0x6c>
 801ae10:	6820      	ldr	r0, [r4, #0]
 801ae12:	4401      	add	r1, r0
 801ae14:	1850      	adds	r0, r2, r1
 801ae16:	4283      	cmp	r3, r0
 801ae18:	6011      	str	r1, [r2, #0]
 801ae1a:	d1e0      	bne.n	801adde <_free_r+0x22>
 801ae1c:	6818      	ldr	r0, [r3, #0]
 801ae1e:	685b      	ldr	r3, [r3, #4]
 801ae20:	6053      	str	r3, [r2, #4]
 801ae22:	4408      	add	r0, r1
 801ae24:	6010      	str	r0, [r2, #0]
 801ae26:	e7da      	b.n	801adde <_free_r+0x22>
 801ae28:	d902      	bls.n	801ae30 <_free_r+0x74>
 801ae2a:	230c      	movs	r3, #12
 801ae2c:	602b      	str	r3, [r5, #0]
 801ae2e:	e7d6      	b.n	801adde <_free_r+0x22>
 801ae30:	6820      	ldr	r0, [r4, #0]
 801ae32:	1821      	adds	r1, r4, r0
 801ae34:	428b      	cmp	r3, r1
 801ae36:	bf04      	itt	eq
 801ae38:	6819      	ldreq	r1, [r3, #0]
 801ae3a:	685b      	ldreq	r3, [r3, #4]
 801ae3c:	6063      	str	r3, [r4, #4]
 801ae3e:	bf04      	itt	eq
 801ae40:	1809      	addeq	r1, r1, r0
 801ae42:	6021      	streq	r1, [r4, #0]
 801ae44:	6054      	str	r4, [r2, #4]
 801ae46:	e7ca      	b.n	801adde <_free_r+0x22>
 801ae48:	bd38      	pop	{r3, r4, r5, pc}
 801ae4a:	bf00      	nop
 801ae4c:	240153e4 	.word	0x240153e4

0801ae50 <rshift>:
 801ae50:	6903      	ldr	r3, [r0, #16]
 801ae52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ae56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ae5e:	f100 0414 	add.w	r4, r0, #20
 801ae62:	dd45      	ble.n	801aef0 <rshift+0xa0>
 801ae64:	f011 011f 	ands.w	r1, r1, #31
 801ae68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ae6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ae70:	d10c      	bne.n	801ae8c <rshift+0x3c>
 801ae72:	f100 0710 	add.w	r7, r0, #16
 801ae76:	4629      	mov	r1, r5
 801ae78:	42b1      	cmp	r1, r6
 801ae7a:	d334      	bcc.n	801aee6 <rshift+0x96>
 801ae7c:	1a9b      	subs	r3, r3, r2
 801ae7e:	009b      	lsls	r3, r3, #2
 801ae80:	1eea      	subs	r2, r5, #3
 801ae82:	4296      	cmp	r6, r2
 801ae84:	bf38      	it	cc
 801ae86:	2300      	movcc	r3, #0
 801ae88:	4423      	add	r3, r4
 801ae8a:	e015      	b.n	801aeb8 <rshift+0x68>
 801ae8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ae90:	f1c1 0820 	rsb	r8, r1, #32
 801ae94:	40cf      	lsrs	r7, r1
 801ae96:	f105 0e04 	add.w	lr, r5, #4
 801ae9a:	46a1      	mov	r9, r4
 801ae9c:	4576      	cmp	r6, lr
 801ae9e:	46f4      	mov	ip, lr
 801aea0:	d815      	bhi.n	801aece <rshift+0x7e>
 801aea2:	1a9a      	subs	r2, r3, r2
 801aea4:	0092      	lsls	r2, r2, #2
 801aea6:	3a04      	subs	r2, #4
 801aea8:	3501      	adds	r5, #1
 801aeaa:	42ae      	cmp	r6, r5
 801aeac:	bf38      	it	cc
 801aeae:	2200      	movcc	r2, #0
 801aeb0:	18a3      	adds	r3, r4, r2
 801aeb2:	50a7      	str	r7, [r4, r2]
 801aeb4:	b107      	cbz	r7, 801aeb8 <rshift+0x68>
 801aeb6:	3304      	adds	r3, #4
 801aeb8:	1b1a      	subs	r2, r3, r4
 801aeba:	42a3      	cmp	r3, r4
 801aebc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801aec0:	bf08      	it	eq
 801aec2:	2300      	moveq	r3, #0
 801aec4:	6102      	str	r2, [r0, #16]
 801aec6:	bf08      	it	eq
 801aec8:	6143      	streq	r3, [r0, #20]
 801aeca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aece:	f8dc c000 	ldr.w	ip, [ip]
 801aed2:	fa0c fc08 	lsl.w	ip, ip, r8
 801aed6:	ea4c 0707 	orr.w	r7, ip, r7
 801aeda:	f849 7b04 	str.w	r7, [r9], #4
 801aede:	f85e 7b04 	ldr.w	r7, [lr], #4
 801aee2:	40cf      	lsrs	r7, r1
 801aee4:	e7da      	b.n	801ae9c <rshift+0x4c>
 801aee6:	f851 cb04 	ldr.w	ip, [r1], #4
 801aeea:	f847 cf04 	str.w	ip, [r7, #4]!
 801aeee:	e7c3      	b.n	801ae78 <rshift+0x28>
 801aef0:	4623      	mov	r3, r4
 801aef2:	e7e1      	b.n	801aeb8 <rshift+0x68>

0801aef4 <__hexdig_fun>:
 801aef4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801aef8:	2b09      	cmp	r3, #9
 801aefa:	d802      	bhi.n	801af02 <__hexdig_fun+0xe>
 801aefc:	3820      	subs	r0, #32
 801aefe:	b2c0      	uxtb	r0, r0
 801af00:	4770      	bx	lr
 801af02:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801af06:	2b05      	cmp	r3, #5
 801af08:	d801      	bhi.n	801af0e <__hexdig_fun+0x1a>
 801af0a:	3847      	subs	r0, #71	@ 0x47
 801af0c:	e7f7      	b.n	801aefe <__hexdig_fun+0xa>
 801af0e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801af12:	2b05      	cmp	r3, #5
 801af14:	d801      	bhi.n	801af1a <__hexdig_fun+0x26>
 801af16:	3827      	subs	r0, #39	@ 0x27
 801af18:	e7f1      	b.n	801aefe <__hexdig_fun+0xa>
 801af1a:	2000      	movs	r0, #0
 801af1c:	4770      	bx	lr
	...

0801af20 <__gethex>:
 801af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af24:	b085      	sub	sp, #20
 801af26:	468a      	mov	sl, r1
 801af28:	9302      	str	r3, [sp, #8]
 801af2a:	680b      	ldr	r3, [r1, #0]
 801af2c:	9001      	str	r0, [sp, #4]
 801af2e:	4690      	mov	r8, r2
 801af30:	1c9c      	adds	r4, r3, #2
 801af32:	46a1      	mov	r9, r4
 801af34:	f814 0b01 	ldrb.w	r0, [r4], #1
 801af38:	2830      	cmp	r0, #48	@ 0x30
 801af3a:	d0fa      	beq.n	801af32 <__gethex+0x12>
 801af3c:	eba9 0303 	sub.w	r3, r9, r3
 801af40:	f1a3 0b02 	sub.w	fp, r3, #2
 801af44:	f7ff ffd6 	bl	801aef4 <__hexdig_fun>
 801af48:	4605      	mov	r5, r0
 801af4a:	2800      	cmp	r0, #0
 801af4c:	d168      	bne.n	801b020 <__gethex+0x100>
 801af4e:	49a0      	ldr	r1, [pc, #640]	@ (801b1d0 <__gethex+0x2b0>)
 801af50:	2201      	movs	r2, #1
 801af52:	4648      	mov	r0, r9
 801af54:	f7ff f8b2 	bl	801a0bc <strncmp>
 801af58:	4607      	mov	r7, r0
 801af5a:	2800      	cmp	r0, #0
 801af5c:	d167      	bne.n	801b02e <__gethex+0x10e>
 801af5e:	f899 0001 	ldrb.w	r0, [r9, #1]
 801af62:	4626      	mov	r6, r4
 801af64:	f7ff ffc6 	bl	801aef4 <__hexdig_fun>
 801af68:	2800      	cmp	r0, #0
 801af6a:	d062      	beq.n	801b032 <__gethex+0x112>
 801af6c:	4623      	mov	r3, r4
 801af6e:	7818      	ldrb	r0, [r3, #0]
 801af70:	2830      	cmp	r0, #48	@ 0x30
 801af72:	4699      	mov	r9, r3
 801af74:	f103 0301 	add.w	r3, r3, #1
 801af78:	d0f9      	beq.n	801af6e <__gethex+0x4e>
 801af7a:	f7ff ffbb 	bl	801aef4 <__hexdig_fun>
 801af7e:	fab0 f580 	clz	r5, r0
 801af82:	096d      	lsrs	r5, r5, #5
 801af84:	f04f 0b01 	mov.w	fp, #1
 801af88:	464a      	mov	r2, r9
 801af8a:	4616      	mov	r6, r2
 801af8c:	3201      	adds	r2, #1
 801af8e:	7830      	ldrb	r0, [r6, #0]
 801af90:	f7ff ffb0 	bl	801aef4 <__hexdig_fun>
 801af94:	2800      	cmp	r0, #0
 801af96:	d1f8      	bne.n	801af8a <__gethex+0x6a>
 801af98:	498d      	ldr	r1, [pc, #564]	@ (801b1d0 <__gethex+0x2b0>)
 801af9a:	2201      	movs	r2, #1
 801af9c:	4630      	mov	r0, r6
 801af9e:	f7ff f88d 	bl	801a0bc <strncmp>
 801afa2:	2800      	cmp	r0, #0
 801afa4:	d13f      	bne.n	801b026 <__gethex+0x106>
 801afa6:	b944      	cbnz	r4, 801afba <__gethex+0x9a>
 801afa8:	1c74      	adds	r4, r6, #1
 801afaa:	4622      	mov	r2, r4
 801afac:	4616      	mov	r6, r2
 801afae:	3201      	adds	r2, #1
 801afb0:	7830      	ldrb	r0, [r6, #0]
 801afb2:	f7ff ff9f 	bl	801aef4 <__hexdig_fun>
 801afb6:	2800      	cmp	r0, #0
 801afb8:	d1f8      	bne.n	801afac <__gethex+0x8c>
 801afba:	1ba4      	subs	r4, r4, r6
 801afbc:	00a7      	lsls	r7, r4, #2
 801afbe:	7833      	ldrb	r3, [r6, #0]
 801afc0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801afc4:	2b50      	cmp	r3, #80	@ 0x50
 801afc6:	d13e      	bne.n	801b046 <__gethex+0x126>
 801afc8:	7873      	ldrb	r3, [r6, #1]
 801afca:	2b2b      	cmp	r3, #43	@ 0x2b
 801afcc:	d033      	beq.n	801b036 <__gethex+0x116>
 801afce:	2b2d      	cmp	r3, #45	@ 0x2d
 801afd0:	d034      	beq.n	801b03c <__gethex+0x11c>
 801afd2:	1c71      	adds	r1, r6, #1
 801afd4:	2400      	movs	r4, #0
 801afd6:	7808      	ldrb	r0, [r1, #0]
 801afd8:	f7ff ff8c 	bl	801aef4 <__hexdig_fun>
 801afdc:	1e43      	subs	r3, r0, #1
 801afde:	b2db      	uxtb	r3, r3
 801afe0:	2b18      	cmp	r3, #24
 801afe2:	d830      	bhi.n	801b046 <__gethex+0x126>
 801afe4:	f1a0 0210 	sub.w	r2, r0, #16
 801afe8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801afec:	f7ff ff82 	bl	801aef4 <__hexdig_fun>
 801aff0:	f100 3cff 	add.w	ip, r0, #4294967295
 801aff4:	fa5f fc8c 	uxtb.w	ip, ip
 801aff8:	f1bc 0f18 	cmp.w	ip, #24
 801affc:	f04f 030a 	mov.w	r3, #10
 801b000:	d91e      	bls.n	801b040 <__gethex+0x120>
 801b002:	b104      	cbz	r4, 801b006 <__gethex+0xe6>
 801b004:	4252      	negs	r2, r2
 801b006:	4417      	add	r7, r2
 801b008:	f8ca 1000 	str.w	r1, [sl]
 801b00c:	b1ed      	cbz	r5, 801b04a <__gethex+0x12a>
 801b00e:	f1bb 0f00 	cmp.w	fp, #0
 801b012:	bf0c      	ite	eq
 801b014:	2506      	moveq	r5, #6
 801b016:	2500      	movne	r5, #0
 801b018:	4628      	mov	r0, r5
 801b01a:	b005      	add	sp, #20
 801b01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b020:	2500      	movs	r5, #0
 801b022:	462c      	mov	r4, r5
 801b024:	e7b0      	b.n	801af88 <__gethex+0x68>
 801b026:	2c00      	cmp	r4, #0
 801b028:	d1c7      	bne.n	801afba <__gethex+0x9a>
 801b02a:	4627      	mov	r7, r4
 801b02c:	e7c7      	b.n	801afbe <__gethex+0x9e>
 801b02e:	464e      	mov	r6, r9
 801b030:	462f      	mov	r7, r5
 801b032:	2501      	movs	r5, #1
 801b034:	e7c3      	b.n	801afbe <__gethex+0x9e>
 801b036:	2400      	movs	r4, #0
 801b038:	1cb1      	adds	r1, r6, #2
 801b03a:	e7cc      	b.n	801afd6 <__gethex+0xb6>
 801b03c:	2401      	movs	r4, #1
 801b03e:	e7fb      	b.n	801b038 <__gethex+0x118>
 801b040:	fb03 0002 	mla	r0, r3, r2, r0
 801b044:	e7ce      	b.n	801afe4 <__gethex+0xc4>
 801b046:	4631      	mov	r1, r6
 801b048:	e7de      	b.n	801b008 <__gethex+0xe8>
 801b04a:	eba6 0309 	sub.w	r3, r6, r9
 801b04e:	3b01      	subs	r3, #1
 801b050:	4629      	mov	r1, r5
 801b052:	2b07      	cmp	r3, #7
 801b054:	dc0a      	bgt.n	801b06c <__gethex+0x14c>
 801b056:	9801      	ldr	r0, [sp, #4]
 801b058:	f000 fafc 	bl	801b654 <_Balloc>
 801b05c:	4604      	mov	r4, r0
 801b05e:	b940      	cbnz	r0, 801b072 <__gethex+0x152>
 801b060:	4b5c      	ldr	r3, [pc, #368]	@ (801b1d4 <__gethex+0x2b4>)
 801b062:	4602      	mov	r2, r0
 801b064:	21e4      	movs	r1, #228	@ 0xe4
 801b066:	485c      	ldr	r0, [pc, #368]	@ (801b1d8 <__gethex+0x2b8>)
 801b068:	f001 f9de 	bl	801c428 <__assert_func>
 801b06c:	3101      	adds	r1, #1
 801b06e:	105b      	asrs	r3, r3, #1
 801b070:	e7ef      	b.n	801b052 <__gethex+0x132>
 801b072:	f100 0a14 	add.w	sl, r0, #20
 801b076:	2300      	movs	r3, #0
 801b078:	4655      	mov	r5, sl
 801b07a:	469b      	mov	fp, r3
 801b07c:	45b1      	cmp	r9, r6
 801b07e:	d337      	bcc.n	801b0f0 <__gethex+0x1d0>
 801b080:	f845 bb04 	str.w	fp, [r5], #4
 801b084:	eba5 050a 	sub.w	r5, r5, sl
 801b088:	10ad      	asrs	r5, r5, #2
 801b08a:	6125      	str	r5, [r4, #16]
 801b08c:	4658      	mov	r0, fp
 801b08e:	f000 fbd3 	bl	801b838 <__hi0bits>
 801b092:	016d      	lsls	r5, r5, #5
 801b094:	f8d8 6000 	ldr.w	r6, [r8]
 801b098:	1a2d      	subs	r5, r5, r0
 801b09a:	42b5      	cmp	r5, r6
 801b09c:	dd54      	ble.n	801b148 <__gethex+0x228>
 801b09e:	1bad      	subs	r5, r5, r6
 801b0a0:	4629      	mov	r1, r5
 801b0a2:	4620      	mov	r0, r4
 801b0a4:	f000 ff64 	bl	801bf70 <__any_on>
 801b0a8:	4681      	mov	r9, r0
 801b0aa:	b178      	cbz	r0, 801b0cc <__gethex+0x1ac>
 801b0ac:	1e6b      	subs	r3, r5, #1
 801b0ae:	1159      	asrs	r1, r3, #5
 801b0b0:	f003 021f 	and.w	r2, r3, #31
 801b0b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b0b8:	f04f 0901 	mov.w	r9, #1
 801b0bc:	fa09 f202 	lsl.w	r2, r9, r2
 801b0c0:	420a      	tst	r2, r1
 801b0c2:	d003      	beq.n	801b0cc <__gethex+0x1ac>
 801b0c4:	454b      	cmp	r3, r9
 801b0c6:	dc36      	bgt.n	801b136 <__gethex+0x216>
 801b0c8:	f04f 0902 	mov.w	r9, #2
 801b0cc:	4629      	mov	r1, r5
 801b0ce:	4620      	mov	r0, r4
 801b0d0:	f7ff febe 	bl	801ae50 <rshift>
 801b0d4:	442f      	add	r7, r5
 801b0d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b0da:	42bb      	cmp	r3, r7
 801b0dc:	da42      	bge.n	801b164 <__gethex+0x244>
 801b0de:	9801      	ldr	r0, [sp, #4]
 801b0e0:	4621      	mov	r1, r4
 801b0e2:	f000 faf7 	bl	801b6d4 <_Bfree>
 801b0e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	6013      	str	r3, [r2, #0]
 801b0ec:	25a3      	movs	r5, #163	@ 0xa3
 801b0ee:	e793      	b.n	801b018 <__gethex+0xf8>
 801b0f0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801b0f4:	2a2e      	cmp	r2, #46	@ 0x2e
 801b0f6:	d012      	beq.n	801b11e <__gethex+0x1fe>
 801b0f8:	2b20      	cmp	r3, #32
 801b0fa:	d104      	bne.n	801b106 <__gethex+0x1e6>
 801b0fc:	f845 bb04 	str.w	fp, [r5], #4
 801b100:	f04f 0b00 	mov.w	fp, #0
 801b104:	465b      	mov	r3, fp
 801b106:	7830      	ldrb	r0, [r6, #0]
 801b108:	9303      	str	r3, [sp, #12]
 801b10a:	f7ff fef3 	bl	801aef4 <__hexdig_fun>
 801b10e:	9b03      	ldr	r3, [sp, #12]
 801b110:	f000 000f 	and.w	r0, r0, #15
 801b114:	4098      	lsls	r0, r3
 801b116:	ea4b 0b00 	orr.w	fp, fp, r0
 801b11a:	3304      	adds	r3, #4
 801b11c:	e7ae      	b.n	801b07c <__gethex+0x15c>
 801b11e:	45b1      	cmp	r9, r6
 801b120:	d8ea      	bhi.n	801b0f8 <__gethex+0x1d8>
 801b122:	492b      	ldr	r1, [pc, #172]	@ (801b1d0 <__gethex+0x2b0>)
 801b124:	9303      	str	r3, [sp, #12]
 801b126:	2201      	movs	r2, #1
 801b128:	4630      	mov	r0, r6
 801b12a:	f7fe ffc7 	bl	801a0bc <strncmp>
 801b12e:	9b03      	ldr	r3, [sp, #12]
 801b130:	2800      	cmp	r0, #0
 801b132:	d1e1      	bne.n	801b0f8 <__gethex+0x1d8>
 801b134:	e7a2      	b.n	801b07c <__gethex+0x15c>
 801b136:	1ea9      	subs	r1, r5, #2
 801b138:	4620      	mov	r0, r4
 801b13a:	f000 ff19 	bl	801bf70 <__any_on>
 801b13e:	2800      	cmp	r0, #0
 801b140:	d0c2      	beq.n	801b0c8 <__gethex+0x1a8>
 801b142:	f04f 0903 	mov.w	r9, #3
 801b146:	e7c1      	b.n	801b0cc <__gethex+0x1ac>
 801b148:	da09      	bge.n	801b15e <__gethex+0x23e>
 801b14a:	1b75      	subs	r5, r6, r5
 801b14c:	4621      	mov	r1, r4
 801b14e:	9801      	ldr	r0, [sp, #4]
 801b150:	462a      	mov	r2, r5
 801b152:	f000 fcd7 	bl	801bb04 <__lshift>
 801b156:	1b7f      	subs	r7, r7, r5
 801b158:	4604      	mov	r4, r0
 801b15a:	f100 0a14 	add.w	sl, r0, #20
 801b15e:	f04f 0900 	mov.w	r9, #0
 801b162:	e7b8      	b.n	801b0d6 <__gethex+0x1b6>
 801b164:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b168:	42bd      	cmp	r5, r7
 801b16a:	dd6f      	ble.n	801b24c <__gethex+0x32c>
 801b16c:	1bed      	subs	r5, r5, r7
 801b16e:	42ae      	cmp	r6, r5
 801b170:	dc34      	bgt.n	801b1dc <__gethex+0x2bc>
 801b172:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b176:	2b02      	cmp	r3, #2
 801b178:	d022      	beq.n	801b1c0 <__gethex+0x2a0>
 801b17a:	2b03      	cmp	r3, #3
 801b17c:	d024      	beq.n	801b1c8 <__gethex+0x2a8>
 801b17e:	2b01      	cmp	r3, #1
 801b180:	d115      	bne.n	801b1ae <__gethex+0x28e>
 801b182:	42ae      	cmp	r6, r5
 801b184:	d113      	bne.n	801b1ae <__gethex+0x28e>
 801b186:	2e01      	cmp	r6, #1
 801b188:	d10b      	bne.n	801b1a2 <__gethex+0x282>
 801b18a:	9a02      	ldr	r2, [sp, #8]
 801b18c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b190:	6013      	str	r3, [r2, #0]
 801b192:	2301      	movs	r3, #1
 801b194:	6123      	str	r3, [r4, #16]
 801b196:	f8ca 3000 	str.w	r3, [sl]
 801b19a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b19c:	2562      	movs	r5, #98	@ 0x62
 801b19e:	601c      	str	r4, [r3, #0]
 801b1a0:	e73a      	b.n	801b018 <__gethex+0xf8>
 801b1a2:	1e71      	subs	r1, r6, #1
 801b1a4:	4620      	mov	r0, r4
 801b1a6:	f000 fee3 	bl	801bf70 <__any_on>
 801b1aa:	2800      	cmp	r0, #0
 801b1ac:	d1ed      	bne.n	801b18a <__gethex+0x26a>
 801b1ae:	9801      	ldr	r0, [sp, #4]
 801b1b0:	4621      	mov	r1, r4
 801b1b2:	f000 fa8f 	bl	801b6d4 <_Bfree>
 801b1b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b1b8:	2300      	movs	r3, #0
 801b1ba:	6013      	str	r3, [r2, #0]
 801b1bc:	2550      	movs	r5, #80	@ 0x50
 801b1be:	e72b      	b.n	801b018 <__gethex+0xf8>
 801b1c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d1f3      	bne.n	801b1ae <__gethex+0x28e>
 801b1c6:	e7e0      	b.n	801b18a <__gethex+0x26a>
 801b1c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d1dd      	bne.n	801b18a <__gethex+0x26a>
 801b1ce:	e7ee      	b.n	801b1ae <__gethex+0x28e>
 801b1d0:	0801e330 	.word	0x0801e330
 801b1d4:	0801e541 	.word	0x0801e541
 801b1d8:	0801e552 	.word	0x0801e552
 801b1dc:	1e6f      	subs	r7, r5, #1
 801b1de:	f1b9 0f00 	cmp.w	r9, #0
 801b1e2:	d130      	bne.n	801b246 <__gethex+0x326>
 801b1e4:	b127      	cbz	r7, 801b1f0 <__gethex+0x2d0>
 801b1e6:	4639      	mov	r1, r7
 801b1e8:	4620      	mov	r0, r4
 801b1ea:	f000 fec1 	bl	801bf70 <__any_on>
 801b1ee:	4681      	mov	r9, r0
 801b1f0:	117a      	asrs	r2, r7, #5
 801b1f2:	2301      	movs	r3, #1
 801b1f4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b1f8:	f007 071f 	and.w	r7, r7, #31
 801b1fc:	40bb      	lsls	r3, r7
 801b1fe:	4213      	tst	r3, r2
 801b200:	4629      	mov	r1, r5
 801b202:	4620      	mov	r0, r4
 801b204:	bf18      	it	ne
 801b206:	f049 0902 	orrne.w	r9, r9, #2
 801b20a:	f7ff fe21 	bl	801ae50 <rshift>
 801b20e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801b212:	1b76      	subs	r6, r6, r5
 801b214:	2502      	movs	r5, #2
 801b216:	f1b9 0f00 	cmp.w	r9, #0
 801b21a:	d047      	beq.n	801b2ac <__gethex+0x38c>
 801b21c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b220:	2b02      	cmp	r3, #2
 801b222:	d015      	beq.n	801b250 <__gethex+0x330>
 801b224:	2b03      	cmp	r3, #3
 801b226:	d017      	beq.n	801b258 <__gethex+0x338>
 801b228:	2b01      	cmp	r3, #1
 801b22a:	d109      	bne.n	801b240 <__gethex+0x320>
 801b22c:	f019 0f02 	tst.w	r9, #2
 801b230:	d006      	beq.n	801b240 <__gethex+0x320>
 801b232:	f8da 3000 	ldr.w	r3, [sl]
 801b236:	ea49 0903 	orr.w	r9, r9, r3
 801b23a:	f019 0f01 	tst.w	r9, #1
 801b23e:	d10e      	bne.n	801b25e <__gethex+0x33e>
 801b240:	f045 0510 	orr.w	r5, r5, #16
 801b244:	e032      	b.n	801b2ac <__gethex+0x38c>
 801b246:	f04f 0901 	mov.w	r9, #1
 801b24a:	e7d1      	b.n	801b1f0 <__gethex+0x2d0>
 801b24c:	2501      	movs	r5, #1
 801b24e:	e7e2      	b.n	801b216 <__gethex+0x2f6>
 801b250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b252:	f1c3 0301 	rsb	r3, r3, #1
 801b256:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d0f0      	beq.n	801b240 <__gethex+0x320>
 801b25e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b262:	f104 0314 	add.w	r3, r4, #20
 801b266:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b26a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b26e:	f04f 0c00 	mov.w	ip, #0
 801b272:	4618      	mov	r0, r3
 801b274:	f853 2b04 	ldr.w	r2, [r3], #4
 801b278:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b27c:	d01b      	beq.n	801b2b6 <__gethex+0x396>
 801b27e:	3201      	adds	r2, #1
 801b280:	6002      	str	r2, [r0, #0]
 801b282:	2d02      	cmp	r5, #2
 801b284:	f104 0314 	add.w	r3, r4, #20
 801b288:	d13c      	bne.n	801b304 <__gethex+0x3e4>
 801b28a:	f8d8 2000 	ldr.w	r2, [r8]
 801b28e:	3a01      	subs	r2, #1
 801b290:	42b2      	cmp	r2, r6
 801b292:	d109      	bne.n	801b2a8 <__gethex+0x388>
 801b294:	1171      	asrs	r1, r6, #5
 801b296:	2201      	movs	r2, #1
 801b298:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b29c:	f006 061f 	and.w	r6, r6, #31
 801b2a0:	fa02 f606 	lsl.w	r6, r2, r6
 801b2a4:	421e      	tst	r6, r3
 801b2a6:	d13a      	bne.n	801b31e <__gethex+0x3fe>
 801b2a8:	f045 0520 	orr.w	r5, r5, #32
 801b2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b2ae:	601c      	str	r4, [r3, #0]
 801b2b0:	9b02      	ldr	r3, [sp, #8]
 801b2b2:	601f      	str	r7, [r3, #0]
 801b2b4:	e6b0      	b.n	801b018 <__gethex+0xf8>
 801b2b6:	4299      	cmp	r1, r3
 801b2b8:	f843 cc04 	str.w	ip, [r3, #-4]
 801b2bc:	d8d9      	bhi.n	801b272 <__gethex+0x352>
 801b2be:	68a3      	ldr	r3, [r4, #8]
 801b2c0:	459b      	cmp	fp, r3
 801b2c2:	db17      	blt.n	801b2f4 <__gethex+0x3d4>
 801b2c4:	6861      	ldr	r1, [r4, #4]
 801b2c6:	9801      	ldr	r0, [sp, #4]
 801b2c8:	3101      	adds	r1, #1
 801b2ca:	f000 f9c3 	bl	801b654 <_Balloc>
 801b2ce:	4681      	mov	r9, r0
 801b2d0:	b918      	cbnz	r0, 801b2da <__gethex+0x3ba>
 801b2d2:	4b1a      	ldr	r3, [pc, #104]	@ (801b33c <__gethex+0x41c>)
 801b2d4:	4602      	mov	r2, r0
 801b2d6:	2184      	movs	r1, #132	@ 0x84
 801b2d8:	e6c5      	b.n	801b066 <__gethex+0x146>
 801b2da:	6922      	ldr	r2, [r4, #16]
 801b2dc:	3202      	adds	r2, #2
 801b2de:	f104 010c 	add.w	r1, r4, #12
 801b2e2:	0092      	lsls	r2, r2, #2
 801b2e4:	300c      	adds	r0, #12
 801b2e6:	f7fe ff72 	bl	801a1ce <memcpy>
 801b2ea:	4621      	mov	r1, r4
 801b2ec:	9801      	ldr	r0, [sp, #4]
 801b2ee:	f000 f9f1 	bl	801b6d4 <_Bfree>
 801b2f2:	464c      	mov	r4, r9
 801b2f4:	6923      	ldr	r3, [r4, #16]
 801b2f6:	1c5a      	adds	r2, r3, #1
 801b2f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b2fc:	6122      	str	r2, [r4, #16]
 801b2fe:	2201      	movs	r2, #1
 801b300:	615a      	str	r2, [r3, #20]
 801b302:	e7be      	b.n	801b282 <__gethex+0x362>
 801b304:	6922      	ldr	r2, [r4, #16]
 801b306:	455a      	cmp	r2, fp
 801b308:	dd0b      	ble.n	801b322 <__gethex+0x402>
 801b30a:	2101      	movs	r1, #1
 801b30c:	4620      	mov	r0, r4
 801b30e:	f7ff fd9f 	bl	801ae50 <rshift>
 801b312:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b316:	3701      	adds	r7, #1
 801b318:	42bb      	cmp	r3, r7
 801b31a:	f6ff aee0 	blt.w	801b0de <__gethex+0x1be>
 801b31e:	2501      	movs	r5, #1
 801b320:	e7c2      	b.n	801b2a8 <__gethex+0x388>
 801b322:	f016 061f 	ands.w	r6, r6, #31
 801b326:	d0fa      	beq.n	801b31e <__gethex+0x3fe>
 801b328:	4453      	add	r3, sl
 801b32a:	f1c6 0620 	rsb	r6, r6, #32
 801b32e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b332:	f000 fa81 	bl	801b838 <__hi0bits>
 801b336:	42b0      	cmp	r0, r6
 801b338:	dbe7      	blt.n	801b30a <__gethex+0x3ea>
 801b33a:	e7f0      	b.n	801b31e <__gethex+0x3fe>
 801b33c:	0801e541 	.word	0x0801e541

0801b340 <L_shift>:
 801b340:	f1c2 0208 	rsb	r2, r2, #8
 801b344:	0092      	lsls	r2, r2, #2
 801b346:	b570      	push	{r4, r5, r6, lr}
 801b348:	f1c2 0620 	rsb	r6, r2, #32
 801b34c:	6843      	ldr	r3, [r0, #4]
 801b34e:	6804      	ldr	r4, [r0, #0]
 801b350:	fa03 f506 	lsl.w	r5, r3, r6
 801b354:	432c      	orrs	r4, r5
 801b356:	40d3      	lsrs	r3, r2
 801b358:	6004      	str	r4, [r0, #0]
 801b35a:	f840 3f04 	str.w	r3, [r0, #4]!
 801b35e:	4288      	cmp	r0, r1
 801b360:	d3f4      	bcc.n	801b34c <L_shift+0xc>
 801b362:	bd70      	pop	{r4, r5, r6, pc}

0801b364 <__match>:
 801b364:	b530      	push	{r4, r5, lr}
 801b366:	6803      	ldr	r3, [r0, #0]
 801b368:	3301      	adds	r3, #1
 801b36a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b36e:	b914      	cbnz	r4, 801b376 <__match+0x12>
 801b370:	6003      	str	r3, [r0, #0]
 801b372:	2001      	movs	r0, #1
 801b374:	bd30      	pop	{r4, r5, pc}
 801b376:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b37a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801b37e:	2d19      	cmp	r5, #25
 801b380:	bf98      	it	ls
 801b382:	3220      	addls	r2, #32
 801b384:	42a2      	cmp	r2, r4
 801b386:	d0f0      	beq.n	801b36a <__match+0x6>
 801b388:	2000      	movs	r0, #0
 801b38a:	e7f3      	b.n	801b374 <__match+0x10>

0801b38c <__hexnan>:
 801b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b390:	680b      	ldr	r3, [r1, #0]
 801b392:	6801      	ldr	r1, [r0, #0]
 801b394:	115e      	asrs	r6, r3, #5
 801b396:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b39a:	f013 031f 	ands.w	r3, r3, #31
 801b39e:	b087      	sub	sp, #28
 801b3a0:	bf18      	it	ne
 801b3a2:	3604      	addne	r6, #4
 801b3a4:	2500      	movs	r5, #0
 801b3a6:	1f37      	subs	r7, r6, #4
 801b3a8:	4682      	mov	sl, r0
 801b3aa:	4690      	mov	r8, r2
 801b3ac:	9301      	str	r3, [sp, #4]
 801b3ae:	f846 5c04 	str.w	r5, [r6, #-4]
 801b3b2:	46b9      	mov	r9, r7
 801b3b4:	463c      	mov	r4, r7
 801b3b6:	9502      	str	r5, [sp, #8]
 801b3b8:	46ab      	mov	fp, r5
 801b3ba:	784a      	ldrb	r2, [r1, #1]
 801b3bc:	1c4b      	adds	r3, r1, #1
 801b3be:	9303      	str	r3, [sp, #12]
 801b3c0:	b342      	cbz	r2, 801b414 <__hexnan+0x88>
 801b3c2:	4610      	mov	r0, r2
 801b3c4:	9105      	str	r1, [sp, #20]
 801b3c6:	9204      	str	r2, [sp, #16]
 801b3c8:	f7ff fd94 	bl	801aef4 <__hexdig_fun>
 801b3cc:	2800      	cmp	r0, #0
 801b3ce:	d151      	bne.n	801b474 <__hexnan+0xe8>
 801b3d0:	9a04      	ldr	r2, [sp, #16]
 801b3d2:	9905      	ldr	r1, [sp, #20]
 801b3d4:	2a20      	cmp	r2, #32
 801b3d6:	d818      	bhi.n	801b40a <__hexnan+0x7e>
 801b3d8:	9b02      	ldr	r3, [sp, #8]
 801b3da:	459b      	cmp	fp, r3
 801b3dc:	dd13      	ble.n	801b406 <__hexnan+0x7a>
 801b3de:	454c      	cmp	r4, r9
 801b3e0:	d206      	bcs.n	801b3f0 <__hexnan+0x64>
 801b3e2:	2d07      	cmp	r5, #7
 801b3e4:	dc04      	bgt.n	801b3f0 <__hexnan+0x64>
 801b3e6:	462a      	mov	r2, r5
 801b3e8:	4649      	mov	r1, r9
 801b3ea:	4620      	mov	r0, r4
 801b3ec:	f7ff ffa8 	bl	801b340 <L_shift>
 801b3f0:	4544      	cmp	r4, r8
 801b3f2:	d952      	bls.n	801b49a <__hexnan+0x10e>
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	f1a4 0904 	sub.w	r9, r4, #4
 801b3fa:	f844 3c04 	str.w	r3, [r4, #-4]
 801b3fe:	f8cd b008 	str.w	fp, [sp, #8]
 801b402:	464c      	mov	r4, r9
 801b404:	461d      	mov	r5, r3
 801b406:	9903      	ldr	r1, [sp, #12]
 801b408:	e7d7      	b.n	801b3ba <__hexnan+0x2e>
 801b40a:	2a29      	cmp	r2, #41	@ 0x29
 801b40c:	d157      	bne.n	801b4be <__hexnan+0x132>
 801b40e:	3102      	adds	r1, #2
 801b410:	f8ca 1000 	str.w	r1, [sl]
 801b414:	f1bb 0f00 	cmp.w	fp, #0
 801b418:	d051      	beq.n	801b4be <__hexnan+0x132>
 801b41a:	454c      	cmp	r4, r9
 801b41c:	d206      	bcs.n	801b42c <__hexnan+0xa0>
 801b41e:	2d07      	cmp	r5, #7
 801b420:	dc04      	bgt.n	801b42c <__hexnan+0xa0>
 801b422:	462a      	mov	r2, r5
 801b424:	4649      	mov	r1, r9
 801b426:	4620      	mov	r0, r4
 801b428:	f7ff ff8a 	bl	801b340 <L_shift>
 801b42c:	4544      	cmp	r4, r8
 801b42e:	d936      	bls.n	801b49e <__hexnan+0x112>
 801b430:	f1a8 0204 	sub.w	r2, r8, #4
 801b434:	4623      	mov	r3, r4
 801b436:	f853 1b04 	ldr.w	r1, [r3], #4
 801b43a:	f842 1f04 	str.w	r1, [r2, #4]!
 801b43e:	429f      	cmp	r7, r3
 801b440:	d2f9      	bcs.n	801b436 <__hexnan+0xaa>
 801b442:	1b3b      	subs	r3, r7, r4
 801b444:	f023 0303 	bic.w	r3, r3, #3
 801b448:	3304      	adds	r3, #4
 801b44a:	3401      	adds	r4, #1
 801b44c:	3e03      	subs	r6, #3
 801b44e:	42b4      	cmp	r4, r6
 801b450:	bf88      	it	hi
 801b452:	2304      	movhi	r3, #4
 801b454:	4443      	add	r3, r8
 801b456:	2200      	movs	r2, #0
 801b458:	f843 2b04 	str.w	r2, [r3], #4
 801b45c:	429f      	cmp	r7, r3
 801b45e:	d2fb      	bcs.n	801b458 <__hexnan+0xcc>
 801b460:	683b      	ldr	r3, [r7, #0]
 801b462:	b91b      	cbnz	r3, 801b46c <__hexnan+0xe0>
 801b464:	4547      	cmp	r7, r8
 801b466:	d128      	bne.n	801b4ba <__hexnan+0x12e>
 801b468:	2301      	movs	r3, #1
 801b46a:	603b      	str	r3, [r7, #0]
 801b46c:	2005      	movs	r0, #5
 801b46e:	b007      	add	sp, #28
 801b470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b474:	3501      	adds	r5, #1
 801b476:	2d08      	cmp	r5, #8
 801b478:	f10b 0b01 	add.w	fp, fp, #1
 801b47c:	dd06      	ble.n	801b48c <__hexnan+0x100>
 801b47e:	4544      	cmp	r4, r8
 801b480:	d9c1      	bls.n	801b406 <__hexnan+0x7a>
 801b482:	2300      	movs	r3, #0
 801b484:	f844 3c04 	str.w	r3, [r4, #-4]
 801b488:	2501      	movs	r5, #1
 801b48a:	3c04      	subs	r4, #4
 801b48c:	6822      	ldr	r2, [r4, #0]
 801b48e:	f000 000f 	and.w	r0, r0, #15
 801b492:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b496:	6020      	str	r0, [r4, #0]
 801b498:	e7b5      	b.n	801b406 <__hexnan+0x7a>
 801b49a:	2508      	movs	r5, #8
 801b49c:	e7b3      	b.n	801b406 <__hexnan+0x7a>
 801b49e:	9b01      	ldr	r3, [sp, #4]
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	d0dd      	beq.n	801b460 <__hexnan+0xd4>
 801b4a4:	f1c3 0320 	rsb	r3, r3, #32
 801b4a8:	f04f 32ff 	mov.w	r2, #4294967295
 801b4ac:	40da      	lsrs	r2, r3
 801b4ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801b4b2:	4013      	ands	r3, r2
 801b4b4:	f846 3c04 	str.w	r3, [r6, #-4]
 801b4b8:	e7d2      	b.n	801b460 <__hexnan+0xd4>
 801b4ba:	3f04      	subs	r7, #4
 801b4bc:	e7d0      	b.n	801b460 <__hexnan+0xd4>
 801b4be:	2004      	movs	r0, #4
 801b4c0:	e7d5      	b.n	801b46e <__hexnan+0xe2>
	...

0801b4c4 <malloc>:
 801b4c4:	4b02      	ldr	r3, [pc, #8]	@ (801b4d0 <malloc+0xc>)
 801b4c6:	4601      	mov	r1, r0
 801b4c8:	6818      	ldr	r0, [r3, #0]
 801b4ca:	f000 b825 	b.w	801b518 <_malloc_r>
 801b4ce:	bf00      	nop
 801b4d0:	240002ac 	.word	0x240002ac

0801b4d4 <sbrk_aligned>:
 801b4d4:	b570      	push	{r4, r5, r6, lr}
 801b4d6:	4e0f      	ldr	r6, [pc, #60]	@ (801b514 <sbrk_aligned+0x40>)
 801b4d8:	460c      	mov	r4, r1
 801b4da:	6831      	ldr	r1, [r6, #0]
 801b4dc:	4605      	mov	r5, r0
 801b4de:	b911      	cbnz	r1, 801b4e6 <sbrk_aligned+0x12>
 801b4e0:	f000 ff92 	bl	801c408 <_sbrk_r>
 801b4e4:	6030      	str	r0, [r6, #0]
 801b4e6:	4621      	mov	r1, r4
 801b4e8:	4628      	mov	r0, r5
 801b4ea:	f000 ff8d 	bl	801c408 <_sbrk_r>
 801b4ee:	1c43      	adds	r3, r0, #1
 801b4f0:	d103      	bne.n	801b4fa <sbrk_aligned+0x26>
 801b4f2:	f04f 34ff 	mov.w	r4, #4294967295
 801b4f6:	4620      	mov	r0, r4
 801b4f8:	bd70      	pop	{r4, r5, r6, pc}
 801b4fa:	1cc4      	adds	r4, r0, #3
 801b4fc:	f024 0403 	bic.w	r4, r4, #3
 801b500:	42a0      	cmp	r0, r4
 801b502:	d0f8      	beq.n	801b4f6 <sbrk_aligned+0x22>
 801b504:	1a21      	subs	r1, r4, r0
 801b506:	4628      	mov	r0, r5
 801b508:	f000 ff7e 	bl	801c408 <_sbrk_r>
 801b50c:	3001      	adds	r0, #1
 801b50e:	d1f2      	bne.n	801b4f6 <sbrk_aligned+0x22>
 801b510:	e7ef      	b.n	801b4f2 <sbrk_aligned+0x1e>
 801b512:	bf00      	nop
 801b514:	240153e0 	.word	0x240153e0

0801b518 <_malloc_r>:
 801b518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b51c:	1ccd      	adds	r5, r1, #3
 801b51e:	f025 0503 	bic.w	r5, r5, #3
 801b522:	3508      	adds	r5, #8
 801b524:	2d0c      	cmp	r5, #12
 801b526:	bf38      	it	cc
 801b528:	250c      	movcc	r5, #12
 801b52a:	2d00      	cmp	r5, #0
 801b52c:	4606      	mov	r6, r0
 801b52e:	db01      	blt.n	801b534 <_malloc_r+0x1c>
 801b530:	42a9      	cmp	r1, r5
 801b532:	d904      	bls.n	801b53e <_malloc_r+0x26>
 801b534:	230c      	movs	r3, #12
 801b536:	6033      	str	r3, [r6, #0]
 801b538:	2000      	movs	r0, #0
 801b53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b53e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b614 <_malloc_r+0xfc>
 801b542:	f000 f87b 	bl	801b63c <__malloc_lock>
 801b546:	f8d8 3000 	ldr.w	r3, [r8]
 801b54a:	461c      	mov	r4, r3
 801b54c:	bb44      	cbnz	r4, 801b5a0 <_malloc_r+0x88>
 801b54e:	4629      	mov	r1, r5
 801b550:	4630      	mov	r0, r6
 801b552:	f7ff ffbf 	bl	801b4d4 <sbrk_aligned>
 801b556:	1c43      	adds	r3, r0, #1
 801b558:	4604      	mov	r4, r0
 801b55a:	d158      	bne.n	801b60e <_malloc_r+0xf6>
 801b55c:	f8d8 4000 	ldr.w	r4, [r8]
 801b560:	4627      	mov	r7, r4
 801b562:	2f00      	cmp	r7, #0
 801b564:	d143      	bne.n	801b5ee <_malloc_r+0xd6>
 801b566:	2c00      	cmp	r4, #0
 801b568:	d04b      	beq.n	801b602 <_malloc_r+0xea>
 801b56a:	6823      	ldr	r3, [r4, #0]
 801b56c:	4639      	mov	r1, r7
 801b56e:	4630      	mov	r0, r6
 801b570:	eb04 0903 	add.w	r9, r4, r3
 801b574:	f000 ff48 	bl	801c408 <_sbrk_r>
 801b578:	4581      	cmp	r9, r0
 801b57a:	d142      	bne.n	801b602 <_malloc_r+0xea>
 801b57c:	6821      	ldr	r1, [r4, #0]
 801b57e:	1a6d      	subs	r5, r5, r1
 801b580:	4629      	mov	r1, r5
 801b582:	4630      	mov	r0, r6
 801b584:	f7ff ffa6 	bl	801b4d4 <sbrk_aligned>
 801b588:	3001      	adds	r0, #1
 801b58a:	d03a      	beq.n	801b602 <_malloc_r+0xea>
 801b58c:	6823      	ldr	r3, [r4, #0]
 801b58e:	442b      	add	r3, r5
 801b590:	6023      	str	r3, [r4, #0]
 801b592:	f8d8 3000 	ldr.w	r3, [r8]
 801b596:	685a      	ldr	r2, [r3, #4]
 801b598:	bb62      	cbnz	r2, 801b5f4 <_malloc_r+0xdc>
 801b59a:	f8c8 7000 	str.w	r7, [r8]
 801b59e:	e00f      	b.n	801b5c0 <_malloc_r+0xa8>
 801b5a0:	6822      	ldr	r2, [r4, #0]
 801b5a2:	1b52      	subs	r2, r2, r5
 801b5a4:	d420      	bmi.n	801b5e8 <_malloc_r+0xd0>
 801b5a6:	2a0b      	cmp	r2, #11
 801b5a8:	d917      	bls.n	801b5da <_malloc_r+0xc2>
 801b5aa:	1961      	adds	r1, r4, r5
 801b5ac:	42a3      	cmp	r3, r4
 801b5ae:	6025      	str	r5, [r4, #0]
 801b5b0:	bf18      	it	ne
 801b5b2:	6059      	strne	r1, [r3, #4]
 801b5b4:	6863      	ldr	r3, [r4, #4]
 801b5b6:	bf08      	it	eq
 801b5b8:	f8c8 1000 	streq.w	r1, [r8]
 801b5bc:	5162      	str	r2, [r4, r5]
 801b5be:	604b      	str	r3, [r1, #4]
 801b5c0:	4630      	mov	r0, r6
 801b5c2:	f000 f841 	bl	801b648 <__malloc_unlock>
 801b5c6:	f104 000b 	add.w	r0, r4, #11
 801b5ca:	1d23      	adds	r3, r4, #4
 801b5cc:	f020 0007 	bic.w	r0, r0, #7
 801b5d0:	1ac2      	subs	r2, r0, r3
 801b5d2:	bf1c      	itt	ne
 801b5d4:	1a1b      	subne	r3, r3, r0
 801b5d6:	50a3      	strne	r3, [r4, r2]
 801b5d8:	e7af      	b.n	801b53a <_malloc_r+0x22>
 801b5da:	6862      	ldr	r2, [r4, #4]
 801b5dc:	42a3      	cmp	r3, r4
 801b5de:	bf0c      	ite	eq
 801b5e0:	f8c8 2000 	streq.w	r2, [r8]
 801b5e4:	605a      	strne	r2, [r3, #4]
 801b5e6:	e7eb      	b.n	801b5c0 <_malloc_r+0xa8>
 801b5e8:	4623      	mov	r3, r4
 801b5ea:	6864      	ldr	r4, [r4, #4]
 801b5ec:	e7ae      	b.n	801b54c <_malloc_r+0x34>
 801b5ee:	463c      	mov	r4, r7
 801b5f0:	687f      	ldr	r7, [r7, #4]
 801b5f2:	e7b6      	b.n	801b562 <_malloc_r+0x4a>
 801b5f4:	461a      	mov	r2, r3
 801b5f6:	685b      	ldr	r3, [r3, #4]
 801b5f8:	42a3      	cmp	r3, r4
 801b5fa:	d1fb      	bne.n	801b5f4 <_malloc_r+0xdc>
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	6053      	str	r3, [r2, #4]
 801b600:	e7de      	b.n	801b5c0 <_malloc_r+0xa8>
 801b602:	230c      	movs	r3, #12
 801b604:	6033      	str	r3, [r6, #0]
 801b606:	4630      	mov	r0, r6
 801b608:	f000 f81e 	bl	801b648 <__malloc_unlock>
 801b60c:	e794      	b.n	801b538 <_malloc_r+0x20>
 801b60e:	6005      	str	r5, [r0, #0]
 801b610:	e7d6      	b.n	801b5c0 <_malloc_r+0xa8>
 801b612:	bf00      	nop
 801b614:	240153e4 	.word	0x240153e4

0801b618 <__ascii_mbtowc>:
 801b618:	b082      	sub	sp, #8
 801b61a:	b901      	cbnz	r1, 801b61e <__ascii_mbtowc+0x6>
 801b61c:	a901      	add	r1, sp, #4
 801b61e:	b142      	cbz	r2, 801b632 <__ascii_mbtowc+0x1a>
 801b620:	b14b      	cbz	r3, 801b636 <__ascii_mbtowc+0x1e>
 801b622:	7813      	ldrb	r3, [r2, #0]
 801b624:	600b      	str	r3, [r1, #0]
 801b626:	7812      	ldrb	r2, [r2, #0]
 801b628:	1e10      	subs	r0, r2, #0
 801b62a:	bf18      	it	ne
 801b62c:	2001      	movne	r0, #1
 801b62e:	b002      	add	sp, #8
 801b630:	4770      	bx	lr
 801b632:	4610      	mov	r0, r2
 801b634:	e7fb      	b.n	801b62e <__ascii_mbtowc+0x16>
 801b636:	f06f 0001 	mvn.w	r0, #1
 801b63a:	e7f8      	b.n	801b62e <__ascii_mbtowc+0x16>

0801b63c <__malloc_lock>:
 801b63c:	4801      	ldr	r0, [pc, #4]	@ (801b644 <__malloc_lock+0x8>)
 801b63e:	f7fe bdc4 	b.w	801a1ca <__retarget_lock_acquire_recursive>
 801b642:	bf00      	nop
 801b644:	240153dc 	.word	0x240153dc

0801b648 <__malloc_unlock>:
 801b648:	4801      	ldr	r0, [pc, #4]	@ (801b650 <__malloc_unlock+0x8>)
 801b64a:	f7fe bdbf 	b.w	801a1cc <__retarget_lock_release_recursive>
 801b64e:	bf00      	nop
 801b650:	240153dc 	.word	0x240153dc

0801b654 <_Balloc>:
 801b654:	b570      	push	{r4, r5, r6, lr}
 801b656:	69c6      	ldr	r6, [r0, #28]
 801b658:	4604      	mov	r4, r0
 801b65a:	460d      	mov	r5, r1
 801b65c:	b976      	cbnz	r6, 801b67c <_Balloc+0x28>
 801b65e:	2010      	movs	r0, #16
 801b660:	f7ff ff30 	bl	801b4c4 <malloc>
 801b664:	4602      	mov	r2, r0
 801b666:	61e0      	str	r0, [r4, #28]
 801b668:	b920      	cbnz	r0, 801b674 <_Balloc+0x20>
 801b66a:	4b18      	ldr	r3, [pc, #96]	@ (801b6cc <_Balloc+0x78>)
 801b66c:	4818      	ldr	r0, [pc, #96]	@ (801b6d0 <_Balloc+0x7c>)
 801b66e:	216b      	movs	r1, #107	@ 0x6b
 801b670:	f000 feda 	bl	801c428 <__assert_func>
 801b674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b678:	6006      	str	r6, [r0, #0]
 801b67a:	60c6      	str	r6, [r0, #12]
 801b67c:	69e6      	ldr	r6, [r4, #28]
 801b67e:	68f3      	ldr	r3, [r6, #12]
 801b680:	b183      	cbz	r3, 801b6a4 <_Balloc+0x50>
 801b682:	69e3      	ldr	r3, [r4, #28]
 801b684:	68db      	ldr	r3, [r3, #12]
 801b686:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b68a:	b9b8      	cbnz	r0, 801b6bc <_Balloc+0x68>
 801b68c:	2101      	movs	r1, #1
 801b68e:	fa01 f605 	lsl.w	r6, r1, r5
 801b692:	1d72      	adds	r2, r6, #5
 801b694:	0092      	lsls	r2, r2, #2
 801b696:	4620      	mov	r0, r4
 801b698:	f000 fee4 	bl	801c464 <_calloc_r>
 801b69c:	b160      	cbz	r0, 801b6b8 <_Balloc+0x64>
 801b69e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b6a2:	e00e      	b.n	801b6c2 <_Balloc+0x6e>
 801b6a4:	2221      	movs	r2, #33	@ 0x21
 801b6a6:	2104      	movs	r1, #4
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	f000 fedb 	bl	801c464 <_calloc_r>
 801b6ae:	69e3      	ldr	r3, [r4, #28]
 801b6b0:	60f0      	str	r0, [r6, #12]
 801b6b2:	68db      	ldr	r3, [r3, #12]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d1e4      	bne.n	801b682 <_Balloc+0x2e>
 801b6b8:	2000      	movs	r0, #0
 801b6ba:	bd70      	pop	{r4, r5, r6, pc}
 801b6bc:	6802      	ldr	r2, [r0, #0]
 801b6be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b6c2:	2300      	movs	r3, #0
 801b6c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b6c8:	e7f7      	b.n	801b6ba <_Balloc+0x66>
 801b6ca:	bf00      	nop
 801b6cc:	0801e4d2 	.word	0x0801e4d2
 801b6d0:	0801e5b2 	.word	0x0801e5b2

0801b6d4 <_Bfree>:
 801b6d4:	b570      	push	{r4, r5, r6, lr}
 801b6d6:	69c6      	ldr	r6, [r0, #28]
 801b6d8:	4605      	mov	r5, r0
 801b6da:	460c      	mov	r4, r1
 801b6dc:	b976      	cbnz	r6, 801b6fc <_Bfree+0x28>
 801b6de:	2010      	movs	r0, #16
 801b6e0:	f7ff fef0 	bl	801b4c4 <malloc>
 801b6e4:	4602      	mov	r2, r0
 801b6e6:	61e8      	str	r0, [r5, #28]
 801b6e8:	b920      	cbnz	r0, 801b6f4 <_Bfree+0x20>
 801b6ea:	4b09      	ldr	r3, [pc, #36]	@ (801b710 <_Bfree+0x3c>)
 801b6ec:	4809      	ldr	r0, [pc, #36]	@ (801b714 <_Bfree+0x40>)
 801b6ee:	218f      	movs	r1, #143	@ 0x8f
 801b6f0:	f000 fe9a 	bl	801c428 <__assert_func>
 801b6f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b6f8:	6006      	str	r6, [r0, #0]
 801b6fa:	60c6      	str	r6, [r0, #12]
 801b6fc:	b13c      	cbz	r4, 801b70e <_Bfree+0x3a>
 801b6fe:	69eb      	ldr	r3, [r5, #28]
 801b700:	6862      	ldr	r2, [r4, #4]
 801b702:	68db      	ldr	r3, [r3, #12]
 801b704:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b708:	6021      	str	r1, [r4, #0]
 801b70a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b70e:	bd70      	pop	{r4, r5, r6, pc}
 801b710:	0801e4d2 	.word	0x0801e4d2
 801b714:	0801e5b2 	.word	0x0801e5b2

0801b718 <__multadd>:
 801b718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b71c:	690d      	ldr	r5, [r1, #16]
 801b71e:	4607      	mov	r7, r0
 801b720:	460c      	mov	r4, r1
 801b722:	461e      	mov	r6, r3
 801b724:	f101 0c14 	add.w	ip, r1, #20
 801b728:	2000      	movs	r0, #0
 801b72a:	f8dc 3000 	ldr.w	r3, [ip]
 801b72e:	b299      	uxth	r1, r3
 801b730:	fb02 6101 	mla	r1, r2, r1, r6
 801b734:	0c1e      	lsrs	r6, r3, #16
 801b736:	0c0b      	lsrs	r3, r1, #16
 801b738:	fb02 3306 	mla	r3, r2, r6, r3
 801b73c:	b289      	uxth	r1, r1
 801b73e:	3001      	adds	r0, #1
 801b740:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b744:	4285      	cmp	r5, r0
 801b746:	f84c 1b04 	str.w	r1, [ip], #4
 801b74a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b74e:	dcec      	bgt.n	801b72a <__multadd+0x12>
 801b750:	b30e      	cbz	r6, 801b796 <__multadd+0x7e>
 801b752:	68a3      	ldr	r3, [r4, #8]
 801b754:	42ab      	cmp	r3, r5
 801b756:	dc19      	bgt.n	801b78c <__multadd+0x74>
 801b758:	6861      	ldr	r1, [r4, #4]
 801b75a:	4638      	mov	r0, r7
 801b75c:	3101      	adds	r1, #1
 801b75e:	f7ff ff79 	bl	801b654 <_Balloc>
 801b762:	4680      	mov	r8, r0
 801b764:	b928      	cbnz	r0, 801b772 <__multadd+0x5a>
 801b766:	4602      	mov	r2, r0
 801b768:	4b0c      	ldr	r3, [pc, #48]	@ (801b79c <__multadd+0x84>)
 801b76a:	480d      	ldr	r0, [pc, #52]	@ (801b7a0 <__multadd+0x88>)
 801b76c:	21ba      	movs	r1, #186	@ 0xba
 801b76e:	f000 fe5b 	bl	801c428 <__assert_func>
 801b772:	6922      	ldr	r2, [r4, #16]
 801b774:	3202      	adds	r2, #2
 801b776:	f104 010c 	add.w	r1, r4, #12
 801b77a:	0092      	lsls	r2, r2, #2
 801b77c:	300c      	adds	r0, #12
 801b77e:	f7fe fd26 	bl	801a1ce <memcpy>
 801b782:	4621      	mov	r1, r4
 801b784:	4638      	mov	r0, r7
 801b786:	f7ff ffa5 	bl	801b6d4 <_Bfree>
 801b78a:	4644      	mov	r4, r8
 801b78c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b790:	3501      	adds	r5, #1
 801b792:	615e      	str	r6, [r3, #20]
 801b794:	6125      	str	r5, [r4, #16]
 801b796:	4620      	mov	r0, r4
 801b798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b79c:	0801e541 	.word	0x0801e541
 801b7a0:	0801e5b2 	.word	0x0801e5b2

0801b7a4 <__s2b>:
 801b7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b7a8:	460c      	mov	r4, r1
 801b7aa:	4615      	mov	r5, r2
 801b7ac:	461f      	mov	r7, r3
 801b7ae:	2209      	movs	r2, #9
 801b7b0:	3308      	adds	r3, #8
 801b7b2:	4606      	mov	r6, r0
 801b7b4:	fb93 f3f2 	sdiv	r3, r3, r2
 801b7b8:	2100      	movs	r1, #0
 801b7ba:	2201      	movs	r2, #1
 801b7bc:	429a      	cmp	r2, r3
 801b7be:	db09      	blt.n	801b7d4 <__s2b+0x30>
 801b7c0:	4630      	mov	r0, r6
 801b7c2:	f7ff ff47 	bl	801b654 <_Balloc>
 801b7c6:	b940      	cbnz	r0, 801b7da <__s2b+0x36>
 801b7c8:	4602      	mov	r2, r0
 801b7ca:	4b19      	ldr	r3, [pc, #100]	@ (801b830 <__s2b+0x8c>)
 801b7cc:	4819      	ldr	r0, [pc, #100]	@ (801b834 <__s2b+0x90>)
 801b7ce:	21d3      	movs	r1, #211	@ 0xd3
 801b7d0:	f000 fe2a 	bl	801c428 <__assert_func>
 801b7d4:	0052      	lsls	r2, r2, #1
 801b7d6:	3101      	adds	r1, #1
 801b7d8:	e7f0      	b.n	801b7bc <__s2b+0x18>
 801b7da:	9b08      	ldr	r3, [sp, #32]
 801b7dc:	6143      	str	r3, [r0, #20]
 801b7de:	2d09      	cmp	r5, #9
 801b7e0:	f04f 0301 	mov.w	r3, #1
 801b7e4:	6103      	str	r3, [r0, #16]
 801b7e6:	dd16      	ble.n	801b816 <__s2b+0x72>
 801b7e8:	f104 0909 	add.w	r9, r4, #9
 801b7ec:	46c8      	mov	r8, r9
 801b7ee:	442c      	add	r4, r5
 801b7f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b7f4:	4601      	mov	r1, r0
 801b7f6:	3b30      	subs	r3, #48	@ 0x30
 801b7f8:	220a      	movs	r2, #10
 801b7fa:	4630      	mov	r0, r6
 801b7fc:	f7ff ff8c 	bl	801b718 <__multadd>
 801b800:	45a0      	cmp	r8, r4
 801b802:	d1f5      	bne.n	801b7f0 <__s2b+0x4c>
 801b804:	f1a5 0408 	sub.w	r4, r5, #8
 801b808:	444c      	add	r4, r9
 801b80a:	1b2d      	subs	r5, r5, r4
 801b80c:	1963      	adds	r3, r4, r5
 801b80e:	42bb      	cmp	r3, r7
 801b810:	db04      	blt.n	801b81c <__s2b+0x78>
 801b812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b816:	340a      	adds	r4, #10
 801b818:	2509      	movs	r5, #9
 801b81a:	e7f6      	b.n	801b80a <__s2b+0x66>
 801b81c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b820:	4601      	mov	r1, r0
 801b822:	3b30      	subs	r3, #48	@ 0x30
 801b824:	220a      	movs	r2, #10
 801b826:	4630      	mov	r0, r6
 801b828:	f7ff ff76 	bl	801b718 <__multadd>
 801b82c:	e7ee      	b.n	801b80c <__s2b+0x68>
 801b82e:	bf00      	nop
 801b830:	0801e541 	.word	0x0801e541
 801b834:	0801e5b2 	.word	0x0801e5b2

0801b838 <__hi0bits>:
 801b838:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b83c:	4603      	mov	r3, r0
 801b83e:	bf36      	itet	cc
 801b840:	0403      	lslcc	r3, r0, #16
 801b842:	2000      	movcs	r0, #0
 801b844:	2010      	movcc	r0, #16
 801b846:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b84a:	bf3c      	itt	cc
 801b84c:	021b      	lslcc	r3, r3, #8
 801b84e:	3008      	addcc	r0, #8
 801b850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b854:	bf3c      	itt	cc
 801b856:	011b      	lslcc	r3, r3, #4
 801b858:	3004      	addcc	r0, #4
 801b85a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b85e:	bf3c      	itt	cc
 801b860:	009b      	lslcc	r3, r3, #2
 801b862:	3002      	addcc	r0, #2
 801b864:	2b00      	cmp	r3, #0
 801b866:	db05      	blt.n	801b874 <__hi0bits+0x3c>
 801b868:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b86c:	f100 0001 	add.w	r0, r0, #1
 801b870:	bf08      	it	eq
 801b872:	2020      	moveq	r0, #32
 801b874:	4770      	bx	lr

0801b876 <__lo0bits>:
 801b876:	6803      	ldr	r3, [r0, #0]
 801b878:	4602      	mov	r2, r0
 801b87a:	f013 0007 	ands.w	r0, r3, #7
 801b87e:	d00b      	beq.n	801b898 <__lo0bits+0x22>
 801b880:	07d9      	lsls	r1, r3, #31
 801b882:	d421      	bmi.n	801b8c8 <__lo0bits+0x52>
 801b884:	0798      	lsls	r0, r3, #30
 801b886:	bf49      	itett	mi
 801b888:	085b      	lsrmi	r3, r3, #1
 801b88a:	089b      	lsrpl	r3, r3, #2
 801b88c:	2001      	movmi	r0, #1
 801b88e:	6013      	strmi	r3, [r2, #0]
 801b890:	bf5c      	itt	pl
 801b892:	6013      	strpl	r3, [r2, #0]
 801b894:	2002      	movpl	r0, #2
 801b896:	4770      	bx	lr
 801b898:	b299      	uxth	r1, r3
 801b89a:	b909      	cbnz	r1, 801b8a0 <__lo0bits+0x2a>
 801b89c:	0c1b      	lsrs	r3, r3, #16
 801b89e:	2010      	movs	r0, #16
 801b8a0:	b2d9      	uxtb	r1, r3
 801b8a2:	b909      	cbnz	r1, 801b8a8 <__lo0bits+0x32>
 801b8a4:	3008      	adds	r0, #8
 801b8a6:	0a1b      	lsrs	r3, r3, #8
 801b8a8:	0719      	lsls	r1, r3, #28
 801b8aa:	bf04      	itt	eq
 801b8ac:	091b      	lsreq	r3, r3, #4
 801b8ae:	3004      	addeq	r0, #4
 801b8b0:	0799      	lsls	r1, r3, #30
 801b8b2:	bf04      	itt	eq
 801b8b4:	089b      	lsreq	r3, r3, #2
 801b8b6:	3002      	addeq	r0, #2
 801b8b8:	07d9      	lsls	r1, r3, #31
 801b8ba:	d403      	bmi.n	801b8c4 <__lo0bits+0x4e>
 801b8bc:	085b      	lsrs	r3, r3, #1
 801b8be:	f100 0001 	add.w	r0, r0, #1
 801b8c2:	d003      	beq.n	801b8cc <__lo0bits+0x56>
 801b8c4:	6013      	str	r3, [r2, #0]
 801b8c6:	4770      	bx	lr
 801b8c8:	2000      	movs	r0, #0
 801b8ca:	4770      	bx	lr
 801b8cc:	2020      	movs	r0, #32
 801b8ce:	4770      	bx	lr

0801b8d0 <__i2b>:
 801b8d0:	b510      	push	{r4, lr}
 801b8d2:	460c      	mov	r4, r1
 801b8d4:	2101      	movs	r1, #1
 801b8d6:	f7ff febd 	bl	801b654 <_Balloc>
 801b8da:	4602      	mov	r2, r0
 801b8dc:	b928      	cbnz	r0, 801b8ea <__i2b+0x1a>
 801b8de:	4b05      	ldr	r3, [pc, #20]	@ (801b8f4 <__i2b+0x24>)
 801b8e0:	4805      	ldr	r0, [pc, #20]	@ (801b8f8 <__i2b+0x28>)
 801b8e2:	f240 1145 	movw	r1, #325	@ 0x145
 801b8e6:	f000 fd9f 	bl	801c428 <__assert_func>
 801b8ea:	2301      	movs	r3, #1
 801b8ec:	6144      	str	r4, [r0, #20]
 801b8ee:	6103      	str	r3, [r0, #16]
 801b8f0:	bd10      	pop	{r4, pc}
 801b8f2:	bf00      	nop
 801b8f4:	0801e541 	.word	0x0801e541
 801b8f8:	0801e5b2 	.word	0x0801e5b2

0801b8fc <__multiply>:
 801b8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b900:	4614      	mov	r4, r2
 801b902:	690a      	ldr	r2, [r1, #16]
 801b904:	6923      	ldr	r3, [r4, #16]
 801b906:	429a      	cmp	r2, r3
 801b908:	bfa8      	it	ge
 801b90a:	4623      	movge	r3, r4
 801b90c:	460f      	mov	r7, r1
 801b90e:	bfa4      	itt	ge
 801b910:	460c      	movge	r4, r1
 801b912:	461f      	movge	r7, r3
 801b914:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b918:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b91c:	68a3      	ldr	r3, [r4, #8]
 801b91e:	6861      	ldr	r1, [r4, #4]
 801b920:	eb0a 0609 	add.w	r6, sl, r9
 801b924:	42b3      	cmp	r3, r6
 801b926:	b085      	sub	sp, #20
 801b928:	bfb8      	it	lt
 801b92a:	3101      	addlt	r1, #1
 801b92c:	f7ff fe92 	bl	801b654 <_Balloc>
 801b930:	b930      	cbnz	r0, 801b940 <__multiply+0x44>
 801b932:	4602      	mov	r2, r0
 801b934:	4b44      	ldr	r3, [pc, #272]	@ (801ba48 <__multiply+0x14c>)
 801b936:	4845      	ldr	r0, [pc, #276]	@ (801ba4c <__multiply+0x150>)
 801b938:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b93c:	f000 fd74 	bl	801c428 <__assert_func>
 801b940:	f100 0514 	add.w	r5, r0, #20
 801b944:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b948:	462b      	mov	r3, r5
 801b94a:	2200      	movs	r2, #0
 801b94c:	4543      	cmp	r3, r8
 801b94e:	d321      	bcc.n	801b994 <__multiply+0x98>
 801b950:	f107 0114 	add.w	r1, r7, #20
 801b954:	f104 0214 	add.w	r2, r4, #20
 801b958:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801b95c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801b960:	9302      	str	r3, [sp, #8]
 801b962:	1b13      	subs	r3, r2, r4
 801b964:	3b15      	subs	r3, #21
 801b966:	f023 0303 	bic.w	r3, r3, #3
 801b96a:	3304      	adds	r3, #4
 801b96c:	f104 0715 	add.w	r7, r4, #21
 801b970:	42ba      	cmp	r2, r7
 801b972:	bf38      	it	cc
 801b974:	2304      	movcc	r3, #4
 801b976:	9301      	str	r3, [sp, #4]
 801b978:	9b02      	ldr	r3, [sp, #8]
 801b97a:	9103      	str	r1, [sp, #12]
 801b97c:	428b      	cmp	r3, r1
 801b97e:	d80c      	bhi.n	801b99a <__multiply+0x9e>
 801b980:	2e00      	cmp	r6, #0
 801b982:	dd03      	ble.n	801b98c <__multiply+0x90>
 801b984:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d05b      	beq.n	801ba44 <__multiply+0x148>
 801b98c:	6106      	str	r6, [r0, #16]
 801b98e:	b005      	add	sp, #20
 801b990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b994:	f843 2b04 	str.w	r2, [r3], #4
 801b998:	e7d8      	b.n	801b94c <__multiply+0x50>
 801b99a:	f8b1 a000 	ldrh.w	sl, [r1]
 801b99e:	f1ba 0f00 	cmp.w	sl, #0
 801b9a2:	d024      	beq.n	801b9ee <__multiply+0xf2>
 801b9a4:	f104 0e14 	add.w	lr, r4, #20
 801b9a8:	46a9      	mov	r9, r5
 801b9aa:	f04f 0c00 	mov.w	ip, #0
 801b9ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b9b2:	f8d9 3000 	ldr.w	r3, [r9]
 801b9b6:	fa1f fb87 	uxth.w	fp, r7
 801b9ba:	b29b      	uxth	r3, r3
 801b9bc:	fb0a 330b 	mla	r3, sl, fp, r3
 801b9c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801b9c4:	f8d9 7000 	ldr.w	r7, [r9]
 801b9c8:	4463      	add	r3, ip
 801b9ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b9ce:	fb0a c70b 	mla	r7, sl, fp, ip
 801b9d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801b9d6:	b29b      	uxth	r3, r3
 801b9d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b9dc:	4572      	cmp	r2, lr
 801b9de:	f849 3b04 	str.w	r3, [r9], #4
 801b9e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b9e6:	d8e2      	bhi.n	801b9ae <__multiply+0xb2>
 801b9e8:	9b01      	ldr	r3, [sp, #4]
 801b9ea:	f845 c003 	str.w	ip, [r5, r3]
 801b9ee:	9b03      	ldr	r3, [sp, #12]
 801b9f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b9f4:	3104      	adds	r1, #4
 801b9f6:	f1b9 0f00 	cmp.w	r9, #0
 801b9fa:	d021      	beq.n	801ba40 <__multiply+0x144>
 801b9fc:	682b      	ldr	r3, [r5, #0]
 801b9fe:	f104 0c14 	add.w	ip, r4, #20
 801ba02:	46ae      	mov	lr, r5
 801ba04:	f04f 0a00 	mov.w	sl, #0
 801ba08:	f8bc b000 	ldrh.w	fp, [ip]
 801ba0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801ba10:	fb09 770b 	mla	r7, r9, fp, r7
 801ba14:	4457      	add	r7, sl
 801ba16:	b29b      	uxth	r3, r3
 801ba18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ba1c:	f84e 3b04 	str.w	r3, [lr], #4
 801ba20:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ba24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ba28:	f8be 3000 	ldrh.w	r3, [lr]
 801ba2c:	fb09 330a 	mla	r3, r9, sl, r3
 801ba30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801ba34:	4562      	cmp	r2, ip
 801ba36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ba3a:	d8e5      	bhi.n	801ba08 <__multiply+0x10c>
 801ba3c:	9f01      	ldr	r7, [sp, #4]
 801ba3e:	51eb      	str	r3, [r5, r7]
 801ba40:	3504      	adds	r5, #4
 801ba42:	e799      	b.n	801b978 <__multiply+0x7c>
 801ba44:	3e01      	subs	r6, #1
 801ba46:	e79b      	b.n	801b980 <__multiply+0x84>
 801ba48:	0801e541 	.word	0x0801e541
 801ba4c:	0801e5b2 	.word	0x0801e5b2

0801ba50 <__pow5mult>:
 801ba50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba54:	4615      	mov	r5, r2
 801ba56:	f012 0203 	ands.w	r2, r2, #3
 801ba5a:	4607      	mov	r7, r0
 801ba5c:	460e      	mov	r6, r1
 801ba5e:	d007      	beq.n	801ba70 <__pow5mult+0x20>
 801ba60:	4c25      	ldr	r4, [pc, #148]	@ (801baf8 <__pow5mult+0xa8>)
 801ba62:	3a01      	subs	r2, #1
 801ba64:	2300      	movs	r3, #0
 801ba66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ba6a:	f7ff fe55 	bl	801b718 <__multadd>
 801ba6e:	4606      	mov	r6, r0
 801ba70:	10ad      	asrs	r5, r5, #2
 801ba72:	d03d      	beq.n	801baf0 <__pow5mult+0xa0>
 801ba74:	69fc      	ldr	r4, [r7, #28]
 801ba76:	b97c      	cbnz	r4, 801ba98 <__pow5mult+0x48>
 801ba78:	2010      	movs	r0, #16
 801ba7a:	f7ff fd23 	bl	801b4c4 <malloc>
 801ba7e:	4602      	mov	r2, r0
 801ba80:	61f8      	str	r0, [r7, #28]
 801ba82:	b928      	cbnz	r0, 801ba90 <__pow5mult+0x40>
 801ba84:	4b1d      	ldr	r3, [pc, #116]	@ (801bafc <__pow5mult+0xac>)
 801ba86:	481e      	ldr	r0, [pc, #120]	@ (801bb00 <__pow5mult+0xb0>)
 801ba88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801ba8c:	f000 fccc 	bl	801c428 <__assert_func>
 801ba90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ba94:	6004      	str	r4, [r0, #0]
 801ba96:	60c4      	str	r4, [r0, #12]
 801ba98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801ba9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801baa0:	b94c      	cbnz	r4, 801bab6 <__pow5mult+0x66>
 801baa2:	f240 2171 	movw	r1, #625	@ 0x271
 801baa6:	4638      	mov	r0, r7
 801baa8:	f7ff ff12 	bl	801b8d0 <__i2b>
 801baac:	2300      	movs	r3, #0
 801baae:	f8c8 0008 	str.w	r0, [r8, #8]
 801bab2:	4604      	mov	r4, r0
 801bab4:	6003      	str	r3, [r0, #0]
 801bab6:	f04f 0900 	mov.w	r9, #0
 801baba:	07eb      	lsls	r3, r5, #31
 801babc:	d50a      	bpl.n	801bad4 <__pow5mult+0x84>
 801babe:	4631      	mov	r1, r6
 801bac0:	4622      	mov	r2, r4
 801bac2:	4638      	mov	r0, r7
 801bac4:	f7ff ff1a 	bl	801b8fc <__multiply>
 801bac8:	4631      	mov	r1, r6
 801baca:	4680      	mov	r8, r0
 801bacc:	4638      	mov	r0, r7
 801bace:	f7ff fe01 	bl	801b6d4 <_Bfree>
 801bad2:	4646      	mov	r6, r8
 801bad4:	106d      	asrs	r5, r5, #1
 801bad6:	d00b      	beq.n	801baf0 <__pow5mult+0xa0>
 801bad8:	6820      	ldr	r0, [r4, #0]
 801bada:	b938      	cbnz	r0, 801baec <__pow5mult+0x9c>
 801badc:	4622      	mov	r2, r4
 801bade:	4621      	mov	r1, r4
 801bae0:	4638      	mov	r0, r7
 801bae2:	f7ff ff0b 	bl	801b8fc <__multiply>
 801bae6:	6020      	str	r0, [r4, #0]
 801bae8:	f8c0 9000 	str.w	r9, [r0]
 801baec:	4604      	mov	r4, r0
 801baee:	e7e4      	b.n	801baba <__pow5mult+0x6a>
 801baf0:	4630      	mov	r0, r6
 801baf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801baf6:	bf00      	nop
 801baf8:	0801e60c 	.word	0x0801e60c
 801bafc:	0801e4d2 	.word	0x0801e4d2
 801bb00:	0801e5b2 	.word	0x0801e5b2

0801bb04 <__lshift>:
 801bb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb08:	460c      	mov	r4, r1
 801bb0a:	6849      	ldr	r1, [r1, #4]
 801bb0c:	6923      	ldr	r3, [r4, #16]
 801bb0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bb12:	68a3      	ldr	r3, [r4, #8]
 801bb14:	4607      	mov	r7, r0
 801bb16:	4691      	mov	r9, r2
 801bb18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bb1c:	f108 0601 	add.w	r6, r8, #1
 801bb20:	42b3      	cmp	r3, r6
 801bb22:	db0b      	blt.n	801bb3c <__lshift+0x38>
 801bb24:	4638      	mov	r0, r7
 801bb26:	f7ff fd95 	bl	801b654 <_Balloc>
 801bb2a:	4605      	mov	r5, r0
 801bb2c:	b948      	cbnz	r0, 801bb42 <__lshift+0x3e>
 801bb2e:	4602      	mov	r2, r0
 801bb30:	4b28      	ldr	r3, [pc, #160]	@ (801bbd4 <__lshift+0xd0>)
 801bb32:	4829      	ldr	r0, [pc, #164]	@ (801bbd8 <__lshift+0xd4>)
 801bb34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801bb38:	f000 fc76 	bl	801c428 <__assert_func>
 801bb3c:	3101      	adds	r1, #1
 801bb3e:	005b      	lsls	r3, r3, #1
 801bb40:	e7ee      	b.n	801bb20 <__lshift+0x1c>
 801bb42:	2300      	movs	r3, #0
 801bb44:	f100 0114 	add.w	r1, r0, #20
 801bb48:	f100 0210 	add.w	r2, r0, #16
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	4553      	cmp	r3, sl
 801bb50:	db33      	blt.n	801bbba <__lshift+0xb6>
 801bb52:	6920      	ldr	r0, [r4, #16]
 801bb54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bb58:	f104 0314 	add.w	r3, r4, #20
 801bb5c:	f019 091f 	ands.w	r9, r9, #31
 801bb60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bb64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bb68:	d02b      	beq.n	801bbc2 <__lshift+0xbe>
 801bb6a:	f1c9 0e20 	rsb	lr, r9, #32
 801bb6e:	468a      	mov	sl, r1
 801bb70:	2200      	movs	r2, #0
 801bb72:	6818      	ldr	r0, [r3, #0]
 801bb74:	fa00 f009 	lsl.w	r0, r0, r9
 801bb78:	4310      	orrs	r0, r2
 801bb7a:	f84a 0b04 	str.w	r0, [sl], #4
 801bb7e:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb82:	459c      	cmp	ip, r3
 801bb84:	fa22 f20e 	lsr.w	r2, r2, lr
 801bb88:	d8f3      	bhi.n	801bb72 <__lshift+0x6e>
 801bb8a:	ebac 0304 	sub.w	r3, ip, r4
 801bb8e:	3b15      	subs	r3, #21
 801bb90:	f023 0303 	bic.w	r3, r3, #3
 801bb94:	3304      	adds	r3, #4
 801bb96:	f104 0015 	add.w	r0, r4, #21
 801bb9a:	4584      	cmp	ip, r0
 801bb9c:	bf38      	it	cc
 801bb9e:	2304      	movcc	r3, #4
 801bba0:	50ca      	str	r2, [r1, r3]
 801bba2:	b10a      	cbz	r2, 801bba8 <__lshift+0xa4>
 801bba4:	f108 0602 	add.w	r6, r8, #2
 801bba8:	3e01      	subs	r6, #1
 801bbaa:	4638      	mov	r0, r7
 801bbac:	612e      	str	r6, [r5, #16]
 801bbae:	4621      	mov	r1, r4
 801bbb0:	f7ff fd90 	bl	801b6d4 <_Bfree>
 801bbb4:	4628      	mov	r0, r5
 801bbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbba:	f842 0f04 	str.w	r0, [r2, #4]!
 801bbbe:	3301      	adds	r3, #1
 801bbc0:	e7c5      	b.n	801bb4e <__lshift+0x4a>
 801bbc2:	3904      	subs	r1, #4
 801bbc4:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbc8:	f841 2f04 	str.w	r2, [r1, #4]!
 801bbcc:	459c      	cmp	ip, r3
 801bbce:	d8f9      	bhi.n	801bbc4 <__lshift+0xc0>
 801bbd0:	e7ea      	b.n	801bba8 <__lshift+0xa4>
 801bbd2:	bf00      	nop
 801bbd4:	0801e541 	.word	0x0801e541
 801bbd8:	0801e5b2 	.word	0x0801e5b2

0801bbdc <__mcmp>:
 801bbdc:	690a      	ldr	r2, [r1, #16]
 801bbde:	4603      	mov	r3, r0
 801bbe0:	6900      	ldr	r0, [r0, #16]
 801bbe2:	1a80      	subs	r0, r0, r2
 801bbe4:	b530      	push	{r4, r5, lr}
 801bbe6:	d10e      	bne.n	801bc06 <__mcmp+0x2a>
 801bbe8:	3314      	adds	r3, #20
 801bbea:	3114      	adds	r1, #20
 801bbec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bbf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bbf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bbf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bbfc:	4295      	cmp	r5, r2
 801bbfe:	d003      	beq.n	801bc08 <__mcmp+0x2c>
 801bc00:	d205      	bcs.n	801bc0e <__mcmp+0x32>
 801bc02:	f04f 30ff 	mov.w	r0, #4294967295
 801bc06:	bd30      	pop	{r4, r5, pc}
 801bc08:	42a3      	cmp	r3, r4
 801bc0a:	d3f3      	bcc.n	801bbf4 <__mcmp+0x18>
 801bc0c:	e7fb      	b.n	801bc06 <__mcmp+0x2a>
 801bc0e:	2001      	movs	r0, #1
 801bc10:	e7f9      	b.n	801bc06 <__mcmp+0x2a>
	...

0801bc14 <__mdiff>:
 801bc14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc18:	4689      	mov	r9, r1
 801bc1a:	4606      	mov	r6, r0
 801bc1c:	4611      	mov	r1, r2
 801bc1e:	4648      	mov	r0, r9
 801bc20:	4614      	mov	r4, r2
 801bc22:	f7ff ffdb 	bl	801bbdc <__mcmp>
 801bc26:	1e05      	subs	r5, r0, #0
 801bc28:	d112      	bne.n	801bc50 <__mdiff+0x3c>
 801bc2a:	4629      	mov	r1, r5
 801bc2c:	4630      	mov	r0, r6
 801bc2e:	f7ff fd11 	bl	801b654 <_Balloc>
 801bc32:	4602      	mov	r2, r0
 801bc34:	b928      	cbnz	r0, 801bc42 <__mdiff+0x2e>
 801bc36:	4b3f      	ldr	r3, [pc, #252]	@ (801bd34 <__mdiff+0x120>)
 801bc38:	f240 2137 	movw	r1, #567	@ 0x237
 801bc3c:	483e      	ldr	r0, [pc, #248]	@ (801bd38 <__mdiff+0x124>)
 801bc3e:	f000 fbf3 	bl	801c428 <__assert_func>
 801bc42:	2301      	movs	r3, #1
 801bc44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bc48:	4610      	mov	r0, r2
 801bc4a:	b003      	add	sp, #12
 801bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc50:	bfbc      	itt	lt
 801bc52:	464b      	movlt	r3, r9
 801bc54:	46a1      	movlt	r9, r4
 801bc56:	4630      	mov	r0, r6
 801bc58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bc5c:	bfba      	itte	lt
 801bc5e:	461c      	movlt	r4, r3
 801bc60:	2501      	movlt	r5, #1
 801bc62:	2500      	movge	r5, #0
 801bc64:	f7ff fcf6 	bl	801b654 <_Balloc>
 801bc68:	4602      	mov	r2, r0
 801bc6a:	b918      	cbnz	r0, 801bc74 <__mdiff+0x60>
 801bc6c:	4b31      	ldr	r3, [pc, #196]	@ (801bd34 <__mdiff+0x120>)
 801bc6e:	f240 2145 	movw	r1, #581	@ 0x245
 801bc72:	e7e3      	b.n	801bc3c <__mdiff+0x28>
 801bc74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bc78:	6926      	ldr	r6, [r4, #16]
 801bc7a:	60c5      	str	r5, [r0, #12]
 801bc7c:	f109 0310 	add.w	r3, r9, #16
 801bc80:	f109 0514 	add.w	r5, r9, #20
 801bc84:	f104 0e14 	add.w	lr, r4, #20
 801bc88:	f100 0b14 	add.w	fp, r0, #20
 801bc8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801bc90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801bc94:	9301      	str	r3, [sp, #4]
 801bc96:	46d9      	mov	r9, fp
 801bc98:	f04f 0c00 	mov.w	ip, #0
 801bc9c:	9b01      	ldr	r3, [sp, #4]
 801bc9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bca2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801bca6:	9301      	str	r3, [sp, #4]
 801bca8:	fa1f f38a 	uxth.w	r3, sl
 801bcac:	4619      	mov	r1, r3
 801bcae:	b283      	uxth	r3, r0
 801bcb0:	1acb      	subs	r3, r1, r3
 801bcb2:	0c00      	lsrs	r0, r0, #16
 801bcb4:	4463      	add	r3, ip
 801bcb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801bcba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801bcbe:	b29b      	uxth	r3, r3
 801bcc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801bcc4:	4576      	cmp	r6, lr
 801bcc6:	f849 3b04 	str.w	r3, [r9], #4
 801bcca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bcce:	d8e5      	bhi.n	801bc9c <__mdiff+0x88>
 801bcd0:	1b33      	subs	r3, r6, r4
 801bcd2:	3b15      	subs	r3, #21
 801bcd4:	f023 0303 	bic.w	r3, r3, #3
 801bcd8:	3415      	adds	r4, #21
 801bcda:	3304      	adds	r3, #4
 801bcdc:	42a6      	cmp	r6, r4
 801bcde:	bf38      	it	cc
 801bce0:	2304      	movcc	r3, #4
 801bce2:	441d      	add	r5, r3
 801bce4:	445b      	add	r3, fp
 801bce6:	461e      	mov	r6, r3
 801bce8:	462c      	mov	r4, r5
 801bcea:	4544      	cmp	r4, r8
 801bcec:	d30e      	bcc.n	801bd0c <__mdiff+0xf8>
 801bcee:	f108 0103 	add.w	r1, r8, #3
 801bcf2:	1b49      	subs	r1, r1, r5
 801bcf4:	f021 0103 	bic.w	r1, r1, #3
 801bcf8:	3d03      	subs	r5, #3
 801bcfa:	45a8      	cmp	r8, r5
 801bcfc:	bf38      	it	cc
 801bcfe:	2100      	movcc	r1, #0
 801bd00:	440b      	add	r3, r1
 801bd02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bd06:	b191      	cbz	r1, 801bd2e <__mdiff+0x11a>
 801bd08:	6117      	str	r7, [r2, #16]
 801bd0a:	e79d      	b.n	801bc48 <__mdiff+0x34>
 801bd0c:	f854 1b04 	ldr.w	r1, [r4], #4
 801bd10:	46e6      	mov	lr, ip
 801bd12:	0c08      	lsrs	r0, r1, #16
 801bd14:	fa1c fc81 	uxtah	ip, ip, r1
 801bd18:	4471      	add	r1, lr
 801bd1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801bd1e:	b289      	uxth	r1, r1
 801bd20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bd24:	f846 1b04 	str.w	r1, [r6], #4
 801bd28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bd2c:	e7dd      	b.n	801bcea <__mdiff+0xd6>
 801bd2e:	3f01      	subs	r7, #1
 801bd30:	e7e7      	b.n	801bd02 <__mdiff+0xee>
 801bd32:	bf00      	nop
 801bd34:	0801e541 	.word	0x0801e541
 801bd38:	0801e5b2 	.word	0x0801e5b2

0801bd3c <__ulp>:
 801bd3c:	b082      	sub	sp, #8
 801bd3e:	ed8d 0b00 	vstr	d0, [sp]
 801bd42:	9a01      	ldr	r2, [sp, #4]
 801bd44:	4b0f      	ldr	r3, [pc, #60]	@ (801bd84 <__ulp+0x48>)
 801bd46:	4013      	ands	r3, r2
 801bd48:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	dc08      	bgt.n	801bd62 <__ulp+0x26>
 801bd50:	425b      	negs	r3, r3
 801bd52:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801bd56:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bd5a:	da04      	bge.n	801bd66 <__ulp+0x2a>
 801bd5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801bd60:	4113      	asrs	r3, r2
 801bd62:	2200      	movs	r2, #0
 801bd64:	e008      	b.n	801bd78 <__ulp+0x3c>
 801bd66:	f1a2 0314 	sub.w	r3, r2, #20
 801bd6a:	2b1e      	cmp	r3, #30
 801bd6c:	bfda      	itte	le
 801bd6e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801bd72:	40da      	lsrle	r2, r3
 801bd74:	2201      	movgt	r2, #1
 801bd76:	2300      	movs	r3, #0
 801bd78:	4619      	mov	r1, r3
 801bd7a:	4610      	mov	r0, r2
 801bd7c:	ec41 0b10 	vmov	d0, r0, r1
 801bd80:	b002      	add	sp, #8
 801bd82:	4770      	bx	lr
 801bd84:	7ff00000 	.word	0x7ff00000

0801bd88 <__b2d>:
 801bd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd8c:	6906      	ldr	r6, [r0, #16]
 801bd8e:	f100 0814 	add.w	r8, r0, #20
 801bd92:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801bd96:	1f37      	subs	r7, r6, #4
 801bd98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801bd9c:	4610      	mov	r0, r2
 801bd9e:	f7ff fd4b 	bl	801b838 <__hi0bits>
 801bda2:	f1c0 0320 	rsb	r3, r0, #32
 801bda6:	280a      	cmp	r0, #10
 801bda8:	600b      	str	r3, [r1, #0]
 801bdaa:	491b      	ldr	r1, [pc, #108]	@ (801be18 <__b2d+0x90>)
 801bdac:	dc15      	bgt.n	801bdda <__b2d+0x52>
 801bdae:	f1c0 0c0b 	rsb	ip, r0, #11
 801bdb2:	fa22 f30c 	lsr.w	r3, r2, ip
 801bdb6:	45b8      	cmp	r8, r7
 801bdb8:	ea43 0501 	orr.w	r5, r3, r1
 801bdbc:	bf34      	ite	cc
 801bdbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bdc2:	2300      	movcs	r3, #0
 801bdc4:	3015      	adds	r0, #21
 801bdc6:	fa02 f000 	lsl.w	r0, r2, r0
 801bdca:	fa23 f30c 	lsr.w	r3, r3, ip
 801bdce:	4303      	orrs	r3, r0
 801bdd0:	461c      	mov	r4, r3
 801bdd2:	ec45 4b10 	vmov	d0, r4, r5
 801bdd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bdda:	45b8      	cmp	r8, r7
 801bddc:	bf3a      	itte	cc
 801bdde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bde2:	f1a6 0708 	subcc.w	r7, r6, #8
 801bde6:	2300      	movcs	r3, #0
 801bde8:	380b      	subs	r0, #11
 801bdea:	d012      	beq.n	801be12 <__b2d+0x8a>
 801bdec:	f1c0 0120 	rsb	r1, r0, #32
 801bdf0:	fa23 f401 	lsr.w	r4, r3, r1
 801bdf4:	4082      	lsls	r2, r0
 801bdf6:	4322      	orrs	r2, r4
 801bdf8:	4547      	cmp	r7, r8
 801bdfa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801bdfe:	bf8c      	ite	hi
 801be00:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801be04:	2200      	movls	r2, #0
 801be06:	4083      	lsls	r3, r0
 801be08:	40ca      	lsrs	r2, r1
 801be0a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801be0e:	4313      	orrs	r3, r2
 801be10:	e7de      	b.n	801bdd0 <__b2d+0x48>
 801be12:	ea42 0501 	orr.w	r5, r2, r1
 801be16:	e7db      	b.n	801bdd0 <__b2d+0x48>
 801be18:	3ff00000 	.word	0x3ff00000

0801be1c <__d2b>:
 801be1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801be20:	460f      	mov	r7, r1
 801be22:	2101      	movs	r1, #1
 801be24:	ec59 8b10 	vmov	r8, r9, d0
 801be28:	4616      	mov	r6, r2
 801be2a:	f7ff fc13 	bl	801b654 <_Balloc>
 801be2e:	4604      	mov	r4, r0
 801be30:	b930      	cbnz	r0, 801be40 <__d2b+0x24>
 801be32:	4602      	mov	r2, r0
 801be34:	4b23      	ldr	r3, [pc, #140]	@ (801bec4 <__d2b+0xa8>)
 801be36:	4824      	ldr	r0, [pc, #144]	@ (801bec8 <__d2b+0xac>)
 801be38:	f240 310f 	movw	r1, #783	@ 0x30f
 801be3c:	f000 faf4 	bl	801c428 <__assert_func>
 801be40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801be44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801be48:	b10d      	cbz	r5, 801be4e <__d2b+0x32>
 801be4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801be4e:	9301      	str	r3, [sp, #4]
 801be50:	f1b8 0300 	subs.w	r3, r8, #0
 801be54:	d023      	beq.n	801be9e <__d2b+0x82>
 801be56:	4668      	mov	r0, sp
 801be58:	9300      	str	r3, [sp, #0]
 801be5a:	f7ff fd0c 	bl	801b876 <__lo0bits>
 801be5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801be62:	b1d0      	cbz	r0, 801be9a <__d2b+0x7e>
 801be64:	f1c0 0320 	rsb	r3, r0, #32
 801be68:	fa02 f303 	lsl.w	r3, r2, r3
 801be6c:	430b      	orrs	r3, r1
 801be6e:	40c2      	lsrs	r2, r0
 801be70:	6163      	str	r3, [r4, #20]
 801be72:	9201      	str	r2, [sp, #4]
 801be74:	9b01      	ldr	r3, [sp, #4]
 801be76:	61a3      	str	r3, [r4, #24]
 801be78:	2b00      	cmp	r3, #0
 801be7a:	bf0c      	ite	eq
 801be7c:	2201      	moveq	r2, #1
 801be7e:	2202      	movne	r2, #2
 801be80:	6122      	str	r2, [r4, #16]
 801be82:	b1a5      	cbz	r5, 801beae <__d2b+0x92>
 801be84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801be88:	4405      	add	r5, r0
 801be8a:	603d      	str	r5, [r7, #0]
 801be8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801be90:	6030      	str	r0, [r6, #0]
 801be92:	4620      	mov	r0, r4
 801be94:	b003      	add	sp, #12
 801be96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be9a:	6161      	str	r1, [r4, #20]
 801be9c:	e7ea      	b.n	801be74 <__d2b+0x58>
 801be9e:	a801      	add	r0, sp, #4
 801bea0:	f7ff fce9 	bl	801b876 <__lo0bits>
 801bea4:	9b01      	ldr	r3, [sp, #4]
 801bea6:	6163      	str	r3, [r4, #20]
 801bea8:	3020      	adds	r0, #32
 801beaa:	2201      	movs	r2, #1
 801beac:	e7e8      	b.n	801be80 <__d2b+0x64>
 801beae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801beb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801beb6:	6038      	str	r0, [r7, #0]
 801beb8:	6918      	ldr	r0, [r3, #16]
 801beba:	f7ff fcbd 	bl	801b838 <__hi0bits>
 801bebe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bec2:	e7e5      	b.n	801be90 <__d2b+0x74>
 801bec4:	0801e541 	.word	0x0801e541
 801bec8:	0801e5b2 	.word	0x0801e5b2

0801becc <__ratio>:
 801becc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bed0:	4688      	mov	r8, r1
 801bed2:	4669      	mov	r1, sp
 801bed4:	4681      	mov	r9, r0
 801bed6:	f7ff ff57 	bl	801bd88 <__b2d>
 801beda:	a901      	add	r1, sp, #4
 801bedc:	4640      	mov	r0, r8
 801bede:	ec55 4b10 	vmov	r4, r5, d0
 801bee2:	f7ff ff51 	bl	801bd88 <__b2d>
 801bee6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801beea:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801beee:	1ad2      	subs	r2, r2, r3
 801bef0:	e9dd 3100 	ldrd	r3, r1, [sp]
 801bef4:	1a5b      	subs	r3, r3, r1
 801bef6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801befa:	ec57 6b10 	vmov	r6, r7, d0
 801befe:	2b00      	cmp	r3, #0
 801bf00:	bfd6      	itet	le
 801bf02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bf06:	462a      	movgt	r2, r5
 801bf08:	463a      	movle	r2, r7
 801bf0a:	46ab      	mov	fp, r5
 801bf0c:	46a2      	mov	sl, r4
 801bf0e:	bfce      	itee	gt
 801bf10:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801bf14:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801bf18:	ee00 3a90 	vmovle	s1, r3
 801bf1c:	ec4b ab17 	vmov	d7, sl, fp
 801bf20:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801bf24:	b003      	add	sp, #12
 801bf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf2a <__copybits>:
 801bf2a:	3901      	subs	r1, #1
 801bf2c:	b570      	push	{r4, r5, r6, lr}
 801bf2e:	1149      	asrs	r1, r1, #5
 801bf30:	6914      	ldr	r4, [r2, #16]
 801bf32:	3101      	adds	r1, #1
 801bf34:	f102 0314 	add.w	r3, r2, #20
 801bf38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bf3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bf40:	1f05      	subs	r5, r0, #4
 801bf42:	42a3      	cmp	r3, r4
 801bf44:	d30c      	bcc.n	801bf60 <__copybits+0x36>
 801bf46:	1aa3      	subs	r3, r4, r2
 801bf48:	3b11      	subs	r3, #17
 801bf4a:	f023 0303 	bic.w	r3, r3, #3
 801bf4e:	3211      	adds	r2, #17
 801bf50:	42a2      	cmp	r2, r4
 801bf52:	bf88      	it	hi
 801bf54:	2300      	movhi	r3, #0
 801bf56:	4418      	add	r0, r3
 801bf58:	2300      	movs	r3, #0
 801bf5a:	4288      	cmp	r0, r1
 801bf5c:	d305      	bcc.n	801bf6a <__copybits+0x40>
 801bf5e:	bd70      	pop	{r4, r5, r6, pc}
 801bf60:	f853 6b04 	ldr.w	r6, [r3], #4
 801bf64:	f845 6f04 	str.w	r6, [r5, #4]!
 801bf68:	e7eb      	b.n	801bf42 <__copybits+0x18>
 801bf6a:	f840 3b04 	str.w	r3, [r0], #4
 801bf6e:	e7f4      	b.n	801bf5a <__copybits+0x30>

0801bf70 <__any_on>:
 801bf70:	f100 0214 	add.w	r2, r0, #20
 801bf74:	6900      	ldr	r0, [r0, #16]
 801bf76:	114b      	asrs	r3, r1, #5
 801bf78:	4298      	cmp	r0, r3
 801bf7a:	b510      	push	{r4, lr}
 801bf7c:	db11      	blt.n	801bfa2 <__any_on+0x32>
 801bf7e:	dd0a      	ble.n	801bf96 <__any_on+0x26>
 801bf80:	f011 011f 	ands.w	r1, r1, #31
 801bf84:	d007      	beq.n	801bf96 <__any_on+0x26>
 801bf86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bf8a:	fa24 f001 	lsr.w	r0, r4, r1
 801bf8e:	fa00 f101 	lsl.w	r1, r0, r1
 801bf92:	428c      	cmp	r4, r1
 801bf94:	d10b      	bne.n	801bfae <__any_on+0x3e>
 801bf96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bf9a:	4293      	cmp	r3, r2
 801bf9c:	d803      	bhi.n	801bfa6 <__any_on+0x36>
 801bf9e:	2000      	movs	r0, #0
 801bfa0:	bd10      	pop	{r4, pc}
 801bfa2:	4603      	mov	r3, r0
 801bfa4:	e7f7      	b.n	801bf96 <__any_on+0x26>
 801bfa6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bfaa:	2900      	cmp	r1, #0
 801bfac:	d0f5      	beq.n	801bf9a <__any_on+0x2a>
 801bfae:	2001      	movs	r0, #1
 801bfb0:	e7f6      	b.n	801bfa0 <__any_on+0x30>

0801bfb2 <__ascii_wctomb>:
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	4608      	mov	r0, r1
 801bfb6:	b141      	cbz	r1, 801bfca <__ascii_wctomb+0x18>
 801bfb8:	2aff      	cmp	r2, #255	@ 0xff
 801bfba:	d904      	bls.n	801bfc6 <__ascii_wctomb+0x14>
 801bfbc:	228a      	movs	r2, #138	@ 0x8a
 801bfbe:	601a      	str	r2, [r3, #0]
 801bfc0:	f04f 30ff 	mov.w	r0, #4294967295
 801bfc4:	4770      	bx	lr
 801bfc6:	700a      	strb	r2, [r1, #0]
 801bfc8:	2001      	movs	r0, #1
 801bfca:	4770      	bx	lr

0801bfcc <__ssputs_r>:
 801bfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bfd0:	688e      	ldr	r6, [r1, #8]
 801bfd2:	461f      	mov	r7, r3
 801bfd4:	42be      	cmp	r6, r7
 801bfd6:	680b      	ldr	r3, [r1, #0]
 801bfd8:	4682      	mov	sl, r0
 801bfda:	460c      	mov	r4, r1
 801bfdc:	4690      	mov	r8, r2
 801bfde:	d82d      	bhi.n	801c03c <__ssputs_r+0x70>
 801bfe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bfe4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801bfe8:	d026      	beq.n	801c038 <__ssputs_r+0x6c>
 801bfea:	6965      	ldr	r5, [r4, #20]
 801bfec:	6909      	ldr	r1, [r1, #16]
 801bfee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bff2:	eba3 0901 	sub.w	r9, r3, r1
 801bff6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bffa:	1c7b      	adds	r3, r7, #1
 801bffc:	444b      	add	r3, r9
 801bffe:	106d      	asrs	r5, r5, #1
 801c000:	429d      	cmp	r5, r3
 801c002:	bf38      	it	cc
 801c004:	461d      	movcc	r5, r3
 801c006:	0553      	lsls	r3, r2, #21
 801c008:	d527      	bpl.n	801c05a <__ssputs_r+0x8e>
 801c00a:	4629      	mov	r1, r5
 801c00c:	f7ff fa84 	bl	801b518 <_malloc_r>
 801c010:	4606      	mov	r6, r0
 801c012:	b360      	cbz	r0, 801c06e <__ssputs_r+0xa2>
 801c014:	6921      	ldr	r1, [r4, #16]
 801c016:	464a      	mov	r2, r9
 801c018:	f7fe f8d9 	bl	801a1ce <memcpy>
 801c01c:	89a3      	ldrh	r3, [r4, #12]
 801c01e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c026:	81a3      	strh	r3, [r4, #12]
 801c028:	6126      	str	r6, [r4, #16]
 801c02a:	6165      	str	r5, [r4, #20]
 801c02c:	444e      	add	r6, r9
 801c02e:	eba5 0509 	sub.w	r5, r5, r9
 801c032:	6026      	str	r6, [r4, #0]
 801c034:	60a5      	str	r5, [r4, #8]
 801c036:	463e      	mov	r6, r7
 801c038:	42be      	cmp	r6, r7
 801c03a:	d900      	bls.n	801c03e <__ssputs_r+0x72>
 801c03c:	463e      	mov	r6, r7
 801c03e:	6820      	ldr	r0, [r4, #0]
 801c040:	4632      	mov	r2, r6
 801c042:	4641      	mov	r1, r8
 801c044:	f000 f9c6 	bl	801c3d4 <memmove>
 801c048:	68a3      	ldr	r3, [r4, #8]
 801c04a:	1b9b      	subs	r3, r3, r6
 801c04c:	60a3      	str	r3, [r4, #8]
 801c04e:	6823      	ldr	r3, [r4, #0]
 801c050:	4433      	add	r3, r6
 801c052:	6023      	str	r3, [r4, #0]
 801c054:	2000      	movs	r0, #0
 801c056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c05a:	462a      	mov	r2, r5
 801c05c:	f000 fa16 	bl	801c48c <_realloc_r>
 801c060:	4606      	mov	r6, r0
 801c062:	2800      	cmp	r0, #0
 801c064:	d1e0      	bne.n	801c028 <__ssputs_r+0x5c>
 801c066:	6921      	ldr	r1, [r4, #16]
 801c068:	4650      	mov	r0, sl
 801c06a:	f7fe fea7 	bl	801adbc <_free_r>
 801c06e:	230c      	movs	r3, #12
 801c070:	f8ca 3000 	str.w	r3, [sl]
 801c074:	89a3      	ldrh	r3, [r4, #12]
 801c076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c07a:	81a3      	strh	r3, [r4, #12]
 801c07c:	f04f 30ff 	mov.w	r0, #4294967295
 801c080:	e7e9      	b.n	801c056 <__ssputs_r+0x8a>
	...

0801c084 <_svfiprintf_r>:
 801c084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c088:	4698      	mov	r8, r3
 801c08a:	898b      	ldrh	r3, [r1, #12]
 801c08c:	061b      	lsls	r3, r3, #24
 801c08e:	b09d      	sub	sp, #116	@ 0x74
 801c090:	4607      	mov	r7, r0
 801c092:	460d      	mov	r5, r1
 801c094:	4614      	mov	r4, r2
 801c096:	d510      	bpl.n	801c0ba <_svfiprintf_r+0x36>
 801c098:	690b      	ldr	r3, [r1, #16]
 801c09a:	b973      	cbnz	r3, 801c0ba <_svfiprintf_r+0x36>
 801c09c:	2140      	movs	r1, #64	@ 0x40
 801c09e:	f7ff fa3b 	bl	801b518 <_malloc_r>
 801c0a2:	6028      	str	r0, [r5, #0]
 801c0a4:	6128      	str	r0, [r5, #16]
 801c0a6:	b930      	cbnz	r0, 801c0b6 <_svfiprintf_r+0x32>
 801c0a8:	230c      	movs	r3, #12
 801c0aa:	603b      	str	r3, [r7, #0]
 801c0ac:	f04f 30ff 	mov.w	r0, #4294967295
 801c0b0:	b01d      	add	sp, #116	@ 0x74
 801c0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0b6:	2340      	movs	r3, #64	@ 0x40
 801c0b8:	616b      	str	r3, [r5, #20]
 801c0ba:	2300      	movs	r3, #0
 801c0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 801c0be:	2320      	movs	r3, #32
 801c0c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c0c4:	f8cd 800c 	str.w	r8, [sp, #12]
 801c0c8:	2330      	movs	r3, #48	@ 0x30
 801c0ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c268 <_svfiprintf_r+0x1e4>
 801c0ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c0d2:	f04f 0901 	mov.w	r9, #1
 801c0d6:	4623      	mov	r3, r4
 801c0d8:	469a      	mov	sl, r3
 801c0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c0de:	b10a      	cbz	r2, 801c0e4 <_svfiprintf_r+0x60>
 801c0e0:	2a25      	cmp	r2, #37	@ 0x25
 801c0e2:	d1f9      	bne.n	801c0d8 <_svfiprintf_r+0x54>
 801c0e4:	ebba 0b04 	subs.w	fp, sl, r4
 801c0e8:	d00b      	beq.n	801c102 <_svfiprintf_r+0x7e>
 801c0ea:	465b      	mov	r3, fp
 801c0ec:	4622      	mov	r2, r4
 801c0ee:	4629      	mov	r1, r5
 801c0f0:	4638      	mov	r0, r7
 801c0f2:	f7ff ff6b 	bl	801bfcc <__ssputs_r>
 801c0f6:	3001      	adds	r0, #1
 801c0f8:	f000 80a7 	beq.w	801c24a <_svfiprintf_r+0x1c6>
 801c0fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c0fe:	445a      	add	r2, fp
 801c100:	9209      	str	r2, [sp, #36]	@ 0x24
 801c102:	f89a 3000 	ldrb.w	r3, [sl]
 801c106:	2b00      	cmp	r3, #0
 801c108:	f000 809f 	beq.w	801c24a <_svfiprintf_r+0x1c6>
 801c10c:	2300      	movs	r3, #0
 801c10e:	f04f 32ff 	mov.w	r2, #4294967295
 801c112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c116:	f10a 0a01 	add.w	sl, sl, #1
 801c11a:	9304      	str	r3, [sp, #16]
 801c11c:	9307      	str	r3, [sp, #28]
 801c11e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c122:	931a      	str	r3, [sp, #104]	@ 0x68
 801c124:	4654      	mov	r4, sl
 801c126:	2205      	movs	r2, #5
 801c128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c12c:	484e      	ldr	r0, [pc, #312]	@ (801c268 <_svfiprintf_r+0x1e4>)
 801c12e:	f7e4 f8ff 	bl	8000330 <memchr>
 801c132:	9a04      	ldr	r2, [sp, #16]
 801c134:	b9d8      	cbnz	r0, 801c16e <_svfiprintf_r+0xea>
 801c136:	06d0      	lsls	r0, r2, #27
 801c138:	bf44      	itt	mi
 801c13a:	2320      	movmi	r3, #32
 801c13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c140:	0711      	lsls	r1, r2, #28
 801c142:	bf44      	itt	mi
 801c144:	232b      	movmi	r3, #43	@ 0x2b
 801c146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c14a:	f89a 3000 	ldrb.w	r3, [sl]
 801c14e:	2b2a      	cmp	r3, #42	@ 0x2a
 801c150:	d015      	beq.n	801c17e <_svfiprintf_r+0xfa>
 801c152:	9a07      	ldr	r2, [sp, #28]
 801c154:	4654      	mov	r4, sl
 801c156:	2000      	movs	r0, #0
 801c158:	f04f 0c0a 	mov.w	ip, #10
 801c15c:	4621      	mov	r1, r4
 801c15e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c162:	3b30      	subs	r3, #48	@ 0x30
 801c164:	2b09      	cmp	r3, #9
 801c166:	d94b      	bls.n	801c200 <_svfiprintf_r+0x17c>
 801c168:	b1b0      	cbz	r0, 801c198 <_svfiprintf_r+0x114>
 801c16a:	9207      	str	r2, [sp, #28]
 801c16c:	e014      	b.n	801c198 <_svfiprintf_r+0x114>
 801c16e:	eba0 0308 	sub.w	r3, r0, r8
 801c172:	fa09 f303 	lsl.w	r3, r9, r3
 801c176:	4313      	orrs	r3, r2
 801c178:	9304      	str	r3, [sp, #16]
 801c17a:	46a2      	mov	sl, r4
 801c17c:	e7d2      	b.n	801c124 <_svfiprintf_r+0xa0>
 801c17e:	9b03      	ldr	r3, [sp, #12]
 801c180:	1d19      	adds	r1, r3, #4
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	9103      	str	r1, [sp, #12]
 801c186:	2b00      	cmp	r3, #0
 801c188:	bfbb      	ittet	lt
 801c18a:	425b      	neglt	r3, r3
 801c18c:	f042 0202 	orrlt.w	r2, r2, #2
 801c190:	9307      	strge	r3, [sp, #28]
 801c192:	9307      	strlt	r3, [sp, #28]
 801c194:	bfb8      	it	lt
 801c196:	9204      	strlt	r2, [sp, #16]
 801c198:	7823      	ldrb	r3, [r4, #0]
 801c19a:	2b2e      	cmp	r3, #46	@ 0x2e
 801c19c:	d10a      	bne.n	801c1b4 <_svfiprintf_r+0x130>
 801c19e:	7863      	ldrb	r3, [r4, #1]
 801c1a0:	2b2a      	cmp	r3, #42	@ 0x2a
 801c1a2:	d132      	bne.n	801c20a <_svfiprintf_r+0x186>
 801c1a4:	9b03      	ldr	r3, [sp, #12]
 801c1a6:	1d1a      	adds	r2, r3, #4
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	9203      	str	r2, [sp, #12]
 801c1ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c1b0:	3402      	adds	r4, #2
 801c1b2:	9305      	str	r3, [sp, #20]
 801c1b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c278 <_svfiprintf_r+0x1f4>
 801c1b8:	7821      	ldrb	r1, [r4, #0]
 801c1ba:	2203      	movs	r2, #3
 801c1bc:	4650      	mov	r0, sl
 801c1be:	f7e4 f8b7 	bl	8000330 <memchr>
 801c1c2:	b138      	cbz	r0, 801c1d4 <_svfiprintf_r+0x150>
 801c1c4:	9b04      	ldr	r3, [sp, #16]
 801c1c6:	eba0 000a 	sub.w	r0, r0, sl
 801c1ca:	2240      	movs	r2, #64	@ 0x40
 801c1cc:	4082      	lsls	r2, r0
 801c1ce:	4313      	orrs	r3, r2
 801c1d0:	3401      	adds	r4, #1
 801c1d2:	9304      	str	r3, [sp, #16]
 801c1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1d8:	4824      	ldr	r0, [pc, #144]	@ (801c26c <_svfiprintf_r+0x1e8>)
 801c1da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c1de:	2206      	movs	r2, #6
 801c1e0:	f7e4 f8a6 	bl	8000330 <memchr>
 801c1e4:	2800      	cmp	r0, #0
 801c1e6:	d036      	beq.n	801c256 <_svfiprintf_r+0x1d2>
 801c1e8:	4b21      	ldr	r3, [pc, #132]	@ (801c270 <_svfiprintf_r+0x1ec>)
 801c1ea:	bb1b      	cbnz	r3, 801c234 <_svfiprintf_r+0x1b0>
 801c1ec:	9b03      	ldr	r3, [sp, #12]
 801c1ee:	3307      	adds	r3, #7
 801c1f0:	f023 0307 	bic.w	r3, r3, #7
 801c1f4:	3308      	adds	r3, #8
 801c1f6:	9303      	str	r3, [sp, #12]
 801c1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c1fa:	4433      	add	r3, r6
 801c1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 801c1fe:	e76a      	b.n	801c0d6 <_svfiprintf_r+0x52>
 801c200:	fb0c 3202 	mla	r2, ip, r2, r3
 801c204:	460c      	mov	r4, r1
 801c206:	2001      	movs	r0, #1
 801c208:	e7a8      	b.n	801c15c <_svfiprintf_r+0xd8>
 801c20a:	2300      	movs	r3, #0
 801c20c:	3401      	adds	r4, #1
 801c20e:	9305      	str	r3, [sp, #20]
 801c210:	4619      	mov	r1, r3
 801c212:	f04f 0c0a 	mov.w	ip, #10
 801c216:	4620      	mov	r0, r4
 801c218:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c21c:	3a30      	subs	r2, #48	@ 0x30
 801c21e:	2a09      	cmp	r2, #9
 801c220:	d903      	bls.n	801c22a <_svfiprintf_r+0x1a6>
 801c222:	2b00      	cmp	r3, #0
 801c224:	d0c6      	beq.n	801c1b4 <_svfiprintf_r+0x130>
 801c226:	9105      	str	r1, [sp, #20]
 801c228:	e7c4      	b.n	801c1b4 <_svfiprintf_r+0x130>
 801c22a:	fb0c 2101 	mla	r1, ip, r1, r2
 801c22e:	4604      	mov	r4, r0
 801c230:	2301      	movs	r3, #1
 801c232:	e7f0      	b.n	801c216 <_svfiprintf_r+0x192>
 801c234:	ab03      	add	r3, sp, #12
 801c236:	9300      	str	r3, [sp, #0]
 801c238:	462a      	mov	r2, r5
 801c23a:	4b0e      	ldr	r3, [pc, #56]	@ (801c274 <_svfiprintf_r+0x1f0>)
 801c23c:	a904      	add	r1, sp, #16
 801c23e:	4638      	mov	r0, r7
 801c240:	f7fd fa5a 	bl	80196f8 <_printf_float>
 801c244:	1c42      	adds	r2, r0, #1
 801c246:	4606      	mov	r6, r0
 801c248:	d1d6      	bne.n	801c1f8 <_svfiprintf_r+0x174>
 801c24a:	89ab      	ldrh	r3, [r5, #12]
 801c24c:	065b      	lsls	r3, r3, #25
 801c24e:	f53f af2d 	bmi.w	801c0ac <_svfiprintf_r+0x28>
 801c252:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c254:	e72c      	b.n	801c0b0 <_svfiprintf_r+0x2c>
 801c256:	ab03      	add	r3, sp, #12
 801c258:	9300      	str	r3, [sp, #0]
 801c25a:	462a      	mov	r2, r5
 801c25c:	4b05      	ldr	r3, [pc, #20]	@ (801c274 <_svfiprintf_r+0x1f0>)
 801c25e:	a904      	add	r1, sp, #16
 801c260:	4638      	mov	r0, r7
 801c262:	f7fd fcd1 	bl	8019c08 <_printf_i>
 801c266:	e7ed      	b.n	801c244 <_svfiprintf_r+0x1c0>
 801c268:	0801e708 	.word	0x0801e708
 801c26c:	0801e712 	.word	0x0801e712
 801c270:	080196f9 	.word	0x080196f9
 801c274:	0801bfcd 	.word	0x0801bfcd
 801c278:	0801e70e 	.word	0x0801e70e

0801c27c <__sflush_r>:
 801c27c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c284:	0716      	lsls	r6, r2, #28
 801c286:	4605      	mov	r5, r0
 801c288:	460c      	mov	r4, r1
 801c28a:	d454      	bmi.n	801c336 <__sflush_r+0xba>
 801c28c:	684b      	ldr	r3, [r1, #4]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	dc02      	bgt.n	801c298 <__sflush_r+0x1c>
 801c292:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c294:	2b00      	cmp	r3, #0
 801c296:	dd48      	ble.n	801c32a <__sflush_r+0xae>
 801c298:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c29a:	2e00      	cmp	r6, #0
 801c29c:	d045      	beq.n	801c32a <__sflush_r+0xae>
 801c29e:	2300      	movs	r3, #0
 801c2a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c2a4:	682f      	ldr	r7, [r5, #0]
 801c2a6:	6a21      	ldr	r1, [r4, #32]
 801c2a8:	602b      	str	r3, [r5, #0]
 801c2aa:	d030      	beq.n	801c30e <__sflush_r+0x92>
 801c2ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c2ae:	89a3      	ldrh	r3, [r4, #12]
 801c2b0:	0759      	lsls	r1, r3, #29
 801c2b2:	d505      	bpl.n	801c2c0 <__sflush_r+0x44>
 801c2b4:	6863      	ldr	r3, [r4, #4]
 801c2b6:	1ad2      	subs	r2, r2, r3
 801c2b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c2ba:	b10b      	cbz	r3, 801c2c0 <__sflush_r+0x44>
 801c2bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c2be:	1ad2      	subs	r2, r2, r3
 801c2c0:	2300      	movs	r3, #0
 801c2c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c2c4:	6a21      	ldr	r1, [r4, #32]
 801c2c6:	4628      	mov	r0, r5
 801c2c8:	47b0      	blx	r6
 801c2ca:	1c43      	adds	r3, r0, #1
 801c2cc:	89a3      	ldrh	r3, [r4, #12]
 801c2ce:	d106      	bne.n	801c2de <__sflush_r+0x62>
 801c2d0:	6829      	ldr	r1, [r5, #0]
 801c2d2:	291d      	cmp	r1, #29
 801c2d4:	d82b      	bhi.n	801c32e <__sflush_r+0xb2>
 801c2d6:	4a2a      	ldr	r2, [pc, #168]	@ (801c380 <__sflush_r+0x104>)
 801c2d8:	410a      	asrs	r2, r1
 801c2da:	07d6      	lsls	r6, r2, #31
 801c2dc:	d427      	bmi.n	801c32e <__sflush_r+0xb2>
 801c2de:	2200      	movs	r2, #0
 801c2e0:	6062      	str	r2, [r4, #4]
 801c2e2:	04d9      	lsls	r1, r3, #19
 801c2e4:	6922      	ldr	r2, [r4, #16]
 801c2e6:	6022      	str	r2, [r4, #0]
 801c2e8:	d504      	bpl.n	801c2f4 <__sflush_r+0x78>
 801c2ea:	1c42      	adds	r2, r0, #1
 801c2ec:	d101      	bne.n	801c2f2 <__sflush_r+0x76>
 801c2ee:	682b      	ldr	r3, [r5, #0]
 801c2f0:	b903      	cbnz	r3, 801c2f4 <__sflush_r+0x78>
 801c2f2:	6560      	str	r0, [r4, #84]	@ 0x54
 801c2f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c2f6:	602f      	str	r7, [r5, #0]
 801c2f8:	b1b9      	cbz	r1, 801c32a <__sflush_r+0xae>
 801c2fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c2fe:	4299      	cmp	r1, r3
 801c300:	d002      	beq.n	801c308 <__sflush_r+0x8c>
 801c302:	4628      	mov	r0, r5
 801c304:	f7fe fd5a 	bl	801adbc <_free_r>
 801c308:	2300      	movs	r3, #0
 801c30a:	6363      	str	r3, [r4, #52]	@ 0x34
 801c30c:	e00d      	b.n	801c32a <__sflush_r+0xae>
 801c30e:	2301      	movs	r3, #1
 801c310:	4628      	mov	r0, r5
 801c312:	47b0      	blx	r6
 801c314:	4602      	mov	r2, r0
 801c316:	1c50      	adds	r0, r2, #1
 801c318:	d1c9      	bne.n	801c2ae <__sflush_r+0x32>
 801c31a:	682b      	ldr	r3, [r5, #0]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d0c6      	beq.n	801c2ae <__sflush_r+0x32>
 801c320:	2b1d      	cmp	r3, #29
 801c322:	d001      	beq.n	801c328 <__sflush_r+0xac>
 801c324:	2b16      	cmp	r3, #22
 801c326:	d11e      	bne.n	801c366 <__sflush_r+0xea>
 801c328:	602f      	str	r7, [r5, #0]
 801c32a:	2000      	movs	r0, #0
 801c32c:	e022      	b.n	801c374 <__sflush_r+0xf8>
 801c32e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c332:	b21b      	sxth	r3, r3
 801c334:	e01b      	b.n	801c36e <__sflush_r+0xf2>
 801c336:	690f      	ldr	r7, [r1, #16]
 801c338:	2f00      	cmp	r7, #0
 801c33a:	d0f6      	beq.n	801c32a <__sflush_r+0xae>
 801c33c:	0793      	lsls	r3, r2, #30
 801c33e:	680e      	ldr	r6, [r1, #0]
 801c340:	bf08      	it	eq
 801c342:	694b      	ldreq	r3, [r1, #20]
 801c344:	600f      	str	r7, [r1, #0]
 801c346:	bf18      	it	ne
 801c348:	2300      	movne	r3, #0
 801c34a:	eba6 0807 	sub.w	r8, r6, r7
 801c34e:	608b      	str	r3, [r1, #8]
 801c350:	f1b8 0f00 	cmp.w	r8, #0
 801c354:	dde9      	ble.n	801c32a <__sflush_r+0xae>
 801c356:	6a21      	ldr	r1, [r4, #32]
 801c358:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c35a:	4643      	mov	r3, r8
 801c35c:	463a      	mov	r2, r7
 801c35e:	4628      	mov	r0, r5
 801c360:	47b0      	blx	r6
 801c362:	2800      	cmp	r0, #0
 801c364:	dc08      	bgt.n	801c378 <__sflush_r+0xfc>
 801c366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c36a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c36e:	81a3      	strh	r3, [r4, #12]
 801c370:	f04f 30ff 	mov.w	r0, #4294967295
 801c374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c378:	4407      	add	r7, r0
 801c37a:	eba8 0800 	sub.w	r8, r8, r0
 801c37e:	e7e7      	b.n	801c350 <__sflush_r+0xd4>
 801c380:	dfbffffe 	.word	0xdfbffffe

0801c384 <_fflush_r>:
 801c384:	b538      	push	{r3, r4, r5, lr}
 801c386:	690b      	ldr	r3, [r1, #16]
 801c388:	4605      	mov	r5, r0
 801c38a:	460c      	mov	r4, r1
 801c38c:	b913      	cbnz	r3, 801c394 <_fflush_r+0x10>
 801c38e:	2500      	movs	r5, #0
 801c390:	4628      	mov	r0, r5
 801c392:	bd38      	pop	{r3, r4, r5, pc}
 801c394:	b118      	cbz	r0, 801c39e <_fflush_r+0x1a>
 801c396:	6a03      	ldr	r3, [r0, #32]
 801c398:	b90b      	cbnz	r3, 801c39e <_fflush_r+0x1a>
 801c39a:	f7fd fde1 	bl	8019f60 <__sinit>
 801c39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d0f3      	beq.n	801c38e <_fflush_r+0xa>
 801c3a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c3a8:	07d0      	lsls	r0, r2, #31
 801c3aa:	d404      	bmi.n	801c3b6 <_fflush_r+0x32>
 801c3ac:	0599      	lsls	r1, r3, #22
 801c3ae:	d402      	bmi.n	801c3b6 <_fflush_r+0x32>
 801c3b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c3b2:	f7fd ff0a 	bl	801a1ca <__retarget_lock_acquire_recursive>
 801c3b6:	4628      	mov	r0, r5
 801c3b8:	4621      	mov	r1, r4
 801c3ba:	f7ff ff5f 	bl	801c27c <__sflush_r>
 801c3be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c3c0:	07da      	lsls	r2, r3, #31
 801c3c2:	4605      	mov	r5, r0
 801c3c4:	d4e4      	bmi.n	801c390 <_fflush_r+0xc>
 801c3c6:	89a3      	ldrh	r3, [r4, #12]
 801c3c8:	059b      	lsls	r3, r3, #22
 801c3ca:	d4e1      	bmi.n	801c390 <_fflush_r+0xc>
 801c3cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c3ce:	f7fd fefd 	bl	801a1cc <__retarget_lock_release_recursive>
 801c3d2:	e7dd      	b.n	801c390 <_fflush_r+0xc>

0801c3d4 <memmove>:
 801c3d4:	4288      	cmp	r0, r1
 801c3d6:	b510      	push	{r4, lr}
 801c3d8:	eb01 0402 	add.w	r4, r1, r2
 801c3dc:	d902      	bls.n	801c3e4 <memmove+0x10>
 801c3de:	4284      	cmp	r4, r0
 801c3e0:	4623      	mov	r3, r4
 801c3e2:	d807      	bhi.n	801c3f4 <memmove+0x20>
 801c3e4:	1e43      	subs	r3, r0, #1
 801c3e6:	42a1      	cmp	r1, r4
 801c3e8:	d008      	beq.n	801c3fc <memmove+0x28>
 801c3ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c3ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c3f2:	e7f8      	b.n	801c3e6 <memmove+0x12>
 801c3f4:	4402      	add	r2, r0
 801c3f6:	4601      	mov	r1, r0
 801c3f8:	428a      	cmp	r2, r1
 801c3fa:	d100      	bne.n	801c3fe <memmove+0x2a>
 801c3fc:	bd10      	pop	{r4, pc}
 801c3fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c406:	e7f7      	b.n	801c3f8 <memmove+0x24>

0801c408 <_sbrk_r>:
 801c408:	b538      	push	{r3, r4, r5, lr}
 801c40a:	4d06      	ldr	r5, [pc, #24]	@ (801c424 <_sbrk_r+0x1c>)
 801c40c:	2300      	movs	r3, #0
 801c40e:	4604      	mov	r4, r0
 801c410:	4608      	mov	r0, r1
 801c412:	602b      	str	r3, [r5, #0]
 801c414:	f7e6 fd18 	bl	8002e48 <_sbrk>
 801c418:	1c43      	adds	r3, r0, #1
 801c41a:	d102      	bne.n	801c422 <_sbrk_r+0x1a>
 801c41c:	682b      	ldr	r3, [r5, #0]
 801c41e:	b103      	cbz	r3, 801c422 <_sbrk_r+0x1a>
 801c420:	6023      	str	r3, [r4, #0]
 801c422:	bd38      	pop	{r3, r4, r5, pc}
 801c424:	240153d8 	.word	0x240153d8

0801c428 <__assert_func>:
 801c428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c42a:	4614      	mov	r4, r2
 801c42c:	461a      	mov	r2, r3
 801c42e:	4b09      	ldr	r3, [pc, #36]	@ (801c454 <__assert_func+0x2c>)
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	4605      	mov	r5, r0
 801c434:	68d8      	ldr	r0, [r3, #12]
 801c436:	b954      	cbnz	r4, 801c44e <__assert_func+0x26>
 801c438:	4b07      	ldr	r3, [pc, #28]	@ (801c458 <__assert_func+0x30>)
 801c43a:	461c      	mov	r4, r3
 801c43c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c440:	9100      	str	r1, [sp, #0]
 801c442:	462b      	mov	r3, r5
 801c444:	4905      	ldr	r1, [pc, #20]	@ (801c45c <__assert_func+0x34>)
 801c446:	f000 f84f 	bl	801c4e8 <fiprintf>
 801c44a:	f000 f85f 	bl	801c50c <abort>
 801c44e:	4b04      	ldr	r3, [pc, #16]	@ (801c460 <__assert_func+0x38>)
 801c450:	e7f4      	b.n	801c43c <__assert_func+0x14>
 801c452:	bf00      	nop
 801c454:	240002ac 	.word	0x240002ac
 801c458:	0801e754 	.word	0x0801e754
 801c45c:	0801e726 	.word	0x0801e726
 801c460:	0801e719 	.word	0x0801e719

0801c464 <_calloc_r>:
 801c464:	b570      	push	{r4, r5, r6, lr}
 801c466:	fba1 5402 	umull	r5, r4, r1, r2
 801c46a:	b93c      	cbnz	r4, 801c47c <_calloc_r+0x18>
 801c46c:	4629      	mov	r1, r5
 801c46e:	f7ff f853 	bl	801b518 <_malloc_r>
 801c472:	4606      	mov	r6, r0
 801c474:	b928      	cbnz	r0, 801c482 <_calloc_r+0x1e>
 801c476:	2600      	movs	r6, #0
 801c478:	4630      	mov	r0, r6
 801c47a:	bd70      	pop	{r4, r5, r6, pc}
 801c47c:	220c      	movs	r2, #12
 801c47e:	6002      	str	r2, [r0, #0]
 801c480:	e7f9      	b.n	801c476 <_calloc_r+0x12>
 801c482:	462a      	mov	r2, r5
 801c484:	4621      	mov	r1, r4
 801c486:	f7fd fe04 	bl	801a092 <memset>
 801c48a:	e7f5      	b.n	801c478 <_calloc_r+0x14>

0801c48c <_realloc_r>:
 801c48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c490:	4680      	mov	r8, r0
 801c492:	4615      	mov	r5, r2
 801c494:	460c      	mov	r4, r1
 801c496:	b921      	cbnz	r1, 801c4a2 <_realloc_r+0x16>
 801c498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c49c:	4611      	mov	r1, r2
 801c49e:	f7ff b83b 	b.w	801b518 <_malloc_r>
 801c4a2:	b92a      	cbnz	r2, 801c4b0 <_realloc_r+0x24>
 801c4a4:	f7fe fc8a 	bl	801adbc <_free_r>
 801c4a8:	2400      	movs	r4, #0
 801c4aa:	4620      	mov	r0, r4
 801c4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4b0:	f000 f833 	bl	801c51a <_malloc_usable_size_r>
 801c4b4:	4285      	cmp	r5, r0
 801c4b6:	4606      	mov	r6, r0
 801c4b8:	d802      	bhi.n	801c4c0 <_realloc_r+0x34>
 801c4ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c4be:	d8f4      	bhi.n	801c4aa <_realloc_r+0x1e>
 801c4c0:	4629      	mov	r1, r5
 801c4c2:	4640      	mov	r0, r8
 801c4c4:	f7ff f828 	bl	801b518 <_malloc_r>
 801c4c8:	4607      	mov	r7, r0
 801c4ca:	2800      	cmp	r0, #0
 801c4cc:	d0ec      	beq.n	801c4a8 <_realloc_r+0x1c>
 801c4ce:	42b5      	cmp	r5, r6
 801c4d0:	462a      	mov	r2, r5
 801c4d2:	4621      	mov	r1, r4
 801c4d4:	bf28      	it	cs
 801c4d6:	4632      	movcs	r2, r6
 801c4d8:	f7fd fe79 	bl	801a1ce <memcpy>
 801c4dc:	4621      	mov	r1, r4
 801c4de:	4640      	mov	r0, r8
 801c4e0:	f7fe fc6c 	bl	801adbc <_free_r>
 801c4e4:	463c      	mov	r4, r7
 801c4e6:	e7e0      	b.n	801c4aa <_realloc_r+0x1e>

0801c4e8 <fiprintf>:
 801c4e8:	b40e      	push	{r1, r2, r3}
 801c4ea:	b503      	push	{r0, r1, lr}
 801c4ec:	4601      	mov	r1, r0
 801c4ee:	ab03      	add	r3, sp, #12
 801c4f0:	4805      	ldr	r0, [pc, #20]	@ (801c508 <fiprintf+0x20>)
 801c4f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c4f6:	6800      	ldr	r0, [r0, #0]
 801c4f8:	9301      	str	r3, [sp, #4]
 801c4fa:	f000 f83f 	bl	801c57c <_vfiprintf_r>
 801c4fe:	b002      	add	sp, #8
 801c500:	f85d eb04 	ldr.w	lr, [sp], #4
 801c504:	b003      	add	sp, #12
 801c506:	4770      	bx	lr
 801c508:	240002ac 	.word	0x240002ac

0801c50c <abort>:
 801c50c:	b508      	push	{r3, lr}
 801c50e:	2006      	movs	r0, #6
 801c510:	f000 fa08 	bl	801c924 <raise>
 801c514:	2001      	movs	r0, #1
 801c516:	f7e6 fc1f 	bl	8002d58 <_exit>

0801c51a <_malloc_usable_size_r>:
 801c51a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c51e:	1f18      	subs	r0, r3, #4
 801c520:	2b00      	cmp	r3, #0
 801c522:	bfbc      	itt	lt
 801c524:	580b      	ldrlt	r3, [r1, r0]
 801c526:	18c0      	addlt	r0, r0, r3
 801c528:	4770      	bx	lr

0801c52a <__sfputc_r>:
 801c52a:	6893      	ldr	r3, [r2, #8]
 801c52c:	3b01      	subs	r3, #1
 801c52e:	2b00      	cmp	r3, #0
 801c530:	b410      	push	{r4}
 801c532:	6093      	str	r3, [r2, #8]
 801c534:	da08      	bge.n	801c548 <__sfputc_r+0x1e>
 801c536:	6994      	ldr	r4, [r2, #24]
 801c538:	42a3      	cmp	r3, r4
 801c53a:	db01      	blt.n	801c540 <__sfputc_r+0x16>
 801c53c:	290a      	cmp	r1, #10
 801c53e:	d103      	bne.n	801c548 <__sfputc_r+0x1e>
 801c540:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c544:	f000 b932 	b.w	801c7ac <__swbuf_r>
 801c548:	6813      	ldr	r3, [r2, #0]
 801c54a:	1c58      	adds	r0, r3, #1
 801c54c:	6010      	str	r0, [r2, #0]
 801c54e:	7019      	strb	r1, [r3, #0]
 801c550:	4608      	mov	r0, r1
 801c552:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c556:	4770      	bx	lr

0801c558 <__sfputs_r>:
 801c558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c55a:	4606      	mov	r6, r0
 801c55c:	460f      	mov	r7, r1
 801c55e:	4614      	mov	r4, r2
 801c560:	18d5      	adds	r5, r2, r3
 801c562:	42ac      	cmp	r4, r5
 801c564:	d101      	bne.n	801c56a <__sfputs_r+0x12>
 801c566:	2000      	movs	r0, #0
 801c568:	e007      	b.n	801c57a <__sfputs_r+0x22>
 801c56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c56e:	463a      	mov	r2, r7
 801c570:	4630      	mov	r0, r6
 801c572:	f7ff ffda 	bl	801c52a <__sfputc_r>
 801c576:	1c43      	adds	r3, r0, #1
 801c578:	d1f3      	bne.n	801c562 <__sfputs_r+0xa>
 801c57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c57c <_vfiprintf_r>:
 801c57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c580:	460d      	mov	r5, r1
 801c582:	b09d      	sub	sp, #116	@ 0x74
 801c584:	4614      	mov	r4, r2
 801c586:	4698      	mov	r8, r3
 801c588:	4606      	mov	r6, r0
 801c58a:	b118      	cbz	r0, 801c594 <_vfiprintf_r+0x18>
 801c58c:	6a03      	ldr	r3, [r0, #32]
 801c58e:	b90b      	cbnz	r3, 801c594 <_vfiprintf_r+0x18>
 801c590:	f7fd fce6 	bl	8019f60 <__sinit>
 801c594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c596:	07d9      	lsls	r1, r3, #31
 801c598:	d405      	bmi.n	801c5a6 <_vfiprintf_r+0x2a>
 801c59a:	89ab      	ldrh	r3, [r5, #12]
 801c59c:	059a      	lsls	r2, r3, #22
 801c59e:	d402      	bmi.n	801c5a6 <_vfiprintf_r+0x2a>
 801c5a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c5a2:	f7fd fe12 	bl	801a1ca <__retarget_lock_acquire_recursive>
 801c5a6:	89ab      	ldrh	r3, [r5, #12]
 801c5a8:	071b      	lsls	r3, r3, #28
 801c5aa:	d501      	bpl.n	801c5b0 <_vfiprintf_r+0x34>
 801c5ac:	692b      	ldr	r3, [r5, #16]
 801c5ae:	b99b      	cbnz	r3, 801c5d8 <_vfiprintf_r+0x5c>
 801c5b0:	4629      	mov	r1, r5
 801c5b2:	4630      	mov	r0, r6
 801c5b4:	f000 f938 	bl	801c828 <__swsetup_r>
 801c5b8:	b170      	cbz	r0, 801c5d8 <_vfiprintf_r+0x5c>
 801c5ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c5bc:	07dc      	lsls	r4, r3, #31
 801c5be:	d504      	bpl.n	801c5ca <_vfiprintf_r+0x4e>
 801c5c0:	f04f 30ff 	mov.w	r0, #4294967295
 801c5c4:	b01d      	add	sp, #116	@ 0x74
 801c5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5ca:	89ab      	ldrh	r3, [r5, #12]
 801c5cc:	0598      	lsls	r0, r3, #22
 801c5ce:	d4f7      	bmi.n	801c5c0 <_vfiprintf_r+0x44>
 801c5d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c5d2:	f7fd fdfb 	bl	801a1cc <__retarget_lock_release_recursive>
 801c5d6:	e7f3      	b.n	801c5c0 <_vfiprintf_r+0x44>
 801c5d8:	2300      	movs	r3, #0
 801c5da:	9309      	str	r3, [sp, #36]	@ 0x24
 801c5dc:	2320      	movs	r3, #32
 801c5de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c5e2:	f8cd 800c 	str.w	r8, [sp, #12]
 801c5e6:	2330      	movs	r3, #48	@ 0x30
 801c5e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c798 <_vfiprintf_r+0x21c>
 801c5ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c5f0:	f04f 0901 	mov.w	r9, #1
 801c5f4:	4623      	mov	r3, r4
 801c5f6:	469a      	mov	sl, r3
 801c5f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c5fc:	b10a      	cbz	r2, 801c602 <_vfiprintf_r+0x86>
 801c5fe:	2a25      	cmp	r2, #37	@ 0x25
 801c600:	d1f9      	bne.n	801c5f6 <_vfiprintf_r+0x7a>
 801c602:	ebba 0b04 	subs.w	fp, sl, r4
 801c606:	d00b      	beq.n	801c620 <_vfiprintf_r+0xa4>
 801c608:	465b      	mov	r3, fp
 801c60a:	4622      	mov	r2, r4
 801c60c:	4629      	mov	r1, r5
 801c60e:	4630      	mov	r0, r6
 801c610:	f7ff ffa2 	bl	801c558 <__sfputs_r>
 801c614:	3001      	adds	r0, #1
 801c616:	f000 80a7 	beq.w	801c768 <_vfiprintf_r+0x1ec>
 801c61a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c61c:	445a      	add	r2, fp
 801c61e:	9209      	str	r2, [sp, #36]	@ 0x24
 801c620:	f89a 3000 	ldrb.w	r3, [sl]
 801c624:	2b00      	cmp	r3, #0
 801c626:	f000 809f 	beq.w	801c768 <_vfiprintf_r+0x1ec>
 801c62a:	2300      	movs	r3, #0
 801c62c:	f04f 32ff 	mov.w	r2, #4294967295
 801c630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c634:	f10a 0a01 	add.w	sl, sl, #1
 801c638:	9304      	str	r3, [sp, #16]
 801c63a:	9307      	str	r3, [sp, #28]
 801c63c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c640:	931a      	str	r3, [sp, #104]	@ 0x68
 801c642:	4654      	mov	r4, sl
 801c644:	2205      	movs	r2, #5
 801c646:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c64a:	4853      	ldr	r0, [pc, #332]	@ (801c798 <_vfiprintf_r+0x21c>)
 801c64c:	f7e3 fe70 	bl	8000330 <memchr>
 801c650:	9a04      	ldr	r2, [sp, #16]
 801c652:	b9d8      	cbnz	r0, 801c68c <_vfiprintf_r+0x110>
 801c654:	06d1      	lsls	r1, r2, #27
 801c656:	bf44      	itt	mi
 801c658:	2320      	movmi	r3, #32
 801c65a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c65e:	0713      	lsls	r3, r2, #28
 801c660:	bf44      	itt	mi
 801c662:	232b      	movmi	r3, #43	@ 0x2b
 801c664:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c668:	f89a 3000 	ldrb.w	r3, [sl]
 801c66c:	2b2a      	cmp	r3, #42	@ 0x2a
 801c66e:	d015      	beq.n	801c69c <_vfiprintf_r+0x120>
 801c670:	9a07      	ldr	r2, [sp, #28]
 801c672:	4654      	mov	r4, sl
 801c674:	2000      	movs	r0, #0
 801c676:	f04f 0c0a 	mov.w	ip, #10
 801c67a:	4621      	mov	r1, r4
 801c67c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c680:	3b30      	subs	r3, #48	@ 0x30
 801c682:	2b09      	cmp	r3, #9
 801c684:	d94b      	bls.n	801c71e <_vfiprintf_r+0x1a2>
 801c686:	b1b0      	cbz	r0, 801c6b6 <_vfiprintf_r+0x13a>
 801c688:	9207      	str	r2, [sp, #28]
 801c68a:	e014      	b.n	801c6b6 <_vfiprintf_r+0x13a>
 801c68c:	eba0 0308 	sub.w	r3, r0, r8
 801c690:	fa09 f303 	lsl.w	r3, r9, r3
 801c694:	4313      	orrs	r3, r2
 801c696:	9304      	str	r3, [sp, #16]
 801c698:	46a2      	mov	sl, r4
 801c69a:	e7d2      	b.n	801c642 <_vfiprintf_r+0xc6>
 801c69c:	9b03      	ldr	r3, [sp, #12]
 801c69e:	1d19      	adds	r1, r3, #4
 801c6a0:	681b      	ldr	r3, [r3, #0]
 801c6a2:	9103      	str	r1, [sp, #12]
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	bfbb      	ittet	lt
 801c6a8:	425b      	neglt	r3, r3
 801c6aa:	f042 0202 	orrlt.w	r2, r2, #2
 801c6ae:	9307      	strge	r3, [sp, #28]
 801c6b0:	9307      	strlt	r3, [sp, #28]
 801c6b2:	bfb8      	it	lt
 801c6b4:	9204      	strlt	r2, [sp, #16]
 801c6b6:	7823      	ldrb	r3, [r4, #0]
 801c6b8:	2b2e      	cmp	r3, #46	@ 0x2e
 801c6ba:	d10a      	bne.n	801c6d2 <_vfiprintf_r+0x156>
 801c6bc:	7863      	ldrb	r3, [r4, #1]
 801c6be:	2b2a      	cmp	r3, #42	@ 0x2a
 801c6c0:	d132      	bne.n	801c728 <_vfiprintf_r+0x1ac>
 801c6c2:	9b03      	ldr	r3, [sp, #12]
 801c6c4:	1d1a      	adds	r2, r3, #4
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	9203      	str	r2, [sp, #12]
 801c6ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c6ce:	3402      	adds	r4, #2
 801c6d0:	9305      	str	r3, [sp, #20]
 801c6d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c7a8 <_vfiprintf_r+0x22c>
 801c6d6:	7821      	ldrb	r1, [r4, #0]
 801c6d8:	2203      	movs	r2, #3
 801c6da:	4650      	mov	r0, sl
 801c6dc:	f7e3 fe28 	bl	8000330 <memchr>
 801c6e0:	b138      	cbz	r0, 801c6f2 <_vfiprintf_r+0x176>
 801c6e2:	9b04      	ldr	r3, [sp, #16]
 801c6e4:	eba0 000a 	sub.w	r0, r0, sl
 801c6e8:	2240      	movs	r2, #64	@ 0x40
 801c6ea:	4082      	lsls	r2, r0
 801c6ec:	4313      	orrs	r3, r2
 801c6ee:	3401      	adds	r4, #1
 801c6f0:	9304      	str	r3, [sp, #16]
 801c6f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c6f6:	4829      	ldr	r0, [pc, #164]	@ (801c79c <_vfiprintf_r+0x220>)
 801c6f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c6fc:	2206      	movs	r2, #6
 801c6fe:	f7e3 fe17 	bl	8000330 <memchr>
 801c702:	2800      	cmp	r0, #0
 801c704:	d03f      	beq.n	801c786 <_vfiprintf_r+0x20a>
 801c706:	4b26      	ldr	r3, [pc, #152]	@ (801c7a0 <_vfiprintf_r+0x224>)
 801c708:	bb1b      	cbnz	r3, 801c752 <_vfiprintf_r+0x1d6>
 801c70a:	9b03      	ldr	r3, [sp, #12]
 801c70c:	3307      	adds	r3, #7
 801c70e:	f023 0307 	bic.w	r3, r3, #7
 801c712:	3308      	adds	r3, #8
 801c714:	9303      	str	r3, [sp, #12]
 801c716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c718:	443b      	add	r3, r7
 801c71a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c71c:	e76a      	b.n	801c5f4 <_vfiprintf_r+0x78>
 801c71e:	fb0c 3202 	mla	r2, ip, r2, r3
 801c722:	460c      	mov	r4, r1
 801c724:	2001      	movs	r0, #1
 801c726:	e7a8      	b.n	801c67a <_vfiprintf_r+0xfe>
 801c728:	2300      	movs	r3, #0
 801c72a:	3401      	adds	r4, #1
 801c72c:	9305      	str	r3, [sp, #20]
 801c72e:	4619      	mov	r1, r3
 801c730:	f04f 0c0a 	mov.w	ip, #10
 801c734:	4620      	mov	r0, r4
 801c736:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c73a:	3a30      	subs	r2, #48	@ 0x30
 801c73c:	2a09      	cmp	r2, #9
 801c73e:	d903      	bls.n	801c748 <_vfiprintf_r+0x1cc>
 801c740:	2b00      	cmp	r3, #0
 801c742:	d0c6      	beq.n	801c6d2 <_vfiprintf_r+0x156>
 801c744:	9105      	str	r1, [sp, #20]
 801c746:	e7c4      	b.n	801c6d2 <_vfiprintf_r+0x156>
 801c748:	fb0c 2101 	mla	r1, ip, r1, r2
 801c74c:	4604      	mov	r4, r0
 801c74e:	2301      	movs	r3, #1
 801c750:	e7f0      	b.n	801c734 <_vfiprintf_r+0x1b8>
 801c752:	ab03      	add	r3, sp, #12
 801c754:	9300      	str	r3, [sp, #0]
 801c756:	462a      	mov	r2, r5
 801c758:	4b12      	ldr	r3, [pc, #72]	@ (801c7a4 <_vfiprintf_r+0x228>)
 801c75a:	a904      	add	r1, sp, #16
 801c75c:	4630      	mov	r0, r6
 801c75e:	f7fc ffcb 	bl	80196f8 <_printf_float>
 801c762:	4607      	mov	r7, r0
 801c764:	1c78      	adds	r0, r7, #1
 801c766:	d1d6      	bne.n	801c716 <_vfiprintf_r+0x19a>
 801c768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c76a:	07d9      	lsls	r1, r3, #31
 801c76c:	d405      	bmi.n	801c77a <_vfiprintf_r+0x1fe>
 801c76e:	89ab      	ldrh	r3, [r5, #12]
 801c770:	059a      	lsls	r2, r3, #22
 801c772:	d402      	bmi.n	801c77a <_vfiprintf_r+0x1fe>
 801c774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c776:	f7fd fd29 	bl	801a1cc <__retarget_lock_release_recursive>
 801c77a:	89ab      	ldrh	r3, [r5, #12]
 801c77c:	065b      	lsls	r3, r3, #25
 801c77e:	f53f af1f 	bmi.w	801c5c0 <_vfiprintf_r+0x44>
 801c782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c784:	e71e      	b.n	801c5c4 <_vfiprintf_r+0x48>
 801c786:	ab03      	add	r3, sp, #12
 801c788:	9300      	str	r3, [sp, #0]
 801c78a:	462a      	mov	r2, r5
 801c78c:	4b05      	ldr	r3, [pc, #20]	@ (801c7a4 <_vfiprintf_r+0x228>)
 801c78e:	a904      	add	r1, sp, #16
 801c790:	4630      	mov	r0, r6
 801c792:	f7fd fa39 	bl	8019c08 <_printf_i>
 801c796:	e7e4      	b.n	801c762 <_vfiprintf_r+0x1e6>
 801c798:	0801e708 	.word	0x0801e708
 801c79c:	0801e712 	.word	0x0801e712
 801c7a0:	080196f9 	.word	0x080196f9
 801c7a4:	0801c559 	.word	0x0801c559
 801c7a8:	0801e70e 	.word	0x0801e70e

0801c7ac <__swbuf_r>:
 801c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7ae:	460e      	mov	r6, r1
 801c7b0:	4614      	mov	r4, r2
 801c7b2:	4605      	mov	r5, r0
 801c7b4:	b118      	cbz	r0, 801c7be <__swbuf_r+0x12>
 801c7b6:	6a03      	ldr	r3, [r0, #32]
 801c7b8:	b90b      	cbnz	r3, 801c7be <__swbuf_r+0x12>
 801c7ba:	f7fd fbd1 	bl	8019f60 <__sinit>
 801c7be:	69a3      	ldr	r3, [r4, #24]
 801c7c0:	60a3      	str	r3, [r4, #8]
 801c7c2:	89a3      	ldrh	r3, [r4, #12]
 801c7c4:	071a      	lsls	r2, r3, #28
 801c7c6:	d501      	bpl.n	801c7cc <__swbuf_r+0x20>
 801c7c8:	6923      	ldr	r3, [r4, #16]
 801c7ca:	b943      	cbnz	r3, 801c7de <__swbuf_r+0x32>
 801c7cc:	4621      	mov	r1, r4
 801c7ce:	4628      	mov	r0, r5
 801c7d0:	f000 f82a 	bl	801c828 <__swsetup_r>
 801c7d4:	b118      	cbz	r0, 801c7de <__swbuf_r+0x32>
 801c7d6:	f04f 37ff 	mov.w	r7, #4294967295
 801c7da:	4638      	mov	r0, r7
 801c7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7de:	6823      	ldr	r3, [r4, #0]
 801c7e0:	6922      	ldr	r2, [r4, #16]
 801c7e2:	1a98      	subs	r0, r3, r2
 801c7e4:	6963      	ldr	r3, [r4, #20]
 801c7e6:	b2f6      	uxtb	r6, r6
 801c7e8:	4283      	cmp	r3, r0
 801c7ea:	4637      	mov	r7, r6
 801c7ec:	dc05      	bgt.n	801c7fa <__swbuf_r+0x4e>
 801c7ee:	4621      	mov	r1, r4
 801c7f0:	4628      	mov	r0, r5
 801c7f2:	f7ff fdc7 	bl	801c384 <_fflush_r>
 801c7f6:	2800      	cmp	r0, #0
 801c7f8:	d1ed      	bne.n	801c7d6 <__swbuf_r+0x2a>
 801c7fa:	68a3      	ldr	r3, [r4, #8]
 801c7fc:	3b01      	subs	r3, #1
 801c7fe:	60a3      	str	r3, [r4, #8]
 801c800:	6823      	ldr	r3, [r4, #0]
 801c802:	1c5a      	adds	r2, r3, #1
 801c804:	6022      	str	r2, [r4, #0]
 801c806:	701e      	strb	r6, [r3, #0]
 801c808:	6962      	ldr	r2, [r4, #20]
 801c80a:	1c43      	adds	r3, r0, #1
 801c80c:	429a      	cmp	r2, r3
 801c80e:	d004      	beq.n	801c81a <__swbuf_r+0x6e>
 801c810:	89a3      	ldrh	r3, [r4, #12]
 801c812:	07db      	lsls	r3, r3, #31
 801c814:	d5e1      	bpl.n	801c7da <__swbuf_r+0x2e>
 801c816:	2e0a      	cmp	r6, #10
 801c818:	d1df      	bne.n	801c7da <__swbuf_r+0x2e>
 801c81a:	4621      	mov	r1, r4
 801c81c:	4628      	mov	r0, r5
 801c81e:	f7ff fdb1 	bl	801c384 <_fflush_r>
 801c822:	2800      	cmp	r0, #0
 801c824:	d0d9      	beq.n	801c7da <__swbuf_r+0x2e>
 801c826:	e7d6      	b.n	801c7d6 <__swbuf_r+0x2a>

0801c828 <__swsetup_r>:
 801c828:	b538      	push	{r3, r4, r5, lr}
 801c82a:	4b29      	ldr	r3, [pc, #164]	@ (801c8d0 <__swsetup_r+0xa8>)
 801c82c:	4605      	mov	r5, r0
 801c82e:	6818      	ldr	r0, [r3, #0]
 801c830:	460c      	mov	r4, r1
 801c832:	b118      	cbz	r0, 801c83c <__swsetup_r+0x14>
 801c834:	6a03      	ldr	r3, [r0, #32]
 801c836:	b90b      	cbnz	r3, 801c83c <__swsetup_r+0x14>
 801c838:	f7fd fb92 	bl	8019f60 <__sinit>
 801c83c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c840:	0719      	lsls	r1, r3, #28
 801c842:	d422      	bmi.n	801c88a <__swsetup_r+0x62>
 801c844:	06da      	lsls	r2, r3, #27
 801c846:	d407      	bmi.n	801c858 <__swsetup_r+0x30>
 801c848:	2209      	movs	r2, #9
 801c84a:	602a      	str	r2, [r5, #0]
 801c84c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c850:	81a3      	strh	r3, [r4, #12]
 801c852:	f04f 30ff 	mov.w	r0, #4294967295
 801c856:	e033      	b.n	801c8c0 <__swsetup_r+0x98>
 801c858:	0758      	lsls	r0, r3, #29
 801c85a:	d512      	bpl.n	801c882 <__swsetup_r+0x5a>
 801c85c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c85e:	b141      	cbz	r1, 801c872 <__swsetup_r+0x4a>
 801c860:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c864:	4299      	cmp	r1, r3
 801c866:	d002      	beq.n	801c86e <__swsetup_r+0x46>
 801c868:	4628      	mov	r0, r5
 801c86a:	f7fe faa7 	bl	801adbc <_free_r>
 801c86e:	2300      	movs	r3, #0
 801c870:	6363      	str	r3, [r4, #52]	@ 0x34
 801c872:	89a3      	ldrh	r3, [r4, #12]
 801c874:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c878:	81a3      	strh	r3, [r4, #12]
 801c87a:	2300      	movs	r3, #0
 801c87c:	6063      	str	r3, [r4, #4]
 801c87e:	6923      	ldr	r3, [r4, #16]
 801c880:	6023      	str	r3, [r4, #0]
 801c882:	89a3      	ldrh	r3, [r4, #12]
 801c884:	f043 0308 	orr.w	r3, r3, #8
 801c888:	81a3      	strh	r3, [r4, #12]
 801c88a:	6923      	ldr	r3, [r4, #16]
 801c88c:	b94b      	cbnz	r3, 801c8a2 <__swsetup_r+0x7a>
 801c88e:	89a3      	ldrh	r3, [r4, #12]
 801c890:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c898:	d003      	beq.n	801c8a2 <__swsetup_r+0x7a>
 801c89a:	4621      	mov	r1, r4
 801c89c:	4628      	mov	r0, r5
 801c89e:	f000 f883 	bl	801c9a8 <__smakebuf_r>
 801c8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8a6:	f013 0201 	ands.w	r2, r3, #1
 801c8aa:	d00a      	beq.n	801c8c2 <__swsetup_r+0x9a>
 801c8ac:	2200      	movs	r2, #0
 801c8ae:	60a2      	str	r2, [r4, #8]
 801c8b0:	6962      	ldr	r2, [r4, #20]
 801c8b2:	4252      	negs	r2, r2
 801c8b4:	61a2      	str	r2, [r4, #24]
 801c8b6:	6922      	ldr	r2, [r4, #16]
 801c8b8:	b942      	cbnz	r2, 801c8cc <__swsetup_r+0xa4>
 801c8ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c8be:	d1c5      	bne.n	801c84c <__swsetup_r+0x24>
 801c8c0:	bd38      	pop	{r3, r4, r5, pc}
 801c8c2:	0799      	lsls	r1, r3, #30
 801c8c4:	bf58      	it	pl
 801c8c6:	6962      	ldrpl	r2, [r4, #20]
 801c8c8:	60a2      	str	r2, [r4, #8]
 801c8ca:	e7f4      	b.n	801c8b6 <__swsetup_r+0x8e>
 801c8cc:	2000      	movs	r0, #0
 801c8ce:	e7f7      	b.n	801c8c0 <__swsetup_r+0x98>
 801c8d0:	240002ac 	.word	0x240002ac

0801c8d4 <_raise_r>:
 801c8d4:	291f      	cmp	r1, #31
 801c8d6:	b538      	push	{r3, r4, r5, lr}
 801c8d8:	4605      	mov	r5, r0
 801c8da:	460c      	mov	r4, r1
 801c8dc:	d904      	bls.n	801c8e8 <_raise_r+0x14>
 801c8de:	2316      	movs	r3, #22
 801c8e0:	6003      	str	r3, [r0, #0]
 801c8e2:	f04f 30ff 	mov.w	r0, #4294967295
 801c8e6:	bd38      	pop	{r3, r4, r5, pc}
 801c8e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c8ea:	b112      	cbz	r2, 801c8f2 <_raise_r+0x1e>
 801c8ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c8f0:	b94b      	cbnz	r3, 801c906 <_raise_r+0x32>
 801c8f2:	4628      	mov	r0, r5
 801c8f4:	f000 f830 	bl	801c958 <_getpid_r>
 801c8f8:	4622      	mov	r2, r4
 801c8fa:	4601      	mov	r1, r0
 801c8fc:	4628      	mov	r0, r5
 801c8fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c902:	f000 b817 	b.w	801c934 <_kill_r>
 801c906:	2b01      	cmp	r3, #1
 801c908:	d00a      	beq.n	801c920 <_raise_r+0x4c>
 801c90a:	1c59      	adds	r1, r3, #1
 801c90c:	d103      	bne.n	801c916 <_raise_r+0x42>
 801c90e:	2316      	movs	r3, #22
 801c910:	6003      	str	r3, [r0, #0]
 801c912:	2001      	movs	r0, #1
 801c914:	e7e7      	b.n	801c8e6 <_raise_r+0x12>
 801c916:	2100      	movs	r1, #0
 801c918:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c91c:	4620      	mov	r0, r4
 801c91e:	4798      	blx	r3
 801c920:	2000      	movs	r0, #0
 801c922:	e7e0      	b.n	801c8e6 <_raise_r+0x12>

0801c924 <raise>:
 801c924:	4b02      	ldr	r3, [pc, #8]	@ (801c930 <raise+0xc>)
 801c926:	4601      	mov	r1, r0
 801c928:	6818      	ldr	r0, [r3, #0]
 801c92a:	f7ff bfd3 	b.w	801c8d4 <_raise_r>
 801c92e:	bf00      	nop
 801c930:	240002ac 	.word	0x240002ac

0801c934 <_kill_r>:
 801c934:	b538      	push	{r3, r4, r5, lr}
 801c936:	4d07      	ldr	r5, [pc, #28]	@ (801c954 <_kill_r+0x20>)
 801c938:	2300      	movs	r3, #0
 801c93a:	4604      	mov	r4, r0
 801c93c:	4608      	mov	r0, r1
 801c93e:	4611      	mov	r1, r2
 801c940:	602b      	str	r3, [r5, #0]
 801c942:	f7e6 f9f9 	bl	8002d38 <_kill>
 801c946:	1c43      	adds	r3, r0, #1
 801c948:	d102      	bne.n	801c950 <_kill_r+0x1c>
 801c94a:	682b      	ldr	r3, [r5, #0]
 801c94c:	b103      	cbz	r3, 801c950 <_kill_r+0x1c>
 801c94e:	6023      	str	r3, [r4, #0]
 801c950:	bd38      	pop	{r3, r4, r5, pc}
 801c952:	bf00      	nop
 801c954:	240153d8 	.word	0x240153d8

0801c958 <_getpid_r>:
 801c958:	f7e6 b9e6 	b.w	8002d28 <_getpid>

0801c95c <__swhatbuf_r>:
 801c95c:	b570      	push	{r4, r5, r6, lr}
 801c95e:	460c      	mov	r4, r1
 801c960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c964:	2900      	cmp	r1, #0
 801c966:	b096      	sub	sp, #88	@ 0x58
 801c968:	4615      	mov	r5, r2
 801c96a:	461e      	mov	r6, r3
 801c96c:	da0d      	bge.n	801c98a <__swhatbuf_r+0x2e>
 801c96e:	89a3      	ldrh	r3, [r4, #12]
 801c970:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c974:	f04f 0100 	mov.w	r1, #0
 801c978:	bf14      	ite	ne
 801c97a:	2340      	movne	r3, #64	@ 0x40
 801c97c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c980:	2000      	movs	r0, #0
 801c982:	6031      	str	r1, [r6, #0]
 801c984:	602b      	str	r3, [r5, #0]
 801c986:	b016      	add	sp, #88	@ 0x58
 801c988:	bd70      	pop	{r4, r5, r6, pc}
 801c98a:	466a      	mov	r2, sp
 801c98c:	f000 f848 	bl	801ca20 <_fstat_r>
 801c990:	2800      	cmp	r0, #0
 801c992:	dbec      	blt.n	801c96e <__swhatbuf_r+0x12>
 801c994:	9901      	ldr	r1, [sp, #4]
 801c996:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c99a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c99e:	4259      	negs	r1, r3
 801c9a0:	4159      	adcs	r1, r3
 801c9a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c9a6:	e7eb      	b.n	801c980 <__swhatbuf_r+0x24>

0801c9a8 <__smakebuf_r>:
 801c9a8:	898b      	ldrh	r3, [r1, #12]
 801c9aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c9ac:	079d      	lsls	r5, r3, #30
 801c9ae:	4606      	mov	r6, r0
 801c9b0:	460c      	mov	r4, r1
 801c9b2:	d507      	bpl.n	801c9c4 <__smakebuf_r+0x1c>
 801c9b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c9b8:	6023      	str	r3, [r4, #0]
 801c9ba:	6123      	str	r3, [r4, #16]
 801c9bc:	2301      	movs	r3, #1
 801c9be:	6163      	str	r3, [r4, #20]
 801c9c0:	b003      	add	sp, #12
 801c9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9c4:	ab01      	add	r3, sp, #4
 801c9c6:	466a      	mov	r2, sp
 801c9c8:	f7ff ffc8 	bl	801c95c <__swhatbuf_r>
 801c9cc:	9f00      	ldr	r7, [sp, #0]
 801c9ce:	4605      	mov	r5, r0
 801c9d0:	4639      	mov	r1, r7
 801c9d2:	4630      	mov	r0, r6
 801c9d4:	f7fe fda0 	bl	801b518 <_malloc_r>
 801c9d8:	b948      	cbnz	r0, 801c9ee <__smakebuf_r+0x46>
 801c9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c9de:	059a      	lsls	r2, r3, #22
 801c9e0:	d4ee      	bmi.n	801c9c0 <__smakebuf_r+0x18>
 801c9e2:	f023 0303 	bic.w	r3, r3, #3
 801c9e6:	f043 0302 	orr.w	r3, r3, #2
 801c9ea:	81a3      	strh	r3, [r4, #12]
 801c9ec:	e7e2      	b.n	801c9b4 <__smakebuf_r+0xc>
 801c9ee:	89a3      	ldrh	r3, [r4, #12]
 801c9f0:	6020      	str	r0, [r4, #0]
 801c9f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c9f6:	81a3      	strh	r3, [r4, #12]
 801c9f8:	9b01      	ldr	r3, [sp, #4]
 801c9fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c9fe:	b15b      	cbz	r3, 801ca18 <__smakebuf_r+0x70>
 801ca00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ca04:	4630      	mov	r0, r6
 801ca06:	f000 f81d 	bl	801ca44 <_isatty_r>
 801ca0a:	b128      	cbz	r0, 801ca18 <__smakebuf_r+0x70>
 801ca0c:	89a3      	ldrh	r3, [r4, #12]
 801ca0e:	f023 0303 	bic.w	r3, r3, #3
 801ca12:	f043 0301 	orr.w	r3, r3, #1
 801ca16:	81a3      	strh	r3, [r4, #12]
 801ca18:	89a3      	ldrh	r3, [r4, #12]
 801ca1a:	431d      	orrs	r5, r3
 801ca1c:	81a5      	strh	r5, [r4, #12]
 801ca1e:	e7cf      	b.n	801c9c0 <__smakebuf_r+0x18>

0801ca20 <_fstat_r>:
 801ca20:	b538      	push	{r3, r4, r5, lr}
 801ca22:	4d07      	ldr	r5, [pc, #28]	@ (801ca40 <_fstat_r+0x20>)
 801ca24:	2300      	movs	r3, #0
 801ca26:	4604      	mov	r4, r0
 801ca28:	4608      	mov	r0, r1
 801ca2a:	4611      	mov	r1, r2
 801ca2c:	602b      	str	r3, [r5, #0]
 801ca2e:	f7e6 f9e3 	bl	8002df8 <_fstat>
 801ca32:	1c43      	adds	r3, r0, #1
 801ca34:	d102      	bne.n	801ca3c <_fstat_r+0x1c>
 801ca36:	682b      	ldr	r3, [r5, #0]
 801ca38:	b103      	cbz	r3, 801ca3c <_fstat_r+0x1c>
 801ca3a:	6023      	str	r3, [r4, #0]
 801ca3c:	bd38      	pop	{r3, r4, r5, pc}
 801ca3e:	bf00      	nop
 801ca40:	240153d8 	.word	0x240153d8

0801ca44 <_isatty_r>:
 801ca44:	b538      	push	{r3, r4, r5, lr}
 801ca46:	4d06      	ldr	r5, [pc, #24]	@ (801ca60 <_isatty_r+0x1c>)
 801ca48:	2300      	movs	r3, #0
 801ca4a:	4604      	mov	r4, r0
 801ca4c:	4608      	mov	r0, r1
 801ca4e:	602b      	str	r3, [r5, #0]
 801ca50:	f7e6 f9e2 	bl	8002e18 <_isatty>
 801ca54:	1c43      	adds	r3, r0, #1
 801ca56:	d102      	bne.n	801ca5e <_isatty_r+0x1a>
 801ca58:	682b      	ldr	r3, [r5, #0]
 801ca5a:	b103      	cbz	r3, 801ca5e <_isatty_r+0x1a>
 801ca5c:	6023      	str	r3, [r4, #0]
 801ca5e:	bd38      	pop	{r3, r4, r5, pc}
 801ca60:	240153d8 	.word	0x240153d8
 801ca64:	00000000 	.word	0x00000000

0801ca68 <sin>:
 801ca68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ca6a:	eeb0 7b40 	vmov.f64	d7, d0
 801ca6e:	ee17 3a90 	vmov	r3, s15
 801ca72:	4a21      	ldr	r2, [pc, #132]	@ (801caf8 <sin+0x90>)
 801ca74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ca78:	4293      	cmp	r3, r2
 801ca7a:	d807      	bhi.n	801ca8c <sin+0x24>
 801ca7c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801caf0 <sin+0x88>
 801ca80:	2000      	movs	r0, #0
 801ca82:	b005      	add	sp, #20
 801ca84:	f85d eb04 	ldr.w	lr, [sp], #4
 801ca88:	f000 b986 	b.w	801cd98 <__kernel_sin>
 801ca8c:	4a1b      	ldr	r2, [pc, #108]	@ (801cafc <sin+0x94>)
 801ca8e:	4293      	cmp	r3, r2
 801ca90:	d904      	bls.n	801ca9c <sin+0x34>
 801ca92:	ee30 0b40 	vsub.f64	d0, d0, d0
 801ca96:	b005      	add	sp, #20
 801ca98:	f85d fb04 	ldr.w	pc, [sp], #4
 801ca9c:	4668      	mov	r0, sp
 801ca9e:	f000 f9d3 	bl	801ce48 <__ieee754_rem_pio2>
 801caa2:	f000 0003 	and.w	r0, r0, #3
 801caa6:	2801      	cmp	r0, #1
 801caa8:	d00a      	beq.n	801cac0 <sin+0x58>
 801caaa:	2802      	cmp	r0, #2
 801caac:	d00f      	beq.n	801cace <sin+0x66>
 801caae:	b9c0      	cbnz	r0, 801cae2 <sin+0x7a>
 801cab0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cab4:	ed9d 0b00 	vldr	d0, [sp]
 801cab8:	2001      	movs	r0, #1
 801caba:	f000 f96d 	bl	801cd98 <__kernel_sin>
 801cabe:	e7ea      	b.n	801ca96 <sin+0x2e>
 801cac0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cac4:	ed9d 0b00 	vldr	d0, [sp]
 801cac8:	f000 f8fe 	bl	801ccc8 <__kernel_cos>
 801cacc:	e7e3      	b.n	801ca96 <sin+0x2e>
 801cace:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cad2:	ed9d 0b00 	vldr	d0, [sp]
 801cad6:	2001      	movs	r0, #1
 801cad8:	f000 f95e 	bl	801cd98 <__kernel_sin>
 801cadc:	eeb1 0b40 	vneg.f64	d0, d0
 801cae0:	e7d9      	b.n	801ca96 <sin+0x2e>
 801cae2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cae6:	ed9d 0b00 	vldr	d0, [sp]
 801caea:	f000 f8ed 	bl	801ccc8 <__kernel_cos>
 801caee:	e7f5      	b.n	801cadc <sin+0x74>
	...
 801caf8:	3fe921fb 	.word	0x3fe921fb
 801cafc:	7fefffff 	.word	0x7fefffff

0801cb00 <sinf_poly>:
 801cb00:	07cb      	lsls	r3, r1, #31
 801cb02:	d412      	bmi.n	801cb2a <sinf_poly+0x2a>
 801cb04:	ee21 5b00 	vmul.f64	d5, d1, d0
 801cb08:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801cb0c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801cb10:	eea6 7b01 	vfma.f64	d7, d6, d1
 801cb14:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801cb18:	ee21 1b05 	vmul.f64	d1, d1, d5
 801cb1c:	eea6 0b05 	vfma.f64	d0, d6, d5
 801cb20:	eea7 0b01 	vfma.f64	d0, d7, d1
 801cb24:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801cb28:	4770      	bx	lr
 801cb2a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801cb2e:	ee21 5b01 	vmul.f64	d5, d1, d1
 801cb32:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801cb36:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801cb3a:	eea1 7b06 	vfma.f64	d7, d1, d6
 801cb3e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801cb42:	eea1 0b06 	vfma.f64	d0, d1, d6
 801cb46:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801cb4a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801cb4e:	eea5 0b06 	vfma.f64	d0, d5, d6
 801cb52:	e7e5      	b.n	801cb20 <sinf_poly+0x20>
 801cb54:	0000      	movs	r0, r0
	...

0801cb58 <sinf>:
 801cb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cb5a:	ee10 4a10 	vmov	r4, s0
 801cb5e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801cb62:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801cb66:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801cb6a:	eef0 7a40 	vmov.f32	s15, s0
 801cb6e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801cb72:	d218      	bcs.n	801cba6 <sinf+0x4e>
 801cb74:	ee26 1b06 	vmul.f64	d1, d6, d6
 801cb78:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801cb7c:	d20a      	bcs.n	801cb94 <sinf+0x3c>
 801cb7e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801cb82:	d103      	bne.n	801cb8c <sinf+0x34>
 801cb84:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801cb88:	ed8d 1a01 	vstr	s2, [sp, #4]
 801cb8c:	eeb0 0a67 	vmov.f32	s0, s15
 801cb90:	b003      	add	sp, #12
 801cb92:	bd30      	pop	{r4, r5, pc}
 801cb94:	483a      	ldr	r0, [pc, #232]	@ (801cc80 <sinf+0x128>)
 801cb96:	eeb0 0b46 	vmov.f64	d0, d6
 801cb9a:	2100      	movs	r1, #0
 801cb9c:	b003      	add	sp, #12
 801cb9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cba2:	f7ff bfad 	b.w	801cb00 <sinf_poly>
 801cba6:	f240 422e 	movw	r2, #1070	@ 0x42e
 801cbaa:	4293      	cmp	r3, r2
 801cbac:	d824      	bhi.n	801cbf8 <sinf+0xa0>
 801cbae:	4b34      	ldr	r3, [pc, #208]	@ (801cc80 <sinf+0x128>)
 801cbb0:	ed93 7b08 	vldr	d7, [r3, #32]
 801cbb4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cbb8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801cbbc:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801cbc0:	ee17 1a90 	vmov	r1, s15
 801cbc4:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801cbc8:	1609      	asrs	r1, r1, #24
 801cbca:	ee07 1a90 	vmov	s15, r1
 801cbce:	f001 0203 	and.w	r2, r1, #3
 801cbd2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cbd6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801cbda:	ed92 0b00 	vldr	d0, [r2]
 801cbde:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801cbe2:	f011 0f02 	tst.w	r1, #2
 801cbe6:	eea5 6b47 	vfms.f64	d6, d5, d7
 801cbea:	bf08      	it	eq
 801cbec:	4618      	moveq	r0, r3
 801cbee:	ee26 1b06 	vmul.f64	d1, d6, d6
 801cbf2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801cbf6:	e7d1      	b.n	801cb9c <sinf+0x44>
 801cbf8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801cbfc:	d237      	bcs.n	801cc6e <sinf+0x116>
 801cbfe:	4921      	ldr	r1, [pc, #132]	@ (801cc84 <sinf+0x12c>)
 801cc00:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801cc04:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801cc08:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801cc0c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801cc10:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801cc14:	6a10      	ldr	r0, [r2, #32]
 801cc16:	6912      	ldr	r2, [r2, #16]
 801cc18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801cc1c:	40ab      	lsls	r3, r5
 801cc1e:	fba0 5003 	umull	r5, r0, r0, r3
 801cc22:	4359      	muls	r1, r3
 801cc24:	fbe3 0102 	umlal	r0, r1, r3, r2
 801cc28:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801cc2c:	0f9d      	lsrs	r5, r3, #30
 801cc2e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801cc32:	1ac9      	subs	r1, r1, r3
 801cc34:	f7e3 fd62 	bl	80006fc <__aeabi_l2d>
 801cc38:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801cc3c:	4b10      	ldr	r3, [pc, #64]	@ (801cc80 <sinf+0x128>)
 801cc3e:	f004 0203 	and.w	r2, r4, #3
 801cc42:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cc46:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801cc78 <sinf+0x120>
 801cc4a:	ed92 0b00 	vldr	d0, [r2]
 801cc4e:	ec41 0b17 	vmov	d7, r0, r1
 801cc52:	f014 0f02 	tst.w	r4, #2
 801cc56:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cc5a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801cc5e:	4629      	mov	r1, r5
 801cc60:	bf08      	it	eq
 801cc62:	4618      	moveq	r0, r3
 801cc64:	ee27 1b07 	vmul.f64	d1, d7, d7
 801cc68:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cc6c:	e796      	b.n	801cb9c <sinf+0x44>
 801cc6e:	b003      	add	sp, #12
 801cc70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cc74:	f000 b816 	b.w	801cca4 <__math_invalidf>
 801cc78:	54442d18 	.word	0x54442d18
 801cc7c:	3c1921fb 	.word	0x3c1921fb
 801cc80:	0801e7b8 	.word	0x0801e7b8
 801cc84:	0801e758 	.word	0x0801e758

0801cc88 <with_errnof>:
 801cc88:	b510      	push	{r4, lr}
 801cc8a:	ed2d 8b02 	vpush	{d8}
 801cc8e:	eeb0 8a40 	vmov.f32	s16, s0
 801cc92:	4604      	mov	r4, r0
 801cc94:	f7fd fa6e 	bl	801a174 <__errno>
 801cc98:	eeb0 0a48 	vmov.f32	s0, s16
 801cc9c:	ecbd 8b02 	vpop	{d8}
 801cca0:	6004      	str	r4, [r0, #0]
 801cca2:	bd10      	pop	{r4, pc}

0801cca4 <__math_invalidf>:
 801cca4:	eef0 7a40 	vmov.f32	s15, s0
 801cca8:	ee30 7a40 	vsub.f32	s14, s0, s0
 801ccac:	eef4 7a67 	vcmp.f32	s15, s15
 801ccb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccb4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801ccb8:	d602      	bvs.n	801ccc0 <__math_invalidf+0x1c>
 801ccba:	2021      	movs	r0, #33	@ 0x21
 801ccbc:	f7ff bfe4 	b.w	801cc88 <with_errnof>
 801ccc0:	4770      	bx	lr
 801ccc2:	0000      	movs	r0, r0
 801ccc4:	0000      	movs	r0, r0
	...

0801ccc8 <__kernel_cos>:
 801ccc8:	eeb0 5b40 	vmov.f64	d5, d0
 801cccc:	ee15 1a90 	vmov	r1, s11
 801ccd0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801ccd4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801ccd8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801ccdc:	d204      	bcs.n	801cce8 <__kernel_cos+0x20>
 801ccde:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801cce2:	ee17 3a90 	vmov	r3, s15
 801cce6:	b343      	cbz	r3, 801cd3a <__kernel_cos+0x72>
 801cce8:	ee25 6b05 	vmul.f64	d6, d5, d5
 801ccec:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801ccf0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801cd60 <__kernel_cos+0x98>
 801ccf4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cd68 <__kernel_cos+0xa0>
 801ccf8:	eea6 4b07 	vfma.f64	d4, d6, d7
 801ccfc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801cd70 <__kernel_cos+0xa8>
 801cd00:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cd04:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cd78 <__kernel_cos+0xb0>
 801cd08:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cd0c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801cd80 <__kernel_cos+0xb8>
 801cd10:	4b1f      	ldr	r3, [pc, #124]	@ (801cd90 <__kernel_cos+0xc8>)
 801cd12:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cd16:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cd88 <__kernel_cos+0xc0>
 801cd1a:	4299      	cmp	r1, r3
 801cd1c:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cd20:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801cd24:	ee24 4b06 	vmul.f64	d4, d4, d6
 801cd28:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cd2c:	eea6 1b04 	vfma.f64	d1, d6, d4
 801cd30:	d804      	bhi.n	801cd3c <__kernel_cos+0x74>
 801cd32:	ee37 7b41 	vsub.f64	d7, d7, d1
 801cd36:	ee30 0b47 	vsub.f64	d0, d0, d7
 801cd3a:	4770      	bx	lr
 801cd3c:	4b15      	ldr	r3, [pc, #84]	@ (801cd94 <__kernel_cos+0xcc>)
 801cd3e:	4299      	cmp	r1, r3
 801cd40:	d809      	bhi.n	801cd56 <__kernel_cos+0x8e>
 801cd42:	2200      	movs	r2, #0
 801cd44:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801cd48:	ec43 2b16 	vmov	d6, r2, r3
 801cd4c:	ee30 0b46 	vsub.f64	d0, d0, d6
 801cd50:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cd54:	e7ed      	b.n	801cd32 <__kernel_cos+0x6a>
 801cd56:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801cd5a:	e7f7      	b.n	801cd4c <__kernel_cos+0x84>
 801cd5c:	f3af 8000 	nop.w
 801cd60:	be8838d4 	.word	0xbe8838d4
 801cd64:	bda8fae9 	.word	0xbda8fae9
 801cd68:	bdb4b1c4 	.word	0xbdb4b1c4
 801cd6c:	3e21ee9e 	.word	0x3e21ee9e
 801cd70:	809c52ad 	.word	0x809c52ad
 801cd74:	be927e4f 	.word	0xbe927e4f
 801cd78:	19cb1590 	.word	0x19cb1590
 801cd7c:	3efa01a0 	.word	0x3efa01a0
 801cd80:	16c15177 	.word	0x16c15177
 801cd84:	bf56c16c 	.word	0xbf56c16c
 801cd88:	5555554c 	.word	0x5555554c
 801cd8c:	3fa55555 	.word	0x3fa55555
 801cd90:	3fd33332 	.word	0x3fd33332
 801cd94:	3fe90000 	.word	0x3fe90000

0801cd98 <__kernel_sin>:
 801cd98:	ee10 3a90 	vmov	r3, s1
 801cd9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cda0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801cda4:	d204      	bcs.n	801cdb0 <__kernel_sin+0x18>
 801cda6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801cdaa:	ee17 3a90 	vmov	r3, s15
 801cdae:	b35b      	cbz	r3, 801ce08 <__kernel_sin+0x70>
 801cdb0:	ee20 6b00 	vmul.f64	d6, d0, d0
 801cdb4:	ee20 5b06 	vmul.f64	d5, d0, d6
 801cdb8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801ce10 <__kernel_sin+0x78>
 801cdbc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801ce18 <__kernel_sin+0x80>
 801cdc0:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cdc4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801ce20 <__kernel_sin+0x88>
 801cdc8:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cdcc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801ce28 <__kernel_sin+0x90>
 801cdd0:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cdd4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801ce30 <__kernel_sin+0x98>
 801cdd8:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cddc:	b930      	cbnz	r0, 801cdec <__kernel_sin+0x54>
 801cdde:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801ce38 <__kernel_sin+0xa0>
 801cde2:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cde6:	eea4 0b05 	vfma.f64	d0, d4, d5
 801cdea:	4770      	bx	lr
 801cdec:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801cdf0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801cdf4:	eea1 7b04 	vfma.f64	d7, d1, d4
 801cdf8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801cdfc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801ce40 <__kernel_sin+0xa8>
 801ce00:	eea5 1b07 	vfma.f64	d1, d5, d7
 801ce04:	ee30 0b41 	vsub.f64	d0, d0, d1
 801ce08:	4770      	bx	lr
 801ce0a:	bf00      	nop
 801ce0c:	f3af 8000 	nop.w
 801ce10:	5acfd57c 	.word	0x5acfd57c
 801ce14:	3de5d93a 	.word	0x3de5d93a
 801ce18:	8a2b9ceb 	.word	0x8a2b9ceb
 801ce1c:	be5ae5e6 	.word	0xbe5ae5e6
 801ce20:	57b1fe7d 	.word	0x57b1fe7d
 801ce24:	3ec71de3 	.word	0x3ec71de3
 801ce28:	19c161d5 	.word	0x19c161d5
 801ce2c:	bf2a01a0 	.word	0xbf2a01a0
 801ce30:	1110f8a6 	.word	0x1110f8a6
 801ce34:	3f811111 	.word	0x3f811111
 801ce38:	55555549 	.word	0x55555549
 801ce3c:	bfc55555 	.word	0xbfc55555
 801ce40:	55555549 	.word	0x55555549
 801ce44:	3fc55555 	.word	0x3fc55555

0801ce48 <__ieee754_rem_pio2>:
 801ce48:	b570      	push	{r4, r5, r6, lr}
 801ce4a:	eeb0 7b40 	vmov.f64	d7, d0
 801ce4e:	ee17 5a90 	vmov	r5, s15
 801ce52:	4b99      	ldr	r3, [pc, #612]	@ (801d0b8 <__ieee754_rem_pio2+0x270>)
 801ce54:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801ce58:	429e      	cmp	r6, r3
 801ce5a:	b088      	sub	sp, #32
 801ce5c:	4604      	mov	r4, r0
 801ce5e:	d807      	bhi.n	801ce70 <__ieee754_rem_pio2+0x28>
 801ce60:	2200      	movs	r2, #0
 801ce62:	2300      	movs	r3, #0
 801ce64:	ed84 0b00 	vstr	d0, [r4]
 801ce68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ce6c:	2000      	movs	r0, #0
 801ce6e:	e01b      	b.n	801cea8 <__ieee754_rem_pio2+0x60>
 801ce70:	4b92      	ldr	r3, [pc, #584]	@ (801d0bc <__ieee754_rem_pio2+0x274>)
 801ce72:	429e      	cmp	r6, r3
 801ce74:	d83b      	bhi.n	801ceee <__ieee754_rem_pio2+0xa6>
 801ce76:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801ce7a:	2d00      	cmp	r5, #0
 801ce7c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801d078 <__ieee754_rem_pio2+0x230>
 801ce80:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801ce84:	dd19      	ble.n	801ceba <__ieee754_rem_pio2+0x72>
 801ce86:	ee30 7b46 	vsub.f64	d7, d0, d6
 801ce8a:	429e      	cmp	r6, r3
 801ce8c:	d00e      	beq.n	801ceac <__ieee754_rem_pio2+0x64>
 801ce8e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801d080 <__ieee754_rem_pio2+0x238>
 801ce92:	ee37 6b45 	vsub.f64	d6, d7, d5
 801ce96:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ce9a:	ed84 6b00 	vstr	d6, [r4]
 801ce9e:	ee37 7b45 	vsub.f64	d7, d7, d5
 801cea2:	ed84 7b02 	vstr	d7, [r4, #8]
 801cea6:	2001      	movs	r0, #1
 801cea8:	b008      	add	sp, #32
 801ceaa:	bd70      	pop	{r4, r5, r6, pc}
 801ceac:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801d088 <__ieee754_rem_pio2+0x240>
 801ceb0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801d090 <__ieee754_rem_pio2+0x248>
 801ceb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ceb8:	e7eb      	b.n	801ce92 <__ieee754_rem_pio2+0x4a>
 801ceba:	429e      	cmp	r6, r3
 801cebc:	ee30 7b06 	vadd.f64	d7, d0, d6
 801cec0:	d00e      	beq.n	801cee0 <__ieee754_rem_pio2+0x98>
 801cec2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801d080 <__ieee754_rem_pio2+0x238>
 801cec6:	ee37 6b05 	vadd.f64	d6, d7, d5
 801ceca:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cece:	ed84 6b00 	vstr	d6, [r4]
 801ced2:	ee37 7b05 	vadd.f64	d7, d7, d5
 801ced6:	f04f 30ff 	mov.w	r0, #4294967295
 801ceda:	ed84 7b02 	vstr	d7, [r4, #8]
 801cede:	e7e3      	b.n	801cea8 <__ieee754_rem_pio2+0x60>
 801cee0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801d088 <__ieee754_rem_pio2+0x240>
 801cee4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801d090 <__ieee754_rem_pio2+0x248>
 801cee8:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ceec:	e7eb      	b.n	801cec6 <__ieee754_rem_pio2+0x7e>
 801ceee:	4b74      	ldr	r3, [pc, #464]	@ (801d0c0 <__ieee754_rem_pio2+0x278>)
 801cef0:	429e      	cmp	r6, r3
 801cef2:	d870      	bhi.n	801cfd6 <__ieee754_rem_pio2+0x18e>
 801cef4:	f000 f8ec 	bl	801d0d0 <fabs>
 801cef8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801cefc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801d098 <__ieee754_rem_pio2+0x250>
 801cf00:	eea0 7b06 	vfma.f64	d7, d0, d6
 801cf04:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801cf08:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801cf0c:	ee17 0a90 	vmov	r0, s15
 801cf10:	eeb1 4b45 	vneg.f64	d4, d5
 801cf14:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d078 <__ieee754_rem_pio2+0x230>
 801cf18:	eea5 0b47 	vfms.f64	d0, d5, d7
 801cf1c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d080 <__ieee754_rem_pio2+0x238>
 801cf20:	281f      	cmp	r0, #31
 801cf22:	ee25 7b07 	vmul.f64	d7, d5, d7
 801cf26:	ee30 6b47 	vsub.f64	d6, d0, d7
 801cf2a:	dc05      	bgt.n	801cf38 <__ieee754_rem_pio2+0xf0>
 801cf2c:	4b65      	ldr	r3, [pc, #404]	@ (801d0c4 <__ieee754_rem_pio2+0x27c>)
 801cf2e:	1e42      	subs	r2, r0, #1
 801cf30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cf34:	42b3      	cmp	r3, r6
 801cf36:	d109      	bne.n	801cf4c <__ieee754_rem_pio2+0x104>
 801cf38:	ee16 3a90 	vmov	r3, s13
 801cf3c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801cf40:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801cf44:	2b10      	cmp	r3, #16
 801cf46:	ea4f 5226 	mov.w	r2, r6, asr #20
 801cf4a:	dc02      	bgt.n	801cf52 <__ieee754_rem_pio2+0x10a>
 801cf4c:	ed84 6b00 	vstr	d6, [r4]
 801cf50:	e01a      	b.n	801cf88 <__ieee754_rem_pio2+0x140>
 801cf52:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801d088 <__ieee754_rem_pio2+0x240>
 801cf56:	eeb0 6b40 	vmov.f64	d6, d0
 801cf5a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801cf5e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801cf62:	eea4 7b03 	vfma.f64	d7, d4, d3
 801cf66:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801d090 <__ieee754_rem_pio2+0x248>
 801cf6a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801cf6e:	ee36 3b47 	vsub.f64	d3, d6, d7
 801cf72:	ee13 3a90 	vmov	r3, s7
 801cf76:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801cf7a:	1ad3      	subs	r3, r2, r3
 801cf7c:	2b31      	cmp	r3, #49	@ 0x31
 801cf7e:	dc17      	bgt.n	801cfb0 <__ieee754_rem_pio2+0x168>
 801cf80:	eeb0 0b46 	vmov.f64	d0, d6
 801cf84:	ed84 3b00 	vstr	d3, [r4]
 801cf88:	ed94 6b00 	vldr	d6, [r4]
 801cf8c:	2d00      	cmp	r5, #0
 801cf8e:	ee30 0b46 	vsub.f64	d0, d0, d6
 801cf92:	ee30 0b47 	vsub.f64	d0, d0, d7
 801cf96:	ed84 0b02 	vstr	d0, [r4, #8]
 801cf9a:	da85      	bge.n	801cea8 <__ieee754_rem_pio2+0x60>
 801cf9c:	eeb1 6b46 	vneg.f64	d6, d6
 801cfa0:	eeb1 0b40 	vneg.f64	d0, d0
 801cfa4:	ed84 6b00 	vstr	d6, [r4]
 801cfa8:	ed84 0b02 	vstr	d0, [r4, #8]
 801cfac:	4240      	negs	r0, r0
 801cfae:	e77b      	b.n	801cea8 <__ieee754_rem_pio2+0x60>
 801cfb0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801d0a0 <__ieee754_rem_pio2+0x258>
 801cfb4:	eeb0 0b46 	vmov.f64	d0, d6
 801cfb8:	eea4 0b07 	vfma.f64	d0, d4, d7
 801cfbc:	ee36 6b40 	vsub.f64	d6, d6, d0
 801cfc0:	eea4 6b07 	vfma.f64	d6, d4, d7
 801cfc4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801d0a8 <__ieee754_rem_pio2+0x260>
 801cfc8:	eeb0 7b46 	vmov.f64	d7, d6
 801cfcc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801cfd0:	ee30 6b47 	vsub.f64	d6, d0, d7
 801cfd4:	e7ba      	b.n	801cf4c <__ieee754_rem_pio2+0x104>
 801cfd6:	4b3c      	ldr	r3, [pc, #240]	@ (801d0c8 <__ieee754_rem_pio2+0x280>)
 801cfd8:	429e      	cmp	r6, r3
 801cfda:	d906      	bls.n	801cfea <__ieee754_rem_pio2+0x1a2>
 801cfdc:	ee30 7b40 	vsub.f64	d7, d0, d0
 801cfe0:	ed80 7b02 	vstr	d7, [r0, #8]
 801cfe4:	ed80 7b00 	vstr	d7, [r0]
 801cfe8:	e740      	b.n	801ce6c <__ieee754_rem_pio2+0x24>
 801cfea:	ee10 3a10 	vmov	r3, s0
 801cfee:	1532      	asrs	r2, r6, #20
 801cff0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801cff4:	4618      	mov	r0, r3
 801cff6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801cffa:	ec41 0b17 	vmov	d7, r0, r1
 801cffe:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d002:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801d0b0 <__ieee754_rem_pio2+0x268>
 801d006:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d00a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d00e:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d012:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d016:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d01a:	a808      	add	r0, sp, #32
 801d01c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d020:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d024:	ed8d 6b04 	vstr	d6, [sp, #16]
 801d028:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d02c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d030:	2103      	movs	r1, #3
 801d032:	ed30 7b02 	vldmdb	r0!, {d7}
 801d036:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d03e:	460b      	mov	r3, r1
 801d040:	f101 31ff 	add.w	r1, r1, #4294967295
 801d044:	d0f5      	beq.n	801d032 <__ieee754_rem_pio2+0x1ea>
 801d046:	4921      	ldr	r1, [pc, #132]	@ (801d0cc <__ieee754_rem_pio2+0x284>)
 801d048:	9101      	str	r1, [sp, #4]
 801d04a:	2102      	movs	r1, #2
 801d04c:	9100      	str	r1, [sp, #0]
 801d04e:	a802      	add	r0, sp, #8
 801d050:	4621      	mov	r1, r4
 801d052:	f000 f845 	bl	801d0e0 <__kernel_rem_pio2>
 801d056:	2d00      	cmp	r5, #0
 801d058:	f6bf af26 	bge.w	801cea8 <__ieee754_rem_pio2+0x60>
 801d05c:	ed94 7b00 	vldr	d7, [r4]
 801d060:	eeb1 7b47 	vneg.f64	d7, d7
 801d064:	ed84 7b00 	vstr	d7, [r4]
 801d068:	ed94 7b02 	vldr	d7, [r4, #8]
 801d06c:	eeb1 7b47 	vneg.f64	d7, d7
 801d070:	ed84 7b02 	vstr	d7, [r4, #8]
 801d074:	e79a      	b.n	801cfac <__ieee754_rem_pio2+0x164>
 801d076:	bf00      	nop
 801d078:	54400000 	.word	0x54400000
 801d07c:	3ff921fb 	.word	0x3ff921fb
 801d080:	1a626331 	.word	0x1a626331
 801d084:	3dd0b461 	.word	0x3dd0b461
 801d088:	1a600000 	.word	0x1a600000
 801d08c:	3dd0b461 	.word	0x3dd0b461
 801d090:	2e037073 	.word	0x2e037073
 801d094:	3ba3198a 	.word	0x3ba3198a
 801d098:	6dc9c883 	.word	0x6dc9c883
 801d09c:	3fe45f30 	.word	0x3fe45f30
 801d0a0:	2e000000 	.word	0x2e000000
 801d0a4:	3ba3198a 	.word	0x3ba3198a
 801d0a8:	252049c1 	.word	0x252049c1
 801d0ac:	397b839a 	.word	0x397b839a
 801d0b0:	00000000 	.word	0x00000000
 801d0b4:	41700000 	.word	0x41700000
 801d0b8:	3fe921fb 	.word	0x3fe921fb
 801d0bc:	4002d97b 	.word	0x4002d97b
 801d0c0:	413921fb 	.word	0x413921fb
 801d0c4:	0801e898 	.word	0x0801e898
 801d0c8:	7fefffff 	.word	0x7fefffff
 801d0cc:	0801e918 	.word	0x0801e918

0801d0d0 <fabs>:
 801d0d0:	ec51 0b10 	vmov	r0, r1, d0
 801d0d4:	4602      	mov	r2, r0
 801d0d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d0da:	ec43 2b10 	vmov	d0, r2, r3
 801d0de:	4770      	bx	lr

0801d0e0 <__kernel_rem_pio2>:
 801d0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0e4:	ed2d 8b06 	vpush	{d8-d10}
 801d0e8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801d0ec:	469b      	mov	fp, r3
 801d0ee:	9001      	str	r0, [sp, #4]
 801d0f0:	4bbb      	ldr	r3, [pc, #748]	@ (801d3e0 <__kernel_rem_pio2+0x300>)
 801d0f2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801d0f4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801d0f8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801d0fc:	f112 0f14 	cmn.w	r2, #20
 801d100:	bfa8      	it	ge
 801d102:	1ed3      	subge	r3, r2, #3
 801d104:	f10b 3aff 	add.w	sl, fp, #4294967295
 801d108:	bfb8      	it	lt
 801d10a:	2300      	movlt	r3, #0
 801d10c:	f06f 0517 	mvn.w	r5, #23
 801d110:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801d3c8 <__kernel_rem_pio2+0x2e8>
 801d114:	bfa4      	itt	ge
 801d116:	2018      	movge	r0, #24
 801d118:	fb93 f3f0 	sdivge	r3, r3, r0
 801d11c:	fb03 5505 	mla	r5, r3, r5, r5
 801d120:	eba3 040a 	sub.w	r4, r3, sl
 801d124:	4415      	add	r5, r2
 801d126:	460f      	mov	r7, r1
 801d128:	eb09 060a 	add.w	r6, r9, sl
 801d12c:	a81a      	add	r0, sp, #104	@ 0x68
 801d12e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801d132:	2200      	movs	r2, #0
 801d134:	42b2      	cmp	r2, r6
 801d136:	dd0e      	ble.n	801d156 <__kernel_rem_pio2+0x76>
 801d138:	aa1a      	add	r2, sp, #104	@ 0x68
 801d13a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801d13e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801d142:	2600      	movs	r6, #0
 801d144:	454e      	cmp	r6, r9
 801d146:	dc25      	bgt.n	801d194 <__kernel_rem_pio2+0xb4>
 801d148:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801d3c8 <__kernel_rem_pio2+0x2e8>
 801d14c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d150:	4614      	mov	r4, r2
 801d152:	2000      	movs	r0, #0
 801d154:	e015      	b.n	801d182 <__kernel_rem_pio2+0xa2>
 801d156:	42d4      	cmn	r4, r2
 801d158:	d409      	bmi.n	801d16e <__kernel_rem_pio2+0x8e>
 801d15a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801d15e:	ee07 1a90 	vmov	s15, r1
 801d162:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d166:	eca0 7b02 	vstmia	r0!, {d7}
 801d16a:	3201      	adds	r2, #1
 801d16c:	e7e2      	b.n	801d134 <__kernel_rem_pio2+0x54>
 801d16e:	eeb0 7b46 	vmov.f64	d7, d6
 801d172:	e7f8      	b.n	801d166 <__kernel_rem_pio2+0x86>
 801d174:	ecbc 5b02 	vldmia	ip!, {d5}
 801d178:	ed94 6b00 	vldr	d6, [r4]
 801d17c:	3001      	adds	r0, #1
 801d17e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d182:	4550      	cmp	r0, sl
 801d184:	f1a4 0408 	sub.w	r4, r4, #8
 801d188:	ddf4      	ble.n	801d174 <__kernel_rem_pio2+0x94>
 801d18a:	ecae 7b02 	vstmia	lr!, {d7}
 801d18e:	3601      	adds	r6, #1
 801d190:	3208      	adds	r2, #8
 801d192:	e7d7      	b.n	801d144 <__kernel_rem_pio2+0x64>
 801d194:	aa06      	add	r2, sp, #24
 801d196:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801d3d0 <__kernel_rem_pio2+0x2f0>
 801d19a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801d3d8 <__kernel_rem_pio2+0x2f8>
 801d19e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801d1a2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801d1a6:	9203      	str	r2, [sp, #12]
 801d1a8:	9302      	str	r3, [sp, #8]
 801d1aa:	464c      	mov	r4, r9
 801d1ac:	00e3      	lsls	r3, r4, #3
 801d1ae:	9304      	str	r3, [sp, #16]
 801d1b0:	ab92      	add	r3, sp, #584	@ 0x248
 801d1b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d1b6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801d1ba:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801d1bc:	ab06      	add	r3, sp, #24
 801d1be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801d1c2:	461e      	mov	r6, r3
 801d1c4:	4620      	mov	r0, r4
 801d1c6:	2800      	cmp	r0, #0
 801d1c8:	f1a2 0208 	sub.w	r2, r2, #8
 801d1cc:	dc4a      	bgt.n	801d264 <__kernel_rem_pio2+0x184>
 801d1ce:	4628      	mov	r0, r5
 801d1d0:	9305      	str	r3, [sp, #20]
 801d1d2:	f000 fa01 	bl	801d5d8 <scalbn>
 801d1d6:	eeb0 8b40 	vmov.f64	d8, d0
 801d1da:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801d1de:	ee28 0b00 	vmul.f64	d0, d8, d0
 801d1e2:	f000 fa79 	bl	801d6d8 <floor>
 801d1e6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801d1ea:	eea0 8b47 	vfms.f64	d8, d0, d7
 801d1ee:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801d1f2:	2d00      	cmp	r5, #0
 801d1f4:	ee17 8a90 	vmov	r8, s15
 801d1f8:	9b05      	ldr	r3, [sp, #20]
 801d1fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d1fe:	ee38 8b47 	vsub.f64	d8, d8, d7
 801d202:	dd41      	ble.n	801d288 <__kernel_rem_pio2+0x1a8>
 801d204:	1e60      	subs	r0, r4, #1
 801d206:	aa06      	add	r2, sp, #24
 801d208:	f1c5 0c18 	rsb	ip, r5, #24
 801d20c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801d210:	fa46 f20c 	asr.w	r2, r6, ip
 801d214:	4490      	add	r8, r2
 801d216:	fa02 f20c 	lsl.w	r2, r2, ip
 801d21a:	1ab6      	subs	r6, r6, r2
 801d21c:	aa06      	add	r2, sp, #24
 801d21e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801d222:	f1c5 0217 	rsb	r2, r5, #23
 801d226:	4116      	asrs	r6, r2
 801d228:	2e00      	cmp	r6, #0
 801d22a:	dd3c      	ble.n	801d2a6 <__kernel_rem_pio2+0x1c6>
 801d22c:	f04f 0c00 	mov.w	ip, #0
 801d230:	f108 0801 	add.w	r8, r8, #1
 801d234:	4660      	mov	r0, ip
 801d236:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801d23a:	4564      	cmp	r4, ip
 801d23c:	dc66      	bgt.n	801d30c <__kernel_rem_pio2+0x22c>
 801d23e:	2d00      	cmp	r5, #0
 801d240:	dd03      	ble.n	801d24a <__kernel_rem_pio2+0x16a>
 801d242:	2d01      	cmp	r5, #1
 801d244:	d072      	beq.n	801d32c <__kernel_rem_pio2+0x24c>
 801d246:	2d02      	cmp	r5, #2
 801d248:	d07a      	beq.n	801d340 <__kernel_rem_pio2+0x260>
 801d24a:	2e02      	cmp	r6, #2
 801d24c:	d12b      	bne.n	801d2a6 <__kernel_rem_pio2+0x1c6>
 801d24e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d252:	ee30 8b48 	vsub.f64	d8, d0, d8
 801d256:	b330      	cbz	r0, 801d2a6 <__kernel_rem_pio2+0x1c6>
 801d258:	4628      	mov	r0, r5
 801d25a:	f000 f9bd 	bl	801d5d8 <scalbn>
 801d25e:	ee38 8b40 	vsub.f64	d8, d8, d0
 801d262:	e020      	b.n	801d2a6 <__kernel_rem_pio2+0x1c6>
 801d264:	ee20 7b09 	vmul.f64	d7, d0, d9
 801d268:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801d26c:	3801      	subs	r0, #1
 801d26e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801d272:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801d276:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d27a:	eca6 0a01 	vstmia	r6!, {s0}
 801d27e:	ed92 0b00 	vldr	d0, [r2]
 801d282:	ee37 0b00 	vadd.f64	d0, d7, d0
 801d286:	e79e      	b.n	801d1c6 <__kernel_rem_pio2+0xe6>
 801d288:	d105      	bne.n	801d296 <__kernel_rem_pio2+0x1b6>
 801d28a:	1e62      	subs	r2, r4, #1
 801d28c:	a906      	add	r1, sp, #24
 801d28e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801d292:	15f6      	asrs	r6, r6, #23
 801d294:	e7c8      	b.n	801d228 <__kernel_rem_pio2+0x148>
 801d296:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d29a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801d29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2a2:	da31      	bge.n	801d308 <__kernel_rem_pio2+0x228>
 801d2a4:	2600      	movs	r6, #0
 801d2a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801d2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2ae:	f040 809b 	bne.w	801d3e8 <__kernel_rem_pio2+0x308>
 801d2b2:	1e62      	subs	r2, r4, #1
 801d2b4:	2000      	movs	r0, #0
 801d2b6:	454a      	cmp	r2, r9
 801d2b8:	da49      	bge.n	801d34e <__kernel_rem_pio2+0x26e>
 801d2ba:	2800      	cmp	r0, #0
 801d2bc:	d062      	beq.n	801d384 <__kernel_rem_pio2+0x2a4>
 801d2be:	3c01      	subs	r4, #1
 801d2c0:	ab06      	add	r3, sp, #24
 801d2c2:	3d18      	subs	r5, #24
 801d2c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	d0f8      	beq.n	801d2be <__kernel_rem_pio2+0x1de>
 801d2cc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d2d0:	4628      	mov	r0, r5
 801d2d2:	f000 f981 	bl	801d5d8 <scalbn>
 801d2d6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801d3d0 <__kernel_rem_pio2+0x2f0>
 801d2da:	1c62      	adds	r2, r4, #1
 801d2dc:	a96a      	add	r1, sp, #424	@ 0x1a8
 801d2de:	00d3      	lsls	r3, r2, #3
 801d2e0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801d2e4:	4622      	mov	r2, r4
 801d2e6:	2a00      	cmp	r2, #0
 801d2e8:	f280 80a8 	bge.w	801d43c <__kernel_rem_pio2+0x35c>
 801d2ec:	4622      	mov	r2, r4
 801d2ee:	2a00      	cmp	r2, #0
 801d2f0:	f2c0 80c6 	blt.w	801d480 <__kernel_rem_pio2+0x3a0>
 801d2f4:	a96a      	add	r1, sp, #424	@ 0x1a8
 801d2f6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801d2fa:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801d3c8 <__kernel_rem_pio2+0x2e8>
 801d2fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801d3e4 <__kernel_rem_pio2+0x304>
 801d302:	2000      	movs	r0, #0
 801d304:	1aa1      	subs	r1, r4, r2
 801d306:	e0b0      	b.n	801d46a <__kernel_rem_pio2+0x38a>
 801d308:	2602      	movs	r6, #2
 801d30a:	e78f      	b.n	801d22c <__kernel_rem_pio2+0x14c>
 801d30c:	f853 2b04 	ldr.w	r2, [r3], #4
 801d310:	b948      	cbnz	r0, 801d326 <__kernel_rem_pio2+0x246>
 801d312:	b122      	cbz	r2, 801d31e <__kernel_rem_pio2+0x23e>
 801d314:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801d318:	f843 2c04 	str.w	r2, [r3, #-4]
 801d31c:	2201      	movs	r2, #1
 801d31e:	f10c 0c01 	add.w	ip, ip, #1
 801d322:	4610      	mov	r0, r2
 801d324:	e789      	b.n	801d23a <__kernel_rem_pio2+0x15a>
 801d326:	ebae 0202 	sub.w	r2, lr, r2
 801d32a:	e7f5      	b.n	801d318 <__kernel_rem_pio2+0x238>
 801d32c:	1e62      	subs	r2, r4, #1
 801d32e:	ab06      	add	r3, sp, #24
 801d330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d334:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801d338:	a906      	add	r1, sp, #24
 801d33a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801d33e:	e784      	b.n	801d24a <__kernel_rem_pio2+0x16a>
 801d340:	1e62      	subs	r2, r4, #1
 801d342:	ab06      	add	r3, sp, #24
 801d344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d348:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801d34c:	e7f4      	b.n	801d338 <__kernel_rem_pio2+0x258>
 801d34e:	ab06      	add	r3, sp, #24
 801d350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d354:	3a01      	subs	r2, #1
 801d356:	4318      	orrs	r0, r3
 801d358:	e7ad      	b.n	801d2b6 <__kernel_rem_pio2+0x1d6>
 801d35a:	3301      	adds	r3, #1
 801d35c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801d360:	2800      	cmp	r0, #0
 801d362:	d0fa      	beq.n	801d35a <__kernel_rem_pio2+0x27a>
 801d364:	9a04      	ldr	r2, [sp, #16]
 801d366:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801d36a:	446a      	add	r2, sp
 801d36c:	eb04 000b 	add.w	r0, r4, fp
 801d370:	a91a      	add	r1, sp, #104	@ 0x68
 801d372:	1c66      	adds	r6, r4, #1
 801d374:	3a98      	subs	r2, #152	@ 0x98
 801d376:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801d37a:	4423      	add	r3, r4
 801d37c:	42b3      	cmp	r3, r6
 801d37e:	da04      	bge.n	801d38a <__kernel_rem_pio2+0x2aa>
 801d380:	461c      	mov	r4, r3
 801d382:	e713      	b.n	801d1ac <__kernel_rem_pio2+0xcc>
 801d384:	9a03      	ldr	r2, [sp, #12]
 801d386:	2301      	movs	r3, #1
 801d388:	e7e8      	b.n	801d35c <__kernel_rem_pio2+0x27c>
 801d38a:	9902      	ldr	r1, [sp, #8]
 801d38c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d390:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801d394:	9104      	str	r1, [sp, #16]
 801d396:	ee07 1a90 	vmov	s15, r1
 801d39a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d39e:	2400      	movs	r4, #0
 801d3a0:	eca0 7b02 	vstmia	r0!, {d7}
 801d3a4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801d3c8 <__kernel_rem_pio2+0x2e8>
 801d3a8:	4686      	mov	lr, r0
 801d3aa:	4554      	cmp	r4, sl
 801d3ac:	dd03      	ble.n	801d3b6 <__kernel_rem_pio2+0x2d6>
 801d3ae:	eca2 7b02 	vstmia	r2!, {d7}
 801d3b2:	3601      	adds	r6, #1
 801d3b4:	e7e2      	b.n	801d37c <__kernel_rem_pio2+0x29c>
 801d3b6:	ecbc 5b02 	vldmia	ip!, {d5}
 801d3ba:	ed3e 6b02 	vldmdb	lr!, {d6}
 801d3be:	3401      	adds	r4, #1
 801d3c0:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d3c4:	e7f1      	b.n	801d3aa <__kernel_rem_pio2+0x2ca>
 801d3c6:	bf00      	nop
	...
 801d3d4:	3e700000 	.word	0x3e700000
 801d3d8:	00000000 	.word	0x00000000
 801d3dc:	41700000 	.word	0x41700000
 801d3e0:	0801ea60 	.word	0x0801ea60
 801d3e4:	0801ea20 	.word	0x0801ea20
 801d3e8:	4268      	negs	r0, r5
 801d3ea:	eeb0 0b48 	vmov.f64	d0, d8
 801d3ee:	f000 f8f3 	bl	801d5d8 <scalbn>
 801d3f2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801d5c0 <__kernel_rem_pio2+0x4e0>
 801d3f6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801d3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3fe:	db17      	blt.n	801d430 <__kernel_rem_pio2+0x350>
 801d400:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801d5c8 <__kernel_rem_pio2+0x4e8>
 801d404:	ee20 7b07 	vmul.f64	d7, d0, d7
 801d408:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801d40c:	aa06      	add	r2, sp, #24
 801d40e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801d412:	eea5 0b46 	vfms.f64	d0, d5, d6
 801d416:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d41a:	3518      	adds	r5, #24
 801d41c:	ee10 3a10 	vmov	r3, s0
 801d420:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d424:	ee17 3a10 	vmov	r3, s14
 801d428:	3401      	adds	r4, #1
 801d42a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d42e:	e74d      	b.n	801d2cc <__kernel_rem_pio2+0x1ec>
 801d430:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d434:	aa06      	add	r2, sp, #24
 801d436:	ee10 3a10 	vmov	r3, s0
 801d43a:	e7f6      	b.n	801d42a <__kernel_rem_pio2+0x34a>
 801d43c:	a806      	add	r0, sp, #24
 801d43e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801d442:	9001      	str	r0, [sp, #4]
 801d444:	ee07 0a90 	vmov	s15, r0
 801d448:	3a01      	subs	r2, #1
 801d44a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d44e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801d452:	ee20 0b06 	vmul.f64	d0, d0, d6
 801d456:	ed21 7b02 	vstmdb	r1!, {d7}
 801d45a:	e744      	b.n	801d2e6 <__kernel_rem_pio2+0x206>
 801d45c:	ecbc 5b02 	vldmia	ip!, {d5}
 801d460:	ecb5 6b02 	vldmia	r5!, {d6}
 801d464:	3001      	adds	r0, #1
 801d466:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d46a:	4548      	cmp	r0, r9
 801d46c:	dc01      	bgt.n	801d472 <__kernel_rem_pio2+0x392>
 801d46e:	4281      	cmp	r1, r0
 801d470:	daf4      	bge.n	801d45c <__kernel_rem_pio2+0x37c>
 801d472:	a842      	add	r0, sp, #264	@ 0x108
 801d474:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801d478:	ed81 7b00 	vstr	d7, [r1]
 801d47c:	3a01      	subs	r2, #1
 801d47e:	e736      	b.n	801d2ee <__kernel_rem_pio2+0x20e>
 801d480:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801d482:	2a02      	cmp	r2, #2
 801d484:	dc0a      	bgt.n	801d49c <__kernel_rem_pio2+0x3bc>
 801d486:	2a00      	cmp	r2, #0
 801d488:	dc2d      	bgt.n	801d4e6 <__kernel_rem_pio2+0x406>
 801d48a:	d046      	beq.n	801d51a <__kernel_rem_pio2+0x43a>
 801d48c:	f008 0007 	and.w	r0, r8, #7
 801d490:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801d494:	ecbd 8b06 	vpop	{d8-d10}
 801d498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d49c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801d49e:	2a03      	cmp	r2, #3
 801d4a0:	d1f4      	bne.n	801d48c <__kernel_rem_pio2+0x3ac>
 801d4a2:	a942      	add	r1, sp, #264	@ 0x108
 801d4a4:	f1a3 0208 	sub.w	r2, r3, #8
 801d4a8:	440a      	add	r2, r1
 801d4aa:	4611      	mov	r1, r2
 801d4ac:	4620      	mov	r0, r4
 801d4ae:	2800      	cmp	r0, #0
 801d4b0:	f1a1 0108 	sub.w	r1, r1, #8
 801d4b4:	dc52      	bgt.n	801d55c <__kernel_rem_pio2+0x47c>
 801d4b6:	4621      	mov	r1, r4
 801d4b8:	2901      	cmp	r1, #1
 801d4ba:	f1a2 0208 	sub.w	r2, r2, #8
 801d4be:	dc5d      	bgt.n	801d57c <__kernel_rem_pio2+0x49c>
 801d4c0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801d5d0 <__kernel_rem_pio2+0x4f0>
 801d4c4:	aa42      	add	r2, sp, #264	@ 0x108
 801d4c6:	4413      	add	r3, r2
 801d4c8:	2c01      	cmp	r4, #1
 801d4ca:	dc67      	bgt.n	801d59c <__kernel_rem_pio2+0x4bc>
 801d4cc:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801d4d0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801d4d4:	2e00      	cmp	r6, #0
 801d4d6:	d167      	bne.n	801d5a8 <__kernel_rem_pio2+0x4c8>
 801d4d8:	ed87 5b00 	vstr	d5, [r7]
 801d4dc:	ed87 6b02 	vstr	d6, [r7, #8]
 801d4e0:	ed87 7b04 	vstr	d7, [r7, #16]
 801d4e4:	e7d2      	b.n	801d48c <__kernel_rem_pio2+0x3ac>
 801d4e6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801d5d0 <__kernel_rem_pio2+0x4f0>
 801d4ea:	aa42      	add	r2, sp, #264	@ 0x108
 801d4ec:	4413      	add	r3, r2
 801d4ee:	4622      	mov	r2, r4
 801d4f0:	2a00      	cmp	r2, #0
 801d4f2:	da24      	bge.n	801d53e <__kernel_rem_pio2+0x45e>
 801d4f4:	b34e      	cbz	r6, 801d54a <__kernel_rem_pio2+0x46a>
 801d4f6:	eeb1 7b46 	vneg.f64	d7, d6
 801d4fa:	ed87 7b00 	vstr	d7, [r7]
 801d4fe:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801d502:	aa44      	add	r2, sp, #272	@ 0x110
 801d504:	2301      	movs	r3, #1
 801d506:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d50a:	429c      	cmp	r4, r3
 801d50c:	da20      	bge.n	801d550 <__kernel_rem_pio2+0x470>
 801d50e:	b10e      	cbz	r6, 801d514 <__kernel_rem_pio2+0x434>
 801d510:	eeb1 7b47 	vneg.f64	d7, d7
 801d514:	ed87 7b02 	vstr	d7, [r7, #8]
 801d518:	e7b8      	b.n	801d48c <__kernel_rem_pio2+0x3ac>
 801d51a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801d5d0 <__kernel_rem_pio2+0x4f0>
 801d51e:	aa42      	add	r2, sp, #264	@ 0x108
 801d520:	4413      	add	r3, r2
 801d522:	2c00      	cmp	r4, #0
 801d524:	da05      	bge.n	801d532 <__kernel_rem_pio2+0x452>
 801d526:	b10e      	cbz	r6, 801d52c <__kernel_rem_pio2+0x44c>
 801d528:	eeb1 7b47 	vneg.f64	d7, d7
 801d52c:	ed87 7b00 	vstr	d7, [r7]
 801d530:	e7ac      	b.n	801d48c <__kernel_rem_pio2+0x3ac>
 801d532:	ed33 6b02 	vldmdb	r3!, {d6}
 801d536:	3c01      	subs	r4, #1
 801d538:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d53c:	e7f1      	b.n	801d522 <__kernel_rem_pio2+0x442>
 801d53e:	ed33 7b02 	vldmdb	r3!, {d7}
 801d542:	3a01      	subs	r2, #1
 801d544:	ee36 6b07 	vadd.f64	d6, d6, d7
 801d548:	e7d2      	b.n	801d4f0 <__kernel_rem_pio2+0x410>
 801d54a:	eeb0 7b46 	vmov.f64	d7, d6
 801d54e:	e7d4      	b.n	801d4fa <__kernel_rem_pio2+0x41a>
 801d550:	ecb2 6b02 	vldmia	r2!, {d6}
 801d554:	3301      	adds	r3, #1
 801d556:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d55a:	e7d6      	b.n	801d50a <__kernel_rem_pio2+0x42a>
 801d55c:	ed91 7b00 	vldr	d7, [r1]
 801d560:	ed91 5b02 	vldr	d5, [r1, #8]
 801d564:	3801      	subs	r0, #1
 801d566:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d56a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d56e:	ed81 6b00 	vstr	d6, [r1]
 801d572:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d576:	ed81 7b02 	vstr	d7, [r1, #8]
 801d57a:	e798      	b.n	801d4ae <__kernel_rem_pio2+0x3ce>
 801d57c:	ed92 7b00 	vldr	d7, [r2]
 801d580:	ed92 5b02 	vldr	d5, [r2, #8]
 801d584:	3901      	subs	r1, #1
 801d586:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d58a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d58e:	ed82 6b00 	vstr	d6, [r2]
 801d592:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d596:	ed82 7b02 	vstr	d7, [r2, #8]
 801d59a:	e78d      	b.n	801d4b8 <__kernel_rem_pio2+0x3d8>
 801d59c:	ed33 6b02 	vldmdb	r3!, {d6}
 801d5a0:	3c01      	subs	r4, #1
 801d5a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d5a6:	e78f      	b.n	801d4c8 <__kernel_rem_pio2+0x3e8>
 801d5a8:	eeb1 5b45 	vneg.f64	d5, d5
 801d5ac:	eeb1 6b46 	vneg.f64	d6, d6
 801d5b0:	ed87 5b00 	vstr	d5, [r7]
 801d5b4:	eeb1 7b47 	vneg.f64	d7, d7
 801d5b8:	ed87 6b02 	vstr	d6, [r7, #8]
 801d5bc:	e790      	b.n	801d4e0 <__kernel_rem_pio2+0x400>
 801d5be:	bf00      	nop
 801d5c0:	00000000 	.word	0x00000000
 801d5c4:	41700000 	.word	0x41700000
 801d5c8:	00000000 	.word	0x00000000
 801d5cc:	3e700000 	.word	0x3e700000
	...

0801d5d8 <scalbn>:
 801d5d8:	ee10 1a90 	vmov	r1, s1
 801d5dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d5e0:	b98b      	cbnz	r3, 801d606 <scalbn+0x2e>
 801d5e2:	ee10 3a10 	vmov	r3, s0
 801d5e6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801d5ea:	4319      	orrs	r1, r3
 801d5ec:	d00a      	beq.n	801d604 <scalbn+0x2c>
 801d5ee:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801d6a0 <scalbn+0xc8>
 801d5f2:	4b37      	ldr	r3, [pc, #220]	@ (801d6d0 <scalbn+0xf8>)
 801d5f4:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d5f8:	4298      	cmp	r0, r3
 801d5fa:	da0b      	bge.n	801d614 <scalbn+0x3c>
 801d5fc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801d6a8 <scalbn+0xd0>
 801d600:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d604:	4770      	bx	lr
 801d606:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801d60a:	4293      	cmp	r3, r2
 801d60c:	d107      	bne.n	801d61e <scalbn+0x46>
 801d60e:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d612:	4770      	bx	lr
 801d614:	ee10 1a90 	vmov	r1, s1
 801d618:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d61c:	3b36      	subs	r3, #54	@ 0x36
 801d61e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801d622:	4290      	cmp	r0, r2
 801d624:	dd0d      	ble.n	801d642 <scalbn+0x6a>
 801d626:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801d6b0 <scalbn+0xd8>
 801d62a:	ee10 3a90 	vmov	r3, s1
 801d62e:	eeb0 6b47 	vmov.f64	d6, d7
 801d632:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801d6b8 <scalbn+0xe0>
 801d636:	2b00      	cmp	r3, #0
 801d638:	fe27 7b05 	vselge.f64	d7, d7, d5
 801d63c:	ee27 0b06 	vmul.f64	d0, d7, d6
 801d640:	4770      	bx	lr
 801d642:	4418      	add	r0, r3
 801d644:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801d648:	4298      	cmp	r0, r3
 801d64a:	dcec      	bgt.n	801d626 <scalbn+0x4e>
 801d64c:	2800      	cmp	r0, #0
 801d64e:	dd0a      	ble.n	801d666 <scalbn+0x8e>
 801d650:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801d654:	ec53 2b10 	vmov	r2, r3, d0
 801d658:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801d65c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801d660:	ec43 2b10 	vmov	d0, r2, r3
 801d664:	4770      	bx	lr
 801d666:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801d66a:	da09      	bge.n	801d680 <scalbn+0xa8>
 801d66c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801d6a8 <scalbn+0xd0>
 801d670:	ee10 3a90 	vmov	r3, s1
 801d674:	eeb0 6b47 	vmov.f64	d6, d7
 801d678:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801d6c0 <scalbn+0xe8>
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	e7db      	b.n	801d638 <scalbn+0x60>
 801d680:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801d684:	ec53 2b10 	vmov	r2, r3, d0
 801d688:	3036      	adds	r0, #54	@ 0x36
 801d68a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801d68e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801d692:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801d6c8 <scalbn+0xf0>
 801d696:	ec43 2b10 	vmov	d0, r2, r3
 801d69a:	e7b1      	b.n	801d600 <scalbn+0x28>
 801d69c:	f3af 8000 	nop.w
 801d6a0:	00000000 	.word	0x00000000
 801d6a4:	43500000 	.word	0x43500000
 801d6a8:	c2f8f359 	.word	0xc2f8f359
 801d6ac:	01a56e1f 	.word	0x01a56e1f
 801d6b0:	8800759c 	.word	0x8800759c
 801d6b4:	7e37e43c 	.word	0x7e37e43c
 801d6b8:	8800759c 	.word	0x8800759c
 801d6bc:	fe37e43c 	.word	0xfe37e43c
 801d6c0:	c2f8f359 	.word	0xc2f8f359
 801d6c4:	81a56e1f 	.word	0x81a56e1f
 801d6c8:	00000000 	.word	0x00000000
 801d6cc:	3c900000 	.word	0x3c900000
 801d6d0:	ffff3cb0 	.word	0xffff3cb0
 801d6d4:	00000000 	.word	0x00000000

0801d6d8 <floor>:
 801d6d8:	ee10 3a90 	vmov	r3, s1
 801d6dc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801d6e0:	ee10 2a10 	vmov	r2, s0
 801d6e4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801d6e8:	2913      	cmp	r1, #19
 801d6ea:	b530      	push	{r4, r5, lr}
 801d6ec:	4615      	mov	r5, r2
 801d6ee:	dc33      	bgt.n	801d758 <floor+0x80>
 801d6f0:	2900      	cmp	r1, #0
 801d6f2:	da18      	bge.n	801d726 <floor+0x4e>
 801d6f4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801d7b8 <floor+0xe0>
 801d6f8:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d6fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d704:	dd0a      	ble.n	801d71c <floor+0x44>
 801d706:	2b00      	cmp	r3, #0
 801d708:	da50      	bge.n	801d7ac <floor+0xd4>
 801d70a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d70e:	4313      	orrs	r3, r2
 801d710:	2200      	movs	r2, #0
 801d712:	4293      	cmp	r3, r2
 801d714:	4b2a      	ldr	r3, [pc, #168]	@ (801d7c0 <floor+0xe8>)
 801d716:	bf08      	it	eq
 801d718:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801d71c:	4619      	mov	r1, r3
 801d71e:	4610      	mov	r0, r2
 801d720:	ec41 0b10 	vmov	d0, r0, r1
 801d724:	e01f      	b.n	801d766 <floor+0x8e>
 801d726:	4827      	ldr	r0, [pc, #156]	@ (801d7c4 <floor+0xec>)
 801d728:	4108      	asrs	r0, r1
 801d72a:	ea03 0400 	and.w	r4, r3, r0
 801d72e:	4314      	orrs	r4, r2
 801d730:	d019      	beq.n	801d766 <floor+0x8e>
 801d732:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801d7b8 <floor+0xe0>
 801d736:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d73a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d742:	ddeb      	ble.n	801d71c <floor+0x44>
 801d744:	2b00      	cmp	r3, #0
 801d746:	bfbe      	ittt	lt
 801d748:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801d74c:	410a      	asrlt	r2, r1
 801d74e:	189b      	addlt	r3, r3, r2
 801d750:	ea23 0300 	bic.w	r3, r3, r0
 801d754:	2200      	movs	r2, #0
 801d756:	e7e1      	b.n	801d71c <floor+0x44>
 801d758:	2933      	cmp	r1, #51	@ 0x33
 801d75a:	dd05      	ble.n	801d768 <floor+0x90>
 801d75c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d760:	d101      	bne.n	801d766 <floor+0x8e>
 801d762:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d766:	bd30      	pop	{r4, r5, pc}
 801d768:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801d76c:	f04f 30ff 	mov.w	r0, #4294967295
 801d770:	40e0      	lsrs	r0, r4
 801d772:	4210      	tst	r0, r2
 801d774:	d0f7      	beq.n	801d766 <floor+0x8e>
 801d776:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d7b8 <floor+0xe0>
 801d77a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d77e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d786:	ddc9      	ble.n	801d71c <floor+0x44>
 801d788:	2b00      	cmp	r3, #0
 801d78a:	da02      	bge.n	801d792 <floor+0xba>
 801d78c:	2914      	cmp	r1, #20
 801d78e:	d103      	bne.n	801d798 <floor+0xc0>
 801d790:	3301      	adds	r3, #1
 801d792:	ea22 0200 	bic.w	r2, r2, r0
 801d796:	e7c1      	b.n	801d71c <floor+0x44>
 801d798:	2401      	movs	r4, #1
 801d79a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801d79e:	fa04 f101 	lsl.w	r1, r4, r1
 801d7a2:	440a      	add	r2, r1
 801d7a4:	42aa      	cmp	r2, r5
 801d7a6:	bf38      	it	cc
 801d7a8:	191b      	addcc	r3, r3, r4
 801d7aa:	e7f2      	b.n	801d792 <floor+0xba>
 801d7ac:	2200      	movs	r2, #0
 801d7ae:	4613      	mov	r3, r2
 801d7b0:	e7b4      	b.n	801d71c <floor+0x44>
 801d7b2:	bf00      	nop
 801d7b4:	f3af 8000 	nop.w
 801d7b8:	8800759c 	.word	0x8800759c
 801d7bc:	7e37e43c 	.word	0x7e37e43c
 801d7c0:	bff00000 	.word	0xbff00000
 801d7c4:	000fffff 	.word	0x000fffff

0801d7c8 <_init>:
 801d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7ca:	bf00      	nop
 801d7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d7ce:	bc08      	pop	{r3}
 801d7d0:	469e      	mov	lr, r3
 801d7d2:	4770      	bx	lr

0801d7d4 <_fini>:
 801d7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7d6:	bf00      	nop
 801d7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d7da:	bc08      	pop	{r3}
 801d7dc:	469e      	mov	lr, r3
 801d7de:	4770      	bx	lr
