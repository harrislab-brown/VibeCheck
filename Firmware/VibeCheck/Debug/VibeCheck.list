
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d368  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f90  0801d638  0801d638  0001e638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e5c8  0801e5c8  0001f5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e5d0  0801e5d0  0001f5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801e5d4  0801e5d4  0001f5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  0801e5d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000150ec  240002cc  0801e8a4  000202cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240153b8  0801e8a4  000203b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a397  00000000  00000000  000202fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007476  00000000  00000000  0005a691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002918  00000000  00000000  00061b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fd5  00000000  00000000  00064420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e669  00000000  00000000  000663f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c29b  00000000  00000000  000a4a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172ef3  00000000  00000000  000e0cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00253bec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c4e4  00000000  00000000  00253c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000000a6  00000000  00000000  00260114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000067  00000000  00000000  002601ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801d620 	.word	0x0801d620

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	0801d620 	.word	0x0801d620

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <LSM6DS3_Init>:

void LSM6DS3_Init(LSM6DS3* sensor, LSM6DS3_Config* config, SPI_HandleTypeDef* spi,  /* set the configuration parameters that need to be set once */
		GPIO_TypeDef* cs_port, uint16_t cs_pin,
		GPIO_TypeDef* int1_port, uint16_t int1_pin,
		GPIO_TypeDef* int2_port, uint16_t int2_pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	sensor->config = config;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	61da      	str	r2, [r3, #28]
	sensor->spi = spi;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	sensor->cs_port = cs_port;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
	sensor->cs_pin = cs_pin;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	811a      	strh	r2, [r3, #8]
	sensor->int1_port = int1_port;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	60da      	str	r2, [r3, #12]
	sensor->int1_pin = int1_pin;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8c3a      	ldrh	r2, [r7, #32]
 8000ae8:	821a      	strh	r2, [r3, #16]
	sensor->int2_port = int2_port;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aee:	615a      	str	r2, [r3, #20]
	sensor->int2_pin = int2_pin;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000af4:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000af6:	8b3b      	ldrh	r3, [r7, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f00a fe67 	bl	800b7d0 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop

08000b0c <LSM6DS3_TestCommunication>:


uint32_t LSM6DS3_TestCommunication(LSM6DS3* sensor)  /* check that the sensor is connected by querying its device ID */
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t reg_data;
	HAL_StatusTypeDef status = LSM6DS3_ReadRegister(sensor, LSM6DS3_REG_WHO_AM_I, &reg_data);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	461a      	mov	r2, r3
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 faf7 	bl	8001110 <LSM6DS3_ReadRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK && reg_data == LSM6DS3_DEVICE_ID)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000b30:	d101      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
		return 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LSM6DS3_TestCommunication+0x2c>
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LSM6DS3_Configure>:

/* configure the sensor */
/* this should be called each time we change a sensor setting so the chip can be updated */
void LSM6DS3_Configure(LSM6DS3* sensor)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	LSM6DS3_StopAccel(sensor);  /* disable the sensor before messing with the parameters */
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f9a9 	bl	8000ea0 <LSM6DS3_StopAccel>
	LSM6DS3_StopGyro(sensor);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f9b4 	bl	8000ebc <LSM6DS3_StopGyro>

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT1_CTRL, 0x01);  /* INT1 set when accel data ready (p. 59) */
 8000b54:	2201      	movs	r2, #1
 8000b56:	210d      	movs	r1, #13
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fb0d 	bl	8001178 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT2_CTRL, 0x02);  /* INT2 set when gyro data ready (p. 60) */
 8000b5e:	2202      	movs	r2, #2
 8000b60:	210e      	movs	r1, #14
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fb08 	bl	8001178 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL4_C, 0b00000100);  /* disable the I2C interface, also disables the gyro LPF1 (p. 64) */
 8000b68:	2204      	movs	r2, #4
 8000b6a:	2113      	movs	r1, #19
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fb03 	bl	8001178 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL6_C, 0b00000000);  /* sets the user offset weights to 2^(-10) g/LSB and the gyro LPF bandwidth (p. 66) */
 8000b72:	2200      	movs	r2, #0
 8000b74:	2115      	movs	r1, #21
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fafe 	bl	8001178 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL7_G, 0b00000000);  /* disables the gyro HPF (p. 67) */
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2116      	movs	r1, #22
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 faf9 	bl	8001178 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL8_XL, 0b00000000);  /* acceleration filters, configured to keep us on the LPF1 path (p. 67) */
 8000b86:	2200      	movs	r2, #0
 8000b88:	2117      	movs	r1, #23
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 faf4 	bl	8001178 <LSM6DS3_WriteRegister>

	LSM6DS3_WriteOffsets(sensor);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f805 	bl	8000ba0 <LSM6DS3_WriteOffsets>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop

08000ba0 <LSM6DS3_WriteOffsets>:


void LSM6DS3_WriteOffsets(LSM6DS3* sensor)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	/* x, y, z are the DC offsets of the sensor in g */
	/* this function will write to the user offset registers of the accelerometer chip to correct the offset */
	/* we assume the weight of the user offsets is 2^(-10) g/LSB */

	int8_t x_b = (int8_t)(sensor->config->usr_offset_x / 0.0009765625f);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	ed93 7a00 	vldr	s14, [r3]
 8000bb0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bbc:	edc7 7a00 	vstr	s15, [r7]
 8000bc0:	783b      	ldrb	r3, [r7, #0]
 8000bc2:	73fb      	strb	r3, [r7, #15]
	int8_t y_b = (int8_t)(sensor->config->usr_offset_y / 0.0009765625f);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000bcc:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bd8:	edc7 7a00 	vstr	s15, [r7]
 8000bdc:	783b      	ldrb	r3, [r7, #0]
 8000bde:	73bb      	strb	r3, [r7, #14]
	int8_t z_b = (int8_t)(sensor->config->usr_offset_z / 0.0009765625f);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	ed93 7a02 	vldr	s14, [r3, #8]
 8000be8:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf4:	edc7 7a00 	vstr	s15, [r7]
 8000bf8:	783b      	ldrb	r3, [r7, #0]
 8000bfa:	737b      	strb	r3, [r7, #13]

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_X_OFS_USR, x_b);
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2173      	movs	r1, #115	@ 0x73
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 fab8 	bl	8001178 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Y_OFS_USR, y_b);
 8000c08:	7bbb      	ldrb	r3, [r7, #14]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2174      	movs	r1, #116	@ 0x74
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 fab2 	bl	8001178 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Z_OFS_USR, z_b);
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	461a      	mov	r2, r3
 8000c18:	2175      	movs	r1, #117	@ 0x75
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 faac 	bl	8001178 <LSM6DS3_WriteRegister>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	3a800000 	.word	0x3a800000

08000c2c <LSM6DS3_StartAccel>:


void LSM6DS3_StartAccel(LSM6DS3* sensor)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->accel_odr_hz)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d04d      	beq.n	8000cde <LSM6DS3_StartAccel+0xb2>
 8000c42:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d84c      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c4a:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d042      	beq.n	8000cd8 <LSM6DS3_StartAccel+0xac>
 8000c52:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d844      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c5a:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d037      	beq.n	8000cd2 <LSM6DS3_StartAccel+0xa6>
 8000c62:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d83c      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c6a:	f240 3241 	movw	r2, #833	@ 0x341
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d02c      	beq.n	8000ccc <LSM6DS3_StartAccel+0xa0>
 8000c72:	f240 3241 	movw	r2, #833	@ 0x341
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d834      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c7a:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000c7e:	d022      	beq.n	8000cc6 <LSM6DS3_StartAccel+0x9a>
 8000c80:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000c84:	d82e      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c86:	2bd0      	cmp	r3, #208	@ 0xd0
 8000c88:	d01a      	beq.n	8000cc0 <LSM6DS3_StartAccel+0x94>
 8000c8a:	2bd0      	cmp	r3, #208	@ 0xd0
 8000c8c:	d82a      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c8e:	2b68      	cmp	r3, #104	@ 0x68
 8000c90:	d013      	beq.n	8000cba <LSM6DS3_StartAccel+0x8e>
 8000c92:	2b68      	cmp	r3, #104	@ 0x68
 8000c94:	d826      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c96:	2b34      	cmp	r3, #52	@ 0x34
 8000c98:	d00c      	beq.n	8000cb4 <LSM6DS3_StartAccel+0x88>
 8000c9a:	2b34      	cmp	r3, #52	@ 0x34
 8000c9c:	d822      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c9e:	2b0d      	cmp	r3, #13
 8000ca0:	d002      	beq.n	8000ca8 <LSM6DS3_StartAccel+0x7c>
 8000ca2:	2b1a      	cmp	r3, #26
 8000ca4:	d003      	beq.n	8000cae <LSM6DS3_StartAccel+0x82>
 8000ca6:	e01d      	b.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_ACCEL_ODR_13HZ;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	73fb      	strb	r3, [r7, #15]
		break;
 8000cac:	e01d      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 26:
		odr_data = LSM6DS3_ACCEL_ODR_26HZ;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb2:	e01a      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 52:
		odr_data = LSM6DS3_ACCEL_ODR_52HZ;
 8000cb4:	2330      	movs	r3, #48	@ 0x30
 8000cb6:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb8:	e017      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 104:
		odr_data = LSM6DS3_ACCEL_ODR_104HZ;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	73fb      	strb	r3, [r7, #15]
		break;
 8000cbe:	e014      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 208:
		odr_data = LSM6DS3_ACCEL_ODR_208HZ;
 8000cc0:	2350      	movs	r3, #80	@ 0x50
 8000cc2:	73fb      	strb	r3, [r7, #15]
		break;
 8000cc4:	e011      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 416:
		odr_data = LSM6DS3_ACCEL_ODR_416HZ;
 8000cc6:	2360      	movs	r3, #96	@ 0x60
 8000cc8:	73fb      	strb	r3, [r7, #15]
		break;
 8000cca:	e00e      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 833:
		odr_data = LSM6DS3_ACCEL_ODR_833HZ;
 8000ccc:	2370      	movs	r3, #112	@ 0x70
 8000cce:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd0:	e00b      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 1660:
		odr_data = LSM6DS3_ACCEL_ODR_1660HZ;
 8000cd2:	2380      	movs	r3, #128	@ 0x80
 8000cd4:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd6:	e008      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 3330:
		odr_data = LSM6DS3_ACCEL_ODR_3330HZ;
 8000cd8:	2390      	movs	r3, #144	@ 0x90
 8000cda:	73fb      	strb	r3, [r7, #15]
		break;
 8000cdc:	e005      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 6660:
		odr_data = LSM6DS3_ACCEL_ODR_6660HZ;
 8000cde:	23a0      	movs	r3, #160	@ 0xa0
 8000ce0:	73fb      	strb	r3, [r7, #15]
		break;
 8000ce2:	e002      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	default:
		odr_data = LSM6DS3_ACCEL_ODR_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
		break;
 8000ce8:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->g_range)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	3b02      	subs	r3, #2
 8000cf2:	2b0e      	cmp	r3, #14
 8000cf4:	d82c      	bhi.n	8000d50 <LSM6DS3_StartAccel+0x124>
 8000cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cfc <LSM6DS3_StartAccel+0xd0>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d39 	.word	0x08000d39
 8000d00:	08000d51 	.word	0x08000d51
 8000d04:	08000d3f 	.word	0x08000d3f
 8000d08:	08000d51 	.word	0x08000d51
 8000d0c:	08000d51 	.word	0x08000d51
 8000d10:	08000d51 	.word	0x08000d51
 8000d14:	08000d45 	.word	0x08000d45
 8000d18:	08000d51 	.word	0x08000d51
 8000d1c:	08000d51 	.word	0x08000d51
 8000d20:	08000d51 	.word	0x08000d51
 8000d24:	08000d51 	.word	0x08000d51
 8000d28:	08000d51 	.word	0x08000d51
 8000d2c:	08000d51 	.word	0x08000d51
 8000d30:	08000d51 	.word	0x08000d51
 8000d34:	08000d4b 	.word	0x08000d4b
	{
	case 2:
		range_data = LSM6DS3_G_RANGE_2;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73bb      	strb	r3, [r7, #14]
		break;
 8000d3c:	e00b      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 4:
		range_data = LSM6DS3_G_RANGE_4;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	73bb      	strb	r3, [r7, #14]
		break;
 8000d42:	e008      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 8:
		range_data = LSM6DS3_G_RANGE_8;
 8000d44:	230c      	movs	r3, #12
 8000d46:	73bb      	strb	r3, [r7, #14]
		break;
 8000d48:	e005      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 16:
		range_data = LSM6DS3_G_RANGE_16;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	73bb      	strb	r3, [r7, #14]
		break;
 8000d4e:	e002      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	default:
		range_data = LSM6DS3_G_RANGE_2;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73bb      	strb	r3, [r7, #14]
		break;
 8000d54:	bf00      	nop
	}

	/* this register also contains LPF1_BW_SEL, here we will set BW to ODR/2 */
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, (odr_data | range_data));
 8000d56:	7bfa      	ldrb	r2, [r7, #15]
 8000d58:	7bbb      	ldrb	r3, [r7, #14]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2110      	movs	r1, #16
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 fa08 	bl	8001178 <LSM6DS3_WriteRegister>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <LSM6DS3_StartGyro>:


void LSM6DS3_StartGyro(LSM6DS3* sensor)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->gyro_odr_hz)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d04d      	beq.n	8000e22 <LSM6DS3_StartGyro+0xb2>
 8000d86:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d84c      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000d8e:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d042      	beq.n	8000e1c <LSM6DS3_StartGyro+0xac>
 8000d96:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d844      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000d9e:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d037      	beq.n	8000e16 <LSM6DS3_StartGyro+0xa6>
 8000da6:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d83c      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dae:	f240 3241 	movw	r2, #833	@ 0x341
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d02c      	beq.n	8000e10 <LSM6DS3_StartGyro+0xa0>
 8000db6:	f240 3241 	movw	r2, #833	@ 0x341
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d834      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dbe:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000dc2:	d022      	beq.n	8000e0a <LSM6DS3_StartGyro+0x9a>
 8000dc4:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000dc8:	d82e      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dca:	2bd0      	cmp	r3, #208	@ 0xd0
 8000dcc:	d01a      	beq.n	8000e04 <LSM6DS3_StartGyro+0x94>
 8000dce:	2bd0      	cmp	r3, #208	@ 0xd0
 8000dd0:	d82a      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dd2:	2b68      	cmp	r3, #104	@ 0x68
 8000dd4:	d013      	beq.n	8000dfe <LSM6DS3_StartGyro+0x8e>
 8000dd6:	2b68      	cmp	r3, #104	@ 0x68
 8000dd8:	d826      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dda:	2b34      	cmp	r3, #52	@ 0x34
 8000ddc:	d00c      	beq.n	8000df8 <LSM6DS3_StartGyro+0x88>
 8000dde:	2b34      	cmp	r3, #52	@ 0x34
 8000de0:	d822      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000de2:	2b0d      	cmp	r3, #13
 8000de4:	d002      	beq.n	8000dec <LSM6DS3_StartGyro+0x7c>
 8000de6:	2b1a      	cmp	r3, #26
 8000de8:	d003      	beq.n	8000df2 <LSM6DS3_StartGyro+0x82>
 8000dea:	e01d      	b.n	8000e28 <LSM6DS3_StartGyro+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_GYRO_ODR_13HZ;
 8000dec:	2310      	movs	r3, #16
 8000dee:	73fb      	strb	r3, [r7, #15]
		break;
 8000df0:	e01d      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 26:
		odr_data = LSM6DS3_GYRO_ODR_26HZ;
 8000df2:	2320      	movs	r3, #32
 8000df4:	73fb      	strb	r3, [r7, #15]
		break;
 8000df6:	e01a      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 52:
		odr_data = LSM6DS3_GYRO_ODR_52HZ;
 8000df8:	2330      	movs	r3, #48	@ 0x30
 8000dfa:	73fb      	strb	r3, [r7, #15]
		break;
 8000dfc:	e017      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 104:
		odr_data = LSM6DS3_GYRO_ODR_104HZ;
 8000dfe:	2340      	movs	r3, #64	@ 0x40
 8000e00:	73fb      	strb	r3, [r7, #15]
		break;
 8000e02:	e014      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 208:
		odr_data = LSM6DS3_GYRO_ODR_208HZ;
 8000e04:	2350      	movs	r3, #80	@ 0x50
 8000e06:	73fb      	strb	r3, [r7, #15]
		break;
 8000e08:	e011      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 416:
		odr_data = LSM6DS3_GYRO_ODR_416HZ;
 8000e0a:	2360      	movs	r3, #96	@ 0x60
 8000e0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e0e:	e00e      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 833:
		odr_data = LSM6DS3_GYRO_ODR_833HZ;
 8000e10:	2370      	movs	r3, #112	@ 0x70
 8000e12:	73fb      	strb	r3, [r7, #15]
		break;
 8000e14:	e00b      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 1660:
		odr_data = LSM6DS3_GYRO_ODR_1660HZ;
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	73fb      	strb	r3, [r7, #15]
		break;
 8000e1a:	e008      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 3330:
		odr_data = LSM6DS3_GYRO_ODR_3330HZ;
 8000e1c:	2390      	movs	r3, #144	@ 0x90
 8000e1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e20:	e005      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 6660:
		odr_data = LSM6DS3_GYRO_ODR_6660HZ;
 8000e22:	23a0      	movs	r3, #160	@ 0xa0
 8000e24:	73fb      	strb	r3, [r7, #15]
		break;
 8000e26:	e002      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	default:
		odr_data = LSM6DS3_GYRO_ODR_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e2c:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->dps_range)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e38:	d01f      	beq.n	8000e7a <LSM6DS3_StartGyro+0x10a>
 8000e3a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e3e:	d81f      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e44:	d016      	beq.n	8000e74 <LSM6DS3_StartGyro+0x104>
 8000e46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e4a:	d819      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e4c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e50:	d00d      	beq.n	8000e6e <LSM6DS3_StartGyro+0xfe>
 8000e52:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e56:	d813      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e58:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e5a:	d002      	beq.n	8000e62 <LSM6DS3_StartGyro+0xf2>
 8000e5c:	2bf5      	cmp	r3, #245	@ 0xf5
 8000e5e:	d003      	beq.n	8000e68 <LSM6DS3_StartGyro+0xf8>
 8000e60:	e00e      	b.n	8000e80 <LSM6DS3_StartGyro+0x110>
	{
	case 125:
		range_data = LSM6DS3_DPS_RANGE_125;
 8000e62:	2302      	movs	r3, #2
 8000e64:	73bb      	strb	r3, [r7, #14]
		break;
 8000e66:	e00e      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 245:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73bb      	strb	r3, [r7, #14]
		break;
 8000e6c:	e00b      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 500:
		range_data = LSM6DS3_DPS_RANGE_500;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	73bb      	strb	r3, [r7, #14]
		break;
 8000e72:	e008      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 1000:
		range_data = LSM6DS3_DPS_RANGE_1000;
 8000e74:	2308      	movs	r3, #8
 8000e76:	73bb      	strb	r3, [r7, #14]
		break;
 8000e78:	e005      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 2000:
		range_data = LSM6DS3_DPS_RANGE_2000;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	73bb      	strb	r3, [r7, #14]
		break;
 8000e7e:	e002      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	default:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73bb      	strb	r3, [r7, #14]
		break;
 8000e84:	bf00      	nop
	}

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, (odr_data | range_data));
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2111      	movs	r1, #17
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f970 	bl	8001178 <LSM6DS3_WriteRegister>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <LSM6DS3_StopAccel>:


void LSM6DS3_StopAccel(LSM6DS3* sensor)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, LSM6DS3_ACCEL_ODR_DISABLE);  /* power down accel. (p. 61) */
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f963 	bl	8001178 <LSM6DS3_WriteRegister>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop

08000ebc <LSM6DS3_StopGyro>:


void LSM6DS3_StopGyro(LSM6DS3* sensor)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, LSM6DS3_GYRO_ODR_DISABLE);  /* power down gyro. (p. 62) */
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2111      	movs	r1, #17
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f955 	bl	8001178 <LSM6DS3_WriteRegister>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop

08000ed8 <LSM6DS3_ReadAccel>:


void LSM6DS3_ReadAccel(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08d      	sub	sp, #52	@ 0x34
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
	/* get the acceleration in g */

	/* read multiple bytes corresponding to the raw accelerometer data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_XL | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000ee6:	4a41      	ldr	r2, [pc, #260]	@ (8000fec <LSM6DS3_ReadAccel+0x114>)
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef0:	6018      	str	r0, [r3, #0]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	8019      	strh	r1, [r3, #0]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	0c0a      	lsrs	r2, r1, #16
 8000efa:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681c      	ldr	r4, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	8912      	ldrh	r2, [r2, #8]
 8000f0a:	f107 0110 	add.w	r1, r7, #16
 8000f0e:	f107 0018 	add.w	r0, r7, #24
 8000f12:	9201      	str	r2, [sp, #4]
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	4623      	mov	r3, r4
 8000f18:	2207      	movs	r2, #7
 8000f1a:	f000 f959 	bl	80011d0 <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8000f1e:	7c7b      	ldrb	r3, [r7, #17]
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	7cbb      	ldrb	r3, [r7, #18]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8000f2c:	7cfb      	ldrb	r3, [r7, #19]
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	7d3b      	ldrb	r3, [r7, #20]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 8000f3a:	7d7b      	ldrb	r3, [r7, #21]
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	7dbb      	ldrb	r3, [r7, #22]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->accel_x = sensor->config->g_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f66:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8000ff0 <LSM6DS3_ReadAccel+0x118>
 8000f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	edc3 7a08 	vstr	s15, [r3, #32]
	sensor->accel_y = sensor->config->g_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f82:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f92:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8000ff0 <LSM6DS3_ReadAccel+0x118>
 8000f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	sensor->accel_z = sensor->config->g_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fbe:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000ff0 <LSM6DS3_ReadAccel+0x118>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	*x = sensor->accel_x;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6a1a      	ldr	r2, [r3, #32]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	601a      	str	r2, [r3, #0]
	*y = sensor->accel_y;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	601a      	str	r2, [r3, #0]
	*z = sensor->accel_z;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	601a      	str	r2, [r3, #0]

}
 8000fe4:	bf00      	nop
 8000fe6:	372c      	adds	r7, #44	@ 0x2c
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	0801d638 	.word	0x0801d638
 8000ff0:	47000000 	.word	0x47000000

08000ff4 <LSM6DS3_ReadGyro>:


void LSM6DS3_ReadGyro(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b08d      	sub	sp, #52	@ 0x34
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
	/* get the rotation rate in degrees per second */

	/* read multiple bytes corresponding to the raw gyroscope data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_G | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001002:	4a41      	ldr	r2, [pc, #260]	@ (8001108 <LSM6DS3_ReadGyro+0x114>)
 8001004:	f107 0318 	add.w	r3, r7, #24
 8001008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800100c:	6018      	str	r0, [r3, #0]
 800100e:	3304      	adds	r3, #4
 8001010:	8019      	strh	r1, [r3, #0]
 8001012:	3302      	adds	r3, #2
 8001014:	0c0a      	lsrs	r2, r1, #16
 8001016:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681c      	ldr	r4, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	8912      	ldrh	r2, [r2, #8]
 8001026:	f107 0110 	add.w	r1, r7, #16
 800102a:	f107 0018 	add.w	r0, r7, #24
 800102e:	9201      	str	r2, [sp, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	4623      	mov	r3, r4
 8001034:	2207      	movs	r2, #7
 8001036:	f000 f8cb 	bl	80011d0 <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 800103a:	7c7b      	ldrb	r3, [r7, #17]
 800103c:	b21a      	sxth	r2, r3
 800103e:	7cbb      	ldrb	r3, [r7, #18]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8001048:	7cfb      	ldrb	r3, [r7, #19]
 800104a:	b21a      	sxth	r2, r3
 800104c:	7d3b      	ldrb	r3, [r7, #20]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 8001056:	7d7b      	ldrb	r3, [r7, #21]
 8001058:	b21a      	sxth	r2, r3
 800105a:	7dbb      	ldrb	r3, [r7, #22]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->gyro_x = sensor->config->dps_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001072:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001082:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800110c <LSM6DS3_ReadGyro+0x118>
 8001086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	sensor->gyro_y = sensor->config->dps_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800109e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ae:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800110c <LSM6DS3_ReadGyro+0x118>
 80010b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	sensor->gyro_z = sensor->config->dps_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010da:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800110c <LSM6DS3_ReadGyro+0x118>
 80010de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	*x = sensor->gyro_x;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	601a      	str	r2, [r3, #0]
	*y = sensor->gyro_y;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	601a      	str	r2, [r3, #0]
	*z = sensor->gyro_z;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	372c      	adds	r7, #44	@ 0x2c
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	0801d640 	.word	0x0801d640
 800110c:	47000000 	.word	0x47000000

08001110 <LSM6DS3_ReadRegister>:



HAL_StatusTypeDef LSM6DS3_ReadRegister(LSM6DS3* sensor, uint8_t reg, uint8_t* data)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af02      	add	r7, sp, #8
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	460b      	mov	r3, r1
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_buf[2] = {(reg | 0x80), 0x00};  // set the first bit to indicate a read communication
 800111e:	7afb      	ldrb	r3, [r7, #11]
 8001120:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001124:	b2db      	uxtb	r3, r3
 8001126:	753b      	strb	r3, [r7, #20]
 8001128:	2300      	movs	r3, #0
 800112a:	757b      	strb	r3, [r7, #21]
	uint8_t rx_buf[2];

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6858      	ldr	r0, [r3, #4]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	891b      	ldrh	r3, [r3, #8]
 8001134:	2200      	movs	r2, #0
 8001136:	4619      	mov	r1, r3
 8001138:	f00a fb4a 	bl	800b7d0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(sensor->spi, tx_buf, rx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	f107 0210 	add.w	r2, r7, #16
 8001144:	f107 0114 	add.w	r1, r7, #20
 8001148:	2301      	movs	r3, #1
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2302      	movs	r3, #2
 800114e:	f00f fded 	bl	8010d2c <HAL_SPI_TransmitReceive>
 8001152:	4603      	mov	r3, r0
 8001154:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6858      	ldr	r0, [r3, #4]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	891b      	ldrh	r3, [r3, #8]
 800115e:	2201      	movs	r2, #1
 8001160:	4619      	mov	r1, r3
 8001162:	f00a fb35 	bl	800b7d0 <HAL_GPIO_WritePin>

	*data = rx_buf[1];
 8001166:	7c7a      	ldrb	r2, [r7, #17]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	701a      	strb	r2, [r3, #0]

	return status;
 800116c:	7dfb      	ldrb	r3, [r7, #23]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop

08001178 <LSM6DS3_WriteRegister>:


HAL_StatusTypeDef LSM6DS3_WriteRegister(LSM6DS3* sensor, uint8_t reg, uint8_t data)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
 8001184:	4613      	mov	r3, r2
 8001186:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buf[2] = {reg, data};
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	733b      	strb	r3, [r7, #12]
 800118c:	78bb      	ldrb	r3, [r7, #2]
 800118e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6858      	ldr	r0, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	891b      	ldrh	r3, [r3, #8]
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	f00a fb18 	bl	800b7d0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(sensor->spi, tx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	f107 010c 	add.w	r1, r7, #12
 80011a8:	2301      	movs	r3, #1
 80011aa:	2202      	movs	r2, #2
 80011ac:	f00f fbd0 	bl	8010950 <HAL_SPI_Transmit>
 80011b0:	4603      	mov	r3, r0
 80011b2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6858      	ldr	r0, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	891b      	ldrh	r3, [r3, #8]
 80011bc:	2201      	movs	r2, #1
 80011be:	4619      	mov	r1, r3
 80011c0:	f00a fb06 	bl	800b7d0 <HAL_GPIO_WritePin>

	return status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop

080011d0 <SPI_TxRx_Fast>:
/* this uses the SPI FIFO on the H7, so it only works for transactions 16 bytes or less */
/* (the FIFO size depends on the specific SPI channel too, so check the RM) */
/* On the H723, SPI1, 2, 3 have 16 byte FIFO and SPI4, 5, 6 have 8 bytes FIFO */
/* the peripheral is configured using Cube to have 8 bit data frames and 1 data frame FIFO threshold */
__attribute__((optimize("-Ofast"))) inline void SPI_TxRx_Fast(uint8_t* tx, uint8_t* rx, uint8_t len, SPI_TypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 80011d0:	b470      	push	{r4, r5, r6}
 80011d2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80011d6:	4684      	mov	ip, r0
 80011d8:	9c03      	ldr	r4, [sp, #12]
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 80011da:	042e      	lsls	r6, r5, #16


	/* If using both the HAL SPI functions and our own, we need the next 2 lines to put SPI in a known state */
	/* If only using our function, I think these could be omitted */
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 80011dc:	4816      	ldr	r0, [pc, #88]	@ (8001238 <SPI_TxRx_Fast+0x68>)
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 80011de:	61a6      	str	r6, [r4, #24]
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 80011e0:	685e      	ldr	r6, [r3, #4]
 80011e2:	4030      	ands	r0, r6
 80011e4:	6058      	str	r0, [r3, #4]
	spi->CFG2 &= ~SPI_CFG2_COMM;  /* this puts the SPI in full-duplex mode (for some reason the HAL takes it out of this mode sometimes, even when it is configured in Cube as full-duplex) */
 80011e6:	68d8      	ldr	r0, [r3, #12]
 80011e8:	f420 20c0 	bic.w	r0, r0, #393216	@ 0x60000
 80011ec:	60d8      	str	r0, [r3, #12]


	spi->CR1 |= SPI_CR1_SPE;  /* enable SPI */
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f040 0001 	orr.w	r0, r0, #1
 80011f4:	6018      	str	r0, [r3, #0]
	spi->CR1 |= SPI_CR1_CSTART;  /* start transmission */
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 80011fc:	6018      	str	r0, [r3, #0]

	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 80011fe:	b1a2      	cbz	r2, 800122a <SPI_TxRx_Fast+0x5a>
 8001200:	eb0c 0602 	add.w	r6, ip, r2
	{
		if(((spi->SR) & SPI_SR_TXP) == SPI_SR_TXP)  /* wait until TX FIFO has enough space for a data packet */
 8001204:	6958      	ldr	r0, [r3, #20]
 8001206:	0780      	lsls	r0, r0, #30
 8001208:	d5fc      	bpl.n	8001204 <SPI_TxRx_Fast+0x34>
		   *(__IO uint8_t*)&(spi->TXDR) = tx[i++];  /* put data in TXDR */
 800120a:	f81c 0b01 	ldrb.w	r0, [ip], #1
 800120e:	45b4      	cmp	ip, r6
 8001210:	f883 0020 	strb.w	r0, [r3, #32]
 8001214:	d1f6      	bne.n	8001204 <SPI_TxRx_Fast+0x34>
	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 8001216:	440a      	add	r2, r1
	}

	for (uint8_t i = 0; i < len; )  /* read out everything from the RX buffer */
	{
		if(((spi->SR) & SPI_SR_RXP) == SPI_SR_RXP)  /* wait until RX FIFO contains a data packet */
 8001218:	6958      	ldr	r0, [r3, #20]
 800121a:	07c0      	lsls	r0, r0, #31
 800121c:	d5fc      	bpl.n	8001218 <SPI_TxRx_Fast+0x48>
			rx[i++] = *(__IO uint8_t*)&(spi->RXDR);  /* read the data from RXDR */
 800121e:	f893 0030 	ldrb.w	r0, [r3, #48]	@ 0x30
 8001222:	f801 0b01 	strb.w	r0, [r1], #1
 8001226:	4291      	cmp	r1, r2
 8001228:	d1f6      	bne.n	8001218 <SPI_TxRx_Fast+0x48>
	}

	spi->CR1 &= ~SPI_CR1_SPE;  /* disable SPI */
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	f022 0201 	bic.w	r2, r2, #1
 8001230:	601a      	str	r2, [r3, #0]
	cs_port->BSRR = cs_pin;  /* CS high */
 8001232:	61a5      	str	r5, [r4, #24]
}
 8001234:	bc70      	pop	{r4, r5, r6}
 8001236:	4770      	bx	lr
 8001238:	ffff0000 	.word	0xffff0000

0800123c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 8001244:	4803      	ldr	r0, [pc, #12]	@ (8001254 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001246:	f004 fe8c 	bl	8005f62 <VibeCheckStrobe_PeriodElapsedUpdate>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	24011dac 	.word	0x24011dac

08001258 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 8001260:	4803      	ldr	r0, [pc, #12]	@ (8001270 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8001262:	f005 fc9f 	bl	8006ba4 <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	24011dcc 	.word	0x24011dcc

08001274 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 800127c:	4803      	ldr	r0, [pc, #12]	@ (800128c <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 800127e:	f005 fcad 	bl	8006bdc <VibeCheckWaveGen_DMACpltCallback>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	24011dcc 	.word	0x24011dcc

08001290 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
	VibeCheckSensor_EXTICallback(&vc.sensor, GPIO_Pin);
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	4619      	mov	r1, r3
 800129e:	4803      	ldr	r0, [pc, #12]	@ (80012ac <HAL_GPIO_EXTI_Callback+0x1c>)
 80012a0:	f003 fbc0 	bl	8004a24 <VibeCheckSensor_EXTICallback>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	24013398 	.word	0x24013398

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80012b6:	f000 ff23 	bl	8002100 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ba:	f005 ff8b 	bl	80071d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012be:	f000 f84d 	bl	800135c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012c2:	f000 f8bb 	bl	800143c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c6:	f000 fdbf 	bl	8001e48 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ca:	f000 fd8d 	bl	8001de8 <MX_DMA_Init>
  MX_DAC1_Init();
 80012ce:	f000 f9cb 	bl	8001668 <MX_DAC1_Init>
  MX_I2C2_Init();
 80012d2:	f000 fa05 	bl	80016e0 <MX_I2C2_Init>
  MX_SPI2_Init();
 80012d6:	f000 fa43 	bl	8001760 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012da:	f000 fa97 	bl	800180c <MX_SPI3_Init>
  MX_SPI4_Init();
 80012de:	f000 faeb 	bl	80018b8 <MX_SPI4_Init>
  MX_TIM4_Init();
 80012e2:	f000 fc6f 	bl	8001bc4 <MX_TIM4_Init>
  MX_TIM3_Init();
 80012e6:	f000 fbdf 	bl	8001aa8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012ea:	f000 fd31 	bl	8001d50 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80012ee:	f000 fb39 	bl	8001964 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012f2:	f000 fb8b 	bl	8001a0c <MX_TIM2_Init>
  MX_ADC1_Init();
 80012f6:	f000 f8d1 	bl	800149c <MX_ADC1_Init>
  MX_ADC2_Init();
 80012fa:	f000 f94b 	bl	8001594 <MX_ADC2_Init>
  MX_UART7_Init();
 80012fe:	f000 fcd9 	bl	8001cb4 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8001302:	f016 fd31 	bl	8017d68 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);  /* start the timer for sensor data time stamps */
 8001306:	480b      	ldr	r0, [pc, #44]	@ (8001334 <main+0x84>)
 8001308:	f010 f98a 	bl	8011620 <HAL_TIM_Base_Start>
  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1, &htim4, &(TIM2->CNT), &hspi2, &hspi3, &hspi4);
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <main+0x88>)
 800130e:	9304      	str	r3, [sp, #16]
 8001310:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <main+0x8c>)
 8001312:	9303      	str	r3, [sp, #12]
 8001314:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <main+0x90>)
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <main+0x94>)
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <main+0x98>)
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <main+0x9c>)
 8001322:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <main+0xa0>)
 8001324:	490b      	ldr	r1, [pc, #44]	@ (8001354 <main+0xa4>)
 8001326:	480c      	ldr	r0, [pc, #48]	@ (8001358 <main+0xa8>)
 8001328:	f001 fe40 	bl	8002fac <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 800132c:	480a      	ldr	r0, [pc, #40]	@ (8001358 <main+0xa8>)
 800132e:	f002 f813 	bl	8003358 <VibeCheck_Loop>
 8001332:	e7fb      	b.n	800132c <main+0x7c>
 8001334:	24000704 	.word	0x24000704
 8001338:	24000630 	.word	0x24000630
 800133c:	240005a8 	.word	0x240005a8
 8001340:	24000520 	.word	0x24000520
 8001344:	40000024 	.word	0x40000024
 8001348:	2400079c 	.word	0x2400079c
 800134c:	240003c8 	.word	0x240003c8
 8001350:	240006b8 	.word	0x240006b8
 8001354:	24000750 	.word	0x24000750
 8001358:	24000988 	.word	0x24000988

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b09c      	sub	sp, #112	@ 0x70
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001366:	224c      	movs	r2, #76	@ 0x4c
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f018 fdbd 	bl	8019eea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2220      	movs	r2, #32
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f018 fdb7 	bl	8019eea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800137c:	2002      	movs	r0, #2
 800137e:	f00b fe2d 	bl	800cfdc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b2c      	ldr	r3, [pc, #176]	@ (8001438 <SystemClock_Config+0xdc>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a2b      	ldr	r2, [pc, #172]	@ (8001438 <SystemClock_Config+0xdc>)
 800138c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001390:	6193      	str	r3, [r2, #24]
 8001392:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <SystemClock_Config+0xdc>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800139e:	bf00      	nop
 80013a0:	4b25      	ldr	r3, [pc, #148]	@ (8001438 <SystemClock_Config+0xdc>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013ac:	d1f8      	bne.n	80013a0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80013ae:	2321      	movs	r3, #33	@ 0x21
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013b8:	2301      	movs	r3, #1
 80013ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013bc:	2302      	movs	r3, #2
 80013be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c0:	2302      	movs	r3, #2
 80013c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013c8:	2328      	movs	r3, #40	@ 0x28
 80013ca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013d8:	230c      	movs	r3, #12
 80013da:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013dc:	2300      	movs	r3, #0
 80013de:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e8:	4618      	mov	r0, r3
 80013ea:	f00b fe41 	bl	800d070 <HAL_RCC_OscConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013f4:	f000 feb0 	bl	8002158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f8:	233f      	movs	r3, #63	@ 0x3f
 80013fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fc:	2303      	movs	r3, #3
 80013fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001404:	2308      	movs	r3, #8
 8001406:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001408:	2340      	movs	r3, #64	@ 0x40
 800140a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800140c:	2340      	movs	r3, #64	@ 0x40
 800140e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001414:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001416:	2340      	movs	r3, #64	@ 0x40
 8001418:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2103      	movs	r1, #3
 800141e:	4618      	mov	r0, r3
 8001420:	f00c fa00 	bl	800d824 <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800142a:	f000 fe95 	bl	8002158 <Error_Handler>
  }
}
 800142e:	bf00      	nop
 8001430:	3770      	adds	r7, #112	@ 0x70
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	58024800 	.word	0x58024800

0800143c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0ae      	sub	sp, #184	@ 0xb8
 8001440:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001442:	463b      	mov	r3, r7
 8001444:	22b8      	movs	r2, #184	@ 0xb8
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f018 fd4e 	bl	8019eea <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800144e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800145a:	2302      	movs	r3, #2
 800145c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800145e:	2310      	movs	r3, #16
 8001460:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001462:	2302      	movs	r3, #2
 8001464:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001466:	2302      	movs	r3, #2
 8001468:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800146e:	23c0      	movs	r3, #192	@ 0xc0
 8001470:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	4618      	mov	r0, r3
 8001484:	f00c fd5a 	bl	800df3c <HAL_RCCEx_PeriphCLKConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800148e:	f000 fe63 	bl	8002158 <Error_Handler>
  }
}
 8001492:	bf00      	nop
 8001494:	37b8      	adds	r7, #184	@ 0xb8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	@ 0x30
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014ae:	463b      	mov	r3, r7
 80014b0:	2224      	movs	r2, #36	@ 0x24
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f018 fd18 	bl	8019eea <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014ba:	4b32      	ldr	r3, [pc, #200]	@ (8001584 <MX_ADC1_Init+0xe8>)
 80014bc:	4a32      	ldr	r2, [pc, #200]	@ (8001588 <MX_ADC1_Init+0xec>)
 80014be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80014c0:	4b30      	ldr	r3, [pc, #192]	@ (8001584 <MX_ADC1_Init+0xe8>)
 80014c2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80014c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001584 <MX_ADC1_Init+0xe8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <MX_ADC1_Init+0xe8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001584 <MX_ADC1_Init+0xe8>)
 80014d6:	2204      	movs	r2, #4
 80014d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014da:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <MX_ADC1_Init+0xe8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014e0:	4b28      	ldr	r3, [pc, #160]	@ (8001584 <MX_ADC1_Init+0xe8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014e6:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <MX_ADC1_Init+0xe8>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ec:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <MX_ADC1_Init+0xe8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f4:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <MX_ADC1_Init+0xe8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <MX_ADC1_Init+0xe8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001500:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <MX_ADC1_Init+0xe8>)
 8001502:	2200      	movs	r2, #0
 8001504:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001506:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <MX_ADC1_Init+0xe8>)
 8001508:	2200      	movs	r2, #0
 800150a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800150c:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <MX_ADC1_Init+0xe8>)
 800150e:	2200      	movs	r2, #0
 8001510:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <MX_ADC1_Init+0xe8>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <MX_ADC1_Init+0xe8>)
 800151c:	2201      	movs	r2, #1
 800151e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001520:	4818      	ldr	r0, [pc, #96]	@ (8001584 <MX_ADC1_Init+0xe8>)
 8001522:	f006 f953 	bl	80077cc <HAL_ADC_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800152c:	f000 fe14 	bl	8002158 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	4812      	ldr	r0, [pc, #72]	@ (8001584 <MX_ADC1_Init+0xe8>)
 800153c:	f007 f992 	bl	8008864 <HAL_ADCEx_MultiModeConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001546:	f000 fe07 	bl	8002158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <MX_ADC1_Init+0xf0>)
 800154c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800154e:	2306      	movs	r3, #6
 8001550:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <MX_ADC1_Init+0xf4>)
 8001558:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800155a:	2304      	movs	r3, #4
 800155c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001568:	463b      	mov	r3, r7
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	@ (8001584 <MX_ADC1_Init+0xe8>)
 800156e:	f006 fb35 	bl	8007bdc <HAL_ADC_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001578:	f000 fdee 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	3730      	adds	r7, #48	@ 0x30
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	240002e8 	.word	0x240002e8
 8001588:	40022000 	.word	0x40022000
 800158c:	10c00010 	.word	0x10c00010
 8001590:	47ff0000 	.word	0x47ff0000

08001594 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	@ 0x28
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2224      	movs	r2, #36	@ 0x24
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f018 fca2 	bl	8019eea <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80015a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015a8:	4a2c      	ldr	r2, [pc, #176]	@ (800165c <MX_ADC2_Init+0xc8>)
 80015aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80015ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015ae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80015b4:	4b28      	ldr	r3, [pc, #160]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015ba:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c0:	4b25      	ldr	r3, [pc, #148]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015c2:	2204      	movs	r2, #4
 80015c4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015c6:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80015d2:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015f2:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015f8:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <MX_ADC2_Init+0xc4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80015fe:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <MX_ADC2_Init+0xc4>)
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001606:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <MX_ADC2_Init+0xc4>)
 8001608:	2201      	movs	r2, #1
 800160a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800160c:	4812      	ldr	r0, [pc, #72]	@ (8001658 <MX_ADC2_Init+0xc4>)
 800160e:	f006 f8dd 	bl	80077cc <HAL_ADC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001618:	f000 fd9e 	bl	8002158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800161c:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <MX_ADC2_Init+0xcc>)
 800161e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001620:	2306      	movs	r3, #6
 8001622:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <MX_ADC2_Init+0xd0>)
 800162a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800162c:	2304      	movs	r3, #4
 800162e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	@ (8001658 <MX_ADC2_Init+0xc4>)
 8001640:	f006 facc 	bl	8007bdc <HAL_ADC_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800164a:	f000 fd85 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	24000358 	.word	0x24000358
 800165c:	40022100 	.word	0x40022100
 8001660:	0c900008 	.word	0x0c900008
 8001664:	47ff0000 	.word	0x47ff0000

08001668 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2224      	movs	r2, #36	@ 0x24
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f018 fc38 	bl	8019eea <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800167a:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <MX_DAC1_Init+0x70>)
 800167c:	4a17      	ldr	r2, [pc, #92]	@ (80016dc <MX_DAC1_Init+0x74>)
 800167e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001680:	4815      	ldr	r0, [pc, #84]	@ (80016d8 <MX_DAC1_Init+0x70>)
 8001682:	f007 fb59 	bl	8008d38 <HAL_DAC_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800168c:	f000 fd64 	bl	8002158 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8001694:	2306      	movs	r3, #6
 8001696:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001698:	2302      	movs	r3, #2
 800169a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800169c:	2301      	movs	r3, #1
 800169e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	4619      	mov	r1, r3
 80016aa:	480b      	ldr	r0, [pc, #44]	@ (80016d8 <MX_DAC1_Init+0x70>)
 80016ac:	f007 fc30 	bl	8008f10 <HAL_DAC_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80016b6:	f000 fd4f 	bl	8002158 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2210      	movs	r2, #16
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <MX_DAC1_Init+0x70>)
 80016c2:	f007 fc25 	bl	8008f10 <HAL_DAC_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80016cc:	f000 fd44 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	@ 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	240003c8 	.word	0x240003c8
 80016dc:	40007400 	.word	0x40007400

080016e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <MX_I2C2_Init+0x74>)
 80016e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001758 <MX_I2C2_Init+0x78>)
 80016e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <MX_I2C2_Init+0x74>)
 80016ec:	4a1b      	ldr	r2, [pc, #108]	@ (800175c <MX_I2C2_Init+0x7c>)
 80016ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016f0:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <MX_I2C2_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <MX_I2C2_Init+0x74>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <MX_I2C2_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <MX_I2C2_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <MX_I2C2_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <MX_I2C2_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <MX_I2C2_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800171a:	480e      	ldr	r0, [pc, #56]	@ (8001754 <MX_I2C2_Init+0x74>)
 800171c:	f00a f88c 	bl	800b838 <HAL_I2C_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001726:	f000 fd17 	bl	8002158 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800172a:	2100      	movs	r1, #0
 800172c:	4809      	ldr	r0, [pc, #36]	@ (8001754 <MX_I2C2_Init+0x74>)
 800172e:	f00a f91f 	bl	800b970 <HAL_I2CEx_ConfigAnalogFilter>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001738:	f000 fd0e 	bl	8002158 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800173c:	2100      	movs	r1, #0
 800173e:	4805      	ldr	r0, [pc, #20]	@ (8001754 <MX_I2C2_Init+0x74>)
 8001740:	f00a f961 	bl	800ba06 <HAL_I2CEx_ConfigDigitalFilter>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800174a:	f000 fd05 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	240004cc 	.word	0x240004cc
 8001758:	40005800 	.word	0x40005800
 800175c:	307075b1 	.word	0x307075b1

08001760 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <MX_SPI2_Init+0xa4>)
 8001766:	4a28      	ldr	r2, [pc, #160]	@ (8001808 <MX_SPI2_Init+0xa8>)
 8001768:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800176a:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <MX_SPI2_Init+0xa4>)
 800176c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001770:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001772:	4b24      	ldr	r3, [pc, #144]	@ (8001804 <MX_SPI2_Init+0xa4>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001778:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <MX_SPI2_Init+0xa4>)
 800177a:	2207      	movs	r2, #7
 800177c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800177e:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <MX_SPI2_Init+0xa4>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <MX_SPI2_Init+0xa4>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <MX_SPI2_Init+0xa4>)
 800178c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001790:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001792:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <MX_SPI2_Init+0xa4>)
 8001794:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001798:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179a:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <MX_SPI2_Init+0xa4>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a0:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a6:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017ac:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017b2:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017ba:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017c0:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	@ (8001804 <MX_SPI2_Init+0xa4>)
 80017f2:	f00e ff89 	bl	8010708 <HAL_SPI_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80017fc:	f000 fcac 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	24000520 	.word	0x24000520
 8001808:	40003800 	.word	0x40003800

0800180c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001810:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001812:	4a28      	ldr	r2, [pc, #160]	@ (80018b4 <MX_SPI3_Init+0xa8>)
 8001814:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001816:	4b26      	ldr	r3, [pc, #152]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001818:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800181c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800181e:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001824:	4b22      	ldr	r3, [pc, #136]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001826:	2207      	movs	r2, #7
 8001828:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800182a:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001830:	4b1f      	ldr	r3, [pc, #124]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001836:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001838:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800183c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800183e:	4b1c      	ldr	r3, [pc, #112]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001840:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001844:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001846:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800184c:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001852:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001854:	2200      	movs	r2, #0
 8001856:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001858:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 800185a:	2200      	movs	r2, #0
 800185c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800185e:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001860:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001864:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001868:	2200      	movs	r2, #0
 800186a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800186c:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 800186e:	2200      	movs	r2, #0
 8001870:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001874:	2200      	movs	r2, #0
 8001876:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001878:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 800187a:	2200      	movs	r2, #0
 800187c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001880:	2200      	movs	r2, #0
 8001882:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001886:	2200      	movs	r2, #0
 8001888:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 800188c:	2200      	movs	r2, #0
 800188e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001890:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001892:	2200      	movs	r2, #0
 8001894:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 8001898:	2200      	movs	r2, #0
 800189a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <MX_SPI3_Init+0xa4>)
 800189e:	f00e ff33 	bl	8010708 <HAL_SPI_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80018a8:	f000 fc56 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	240005a8 	.word	0x240005a8
 80018b4:	40003c00 	.word	0x40003c00

080018b8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80018bc:	4b27      	ldr	r3, [pc, #156]	@ (800195c <MX_SPI4_Init+0xa4>)
 80018be:	4a28      	ldr	r2, [pc, #160]	@ (8001960 <MX_SPI4_Init+0xa8>)
 80018c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80018c2:	4b26      	ldr	r3, [pc, #152]	@ (800195c <MX_SPI4_Init+0xa4>)
 80018c4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80018ca:	4b24      	ldr	r3, [pc, #144]	@ (800195c <MX_SPI4_Init+0xa4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80018d0:	4b22      	ldr	r3, [pc, #136]	@ (800195c <MX_SPI4_Init+0xa4>)
 80018d2:	2207      	movs	r2, #7
 80018d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d6:	4b21      	ldr	r3, [pc, #132]	@ (800195c <MX_SPI4_Init+0xa4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <MX_SPI4_Init+0xa4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80018e2:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <MX_SPI4_Init+0xa4>)
 80018e4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <MX_SPI4_Init+0xa4>)
 80018ec:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80018f0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <MX_SPI4_Init+0xa4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f8:	4b18      	ldr	r3, [pc, #96]	@ (800195c <MX_SPI4_Init+0xa4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fe:	4b17      	ldr	r3, [pc, #92]	@ (800195c <MX_SPI4_Init+0xa4>)
 8001900:	2200      	movs	r2, #0
 8001902:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001904:	4b15      	ldr	r3, [pc, #84]	@ (800195c <MX_SPI4_Init+0xa4>)
 8001906:	2200      	movs	r2, #0
 8001908:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800190a:	4b14      	ldr	r3, [pc, #80]	@ (800195c <MX_SPI4_Init+0xa4>)
 800190c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001910:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001912:	4b12      	ldr	r3, [pc, #72]	@ (800195c <MX_SPI4_Init+0xa4>)
 8001914:	2200      	movs	r2, #0
 8001916:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001918:	4b10      	ldr	r3, [pc, #64]	@ (800195c <MX_SPI4_Init+0xa4>)
 800191a:	2200      	movs	r2, #0
 800191c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <MX_SPI4_Init+0xa4>)
 8001920:	2200      	movs	r2, #0
 8001922:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001924:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <MX_SPI4_Init+0xa4>)
 8001926:	2200      	movs	r2, #0
 8001928:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800192a:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <MX_SPI4_Init+0xa4>)
 800192c:	2200      	movs	r2, #0
 800192e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001930:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <MX_SPI4_Init+0xa4>)
 8001932:	2200      	movs	r2, #0
 8001934:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <MX_SPI4_Init+0xa4>)
 8001938:	2200      	movs	r2, #0
 800193a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800193c:	4b07      	ldr	r3, [pc, #28]	@ (800195c <MX_SPI4_Init+0xa4>)
 800193e:	2200      	movs	r2, #0
 8001940:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <MX_SPI4_Init+0xa4>)
 8001944:	2200      	movs	r2, #0
 8001946:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001948:	4804      	ldr	r0, [pc, #16]	@ (800195c <MX_SPI4_Init+0xa4>)
 800194a:	f00e fedd 	bl	8010708 <HAL_SPI_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001954:	f000 fc00 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	24000630 	.word	0x24000630
 8001960:	40013400 	.word	0x40013400

08001964 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001982:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <MX_TIM1_Init+0xa0>)
 8001984:	4a20      	ldr	r2, [pc, #128]	@ (8001a08 <MX_TIM1_Init+0xa4>)
 8001986:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001988:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <MX_TIM1_Init+0xa0>)
 800198a:	2200      	movs	r2, #0
 800198c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <MX_TIM1_Init+0xa0>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <MX_TIM1_Init+0xa0>)
 8001996:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800199a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <MX_TIM1_Init+0xa0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019a2:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <MX_TIM1_Init+0xa0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <MX_TIM1_Init+0xa0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019ae:	4815      	ldr	r0, [pc, #84]	@ (8001a04 <MX_TIM1_Init+0xa0>)
 80019b0:	f00f fddf 	bl	8011572 <HAL_TIM_Base_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80019ba:	f000 fbcd 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	4619      	mov	r1, r3
 80019ca:	480e      	ldr	r0, [pc, #56]	@ (8001a04 <MX_TIM1_Init+0xa0>)
 80019cc:	f010 fd90 	bl	80124f0 <HAL_TIM_ConfigClockSource>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80019d6:	f000 fbbf 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019da:	2320      	movs	r3, #32
 80019dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <MX_TIM1_Init+0xa0>)
 80019ec:	f011 fbd2 	bl	8013194 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80019f6:	f000 fbaf 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	3720      	adds	r7, #32
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	240006b8 	.word	0x240006b8
 8001a08:	40010000 	.word	0x40010000

08001a0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <MX_TIM2_Init+0x98>)
 8001a2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <MX_TIM2_Init+0x98>)
 8001a34:	22ef      	movs	r2, #239	@ 0xef
 8001a36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_TIM2_Init+0x98>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <MX_TIM2_Init+0x98>)
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <MX_TIM2_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <MX_TIM2_Init+0x98>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a52:	4814      	ldr	r0, [pc, #80]	@ (8001aa4 <MX_TIM2_Init+0x98>)
 8001a54:	f00f fd8d 	bl	8011572 <HAL_TIM_Base_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a5e:	f000 fb7b 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480d      	ldr	r0, [pc, #52]	@ (8001aa4 <MX_TIM2_Init+0x98>)
 8001a70:	f010 fd3e 	bl	80124f0 <HAL_TIM_ConfigClockSource>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a7a:	f000 fb6d 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a7e:	2320      	movs	r3, #32
 8001a80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	@ (8001aa4 <MX_TIM2_Init+0x98>)
 8001a8c:	f011 fb82 	bl	8013194 <HAL_TIMEx_MasterConfigSynchronization>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a96:	f000 fb5f 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	24000704 	.word	0x24000704

08001aa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08e      	sub	sp, #56	@ 0x38
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ada:	4b38      	ldr	r3, [pc, #224]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001adc:	4a38      	ldr	r2, [pc, #224]	@ (8001bc0 <MX_TIM3_Init+0x118>)
 8001ade:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ae0:	4b36      	ldr	r3, [pc, #216]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae6:	4b35      	ldr	r3, [pc, #212]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001aec:	4b33      	ldr	r3, [pc, #204]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001aee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001af2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af4:	4b31      	ldr	r3, [pc, #196]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afa:	4b30      	ldr	r3, [pc, #192]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b00:	482e      	ldr	r0, [pc, #184]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001b02:	f00f fd36 	bl	8011572 <HAL_TIM_Base_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b0c:	f000 fb24 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4827      	ldr	r0, [pc, #156]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001b1e:	f010 fce7 	bl	80124f0 <HAL_TIM_ConfigClockSource>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b28:	f000 fb16 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b2c:	4823      	ldr	r0, [pc, #140]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001b2e:	f00f fe7b 	bl	8011828 <HAL_TIM_PWM_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b38:	f000 fb0e 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481c      	ldr	r0, [pc, #112]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001b4c:	f011 fb22 	bl	8013194 <HAL_TIMEx_MasterConfigSynchronization>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b56:	f000 faff 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b5a:	2360      	movs	r3, #96	@ 0x60
 8001b5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4812      	ldr	r0, [pc, #72]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001b72:	f010 fba9 	bl	80122c8 <HAL_TIM_PWM_ConfigChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b7c:	f000 faec 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	2204      	movs	r2, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001b88:	f010 fb9e 	bl	80122c8 <HAL_TIM_PWM_ConfigChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001b92:	f000 fae1 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	2208      	movs	r2, #8
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4807      	ldr	r0, [pc, #28]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001b9e:	f010 fb93 	bl	80122c8 <HAL_TIM_PWM_ConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001ba8:	f000 fad6 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bac:	4803      	ldr	r0, [pc, #12]	@ (8001bbc <MX_TIM3_Init+0x114>)
 8001bae:	f000 fee1 	bl	8002974 <HAL_TIM_MspPostInit>

}
 8001bb2:	bf00      	nop
 8001bb4:	3738      	adds	r7, #56	@ 0x38
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	24000750 	.word	0x24000750
 8001bc0:	40000400 	.word	0x40000400

08001bc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	@ 0x38
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be4:	463b      	mov	r3, r7
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
 8001bf0:	611a      	str	r2, [r3, #16]
 8001bf2:	615a      	str	r2, [r3, #20]
 8001bf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8001cac <MX_TIM4_Init+0xe8>)
 8001bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb0 <MX_TIM4_Init+0xec>)
 8001bfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001cac <MX_TIM4_Init+0xe8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <MX_TIM4_Init+0xe8>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c08:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <MX_TIM4_Init+0xe8>)
 8001c0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <MX_TIM4_Init+0xe8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b25      	ldr	r3, [pc, #148]	@ (8001cac <MX_TIM4_Init+0xe8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c1c:	4823      	ldr	r0, [pc, #140]	@ (8001cac <MX_TIM4_Init+0xe8>)
 8001c1e:	f00f fca8 	bl	8011572 <HAL_TIM_Base_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001c28:	f000 fa96 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c36:	4619      	mov	r1, r3
 8001c38:	481c      	ldr	r0, [pc, #112]	@ (8001cac <MX_TIM4_Init+0xe8>)
 8001c3a:	f010 fc59 	bl	80124f0 <HAL_TIM_ConfigClockSource>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001c44:	f000 fa88 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c48:	4818      	ldr	r0, [pc, #96]	@ (8001cac <MX_TIM4_Init+0xe8>)
 8001c4a:	f00f fded 	bl	8011828 <HAL_TIM_PWM_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001c54:	f000 fa80 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4619      	mov	r1, r3
 8001c66:	4811      	ldr	r0, [pc, #68]	@ (8001cac <MX_TIM4_Init+0xe8>)
 8001c68:	f011 fa94 	bl	8013194 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001c72:	f000 fa71 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c76:	2360      	movs	r3, #96	@ 0x60
 8001c78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c86:	463b      	mov	r3, r7
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4807      	ldr	r0, [pc, #28]	@ (8001cac <MX_TIM4_Init+0xe8>)
 8001c8e:	f010 fb1b 	bl	80122c8 <HAL_TIM_PWM_ConfigChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001c98:	f000 fa5e 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c9c:	4803      	ldr	r0, [pc, #12]	@ (8001cac <MX_TIM4_Init+0xe8>)
 8001c9e:	f000 fe69 	bl	8002974 <HAL_TIM_MspPostInit>

}
 8001ca2:	bf00      	nop
 8001ca4:	3738      	adds	r7, #56	@ 0x38
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2400079c 	.word	0x2400079c
 8001cb0:	40000800 	.word	0x40000800

08001cb4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001cb8:	4b23      	ldr	r3, [pc, #140]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001cba:	4a24      	ldr	r2, [pc, #144]	@ (8001d4c <MX_UART7_Init+0x98>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001cbe:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b20      	ldr	r3, [pc, #128]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001cda:	220c      	movs	r2, #12
 8001cdc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001ce0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001ce4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce6:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cec:	4b16      	ldr	r3, [pc, #88]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cf2:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001cfe:	4812      	ldr	r0, [pc, #72]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001d00:	f011 fb02 	bl	8013308 <HAL_UART_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001d0a:	f000 fa25 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	480d      	ldr	r0, [pc, #52]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001d12:	f012 fc0e 	bl	8014532 <HAL_UARTEx_SetTxFifoThreshold>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001d1c:	f000 fa1c 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d20:	2100      	movs	r1, #0
 8001d22:	4809      	ldr	r0, [pc, #36]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001d24:	f012 fc43 	bl	80145ae <HAL_UARTEx_SetRxFifoThreshold>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001d2e:	f000 fa13 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <MX_UART7_Init+0x94>)
 8001d34:	f012 fbc4 	bl	80144c0 <HAL_UARTEx_DisableFifoMode>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001d3e:	f000 fa0b 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	24000860 	.word	0x24000860
 8001d4c:	40007800 	.word	0x40007800

08001d50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d54:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001d56:	4a23      	ldr	r2, [pc, #140]	@ (8001de4 <MX_USART1_UART_Init+0x94>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b19      	ldr	r3, [pc, #100]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d86:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d92:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d98:	4811      	ldr	r0, [pc, #68]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001d9a:	f011 fab5 	bl	8013308 <HAL_UART_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001da4:	f000 f9d8 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da8:	2100      	movs	r1, #0
 8001daa:	480d      	ldr	r0, [pc, #52]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001dac:	f012 fbc1 	bl	8014532 <HAL_UARTEx_SetTxFifoThreshold>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001db6:	f000 f9cf 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4808      	ldr	r0, [pc, #32]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001dbe:	f012 fbf6 	bl	80145ae <HAL_UARTEx_SetRxFifoThreshold>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001dc8:	f000 f9c6 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001dcc:	4804      	ldr	r0, [pc, #16]	@ (8001de0 <MX_USART1_UART_Init+0x90>)
 8001dce:	f012 fb77 	bl	80144c0 <HAL_UARTEx_DisableFifoMode>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001dd8:	f000 f9be 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	240008f4 	.word	0x240008f4
 8001de4:	40011000 	.word	0x40011000

08001de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <MX_DMA_Init+0x5c>)
 8001df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001df4:	4a13      	ldr	r2, [pc, #76]	@ (8001e44 <MX_DMA_Init+0x5c>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <MX_DMA_Init+0x5c>)
 8001e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	200b      	movs	r0, #11
 8001e12:	f006 fee4 	bl	8008bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e16:	200b      	movs	r0, #11
 8001e18:	f006 fefb 	bl	8008c12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	200c      	movs	r0, #12
 8001e22:	f006 fedc 	bl	8008bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e26:	200c      	movs	r0, #12
 8001e28:	f006 fef3 	bl	8008c12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	200d      	movs	r0, #13
 8001e32:	f006 fed4 	bl	8008bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e36:	200d      	movs	r0, #13
 8001e38:	f006 feeb 	bl	8008c12 <HAL_NVIC_EnableIRQ>

}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	58024400 	.word	0x58024400

08001e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	@ 0x30
 8001e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e5e:	4ba2      	ldr	r3, [pc, #648]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e64:	4aa0      	ldr	r2, [pc, #640]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001e66:	f043 0310 	orr.w	r3, r3, #16
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e6e:	4b9e      	ldr	r3, [pc, #632]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7c:	4b9a      	ldr	r3, [pc, #616]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e82:	4a99      	ldr	r2, [pc, #612]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e8c:	4b96      	ldr	r3, [pc, #600]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9a:	4b93      	ldr	r3, [pc, #588]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea0:	4a91      	ldr	r2, [pc, #580]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eaa:	4b8f      	ldr	r3, [pc, #572]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb8:	4b8b      	ldr	r3, [pc, #556]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebe:	4a8a      	ldr	r2, [pc, #552]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec8:	4b87      	ldr	r3, [pc, #540]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	4b84      	ldr	r3, [pc, #528]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001edc:	4a82      	ldr	r2, [pc, #520]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee6:	4b80      	ldr	r3, [pc, #512]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef4:	4b7c      	ldr	r3, [pc, #496]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efa:	4a7b      	ldr	r2, [pc, #492]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f04:	4b78      	ldr	r3, [pc, #480]	@ (80020e8 <MX_GPIO_Init+0x2a0>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS3_GPIO_Port, ACCEL_NCS3_Pin, GPIO_PIN_SET);
 8001f12:	2201      	movs	r2, #1
 8001f14:	2110      	movs	r1, #16
 8001f16:	4875      	ldr	r0, [pc, #468]	@ (80020ec <MX_GPIO_Init+0x2a4>)
 8001f18:	f009 fc5a 	bl	800b7d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2104      	movs	r1, #4
 8001f20:	4873      	ldr	r0, [pc, #460]	@ (80020f0 <MX_GPIO_Init+0x2a8>)
 8001f22:	f009 fc55 	bl	800b7d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2101      	movs	r1, #1
 8001f2a:	4872      	ldr	r0, [pc, #456]	@ (80020f4 <MX_GPIO_Init+0x2ac>)
 8001f2c:	f009 fc50 	bl	800b7d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001f30:	2201      	movs	r2, #1
 8001f32:	210a      	movs	r1, #10
 8001f34:	486f      	ldr	r0, [pc, #444]	@ (80020f4 <MX_GPIO_Init+0x2ac>)
 8001f36:	f009 fc4b 	bl	800b7d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS1_GPIO_Port, ACCEL_NCS1_Pin, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f40:	486d      	ldr	r0, [pc, #436]	@ (80020f8 <MX_GPIO_Init+0x2b0>)
 8001f42:	f009 fc45 	bl	800b7d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS2_GPIO_Port, ACCEL_NCS2_Pin, GPIO_PIN_SET);
 8001f46:	2201      	movs	r2, #1
 8001f48:	2101      	movs	r1, #1
 8001f4a:	486c      	ldr	r0, [pc, #432]	@ (80020fc <MX_GPIO_Init+0x2b4>)
 8001f4c:	f009 fc40 	bl	800b7d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f56:	4868      	ldr	r0, [pc, #416]	@ (80020f8 <MX_GPIO_Init+0x2b0>)
 8001f58:	f009 fc3a 	bl	800b7d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACCEL_INTA3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA3_Pin;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTA3_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	485e      	ldr	r0, [pc, #376]	@ (80020ec <MX_GPIO_Init+0x2a4>)
 8001f72:	f009 fa6d 	bl	800b450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS3_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS3_Pin;
 8001f76:	2310      	movs	r3, #16
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f82:	2303      	movs	r3, #3
 8001f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS3_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4857      	ldr	r0, [pc, #348]	@ (80020ec <MX_GPIO_Init+0x2a4>)
 8001f8e:	f009 fa5f 	bl	800b450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INTB3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTB3_Pin;
 8001f92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTB3_GPIO_Port, &GPIO_InitStruct);
 8001fa2:	f107 031c 	add.w	r3, r7, #28
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4851      	ldr	r0, [pc, #324]	@ (80020f0 <MX_GPIO_Init+0x2a8>)
 8001faa:	f009 fa51 	bl	800b450 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	484a      	ldr	r0, [pc, #296]	@ (80020f0 <MX_GPIO_Init+0x2a8>)
 8001fc6:	f009 fa43 	bl	800b450 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8001fca:	230b      	movs	r3, #11
 8001fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4844      	ldr	r0, [pc, #272]	@ (80020f4 <MX_GPIO_Init+0x2ac>)
 8001fe2:	f009 fa35 	bl	800b450 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 8001fe6:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	483e      	ldr	r0, [pc, #248]	@ (80020f4 <MX_GPIO_Init+0x2ac>)
 8001ffc:	f009 fa28 	bl	800b450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS1_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin;
 8002000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	2301      	movs	r3, #1
 8002008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS1_GPIO_Port, &GPIO_InitStruct);
 8002012:	f107 031c 	add.w	r3, r7, #28
 8002016:	4619      	mov	r1, r3
 8002018:	4837      	ldr	r0, [pc, #220]	@ (80020f8 <MX_GPIO_Init+0x2b0>)
 800201a:	f009 fa19 	bl	800b450 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin ACCEL_INTA2_Pin ACCEL_INTB2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|ACCEL_INTA2_Pin|ACCEL_INTB2_Pin;
 800201e:	f240 3306 	movw	r3, #774	@ 0x306
 8002022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002024:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	4831      	ldr	r0, [pc, #196]	@ (80020fc <MX_GPIO_Init+0x2b4>)
 8002036:	f009 fa0b 	bl	800b450 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_EXT_Pin */
  GPIO_InitStruct.Pin = DAC_EXT_Pin;
 800203a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800203e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002040:	2300      	movs	r3, #0
 8002042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAC_EXT_GPIO_Port, &GPIO_InitStruct);
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	4619      	mov	r1, r3
 800204e:	4828      	ldr	r0, [pc, #160]	@ (80020f0 <MX_GPIO_Init+0x2a8>)
 8002050:	f009 f9fe 	bl	800b450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS2_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS2_Pin;
 8002054:	2301      	movs	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002058:	2301      	movs	r3, #1
 800205a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS2_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4824      	ldr	r0, [pc, #144]	@ (80020fc <MX_GPIO_Init+0x2b4>)
 800206c:	f009 f9f0 	bl	800b450 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = RECORD_INDICATOR_Pin;
 8002070:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002076:	2301      	movs	r3, #1
 8002078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RECORD_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	4619      	mov	r1, r3
 8002088:	481b      	ldr	r0, [pc, #108]	@ (80020f8 <MX_GPIO_Init+0x2b0>)
 800208a:	f009 f9e1 	bl	800b450 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2007      	movs	r0, #7
 8002094:	f006 fda3 	bl	8008bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002098:	2007      	movs	r0, #7
 800209a:	f006 fdba 	bl	8008c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2008      	movs	r0, #8
 80020a4:	f006 fd9b 	bl	8008bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80020a8:	2008      	movs	r0, #8
 80020aa:	f006 fdb2 	bl	8008c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2009      	movs	r0, #9
 80020b4:	f006 fd93 	bl	8008bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80020b8:	2009      	movs	r0, #9
 80020ba:	f006 fdaa 	bl	8008c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2017      	movs	r0, #23
 80020c4:	f006 fd8b 	bl	8008bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020c8:	2017      	movs	r0, #23
 80020ca:	f006 fda2 	bl	8008c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2028      	movs	r0, #40	@ 0x28
 80020d4:	f006 fd83 	bl	8008bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020d8:	2028      	movs	r0, #40	@ 0x28
 80020da:	f006 fd9a 	bl	8008c12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020de:	bf00      	nop
 80020e0:	3730      	adds	r7, #48	@ 0x30
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58021000 	.word	0x58021000
 80020f0:	58020800 	.word	0x58020800
 80020f4:	58020000 	.word	0x58020000
 80020f8:	58020400 	.word	0x58020400
 80020fc:	58020c00 	.word	0x58020c00

08002100 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002106:	463b      	mov	r3, r7
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002112:	f006 fd99 	bl	8008c48 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002116:	2301      	movs	r3, #1
 8002118:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800211a:	2300      	movs	r3, #0
 800211c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002122:	231f      	movs	r3, #31
 8002124:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002126:	2387      	movs	r3, #135	@ 0x87
 8002128:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800212a:	2300      	movs	r3, #0
 800212c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800212e:	2300      	movs	r3, #0
 8002130:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002132:	2301      	movs	r3, #1
 8002134:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002136:	2301      	movs	r3, #1
 8002138:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002142:	463b      	mov	r3, r7
 8002144:	4618      	mov	r0, r3
 8002146:	f006 fdb7 	bl	8008cb8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800214a:	2004      	movs	r0, #4
 800214c:	f006 fd94 	bl	8008c78 <HAL_MPU_Enable>

}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800215c:	b672      	cpsid	i
}
 800215e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <Error_Handler+0x8>

08002164 <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	745a      	strb	r2, [r3, #17]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	745a      	strb	r2, [r3, #17]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	7c1b      	ldrb	r3, [r3, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d030      	beq.n	800223e <Sequencer_Update+0x76>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d02c      	beq.n	800223e <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d927      	bls.n	800223e <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6819      	ldr	r1, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	441a      	add	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d10a      	bne.n	800223a <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	7c5b      	ldrb	r3, [r3, #17]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	e002      	b.n	800223a <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <Sequencer_Update+0x78>
		}
	}

	return 0;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	741a      	strb	r2, [r3, #16]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	741a      	strb	r2, [r3, #16]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <Sequencer_IsRunning>:

uint32_t Sequencer_IsRunning(Sequencer* sequencer)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
	return sequencer->is_running;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7c1b      	ldrb	r3, [r3, #16]
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <HAL_MspInit+0x30>)
 80022b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022b4:	4a08      	ldr	r2, [pc, #32]	@ (80022d8 <HAL_MspInit+0x30>)
 80022b6:	f043 0302 	orr.w	r3, r3, #2
 80022ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022be:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_MspInit+0x30>)
 80022c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	58024400 	.word	0x58024400

080022dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	@ 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a39      	ldr	r2, [pc, #228]	@ (80023e0 <HAL_ADC_MspInit+0x104>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d133      	bne.n	8002366 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80022fe:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <HAL_ADC_MspInit+0x108>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	4a37      	ldr	r2, [pc, #220]	@ (80023e4 <HAL_ADC_MspInit+0x108>)
 8002306:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002308:	4b36      	ldr	r3, [pc, #216]	@ (80023e4 <HAL_ADC_MspInit+0x108>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d10e      	bne.n	800232e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002310:	4b35      	ldr	r3, [pc, #212]	@ (80023e8 <HAL_ADC_MspInit+0x10c>)
 8002312:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002316:	4a34      	ldr	r2, [pc, #208]	@ (80023e8 <HAL_ADC_MspInit+0x10c>)
 8002318:	f043 0320 	orr.w	r3, r3, #32
 800231c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002320:	4b31      	ldr	r3, [pc, #196]	@ (80023e8 <HAL_ADC_MspInit+0x10c>)
 8002322:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232e:	4b2e      	ldr	r3, [pc, #184]	@ (80023e8 <HAL_ADC_MspInit+0x10c>)
 8002330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002334:	4a2c      	ldr	r2, [pc, #176]	@ (80023e8 <HAL_ADC_MspInit+0x10c>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800233e:	4b2a      	ldr	r3, [pc, #168]	@ (80023e8 <HAL_ADC_MspInit+0x10c>)
 8002340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800234c:	2330      	movs	r3, #48	@ 0x30
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002350:	2303      	movs	r3, #3
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002358:	f107 031c 	add.w	r3, r7, #28
 800235c:	4619      	mov	r1, r3
 800235e:	4823      	ldr	r0, [pc, #140]	@ (80023ec <HAL_ADC_MspInit+0x110>)
 8002360:	f009 f876 	bl	800b450 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002364:	e037      	b.n	80023d6 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a21      	ldr	r2, [pc, #132]	@ (80023f0 <HAL_ADC_MspInit+0x114>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d132      	bne.n	80023d6 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002370:	4b1c      	ldr	r3, [pc, #112]	@ (80023e4 <HAL_ADC_MspInit+0x108>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3301      	adds	r3, #1
 8002376:	4a1b      	ldr	r2, [pc, #108]	@ (80023e4 <HAL_ADC_MspInit+0x108>)
 8002378:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800237a:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <HAL_ADC_MspInit+0x108>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d10e      	bne.n	80023a0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002382:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <HAL_ADC_MspInit+0x10c>)
 8002384:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002388:	4a17      	ldr	r2, [pc, #92]	@ (80023e8 <HAL_ADC_MspInit+0x10c>)
 800238a:	f043 0320 	orr.w	r3, r3, #32
 800238e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002392:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <HAL_ADC_MspInit+0x10c>)
 8002394:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <HAL_ADC_MspInit+0x10c>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a6:	4a10      	ldr	r2, [pc, #64]	@ (80023e8 <HAL_ADC_MspInit+0x10c>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023b0:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <HAL_ADC_MspInit+0x10c>)
 80023b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023be:	23c0      	movs	r3, #192	@ 0xc0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023c2:	2303      	movs	r3, #3
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4619      	mov	r1, r3
 80023d0:	4808      	ldr	r0, [pc, #32]	@ (80023f4 <HAL_ADC_MspInit+0x118>)
 80023d2:	f009 f83d 	bl	800b450 <HAL_GPIO_Init>
}
 80023d6:	bf00      	nop
 80023d8:	3730      	adds	r7, #48	@ 0x30
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000
 80023e4:	24013678 	.word	0x24013678
 80023e8:	58024400 	.word	0x58024400
 80023ec:	58020800 	.word	0x58020800
 80023f0:	40022100 	.word	0x40022100
 80023f4:	58020000 	.word	0x58020000

080023f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	@ 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a48      	ldr	r2, [pc, #288]	@ (8002538 <HAL_DAC_MspInit+0x140>)
 8002416:	4293      	cmp	r3, r2
 8002418:	f040 808a 	bne.w	8002530 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800241c:	4b47      	ldr	r3, [pc, #284]	@ (800253c <HAL_DAC_MspInit+0x144>)
 800241e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002422:	4a46      	ldr	r2, [pc, #280]	@ (800253c <HAL_DAC_MspInit+0x144>)
 8002424:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002428:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800242c:	4b43      	ldr	r3, [pc, #268]	@ (800253c <HAL_DAC_MspInit+0x144>)
 800242e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002432:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243a:	4b40      	ldr	r3, [pc, #256]	@ (800253c <HAL_DAC_MspInit+0x144>)
 800243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002440:	4a3e      	ldr	r2, [pc, #248]	@ (800253c <HAL_DAC_MspInit+0x144>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800244a:	4b3c      	ldr	r3, [pc, #240]	@ (800253c <HAL_DAC_MspInit+0x144>)
 800244c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002458:	2330      	movs	r3, #48	@ 0x30
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800245c:	2303      	movs	r3, #3
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	4835      	ldr	r0, [pc, #212]	@ (8002540 <HAL_DAC_MspInit+0x148>)
 800246c:	f008 fff0 	bl	800b450 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8002470:	4b34      	ldr	r3, [pc, #208]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 8002472:	4a35      	ldr	r2, [pc, #212]	@ (8002548 <HAL_DAC_MspInit+0x150>)
 8002474:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002476:	4b33      	ldr	r3, [pc, #204]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 8002478:	2243      	movs	r2, #67	@ 0x43
 800247a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800247c:	4b31      	ldr	r3, [pc, #196]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 800247e:	2240      	movs	r2, #64	@ 0x40
 8002480:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002482:	4b30      	ldr	r3, [pc, #192]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002488:	4b2e      	ldr	r3, [pc, #184]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 800248a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800248e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002490:	4b2c      	ldr	r3, [pc, #176]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 8002492:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002496:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002498:	4b2a      	ldr	r3, [pc, #168]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 800249a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800249e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80024a0:	4b28      	ldr	r3, [pc, #160]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 80024a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024a6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80024a8:	4b26      	ldr	r3, [pc, #152]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ae:	4b25      	ldr	r3, [pc, #148]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80024b4:	4823      	ldr	r0, [pc, #140]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 80024b6:	f006 fef7 	bl	80092a8 <HAL_DMA_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 80024c0:	f7ff fe4a 	bl	8002158 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002544 <HAL_DAC_MspInit+0x14c>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 80024d0:	4b1e      	ldr	r3, [pc, #120]	@ (800254c <HAL_DAC_MspInit+0x154>)
 80024d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002550 <HAL_DAC_MspInit+0x158>)
 80024d4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 80024d6:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <HAL_DAC_MspInit+0x154>)
 80024d8:	2244      	movs	r2, #68	@ 0x44
 80024da:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <HAL_DAC_MspInit+0x154>)
 80024de:	2240      	movs	r2, #64	@ 0x40
 80024e0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e2:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <HAL_DAC_MspInit+0x154>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80024e8:	4b18      	ldr	r3, [pc, #96]	@ (800254c <HAL_DAC_MspInit+0x154>)
 80024ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ee:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024f0:	4b16      	ldr	r3, [pc, #88]	@ (800254c <HAL_DAC_MspInit+0x154>)
 80024f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024f6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024f8:	4b14      	ldr	r3, [pc, #80]	@ (800254c <HAL_DAC_MspInit+0x154>)
 80024fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024fe:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8002500:	4b12      	ldr	r3, [pc, #72]	@ (800254c <HAL_DAC_MspInit+0x154>)
 8002502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002506:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002508:	4b10      	ldr	r3, [pc, #64]	@ (800254c <HAL_DAC_MspInit+0x154>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800250e:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <HAL_DAC_MspInit+0x154>)
 8002510:	2200      	movs	r2, #0
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8002514:	480d      	ldr	r0, [pc, #52]	@ (800254c <HAL_DAC_MspInit+0x154>)
 8002516:	f006 fec7 	bl	80092a8 <HAL_DMA_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8002520:	f7ff fe1a 	bl	8002158 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a09      	ldr	r2, [pc, #36]	@ (800254c <HAL_DAC_MspInit+0x154>)
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	4a08      	ldr	r2, [pc, #32]	@ (800254c <HAL_DAC_MspInit+0x154>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002530:	bf00      	nop
 8002532:	3728      	adds	r7, #40	@ 0x28
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40007400 	.word	0x40007400
 800253c:	58024400 	.word	0x58024400
 8002540:	58020000 	.word	0x58020000
 8002544:	240003dc 	.word	0x240003dc
 8002548:	40020010 	.word	0x40020010
 800254c:	24000454 	.word	0x24000454
 8002550:	40020028 	.word	0x40020028

08002554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0b8      	sub	sp, #224	@ 0xe0
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800256c:	f107 0310 	add.w	r3, r7, #16
 8002570:	22b8      	movs	r2, #184	@ 0xb8
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f017 fcb8 	bl	8019eea <memset>
  if(hi2c->Instance==I2C2)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a27      	ldr	r2, [pc, #156]	@ (800261c <HAL_I2C_MspInit+0xc8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d146      	bne.n	8002612 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002584:	f04f 0208 	mov.w	r2, #8
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002596:	f107 0310 	add.w	r3, r7, #16
 800259a:	4618      	mov	r0, r3
 800259c:	f00b fcce 	bl	800df3c <HAL_RCCEx_PeriphCLKConfig>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80025a6:	f7ff fdd7 	bl	8002158 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <HAL_I2C_MspInit+0xcc>)
 80025ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <HAL_I2C_MspInit+0xcc>)
 80025b2:	f043 0302 	orr.w	r3, r3, #2
 80025b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_I2C_MspInit+0xcc>)
 80025bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d0:	2312      	movs	r3, #18
 80025d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025e2:	2304      	movs	r3, #4
 80025e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025ec:	4619      	mov	r1, r3
 80025ee:	480d      	ldr	r0, [pc, #52]	@ (8002624 <HAL_I2C_MspInit+0xd0>)
 80025f0:	f008 ff2e 	bl	800b450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <HAL_I2C_MspInit+0xcc>)
 80025f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025fa:	4a09      	ldr	r2, [pc, #36]	@ (8002620 <HAL_I2C_MspInit+0xcc>)
 80025fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002600:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002604:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_I2C_MspInit+0xcc>)
 8002606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800260a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002612:	bf00      	nop
 8002614:	37e0      	adds	r7, #224	@ 0xe0
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40005800 	.word	0x40005800
 8002620:	58024400 	.word	0x58024400
 8002624:	58020400 	.word	0x58020400

08002628 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0bc      	sub	sp, #240	@ 0xf0
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002640:	f107 0320 	add.w	r3, r7, #32
 8002644:	22b8      	movs	r2, #184	@ 0xb8
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f017 fc4e 	bl	8019eea <memset>
  if(hspi->Instance==SPI2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a72      	ldr	r2, [pc, #456]	@ (800281c <HAL_SPI_MspInit+0x1f4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d146      	bne.n	80026e6 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002658:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002664:	2300      	movs	r3, #0
 8002666:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002668:	f107 0320 	add.w	r3, r7, #32
 800266c:	4618      	mov	r0, r3
 800266e:	f00b fc65 	bl	800df3c <HAL_RCCEx_PeriphCLKConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002678:	f7ff fd6e 	bl	8002158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800267c:	4b68      	ldr	r3, [pc, #416]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 800267e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002682:	4a67      	ldr	r2, [pc, #412]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 8002684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002688:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800268c:	4b64      	ldr	r3, [pc, #400]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 800268e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269a:	4b61      	ldr	r3, [pc, #388]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 800269c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a0:	4a5f      	ldr	r2, [pc, #380]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 80026ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 80026b8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80026bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026d2:	2305      	movs	r3, #5
 80026d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80026dc:	4619      	mov	r1, r3
 80026de:	4851      	ldr	r0, [pc, #324]	@ (8002824 <HAL_SPI_MspInit+0x1fc>)
 80026e0:	f008 feb6 	bl	800b450 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80026e4:	e096      	b.n	8002814 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002828 <HAL_SPI_MspInit+0x200>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d146      	bne.n	800277e <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80026f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002700:	f107 0320 	add.w	r3, r7, #32
 8002704:	4618      	mov	r0, r3
 8002706:	f00b fc19 	bl	800df3c <HAL_RCCEx_PeriphCLKConfig>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8002710:	f7ff fd22 	bl	8002158 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002714:	4b42      	ldr	r3, [pc, #264]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 8002716:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800271a:	4a41      	ldr	r2, [pc, #260]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 800271c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002720:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002724:	4b3e      	ldr	r3, [pc, #248]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 8002726:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800272a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002732:	4b3b      	ldr	r3, [pc, #236]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 8002734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002738:	4a39      	ldr	r2, [pc, #228]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 800273a:	f043 0304 	orr.w	r3, r3, #4
 800273e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002742:	4b37      	ldr	r3, [pc, #220]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 8002744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ACCEL_SCK2_Pin|ACCEL_MISO2_Pin|ACCEL_MOSI2_Pin;
 8002750:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002754:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800276a:	2306      	movs	r3, #6
 800276c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002770:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002774:	4619      	mov	r1, r3
 8002776:	482d      	ldr	r0, [pc, #180]	@ (800282c <HAL_SPI_MspInit+0x204>)
 8002778:	f008 fe6a 	bl	800b450 <HAL_GPIO_Init>
}
 800277c:	e04a      	b.n	8002814 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2b      	ldr	r2, [pc, #172]	@ (8002830 <HAL_SPI_MspInit+0x208>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d145      	bne.n	8002814 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002788:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800279a:	f107 0320 	add.w	r3, r7, #32
 800279e:	4618      	mov	r0, r3
 80027a0:	f00b fbcc 	bl	800df3c <HAL_RCCEx_PeriphCLKConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_SPI_MspInit+0x186>
      Error_Handler();
 80027aa:	f7ff fcd5 	bl	8002158 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80027ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 80027b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 80027b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027be:	4b18      	ldr	r3, [pc, #96]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 80027c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027cc:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 80027ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d2:	4a13      	ldr	r2, [pc, #76]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 80027d4:	f043 0310 	orr.w	r3, r3, #16
 80027d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027dc:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <HAL_SPI_MspInit+0x1f8>)
 80027de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_SCK3_Pin|ACCEL_MISO3_Pin|ACCEL_MOSI3_Pin;
 80027ea:	2364      	movs	r3, #100	@ 0x64
 80027ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002802:	2305      	movs	r3, #5
 8002804:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002808:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800280c:	4619      	mov	r1, r3
 800280e:	4809      	ldr	r0, [pc, #36]	@ (8002834 <HAL_SPI_MspInit+0x20c>)
 8002810:	f008 fe1e 	bl	800b450 <HAL_GPIO_Init>
}
 8002814:	bf00      	nop
 8002816:	37f0      	adds	r7, #240	@ 0xf0
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40003800 	.word	0x40003800
 8002820:	58024400 	.word	0x58024400
 8002824:	58020400 	.word	0x58020400
 8002828:	40003c00 	.word	0x40003c00
 800282c:	58020800 	.word	0x58020800
 8002830:	40013400 	.word	0x40013400
 8002834:	58021000 	.word	0x58021000

08002838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a45      	ldr	r2, [pc, #276]	@ (800295c <HAL_TIM_Base_MspInit+0x124>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10f      	bne.n	800286a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800284a:	4b45      	ldr	r3, [pc, #276]	@ (8002960 <HAL_TIM_Base_MspInit+0x128>)
 800284c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002850:	4a43      	ldr	r2, [pc, #268]	@ (8002960 <HAL_TIM_Base_MspInit+0x128>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800285a:	4b41      	ldr	r3, [pc, #260]	@ (8002960 <HAL_TIM_Base_MspInit+0x128>)
 800285c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002868:	e074      	b.n	8002954 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002872:	d10f      	bne.n	8002894 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002874:	4b3a      	ldr	r3, [pc, #232]	@ (8002960 <HAL_TIM_Base_MspInit+0x128>)
 8002876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800287a:	4a39      	ldr	r2, [pc, #228]	@ (8002960 <HAL_TIM_Base_MspInit+0x128>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002884:	4b36      	ldr	r3, [pc, #216]	@ (8002960 <HAL_TIM_Base_MspInit+0x128>)
 8002886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
}
 8002892:	e05f      	b.n	8002954 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a32      	ldr	r2, [pc, #200]	@ (8002964 <HAL_TIM_Base_MspInit+0x12c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d117      	bne.n	80028ce <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800289e:	4b30      	ldr	r3, [pc, #192]	@ (8002960 <HAL_TIM_Base_MspInit+0x128>)
 80028a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002960 <HAL_TIM_Base_MspInit+0x128>)
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002960 <HAL_TIM_Base_MspInit+0x128>)
 80028b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	201d      	movs	r0, #29
 80028c2:	f006 f98c 	bl	8008bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028c6:	201d      	movs	r0, #29
 80028c8:	f006 f9a3 	bl	8008c12 <HAL_NVIC_EnableIRQ>
}
 80028cc:	e042      	b.n	8002954 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a25      	ldr	r2, [pc, #148]	@ (8002968 <HAL_TIM_Base_MspInit+0x130>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d13d      	bne.n	8002954 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028d8:	4b21      	ldr	r3, [pc, #132]	@ (8002960 <HAL_TIM_Base_MspInit+0x128>)
 80028da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028de:	4a20      	ldr	r2, [pc, #128]	@ (8002960 <HAL_TIM_Base_MspInit+0x128>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <HAL_TIM_Base_MspInit+0x128>)
 80028ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 80028f6:	4b1d      	ldr	r3, [pc, #116]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 80028f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002970 <HAL_TIM_Base_MspInit+0x138>)
 80028fa:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 80028fc:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 80028fe:	221d      	movs	r2, #29
 8002900:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002902:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 8002904:	2240      	movs	r2, #64	@ 0x40
 8002906:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002908:	4b18      	ldr	r3, [pc, #96]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800290e:	4b17      	ldr	r3, [pc, #92]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 8002910:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002914:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 8002918:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800291c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800291e:	4b13      	ldr	r3, [pc, #76]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 8002920:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002924:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002926:	4b11      	ldr	r3, [pc, #68]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 8002928:	2200      	movs	r2, #0
 800292a:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800292c:	4b0f      	ldr	r3, [pc, #60]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 800292e:	2200      	movs	r2, #0
 8002930:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002932:	4b0e      	ldr	r3, [pc, #56]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 8002934:	2200      	movs	r2, #0
 8002936:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002938:	480c      	ldr	r0, [pc, #48]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 800293a:	f006 fcb5 	bl	80092a8 <HAL_DMA_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 8002944:	f7ff fc08 	bl	8002158 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a08      	ldr	r2, [pc, #32]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24
 800294e:	4a07      	ldr	r2, [pc, #28]	@ (800296c <HAL_TIM_Base_MspInit+0x134>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002954:	bf00      	nop
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40010000 	.word	0x40010000
 8002960:	58024400 	.word	0x58024400
 8002964:	40000400 	.word	0x40000400
 8002968:	40000800 	.word	0x40000800
 800296c:	240007e8 	.word	0x240007e8
 8002970:	40020040 	.word	0x40020040

08002974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	@ 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a26      	ldr	r2, [pc, #152]	@ (8002a2c <HAL_TIM_MspPostInit+0xb8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d120      	bne.n	80029d8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002996:	4b26      	ldr	r3, [pc, #152]	@ (8002a30 <HAL_TIM_MspPostInit+0xbc>)
 8002998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800299c:	4a24      	ldr	r2, [pc, #144]	@ (8002a30 <HAL_TIM_MspPostInit+0xbc>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029a6:	4b22      	ldr	r3, [pc, #136]	@ (8002a30 <HAL_TIM_MspPostInit+0xbc>)
 80029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 80029b4:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80029b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ba:	2302      	movs	r3, #2
 80029bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029c6:	2302      	movs	r3, #2
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ca:	f107 0314 	add.w	r3, r7, #20
 80029ce:	4619      	mov	r1, r3
 80029d0:	4818      	ldr	r0, [pc, #96]	@ (8002a34 <HAL_TIM_MspPostInit+0xc0>)
 80029d2:	f008 fd3d 	bl	800b450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029d6:	e024      	b.n	8002a22 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a16      	ldr	r2, [pc, #88]	@ (8002a38 <HAL_TIM_MspPostInit+0xc4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d11f      	bne.n	8002a22 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029e2:	4b13      	ldr	r3, [pc, #76]	@ (8002a30 <HAL_TIM_MspPostInit+0xbc>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e8:	4a11      	ldr	r2, [pc, #68]	@ (8002a30 <HAL_TIM_MspPostInit+0xbc>)
 80029ea:	f043 0308 	orr.w	r3, r3, #8
 80029ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a30 <HAL_TIM_MspPostInit+0xbc>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8002a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a12:	2302      	movs	r3, #2
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4807      	ldr	r0, [pc, #28]	@ (8002a3c <HAL_TIM_MspPostInit+0xc8>)
 8002a1e:	f008 fd17 	bl	800b450 <HAL_GPIO_Init>
}
 8002a22:	bf00      	nop
 8002a24:	3728      	adds	r7, #40	@ 0x28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	58024400 	.word	0x58024400
 8002a34:	58020800 	.word	0x58020800
 8002a38:	40000800 	.word	0x40000800
 8002a3c:	58020c00 	.word	0x58020c00

08002a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b0ba      	sub	sp, #232	@ 0xe8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	22b8      	movs	r2, #184	@ 0xb8
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f017 fa42 	bl	8019eea <memset>
  if(huart->Instance==UART7)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a4d      	ldr	r2, [pc, #308]	@ (8002ba0 <HAL_UART_MspInit+0x160>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d147      	bne.n	8002b00 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002a70:	f04f 0202 	mov.w	r2, #2
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a82:	f107 0318 	add.w	r3, r7, #24
 8002a86:	4618      	mov	r0, r3
 8002a88:	f00b fa58 	bl	800df3c <HAL_RCCEx_PeriphCLKConfig>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a92:	f7ff fb61 	bl	8002158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002a96:	4b43      	ldr	r3, [pc, #268]	@ (8002ba4 <HAL_UART_MspInit+0x164>)
 8002a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a9c:	4a41      	ldr	r2, [pc, #260]	@ (8002ba4 <HAL_UART_MspInit+0x164>)
 8002a9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002aa2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ba4 <HAL_UART_MspInit+0x164>)
 8002aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002aac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba4 <HAL_UART_MspInit+0x164>)
 8002ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aba:	4a3a      	ldr	r2, [pc, #232]	@ (8002ba4 <HAL_UART_MspInit+0x164>)
 8002abc:	f043 0310 	orr.w	r3, r3, #16
 8002ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ac4:	4b37      	ldr	r3, [pc, #220]	@ (8002ba4 <HAL_UART_MspInit+0x164>)
 8002ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002ad2:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002aec:	2307      	movs	r3, #7
 8002aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002af2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002af6:	4619      	mov	r1, r3
 8002af8:	482b      	ldr	r0, [pc, #172]	@ (8002ba8 <HAL_UART_MspInit+0x168>)
 8002afa:	f008 fca9 	bl	800b450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002afe:	e04a      	b.n	8002b96 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a29      	ldr	r2, [pc, #164]	@ (8002bac <HAL_UART_MspInit+0x16c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d145      	bne.n	8002b96 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b0a:	f04f 0201 	mov.w	r2, #1
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b1c:	f107 0318 	add.w	r3, r7, #24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f00b fa0b 	bl	800df3c <HAL_RCCEx_PeriphCLKConfig>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002b2c:	f7ff fb14 	bl	8002158 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba4 <HAL_UART_MspInit+0x164>)
 8002b32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b36:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba4 <HAL_UART_MspInit+0x164>)
 8002b38:	f043 0310 	orr.w	r3, r3, #16
 8002b3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b40:	4b18      	ldr	r3, [pc, #96]	@ (8002ba4 <HAL_UART_MspInit+0x164>)
 8002b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ba4 <HAL_UART_MspInit+0x164>)
 8002b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b54:	4a13      	ldr	r2, [pc, #76]	@ (8002ba4 <HAL_UART_MspInit+0x164>)
 8002b56:	f043 0302 	orr.w	r3, r3, #2
 8002b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <HAL_UART_MspInit+0x164>)
 8002b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002b6c:	23c0      	movs	r3, #192	@ 0xc0
 8002b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b84:	2307      	movs	r3, #7
 8002b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4807      	ldr	r0, [pc, #28]	@ (8002bb0 <HAL_UART_MspInit+0x170>)
 8002b92:	f008 fc5d 	bl	800b450 <HAL_GPIO_Init>
}
 8002b96:	bf00      	nop
 8002b98:	37e8      	adds	r7, #232	@ 0xe8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40007800 	.word	0x40007800
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	58021000 	.word	0x58021000
 8002bac:	40011000 	.word	0x40011000
 8002bb0:	58020400 	.word	0x58020400

08002bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <NMI_Handler+0x4>

08002bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <HardFault_Handler+0x4>

08002bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <MemManage_Handler+0x4>

08002bcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bd0:	bf00      	nop
 8002bd2:	e7fd      	b.n	8002bd0 <BusFault_Handler+0x4>

08002bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <UsageFault_Handler+0x4>

08002bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c0a:	f004 fb55 	bl	80072b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA2_Pin);
 8002c16:	2002      	movs	r0, #2
 8002c18:	f008 fdf3 	bl	800b802 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB2_Pin);
 8002c24:	2004      	movs	r0, #4
 8002c26:	f008 fdec 	bl	800b802 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA3_Pin);
 8002c32:	2008      	movs	r0, #8
 8002c34:	f008 fde5 	bl	800b802 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002c40:	4802      	ldr	r0, [pc, #8]	@ (8002c4c <DMA1_Stream0_IRQHandler+0x10>)
 8002c42:	f007 f8f3 	bl	8009e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	240003dc 	.word	0x240003dc

08002c50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002c54:	4802      	ldr	r0, [pc, #8]	@ (8002c60 <DMA1_Stream1_IRQHandler+0x10>)
 8002c56:	f007 f8e9 	bl	8009e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	24000454 	.word	0x24000454

08002c64 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <DMA1_Stream2_IRQHandler+0x10>)
 8002c6a:	f007 f8df 	bl	8009e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	240007e8 	.word	0x240007e8

08002c78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA1_Pin);
 8002c7c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c80:	f008 fdbf 	bl	800b802 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB1_Pin);
 8002c84:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c88:	f008 fdbb 	bl	800b802 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c94:	4802      	ldr	r0, [pc, #8]	@ (8002ca0 <TIM3_IRQHandler+0x10>)
 8002c96:	f00f fa0f 	bl	80120b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	24000750 	.word	0x24000750

08002ca4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB3_Pin);
 8002ca8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002cac:	f008 fda9 	bl	800b802 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002cb8:	4802      	ldr	r0, [pc, #8]	@ (8002cc4 <OTG_HS_IRQHandler+0x10>)
 8002cba:	f009 f831 	bl	800bd20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	24014b68 	.word	0x24014b68

08002cc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return 1;
 8002ccc:	2301      	movs	r3, #1
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <_kill>:

int _kill(int pid, int sig)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ce2:	f017 f973 	bl	8019fcc <__errno>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2216      	movs	r2, #22
 8002cea:	601a      	str	r2, [r3, #0]
  return -1;
 8002cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <_exit>:

void _exit (int status)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d00:	f04f 31ff 	mov.w	r1, #4294967295
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ffe7 	bl	8002cd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d0a:	bf00      	nop
 8002d0c:	e7fd      	b.n	8002d0a <_exit+0x12>

08002d0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	e00a      	b.n	8002d36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d20:	f3af 8000 	nop.w
 8002d24:	4601      	mov	r1, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	60ba      	str	r2, [r7, #8]
 8002d2c:	b2ca      	uxtb	r2, r1
 8002d2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	3301      	adds	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	dbf0      	blt.n	8002d20 <_read+0x12>
  }

  return len;
 8002d3e:	687b      	ldr	r3, [r7, #4]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e009      	b.n	8002d6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	60ba      	str	r2, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	dbf1      	blt.n	8002d5a <_write+0x12>
  }
  return len;
 8002d76:	687b      	ldr	r3, [r7, #4]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_close>:

int _close(int file)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002da8:	605a      	str	r2, [r3, #4]
  return 0;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_isatty>:

int _isatty(int file)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dc0:	2301      	movs	r3, #1
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df0:	4a14      	ldr	r2, [pc, #80]	@ (8002e44 <_sbrk+0x5c>)
 8002df2:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <_sbrk+0x60>)
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dfc:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <_sbrk+0x64>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e04:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <_sbrk+0x64>)
 8002e06:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <_sbrk+0x68>)
 8002e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e0a:	4b10      	ldr	r3, [pc, #64]	@ (8002e4c <_sbrk+0x64>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d207      	bcs.n	8002e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e18:	f017 f8d8 	bl	8019fcc <__errno>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	220c      	movs	r2, #12
 8002e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e22:	f04f 33ff 	mov.w	r3, #4294967295
 8002e26:	e009      	b.n	8002e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e28:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <_sbrk+0x64>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e2e:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <_sbrk+0x64>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	4a05      	ldr	r2, [pc, #20]	@ (8002e4c <_sbrk+0x64>)
 8002e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	24050000 	.word	0x24050000
 8002e48:	00000400 	.word	0x00000400
 8002e4c:	2401367c 	.word	0x2401367c
 8002e50:	240153b8 	.word	0x240153b8

08002e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e58:	4b32      	ldr	r3, [pc, #200]	@ (8002f24 <SystemInit+0xd0>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5e:	4a31      	ldr	r2, [pc, #196]	@ (8002f24 <SystemInit+0xd0>)
 8002e60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e68:	4b2f      	ldr	r3, [pc, #188]	@ (8002f28 <SystemInit+0xd4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	2b06      	cmp	r3, #6
 8002e72:	d807      	bhi.n	8002e84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e74:	4b2c      	ldr	r3, [pc, #176]	@ (8002f28 <SystemInit+0xd4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 030f 	bic.w	r3, r3, #15
 8002e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8002f28 <SystemInit+0xd4>)
 8002e7e:	f043 0307 	orr.w	r3, r3, #7
 8002e82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e84:	4b29      	ldr	r3, [pc, #164]	@ (8002f2c <SystemInit+0xd8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a28      	ldr	r2, [pc, #160]	@ (8002f2c <SystemInit+0xd8>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e90:	4b26      	ldr	r3, [pc, #152]	@ (8002f2c <SystemInit+0xd8>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e96:	4b25      	ldr	r3, [pc, #148]	@ (8002f2c <SystemInit+0xd8>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4924      	ldr	r1, [pc, #144]	@ (8002f2c <SystemInit+0xd8>)
 8002e9c:	4b24      	ldr	r3, [pc, #144]	@ (8002f30 <SystemInit+0xdc>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ea2:	4b21      	ldr	r3, [pc, #132]	@ (8002f28 <SystemInit+0xd4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002eae:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <SystemInit+0xd4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 030f 	bic.w	r3, r3, #15
 8002eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f28 <SystemInit+0xd4>)
 8002eb8:	f043 0307 	orr.w	r3, r3, #7
 8002ebc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8002f2c <SystemInit+0xd8>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002ec4:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <SystemInit+0xd8>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002eca:	4b18      	ldr	r3, [pc, #96]	@ (8002f2c <SystemInit+0xd8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ed0:	4b16      	ldr	r3, [pc, #88]	@ (8002f2c <SystemInit+0xd8>)
 8002ed2:	4a18      	ldr	r2, [pc, #96]	@ (8002f34 <SystemInit+0xe0>)
 8002ed4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ed6:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <SystemInit+0xd8>)
 8002ed8:	4a17      	ldr	r2, [pc, #92]	@ (8002f38 <SystemInit+0xe4>)
 8002eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002edc:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <SystemInit+0xd8>)
 8002ede:	4a17      	ldr	r2, [pc, #92]	@ (8002f3c <SystemInit+0xe8>)
 8002ee0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ee2:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <SystemInit+0xd8>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ee8:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <SystemInit+0xd8>)
 8002eea:	4a14      	ldr	r2, [pc, #80]	@ (8002f3c <SystemInit+0xe8>)
 8002eec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002eee:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <SystemInit+0xd8>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <SystemInit+0xd8>)
 8002ef6:	4a11      	ldr	r2, [pc, #68]	@ (8002f3c <SystemInit+0xe8>)
 8002ef8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <SystemInit+0xd8>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <SystemInit+0xd8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a09      	ldr	r2, [pc, #36]	@ (8002f2c <SystemInit+0xd8>)
 8002f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <SystemInit+0xd8>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <SystemInit+0xec>)
 8002f14:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002f18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f1a:	bf00      	nop
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00
 8002f28:	52002000 	.word	0x52002000
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f34:	02020200 	.word	0x02020200
 8002f38:	01ff0000 	.word	0x01ff0000
 8002f3c:	01010280 	.word	0x01010280
 8002f40:	52004000 	.word	0x52004000

08002f44 <FindClosest>:
 */

#include "util.h"

uint32_t FindClosest(const uint32_t* arr, uint32_t len, uint32_t target)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	@ 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
	uint32_t min_diff = 0xFFFFFFFF;
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
 8002f54:	61fb      	str	r3, [r7, #28]
	uint32_t closest_value = arr[0];
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < len; i++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e019      	b.n	8002f96 <FindClosest+0x52>
	{
		uint32_t diff = abs(arr[i] - target);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4413      	add	r3, r2
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bfb8      	it	lt
 8002f74:	425b      	neglt	r3, r3
 8002f76:	613b      	str	r3, [r7, #16]

		if (diff < min_diff)
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d207      	bcs.n	8002f90 <FindClosest+0x4c>
		{
			min_diff = diff;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	61fb      	str	r3, [r7, #28]
			closest_value = arr[i];
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < len; i++)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3301      	adds	r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d3e1      	bcc.n	8002f62 <FindClosest+0x1e>
		}
	}

	return closest_value;
 8002f9e:	69bb      	ldr	r3, [r7, #24]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3724      	adds	r7, #36	@ 0x24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <VibeCheck_Init>:
		TIM_HandleTypeDef* htim_rgb,
		volatile uint32_t* time_micros,
		SPI_HandleTypeDef* hspi_accel0,
		SPI_HandleTypeDef* hspi_accel1,
		SPI_HandleTypeDef* hspi_accel2)
{
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	b0e5      	sub	sp, #404	@ 0x194
 8002fb0:	af10      	add	r7, sp, #64	@ 0x40
 8002fb2:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 8002fb6:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8002fba:	6020      	str	r0, [r4, #0]
 8002fbc:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8002fc0:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 8002fc4:	6001      	str	r1, [r0, #0]
 8002fc6:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002fca:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8002fce:	600a      	str	r2, [r1, #0]
 8002fd0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002fd4:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8002fd8:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);  /* wait for steady power so the RGB LEDs don't get into a weird state */
 8002fda:	200a      	movs	r0, #10
 8002fdc:	f004 f98c 	bl	80072f8 <HAL_Delay>

	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 8002fe0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002fe4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f002 f9d6 	bl	800539c <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 8002ff0:	4ac6      	ldr	r2, [pc, #792]	@ (800330c <VibeCheck_Init+0x360>)
 8002ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002ff6:	6810      	ldr	r0, [r2, #0]
 8002ff8:	6018      	str	r0, [r3, #0]
 8002ffa:	8891      	ldrh	r1, [r2, #4]
 8002ffc:	7992      	ldrb	r2, [r2, #6]
 8002ffe:	8099      	strh	r1, [r3, #4]
 8003000:	719a      	strb	r2, [r3, #6]
 8003002:	f207 130f 	addw	r3, r7, #271	@ 0x10f
 8003006:	2239      	movs	r2, #57	@ 0x39
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f016 ff6d 	bl	8019eea <memset>
 8003010:	4bbf      	ldr	r3, [pc, #764]	@ (8003310 <VibeCheck_Init+0x364>)
 8003012:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 8003016:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800301a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4bbc      	ldr	r3, [pc, #752]	@ (8003314 <VibeCheck_Init+0x368>)
 8003022:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8003024:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 8003028:	4abb      	ldr	r2, [pc, #748]	@ (8003318 <VibeCheck_Init+0x36c>)
 800302a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800302e:	6810      	ldr	r0, [r2, #0]
 8003030:	6851      	ldr	r1, [r2, #4]
 8003032:	c303      	stmia	r3!, {r0, r1}
 8003034:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8003038:	2238      	movs	r2, #56	@ 0x38
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f016 ff54 	bl	8019eea <memset>
 8003042:	4bb6      	ldr	r3, [pc, #728]	@ (800331c <VibeCheck_Init+0x370>)
 8003044:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 8003048:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800304c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4bb3      	ldr	r3, [pc, #716]	@ (8003320 <VibeCheck_Init+0x374>)
 8003054:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 8003056:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	};

	VibeCheckShell_InputHandler rgb_cmd = {
 800305a:	4bb2      	ldr	r3, [pc, #712]	@ (8003324 <VibeCheck_Init+0x378>)
 800305c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800305e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003062:	223c      	movs	r2, #60	@ 0x3c
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f016 ff3f 	bl	8019eea <memset>
 800306c:	4bae      	ldr	r3, [pc, #696]	@ (8003328 <VibeCheck_Init+0x37c>)
 800306e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			.name = "rgb",
			.execute = VibeCheckRGBCMD_Execute,
			.obj = &vc->rgb
 8003072:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003076:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4bab      	ldr	r3, [pc, #684]	@ (800332c <VibeCheck_Init+0x380>)
 800307e:	4413      	add	r3, r2
	VibeCheckShell_InputHandler rgb_cmd = {
 8003080:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	};

	VibeCheckShell_InputHandler sensor_cmd = {
 8003084:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003088:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800308c:	4aa8      	ldr	r2, [pc, #672]	@ (8003330 <VibeCheck_Init+0x384>)
 800308e:	460b      	mov	r3, r1
 8003090:	6810      	ldr	r0, [r2, #0]
 8003092:	6018      	str	r0, [r3, #0]
 8003094:	8890      	ldrh	r0, [r2, #4]
 8003096:	7992      	ldrb	r2, [r2, #6]
 8003098:	8098      	strh	r0, [r3, #4]
 800309a:	719a      	strb	r2, [r3, #6]
 800309c:	1dcb      	adds	r3, r1, #7
 800309e:	2239      	movs	r2, #57	@ 0x39
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f016 ff21 	bl	8019eea <memset>
 80030a8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030ac:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030b0:	4aa0      	ldr	r2, [pc, #640]	@ (8003334 <VibeCheck_Init+0x388>)
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "sensor",
			.execute = VibeCheckSensorCMD_Execute,
			.obj = &vc->sensor
 80030b4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4b9e      	ldr	r3, [pc, #632]	@ (8003338 <VibeCheck_Init+0x38c>)
 80030c0:	4413      	add	r3, r2
	VibeCheckShell_InputHandler sensor_cmd = {
 80030c2:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80030c6:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80030ca:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 80030cc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030d4:	681e      	ldr	r6, [r3, #0]
 80030d6:	466d      	mov	r5, sp
 80030d8:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 80030dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80030ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80030f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f6:	4630      	mov	r0, r6
 80030f8:	f002 fa9a 	bl	8005630 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 80030fc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003100:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003104:	681e      	ldr	r6, [r3, #0]
 8003106:	466d      	mov	r5, sp
 8003108:	f107 04cc 	add.w	r4, r7, #204	@ 0xcc
 800310c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800310e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003118:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800311c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003120:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003126:	4630      	mov	r0, r6
 8003128:	f002 fa82 	bl	8005630 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, rgb_cmd);
 800312c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003130:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003134:	681e      	ldr	r6, [r3, #0]
 8003136:	466d      	mov	r5, sp
 8003138:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 800313c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003148:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800314c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003150:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003156:	4630      	mov	r0, r6
 8003158:	f002 fa6a 	bl	8005630 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, sensor_cmd);
 800315c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003160:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800316c:	f5a3 7690 	sub.w	r6, r3, #288	@ 0x120
 8003170:	466d      	mov	r5, sp
 8003172:	f106 040c 	add.w	r4, r6, #12
 8003176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800317a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800317c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800317e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003182:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003186:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800318a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f002 fa4e 	bl	8005630 <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_OutputHandler wavegen_sender = {
 8003194:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003198:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800319c:	4a67      	ldr	r2, [pc, #412]	@ (800333c <VibeCheck_Init+0x390>)
 800319e:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckWaveGenSender_Execute,
			.obj = &vc->wavegen
 80031a0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031a4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003320 <VibeCheck_Init+0x374>)
 80031ac:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler wavegen_sender = {
 80031ae:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80031b2:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80031b6:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_data_sender = {
 80031b8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80031c0:	4a5f      	ldr	r2, [pc, #380]	@ (8003340 <VibeCheck_Init+0x394>)
 80031c2:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Data_Execute,
			.obj = &vc->sensor
 80031c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003338 <VibeCheck_Init+0x38c>)
 80031d0:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_data_sender = {
 80031d2:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80031d6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80031da:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_status_sender = {
 80031dc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031e0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031e4:	4a57      	ldr	r2, [pc, #348]	@ (8003344 <VibeCheck_Init+0x398>)
 80031e6:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Status_Execute,
			.obj = &vc->sensor
 80031e8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b51      	ldr	r3, [pc, #324]	@ (8003338 <VibeCheck_Init+0x38c>)
 80031f4:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_status_sender = {
 80031f6:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80031fa:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80031fe:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_RegisterOutputHandler(&vc->shell, wavegen_sender);
 8003200:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003204:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800320e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003212:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003216:	f002 fa3f 	bl	8005698 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_data_sender);
 800321a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800321e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003228:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800322c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003230:	f002 fa32 	bl	8005698 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_status_sender);
 8003234:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003238:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003242:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003246:	e893 0006 	ldmia.w	r3, {r1, r2}
 800324a:	f002 fa25 	bl	8005698 <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 800324e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003252:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b2e      	ldr	r3, [pc, #184]	@ (8003314 <VibeCheck_Init+0x368>)
 800325a:	4413      	add	r3, r2
 800325c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003260:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8003264:	6811      	ldr	r1, [r2, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f002 fcce 	bl	8005c08 <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 800326c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003270:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4b2a      	ldr	r3, [pc, #168]	@ (8003320 <VibeCheck_Init+0x374>)
 8003278:	4413      	add	r3, r2
 800327a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800327e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8003282:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8003286:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	6809      	ldr	r1, [r1, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f003 fa0c 	bl	80066ac <VibeCheckWaveGen_Init>
	VibeCheckRGB_Init(&vc->rgb, htim_rgb);
 8003294:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003298:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4b23      	ldr	r3, [pc, #140]	@ (800332c <VibeCheck_Init+0x380>)
 80032a0:	4413      	add	r3, r2
 80032a2:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fa86 	bl	80037b8 <VibeCheckRGB_Init>
	VibeCheckRGB_SetBaseSequence(&vc->rgb, base_sequence_times, base_sequence_colors, base_sequence_len);
 80032ac:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	481d      	ldr	r0, [pc, #116]	@ (800332c <VibeCheck_Init+0x380>)
 80032b8:	4418      	add	r0, r3
 80032ba:	2310      	movs	r3, #16
 80032bc:	4a22      	ldr	r2, [pc, #136]	@ (8003348 <VibeCheck_Init+0x39c>)
 80032be:	4923      	ldr	r1, [pc, #140]	@ (800334c <VibeCheck_Init+0x3a0>)
 80032c0:	f000 fb2d 	bl	800391e <VibeCheckRGB_SetBaseSequence>
	VibeCheckRGB_SetTopSequence(&vc->rgb, top_sequence_times, top_sequence_colors, top_sequence_len);
 80032c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4817      	ldr	r0, [pc, #92]	@ (800332c <VibeCheck_Init+0x380>)
 80032d0:	4418      	add	r0, r3
 80032d2:	2304      	movs	r3, #4
 80032d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003350 <VibeCheck_Init+0x3a4>)
 80032d6:	491f      	ldr	r1, [pc, #124]	@ (8003354 <VibeCheck_Init+0x3a8>)
 80032d8:	f000 fb58 	bl	800398c <VibeCheckRGB_SetTopSequence>
	VibeCheckSensor_Init(&vc->sensor, time_micros, hspi_accel0, hspi_accel1, hspi_accel2);
 80032dc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4814      	ldr	r0, [pc, #80]	@ (8003338 <VibeCheck_Init+0x38c>)
 80032e8:	4418      	add	r0, r3
 80032ea:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80032f4:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80032f8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80032fc:	f000 fd5c 	bl	8003db8 <VibeCheckSensor_Init>
}
 8003300:	bf00      	nop
 8003302:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8003306:	46bd      	mov	sp, r7
 8003308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800330a:	bf00      	nop
 800330c:	0801d648 	.word	0x0801d648
 8003310:	080061a9 	.word	0x080061a9
 8003314:	00011424 	.word	0x00011424
 8003318:	0801d650 	.word	0x0801d650
 800331c:	08006fad 	.word	0x08006fad
 8003320:	00011444 	.word	0x00011444
 8003324:	00626772 	.word	0x00626772
 8003328:	08003bf1 	.word	0x08003bf1
 800332c:	00012490 	.word	0x00012490
 8003330:	0801d658 	.word	0x0801d658
 8003334:	08004ff5 	.word	0x08004ff5
 8003338:	00012a10 	.word	0x00012a10
 800333c:	08007109 	.word	0x08007109
 8003340:	08005245 	.word	0x08005245
 8003344:	08005311 	.word	0x08005311
 8003348:	0801d92c 	.word	0x0801d92c
 800334c:	0801d8ec 	.word	0x0801d8ec
 8003350:	0801d880 	.word	0x0801d880
 8003354:	0801d870 	.word	0x0801d870

08003358 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b08b      	sub	sp, #44	@ 0x2c
 800335c:	af02      	add	r7, sp, #8
 800335e:	6078      	str	r0, [r7, #4]

	/* FIXME: sometimes the accelerometers disconnected unexpectedly */


	/* call object update functions */
	VibeCheckWaveGen_Update(&vc->wavegen);
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4b9d      	ldr	r3, [pc, #628]	@ (80035d8 <VibeCheck_Loop+0x280>)
 8003364:	4413      	add	r3, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f003 fa40 	bl	80067ec <VibeCheckWaveGen_Update>
	VibeCheckRGB_Update(&vc->rgb);
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4b9b      	ldr	r3, [pc, #620]	@ (80035dc <VibeCheck_Loop+0x284>)
 8003370:	4413      	add	r3, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fa56 	bl	8003824 <VibeCheckRGB_Update>
	VibeCheckSensor_Update(&vc->sensor);
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4b99      	ldr	r3, [pc, #612]	@ (80035e0 <VibeCheck_Loop+0x288>)
 800337c:	4413      	add	r3, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fe2c 	bl	8003fdc <VibeCheckSensor_Update>

	/* update the shell */
	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4618      	mov	r0, r3
 8003388:	f002 f84a 	bl	8005420 <VibeCheckShell_Update>
 800338c:	4603      	mov	r3, r0
 800338e:	617b      	str	r3, [r7, #20]
	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f107 020c 	add.w	r2, r7, #12
 8003396:	f107 0110 	add.w	r1, r7, #16
 800339a:	4618      	mov	r0, r3
 800339c:	f002 f9fa 	bl	8005794 <VibeCheckShell_GetOutput>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00f      	beq.n	80033c6 <VibeCheck_Loop+0x6e>
		if (CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len) == USBD_OK)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	b292      	uxth	r2, r2
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f014 fda2 	bl	8017ef8 <CDC_Transmit_HS>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <VibeCheck_Loop+0x6e>
			VibeCheckShell_UpdateOutputBuffer(&vc->shell, usb_tx_len);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f002 fa40 	bl	8005846 <VibeCheckShell_UpdateOutputBuffer>


	/* blink indicator LEDs based on shell status */
	if (shell_status.ihandl_status == VC_SHELL_INPUT_PROCESSED)
 80033c6:	7d3b      	ldrb	r3, [r7, #20]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10e      	bne.n	80033ea <VibeCheck_Loop+0x92>
	{
		VibeCheckRGB_SetTopSequence(&vc->rgb, led_shell_success_times, led_shell_success_colors, led_shell_success_len);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4883      	ldr	r0, [pc, #524]	@ (80035dc <VibeCheck_Loop+0x284>)
 80033d0:	4418      	add	r0, r3
 80033d2:	2304      	movs	r3, #4
 80033d4:	4a83      	ldr	r2, [pc, #524]	@ (80035e4 <VibeCheck_Loop+0x28c>)
 80033d6:	4984      	ldr	r1, [pc, #528]	@ (80035e8 <VibeCheck_Loop+0x290>)
 80033d8:	f000 fad8 	bl	800398c <VibeCheckRGB_SetTopSequence>
		VibeCheckRGB_StartTopSequence(&vc->rgb);
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4b7f      	ldr	r3, [pc, #508]	@ (80035dc <VibeCheck_Loop+0x284>)
 80033e0:	4413      	add	r3, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fae9 	bl	80039ba <VibeCheckRGB_StartTopSequence>
 80033e8:	e013      	b.n	8003412 <VibeCheck_Loop+0xba>
	}
	else if (shell_status.ihandl_status == VC_SHELL_INPUT_ERROR_NO_HANDLER || shell_status.ihandl_status == VC_SHELL_INPUT_ERROR_EXECUTING)
 80033ea:	7d3b      	ldrb	r3, [r7, #20]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d002      	beq.n	80033f6 <VibeCheck_Loop+0x9e>
 80033f0:	7d3b      	ldrb	r3, [r7, #20]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d10d      	bne.n	8003412 <VibeCheck_Loop+0xba>
	{
		VibeCheckRGB_SetTopSequence(&vc->rgb, led_shell_failure_times, led_shell_failure_colors, led_shell_failure_len);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4878      	ldr	r0, [pc, #480]	@ (80035dc <VibeCheck_Loop+0x284>)
 80033fa:	4418      	add	r0, r3
 80033fc:	2304      	movs	r3, #4
 80033fe:	4a7b      	ldr	r2, [pc, #492]	@ (80035ec <VibeCheck_Loop+0x294>)
 8003400:	497b      	ldr	r1, [pc, #492]	@ (80035f0 <VibeCheck_Loop+0x298>)
 8003402:	f000 fac3 	bl	800398c <VibeCheckRGB_SetTopSequence>
		VibeCheckRGB_StartTopSequence(&vc->rgb);
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	4b74      	ldr	r3, [pc, #464]	@ (80035dc <VibeCheck_Loop+0x284>)
 800340a:	4413      	add	r3, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fad4 	bl	80039ba <VibeCheckRGB_StartTopSequence>
	}


	/* visualize the acceleration with the RGB LEDs */
	uint32_t time = HAL_GetTick();
 8003412:	f003 ff65 	bl	80072e0 <HAL_GetTick>
 8003416:	61b8      	str	r0, [r7, #24]
	if (time - time_prev_led_update > 30)
 8003418:	4b76      	ldr	r3, [pc, #472]	@ (80035f4 <VibeCheck_Loop+0x29c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b1e      	cmp	r3, #30
 8003422:	f240 81b3 	bls.w	800378c <VibeCheck_Loop+0x434>
	{
		time_prev_led_update = time;
 8003426:	4a73      	ldr	r2, [pc, #460]	@ (80035f4 <VibeCheck_Loop+0x29c>)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	6013      	str	r3, [r2, #0]

		if (!vc->rgb.top_sequence.is_running)  /* let the top sequence have precedence over the visualization */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8003432:	f893 3a08 	ldrb.w	r3, [r3, #2568]	@ 0xa08
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 81a8 	bne.w	800378c <VibeCheck_Loop+0x434>
		{
			for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	e1a0      	b.n	8003784 <VibeCheck_Loop+0x42c>
			{
				if (vc->sensor.status[i].is_connected)
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	18ca      	adds	r2, r1, r3
 8003450:	4b69      	ldr	r3, [pc, #420]	@ (80035f8 <VibeCheck_Loop+0x2a0>)
 8003452:	4413      	add	r3, r2
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8191 	beq.w	800377e <VibeCheck_Loop+0x426>
				{
					if (vc->sensor.status[i].accel_measuring)
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	18ca      	adds	r2, r1, r3
 800346a:	4b64      	ldr	r3, [pc, #400]	@ (80035fc <VibeCheck_Loop+0x2a4>)
 800346c:	4413      	add	r3, r2
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80cd 	beq.w	8003610 <VibeCheck_Loop+0x2b8>
					{
						/* write the LEDs */
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].accel_x) / vc->sensor.sensor_config[i].g_range, 0, 0);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4858      	ldr	r0, [pc, #352]	@ (80035dc <VibeCheck_Loop+0x284>)
 800347a:	4418      	add	r0, r3
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	189c      	adds	r4, r3, r2
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	18ca      	adds	r2, r1, r3
 8003492:	4b5b      	ldr	r3, [pc, #364]	@ (8003600 <VibeCheck_Loop+0x2a8>)
 8003494:	4413      	add	r3, r2
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	eef0 7ae7 	vabs.f32	s15, s15
 800349e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034a2:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 80035d0 <VibeCheck_Loop+0x278>
 80034a6:	ee27 5b06 	vmul.f64	d5, d7, d6
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	18ca      	adds	r2, r1, r3
 80034b8:	4b52      	ldr	r3, [pc, #328]	@ (8003604 <VibeCheck_Loop+0x2ac>)
 80034ba:	4413      	add	r3, r2
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80034c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80034ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034ce:	edc7 7a00 	vstr	s15, [r7]
 80034d2:	783b      	ldrb	r3, [r7, #0]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	2300      	movs	r3, #0
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2300      	movs	r3, #0
 80034dc:	4621      	mov	r1, r4
 80034de:	f000 fa8c 	bl	80039fa <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_y) / vc->sensor.sensor_config[i].g_range, 0);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	483d      	ldr	r0, [pc, #244]	@ (80035dc <VibeCheck_Loop+0x284>)
 80034e6:	4418      	add	r0, r3
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	1c5c      	adds	r4, r3, #1
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	18ca      	adds	r2, r1, r3
 8003500:	4b41      	ldr	r3, [pc, #260]	@ (8003608 <VibeCheck_Loop+0x2b0>)
 8003502:	4413      	add	r3, r2
 8003504:	edd3 7a00 	vldr	s15, [r3]
 8003508:	eef0 7ae7 	vabs.f32	s15, s15
 800350c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003510:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 80035d0 <VibeCheck_Loop+0x278>
 8003514:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	18ca      	adds	r2, r1, r3
 8003526:	4b37      	ldr	r3, [pc, #220]	@ (8003604 <VibeCheck_Loop+0x2ac>)
 8003528:	4413      	add	r3, r2
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003534:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003538:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800353c:	edc7 7a00 	vstr	s15, [r7]
 8003540:	783b      	ldrb	r3, [r7, #0]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2200      	movs	r2, #0
 8003546:	9200      	str	r2, [sp, #0]
 8003548:	2200      	movs	r2, #0
 800354a:	4621      	mov	r1, r4
 800354c:	f000 fa55 	bl	80039fa <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_z) / vc->sensor.sensor_config[i].g_range);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4822      	ldr	r0, [pc, #136]	@ (80035dc <VibeCheck_Loop+0x284>)
 8003554:	4418      	add	r0, r3
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	1c9c      	adds	r4, r3, #2
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	18ca      	adds	r2, r1, r3
 800356e:	4b27      	ldr	r3, [pc, #156]	@ (800360c <VibeCheck_Loop+0x2b4>)
 8003570:	4413      	add	r3, r2
 8003572:	edd3 7a00 	vldr	s15, [r3]
 8003576:	eef0 7ae7 	vabs.f32	s15, s15
 800357a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800357e:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 80035d0 <VibeCheck_Loop+0x278>
 8003582:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	18ca      	adds	r2, r1, r3
 8003594:	4b1b      	ldr	r3, [pc, #108]	@ (8003604 <VibeCheck_Loop+0x2ac>)
 8003596:	4413      	add	r3, r2
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80035a2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80035a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035aa:	edc7 7a00 	vstr	s15, [r7]
 80035ae:	783b      	ldrb	r3, [r7, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2300      	movs	r3, #0
 80035b6:	2200      	movs	r2, #0
 80035b8:	4621      	mov	r1, r4
 80035ba:	f000 fa1e 	bl	80039fa <VibeCheckRGB_SetColor>
						VibeCheckRGB_SendColors(&vc->rgb);
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <VibeCheck_Loop+0x284>)
 80035c2:	4413      	add	r3, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fa8a 	bl	8003ade <VibeCheckRGB_SendColors>
 80035ca:	e0d8      	b.n	800377e <VibeCheck_Loop+0x426>
 80035cc:	f3af 8000 	nop.w
 80035d0:	00000000 	.word	0x00000000
 80035d4:	406fe000 	.word	0x406fe000
 80035d8:	00011444 	.word	0x00011444
 80035dc:	00012490 	.word	0x00012490
 80035e0:	00012a10 	.word	0x00012a10
 80035e4:	0801daec 	.word	0x0801daec
 80035e8:	0801dadc 	.word	0x0801dadc
 80035ec:	0801db68 	.word	0x0801db68
 80035f0:	0801db58 	.word	0x0801db58
 80035f4:	24013680 	.word	0x24013680
 80035f8:	00012b0c 	.word	0x00012b0c
 80035fc:	00012b10 	.word	0x00012b10
 8003600:	00012a84 	.word	0x00012a84
 8003604:	00012a20 	.word	0x00012a20
 8003608:	00012a88 	.word	0x00012a88
 800360c:	00012a8c 	.word	0x00012a8c
					}
					else if (vc->sensor.status[i].gyro_measuring)
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	18ca      	adds	r2, r1, r3
 800361e:	4b60      	ldr	r3, [pc, #384]	@ (80037a0 <VibeCheck_Loop+0x448>)
 8003620:	4413      	add	r3, r2
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80aa 	beq.w	800377e <VibeCheck_Loop+0x426>
					{
						/* write the LEDs */
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_x) / vc->sensor.sensor_config[i].dps_range, 0, 0);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	485d      	ldr	r0, [pc, #372]	@ (80037a4 <VibeCheck_Loop+0x44c>)
 800362e:	4418      	add	r0, r3
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	4613      	mov	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	189c      	adds	r4, r3, r2
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	18ca      	adds	r2, r1, r3
 8003646:	4b58      	ldr	r3, [pc, #352]	@ (80037a8 <VibeCheck_Loop+0x450>)
 8003648:	4413      	add	r3, r2
 800364a:	edd3 7a00 	vldr	s15, [r3]
 800364e:	eef0 7ae7 	vabs.f32	s15, s15
 8003652:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003656:	ed9f 6b50 	vldr	d6, [pc, #320]	@ 8003798 <VibeCheck_Loop+0x440>
 800365a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	18ca      	adds	r2, r1, r3
 800366c:	4b4f      	ldr	r3, [pc, #316]	@ (80037ac <VibeCheck_Loop+0x454>)
 800366e:	4413      	add	r3, r2
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800367a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800367e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003682:	edc7 7a00 	vstr	s15, [r7]
 8003686:	783b      	ldrb	r3, [r7, #0]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	2300      	movs	r3, #0
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	2300      	movs	r3, #0
 8003690:	4621      	mov	r1, r4
 8003692:	f000 f9b2 	bl	80039fa <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_y) / vc->sensor.sensor_config[i].dps_range, 0);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4842      	ldr	r0, [pc, #264]	@ (80037a4 <VibeCheck_Loop+0x44c>)
 800369a:	4418      	add	r0, r3
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	1c5c      	adds	r4, r3, #1
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	18ca      	adds	r2, r1, r3
 80036b4:	4b3e      	ldr	r3, [pc, #248]	@ (80037b0 <VibeCheck_Loop+0x458>)
 80036b6:	4413      	add	r3, r2
 80036b8:	edd3 7a00 	vldr	s15, [r3]
 80036bc:	eef0 7ae7 	vabs.f32	s15, s15
 80036c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036c4:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8003798 <VibeCheck_Loop+0x440>
 80036c8:	ee27 5b06 	vmul.f64	d5, d7, d6
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	18ca      	adds	r2, r1, r3
 80036da:	4b34      	ldr	r3, [pc, #208]	@ (80037ac <VibeCheck_Loop+0x454>)
 80036dc:	4413      	add	r3, r2
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	ee07 3a90 	vmov	s15, r3
 80036e4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80036e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80036ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80036f0:	edc7 7a00 	vstr	s15, [r7]
 80036f4:	783b      	ldrb	r3, [r7, #0]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2200      	movs	r2, #0
 80036fa:	9200      	str	r2, [sp, #0]
 80036fc:	2200      	movs	r2, #0
 80036fe:	4621      	mov	r1, r4
 8003700:	f000 f97b 	bl	80039fa <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_z) / vc->sensor.sensor_config[i].dps_range);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4827      	ldr	r0, [pc, #156]	@ (80037a4 <VibeCheck_Loop+0x44c>)
 8003708:	4418      	add	r0, r3
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	1c9c      	adds	r4, r3, #2
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	18ca      	adds	r2, r1, r3
 8003722:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <VibeCheck_Loop+0x45c>)
 8003724:	4413      	add	r3, r2
 8003726:	edd3 7a00 	vldr	s15, [r3]
 800372a:	eef0 7ae7 	vabs.f32	s15, s15
 800372e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003732:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8003798 <VibeCheck_Loop+0x440>
 8003736:	ee27 5b06 	vmul.f64	d5, d7, d6
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	18ca      	adds	r2, r1, r3
 8003748:	4b18      	ldr	r3, [pc, #96]	@ (80037ac <VibeCheck_Loop+0x454>)
 800374a:	4413      	add	r3, r2
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003756:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800375a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800375e:	edc7 7a00 	vstr	s15, [r7]
 8003762:	783b      	ldrb	r3, [r7, #0]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2300      	movs	r3, #0
 800376a:	2200      	movs	r2, #0
 800376c:	4621      	mov	r1, r4
 800376e:	f000 f944 	bl	80039fa <VibeCheckRGB_SetColor>
						VibeCheckRGB_SendColors(&vc->rgb);
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <VibeCheck_Loop+0x44c>)
 8003776:	4413      	add	r3, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f9b0 	bl	8003ade <VibeCheckRGB_SendColors>
			for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3301      	adds	r3, #1
 8003782:	61fb      	str	r3, [r7, #28]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b02      	cmp	r3, #2
 8003788:	f67f ae5b 	bls.w	8003442 <VibeCheck_Loop+0xea>
					}
				}
			}
		}
	}
}
 800378c:	bf00      	nop
 800378e:	3724      	adds	r7, #36	@ 0x24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd90      	pop	{r4, r7, pc}
 8003794:	f3af 8000 	nop.w
 8003798:	00000000 	.word	0x00000000
 800379c:	406fe000 	.word	0x406fe000
 80037a0:	00012b14 	.word	0x00012b14
 80037a4:	00012490 	.word	0x00012490
 80037a8:	00012a90 	.word	0x00012a90
 80037ac:	00012a28 	.word	0x00012a28
 80037b0:	00012a94 	.word	0x00012a94
 80037b4:	00012a98 	.word	0x00012a98

080037b8 <VibeCheckRGB_Init>:

#include "vibecheck_rgb.h"


void VibeCheckRGB_Init(VibeCheckRGB* rgb, TIM_HandleTypeDef* htim)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
	Sequencer_Init(&rgb->base_sequence);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe fccb 	bl	8002164 <Sequencer_Init>
	Sequencer_Init(&rgb->top_sequence);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fcc5 	bl	8002164 <Sequencer_Init>

	htim->Instance->PSC = VC_RGB_TIM_PSC - 1;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2202      	movs	r2, #2
 80037e0:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = VC_RGB_TIM_ARR - 1;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2263      	movs	r2, #99	@ 0x63
 80037e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	rgb->htim = htim;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	601a      	str	r2, [r3, #0]

	/* clear the DMA buffer, particularly setting all zeros during the reset time */
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	e008      	b.n	8003808 <VibeCheckRGB_Init+0x50>
		rgb->bit_stream[i] = 0;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	3210      	adds	r2, #16
 80037fc:	2100      	movs	r1, #0
 80037fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	3301      	adds	r3, #1
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f5b3 7f26 	cmp.w	r3, #664	@ 0x298
 800380e:	d3f2      	bcc.n	80037f6 <VibeCheckRGB_Init+0x3e>

	/* turn off all LEDs */
	VibeCheckRGB_SetAllOff(rgb);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f94a 	bl	8003aaa <VibeCheckRGB_SetAllOff>
	VibeCheckRGB_SendColors(rgb);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f961 	bl	8003ade <VibeCheckRGB_SendColors>
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <VibeCheckRGB_Update>:


void VibeCheckRGB_Update(VibeCheckRGB* rgb)  /* call repeatedly in the main loop */
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	@ 0x28
 8003828:	af02      	add	r7, sp, #8
 800382a:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 800382c:	f003 fd58 	bl	80072e0 <HAL_GetTick>
 8003830:	6178      	str	r0, [r7, #20]
	uint32_t step;
	if (Sequencer_Update(&rgb->top_sequence, time, &step))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003838:	f107 0210 	add.w	r2, r7, #16
 800383c:	6979      	ldr	r1, [r7, #20]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fcc2 	bl	80021c8 <Sequencer_Update>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d028      	beq.n	800389c <VibeCheckRGB_Update+0x78>
	{
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	e01e      	b.n	800388e <VibeCheckRGB_Update+0x6a>
		{
			VibeCheckRGB_Color color = rgb->top_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 157c 	ldr.w	r1, [r3, #1404]	@ 0x57c
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	441a      	add	r2, r3
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	441a      	add	r2, r3
 8003862:	4613      	mov	r3, r2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	4413      	add	r3, r2
 8003868:	18ca      	adds	r2, r1, r3
 800386a:	f107 030c 	add.w	r3, r7, #12
 800386e:	8811      	ldrh	r1, [r2, #0]
 8003870:	7892      	ldrb	r2, [r2, #2]
 8003872:	8019      	strh	r1, [r3, #0]
 8003874:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8003876:	7b3a      	ldrb	r2, [r7, #12]
 8003878:	7b79      	ldrb	r1, [r7, #13]
 800387a:	7bbb      	ldrb	r3, [r7, #14]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	460b      	mov	r3, r1
 8003880:	69f9      	ldr	r1, [r7, #28]
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f8b9 	bl	80039fa <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	3301      	adds	r3, #1
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d9dd      	bls.n	8003850 <VibeCheckRGB_Update+0x2c>
		}
		VibeCheckRGB_SendColors(rgb);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f922 	bl	8003ade <VibeCheckRGB_SendColors>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
		}
		VibeCheckRGB_SendColors(rgb);
	}
}
 800389a:	e03c      	b.n	8003916 <VibeCheckRGB_Update+0xf2>
	else if (!Sequencer_IsRunning(&rgb->top_sequence) && Sequencer_Update(&rgb->base_sequence, time, &step))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fcf3 	bl	800228e <Sequencer_IsRunning>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d133      	bne.n	8003916 <VibeCheckRGB_Update+0xf2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 80038b4:	f107 0210 	add.w	r2, r7, #16
 80038b8:	6979      	ldr	r1, [r7, #20]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fc84 	bl	80021c8 <Sequencer_Update>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d027      	beq.n	8003916 <VibeCheckRGB_Update+0xf2>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	e01e      	b.n	800390a <VibeCheckRGB_Update+0xe6>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 1564 	ldr.w	r1, [r3, #1380]	@ 0x564
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	441a      	add	r2, r3
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	441a      	add	r2, r3
 80038de:	4613      	mov	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	18ca      	adds	r2, r1, r3
 80038e6:	f107 0308 	add.w	r3, r7, #8
 80038ea:	8811      	ldrh	r1, [r2, #0]
 80038ec:	7892      	ldrb	r2, [r2, #2]
 80038ee:	8019      	strh	r1, [r3, #0]
 80038f0:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 80038f2:	7a3a      	ldrb	r2, [r7, #8]
 80038f4:	7a79      	ldrb	r1, [r7, #9]
 80038f6:	7abb      	ldrb	r3, [r7, #10]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	460b      	mov	r3, r1
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f87b 	bl	80039fa <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	3301      	adds	r3, #1
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d9dd      	bls.n	80038cc <VibeCheckRGB_Update+0xa8>
		VibeCheckRGB_SendColors(rgb);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f8e4 	bl	8003ade <VibeCheckRGB_SendColors>
}
 8003916:	bf00      	nop
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <VibeCheckRGB_SetBaseSequence>:


void VibeCheckRGB_SetBaseSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
	rgb->base_sequence_colors = color;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	f8c3 2564 	str.w	r2, [r3, #1380]	@ 0x564
	Sequencer_SetSequence(&rgb->base_sequence, time, len, 1);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f503 60aa 	add.w	r0, r3, #1360	@ 0x550
 800393a:	2301      	movs	r3, #1
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	f7fe fc2c 	bl	800219c <Sequencer_SetSequence>
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <VibeCheckRGB_StartBaseSequence>:

void VibeCheckRGB_StartBaseSequence(VibeCheckRGB* rgb)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->base_sequence, HAL_GetTick());
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f503 64aa 	add.w	r4, r3, #1360	@ 0x550
 800395a:	f003 fcc1 	bl	80072e0 <HAL_GetTick>
 800395e:	4603      	mov	r3, r0
 8003960:	4619      	mov	r1, r3
 8003962:	4620      	mov	r0, r4
 8003964:	f7fe fc72 	bl	800224c <Sequencer_Start>
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	bd90      	pop	{r4, r7, pc}

08003970 <VibeCheckRGB_StopBaseSequence>:

void VibeCheckRGB_StopBaseSequence(VibeCheckRGB* rgb)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->base_sequence);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fc78 	bl	8002274 <Sequencer_Stop>
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <VibeCheckRGB_SetTopSequence>:

void VibeCheckRGB_SetTopSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
	rgb->top_sequence_colors = color;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	f8c3 257c 	str.w	r2, [r3, #1404]	@ 0x57c
	Sequencer_SetSequence(&rgb->top_sequence, time, len, 0);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f503 60ad 	add.w	r0, r3, #1384	@ 0x568
 80039a8:	2300      	movs	r3, #0
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	f7fe fbf5 	bl	800219c <Sequencer_SetSequence>
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <VibeCheckRGB_StartTopSequence>:

void VibeCheckRGB_StartTopSequence(VibeCheckRGB* rgb)
{
 80039ba:	b590      	push	{r4, r7, lr}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->top_sequence, HAL_GetTick());
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f503 64ad 	add.w	r4, r3, #1384	@ 0x568
 80039c8:	f003 fc8a 	bl	80072e0 <HAL_GetTick>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4619      	mov	r1, r3
 80039d0:	4620      	mov	r0, r4
 80039d2:	f7fe fc3b 	bl	800224c <Sequencer_Start>
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd90      	pop	{r4, r7, pc}

080039de <VibeCheckRGB_StopTopSequence>:

void VibeCheckRGB_StopTopSequence(VibeCheckRGB* rgb)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->top_sequence);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fc41 	bl	8002274 <Sequencer_Stop>
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <VibeCheckRGB_SetColor>:


void VibeCheckRGB_SetColor(VibeCheckRGB* rgb, uint32_t index, uint8_t r, uint8_t g, uint8_t b)  /* set the color of an individual LED */
{
 80039fa:	b480      	push	{r7}
 80039fc:	b085      	sub	sp, #20
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	4611      	mov	r1, r2
 8003a06:	461a      	mov	r2, r3
 8003a08:	460b      	mov	r3, r1
 8003a0a:	71fb      	strb	r3, [r7, #7]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	71bb      	strb	r3, [r7, #6]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d901      	bls.n	8003a1a <VibeCheckRGB_SetColor+0x20>
		index = VC_RGB_NUM_LEDS - 1;
 8003a16:	2308      	movs	r3, #8
 8003a18:	60bb      	str	r3, [r7, #8]

	rgb->colors[index].r = r;
 8003a1a:	68f9      	ldr	r1, [r7, #12]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	440b      	add	r3, r1
 8003a26:	3304      	adds	r3, #4
 8003a28:	79fa      	ldrb	r2, [r7, #7]
 8003a2a:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].g = g;
 8003a2c:	68f9      	ldr	r1, [r7, #12]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	440b      	add	r3, r1
 8003a38:	3305      	adds	r3, #5
 8003a3a:	79ba      	ldrb	r2, [r7, #6]
 8003a3c:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].b = b;
 8003a3e:	68f9      	ldr	r1, [r7, #12]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	4613      	mov	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4413      	add	r3, r2
 8003a48:	440b      	add	r3, r1
 8003a4a:	3306      	adds	r3, #6
 8003a4c:	7e3a      	ldrb	r2, [r7, #24]
 8003a4e:	701a      	strb	r2, [r3, #0]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <VibeCheckRGB_GetColor>:


VibeCheckRGB_Color VibeCheckRGB_GetColor(VibeCheckRGB* rgb, uint32_t index)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d901      	bls.n	8003a70 <VibeCheckRGB_GetColor+0x14>
			index = VC_RGB_NUM_LEDS - 1;
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	603b      	str	r3, [r7, #0]

	return rgb->colors[index];
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	4613      	mov	r3, r2
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	4413      	add	r3, r2
 8003a7a:	18ca      	adds	r2, r1, r3
 8003a7c:	f107 030c 	add.w	r3, r7, #12
 8003a80:	3204      	adds	r2, #4
 8003a82:	8811      	ldrh	r1, [r2, #0]
 8003a84:	7892      	ldrb	r2, [r2, #2]
 8003a86:	8019      	strh	r1, [r3, #0]
 8003a88:	709a      	strb	r2, [r3, #2]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	7b3a      	ldrb	r2, [r7, #12]
 8003a8e:	f362 0307 	bfi	r3, r2, #0, #8
 8003a92:	7b7a      	ldrb	r2, [r7, #13]
 8003a94:	f362 230f 	bfi	r3, r2, #8, #8
 8003a98:	7bba      	ldrb	r2, [r7, #14]
 8003a9a:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <VibeCheckRGB_SetAllOff>:


void VibeCheckRGB_SetAllOff(VibeCheckRGB* rgb)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af02      	add	r7, sp, #8
 8003ab0:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	e00a      	b.n	8003ace <VibeCheckRGB_SetAllOff+0x24>
		VibeCheckRGB_SetColor(rgb, i, 0, 0, 0);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2300      	movs	r3, #0
 8003abe:	2200      	movs	r2, #0
 8003ac0:	68f9      	ldr	r1, [r7, #12]
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ff99 	bl	80039fa <VibeCheckRGB_SetColor>
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3301      	adds	r3, #1
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d9f1      	bls.n	8003ab8 <VibeCheckRGB_SetAllOff+0xe>
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <VibeCheckRGB_SendColors>:


void VibeCheckRGB_SendColors(VibeCheckRGB* rgb)  /* send the colors to the LEDs */
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b088      	sub	sp, #32
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
	/* compute the bit stream timings */
	uint32_t i = VC_RGB_RESET_PERIODS;  /* put the reset periods first so we are not affected by spurious pin events at startup and such */
 8003ae6:	23e0      	movs	r3, #224	@ 0xe0
 8003ae8:	61fb      	str	r3, [r7, #28]
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	e06e      	b.n	8003bce <VibeCheckRGB_SendColors+0xf0>
	{
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003af0:	2308      	movs	r3, #8
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e01d      	b.n	8003b32 <VibeCheckRGB_SendColors+0x54>
			rgb->bit_stream[i++] = ((rgb->colors[j].g >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4613      	mov	r3, r2
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	4413      	add	r3, r2
 8003b00:	440b      	add	r3, r1
 8003b02:	3305      	adds	r3, #5
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	fa42 f303 	asr.w	r3, r2, r3
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <VibeCheckRGB_SendColors+0x3e>
 8003b18:	2130      	movs	r1, #48	@ 0x30
 8003b1a:	e000      	b.n	8003b1e <VibeCheckRGB_SendColors+0x40>
 8003b1c:	2118      	movs	r1, #24
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	61fa      	str	r2, [r7, #28]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	3310      	adds	r3, #16
 8003b28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1de      	bne.n	8003af6 <VibeCheckRGB_SendColors+0x18>

		for (uint32_t k = 8; k > 0; k--)  /* red */
 8003b38:	2308      	movs	r3, #8
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	e01d      	b.n	8003b7a <VibeCheckRGB_SendColors+0x9c>
			rgb->bit_stream[i++] = ((rgb->colors[j].r >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	440b      	add	r3, r1
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	fa42 f303 	asr.w	r3, r2, r3
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <VibeCheckRGB_SendColors+0x86>
 8003b60:	2130      	movs	r1, #48	@ 0x30
 8003b62:	e000      	b.n	8003b66 <VibeCheckRGB_SendColors+0x88>
 8003b64:	2118      	movs	r1, #24
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	61fa      	str	r2, [r7, #28]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	3310      	adds	r3, #16
 8003b70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* red */
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1de      	bne.n	8003b3e <VibeCheckRGB_SendColors+0x60>

		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8003b80:	2308      	movs	r3, #8
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e01d      	b.n	8003bc2 <VibeCheckRGB_SendColors+0xe4>
			rgb->bit_stream[i++] = ((rgb->colors[j].b >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	440b      	add	r3, r1
 8003b92:	3306      	adds	r3, #6
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	fa42 f303 	asr.w	r3, r2, r3
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <VibeCheckRGB_SendColors+0xce>
 8003ba8:	2130      	movs	r1, #48	@ 0x30
 8003baa:	e000      	b.n	8003bae <VibeCheckRGB_SendColors+0xd0>
 8003bac:	2118      	movs	r1, #24
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	61fa      	str	r2, [r7, #28]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	3310      	adds	r3, #16
 8003bb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1de      	bne.n	8003b86 <VibeCheckRGB_SendColors+0xa8>
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d98d      	bls.n	8003af0 <VibeCheckRGB_SendColors+0x12>
	}

	/* start the DMA transfer */
	(void)HAL_TIM_PWM_Start_DMA(rgb->htim, VC_RGB_TIM_CHANNEL, (uint32_t*)rgb->bit_stream, VC_RGB_BUF_LEN);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f103 0220 	add.w	r2, r3, #32
 8003bde:	f44f 7326 	mov.w	r3, #664	@ 0x298
 8003be2:	2100      	movs	r1, #0
 8003be4:	f00e f834 	bl	8011c50 <HAL_TIM_PWM_Start_DMA>
}
 8003be8:	bf00      	nop
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <VibeCheckRGBCMD_Execute>:

*/


uint32_t VibeCheckRGBCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b09c      	sub	sp, #112	@ 0x70
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	667b      	str	r3, [r7, #100]	@ 0x64

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c02:	2240      	movs	r2, #64	@ 0x40
 8003c04:	4619      	mov	r1, r3
 8003c06:	6838      	ldr	r0, [r7, #0]
 8003c08:	f001 fe50 	bl	80058ac <VibeCheckShell_GetNextString>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80c2 	beq.w	8003d98 <VibeCheckRGBCMD_Execute+0x1a8>
	{
		if (!strcmp(str, "set"))
 8003c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c18:	4962      	ldr	r1, [pc, #392]	@ (8003da4 <VibeCheckRGBCMD_Execute+0x1b4>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fc fb78 	bl	8000310 <strcmp>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d141      	bne.n	8003caa <VibeCheckRGBCMD_Execute+0xba>
		{
			int32_t index, r, g, b;
			if (VibeCheckShell_GetNextInt(shell, &index)
 8003c26:	f107 0320 	add.w	r3, r7, #32
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6838      	ldr	r0, [r7, #0]
 8003c2e:	f001 feb5 	bl	800599c <VibeCheckShell_GetNextInt>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80af 	beq.w	8003d98 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &r)
 8003c3a:	f107 031c 	add.w	r3, r7, #28
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6838      	ldr	r0, [r7, #0]
 8003c42:	f001 feab 	bl	800599c <VibeCheckShell_GetNextInt>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80a5 	beq.w	8003d98 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &g)
 8003c4e:	f107 0318 	add.w	r3, r7, #24
 8003c52:	4619      	mov	r1, r3
 8003c54:	6838      	ldr	r0, [r7, #0]
 8003c56:	f001 fea1 	bl	800599c <VibeCheckShell_GetNextInt>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 809b 	beq.w	8003d98 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &b))
 8003c62:	f107 0314 	add.w	r3, r7, #20
 8003c66:	4619      	mov	r1, r3
 8003c68:	6838      	ldr	r0, [r7, #0]
 8003c6a:	f001 fe97 	bl	800599c <VibeCheckShell_GetNextInt>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8091 	beq.w	8003d98 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_SetColor(rgb, index, r, g, b);
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	b2d9      	uxtb	r1, r3
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4601      	mov	r1, r0
 8003c8c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003c8e:	f7ff feb4 	bl	80039fa <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(rgb);
 8003c92:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003c94:	f7ff ff23 	bl	8003ade <VibeCheckRGB_SendColors>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003c98:	4943      	ldr	r1, [pc, #268]	@ (8003da8 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003c9a:	6838      	ldr	r0, [r7, #0]
 8003c9c:	f001 ff26 	bl	8005aec <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003ca0:	6838      	ldr	r0, [r7, #0]
 8003ca2:	f001 ffa3 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e077      	b.n	8003d9a <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "get"))
 8003caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cae:	493f      	ldr	r1, [pc, #252]	@ (8003dac <VibeCheckRGBCMD_Execute+0x1bc>)
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fc fb2d 	bl	8000310 <strcmp>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d137      	bne.n	8003d2c <VibeCheckRGBCMD_Execute+0x13c>
		{
			int32_t index;
			if (VibeCheckShell_GetNextInt(shell, &index))
 8003cbc:	f107 0310 	add.w	r3, r7, #16
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6838      	ldr	r0, [r7, #0]
 8003cc4:	f001 fe6a 	bl	800599c <VibeCheckShell_GetNextInt>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d064      	beq.n	8003d98 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_Color color = VibeCheckRGB_GetColor(rgb, index);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003cd4:	f7ff fec2 	bl	8003a5c <VibeCheckRGB_GetColor>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	461a      	mov	r2, r3
 8003cdc:	733a      	strb	r2, [r7, #12]
 8003cde:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003ce2:	737a      	strb	r2, [r7, #13]
 8003ce4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003ce8:	73bb      	strb	r3, [r7, #14]

				VibeCheckShell_PutOutputString(shell, "ack");
 8003cea:	492f      	ldr	r1, [pc, #188]	@ (8003da8 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003cec:	6838      	ldr	r0, [r7, #0]
 8003cee:	f001 fefd 	bl	8005aec <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputSeparator(shell);
 8003cf2:	6838      	ldr	r0, [r7, #0]
 8003cf4:	f001 ff6c 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.r);
 8003cf8:	7b3b      	ldrb	r3, [r7, #12]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6838      	ldr	r0, [r7, #0]
 8003cfe:	f001 ff31 	bl	8005b64 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 8003d02:	6838      	ldr	r0, [r7, #0]
 8003d04:	f001 ff64 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.g);
 8003d08:	7b7b      	ldrb	r3, [r7, #13]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6838      	ldr	r0, [r7, #0]
 8003d0e:	f001 ff29 	bl	8005b64 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 8003d12:	6838      	ldr	r0, [r7, #0]
 8003d14:	f001 ff5c 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.b);
 8003d18:	7bbb      	ldrb	r3, [r7, #14]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6838      	ldr	r0, [r7, #0]
 8003d1e:	f001 ff21 	bl	8005b64 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003d22:	6838      	ldr	r0, [r7, #0]
 8003d24:	f001 ff62 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e036      	b.n	8003d9a <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "start"))  /* TODO: revisit this once we have a clearer idea of how the LED sequence should behave */
 8003d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d30:	491f      	ldr	r1, [pc, #124]	@ (8003db0 <VibeCheckRGBCMD_Execute+0x1c0>)
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc faec 	bl	8000310 <strcmp>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10e      	bne.n	8003d5c <VibeCheckRGBCMD_Execute+0x16c>
		{
			VibeCheckRGB_StartBaseSequence(rgb);
 8003d3e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003d40:	f7ff fe04 	bl	800394c <VibeCheckRGB_StartBaseSequence>
			VibeCheckRGB_StartTopSequence(rgb);
 8003d44:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003d46:	f7ff fe38 	bl	80039ba <VibeCheckRGB_StartTopSequence>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003d4a:	4917      	ldr	r1, [pc, #92]	@ (8003da8 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003d4c:	6838      	ldr	r0, [r7, #0]
 8003d4e:	f001 fecd 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003d52:	6838      	ldr	r0, [r7, #0]
 8003d54:	f001 ff4a 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e01e      	b.n	8003d9a <VibeCheckRGBCMD_Execute+0x1aa>
		}
		else if (!strcmp(str, "stop"))
 8003d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d60:	4914      	ldr	r1, [pc, #80]	@ (8003db4 <VibeCheckRGBCMD_Execute+0x1c4>)
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc fad4 	bl	8000310 <strcmp>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d114      	bne.n	8003d98 <VibeCheckRGBCMD_Execute+0x1a8>
		{
			VibeCheckRGB_StopBaseSequence(rgb);
 8003d6e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003d70:	f7ff fdfe 	bl	8003970 <VibeCheckRGB_StopBaseSequence>
			VibeCheckRGB_StopTopSequence(rgb);
 8003d74:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003d76:	f7ff fe32 	bl	80039de <VibeCheckRGB_StopTopSequence>
			VibeCheckRGB_SetAllOff(rgb);
 8003d7a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003d7c:	f7ff fe95 	bl	8003aaa <VibeCheckRGB_SetAllOff>
			VibeCheckRGB_SendColors(rgb);
 8003d80:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003d82:	f7ff feac 	bl	8003ade <VibeCheckRGB_SendColors>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003d86:	4908      	ldr	r1, [pc, #32]	@ (8003da8 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003d88:	6838      	ldr	r0, [r7, #0]
 8003d8a:	f001 feaf 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003d8e:	6838      	ldr	r0, [r7, #0]
 8003d90:	f001 ff2c 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <VibeCheckRGBCMD_Execute+0x1aa>
		}
	}

	return 0;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3768      	adds	r7, #104	@ 0x68
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	0801d660 	.word	0x0801d660
 8003da8:	0801d664 	.word	0x0801d664
 8003dac:	0801d668 	.word	0x0801d668
 8003db0:	0801d66c 	.word	0x0801d66c
 8003db4:	0801d674 	.word	0x0801d674

08003db8 <VibeCheckSensor_Init>:

#include "vibecheck_sensor.h"


void VibeCheckSensor_Init(VibeCheckSensor* sensor, volatile uint32_t* time_micros, SPI_HandleTypeDef* hspi0, SPI_HandleTypeDef* hspi1, SPI_HandleTypeDef* hspi2)
{
 8003db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dba:	b0a1      	sub	sp, #132	@ 0x84
 8003dbc:	af06      	add	r7, sp, #24
 8003dbe:	6178      	str	r0, [r7, #20]
 8003dc0:	6139      	str	r1, [r7, #16]
 8003dc2:	60fa      	str	r2, [r7, #12]
 8003dc4:	60bb      	str	r3, [r7, #8]
	sensor->data_ind = 0;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
	sensor->data_ready = 0;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
	sensor->time_prev_update = 0;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
	sensor->generate_fake_data = 0;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

	sensor->time_micros = time_micros;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

	/* set all the configurations to defaults */
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003df2:	e04a      	b.n	8003e8a <VibeCheckSensor_Init+0xd2>
	{
		sensor->sensor_config[i].usr_offset_x = 0.0f;
 8003df4:	6979      	ldr	r1, [r7, #20]
 8003df6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_y = 0.0f;
 8003e08:	6979      	ldr	r1, [r7, #20]
 8003e0a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	3304      	adds	r3, #4
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_z = 0.0f;
 8003e1e:	6979      	ldr	r1, [r7, #20]
 8003e20:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e22:	4613      	mov	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].accel_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003e34:	6979      	ldr	r1, [r7, #20]
 8003e36:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	330c      	adds	r3, #12
 8003e44:	220d      	movs	r2, #13
 8003e46:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].g_range = VC_SENSOR_DEFAULT_G_RANGE;
 8003e48:	6979      	ldr	r1, [r7, #20]
 8003e4a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	3310      	adds	r3, #16
 8003e58:	2202      	movs	r2, #2
 8003e5a:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].gyro_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003e5c:	6979      	ldr	r1, [r7, #20]
 8003e5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3314      	adds	r3, #20
 8003e6c:	220d      	movs	r2, #13
 8003e6e:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].dps_range = VC_SENSOR_DEFAULT_DPS_RANGE;
 8003e70:	6979      	ldr	r1, [r7, #20]
 8003e72:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3318      	adds	r3, #24
 8003e80:	227d      	movs	r2, #125	@ 0x7d
 8003e82:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e86:	3301      	adds	r3, #1
 8003e88:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d9b1      	bls.n	8003df4 <VibeCheckSensor_Init+0x3c>
	}


	/* initialize the sensor chips */
	SPI_HandleTypeDef* hspi[VC_SENSOR_NUM_SENSORS] = {hspi0, hspi1, hspi2};
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c

	GPIO_TypeDef* cs_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_GPIO_Port, ACCEL_NCS2_GPIO_Port, ACCEL_NCS3_GPIO_Port};
 8003e9e:	4a49      	ldr	r2, [pc, #292]	@ (8003fc4 <VibeCheckSensor_Init+0x20c>)
 8003ea0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003ea4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ea6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t cs_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_Pin, ACCEL_NCS2_Pin, ACCEL_NCS3_Pin};
 8003eaa:	4a47      	ldr	r2, [pc, #284]	@ (8003fc8 <VibeCheckSensor_Init+0x210>)
 8003eac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003eb4:	6018      	str	r0, [r3, #0]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int1_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_GPIO_Port, ACCEL_INTA2_GPIO_Port, ACCEL_INTA3_GPIO_Port};
 8003eba:	4a44      	ldr	r2, [pc, #272]	@ (8003fcc <VibeCheckSensor_Init+0x214>)
 8003ebc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ec0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ec2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int1_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_Pin, ACCEL_INTA2_Pin, ACCEL_INTA3_Pin};
 8003ec6:	4a42      	ldr	r2, [pc, #264]	@ (8003fd0 <VibeCheckSensor_Init+0x218>)
 8003ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ecc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ed0:	6018      	str	r0, [r3, #0]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int2_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_GPIO_Port, ACCEL_INTB2_GPIO_Port, ACCEL_INTB3_GPIO_Port};
 8003ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8003fd4 <VibeCheckSensor_Init+0x21c>)
 8003ed8:	f107 0320 	add.w	r3, r7, #32
 8003edc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ede:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int2_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_Pin, ACCEL_INTB2_Pin, ACCEL_INTB3_Pin};
 8003ee2:	4a3d      	ldr	r2, [pc, #244]	@ (8003fd8 <VibeCheckSensor_Init+0x220>)
 8003ee4:	f107 0318 	add.w	r3, r7, #24
 8003ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003eec:	6018      	str	r0, [r3, #0]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	8019      	strh	r1, [r3, #0]

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ef6:	e05c      	b.n	8003fb2 <VibeCheckSensor_Init+0x1fa>
	{
		LSM6DS3_Init(&sensor->sensor_array[i], &sensor->sensor_config[i],
 8003ef8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	3350      	adds	r3, #80	@ 0x50
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4413      	add	r3, r2
 8003f08:	1d1d      	adds	r5, r3, #4
 8003f0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	18d6      	adds	r6, r2, r3
 8003f18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	3360      	adds	r3, #96	@ 0x60
 8003f1e:	f107 0208 	add.w	r2, r7, #8
 8003f22:	4413      	add	r3, r2
 8003f24:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8003f32:	f107 0308 	add.w	r3, r7, #8
 8003f36:	18cb      	adds	r3, r1, r3
 8003f38:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8003f3c:	6039      	str	r1, [r7, #0]
 8003f3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003f46:	f107 0308 	add.w	r3, r7, #8
 8003f4a:	18c3      	adds	r3, r0, r3
 8003f4c:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 8003f50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003f58:	f107 0308 	add.w	r3, r7, #8
 8003f5c:	18c3      	adds	r3, r0, r3
 8003f5e:	f853 1c34 	ldr.w	r1, [r3, #-52]
 8003f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003f6a:	f107 0308 	add.w	r3, r7, #8
 8003f6e:	18c3      	adds	r3, r0, r3
 8003f70:	f833 0c3c 	ldrh.w	r0, [r3, #-60]
 8003f74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 8003f7c:	f107 0308 	add.w	r3, r7, #8
 8003f80:	18e3      	adds	r3, r4, r3
 8003f82:	f853 4c48 	ldr.w	r4, [r3, #-72]
 8003f86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	3360      	adds	r3, #96	@ 0x60
 8003f8c:	f107 0c08 	add.w	ip, r7, #8
 8003f90:	4463      	add	r3, ip
 8003f92:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	9403      	str	r4, [sp, #12]
 8003f9a:	9002      	str	r0, [sp, #8]
 8003f9c:	9101      	str	r1, [sp, #4]
 8003f9e:	9200      	str	r2, [sp, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4631      	mov	r1, r6
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f7fc fd86 	bl	8000ab8 <LSM6DS3_Init>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003fac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fae:	3301      	adds	r3, #1
 8003fb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d99f      	bls.n	8003ef8 <VibeCheckSensor_Init+0x140>
				hspi[i], cs_ports[i], cs_pins[i], int1_ports[i], int1_pins[i], int2_ports[i], int2_pins[i]);
	}

}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	376c      	adds	r7, #108	@ 0x6c
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	0801d67c 	.word	0x0801d67c
 8003fc8:	0801d688 	.word	0x0801d688
 8003fcc:	0801d690 	.word	0x0801d690
 8003fd0:	0801d69c 	.word	0x0801d69c
 8003fd4:	0801d6a4 	.word	0x0801d6a4
 8003fd8:	0801d6b0 	.word	0x0801d6b0

08003fdc <VibeCheckSensor_Update>:


void VibeCheckSensor_Update(VibeCheckSensor* sensor)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003fe4:	f003 f97c 	bl	80072e0 <HAL_GetTick>
 8003fe8:	61b8      	str	r0, [r7, #24]
	if (time - sensor->time_prev_update > VC_SENSOR_UPDATE_INTERVAL_MS)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003ff8:	f240 8113 	bls.w	8004222 <VibeCheckSensor_Update+0x246>

		/* if not connected -> test for connection -> if success, set connected flag, configure the sensor, and send message to host */
		/* if connected but not running -> test for connection -> if failure, reset connected flag, send message to host */
		/* if running either accelerometer or gyro -> check data received status flag and reset it -> if no data received, reset connected flag, send message to host */

		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	e0ac      	b.n	800415c <VibeCheckSensor_Update+0x180>
		{
			if (!sensor->status[i].is_connected)
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	33fc      	adds	r3, #252	@ 0xfc
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d134      	bne.n	8004082 <VibeCheckSensor_Update+0xa6>
			{
				if (LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	3350      	adds	r3, #80	@ 0x50
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4413      	add	r3, r2
 8004028:	3304      	adds	r3, #4
 800402a:	4618      	mov	r0, r3
 800402c:	f7fc fd6e 	bl	8000b0c <LSM6DS3_TestCommunication>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 808f 	beq.w	8004156 <VibeCheckSensor_Update+0x17a>
				{
					sensor->status[i].is_connected = 1;
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	33fc      	adds	r3, #252	@ 0xfc
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]
					sensor->status[i].connection_change_flag = 1;
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]
					sensor->status[i].received_data_flag = 1;  /* give ourselves a grace period to receive data by artificially setting the flag */
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004074:	2201      	movs	r2, #1
 8004076:	601a      	str	r2, [r3, #0]
					VibeCheckSensor_UpdateSensor(sensor, i);
 8004078:	69f9      	ldr	r1, [r7, #28]
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fbe4 	bl	8004848 <VibeCheckSensor_UpdateSensor>
 8004080:	e069      	b.n	8004156 <VibeCheckSensor_Update+0x17a>
				}
			}
			else
			{
				if (!sensor->status[i].accel_measuring && !sensor->status[i].gyro_measuring)
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d130      	bne.n	80040fc <VibeCheckSensor_Update+0x120>
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d124      	bne.n	80040fc <VibeCheckSensor_Update+0x120>
				{
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	3350      	adds	r3, #80	@ 0x50
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc fd21 	bl	8000b0c <LSM6DS3_TestCommunication>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d142      	bne.n	8004156 <VibeCheckSensor_Update+0x17a>
					{
						sensor->status[i].is_connected = 0;
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	33fc      	adds	r3, #252	@ 0xfc
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 80040fa:	e02c      	b.n	8004156 <VibeCheckSensor_Update+0x17a>
					}
				}
				else
				{
					if (sensor->status[i].received_data_flag)
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	69fa      	ldr	r2, [r7, #28]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <VibeCheckSensor_Update+0x150>
					{
						sensor->status[i].received_data_flag = 0;
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e014      	b.n	8004156 <VibeCheckSensor_Update+0x17a>
					}
					else
					{
						sensor->status[i].is_connected = 0;
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	33fc      	adds	r3, #252	@ 0xfc
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3301      	adds	r3, #1
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	2b02      	cmp	r3, #2
 8004160:	f67f af4f 	bls.w	8004002 <VibeCheckSensor_Update+0x26>
				}
			}
		}

		/* make some random data (3 sine wave phases) for testing the host plotting/data logging */
		if (sensor->generate_fake_data)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800416a:	2b00      	cmp	r3, #0
 800416c:	d055      	beq.n	800421a <VibeCheckSensor_Update+0x23e>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	ee07 3a90 	vmov	s15, r3
 8004174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004178:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800422c <VibeCheckSensor_Update+0x250>
 800417c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004180:	eeb0 0a67 	vmov.f32	s0, s15
 8004184:	f018 fc14 	bl	801c9b0 <sinf>
 8004188:	ed87 0a05 	vstr	s0, [r7, #20]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004196:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800422c <VibeCheckSensor_Update+0x250>
 800419a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800419e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004230 <VibeCheckSensor_Update+0x254>
 80041a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041a6:	eeb0 0a67 	vmov.f32	s0, s15
 80041aa:	f018 fc01 	bl	801c9b0 <sinf>
 80041ae:	ed87 0a04 	vstr	s0, [r7, #16]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	ee07 3a90 	vmov	s15, r3
 80041b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041bc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800422c <VibeCheckSensor_Update+0x250>
 80041c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041c4:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004234 <VibeCheckSensor_Update+0x258>
 80041c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041cc:	eeb0 0a67 	vmov.f32	s0, s15
 80041d0:	f018 fbee 	bl	801c9b0 <sinf>
 80041d4:	ed87 0a03 	vstr	s0, [r7, #12]

			VibeCheckSensor_AddData(sensor, 1, time, val1, val2, val3);
 80041d8:	ed97 1a03 	vldr	s2, [r7, #12]
 80041dc:	edd7 0a04 	vldr	s1, [r7, #16]
 80041e0:	ed97 0a05 	vldr	s0, [r7, #20]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	2101      	movs	r1, #1
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fb82 	bl	80048f2 <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 2, time, val3, val1, val2);
 80041ee:	ed97 1a04 	vldr	s2, [r7, #16]
 80041f2:	edd7 0a05 	vldr	s1, [r7, #20]
 80041f6:	ed97 0a03 	vldr	s0, [r7, #12]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	2102      	movs	r1, #2
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fb77 	bl	80048f2 <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 3, time, val2, val3, val1);
 8004204:	ed97 1a05 	vldr	s2, [r7, #20]
 8004208:	edd7 0a03 	vldr	s1, [r7, #12]
 800420c:	ed97 0a04 	vldr	s0, [r7, #16]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	2103      	movs	r1, #3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fb6c 	bl	80048f2 <VibeCheckSensor_AddData>
		}

		sensor->time_prev_update = time;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
	}
}
 8004222:	bf00      	nop
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40c90fd0 	.word	0x40c90fd0
 8004230:	3f860a8b 	.word	0x3f860a8b
 8004234:	40060a8b 	.word	0x40060a8b

08004238 <VibeCheckSensor_StartAccel>:

void VibeCheckSensor_StartAccel(VibeCheckSensor* sensor, uint32_t channel)  /* start acceleration measurement of specified channel */
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <VibeCheckSensor_StartAccel+0x14>
 8004248:	2302      	movs	r3, #2
 800424a:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].accel_measuring)
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	33fc      	adds	r3, #252	@ 0xfc
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d017      	beq.n	8004292 <VibeCheckSensor_StartAccel+0x5a>
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10b      	bne.n	8004292 <VibeCheckSensor_StartAccel+0x5a>
		LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	3350      	adds	r3, #80	@ 0x50
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	3304      	adds	r3, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f7fc fccd 	bl	8000c2c <LSM6DS3_StartAccel>
	/*
	 * I choose to set the flag here immediately, even if the accelerometer is not currently connected. This way, it can be set
	 * to start sampling immediately once the accelerometer is plugged in.
	 */

	sensor->status[channel].accel_measuring = 1;
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80042a4:	2201      	movs	r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <VibeCheckSensor_StopAccel>:

void VibeCheckSensor_StopAccel(VibeCheckSensor* sensor, uint32_t channel)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <VibeCheckSensor_StopAccel+0x14>
 80042c0:	2302      	movs	r3, #2
 80042c2:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].accel_measuring)
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	33fc      	adds	r3, #252	@ 0xfc
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d017      	beq.n	800430a <VibeCheckSensor_StopAccel+0x5a>
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <VibeCheckSensor_StopAccel+0x5a>
		LSM6DS3_StopAccel(&sensor->sensor_array[channel]);
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	3350      	adds	r3, #80	@ 0x50
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	3304      	adds	r3, #4
 8004304:	4618      	mov	r0, r3
 8004306:	f7fc fdcb 	bl	8000ea0 <LSM6DS3_StopAccel>

	sensor->status[channel].accel_measuring = 0;
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <VibeCheckSensor_StartGyro>:

void VibeCheckSensor_StartGyro(VibeCheckSensor* sensor, uint32_t channel)  /* start gyroscope measurement of specified channel */
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <VibeCheckSensor_StartGyro+0x14>
 8004338:	2302      	movs	r3, #2
 800433a:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].gyro_measuring)
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	33fc      	adds	r3, #252	@ 0xfc
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d017      	beq.n	8004382 <VibeCheckSensor_StartGyro+0x5a>
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10b      	bne.n	8004382 <VibeCheckSensor_StartGyro+0x5a>
		LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	3350      	adds	r3, #80	@ 0x50
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4413      	add	r3, r2
 800437a:	3304      	adds	r3, #4
 800437c:	4618      	mov	r0, r3
 800437e:	f7fc fcf7 	bl	8000d70 <LSM6DS3_StartGyro>

	sensor->status[channel].gyro_measuring = 1;
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]
}
 8004398:	bf00      	nop
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <VibeCheckSensor_StopGyro>:

void VibeCheckSensor_StopGyro(VibeCheckSensor* sensor, uint32_t channel)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <VibeCheckSensor_StopGyro+0x14>
 80043b0:	2302      	movs	r3, #2
 80043b2:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].gyro_measuring)
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	33fc      	adds	r3, #252	@ 0xfc
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d017      	beq.n	80043fa <VibeCheckSensor_StopGyro+0x5a>
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <VibeCheckSensor_StopGyro+0x5a>
		LSM6DS3_StopGyro(&sensor->sensor_array[channel]);
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	3350      	adds	r3, #80	@ 0x50
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	3304      	adds	r3, #4
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc fd61 	bl	8000ebc <LSM6DS3_StopGyro>

	sensor->status[channel].gyro_measuring = 0;
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <VibeCheckSensor_SetAccelODR>:

void VibeCheckSensor_SetAccelODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <VibeCheckSensor_SetAccelODR+0x16>
 800442a:	2302      	movs	r3, #2
 800442c:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].accel_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	210a      	movs	r1, #10
 8004432:	480a      	ldr	r0, [pc, #40]	@ (800445c <VibeCheckSensor_SetAccelODR+0x44>)
 8004434:	f7fe fd86 	bl	8002f44 <FindClosest>
 8004438:	68f9      	ldr	r1, [r7, #12]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	330c      	adds	r3, #12
 8004448:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f9fb 	bl	8004848 <VibeCheckSensor_UpdateSensor>
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	0801dbd4 	.word	0x0801dbd4

08004460 <VibeCheckSensor_SetGyroODR>:

void VibeCheckSensor_SetGyroODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <VibeCheckSensor_SetGyroODR+0x16>
 8004472:	2302      	movs	r3, #2
 8004474:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].gyro_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	210a      	movs	r1, #10
 800447a:	480a      	ldr	r0, [pc, #40]	@ (80044a4 <VibeCheckSensor_SetGyroODR+0x44>)
 800447c:	f7fe fd62 	bl	8002f44 <FindClosest>
 8004480:	68f9      	ldr	r1, [r7, #12]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	3314      	adds	r3, #20
 8004490:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f9d7 	bl	8004848 <VibeCheckSensor_UpdateSensor>
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	0801dbd4 	.word	0x0801dbd4

080044a8 <VibeCheckSensor_SetAccelRange>:

void VibeCheckSensor_SetAccelRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <VibeCheckSensor_SetAccelRange+0x16>
 80044ba:	2302      	movs	r3, #2
 80044bc:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].g_range = FindClosest(VC_SENSOR_ALLOWED_G_RANGE, sizeof(VC_SENSOR_ALLOWED_G_RANGE) / sizeof(VC_SENSOR_ALLOWED_G_RANGE[0]), range);
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	2104      	movs	r1, #4
 80044c2:	480a      	ldr	r0, [pc, #40]	@ (80044ec <VibeCheckSensor_SetAccelRange+0x44>)
 80044c4:	f7fe fd3e 	bl	8002f44 <FindClosest>
 80044c8:	68f9      	ldr	r1, [r7, #12]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	4613      	mov	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	3310      	adds	r3, #16
 80044d8:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f9b3 	bl	8004848 <VibeCheckSensor_UpdateSensor>
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	0801dbfc 	.word	0x0801dbfc

080044f0 <VibeCheckSensor_SetGyroRange>:

void VibeCheckSensor_SetGyroRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <VibeCheckSensor_SetGyroRange+0x16>
 8004502:	2302      	movs	r3, #2
 8004504:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].dps_range = FindClosest(VC_SENSOR_ALLOWED_DPS_RANGE, sizeof(VC_SENSOR_ALLOWED_DPS_RANGE) / sizeof(VC_SENSOR_ALLOWED_DPS_RANGE[0]), range);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	2105      	movs	r1, #5
 800450a:	480a      	ldr	r0, [pc, #40]	@ (8004534 <VibeCheckSensor_SetGyroRange+0x44>)
 800450c:	f7fe fd1a 	bl	8002f44 <FindClosest>
 8004510:	68f9      	ldr	r1, [r7, #12]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	4613      	mov	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	3318      	adds	r3, #24
 8004520:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f98f 	bl	8004848 <VibeCheckSensor_UpdateSensor>
}
 800452a:	bf00      	nop
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	0801dc0c 	.word	0x0801dc0c

08004538 <VibeCheckSensor_SetOffsets>:

void VibeCheckSensor_SetOffsets(VibeCheckSensor* sensor, uint32_t channel, float x, float y, float z)  /* accelerometer DC offsets in g */
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6178      	str	r0, [r7, #20]
 8004540:	6139      	str	r1, [r7, #16]
 8004542:	ed87 0a03 	vstr	s0, [r7, #12]
 8004546:	edc7 0a02 	vstr	s1, [r7, #8]
 800454a:	ed87 1a01 	vstr	s2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <VibeCheckSensor_SetOffsets+0x20>
 8004554:	2302      	movs	r3, #2
 8004556:	613b      	str	r3, [r7, #16]

	/* TODO: test that setting the sensor user offset registers works */

	if (x > VC_SENSOR_MAX_OFFSET) x = VC_SENSOR_MAX_OFFSET;  /* clamp the offsets to the max value that can fit in the register */
 8004558:	edd7 7a03 	vldr	s15, [r7, #12]
 800455c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004628 <VibeCheckSensor_SetOffsets+0xf0>
 8004560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004568:	dd01      	ble.n	800456e <VibeCheckSensor_SetOffsets+0x36>
 800456a:	4b30      	ldr	r3, [pc, #192]	@ (800462c <VibeCheckSensor_SetOffsets+0xf4>)
 800456c:	60fb      	str	r3, [r7, #12]
	if (x < -VC_SENSOR_MAX_OFFSET) x = -VC_SENSOR_MAX_OFFSET;
 800456e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004572:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004630 <VibeCheckSensor_SetOffsets+0xf8>
 8004576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800457a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457e:	d501      	bpl.n	8004584 <VibeCheckSensor_SetOffsets+0x4c>
 8004580:	4b2c      	ldr	r3, [pc, #176]	@ (8004634 <VibeCheckSensor_SetOffsets+0xfc>)
 8004582:	60fb      	str	r3, [r7, #12]
	if (y > VC_SENSOR_MAX_OFFSET) y = VC_SENSOR_MAX_OFFSET;
 8004584:	edd7 7a02 	vldr	s15, [r7, #8]
 8004588:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004628 <VibeCheckSensor_SetOffsets+0xf0>
 800458c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004594:	dd01      	ble.n	800459a <VibeCheckSensor_SetOffsets+0x62>
 8004596:	4b25      	ldr	r3, [pc, #148]	@ (800462c <VibeCheckSensor_SetOffsets+0xf4>)
 8004598:	60bb      	str	r3, [r7, #8]
	if (y < -VC_SENSOR_MAX_OFFSET) y = -VC_SENSOR_MAX_OFFSET;
 800459a:	edd7 7a02 	vldr	s15, [r7, #8]
 800459e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004630 <VibeCheckSensor_SetOffsets+0xf8>
 80045a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045aa:	d501      	bpl.n	80045b0 <VibeCheckSensor_SetOffsets+0x78>
 80045ac:	4b21      	ldr	r3, [pc, #132]	@ (8004634 <VibeCheckSensor_SetOffsets+0xfc>)
 80045ae:	60bb      	str	r3, [r7, #8]
	if (z > VC_SENSOR_MAX_OFFSET) z = VC_SENSOR_MAX_OFFSET;
 80045b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80045b4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004628 <VibeCheckSensor_SetOffsets+0xf0>
 80045b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	dd01      	ble.n	80045c6 <VibeCheckSensor_SetOffsets+0x8e>
 80045c2:	4b1a      	ldr	r3, [pc, #104]	@ (800462c <VibeCheckSensor_SetOffsets+0xf4>)
 80045c4:	607b      	str	r3, [r7, #4]
	if (z < -VC_SENSOR_MAX_OFFSET) z = -VC_SENSOR_MAX_OFFSET;
 80045c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80045ca:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004630 <VibeCheckSensor_SetOffsets+0xf8>
 80045ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d6:	d501      	bpl.n	80045dc <VibeCheckSensor_SetOffsets+0xa4>
 80045d8:	4b16      	ldr	r3, [pc, #88]	@ (8004634 <VibeCheckSensor_SetOffsets+0xfc>)
 80045da:	607b      	str	r3, [r7, #4]

	sensor->sensor_config[channel].usr_offset_x = x;
 80045dc:	6979      	ldr	r1, [r7, #20]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_y = y;
 80045ee:	6979      	ldr	r1, [r7, #20]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	3304      	adds	r3, #4
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_z = z;
 8004602:	6979      	ldr	r1, [r7, #20]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4613      	mov	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	3308      	adds	r3, #8
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	601a      	str	r2, [r3, #0]

	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004616:	6939      	ldr	r1, [r7, #16]
 8004618:	6978      	ldr	r0, [r7, #20]
 800461a:	f000 f915 	bl	8004848 <VibeCheckSensor_UpdateSensor>
}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	3dfe0000 	.word	0x3dfe0000
 800462c:	3dfe0000 	.word	0x3dfe0000
 8004630:	bdfe0000 	.word	0xbdfe0000
 8004634:	bdfe0000 	.word	0xbdfe0000

08004638 <VibeCheckSensor_GetAccelODR>:

uint32_t VibeCheckSensor_GetAccelODR(VibeCheckSensor* sensor, uint32_t channel)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <VibeCheckSensor_GetAccelODR+0x14>
 8004648:	2302      	movs	r3, #2
 800464a:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].accel_odr_hz;
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	330c      	adds	r3, #12
 800465c:	681b      	ldr	r3, [r3, #0]
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <VibeCheckSensor_GetGyroODR>:

uint32_t VibeCheckSensor_GetGyroODR(VibeCheckSensor* sensor, uint32_t channel)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <VibeCheckSensor_GetGyroODR+0x14>
 800467a:	2302      	movs	r3, #2
 800467c:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].gyro_odr_hz;
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	3314      	adds	r3, #20
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <VibeCheckSensor_GetAccelRange>:

uint32_t VibeCheckSensor_GetAccelRange(VibeCheckSensor* sensor, uint32_t channel)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <VibeCheckSensor_GetAccelRange+0x14>
 80046ac:	2302      	movs	r3, #2
 80046ae:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].g_range;
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	3310      	adds	r3, #16
 80046c0:	681b      	ldr	r3, [r3, #0]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <VibeCheckSensor_GetGyroRange>:

uint32_t VibeCheckSensor_GetGyroRange(VibeCheckSensor* sensor, uint32_t channel)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <VibeCheckSensor_GetGyroRange+0x14>
 80046de:	2302      	movs	r3, #2
 80046e0:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].dps_range;
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	4613      	mov	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	3318      	adds	r3, #24
 80046f2:	681b      	ldr	r3, [r3, #0]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <VibeCheckSensor_GetOffsets>:

void VibeCheckSensor_GetOffsets(VibeCheckSensor* sensor, uint32_t channel, float* x, float* y, float* z)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <VibeCheckSensor_GetOffsets+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	60bb      	str	r3, [r7, #8]
	*x = sensor->sensor_config[channel].usr_offset_x;
 8004718:	68f9      	ldr	r1, [r7, #12]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	601a      	str	r2, [r3, #0]
	*y = sensor->sensor_config[channel].usr_offset_y;
 800472c:	68f9      	ldr	r1, [r7, #12]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	3304      	adds	r3, #4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	601a      	str	r2, [r3, #0]
	*z = sensor->sensor_config[channel].usr_offset_z;
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	4613      	mov	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	3308      	adds	r3, #8
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	601a      	str	r2, [r3, #0]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <VibeCheckSensor_StartFakeData>:


void VibeCheckSensor_StartFakeData(VibeCheckSensor* sensor)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 1;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <VibeCheckSensor_StopFakeData>:


void VibeCheckSensor_StopFakeData(VibeCheckSensor* sensor)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 0;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <VibeCheckSensor_IsConnected>:
	sensor->start_time = *sensor->time_micros;
}


uint32_t VibeCheckSensor_IsConnected(VibeCheckSensor* sensor, uint32_t channel)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <VibeCheckSensor_IsConnected+0x14>
 80047ac:	2302      	movs	r3, #2
 80047ae:	603b      	str	r3, [r7, #0]
	return sensor->status[channel].is_connected;
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	33fc      	adds	r3, #252	@ 0xfc
 80047c0:	681b      	ldr	r3, [r3, #0]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <VibeCheckSensor_ConnectionChanged>:


uint32_t VibeCheckSensor_ConnectionChanged(VibeCheckSensor* sensor, uint32_t* channel, uint32_t* is_connected)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b087      	sub	sp, #28
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e029      	b.n	8004834 <VibeCheckSensor_ConnectionChanged+0x66>
	{
		if (sensor->status[i].connection_change_flag)
 80047e0:	68f9      	ldr	r1, [r7, #12]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01a      	beq.n	800482e <VibeCheckSensor_ConnectionChanged+0x60>
		{
			sensor->status[i].connection_change_flag = 0;
 80047f8:	68f9      	ldr	r1, [r7, #12]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
			*channel = i;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	601a      	str	r2, [r3, #0]
			*is_connected = sensor->status[i].is_connected;
 8004814:	68f9      	ldr	r1, [r7, #12]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	33fc      	adds	r3, #252	@ 0xfc
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]
			return 1;
 800482a:	2301      	movs	r3, #1
 800482c:	e006      	b.n	800483c <VibeCheckSensor_ConnectionChanged+0x6e>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	3301      	adds	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d9d2      	bls.n	80047e0 <VibeCheckSensor_ConnectionChanged+0x12>
		}
	}

	return 0;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <VibeCheckSensor_UpdateSensor>:


void VibeCheckSensor_UpdateSensor(VibeCheckSensor* sensor, uint32_t channel)  /* send the new configuration parameters to a sensor chip */
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <VibeCheckSensor_UpdateSensor+0x14>
 8004858:	2302      	movs	r3, #2
 800485a:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected)
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	33fc      	adds	r3, #252	@ 0xfc
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d03b      	beq.n	80048ea <VibeCheckSensor_UpdateSensor+0xa2>
	{
		LSM6DS3_Configure(&sensor->sensor_array[channel]);
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	3350      	adds	r3, #80	@ 0x50
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	4413      	add	r3, r2
 8004882:	3304      	adds	r3, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f7fc f95b 	bl	8000b40 <LSM6DS3_Configure>
		if (sensor->status[channel].accel_measuring)
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <VibeCheckSensor_UpdateSensor+0x72>
			LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	3350      	adds	r3, #80	@ 0x50
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	3304      	adds	r3, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fc f9b9 	bl	8000c2c <LSM6DS3_StartAccel>
		if (sensor->status[channel].gyro_measuring)
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <VibeCheckSensor_UpdateSensor+0xa2>
			LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	3350      	adds	r3, #80	@ 0x50
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4413      	add	r3, r2
 80048e2:	3304      	adds	r3, #4
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fc fa43 	bl	8000d70 <LSM6DS3_StartGyro>
	}
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <VibeCheckSensor_AddData>:


void VibeCheckSensor_AddData(VibeCheckSensor* sensor, uint8_t id, uint32_t time, float x, float y, float z)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b087      	sub	sp, #28
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6178      	str	r0, [r7, #20]
 80048fa:	460b      	mov	r3, r1
 80048fc:	60fa      	str	r2, [r7, #12]
 80048fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8004902:	edc7 0a01 	vstr	s1, [r7, #4]
 8004906:	ed87 1a00 	vstr	s2, [r7]
 800490a:	74fb      	strb	r3, [r7, #19]
	sensor->data[sensor->data_ind].id = id;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 8004912:	6979      	ldr	r1, [r7, #20]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8004922:	7cfa      	ldrb	r2, [r7, #19]
 8004924:	701a      	strb	r2, [r3, #0]
	sensor->data[sensor->data_ind].time = time;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].x = x;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 8004946:	6979      	ldr	r1, [r7, #20]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].y = y;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 8004960:	6979      	ldr	r1, [r7, #20]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].z = z;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 800497a:	6979      	ldr	r1, [r7, #20]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	601a      	str	r2, [r3, #0]

	sensor->data_ind++;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
	if (sensor->data_ind == VC_SENSOR_DATA_PER_PACKET)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80049a2:	2b0a      	cmp	r3, #10
 80049a4:	d104      	bne.n	80049b0 <VibeCheckSensor_AddData+0xbe>
	{
		sensor->data_ready = 1;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
	{
		sensor->data_ind = 0;
		sensor->data_ready = 1;
	}
}
 80049ae:	e00c      	b.n	80049ca <VibeCheckSensor_AddData+0xd8>
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80049b6:	2b14      	cmp	r3, #20
 80049b8:	d107      	bne.n	80049ca <VibeCheckSensor_AddData+0xd8>
		sensor->data_ind = 0;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
		sensor->data_ready = 1;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <VibeCheckSensor_GetDataReady>:


uint32_t VibeCheckSensor_GetDataReady(VibeCheckSensor* sensor, VibeCheckSensor_Data** data)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
	if (sensor->data_ready)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	@ 0x2cc
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d015      	beq.n	8004a16 <VibeCheckSensor_GetDataReady+0x40>
	{
		sensor->data_ready = 0;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
		if (sensor->data_ind < VC_SENSOR_DATA_PER_PACKET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80049f8:	2b09      	cmp	r3, #9
 80049fa:	d805      	bhi.n	8004a08 <VibeCheckSensor_GetDataReady+0x32>
		{
			/* ready to send the second half */
			*data = &sensor->data[VC_SENSOR_DATA_PER_PACKET];
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f503 7200 	add.w	r2, r3, #512	@ 0x200
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e004      	b.n	8004a12 <VibeCheckSensor_GetDataReady+0x3c>
		}
		else
		{
			/* ready to send the first half */
			*data = &sensor->data[0];
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <VibeCheckSensor_GetDataReady+0x42>
	}
	return 0;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <VibeCheckSensor_EXTICallback>:


void VibeCheckSensor_EXTICallback(VibeCheckSensor* sensor, uint16_t GPIO_Pin)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	@ 0x28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
	/*
	 * Read the sensor data when a signal occurs on a data ready pin. We assume that the INT1 pin indicates acceleration
	 * data ready and that the INT2 pin indicates gyroscope data ready.
	 */

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a34:	e0a6      	b.n	8004b84 <VibeCheckSensor_EXTICallback+0x160>
	{
		if (GPIO_Pin == sensor->sensor_array[i].int1_pin && sensor->status[i].accel_measuring)
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	440b      	add	r3, r1
 8004a44:	3364      	adds	r3, #100	@ 0x64
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	887a      	ldrh	r2, [r7, #2]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d144      	bne.n	8004ad8 <VibeCheckSensor_EXTICallback+0xb4>
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d038      	beq.n	8004ad8 <VibeCheckSensor_EXTICallback+0xb4>
		{
			float x, y, z;
			LSM6DS3_ReadAccel(&sensor->sensor_array[i], &x, &y, &z);
 8004a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	3350      	adds	r3, #80	@ 0x50
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	1d18      	adds	r0, r3, #4
 8004a78:	f107 0318 	add.w	r3, r7, #24
 8004a7c:	f107 021c 	add.w	r2, r7, #28
 8004a80:	f107 0120 	add.w	r1, r7, #32
 8004a84:	f7fc fa28 	bl	8000ed8 <LSM6DS3_ReadAccel>
			VibeCheckSensor_AddData(sensor, 2 * i, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	b2d9      	uxtb	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	edd7 7a08 	vldr	s15, [r7, #32]
 8004aa4:	ed97 7a07 	vldr	s14, [r7, #28]
 8004aa8:	edd7 6a06 	vldr	s13, [r7, #24]
 8004aac:	eeb0 1a66 	vmov.f32	s2, s13
 8004ab0:	eef0 0a47 	vmov.f32	s1, s14
 8004ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff ff19 	bl	80048f2 <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
			break;
 8004ad6:	e05a      	b.n	8004b8e <VibeCheckSensor_EXTICallback+0x16a>
		}

		if (GPIO_Pin == sensor->sensor_array[i].int2_pin && sensor->status[i].gyro_measuring)
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	440b      	add	r3, r1
 8004ae6:	336c      	adds	r3, #108	@ 0x6c
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	887a      	ldrh	r2, [r7, #2]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d146      	bne.n	8004b7e <VibeCheckSensor_EXTICallback+0x15a>
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d03a      	beq.n	8004b7e <VibeCheckSensor_EXTICallback+0x15a>
		{
			float x, y, z;
			LSM6DS3_ReadGyro(&sensor->sensor_array[i], &x, &y, &z);
 8004b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	3350      	adds	r3, #80	@ 0x50
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	4413      	add	r3, r2
 8004b18:	1d18      	adds	r0, r3, #4
 8004b1a:	f107 030c 	add.w	r3, r7, #12
 8004b1e:	f107 0210 	add.w	r2, r7, #16
 8004b22:	f107 0114 	add.w	r1, r7, #20
 8004b26:	f7fc fa65 	bl	8000ff4 <LSM6DS3_ReadGyro>
			VibeCheckSensor_AddData(sensor, 2 * i + 1, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	3301      	adds	r3, #1
 8004b34:	b2d9      	uxtb	r1, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b4e:	edd7 6a03 	vldr	s13, [r7, #12]
 8004b52:	eeb0 1a66 	vmov.f32	s2, s13
 8004b56:	eef0 0a47 	vmov.f32	s1, s14
 8004b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff fec6 	bl	80048f2 <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004b78:	2201      	movs	r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
			break;
 8004b7c:	e007      	b.n	8004b8e <VibeCheckSensor_EXTICallback+0x16a>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	3301      	adds	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	f67f af55 	bls.w	8004a36 <VibeCheckSensor_EXTICallback+0x12>
		}
	}
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	3728      	adds	r7, #40	@ 0x28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <VibeCheckSensorCMD_Set>:

#include "vibecheck_sensor_handler.h"


static uint32_t VibeCheckSensorCMD_Set(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b09c      	sub	sp, #112	@ 0x70
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004ba4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004ba8:	2240      	movs	r2, #64	@ 0x40
 8004baa:	4619      	mov	r1, r3
 8004bac:	68b8      	ldr	r0, [r7, #8]
 8004bae:	f000 fe7d 	bl	80058ac <VibeCheckShell_GetNextString>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80eb 	beq.w	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
	{
		if (!strcmp(str, "accel"))
 8004bba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004bbe:	4977      	ldr	r1, [pc, #476]	@ (8004d9c <VibeCheckSensorCMD_Set+0x204>)
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fb fba5 	bl	8000310 <strcmp>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d14f      	bne.n	8004c6c <VibeCheckSensorCMD_Set+0xd4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004bcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004bd0:	2240      	movs	r2, #64	@ 0x40
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	68b8      	ldr	r0, [r7, #8]
 8004bd6:	f000 fe69 	bl	80058ac <VibeCheckShell_GetNextString>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80d7 	beq.w	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 8004be2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004be6:	496e      	ldr	r1, [pc, #440]	@ (8004da0 <VibeCheckSensorCMD_Set+0x208>)
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fb fb91 	bl	8000310 <strcmp>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d118      	bne.n	8004c26 <VibeCheckSensorCMD_Set+0x8e>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8004bf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	68b8      	ldr	r0, [r7, #8]
 8004bfc:	f000 fece 	bl	800599c <VibeCheckShell_GetNextInt>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 80c4 	beq.w	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelODR(sensor, channel, odr);
 8004c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7ff fc02 	bl	8004418 <VibeCheckSensor_SetAccelODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004c14:	4963      	ldr	r1, [pc, #396]	@ (8004da4 <VibeCheckSensorCMD_Set+0x20c>)
 8004c16:	68b8      	ldr	r0, [r7, #8]
 8004c18:	f000 ff68 	bl	8005aec <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004c1c:	68b8      	ldr	r0, [r7, #8]
 8004c1e:	f000 ffe5 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e0b5      	b.n	8004d92 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8004c26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c2a:	495f      	ldr	r1, [pc, #380]	@ (8004da8 <VibeCheckSensorCMD_Set+0x210>)
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fb fb6f 	bl	8000310 <strcmp>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f040 80ab 	bne.w	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8004c3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c3e:	4619      	mov	r1, r3
 8004c40:	68b8      	ldr	r0, [r7, #8]
 8004c42:	f000 feab 	bl	800599c <VibeCheckShell_GetNextInt>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80a1 	beq.w	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelRange(sensor, channel, range);
 8004c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c50:	461a      	mov	r2, r3
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff fc27 	bl	80044a8 <VibeCheckSensor_SetAccelRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004c5a:	4952      	ldr	r1, [pc, #328]	@ (8004da4 <VibeCheckSensorCMD_Set+0x20c>)
 8004c5c:	68b8      	ldr	r0, [r7, #8]
 8004c5e:	f000 ff45 	bl	8005aec <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004c62:	68b8      	ldr	r0, [r7, #8]
 8004c64:	f000 ffc2 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e092      	b.n	8004d92 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8004c6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c70:	494e      	ldr	r1, [pc, #312]	@ (8004dac <VibeCheckSensorCMD_Set+0x214>)
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fb fb4c 	bl	8000310 <strcmp>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d14b      	bne.n	8004d16 <VibeCheckSensorCMD_Set+0x17e>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004c7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c82:	2240      	movs	r2, #64	@ 0x40
 8004c84:	4619      	mov	r1, r3
 8004c86:	68b8      	ldr	r0, [r7, #8]
 8004c88:	f000 fe10 	bl	80058ac <VibeCheckShell_GetNextString>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d07e      	beq.n	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 8004c92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c96:	4942      	ldr	r1, [pc, #264]	@ (8004da0 <VibeCheckSensorCMD_Set+0x208>)
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fb fb39 	bl	8000310 <strcmp>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d117      	bne.n	8004cd4 <VibeCheckSensorCMD_Set+0x13c>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8004ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ca8:	4619      	mov	r1, r3
 8004caa:	68b8      	ldr	r0, [r7, #8]
 8004cac:	f000 fe76 	bl	800599c <VibeCheckShell_GetNextInt>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d06c      	beq.n	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroODR(sensor, channel, odr);
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff fbcf 	bl	8004460 <VibeCheckSensor_SetGyroODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004cc2:	4938      	ldr	r1, [pc, #224]	@ (8004da4 <VibeCheckSensorCMD_Set+0x20c>)
 8004cc4:	68b8      	ldr	r0, [r7, #8]
 8004cc6:	f000 ff11 	bl	8005aec <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004cca:	68b8      	ldr	r0, [r7, #8]
 8004ccc:	f000 ff8e 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e05e      	b.n	8004d92 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8004cd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004cd8:	4933      	ldr	r1, [pc, #204]	@ (8004da8 <VibeCheckSensorCMD_Set+0x210>)
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fb fb18 	bl	8000310 <strcmp>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d154      	bne.n	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8004ce6:	f107 0320 	add.w	r3, r7, #32
 8004cea:	4619      	mov	r1, r3
 8004cec:	68b8      	ldr	r0, [r7, #8]
 8004cee:	f000 fe55 	bl	800599c <VibeCheckShell_GetNextInt>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d04b      	beq.n	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroRange(sensor, channel, range);
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff fbf6 	bl	80044f0 <VibeCheckSensor_SetGyroRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004d04:	4927      	ldr	r1, [pc, #156]	@ (8004da4 <VibeCheckSensorCMD_Set+0x20c>)
 8004d06:	68b8      	ldr	r0, [r7, #8]
 8004d08:	f000 fef0 	bl	8005aec <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004d0c:	68b8      	ldr	r0, [r7, #8]
 8004d0e:	f000 ff6d 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e03d      	b.n	8004d92 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 8004d16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d1a:	4925      	ldr	r1, [pc, #148]	@ (8004db0 <VibeCheckSensorCMD_Set+0x218>)
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fb faf7 	bl	8000310 <strcmp>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d133      	bne.n	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
		{
			float x, y, z;
			if (VibeCheckShell_GetNextFloat(shell, &x)
 8004d28:	f107 031c 	add.w	r3, r7, #28
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	68b8      	ldr	r0, [r7, #8]
 8004d30:	f000 fe50 	bl	80059d4 <VibeCheckShell_GetNextFloat>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d02a      	beq.n	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &y)
 8004d3a:	f107 0318 	add.w	r3, r7, #24
 8004d3e:	4619      	mov	r1, r3
 8004d40:	68b8      	ldr	r0, [r7, #8]
 8004d42:	f000 fe47 	bl	80059d4 <VibeCheckShell_GetNextFloat>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d021      	beq.n	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &z))
 8004d4c:	f107 0314 	add.w	r3, r7, #20
 8004d50:	4619      	mov	r1, r3
 8004d52:	68b8      	ldr	r0, [r7, #8]
 8004d54:	f000 fe3e 	bl	80059d4 <VibeCheckShell_GetNextFloat>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d018      	beq.n	8004d90 <VibeCheckSensorCMD_Set+0x1f8>
			{
				VibeCheckSensor_SetOffsets(sensor, channel, x, y, z);
 8004d5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d62:	ed97 7a06 	vldr	s14, [r7, #24]
 8004d66:	edd7 6a05 	vldr	s13, [r7, #20]
 8004d6a:	eeb0 1a66 	vmov.f32	s2, s13
 8004d6e:	eef0 0a47 	vmov.f32	s1, s14
 8004d72:	eeb0 0a67 	vmov.f32	s0, s15
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7ff fbdd 	bl	8004538 <VibeCheckSensor_SetOffsets>
				VibeCheckShell_PutOutputString(shell, "ack");
 8004d7e:	4909      	ldr	r1, [pc, #36]	@ (8004da4 <VibeCheckSensorCMD_Set+0x20c>)
 8004d80:	68b8      	ldr	r0, [r7, #8]
 8004d82:	f000 feb3 	bl	8005aec <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004d86:	68b8      	ldr	r0, [r7, #8]
 8004d88:	f000 ff30 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <VibeCheckSensorCMD_Set+0x1fa>
			}
		}
	}


	return 0;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3770      	adds	r7, #112	@ 0x70
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	0801d6b8 	.word	0x0801d6b8
 8004da0:	0801d6c0 	.word	0x0801d6c0
 8004da4:	0801d6c4 	.word	0x0801d6c4
 8004da8:	0801d6c8 	.word	0x0801d6c8
 8004dac:	0801d6d0 	.word	0x0801d6d0
 8004db0:	0801d6d8 	.word	0x0801d6d8

08004db4 <VibeCheckSensorCMD_Get>:


static uint32_t VibeCheckSensorCMD_Get(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b09a      	sub	sp, #104	@ 0x68
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004dc0:	f107 0320 	add.w	r3, r7, #32
 8004dc4:	2240      	movs	r2, #64	@ 0x40
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	68b8      	ldr	r0, [r7, #8]
 8004dca:	f000 fd6f 	bl	80058ac <VibeCheckShell_GetNextString>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80fb 	beq.w	8004fcc <VibeCheckSensorCMD_Get+0x218>
	{
		if (!strcmp(str, "accel"))
 8004dd6:	f107 0320 	add.w	r3, r7, #32
 8004dda:	497f      	ldr	r1, [pc, #508]	@ (8004fd8 <VibeCheckSensorCMD_Get+0x224>)
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fb fa97 	bl	8000310 <strcmp>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d147      	bne.n	8004e78 <VibeCheckSensorCMD_Get+0xc4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004de8:	f107 0320 	add.w	r3, r7, #32
 8004dec:	2240      	movs	r2, #64	@ 0x40
 8004dee:	4619      	mov	r1, r3
 8004df0:	68b8      	ldr	r0, [r7, #8]
 8004df2:	f000 fd5b 	bl	80058ac <VibeCheckShell_GetNextString>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80e7 	beq.w	8004fcc <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 8004dfe:	f107 0320 	add.w	r3, r7, #32
 8004e02:	4976      	ldr	r1, [pc, #472]	@ (8004fdc <VibeCheckSensorCMD_Get+0x228>)
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fb fa83 	bl	8000310 <strcmp>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d114      	bne.n	8004e3a <VibeCheckSensorCMD_Get+0x86>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004e10:	4973      	ldr	r1, [pc, #460]	@ (8004fe0 <VibeCheckSensorCMD_Get+0x22c>)
 8004e12:	68b8      	ldr	r0, [r7, #8]
 8004e14:	f000 fe6a 	bl	8005aec <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004e18:	68b8      	ldr	r0, [r7, #8]
 8004e1a:	f000 fed9 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelODR(sensor, channel));
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7ff fc09 	bl	8004638 <VibeCheckSensor_GetAccelODR>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4619      	mov	r1, r3
 8004e2a:	68b8      	ldr	r0, [r7, #8]
 8004e2c:	f000 fe9a 	bl	8005b64 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004e30:	68b8      	ldr	r0, [r7, #8]
 8004e32:	f000 fedb 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e0c9      	b.n	8004fce <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 8004e3a:	f107 0320 	add.w	r3, r7, #32
 8004e3e:	4969      	ldr	r1, [pc, #420]	@ (8004fe4 <VibeCheckSensorCMD_Get+0x230>)
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fb fa65 	bl	8000310 <strcmp>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f040 80bf 	bne.w	8004fcc <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004e4e:	4964      	ldr	r1, [pc, #400]	@ (8004fe0 <VibeCheckSensorCMD_Get+0x22c>)
 8004e50:	68b8      	ldr	r0, [r7, #8]
 8004e52:	f000 fe4b 	bl	8005aec <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004e56:	68b8      	ldr	r0, [r7, #8]
 8004e58:	f000 feba 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelRange(sensor, channel));
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f7ff fc1c 	bl	800469c <VibeCheckSensor_GetAccelRange>
 8004e64:	4603      	mov	r3, r0
 8004e66:	4619      	mov	r1, r3
 8004e68:	68b8      	ldr	r0, [r7, #8]
 8004e6a:	f000 fe7b 	bl	8005b64 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004e6e:	68b8      	ldr	r0, [r7, #8]
 8004e70:	f000 febc 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0aa      	b.n	8004fce <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8004e78:	f107 0320 	add.w	r3, r7, #32
 8004e7c:	495a      	ldr	r1, [pc, #360]	@ (8004fe8 <VibeCheckSensorCMD_Get+0x234>)
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fb fa46 	bl	8000310 <strcmp>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d146      	bne.n	8004f18 <VibeCheckSensorCMD_Get+0x164>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004e8a:	f107 0320 	add.w	r3, r7, #32
 8004e8e:	2240      	movs	r2, #64	@ 0x40
 8004e90:	4619      	mov	r1, r3
 8004e92:	68b8      	ldr	r0, [r7, #8]
 8004e94:	f000 fd0a 	bl	80058ac <VibeCheckShell_GetNextString>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 8096 	beq.w	8004fcc <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 8004ea0:	f107 0320 	add.w	r3, r7, #32
 8004ea4:	494d      	ldr	r1, [pc, #308]	@ (8004fdc <VibeCheckSensorCMD_Get+0x228>)
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fb fa32 	bl	8000310 <strcmp>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d114      	bne.n	8004edc <VibeCheckSensorCMD_Get+0x128>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004eb2:	494b      	ldr	r1, [pc, #300]	@ (8004fe0 <VibeCheckSensorCMD_Get+0x22c>)
 8004eb4:	68b8      	ldr	r0, [r7, #8]
 8004eb6:	f000 fe19 	bl	8005aec <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004eba:	68b8      	ldr	r0, [r7, #8]
 8004ebc:	f000 fe88 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroODR(sensor, channel));
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f7ff fbd1 	bl	800466a <VibeCheckSensor_GetGyroODR>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	4619      	mov	r1, r3
 8004ecc:	68b8      	ldr	r0, [r7, #8]
 8004ece:	f000 fe49 	bl	8005b64 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004ed2:	68b8      	ldr	r0, [r7, #8]
 8004ed4:	f000 fe8a 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e078      	b.n	8004fce <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 8004edc:	f107 0320 	add.w	r3, r7, #32
 8004ee0:	4940      	ldr	r1, [pc, #256]	@ (8004fe4 <VibeCheckSensorCMD_Get+0x230>)
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb fa14 	bl	8000310 <strcmp>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d16e      	bne.n	8004fcc <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004eee:	493c      	ldr	r1, [pc, #240]	@ (8004fe0 <VibeCheckSensorCMD_Get+0x22c>)
 8004ef0:	68b8      	ldr	r0, [r7, #8]
 8004ef2:	f000 fdfb 	bl	8005aec <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004ef6:	68b8      	ldr	r0, [r7, #8]
 8004ef8:	f000 fe6a 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroRange(sensor, channel));
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f7ff fbe5 	bl	80046ce <VibeCheckSensor_GetGyroRange>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4619      	mov	r1, r3
 8004f08:	68b8      	ldr	r0, [r7, #8]
 8004f0a:	f000 fe2b 	bl	8005b64 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004f0e:	68b8      	ldr	r0, [r7, #8]
 8004f10:	f000 fe6c 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e05a      	b.n	8004fce <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 8004f18:	f107 0320 	add.w	r3, r7, #32
 8004f1c:	4933      	ldr	r1, [pc, #204]	@ (8004fec <VibeCheckSensorCMD_Get+0x238>)
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb f9f6 	bl	8000310 <strcmp>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d132      	bne.n	8004f90 <VibeCheckSensorCMD_Get+0x1dc>
		{
			float x, y, z;
			VibeCheckSensor_GetOffsets(sensor, channel, &x, &y, &z);
 8004f2a:	f107 0118 	add.w	r1, r7, #24
 8004f2e:	f107 021c 	add.w	r2, r7, #28
 8004f32:	f107 0314 	add.w	r3, r7, #20
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7ff fbdf 	bl	8004700 <VibeCheckSensor_GetOffsets>

			VibeCheckShell_PutOutputString(shell, "ack");
 8004f42:	4927      	ldr	r1, [pc, #156]	@ (8004fe0 <VibeCheckSensorCMD_Get+0x22c>)
 8004f44:	68b8      	ldr	r0, [r7, #8]
 8004f46:	f000 fdd1 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004f4a:	68b8      	ldr	r0, [r7, #8]
 8004f4c:	f000 fe40 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, x);
 8004f50:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f54:	eeb0 0a67 	vmov.f32	s0, s15
 8004f58:	68b8      	ldr	r0, [r7, #8]
 8004f5a:	f000 fe1b 	bl	8005b94 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004f5e:	68b8      	ldr	r0, [r7, #8]
 8004f60:	f000 fe36 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, y);
 8004f64:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f68:	eeb0 0a67 	vmov.f32	s0, s15
 8004f6c:	68b8      	ldr	r0, [r7, #8]
 8004f6e:	f000 fe11 	bl	8005b94 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004f72:	68b8      	ldr	r0, [r7, #8]
 8004f74:	f000 fe2c 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, z);
 8004f78:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f80:	68b8      	ldr	r0, [r7, #8]
 8004f82:	f000 fe07 	bl	8005b94 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004f86:	68b8      	ldr	r0, [r7, #8]
 8004f88:	f000 fe30 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e01e      	b.n	8004fce <VibeCheckSensorCMD_Get+0x21a>
		}
		else if (!strcmp(str, "connected"))
 8004f90:	f107 0320 	add.w	r3, r7, #32
 8004f94:	4916      	ldr	r1, [pc, #88]	@ (8004ff0 <VibeCheckSensorCMD_Get+0x23c>)
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fb f9ba 	bl	8000310 <strcmp>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d114      	bne.n	8004fcc <VibeCheckSensorCMD_Get+0x218>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8004fa2:	490f      	ldr	r1, [pc, #60]	@ (8004fe0 <VibeCheckSensorCMD_Get+0x22c>)
 8004fa4:	68b8      	ldr	r0, [r7, #8]
 8004fa6:	f000 fda1 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004faa:	68b8      	ldr	r0, [r7, #8]
 8004fac:	f000 fe10 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_IsConnected(sensor, channel));
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7ff fbf2 	bl	800479c <VibeCheckSensor_IsConnected>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4619      	mov	r1, r3
 8004fbc:	68b8      	ldr	r0, [r7, #8]
 8004fbe:	f000 fdd1 	bl	8005b64 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004fc2:	68b8      	ldr	r0, [r7, #8]
 8004fc4:	f000 fe12 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <VibeCheckSensorCMD_Get+0x21a>
		}
	}

	return 0;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3760      	adds	r7, #96	@ 0x60
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	0801d6b8 	.word	0x0801d6b8
 8004fdc:	0801d6c0 	.word	0x0801d6c0
 8004fe0:	0801d6c4 	.word	0x0801d6c4
 8004fe4:	0801d6c8 	.word	0x0801d6c8
 8004fe8:	0801d6d0 	.word	0x0801d6d0
 8004fec:	0801d6d8 	.word	0x0801d6d8
 8004ff0:	0801d6e0 	.word	0x0801d6e0

08004ff4 <VibeCheckSensorCMD_Execute>:


uint32_t VibeCheckSensorCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b094      	sub	sp, #80	@ 0x50
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	int32_t channel;
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005002:	f107 030c 	add.w	r3, r7, #12
 8005006:	2240      	movs	r2, #64	@ 0x40
 8005008:	4619      	mov	r1, r3
 800500a:	6838      	ldr	r0, [r7, #0]
 800500c:	f000 fc4e 	bl	80058ac <VibeCheckShell_GetNextString>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 8101 	beq.w	800521a <VibeCheckSensorCMD_Execute+0x226>
	{
		if (!strcmp(str, "fakedata"))
 8005018:	f107 030c 	add.w	r3, r7, #12
 800501c:	4981      	ldr	r1, [pc, #516]	@ (8005224 <VibeCheckSensorCMD_Execute+0x230>)
 800501e:	4618      	mov	r0, r3
 8005020:	f7fb f976 	bl	8000310 <strcmp>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d135      	bne.n	8005096 <VibeCheckSensorCMD_Execute+0xa2>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800502a:	f107 030c 	add.w	r3, r7, #12
 800502e:	2240      	movs	r2, #64	@ 0x40
 8005030:	4619      	mov	r1, r3
 8005032:	6838      	ldr	r0, [r7, #0]
 8005034:	f000 fc3a 	bl	80058ac <VibeCheckShell_GetNextString>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80ed 	beq.w	800521a <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 8005040:	f107 030c 	add.w	r3, r7, #12
 8005044:	4978      	ldr	r1, [pc, #480]	@ (8005228 <VibeCheckSensorCMD_Execute+0x234>)
 8005046:	4618      	mov	r0, r3
 8005048:	f7fb f962 	bl	8000310 <strcmp>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <VibeCheckSensorCMD_Execute+0x76>
				{
					VibeCheckSensor_StartFakeData(sensor);
 8005052:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005054:	f7ff fb86 	bl	8004764 <VibeCheckSensor_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005058:	4974      	ldr	r1, [pc, #464]	@ (800522c <VibeCheckSensorCMD_Execute+0x238>)
 800505a:	6838      	ldr	r0, [r7, #0]
 800505c:	f000 fd46 	bl	8005aec <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005060:	6838      	ldr	r0, [r7, #0]
 8005062:	f000 fdc3 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005066:	2301      	movs	r3, #1
 8005068:	e0d8      	b.n	800521c <VibeCheckSensorCMD_Execute+0x228>
				}
				else if (!strcmp(str, "stop"))
 800506a:	f107 030c 	add.w	r3, r7, #12
 800506e:	4970      	ldr	r1, [pc, #448]	@ (8005230 <VibeCheckSensorCMD_Execute+0x23c>)
 8005070:	4618      	mov	r0, r3
 8005072:	f7fb f94d 	bl	8000310 <strcmp>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	f040 80ce 	bne.w	800521a <VibeCheckSensorCMD_Execute+0x226>
				{
					VibeCheckSensor_StopFakeData(sensor);
 800507e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005080:	f7ff fb7e 	bl	8004780 <VibeCheckSensor_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005084:	4969      	ldr	r1, [pc, #420]	@ (800522c <VibeCheckSensorCMD_Execute+0x238>)
 8005086:	6838      	ldr	r0, [r7, #0]
 8005088:	f000 fd30 	bl	8005aec <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800508c:	6838      	ldr	r0, [r7, #0]
 800508e:	f000 fdad 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005092:	2301      	movs	r3, #1
 8005094:	e0c2      	b.n	800521c <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
		else if (VibeCheckShell_TurnToInt(str, &channel))
 8005096:	f107 0208 	add.w	r2, r7, #8
 800509a:	f107 030c 	add.w	r3, r7, #12
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fcb3 	bl	8005a0c <VibeCheckShell_TurnToInt>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80b6 	beq.w	800521a <VibeCheckSensorCMD_Execute+0x226>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80050ae:	f107 030c 	add.w	r3, r7, #12
 80050b2:	2240      	movs	r2, #64	@ 0x40
 80050b4:	4619      	mov	r1, r3
 80050b6:	6838      	ldr	r0, [r7, #0]
 80050b8:	f000 fbf8 	bl	80058ac <VibeCheckShell_GetNextString>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 80ab 	beq.w	800521a <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 80050c4:	f107 030c 	add.w	r3, r7, #12
 80050c8:	4957      	ldr	r1, [pc, #348]	@ (8005228 <VibeCheckSensorCMD_Execute+0x234>)
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fb f920 	bl	8000310 <strcmp>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d138      	bne.n	8005148 <VibeCheckSensorCMD_Execute+0x154>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80050d6:	f107 030c 	add.w	r3, r7, #12
 80050da:	2240      	movs	r2, #64	@ 0x40
 80050dc:	4619      	mov	r1, r3
 80050de:	6838      	ldr	r0, [r7, #0]
 80050e0:	f000 fbe4 	bl	80058ac <VibeCheckShell_GetNextString>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 8097 	beq.w	800521a <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 80050ec:	f107 030c 	add.w	r3, r7, #12
 80050f0:	4950      	ldr	r1, [pc, #320]	@ (8005234 <VibeCheckSensorCMD_Execute+0x240>)
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fb f90c 	bl	8000310 <strcmp>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10d      	bne.n	800511a <VibeCheckSensorCMD_Execute+0x126>
						{
							VibeCheckSensor_StartAccel(sensor, channel);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4619      	mov	r1, r3
 8005102:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005104:	f7ff f898 	bl	8004238 <VibeCheckSensor_StartAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005108:	4948      	ldr	r1, [pc, #288]	@ (800522c <VibeCheckSensorCMD_Execute+0x238>)
 800510a:	6838      	ldr	r0, [r7, #0]
 800510c:	f000 fcee 	bl	8005aec <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005110:	6838      	ldr	r0, [r7, #0]
 8005112:	f000 fd6b 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005116:	2301      	movs	r3, #1
 8005118:	e080      	b.n	800521c <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 800511a:	f107 030c 	add.w	r3, r7, #12
 800511e:	4946      	ldr	r1, [pc, #280]	@ (8005238 <VibeCheckSensorCMD_Execute+0x244>)
 8005120:	4618      	mov	r0, r3
 8005122:	f7fb f8f5 	bl	8000310 <strcmp>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d176      	bne.n	800521a <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StartGyro(sensor, channel);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4619      	mov	r1, r3
 8005130:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005132:	f7ff f8f9 	bl	8004328 <VibeCheckSensor_StartGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005136:	493d      	ldr	r1, [pc, #244]	@ (800522c <VibeCheckSensorCMD_Execute+0x238>)
 8005138:	6838      	ldr	r0, [r7, #0]
 800513a:	f000 fcd7 	bl	8005aec <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 800513e:	6838      	ldr	r0, [r7, #0]
 8005140:	f000 fd54 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005144:	2301      	movs	r3, #1
 8005146:	e069      	b.n	800521c <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "stop"))
 8005148:	f107 030c 	add.w	r3, r7, #12
 800514c:	4938      	ldr	r1, [pc, #224]	@ (8005230 <VibeCheckSensorCMD_Execute+0x23c>)
 800514e:	4618      	mov	r0, r3
 8005150:	f7fb f8de 	bl	8000310 <strcmp>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d137      	bne.n	80051ca <VibeCheckSensorCMD_Execute+0x1d6>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800515a:	f107 030c 	add.w	r3, r7, #12
 800515e:	2240      	movs	r2, #64	@ 0x40
 8005160:	4619      	mov	r1, r3
 8005162:	6838      	ldr	r0, [r7, #0]
 8005164:	f000 fba2 	bl	80058ac <VibeCheckShell_GetNextString>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d055      	beq.n	800521a <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 800516e:	f107 030c 	add.w	r3, r7, #12
 8005172:	4930      	ldr	r1, [pc, #192]	@ (8005234 <VibeCheckSensorCMD_Execute+0x240>)
 8005174:	4618      	mov	r0, r3
 8005176:	f7fb f8cb 	bl	8000310 <strcmp>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10d      	bne.n	800519c <VibeCheckSensorCMD_Execute+0x1a8>
						{
							VibeCheckSensor_StopAccel(sensor, channel);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4619      	mov	r1, r3
 8005184:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005186:	f7ff f893 	bl	80042b0 <VibeCheckSensor_StopAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 800518a:	4928      	ldr	r1, [pc, #160]	@ (800522c <VibeCheckSensorCMD_Execute+0x238>)
 800518c:	6838      	ldr	r0, [r7, #0]
 800518e:	f000 fcad 	bl	8005aec <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005192:	6838      	ldr	r0, [r7, #0]
 8005194:	f000 fd2a 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005198:	2301      	movs	r3, #1
 800519a:	e03f      	b.n	800521c <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 800519c:	f107 030c 	add.w	r3, r7, #12
 80051a0:	4925      	ldr	r1, [pc, #148]	@ (8005238 <VibeCheckSensorCMD_Execute+0x244>)
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fb f8b4 	bl	8000310 <strcmp>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d135      	bne.n	800521a <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StopGyro(sensor, channel);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4619      	mov	r1, r3
 80051b2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80051b4:	f7ff f8f4 	bl	80043a0 <VibeCheckSensor_StopGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 80051b8:	491c      	ldr	r1, [pc, #112]	@ (800522c <VibeCheckSensorCMD_Execute+0x238>)
 80051ba:	6838      	ldr	r0, [r7, #0]
 80051bc:	f000 fc96 	bl	8005aec <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 80051c0:	6838      	ldr	r0, [r7, #0]
 80051c2:	f000 fd13 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
							return 1;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e028      	b.n	800521c <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "set"))
 80051ca:	f107 030c 	add.w	r3, r7, #12
 80051ce:	491b      	ldr	r1, [pc, #108]	@ (800523c <VibeCheckSensorCMD_Execute+0x248>)
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fb f89d 	bl	8000310 <strcmp>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <VibeCheckSensorCMD_Execute+0x1fe>
				{
					if (VibeCheckSensorCMD_Set(sensor, shell, channel))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	461a      	mov	r2, r3
 80051e0:	6839      	ldr	r1, [r7, #0]
 80051e2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80051e4:	f7ff fcd8 	bl	8004b98 <VibeCheckSensorCMD_Set>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d015      	beq.n	800521a <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e014      	b.n	800521c <VibeCheckSensorCMD_Execute+0x228>
					}
				}
				else if (!strcmp(str, "get"))
 80051f2:	f107 030c 	add.w	r3, r7, #12
 80051f6:	4912      	ldr	r1, [pc, #72]	@ (8005240 <VibeCheckSensorCMD_Execute+0x24c>)
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fb f889 	bl	8000310 <strcmp>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <VibeCheckSensorCMD_Execute+0x226>
				{
					if (VibeCheckSensorCMD_Get(sensor, shell, channel))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	461a      	mov	r2, r3
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800520c:	f7ff fdd2 	bl	8004db4 <VibeCheckSensorCMD_Get>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
	}

	return 0;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3750      	adds	r7, #80	@ 0x50
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	0801d6ec 	.word	0x0801d6ec
 8005228:	0801d6f8 	.word	0x0801d6f8
 800522c:	0801d6c4 	.word	0x0801d6c4
 8005230:	0801d700 	.word	0x0801d700
 8005234:	0801d6b8 	.word	0x0801d6b8
 8005238:	0801d6d0 	.word	0x0801d6d0
 800523c:	0801d708 	.word	0x0801d708
 8005240:	0801d70c 	.word	0x0801d70c

08005244 <VibeCheckSensorSender_Data_Execute>:


uint32_t VibeCheckSensorSender_Data_Execute(void* obj, VibeCheckShell* shell)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	613b      	str	r3, [r7, #16]

	VibeCheckSensor_Data* data;
	if (VibeCheckSensor_GetDataReady(sensor, &data))
 8005252:	f107 030c 	add.w	r3, r7, #12
 8005256:	4619      	mov	r1, r3
 8005258:	6938      	ldr	r0, [r7, #16]
 800525a:	f7ff fbbc 	bl	80049d6 <VibeCheckSensor_GetDataReady>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d04e      	beq.n	8005302 <VibeCheckSensorSender_Data_Execute+0xbe>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8005264:	4929      	ldr	r1, [pc, #164]	@ (800530c <VibeCheckSensorSender_Data_Execute+0xc8>)
 8005266:	6838      	ldr	r0, [r7, #0]
 8005268:	f000 fc40 	bl	8005aec <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 800526c:	6838      	ldr	r0, [r7, #0]
 800526e:	f000 fcaf 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_SENSOR_DATA_PER_PACKET);
 8005272:	210a      	movs	r1, #10
 8005274:	6838      	ldr	r0, [r7, #0]
 8005276:	f000 fc75 	bl	8005b64 <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 800527e:	e038      	b.n	80052f2 <VibeCheckSensorSender_Data_Execute+0xae>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 8005280:	6838      	ldr	r0, [r7, #0]
 8005282:	f000 fca5 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	4619      	mov	r1, r3
 800528c:	6838      	ldr	r0, [r7, #0]
 800528e:	f000 fc69 	bl	8005b64 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8005292:	6838      	ldr	r0, [r7, #0]
 8005294:	f000 fc9c 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4619      	mov	r1, r3
 800529e:	6838      	ldr	r0, [r7, #0]
 80052a0:	f000 fc60 	bl	8005b64 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 80052a4:	6838      	ldr	r0, [r7, #0]
 80052a6:	f000 fc93 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80052b0:	eeb0 0a67 	vmov.f32	s0, s15
 80052b4:	6838      	ldr	r0, [r7, #0]
 80052b6:	f000 fc6d 	bl	8005b94 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80052ba:	6838      	ldr	r0, [r7, #0]
 80052bc:	f000 fc88 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80052c6:	eeb0 0a67 	vmov.f32	s0, s15
 80052ca:	6838      	ldr	r0, [r7, #0]
 80052cc:	f000 fc62 	bl	8005b94 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80052d0:	6838      	ldr	r0, [r7, #0]
 80052d2:	f000 fc7d 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80052dc:	eeb0 0a67 	vmov.f32	s0, s15
 80052e0:	6838      	ldr	r0, [r7, #0]
 80052e2:	f000 fc57 	bl	8005b94 <VibeCheckShell_PutOutputFloat>

			data++;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3314      	adds	r3, #20
 80052ea:	60fb      	str	r3, [r7, #12]
			data_written++;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	3301      	adds	r3, #1
 80052f0:	617b      	str	r3, [r7, #20]
		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b09      	cmp	r3, #9
 80052f6:	d9c3      	bls.n	8005280 <VibeCheckSensorSender_Data_Execute+0x3c>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 80052f8:	6838      	ldr	r0, [r7, #0]
 80052fa:	f000 fc77 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>

		return 1;
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <VibeCheckSensorSender_Data_Execute+0xc0>
	}

	return 0;
 8005302:	2300      	movs	r3, #0

}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	0801d710 	.word	0x0801d710

08005310 <VibeCheckSensorSender_Status_Execute>:


uint32_t VibeCheckSensorSender_Status_Execute(void* obj, VibeCheckShell* shell)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	617b      	str	r3, [r7, #20]

	uint32_t channel, is_connected;
	if (VibeCheckSensor_ConnectionChanged(sensor, &channel, &is_connected))
 800531e:	f107 020c 	add.w	r2, r7, #12
 8005322:	f107 0310 	add.w	r3, r7, #16
 8005326:	4619      	mov	r1, r3
 8005328:	6978      	ldr	r0, [r7, #20]
 800532a:	f7ff fa50 	bl	80047ce <VibeCheckSensor_ConnectionChanged>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d026      	beq.n	8005382 <VibeCheckSensorSender_Status_Execute+0x72>
	{
		VibeCheckShell_PutOutputString(shell, "event");
 8005334:	4915      	ldr	r1, [pc, #84]	@ (800538c <VibeCheckSensorSender_Status_Execute+0x7c>)
 8005336:	6838      	ldr	r0, [r7, #0]
 8005338:	f000 fbd8 	bl	8005aec <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 800533c:	6838      	ldr	r0, [r7, #0]
 800533e:	f000 fc47 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "sensor");
 8005342:	4913      	ldr	r1, [pc, #76]	@ (8005390 <VibeCheckSensorSender_Status_Execute+0x80>)
 8005344:	6838      	ldr	r0, [r7, #0]
 8005346:	f000 fbd1 	bl	8005aec <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 800534a:	6838      	ldr	r0, [r7, #0]
 800534c:	f000 fc40 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, channel);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4619      	mov	r1, r3
 8005354:	6838      	ldr	r0, [r7, #0]
 8005356:	f000 fc05 	bl	8005b64 <VibeCheckShell_PutOutputInt>
		VibeCheckShell_PutOutputSeparator(shell);
 800535a:	6838      	ldr	r0, [r7, #0]
 800535c:	f000 fc38 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>

		if (is_connected)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <VibeCheckSensorSender_Status_Execute+0x60>
			VibeCheckShell_PutOutputString(shell, "connected");
 8005366:	490b      	ldr	r1, [pc, #44]	@ (8005394 <VibeCheckSensorSender_Status_Execute+0x84>)
 8005368:	6838      	ldr	r0, [r7, #0]
 800536a:	f000 fbbf 	bl	8005aec <VibeCheckShell_PutOutputString>
 800536e:	e003      	b.n	8005378 <VibeCheckSensorSender_Status_Execute+0x68>
		else
			VibeCheckShell_PutOutputString(shell, "disconnected");
 8005370:	4909      	ldr	r1, [pc, #36]	@ (8005398 <VibeCheckSensorSender_Status_Execute+0x88>)
 8005372:	6838      	ldr	r0, [r7, #0]
 8005374:	f000 fbba 	bl	8005aec <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8005378:	6838      	ldr	r0, [r7, #0]
 800537a:	f000 fc37 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
		return 1;
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <VibeCheckSensorSender_Status_Execute+0x74>
	}

	return 0;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	0801d718 	.word	0x0801d718
 8005390:	0801d720 	.word	0x0801d720
 8005394:	0801d6e0 	.word	0x0801d6e0
 8005398:	0801d728 	.word	0x0801d728

0800539c <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80053aa:	461a      	mov	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	6013      	str	r3, [r2, #0]
	shell->input_tail = 0;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80053b6:	461a      	mov	r2, r3
 80053b8:	2300      	movs	r3, #0
 80053ba:	6053      	str	r3, [r2, #4]
	shell->input_count = 0;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80053c2:	461a      	mov	r2, r3
 80053c4:	2300      	movs	r3, #0
 80053c6:	6093      	str	r3, [r2, #8]
	shell->input_delimiter_count = 0;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80053ce:	461a      	mov	r2, r3
 80053d0:	2300      	movs	r3, #0
 80053d2:	60d3      	str	r3, [r2, #12]

	shell->output_head = 0;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80053da:	461a      	mov	r2, r3
 80053dc:	2300      	movs	r3, #0
 80053de:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80053e6:	461a      	mov	r2, r3
 80053e8:	2300      	movs	r3, #0
 80053ea:	6153      	str	r3, [r2, #20]
	shell->output_count = 0;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80053f2:	461a      	mov	r2, r3
 80053f4:	2300      	movs	r3, #0
 80053f6:	6193      	str	r3, [r2, #24]

	shell->ih_count = 0;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80053fe:	461a      	mov	r2, r3
 8005400:	2300      	movs	r3, #0
 8005402:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	shell->oh_count = 0;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800540c:	461a      	mov	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b099      	sub	sp, #100	@ 0x64
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8005428:	2300      	movs	r3, #0
 800542a:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005438:	d302      	bcc.n	8005440 <VibeCheckShell_Update+0x20>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 809a 	beq.w	8005582 <VibeCheckShell_Update+0x162>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 800544e:	2301      	movs	r3, #1
 8005450:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 8005454:	e095      	b.n	8005582 <VibeCheckShell_Update+0x162>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 8005456:	f107 030c 	add.w	r3, r7, #12
 800545a:	2240      	movs	r2, #64	@ 0x40
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa24 	bl	80058ac <VibeCheckShell_GetNextString>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d04b      	beq.n	8005502 <VibeCheckShell_Update+0xe2>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 800546a:	2300      	movs	r3, #0
 800546c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800546e:	e03f      	b.n	80054f0 <VibeCheckShell_Update+0xd0>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8005470:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005472:	4613      	mov	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4413      	add	r3, r2
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	4a69      	ldr	r2, [pc, #420]	@ (8005620 <VibeCheckShell_Update+0x200>)
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4413      	add	r3, r2
 8005482:	3304      	adds	r3, #4
 8005484:	f107 020c 	add.w	r2, r7, #12
 8005488:	4611      	mov	r1, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f7fa ff40 	bl	8000310 <strcmp>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d11d      	bne.n	80054d2 <VibeCheckShell_Update+0xb2>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800549a:	4613      	mov	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	4413      	add	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	18ca      	adds	r2, r1, r3
 80054a4:	4b5f      	ldr	r3, [pc, #380]	@ (8005624 <VibeCheckShell_Update+0x204>)
 80054a6:	4413      	add	r3, r2
 80054a8:	681c      	ldr	r4, [r3, #0]
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054ae:	4613      	mov	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	18ca      	adds	r2, r1, r3
 80054b8:	4b5b      	ldr	r3, [pc, #364]	@ (8005628 <VibeCheckShell_Update+0x208>)
 80054ba:	4413      	add	r3, r2
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	47a0      	blx	r4
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d11f      	bne.n	800550a <VibeCheckShell_Update+0xea>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 80054ca:	2303      	movs	r3, #3
 80054cc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 80054d0:	e01b      	b.n	800550a <VibeCheckShell_Update+0xea>
				}

				if (i == shell->ih_count - 1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80054d8:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80054dc:	3b01      	subs	r3, #1
 80054de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d102      	bne.n	80054ea <VibeCheckShell_Update+0xca>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 80054e4:	2302      	movs	r3, #2
 80054e6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 80054ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054ec:	3301      	adds	r3, #1
 80054ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80054f6:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80054fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d3b7      	bcc.n	8005470 <VibeCheckShell_Update+0x50>
 8005500:	e004      	b.n	800550c <VibeCheckShell_Update+0xec>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8005502:	2302      	movs	r3, #2
 8005504:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8005508:	e000      	b.n	800550c <VibeCheckShell_Update+0xec>
					break;
 800550a:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	5cd3      	ldrb	r3, [r2, r3]
 8005518:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	3b01      	subs	r3, #1
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800552c:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	3301      	adds	r3, #1
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800553e:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554c:	d105      	bne.n	800555a <VibeCheckShell_Update+0x13a>
				shell->input_tail = 0;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005554:	461a      	mov	r2, r3
 8005556:	2300      	movs	r3, #0
 8005558:	6053      	str	r3, [r2, #4]

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 800555a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800555e:	4619      	mov	r1, r3
 8005560:	4832      	ldr	r0, [pc, #200]	@ (800562c <VibeCheckShell_Update+0x20c>)
 8005562:	f014 fcca 	bl	8019efa <strchr>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d100      	bne.n	800556e <VibeCheckShell_Update+0x14e>
		{
 800556c:	e7ce      	b.n	800550c <VibeCheckShell_Update+0xec>
				break;  /* found the delimiter */
 800556e:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	3b01      	subs	r3, #1
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005580:	60d3      	str	r3, [r2, #12]
	while (shell->input_delimiter_count)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f47f af63 	bne.w	8005456 <VibeCheckShell_Update+0x36>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8005590:	2300      	movs	r3, #0
 8005592:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005594:	e01a      	b.n	80055cc <VibeCheckShell_Update+0x1ac>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800559a:	f242 2344 	movw	r3, #8772	@ 0x2244
 800559e:	440b      	add	r3, r1
 80055a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80055a8:	f242 2344 	movw	r3, #8772	@ 0x2244
 80055ac:	4403      	add	r3, r0
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	440b      	add	r3, r1
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	4618      	mov	r0, r3
 80055b8:	4790      	blx	r2
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <VibeCheckShell_Update+0x1a6>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint32_t i = 0; i < shell->oh_count; i++)
 80055c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055c8:	3301      	adds	r3, #1
 80055ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80055d2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80055d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055d8:	429a      	cmp	r2, r3
 80055da:	d3dc      	bcc.n	8005596 <VibeCheckShell_Update+0x176>
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055e8:	d302      	bcc.n	80055f0 <VibeCheckShell_Update+0x1d0>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 80055f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80055f4:	2300      	movs	r3, #0
 80055f6:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80055fa:	f362 0307 	bfi	r3, r2, #0, #8
 80055fe:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8005602:	f362 230f 	bfi	r3, r2, #8, #8
 8005606:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800560a:	f362 4317 	bfi	r3, r2, #16, #8
 800560e:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8005612:	f362 631f 	bfi	r3, r2, #24, #8
}
 8005616:	4618      	mov	r0, r3
 8005618:	3764      	adds	r7, #100	@ 0x64
 800561a:	46bd      	mov	sp, r7
 800561c:	bd90      	pop	{r4, r7, pc}
 800561e:	bf00      	nop
 8005620:	00010018 	.word	0x00010018
 8005624:	0001005c 	.word	0x0001005c
 8005628:	00010060 	.word	0x00010060
 800562c:	0801d738 	.word	0x0801d738

08005630 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 8005630:	b084      	sub	sp, #16
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	f107 0014 	add.w	r0, r7, #20
 800563e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005648:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800564c:	2b3f      	cmp	r3, #63	@ 0x3f
 800564e:	d819      	bhi.n	8005684 <VibeCheckShell_RegisterInputHandler+0x54>
		shell->input_handlers[shell->ih_count++] = handler;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005656:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800565a:	1c53      	adds	r3, r2, #1
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 8005662:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4413      	add	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	18ca      	adds	r2, r1, r3
 8005672:	4b08      	ldr	r3, [pc, #32]	@ (8005694 <VibeCheckShell_RegisterInputHandler+0x64>)
 8005674:	4413      	add	r3, r2
 8005676:	3304      	adds	r3, #4
 8005678:	f107 0114 	add.w	r1, r7, #20
 800567c:	2248      	movs	r2, #72	@ 0x48
 800567e:	4618      	mov	r0, r3
 8005680:	f014 fcd1 	bl	801a026 <memcpy>
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800568e:	b004      	add	sp, #16
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	00010018 	.word	0x00010018

08005698 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	1d3b      	adds	r3, r7, #4
 80056a2:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80056ac:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80056b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80056b2:	d815      	bhi.n	80056e0 <VibeCheckShell_RegisterOutputHandler+0x48>
		shell->output_handlers[shell->oh_count++] = handler;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80056ba:	f8d3 2420 	ldr.w	r2, [r3, #1056]	@ 0x420
 80056be:	1c53      	adds	r3, r2, #1
 80056c0:	68f9      	ldr	r1, [r7, #12]
 80056c2:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 80056c6:	f8c1 3420 	str.w	r3, [r1, #1056]	@ 0x420
 80056ca:	68f9      	ldr	r1, [r7, #12]
 80056cc:	f242 2344 	movw	r3, #8772	@ 0x2244
 80056d0:	4413      	add	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	440b      	add	r3, r1
 80056d6:	1d3a      	adds	r2, r7, #4
 80056d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056dc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80056e0:	bf00      	nop
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e03e      	b.n	800577c <VibeCheckShell_PutInput+0x90>
	{
		if (*input)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d03f      	beq.n	8005786 <VibeCheckShell_PutInput+0x9a>
		{
			shell->input[shell->input_head++] = *input;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68f9      	ldr	r1, [r7, #12]
 8005712:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8005716:	600a      	str	r2, [r1, #0]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	7811      	ldrb	r1, [r2, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800572c:	d105      	bne.n	800573a <VibeCheckShell_PutInput+0x4e>
					shell->input_head = 0;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005734:	461a      	mov	r2, r3
 8005736:	2300      	movs	r3, #0
 8005738:	6013      	str	r3, [r2, #0]
			shell->input_count++;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	3301      	adds	r3, #1
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800574a:	6093      	str	r3, [r2, #8]

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	4619      	mov	r1, r3
 8005752:	480f      	ldr	r0, [pc, #60]	@ (8005790 <VibeCheckShell_PutInput+0xa4>)
 8005754:	f014 fbd1 	bl	8019efa <strchr>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <VibeCheckShell_PutInput+0x84>
				shell->input_delimiter_count++;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	3301      	adds	r3, #1
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800576e:	60d3      	str	r3, [r2, #12]

			input++;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	3301      	adds	r3, #1
 8005774:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	3301      	adds	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d3bc      	bcc.n	80056fe <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 8005784:	e000      	b.n	8005788 <VibeCheckShell_PutInput+0x9c>
			break;
 8005786:	bf00      	nop
}
 8005788:	bf00      	nop
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	0801d738 	.word	0x0801d738

08005794 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	if (shell->output_head == shell->output_tail)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d101      	bne.n	80057b8 <VibeCheckShell_GetOutput+0x24>
		return 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	e040      	b.n	800583a <VibeCheckShell_GetOutput+0xa6>

	if (shell->output_head > shell->output_tail)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d917      	bls.n	80057fc <VibeCheckShell_GetOutput+0x68>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[shell->output_tail];
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80057d2:	695a      	ldr	r2, [r3, #20]
 80057d4:	f248 0310 	movw	r3, #32784	@ 0x8010
 80057d8:	4413      	add	r3, r2
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	441a      	add	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	601a      	str	r2, [r3, #0]
		*len = shell->output_head - shell->output_tail;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	1ad2      	subs	r2, r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	601a      	str	r2, [r3, #0]
		return 1;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e01e      	b.n	800583a <VibeCheckShell_GetOutput+0xa6>
	}
	else
	{
		/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
		*output = &shell->output[shell->output_tail];
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	f248 0310 	movw	r3, #32784	@ 0x8010
 8005808:	4413      	add	r3, r2
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	441a      	add	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	601a      	str	r2, [r3, #0]
		*len = VC_SHELL_IO_BUF_LEN - shell->output_tail;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f5c3 4200 	rsb	r2, r3, #32768	@ 0x8000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	601a      	str	r2, [r3, #0]

		/* XXX: just for debugging */
		shell->output[shell->output_tail] = '!';
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	441a      	add	r2, r3
 800582e:	f248 0310 	movw	r3, #32784	@ 0x8010
 8005832:	4413      	add	r3, r2
 8005834:	2221      	movs	r2, #33	@ 0x21
 8005836:	701a      	strb	r2, [r3, #0]

		return 1;
 8005838:	2301      	movs	r3, #1
	}

}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <VibeCheckShell_UpdateOutputBuffer>:


void VibeCheckShell_UpdateOutputBuffer(VibeCheckShell* shell, uint32_t len)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
	/* length argument tells how many characters we successfully transmitted */

	/* update the tail of the output buffer now that we have confirmed transmission */
	shell->output_count -= len;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005856:	699a      	ldr	r2, [r3, #24]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005862:	6193      	str	r3, [r2, #24]
	shell->output_tail += len;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	4413      	add	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005876:	6153      	str	r3, [r2, #20]
	while (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
 8005878:	e009      	b.n	800588e <VibeCheckShell_UpdateOutputBuffer+0x48>
		shell->output_tail -= VC_SHELL_IO_BUF_LEN;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 800588c:	6153      	str	r3, [r2, #20]
	while (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800589a:	d2ee      	bcs.n	800587a <VibeCheckShell_UpdateOutputBuffer+0x34>
}
 800589c:	bf00      	nop
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	e05f      	b.n	800597e <VibeCheckShell_GetNextString+0xd2>
	{

		char x = shell->input[shell->input_tail];
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	5cd3      	ldrb	r3, [r2, r3]
 80058ca:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 80058cc:	7cfb      	ldrb	r3, [r7, #19]
 80058ce:	4619      	mov	r1, r3
 80058d0:	482f      	ldr	r0, [pc, #188]	@ (8005990 <VibeCheckShell_GetNextString+0xe4>)
 80058d2:	f014 fb12 	bl	8019efa <strchr>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d009      	beq.n	80058f0 <VibeCheckShell_GetNextString+0x44>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <VibeCheckShell_GetNextString+0x40>
			{
				*next = '\0';
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
				return 1;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e04d      	b.n	8005988 <VibeCheckShell_GetNextString+0xdc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 80058ec:	2300      	movs	r3, #0
 80058ee:	e04b      	b.n	8005988 <VibeCheckShell_GetNextString+0xdc>
		}
		else
		{
			shell->input_count--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005900:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	3301      	adds	r3, #1
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005912:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005920:	d105      	bne.n	800592e <VibeCheckShell_GetNextString+0x82>
				shell->input_tail = 0;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005928:	461a      	mov	r2, r3
 800592a:	2300      	movs	r3, #0
 800592c:	6053      	str	r3, [r2, #4]

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 800592e:	7cfb      	ldrb	r3, [r7, #19]
 8005930:	4619      	mov	r1, r3
 8005932:	4818      	ldr	r0, [pc, #96]	@ (8005994 <VibeCheckShell_GetNextString+0xe8>)
 8005934:	f014 fae1 	bl	8019efa <strchr>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <VibeCheckShell_GetNextString+0xa2>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01c      	beq.n	800597e <VibeCheckShell_GetNextString+0xd2>
				{
					*next = '\0';
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]
					return 1;
 800594a:	2301      	movs	r3, #1
 800594c:	e01c      	b.n	8005988 <VibeCheckShell_GetNextString+0xdc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 800594e:	7cfb      	ldrb	r3, [r7, #19]
 8005950:	74bb      	strb	r3, [r7, #18]
 8005952:	7cbb      	ldrb	r3, [r7, #18]
 8005954:	3301      	adds	r3, #1
 8005956:	4a10      	ldr	r2, [pc, #64]	@ (8005998 <VibeCheckShell_GetNextString+0xec>)
 8005958:	4413      	add	r3, r2
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	2b01      	cmp	r3, #1
 8005962:	d103      	bne.n	800596c <VibeCheckShell_GetNextString+0xc0>
 8005964:	7cbb      	ldrb	r3, [r7, #18]
 8005966:	f103 0220 	add.w	r2, r3, #32
 800596a:	e000      	b.n	800596e <VibeCheckShell_GetNextString+0xc2>
 800596c:	7cba      	ldrb	r2, [r7, #18]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	1c59      	adds	r1, r3, #1
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
				i++;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	3301      	adds	r3, #1
 800597c:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d39b      	bcc.n	80058be <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	0801d738 	.word	0x0801d738
 8005994:	0801d73c 	.word	0x0801d73c
 8005998:	0801dee0 	.word	0x0801dee0

0800599c <VibeCheckShell_GetNextInt>:


uint32_t VibeCheckShell_GetNextInt(VibeCheckShell* shell, int32_t* next)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b092      	sub	sp, #72	@ 0x48
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80059a6:	f107 0308 	add.w	r3, r7, #8
 80059aa:	2240      	movs	r2, #64	@ 0x40
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff ff7c 	bl	80058ac <VibeCheckShell_GetNextString>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <VibeCheckShell_GetNextInt+0x2e>
	{
		return VibeCheckShell_TurnToInt(str, next);
 80059ba:	f107 0308 	add.w	r3, r7, #8
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 f823 	bl	8005a0c <VibeCheckShell_TurnToInt>
 80059c6:	4603      	mov	r3, r0
 80059c8:	e000      	b.n	80059cc <VibeCheckShell_GetNextInt+0x30>
	}

	return 0;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3748      	adds	r7, #72	@ 0x48
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <VibeCheckShell_GetNextFloat>:


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b092      	sub	sp, #72	@ 0x48
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80059de:	f107 0308 	add.w	r3, r7, #8
 80059e2:	2240      	movs	r2, #64	@ 0x40
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff ff60 	bl	80058ac <VibeCheckShell_GetNextString>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <VibeCheckShell_GetNextFloat+0x2e>
	{
		return VibeCheckShell_TurnToFloat(str, next);
 80059f2:	f107 0308 	add.w	r3, r7, #8
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 f83d 	bl	8005a78 <VibeCheckShell_TurnToFloat>
 80059fe:	4603      	mov	r3, r0
 8005a00:	e000      	b.n	8005a04 <VibeCheckShell_GetNextFloat+0x30>
	}

	return 0;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3748      	adds	r7, #72	@ 0x48
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <VibeCheckShell_TurnToInt>:

/* if the type of the next token is not known, get it as a string and then try to convert it to numeric using these functions */
uint32_t VibeCheckShell_TurnToInt(char* str, int32_t* next)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
	char valid[] = "-0123456789";
 8005a16:	4a17      	ldr	r2, [pc, #92]	@ (8005a74 <VibeCheckShell_TurnToInt+0x68>)
 8005a18:	f107 0308 	add.w	r3, r7, #8
 8005a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint32_t i = 0; i < strlen(str); i++)
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e012      	b.n	8005a4e <VibeCheckShell_TurnToInt+0x42>
		if (strchr(valid, str[i]) == NULL)
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	f107 0308 	add.w	r3, r7, #8
 8005a36:	4611      	mov	r1, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f014 fa5e 	bl	8019efa <strchr>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <VibeCheckShell_TurnToInt+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8005a44:	2300      	movs	r3, #0
 8005a46:	e010      	b.n	8005a6a <VibeCheckShell_TurnToInt+0x5e>
	for (uint32_t i = 0; i < strlen(str); i++)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fa fcbe 	bl	80003d0 <strlen>
 8005a54:	4602      	mov	r2, r0
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d3e5      	bcc.n	8005a28 <VibeCheckShell_TurnToInt+0x1c>
	*next = atoi(str);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f012 fea2 	bl	80187a6 <atoi>
 8005a62:	4602      	mov	r2, r0
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	601a      	str	r2, [r3, #0]
	return 1;
 8005a68:	2301      	movs	r3, #1
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	0801d740 	.word	0x0801d740

08005a78 <VibeCheckShell_TurnToFloat>:

uint32_t VibeCheckShell_TurnToFloat(char* str, float* next)
{
 8005a78:	b590      	push	{r4, r7, lr}
 8005a7a:	b089      	sub	sp, #36	@ 0x24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
	char valid[] = ".-0123456789";
 8005a82:	4b19      	ldr	r3, [pc, #100]	@ (8005ae8 <VibeCheckShell_TurnToFloat+0x70>)
 8005a84:	f107 040c 	add.w	r4, r7, #12
 8005a88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a8a:	c407      	stmia	r4!, {r0, r1, r2}
 8005a8c:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < strlen(str); i++)
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	e012      	b.n	8005aba <VibeCheckShell_TurnToFloat+0x42>
		if (strchr(valid, str[i]) == NULL)
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f107 030c 	add.w	r3, r7, #12
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f014 fa28 	bl	8019efa <strchr>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <VibeCheckShell_TurnToFloat+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e014      	b.n	8005ade <VibeCheckShell_TurnToFloat+0x66>
	for (uint32_t i = 0; i < strlen(str); i++)
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fa fc88 	bl	80003d0 <strlen>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d3e5      	bcc.n	8005a94 <VibeCheckShell_TurnToFloat+0x1c>
	*next = atof(str);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f012 fe69 	bl	80187a0 <atof>
 8005ace:	eeb0 7b40 	vmov.f64	d7, d0
 8005ad2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 8005adc:	2301      	movs	r3, #1
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3724      	adds	r7, #36	@ 0x24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd90      	pop	{r4, r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	0801d74c 	.word	0x0801d74c

08005aec <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
	while (*str)
 8005af6:	e029      	b.n	8005b4c <VibeCheckShell_PutOutputString+0x60>
	{
		shell->output[shell->output_head++] = *(str++);
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	1c53      	adds	r3, r2, #1
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	1c59      	adds	r1, r3, #1
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 8005b0e:	6101      	str	r1, [r0, #16]
 8005b10:	7811      	ldrb	r1, [r2, #0]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	441a      	add	r2, r3
 8005b16:	f248 0310 	movw	r3, #32784	@ 0x8010
 8005b1a:	4413      	add	r3, r2
 8005b1c:	460a      	mov	r2, r1
 8005b1e:	701a      	strb	r2, [r3, #0]
		shell->output_count++;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005b30:	6193      	str	r3, [r2, #24]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b3e:	d105      	bne.n	8005b4c <VibeCheckShell_PutOutputString+0x60>
			shell->output_head = 0;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005b46:	461a      	mov	r2, r3
 8005b48:	2300      	movs	r3, #0
 8005b4a:	6113      	str	r3, [r2, #16]
	while (*str)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1d1      	bne.n	8005af8 <VibeCheckShell_PutOutputString+0xc>
	}
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b092      	sub	sp, #72	@ 0x48
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 8005b6e:	f107 0308 	add.w	r3, r7, #8
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	4906      	ldr	r1, [pc, #24]	@ (8005b90 <VibeCheckShell_PutOutputInt+0x2c>)
 8005b76:	4618      	mov	r0, r3
 8005b78:	f014 f954 	bl	8019e24 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8005b7c:	f107 0308 	add.w	r3, r7, #8
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff ffb2 	bl	8005aec <VibeCheckShell_PutOutputString>
}
 8005b88:	bf00      	nop
 8005b8a:	3748      	adds	r7, #72	@ 0x48
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	0801d75c 	.word	0x0801d75c

08005b94 <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b092      	sub	sp, #72	@ 0x48
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%f", val);
 8005ba0:	edd7 7a00 	vldr	s15, [r7]
 8005ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ba8:	f107 0008 	add.w	r0, r7, #8
 8005bac:	ec53 2b17 	vmov	r2, r3, d7
 8005bb0:	4906      	ldr	r1, [pc, #24]	@ (8005bcc <VibeCheckShell_PutOutputFloat+0x38>)
 8005bb2:	f014 f937 	bl	8019e24 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8005bb6:	f107 0308 	add.w	r3, r7, #8
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff ff95 	bl	8005aec <VibeCheckShell_PutOutputString>
}
 8005bc2:	bf00      	nop
 8005bc4:	3748      	adds	r7, #72	@ 0x48
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	0801d760 	.word	0x0801d760

08005bd0 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 8005bd8:	4903      	ldr	r1, [pc, #12]	@ (8005be8 <VibeCheckShell_PutOutputSeparator+0x18>)
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff ff86 	bl	8005aec <VibeCheckShell_PutOutputString>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	0801d764 	.word	0x0801d764

08005bec <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 8005bf4:	4903      	ldr	r1, [pc, #12]	@ (8005c04 <VibeCheckShell_PutOutputDelimiter+0x18>)
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff ff78 	bl	8005aec <VibeCheckShell_PutOutputString>
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	0801d738 	.word	0x0801d738

08005c08 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005c1e:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005c26:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f640 125f 	movw	r2, #2399	@ 0x95f
 8005c3a:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c42:	eeb0 0a67 	vmov.f32	s0, s15
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f84a 	bl	8005ce0 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c52:	eeb0 0a67 	vmov.f32	s0, s15
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f928 	bl	8005eac <VibeCheckStrobe_SetExposure>

}
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f00b fd53 	bl	801171c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f00b fe35 	bl	80118ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2104      	movs	r1, #4
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f00b fe2f 	bl	80118ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2108      	movs	r1, #8
 8005c94:	4618      	mov	r0, r3
 8005c96:	f00b fe29 	bl	80118ec <HAL_TIM_PWM_Start>
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f00b fd34 	bl	801171c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2100      	movs	r1, #0
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f00b ff32 	bl	8011b24 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2104      	movs	r1, #4
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f00b ff2c 	bl	8011b24 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2108      	movs	r1, #8
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f00b ff26 	bl	8011b24 <HAL_TIM_PWM_Stop>
}
 8005cd8:	bf00      	nop
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8005cec:	edd7 7a00 	vldr	s15, [r7]
 8005cf0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8005cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfc:	d502      	bpl.n	8005d04 <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005cfe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d02:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 8005d04:	edd7 7a00 	vldr	s15, [r7]
 8005d08:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005d74 <VibeCheckStrobe_SetFrequency+0x94>
 8005d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d14:	dd01      	ble.n	8005d1a <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 8005d16:	4b18      	ldr	r3, [pc, #96]	@ (8005d78 <VibeCheckStrobe_SetFrequency+0x98>)
 8005d18:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 8005d1a:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8005d7c <VibeCheckStrobe_SetFrequency+0x9c>
 8005d1e:	ed97 7a00 	vldr	s14, [r7]
 8005d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d32:	ee17 2a90 	vmov	r2, s15
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d4e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8005d7c <VibeCheckStrobe_SetFrequency+0x9c>
 8005d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6912      	ldr	r2, [r2, #16]
 8005d66:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	447a0000 	.word	0x447a0000
 8005d78:	447a0000 	.word	0x447a0000
 8005d7c:	47c35000 	.word	0x47c35000

08005d80 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	ee07 3a90 	vmov	s15, r3
}
 8005d90:	eeb0 0a67 	vmov.f32	s0, s15
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8005dac:	edd7 7a00 	vldr	s15, [r7]
 8005db0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005e78 <VibeCheckStrobe_SetPhase+0xd8>
 8005db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dbc:	d501      	bpl.n	8005dc2 <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 8005dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8005e7c <VibeCheckStrobe_SetPhase+0xdc>)
 8005dc0:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 8005dc2:	edd7 7a00 	vldr	s15, [r7]
 8005dc6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8005e80 <VibeCheckStrobe_SetPhase+0xe0>
 8005dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd2:	dd01      	ble.n	8005dd8 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 8005dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005e84 <VibeCheckStrobe_SetPhase+0xe4>)
 8005dd6:	603b      	str	r3, [r7, #0]


	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	edd3 7a03 	vldr	s15, [r3, #12]
 8005dde:	ed97 7a00 	vldr	s14, [r7]
 8005de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005de6:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 8005dea:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005e88 <VibeCheckStrobe_SetPhase+0xe8>
 8005df2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e0a:	ee17 3a90 	vmov	r3, s15
 8005e0e:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d029      	beq.n	8005e6a <VibeCheckStrobe_SetPhase+0xca>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d125      	bne.n	8005e6a <VibeCheckStrobe_SetPhase+0xca>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d121      	bne.n	8005e6a <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	ed93 7a03 	vldr	s14, [r3, #12]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e42:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005e46:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8005e88 <VibeCheckStrobe_SetPhase+0xe8>
 8005e4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	441a      	add	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	619a      	str	r2, [r3, #24]
	}
}
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	c3340000 	.word	0xc3340000
 8005e7c:	c3340000 	.word	0xc3340000
 8005e80:	43340000 	.word	0x43340000
 8005e84:	43340000 	.word	0x43340000
 8005e88:	43b40000 	.word	0x43b40000

08005e8c <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	ee07 3a90 	vmov	s15, r3
}
 8005e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
	...

08005eac <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 8005eb8:	edd7 7a00 	vldr	s15, [r7]
 8005ebc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8005f38 <VibeCheckStrobe_SetExposure+0x8c>
 8005ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ec4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005f3c <VibeCheckStrobe_SetExposure+0x90>
 8005ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed0:	ee17 3a90 	vmov	r3, s15
 8005ed4:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d904      	bls.n	8005eee <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eec:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ef8:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8005f3c <VibeCheckStrobe_SetExposure+0x90>
 8005efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f00:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8005f40 <VibeCheckStrobe_SetExposure+0x94>
 8005f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005f2c:	bf00      	nop
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	3a83126f 	.word	0x3a83126f
 8005f3c:	47c35000 	.word	0x47c35000
 8005f40:	447a0000 	.word	0x447a0000

08005f44 <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	ee07 3a90 	vmov	s15, r3
}
 8005f54:	eeb0 0a67 	vmov.f32	s0, s15
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d008      	beq.n	8005f84 <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6912      	ldr	r2, [r2, #16]
 8005f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00b      	beq.n	8005fa4 <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6952      	ldr	r2, [r2, #20]
 8005f96:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	619a      	str	r2, [r3, #24]
	}
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b096      	sub	sp, #88	@ 0x58
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005fba:	f107 0318 	add.w	r3, r7, #24
 8005fbe:	2240      	movs	r2, #64	@ 0x40
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6838      	ldr	r0, [r7, #0]
 8005fc4:	f7ff fc72 	bl	80058ac <VibeCheckShell_GetNextString>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d065      	beq.n	800609a <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 8005fce:	f107 0318 	add.w	r3, r7, #24
 8005fd2:	4934      	ldr	r1, [pc, #208]	@ (80060a4 <VibeCheckStrobeCMD_Set+0xf4>)
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fa f99b 	bl	8000310 <strcmp>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d118      	bne.n	8006012 <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8005fe0:	f107 0314 	add.w	r3, r7, #20
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6838      	ldr	r0, [r7, #0]
 8005fe8:	f7ff fcf4 	bl	80059d4 <VibeCheckShell_GetNextFloat>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d053      	beq.n	800609a <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8005ff2:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff fe70 	bl	8005ce0 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006000:	4929      	ldr	r1, [pc, #164]	@ (80060a8 <VibeCheckStrobeCMD_Set+0xf8>)
 8006002:	6838      	ldr	r0, [r7, #0]
 8006004:	f7ff fd72 	bl	8005aec <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006008:	6838      	ldr	r0, [r7, #0]
 800600a:	f7ff fdef 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800600e:	2301      	movs	r3, #1
 8006010:	e044      	b.n	800609c <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 8006012:	f107 0318 	add.w	r3, r7, #24
 8006016:	4925      	ldr	r1, [pc, #148]	@ (80060ac <VibeCheckStrobeCMD_Set+0xfc>)
 8006018:	4618      	mov	r0, r3
 800601a:	f7fa f979 	bl	8000310 <strcmp>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d118      	bne.n	8006056 <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006024:	f107 0310 	add.w	r3, r7, #16
 8006028:	4619      	mov	r1, r3
 800602a:	6838      	ldr	r0, [r7, #0]
 800602c:	f7ff fcd2 	bl	80059d4 <VibeCheckShell_GetNextFloat>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d031      	beq.n	800609a <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8006036:	edd7 7a04 	vldr	s15, [r7, #16]
 800603a:	eeb0 0a67 	vmov.f32	s0, s15
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff feae 	bl	8005da0 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006044:	4918      	ldr	r1, [pc, #96]	@ (80060a8 <VibeCheckStrobeCMD_Set+0xf8>)
 8006046:	6838      	ldr	r0, [r7, #0]
 8006048:	f7ff fd50 	bl	8005aec <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800604c:	6838      	ldr	r0, [r7, #0]
 800604e:	f7ff fdcd 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006052:	2301      	movs	r3, #1
 8006054:	e022      	b.n	800609c <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 8006056:	f107 0318 	add.w	r3, r7, #24
 800605a:	4915      	ldr	r1, [pc, #84]	@ (80060b0 <VibeCheckStrobeCMD_Set+0x100>)
 800605c:	4618      	mov	r0, r3
 800605e:	f7fa f957 	bl	8000310 <strcmp>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d118      	bne.n	800609a <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006068:	f107 030c 	add.w	r3, r7, #12
 800606c:	4619      	mov	r1, r3
 800606e:	6838      	ldr	r0, [r7, #0]
 8006070:	f7ff fcb0 	bl	80059d4 <VibeCheckShell_GetNextFloat>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00f      	beq.n	800609a <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 800607a:	edd7 7a03 	vldr	s15, [r7, #12]
 800607e:	eeb0 0a67 	vmov.f32	s0, s15
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff ff12 	bl	8005eac <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006088:	4907      	ldr	r1, [pc, #28]	@ (80060a8 <VibeCheckStrobeCMD_Set+0xf8>)
 800608a:	6838      	ldr	r0, [r7, #0]
 800608c:	f7ff fd2e 	bl	8005aec <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006090:	6838      	ldr	r0, [r7, #0]
 8006092:	f7ff fdab 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3758      	adds	r7, #88	@ 0x58
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	0801d768 	.word	0x0801d768
 80060a8:	0801d774 	.word	0x0801d774
 80060ac:	0801d778 	.word	0x0801d778
 80060b0:	0801d780 	.word	0x0801d780

080060b4 <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b092      	sub	sp, #72	@ 0x48
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80060be:	f107 0308 	add.w	r3, r7, #8
 80060c2:	2240      	movs	r2, #64	@ 0x40
 80060c4:	4619      	mov	r1, r3
 80060c6:	6838      	ldr	r0, [r7, #0]
 80060c8:	f7ff fbf0 	bl	80058ac <VibeCheckShell_GetNextString>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d05c      	beq.n	800618c <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	4930      	ldr	r1, [pc, #192]	@ (8006198 <VibeCheckStrobeCMD_Get+0xe4>)
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fa f919 	bl	8000310 <strcmp>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d115      	bne.n	8006110 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80060e4:	492d      	ldr	r1, [pc, #180]	@ (800619c <VibeCheckStrobeCMD_Get+0xe8>)
 80060e6:	6838      	ldr	r0, [r7, #0]
 80060e8:	f7ff fd00 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80060ec:	6838      	ldr	r0, [r7, #0]
 80060ee:	f7ff fd6f 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff fe44 	bl	8005d80 <VibeCheckStrobe_GetFrequency>
 80060f8:	eef0 7a40 	vmov.f32	s15, s0
 80060fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006100:	6838      	ldr	r0, [r7, #0]
 8006102:	f7ff fd47 	bl	8005b94 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006106:	6838      	ldr	r0, [r7, #0]
 8006108:	f7ff fd70 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800610c:	2301      	movs	r3, #1
 800610e:	e03e      	b.n	800618e <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 8006110:	f107 0308 	add.w	r3, r7, #8
 8006114:	4922      	ldr	r1, [pc, #136]	@ (80061a0 <VibeCheckStrobeCMD_Get+0xec>)
 8006116:	4618      	mov	r0, r3
 8006118:	f7fa f8fa 	bl	8000310 <strcmp>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d115      	bne.n	800614e <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006122:	491e      	ldr	r1, [pc, #120]	@ (800619c <VibeCheckStrobeCMD_Get+0xe8>)
 8006124:	6838      	ldr	r0, [r7, #0]
 8006126:	f7ff fce1 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800612a:	6838      	ldr	r0, [r7, #0]
 800612c:	f7ff fd50 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff feab 	bl	8005e8c <VibeCheckStrobe_GetPhase>
 8006136:	eef0 7a40 	vmov.f32	s15, s0
 800613a:	eeb0 0a67 	vmov.f32	s0, s15
 800613e:	6838      	ldr	r0, [r7, #0]
 8006140:	f7ff fd28 	bl	8005b94 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006144:	6838      	ldr	r0, [r7, #0]
 8006146:	f7ff fd51 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800614a:	2301      	movs	r3, #1
 800614c:	e01f      	b.n	800618e <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 800614e:	f107 0308 	add.w	r3, r7, #8
 8006152:	4914      	ldr	r1, [pc, #80]	@ (80061a4 <VibeCheckStrobeCMD_Get+0xf0>)
 8006154:	4618      	mov	r0, r3
 8006156:	f7fa f8db 	bl	8000310 <strcmp>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d115      	bne.n	800618c <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006160:	490e      	ldr	r1, [pc, #56]	@ (800619c <VibeCheckStrobeCMD_Get+0xe8>)
 8006162:	6838      	ldr	r0, [r7, #0]
 8006164:	f7ff fcc2 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006168:	6838      	ldr	r0, [r7, #0]
 800616a:	f7ff fd31 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff fee8 	bl	8005f44 <VibeCheckStrobe_GetExposure>
 8006174:	eef0 7a40 	vmov.f32	s15, s0
 8006178:	eeb0 0a67 	vmov.f32	s0, s15
 800617c:	6838      	ldr	r0, [r7, #0]
 800617e:	f7ff fd09 	bl	8005b94 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006182:	6838      	ldr	r0, [r7, #0]
 8006184:	f7ff fd32 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006188:	2301      	movs	r3, #1
 800618a:	e000      	b.n	800618e <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3748      	adds	r7, #72	@ 0x48
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	0801d768 	.word	0x0801d768
 800619c:	0801d774 	.word	0x0801d774
 80061a0:	0801d778 	.word	0x0801d778
 80061a4:	0801d780 	.word	0x0801d780

080061a8 <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b094      	sub	sp, #80	@ 0x50
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80061b6:	f107 030c 	add.w	r3, r7, #12
 80061ba:	2240      	movs	r2, #64	@ 0x40
 80061bc:	4619      	mov	r1, r3
 80061be:	6838      	ldr	r0, [r7, #0]
 80061c0:	f7ff fb74 	bl	80058ac <VibeCheckShell_GetNextString>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d04d      	beq.n	8006266 <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 80061ca:	f107 030c 	add.w	r3, r7, #12
 80061ce:	4928      	ldr	r1, [pc, #160]	@ (8006270 <VibeCheckStrobeCMD_Execute+0xc8>)
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fa f89d 	bl	8000310 <strcmp>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 80061dc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80061de:	f7ff fd41 	bl	8005c64 <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 80061e2:	4924      	ldr	r1, [pc, #144]	@ (8006274 <VibeCheckStrobeCMD_Execute+0xcc>)
 80061e4:	6838      	ldr	r0, [r7, #0]
 80061e6:	f7ff fc81 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80061ea:	6838      	ldr	r0, [r7, #0]
 80061ec:	f7ff fcfe 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e039      	b.n	8006268 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 80061f4:	f107 030c 	add.w	r3, r7, #12
 80061f8:	491f      	ldr	r1, [pc, #124]	@ (8006278 <VibeCheckStrobeCMD_Execute+0xd0>)
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fa f888 	bl	8000310 <strcmp>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10b      	bne.n	800621e <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 8006206:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006208:	f7ff fd4b 	bl	8005ca2 <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 800620c:	4919      	ldr	r1, [pc, #100]	@ (8006274 <VibeCheckStrobeCMD_Execute+0xcc>)
 800620e:	6838      	ldr	r0, [r7, #0]
 8006210:	f7ff fc6c 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006214:	6838      	ldr	r0, [r7, #0]
 8006216:	f7ff fce9 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800621a:	2301      	movs	r3, #1
 800621c:	e024      	b.n	8006268 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 800621e:	f107 030c 	add.w	r3, r7, #12
 8006222:	4916      	ldr	r1, [pc, #88]	@ (800627c <VibeCheckStrobeCMD_Execute+0xd4>)
 8006224:	4618      	mov	r0, r3
 8006226:	f7fa f873 	bl	8000310 <strcmp>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d108      	bne.n	8006242 <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006234:	f7ff febc 	bl	8005fb0 <VibeCheckStrobeCMD_Set>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d013      	beq.n	8006266 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 800623e:	2301      	movs	r3, #1
 8006240:	e012      	b.n	8006268 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 8006242:	f107 030c 	add.w	r3, r7, #12
 8006246:	490e      	ldr	r1, [pc, #56]	@ (8006280 <VibeCheckStrobeCMD_Execute+0xd8>)
 8006248:	4618      	mov	r0, r3
 800624a:	f7fa f861 	bl	8000310 <strcmp>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d108      	bne.n	8006266 <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006258:	f7ff ff2c 	bl	80060b4 <VibeCheckStrobeCMD_Get>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3750      	adds	r7, #80	@ 0x50
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	0801d78c 	.word	0x0801d78c
 8006274:	0801d774 	.word	0x0801d774
 8006278:	0801d794 	.word	0x0801d794
 800627c:	0801d79c 	.word	0x0801d79c
 8006280:	0801d7a0 	.word	0x0801d7a0
 8006284:	00000000 	.word	0x00000000

08006288 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	ed2d 8b02 	vpush	{d8}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	e032      	b.n	8006306 <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 80062a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80062a4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80062b6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8006328 <ComputeSineWave+0xa0>
 80062ba:	ee67 6a87 	vmul.f32	s13, s15, s14
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80062d0:	eeb0 0b47 	vmov.f64	d0, d7
 80062d4:	f016 faf4 	bl	801c8c0 <sin>
 80062d8:	eeb0 7b40 	vmov.f64	d7, d0
 80062dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80062e0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80062e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80062e8:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8006320 <ComputeSineWave+0x98>
 80062ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	1d1a      	adds	r2, r3, #4
 80062f4:	60fa      	str	r2, [r7, #12]
 80062f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80062fa:	ee17 2a90 	vmov	r2, s15
 80062fe:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	3301      	adds	r3, #1
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	429a      	cmp	r2, r3
 800630c:	d3c8      	bcc.n	80062a0 <ComputeSineWave+0x18>
}
 800630e:	bf00      	nop
 8006310:	bf00      	nop
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	ecbd 8b02 	vpop	{d8}
 800631a:	bd80      	pop	{r7, pc}
 800631c:	f3af 8000 	nop.w
 8006320:	00000000 	.word	0x00000000
 8006324:	409ffe00 	.word	0x409ffe00
 8006328:	40490fd0 	.word	0x40490fd0

0800632c <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	e02c      	b.n	800639a <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	085b      	lsrs	r3, r3, #1
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	429a      	cmp	r2, r3
 8006348:	d212      	bcs.n	8006370 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 800634a:	edd7 7a01 	vldr	s15, [r7, #4]
 800634e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006352:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006356:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80063b0 <ComputeSquareWave+0x84>
 800635a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1d1a      	adds	r2, r3, #4
 8006362:	60fa      	str	r2, [r7, #12]
 8006364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006368:	ee17 2a90 	vmov	r2, s15
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	e011      	b.n	8006394 <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8006370:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006374:	edd7 7a01 	vldr	s15, [r7, #4]
 8006378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800637c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80063b0 <ComputeSquareWave+0x84>
 8006380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	1d1a      	adds	r2, r3, #4
 8006388:	60fa      	str	r2, [r7, #12]
 800638a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800638e:	ee17 2a90 	vmov	r2, s15
 8006392:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	3301      	adds	r3, #1
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d3ce      	bcc.n	8006340 <ComputeSquareWave+0x14>
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	44fff000 	.word	0x44fff000

080063b4 <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	e052      	b.n	800646e <ComputeSawWave+0xba>
		if (i < len / 2)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d222      	bcs.n	8006418 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	ee07 3a90 	vmov	s15, r3
 80063d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80063e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80063e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063fe:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006484 <ComputeSawWave+0xd0>
 8006402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1d1a      	adds	r2, r3, #4
 800640a:	60fa      	str	r2, [r7, #12]
 800640c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006410:	ee17 2a90 	vmov	r2, s15
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	e027      	b.n	8006468 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 8006418:	edd7 7a01 	vldr	s15, [r7, #4]
 800641c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006420:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006424:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006432:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006436:	edd7 7a01 	vldr	s15, [r7, #4]
 800643a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	ee07 3a90 	vmov	s15, r3
 8006444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006448:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800644c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006450:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006484 <ComputeSawWave+0xd0>
 8006454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	1d1a      	adds	r2, r3, #4
 800645c:	60fa      	str	r2, [r7, #12]
 800645e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006462:	ee17 2a90 	vmov	r2, s15
 8006466:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	3301      	adds	r3, #1
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	429a      	cmp	r2, r3
 8006474:	d3a8      	bcc.n	80063c8 <ComputeSawWave+0x14>
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	44fff000 	.word	0x44fff000

08006488 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	e082      	b.n	80065a2 <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	089b      	lsrs	r3, r3, #2
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d221      	bcs.n	80064ea <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80064b6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	ee07 3a90 	vmov	s15, r3
 80064c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064d0:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80065bc <ComputeTriangleWave+0x134>
 80064d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	1d1a      	adds	r2, r3, #4
 80064dc:	60fa      	str	r2, [r7, #12]
 80064de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064e2:	ee17 2a90 	vmov	r2, s15
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	e058      	b.n	800659c <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	4613      	mov	r3, r2
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	4413      	add	r3, r2
 80064f2:	089b      	lsrs	r3, r3, #2
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d227      	bcs.n	800654a <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 80064fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80064fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006516:	edd7 7a01 	vldr	s15, [r7, #4]
 800651a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	ee07 3a90 	vmov	s15, r3
 8006524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006528:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800652c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006530:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80065bc <ComputeTriangleWave+0x134>
 8006534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	1d1a      	adds	r2, r3, #4
 800653c:	60fa      	str	r2, [r7, #12]
 800653e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006542:	ee17 2a90 	vmov	r2, s15
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	e028      	b.n	800659c <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 800654a:	edd7 7a01 	vldr	s15, [r7, #4]
 800654e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006556:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800655a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800656a:	edd7 7a01 	vldr	s15, [r7, #4]
 800656e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	ee07 3a90 	vmov	s15, r3
 8006578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006584:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80065bc <ComputeTriangleWave+0x134>
 8006588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	1d1a      	adds	r2, r3, #4
 8006590:	60fa      	str	r2, [r7, #12]
 8006592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006596:	ee17 2a90 	vmov	r2, s15
 800659a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	3301      	adds	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	f4ff af78 	bcc.w	800649c <ComputeTriangleWave+0x14>
}
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	44fff000 	.word	0x44fff000

080065c0 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	e008      	b.n	80065e2 <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	1d1a      	adds	r2, r3, #4
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80065da:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3301      	adds	r3, #1
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d3f2      	bcc.n	80065d0 <ComputeNullWave+0x10>
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	2b00      	cmp	r3, #0
 800660c:	d044      	beq.n	8006698 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006614:	7e1b      	ldrb	r3, [r3, #24]
 8006616:	2b03      	cmp	r3, #3
 8006618:	d844      	bhi.n	80066a4 <VibeCheckWaveGen_RecomputeWave+0xac>
 800661a:	a201      	add	r2, pc, #4	@ (adr r2, 8006620 <VibeCheckWaveGen_RecomputeWave+0x28>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006631 	.word	0x08006631
 8006624:	0800664b 	.word	0x0800664b
 8006628:	08006665 	.word	0x08006665
 800662c:	0800667f 	.word	0x0800667f
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006636:	edd3 7a08 	vldr	s15, [r3, #32]
 800663a:	eeb0 0a67 	vmov.f32	s0, s15
 800663e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006642:	6838      	ldr	r0, [r7, #0]
 8006644:	f7ff fe20 	bl	8006288 <ComputeSineWave>
			break;
 8006648:	e02c      	b.n	80066a4 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006650:	edd3 7a08 	vldr	s15, [r3, #32]
 8006654:	eeb0 0a67 	vmov.f32	s0, s15
 8006658:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800665c:	6838      	ldr	r0, [r7, #0]
 800665e:	f7ff fe65 	bl	800632c <ComputeSquareWave>
			break;
 8006662:	e01f      	b.n	80066a4 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800666a:	edd3 7a08 	vldr	s15, [r3, #32]
 800666e:	eeb0 0a67 	vmov.f32	s0, s15
 8006672:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006676:	6838      	ldr	r0, [r7, #0]
 8006678:	f7ff fe9c 	bl	80063b4 <ComputeSawWave>
			break;
 800667c:	e012      	b.n	80066a4 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006684:	edd3 7a08 	vldr	s15, [r3, #32]
 8006688:	eeb0 0a67 	vmov.f32	s0, s15
 800668c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006690:	6838      	ldr	r0, [r7, #0]
 8006692:	f7ff fef9 	bl	8006488 <ComputeTriangleWave>
			break;
 8006696:	e005      	b.n	80066a4 <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 8006698:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800669c:	6838      	ldr	r0, [r7, #0]
 800669e:	f7ff ff8f 	bl	80065c0 <ComputeNullWave>
	}
}
 80066a2:	e7ff      	b.n	80066a4 <VibeCheckWaveGen_RecomputeWave+0xac>
 80066a4:	bf00      	nop
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = 440.0f;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ca:	461a      	mov	r2, r3
 80066cc:	4b44      	ldr	r3, [pc, #272]	@ (80067e0 <VibeCheckWaveGen_Init+0x134>)
 80066ce:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = 0.001f;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066d6:	461a      	mov	r2, r3
 80066d8:	4b42      	ldr	r3, [pc, #264]	@ (80067e4 <VibeCheckWaveGen_Init+0x138>)
 80066da:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e2:	2200      	movs	r2, #0
 80066e4:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ec:	461a      	mov	r2, r3
 80066ee:	2300      	movs	r3, #0
 80066f0:	6253      	str	r3, [r2, #36]	@ 0x24
	wavegen->is_muted = 0;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066f8:	461a      	mov	r2, r3
 80066fa:	2300      	movs	r3, #0
 80066fc:	6293      	str	r3, [r2, #40]	@ 0x28
	wavegen->mute_button_flag = 0;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006704:	461a      	mov	r2, r3
 8006706:	2300      	movs	r3, #0
 8006708:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wavegen->time_prev_button_press = 0;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006710:	461a      	mov	r2, r3
 8006712:	2300      	movs	r3, #0
 8006714:	6313      	str	r3, [r2, #48]	@ 0x30

	wavegen->wave_ping_compute_pending = 0;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800671c:	461a      	mov	r2, r3
 800671e:	2300      	movs	r3, #0
 8006720:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006728:	461a      	mov	r2, r3
 800672a:	2300      	movs	r3, #0
 800672c:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006734:	461a      	mov	r2, r3
 8006736:	2300      	movs	r3, #0
 8006738:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006740:	461a      	mov	r2, r3
 8006742:	2300      	movs	r3, #0
 8006744:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800674c:	461a      	mov	r2, r3
 800674e:	2300      	movs	r3, #0
 8006750:	6353      	str	r3, [r2, #52]	@ 0x34

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	220b      	movs	r2, #11
 800675a:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006762:	edd3 7a07 	vldr	s15, [r3, #28]
 8006766:	eeb0 0a67 	vmov.f32	s0, s15
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f920 	bl	80069b0 <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3308      	adds	r3, #8
 8006774:	4619      	mov	r1, r3
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff ff3e 	bl	80065f8 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8006782:	4619      	mov	r1, r3
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff ff37 	bl	80065f8 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6858      	ldr	r0, [r3, #4]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f103 0208 	add.w	r2, r3, #8
 8006794:	2300      	movs	r3, #0
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800679c:	2100      	movs	r1, #0
 800679e:	f002 faed 	bl	8008d7c <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6858      	ldr	r0, [r3, #4]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f103 0208 	add.w	r2, r3, #8
 80067ac:	2300      	movs	r3, #0
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067b4:	2110      	movs	r1, #16
 80067b6:	f002 fae1 	bl	8008d7c <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4618      	mov	r0, r3
 80067c0:	f00a ff2e 	bl	8011620 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 80067c4:	2200      	movs	r2, #0
 80067c6:	2108      	movs	r1, #8
 80067c8:	4807      	ldr	r0, [pc, #28]	@ (80067e8 <VibeCheckWaveGen_Init+0x13c>)
 80067ca:	f005 f801 	bl	800b7d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 80067ce:	2200      	movs	r2, #0
 80067d0:	2102      	movs	r1, #2
 80067d2:	4805      	ldr	r0, [pc, #20]	@ (80067e8 <VibeCheckWaveGen_Init+0x13c>)
 80067d4:	f004 fffc 	bl	800b7d0 <HAL_GPIO_WritePin>
}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	43dc0000 	.word	0x43dc0000
 80067e4:	3a83126f 	.word	0x3a83126f
 80067e8:	58020000 	.word	0x58020000

080067ec <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 80067f4:	f000 fd74 	bl	80072e0 <HAL_GetTick>
 80067f8:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2bfa      	cmp	r3, #250	@ 0xfa
 8006808:	d939      	bls.n	800687e <VibeCheckWaveGen_Update+0x92>
 800680a:	2104      	movs	r1, #4
 800680c:	4843      	ldr	r0, [pc, #268]	@ (800691c <VibeCheckWaveGen_Update+0x130>)
 800680e:	f004 ffc7 	bl	800b7a0 <HAL_GPIO_ReadPin>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d032      	beq.n	800687e <VibeCheckWaveGen_Update+0x92>

		/*
		 * the line driver seems to have some kind of slow start built in so no
		 * need to worry about pops when muting via the hardware pin
		 */
		if (wavegen->is_muted)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006820:	2b00      	cmp	r3, #0
 8006822:	d010      	beq.n	8006846 <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800682a:	461a      	mov	r2, r3
 800682c:	2300      	movs	r3, #0
 800682e:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8006830:	2200      	movs	r2, #0
 8006832:	2108      	movs	r1, #8
 8006834:	4839      	ldr	r0, [pc, #228]	@ (800691c <VibeCheckWaveGen_Update+0x130>)
 8006836:	f004 ffcb 	bl	800b7d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 800683a:	2200      	movs	r2, #0
 800683c:	2102      	movs	r1, #2
 800683e:	4837      	ldr	r0, [pc, #220]	@ (800691c <VibeCheckWaveGen_Update+0x130>)
 8006840:	f004 ffc6 	bl	800b7d0 <HAL_GPIO_WritePin>
 8006844:	e00f      	b.n	8006866 <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800684c:	461a      	mov	r2, r3
 800684e:	2301      	movs	r3, #1
 8006850:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 8006852:	2201      	movs	r2, #1
 8006854:	2108      	movs	r1, #8
 8006856:	4831      	ldr	r0, [pc, #196]	@ (800691c <VibeCheckWaveGen_Update+0x130>)
 8006858:	f004 ffba 	bl	800b7d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 800685c:	2201      	movs	r2, #1
 800685e:	2102      	movs	r1, #2
 8006860:	482e      	ldr	r0, [pc, #184]	@ (800691c <VibeCheckWaveGen_Update+0x130>)
 8006862:	f004 ffb5 	bl	800b7d0 <HAL_GPIO_WritePin>
		}

		wavegen->mute_button_flag = 1;  /* can alert the shell via this flag when we press the mute button */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800686c:	461a      	mov	r2, r3
 800686e:	2301      	movs	r3, #1
 8006870:	62d3      	str	r3, [r2, #44]	@ 0x2c
		wavegen->time_prev_button_press = time;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006878:	461a      	mov	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00b      	beq.n	80068a2 <VibeCheckWaveGen_Update+0xb6>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3308      	adds	r3, #8
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff feb1 	bl	80065f8 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800689c:	461a      	mov	r2, r3
 800689e:	2300      	movs	r3, #0
 80068a0:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00c      	beq.n	80068c8 <VibeCheckWaveGen_Update+0xdc>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff fe9e 	bl	80065f8 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c2:	461a      	mov	r2, r3
 80068c4:	2300      	movs	r3, #0
 80068c6:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	f241 0338 	movw	r3, #4152	@ 0x1038
 80068ce:	4413      	add	r3, r2
 80068d0:	f107 0208 	add.w	r2, r7, #8
 80068d4:	68f9      	ldr	r1, [r7, #12]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fb fc76 	bl	80021c8 <Sequencer_Update>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d017      	beq.n	8006912 <VibeCheckWaveGen_Update+0x126>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d006      	beq.n	80068fc <VibeCheckWaveGen_Update+0x110>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4a0b      	ldr	r2, [pc, #44]	@ (8006920 <VibeCheckWaveGen_Update+0x134>)
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	edd3 7a00 	vldr	s15, [r3]
 80068fa:	e005      	b.n	8006908 <VibeCheckWaveGen_Update+0x11c>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4a09      	ldr	r2, [pc, #36]	@ (8006924 <VibeCheckWaveGen_Update+0x138>)
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	edd3 7a00 	vldr	s15, [r3]
 8006908:	eeb0 0a67 	vmov.f32	s0, s15
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f84f 	bl	80069b0 <VibeCheckWaveGen_SetFrequency>
	}

}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	58020000 	.word	0x58020000
 8006920:	0801dda4 	.word	0x0801dda4
 8006924:	0801dc88 	.word	0x0801dc88

08006928 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006938:	2b00      	cmp	r3, #0
 800693a:	d111      	bne.n	8006960 <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006942:	461a      	mov	r2, r3
 8006944:	2301      	movs	r3, #1
 8006946:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800694e:	461a      	mov	r2, r3
 8006950:	2301      	movs	r3, #1
 8006952:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800695a:	461a      	mov	r2, r3
 800695c:	2301      	movs	r3, #1
 800695e:	60d3      	str	r3, [r2, #12]
	}

}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800697a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	d011      	beq.n	80069a4 <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006986:	461a      	mov	r2, r3
 8006988:	2300      	movs	r3, #0
 800698a:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006992:	461a      	mov	r2, r3
 8006994:	2301      	movs	r3, #1
 8006996:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800699e:	461a      	mov	r2, r3
 80069a0:	2301      	movs	r3, #1
 80069a2:	60d3      	str	r3, [r2, #12]
	}
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 80069bc:	edd7 7a00 	vldr	s15, [r7]
 80069c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c8:	d502      	bpl.n	80069d0 <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 80069ca:	f04f 0300 	mov.w	r3, #0
 80069ce:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 80069d0:	edd7 7a00 	vldr	s15, [r7]
 80069d4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006a50 <VibeCheckWaveGen_SetFrequency+0xa0>
 80069d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e0:	dd01      	ble.n	80069e6 <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 80069e2:	4b1c      	ldr	r3, [pc, #112]	@ (8006a54 <VibeCheckWaveGen_SetFrequency+0xa4>)
 80069e4:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 80069e6:	edd7 7a00 	vldr	s15, [r7]
 80069ea:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8006a58 <VibeCheckWaveGen_SetFrequency+0xa8>
 80069ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80069f2:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8006a5c <VibeCheckWaveGen_SetFrequency+0xac>
 80069f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a06:	ee17 3a90 	vmov	r3, s15
 8006a0a:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a1e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8006a5c <VibeCheckWaveGen_SetFrequency+0xac>
 8006a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a26:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8006a58 <VibeCheckWaveGen_SetFrequency+0xa8>
 8006a2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a34:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006a42:	bf00      	nop
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	46989600 	.word	0x46989600
 8006a54:	46989600 	.word	0x46989600
 8006a58:	44000000 	.word	0x44000000
 8006a5c:	4b989680 	.word	0x4b989680

08006a60 <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	ee07 3a90 	vmov	s15, r3
}
 8006a74:	eeb0 0a67 	vmov.f32	s0, s15
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 8006a8e:	edd7 7a00 	vldr	s15, [r7]
 8006a92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a9a:	d502      	bpl.n	8006aa2 <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 8006a9c:	f04f 0300 	mov.w	r3, #0
 8006aa0:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 8006aa2:	edd7 7a00 	vldr	s15, [r7]
 8006aa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab2:	dd02      	ble.n	8006aba <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 8006ab4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006ab8:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006acc:	461a      	mov	r2, r3
 8006ace:	2301      	movs	r3, #1
 8006ad0:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad8:	461a      	mov	r2, r3
 8006ada:	2301      	movs	r3, #1
 8006adc:	60d3      	str	r3, [r2, #12]
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	ee07 3a90 	vmov	s15, r3
}
 8006afe:	eeb0 0a67 	vmov.f32	s0, s15
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b1e:	461a      	mov	r2, r3
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b36:	461a      	mov	r2, r3
 8006b38:	2301      	movs	r3, #1
 8006b3a:	60d3      	str	r3, [r2, #12]
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b56:	7e1b      	ldrb	r3, [r3, #24]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <VibeCheckWaveGen_WasMuteButtonPressed>:

uint32_t VibeCheckWaveGen_WasMuteButtonPressed(VibeCheckWaveGen* wavegen, uint32_t* is_muted)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
	if (wavegen->mute_button_flag)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00d      	beq.n	8006b96 <VibeCheckWaveGen_WasMuteButtonPressed+0x32>
	{
		wavegen->mute_button_flag = 0;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b80:	461a      	mov	r2, r3
 8006b82:	2300      	movs	r3, #0
 8006b84:	62d3      	str	r3, [r2, #44]	@ 0x2c
		*is_muted = wavegen->is_muted;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	601a      	str	r2, [r3, #0]
		return 1;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <VibeCheckWaveGen_WasMuteButtonPressed+0x34>
	}

	return 0;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bca:	461a      	mov	r2, r3
 8006bcc:	2301      	movs	r3, #1
 8006bce:	6113      	str	r3, [r2, #16]
	}
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c02:	461a      	mov	r2, r3
 8006c04:	2301      	movs	r3, #1
 8006c06:	6153      	str	r3, [r2, #20]
	}
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 8006c14:	b590      	push	{r4, r7, lr}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006c22:	4413      	add	r3, r2
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fb fa9d 	bl	8002164 <Sequencer_Init>
	if (wavegen->demo_num)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d009      	beq.n	8006c4a <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f241 0038 	movw	r0, #4152	@ 0x1038
 8006c3c:	4418      	add	r0, r3
 8006c3e:	2301      	movs	r3, #1
 8006c40:	221a      	movs	r2, #26
 8006c42:	4916      	ldr	r1, [pc, #88]	@ (8006c9c <VibeCheckWaveGen_StartDemo+0x88>)
 8006c44:	f7fb faaa 	bl	800219c <Sequencer_SetSequence>
 8006c48:	e008      	b.n	8006c5c <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f241 0038 	movw	r0, #4152	@ 0x1038
 8006c50:	4418      	add	r0, r3
 8006c52:	2301      	movs	r3, #1
 8006c54:	222d      	movs	r2, #45	@ 0x2d
 8006c56:	4912      	ldr	r1, [pc, #72]	@ (8006ca0 <VibeCheckWaveGen_StartDemo+0x8c>)
 8006c58:	f7fb faa0 	bl	800219c <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bf0c      	ite	eq
 8006c68:	2301      	moveq	r3, #1
 8006c6a:	2300      	movne	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c76:	635a      	str	r2, [r3, #52]	@ 0x34
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f241 0438 	movw	r4, #4152	@ 0x1038
 8006c7e:	441c      	add	r4, r3
 8006c80:	f000 fb2e 	bl	80072e0 <HAL_GetTick>
 8006c84:	4603      	mov	r3, r0
 8006c86:	4619      	mov	r1, r3
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f7fb fadf 	bl	800224c <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff fe4a 	bl	8006928 <VibeCheckWaveGen_Start>
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd90      	pop	{r4, r7, pc}
 8006c9c:	0801dc20 	.word	0x0801dc20
 8006ca0:	0801dcf0 	.word	0x0801dcf0

08006ca4 <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7ff fe5d 	bl	800696c <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006cb8:	4413      	add	r3, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fb fada 	bl	8002274 <Sequencer_Stop>
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b094      	sub	sp, #80	@ 0x50
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006cd2:	f107 0310 	add.w	r3, r7, #16
 8006cd6:	2240      	movs	r2, #64	@ 0x40
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6838      	ldr	r0, [r7, #0]
 8006cdc:	f7fe fde6 	bl	80058ac <VibeCheckShell_GetNextString>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80b0 	beq.w	8006e48 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 8006ce8:	f107 0310 	add.w	r3, r7, #16
 8006cec:	4959      	ldr	r1, [pc, #356]	@ (8006e54 <VibeCheckWaveGenCMD_Set+0x18c>)
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7f9 fb0e 	bl	8000310 <strcmp>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d119      	bne.n	8006d2e <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006cfa:	f107 030c 	add.w	r3, r7, #12
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6838      	ldr	r0, [r7, #0]
 8006d02:	f7fe fe67 	bl	80059d4 <VibeCheckShell_GetNextFloat>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 809d 	beq.w	8006e48 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 8006d0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d12:	eeb0 0a67 	vmov.f32	s0, s15
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff fe4a 	bl	80069b0 <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006d1c:	494e      	ldr	r1, [pc, #312]	@ (8006e58 <VibeCheckWaveGenCMD_Set+0x190>)
 8006d1e:	6838      	ldr	r0, [r7, #0]
 8006d20:	f7fe fee4 	bl	8005aec <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006d24:	6838      	ldr	r0, [r7, #0]
 8006d26:	f7fe ff61 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e08d      	b.n	8006e4a <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 8006d2e:	f107 0310 	add.w	r3, r7, #16
 8006d32:	494a      	ldr	r1, [pc, #296]	@ (8006e5c <VibeCheckWaveGenCMD_Set+0x194>)
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7f9 faeb 	bl	8000310 <strcmp>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d118      	bne.n	8006d72 <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006d40:	f107 0308 	add.w	r3, r7, #8
 8006d44:	4619      	mov	r1, r3
 8006d46:	6838      	ldr	r0, [r7, #0]
 8006d48:	f7fe fe44 	bl	80059d4 <VibeCheckShell_GetNextFloat>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d07a      	beq.n	8006e48 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 8006d52:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d56:	eeb0 0a67 	vmov.f32	s0, s15
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff fe91 	bl	8006a82 <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006d60:	493d      	ldr	r1, [pc, #244]	@ (8006e58 <VibeCheckWaveGenCMD_Set+0x190>)
 8006d62:	6838      	ldr	r0, [r7, #0]
 8006d64:	f7fe fec2 	bl	8005aec <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006d68:	6838      	ldr	r0, [r7, #0]
 8006d6a:	f7fe ff3f 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e06b      	b.n	8006e4a <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 8006d72:	f107 0310 	add.w	r3, r7, #16
 8006d76:	493a      	ldr	r1, [pc, #232]	@ (8006e60 <VibeCheckWaveGenCMD_Set+0x198>)
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7f9 fac9 	bl	8000310 <strcmp>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d161      	bne.n	8006e48 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006d84:	f107 0310 	add.w	r3, r7, #16
 8006d88:	2240      	movs	r2, #64	@ 0x40
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6838      	ldr	r0, [r7, #0]
 8006d8e:	f7fe fd8d 	bl	80058ac <VibeCheckShell_GetNextString>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d057      	beq.n	8006e48 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 8006d98:	f107 0310 	add.w	r3, r7, #16
 8006d9c:	4931      	ldr	r1, [pc, #196]	@ (8006e64 <VibeCheckWaveGenCMD_Set+0x19c>)
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7f9 fab6 	bl	8000310 <strcmp>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10c      	bne.n	8006dc4 <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 8006daa:	2100      	movs	r1, #0
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff fead 	bl	8006b0c <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006db2:	4929      	ldr	r1, [pc, #164]	@ (8006e58 <VibeCheckWaveGenCMD_Set+0x190>)
 8006db4:	6838      	ldr	r0, [r7, #0]
 8006db6:	f7fe fe99 	bl	8005aec <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006dba:	6838      	ldr	r0, [r7, #0]
 8006dbc:	f7fe ff16 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e042      	b.n	8006e4a <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 8006dc4:	f107 0310 	add.w	r3, r7, #16
 8006dc8:	4927      	ldr	r1, [pc, #156]	@ (8006e68 <VibeCheckWaveGenCMD_Set+0x1a0>)
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7f9 faa0 	bl	8000310 <strcmp>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10c      	bne.n	8006df0 <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fe97 	bl	8006b0c <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006dde:	491e      	ldr	r1, [pc, #120]	@ (8006e58 <VibeCheckWaveGenCMD_Set+0x190>)
 8006de0:	6838      	ldr	r0, [r7, #0]
 8006de2:	f7fe fe83 	bl	8005aec <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006de6:	6838      	ldr	r0, [r7, #0]
 8006de8:	f7fe ff00 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e02c      	b.n	8006e4a <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 8006df0:	f107 0310 	add.w	r3, r7, #16
 8006df4:	491d      	ldr	r1, [pc, #116]	@ (8006e6c <VibeCheckWaveGenCMD_Set+0x1a4>)
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7f9 fa8a 	bl	8000310 <strcmp>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10c      	bne.n	8006e1c <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 8006e02:	2102      	movs	r1, #2
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff fe81 	bl	8006b0c <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006e0a:	4913      	ldr	r1, [pc, #76]	@ (8006e58 <VibeCheckWaveGenCMD_Set+0x190>)
 8006e0c:	6838      	ldr	r0, [r7, #0]
 8006e0e:	f7fe fe6d 	bl	8005aec <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006e12:	6838      	ldr	r0, [r7, #0]
 8006e14:	f7fe feea 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e016      	b.n	8006e4a <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 8006e1c:	f107 0310 	add.w	r3, r7, #16
 8006e20:	4913      	ldr	r1, [pc, #76]	@ (8006e70 <VibeCheckWaveGenCMD_Set+0x1a8>)
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7f9 fa74 	bl	8000310 <strcmp>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10c      	bne.n	8006e48 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 8006e2e:	2103      	movs	r1, #3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff fe6b 	bl	8006b0c <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006e36:	4908      	ldr	r1, [pc, #32]	@ (8006e58 <VibeCheckWaveGenCMD_Set+0x190>)
 8006e38:	6838      	ldr	r0, [r7, #0]
 8006e3a:	f7fe fe57 	bl	8005aec <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006e3e:	6838      	ldr	r0, [r7, #0]
 8006e40:	f7fe fed4 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3750      	adds	r7, #80	@ 0x50
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	0801d7a4 	.word	0x0801d7a4
 8006e58:	0801d7b0 	.word	0x0801d7b0
 8006e5c:	0801d7b4 	.word	0x0801d7b4
 8006e60:	0801d7c0 	.word	0x0801d7c0
 8006e64:	0801d7cc 	.word	0x0801d7cc
 8006e68:	0801d7d4 	.word	0x0801d7d4
 8006e6c:	0801d7dc 	.word	0x0801d7dc
 8006e70:	0801d7e0 	.word	0x0801d7e0

08006e74 <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b092      	sub	sp, #72	@ 0x48
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006e7e:	f107 0308 	add.w	r3, r7, #8
 8006e82:	2240      	movs	r2, #64	@ 0x40
 8006e84:	4619      	mov	r1, r3
 8006e86:	6838      	ldr	r0, [r7, #0]
 8006e88:	f7fe fd10 	bl	80058ac <VibeCheckShell_GetNextString>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d077      	beq.n	8006f82 <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 8006e92:	f107 0308 	add.w	r3, r7, #8
 8006e96:	493d      	ldr	r1, [pc, #244]	@ (8006f8c <VibeCheckWaveGenCMD_Get+0x118>)
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7f9 fa39 	bl	8000310 <strcmp>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d115      	bne.n	8006ed0 <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006ea4:	493a      	ldr	r1, [pc, #232]	@ (8006f90 <VibeCheckWaveGenCMD_Get+0x11c>)
 8006ea6:	6838      	ldr	r0, [r7, #0]
 8006ea8:	f7fe fe20 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006eac:	6838      	ldr	r0, [r7, #0]
 8006eae:	f7fe fe8f 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff fdd4 	bl	8006a60 <VibeCheckWaveGen_GetFrequency>
 8006eb8:	eef0 7a40 	vmov.f32	s15, s0
 8006ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8006ec0:	6838      	ldr	r0, [r7, #0]
 8006ec2:	f7fe fe67 	bl	8005b94 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006ec6:	6838      	ldr	r0, [r7, #0]
 8006ec8:	f7fe fe90 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e059      	b.n	8006f84 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 8006ed0:	f107 0308 	add.w	r3, r7, #8
 8006ed4:	492f      	ldr	r1, [pc, #188]	@ (8006f94 <VibeCheckWaveGenCMD_Get+0x120>)
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7f9 fa1a 	bl	8000310 <strcmp>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d115      	bne.n	8006f0e <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006ee2:	492b      	ldr	r1, [pc, #172]	@ (8006f90 <VibeCheckWaveGenCMD_Get+0x11c>)
 8006ee4:	6838      	ldr	r0, [r7, #0]
 8006ee6:	f7fe fe01 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006eea:	6838      	ldr	r0, [r7, #0]
 8006eec:	f7fe fe70 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff fdfa 	bl	8006aea <VibeCheckWaveGen_GetAmplitude>
 8006ef6:	eef0 7a40 	vmov.f32	s15, s0
 8006efa:	eeb0 0a67 	vmov.f32	s0, s15
 8006efe:	6838      	ldr	r0, [r7, #0]
 8006f00:	f7fe fe48 	bl	8005b94 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006f04:	6838      	ldr	r0, [r7, #0]
 8006f06:	f7fe fe71 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e03a      	b.n	8006f84 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 8006f0e:	f107 0308 	add.w	r3, r7, #8
 8006f12:	4921      	ldr	r1, [pc, #132]	@ (8006f98 <VibeCheckWaveGenCMD_Get+0x124>)
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7f9 f9fb 	bl	8000310 <strcmp>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d130      	bne.n	8006f82 <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006f20:	491b      	ldr	r1, [pc, #108]	@ (8006f90 <VibeCheckWaveGenCMD_Get+0x11c>)
 8006f22:	6838      	ldr	r0, [r7, #0]
 8006f24:	f7fe fde2 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006f28:	6838      	ldr	r0, [r7, #0]
 8006f2a:	f7fe fe51 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff fe0a 	bl	8006b48 <VibeCheckWaveGen_GetWaveform>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d81e      	bhi.n	8006f78 <VibeCheckWaveGenCMD_Get+0x104>
 8006f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f40 <VibeCheckWaveGenCMD_Get+0xcc>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006f51 	.word	0x08006f51
 8006f44:	08006f5b 	.word	0x08006f5b
 8006f48:	08006f65 	.word	0x08006f65
 8006f4c:	08006f6f 	.word	0x08006f6f
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 8006f50:	4912      	ldr	r1, [pc, #72]	@ (8006f9c <VibeCheckWaveGenCMD_Get+0x128>)
 8006f52:	6838      	ldr	r0, [r7, #0]
 8006f54:	f7fe fdca 	bl	8005aec <VibeCheckShell_PutOutputString>
				break;
 8006f58:	e00e      	b.n	8006f78 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 8006f5a:	4911      	ldr	r1, [pc, #68]	@ (8006fa0 <VibeCheckWaveGenCMD_Get+0x12c>)
 8006f5c:	6838      	ldr	r0, [r7, #0]
 8006f5e:	f7fe fdc5 	bl	8005aec <VibeCheckShell_PutOutputString>
				break;
 8006f62:	e009      	b.n	8006f78 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 8006f64:	490f      	ldr	r1, [pc, #60]	@ (8006fa4 <VibeCheckWaveGenCMD_Get+0x130>)
 8006f66:	6838      	ldr	r0, [r7, #0]
 8006f68:	f7fe fdc0 	bl	8005aec <VibeCheckShell_PutOutputString>
				break;
 8006f6c:	e004      	b.n	8006f78 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 8006f6e:	490e      	ldr	r1, [pc, #56]	@ (8006fa8 <VibeCheckWaveGenCMD_Get+0x134>)
 8006f70:	6838      	ldr	r0, [r7, #0]
 8006f72:	f7fe fdbb 	bl	8005aec <VibeCheckShell_PutOutputString>
				break;
 8006f76:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 8006f78:	6838      	ldr	r0, [r7, #0]
 8006f7a:	f7fe fe37 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3748      	adds	r7, #72	@ 0x48
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	0801d7a4 	.word	0x0801d7a4
 8006f90:	0801d7b0 	.word	0x0801d7b0
 8006f94:	0801d7b4 	.word	0x0801d7b4
 8006f98:	0801d7c0 	.word	0x0801d7c0
 8006f9c:	0801d7cc 	.word	0x0801d7cc
 8006fa0:	0801d7d4 	.word	0x0801d7d4
 8006fa4:	0801d7dc 	.word	0x0801d7dc
 8006fa8:	0801d7e0 	.word	0x0801d7e0

08006fac <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b094      	sub	sp, #80	@ 0x50
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006fba:	f107 030c 	add.w	r3, r7, #12
 8006fbe:	2240      	movs	r2, #64	@ 0x40
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6838      	ldr	r0, [r7, #0]
 8006fc4:	f7fe fc72 	bl	80058ac <VibeCheckShell_GetNextString>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 808b 	beq.w	80070e6 <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 8006fd0:	f107 030c 	add.w	r3, r7, #12
 8006fd4:	4946      	ldr	r1, [pc, #280]	@ (80070f0 <VibeCheckWaveGenCMD_Execute+0x144>)
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7f9 f99a 	bl	8000310 <strcmp>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10b      	bne.n	8006ffa <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 8006fe2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006fe4:	f7ff fca0 	bl	8006928 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006fe8:	4942      	ldr	r1, [pc, #264]	@ (80070f4 <VibeCheckWaveGenCMD_Execute+0x148>)
 8006fea:	6838      	ldr	r0, [r7, #0]
 8006fec:	f7fe fd7e 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006ff0:	6838      	ldr	r0, [r7, #0]
 8006ff2:	f7fe fdfb 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e076      	b.n	80070e8 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 8006ffa:	f107 030c 	add.w	r3, r7, #12
 8006ffe:	493e      	ldr	r1, [pc, #248]	@ (80070f8 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8007000:	4618      	mov	r0, r3
 8007002:	f7f9 f985 	bl	8000310 <strcmp>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10b      	bne.n	8007024 <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 800700c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800700e:	f7ff fcad 	bl	800696c <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8007012:	4938      	ldr	r1, [pc, #224]	@ (80070f4 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007014:	6838      	ldr	r0, [r7, #0]
 8007016:	f7fe fd69 	bl	8005aec <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 800701a:	6838      	ldr	r0, [r7, #0]
 800701c:	f7fe fde6 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007020:	2301      	movs	r3, #1
 8007022:	e061      	b.n	80070e8 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 8007024:	f107 030c 	add.w	r3, r7, #12
 8007028:	4934      	ldr	r1, [pc, #208]	@ (80070fc <VibeCheckWaveGenCMD_Execute+0x150>)
 800702a:	4618      	mov	r0, r3
 800702c:	f7f9 f970 	bl	8000310 <strcmp>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d108      	bne.n	8007048 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800703a:	f7ff fe45 	bl	8006cc8 <VibeCheckWaveGenCMD_Set>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d050      	beq.n	80070e6 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8007044:	2301      	movs	r3, #1
 8007046:	e04f      	b.n	80070e8 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 8007048:	f107 030c 	add.w	r3, r7, #12
 800704c:	492c      	ldr	r1, [pc, #176]	@ (8007100 <VibeCheckWaveGenCMD_Execute+0x154>)
 800704e:	4618      	mov	r0, r3
 8007050:	f7f9 f95e 	bl	8000310 <strcmp>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d108      	bne.n	800706c <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800705e:	f7ff ff09 	bl	8006e74 <VibeCheckWaveGenCMD_Get>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d03e      	beq.n	80070e6 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8007068:	2301      	movs	r3, #1
 800706a:	e03d      	b.n	80070e8 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 800706c:	f107 030c 	add.w	r3, r7, #12
 8007070:	4924      	ldr	r1, [pc, #144]	@ (8007104 <VibeCheckWaveGenCMD_Execute+0x158>)
 8007072:	4618      	mov	r0, r3
 8007074:	f7f9 f94c 	bl	8000310 <strcmp>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d133      	bne.n	80070e6 <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800707e:	f107 030c 	add.w	r3, r7, #12
 8007082:	2240      	movs	r2, #64	@ 0x40
 8007084:	4619      	mov	r1, r3
 8007086:	6838      	ldr	r0, [r7, #0]
 8007088:	f7fe fc10 	bl	80058ac <VibeCheckShell_GetNextString>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d029      	beq.n	80070e6 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 8007092:	f107 030c 	add.w	r3, r7, #12
 8007096:	4916      	ldr	r1, [pc, #88]	@ (80070f0 <VibeCheckWaveGenCMD_Execute+0x144>)
 8007098:	4618      	mov	r0, r3
 800709a:	f7f9 f939 	bl	8000310 <strcmp>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10b      	bne.n	80070bc <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 80070a4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80070a6:	f7ff fdb5 	bl	8006c14 <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 80070aa:	4912      	ldr	r1, [pc, #72]	@ (80070f4 <VibeCheckWaveGenCMD_Execute+0x148>)
 80070ac:	6838      	ldr	r0, [r7, #0]
 80070ae:	f7fe fd1d 	bl	8005aec <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80070b2:	6838      	ldr	r0, [r7, #0]
 80070b4:	f7fe fd9a 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e015      	b.n	80070e8 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 80070bc:	f107 030c 	add.w	r3, r7, #12
 80070c0:	490d      	ldr	r1, [pc, #52]	@ (80070f8 <VibeCheckWaveGenCMD_Execute+0x14c>)
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7f9 f924 	bl	8000310 <strcmp>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10b      	bne.n	80070e6 <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 80070ce:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80070d0:	f7ff fde8 	bl	8006ca4 <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 80070d4:	4907      	ldr	r1, [pc, #28]	@ (80070f4 <VibeCheckWaveGenCMD_Execute+0x148>)
 80070d6:	6838      	ldr	r0, [r7, #0]
 80070d8:	f7fe fd08 	bl	8005aec <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80070dc:	6838      	ldr	r0, [r7, #0]
 80070de:	f7fe fd85 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3750      	adds	r7, #80	@ 0x50
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	0801d7ec 	.word	0x0801d7ec
 80070f4:	0801d7b0 	.word	0x0801d7b0
 80070f8:	0801d7f4 	.word	0x0801d7f4
 80070fc:	0801d7fc 	.word	0x0801d7fc
 8007100:	0801d800 	.word	0x0801d800
 8007104:	0801d804 	.word	0x0801d804

08007108 <VibeCheckWaveGenSender_Execute>:


uint32_t VibeCheckWaveGenSender_Execute(void* obj, VibeCheckShell* shell)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
	/* this will send a message to the host when the mute button is pressed */

	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	60fb      	str	r3, [r7, #12]

	uint32_t is_muted;
	if (VibeCheckWaveGen_WasMuteButtonPressed(wavegen, &is_muted))
 8007116:	f107 0308 	add.w	r3, r7, #8
 800711a:	4619      	mov	r1, r3
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f7ff fd21 	bl	8006b64 <VibeCheckWaveGen_WasMuteButtonPressed>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01e      	beq.n	8007166 <VibeCheckWaveGenSender_Execute+0x5e>
	{
		VibeCheckShell_PutOutputString(shell, "event");
 8007128:	4911      	ldr	r1, [pc, #68]	@ (8007170 <VibeCheckWaveGenSender_Execute+0x68>)
 800712a:	6838      	ldr	r0, [r7, #0]
 800712c:	f7fe fcde 	bl	8005aec <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8007130:	6838      	ldr	r0, [r7, #0]
 8007132:	f7fe fd4d 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "wavegen");
 8007136:	490f      	ldr	r1, [pc, #60]	@ (8007174 <VibeCheckWaveGenSender_Execute+0x6c>)
 8007138:	6838      	ldr	r0, [r7, #0]
 800713a:	f7fe fcd7 	bl	8005aec <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 800713e:	6838      	ldr	r0, [r7, #0]
 8007140:	f7fe fd46 	bl	8005bd0 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <VibeCheckWaveGenSender_Execute+0x4c>
			VibeCheckShell_PutOutputString(shell, "muted");
 800714a:	490b      	ldr	r1, [pc, #44]	@ (8007178 <VibeCheckWaveGenSender_Execute+0x70>)
 800714c:	6838      	ldr	r0, [r7, #0]
 800714e:	f7fe fccd 	bl	8005aec <VibeCheckShell_PutOutputString>
 8007152:	e003      	b.n	800715c <VibeCheckWaveGenSender_Execute+0x54>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 8007154:	4909      	ldr	r1, [pc, #36]	@ (800717c <VibeCheckWaveGenSender_Execute+0x74>)
 8007156:	6838      	ldr	r0, [r7, #0]
 8007158:	f7fe fcc8 	bl	8005aec <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 800715c:	6838      	ldr	r0, [r7, #0]
 800715e:	f7fe fd45 	bl	8005bec <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8007162:	2301      	movs	r3, #1
 8007164:	e000      	b.n	8007168 <VibeCheckWaveGenSender_Execute+0x60>
	}

	return 0;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	0801d80c 	.word	0x0801d80c
 8007174:	0801d814 	.word	0x0801d814
 8007178:	0801d81c 	.word	0x0801d81c
 800717c:	0801d824 	.word	0x0801d824

08007180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80071b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007184:	f7fb fe66 	bl	8002e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007188:	480c      	ldr	r0, [pc, #48]	@ (80071bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800718a:	490d      	ldr	r1, [pc, #52]	@ (80071c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800718c:	4a0d      	ldr	r2, [pc, #52]	@ (80071c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800718e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007190:	e002      	b.n	8007198 <LoopCopyDataInit>

08007192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007196:	3304      	adds	r3, #4

08007198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800719a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800719c:	d3f9      	bcc.n	8007192 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800719e:	4a0a      	ldr	r2, [pc, #40]	@ (80071c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80071a0:	4c0a      	ldr	r4, [pc, #40]	@ (80071cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80071a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80071a4:	e001      	b.n	80071aa <LoopFillZerobss>

080071a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80071a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80071a8:	3204      	adds	r2, #4

080071aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80071aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80071ac:	d3fb      	bcc.n	80071a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80071ae:	f012 ff13 	bl	8019fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80071b2:	f7fa f87d 	bl	80012b0 <main>
  bx  lr
 80071b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80071b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80071bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80071c0:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 80071c4:	0801e5d8 	.word	0x0801e5d8
  ldr r2, =_sbss
 80071c8:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 80071cc:	240153b8 	.word	0x240153b8

080071d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80071d0:	e7fe      	b.n	80071d0 <ADC3_IRQHandler>
	...

080071d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071da:	2003      	movs	r0, #3
 80071dc:	f001 fcf4 	bl	8008bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80071e0:	f006 fcd6 	bl	800db90 <HAL_RCC_GetSysClockFreq>
 80071e4:	4602      	mov	r2, r0
 80071e6:	4b15      	ldr	r3, [pc, #84]	@ (800723c <HAL_Init+0x68>)
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	4913      	ldr	r1, [pc, #76]	@ (8007240 <HAL_Init+0x6c>)
 80071f2:	5ccb      	ldrb	r3, [r1, r3]
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	fa22 f303 	lsr.w	r3, r2, r3
 80071fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071fe:	4b0f      	ldr	r3, [pc, #60]	@ (800723c <HAL_Init+0x68>)
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	f003 030f 	and.w	r3, r3, #15
 8007206:	4a0e      	ldr	r2, [pc, #56]	@ (8007240 <HAL_Init+0x6c>)
 8007208:	5cd3      	ldrb	r3, [r2, r3]
 800720a:	f003 031f 	and.w	r3, r3, #31
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	fa22 f303 	lsr.w	r3, r2, r3
 8007214:	4a0b      	ldr	r2, [pc, #44]	@ (8007244 <HAL_Init+0x70>)
 8007216:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007218:	4a0b      	ldr	r2, [pc, #44]	@ (8007248 <HAL_Init+0x74>)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800721e:	200f      	movs	r0, #15
 8007220:	f000 f814 	bl	800724c <HAL_InitTick>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e002      	b.n	8007234 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800722e:	f7fb f83b 	bl	80022a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	58024400 	.word	0x58024400
 8007240:	0801d860 	.word	0x0801d860
 8007244:	24000004 	.word	0x24000004
 8007248:	24000000 	.word	0x24000000

0800724c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007254:	4b15      	ldr	r3, [pc, #84]	@ (80072ac <HAL_InitTick+0x60>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e021      	b.n	80072a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007260:	4b13      	ldr	r3, [pc, #76]	@ (80072b0 <HAL_InitTick+0x64>)
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	4b11      	ldr	r3, [pc, #68]	@ (80072ac <HAL_InitTick+0x60>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	4619      	mov	r1, r3
 800726a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800726e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007272:	fbb2 f3f3 	udiv	r3, r2, r3
 8007276:	4618      	mov	r0, r3
 8007278:	f001 fcd9 	bl	8008c2e <HAL_SYSTICK_Config>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e00e      	b.n	80072a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b0f      	cmp	r3, #15
 800728a:	d80a      	bhi.n	80072a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800728c:	2200      	movs	r2, #0
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	f04f 30ff 	mov.w	r0, #4294967295
 8007294:	f001 fca3 	bl	8008bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007298:	4a06      	ldr	r2, [pc, #24]	@ (80072b4 <HAL_InitTick+0x68>)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	e000      	b.n	80072a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	2400000c 	.word	0x2400000c
 80072b0:	24000000 	.word	0x24000000
 80072b4:	24000008 	.word	0x24000008

080072b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80072bc:	4b06      	ldr	r3, [pc, #24]	@ (80072d8 <HAL_IncTick+0x20>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	461a      	mov	r2, r3
 80072c2:	4b06      	ldr	r3, [pc, #24]	@ (80072dc <HAL_IncTick+0x24>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4413      	add	r3, r2
 80072c8:	4a04      	ldr	r2, [pc, #16]	@ (80072dc <HAL_IncTick+0x24>)
 80072ca:	6013      	str	r3, [r2, #0]
}
 80072cc:	bf00      	nop
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	2400000c 	.word	0x2400000c
 80072dc:	24013684 	.word	0x24013684

080072e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80072e0:	b480      	push	{r7}
 80072e2:	af00      	add	r7, sp, #0
  return uwTick;
 80072e4:	4b03      	ldr	r3, [pc, #12]	@ (80072f4 <HAL_GetTick+0x14>)
 80072e6:	681b      	ldr	r3, [r3, #0]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	24013684 	.word	0x24013684

080072f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007300:	f7ff ffee 	bl	80072e0 <HAL_GetTick>
 8007304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007310:	d005      	beq.n	800731e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007312:	4b0a      	ldr	r3, [pc, #40]	@ (800733c <HAL_Delay+0x44>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800731e:	bf00      	nop
 8007320:	f7ff ffde 	bl	80072e0 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	429a      	cmp	r2, r3
 800732e:	d8f7      	bhi.n	8007320 <HAL_Delay+0x28>
  {
  }
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	2400000c 	.word	0x2400000c

08007340 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	609a      	str	r2, [r3, #8]
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	609a      	str	r2, [r3, #8]
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3360      	adds	r3, #96	@ 0x60
 80073ba:	461a      	mov	r2, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4a10      	ldr	r2, [pc, #64]	@ (8007408 <LL_ADC_SetOffset+0x60>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d10b      	bne.n	80073e4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	4313      	orrs	r3, r2
 80073da:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80073e2:	e00b      	b.n	80073fc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	430b      	orrs	r3, r1
 80073f6:	431a      	orrs	r2, r3
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	601a      	str	r2, [r3, #0]
}
 80073fc:	bf00      	nop
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	58026000 	.word	0x58026000

0800740c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3360      	adds	r3, #96	@ 0x60
 800741a:	461a      	mov	r2, r3
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f003 031f 	and.w	r3, r3, #31
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	fa01 f303 	lsl.w	r3, r1, r3
 8007458:	431a      	orrs	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	611a      	str	r2, [r3, #16]
}
 800745e:	bf00      	nop
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
	...

0800746c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4a0c      	ldr	r2, [pc, #48]	@ (80074ac <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00e      	beq.n	800749e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3360      	adds	r3, #96	@ 0x60
 8007484:	461a      	mov	r2, r3
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	431a      	orrs	r2, r3
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	601a      	str	r2, [r3, #0]
  }
}
 800749e:	bf00      	nop
 80074a0:	371c      	adds	r7, #28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	58026000 	.word	0x58026000

080074b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4a0c      	ldr	r2, [pc, #48]	@ (80074f0 <LL_ADC_SetOffsetSaturation+0x40>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d10e      	bne.n	80074e2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3360      	adds	r3, #96	@ 0x60
 80074c8:	461a      	mov	r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	431a      	orrs	r2, r3
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80074e2:	bf00      	nop
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	58026000 	.word	0x58026000

080074f4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4a0c      	ldr	r2, [pc, #48]	@ (8007534 <LL_ADC_SetOffsetSign+0x40>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d10e      	bne.n	8007526 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3360      	adds	r3, #96	@ 0x60
 800750c:	461a      	mov	r2, r3
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	431a      	orrs	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8007526:	bf00      	nop
 8007528:	371c      	adds	r7, #28
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	58026000 	.word	0x58026000

08007538 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3360      	adds	r3, #96	@ 0x60
 8007548:	461a      	mov	r2, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4a0c      	ldr	r2, [pc, #48]	@ (8007588 <LL_ADC_SetOffsetState+0x50>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d108      	bne.n	800756c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	431a      	orrs	r2, r3
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800756a:	e007      	b.n	800757c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	431a      	orrs	r2, r3
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	601a      	str	r2, [r3, #0]
}
 800757c:	bf00      	nop
 800757e:	371c      	adds	r7, #28
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	58026000 	.word	0x58026000

0800758c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3330      	adds	r3, #48	@ 0x30
 800759c:	461a      	mov	r2, r3
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	0a1b      	lsrs	r3, r3, #8
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	f003 030c 	and.w	r3, r3, #12
 80075a8:	4413      	add	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	211f      	movs	r1, #31
 80075b8:	fa01 f303 	lsl.w	r3, r1, r3
 80075bc:	43db      	mvns	r3, r3
 80075be:	401a      	ands	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	0e9b      	lsrs	r3, r3, #26
 80075c4:	f003 011f 	and.w	r1, r3, #31
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	fa01 f303 	lsl.w	r3, r1, r3
 80075d2:	431a      	orrs	r2, r3
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80075d8:	bf00      	nop
 80075da:	371c      	adds	r7, #28
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3314      	adds	r3, #20
 80075f4:	461a      	mov	r2, r3
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	0e5b      	lsrs	r3, r3, #25
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	4413      	add	r3, r2
 8007602:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	0d1b      	lsrs	r3, r3, #20
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	2107      	movs	r1, #7
 8007612:	fa01 f303 	lsl.w	r3, r1, r3
 8007616:	43db      	mvns	r3, r3
 8007618:	401a      	ands	r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	0d1b      	lsrs	r3, r3, #20
 800761e:	f003 031f 	and.w	r3, r3, #31
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	fa01 f303 	lsl.w	r3, r1, r3
 8007628:	431a      	orrs	r2, r3
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800762e:	bf00      	nop
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
	...

0800763c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4a1a      	ldr	r2, [pc, #104]	@ (80076b4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d115      	bne.n	800767c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800765c:	43db      	mvns	r3, r3
 800765e:	401a      	ands	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f003 0318 	and.w	r3, r3, #24
 8007666:	4914      	ldr	r1, [pc, #80]	@ (80076b8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007668:	40d9      	lsrs	r1, r3
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	400b      	ands	r3, r1
 800766e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007672:	431a      	orrs	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800767a:	e014      	b.n	80076a6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007688:	43db      	mvns	r3, r3
 800768a:	401a      	ands	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f003 0318 	and.w	r3, r3, #24
 8007692:	4909      	ldr	r1, [pc, #36]	@ (80076b8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007694:	40d9      	lsrs	r1, r3
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	400b      	ands	r3, r1
 800769a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800769e:	431a      	orrs	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80076a6:	bf00      	nop
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	58026000 	.word	0x58026000
 80076b8:	000fffff 	.word	0x000fffff

080076bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	4b04      	ldr	r3, [pc, #16]	@ (80076dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6093      	str	r3, [r2, #8]
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	5fffffc0 	.word	0x5fffffc0

080076e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076f4:	d101      	bne.n	80076fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	4b05      	ldr	r3, [pc, #20]	@ (800772c <LL_ADC_EnableInternalRegulator+0x24>)
 8007716:	4013      	ands	r3, r2
 8007718:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	6fffffc0 	.word	0x6fffffc0

08007730 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007744:	d101      	bne.n	800774a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <LL_ADC_IsEnabled+0x18>
 800776c:	2301      	movs	r3, #1
 800776e:	e000      	b.n	8007772 <LL_ADC_IsEnabled+0x1a>
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	2b04      	cmp	r3, #4
 8007790:	d101      	bne.n	8007796 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d101      	bne.n	80077bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
	...

080077cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80077cc:	b590      	push	{r4, r7, lr}
 80077ce:	b089      	sub	sp, #36	@ 0x24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80077d8:	2300      	movs	r3, #0
 80077da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e1ee      	b.n	8007bc4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d109      	bne.n	8007808 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7fa fd71 	bl	80022dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff ff67 	bl	80076e0 <LL_ADC_IsDeepPowerDownEnabled>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d004      	beq.n	8007822 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f7ff ff4d 	bl	80076bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff ff82 	bl	8007730 <LL_ADC_IsInternalRegulatorEnabled>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d114      	bne.n	800785c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff ff66 	bl	8007708 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800783c:	4b8e      	ldr	r3, [pc, #568]	@ (8007a78 <HAL_ADC_Init+0x2ac>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	099b      	lsrs	r3, r3, #6
 8007842:	4a8e      	ldr	r2, [pc, #568]	@ (8007a7c <HAL_ADC_Init+0x2b0>)
 8007844:	fba2 2303 	umull	r2, r3, r2, r3
 8007848:	099b      	lsrs	r3, r3, #6
 800784a:	3301      	adds	r3, #1
 800784c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800784e:	e002      	b.n	8007856 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	3b01      	subs	r3, #1
 8007854:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1f9      	bne.n	8007850 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff ff65 	bl	8007730 <LL_ADC_IsInternalRegulatorEnabled>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10d      	bne.n	8007888 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007870:	f043 0210 	orr.w	r2, r3, #16
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800787c:	f043 0201 	orr.w	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff ff76 	bl	800777e <LL_ADC_REG_IsConversionOngoing>
 8007892:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 8188 	bne.w	8007bb2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f040 8184 	bne.w	8007bb2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078ae:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80078b2:	f043 0202 	orr.w	r2, r3, #2
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff ff4a 	bl	8007758 <LL_ADC_IsEnabled>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d136      	bne.n	8007938 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a6c      	ldr	r2, [pc, #432]	@ (8007a80 <HAL_ADC_Init+0x2b4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d004      	beq.n	80078de <HAL_ADC_Init+0x112>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a6a      	ldr	r2, [pc, #424]	@ (8007a84 <HAL_ADC_Init+0x2b8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d10e      	bne.n	80078fc <HAL_ADC_Init+0x130>
 80078de:	4868      	ldr	r0, [pc, #416]	@ (8007a80 <HAL_ADC_Init+0x2b4>)
 80078e0:	f7ff ff3a 	bl	8007758 <LL_ADC_IsEnabled>
 80078e4:	4604      	mov	r4, r0
 80078e6:	4867      	ldr	r0, [pc, #412]	@ (8007a84 <HAL_ADC_Init+0x2b8>)
 80078e8:	f7ff ff36 	bl	8007758 <LL_ADC_IsEnabled>
 80078ec:	4603      	mov	r3, r0
 80078ee:	4323      	orrs	r3, r4
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bf0c      	ite	eq
 80078f4:	2301      	moveq	r3, #1
 80078f6:	2300      	movne	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	e008      	b.n	800790e <HAL_ADC_Init+0x142>
 80078fc:	4862      	ldr	r0, [pc, #392]	@ (8007a88 <HAL_ADC_Init+0x2bc>)
 80078fe:	f7ff ff2b 	bl	8007758 <LL_ADC_IsEnabled>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	bf0c      	ite	eq
 8007908:	2301      	moveq	r3, #1
 800790a:	2300      	movne	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d012      	beq.n	8007938 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a5a      	ldr	r2, [pc, #360]	@ (8007a80 <HAL_ADC_Init+0x2b4>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d004      	beq.n	8007926 <HAL_ADC_Init+0x15a>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a58      	ldr	r2, [pc, #352]	@ (8007a84 <HAL_ADC_Init+0x2b8>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d101      	bne.n	800792a <HAL_ADC_Init+0x15e>
 8007926:	4a59      	ldr	r2, [pc, #356]	@ (8007a8c <HAL_ADC_Init+0x2c0>)
 8007928:	e000      	b.n	800792c <HAL_ADC_Init+0x160>
 800792a:	4a59      	ldr	r2, [pc, #356]	@ (8007a90 <HAL_ADC_Init+0x2c4>)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f7ff fd04 	bl	8007340 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a52      	ldr	r2, [pc, #328]	@ (8007a88 <HAL_ADC_Init+0x2bc>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d129      	bne.n	8007996 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	7e5b      	ldrb	r3, [r3, #25]
 8007946:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800794c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8007952:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	2b08      	cmp	r3, #8
 800795a:	d013      	beq.n	8007984 <HAL_ADC_Init+0x1b8>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	2b0c      	cmp	r3, #12
 8007962:	d00d      	beq.n	8007980 <HAL_ADC_Init+0x1b4>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2b1c      	cmp	r3, #28
 800796a:	d007      	beq.n	800797c <HAL_ADC_Init+0x1b0>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b18      	cmp	r3, #24
 8007972:	d101      	bne.n	8007978 <HAL_ADC_Init+0x1ac>
 8007974:	2318      	movs	r3, #24
 8007976:	e006      	b.n	8007986 <HAL_ADC_Init+0x1ba>
 8007978:	2300      	movs	r3, #0
 800797a:	e004      	b.n	8007986 <HAL_ADC_Init+0x1ba>
 800797c:	2310      	movs	r3, #16
 800797e:	e002      	b.n	8007986 <HAL_ADC_Init+0x1ba>
 8007980:	2308      	movs	r3, #8
 8007982:	e000      	b.n	8007986 <HAL_ADC_Init+0x1ba>
 8007984:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8007986:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800798e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007990:	4313      	orrs	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	e00e      	b.n	80079b4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	7e5b      	ldrb	r3, [r3, #25]
 800799a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80079a0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80079a6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80079b0:	4313      	orrs	r3, r2
 80079b2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d106      	bne.n	80079cc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c2:	3b01      	subs	r3, #1
 80079c4:	045b      	lsls	r3, r3, #17
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d009      	beq.n	80079e8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a26      	ldr	r2, [pc, #152]	@ (8007a88 <HAL_ADC_Init+0x2bc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d115      	bne.n	8007a1e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	4b26      	ldr	r3, [pc, #152]	@ (8007a94 <HAL_ADC_Init+0x2c8>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	6812      	ldr	r2, [r2, #0]
 8007a00:	69b9      	ldr	r1, [r7, #24]
 8007a02:	430b      	orrs	r3, r1
 8007a04:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	611a      	str	r2, [r3, #16]
 8007a1c:	e009      	b.n	8007a32 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	4b1c      	ldr	r3, [pc, #112]	@ (8007a98 <HAL_ADC_Init+0x2cc>)
 8007a26:	4013      	ands	r3, r2
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	69b9      	ldr	r1, [r7, #24]
 8007a2e:	430b      	orrs	r3, r1
 8007a30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff fea1 	bl	800777e <LL_ADC_REG_IsConversionOngoing>
 8007a3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff feae 	bl	80077a4 <LL_ADC_INJ_IsConversionOngoing>
 8007a48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 808e 	bne.w	8007b6e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f040 808a 	bne.w	8007b6e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a88 <HAL_ADC_Init+0x2bc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d11b      	bne.n	8007a9c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	7e1b      	ldrb	r3, [r3, #24]
 8007a68:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a70:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8007a72:	4313      	orrs	r3, r2
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	e018      	b.n	8007aaa <HAL_ADC_Init+0x2de>
 8007a78:	24000000 	.word	0x24000000
 8007a7c:	053e2d63 	.word	0x053e2d63
 8007a80:	40022000 	.word	0x40022000
 8007a84:	40022100 	.word	0x40022100
 8007a88:	58026000 	.word	0x58026000
 8007a8c:	40022300 	.word	0x40022300
 8007a90:	58026300 	.word	0x58026300
 8007a94:	fff04007 	.word	0xfff04007
 8007a98:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	7e1b      	ldrb	r3, [r3, #24]
 8007aa0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	4b46      	ldr	r3, [pc, #280]	@ (8007bcc <HAL_ADC_Init+0x400>)
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6812      	ldr	r2, [r2, #0]
 8007ab8:	69b9      	ldr	r1, [r7, #24]
 8007aba:	430b      	orrs	r3, r1
 8007abc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d137      	bne.n	8007b38 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007acc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a3f      	ldr	r2, [pc, #252]	@ (8007bd0 <HAL_ADC_Init+0x404>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d116      	bne.n	8007b06 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	4b3d      	ldr	r3, [pc, #244]	@ (8007bd4 <HAL_ADC_Init+0x408>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007aea:	4311      	orrs	r1, r2
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007af0:	4311      	orrs	r1, r2
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007af6:	430a      	orrs	r2, r1
 8007af8:	431a      	orrs	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0201 	orr.w	r2, r2, #1
 8007b02:	611a      	str	r2, [r3, #16]
 8007b04:	e020      	b.n	8007b48 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	4b32      	ldr	r3, [pc, #200]	@ (8007bd8 <HAL_ADC_Init+0x40c>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007b14:	3a01      	subs	r2, #1
 8007b16:	0411      	lsls	r1, r2, #16
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007b1c:	4311      	orrs	r1, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007b22:	4311      	orrs	r1, r2
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f042 0201 	orr.w	r2, r2, #1
 8007b34:	611a      	str	r2, [r3, #16]
 8007b36:	e007      	b.n	8007b48 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691a      	ldr	r2, [r3, #16]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0201 	bic.w	r2, r2, #1
 8007b46:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a1b      	ldr	r2, [pc, #108]	@ (8007bd0 <HAL_ADC_Init+0x404>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d002      	beq.n	8007b6e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fd67 	bl	800863c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d10c      	bne.n	8007b90 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b7c:	f023 010f 	bic.w	r1, r3, #15
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	1e5a      	subs	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b8e:	e007      	b.n	8007ba0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 020f 	bic.w	r2, r2, #15
 8007b9e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ba4:	f023 0303 	bic.w	r3, r3, #3
 8007ba8:	f043 0201 	orr.w	r2, r3, #1
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	661a      	str	r2, [r3, #96]	@ 0x60
 8007bb0:	e007      	b.n	8007bc2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bb6:	f043 0210 	orr.w	r2, r3, #16
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3724      	adds	r7, #36	@ 0x24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd90      	pop	{r4, r7, pc}
 8007bcc:	ffffbffc 	.word	0xffffbffc
 8007bd0:	58026000 	.word	0x58026000
 8007bd4:	fc00f81f 	.word	0xfc00f81f
 8007bd8:	fc00f81e 	.word	0xfc00f81e

08007bdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007bdc:	b590      	push	{r4, r7, lr}
 8007bde:	b0b9      	sub	sp, #228	@ 0xe4
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bf6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	4aab      	ldr	r2, [pc, #684]	@ (8007eac <HAL_ADC_ConfigChannel+0x2d0>)
 8007bfe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d102      	bne.n	8007c10 <HAL_ADC_ConfigChannel+0x34>
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	f000 bcfe 	b.w	800860c <HAL_ADC_ConfigChannel+0xa30>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7ff fdae 	bl	800777e <LL_ADC_REG_IsConversionOngoing>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f040 84e2 	bne.w	80085ee <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	db38      	blt.n	8007ca4 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a9e      	ldr	r2, [pc, #632]	@ (8007eb0 <HAL_ADC_ConfigChannel+0x2d4>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d033      	beq.n	8007ca4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d108      	bne.n	8007c5a <HAL_ADC_ConfigChannel+0x7e>
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	0e9b      	lsrs	r3, r3, #26
 8007c4e:	f003 031f 	and.w	r3, r3, #31
 8007c52:	2201      	movs	r2, #1
 8007c54:	fa02 f303 	lsl.w	r3, r2, r3
 8007c58:	e01d      	b.n	8007c96 <HAL_ADC_ConfigChannel+0xba>
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c66:	fa93 f3a3 	rbit	r3, r3
 8007c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007c72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007c76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8007c7e:	2320      	movs	r3, #32
 8007c80:	e004      	b.n	8007c8c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8007c82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c86:	fab3 f383 	clz	r3, r3
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	f003 031f 	and.w	r3, r3, #31
 8007c90:	2201      	movs	r2, #1
 8007c92:	fa02 f303 	lsl.w	r3, r2, r3
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	6812      	ldr	r2, [r2, #0]
 8007c9a:	69d1      	ldr	r1, [r2, #28]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6812      	ldr	r2, [r2, #0]
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	6859      	ldr	r1, [r3, #4]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	f7ff fc6b 	bl	800758c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff fd5f 	bl	800777e <LL_ADC_REG_IsConversionOngoing>
 8007cc0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7ff fd6b 	bl	80077a4 <LL_ADC_INJ_IsConversionOngoing>
 8007cce:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f040 8270 	bne.w	80081bc <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007cdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f040 826b 	bne.w	80081bc <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6819      	ldr	r1, [r3, #0]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f7ff fc76 	bl	80075e4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a6c      	ldr	r2, [pc, #432]	@ (8007eb0 <HAL_ADC_ConfigChannel+0x2d4>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d10d      	bne.n	8007d1e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	695a      	ldr	r2, [r3, #20]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	08db      	lsrs	r3, r3, #3
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	fa02 f303 	lsl.w	r3, r2, r3
 8007d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d1c:	e032      	b.n	8007d84 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007d1e:	4b65      	ldr	r3, [pc, #404]	@ (8007eb4 <HAL_ADC_ConfigChannel+0x2d8>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007d26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d2a:	d10b      	bne.n	8007d44 <HAL_ADC_ConfigChannel+0x168>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	695a      	ldr	r2, [r3, #20]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	089b      	lsrs	r3, r3, #2
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	e01d      	b.n	8007d80 <HAL_ADC_ConfigChannel+0x1a4>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	f003 0310 	and.w	r3, r3, #16
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10b      	bne.n	8007d6a <HAL_ADC_ConfigChannel+0x18e>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	695a      	ldr	r2, [r3, #20]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	089b      	lsrs	r3, r3, #2
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	fa02 f303 	lsl.w	r3, r2, r3
 8007d68:	e00a      	b.n	8007d80 <HAL_ADC_ConfigChannel+0x1a4>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	695a      	ldr	r2, [r3, #20]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	089b      	lsrs	r3, r3, #2
 8007d76:	f003 0304 	and.w	r3, r3, #4
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d048      	beq.n	8007e1e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	6919      	ldr	r1, [r3, #16]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d9c:	f7ff fb04 	bl	80073a8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a42      	ldr	r2, [pc, #264]	@ (8007eb0 <HAL_ADC_ConfigChannel+0x2d4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d119      	bne.n	8007dde <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	6919      	ldr	r1, [r3, #16]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	461a      	mov	r2, r3
 8007db8:	f7ff fb9c 	bl	80074f4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6818      	ldr	r0, [r3, #0]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	6919      	ldr	r1, [r3, #16]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d102      	bne.n	8007dd4 <HAL_ADC_ConfigChannel+0x1f8>
 8007dce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007dd2:	e000      	b.n	8007dd6 <HAL_ADC_ConfigChannel+0x1fa>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f7ff fb6a 	bl	80074b0 <LL_ADC_SetOffsetSaturation>
 8007ddc:	e1ee      	b.n	80081bc <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	6919      	ldr	r1, [r3, #16]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d102      	bne.n	8007df6 <HAL_ADC_ConfigChannel+0x21a>
 8007df0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007df4:	e000      	b.n	8007df8 <HAL_ADC_ConfigChannel+0x21c>
 8007df6:	2300      	movs	r3, #0
 8007df8:	461a      	mov	r2, r3
 8007dfa:	f7ff fb37 	bl	800746c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6919      	ldr	r1, [r3, #16]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	7e1b      	ldrb	r3, [r3, #24]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d102      	bne.n	8007e14 <HAL_ADC_ConfigChannel+0x238>
 8007e0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e12:	e000      	b.n	8007e16 <HAL_ADC_ConfigChannel+0x23a>
 8007e14:	2300      	movs	r3, #0
 8007e16:	461a      	mov	r2, r3
 8007e18:	f7ff fb0e 	bl	8007438 <LL_ADC_SetDataRightShift>
 8007e1c:	e1ce      	b.n	80081bc <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a23      	ldr	r2, [pc, #140]	@ (8007eb0 <HAL_ADC_ConfigChannel+0x2d4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	f040 8181 	bne.w	800812c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2100      	movs	r1, #0
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff faeb 	bl	800740c <LL_ADC_GetOffsetChannel>
 8007e36:	4603      	mov	r3, r0
 8007e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <HAL_ADC_ConfigChannel+0x27a>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2100      	movs	r1, #0
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff fae0 	bl	800740c <LL_ADC_GetOffsetChannel>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	0e9b      	lsrs	r3, r3, #26
 8007e50:	f003 021f 	and.w	r2, r3, #31
 8007e54:	e01e      	b.n	8007e94 <HAL_ADC_ConfigChannel+0x2b8>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7ff fad5 	bl	800740c <LL_ADC_GetOffsetChannel>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e6c:	fa93 f3a3 	rbit	r3, r3
 8007e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8007e74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8007e7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8007e84:	2320      	movs	r3, #32
 8007e86:	e004      	b.n	8007e92 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8007e88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007e8c:	fab3 f383 	clz	r3, r3
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	461a      	mov	r2, r3
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10b      	bne.n	8007eb8 <HAL_ADC_ConfigChannel+0x2dc>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	0e9b      	lsrs	r3, r3, #26
 8007ea6:	f003 031f 	and.w	r3, r3, #31
 8007eaa:	e01e      	b.n	8007eea <HAL_ADC_ConfigChannel+0x30e>
 8007eac:	47ff0000 	.word	0x47ff0000
 8007eb0:	58026000 	.word	0x58026000
 8007eb4:	5c001000 	.word	0x5c001000
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ec4:	fa93 f3a3 	rbit	r3, r3
 8007ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8007ecc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8007ed4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8007edc:	2320      	movs	r3, #32
 8007ede:	e004      	b.n	8007eea <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8007ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007ee4:	fab3 f383 	clz	r3, r3
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d106      	bne.n	8007efc <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff fb1e 	bl	8007538 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2101      	movs	r1, #1
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff fa82 	bl	800740c <LL_ADC_GetOffsetChannel>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10a      	bne.n	8007f28 <HAL_ADC_ConfigChannel+0x34c>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2101      	movs	r1, #1
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7ff fa77 	bl	800740c <LL_ADC_GetOffsetChannel>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	0e9b      	lsrs	r3, r3, #26
 8007f22:	f003 021f 	and.w	r2, r3, #31
 8007f26:	e01e      	b.n	8007f66 <HAL_ADC_ConfigChannel+0x38a>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff fa6c 	bl	800740c <LL_ADC_GetOffsetChannel>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f3e:	fa93 f3a3 	rbit	r3, r3
 8007f42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8007f46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8007f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8007f56:	2320      	movs	r3, #32
 8007f58:	e004      	b.n	8007f64 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8007f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f5e:	fab3 f383 	clz	r3, r3
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	461a      	mov	r2, r3
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d105      	bne.n	8007f7e <HAL_ADC_ConfigChannel+0x3a2>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	0e9b      	lsrs	r3, r3, #26
 8007f78:	f003 031f 	and.w	r3, r3, #31
 8007f7c:	e018      	b.n	8007fb0 <HAL_ADC_ConfigChannel+0x3d4>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f8a:	fa93 f3a3 	rbit	r3, r3
 8007f8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8007f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8007f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8007fa2:	2320      	movs	r3, #32
 8007fa4:	e004      	b.n	8007fb0 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8007fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007faa:	fab3 f383 	clz	r3, r3
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d106      	bne.n	8007fc2 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	2101      	movs	r1, #1
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff fabb 	bl	8007538 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2102      	movs	r1, #2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff fa1f 	bl	800740c <LL_ADC_GetOffsetChannel>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10a      	bne.n	8007fee <HAL_ADC_ConfigChannel+0x412>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2102      	movs	r1, #2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff fa14 	bl	800740c <LL_ADC_GetOffsetChannel>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	0e9b      	lsrs	r3, r3, #26
 8007fe8:	f003 021f 	and.w	r2, r3, #31
 8007fec:	e01e      	b.n	800802c <HAL_ADC_ConfigChannel+0x450>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2102      	movs	r1, #2
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7ff fa09 	bl	800740c <LL_ADC_GetOffsetChannel>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008000:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008004:	fa93 f3a3 	rbit	r3, r3
 8008008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800800c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008010:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8008014:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 800801c:	2320      	movs	r3, #32
 800801e:	e004      	b.n	800802a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8008020:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008024:	fab3 f383 	clz	r3, r3
 8008028:	b2db      	uxtb	r3, r3
 800802a:	461a      	mov	r2, r3
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <HAL_ADC_ConfigChannel+0x468>
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	0e9b      	lsrs	r3, r3, #26
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	e014      	b.n	800806e <HAL_ADC_ConfigChannel+0x492>
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800804a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800804c:	fa93 f3a3 	rbit	r3, r3
 8008050:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8008052:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008054:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8008058:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008060:	2320      	movs	r3, #32
 8008062:	e004      	b.n	800806e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8008064:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008068:	fab3 f383 	clz	r3, r3
 800806c:	b2db      	uxtb	r3, r3
 800806e:	429a      	cmp	r2, r3
 8008070:	d106      	bne.n	8008080 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2200      	movs	r2, #0
 8008078:	2102      	movs	r1, #2
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff fa5c 	bl	8007538 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2103      	movs	r1, #3
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff f9c0 	bl	800740c <LL_ADC_GetOffsetChannel>
 800808c:	4603      	mov	r3, r0
 800808e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10a      	bne.n	80080ac <HAL_ADC_ConfigChannel+0x4d0>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2103      	movs	r1, #3
 800809c:	4618      	mov	r0, r3
 800809e:	f7ff f9b5 	bl	800740c <LL_ADC_GetOffsetChannel>
 80080a2:	4603      	mov	r3, r0
 80080a4:	0e9b      	lsrs	r3, r3, #26
 80080a6:	f003 021f 	and.w	r2, r3, #31
 80080aa:	e017      	b.n	80080dc <HAL_ADC_ConfigChannel+0x500>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2103      	movs	r1, #3
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff f9aa 	bl	800740c <LL_ADC_GetOffsetChannel>
 80080b8:	4603      	mov	r3, r0
 80080ba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080be:	fa93 f3a3 	rbit	r3, r3
 80080c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80080c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080c6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80080c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80080ce:	2320      	movs	r3, #32
 80080d0:	e003      	b.n	80080da <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80080d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080d4:	fab3 f383 	clz	r3, r3
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	461a      	mov	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d105      	bne.n	80080f4 <HAL_ADC_ConfigChannel+0x518>
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	0e9b      	lsrs	r3, r3, #26
 80080ee:	f003 031f 	and.w	r3, r3, #31
 80080f2:	e011      	b.n	8008118 <HAL_ADC_ConfigChannel+0x53c>
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080fc:	fa93 f3a3 	rbit	r3, r3
 8008100:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8008102:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008104:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8008106:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 800810c:	2320      	movs	r3, #32
 800810e:	e003      	b.n	8008118 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8008110:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008112:	fab3 f383 	clz	r3, r3
 8008116:	b2db      	uxtb	r3, r3
 8008118:	429a      	cmp	r2, r3
 800811a:	d14f      	bne.n	80081bc <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2200      	movs	r2, #0
 8008122:	2103      	movs	r1, #3
 8008124:	4618      	mov	r0, r3
 8008126:	f7ff fa07 	bl	8007538 <LL_ADC_SetOffsetState>
 800812a:	e047      	b.n	80081bc <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008132:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	069b      	lsls	r3, r3, #26
 800813c:	429a      	cmp	r2, r3
 800813e:	d107      	bne.n	8008150 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800814e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008156:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	069b      	lsls	r3, r3, #26
 8008160:	429a      	cmp	r2, r3
 8008162:	d107      	bne.n	8008174 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008172:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800817a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	069b      	lsls	r3, r3, #26
 8008184:	429a      	cmp	r2, r3
 8008186:	d107      	bne.n	8008198 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008196:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800819e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	069b      	lsls	r3, r3, #26
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d107      	bne.n	80081bc <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80081ba:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff fac9 	bl	8007758 <LL_ADC_IsEnabled>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f040 8219 	bne.w	8008600 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	6819      	ldr	r1, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	461a      	mov	r2, r3
 80081dc:	f7ff fa2e 	bl	800763c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	4aa1      	ldr	r2, [pc, #644]	@ (800846c <HAL_ADC_ConfigChannel+0x890>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	f040 812e 	bne.w	8008448 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <HAL_ADC_ConfigChannel+0x638>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	0e9b      	lsrs	r3, r3, #26
 8008202:	3301      	adds	r3, #1
 8008204:	f003 031f 	and.w	r3, r3, #31
 8008208:	2b09      	cmp	r3, #9
 800820a:	bf94      	ite	ls
 800820c:	2301      	movls	r3, #1
 800820e:	2300      	movhi	r3, #0
 8008210:	b2db      	uxtb	r3, r3
 8008212:	e019      	b.n	8008248 <HAL_ADC_ConfigChannel+0x66c>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800821a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800821c:	fa93 f3a3 	rbit	r3, r3
 8008220:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8008222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008224:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8008226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d101      	bne.n	8008230 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800822c:	2320      	movs	r3, #32
 800822e:	e003      	b.n	8008238 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8008230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008232:	fab3 f383 	clz	r3, r3
 8008236:	b2db      	uxtb	r3, r3
 8008238:	3301      	adds	r3, #1
 800823a:	f003 031f 	and.w	r3, r3, #31
 800823e:	2b09      	cmp	r3, #9
 8008240:	bf94      	ite	ls
 8008242:	2301      	movls	r3, #1
 8008244:	2300      	movhi	r3, #0
 8008246:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008248:	2b00      	cmp	r3, #0
 800824a:	d079      	beq.n	8008340 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008254:	2b00      	cmp	r3, #0
 8008256:	d107      	bne.n	8008268 <HAL_ADC_ConfigChannel+0x68c>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	0e9b      	lsrs	r3, r3, #26
 800825e:	3301      	adds	r3, #1
 8008260:	069b      	lsls	r3, r3, #26
 8008262:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008266:	e015      	b.n	8008294 <HAL_ADC_ConfigChannel+0x6b8>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800826e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008270:	fa93 f3a3 	rbit	r3, r3
 8008274:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8008276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008278:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800827a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8008280:	2320      	movs	r3, #32
 8008282:	e003      	b.n	800828c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8008284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008286:	fab3 f383 	clz	r3, r3
 800828a:	b2db      	uxtb	r3, r3
 800828c:	3301      	adds	r3, #1
 800828e:	069b      	lsls	r3, r3, #26
 8008290:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800829c:	2b00      	cmp	r3, #0
 800829e:	d109      	bne.n	80082b4 <HAL_ADC_ConfigChannel+0x6d8>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	0e9b      	lsrs	r3, r3, #26
 80082a6:	3301      	adds	r3, #1
 80082a8:	f003 031f 	and.w	r3, r3, #31
 80082ac:	2101      	movs	r1, #1
 80082ae:	fa01 f303 	lsl.w	r3, r1, r3
 80082b2:	e017      	b.n	80082e4 <HAL_ADC_ConfigChannel+0x708>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082bc:	fa93 f3a3 	rbit	r3, r3
 80082c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80082c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80082c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80082cc:	2320      	movs	r3, #32
 80082ce:	e003      	b.n	80082d8 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80082d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082d2:	fab3 f383 	clz	r3, r3
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	3301      	adds	r3, #1
 80082da:	f003 031f 	and.w	r3, r3, #31
 80082de:	2101      	movs	r1, #1
 80082e0:	fa01 f303 	lsl.w	r3, r1, r3
 80082e4:	ea42 0103 	orr.w	r1, r2, r3
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <HAL_ADC_ConfigChannel+0x72e>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	0e9b      	lsrs	r3, r3, #26
 80082fa:	3301      	adds	r3, #1
 80082fc:	f003 021f 	and.w	r2, r3, #31
 8008300:	4613      	mov	r3, r2
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	4413      	add	r3, r2
 8008306:	051b      	lsls	r3, r3, #20
 8008308:	e018      	b.n	800833c <HAL_ADC_ConfigChannel+0x760>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008312:	fa93 f3a3 	rbit	r3, r3
 8008316:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8008318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800831c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8008322:	2320      	movs	r3, #32
 8008324:	e003      	b.n	800832e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8008326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008328:	fab3 f383 	clz	r3, r3
 800832c:	b2db      	uxtb	r3, r3
 800832e:	3301      	adds	r3, #1
 8008330:	f003 021f 	and.w	r2, r3, #31
 8008334:	4613      	mov	r3, r2
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	4413      	add	r3, r2
 800833a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800833c:	430b      	orrs	r3, r1
 800833e:	e07e      	b.n	800843e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008348:	2b00      	cmp	r3, #0
 800834a:	d107      	bne.n	800835c <HAL_ADC_ConfigChannel+0x780>
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	0e9b      	lsrs	r3, r3, #26
 8008352:	3301      	adds	r3, #1
 8008354:	069b      	lsls	r3, r3, #26
 8008356:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800835a:	e015      	b.n	8008388 <HAL_ADC_ConfigChannel+0x7ac>
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008364:	fa93 f3a3 	rbit	r3, r3
 8008368:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800836a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800836e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8008374:	2320      	movs	r3, #32
 8008376:	e003      	b.n	8008380 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8008378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837a:	fab3 f383 	clz	r3, r3
 800837e:	b2db      	uxtb	r3, r3
 8008380:	3301      	adds	r3, #1
 8008382:	069b      	lsls	r3, r3, #26
 8008384:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <HAL_ADC_ConfigChannel+0x7cc>
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	0e9b      	lsrs	r3, r3, #26
 800839a:	3301      	adds	r3, #1
 800839c:	f003 031f 	and.w	r3, r3, #31
 80083a0:	2101      	movs	r1, #1
 80083a2:	fa01 f303 	lsl.w	r3, r1, r3
 80083a6:	e017      	b.n	80083d8 <HAL_ADC_ConfigChannel+0x7fc>
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	fa93 f3a3 	rbit	r3, r3
 80083b4:	61bb      	str	r3, [r7, #24]
  return result;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80083c0:	2320      	movs	r3, #32
 80083c2:	e003      	b.n	80083cc <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	fab3 f383 	clz	r3, r3
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	3301      	adds	r3, #1
 80083ce:	f003 031f 	and.w	r3, r3, #31
 80083d2:	2101      	movs	r1, #1
 80083d4:	fa01 f303 	lsl.w	r3, r1, r3
 80083d8:	ea42 0103 	orr.w	r1, r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10d      	bne.n	8008404 <HAL_ADC_ConfigChannel+0x828>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	0e9b      	lsrs	r3, r3, #26
 80083ee:	3301      	adds	r3, #1
 80083f0:	f003 021f 	and.w	r2, r3, #31
 80083f4:	4613      	mov	r3, r2
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	4413      	add	r3, r2
 80083fa:	3b1e      	subs	r3, #30
 80083fc:	051b      	lsls	r3, r3, #20
 80083fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008402:	e01b      	b.n	800843c <HAL_ADC_ConfigChannel+0x860>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	fa93 f3a3 	rbit	r3, r3
 8008410:	60fb      	str	r3, [r7, #12]
  return result;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800841c:	2320      	movs	r3, #32
 800841e:	e003      	b.n	8008428 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	fab3 f383 	clz	r3, r3
 8008426:	b2db      	uxtb	r3, r3
 8008428:	3301      	adds	r3, #1
 800842a:	f003 021f 	and.w	r2, r3, #31
 800842e:	4613      	mov	r3, r2
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	4413      	add	r3, r2
 8008434:	3b1e      	subs	r3, #30
 8008436:	051b      	lsls	r3, r3, #20
 8008438:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800843c:	430b      	orrs	r3, r1
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	6892      	ldr	r2, [r2, #8]
 8008442:	4619      	mov	r1, r3
 8008444:	f7ff f8ce 	bl	80075e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f280 80d7 	bge.w	8008600 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a06      	ldr	r2, [pc, #24]	@ (8008470 <HAL_ADC_ConfigChannel+0x894>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d004      	beq.n	8008466 <HAL_ADC_ConfigChannel+0x88a>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a04      	ldr	r2, [pc, #16]	@ (8008474 <HAL_ADC_ConfigChannel+0x898>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d10a      	bne.n	800847c <HAL_ADC_ConfigChannel+0x8a0>
 8008466:	4b04      	ldr	r3, [pc, #16]	@ (8008478 <HAL_ADC_ConfigChannel+0x89c>)
 8008468:	e009      	b.n	800847e <HAL_ADC_ConfigChannel+0x8a2>
 800846a:	bf00      	nop
 800846c:	47ff0000 	.word	0x47ff0000
 8008470:	40022000 	.word	0x40022000
 8008474:	40022100 	.word	0x40022100
 8008478:	40022300 	.word	0x40022300
 800847c:	4b65      	ldr	r3, [pc, #404]	@ (8008614 <HAL_ADC_ConfigChannel+0xa38>)
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe ff84 	bl	800738c <LL_ADC_GetCommonPathInternalCh>
 8008484:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a62      	ldr	r2, [pc, #392]	@ (8008618 <HAL_ADC_ConfigChannel+0xa3c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d004      	beq.n	800849c <HAL_ADC_ConfigChannel+0x8c0>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a61      	ldr	r2, [pc, #388]	@ (800861c <HAL_ADC_ConfigChannel+0xa40>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d10e      	bne.n	80084ba <HAL_ADC_ConfigChannel+0x8de>
 800849c:	485e      	ldr	r0, [pc, #376]	@ (8008618 <HAL_ADC_ConfigChannel+0xa3c>)
 800849e:	f7ff f95b 	bl	8007758 <LL_ADC_IsEnabled>
 80084a2:	4604      	mov	r4, r0
 80084a4:	485d      	ldr	r0, [pc, #372]	@ (800861c <HAL_ADC_ConfigChannel+0xa40>)
 80084a6:	f7ff f957 	bl	8007758 <LL_ADC_IsEnabled>
 80084aa:	4603      	mov	r3, r0
 80084ac:	4323      	orrs	r3, r4
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bf0c      	ite	eq
 80084b2:	2301      	moveq	r3, #1
 80084b4:	2300      	movne	r3, #0
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	e008      	b.n	80084cc <HAL_ADC_ConfigChannel+0x8f0>
 80084ba:	4859      	ldr	r0, [pc, #356]	@ (8008620 <HAL_ADC_ConfigChannel+0xa44>)
 80084bc:	f7ff f94c 	bl	8007758 <LL_ADC_IsEnabled>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	bf0c      	ite	eq
 80084c6:	2301      	moveq	r3, #1
 80084c8:	2300      	movne	r3, #0
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8084 	beq.w	80085da <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a53      	ldr	r2, [pc, #332]	@ (8008624 <HAL_ADC_ConfigChannel+0xa48>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d132      	bne.n	8008542 <HAL_ADC_ConfigChannel+0x966>
 80084dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d12c      	bne.n	8008542 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a4c      	ldr	r2, [pc, #304]	@ (8008620 <HAL_ADC_ConfigChannel+0xa44>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	f040 8086 	bne.w	8008600 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a47      	ldr	r2, [pc, #284]	@ (8008618 <HAL_ADC_ConfigChannel+0xa3c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d004      	beq.n	8008508 <HAL_ADC_ConfigChannel+0x92c>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a46      	ldr	r2, [pc, #280]	@ (800861c <HAL_ADC_ConfigChannel+0xa40>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d101      	bne.n	800850c <HAL_ADC_ConfigChannel+0x930>
 8008508:	4a47      	ldr	r2, [pc, #284]	@ (8008628 <HAL_ADC_ConfigChannel+0xa4c>)
 800850a:	e000      	b.n	800850e <HAL_ADC_ConfigChannel+0x932>
 800850c:	4a41      	ldr	r2, [pc, #260]	@ (8008614 <HAL_ADC_ConfigChannel+0xa38>)
 800850e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008512:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008516:	4619      	mov	r1, r3
 8008518:	4610      	mov	r0, r2
 800851a:	f7fe ff24 	bl	8007366 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800851e:	4b43      	ldr	r3, [pc, #268]	@ (800862c <HAL_ADC_ConfigChannel+0xa50>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	099b      	lsrs	r3, r3, #6
 8008524:	4a42      	ldr	r2, [pc, #264]	@ (8008630 <HAL_ADC_ConfigChannel+0xa54>)
 8008526:	fba2 2303 	umull	r2, r3, r2, r3
 800852a:	099b      	lsrs	r3, r3, #6
 800852c:	3301      	adds	r3, #1
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008532:	e002      	b.n	800853a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	3b01      	subs	r3, #1
 8008538:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1f9      	bne.n	8008534 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008540:	e05e      	b.n	8008600 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a3b      	ldr	r2, [pc, #236]	@ (8008634 <HAL_ADC_ConfigChannel+0xa58>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d120      	bne.n	800858e <HAL_ADC_ConfigChannel+0x9b2>
 800854c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008550:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d11a      	bne.n	800858e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a30      	ldr	r2, [pc, #192]	@ (8008620 <HAL_ADC_ConfigChannel+0xa44>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d14e      	bne.n	8008600 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a2c      	ldr	r2, [pc, #176]	@ (8008618 <HAL_ADC_ConfigChannel+0xa3c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d004      	beq.n	8008576 <HAL_ADC_ConfigChannel+0x99a>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a2a      	ldr	r2, [pc, #168]	@ (800861c <HAL_ADC_ConfigChannel+0xa40>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d101      	bne.n	800857a <HAL_ADC_ConfigChannel+0x99e>
 8008576:	4a2c      	ldr	r2, [pc, #176]	@ (8008628 <HAL_ADC_ConfigChannel+0xa4c>)
 8008578:	e000      	b.n	800857c <HAL_ADC_ConfigChannel+0x9a0>
 800857a:	4a26      	ldr	r2, [pc, #152]	@ (8008614 <HAL_ADC_ConfigChannel+0xa38>)
 800857c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008580:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008584:	4619      	mov	r1, r3
 8008586:	4610      	mov	r0, r2
 8008588:	f7fe feed 	bl	8007366 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800858c:	e038      	b.n	8008600 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a29      	ldr	r2, [pc, #164]	@ (8008638 <HAL_ADC_ConfigChannel+0xa5c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d133      	bne.n	8008600 <HAL_ADC_ConfigChannel+0xa24>
 8008598:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800859c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d12d      	bne.n	8008600 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008620 <HAL_ADC_ConfigChannel+0xa44>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d128      	bne.n	8008600 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a19      	ldr	r2, [pc, #100]	@ (8008618 <HAL_ADC_ConfigChannel+0xa3c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d004      	beq.n	80085c2 <HAL_ADC_ConfigChannel+0x9e6>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a17      	ldr	r2, [pc, #92]	@ (800861c <HAL_ADC_ConfigChannel+0xa40>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d101      	bne.n	80085c6 <HAL_ADC_ConfigChannel+0x9ea>
 80085c2:	4a19      	ldr	r2, [pc, #100]	@ (8008628 <HAL_ADC_ConfigChannel+0xa4c>)
 80085c4:	e000      	b.n	80085c8 <HAL_ADC_ConfigChannel+0x9ec>
 80085c6:	4a13      	ldr	r2, [pc, #76]	@ (8008614 <HAL_ADC_ConfigChannel+0xa38>)
 80085c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80085d0:	4619      	mov	r1, r3
 80085d2:	4610      	mov	r0, r2
 80085d4:	f7fe fec7 	bl	8007366 <LL_ADC_SetCommonPathInternalCh>
 80085d8:	e012      	b.n	8008600 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085de:	f043 0220 	orr.w	r2, r3, #32
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80085ec:	e008      	b.n	8008600 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085f2:	f043 0220 	orr.w	r2, r3, #32
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008608:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800860c:	4618      	mov	r0, r3
 800860e:	37e4      	adds	r7, #228	@ 0xe4
 8008610:	46bd      	mov	sp, r7
 8008612:	bd90      	pop	{r4, r7, pc}
 8008614:	58026300 	.word	0x58026300
 8008618:	40022000 	.word	0x40022000
 800861c:	40022100 	.word	0x40022100
 8008620:	58026000 	.word	0x58026000
 8008624:	c7520000 	.word	0xc7520000
 8008628:	40022300 	.word	0x40022300
 800862c:	24000000 	.word	0x24000000
 8008630:	053e2d63 	.word	0x053e2d63
 8008634:	c3210000 	.word	0xc3210000
 8008638:	cb840000 	.word	0xcb840000

0800863c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a6c      	ldr	r2, [pc, #432]	@ (80087fc <ADC_ConfigureBoostMode+0x1c0>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d004      	beq.n	8008658 <ADC_ConfigureBoostMode+0x1c>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a6b      	ldr	r2, [pc, #428]	@ (8008800 <ADC_ConfigureBoostMode+0x1c4>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d109      	bne.n	800866c <ADC_ConfigureBoostMode+0x30>
 8008658:	4b6a      	ldr	r3, [pc, #424]	@ (8008804 <ADC_ConfigureBoostMode+0x1c8>)
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008660:	2b00      	cmp	r3, #0
 8008662:	bf14      	ite	ne
 8008664:	2301      	movne	r3, #1
 8008666:	2300      	moveq	r3, #0
 8008668:	b2db      	uxtb	r3, r3
 800866a:	e008      	b.n	800867e <ADC_ConfigureBoostMode+0x42>
 800866c:	4b66      	ldr	r3, [pc, #408]	@ (8008808 <ADC_ConfigureBoostMode+0x1cc>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008674:	2b00      	cmp	r3, #0
 8008676:	bf14      	ite	ne
 8008678:	2301      	movne	r3, #1
 800867a:	2300      	moveq	r3, #0
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d01c      	beq.n	80086bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008682:	f005 fbff 	bl	800de84 <HAL_RCC_GetHCLKFreq>
 8008686:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008690:	d010      	beq.n	80086b4 <ADC_ConfigureBoostMode+0x78>
 8008692:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008696:	d873      	bhi.n	8008780 <ADC_ConfigureBoostMode+0x144>
 8008698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800869c:	d002      	beq.n	80086a4 <ADC_ConfigureBoostMode+0x68>
 800869e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086a2:	d16d      	bne.n	8008780 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	0c1b      	lsrs	r3, r3, #16
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b0:	60fb      	str	r3, [r7, #12]
        break;
 80086b2:	e068      	b.n	8008786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	089b      	lsrs	r3, r3, #2
 80086b8:	60fb      	str	r3, [r7, #12]
        break;
 80086ba:	e064      	b.n	8008786 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80086bc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80086c0:	f04f 0100 	mov.w	r1, #0
 80086c4:	f006 fdda 	bl	800f27c <HAL_RCCEx_GetPeriphCLKFreq>
 80086c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80086d2:	d051      	beq.n	8008778 <ADC_ConfigureBoostMode+0x13c>
 80086d4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80086d8:	d854      	bhi.n	8008784 <ADC_ConfigureBoostMode+0x148>
 80086da:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80086de:	d047      	beq.n	8008770 <ADC_ConfigureBoostMode+0x134>
 80086e0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80086e4:	d84e      	bhi.n	8008784 <ADC_ConfigureBoostMode+0x148>
 80086e6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80086ea:	d03d      	beq.n	8008768 <ADC_ConfigureBoostMode+0x12c>
 80086ec:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80086f0:	d848      	bhi.n	8008784 <ADC_ConfigureBoostMode+0x148>
 80086f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086f6:	d033      	beq.n	8008760 <ADC_ConfigureBoostMode+0x124>
 80086f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086fc:	d842      	bhi.n	8008784 <ADC_ConfigureBoostMode+0x148>
 80086fe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8008702:	d029      	beq.n	8008758 <ADC_ConfigureBoostMode+0x11c>
 8008704:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8008708:	d83c      	bhi.n	8008784 <ADC_ConfigureBoostMode+0x148>
 800870a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800870e:	d01a      	beq.n	8008746 <ADC_ConfigureBoostMode+0x10a>
 8008710:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008714:	d836      	bhi.n	8008784 <ADC_ConfigureBoostMode+0x148>
 8008716:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800871a:	d014      	beq.n	8008746 <ADC_ConfigureBoostMode+0x10a>
 800871c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008720:	d830      	bhi.n	8008784 <ADC_ConfigureBoostMode+0x148>
 8008722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008726:	d00e      	beq.n	8008746 <ADC_ConfigureBoostMode+0x10a>
 8008728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800872c:	d82a      	bhi.n	8008784 <ADC_ConfigureBoostMode+0x148>
 800872e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008732:	d008      	beq.n	8008746 <ADC_ConfigureBoostMode+0x10a>
 8008734:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008738:	d824      	bhi.n	8008784 <ADC_ConfigureBoostMode+0x148>
 800873a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800873e:	d002      	beq.n	8008746 <ADC_ConfigureBoostMode+0x10a>
 8008740:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008744:	d11e      	bne.n	8008784 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	0c9b      	lsrs	r3, r3, #18
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	fbb2 f3f3 	udiv	r3, r2, r3
 8008754:	60fb      	str	r3, [r7, #12]
        break;
 8008756:	e016      	b.n	8008786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	091b      	lsrs	r3, r3, #4
 800875c:	60fb      	str	r3, [r7, #12]
        break;
 800875e:	e012      	b.n	8008786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	095b      	lsrs	r3, r3, #5
 8008764:	60fb      	str	r3, [r7, #12]
        break;
 8008766:	e00e      	b.n	8008786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	099b      	lsrs	r3, r3, #6
 800876c:	60fb      	str	r3, [r7, #12]
        break;
 800876e:	e00a      	b.n	8008786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	09db      	lsrs	r3, r3, #7
 8008774:	60fb      	str	r3, [r7, #12]
        break;
 8008776:	e006      	b.n	8008786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	0a1b      	lsrs	r3, r3, #8
 800877c:	60fb      	str	r3, [r7, #12]
        break;
 800877e:	e002      	b.n	8008786 <ADC_ConfigureBoostMode+0x14a>
        break;
 8008780:	bf00      	nop
 8008782:	e000      	b.n	8008786 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8008784:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	085b      	lsrs	r3, r3, #1
 800878a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4a1f      	ldr	r2, [pc, #124]	@ (800880c <ADC_ConfigureBoostMode+0x1d0>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d808      	bhi.n	80087a6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689a      	ldr	r2, [r3, #8]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80087a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80087a4:	e025      	b.n	80087f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	4a19      	ldr	r2, [pc, #100]	@ (8008810 <ADC_ConfigureBoostMode+0x1d4>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d80a      	bhi.n	80087c4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087c0:	609a      	str	r2, [r3, #8]
}
 80087c2:	e016      	b.n	80087f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4a13      	ldr	r2, [pc, #76]	@ (8008814 <ADC_ConfigureBoostMode+0x1d8>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d80a      	bhi.n	80087e2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087de:	609a      	str	r2, [r3, #8]
}
 80087e0:	e007      	b.n	80087f2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80087f0:	609a      	str	r2, [r3, #8]
}
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	40022000 	.word	0x40022000
 8008800:	40022100 	.word	0x40022100
 8008804:	40022300 	.word	0x40022300
 8008808:	58026300 	.word	0x58026300
 800880c:	005f5e10 	.word	0x005f5e10
 8008810:	00bebc20 	.word	0x00bebc20
 8008814:	017d7840 	.word	0x017d7840

08008818 <LL_ADC_IsEnabled>:
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <LL_ADC_IsEnabled+0x18>
 800882c:	2301      	movs	r3, #1
 800882e:	e000      	b.n	8008832 <LL_ADC_IsEnabled+0x1a>
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <LL_ADC_REG_IsConversionOngoing>:
{
 800883e:	b480      	push	{r7}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f003 0304 	and.w	r3, r3, #4
 800884e:	2b04      	cmp	r3, #4
 8008850:	d101      	bne.n	8008856 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008852:	2301      	movs	r3, #1
 8008854:	e000      	b.n	8008858 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008864:	b590      	push	{r4, r7, lr}
 8008866:	b0a3      	sub	sp, #140	@ 0x8c
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800887a:	2b01      	cmp	r3, #1
 800887c:	d101      	bne.n	8008882 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800887e:	2302      	movs	r3, #2
 8008880:	e0c1      	b.n	8008a06 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800888a:	2300      	movs	r3, #0
 800888c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800888e:	2300      	movs	r3, #0
 8008890:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a5e      	ldr	r2, [pc, #376]	@ (8008a10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d102      	bne.n	80088a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800889c:	4b5d      	ldr	r3, [pc, #372]	@ (8008a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e001      	b.n	80088a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10b      	bne.n	80088c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088b0:	f043 0220 	orr.w	r2, r3, #32
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e0a0      	b.n	8008a06 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff ffb9 	bl	800883e <LL_ADC_REG_IsConversionOngoing>
 80088cc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff ffb2 	bl	800883e <LL_ADC_REG_IsConversionOngoing>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f040 8081 	bne.w	80089e4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80088e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d17c      	bne.n	80089e4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a48      	ldr	r2, [pc, #288]	@ (8008a10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d004      	beq.n	80088fe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a46      	ldr	r2, [pc, #280]	@ (8008a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d101      	bne.n	8008902 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80088fe:	4b46      	ldr	r3, [pc, #280]	@ (8008a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008900:	e000      	b.n	8008904 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008902:	4b46      	ldr	r3, [pc, #280]	@ (8008a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008904:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d039      	beq.n	8008982 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800890e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	431a      	orrs	r2, r3
 800891c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800891e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a3a      	ldr	r2, [pc, #232]	@ (8008a10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d004      	beq.n	8008934 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a39      	ldr	r2, [pc, #228]	@ (8008a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d10e      	bne.n	8008952 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8008934:	4836      	ldr	r0, [pc, #216]	@ (8008a10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008936:	f7ff ff6f 	bl	8008818 <LL_ADC_IsEnabled>
 800893a:	4604      	mov	r4, r0
 800893c:	4835      	ldr	r0, [pc, #212]	@ (8008a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800893e:	f7ff ff6b 	bl	8008818 <LL_ADC_IsEnabled>
 8008942:	4603      	mov	r3, r0
 8008944:	4323      	orrs	r3, r4
 8008946:	2b00      	cmp	r3, #0
 8008948:	bf0c      	ite	eq
 800894a:	2301      	moveq	r3, #1
 800894c:	2300      	movne	r3, #0
 800894e:	b2db      	uxtb	r3, r3
 8008950:	e008      	b.n	8008964 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008952:	4833      	ldr	r0, [pc, #204]	@ (8008a20 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008954:	f7ff ff60 	bl	8008818 <LL_ADC_IsEnabled>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	bf0c      	ite	eq
 800895e:	2301      	moveq	r3, #1
 8008960:	2300      	movne	r3, #0
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d047      	beq.n	80089f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008968:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	4b2d      	ldr	r3, [pc, #180]	@ (8008a24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800896e:	4013      	ands	r3, r2
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	6811      	ldr	r1, [r2, #0]
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	6892      	ldr	r2, [r2, #8]
 8008978:	430a      	orrs	r2, r1
 800897a:	431a      	orrs	r2, r3
 800897c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800897e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008980:	e03a      	b.n	80089f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008982:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800898a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800898c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a1f      	ldr	r2, [pc, #124]	@ (8008a10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d10e      	bne.n	80089c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80089a2:	481b      	ldr	r0, [pc, #108]	@ (8008a10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80089a4:	f7ff ff38 	bl	8008818 <LL_ADC_IsEnabled>
 80089a8:	4604      	mov	r4, r0
 80089aa:	481a      	ldr	r0, [pc, #104]	@ (8008a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80089ac:	f7ff ff34 	bl	8008818 <LL_ADC_IsEnabled>
 80089b0:	4603      	mov	r3, r0
 80089b2:	4323      	orrs	r3, r4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	bf0c      	ite	eq
 80089b8:	2301      	moveq	r3, #1
 80089ba:	2300      	movne	r3, #0
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	e008      	b.n	80089d2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80089c0:	4817      	ldr	r0, [pc, #92]	@ (8008a20 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80089c2:	f7ff ff29 	bl	8008818 <LL_ADC_IsEnabled>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	bf0c      	ite	eq
 80089cc:	2301      	moveq	r3, #1
 80089ce:	2300      	movne	r3, #0
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d010      	beq.n	80089f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80089d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089d8:	689a      	ldr	r2, [r3, #8]
 80089da:	4b12      	ldr	r3, [pc, #72]	@ (8008a24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80089dc:	4013      	ands	r3, r2
 80089de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80089e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80089e2:	e009      	b.n	80089f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089e8:	f043 0220 	orr.w	r2, r3, #32
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80089f6:	e000      	b.n	80089fa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80089f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008a02:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	378c      	adds	r7, #140	@ 0x8c
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd90      	pop	{r4, r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	40022000 	.word	0x40022000
 8008a14:	40022100 	.word	0x40022100
 8008a18:	40022300 	.word	0x40022300
 8008a1c:	58026300 	.word	0x58026300
 8008a20:	58026000 	.word	0x58026000
 8008a24:	fffff0e0 	.word	0xfffff0e0

08008a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a38:	4b0b      	ldr	r3, [pc, #44]	@ (8008a68 <__NVIC_SetPriorityGrouping+0x40>)
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008a44:	4013      	ands	r3, r2
 8008a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008a50:	4b06      	ldr	r3, [pc, #24]	@ (8008a6c <__NVIC_SetPriorityGrouping+0x44>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a56:	4a04      	ldr	r2, [pc, #16]	@ (8008a68 <__NVIC_SetPriorityGrouping+0x40>)
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	60d3      	str	r3, [r2, #12]
}
 8008a5c:	bf00      	nop
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr
 8008a68:	e000ed00 	.word	0xe000ed00
 8008a6c:	05fa0000 	.word	0x05fa0000

08008a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008a70:	b480      	push	{r7}
 8008a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a74:	4b04      	ldr	r3, [pc, #16]	@ (8008a88 <__NVIC_GetPriorityGrouping+0x18>)
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	0a1b      	lsrs	r3, r3, #8
 8008a7a:	f003 0307 	and.w	r3, r3, #7
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	e000ed00 	.word	0xe000ed00

08008a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4603      	mov	r3, r0
 8008a94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	db0b      	blt.n	8008ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a9e:	88fb      	ldrh	r3, [r7, #6]
 8008aa0:	f003 021f 	and.w	r2, r3, #31
 8008aa4:	4907      	ldr	r1, [pc, #28]	@ (8008ac4 <__NVIC_EnableIRQ+0x38>)
 8008aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008aaa:	095b      	lsrs	r3, r3, #5
 8008aac:	2001      	movs	r0, #1
 8008aae:	fa00 f202 	lsl.w	r2, r0, r2
 8008ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008ab6:	bf00      	nop
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	e000e100 	.word	0xe000e100

08008ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	db0a      	blt.n	8008af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	490c      	ldr	r1, [pc, #48]	@ (8008b14 <__NVIC_SetPriority+0x4c>)
 8008ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ae6:	0112      	lsls	r2, r2, #4
 8008ae8:	b2d2      	uxtb	r2, r2
 8008aea:	440b      	add	r3, r1
 8008aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008af0:	e00a      	b.n	8008b08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	4908      	ldr	r1, [pc, #32]	@ (8008b18 <__NVIC_SetPriority+0x50>)
 8008af8:	88fb      	ldrh	r3, [r7, #6]
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	3b04      	subs	r3, #4
 8008b00:	0112      	lsls	r2, r2, #4
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	440b      	add	r3, r1
 8008b06:	761a      	strb	r2, [r3, #24]
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	e000e100 	.word	0xe000e100
 8008b18:	e000ed00 	.word	0xe000ed00

08008b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b089      	sub	sp, #36	@ 0x24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	f1c3 0307 	rsb	r3, r3, #7
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	bf28      	it	cs
 8008b3a:	2304      	movcs	r3, #4
 8008b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	3304      	adds	r3, #4
 8008b42:	2b06      	cmp	r3, #6
 8008b44:	d902      	bls.n	8008b4c <NVIC_EncodePriority+0x30>
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	3b03      	subs	r3, #3
 8008b4a:	e000      	b.n	8008b4e <NVIC_EncodePriority+0x32>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b50:	f04f 32ff 	mov.w	r2, #4294967295
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	43da      	mvns	r2, r3
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	401a      	ands	r2, r3
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b64:	f04f 31ff 	mov.w	r1, #4294967295
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b6e:	43d9      	mvns	r1, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b74:	4313      	orrs	r3, r2
         );
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3724      	adds	r7, #36	@ 0x24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
	...

08008b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b94:	d301      	bcc.n	8008b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b96:	2301      	movs	r3, #1
 8008b98:	e00f      	b.n	8008bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8008bc4 <SysTick_Config+0x40>)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ba2:	210f      	movs	r1, #15
 8008ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba8:	f7ff ff8e 	bl	8008ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008bac:	4b05      	ldr	r3, [pc, #20]	@ (8008bc4 <SysTick_Config+0x40>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008bb2:	4b04      	ldr	r3, [pc, #16]	@ (8008bc4 <SysTick_Config+0x40>)
 8008bb4:	2207      	movs	r2, #7
 8008bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	e000e010 	.word	0xe000e010

08008bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7ff ff29 	bl	8008a28 <__NVIC_SetPriorityGrouping>
}
 8008bd6:	bf00      	nop
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b086      	sub	sp, #24
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	4603      	mov	r3, r0
 8008be6:	60b9      	str	r1, [r7, #8]
 8008be8:	607a      	str	r2, [r7, #4]
 8008bea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008bec:	f7ff ff40 	bl	8008a70 <__NVIC_GetPriorityGrouping>
 8008bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	68b9      	ldr	r1, [r7, #8]
 8008bf6:	6978      	ldr	r0, [r7, #20]
 8008bf8:	f7ff ff90 	bl	8008b1c <NVIC_EncodePriority>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008c02:	4611      	mov	r1, r2
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff ff5f 	bl	8008ac8 <__NVIC_SetPriority>
}
 8008c0a:	bf00      	nop
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	4603      	mov	r3, r0
 8008c1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7ff ff33 	bl	8008a8c <__NVIC_EnableIRQ>
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7ff ffa4 	bl	8008b84 <SysTick_Config>
 8008c3c:	4603      	mov	r3, r0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
	...

08008c48 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8008c4c:	f3bf 8f5f 	dmb	sy
}
 8008c50:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008c52:	4b07      	ldr	r3, [pc, #28]	@ (8008c70 <HAL_MPU_Disable+0x28>)
 8008c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c56:	4a06      	ldr	r2, [pc, #24]	@ (8008c70 <HAL_MPU_Disable+0x28>)
 8008c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c5c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008c5e:	4b05      	ldr	r3, [pc, #20]	@ (8008c74 <HAL_MPU_Disable+0x2c>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	605a      	str	r2, [r3, #4]
}
 8008c64:	bf00      	nop
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	e000ed00 	.word	0xe000ed00
 8008c74:	e000ed90 	.word	0xe000ed90

08008c78 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008c80:	4a0b      	ldr	r2, [pc, #44]	@ (8008cb0 <HAL_MPU_Enable+0x38>)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb4 <HAL_MPU_Enable+0x3c>)
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8e:	4a09      	ldr	r2, [pc, #36]	@ (8008cb4 <HAL_MPU_Enable+0x3c>)
 8008c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c94:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008c96:	f3bf 8f4f 	dsb	sy
}
 8008c9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008c9c:	f3bf 8f6f 	isb	sy
}
 8008ca0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008ca2:	bf00      	nop
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	e000ed90 	.word	0xe000ed90
 8008cb4:	e000ed00 	.word	0xe000ed00

08008cb8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	785a      	ldrb	r2, [r3, #1]
 8008cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8008d34 <HAL_MPU_ConfigRegion+0x7c>)
 8008cc6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8008cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8008d34 <HAL_MPU_ConfigRegion+0x7c>)
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	4a19      	ldr	r2, [pc, #100]	@ (8008d34 <HAL_MPU_ConfigRegion+0x7c>)
 8008cce:	f023 0301 	bic.w	r3, r3, #1
 8008cd2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8008cd4:	4a17      	ldr	r2, [pc, #92]	@ (8008d34 <HAL_MPU_ConfigRegion+0x7c>)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	7b1b      	ldrb	r3, [r3, #12]
 8008ce0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	7adb      	ldrb	r3, [r3, #11]
 8008ce6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008ce8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	7a9b      	ldrb	r3, [r3, #10]
 8008cee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008cf0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	7b5b      	ldrb	r3, [r3, #13]
 8008cf6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008cf8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	7b9b      	ldrb	r3, [r3, #14]
 8008cfe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008d00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	7bdb      	ldrb	r3, [r3, #15]
 8008d06:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008d08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	7a5b      	ldrb	r3, [r3, #9]
 8008d0e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008d10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	7a1b      	ldrb	r3, [r3, #8]
 8008d16:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008d18:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	7812      	ldrb	r2, [r2, #0]
 8008d1e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008d20:	4a04      	ldr	r2, [pc, #16]	@ (8008d34 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008d22:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008d24:	6113      	str	r3, [r2, #16]
}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	e000ed90 	.word	0xe000ed90

08008d38 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e014      	b.n	8008d74 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	791b      	ldrb	r3, [r3, #4]
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d105      	bne.n	8008d60 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7f9 fb4c 	bl	80023f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
 8008d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e0a2      	b.n	8008eda <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	795b      	ldrb	r3, [r3, #5]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d101      	bne.n	8008da0 <HAL_DAC_Start_DMA+0x24>
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e09c      	b.n	8008eda <HAL_DAC_Start_DMA+0x15e>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2201      	movs	r2, #1
 8008da4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2202      	movs	r2, #2
 8008daa:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d129      	bne.n	8008e06 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	4a4b      	ldr	r2, [pc, #300]	@ (8008ee4 <HAL_DAC_Start_DMA+0x168>)
 8008db8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	4a4a      	ldr	r2, [pc, #296]	@ (8008ee8 <HAL_DAC_Start_DMA+0x16c>)
 8008dc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	4a49      	ldr	r2, [pc, #292]	@ (8008eec <HAL_DAC_Start_DMA+0x170>)
 8008dc8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008dd8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d003      	beq.n	8008de8 <HAL_DAC_Start_DMA+0x6c>
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d005      	beq.n	8008df2 <HAL_DAC_Start_DMA+0x76>
 8008de6:	e009      	b.n	8008dfc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3308      	adds	r3, #8
 8008dee:	613b      	str	r3, [r7, #16]
        break;
 8008df0:	e033      	b.n	8008e5a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	330c      	adds	r3, #12
 8008df8:	613b      	str	r3, [r7, #16]
        break;
 8008dfa:	e02e      	b.n	8008e5a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3310      	adds	r3, #16
 8008e02:	613b      	str	r3, [r7, #16]
        break;
 8008e04:	e029      	b.n	8008e5a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	4a39      	ldr	r2, [pc, #228]	@ (8008ef0 <HAL_DAC_Start_DMA+0x174>)
 8008e0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	4a38      	ldr	r2, [pc, #224]	@ (8008ef4 <HAL_DAC_Start_DMA+0x178>)
 8008e14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	4a37      	ldr	r2, [pc, #220]	@ (8008ef8 <HAL_DAC_Start_DMA+0x17c>)
 8008e1c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008e2c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <HAL_DAC_Start_DMA+0xc0>
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d005      	beq.n	8008e46 <HAL_DAC_Start_DMA+0xca>
 8008e3a:	e009      	b.n	8008e50 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3314      	adds	r3, #20
 8008e42:	613b      	str	r3, [r7, #16]
        break;
 8008e44:	e009      	b.n	8008e5a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3318      	adds	r3, #24
 8008e4c:	613b      	str	r3, [r7, #16]
        break;
 8008e4e:	e004      	b.n	8008e5a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	331c      	adds	r3, #28
 8008e56:	613b      	str	r3, [r7, #16]
        break;
 8008e58:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d111      	bne.n	8008e84 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6898      	ldr	r0, [r3, #8]
 8008e74:	6879      	ldr	r1, [r7, #4]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	f000 fd6d 	bl	8009958 <HAL_DMA_Start_IT>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	75fb      	strb	r3, [r7, #23]
 8008e82:	e010      	b.n	8008ea6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8008e92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	68d8      	ldr	r0, [r3, #12]
 8008e98:	6879      	ldr	r1, [r7, #4]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	f000 fd5b 	bl	8009958 <HAL_DMA_Start_IT>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10c      	bne.n	8008ecc <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6819      	ldr	r1, [r3, #0]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f003 0310 	and.w	r3, r3, #16
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	409a      	lsls	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	601a      	str	r2, [r3, #0]
 8008eca:	e005      	b.n	8008ed8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	f043 0204 	orr.w	r2, r3, #4
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	08009195 	.word	0x08009195
 8008ee8:	080091b7 	.word	0x080091b7
 8008eec:	080091d3 	.word	0x080091d3
 8008ef0:	0800923d 	.word	0x0800923d
 8008ef4:	0800925f 	.word	0x0800925f
 8008ef8:	0800927b 	.word	0x0800927b

08008efc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08a      	sub	sp, #40	@ 0x28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d002      	beq.n	8008f2e <HAL_DAC_ConfigChannel+0x1e>
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e12a      	b.n	8009188 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	795b      	ldrb	r3, [r3, #5]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_DAC_ConfigChannel+0x2e>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e124      	b.n	8009188 <HAL_DAC_ConfigChannel+0x278>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2201      	movs	r2, #1
 8008f42:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2202      	movs	r2, #2
 8008f48:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d17a      	bne.n	8009048 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008f52:	f7fe f9c5 	bl	80072e0 <HAL_GetTick>
 8008f56:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d13d      	bne.n	8008fda <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008f5e:	e018      	b.n	8008f92 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008f60:	f7fe f9be 	bl	80072e0 <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d911      	bls.n	8008f92 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f74:	4b86      	ldr	r3, [pc, #536]	@ (8009190 <HAL_DAC_ConfigChannel+0x280>)
 8008f76:	4013      	ands	r3, r2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00a      	beq.n	8008f92 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	f043 0208 	orr.w	r2, r3, #8
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2203      	movs	r2, #3
 8008f8c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e0fa      	b.n	8009188 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f98:	4b7d      	ldr	r3, [pc, #500]	@ (8009190 <HAL_DAC_ConfigChannel+0x280>)
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1df      	bne.n	8008f60 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	6992      	ldr	r2, [r2, #24]
 8008fa8:	641a      	str	r2, [r3, #64]	@ 0x40
 8008faa:	e020      	b.n	8008fee <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008fac:	f7fe f998 	bl	80072e0 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d90f      	bls.n	8008fda <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	da0a      	bge.n	8008fda <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	f043 0208 	orr.w	r2, r3, #8
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2203      	movs	r2, #3
 8008fd4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e0d6      	b.n	8009188 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	dbe3      	blt.n	8008fac <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	6992      	ldr	r2, [r2, #24]
 8008fec:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f003 0310 	and.w	r3, r3, #16
 8008ffa:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8008ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8009002:	43db      	mvns	r3, r3
 8009004:	ea02 0103 	and.w	r1, r2, r3
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	69da      	ldr	r2, [r3, #28]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f003 0310 	and.w	r3, r3, #16
 8009012:	409a      	lsls	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	430a      	orrs	r2, r1
 800901a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f003 0310 	and.w	r3, r3, #16
 8009028:	21ff      	movs	r1, #255	@ 0xff
 800902a:	fa01 f303 	lsl.w	r3, r1, r3
 800902e:	43db      	mvns	r3, r3
 8009030:	ea02 0103 	and.w	r1, r2, r3
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	6a1a      	ldr	r2, [r3, #32]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f003 0310 	and.w	r3, r3, #16
 800903e:	409a      	lsls	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d11d      	bne.n	800908c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009056:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f003 0310 	and.w	r3, r3, #16
 800905e:	221f      	movs	r2, #31
 8009060:	fa02 f303 	lsl.w	r3, r2, r3
 8009064:	43db      	mvns	r3, r3
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	4013      	ands	r3, r2
 800906a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f003 0310 	and.w	r3, r3, #16
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	4313      	orrs	r3, r2
 8009082:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	69ba      	ldr	r2, [r7, #24]
 800908a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009092:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f003 0310 	and.w	r3, r3, #16
 800909a:	2207      	movs	r2, #7
 800909c:	fa02 f303 	lsl.w	r3, r2, r3
 80090a0:	43db      	mvns	r3, r3
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	4013      	ands	r3, r2
 80090a6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d102      	bne.n	80090b6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80090b0:	2300      	movs	r3, #0
 80090b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80090b4:	e00f      	b.n	80090d6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d102      	bne.n	80090c4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80090be:	2301      	movs	r3, #1
 80090c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80090c2:	e008      	b.n	80090d6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80090cc:	2301      	movs	r3, #1
 80090ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80090d0:	e001      	b.n	80090d6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	4313      	orrs	r3, r2
 80090e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090e2:	4313      	orrs	r3, r2
 80090e4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f003 0310 	and.w	r3, r3, #16
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	fa02 f303 	lsl.w	r3, r2, r3
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6819      	ldr	r1, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f003 0310 	and.w	r3, r3, #16
 800910c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009110:	fa02 f303 	lsl.w	r3, r2, r3
 8009114:	43da      	mvns	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	400a      	ands	r2, r1
 800911c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f003 0310 	and.w	r3, r3, #16
 800912c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8009130:	fa02 f303 	lsl.w	r3, r2, r3
 8009134:	43db      	mvns	r3, r3
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	4013      	ands	r3, r2
 800913a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f003 0310 	and.w	r3, r3, #16
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	fa02 f303 	lsl.w	r3, r2, r3
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	4313      	orrs	r3, r2
 8009152:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	69ba      	ldr	r2, [r7, #24]
 800915a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6819      	ldr	r1, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	22c0      	movs	r2, #192	@ 0xc0
 800916a:	fa02 f303 	lsl.w	r3, r2, r3
 800916e:	43da      	mvns	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	400a      	ands	r2, r1
 8009176:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2201      	movs	r2, #1
 800917c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8009184:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009188:	4618      	mov	r0, r3
 800918a:	3728      	adds	r7, #40	@ 0x28
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	20008000 	.word	0x20008000

08009194 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f7f8 f866 	bl	8001274 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	711a      	strb	r2, [r3, #4]
}
 80091ae:	bf00      	nop
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f7f8 f847 	bl	8001258 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091de:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	f043 0204 	orr.w	r2, r3, #4
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f7ff fe85 	bl	8008efc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	711a      	strb	r2, [r3, #4]
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009248:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f7ff ffd8 	bl	8009200 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	711a      	strb	r2, [r3, #4]
}
 8009256:	bf00      	nop
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f7ff ffd1 	bl	8009214 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009272:	bf00      	nop
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009286:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	f043 0204 	orr.w	r2, r3, #4
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7ff ffc7 	bl	8009228 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2201      	movs	r2, #1
 800929e:	711a      	strb	r2, [r3, #4]
}
 80092a0:	bf00      	nop
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80092b0:	f7fe f816 	bl	80072e0 <HAL_GetTick>
 80092b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e312      	b.n	80098e6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a66      	ldr	r2, [pc, #408]	@ (8009460 <HAL_DMA_Init+0x1b8>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d04a      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a65      	ldr	r2, [pc, #404]	@ (8009464 <HAL_DMA_Init+0x1bc>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d045      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a63      	ldr	r2, [pc, #396]	@ (8009468 <HAL_DMA_Init+0x1c0>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d040      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a62      	ldr	r2, [pc, #392]	@ (800946c <HAL_DMA_Init+0x1c4>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d03b      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a60      	ldr	r2, [pc, #384]	@ (8009470 <HAL_DMA_Init+0x1c8>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d036      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a5f      	ldr	r2, [pc, #380]	@ (8009474 <HAL_DMA_Init+0x1cc>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d031      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a5d      	ldr	r2, [pc, #372]	@ (8009478 <HAL_DMA_Init+0x1d0>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d02c      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a5c      	ldr	r2, [pc, #368]	@ (800947c <HAL_DMA_Init+0x1d4>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d027      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a5a      	ldr	r2, [pc, #360]	@ (8009480 <HAL_DMA_Init+0x1d8>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d022      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a59      	ldr	r2, [pc, #356]	@ (8009484 <HAL_DMA_Init+0x1dc>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d01d      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a57      	ldr	r2, [pc, #348]	@ (8009488 <HAL_DMA_Init+0x1e0>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d018      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a56      	ldr	r2, [pc, #344]	@ (800948c <HAL_DMA_Init+0x1e4>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d013      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a54      	ldr	r2, [pc, #336]	@ (8009490 <HAL_DMA_Init+0x1e8>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d00e      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a53      	ldr	r2, [pc, #332]	@ (8009494 <HAL_DMA_Init+0x1ec>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d009      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a51      	ldr	r2, [pc, #324]	@ (8009498 <HAL_DMA_Init+0x1f0>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d004      	beq.n	8009360 <HAL_DMA_Init+0xb8>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a50      	ldr	r2, [pc, #320]	@ (800949c <HAL_DMA_Init+0x1f4>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d101      	bne.n	8009364 <HAL_DMA_Init+0xbc>
 8009360:	2301      	movs	r3, #1
 8009362:	e000      	b.n	8009366 <HAL_DMA_Init+0xbe>
 8009364:	2300      	movs	r3, #0
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 813c 	beq.w	80095e4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a37      	ldr	r2, [pc, #220]	@ (8009460 <HAL_DMA_Init+0x1b8>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d04a      	beq.n	800941c <HAL_DMA_Init+0x174>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a36      	ldr	r2, [pc, #216]	@ (8009464 <HAL_DMA_Init+0x1bc>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d045      	beq.n	800941c <HAL_DMA_Init+0x174>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a34      	ldr	r2, [pc, #208]	@ (8009468 <HAL_DMA_Init+0x1c0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d040      	beq.n	800941c <HAL_DMA_Init+0x174>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a33      	ldr	r2, [pc, #204]	@ (800946c <HAL_DMA_Init+0x1c4>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d03b      	beq.n	800941c <HAL_DMA_Init+0x174>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a31      	ldr	r2, [pc, #196]	@ (8009470 <HAL_DMA_Init+0x1c8>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d036      	beq.n	800941c <HAL_DMA_Init+0x174>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a30      	ldr	r2, [pc, #192]	@ (8009474 <HAL_DMA_Init+0x1cc>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d031      	beq.n	800941c <HAL_DMA_Init+0x174>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a2e      	ldr	r2, [pc, #184]	@ (8009478 <HAL_DMA_Init+0x1d0>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d02c      	beq.n	800941c <HAL_DMA_Init+0x174>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a2d      	ldr	r2, [pc, #180]	@ (800947c <HAL_DMA_Init+0x1d4>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d027      	beq.n	800941c <HAL_DMA_Init+0x174>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a2b      	ldr	r2, [pc, #172]	@ (8009480 <HAL_DMA_Init+0x1d8>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d022      	beq.n	800941c <HAL_DMA_Init+0x174>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a2a      	ldr	r2, [pc, #168]	@ (8009484 <HAL_DMA_Init+0x1dc>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d01d      	beq.n	800941c <HAL_DMA_Init+0x174>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a28      	ldr	r2, [pc, #160]	@ (8009488 <HAL_DMA_Init+0x1e0>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d018      	beq.n	800941c <HAL_DMA_Init+0x174>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a27      	ldr	r2, [pc, #156]	@ (800948c <HAL_DMA_Init+0x1e4>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d013      	beq.n	800941c <HAL_DMA_Init+0x174>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a25      	ldr	r2, [pc, #148]	@ (8009490 <HAL_DMA_Init+0x1e8>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d00e      	beq.n	800941c <HAL_DMA_Init+0x174>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a24      	ldr	r2, [pc, #144]	@ (8009494 <HAL_DMA_Init+0x1ec>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d009      	beq.n	800941c <HAL_DMA_Init+0x174>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a22      	ldr	r2, [pc, #136]	@ (8009498 <HAL_DMA_Init+0x1f0>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d004      	beq.n	800941c <HAL_DMA_Init+0x174>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a21      	ldr	r2, [pc, #132]	@ (800949c <HAL_DMA_Init+0x1f4>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d108      	bne.n	800942e <HAL_DMA_Init+0x186>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0201 	bic.w	r2, r2, #1
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	e007      	b.n	800943e <HAL_DMA_Init+0x196>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f022 0201 	bic.w	r2, r2, #1
 800943c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800943e:	e02f      	b.n	80094a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009440:	f7fd ff4e 	bl	80072e0 <HAL_GetTick>
 8009444:	4602      	mov	r2, r0
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	2b05      	cmp	r3, #5
 800944c:	d928      	bls.n	80094a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2220      	movs	r2, #32
 8009452:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2203      	movs	r2, #3
 8009458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e242      	b.n	80098e6 <HAL_DMA_Init+0x63e>
 8009460:	40020010 	.word	0x40020010
 8009464:	40020028 	.word	0x40020028
 8009468:	40020040 	.word	0x40020040
 800946c:	40020058 	.word	0x40020058
 8009470:	40020070 	.word	0x40020070
 8009474:	40020088 	.word	0x40020088
 8009478:	400200a0 	.word	0x400200a0
 800947c:	400200b8 	.word	0x400200b8
 8009480:	40020410 	.word	0x40020410
 8009484:	40020428 	.word	0x40020428
 8009488:	40020440 	.word	0x40020440
 800948c:	40020458 	.word	0x40020458
 8009490:	40020470 	.word	0x40020470
 8009494:	40020488 	.word	0x40020488
 8009498:	400204a0 	.word	0x400204a0
 800949c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1c8      	bne.n	8009440 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	4b83      	ldr	r3, [pc, #524]	@ (80096c8 <HAL_DMA_Init+0x420>)
 80094ba:	4013      	ands	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80094c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f0:	2b04      	cmp	r3, #4
 80094f2:	d107      	bne.n	8009504 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094fc:	4313      	orrs	r3, r2
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	4313      	orrs	r3, r2
 8009502:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	2b28      	cmp	r3, #40	@ 0x28
 800950a:	d903      	bls.n	8009514 <HAL_DMA_Init+0x26c>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	2b2e      	cmp	r3, #46	@ 0x2e
 8009512:	d91f      	bls.n	8009554 <HAL_DMA_Init+0x2ac>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	2b3e      	cmp	r3, #62	@ 0x3e
 800951a:	d903      	bls.n	8009524 <HAL_DMA_Init+0x27c>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	2b42      	cmp	r3, #66	@ 0x42
 8009522:	d917      	bls.n	8009554 <HAL_DMA_Init+0x2ac>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	2b46      	cmp	r3, #70	@ 0x46
 800952a:	d903      	bls.n	8009534 <HAL_DMA_Init+0x28c>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	2b48      	cmp	r3, #72	@ 0x48
 8009532:	d90f      	bls.n	8009554 <HAL_DMA_Init+0x2ac>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2b4e      	cmp	r3, #78	@ 0x4e
 800953a:	d903      	bls.n	8009544 <HAL_DMA_Init+0x29c>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	2b52      	cmp	r3, #82	@ 0x52
 8009542:	d907      	bls.n	8009554 <HAL_DMA_Init+0x2ac>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	2b73      	cmp	r3, #115	@ 0x73
 800954a:	d905      	bls.n	8009558 <HAL_DMA_Init+0x2b0>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	2b77      	cmp	r3, #119	@ 0x77
 8009552:	d801      	bhi.n	8009558 <HAL_DMA_Init+0x2b0>
 8009554:	2301      	movs	r3, #1
 8009556:	e000      	b.n	800955a <HAL_DMA_Init+0x2b2>
 8009558:	2300      	movs	r3, #0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009564:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	695b      	ldr	r3, [r3, #20]
 8009574:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f023 0307 	bic.w	r3, r3, #7
 800957c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	4313      	orrs	r3, r2
 8009586:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958c:	2b04      	cmp	r3, #4
 800958e:	d117      	bne.n	80095c0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	4313      	orrs	r3, r2
 8009598:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00e      	beq.n	80095c0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 fdca 	bl	800b13c <DMA_CheckFifoParam>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d008      	beq.n	80095c0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2240      	movs	r2, #64	@ 0x40
 80095b2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e192      	b.n	80098e6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f001 fd05 	bl	800afd8 <DMA_CalcBaseAndBitshift>
 80095ce:	4603      	mov	r3, r0
 80095d0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095d6:	f003 031f 	and.w	r3, r3, #31
 80095da:	223f      	movs	r2, #63	@ 0x3f
 80095dc:	409a      	lsls	r2, r3
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	609a      	str	r2, [r3, #8]
 80095e2:	e0c8      	b.n	8009776 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a38      	ldr	r2, [pc, #224]	@ (80096cc <HAL_DMA_Init+0x424>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d022      	beq.n	8009634 <HAL_DMA_Init+0x38c>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a37      	ldr	r2, [pc, #220]	@ (80096d0 <HAL_DMA_Init+0x428>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d01d      	beq.n	8009634 <HAL_DMA_Init+0x38c>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a35      	ldr	r2, [pc, #212]	@ (80096d4 <HAL_DMA_Init+0x42c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d018      	beq.n	8009634 <HAL_DMA_Init+0x38c>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a34      	ldr	r2, [pc, #208]	@ (80096d8 <HAL_DMA_Init+0x430>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d013      	beq.n	8009634 <HAL_DMA_Init+0x38c>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a32      	ldr	r2, [pc, #200]	@ (80096dc <HAL_DMA_Init+0x434>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d00e      	beq.n	8009634 <HAL_DMA_Init+0x38c>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a31      	ldr	r2, [pc, #196]	@ (80096e0 <HAL_DMA_Init+0x438>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d009      	beq.n	8009634 <HAL_DMA_Init+0x38c>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a2f      	ldr	r2, [pc, #188]	@ (80096e4 <HAL_DMA_Init+0x43c>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d004      	beq.n	8009634 <HAL_DMA_Init+0x38c>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a2e      	ldr	r2, [pc, #184]	@ (80096e8 <HAL_DMA_Init+0x440>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d101      	bne.n	8009638 <HAL_DMA_Init+0x390>
 8009634:	2301      	movs	r3, #1
 8009636:	e000      	b.n	800963a <HAL_DMA_Init+0x392>
 8009638:	2300      	movs	r3, #0
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 8092 	beq.w	8009764 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a21      	ldr	r2, [pc, #132]	@ (80096cc <HAL_DMA_Init+0x424>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d021      	beq.n	800968e <HAL_DMA_Init+0x3e6>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a20      	ldr	r2, [pc, #128]	@ (80096d0 <HAL_DMA_Init+0x428>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d01c      	beq.n	800968e <HAL_DMA_Init+0x3e6>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a1e      	ldr	r2, [pc, #120]	@ (80096d4 <HAL_DMA_Init+0x42c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d017      	beq.n	800968e <HAL_DMA_Init+0x3e6>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a1d      	ldr	r2, [pc, #116]	@ (80096d8 <HAL_DMA_Init+0x430>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d012      	beq.n	800968e <HAL_DMA_Init+0x3e6>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a1b      	ldr	r2, [pc, #108]	@ (80096dc <HAL_DMA_Init+0x434>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00d      	beq.n	800968e <HAL_DMA_Init+0x3e6>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a1a      	ldr	r2, [pc, #104]	@ (80096e0 <HAL_DMA_Init+0x438>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d008      	beq.n	800968e <HAL_DMA_Init+0x3e6>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a18      	ldr	r2, [pc, #96]	@ (80096e4 <HAL_DMA_Init+0x43c>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d003      	beq.n	800968e <HAL_DMA_Init+0x3e6>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a17      	ldr	r2, [pc, #92]	@ (80096e8 <HAL_DMA_Init+0x440>)
 800968c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2202      	movs	r2, #2
 8009692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	4b10      	ldr	r3, [pc, #64]	@ (80096ec <HAL_DMA_Init+0x444>)
 80096aa:	4013      	ands	r3, r2
 80096ac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	2b40      	cmp	r3, #64	@ 0x40
 80096b4:	d01c      	beq.n	80096f0 <HAL_DMA_Init+0x448>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	2b80      	cmp	r3, #128	@ 0x80
 80096bc:	d102      	bne.n	80096c4 <HAL_DMA_Init+0x41c>
 80096be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80096c2:	e016      	b.n	80096f2 <HAL_DMA_Init+0x44a>
 80096c4:	2300      	movs	r3, #0
 80096c6:	e014      	b.n	80096f2 <HAL_DMA_Init+0x44a>
 80096c8:	fe10803f 	.word	0xfe10803f
 80096cc:	58025408 	.word	0x58025408
 80096d0:	5802541c 	.word	0x5802541c
 80096d4:	58025430 	.word	0x58025430
 80096d8:	58025444 	.word	0x58025444
 80096dc:	58025458 	.word	0x58025458
 80096e0:	5802546c 	.word	0x5802546c
 80096e4:	58025480 	.word	0x58025480
 80096e8:	58025494 	.word	0x58025494
 80096ec:	fffe000f 	.word	0xfffe000f
 80096f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	68d2      	ldr	r2, [r2, #12]
 80096f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80096f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009700:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009708:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009710:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009718:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009720:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	4313      	orrs	r3, r2
 8009726:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	461a      	mov	r2, r3
 8009736:	4b6e      	ldr	r3, [pc, #440]	@ (80098f0 <HAL_DMA_Init+0x648>)
 8009738:	4413      	add	r3, r2
 800973a:	4a6e      	ldr	r2, [pc, #440]	@ (80098f4 <HAL_DMA_Init+0x64c>)
 800973c:	fba2 2303 	umull	r2, r3, r2, r3
 8009740:	091b      	lsrs	r3, r3, #4
 8009742:	009a      	lsls	r2, r3, #2
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 fc45 	bl	800afd8 <DMA_CalcBaseAndBitshift>
 800974e:	4603      	mov	r3, r0
 8009750:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009756:	f003 031f 	and.w	r3, r3, #31
 800975a:	2201      	movs	r2, #1
 800975c:	409a      	lsls	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	605a      	str	r2, [r3, #4]
 8009762:	e008      	b.n	8009776 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2240      	movs	r2, #64	@ 0x40
 8009768:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2203      	movs	r2, #3
 800976e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e0b7      	b.n	80098e6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a5f      	ldr	r2, [pc, #380]	@ (80098f8 <HAL_DMA_Init+0x650>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d072      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a5d      	ldr	r2, [pc, #372]	@ (80098fc <HAL_DMA_Init+0x654>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d06d      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a5c      	ldr	r2, [pc, #368]	@ (8009900 <HAL_DMA_Init+0x658>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d068      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a5a      	ldr	r2, [pc, #360]	@ (8009904 <HAL_DMA_Init+0x65c>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d063      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a59      	ldr	r2, [pc, #356]	@ (8009908 <HAL_DMA_Init+0x660>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d05e      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a57      	ldr	r2, [pc, #348]	@ (800990c <HAL_DMA_Init+0x664>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d059      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a56      	ldr	r2, [pc, #344]	@ (8009910 <HAL_DMA_Init+0x668>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d054      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a54      	ldr	r2, [pc, #336]	@ (8009914 <HAL_DMA_Init+0x66c>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d04f      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a53      	ldr	r2, [pc, #332]	@ (8009918 <HAL_DMA_Init+0x670>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d04a      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a51      	ldr	r2, [pc, #324]	@ (800991c <HAL_DMA_Init+0x674>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d045      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a50      	ldr	r2, [pc, #320]	@ (8009920 <HAL_DMA_Init+0x678>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d040      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a4e      	ldr	r2, [pc, #312]	@ (8009924 <HAL_DMA_Init+0x67c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d03b      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a4d      	ldr	r2, [pc, #308]	@ (8009928 <HAL_DMA_Init+0x680>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d036      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a4b      	ldr	r2, [pc, #300]	@ (800992c <HAL_DMA_Init+0x684>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d031      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a4a      	ldr	r2, [pc, #296]	@ (8009930 <HAL_DMA_Init+0x688>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d02c      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a48      	ldr	r2, [pc, #288]	@ (8009934 <HAL_DMA_Init+0x68c>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d027      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a47      	ldr	r2, [pc, #284]	@ (8009938 <HAL_DMA_Init+0x690>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d022      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a45      	ldr	r2, [pc, #276]	@ (800993c <HAL_DMA_Init+0x694>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d01d      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a44      	ldr	r2, [pc, #272]	@ (8009940 <HAL_DMA_Init+0x698>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d018      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a42      	ldr	r2, [pc, #264]	@ (8009944 <HAL_DMA_Init+0x69c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d013      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a41      	ldr	r2, [pc, #260]	@ (8009948 <HAL_DMA_Init+0x6a0>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d00e      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a3f      	ldr	r2, [pc, #252]	@ (800994c <HAL_DMA_Init+0x6a4>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d009      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a3e      	ldr	r2, [pc, #248]	@ (8009950 <HAL_DMA_Init+0x6a8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d004      	beq.n	8009866 <HAL_DMA_Init+0x5be>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a3c      	ldr	r2, [pc, #240]	@ (8009954 <HAL_DMA_Init+0x6ac>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d101      	bne.n	800986a <HAL_DMA_Init+0x5c2>
 8009866:	2301      	movs	r3, #1
 8009868:	e000      	b.n	800986c <HAL_DMA_Init+0x5c4>
 800986a:	2300      	movs	r3, #0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d032      	beq.n	80098d6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 fcdf 	bl	800b234 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	2b80      	cmp	r3, #128	@ 0x80
 800987c:	d102      	bne.n	8009884 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800988c:	b2d2      	uxtb	r2, r2
 800988e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009898:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d010      	beq.n	80098c4 <HAL_DMA_Init+0x61c>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2b08      	cmp	r3, #8
 80098a8:	d80c      	bhi.n	80098c4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 fd5c 	bl	800b368 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80098c0:	605a      	str	r2, [r3, #4]
 80098c2:	e008      	b.n	80098d6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	a7fdabf8 	.word	0xa7fdabf8
 80098f4:	cccccccd 	.word	0xcccccccd
 80098f8:	40020010 	.word	0x40020010
 80098fc:	40020028 	.word	0x40020028
 8009900:	40020040 	.word	0x40020040
 8009904:	40020058 	.word	0x40020058
 8009908:	40020070 	.word	0x40020070
 800990c:	40020088 	.word	0x40020088
 8009910:	400200a0 	.word	0x400200a0
 8009914:	400200b8 	.word	0x400200b8
 8009918:	40020410 	.word	0x40020410
 800991c:	40020428 	.word	0x40020428
 8009920:	40020440 	.word	0x40020440
 8009924:	40020458 	.word	0x40020458
 8009928:	40020470 	.word	0x40020470
 800992c:	40020488 	.word	0x40020488
 8009930:	400204a0 	.word	0x400204a0
 8009934:	400204b8 	.word	0x400204b8
 8009938:	58025408 	.word	0x58025408
 800993c:	5802541c 	.word	0x5802541c
 8009940:	58025430 	.word	0x58025430
 8009944:	58025444 	.word	0x58025444
 8009948:	58025458 	.word	0x58025458
 800994c:	5802546c 	.word	0x5802546c
 8009950:	58025480 	.word	0x58025480
 8009954:	58025494 	.word	0x58025494

08009958 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	e226      	b.n	8009dc2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800997a:	2b01      	cmp	r3, #1
 800997c:	d101      	bne.n	8009982 <HAL_DMA_Start_IT+0x2a>
 800997e:	2302      	movs	r3, #2
 8009980:	e21f      	b.n	8009dc2 <HAL_DMA_Start_IT+0x46a>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009990:	b2db      	uxtb	r3, r3
 8009992:	2b01      	cmp	r3, #1
 8009994:	f040 820a 	bne.w	8009dac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a68      	ldr	r2, [pc, #416]	@ (8009b4c <HAL_DMA_Start_IT+0x1f4>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d04a      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a66      	ldr	r2, [pc, #408]	@ (8009b50 <HAL_DMA_Start_IT+0x1f8>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d045      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a65      	ldr	r2, [pc, #404]	@ (8009b54 <HAL_DMA_Start_IT+0x1fc>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d040      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a63      	ldr	r2, [pc, #396]	@ (8009b58 <HAL_DMA_Start_IT+0x200>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d03b      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a62      	ldr	r2, [pc, #392]	@ (8009b5c <HAL_DMA_Start_IT+0x204>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d036      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a60      	ldr	r2, [pc, #384]	@ (8009b60 <HAL_DMA_Start_IT+0x208>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d031      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a5f      	ldr	r2, [pc, #380]	@ (8009b64 <HAL_DMA_Start_IT+0x20c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d02c      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a5d      	ldr	r2, [pc, #372]	@ (8009b68 <HAL_DMA_Start_IT+0x210>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d027      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a5c      	ldr	r2, [pc, #368]	@ (8009b6c <HAL_DMA_Start_IT+0x214>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d022      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a5a      	ldr	r2, [pc, #360]	@ (8009b70 <HAL_DMA_Start_IT+0x218>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d01d      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a59      	ldr	r2, [pc, #356]	@ (8009b74 <HAL_DMA_Start_IT+0x21c>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d018      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a57      	ldr	r2, [pc, #348]	@ (8009b78 <HAL_DMA_Start_IT+0x220>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d013      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a56      	ldr	r2, [pc, #344]	@ (8009b7c <HAL_DMA_Start_IT+0x224>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d00e      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a54      	ldr	r2, [pc, #336]	@ (8009b80 <HAL_DMA_Start_IT+0x228>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d009      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a53      	ldr	r2, [pc, #332]	@ (8009b84 <HAL_DMA_Start_IT+0x22c>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d004      	beq.n	8009a46 <HAL_DMA_Start_IT+0xee>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a51      	ldr	r2, [pc, #324]	@ (8009b88 <HAL_DMA_Start_IT+0x230>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d108      	bne.n	8009a58 <HAL_DMA_Start_IT+0x100>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0201 	bic.w	r2, r2, #1
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	e007      	b.n	8009a68 <HAL_DMA_Start_IT+0x110>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f022 0201 	bic.w	r2, r2, #1
 8009a66:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	68b9      	ldr	r1, [r7, #8]
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f001 f906 	bl	800ac80 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a34      	ldr	r2, [pc, #208]	@ (8009b4c <HAL_DMA_Start_IT+0x1f4>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d04a      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a33      	ldr	r2, [pc, #204]	@ (8009b50 <HAL_DMA_Start_IT+0x1f8>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d045      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a31      	ldr	r2, [pc, #196]	@ (8009b54 <HAL_DMA_Start_IT+0x1fc>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d040      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a30      	ldr	r2, [pc, #192]	@ (8009b58 <HAL_DMA_Start_IT+0x200>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d03b      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a2e      	ldr	r2, [pc, #184]	@ (8009b5c <HAL_DMA_Start_IT+0x204>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d036      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a2d      	ldr	r2, [pc, #180]	@ (8009b60 <HAL_DMA_Start_IT+0x208>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d031      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8009b64 <HAL_DMA_Start_IT+0x20c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d02c      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a2a      	ldr	r2, [pc, #168]	@ (8009b68 <HAL_DMA_Start_IT+0x210>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d027      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a28      	ldr	r2, [pc, #160]	@ (8009b6c <HAL_DMA_Start_IT+0x214>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d022      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a27      	ldr	r2, [pc, #156]	@ (8009b70 <HAL_DMA_Start_IT+0x218>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d01d      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a25      	ldr	r2, [pc, #148]	@ (8009b74 <HAL_DMA_Start_IT+0x21c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d018      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a24      	ldr	r2, [pc, #144]	@ (8009b78 <HAL_DMA_Start_IT+0x220>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d013      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a22      	ldr	r2, [pc, #136]	@ (8009b7c <HAL_DMA_Start_IT+0x224>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d00e      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a21      	ldr	r2, [pc, #132]	@ (8009b80 <HAL_DMA_Start_IT+0x228>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d009      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a1f      	ldr	r2, [pc, #124]	@ (8009b84 <HAL_DMA_Start_IT+0x22c>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d004      	beq.n	8009b14 <HAL_DMA_Start_IT+0x1bc>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8009b88 <HAL_DMA_Start_IT+0x230>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d101      	bne.n	8009b18 <HAL_DMA_Start_IT+0x1c0>
 8009b14:	2301      	movs	r3, #1
 8009b16:	e000      	b.n	8009b1a <HAL_DMA_Start_IT+0x1c2>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d036      	beq.n	8009b8c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f023 021e 	bic.w	r2, r3, #30
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f042 0216 	orr.w	r2, r2, #22
 8009b30:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d03e      	beq.n	8009bb8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f042 0208 	orr.w	r2, r2, #8
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	e035      	b.n	8009bb8 <HAL_DMA_Start_IT+0x260>
 8009b4c:	40020010 	.word	0x40020010
 8009b50:	40020028 	.word	0x40020028
 8009b54:	40020040 	.word	0x40020040
 8009b58:	40020058 	.word	0x40020058
 8009b5c:	40020070 	.word	0x40020070
 8009b60:	40020088 	.word	0x40020088
 8009b64:	400200a0 	.word	0x400200a0
 8009b68:	400200b8 	.word	0x400200b8
 8009b6c:	40020410 	.word	0x40020410
 8009b70:	40020428 	.word	0x40020428
 8009b74:	40020440 	.word	0x40020440
 8009b78:	40020458 	.word	0x40020458
 8009b7c:	40020470 	.word	0x40020470
 8009b80:	40020488 	.word	0x40020488
 8009b84:	400204a0 	.word	0x400204a0
 8009b88:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f023 020e 	bic.w	r2, r3, #14
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f042 020a 	orr.w	r2, r2, #10
 8009b9e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d007      	beq.n	8009bb8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0204 	orr.w	r2, r2, #4
 8009bb6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a83      	ldr	r2, [pc, #524]	@ (8009dcc <HAL_DMA_Start_IT+0x474>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d072      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a82      	ldr	r2, [pc, #520]	@ (8009dd0 <HAL_DMA_Start_IT+0x478>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d06d      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a80      	ldr	r2, [pc, #512]	@ (8009dd4 <HAL_DMA_Start_IT+0x47c>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d068      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a7f      	ldr	r2, [pc, #508]	@ (8009dd8 <HAL_DMA_Start_IT+0x480>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d063      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a7d      	ldr	r2, [pc, #500]	@ (8009ddc <HAL_DMA_Start_IT+0x484>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d05e      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a7c      	ldr	r2, [pc, #496]	@ (8009de0 <HAL_DMA_Start_IT+0x488>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d059      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a7a      	ldr	r2, [pc, #488]	@ (8009de4 <HAL_DMA_Start_IT+0x48c>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d054      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a79      	ldr	r2, [pc, #484]	@ (8009de8 <HAL_DMA_Start_IT+0x490>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d04f      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a77      	ldr	r2, [pc, #476]	@ (8009dec <HAL_DMA_Start_IT+0x494>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d04a      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a76      	ldr	r2, [pc, #472]	@ (8009df0 <HAL_DMA_Start_IT+0x498>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d045      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a74      	ldr	r2, [pc, #464]	@ (8009df4 <HAL_DMA_Start_IT+0x49c>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d040      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a73      	ldr	r2, [pc, #460]	@ (8009df8 <HAL_DMA_Start_IT+0x4a0>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d03b      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a71      	ldr	r2, [pc, #452]	@ (8009dfc <HAL_DMA_Start_IT+0x4a4>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d036      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a70      	ldr	r2, [pc, #448]	@ (8009e00 <HAL_DMA_Start_IT+0x4a8>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d031      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a6e      	ldr	r2, [pc, #440]	@ (8009e04 <HAL_DMA_Start_IT+0x4ac>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d02c      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a6d      	ldr	r2, [pc, #436]	@ (8009e08 <HAL_DMA_Start_IT+0x4b0>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d027      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a6b      	ldr	r2, [pc, #428]	@ (8009e0c <HAL_DMA_Start_IT+0x4b4>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d022      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a6a      	ldr	r2, [pc, #424]	@ (8009e10 <HAL_DMA_Start_IT+0x4b8>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d01d      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a68      	ldr	r2, [pc, #416]	@ (8009e14 <HAL_DMA_Start_IT+0x4bc>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d018      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a67      	ldr	r2, [pc, #412]	@ (8009e18 <HAL_DMA_Start_IT+0x4c0>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d013      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a65      	ldr	r2, [pc, #404]	@ (8009e1c <HAL_DMA_Start_IT+0x4c4>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d00e      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a64      	ldr	r2, [pc, #400]	@ (8009e20 <HAL_DMA_Start_IT+0x4c8>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d009      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a62      	ldr	r2, [pc, #392]	@ (8009e24 <HAL_DMA_Start_IT+0x4cc>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d004      	beq.n	8009ca8 <HAL_DMA_Start_IT+0x350>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a61      	ldr	r2, [pc, #388]	@ (8009e28 <HAL_DMA_Start_IT+0x4d0>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d101      	bne.n	8009cac <HAL_DMA_Start_IT+0x354>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e000      	b.n	8009cae <HAL_DMA_Start_IT+0x356>
 8009cac:	2300      	movs	r3, #0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d01a      	beq.n	8009ce8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d007      	beq.n	8009cd0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009cce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d007      	beq.n	8009ce8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ce2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ce6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a37      	ldr	r2, [pc, #220]	@ (8009dcc <HAL_DMA_Start_IT+0x474>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d04a      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a36      	ldr	r2, [pc, #216]	@ (8009dd0 <HAL_DMA_Start_IT+0x478>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d045      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a34      	ldr	r2, [pc, #208]	@ (8009dd4 <HAL_DMA_Start_IT+0x47c>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d040      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a33      	ldr	r2, [pc, #204]	@ (8009dd8 <HAL_DMA_Start_IT+0x480>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d03b      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a31      	ldr	r2, [pc, #196]	@ (8009ddc <HAL_DMA_Start_IT+0x484>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d036      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a30      	ldr	r2, [pc, #192]	@ (8009de0 <HAL_DMA_Start_IT+0x488>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d031      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a2e      	ldr	r2, [pc, #184]	@ (8009de4 <HAL_DMA_Start_IT+0x48c>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d02c      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a2d      	ldr	r2, [pc, #180]	@ (8009de8 <HAL_DMA_Start_IT+0x490>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d027      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8009dec <HAL_DMA_Start_IT+0x494>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d022      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a2a      	ldr	r2, [pc, #168]	@ (8009df0 <HAL_DMA_Start_IT+0x498>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d01d      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a28      	ldr	r2, [pc, #160]	@ (8009df4 <HAL_DMA_Start_IT+0x49c>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d018      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a27      	ldr	r2, [pc, #156]	@ (8009df8 <HAL_DMA_Start_IT+0x4a0>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d013      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a25      	ldr	r2, [pc, #148]	@ (8009dfc <HAL_DMA_Start_IT+0x4a4>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d00e      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a24      	ldr	r2, [pc, #144]	@ (8009e00 <HAL_DMA_Start_IT+0x4a8>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d009      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a22      	ldr	r2, [pc, #136]	@ (8009e04 <HAL_DMA_Start_IT+0x4ac>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d004      	beq.n	8009d88 <HAL_DMA_Start_IT+0x430>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a21      	ldr	r2, [pc, #132]	@ (8009e08 <HAL_DMA_Start_IT+0x4b0>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d108      	bne.n	8009d9a <HAL_DMA_Start_IT+0x442>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f042 0201 	orr.w	r2, r2, #1
 8009d96:	601a      	str	r2, [r3, #0]
 8009d98:	e012      	b.n	8009dc0 <HAL_DMA_Start_IT+0x468>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f042 0201 	orr.w	r2, r2, #1
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	e009      	b.n	8009dc0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009db2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3718      	adds	r7, #24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	40020010 	.word	0x40020010
 8009dd0:	40020028 	.word	0x40020028
 8009dd4:	40020040 	.word	0x40020040
 8009dd8:	40020058 	.word	0x40020058
 8009ddc:	40020070 	.word	0x40020070
 8009de0:	40020088 	.word	0x40020088
 8009de4:	400200a0 	.word	0x400200a0
 8009de8:	400200b8 	.word	0x400200b8
 8009dec:	40020410 	.word	0x40020410
 8009df0:	40020428 	.word	0x40020428
 8009df4:	40020440 	.word	0x40020440
 8009df8:	40020458 	.word	0x40020458
 8009dfc:	40020470 	.word	0x40020470
 8009e00:	40020488 	.word	0x40020488
 8009e04:	400204a0 	.word	0x400204a0
 8009e08:	400204b8 	.word	0x400204b8
 8009e0c:	58025408 	.word	0x58025408
 8009e10:	5802541c 	.word	0x5802541c
 8009e14:	58025430 	.word	0x58025430
 8009e18:	58025444 	.word	0x58025444
 8009e1c:	58025458 	.word	0x58025458
 8009e20:	5802546c 	.word	0x5802546c
 8009e24:	58025480 	.word	0x58025480
 8009e28:	58025494 	.word	0x58025494

08009e2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b08a      	sub	sp, #40	@ 0x28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009e34:	2300      	movs	r3, #0
 8009e36:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009e38:	4b67      	ldr	r3, [pc, #412]	@ (8009fd8 <HAL_DMA_IRQHandler+0x1ac>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a67      	ldr	r2, [pc, #412]	@ (8009fdc <HAL_DMA_IRQHandler+0x1b0>)
 8009e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e42:	0a9b      	lsrs	r3, r3, #10
 8009e44:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e4a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e50:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a5f      	ldr	r2, [pc, #380]	@ (8009fe0 <HAL_DMA_IRQHandler+0x1b4>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d04a      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a5d      	ldr	r2, [pc, #372]	@ (8009fe4 <HAL_DMA_IRQHandler+0x1b8>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d045      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a5c      	ldr	r2, [pc, #368]	@ (8009fe8 <HAL_DMA_IRQHandler+0x1bc>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d040      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a5a      	ldr	r2, [pc, #360]	@ (8009fec <HAL_DMA_IRQHandler+0x1c0>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d03b      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a59      	ldr	r2, [pc, #356]	@ (8009ff0 <HAL_DMA_IRQHandler+0x1c4>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d036      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a57      	ldr	r2, [pc, #348]	@ (8009ff4 <HAL_DMA_IRQHandler+0x1c8>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d031      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a56      	ldr	r2, [pc, #344]	@ (8009ff8 <HAL_DMA_IRQHandler+0x1cc>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d02c      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a54      	ldr	r2, [pc, #336]	@ (8009ffc <HAL_DMA_IRQHandler+0x1d0>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d027      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a53      	ldr	r2, [pc, #332]	@ (800a000 <HAL_DMA_IRQHandler+0x1d4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d022      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a51      	ldr	r2, [pc, #324]	@ (800a004 <HAL_DMA_IRQHandler+0x1d8>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d01d      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a50      	ldr	r2, [pc, #320]	@ (800a008 <HAL_DMA_IRQHandler+0x1dc>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d018      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a4e      	ldr	r2, [pc, #312]	@ (800a00c <HAL_DMA_IRQHandler+0x1e0>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d013      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a4d      	ldr	r2, [pc, #308]	@ (800a010 <HAL_DMA_IRQHandler+0x1e4>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d00e      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a4b      	ldr	r2, [pc, #300]	@ (800a014 <HAL_DMA_IRQHandler+0x1e8>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d009      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a4a      	ldr	r2, [pc, #296]	@ (800a018 <HAL_DMA_IRQHandler+0x1ec>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d004      	beq.n	8009efe <HAL_DMA_IRQHandler+0xd2>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a48      	ldr	r2, [pc, #288]	@ (800a01c <HAL_DMA_IRQHandler+0x1f0>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d101      	bne.n	8009f02 <HAL_DMA_IRQHandler+0xd6>
 8009efe:	2301      	movs	r3, #1
 8009f00:	e000      	b.n	8009f04 <HAL_DMA_IRQHandler+0xd8>
 8009f02:	2300      	movs	r3, #0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 842b 	beq.w	800a760 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f0e:	f003 031f 	and.w	r3, r3, #31
 8009f12:	2208      	movs	r2, #8
 8009f14:	409a      	lsls	r2, r3
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	4013      	ands	r3, r2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 80a2 	beq.w	800a064 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a2e      	ldr	r2, [pc, #184]	@ (8009fe0 <HAL_DMA_IRQHandler+0x1b4>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d04a      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8009fe4 <HAL_DMA_IRQHandler+0x1b8>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d045      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a2b      	ldr	r2, [pc, #172]	@ (8009fe8 <HAL_DMA_IRQHandler+0x1bc>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d040      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a2a      	ldr	r2, [pc, #168]	@ (8009fec <HAL_DMA_IRQHandler+0x1c0>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d03b      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a28      	ldr	r2, [pc, #160]	@ (8009ff0 <HAL_DMA_IRQHandler+0x1c4>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d036      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a27      	ldr	r2, [pc, #156]	@ (8009ff4 <HAL_DMA_IRQHandler+0x1c8>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d031      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a25      	ldr	r2, [pc, #148]	@ (8009ff8 <HAL_DMA_IRQHandler+0x1cc>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d02c      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a24      	ldr	r2, [pc, #144]	@ (8009ffc <HAL_DMA_IRQHandler+0x1d0>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d027      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a22      	ldr	r2, [pc, #136]	@ (800a000 <HAL_DMA_IRQHandler+0x1d4>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d022      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a21      	ldr	r2, [pc, #132]	@ (800a004 <HAL_DMA_IRQHandler+0x1d8>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d01d      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a1f      	ldr	r2, [pc, #124]	@ (800a008 <HAL_DMA_IRQHandler+0x1dc>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d018      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a1e      	ldr	r2, [pc, #120]	@ (800a00c <HAL_DMA_IRQHandler+0x1e0>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d013      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a1c      	ldr	r2, [pc, #112]	@ (800a010 <HAL_DMA_IRQHandler+0x1e4>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d00e      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a1b      	ldr	r2, [pc, #108]	@ (800a014 <HAL_DMA_IRQHandler+0x1e8>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d009      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a19      	ldr	r2, [pc, #100]	@ (800a018 <HAL_DMA_IRQHandler+0x1ec>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d004      	beq.n	8009fc0 <HAL_DMA_IRQHandler+0x194>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a18      	ldr	r2, [pc, #96]	@ (800a01c <HAL_DMA_IRQHandler+0x1f0>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d12f      	bne.n	800a020 <HAL_DMA_IRQHandler+0x1f4>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 0304 	and.w	r3, r3, #4
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	bf14      	ite	ne
 8009fce:	2301      	movne	r3, #1
 8009fd0:	2300      	moveq	r3, #0
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	e02e      	b.n	800a034 <HAL_DMA_IRQHandler+0x208>
 8009fd6:	bf00      	nop
 8009fd8:	24000000 	.word	0x24000000
 8009fdc:	1b4e81b5 	.word	0x1b4e81b5
 8009fe0:	40020010 	.word	0x40020010
 8009fe4:	40020028 	.word	0x40020028
 8009fe8:	40020040 	.word	0x40020040
 8009fec:	40020058 	.word	0x40020058
 8009ff0:	40020070 	.word	0x40020070
 8009ff4:	40020088 	.word	0x40020088
 8009ff8:	400200a0 	.word	0x400200a0
 8009ffc:	400200b8 	.word	0x400200b8
 800a000:	40020410 	.word	0x40020410
 800a004:	40020428 	.word	0x40020428
 800a008:	40020440 	.word	0x40020440
 800a00c:	40020458 	.word	0x40020458
 800a010:	40020470 	.word	0x40020470
 800a014:	40020488 	.word	0x40020488
 800a018:	400204a0 	.word	0x400204a0
 800a01c:	400204b8 	.word	0x400204b8
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 0308 	and.w	r3, r3, #8
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	bf14      	ite	ne
 800a02e:	2301      	movne	r3, #1
 800a030:	2300      	moveq	r3, #0
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2b00      	cmp	r3, #0
 800a036:	d015      	beq.n	800a064 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 0204 	bic.w	r2, r2, #4
 800a046:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a04c:	f003 031f 	and.w	r3, r3, #31
 800a050:	2208      	movs	r2, #8
 800a052:	409a      	lsls	r2, r3
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a05c:	f043 0201 	orr.w	r2, r3, #1
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a068:	f003 031f 	and.w	r3, r3, #31
 800a06c:	69ba      	ldr	r2, [r7, #24]
 800a06e:	fa22 f303 	lsr.w	r3, r2, r3
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d06e      	beq.n	800a158 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a69      	ldr	r2, [pc, #420]	@ (800a224 <HAL_DMA_IRQHandler+0x3f8>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d04a      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a67      	ldr	r2, [pc, #412]	@ (800a228 <HAL_DMA_IRQHandler+0x3fc>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d045      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a66      	ldr	r2, [pc, #408]	@ (800a22c <HAL_DMA_IRQHandler+0x400>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d040      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a64      	ldr	r2, [pc, #400]	@ (800a230 <HAL_DMA_IRQHandler+0x404>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d03b      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a63      	ldr	r2, [pc, #396]	@ (800a234 <HAL_DMA_IRQHandler+0x408>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d036      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a61      	ldr	r2, [pc, #388]	@ (800a238 <HAL_DMA_IRQHandler+0x40c>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d031      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a60      	ldr	r2, [pc, #384]	@ (800a23c <HAL_DMA_IRQHandler+0x410>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d02c      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a5e      	ldr	r2, [pc, #376]	@ (800a240 <HAL_DMA_IRQHandler+0x414>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d027      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a5d      	ldr	r2, [pc, #372]	@ (800a244 <HAL_DMA_IRQHandler+0x418>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d022      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a5b      	ldr	r2, [pc, #364]	@ (800a248 <HAL_DMA_IRQHandler+0x41c>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d01d      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a5a      	ldr	r2, [pc, #360]	@ (800a24c <HAL_DMA_IRQHandler+0x420>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d018      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a58      	ldr	r2, [pc, #352]	@ (800a250 <HAL_DMA_IRQHandler+0x424>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d013      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a57      	ldr	r2, [pc, #348]	@ (800a254 <HAL_DMA_IRQHandler+0x428>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d00e      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a55      	ldr	r2, [pc, #340]	@ (800a258 <HAL_DMA_IRQHandler+0x42c>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d009      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a54      	ldr	r2, [pc, #336]	@ (800a25c <HAL_DMA_IRQHandler+0x430>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d004      	beq.n	800a11a <HAL_DMA_IRQHandler+0x2ee>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a52      	ldr	r2, [pc, #328]	@ (800a260 <HAL_DMA_IRQHandler+0x434>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d10a      	bne.n	800a130 <HAL_DMA_IRQHandler+0x304>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a124:	2b00      	cmp	r3, #0
 800a126:	bf14      	ite	ne
 800a128:	2301      	movne	r3, #1
 800a12a:	2300      	moveq	r3, #0
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	e003      	b.n	800a138 <HAL_DMA_IRQHandler+0x30c>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2300      	movs	r3, #0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00d      	beq.n	800a158 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a140:	f003 031f 	and.w	r3, r3, #31
 800a144:	2201      	movs	r2, #1
 800a146:	409a      	lsls	r2, r3
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a150:	f043 0202 	orr.w	r2, r3, #2
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a15c:	f003 031f 	and.w	r3, r3, #31
 800a160:	2204      	movs	r2, #4
 800a162:	409a      	lsls	r2, r3
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	4013      	ands	r3, r2
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 808f 	beq.w	800a28c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a2c      	ldr	r2, [pc, #176]	@ (800a224 <HAL_DMA_IRQHandler+0x3f8>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d04a      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a2a      	ldr	r2, [pc, #168]	@ (800a228 <HAL_DMA_IRQHandler+0x3fc>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d045      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a29      	ldr	r2, [pc, #164]	@ (800a22c <HAL_DMA_IRQHandler+0x400>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d040      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a27      	ldr	r2, [pc, #156]	@ (800a230 <HAL_DMA_IRQHandler+0x404>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d03b      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a26      	ldr	r2, [pc, #152]	@ (800a234 <HAL_DMA_IRQHandler+0x408>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d036      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a24      	ldr	r2, [pc, #144]	@ (800a238 <HAL_DMA_IRQHandler+0x40c>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d031      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a23      	ldr	r2, [pc, #140]	@ (800a23c <HAL_DMA_IRQHandler+0x410>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d02c      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a21      	ldr	r2, [pc, #132]	@ (800a240 <HAL_DMA_IRQHandler+0x414>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d027      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a20      	ldr	r2, [pc, #128]	@ (800a244 <HAL_DMA_IRQHandler+0x418>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d022      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a1e      	ldr	r2, [pc, #120]	@ (800a248 <HAL_DMA_IRQHandler+0x41c>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d01d      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a1d      	ldr	r2, [pc, #116]	@ (800a24c <HAL_DMA_IRQHandler+0x420>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d018      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a250 <HAL_DMA_IRQHandler+0x424>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d013      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a1a      	ldr	r2, [pc, #104]	@ (800a254 <HAL_DMA_IRQHandler+0x428>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d00e      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a18      	ldr	r2, [pc, #96]	@ (800a258 <HAL_DMA_IRQHandler+0x42c>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d009      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a17      	ldr	r2, [pc, #92]	@ (800a25c <HAL_DMA_IRQHandler+0x430>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d004      	beq.n	800a20e <HAL_DMA_IRQHandler+0x3e2>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a15      	ldr	r2, [pc, #84]	@ (800a260 <HAL_DMA_IRQHandler+0x434>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d12a      	bne.n	800a264 <HAL_DMA_IRQHandler+0x438>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bf14      	ite	ne
 800a21c:	2301      	movne	r3, #1
 800a21e:	2300      	moveq	r3, #0
 800a220:	b2db      	uxtb	r3, r3
 800a222:	e023      	b.n	800a26c <HAL_DMA_IRQHandler+0x440>
 800a224:	40020010 	.word	0x40020010
 800a228:	40020028 	.word	0x40020028
 800a22c:	40020040 	.word	0x40020040
 800a230:	40020058 	.word	0x40020058
 800a234:	40020070 	.word	0x40020070
 800a238:	40020088 	.word	0x40020088
 800a23c:	400200a0 	.word	0x400200a0
 800a240:	400200b8 	.word	0x400200b8
 800a244:	40020410 	.word	0x40020410
 800a248:	40020428 	.word	0x40020428
 800a24c:	40020440 	.word	0x40020440
 800a250:	40020458 	.word	0x40020458
 800a254:	40020470 	.word	0x40020470
 800a258:	40020488 	.word	0x40020488
 800a25c:	400204a0 	.word	0x400204a0
 800a260:	400204b8 	.word	0x400204b8
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2300      	movs	r3, #0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00d      	beq.n	800a28c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a274:	f003 031f 	and.w	r3, r3, #31
 800a278:	2204      	movs	r2, #4
 800a27a:	409a      	lsls	r2, r3
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a284:	f043 0204 	orr.w	r2, r3, #4
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a290:	f003 031f 	and.w	r3, r3, #31
 800a294:	2210      	movs	r2, #16
 800a296:	409a      	lsls	r2, r3
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	4013      	ands	r3, r2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 80a6 	beq.w	800a3ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a85      	ldr	r2, [pc, #532]	@ (800a4bc <HAL_DMA_IRQHandler+0x690>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d04a      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a83      	ldr	r2, [pc, #524]	@ (800a4c0 <HAL_DMA_IRQHandler+0x694>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d045      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a82      	ldr	r2, [pc, #520]	@ (800a4c4 <HAL_DMA_IRQHandler+0x698>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d040      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a80      	ldr	r2, [pc, #512]	@ (800a4c8 <HAL_DMA_IRQHandler+0x69c>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d03b      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a7f      	ldr	r2, [pc, #508]	@ (800a4cc <HAL_DMA_IRQHandler+0x6a0>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d036      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a7d      	ldr	r2, [pc, #500]	@ (800a4d0 <HAL_DMA_IRQHandler+0x6a4>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d031      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a7c      	ldr	r2, [pc, #496]	@ (800a4d4 <HAL_DMA_IRQHandler+0x6a8>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d02c      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a7a      	ldr	r2, [pc, #488]	@ (800a4d8 <HAL_DMA_IRQHandler+0x6ac>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d027      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a79      	ldr	r2, [pc, #484]	@ (800a4dc <HAL_DMA_IRQHandler+0x6b0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d022      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a77      	ldr	r2, [pc, #476]	@ (800a4e0 <HAL_DMA_IRQHandler+0x6b4>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d01d      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a76      	ldr	r2, [pc, #472]	@ (800a4e4 <HAL_DMA_IRQHandler+0x6b8>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d018      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a74      	ldr	r2, [pc, #464]	@ (800a4e8 <HAL_DMA_IRQHandler+0x6bc>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d013      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a73      	ldr	r2, [pc, #460]	@ (800a4ec <HAL_DMA_IRQHandler+0x6c0>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d00e      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a71      	ldr	r2, [pc, #452]	@ (800a4f0 <HAL_DMA_IRQHandler+0x6c4>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d009      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a70      	ldr	r2, [pc, #448]	@ (800a4f4 <HAL_DMA_IRQHandler+0x6c8>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d004      	beq.n	800a342 <HAL_DMA_IRQHandler+0x516>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a6e      	ldr	r2, [pc, #440]	@ (800a4f8 <HAL_DMA_IRQHandler+0x6cc>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d10a      	bne.n	800a358 <HAL_DMA_IRQHandler+0x52c>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0308 	and.w	r3, r3, #8
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bf14      	ite	ne
 800a350:	2301      	movne	r3, #1
 800a352:	2300      	moveq	r3, #0
 800a354:	b2db      	uxtb	r3, r3
 800a356:	e009      	b.n	800a36c <HAL_DMA_IRQHandler+0x540>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 0304 	and.w	r3, r3, #4
 800a362:	2b00      	cmp	r3, #0
 800a364:	bf14      	ite	ne
 800a366:	2301      	movne	r3, #1
 800a368:	2300      	moveq	r3, #0
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d03e      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a374:	f003 031f 	and.w	r3, r3, #31
 800a378:	2210      	movs	r2, #16
 800a37a:	409a      	lsls	r2, r3
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d018      	beq.n	800a3c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d108      	bne.n	800a3ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d024      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
 800a3ac:	e01f      	b.n	800a3ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d01b      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	4798      	blx	r3
 800a3be:	e016      	b.n	800a3ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d107      	bne.n	800a3de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f022 0208 	bic.w	r2, r2, #8
 800a3dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d003      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3f2:	f003 031f 	and.w	r3, r3, #31
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	409a      	lsls	r2, r3
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 8110 	beq.w	800a624 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a2c      	ldr	r2, [pc, #176]	@ (800a4bc <HAL_DMA_IRQHandler+0x690>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d04a      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a2b      	ldr	r2, [pc, #172]	@ (800a4c0 <HAL_DMA_IRQHandler+0x694>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d045      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a29      	ldr	r2, [pc, #164]	@ (800a4c4 <HAL_DMA_IRQHandler+0x698>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d040      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a28      	ldr	r2, [pc, #160]	@ (800a4c8 <HAL_DMA_IRQHandler+0x69c>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d03b      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a26      	ldr	r2, [pc, #152]	@ (800a4cc <HAL_DMA_IRQHandler+0x6a0>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d036      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a25      	ldr	r2, [pc, #148]	@ (800a4d0 <HAL_DMA_IRQHandler+0x6a4>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d031      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a23      	ldr	r2, [pc, #140]	@ (800a4d4 <HAL_DMA_IRQHandler+0x6a8>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d02c      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a22      	ldr	r2, [pc, #136]	@ (800a4d8 <HAL_DMA_IRQHandler+0x6ac>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d027      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a20      	ldr	r2, [pc, #128]	@ (800a4dc <HAL_DMA_IRQHandler+0x6b0>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d022      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a1f      	ldr	r2, [pc, #124]	@ (800a4e0 <HAL_DMA_IRQHandler+0x6b4>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d01d      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a1d      	ldr	r2, [pc, #116]	@ (800a4e4 <HAL_DMA_IRQHandler+0x6b8>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d018      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a1c      	ldr	r2, [pc, #112]	@ (800a4e8 <HAL_DMA_IRQHandler+0x6bc>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d013      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a1a      	ldr	r2, [pc, #104]	@ (800a4ec <HAL_DMA_IRQHandler+0x6c0>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d00e      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a19      	ldr	r2, [pc, #100]	@ (800a4f0 <HAL_DMA_IRQHandler+0x6c4>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d009      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a17      	ldr	r2, [pc, #92]	@ (800a4f4 <HAL_DMA_IRQHandler+0x6c8>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d004      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x678>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a16      	ldr	r2, [pc, #88]	@ (800a4f8 <HAL_DMA_IRQHandler+0x6cc>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d12b      	bne.n	800a4fc <HAL_DMA_IRQHandler+0x6d0>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f003 0310 	and.w	r3, r3, #16
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	bf14      	ite	ne
 800a4b2:	2301      	movne	r3, #1
 800a4b4:	2300      	moveq	r3, #0
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	e02a      	b.n	800a510 <HAL_DMA_IRQHandler+0x6e4>
 800a4ba:	bf00      	nop
 800a4bc:	40020010 	.word	0x40020010
 800a4c0:	40020028 	.word	0x40020028
 800a4c4:	40020040 	.word	0x40020040
 800a4c8:	40020058 	.word	0x40020058
 800a4cc:	40020070 	.word	0x40020070
 800a4d0:	40020088 	.word	0x40020088
 800a4d4:	400200a0 	.word	0x400200a0
 800a4d8:	400200b8 	.word	0x400200b8
 800a4dc:	40020410 	.word	0x40020410
 800a4e0:	40020428 	.word	0x40020428
 800a4e4:	40020440 	.word	0x40020440
 800a4e8:	40020458 	.word	0x40020458
 800a4ec:	40020470 	.word	0x40020470
 800a4f0:	40020488 	.word	0x40020488
 800a4f4:	400204a0 	.word	0x400204a0
 800a4f8:	400204b8 	.word	0x400204b8
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 0302 	and.w	r3, r3, #2
 800a506:	2b00      	cmp	r3, #0
 800a508:	bf14      	ite	ne
 800a50a:	2301      	movne	r3, #1
 800a50c:	2300      	moveq	r3, #0
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 8087 	beq.w	800a624 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a51a:	f003 031f 	and.w	r3, r3, #31
 800a51e:	2220      	movs	r2, #32
 800a520:	409a      	lsls	r2, r3
 800a522:	6a3b      	ldr	r3, [r7, #32]
 800a524:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b04      	cmp	r3, #4
 800a530:	d139      	bne.n	800a5a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f022 0216 	bic.w	r2, r2, #22
 800a540:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	695a      	ldr	r2, [r3, #20]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a550:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a556:	2b00      	cmp	r3, #0
 800a558:	d103      	bne.n	800a562 <HAL_DMA_IRQHandler+0x736>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d007      	beq.n	800a572 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 0208 	bic.w	r2, r2, #8
 800a570:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a576:	f003 031f 	and.w	r3, r3, #31
 800a57a:	223f      	movs	r2, #63	@ 0x3f
 800a57c:	409a      	lsls	r2, r3
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a596:	2b00      	cmp	r3, #0
 800a598:	f000 834a 	beq.w	800ac30 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	4798      	blx	r3
          }
          return;
 800a5a4:	e344      	b.n	800ac30 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d018      	beq.n	800a5e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d108      	bne.n	800a5d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d02c      	beq.n	800a624 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	4798      	blx	r3
 800a5d2:	e027      	b.n	800a624 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d023      	beq.n	800a624 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	4798      	blx	r3
 800a5e4:	e01e      	b.n	800a624 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10f      	bne.n	800a614 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f022 0210 	bic.w	r2, r2, #16
 800a602:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d003      	beq.n	800a624 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 8306 	beq.w	800ac3a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 8088 	beq.w	800a74c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2204      	movs	r2, #4
 800a640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a7a      	ldr	r2, [pc, #488]	@ (800a834 <HAL_DMA_IRQHandler+0xa08>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d04a      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a79      	ldr	r2, [pc, #484]	@ (800a838 <HAL_DMA_IRQHandler+0xa0c>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d045      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a77      	ldr	r2, [pc, #476]	@ (800a83c <HAL_DMA_IRQHandler+0xa10>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d040      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a76      	ldr	r2, [pc, #472]	@ (800a840 <HAL_DMA_IRQHandler+0xa14>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d03b      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a74      	ldr	r2, [pc, #464]	@ (800a844 <HAL_DMA_IRQHandler+0xa18>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d036      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a73      	ldr	r2, [pc, #460]	@ (800a848 <HAL_DMA_IRQHandler+0xa1c>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d031      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a71      	ldr	r2, [pc, #452]	@ (800a84c <HAL_DMA_IRQHandler+0xa20>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d02c      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a70      	ldr	r2, [pc, #448]	@ (800a850 <HAL_DMA_IRQHandler+0xa24>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d027      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a6e      	ldr	r2, [pc, #440]	@ (800a854 <HAL_DMA_IRQHandler+0xa28>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d022      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a6d      	ldr	r2, [pc, #436]	@ (800a858 <HAL_DMA_IRQHandler+0xa2c>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d01d      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a6b      	ldr	r2, [pc, #428]	@ (800a85c <HAL_DMA_IRQHandler+0xa30>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d018      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a6a      	ldr	r2, [pc, #424]	@ (800a860 <HAL_DMA_IRQHandler+0xa34>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d013      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a68      	ldr	r2, [pc, #416]	@ (800a864 <HAL_DMA_IRQHandler+0xa38>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d00e      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a67      	ldr	r2, [pc, #412]	@ (800a868 <HAL_DMA_IRQHandler+0xa3c>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d009      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a65      	ldr	r2, [pc, #404]	@ (800a86c <HAL_DMA_IRQHandler+0xa40>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d004      	beq.n	800a6e4 <HAL_DMA_IRQHandler+0x8b8>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a64      	ldr	r2, [pc, #400]	@ (800a870 <HAL_DMA_IRQHandler+0xa44>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d108      	bne.n	800a6f6 <HAL_DMA_IRQHandler+0x8ca>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f022 0201 	bic.w	r2, r2, #1
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	e007      	b.n	800a706 <HAL_DMA_IRQHandler+0x8da>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 0201 	bic.w	r2, r2, #1
 800a704:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3301      	adds	r3, #1
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a70e:	429a      	cmp	r2, r3
 800a710:	d307      	bcc.n	800a722 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 0301 	and.w	r3, r3, #1
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1f2      	bne.n	800a706 <HAL_DMA_IRQHandler+0x8da>
 800a720:	e000      	b.n	800a724 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a722:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0301 	and.w	r3, r3, #1
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d004      	beq.n	800a73c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2203      	movs	r2, #3
 800a736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a73a:	e003      	b.n	800a744 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 8272 	beq.w	800ac3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	4798      	blx	r3
 800a75e:	e26c      	b.n	800ac3a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a43      	ldr	r2, [pc, #268]	@ (800a874 <HAL_DMA_IRQHandler+0xa48>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d022      	beq.n	800a7b0 <HAL_DMA_IRQHandler+0x984>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a42      	ldr	r2, [pc, #264]	@ (800a878 <HAL_DMA_IRQHandler+0xa4c>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d01d      	beq.n	800a7b0 <HAL_DMA_IRQHandler+0x984>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a40      	ldr	r2, [pc, #256]	@ (800a87c <HAL_DMA_IRQHandler+0xa50>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d018      	beq.n	800a7b0 <HAL_DMA_IRQHandler+0x984>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a3f      	ldr	r2, [pc, #252]	@ (800a880 <HAL_DMA_IRQHandler+0xa54>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d013      	beq.n	800a7b0 <HAL_DMA_IRQHandler+0x984>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a3d      	ldr	r2, [pc, #244]	@ (800a884 <HAL_DMA_IRQHandler+0xa58>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d00e      	beq.n	800a7b0 <HAL_DMA_IRQHandler+0x984>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a3c      	ldr	r2, [pc, #240]	@ (800a888 <HAL_DMA_IRQHandler+0xa5c>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d009      	beq.n	800a7b0 <HAL_DMA_IRQHandler+0x984>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a3a      	ldr	r2, [pc, #232]	@ (800a88c <HAL_DMA_IRQHandler+0xa60>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d004      	beq.n	800a7b0 <HAL_DMA_IRQHandler+0x984>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a39      	ldr	r2, [pc, #228]	@ (800a890 <HAL_DMA_IRQHandler+0xa64>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d101      	bne.n	800a7b4 <HAL_DMA_IRQHandler+0x988>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e000      	b.n	800a7b6 <HAL_DMA_IRQHandler+0x98a>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 823f 	beq.w	800ac3a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7c8:	f003 031f 	and.w	r3, r3, #31
 800a7cc:	2204      	movs	r2, #4
 800a7ce:	409a      	lsls	r2, r3
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 80cd 	beq.w	800a974 <HAL_DMA_IRQHandler+0xb48>
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	f003 0304 	and.w	r3, r3, #4
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 80c7 	beq.w	800a974 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7ea:	f003 031f 	and.w	r3, r3, #31
 800a7ee:	2204      	movs	r2, #4
 800a7f0:	409a      	lsls	r2, r3
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d049      	beq.n	800a894 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a806:	2b00      	cmp	r3, #0
 800a808:	d109      	bne.n	800a81e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 8210 	beq.w	800ac34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a81c:	e20a      	b.n	800ac34 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a822:	2b00      	cmp	r3, #0
 800a824:	f000 8206 	beq.w	800ac34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a830:	e200      	b.n	800ac34 <HAL_DMA_IRQHandler+0xe08>
 800a832:	bf00      	nop
 800a834:	40020010 	.word	0x40020010
 800a838:	40020028 	.word	0x40020028
 800a83c:	40020040 	.word	0x40020040
 800a840:	40020058 	.word	0x40020058
 800a844:	40020070 	.word	0x40020070
 800a848:	40020088 	.word	0x40020088
 800a84c:	400200a0 	.word	0x400200a0
 800a850:	400200b8 	.word	0x400200b8
 800a854:	40020410 	.word	0x40020410
 800a858:	40020428 	.word	0x40020428
 800a85c:	40020440 	.word	0x40020440
 800a860:	40020458 	.word	0x40020458
 800a864:	40020470 	.word	0x40020470
 800a868:	40020488 	.word	0x40020488
 800a86c:	400204a0 	.word	0x400204a0
 800a870:	400204b8 	.word	0x400204b8
 800a874:	58025408 	.word	0x58025408
 800a878:	5802541c 	.word	0x5802541c
 800a87c:	58025430 	.word	0x58025430
 800a880:	58025444 	.word	0x58025444
 800a884:	58025458 	.word	0x58025458
 800a888:	5802546c 	.word	0x5802546c
 800a88c:	58025480 	.word	0x58025480
 800a890:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	f003 0320 	and.w	r3, r3, #32
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d160      	bne.n	800a960 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a7f      	ldr	r2, [pc, #508]	@ (800aaa0 <HAL_DMA_IRQHandler+0xc74>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d04a      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a7d      	ldr	r2, [pc, #500]	@ (800aaa4 <HAL_DMA_IRQHandler+0xc78>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d045      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a7c      	ldr	r2, [pc, #496]	@ (800aaa8 <HAL_DMA_IRQHandler+0xc7c>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d040      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a7a      	ldr	r2, [pc, #488]	@ (800aaac <HAL_DMA_IRQHandler+0xc80>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d03b      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a79      	ldr	r2, [pc, #484]	@ (800aab0 <HAL_DMA_IRQHandler+0xc84>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d036      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a77      	ldr	r2, [pc, #476]	@ (800aab4 <HAL_DMA_IRQHandler+0xc88>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d031      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a76      	ldr	r2, [pc, #472]	@ (800aab8 <HAL_DMA_IRQHandler+0xc8c>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d02c      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a74      	ldr	r2, [pc, #464]	@ (800aabc <HAL_DMA_IRQHandler+0xc90>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d027      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a73      	ldr	r2, [pc, #460]	@ (800aac0 <HAL_DMA_IRQHandler+0xc94>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d022      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a71      	ldr	r2, [pc, #452]	@ (800aac4 <HAL_DMA_IRQHandler+0xc98>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d01d      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a70      	ldr	r2, [pc, #448]	@ (800aac8 <HAL_DMA_IRQHandler+0xc9c>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d018      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a6e      	ldr	r2, [pc, #440]	@ (800aacc <HAL_DMA_IRQHandler+0xca0>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d013      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a6d      	ldr	r2, [pc, #436]	@ (800aad0 <HAL_DMA_IRQHandler+0xca4>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d00e      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a6b      	ldr	r2, [pc, #428]	@ (800aad4 <HAL_DMA_IRQHandler+0xca8>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d009      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a6a      	ldr	r2, [pc, #424]	@ (800aad8 <HAL_DMA_IRQHandler+0xcac>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d004      	beq.n	800a93e <HAL_DMA_IRQHandler+0xb12>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a68      	ldr	r2, [pc, #416]	@ (800aadc <HAL_DMA_IRQHandler+0xcb0>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d108      	bne.n	800a950 <HAL_DMA_IRQHandler+0xb24>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f022 0208 	bic.w	r2, r2, #8
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	e007      	b.n	800a960 <HAL_DMA_IRQHandler+0xb34>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f022 0204 	bic.w	r2, r2, #4
 800a95e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 8165 	beq.w	800ac34 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a972:	e15f      	b.n	800ac34 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a978:	f003 031f 	and.w	r3, r3, #31
 800a97c:	2202      	movs	r2, #2
 800a97e:	409a      	lsls	r2, r3
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	4013      	ands	r3, r2
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 80c5 	beq.w	800ab14 <HAL_DMA_IRQHandler+0xce8>
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	f003 0302 	and.w	r3, r3, #2
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 80bf 	beq.w	800ab14 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a99a:	f003 031f 	and.w	r3, r3, #31
 800a99e:	2202      	movs	r2, #2
 800a9a0:	409a      	lsls	r2, r3
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d018      	beq.n	800a9e2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d109      	bne.n	800a9ce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 813a 	beq.w	800ac38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9cc:	e134      	b.n	800ac38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f000 8130 	beq.w	800ac38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9e0:	e12a      	b.n	800ac38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	f003 0320 	and.w	r3, r3, #32
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f040 8089 	bne.w	800ab00 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a2b      	ldr	r2, [pc, #172]	@ (800aaa0 <HAL_DMA_IRQHandler+0xc74>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d04a      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a29      	ldr	r2, [pc, #164]	@ (800aaa4 <HAL_DMA_IRQHandler+0xc78>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d045      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a28      	ldr	r2, [pc, #160]	@ (800aaa8 <HAL_DMA_IRQHandler+0xc7c>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d040      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a26      	ldr	r2, [pc, #152]	@ (800aaac <HAL_DMA_IRQHandler+0xc80>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d03b      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a25      	ldr	r2, [pc, #148]	@ (800aab0 <HAL_DMA_IRQHandler+0xc84>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d036      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a23      	ldr	r2, [pc, #140]	@ (800aab4 <HAL_DMA_IRQHandler+0xc88>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d031      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a22      	ldr	r2, [pc, #136]	@ (800aab8 <HAL_DMA_IRQHandler+0xc8c>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d02c      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a20      	ldr	r2, [pc, #128]	@ (800aabc <HAL_DMA_IRQHandler+0xc90>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d027      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a1f      	ldr	r2, [pc, #124]	@ (800aac0 <HAL_DMA_IRQHandler+0xc94>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d022      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a1d      	ldr	r2, [pc, #116]	@ (800aac4 <HAL_DMA_IRQHandler+0xc98>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d01d      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a1c      	ldr	r2, [pc, #112]	@ (800aac8 <HAL_DMA_IRQHandler+0xc9c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d018      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a1a      	ldr	r2, [pc, #104]	@ (800aacc <HAL_DMA_IRQHandler+0xca0>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d013      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a19      	ldr	r2, [pc, #100]	@ (800aad0 <HAL_DMA_IRQHandler+0xca4>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d00e      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a17      	ldr	r2, [pc, #92]	@ (800aad4 <HAL_DMA_IRQHandler+0xca8>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d009      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a16      	ldr	r2, [pc, #88]	@ (800aad8 <HAL_DMA_IRQHandler+0xcac>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d004      	beq.n	800aa8e <HAL_DMA_IRQHandler+0xc62>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a14      	ldr	r2, [pc, #80]	@ (800aadc <HAL_DMA_IRQHandler+0xcb0>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d128      	bne.n	800aae0 <HAL_DMA_IRQHandler+0xcb4>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f022 0214 	bic.w	r2, r2, #20
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	e027      	b.n	800aaf0 <HAL_DMA_IRQHandler+0xcc4>
 800aaa0:	40020010 	.word	0x40020010
 800aaa4:	40020028 	.word	0x40020028
 800aaa8:	40020040 	.word	0x40020040
 800aaac:	40020058 	.word	0x40020058
 800aab0:	40020070 	.word	0x40020070
 800aab4:	40020088 	.word	0x40020088
 800aab8:	400200a0 	.word	0x400200a0
 800aabc:	400200b8 	.word	0x400200b8
 800aac0:	40020410 	.word	0x40020410
 800aac4:	40020428 	.word	0x40020428
 800aac8:	40020440 	.word	0x40020440
 800aacc:	40020458 	.word	0x40020458
 800aad0:	40020470 	.word	0x40020470
 800aad4:	40020488 	.word	0x40020488
 800aad8:	400204a0 	.word	0x400204a0
 800aadc:	400204b8 	.word	0x400204b8
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f022 020a 	bic.w	r2, r2, #10
 800aaee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 8097 	beq.w	800ac38 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab12:	e091      	b.n	800ac38 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab18:	f003 031f 	and.w	r3, r3, #31
 800ab1c:	2208      	movs	r2, #8
 800ab1e:	409a      	lsls	r2, r3
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	4013      	ands	r3, r2
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 8088 	beq.w	800ac3a <HAL_DMA_IRQHandler+0xe0e>
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	f003 0308 	and.w	r3, r3, #8
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 8082 	beq.w	800ac3a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a41      	ldr	r2, [pc, #260]	@ (800ac40 <HAL_DMA_IRQHandler+0xe14>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d04a      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a3f      	ldr	r2, [pc, #252]	@ (800ac44 <HAL_DMA_IRQHandler+0xe18>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d045      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a3e      	ldr	r2, [pc, #248]	@ (800ac48 <HAL_DMA_IRQHandler+0xe1c>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d040      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a3c      	ldr	r2, [pc, #240]	@ (800ac4c <HAL_DMA_IRQHandler+0xe20>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d03b      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a3b      	ldr	r2, [pc, #236]	@ (800ac50 <HAL_DMA_IRQHandler+0xe24>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d036      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a39      	ldr	r2, [pc, #228]	@ (800ac54 <HAL_DMA_IRQHandler+0xe28>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d031      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a38      	ldr	r2, [pc, #224]	@ (800ac58 <HAL_DMA_IRQHandler+0xe2c>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d02c      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a36      	ldr	r2, [pc, #216]	@ (800ac5c <HAL_DMA_IRQHandler+0xe30>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d027      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a35      	ldr	r2, [pc, #212]	@ (800ac60 <HAL_DMA_IRQHandler+0xe34>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d022      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a33      	ldr	r2, [pc, #204]	@ (800ac64 <HAL_DMA_IRQHandler+0xe38>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d01d      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a32      	ldr	r2, [pc, #200]	@ (800ac68 <HAL_DMA_IRQHandler+0xe3c>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d018      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a30      	ldr	r2, [pc, #192]	@ (800ac6c <HAL_DMA_IRQHandler+0xe40>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d013      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a2f      	ldr	r2, [pc, #188]	@ (800ac70 <HAL_DMA_IRQHandler+0xe44>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d00e      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a2d      	ldr	r2, [pc, #180]	@ (800ac74 <HAL_DMA_IRQHandler+0xe48>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d009      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a2c      	ldr	r2, [pc, #176]	@ (800ac78 <HAL_DMA_IRQHandler+0xe4c>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d004      	beq.n	800abd6 <HAL_DMA_IRQHandler+0xdaa>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a2a      	ldr	r2, [pc, #168]	@ (800ac7c <HAL_DMA_IRQHandler+0xe50>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d108      	bne.n	800abe8 <HAL_DMA_IRQHandler+0xdbc>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f022 021c 	bic.w	r2, r2, #28
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	e007      	b.n	800abf8 <HAL_DMA_IRQHandler+0xdcc>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f022 020e 	bic.w	r2, r2, #14
 800abf6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abfc:	f003 031f 	and.w	r3, r3, #31
 800ac00:	2201      	movs	r2, #1
 800ac02:	409a      	lsls	r2, r3
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d009      	beq.n	800ac3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	4798      	blx	r3
 800ac2e:	e004      	b.n	800ac3a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800ac30:	bf00      	nop
 800ac32:	e002      	b.n	800ac3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ac34:	bf00      	nop
 800ac36:	e000      	b.n	800ac3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ac38:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ac3a:	3728      	adds	r7, #40	@ 0x28
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	40020010 	.word	0x40020010
 800ac44:	40020028 	.word	0x40020028
 800ac48:	40020040 	.word	0x40020040
 800ac4c:	40020058 	.word	0x40020058
 800ac50:	40020070 	.word	0x40020070
 800ac54:	40020088 	.word	0x40020088
 800ac58:	400200a0 	.word	0x400200a0
 800ac5c:	400200b8 	.word	0x400200b8
 800ac60:	40020410 	.word	0x40020410
 800ac64:	40020428 	.word	0x40020428
 800ac68:	40020440 	.word	0x40020440
 800ac6c:	40020458 	.word	0x40020458
 800ac70:	40020470 	.word	0x40020470
 800ac74:	40020488 	.word	0x40020488
 800ac78:	400204a0 	.word	0x400204a0
 800ac7c:	400204b8 	.word	0x400204b8

0800ac80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
 800ac8c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac92:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac98:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a7f      	ldr	r2, [pc, #508]	@ (800ae9c <DMA_SetConfig+0x21c>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d072      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a7d      	ldr	r2, [pc, #500]	@ (800aea0 <DMA_SetConfig+0x220>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d06d      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a7c      	ldr	r2, [pc, #496]	@ (800aea4 <DMA_SetConfig+0x224>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d068      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a7a      	ldr	r2, [pc, #488]	@ (800aea8 <DMA_SetConfig+0x228>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d063      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a79      	ldr	r2, [pc, #484]	@ (800aeac <DMA_SetConfig+0x22c>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d05e      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a77      	ldr	r2, [pc, #476]	@ (800aeb0 <DMA_SetConfig+0x230>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d059      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a76      	ldr	r2, [pc, #472]	@ (800aeb4 <DMA_SetConfig+0x234>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d054      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a74      	ldr	r2, [pc, #464]	@ (800aeb8 <DMA_SetConfig+0x238>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d04f      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a73      	ldr	r2, [pc, #460]	@ (800aebc <DMA_SetConfig+0x23c>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d04a      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a71      	ldr	r2, [pc, #452]	@ (800aec0 <DMA_SetConfig+0x240>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d045      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a70      	ldr	r2, [pc, #448]	@ (800aec4 <DMA_SetConfig+0x244>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d040      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a6e      	ldr	r2, [pc, #440]	@ (800aec8 <DMA_SetConfig+0x248>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d03b      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a6d      	ldr	r2, [pc, #436]	@ (800aecc <DMA_SetConfig+0x24c>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d036      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a6b      	ldr	r2, [pc, #428]	@ (800aed0 <DMA_SetConfig+0x250>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d031      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a6a      	ldr	r2, [pc, #424]	@ (800aed4 <DMA_SetConfig+0x254>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d02c      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a68      	ldr	r2, [pc, #416]	@ (800aed8 <DMA_SetConfig+0x258>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d027      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a67      	ldr	r2, [pc, #412]	@ (800aedc <DMA_SetConfig+0x25c>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d022      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a65      	ldr	r2, [pc, #404]	@ (800aee0 <DMA_SetConfig+0x260>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d01d      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a64      	ldr	r2, [pc, #400]	@ (800aee4 <DMA_SetConfig+0x264>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d018      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a62      	ldr	r2, [pc, #392]	@ (800aee8 <DMA_SetConfig+0x268>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d013      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a61      	ldr	r2, [pc, #388]	@ (800aeec <DMA_SetConfig+0x26c>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d00e      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a5f      	ldr	r2, [pc, #380]	@ (800aef0 <DMA_SetConfig+0x270>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d009      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a5e      	ldr	r2, [pc, #376]	@ (800aef4 <DMA_SetConfig+0x274>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d004      	beq.n	800ad8a <DMA_SetConfig+0x10a>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a5c      	ldr	r2, [pc, #368]	@ (800aef8 <DMA_SetConfig+0x278>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d101      	bne.n	800ad8e <DMA_SetConfig+0x10e>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e000      	b.n	800ad90 <DMA_SetConfig+0x110>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00d      	beq.n	800adb0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ad9c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d004      	beq.n	800adb0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800adae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a39      	ldr	r2, [pc, #228]	@ (800ae9c <DMA_SetConfig+0x21c>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d04a      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a38      	ldr	r2, [pc, #224]	@ (800aea0 <DMA_SetConfig+0x220>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d045      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a36      	ldr	r2, [pc, #216]	@ (800aea4 <DMA_SetConfig+0x224>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d040      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a35      	ldr	r2, [pc, #212]	@ (800aea8 <DMA_SetConfig+0x228>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d03b      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a33      	ldr	r2, [pc, #204]	@ (800aeac <DMA_SetConfig+0x22c>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d036      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a32      	ldr	r2, [pc, #200]	@ (800aeb0 <DMA_SetConfig+0x230>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d031      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a30      	ldr	r2, [pc, #192]	@ (800aeb4 <DMA_SetConfig+0x234>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d02c      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a2f      	ldr	r2, [pc, #188]	@ (800aeb8 <DMA_SetConfig+0x238>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d027      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a2d      	ldr	r2, [pc, #180]	@ (800aebc <DMA_SetConfig+0x23c>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d022      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a2c      	ldr	r2, [pc, #176]	@ (800aec0 <DMA_SetConfig+0x240>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d01d      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a2a      	ldr	r2, [pc, #168]	@ (800aec4 <DMA_SetConfig+0x244>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d018      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a29      	ldr	r2, [pc, #164]	@ (800aec8 <DMA_SetConfig+0x248>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d013      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a27      	ldr	r2, [pc, #156]	@ (800aecc <DMA_SetConfig+0x24c>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d00e      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a26      	ldr	r2, [pc, #152]	@ (800aed0 <DMA_SetConfig+0x250>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d009      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a24      	ldr	r2, [pc, #144]	@ (800aed4 <DMA_SetConfig+0x254>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d004      	beq.n	800ae50 <DMA_SetConfig+0x1d0>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a23      	ldr	r2, [pc, #140]	@ (800aed8 <DMA_SetConfig+0x258>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d101      	bne.n	800ae54 <DMA_SetConfig+0x1d4>
 800ae50:	2301      	movs	r3, #1
 800ae52:	e000      	b.n	800ae56 <DMA_SetConfig+0x1d6>
 800ae54:	2300      	movs	r3, #0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d059      	beq.n	800af0e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae5e:	f003 031f 	and.w	r3, r3, #31
 800ae62:	223f      	movs	r2, #63	@ 0x3f
 800ae64:	409a      	lsls	r2, r3
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ae78:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	2b40      	cmp	r3, #64	@ 0x40
 800ae88:	d138      	bne.n	800aefc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ae9a:	e086      	b.n	800afaa <DMA_SetConfig+0x32a>
 800ae9c:	40020010 	.word	0x40020010
 800aea0:	40020028 	.word	0x40020028
 800aea4:	40020040 	.word	0x40020040
 800aea8:	40020058 	.word	0x40020058
 800aeac:	40020070 	.word	0x40020070
 800aeb0:	40020088 	.word	0x40020088
 800aeb4:	400200a0 	.word	0x400200a0
 800aeb8:	400200b8 	.word	0x400200b8
 800aebc:	40020410 	.word	0x40020410
 800aec0:	40020428 	.word	0x40020428
 800aec4:	40020440 	.word	0x40020440
 800aec8:	40020458 	.word	0x40020458
 800aecc:	40020470 	.word	0x40020470
 800aed0:	40020488 	.word	0x40020488
 800aed4:	400204a0 	.word	0x400204a0
 800aed8:	400204b8 	.word	0x400204b8
 800aedc:	58025408 	.word	0x58025408
 800aee0:	5802541c 	.word	0x5802541c
 800aee4:	58025430 	.word	0x58025430
 800aee8:	58025444 	.word	0x58025444
 800aeec:	58025458 	.word	0x58025458
 800aef0:	5802546c 	.word	0x5802546c
 800aef4:	58025480 	.word	0x58025480
 800aef8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	60da      	str	r2, [r3, #12]
}
 800af0c:	e04d      	b.n	800afaa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a29      	ldr	r2, [pc, #164]	@ (800afb8 <DMA_SetConfig+0x338>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d022      	beq.n	800af5e <DMA_SetConfig+0x2de>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a27      	ldr	r2, [pc, #156]	@ (800afbc <DMA_SetConfig+0x33c>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d01d      	beq.n	800af5e <DMA_SetConfig+0x2de>
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a26      	ldr	r2, [pc, #152]	@ (800afc0 <DMA_SetConfig+0x340>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d018      	beq.n	800af5e <DMA_SetConfig+0x2de>
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a24      	ldr	r2, [pc, #144]	@ (800afc4 <DMA_SetConfig+0x344>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d013      	beq.n	800af5e <DMA_SetConfig+0x2de>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a23      	ldr	r2, [pc, #140]	@ (800afc8 <DMA_SetConfig+0x348>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d00e      	beq.n	800af5e <DMA_SetConfig+0x2de>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a21      	ldr	r2, [pc, #132]	@ (800afcc <DMA_SetConfig+0x34c>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d009      	beq.n	800af5e <DMA_SetConfig+0x2de>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a20      	ldr	r2, [pc, #128]	@ (800afd0 <DMA_SetConfig+0x350>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d004      	beq.n	800af5e <DMA_SetConfig+0x2de>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a1e      	ldr	r2, [pc, #120]	@ (800afd4 <DMA_SetConfig+0x354>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d101      	bne.n	800af62 <DMA_SetConfig+0x2e2>
 800af5e:	2301      	movs	r3, #1
 800af60:	e000      	b.n	800af64 <DMA_SetConfig+0x2e4>
 800af62:	2300      	movs	r3, #0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d020      	beq.n	800afaa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af6c:	f003 031f 	and.w	r3, r3, #31
 800af70:	2201      	movs	r2, #1
 800af72:	409a      	lsls	r2, r3
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	2b40      	cmp	r3, #64	@ 0x40
 800af86:	d108      	bne.n	800af9a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	60da      	str	r2, [r3, #12]
}
 800af98:	e007      	b.n	800afaa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	60da      	str	r2, [r3, #12]
}
 800afaa:	bf00      	nop
 800afac:	371c      	adds	r7, #28
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	58025408 	.word	0x58025408
 800afbc:	5802541c 	.word	0x5802541c
 800afc0:	58025430 	.word	0x58025430
 800afc4:	58025444 	.word	0x58025444
 800afc8:	58025458 	.word	0x58025458
 800afcc:	5802546c 	.word	0x5802546c
 800afd0:	58025480 	.word	0x58025480
 800afd4:	58025494 	.word	0x58025494

0800afd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a42      	ldr	r2, [pc, #264]	@ (800b0f0 <DMA_CalcBaseAndBitshift+0x118>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d04a      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a41      	ldr	r2, [pc, #260]	@ (800b0f4 <DMA_CalcBaseAndBitshift+0x11c>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d045      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a3f      	ldr	r2, [pc, #252]	@ (800b0f8 <DMA_CalcBaseAndBitshift+0x120>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d040      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a3e      	ldr	r2, [pc, #248]	@ (800b0fc <DMA_CalcBaseAndBitshift+0x124>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d03b      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a3c      	ldr	r2, [pc, #240]	@ (800b100 <DMA_CalcBaseAndBitshift+0x128>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d036      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a3b      	ldr	r2, [pc, #236]	@ (800b104 <DMA_CalcBaseAndBitshift+0x12c>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d031      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a39      	ldr	r2, [pc, #228]	@ (800b108 <DMA_CalcBaseAndBitshift+0x130>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d02c      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a38      	ldr	r2, [pc, #224]	@ (800b10c <DMA_CalcBaseAndBitshift+0x134>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d027      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a36      	ldr	r2, [pc, #216]	@ (800b110 <DMA_CalcBaseAndBitshift+0x138>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d022      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a35      	ldr	r2, [pc, #212]	@ (800b114 <DMA_CalcBaseAndBitshift+0x13c>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d01d      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a33      	ldr	r2, [pc, #204]	@ (800b118 <DMA_CalcBaseAndBitshift+0x140>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d018      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a32      	ldr	r2, [pc, #200]	@ (800b11c <DMA_CalcBaseAndBitshift+0x144>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d013      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a30      	ldr	r2, [pc, #192]	@ (800b120 <DMA_CalcBaseAndBitshift+0x148>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d00e      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a2f      	ldr	r2, [pc, #188]	@ (800b124 <DMA_CalcBaseAndBitshift+0x14c>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d009      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a2d      	ldr	r2, [pc, #180]	@ (800b128 <DMA_CalcBaseAndBitshift+0x150>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d004      	beq.n	800b080 <DMA_CalcBaseAndBitshift+0xa8>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a2c      	ldr	r2, [pc, #176]	@ (800b12c <DMA_CalcBaseAndBitshift+0x154>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d101      	bne.n	800b084 <DMA_CalcBaseAndBitshift+0xac>
 800b080:	2301      	movs	r3, #1
 800b082:	e000      	b.n	800b086 <DMA_CalcBaseAndBitshift+0xae>
 800b084:	2300      	movs	r3, #0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d024      	beq.n	800b0d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	3b10      	subs	r3, #16
 800b092:	4a27      	ldr	r2, [pc, #156]	@ (800b130 <DMA_CalcBaseAndBitshift+0x158>)
 800b094:	fba2 2303 	umull	r2, r3, r2, r3
 800b098:	091b      	lsrs	r3, r3, #4
 800b09a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f003 0307 	and.w	r3, r3, #7
 800b0a2:	4a24      	ldr	r2, [pc, #144]	@ (800b134 <DMA_CalcBaseAndBitshift+0x15c>)
 800b0a4:	5cd3      	ldrb	r3, [r2, r3]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	d908      	bls.n	800b0c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	4b1f      	ldr	r3, [pc, #124]	@ (800b138 <DMA_CalcBaseAndBitshift+0x160>)
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	1d1a      	adds	r2, r3, #4
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	659a      	str	r2, [r3, #88]	@ 0x58
 800b0c2:	e00d      	b.n	800b0e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b138 <DMA_CalcBaseAndBitshift+0x160>)
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	6593      	str	r3, [r2, #88]	@ 0x58
 800b0d2:	e005      	b.n	800b0e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	40020010 	.word	0x40020010
 800b0f4:	40020028 	.word	0x40020028
 800b0f8:	40020040 	.word	0x40020040
 800b0fc:	40020058 	.word	0x40020058
 800b100:	40020070 	.word	0x40020070
 800b104:	40020088 	.word	0x40020088
 800b108:	400200a0 	.word	0x400200a0
 800b10c:	400200b8 	.word	0x400200b8
 800b110:	40020410 	.word	0x40020410
 800b114:	40020428 	.word	0x40020428
 800b118:	40020440 	.word	0x40020440
 800b11c:	40020458 	.word	0x40020458
 800b120:	40020470 	.word	0x40020470
 800b124:	40020488 	.word	0x40020488
 800b128:	400204a0 	.word	0x400204a0
 800b12c:	400204b8 	.word	0x400204b8
 800b130:	aaaaaaab 	.word	0xaaaaaaab
 800b134:	0801de58 	.word	0x0801de58
 800b138:	fffffc00 	.word	0xfffffc00

0800b13c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	699b      	ldr	r3, [r3, #24]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d120      	bne.n	800b192 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b154:	2b03      	cmp	r3, #3
 800b156:	d858      	bhi.n	800b20a <DMA_CheckFifoParam+0xce>
 800b158:	a201      	add	r2, pc, #4	@ (adr r2, 800b160 <DMA_CheckFifoParam+0x24>)
 800b15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15e:	bf00      	nop
 800b160:	0800b171 	.word	0x0800b171
 800b164:	0800b183 	.word	0x0800b183
 800b168:	0800b171 	.word	0x0800b171
 800b16c:	0800b20b 	.word	0x0800b20b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b174:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d048      	beq.n	800b20e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b180:	e045      	b.n	800b20e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b186:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b18a:	d142      	bne.n	800b212 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b190:	e03f      	b.n	800b212 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b19a:	d123      	bne.n	800b1e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a0:	2b03      	cmp	r3, #3
 800b1a2:	d838      	bhi.n	800b216 <DMA_CheckFifoParam+0xda>
 800b1a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b1ac <DMA_CheckFifoParam+0x70>)
 800b1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1aa:	bf00      	nop
 800b1ac:	0800b1bd 	.word	0x0800b1bd
 800b1b0:	0800b1c3 	.word	0x0800b1c3
 800b1b4:	0800b1bd 	.word	0x0800b1bd
 800b1b8:	0800b1d5 	.word	0x0800b1d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	73fb      	strb	r3, [r7, #15]
        break;
 800b1c0:	e030      	b.n	800b224 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d025      	beq.n	800b21a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b1d2:	e022      	b.n	800b21a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b1dc:	d11f      	bne.n	800b21e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b1e2:	e01c      	b.n	800b21e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d902      	bls.n	800b1f2 <DMA_CheckFifoParam+0xb6>
 800b1ec:	2b03      	cmp	r3, #3
 800b1ee:	d003      	beq.n	800b1f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b1f0:	e018      	b.n	800b224 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	73fb      	strb	r3, [r7, #15]
        break;
 800b1f6:	e015      	b.n	800b224 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00e      	beq.n	800b222 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	73fb      	strb	r3, [r7, #15]
    break;
 800b208:	e00b      	b.n	800b222 <DMA_CheckFifoParam+0xe6>
        break;
 800b20a:	bf00      	nop
 800b20c:	e00a      	b.n	800b224 <DMA_CheckFifoParam+0xe8>
        break;
 800b20e:	bf00      	nop
 800b210:	e008      	b.n	800b224 <DMA_CheckFifoParam+0xe8>
        break;
 800b212:	bf00      	nop
 800b214:	e006      	b.n	800b224 <DMA_CheckFifoParam+0xe8>
        break;
 800b216:	bf00      	nop
 800b218:	e004      	b.n	800b224 <DMA_CheckFifoParam+0xe8>
        break;
 800b21a:	bf00      	nop
 800b21c:	e002      	b.n	800b224 <DMA_CheckFifoParam+0xe8>
        break;
 800b21e:	bf00      	nop
 800b220:	e000      	b.n	800b224 <DMA_CheckFifoParam+0xe8>
    break;
 800b222:	bf00      	nop
    }
  }

  return status;
 800b224:	7bfb      	ldrb	r3, [r7, #15]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop

0800b234 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a38      	ldr	r2, [pc, #224]	@ (800b328 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d022      	beq.n	800b292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a36      	ldr	r2, [pc, #216]	@ (800b32c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d01d      	beq.n	800b292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a35      	ldr	r2, [pc, #212]	@ (800b330 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d018      	beq.n	800b292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a33      	ldr	r2, [pc, #204]	@ (800b334 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d013      	beq.n	800b292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a32      	ldr	r2, [pc, #200]	@ (800b338 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d00e      	beq.n	800b292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a30      	ldr	r2, [pc, #192]	@ (800b33c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d009      	beq.n	800b292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a2f      	ldr	r2, [pc, #188]	@ (800b340 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d004      	beq.n	800b292 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a2d      	ldr	r2, [pc, #180]	@ (800b344 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d101      	bne.n	800b296 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b292:	2301      	movs	r3, #1
 800b294:	e000      	b.n	800b298 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b296:	2300      	movs	r3, #0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d01a      	beq.n	800b2d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	3b08      	subs	r3, #8
 800b2a4:	4a28      	ldr	r2, [pc, #160]	@ (800b348 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b2aa:	091b      	lsrs	r3, r3, #4
 800b2ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	4b26      	ldr	r3, [pc, #152]	@ (800b34c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b2b2:	4413      	add	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a24      	ldr	r2, [pc, #144]	@ (800b350 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b2c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f003 031f 	and.w	r3, r3, #31
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	409a      	lsls	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b2d0:	e024      	b.n	800b31c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	3b10      	subs	r3, #16
 800b2da:	4a1e      	ldr	r2, [pc, #120]	@ (800b354 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e0:	091b      	lsrs	r3, r3, #4
 800b2e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	4a1c      	ldr	r2, [pc, #112]	@ (800b358 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d806      	bhi.n	800b2fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	4a1b      	ldr	r2, [pc, #108]	@ (800b35c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d902      	bls.n	800b2fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	4b18      	ldr	r3, [pc, #96]	@ (800b360 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b2fe:	4413      	add	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	461a      	mov	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a16      	ldr	r2, [pc, #88]	@ (800b364 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b30c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f003 031f 	and.w	r3, r3, #31
 800b314:	2201      	movs	r2, #1
 800b316:	409a      	lsls	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b31c:	bf00      	nop
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	58025408 	.word	0x58025408
 800b32c:	5802541c 	.word	0x5802541c
 800b330:	58025430 	.word	0x58025430
 800b334:	58025444 	.word	0x58025444
 800b338:	58025458 	.word	0x58025458
 800b33c:	5802546c 	.word	0x5802546c
 800b340:	58025480 	.word	0x58025480
 800b344:	58025494 	.word	0x58025494
 800b348:	cccccccd 	.word	0xcccccccd
 800b34c:	16009600 	.word	0x16009600
 800b350:	58025880 	.word	0x58025880
 800b354:	aaaaaaab 	.word	0xaaaaaaab
 800b358:	400204b8 	.word	0x400204b8
 800b35c:	4002040f 	.word	0x4002040f
 800b360:	10008200 	.word	0x10008200
 800b364:	40020880 	.word	0x40020880

0800b368 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	b2db      	uxtb	r3, r3
 800b376:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d04a      	beq.n	800b414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b08      	cmp	r3, #8
 800b382:	d847      	bhi.n	800b414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a25      	ldr	r2, [pc, #148]	@ (800b420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d022      	beq.n	800b3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a24      	ldr	r2, [pc, #144]	@ (800b424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d01d      	beq.n	800b3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a22      	ldr	r2, [pc, #136]	@ (800b428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d018      	beq.n	800b3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a21      	ldr	r2, [pc, #132]	@ (800b42c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d013      	beq.n	800b3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a1f      	ldr	r2, [pc, #124]	@ (800b430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d00e      	beq.n	800b3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d009      	beq.n	800b3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a1c      	ldr	r2, [pc, #112]	@ (800b438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d004      	beq.n	800b3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a1b      	ldr	r2, [pc, #108]	@ (800b43c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d101      	bne.n	800b3d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e000      	b.n	800b3da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00a      	beq.n	800b3f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	4b17      	ldr	r3, [pc, #92]	@ (800b440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b3e2:	4413      	add	r3, r2
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a15      	ldr	r2, [pc, #84]	@ (800b444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b3f0:	671a      	str	r2, [r3, #112]	@ 0x70
 800b3f2:	e009      	b.n	800b408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	4b14      	ldr	r3, [pc, #80]	@ (800b448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b3f8:	4413      	add	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a11      	ldr	r2, [pc, #68]	@ (800b44c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b406:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	3b01      	subs	r3, #1
 800b40c:	2201      	movs	r2, #1
 800b40e:	409a      	lsls	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800b414:	bf00      	nop
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	58025408 	.word	0x58025408
 800b424:	5802541c 	.word	0x5802541c
 800b428:	58025430 	.word	0x58025430
 800b42c:	58025444 	.word	0x58025444
 800b430:	58025458 	.word	0x58025458
 800b434:	5802546c 	.word	0x5802546c
 800b438:	58025480 	.word	0x58025480
 800b43c:	58025494 	.word	0x58025494
 800b440:	1600963f 	.word	0x1600963f
 800b444:	58025940 	.word	0x58025940
 800b448:	1000823f 	.word	0x1000823f
 800b44c:	40020940 	.word	0x40020940

0800b450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b450:	b480      	push	{r7}
 800b452:	b089      	sub	sp, #36	@ 0x24
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b45a:	2300      	movs	r3, #0
 800b45c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b45e:	4b86      	ldr	r3, [pc, #536]	@ (800b678 <HAL_GPIO_Init+0x228>)
 800b460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b462:	e18c      	b.n	800b77e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	2101      	movs	r1, #1
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	fa01 f303 	lsl.w	r3, r1, r3
 800b470:	4013      	ands	r3, r2
 800b472:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 817e 	beq.w	800b778 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	f003 0303 	and.w	r3, r3, #3
 800b484:	2b01      	cmp	r3, #1
 800b486:	d005      	beq.n	800b494 <HAL_GPIO_Init+0x44>
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	f003 0303 	and.w	r3, r3, #3
 800b490:	2b02      	cmp	r3, #2
 800b492:	d130      	bne.n	800b4f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	005b      	lsls	r3, r3, #1
 800b49e:	2203      	movs	r2, #3
 800b4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a4:	43db      	mvns	r3, r3
 800b4a6:	69ba      	ldr	r2, [r7, #24]
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	68da      	ldr	r2, [r3, #12]
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4b8:	69ba      	ldr	r2, [r7, #24]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	69ba      	ldr	r2, [r7, #24]
 800b4c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d2:	43db      	mvns	r3, r3
 800b4d4:	69ba      	ldr	r2, [r7, #24]
 800b4d6:	4013      	ands	r3, r2
 800b4d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	091b      	lsrs	r3, r3, #4
 800b4e0:	f003 0201 	and.w	r2, r3, #1
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	69ba      	ldr	r2, [r7, #24]
 800b4f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	f003 0303 	and.w	r3, r3, #3
 800b4fe:	2b03      	cmp	r3, #3
 800b500:	d017      	beq.n	800b532 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	005b      	lsls	r3, r3, #1
 800b50c:	2203      	movs	r2, #3
 800b50e:	fa02 f303 	lsl.w	r3, r2, r3
 800b512:	43db      	mvns	r3, r3
 800b514:	69ba      	ldr	r2, [r7, #24]
 800b516:	4013      	ands	r3, r2
 800b518:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	689a      	ldr	r2, [r3, #8]
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	005b      	lsls	r3, r3, #1
 800b522:	fa02 f303 	lsl.w	r3, r2, r3
 800b526:	69ba      	ldr	r2, [r7, #24]
 800b528:	4313      	orrs	r3, r2
 800b52a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	f003 0303 	and.w	r3, r3, #3
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d123      	bne.n	800b586 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	08da      	lsrs	r2, r3, #3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	3208      	adds	r2, #8
 800b546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b54a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	f003 0307 	and.w	r3, r3, #7
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	220f      	movs	r2, #15
 800b556:	fa02 f303 	lsl.w	r3, r2, r3
 800b55a:	43db      	mvns	r3, r3
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	4013      	ands	r3, r2
 800b560:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	691a      	ldr	r2, [r3, #16]
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	f003 0307 	and.w	r3, r3, #7
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	fa02 f303 	lsl.w	r3, r2, r3
 800b572:	69ba      	ldr	r2, [r7, #24]
 800b574:	4313      	orrs	r3, r2
 800b576:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	08da      	lsrs	r2, r3, #3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3208      	adds	r2, #8
 800b580:	69b9      	ldr	r1, [r7, #24]
 800b582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	005b      	lsls	r3, r3, #1
 800b590:	2203      	movs	r2, #3
 800b592:	fa02 f303 	lsl.w	r3, r2, r3
 800b596:	43db      	mvns	r3, r3
 800b598:	69ba      	ldr	r2, [r7, #24]
 800b59a:	4013      	ands	r3, r2
 800b59c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	f003 0203 	and.w	r2, r3, #3
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	005b      	lsls	r3, r3, #1
 800b5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ae:	69ba      	ldr	r2, [r7, #24]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f000 80d8 	beq.w	800b778 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b5c8:	4b2c      	ldr	r3, [pc, #176]	@ (800b67c <HAL_GPIO_Init+0x22c>)
 800b5ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b5ce:	4a2b      	ldr	r2, [pc, #172]	@ (800b67c <HAL_GPIO_Init+0x22c>)
 800b5d0:	f043 0302 	orr.w	r3, r3, #2
 800b5d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b5d8:	4b28      	ldr	r3, [pc, #160]	@ (800b67c <HAL_GPIO_Init+0x22c>)
 800b5da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b5de:	f003 0302 	and.w	r3, r3, #2
 800b5e2:	60fb      	str	r3, [r7, #12]
 800b5e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b5e6:	4a26      	ldr	r2, [pc, #152]	@ (800b680 <HAL_GPIO_Init+0x230>)
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	089b      	lsrs	r3, r3, #2
 800b5ec:	3302      	adds	r3, #2
 800b5ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	f003 0303 	and.w	r3, r3, #3
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	220f      	movs	r2, #15
 800b5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b602:	43db      	mvns	r3, r3
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	4013      	ands	r3, r2
 800b608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a1d      	ldr	r2, [pc, #116]	@ (800b684 <HAL_GPIO_Init+0x234>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d04a      	beq.n	800b6a8 <HAL_GPIO_Init+0x258>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a1c      	ldr	r2, [pc, #112]	@ (800b688 <HAL_GPIO_Init+0x238>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d02b      	beq.n	800b672 <HAL_GPIO_Init+0x222>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a1b      	ldr	r2, [pc, #108]	@ (800b68c <HAL_GPIO_Init+0x23c>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d025      	beq.n	800b66e <HAL_GPIO_Init+0x21e>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a1a      	ldr	r2, [pc, #104]	@ (800b690 <HAL_GPIO_Init+0x240>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d01f      	beq.n	800b66a <HAL_GPIO_Init+0x21a>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a19      	ldr	r2, [pc, #100]	@ (800b694 <HAL_GPIO_Init+0x244>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d019      	beq.n	800b666 <HAL_GPIO_Init+0x216>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a18      	ldr	r2, [pc, #96]	@ (800b698 <HAL_GPIO_Init+0x248>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d013      	beq.n	800b662 <HAL_GPIO_Init+0x212>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a17      	ldr	r2, [pc, #92]	@ (800b69c <HAL_GPIO_Init+0x24c>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d00d      	beq.n	800b65e <HAL_GPIO_Init+0x20e>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a16      	ldr	r2, [pc, #88]	@ (800b6a0 <HAL_GPIO_Init+0x250>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d007      	beq.n	800b65a <HAL_GPIO_Init+0x20a>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a15      	ldr	r2, [pc, #84]	@ (800b6a4 <HAL_GPIO_Init+0x254>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d101      	bne.n	800b656 <HAL_GPIO_Init+0x206>
 800b652:	2309      	movs	r3, #9
 800b654:	e029      	b.n	800b6aa <HAL_GPIO_Init+0x25a>
 800b656:	230a      	movs	r3, #10
 800b658:	e027      	b.n	800b6aa <HAL_GPIO_Init+0x25a>
 800b65a:	2307      	movs	r3, #7
 800b65c:	e025      	b.n	800b6aa <HAL_GPIO_Init+0x25a>
 800b65e:	2306      	movs	r3, #6
 800b660:	e023      	b.n	800b6aa <HAL_GPIO_Init+0x25a>
 800b662:	2305      	movs	r3, #5
 800b664:	e021      	b.n	800b6aa <HAL_GPIO_Init+0x25a>
 800b666:	2304      	movs	r3, #4
 800b668:	e01f      	b.n	800b6aa <HAL_GPIO_Init+0x25a>
 800b66a:	2303      	movs	r3, #3
 800b66c:	e01d      	b.n	800b6aa <HAL_GPIO_Init+0x25a>
 800b66e:	2302      	movs	r3, #2
 800b670:	e01b      	b.n	800b6aa <HAL_GPIO_Init+0x25a>
 800b672:	2301      	movs	r3, #1
 800b674:	e019      	b.n	800b6aa <HAL_GPIO_Init+0x25a>
 800b676:	bf00      	nop
 800b678:	58000080 	.word	0x58000080
 800b67c:	58024400 	.word	0x58024400
 800b680:	58000400 	.word	0x58000400
 800b684:	58020000 	.word	0x58020000
 800b688:	58020400 	.word	0x58020400
 800b68c:	58020800 	.word	0x58020800
 800b690:	58020c00 	.word	0x58020c00
 800b694:	58021000 	.word	0x58021000
 800b698:	58021400 	.word	0x58021400
 800b69c:	58021800 	.word	0x58021800
 800b6a0:	58021c00 	.word	0x58021c00
 800b6a4:	58022400 	.word	0x58022400
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	69fa      	ldr	r2, [r7, #28]
 800b6ac:	f002 0203 	and.w	r2, r2, #3
 800b6b0:	0092      	lsls	r2, r2, #2
 800b6b2:	4093      	lsls	r3, r2
 800b6b4:	69ba      	ldr	r2, [r7, #24]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b6ba:	4938      	ldr	r1, [pc, #224]	@ (800b79c <HAL_GPIO_Init+0x34c>)
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	089b      	lsrs	r3, r3, #2
 800b6c0:	3302      	adds	r3, #2
 800b6c2:	69ba      	ldr	r2, [r7, #24]
 800b6c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b6c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	43db      	mvns	r3, r3
 800b6d4:	69ba      	ldr	r2, [r7, #24]
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b6e6:	69ba      	ldr	r2, [r7, #24]
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b6ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b6f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	43db      	mvns	r3, r3
 800b702:	69ba      	ldr	r2, [r7, #24]
 800b704:	4013      	ands	r3, r2
 800b706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d003      	beq.n	800b71c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b714:	69ba      	ldr	r2, [r7, #24]
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	4313      	orrs	r3, r2
 800b71a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b71c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	43db      	mvns	r3, r3
 800b72e:	69ba      	ldr	r2, [r7, #24]
 800b730:	4013      	ands	r3, r2
 800b732:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d003      	beq.n	800b748 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b740:	69ba      	ldr	r2, [r7, #24]
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	4313      	orrs	r3, r2
 800b746:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	43db      	mvns	r3, r3
 800b758:	69ba      	ldr	r2, [r7, #24]
 800b75a:	4013      	ands	r3, r2
 800b75c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b766:	2b00      	cmp	r3, #0
 800b768:	d003      	beq.n	800b772 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b76a:	69ba      	ldr	r2, [r7, #24]
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	4313      	orrs	r3, r2
 800b770:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	3301      	adds	r3, #1
 800b77c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	fa22 f303 	lsr.w	r3, r2, r3
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f47f ae6b 	bne.w	800b464 <HAL_GPIO_Init+0x14>
  }
}
 800b78e:	bf00      	nop
 800b790:	bf00      	nop
 800b792:	3724      	adds	r7, #36	@ 0x24
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	58000400 	.word	0x58000400

0800b7a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	691a      	ldr	r2, [r3, #16]
 800b7b0:	887b      	ldrh	r3, [r7, #2]
 800b7b2:	4013      	ands	r3, r2
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	73fb      	strb	r3, [r7, #15]
 800b7bc:	e001      	b.n	800b7c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	807b      	strh	r3, [r7, #2]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b7e0:	787b      	ldrb	r3, [r7, #1]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b7e6:	887a      	ldrh	r2, [r7, #2]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b7ec:	e003      	b.n	800b7f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b7ee:	887b      	ldrh	r3, [r7, #2]
 800b7f0:	041a      	lsls	r2, r3, #16
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	619a      	str	r2, [r3, #24]
}
 800b7f6:	bf00      	nop
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b082      	sub	sp, #8
 800b806:	af00      	add	r7, sp, #0
 800b808:	4603      	mov	r3, r0
 800b80a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b80c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b810:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b814:	88fb      	ldrh	r3, [r7, #6]
 800b816:	4013      	ands	r3, r2
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d008      	beq.n	800b82e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b81c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b820:	88fb      	ldrh	r3, [r7, #6]
 800b822:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b826:	88fb      	ldrh	r3, [r7, #6]
 800b828:	4618      	mov	r0, r3
 800b82a:	f7f5 fd31 	bl	8001290 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800b82e:	bf00      	nop
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
	...

0800b838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e08b      	b.n	800b962 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d106      	bne.n	800b864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7f6 fe78 	bl	8002554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2224      	movs	r2, #36	@ 0x24
 800b868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f022 0201 	bic.w	r2, r2, #1
 800b87a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b888:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	689a      	ldr	r2, [r3, #8]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b898:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d107      	bne.n	800b8b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	689a      	ldr	r2, [r3, #8]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b8ae:	609a      	str	r2, [r3, #8]
 800b8b0:	e006      	b.n	800b8c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	689a      	ldr	r2, [r3, #8]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b8be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d108      	bne.n	800b8da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	685a      	ldr	r2, [r3, #4]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8d6:	605a      	str	r2, [r3, #4]
 800b8d8:	e007      	b.n	800b8ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	685a      	ldr	r2, [r3, #4]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b8e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	6859      	ldr	r1, [r3, #4]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	4b1d      	ldr	r3, [pc, #116]	@ (800b96c <HAL_I2C_Init+0x134>)
 800b8f6:	430b      	orrs	r3, r1
 800b8f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68da      	ldr	r2, [r3, #12]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b908:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	691a      	ldr	r2, [r3, #16]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	695b      	ldr	r3, [r3, #20]
 800b912:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	699b      	ldr	r3, [r3, #24]
 800b91a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	430a      	orrs	r2, r1
 800b922:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	69d9      	ldr	r1, [r3, #28]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a1a      	ldr	r2, [r3, #32]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	430a      	orrs	r2, r1
 800b932:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f042 0201 	orr.w	r2, r2, #1
 800b942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2220      	movs	r2, #32
 800b94e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	02008000 	.word	0x02008000

0800b970 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b20      	cmp	r3, #32
 800b984:	d138      	bne.n	800b9f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d101      	bne.n	800b994 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b990:	2302      	movs	r3, #2
 800b992:	e032      	b.n	800b9fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2224      	movs	r2, #36	@ 0x24
 800b9a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f022 0201 	bic.w	r2, r2, #1
 800b9b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b9c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	6819      	ldr	r1, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	430a      	orrs	r2, r1
 800b9d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f042 0201 	orr.w	r2, r2, #1
 800b9e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2220      	movs	r2, #32
 800b9e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	e000      	b.n	800b9fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b9f8:	2302      	movs	r3, #2
  }
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr

0800ba06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ba06:	b480      	push	{r7}
 800ba08:	b085      	sub	sp, #20
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b20      	cmp	r3, #32
 800ba1a:	d139      	bne.n	800ba90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d101      	bne.n	800ba2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ba26:	2302      	movs	r3, #2
 800ba28:	e033      	b.n	800ba92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2224      	movs	r2, #36	@ 0x24
 800ba36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f022 0201 	bic.w	r2, r2, #1
 800ba48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ba58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	021b      	lsls	r3, r3, #8
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f042 0201 	orr.w	r2, r2, #1
 800ba7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2220      	movs	r2, #32
 800ba80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	e000      	b.n	800ba92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ba90:	2302      	movs	r3, #2
  }
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b086      	sub	sp, #24
 800baa2:	af02      	add	r7, sp, #8
 800baa4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d101      	bne.n	800bab0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	e0fe      	b.n	800bcae <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d106      	bne.n	800baca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f00c fb5f 	bl	8018188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2203      	movs	r2, #3
 800bace:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4618      	mov	r0, r3
 800bad8:	f008 ff1b 	bl	8014912 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6818      	ldr	r0, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	7c1a      	ldrb	r2, [r3, #16]
 800bae4:	f88d 2000 	strb.w	r2, [sp]
 800bae8:	3304      	adds	r3, #4
 800baea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800baec:	f008 fdec 	bl	80146c8 <USB_CoreInit>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d005      	beq.n	800bb02 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2202      	movs	r2, #2
 800bafa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e0d5      	b.n	800bcae <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2100      	movs	r1, #0
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f008 ff13 	bl	8014934 <USB_SetCurrentMode>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d005      	beq.n	800bb20 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2202      	movs	r2, #2
 800bb18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e0c6      	b.n	800bcae <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb20:	2300      	movs	r3, #0
 800bb22:	73fb      	strb	r3, [r7, #15]
 800bb24:	e04a      	b.n	800bbbc <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bb26:	7bfa      	ldrb	r2, [r7, #15]
 800bb28:	6879      	ldr	r1, [r7, #4]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	00db      	lsls	r3, r3, #3
 800bb2e:	4413      	add	r3, r2
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	440b      	add	r3, r1
 800bb34:	3315      	adds	r3, #21
 800bb36:	2201      	movs	r2, #1
 800bb38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bb3a:	7bfa      	ldrb	r2, [r7, #15]
 800bb3c:	6879      	ldr	r1, [r7, #4]
 800bb3e:	4613      	mov	r3, r2
 800bb40:	00db      	lsls	r3, r3, #3
 800bb42:	4413      	add	r3, r2
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	440b      	add	r3, r1
 800bb48:	3314      	adds	r3, #20
 800bb4a:	7bfa      	ldrb	r2, [r7, #15]
 800bb4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bb4e:	7bfa      	ldrb	r2, [r7, #15]
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	b298      	uxth	r0, r3
 800bb54:	6879      	ldr	r1, [r7, #4]
 800bb56:	4613      	mov	r3, r2
 800bb58:	00db      	lsls	r3, r3, #3
 800bb5a:	4413      	add	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	440b      	add	r3, r1
 800bb60:	332e      	adds	r3, #46	@ 0x2e
 800bb62:	4602      	mov	r2, r0
 800bb64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bb66:	7bfa      	ldrb	r2, [r7, #15]
 800bb68:	6879      	ldr	r1, [r7, #4]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	00db      	lsls	r3, r3, #3
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	440b      	add	r3, r1
 800bb74:	3318      	adds	r3, #24
 800bb76:	2200      	movs	r2, #0
 800bb78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bb7a:	7bfa      	ldrb	r2, [r7, #15]
 800bb7c:	6879      	ldr	r1, [r7, #4]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	00db      	lsls	r3, r3, #3
 800bb82:	4413      	add	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	440b      	add	r3, r1
 800bb88:	331c      	adds	r3, #28
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bb8e:	7bfa      	ldrb	r2, [r7, #15]
 800bb90:	6879      	ldr	r1, [r7, #4]
 800bb92:	4613      	mov	r3, r2
 800bb94:	00db      	lsls	r3, r3, #3
 800bb96:	4413      	add	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	440b      	add	r3, r1
 800bb9c:	3320      	adds	r3, #32
 800bb9e:	2200      	movs	r2, #0
 800bba0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bba2:	7bfa      	ldrb	r2, [r7, #15]
 800bba4:	6879      	ldr	r1, [r7, #4]
 800bba6:	4613      	mov	r3, r2
 800bba8:	00db      	lsls	r3, r3, #3
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	440b      	add	r3, r1
 800bbb0:	3324      	adds	r3, #36	@ 0x24
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	73fb      	strb	r3, [r7, #15]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	791b      	ldrb	r3, [r3, #4]
 800bbc0:	7bfa      	ldrb	r2, [r7, #15]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d3af      	bcc.n	800bb26 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	73fb      	strb	r3, [r7, #15]
 800bbca:	e044      	b.n	800bc56 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bbcc:	7bfa      	ldrb	r2, [r7, #15]
 800bbce:	6879      	ldr	r1, [r7, #4]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	4413      	add	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	440b      	add	r3, r1
 800bbda:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800bbde:	2200      	movs	r2, #0
 800bbe0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bbe2:	7bfa      	ldrb	r2, [r7, #15]
 800bbe4:	6879      	ldr	r1, [r7, #4]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	00db      	lsls	r3, r3, #3
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	440b      	add	r3, r1
 800bbf0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800bbf4:	7bfa      	ldrb	r2, [r7, #15]
 800bbf6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bbf8:	7bfa      	ldrb	r2, [r7, #15]
 800bbfa:	6879      	ldr	r1, [r7, #4]
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	4413      	add	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	440b      	add	r3, r1
 800bc06:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bc0e:	7bfa      	ldrb	r2, [r7, #15]
 800bc10:	6879      	ldr	r1, [r7, #4]
 800bc12:	4613      	mov	r3, r2
 800bc14:	00db      	lsls	r3, r3, #3
 800bc16:	4413      	add	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	440b      	add	r3, r1
 800bc1c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800bc20:	2200      	movs	r2, #0
 800bc22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bc24:	7bfa      	ldrb	r2, [r7, #15]
 800bc26:	6879      	ldr	r1, [r7, #4]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	00db      	lsls	r3, r3, #3
 800bc2c:	4413      	add	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	440b      	add	r3, r1
 800bc32:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bc36:	2200      	movs	r2, #0
 800bc38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bc3a:	7bfa      	ldrb	r2, [r7, #15]
 800bc3c:	6879      	ldr	r1, [r7, #4]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	00db      	lsls	r3, r3, #3
 800bc42:	4413      	add	r3, r2
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	440b      	add	r3, r1
 800bc48:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc50:	7bfb      	ldrb	r3, [r7, #15]
 800bc52:	3301      	adds	r3, #1
 800bc54:	73fb      	strb	r3, [r7, #15]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	791b      	ldrb	r3, [r3, #4]
 800bc5a:	7bfa      	ldrb	r2, [r7, #15]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d3b5      	bcc.n	800bbcc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6818      	ldr	r0, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	7c1a      	ldrb	r2, [r3, #16]
 800bc68:	f88d 2000 	strb.w	r2, [sp]
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc70:	f008 feac 	bl	80149cc <USB_DevInit>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d005      	beq.n	800bc86 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2202      	movs	r2, #2
 800bc7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e013      	b.n	800bcae <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	7b1b      	ldrb	r3, [r3, #12]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d102      	bne.n	800bca2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f001 f96d 	bl	800cf7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f009 feeb 	bl	8015a82 <USB_DevDisconnect>

  return HAL_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b084      	sub	sp, #16
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d101      	bne.n	800bcd2 <HAL_PCD_Start+0x1c>
 800bcce:	2302      	movs	r3, #2
 800bcd0:	e022      	b.n	800bd18 <HAL_PCD_Start+0x62>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d009      	beq.n	800bcfa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d105      	bne.n	800bcfa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f008 fdf6 	bl	80148f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f009 fe99 	bl	8015a40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800bd20:	b590      	push	{r4, r7, lr}
 800bd22:	b08d      	sub	sp, #52	@ 0x34
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd2e:	6a3b      	ldr	r3, [r7, #32]
 800bd30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f009 ff57 	bl	8015bea <USB_GetMode>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f040 84b9 	bne.w	800c6b6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f009 febb 	bl	8015ac4 <USB_ReadInterrupts>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	f000 84af 	beq.w	800c6b4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	0a1b      	lsrs	r3, r3, #8
 800bd60:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f009 fea8 	bl	8015ac4 <USB_ReadInterrupts>
 800bd74:	4603      	mov	r3, r0
 800bd76:	f003 0302 	and.w	r3, r3, #2
 800bd7a:	2b02      	cmp	r3, #2
 800bd7c:	d107      	bne.n	800bd8e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	695a      	ldr	r2, [r3, #20]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f002 0202 	and.w	r2, r2, #2
 800bd8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f009 fe96 	bl	8015ac4 <USB_ReadInterrupts>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f003 0310 	and.w	r3, r3, #16
 800bd9e:	2b10      	cmp	r3, #16
 800bda0:	d161      	bne.n	800be66 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	699a      	ldr	r2, [r3, #24]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f022 0210 	bic.w	r2, r2, #16
 800bdb0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800bdb2:	6a3b      	ldr	r3, [r7, #32]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	f003 020f 	and.w	r2, r3, #15
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	4413      	add	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	4413      	add	r3, r2
 800bdce:	3304      	adds	r3, #4
 800bdd0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	0c5b      	lsrs	r3, r3, #17
 800bdd6:	f003 030f 	and.w	r3, r3, #15
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	d124      	bne.n	800be28 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800bdde:	69ba      	ldr	r2, [r7, #24]
 800bde0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800bde4:	4013      	ands	r3, r2
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d035      	beq.n	800be56 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	091b      	lsrs	r3, r3, #4
 800bdf2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bdf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	6a38      	ldr	r0, [r7, #32]
 800bdfe:	f009 fccd 	bl	801579c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	68da      	ldr	r2, [r3, #12]
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	091b      	lsrs	r3, r3, #4
 800be0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be0e:	441a      	add	r2, r3
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	695a      	ldr	r2, [r3, #20]
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	091b      	lsrs	r3, r3, #4
 800be1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be20:	441a      	add	r2, r3
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	615a      	str	r2, [r3, #20]
 800be26:	e016      	b.n	800be56 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	0c5b      	lsrs	r3, r3, #17
 800be2c:	f003 030f 	and.w	r3, r3, #15
 800be30:	2b06      	cmp	r3, #6
 800be32:	d110      	bne.n	800be56 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800be3a:	2208      	movs	r2, #8
 800be3c:	4619      	mov	r1, r3
 800be3e:	6a38      	ldr	r0, [r7, #32]
 800be40:	f009 fcac 	bl	801579c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	695a      	ldr	r2, [r3, #20]
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	091b      	lsrs	r3, r3, #4
 800be4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be50:	441a      	add	r2, r3
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	699a      	ldr	r2, [r3, #24]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f042 0210 	orr.w	r2, r2, #16
 800be64:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f009 fe2a 	bl	8015ac4 <USB_ReadInterrupts>
 800be70:	4603      	mov	r3, r0
 800be72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800be76:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800be7a:	f040 80a7 	bne.w	800bfcc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800be7e:	2300      	movs	r3, #0
 800be80:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4618      	mov	r0, r3
 800be88:	f009 fe2f 	bl	8015aea <USB_ReadDevAllOutEpInterrupt>
 800be8c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800be8e:	e099      	b.n	800bfc4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800be90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be92:	f003 0301 	and.w	r3, r3, #1
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 808e 	beq.w	800bfb8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bea2:	b2d2      	uxtb	r2, r2
 800bea4:	4611      	mov	r1, r2
 800bea6:	4618      	mov	r0, r3
 800bea8:	f009 fe53 	bl	8015b52 <USB_ReadDevOutEPInterrupt>
 800beac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00c      	beq.n	800bed2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800beb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beba:	015a      	lsls	r2, r3, #5
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	4413      	add	r3, r2
 800bec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bec4:	461a      	mov	r2, r3
 800bec6:	2301      	movs	r3, #1
 800bec8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800beca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fecf 	bl	800cc70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	f003 0308 	and.w	r3, r3, #8
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00c      	beq.n	800bef6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bede:	015a      	lsls	r2, r3, #5
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	4413      	add	r3, r2
 800bee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bee8:	461a      	mov	r2, r3
 800beea:	2308      	movs	r3, #8
 800beec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800beee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 ffa5 	bl	800ce40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	f003 0310 	and.w	r3, r3, #16
 800befc:	2b00      	cmp	r3, #0
 800befe:	d008      	beq.n	800bf12 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800bf00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf02:	015a      	lsls	r2, r3, #5
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	4413      	add	r3, r2
 800bf08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	2310      	movs	r3, #16
 800bf10:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	f003 0302 	and.w	r3, r3, #2
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d030      	beq.n	800bf7e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800bf1c:	6a3b      	ldr	r3, [r7, #32]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf24:	2b80      	cmp	r3, #128	@ 0x80
 800bf26:	d109      	bne.n	800bf3c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	69fa      	ldr	r2, [r7, #28]
 800bf32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bf36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bf3a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800bf3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf3e:	4613      	mov	r3, r2
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	4413      	add	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	3304      	adds	r3, #4
 800bf50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	78db      	ldrb	r3, [r3, #3]
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d108      	bne.n	800bf6c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800bf60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	4619      	mov	r1, r3
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f00c fa06 	bl	8018378 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6e:	015a      	lsls	r2, r3, #5
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	4413      	add	r3, r2
 800bf74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf78:	461a      	mov	r2, r3
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	f003 0320 	and.w	r3, r3, #32
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d008      	beq.n	800bf9a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bf88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf8a:	015a      	lsls	r2, r3, #5
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	4413      	add	r3, r2
 800bf90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf94:	461a      	mov	r2, r3
 800bf96:	2320      	movs	r3, #32
 800bf98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d009      	beq.n	800bfb8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa6:	015a      	lsls	r2, r3, #5
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	4413      	add	r3, r2
 800bfac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bfb6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800bfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfba:	3301      	adds	r3, #1
 800bfbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800bfbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc0:	085b      	lsrs	r3, r3, #1
 800bfc2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800bfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f47f af62 	bne.w	800be90 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f009 fd77 	bl	8015ac4 <USB_ReadInterrupts>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bfdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bfe0:	f040 80db 	bne.w	800c19a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f009 fd98 	bl	8015b1e <USB_ReadDevAllInEpInterrupt>
 800bfee:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800bff0:	2300      	movs	r3, #0
 800bff2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800bff4:	e0cd      	b.n	800c192 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800bff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f000 80c2 	beq.w	800c186 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c008:	b2d2      	uxtb	r2, r2
 800c00a:	4611      	mov	r1, r2
 800c00c:	4618      	mov	r0, r3
 800c00e:	f009 fdbe 	bl	8015b8e <USB_ReadDevInEPInterrupt>
 800c012:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d057      	beq.n	800c0ce <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c020:	f003 030f 	and.w	r3, r3, #15
 800c024:	2201      	movs	r2, #1
 800c026:	fa02 f303 	lsl.w	r3, r2, r3
 800c02a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	43db      	mvns	r3, r3
 800c038:	69f9      	ldr	r1, [r7, #28]
 800c03a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c03e:	4013      	ands	r3, r2
 800c040:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c044:	015a      	lsls	r2, r3, #5
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	4413      	add	r3, r2
 800c04a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c04e:	461a      	mov	r2, r3
 800c050:	2301      	movs	r3, #1
 800c052:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	799b      	ldrb	r3, [r3, #6]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d132      	bne.n	800c0c2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c060:	4613      	mov	r3, r2
 800c062:	00db      	lsls	r3, r3, #3
 800c064:	4413      	add	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	440b      	add	r3, r1
 800c06a:	3320      	adds	r3, #32
 800c06c:	6819      	ldr	r1, [r3, #0]
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c072:	4613      	mov	r3, r2
 800c074:	00db      	lsls	r3, r3, #3
 800c076:	4413      	add	r3, r2
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	4403      	add	r3, r0
 800c07c:	331c      	adds	r3, #28
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4419      	add	r1, r3
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c086:	4613      	mov	r3, r2
 800c088:	00db      	lsls	r3, r3, #3
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	4403      	add	r3, r0
 800c090:	3320      	adds	r3, #32
 800c092:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c096:	2b00      	cmp	r3, #0
 800c098:	d113      	bne.n	800c0c2 <HAL_PCD_IRQHandler+0x3a2>
 800c09a:	6879      	ldr	r1, [r7, #4]
 800c09c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c09e:	4613      	mov	r3, r2
 800c0a0:	00db      	lsls	r3, r3, #3
 800c0a2:	4413      	add	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	440b      	add	r3, r1
 800c0a8:	3324      	adds	r3, #36	@ 0x24
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d108      	bne.n	800c0c2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6818      	ldr	r0, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	2101      	movs	r1, #1
 800c0be:	f009 fdc7 	bl	8015c50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f00c f8d0 	bl	801826e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	f003 0308 	and.w	r3, r3, #8
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d008      	beq.n	800c0ea <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0da:	015a      	lsls	r2, r3, #5
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	4413      	add	r3, r2
 800c0e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	2308      	movs	r3, #8
 800c0e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	f003 0310 	and.w	r3, r3, #16
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d008      	beq.n	800c106 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c100:	461a      	mov	r2, r3
 800c102:	2310      	movs	r3, #16
 800c104:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d008      	beq.n	800c122 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c112:	015a      	lsls	r2, r3, #5
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	4413      	add	r3, r2
 800c118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c11c:	461a      	mov	r2, r3
 800c11e:	2340      	movs	r3, #64	@ 0x40
 800c120:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	f003 0302 	and.w	r3, r3, #2
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d023      	beq.n	800c174 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c12c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c12e:	6a38      	ldr	r0, [r7, #32]
 800c130:	f008 fdaa 	bl	8014c88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c136:	4613      	mov	r3, r2
 800c138:	00db      	lsls	r3, r3, #3
 800c13a:	4413      	add	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	3310      	adds	r3, #16
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	4413      	add	r3, r2
 800c144:	3304      	adds	r3, #4
 800c146:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	78db      	ldrb	r3, [r3, #3]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d108      	bne.n	800c162 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	2200      	movs	r2, #0
 800c154:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	4619      	mov	r1, r3
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f00c f91d 	bl	801839c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c164:	015a      	lsls	r2, r3, #5
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	4413      	add	r3, r2
 800c16a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c16e:	461a      	mov	r2, r3
 800c170:	2302      	movs	r3, #2
 800c172:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d003      	beq.n	800c186 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c17e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fce8 	bl	800cb56 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c188:	3301      	adds	r3, #1
 800c18a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c18e:	085b      	lsrs	r3, r3, #1
 800c190:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c194:	2b00      	cmp	r3, #0
 800c196:	f47f af2e 	bne.w	800bff6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f009 fc90 	bl	8015ac4 <USB_ReadInterrupts>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c1aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1ae:	d122      	bne.n	800c1f6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	69fa      	ldr	r2, [r7, #28]
 800c1ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c1be:	f023 0301 	bic.w	r3, r3, #1
 800c1c2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d108      	bne.n	800c1e0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fef3 	bl	800cfc4 <HAL_PCDEx_LPM_Callback>
 800c1de:	e002      	b.n	800c1e6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f00c f8bb 	bl	801835c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	695a      	ldr	r2, [r3, #20]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c1f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f009 fc62 	bl	8015ac4 <USB_ReadInterrupts>
 800c200:	4603      	mov	r3, r0
 800c202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c20a:	d112      	bne.n	800c232 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	f003 0301 	and.w	r3, r3, #1
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d102      	bne.n	800c222 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f00c f877 	bl	8018310 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	695a      	ldr	r2, [r3, #20]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c230:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4618      	mov	r0, r3
 800c238:	f009 fc44 	bl	8015ac4 <USB_ReadInterrupts>
 800c23c:	4603      	mov	r3, r0
 800c23e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c246:	d121      	bne.n	800c28c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	695a      	ldr	r2, [r3, #20]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800c256:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d111      	bne.n	800c286 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c270:	089b      	lsrs	r3, r3, #2
 800c272:	f003 020f 	and.w	r2, r3, #15
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c27c:	2101      	movs	r1, #1
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fea0 	bl	800cfc4 <HAL_PCDEx_LPM_Callback>
 800c284:	e002      	b.n	800c28c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f00c f842 	bl	8018310 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4618      	mov	r0, r3
 800c292:	f009 fc17 	bl	8015ac4 <USB_ReadInterrupts>
 800c296:	4603      	mov	r3, r0
 800c298:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c29c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2a0:	f040 80b7 	bne.w	800c412 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	69fa      	ldr	r2, [r7, #28]
 800c2ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c2b2:	f023 0301 	bic.w	r3, r3, #1
 800c2b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2110      	movs	r1, #16
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f008 fce2 	bl	8014c88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2c8:	e046      	b.n	800c358 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2cc:	015a      	lsls	r2, r3, #5
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c2dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2ee:	0151      	lsls	r1, r2, #5
 800c2f0:	69fa      	ldr	r2, [r7, #28]
 800c2f2:	440a      	add	r2, r1
 800c2f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c2fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c300:	015a      	lsls	r2, r3, #5
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	4413      	add	r3, r2
 800c306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c30a:	461a      	mov	r2, r3
 800c30c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c310:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c314:	015a      	lsls	r2, r3, #5
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	4413      	add	r3, r2
 800c31a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c322:	0151      	lsls	r1, r2, #5
 800c324:	69fa      	ldr	r2, [r7, #28]
 800c326:	440a      	add	r2, r1
 800c328:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c32c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c330:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c334:	015a      	lsls	r2, r3, #5
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	4413      	add	r3, r2
 800c33a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c342:	0151      	lsls	r1, r2, #5
 800c344:	69fa      	ldr	r2, [r7, #28]
 800c346:	440a      	add	r2, r1
 800c348:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c34c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c350:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c354:	3301      	adds	r3, #1
 800c356:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	791b      	ldrb	r3, [r3, #4]
 800c35c:	461a      	mov	r2, r3
 800c35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c360:	4293      	cmp	r3, r2
 800c362:	d3b2      	bcc.n	800c2ca <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c36a:	69db      	ldr	r3, [r3, #28]
 800c36c:	69fa      	ldr	r2, [r7, #28]
 800c36e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c372:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c376:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	7bdb      	ldrb	r3, [r3, #15]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d016      	beq.n	800c3ae <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c38a:	69fa      	ldr	r2, [r7, #28]
 800c38c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c390:	f043 030b 	orr.w	r3, r3, #11
 800c394:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c39e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3a0:	69fa      	ldr	r2, [r7, #28]
 800c3a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c3a6:	f043 030b 	orr.w	r3, r3, #11
 800c3aa:	6453      	str	r3, [r2, #68]	@ 0x44
 800c3ac:	e015      	b.n	800c3da <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3b4:	695a      	ldr	r2, [r3, #20]
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3bc:	4619      	mov	r1, r3
 800c3be:	f242 032b 	movw	r3, #8235	@ 0x202b
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	69fa      	ldr	r2, [r7, #28]
 800c3d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c3d4:	f043 030b 	orr.w	r3, r3, #11
 800c3d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	69fa      	ldr	r2, [r7, #28]
 800c3e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c3e8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c3ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	f009 fc27 	bl	8015c50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	695a      	ldr	r2, [r3, #20]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c410:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4618      	mov	r0, r3
 800c418:	f009 fb54 	bl	8015ac4 <USB_ReadInterrupts>
 800c41c:	4603      	mov	r3, r0
 800c41e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c426:	d123      	bne.n	800c470 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f009 fbeb 	bl	8015c08 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4618      	mov	r0, r3
 800c438:	f008 fc9f 	bl	8014d7a <USB_GetDevSpeed>
 800c43c:	4603      	mov	r3, r0
 800c43e:	461a      	mov	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681c      	ldr	r4, [r3, #0]
 800c448:	f001 fd1c 	bl	800de84 <HAL_RCC_GetHCLKFreq>
 800c44c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c452:	461a      	mov	r2, r3
 800c454:	4620      	mov	r0, r4
 800c456:	f008 f9a9 	bl	80147ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f00b ff2f 	bl	80182be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	695a      	ldr	r2, [r3, #20]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c46e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4618      	mov	r0, r3
 800c476:	f009 fb25 	bl	8015ac4 <USB_ReadInterrupts>
 800c47a:	4603      	mov	r3, r0
 800c47c:	f003 0308 	and.w	r3, r3, #8
 800c480:	2b08      	cmp	r3, #8
 800c482:	d10a      	bne.n	800c49a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f00b ff0c 	bl	80182a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	695a      	ldr	r2, [r3, #20]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f002 0208 	and.w	r2, r2, #8
 800c498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f009 fb10 	bl	8015ac4 <USB_ReadInterrupts>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4aa:	2b80      	cmp	r3, #128	@ 0x80
 800c4ac:	d123      	bne.n	800c4f6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c4ae:	6a3b      	ldr	r3, [r7, #32]
 800c4b0:	699b      	ldr	r3, [r3, #24]
 800c4b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c4b6:	6a3b      	ldr	r3, [r7, #32]
 800c4b8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4be:	e014      	b.n	800c4ea <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c4c0:	6879      	ldr	r1, [r7, #4]
 800c4c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4c4:	4613      	mov	r3, r2
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	4413      	add	r3, r2
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	440b      	add	r3, r1
 800c4ce:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d105      	bne.n	800c4e4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	4619      	mov	r1, r3
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 fb08 	bl	800caf4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	791b      	ldrb	r3, [r3, #4]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d3e4      	bcc.n	800c4c0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f009 fae2 	bl	8015ac4 <USB_ReadInterrupts>
 800c500:	4603      	mov	r3, r0
 800c502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c50a:	d13c      	bne.n	800c586 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c50c:	2301      	movs	r3, #1
 800c50e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c510:	e02b      	b.n	800c56a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c514:	015a      	lsls	r2, r3, #5
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	4413      	add	r3, r2
 800c51a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c522:	6879      	ldr	r1, [r7, #4]
 800c524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c526:	4613      	mov	r3, r2
 800c528:	00db      	lsls	r3, r3, #3
 800c52a:	4413      	add	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	440b      	add	r3, r1
 800c530:	3318      	adds	r3, #24
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d115      	bne.n	800c564 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c538:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	da12      	bge.n	800c564 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c542:	4613      	mov	r3, r2
 800c544:	00db      	lsls	r3, r3, #3
 800c546:	4413      	add	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	440b      	add	r3, r1
 800c54c:	3317      	adds	r3, #23
 800c54e:	2201      	movs	r2, #1
 800c550:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c554:	b2db      	uxtb	r3, r3
 800c556:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 fac8 	bl	800caf4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	3301      	adds	r3, #1
 800c568:	627b      	str	r3, [r7, #36]	@ 0x24
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	791b      	ldrb	r3, [r3, #4]
 800c56e:	461a      	mov	r2, r3
 800c570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c572:	4293      	cmp	r3, r2
 800c574:	d3cd      	bcc.n	800c512 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	695a      	ldr	r2, [r3, #20]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800c584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f009 fa9a 	bl	8015ac4 <USB_ReadInterrupts>
 800c590:	4603      	mov	r3, r0
 800c592:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c596:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c59a:	d156      	bne.n	800c64a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c59c:	2301      	movs	r3, #1
 800c59e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5a0:	e045      	b.n	800c62e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a4:	015a      	lsls	r2, r3, #5
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c5b2:	6879      	ldr	r1, [r7, #4]
 800c5b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	00db      	lsls	r3, r3, #3
 800c5ba:	4413      	add	r3, r2
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	440b      	add	r3, r1
 800c5c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	d12e      	bne.n	800c628 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c5ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	da2b      	bge.n	800c628 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c5dc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d121      	bne.n	800c628 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c5e4:	6879      	ldr	r1, [r7, #4]
 800c5e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	00db      	lsls	r3, r3, #3
 800c5ec:	4413      	add	r3, r2
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	440b      	add	r3, r1
 800c5f2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c5fa:	6a3b      	ldr	r3, [r7, #32]
 800c5fc:	699b      	ldr	r3, [r3, #24]
 800c5fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c602:	6a3b      	ldr	r3, [r7, #32]
 800c604:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10a      	bne.n	800c628 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	69fa      	ldr	r2, [r7, #28]
 800c61c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c620:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c624:	6053      	str	r3, [r2, #4]
            break;
 800c626:	e008      	b.n	800c63a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62a:	3301      	adds	r3, #1
 800c62c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	791b      	ldrb	r3, [r3, #4]
 800c632:	461a      	mov	r2, r3
 800c634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c636:	4293      	cmp	r3, r2
 800c638:	d3b3      	bcc.n	800c5a2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	695a      	ldr	r2, [r3, #20]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4618      	mov	r0, r3
 800c650:	f009 fa38 	bl	8015ac4 <USB_ReadInterrupts>
 800c654:	4603      	mov	r3, r0
 800c656:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c65a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c65e:	d10a      	bne.n	800c676 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f00b fead 	bl	80183c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	695a      	ldr	r2, [r3, #20]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f009 fa22 	bl	8015ac4 <USB_ReadInterrupts>
 800c680:	4603      	mov	r3, r0
 800c682:	f003 0304 	and.w	r3, r3, #4
 800c686:	2b04      	cmp	r3, #4
 800c688:	d115      	bne.n	800c6b6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	f003 0304 	and.w	r3, r3, #4
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f00b fe9d 	bl	80183dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	6859      	ldr	r1, [r3, #4]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	69ba      	ldr	r2, [r7, #24]
 800c6ae:	430a      	orrs	r2, r1
 800c6b0:	605a      	str	r2, [r3, #4]
 800c6b2:	e000      	b.n	800c6b6 <HAL_PCD_IRQHandler+0x996>
      return;
 800c6b4:	bf00      	nop
    }
  }
}
 800c6b6:	3734      	adds	r7, #52	@ 0x34
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd90      	pop	{r4, r7, pc}

0800c6bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d101      	bne.n	800c6d6 <HAL_PCD_SetAddress+0x1a>
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	e012      	b.n	800c6fc <HAL_PCD_SetAddress+0x40>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	78fa      	ldrb	r2, [r7, #3]
 800c6e2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	78fa      	ldrb	r2, [r7, #3]
 800c6ea:	4611      	mov	r1, r2
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f009 f981 	bl	80159f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c6fa:	2300      	movs	r3, #0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	4608      	mov	r0, r1
 800c70e:	4611      	mov	r1, r2
 800c710:	461a      	mov	r2, r3
 800c712:	4603      	mov	r3, r0
 800c714:	70fb      	strb	r3, [r7, #3]
 800c716:	460b      	mov	r3, r1
 800c718:	803b      	strh	r3, [r7, #0]
 800c71a:	4613      	mov	r3, r2
 800c71c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c726:	2b00      	cmp	r3, #0
 800c728:	da0f      	bge.n	800c74a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c72a:	78fb      	ldrb	r3, [r7, #3]
 800c72c:	f003 020f 	and.w	r2, r3, #15
 800c730:	4613      	mov	r3, r2
 800c732:	00db      	lsls	r3, r3, #3
 800c734:	4413      	add	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	3310      	adds	r3, #16
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	4413      	add	r3, r2
 800c73e:	3304      	adds	r3, #4
 800c740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2201      	movs	r2, #1
 800c746:	705a      	strb	r2, [r3, #1]
 800c748:	e00f      	b.n	800c76a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c74a:	78fb      	ldrb	r3, [r7, #3]
 800c74c:	f003 020f 	and.w	r2, r3, #15
 800c750:	4613      	mov	r3, r2
 800c752:	00db      	lsls	r3, r3, #3
 800c754:	4413      	add	r3, r2
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	4413      	add	r3, r2
 800c760:	3304      	adds	r3, #4
 800c762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2200      	movs	r2, #0
 800c768:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c76a:	78fb      	ldrb	r3, [r7, #3]
 800c76c:	f003 030f 	and.w	r3, r3, #15
 800c770:	b2da      	uxtb	r2, r3
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c776:	883a      	ldrh	r2, [r7, #0]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	78ba      	ldrb	r2, [r7, #2]
 800c780:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	785b      	ldrb	r3, [r3, #1]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d004      	beq.n	800c794 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	461a      	mov	r2, r3
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c794:	78bb      	ldrb	r3, [r7, #2]
 800c796:	2b02      	cmp	r3, #2
 800c798:	d102      	bne.n	800c7a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2200      	movs	r2, #0
 800c79e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d101      	bne.n	800c7ae <HAL_PCD_EP_Open+0xaa>
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	e00e      	b.n	800c7cc <HAL_PCD_EP_Open+0xc8>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	68f9      	ldr	r1, [r7, #12]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f008 fb01 	bl	8014dc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c7ca:	7afb      	ldrb	r3, [r7, #11]
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c7e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	da0f      	bge.n	800c808 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c7e8:	78fb      	ldrb	r3, [r7, #3]
 800c7ea:	f003 020f 	and.w	r2, r3, #15
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	00db      	lsls	r3, r3, #3
 800c7f2:	4413      	add	r3, r2
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	3310      	adds	r3, #16
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	3304      	adds	r3, #4
 800c7fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2201      	movs	r2, #1
 800c804:	705a      	strb	r2, [r3, #1]
 800c806:	e00f      	b.n	800c828 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c808:	78fb      	ldrb	r3, [r7, #3]
 800c80a:	f003 020f 	and.w	r2, r3, #15
 800c80e:	4613      	mov	r3, r2
 800c810:	00db      	lsls	r3, r3, #3
 800c812:	4413      	add	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	4413      	add	r3, r2
 800c81e:	3304      	adds	r3, #4
 800c820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2200      	movs	r2, #0
 800c826:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c828:	78fb      	ldrb	r3, [r7, #3]
 800c82a:	f003 030f 	and.w	r3, r3, #15
 800c82e:	b2da      	uxtb	r2, r3
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d101      	bne.n	800c842 <HAL_PCD_EP_Close+0x6e>
 800c83e:	2302      	movs	r3, #2
 800c840:	e00e      	b.n	800c860 <HAL_PCD_EP_Close+0x8c>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68f9      	ldr	r1, [r7, #12]
 800c850:	4618      	mov	r0, r3
 800c852:	f008 fb3f 	bl	8014ed4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c85e:	2300      	movs	r3, #0
}
 800c860:	4618      	mov	r0, r3
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	607a      	str	r2, [r7, #4]
 800c872:	603b      	str	r3, [r7, #0]
 800c874:	460b      	mov	r3, r1
 800c876:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c878:	7afb      	ldrb	r3, [r7, #11]
 800c87a:	f003 020f 	and.w	r2, r3, #15
 800c87e:	4613      	mov	r3, r2
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	4413      	add	r3, r2
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	4413      	add	r3, r2
 800c88e:	3304      	adds	r3, #4
 800c890:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c8aa:	7afb      	ldrb	r3, [r7, #11]
 800c8ac:	f003 030f 	and.w	r3, r3, #15
 800c8b0:	b2da      	uxtb	r2, r3
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	799b      	ldrb	r3, [r3, #6]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d102      	bne.n	800c8c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6818      	ldr	r0, [r3, #0]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	799b      	ldrb	r3, [r3, #6]
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	6979      	ldr	r1, [r7, #20]
 800c8d0:	f008 fbdc 	bl	801508c <USB_EPStartXfer>

  return HAL_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3718      	adds	r7, #24
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c8de:	b480      	push	{r7}
 800c8e0:	b083      	sub	sp, #12
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c8ea:	78fb      	ldrb	r3, [r7, #3]
 800c8ec:	f003 020f 	and.w	r2, r3, #15
 800c8f0:	6879      	ldr	r1, [r7, #4]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	00db      	lsls	r3, r3, #3
 800c8f6:	4413      	add	r3, r2
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	440b      	add	r3, r1
 800c8fc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c900:	681b      	ldr	r3, [r3, #0]
}
 800c902:	4618      	mov	r0, r3
 800c904:	370c      	adds	r7, #12
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b086      	sub	sp, #24
 800c912:	af00      	add	r7, sp, #0
 800c914:	60f8      	str	r0, [r7, #12]
 800c916:	607a      	str	r2, [r7, #4]
 800c918:	603b      	str	r3, [r7, #0]
 800c91a:	460b      	mov	r3, r1
 800c91c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c91e:	7afb      	ldrb	r3, [r7, #11]
 800c920:	f003 020f 	and.w	r2, r3, #15
 800c924:	4613      	mov	r3, r2
 800c926:	00db      	lsls	r3, r3, #3
 800c928:	4413      	add	r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	3310      	adds	r3, #16
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	4413      	add	r3, r2
 800c932:	3304      	adds	r3, #4
 800c934:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	683a      	ldr	r2, [r7, #0]
 800c940:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	2200      	movs	r2, #0
 800c946:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	2201      	movs	r2, #1
 800c94c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c94e:	7afb      	ldrb	r3, [r7, #11]
 800c950:	f003 030f 	and.w	r3, r3, #15
 800c954:	b2da      	uxtb	r2, r3
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	799b      	ldrb	r3, [r3, #6]
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d102      	bne.n	800c968 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6818      	ldr	r0, [r3, #0]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	799b      	ldrb	r3, [r3, #6]
 800c970:	461a      	mov	r2, r3
 800c972:	6979      	ldr	r1, [r7, #20]
 800c974:	f008 fb8a 	bl	801508c <USB_EPStartXfer>

  return HAL_OK;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b084      	sub	sp, #16
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	460b      	mov	r3, r1
 800c98c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c98e:	78fb      	ldrb	r3, [r7, #3]
 800c990:	f003 030f 	and.w	r3, r3, #15
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	7912      	ldrb	r2, [r2, #4]
 800c998:	4293      	cmp	r3, r2
 800c99a:	d901      	bls.n	800c9a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	e04f      	b.n	800ca40 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c9a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	da0f      	bge.n	800c9c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c9a8:	78fb      	ldrb	r3, [r7, #3]
 800c9aa:	f003 020f 	and.w	r2, r3, #15
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	00db      	lsls	r3, r3, #3
 800c9b2:	4413      	add	r3, r2
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	3310      	adds	r3, #16
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	3304      	adds	r3, #4
 800c9be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	705a      	strb	r2, [r3, #1]
 800c9c6:	e00d      	b.n	800c9e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c9c8:	78fa      	ldrb	r2, [r7, #3]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	00db      	lsls	r3, r3, #3
 800c9ce:	4413      	add	r3, r2
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	4413      	add	r3, r2
 800c9da:	3304      	adds	r3, #4
 800c9dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c9ea:	78fb      	ldrb	r3, [r7, #3]
 800c9ec:	f003 030f 	and.w	r3, r3, #15
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d101      	bne.n	800ca04 <HAL_PCD_EP_SetStall+0x82>
 800ca00:	2302      	movs	r3, #2
 800ca02:	e01d      	b.n	800ca40 <HAL_PCD_EP_SetStall+0xbe>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	68f9      	ldr	r1, [r7, #12]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f008 ff1a 	bl	801584c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ca18:	78fb      	ldrb	r3, [r7, #3]
 800ca1a:	f003 030f 	and.w	r3, r3, #15
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d109      	bne.n	800ca36 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6818      	ldr	r0, [r3, #0]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	7999      	ldrb	r1, [r3, #6]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ca30:	461a      	mov	r2, r3
 800ca32:	f009 f90d 	bl	8015c50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	460b      	mov	r3, r1
 800ca52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ca54:	78fb      	ldrb	r3, [r7, #3]
 800ca56:	f003 030f 	and.w	r3, r3, #15
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	7912      	ldrb	r2, [r2, #4]
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d901      	bls.n	800ca66 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	e042      	b.n	800caec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ca66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	da0f      	bge.n	800ca8e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca6e:	78fb      	ldrb	r3, [r7, #3]
 800ca70:	f003 020f 	and.w	r2, r3, #15
 800ca74:	4613      	mov	r3, r2
 800ca76:	00db      	lsls	r3, r3, #3
 800ca78:	4413      	add	r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	3310      	adds	r3, #16
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	4413      	add	r3, r2
 800ca82:	3304      	adds	r3, #4
 800ca84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	705a      	strb	r2, [r3, #1]
 800ca8c:	e00f      	b.n	800caae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ca8e:	78fb      	ldrb	r3, [r7, #3]
 800ca90:	f003 020f 	and.w	r2, r3, #15
 800ca94:	4613      	mov	r3, r2
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	4413      	add	r3, r2
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	4413      	add	r3, r2
 800caa4:	3304      	adds	r3, #4
 800caa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cab4:	78fb      	ldrb	r3, [r7, #3]
 800cab6:	f003 030f 	and.w	r3, r3, #15
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d101      	bne.n	800cace <HAL_PCD_EP_ClrStall+0x86>
 800caca:	2302      	movs	r3, #2
 800cacc:	e00e      	b.n	800caec <HAL_PCD_EP_ClrStall+0xa4>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2201      	movs	r2, #1
 800cad2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	68f9      	ldr	r1, [r7, #12]
 800cadc:	4618      	mov	r0, r3
 800cade:	f008 ff23 	bl	8015928 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	460b      	mov	r3, r1
 800cafe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800cb00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	da0c      	bge.n	800cb22 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb08:	78fb      	ldrb	r3, [r7, #3]
 800cb0a:	f003 020f 	and.w	r2, r3, #15
 800cb0e:	4613      	mov	r3, r2
 800cb10:	00db      	lsls	r3, r3, #3
 800cb12:	4413      	add	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	3310      	adds	r3, #16
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	60fb      	str	r3, [r7, #12]
 800cb20:	e00c      	b.n	800cb3c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cb22:	78fb      	ldrb	r3, [r7, #3]
 800cb24:	f003 020f 	and.w	r2, r3, #15
 800cb28:	4613      	mov	r3, r2
 800cb2a:	00db      	lsls	r3, r3, #3
 800cb2c:	4413      	add	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	4413      	add	r3, r2
 800cb38:	3304      	adds	r3, #4
 800cb3a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68f9      	ldr	r1, [r7, #12]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f008 fd42 	bl	80155cc <USB_EPStopXfer>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800cb4c:	7afb      	ldrb	r3, [r7, #11]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b08a      	sub	sp, #40	@ 0x28
 800cb5a:	af02      	add	r7, sp, #8
 800cb5c:	6078      	str	r0, [r7, #4]
 800cb5e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	00db      	lsls	r3, r3, #3
 800cb70:	4413      	add	r3, r2
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	3310      	adds	r3, #16
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	4413      	add	r3, r2
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	695a      	ldr	r2, [r3, #20]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d901      	bls.n	800cb8e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e06b      	b.n	800cc66 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	691a      	ldr	r2, [r3, #16]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	695b      	ldr	r3, [r3, #20]
 800cb96:	1ad3      	subs	r3, r2, r3
 800cb98:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	69fa      	ldr	r2, [r7, #28]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d902      	bls.n	800cbaa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	3303      	adds	r3, #3
 800cbae:	089b      	lsrs	r3, r3, #2
 800cbb0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cbb2:	e02a      	b.n	800cc0a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	691a      	ldr	r2, [r3, #16]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	695b      	ldr	r3, [r3, #20]
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	69fa      	ldr	r2, [r7, #28]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d902      	bls.n	800cbd0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	3303      	adds	r3, #3
 800cbd4:	089b      	lsrs	r3, r3, #2
 800cbd6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	68d9      	ldr	r1, [r3, #12]
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	4603      	mov	r3, r0
 800cbec:	6978      	ldr	r0, [r7, #20]
 800cbee:	f008 fd97 	bl	8015720 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	68da      	ldr	r2, [r3, #12]
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	441a      	add	r2, r3
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	695a      	ldr	r2, [r3, #20]
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	441a      	add	r2, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	015a      	lsls	r2, r3, #5
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	4413      	add	r3, r2
 800cc12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc16:	699b      	ldr	r3, [r3, #24]
 800cc18:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cc1a:	69ba      	ldr	r2, [r7, #24]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d809      	bhi.n	800cc34 <PCD_WriteEmptyTxFifo+0xde>
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	695a      	ldr	r2, [r3, #20]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d203      	bcs.n	800cc34 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	691b      	ldr	r3, [r3, #16]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1bf      	bne.n	800cbb4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	691a      	ldr	r2, [r3, #16]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	695b      	ldr	r3, [r3, #20]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d811      	bhi.n	800cc64 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	f003 030f 	and.w	r3, r3, #15
 800cc46:	2201      	movs	r2, #1
 800cc48:	fa02 f303 	lsl.w	r3, r2, r3
 800cc4c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	43db      	mvns	r3, r3
 800cc5a:	6939      	ldr	r1, [r7, #16]
 800cc5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cc60:	4013      	ands	r3, r2
 800cc62:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3720      	adds	r7, #32
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b088      	sub	sp, #32
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	333c      	adds	r3, #60	@ 0x3c
 800cc88:	3304      	adds	r3, #4
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	015a      	lsls	r2, r3, #5
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	4413      	add	r3, r2
 800cc96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	799b      	ldrb	r3, [r3, #6]
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d17b      	bne.n	800cd9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	f003 0308 	and.w	r3, r3, #8
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d015      	beq.n	800ccdc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	4a61      	ldr	r2, [pc, #388]	@ (800ce38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	f240 80b9 	bls.w	800ce2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f000 80b3 	beq.w	800ce2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	015a      	lsls	r2, r3, #5
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	4413      	add	r3, r2
 800ccce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccd8:	6093      	str	r3, [r2, #8]
 800ccda:	e0a7      	b.n	800ce2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	f003 0320 	and.w	r3, r3, #32
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d009      	beq.n	800ccfa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	015a      	lsls	r2, r3, #5
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	4413      	add	r3, r2
 800ccee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	2320      	movs	r3, #32
 800ccf6:	6093      	str	r3, [r2, #8]
 800ccf8:	e098      	b.n	800ce2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f040 8093 	bne.w	800ce2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	4a4b      	ldr	r2, [pc, #300]	@ (800ce38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d90f      	bls.n	800cd2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00a      	beq.n	800cd2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	015a      	lsls	r2, r3, #5
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	4413      	add	r3, r2
 800cd20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd24:	461a      	mov	r2, r3
 800cd26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd2a:	6093      	str	r3, [r2, #8]
 800cd2c:	e07e      	b.n	800ce2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800cd2e:	683a      	ldr	r2, [r7, #0]
 800cd30:	4613      	mov	r3, r2
 800cd32:	00db      	lsls	r3, r3, #3
 800cd34:	4413      	add	r3, r2
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	4413      	add	r3, r2
 800cd40:	3304      	adds	r3, #4
 800cd42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6a1a      	ldr	r2, [r3, #32]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	0159      	lsls	r1, r3, #5
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	440b      	add	r3, r1
 800cd50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd54:	691b      	ldr	r3, [r3, #16]
 800cd56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd5a:	1ad2      	subs	r2, r2, r3
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d114      	bne.n	800cd90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d109      	bne.n	800cd82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6818      	ldr	r0, [r3, #0]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cd78:	461a      	mov	r2, r3
 800cd7a:	2101      	movs	r1, #1
 800cd7c:	f008 ff68 	bl	8015c50 <USB_EP0_OutStart>
 800cd80:	e006      	b.n	800cd90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	68da      	ldr	r2, [r3, #12]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	695b      	ldr	r3, [r3, #20]
 800cd8a:	441a      	add	r2, r3
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	4619      	mov	r1, r3
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f00b fa4e 	bl	8018238 <HAL_PCD_DataOutStageCallback>
 800cd9c:	e046      	b.n	800ce2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	4a26      	ldr	r2, [pc, #152]	@ (800ce3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d124      	bne.n	800cdf0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00a      	beq.n	800cdc6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	015a      	lsls	r2, r3, #5
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cdc2:	6093      	str	r3, [r2, #8]
 800cdc4:	e032      	b.n	800ce2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	f003 0320 	and.w	r3, r3, #32
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d008      	beq.n	800cde2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	015a      	lsls	r2, r3, #5
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cddc:	461a      	mov	r2, r3
 800cdde:	2320      	movs	r3, #32
 800cde0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	4619      	mov	r1, r3
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f00b fa25 	bl	8018238 <HAL_PCD_DataOutStageCallback>
 800cdee:	e01d      	b.n	800ce2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d114      	bne.n	800ce20 <PCD_EP_OutXfrComplete_int+0x1b0>
 800cdf6:	6879      	ldr	r1, [r7, #4]
 800cdf8:	683a      	ldr	r2, [r7, #0]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	00db      	lsls	r3, r3, #3
 800cdfe:	4413      	add	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	440b      	add	r3, r1
 800ce04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d108      	bne.n	800ce20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6818      	ldr	r0, [r3, #0]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ce18:	461a      	mov	r2, r3
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	f008 ff18 	bl	8015c50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	4619      	mov	r1, r3
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f00b fa06 	bl	8018238 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3720      	adds	r7, #32
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	4f54300a 	.word	0x4f54300a
 800ce3c:	4f54310a 	.word	0x4f54310a

0800ce40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	333c      	adds	r3, #60	@ 0x3c
 800ce58:	3304      	adds	r3, #4
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	015a      	lsls	r2, r3, #5
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	4413      	add	r3, r2
 800ce66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	4a15      	ldr	r2, [pc, #84]	@ (800cec8 <PCD_EP_OutSetupPacket_int+0x88>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d90e      	bls.n	800ce94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d009      	beq.n	800ce94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	015a      	lsls	r2, r3, #5
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	4413      	add	r3, r2
 800ce88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f00b f9bd 	bl	8018214 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	4a0a      	ldr	r2, [pc, #40]	@ (800cec8 <PCD_EP_OutSetupPacket_int+0x88>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d90c      	bls.n	800cebc <PCD_EP_OutSetupPacket_int+0x7c>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	799b      	ldrb	r3, [r3, #6]
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d108      	bne.n	800cebc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6818      	ldr	r0, [r3, #0]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	2101      	movs	r1, #1
 800ceb8:	f008 feca 	bl	8015c50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3718      	adds	r7, #24
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	4f54300a 	.word	0x4f54300a

0800cecc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cecc:	b480      	push	{r7}
 800cece:	b085      	sub	sp, #20
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	460b      	mov	r3, r1
 800ced6:	70fb      	strb	r3, [r7, #3]
 800ced8:	4613      	mov	r3, r2
 800ceda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cee2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800cee4:	78fb      	ldrb	r3, [r7, #3]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d107      	bne.n	800cefa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ceea:	883b      	ldrh	r3, [r7, #0]
 800ceec:	0419      	lsls	r1, r3, #16
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	68ba      	ldr	r2, [r7, #8]
 800cef4:	430a      	orrs	r2, r1
 800cef6:	629a      	str	r2, [r3, #40]	@ 0x28
 800cef8:	e028      	b.n	800cf4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf00:	0c1b      	lsrs	r3, r3, #16
 800cf02:	68ba      	ldr	r2, [r7, #8]
 800cf04:	4413      	add	r3, r2
 800cf06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cf08:	2300      	movs	r3, #0
 800cf0a:	73fb      	strb	r3, [r7, #15]
 800cf0c:	e00d      	b.n	800cf2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
 800cf14:	3340      	adds	r3, #64	@ 0x40
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	4413      	add	r3, r2
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	0c1b      	lsrs	r3, r3, #16
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	4413      	add	r3, r2
 800cf22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cf24:	7bfb      	ldrb	r3, [r7, #15]
 800cf26:	3301      	adds	r3, #1
 800cf28:	73fb      	strb	r3, [r7, #15]
 800cf2a:	7bfa      	ldrb	r2, [r7, #15]
 800cf2c:	78fb      	ldrb	r3, [r7, #3]
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d3ec      	bcc.n	800cf0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800cf34:	883b      	ldrh	r3, [r7, #0]
 800cf36:	0418      	lsls	r0, r3, #16
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6819      	ldr	r1, [r3, #0]
 800cf3c:	78fb      	ldrb	r3, [r7, #3]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	4302      	orrs	r2, r0
 800cf44:	3340      	adds	r3, #64	@ 0x40
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	440b      	add	r3, r1
 800cf4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3714      	adds	r7, #20
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr

0800cf5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800cf5a:	b480      	push	{r7}
 800cf5c:	b083      	sub	sp, #12
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
 800cf62:	460b      	mov	r3, r1
 800cf64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	887a      	ldrh	r2, [r7, #2]
 800cf6c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	699b      	ldr	r3, [r3, #24]
 800cf9e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cfaa:	4b05      	ldr	r3, [pc, #20]	@ (800cfc0 <HAL_PCDEx_ActivateLPM+0x44>)
 800cfac:	4313      	orrs	r3, r2
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3714      	adds	r7, #20
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr
 800cfc0:	10000003 	.word	0x10000003

0800cfc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	460b      	mov	r3, r1
 800cfce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800cfe4:	4b19      	ldr	r3, [pc, #100]	@ (800d04c <HAL_PWREx_ConfigSupply+0x70>)
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	f003 0304 	and.w	r3, r3, #4
 800cfec:	2b04      	cmp	r3, #4
 800cfee:	d00a      	beq.n	800d006 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800cff0:	4b16      	ldr	r3, [pc, #88]	@ (800d04c <HAL_PWREx_ConfigSupply+0x70>)
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	f003 0307 	and.w	r3, r3, #7
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d001      	beq.n	800d002 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	e01f      	b.n	800d042 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d002:	2300      	movs	r3, #0
 800d004:	e01d      	b.n	800d042 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d006:	4b11      	ldr	r3, [pc, #68]	@ (800d04c <HAL_PWREx_ConfigSupply+0x70>)
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	f023 0207 	bic.w	r2, r3, #7
 800d00e:	490f      	ldr	r1, [pc, #60]	@ (800d04c <HAL_PWREx_ConfigSupply+0x70>)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4313      	orrs	r3, r2
 800d014:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d016:	f7fa f963 	bl	80072e0 <HAL_GetTick>
 800d01a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d01c:	e009      	b.n	800d032 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d01e:	f7fa f95f 	bl	80072e0 <HAL_GetTick>
 800d022:	4602      	mov	r2, r0
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d02c:	d901      	bls.n	800d032 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	e007      	b.n	800d042 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d032:	4b06      	ldr	r3, [pc, #24]	@ (800d04c <HAL_PWREx_ConfigSupply+0x70>)
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d03a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d03e:	d1ee      	bne.n	800d01e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	58024800 	.word	0x58024800

0800d050 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d050:	b480      	push	{r7}
 800d052:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d054:	4b05      	ldr	r3, [pc, #20]	@ (800d06c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	4a04      	ldr	r2, [pc, #16]	@ (800d06c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d05a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d05e:	60d3      	str	r3, [r2, #12]
}
 800d060:	bf00      	nop
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop
 800d06c:	58024800 	.word	0x58024800

0800d070 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b08c      	sub	sp, #48	@ 0x30
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d101      	bne.n	800d082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	e3c8      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f003 0301 	and.w	r3, r3, #1
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f000 8087 	beq.w	800d19e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d090:	4b88      	ldr	r3, [pc, #544]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d092:	691b      	ldr	r3, [r3, #16]
 800d094:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d09a:	4b86      	ldr	r3, [pc, #536]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d09c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d09e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a2:	2b10      	cmp	r3, #16
 800d0a4:	d007      	beq.n	800d0b6 <HAL_RCC_OscConfig+0x46>
 800d0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a8:	2b18      	cmp	r3, #24
 800d0aa:	d110      	bne.n	800d0ce <HAL_RCC_OscConfig+0x5e>
 800d0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ae:	f003 0303 	and.w	r3, r3, #3
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	d10b      	bne.n	800d0ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d0b6:	4b7f      	ldr	r3, [pc, #508]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d06c      	beq.n	800d19c <HAL_RCC_OscConfig+0x12c>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d168      	bne.n	800d19c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e3a2      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0d6:	d106      	bne.n	800d0e6 <HAL_RCC_OscConfig+0x76>
 800d0d8:	4b76      	ldr	r3, [pc, #472]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a75      	ldr	r2, [pc, #468]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d0de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0e2:	6013      	str	r3, [r2, #0]
 800d0e4:	e02e      	b.n	800d144 <HAL_RCC_OscConfig+0xd4>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10c      	bne.n	800d108 <HAL_RCC_OscConfig+0x98>
 800d0ee:	4b71      	ldr	r3, [pc, #452]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a70      	ldr	r2, [pc, #448]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d0f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d0f8:	6013      	str	r3, [r2, #0]
 800d0fa:	4b6e      	ldr	r3, [pc, #440]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a6d      	ldr	r2, [pc, #436]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d100:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d104:	6013      	str	r3, [r2, #0]
 800d106:	e01d      	b.n	800d144 <HAL_RCC_OscConfig+0xd4>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d110:	d10c      	bne.n	800d12c <HAL_RCC_OscConfig+0xbc>
 800d112:	4b68      	ldr	r3, [pc, #416]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4a67      	ldr	r2, [pc, #412]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d11c:	6013      	str	r3, [r2, #0]
 800d11e:	4b65      	ldr	r3, [pc, #404]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a64      	ldr	r2, [pc, #400]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d128:	6013      	str	r3, [r2, #0]
 800d12a:	e00b      	b.n	800d144 <HAL_RCC_OscConfig+0xd4>
 800d12c:	4b61      	ldr	r3, [pc, #388]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a60      	ldr	r2, [pc, #384]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d136:	6013      	str	r3, [r2, #0]
 800d138:	4b5e      	ldr	r3, [pc, #376]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a5d      	ldr	r2, [pc, #372]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d13e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d013      	beq.n	800d174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d14c:	f7fa f8c8 	bl	80072e0 <HAL_GetTick>
 800d150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d152:	e008      	b.n	800d166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d154:	f7fa f8c4 	bl	80072e0 <HAL_GetTick>
 800d158:	4602      	mov	r2, r0
 800d15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	2b64      	cmp	r3, #100	@ 0x64
 800d160:	d901      	bls.n	800d166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d162:	2303      	movs	r3, #3
 800d164:	e356      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d166:	4b53      	ldr	r3, [pc, #332]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d0f0      	beq.n	800d154 <HAL_RCC_OscConfig+0xe4>
 800d172:	e014      	b.n	800d19e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d174:	f7fa f8b4 	bl	80072e0 <HAL_GetTick>
 800d178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d17a:	e008      	b.n	800d18e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d17c:	f7fa f8b0 	bl	80072e0 <HAL_GetTick>
 800d180:	4602      	mov	r2, r0
 800d182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	2b64      	cmp	r3, #100	@ 0x64
 800d188:	d901      	bls.n	800d18e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d18a:	2303      	movs	r3, #3
 800d18c:	e342      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d18e:	4b49      	ldr	r3, [pc, #292]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d196:	2b00      	cmp	r3, #0
 800d198:	d1f0      	bne.n	800d17c <HAL_RCC_OscConfig+0x10c>
 800d19a:	e000      	b.n	800d19e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d19c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f003 0302 	and.w	r3, r3, #2
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f000 808c 	beq.w	800d2c4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1ac:	4b41      	ldr	r3, [pc, #260]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d1ae:	691b      	ldr	r3, [r3, #16]
 800d1b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d1b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d1b6:	4b3f      	ldr	r3, [pc, #252]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d1bc:	6a3b      	ldr	r3, [r7, #32]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d007      	beq.n	800d1d2 <HAL_RCC_OscConfig+0x162>
 800d1c2:	6a3b      	ldr	r3, [r7, #32]
 800d1c4:	2b18      	cmp	r3, #24
 800d1c6:	d137      	bne.n	800d238 <HAL_RCC_OscConfig+0x1c8>
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	f003 0303 	and.w	r3, r3, #3
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d132      	bne.n	800d238 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d1d2:	4b38      	ldr	r3, [pc, #224]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f003 0304 	and.w	r3, r3, #4
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d005      	beq.n	800d1ea <HAL_RCC_OscConfig+0x17a>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d101      	bne.n	800d1ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e314      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d1ea:	4b32      	ldr	r3, [pc, #200]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f023 0219 	bic.w	r2, r3, #25
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	492f      	ldr	r1, [pc, #188]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1fc:	f7fa f870 	bl	80072e0 <HAL_GetTick>
 800d200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d202:	e008      	b.n	800d216 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d204:	f7fa f86c 	bl	80072e0 <HAL_GetTick>
 800d208:	4602      	mov	r2, r0
 800d20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20c:	1ad3      	subs	r3, r2, r3
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d901      	bls.n	800d216 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800d212:	2303      	movs	r3, #3
 800d214:	e2fe      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d216:	4b27      	ldr	r3, [pc, #156]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f003 0304 	and.w	r3, r3, #4
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d0f0      	beq.n	800d204 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d222:	4b24      	ldr	r3, [pc, #144]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	061b      	lsls	r3, r3, #24
 800d230:	4920      	ldr	r1, [pc, #128]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d232:	4313      	orrs	r3, r2
 800d234:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d236:	e045      	b.n	800d2c4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d026      	beq.n	800d28e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d240:	4b1c      	ldr	r3, [pc, #112]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f023 0219 	bic.w	r2, r3, #25
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	4919      	ldr	r1, [pc, #100]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d24e:	4313      	orrs	r3, r2
 800d250:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d252:	f7fa f845 	bl	80072e0 <HAL_GetTick>
 800d256:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d258:	e008      	b.n	800d26c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d25a:	f7fa f841 	bl	80072e0 <HAL_GetTick>
 800d25e:	4602      	mov	r2, r0
 800d260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	2b02      	cmp	r3, #2
 800d266:	d901      	bls.n	800d26c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800d268:	2303      	movs	r3, #3
 800d26a:	e2d3      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d26c:	4b11      	ldr	r3, [pc, #68]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f003 0304 	and.w	r3, r3, #4
 800d274:	2b00      	cmp	r3, #0
 800d276:	d0f0      	beq.n	800d25a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d278:	4b0e      	ldr	r3, [pc, #56]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	061b      	lsls	r3, r3, #24
 800d286:	490b      	ldr	r1, [pc, #44]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d288:	4313      	orrs	r3, r2
 800d28a:	604b      	str	r3, [r1, #4]
 800d28c:	e01a      	b.n	800d2c4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d28e:	4b09      	ldr	r3, [pc, #36]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a08      	ldr	r2, [pc, #32]	@ (800d2b4 <HAL_RCC_OscConfig+0x244>)
 800d294:	f023 0301 	bic.w	r3, r3, #1
 800d298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d29a:	f7fa f821 	bl	80072e0 <HAL_GetTick>
 800d29e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d2a0:	e00a      	b.n	800d2b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d2a2:	f7fa f81d 	bl	80072e0 <HAL_GetTick>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d903      	bls.n	800d2b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	e2af      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
 800d2b4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d2b8:	4b96      	ldr	r3, [pc, #600]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f003 0304 	and.w	r3, r3, #4
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1ee      	bne.n	800d2a2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f003 0310 	and.w	r3, r3, #16
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d06a      	beq.n	800d3a6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d2d0:	4b90      	ldr	r3, [pc, #576]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d2d8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d2da:	4b8e      	ldr	r3, [pc, #568]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2de:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	2b08      	cmp	r3, #8
 800d2e4:	d007      	beq.n	800d2f6 <HAL_RCC_OscConfig+0x286>
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	2b18      	cmp	r3, #24
 800d2ea:	d11b      	bne.n	800d324 <HAL_RCC_OscConfig+0x2b4>
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	f003 0303 	and.w	r3, r3, #3
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d116      	bne.n	800d324 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d2f6:	4b87      	ldr	r3, [pc, #540]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d005      	beq.n	800d30e <HAL_RCC_OscConfig+0x29e>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	69db      	ldr	r3, [r3, #28]
 800d306:	2b80      	cmp	r3, #128	@ 0x80
 800d308:	d001      	beq.n	800d30e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800d30a:	2301      	movs	r3, #1
 800d30c:	e282      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d30e:	4b81      	ldr	r3, [pc, #516]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6a1b      	ldr	r3, [r3, #32]
 800d31a:	061b      	lsls	r3, r3, #24
 800d31c:	497d      	ldr	r1, [pc, #500]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d31e:	4313      	orrs	r3, r2
 800d320:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d322:	e040      	b.n	800d3a6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	69db      	ldr	r3, [r3, #28]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d023      	beq.n	800d374 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d32c:	4b79      	ldr	r3, [pc, #484]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a78      	ldr	r2, [pc, #480]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d338:	f7f9 ffd2 	bl	80072e0 <HAL_GetTick>
 800d33c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d33e:	e008      	b.n	800d352 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d340:	f7f9 ffce 	bl	80072e0 <HAL_GetTick>
 800d344:	4602      	mov	r2, r0
 800d346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d348:	1ad3      	subs	r3, r2, r3
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d901      	bls.n	800d352 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d34e:	2303      	movs	r3, #3
 800d350:	e260      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d352:	4b70      	ldr	r3, [pc, #448]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d0f0      	beq.n	800d340 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d35e:	4b6d      	ldr	r3, [pc, #436]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a1b      	ldr	r3, [r3, #32]
 800d36a:	061b      	lsls	r3, r3, #24
 800d36c:	4969      	ldr	r1, [pc, #420]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d36e:	4313      	orrs	r3, r2
 800d370:	60cb      	str	r3, [r1, #12]
 800d372:	e018      	b.n	800d3a6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d374:	4b67      	ldr	r3, [pc, #412]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a66      	ldr	r2, [pc, #408]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d37a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d37e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d380:	f7f9 ffae 	bl	80072e0 <HAL_GetTick>
 800d384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d386:	e008      	b.n	800d39a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d388:	f7f9 ffaa 	bl	80072e0 <HAL_GetTick>
 800d38c:	4602      	mov	r2, r0
 800d38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d390:	1ad3      	subs	r3, r2, r3
 800d392:	2b02      	cmp	r3, #2
 800d394:	d901      	bls.n	800d39a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800d396:	2303      	movs	r3, #3
 800d398:	e23c      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d39a:	4b5e      	ldr	r3, [pc, #376]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1f0      	bne.n	800d388 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f003 0308 	and.w	r3, r3, #8
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d036      	beq.n	800d420 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	695b      	ldr	r3, [r3, #20]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d019      	beq.n	800d3ee <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d3ba:	4b56      	ldr	r3, [pc, #344]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d3bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3be:	4a55      	ldr	r2, [pc, #340]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d3c0:	f043 0301 	orr.w	r3, r3, #1
 800d3c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3c6:	f7f9 ff8b 	bl	80072e0 <HAL_GetTick>
 800d3ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d3cc:	e008      	b.n	800d3e0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d3ce:	f7f9 ff87 	bl	80072e0 <HAL_GetTick>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d6:	1ad3      	subs	r3, r2, r3
 800d3d8:	2b02      	cmp	r3, #2
 800d3da:	d901      	bls.n	800d3e0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800d3dc:	2303      	movs	r3, #3
 800d3de:	e219      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d3e0:	4b4c      	ldr	r3, [pc, #304]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d3e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3e4:	f003 0302 	and.w	r3, r3, #2
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d0f0      	beq.n	800d3ce <HAL_RCC_OscConfig+0x35e>
 800d3ec:	e018      	b.n	800d420 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d3ee:	4b49      	ldr	r3, [pc, #292]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d3f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3f2:	4a48      	ldr	r2, [pc, #288]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d3f4:	f023 0301 	bic.w	r3, r3, #1
 800d3f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3fa:	f7f9 ff71 	bl	80072e0 <HAL_GetTick>
 800d3fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d400:	e008      	b.n	800d414 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d402:	f7f9 ff6d 	bl	80072e0 <HAL_GetTick>
 800d406:	4602      	mov	r2, r0
 800d408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d901      	bls.n	800d414 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800d410:	2303      	movs	r3, #3
 800d412:	e1ff      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d414:	4b3f      	ldr	r3, [pc, #252]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d418:	f003 0302 	and.w	r3, r3, #2
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1f0      	bne.n	800d402 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f003 0320 	and.w	r3, r3, #32
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d036      	beq.n	800d49a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	699b      	ldr	r3, [r3, #24]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d019      	beq.n	800d468 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d434:	4b37      	ldr	r3, [pc, #220]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a36      	ldr	r2, [pc, #216]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d43a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d43e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d440:	f7f9 ff4e 	bl	80072e0 <HAL_GetTick>
 800d444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d446:	e008      	b.n	800d45a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d448:	f7f9 ff4a 	bl	80072e0 <HAL_GetTick>
 800d44c:	4602      	mov	r2, r0
 800d44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d450:	1ad3      	subs	r3, r2, r3
 800d452:	2b02      	cmp	r3, #2
 800d454:	d901      	bls.n	800d45a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800d456:	2303      	movs	r3, #3
 800d458:	e1dc      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d45a:	4b2e      	ldr	r3, [pc, #184]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d462:	2b00      	cmp	r3, #0
 800d464:	d0f0      	beq.n	800d448 <HAL_RCC_OscConfig+0x3d8>
 800d466:	e018      	b.n	800d49a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d468:	4b2a      	ldr	r3, [pc, #168]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a29      	ldr	r2, [pc, #164]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d46e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d472:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d474:	f7f9 ff34 	bl	80072e0 <HAL_GetTick>
 800d478:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d47a:	e008      	b.n	800d48e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d47c:	f7f9 ff30 	bl	80072e0 <HAL_GetTick>
 800d480:	4602      	mov	r2, r0
 800d482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d484:	1ad3      	subs	r3, r2, r3
 800d486:	2b02      	cmp	r3, #2
 800d488:	d901      	bls.n	800d48e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800d48a:	2303      	movs	r3, #3
 800d48c:	e1c2      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d48e:	4b21      	ldr	r3, [pc, #132]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1f0      	bne.n	800d47c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f003 0304 	and.w	r3, r3, #4
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	f000 8086 	beq.w	800d5b4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d4a8:	4b1b      	ldr	r3, [pc, #108]	@ (800d518 <HAL_RCC_OscConfig+0x4a8>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a1a      	ldr	r2, [pc, #104]	@ (800d518 <HAL_RCC_OscConfig+0x4a8>)
 800d4ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d4b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d4b4:	f7f9 ff14 	bl	80072e0 <HAL_GetTick>
 800d4b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d4ba:	e008      	b.n	800d4ce <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d4bc:	f7f9 ff10 	bl	80072e0 <HAL_GetTick>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c4:	1ad3      	subs	r3, r2, r3
 800d4c6:	2b64      	cmp	r3, #100	@ 0x64
 800d4c8:	d901      	bls.n	800d4ce <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800d4ca:	2303      	movs	r3, #3
 800d4cc:	e1a2      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d4ce:	4b12      	ldr	r3, [pc, #72]	@ (800d518 <HAL_RCC_OscConfig+0x4a8>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d0f0      	beq.n	800d4bc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d106      	bne.n	800d4f0 <HAL_RCC_OscConfig+0x480>
 800d4e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d4e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4e6:	4a0b      	ldr	r2, [pc, #44]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d4e8:	f043 0301 	orr.w	r3, r3, #1
 800d4ec:	6713      	str	r3, [r2, #112]	@ 0x70
 800d4ee:	e032      	b.n	800d556 <HAL_RCC_OscConfig+0x4e6>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d111      	bne.n	800d51c <HAL_RCC_OscConfig+0x4ac>
 800d4f8:	4b06      	ldr	r3, [pc, #24]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d4fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4fc:	4a05      	ldr	r2, [pc, #20]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d4fe:	f023 0301 	bic.w	r3, r3, #1
 800d502:	6713      	str	r3, [r2, #112]	@ 0x70
 800d504:	4b03      	ldr	r3, [pc, #12]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d508:	4a02      	ldr	r2, [pc, #8]	@ (800d514 <HAL_RCC_OscConfig+0x4a4>)
 800d50a:	f023 0304 	bic.w	r3, r3, #4
 800d50e:	6713      	str	r3, [r2, #112]	@ 0x70
 800d510:	e021      	b.n	800d556 <HAL_RCC_OscConfig+0x4e6>
 800d512:	bf00      	nop
 800d514:	58024400 	.word	0x58024400
 800d518:	58024800 	.word	0x58024800
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	2b05      	cmp	r3, #5
 800d522:	d10c      	bne.n	800d53e <HAL_RCC_OscConfig+0x4ce>
 800d524:	4b83      	ldr	r3, [pc, #524]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d528:	4a82      	ldr	r2, [pc, #520]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d52a:	f043 0304 	orr.w	r3, r3, #4
 800d52e:	6713      	str	r3, [r2, #112]	@ 0x70
 800d530:	4b80      	ldr	r3, [pc, #512]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d534:	4a7f      	ldr	r2, [pc, #508]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d536:	f043 0301 	orr.w	r3, r3, #1
 800d53a:	6713      	str	r3, [r2, #112]	@ 0x70
 800d53c:	e00b      	b.n	800d556 <HAL_RCC_OscConfig+0x4e6>
 800d53e:	4b7d      	ldr	r3, [pc, #500]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d542:	4a7c      	ldr	r2, [pc, #496]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d544:	f023 0301 	bic.w	r3, r3, #1
 800d548:	6713      	str	r3, [r2, #112]	@ 0x70
 800d54a:	4b7a      	ldr	r3, [pc, #488]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d54c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d54e:	4a79      	ldr	r2, [pc, #484]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d550:	f023 0304 	bic.w	r3, r3, #4
 800d554:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d015      	beq.n	800d58a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d55e:	f7f9 febf 	bl	80072e0 <HAL_GetTick>
 800d562:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d564:	e00a      	b.n	800d57c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d566:	f7f9 febb 	bl	80072e0 <HAL_GetTick>
 800d56a:	4602      	mov	r2, r0
 800d56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56e:	1ad3      	subs	r3, r2, r3
 800d570:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d574:	4293      	cmp	r3, r2
 800d576:	d901      	bls.n	800d57c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800d578:	2303      	movs	r3, #3
 800d57a:	e14b      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d57c:	4b6d      	ldr	r3, [pc, #436]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d57e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d580:	f003 0302 	and.w	r3, r3, #2
 800d584:	2b00      	cmp	r3, #0
 800d586:	d0ee      	beq.n	800d566 <HAL_RCC_OscConfig+0x4f6>
 800d588:	e014      	b.n	800d5b4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d58a:	f7f9 fea9 	bl	80072e0 <HAL_GetTick>
 800d58e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d590:	e00a      	b.n	800d5a8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d592:	f7f9 fea5 	bl	80072e0 <HAL_GetTick>
 800d596:	4602      	mov	r2, r0
 800d598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d901      	bls.n	800d5a8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800d5a4:	2303      	movs	r3, #3
 800d5a6:	e135      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d5a8:	4b62      	ldr	r3, [pc, #392]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d5aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5ac:	f003 0302 	and.w	r3, r3, #2
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1ee      	bne.n	800d592 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	f000 812a 	beq.w	800d812 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d5be:	4b5d      	ldr	r3, [pc, #372]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d5c6:	2b18      	cmp	r3, #24
 800d5c8:	f000 80ba 	beq.w	800d740 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	f040 8095 	bne.w	800d700 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d5d6:	4b57      	ldr	r3, [pc, #348]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a56      	ldr	r2, [pc, #344]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d5dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d5e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5e2:	f7f9 fe7d 	bl	80072e0 <HAL_GetTick>
 800d5e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d5e8:	e008      	b.n	800d5fc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d5ea:	f7f9 fe79 	bl	80072e0 <HAL_GetTick>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	d901      	bls.n	800d5fc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800d5f8:	2303      	movs	r3, #3
 800d5fa:	e10b      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d5fc:	4b4d      	ldr	r3, [pc, #308]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d604:	2b00      	cmp	r3, #0
 800d606:	d1f0      	bne.n	800d5ea <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d608:	4b4a      	ldr	r3, [pc, #296]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d60a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d60c:	4b4a      	ldr	r3, [pc, #296]	@ (800d738 <HAL_RCC_OscConfig+0x6c8>)
 800d60e:	4013      	ands	r3, r2
 800d610:	687a      	ldr	r2, [r7, #4]
 800d612:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d618:	0112      	lsls	r2, r2, #4
 800d61a:	430a      	orrs	r2, r1
 800d61c:	4945      	ldr	r1, [pc, #276]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d61e:	4313      	orrs	r3, r2
 800d620:	628b      	str	r3, [r1, #40]	@ 0x28
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d626:	3b01      	subs	r3, #1
 800d628:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d630:	3b01      	subs	r3, #1
 800d632:	025b      	lsls	r3, r3, #9
 800d634:	b29b      	uxth	r3, r3
 800d636:	431a      	orrs	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d63c:	3b01      	subs	r3, #1
 800d63e:	041b      	lsls	r3, r3, #16
 800d640:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d644:	431a      	orrs	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d64a:	3b01      	subs	r3, #1
 800d64c:	061b      	lsls	r3, r3, #24
 800d64e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d652:	4938      	ldr	r1, [pc, #224]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d654:	4313      	orrs	r3, r2
 800d656:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d658:	4b36      	ldr	r3, [pc, #216]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d65c:	4a35      	ldr	r2, [pc, #212]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d65e:	f023 0301 	bic.w	r3, r3, #1
 800d662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d664:	4b33      	ldr	r3, [pc, #204]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d668:	4b34      	ldr	r3, [pc, #208]	@ (800d73c <HAL_RCC_OscConfig+0x6cc>)
 800d66a:	4013      	ands	r3, r2
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d670:	00d2      	lsls	r2, r2, #3
 800d672:	4930      	ldr	r1, [pc, #192]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d674:	4313      	orrs	r3, r2
 800d676:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d678:	4b2e      	ldr	r3, [pc, #184]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d67c:	f023 020c 	bic.w	r2, r3, #12
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d684:	492b      	ldr	r1, [pc, #172]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d686:	4313      	orrs	r3, r2
 800d688:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d68a:	4b2a      	ldr	r3, [pc, #168]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d68e:	f023 0202 	bic.w	r2, r3, #2
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d696:	4927      	ldr	r1, [pc, #156]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d698:	4313      	orrs	r3, r2
 800d69a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d69c:	4b25      	ldr	r3, [pc, #148]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6a0:	4a24      	ldr	r2, [pc, #144]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d6a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d6a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d6a8:	4b22      	ldr	r3, [pc, #136]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ac:	4a21      	ldr	r2, [pc, #132]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d6ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d6b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d6b4:	4b1f      	ldr	r3, [pc, #124]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6b8:	4a1e      	ldr	r2, [pc, #120]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d6ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d6be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d6c0:	4b1c      	ldr	r3, [pc, #112]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6c4:	4a1b      	ldr	r2, [pc, #108]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d6c6:	f043 0301 	orr.w	r3, r3, #1
 800d6ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d6cc:	4b19      	ldr	r3, [pc, #100]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a18      	ldr	r2, [pc, #96]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d6d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d6d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6d8:	f7f9 fe02 	bl	80072e0 <HAL_GetTick>
 800d6dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d6de:	e008      	b.n	800d6f2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d6e0:	f7f9 fdfe 	bl	80072e0 <HAL_GetTick>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d901      	bls.n	800d6f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d6ee:	2303      	movs	r3, #3
 800d6f0:	e090      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d6f2:	4b10      	ldr	r3, [pc, #64]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d0f0      	beq.n	800d6e0 <HAL_RCC_OscConfig+0x670>
 800d6fe:	e088      	b.n	800d812 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d700:	4b0c      	ldr	r3, [pc, #48]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a0b      	ldr	r2, [pc, #44]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d70a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d70c:	f7f9 fde8 	bl	80072e0 <HAL_GetTick>
 800d710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d712:	e008      	b.n	800d726 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d714:	f7f9 fde4 	bl	80072e0 <HAL_GetTick>
 800d718:	4602      	mov	r2, r0
 800d71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	2b02      	cmp	r3, #2
 800d720:	d901      	bls.n	800d726 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d722:	2303      	movs	r3, #3
 800d724:	e076      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d726:	4b03      	ldr	r3, [pc, #12]	@ (800d734 <HAL_RCC_OscConfig+0x6c4>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1f0      	bne.n	800d714 <HAL_RCC_OscConfig+0x6a4>
 800d732:	e06e      	b.n	800d812 <HAL_RCC_OscConfig+0x7a2>
 800d734:	58024400 	.word	0x58024400
 800d738:	fffffc0c 	.word	0xfffffc0c
 800d73c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d740:	4b36      	ldr	r3, [pc, #216]	@ (800d81c <HAL_RCC_OscConfig+0x7ac>)
 800d742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d744:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d746:	4b35      	ldr	r3, [pc, #212]	@ (800d81c <HAL_RCC_OscConfig+0x7ac>)
 800d748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d74a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d750:	2b01      	cmp	r3, #1
 800d752:	d031      	beq.n	800d7b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	f003 0203 	and.w	r2, r3, #3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d75e:	429a      	cmp	r2, r3
 800d760:	d12a      	bne.n	800d7b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	091b      	lsrs	r3, r3, #4
 800d766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d76e:	429a      	cmp	r2, r3
 800d770:	d122      	bne.n	800d7b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d77c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d77e:	429a      	cmp	r2, r3
 800d780:	d11a      	bne.n	800d7b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	0a5b      	lsrs	r3, r3, #9
 800d786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d78e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d790:	429a      	cmp	r2, r3
 800d792:	d111      	bne.n	800d7b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	0c1b      	lsrs	r3, r3, #16
 800d798:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d108      	bne.n	800d7b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	0e1b      	lsrs	r3, r3, #24
 800d7aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d001      	beq.n	800d7bc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	e02b      	b.n	800d814 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d7bc:	4b17      	ldr	r3, [pc, #92]	@ (800d81c <HAL_RCC_OscConfig+0x7ac>)
 800d7be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7c0:	08db      	lsrs	r3, r3, #3
 800d7c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d7c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d7cc:	693a      	ldr	r2, [r7, #16]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d01f      	beq.n	800d812 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d7d2:	4b12      	ldr	r3, [pc, #72]	@ (800d81c <HAL_RCC_OscConfig+0x7ac>)
 800d7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7d6:	4a11      	ldr	r2, [pc, #68]	@ (800d81c <HAL_RCC_OscConfig+0x7ac>)
 800d7d8:	f023 0301 	bic.w	r3, r3, #1
 800d7dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d7de:	f7f9 fd7f 	bl	80072e0 <HAL_GetTick>
 800d7e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d7e4:	bf00      	nop
 800d7e6:	f7f9 fd7b 	bl	80072e0 <HAL_GetTick>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d0f9      	beq.n	800d7e6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d7f2:	4b0a      	ldr	r3, [pc, #40]	@ (800d81c <HAL_RCC_OscConfig+0x7ac>)
 800d7f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d7f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d820 <HAL_RCC_OscConfig+0x7b0>)
 800d7f8:	4013      	ands	r3, r2
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d7fe:	00d2      	lsls	r2, r2, #3
 800d800:	4906      	ldr	r1, [pc, #24]	@ (800d81c <HAL_RCC_OscConfig+0x7ac>)
 800d802:	4313      	orrs	r3, r2
 800d804:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d806:	4b05      	ldr	r3, [pc, #20]	@ (800d81c <HAL_RCC_OscConfig+0x7ac>)
 800d808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d80a:	4a04      	ldr	r2, [pc, #16]	@ (800d81c <HAL_RCC_OscConfig+0x7ac>)
 800d80c:	f043 0301 	orr.w	r3, r3, #1
 800d810:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d812:	2300      	movs	r3, #0
}
 800d814:	4618      	mov	r0, r3
 800d816:	3730      	adds	r7, #48	@ 0x30
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	58024400 	.word	0x58024400
 800d820:	ffff0007 	.word	0xffff0007

0800d824 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d101      	bne.n	800d838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d834:	2301      	movs	r3, #1
 800d836:	e19c      	b.n	800db72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d838:	4b8a      	ldr	r3, [pc, #552]	@ (800da64 <HAL_RCC_ClockConfig+0x240>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f003 030f 	and.w	r3, r3, #15
 800d840:	683a      	ldr	r2, [r7, #0]
 800d842:	429a      	cmp	r2, r3
 800d844:	d910      	bls.n	800d868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d846:	4b87      	ldr	r3, [pc, #540]	@ (800da64 <HAL_RCC_ClockConfig+0x240>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f023 020f 	bic.w	r2, r3, #15
 800d84e:	4985      	ldr	r1, [pc, #532]	@ (800da64 <HAL_RCC_ClockConfig+0x240>)
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	4313      	orrs	r3, r2
 800d854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d856:	4b83      	ldr	r3, [pc, #524]	@ (800da64 <HAL_RCC_ClockConfig+0x240>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f003 030f 	and.w	r3, r3, #15
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	429a      	cmp	r2, r3
 800d862:	d001      	beq.n	800d868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d864:	2301      	movs	r3, #1
 800d866:	e184      	b.n	800db72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f003 0304 	and.w	r3, r3, #4
 800d870:	2b00      	cmp	r3, #0
 800d872:	d010      	beq.n	800d896 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	691a      	ldr	r2, [r3, #16]
 800d878:	4b7b      	ldr	r3, [pc, #492]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d87a:	699b      	ldr	r3, [r3, #24]
 800d87c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d880:	429a      	cmp	r2, r3
 800d882:	d908      	bls.n	800d896 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d884:	4b78      	ldr	r3, [pc, #480]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d886:	699b      	ldr	r3, [r3, #24]
 800d888:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	691b      	ldr	r3, [r3, #16]
 800d890:	4975      	ldr	r1, [pc, #468]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d892:	4313      	orrs	r3, r2
 800d894:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f003 0308 	and.w	r3, r3, #8
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d010      	beq.n	800d8c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	695a      	ldr	r2, [r3, #20]
 800d8a6:	4b70      	ldr	r3, [pc, #448]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d8a8:	69db      	ldr	r3, [r3, #28]
 800d8aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d908      	bls.n	800d8c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d8b2:	4b6d      	ldr	r3, [pc, #436]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d8b4:	69db      	ldr	r3, [r3, #28]
 800d8b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	695b      	ldr	r3, [r3, #20]
 800d8be:	496a      	ldr	r1, [pc, #424]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f003 0310 	and.w	r3, r3, #16
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d010      	beq.n	800d8f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	699a      	ldr	r2, [r3, #24]
 800d8d4:	4b64      	ldr	r3, [pc, #400]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d8d6:	69db      	ldr	r3, [r3, #28]
 800d8d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d908      	bls.n	800d8f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d8e0:	4b61      	ldr	r3, [pc, #388]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d8e2:	69db      	ldr	r3, [r3, #28]
 800d8e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	495e      	ldr	r1, [pc, #376]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f003 0320 	and.w	r3, r3, #32
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d010      	beq.n	800d920 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	69da      	ldr	r2, [r3, #28]
 800d902:	4b59      	ldr	r3, [pc, #356]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d904:	6a1b      	ldr	r3, [r3, #32]
 800d906:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d908      	bls.n	800d920 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d90e:	4b56      	ldr	r3, [pc, #344]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d910:	6a1b      	ldr	r3, [r3, #32]
 800d912:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	69db      	ldr	r3, [r3, #28]
 800d91a:	4953      	ldr	r1, [pc, #332]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d91c:	4313      	orrs	r3, r2
 800d91e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f003 0302 	and.w	r3, r3, #2
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d010      	beq.n	800d94e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	68da      	ldr	r2, [r3, #12]
 800d930:	4b4d      	ldr	r3, [pc, #308]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d932:	699b      	ldr	r3, [r3, #24]
 800d934:	f003 030f 	and.w	r3, r3, #15
 800d938:	429a      	cmp	r2, r3
 800d93a:	d908      	bls.n	800d94e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d93c:	4b4a      	ldr	r3, [pc, #296]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d93e:	699b      	ldr	r3, [r3, #24]
 800d940:	f023 020f 	bic.w	r2, r3, #15
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	4947      	ldr	r1, [pc, #284]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d94a:	4313      	orrs	r3, r2
 800d94c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f003 0301 	and.w	r3, r3, #1
 800d956:	2b00      	cmp	r3, #0
 800d958:	d055      	beq.n	800da06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d95a:	4b43      	ldr	r3, [pc, #268]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	4940      	ldr	r1, [pc, #256]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d968:	4313      	orrs	r3, r2
 800d96a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	2b02      	cmp	r3, #2
 800d972:	d107      	bne.n	800d984 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d974:	4b3c      	ldr	r3, [pc, #240]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d121      	bne.n	800d9c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d980:	2301      	movs	r3, #1
 800d982:	e0f6      	b.n	800db72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	2b03      	cmp	r3, #3
 800d98a:	d107      	bne.n	800d99c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d98c:	4b36      	ldr	r3, [pc, #216]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d115      	bne.n	800d9c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d998:	2301      	movs	r3, #1
 800d99a:	e0ea      	b.n	800db72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d107      	bne.n	800d9b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d9a4:	4b30      	ldr	r3, [pc, #192]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d109      	bne.n	800d9c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	e0de      	b.n	800db72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d9b4:	4b2c      	ldr	r3, [pc, #176]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f003 0304 	and.w	r3, r3, #4
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d101      	bne.n	800d9c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e0d6      	b.n	800db72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d9c4:	4b28      	ldr	r3, [pc, #160]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d9c6:	691b      	ldr	r3, [r3, #16]
 800d9c8:	f023 0207 	bic.w	r2, r3, #7
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	4925      	ldr	r1, [pc, #148]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9d6:	f7f9 fc83 	bl	80072e0 <HAL_GetTick>
 800d9da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d9dc:	e00a      	b.n	800d9f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d9de:	f7f9 fc7f 	bl	80072e0 <HAL_GetTick>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d901      	bls.n	800d9f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d9f0:	2303      	movs	r3, #3
 800d9f2:	e0be      	b.n	800db72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d9f4:	4b1c      	ldr	r3, [pc, #112]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	00db      	lsls	r3, r3, #3
 800da02:	429a      	cmp	r2, r3
 800da04:	d1eb      	bne.n	800d9de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f003 0302 	and.w	r3, r3, #2
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d010      	beq.n	800da34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	68da      	ldr	r2, [r3, #12]
 800da16:	4b14      	ldr	r3, [pc, #80]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800da18:	699b      	ldr	r3, [r3, #24]
 800da1a:	f003 030f 	and.w	r3, r3, #15
 800da1e:	429a      	cmp	r2, r3
 800da20:	d208      	bcs.n	800da34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800da22:	4b11      	ldr	r3, [pc, #68]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	f023 020f 	bic.w	r2, r3, #15
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	490e      	ldr	r1, [pc, #56]	@ (800da68 <HAL_RCC_ClockConfig+0x244>)
 800da30:	4313      	orrs	r3, r2
 800da32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800da34:	4b0b      	ldr	r3, [pc, #44]	@ (800da64 <HAL_RCC_ClockConfig+0x240>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f003 030f 	and.w	r3, r3, #15
 800da3c:	683a      	ldr	r2, [r7, #0]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d214      	bcs.n	800da6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da42:	4b08      	ldr	r3, [pc, #32]	@ (800da64 <HAL_RCC_ClockConfig+0x240>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f023 020f 	bic.w	r2, r3, #15
 800da4a:	4906      	ldr	r1, [pc, #24]	@ (800da64 <HAL_RCC_ClockConfig+0x240>)
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	4313      	orrs	r3, r2
 800da50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da52:	4b04      	ldr	r3, [pc, #16]	@ (800da64 <HAL_RCC_ClockConfig+0x240>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f003 030f 	and.w	r3, r3, #15
 800da5a:	683a      	ldr	r2, [r7, #0]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d005      	beq.n	800da6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800da60:	2301      	movs	r3, #1
 800da62:	e086      	b.n	800db72 <HAL_RCC_ClockConfig+0x34e>
 800da64:	52002000 	.word	0x52002000
 800da68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f003 0304 	and.w	r3, r3, #4
 800da74:	2b00      	cmp	r3, #0
 800da76:	d010      	beq.n	800da9a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	691a      	ldr	r2, [r3, #16]
 800da7c:	4b3f      	ldr	r3, [pc, #252]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800da84:	429a      	cmp	r2, r3
 800da86:	d208      	bcs.n	800da9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800da88:	4b3c      	ldr	r3, [pc, #240]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800da8a:	699b      	ldr	r3, [r3, #24]
 800da8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	691b      	ldr	r3, [r3, #16]
 800da94:	4939      	ldr	r1, [pc, #228]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800da96:	4313      	orrs	r3, r2
 800da98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f003 0308 	and.w	r3, r3, #8
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d010      	beq.n	800dac8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	695a      	ldr	r2, [r3, #20]
 800daaa:	4b34      	ldr	r3, [pc, #208]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800daac:	69db      	ldr	r3, [r3, #28]
 800daae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d208      	bcs.n	800dac8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dab6:	4b31      	ldr	r3, [pc, #196]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800dab8:	69db      	ldr	r3, [r3, #28]
 800daba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	695b      	ldr	r3, [r3, #20]
 800dac2:	492e      	ldr	r1, [pc, #184]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800dac4:	4313      	orrs	r3, r2
 800dac6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f003 0310 	and.w	r3, r3, #16
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d010      	beq.n	800daf6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	699a      	ldr	r2, [r3, #24]
 800dad8:	4b28      	ldr	r3, [pc, #160]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800dada:	69db      	ldr	r3, [r3, #28]
 800dadc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d208      	bcs.n	800daf6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dae4:	4b25      	ldr	r3, [pc, #148]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800dae6:	69db      	ldr	r3, [r3, #28]
 800dae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	699b      	ldr	r3, [r3, #24]
 800daf0:	4922      	ldr	r1, [pc, #136]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800daf2:	4313      	orrs	r3, r2
 800daf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f003 0320 	and.w	r3, r3, #32
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d010      	beq.n	800db24 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	69da      	ldr	r2, [r3, #28]
 800db06:	4b1d      	ldr	r3, [pc, #116]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800db08:	6a1b      	ldr	r3, [r3, #32]
 800db0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800db0e:	429a      	cmp	r2, r3
 800db10:	d208      	bcs.n	800db24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800db12:	4b1a      	ldr	r3, [pc, #104]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800db14:	6a1b      	ldr	r3, [r3, #32]
 800db16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	69db      	ldr	r3, [r3, #28]
 800db1e:	4917      	ldr	r1, [pc, #92]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800db20:	4313      	orrs	r3, r2
 800db22:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800db24:	f000 f834 	bl	800db90 <HAL_RCC_GetSysClockFreq>
 800db28:	4602      	mov	r2, r0
 800db2a:	4b14      	ldr	r3, [pc, #80]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800db2c:	699b      	ldr	r3, [r3, #24]
 800db2e:	0a1b      	lsrs	r3, r3, #8
 800db30:	f003 030f 	and.w	r3, r3, #15
 800db34:	4912      	ldr	r1, [pc, #72]	@ (800db80 <HAL_RCC_ClockConfig+0x35c>)
 800db36:	5ccb      	ldrb	r3, [r1, r3]
 800db38:	f003 031f 	and.w	r3, r3, #31
 800db3c:	fa22 f303 	lsr.w	r3, r2, r3
 800db40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800db42:	4b0e      	ldr	r3, [pc, #56]	@ (800db7c <HAL_RCC_ClockConfig+0x358>)
 800db44:	699b      	ldr	r3, [r3, #24]
 800db46:	f003 030f 	and.w	r3, r3, #15
 800db4a:	4a0d      	ldr	r2, [pc, #52]	@ (800db80 <HAL_RCC_ClockConfig+0x35c>)
 800db4c:	5cd3      	ldrb	r3, [r2, r3]
 800db4e:	f003 031f 	and.w	r3, r3, #31
 800db52:	693a      	ldr	r2, [r7, #16]
 800db54:	fa22 f303 	lsr.w	r3, r2, r3
 800db58:	4a0a      	ldr	r2, [pc, #40]	@ (800db84 <HAL_RCC_ClockConfig+0x360>)
 800db5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800db5c:	4a0a      	ldr	r2, [pc, #40]	@ (800db88 <HAL_RCC_ClockConfig+0x364>)
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800db62:	4b0a      	ldr	r3, [pc, #40]	@ (800db8c <HAL_RCC_ClockConfig+0x368>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4618      	mov	r0, r3
 800db68:	f7f9 fb70 	bl	800724c <HAL_InitTick>
 800db6c:	4603      	mov	r3, r0
 800db6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800db70:	7bfb      	ldrb	r3, [r7, #15]
}
 800db72:	4618      	mov	r0, r3
 800db74:	3718      	adds	r7, #24
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	58024400 	.word	0x58024400
 800db80:	0801d860 	.word	0x0801d860
 800db84:	24000004 	.word	0x24000004
 800db88:	24000000 	.word	0x24000000
 800db8c:	24000008 	.word	0x24000008

0800db90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800db90:	b480      	push	{r7}
 800db92:	b089      	sub	sp, #36	@ 0x24
 800db94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800db96:	4bb3      	ldr	r3, [pc, #716]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db98:	691b      	ldr	r3, [r3, #16]
 800db9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800db9e:	2b18      	cmp	r3, #24
 800dba0:	f200 8155 	bhi.w	800de4e <HAL_RCC_GetSysClockFreq+0x2be>
 800dba4:	a201      	add	r2, pc, #4	@ (adr r2, 800dbac <HAL_RCC_GetSysClockFreq+0x1c>)
 800dba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbaa:	bf00      	nop
 800dbac:	0800dc11 	.word	0x0800dc11
 800dbb0:	0800de4f 	.word	0x0800de4f
 800dbb4:	0800de4f 	.word	0x0800de4f
 800dbb8:	0800de4f 	.word	0x0800de4f
 800dbbc:	0800de4f 	.word	0x0800de4f
 800dbc0:	0800de4f 	.word	0x0800de4f
 800dbc4:	0800de4f 	.word	0x0800de4f
 800dbc8:	0800de4f 	.word	0x0800de4f
 800dbcc:	0800dc37 	.word	0x0800dc37
 800dbd0:	0800de4f 	.word	0x0800de4f
 800dbd4:	0800de4f 	.word	0x0800de4f
 800dbd8:	0800de4f 	.word	0x0800de4f
 800dbdc:	0800de4f 	.word	0x0800de4f
 800dbe0:	0800de4f 	.word	0x0800de4f
 800dbe4:	0800de4f 	.word	0x0800de4f
 800dbe8:	0800de4f 	.word	0x0800de4f
 800dbec:	0800dc3d 	.word	0x0800dc3d
 800dbf0:	0800de4f 	.word	0x0800de4f
 800dbf4:	0800de4f 	.word	0x0800de4f
 800dbf8:	0800de4f 	.word	0x0800de4f
 800dbfc:	0800de4f 	.word	0x0800de4f
 800dc00:	0800de4f 	.word	0x0800de4f
 800dc04:	0800de4f 	.word	0x0800de4f
 800dc08:	0800de4f 	.word	0x0800de4f
 800dc0c:	0800dc43 	.word	0x0800dc43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc10:	4b94      	ldr	r3, [pc, #592]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f003 0320 	and.w	r3, r3, #32
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d009      	beq.n	800dc30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc1c:	4b91      	ldr	r3, [pc, #580]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	08db      	lsrs	r3, r3, #3
 800dc22:	f003 0303 	and.w	r3, r3, #3
 800dc26:	4a90      	ldr	r2, [pc, #576]	@ (800de68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dc28:	fa22 f303 	lsr.w	r3, r2, r3
 800dc2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800dc2e:	e111      	b.n	800de54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800dc30:	4b8d      	ldr	r3, [pc, #564]	@ (800de68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dc32:	61bb      	str	r3, [r7, #24]
      break;
 800dc34:	e10e      	b.n	800de54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800dc36:	4b8d      	ldr	r3, [pc, #564]	@ (800de6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dc38:	61bb      	str	r3, [r7, #24]
      break;
 800dc3a:	e10b      	b.n	800de54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800dc3c:	4b8c      	ldr	r3, [pc, #560]	@ (800de70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800dc3e:	61bb      	str	r3, [r7, #24]
      break;
 800dc40:	e108      	b.n	800de54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dc42:	4b88      	ldr	r3, [pc, #544]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc46:	f003 0303 	and.w	r3, r3, #3
 800dc4a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800dc4c:	4b85      	ldr	r3, [pc, #532]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc50:	091b      	lsrs	r3, r3, #4
 800dc52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dc56:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800dc58:	4b82      	ldr	r3, [pc, #520]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc5c:	f003 0301 	and.w	r3, r3, #1
 800dc60:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800dc62:	4b80      	ldr	r3, [pc, #512]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc66:	08db      	lsrs	r3, r3, #3
 800dc68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	fb02 f303 	mul.w	r3, r2, r3
 800dc72:	ee07 3a90 	vmov	s15, r3
 800dc76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc7a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	f000 80e1 	beq.w	800de48 <HAL_RCC_GetSysClockFreq+0x2b8>
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	2b02      	cmp	r3, #2
 800dc8a:	f000 8083 	beq.w	800dd94 <HAL_RCC_GetSysClockFreq+0x204>
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	2b02      	cmp	r3, #2
 800dc92:	f200 80a1 	bhi.w	800ddd8 <HAL_RCC_GetSysClockFreq+0x248>
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d003      	beq.n	800dca4 <HAL_RCC_GetSysClockFreq+0x114>
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d056      	beq.n	800dd50 <HAL_RCC_GetSysClockFreq+0x1c0>
 800dca2:	e099      	b.n	800ddd8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dca4:	4b6f      	ldr	r3, [pc, #444]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f003 0320 	and.w	r3, r3, #32
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d02d      	beq.n	800dd0c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dcb0:	4b6c      	ldr	r3, [pc, #432]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	08db      	lsrs	r3, r3, #3
 800dcb6:	f003 0303 	and.w	r3, r3, #3
 800dcba:	4a6b      	ldr	r2, [pc, #428]	@ (800de68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dcbc:	fa22 f303 	lsr.w	r3, r2, r3
 800dcc0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	ee07 3a90 	vmov	s15, r3
 800dcc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	ee07 3a90 	vmov	s15, r3
 800dcd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcda:	4b62      	ldr	r3, [pc, #392]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dcdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dce2:	ee07 3a90 	vmov	s15, r3
 800dce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcea:	ed97 6a02 	vldr	s12, [r7, #8]
 800dcee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800de74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dcf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dcfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd06:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800dd0a:	e087      	b.n	800de1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	ee07 3a90 	vmov	s15, r3
 800dd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd16:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800de78 <HAL_RCC_GetSysClockFreq+0x2e8>
 800dd1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd1e:	4b51      	ldr	r3, [pc, #324]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd26:	ee07 3a90 	vmov	s15, r3
 800dd2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd2e:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd32:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800de74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dd36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dd4e:	e065      	b.n	800de1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	ee07 3a90 	vmov	s15, r3
 800dd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd5a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800de7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800dd5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd62:	4b40      	ldr	r3, [pc, #256]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd6a:	ee07 3a90 	vmov	s15, r3
 800dd6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd72:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd76:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800de74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dd7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dd92:	e043      	b.n	800de1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	ee07 3a90 	vmov	s15, r3
 800dd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd9e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800de80 <HAL_RCC_GetSysClockFreq+0x2f0>
 800dda2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dda6:	4b2f      	ldr	r3, [pc, #188]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dda8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddae:	ee07 3a90 	vmov	s15, r3
 800ddb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800ddba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800de74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ddbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ddc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ddc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ddca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ddd6:	e021      	b.n	800de1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	ee07 3a90 	vmov	s15, r3
 800ddde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dde2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800de7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800dde6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddea:	4b1e      	ldr	r3, [pc, #120]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddf2:	ee07 3a90 	vmov	s15, r3
 800ddf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddfa:	ed97 6a02 	vldr	s12, [r7, #8]
 800ddfe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800de74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800de02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800de1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800de1c:	4b11      	ldr	r3, [pc, #68]	@ (800de64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de20:	0a5b      	lsrs	r3, r3, #9
 800de22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de26:	3301      	adds	r3, #1
 800de28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	ee07 3a90 	vmov	s15, r3
 800de30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800de34:	edd7 6a07 	vldr	s13, [r7, #28]
 800de38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de40:	ee17 3a90 	vmov	r3, s15
 800de44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800de46:	e005      	b.n	800de54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800de48:	2300      	movs	r3, #0
 800de4a:	61bb      	str	r3, [r7, #24]
      break;
 800de4c:	e002      	b.n	800de54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800de4e:	4b07      	ldr	r3, [pc, #28]	@ (800de6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800de50:	61bb      	str	r3, [r7, #24]
      break;
 800de52:	bf00      	nop
  }

  return sysclockfreq;
 800de54:	69bb      	ldr	r3, [r7, #24]
}
 800de56:	4618      	mov	r0, r3
 800de58:	3724      	adds	r7, #36	@ 0x24
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	58024400 	.word	0x58024400
 800de68:	03d09000 	.word	0x03d09000
 800de6c:	003d0900 	.word	0x003d0900
 800de70:	016e3600 	.word	0x016e3600
 800de74:	46000000 	.word	0x46000000
 800de78:	4c742400 	.word	0x4c742400
 800de7c:	4a742400 	.word	0x4a742400
 800de80:	4bb71b00 	.word	0x4bb71b00

0800de84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800de8a:	f7ff fe81 	bl	800db90 <HAL_RCC_GetSysClockFreq>
 800de8e:	4602      	mov	r2, r0
 800de90:	4b10      	ldr	r3, [pc, #64]	@ (800ded4 <HAL_RCC_GetHCLKFreq+0x50>)
 800de92:	699b      	ldr	r3, [r3, #24]
 800de94:	0a1b      	lsrs	r3, r3, #8
 800de96:	f003 030f 	and.w	r3, r3, #15
 800de9a:	490f      	ldr	r1, [pc, #60]	@ (800ded8 <HAL_RCC_GetHCLKFreq+0x54>)
 800de9c:	5ccb      	ldrb	r3, [r1, r3]
 800de9e:	f003 031f 	and.w	r3, r3, #31
 800dea2:	fa22 f303 	lsr.w	r3, r2, r3
 800dea6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dea8:	4b0a      	ldr	r3, [pc, #40]	@ (800ded4 <HAL_RCC_GetHCLKFreq+0x50>)
 800deaa:	699b      	ldr	r3, [r3, #24]
 800deac:	f003 030f 	and.w	r3, r3, #15
 800deb0:	4a09      	ldr	r2, [pc, #36]	@ (800ded8 <HAL_RCC_GetHCLKFreq+0x54>)
 800deb2:	5cd3      	ldrb	r3, [r2, r3]
 800deb4:	f003 031f 	and.w	r3, r3, #31
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	fa22 f303 	lsr.w	r3, r2, r3
 800debe:	4a07      	ldr	r2, [pc, #28]	@ (800dedc <HAL_RCC_GetHCLKFreq+0x58>)
 800dec0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dec2:	4a07      	ldr	r2, [pc, #28]	@ (800dee0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800dec8:	4b04      	ldr	r3, [pc, #16]	@ (800dedc <HAL_RCC_GetHCLKFreq+0x58>)
 800deca:	681b      	ldr	r3, [r3, #0]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	58024400 	.word	0x58024400
 800ded8:	0801d860 	.word	0x0801d860
 800dedc:	24000004 	.word	0x24000004
 800dee0:	24000000 	.word	0x24000000

0800dee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800dee8:	f7ff ffcc 	bl	800de84 <HAL_RCC_GetHCLKFreq>
 800deec:	4602      	mov	r2, r0
 800deee:	4b06      	ldr	r3, [pc, #24]	@ (800df08 <HAL_RCC_GetPCLK1Freq+0x24>)
 800def0:	69db      	ldr	r3, [r3, #28]
 800def2:	091b      	lsrs	r3, r3, #4
 800def4:	f003 0307 	and.w	r3, r3, #7
 800def8:	4904      	ldr	r1, [pc, #16]	@ (800df0c <HAL_RCC_GetPCLK1Freq+0x28>)
 800defa:	5ccb      	ldrb	r3, [r1, r3]
 800defc:	f003 031f 	and.w	r3, r3, #31
 800df00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800df04:	4618      	mov	r0, r3
 800df06:	bd80      	pop	{r7, pc}
 800df08:	58024400 	.word	0x58024400
 800df0c:	0801d860 	.word	0x0801d860

0800df10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800df14:	f7ff ffb6 	bl	800de84 <HAL_RCC_GetHCLKFreq>
 800df18:	4602      	mov	r2, r0
 800df1a:	4b06      	ldr	r3, [pc, #24]	@ (800df34 <HAL_RCC_GetPCLK2Freq+0x24>)
 800df1c:	69db      	ldr	r3, [r3, #28]
 800df1e:	0a1b      	lsrs	r3, r3, #8
 800df20:	f003 0307 	and.w	r3, r3, #7
 800df24:	4904      	ldr	r1, [pc, #16]	@ (800df38 <HAL_RCC_GetPCLK2Freq+0x28>)
 800df26:	5ccb      	ldrb	r3, [r1, r3]
 800df28:	f003 031f 	and.w	r3, r3, #31
 800df2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800df30:	4618      	mov	r0, r3
 800df32:	bd80      	pop	{r7, pc}
 800df34:	58024400 	.word	0x58024400
 800df38:	0801d860 	.word	0x0801d860

0800df3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800df3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df40:	b0c6      	sub	sp, #280	@ 0x118
 800df42:	af00      	add	r7, sp, #0
 800df44:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800df48:	2300      	movs	r3, #0
 800df4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800df4e:	2300      	movs	r3, #0
 800df50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800df54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800df60:	2500      	movs	r5, #0
 800df62:	ea54 0305 	orrs.w	r3, r4, r5
 800df66:	d049      	beq.n	800dffc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800df68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800df72:	d02f      	beq.n	800dfd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800df74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800df78:	d828      	bhi.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800df7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800df7e:	d01a      	beq.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800df80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800df84:	d822      	bhi.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800df86:	2b00      	cmp	r3, #0
 800df88:	d003      	beq.n	800df92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800df8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df8e:	d007      	beq.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800df90:	e01c      	b.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df92:	4bab      	ldr	r3, [pc, #684]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800df94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df96:	4aaa      	ldr	r2, [pc, #680]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800df98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800df9e:	e01a      	b.n	800dfd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dfa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfa4:	3308      	adds	r3, #8
 800dfa6:	2102      	movs	r1, #2
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f002 fa49 	bl	8010440 <RCCEx_PLL2_Config>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dfb4:	e00f      	b.n	800dfd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dfb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfba:	3328      	adds	r3, #40	@ 0x28
 800dfbc:	2102      	movs	r1, #2
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f002 faf0 	bl	80105a4 <RCCEx_PLL3_Config>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dfca:	e004      	b.n	800dfd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dfd2:	e000      	b.n	800dfd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800dfd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dfd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d10a      	bne.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800dfde:	4b98      	ldr	r3, [pc, #608]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dfe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfe2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800dfe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfec:	4a94      	ldr	r2, [pc, #592]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dfee:	430b      	orrs	r3, r1
 800dff0:	6513      	str	r3, [r2, #80]	@ 0x50
 800dff2:	e003      	b.n	800dffc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dff8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e004:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e008:	f04f 0900 	mov.w	r9, #0
 800e00c:	ea58 0309 	orrs.w	r3, r8, r9
 800e010:	d047      	beq.n	800e0a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e018:	2b04      	cmp	r3, #4
 800e01a:	d82a      	bhi.n	800e072 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e01c:	a201      	add	r2, pc, #4	@ (adr r2, 800e024 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e022:	bf00      	nop
 800e024:	0800e039 	.word	0x0800e039
 800e028:	0800e047 	.word	0x0800e047
 800e02c:	0800e05d 	.word	0x0800e05d
 800e030:	0800e07b 	.word	0x0800e07b
 800e034:	0800e07b 	.word	0x0800e07b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e038:	4b81      	ldr	r3, [pc, #516]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e03c:	4a80      	ldr	r2, [pc, #512]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e03e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e044:	e01a      	b.n	800e07c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e04a:	3308      	adds	r3, #8
 800e04c:	2100      	movs	r1, #0
 800e04e:	4618      	mov	r0, r3
 800e050:	f002 f9f6 	bl	8010440 <RCCEx_PLL2_Config>
 800e054:	4603      	mov	r3, r0
 800e056:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e05a:	e00f      	b.n	800e07c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e060:	3328      	adds	r3, #40	@ 0x28
 800e062:	2100      	movs	r1, #0
 800e064:	4618      	mov	r0, r3
 800e066:	f002 fa9d 	bl	80105a4 <RCCEx_PLL3_Config>
 800e06a:	4603      	mov	r3, r0
 800e06c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e070:	e004      	b.n	800e07c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e072:	2301      	movs	r3, #1
 800e074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e078:	e000      	b.n	800e07c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e07a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e07c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10a      	bne.n	800e09a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e084:	4b6e      	ldr	r3, [pc, #440]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e088:	f023 0107 	bic.w	r1, r3, #7
 800e08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e092:	4a6b      	ldr	r2, [pc, #428]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e094:	430b      	orrs	r3, r1
 800e096:	6513      	str	r3, [r2, #80]	@ 0x50
 800e098:	e003      	b.n	800e0a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e09a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e09e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0aa:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800e0ae:	f04f 0b00 	mov.w	fp, #0
 800e0b2:	ea5a 030b 	orrs.w	r3, sl, fp
 800e0b6:	d05b      	beq.n	800e170 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e0b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e0c0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800e0c4:	d03b      	beq.n	800e13e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800e0c6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800e0ca:	d834      	bhi.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e0cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e0d0:	d037      	beq.n	800e142 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800e0d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e0d6:	d82e      	bhi.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e0d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e0dc:	d033      	beq.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800e0de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e0e2:	d828      	bhi.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e0e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e0e8:	d01a      	beq.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800e0ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e0ee:	d822      	bhi.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d003      	beq.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800e0f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e0f8:	d007      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800e0fa:	e01c      	b.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0fc:	4b50      	ldr	r3, [pc, #320]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e100:	4a4f      	ldr	r2, [pc, #316]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e108:	e01e      	b.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e10e:	3308      	adds	r3, #8
 800e110:	2100      	movs	r1, #0
 800e112:	4618      	mov	r0, r3
 800e114:	f002 f994 	bl	8010440 <RCCEx_PLL2_Config>
 800e118:	4603      	mov	r3, r0
 800e11a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e11e:	e013      	b.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e124:	3328      	adds	r3, #40	@ 0x28
 800e126:	2100      	movs	r1, #0
 800e128:	4618      	mov	r0, r3
 800e12a:	f002 fa3b 	bl	80105a4 <RCCEx_PLL3_Config>
 800e12e:	4603      	mov	r3, r0
 800e130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e134:	e008      	b.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e136:	2301      	movs	r3, #1
 800e138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e13c:	e004      	b.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e13e:	bf00      	nop
 800e140:	e002      	b.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e142:	bf00      	nop
 800e144:	e000      	b.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e146:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e148:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d10b      	bne.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e150:	4b3b      	ldr	r3, [pc, #236]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e154:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e15c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e160:	4a37      	ldr	r2, [pc, #220]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e162:	430b      	orrs	r3, r1
 800e164:	6593      	str	r3, [r2, #88]	@ 0x58
 800e166:	e003      	b.n	800e170 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e16c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e178:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e17c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e180:	2300      	movs	r3, #0
 800e182:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e186:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800e18a:	460b      	mov	r3, r1
 800e18c:	4313      	orrs	r3, r2
 800e18e:	d05d      	beq.n	800e24c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e194:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e198:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e19c:	d03b      	beq.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800e19e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e1a2:	d834      	bhi.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e1a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e1a8:	d037      	beq.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800e1aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e1ae:	d82e      	bhi.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e1b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e1b4:	d033      	beq.n	800e21e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800e1b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e1ba:	d828      	bhi.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e1bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e1c0:	d01a      	beq.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800e1c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e1c6:	d822      	bhi.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d003      	beq.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800e1cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e1d0:	d007      	beq.n	800e1e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800e1d2:	e01c      	b.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1d4:	4b1a      	ldr	r3, [pc, #104]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d8:	4a19      	ldr	r2, [pc, #100]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e1da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e1e0:	e01e      	b.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1e6:	3308      	adds	r3, #8
 800e1e8:	2100      	movs	r1, #0
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f002 f928 	bl	8010440 <RCCEx_PLL2_Config>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e1f6:	e013      	b.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1fc:	3328      	adds	r3, #40	@ 0x28
 800e1fe:	2100      	movs	r1, #0
 800e200:	4618      	mov	r0, r3
 800e202:	f002 f9cf 	bl	80105a4 <RCCEx_PLL3_Config>
 800e206:	4603      	mov	r3, r0
 800e208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e20c:	e008      	b.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e214:	e004      	b.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e216:	bf00      	nop
 800e218:	e002      	b.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e21a:	bf00      	nop
 800e21c:	e000      	b.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e21e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10d      	bne.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e228:	4b05      	ldr	r3, [pc, #20]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e22a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e22c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e234:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e238:	4a01      	ldr	r2, [pc, #4]	@ (800e240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e23a:	430b      	orrs	r3, r1
 800e23c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e23e:	e005      	b.n	800e24c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800e240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e248:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e254:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e258:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e25c:	2300      	movs	r3, #0
 800e25e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e262:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e266:	460b      	mov	r3, r1
 800e268:	4313      	orrs	r3, r2
 800e26a:	d03a      	beq.n	800e2e2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800e26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e272:	2b30      	cmp	r3, #48	@ 0x30
 800e274:	d01f      	beq.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800e276:	2b30      	cmp	r3, #48	@ 0x30
 800e278:	d819      	bhi.n	800e2ae <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e27a:	2b20      	cmp	r3, #32
 800e27c:	d00c      	beq.n	800e298 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800e27e:	2b20      	cmp	r3, #32
 800e280:	d815      	bhi.n	800e2ae <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e282:	2b00      	cmp	r3, #0
 800e284:	d019      	beq.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e286:	2b10      	cmp	r3, #16
 800e288:	d111      	bne.n	800e2ae <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e28a:	4baa      	ldr	r3, [pc, #680]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e28e:	4aa9      	ldr	r2, [pc, #676]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e296:	e011      	b.n	800e2bc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e29c:	3308      	adds	r3, #8
 800e29e:	2102      	movs	r1, #2
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f002 f8cd 	bl	8010440 <RCCEx_PLL2_Config>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e2ac:	e006      	b.n	800e2bc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e2b4:	e002      	b.n	800e2bc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800e2b6:	bf00      	nop
 800e2b8:	e000      	b.n	800e2bc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800e2ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d10a      	bne.n	800e2da <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e2c4:	4b9b      	ldr	r3, [pc, #620]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e2c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2d2:	4a98      	ldr	r2, [pc, #608]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e2d4:	430b      	orrs	r3, r1
 800e2d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e2d8:	e003      	b.n	800e2e2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e2de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e2ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e2f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	4313      	orrs	r3, r2
 800e300:	d051      	beq.n	800e3a6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e308:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e30c:	d035      	beq.n	800e37a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800e30e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e312:	d82e      	bhi.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e314:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e318:	d031      	beq.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800e31a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e31e:	d828      	bhi.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e324:	d01a      	beq.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800e326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e32a:	d822      	bhi.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d003      	beq.n	800e338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800e330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e334:	d007      	beq.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800e336:	e01c      	b.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e338:	4b7e      	ldr	r3, [pc, #504]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e33a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e33c:	4a7d      	ldr	r2, [pc, #500]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e33e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e344:	e01c      	b.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e34a:	3308      	adds	r3, #8
 800e34c:	2100      	movs	r1, #0
 800e34e:	4618      	mov	r0, r3
 800e350:	f002 f876 	bl	8010440 <RCCEx_PLL2_Config>
 800e354:	4603      	mov	r3, r0
 800e356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e35a:	e011      	b.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e35c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e360:	3328      	adds	r3, #40	@ 0x28
 800e362:	2100      	movs	r1, #0
 800e364:	4618      	mov	r0, r3
 800e366:	f002 f91d 	bl	80105a4 <RCCEx_PLL3_Config>
 800e36a:	4603      	mov	r3, r0
 800e36c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e370:	e006      	b.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e372:	2301      	movs	r3, #1
 800e374:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e378:	e002      	b.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e37a:	bf00      	nop
 800e37c:	e000      	b.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e37e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e384:	2b00      	cmp	r3, #0
 800e386:	d10a      	bne.n	800e39e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e388:	4b6a      	ldr	r3, [pc, #424]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e38a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e38c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e396:	4a67      	ldr	r2, [pc, #412]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e398:	430b      	orrs	r3, r1
 800e39a:	6513      	str	r3, [r2, #80]	@ 0x50
 800e39c:	e003      	b.n	800e3a6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e39e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e3b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e3bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	d053      	beq.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e3cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e3d0:	d033      	beq.n	800e43a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800e3d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e3d6:	d82c      	bhi.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e3d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e3dc:	d02f      	beq.n	800e43e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800e3de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e3e2:	d826      	bhi.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e3e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e3e8:	d02b      	beq.n	800e442 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800e3ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e3ee:	d820      	bhi.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e3f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e3f4:	d012      	beq.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800e3f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e3fa:	d81a      	bhi.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d022      	beq.n	800e446 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e404:	d115      	bne.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e40a:	3308      	adds	r3, #8
 800e40c:	2101      	movs	r1, #1
 800e40e:	4618      	mov	r0, r3
 800e410:	f002 f816 	bl	8010440 <RCCEx_PLL2_Config>
 800e414:	4603      	mov	r3, r0
 800e416:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e41a:	e015      	b.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e420:	3328      	adds	r3, #40	@ 0x28
 800e422:	2101      	movs	r1, #1
 800e424:	4618      	mov	r0, r3
 800e426:	f002 f8bd 	bl	80105a4 <RCCEx_PLL3_Config>
 800e42a:	4603      	mov	r3, r0
 800e42c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e430:	e00a      	b.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e432:	2301      	movs	r3, #1
 800e434:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e438:	e006      	b.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e43a:	bf00      	nop
 800e43c:	e004      	b.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e43e:	bf00      	nop
 800e440:	e002      	b.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e442:	bf00      	nop
 800e444:	e000      	b.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e446:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d10a      	bne.n	800e466 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e450:	4b38      	ldr	r3, [pc, #224]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e454:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e45c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e45e:	4a35      	ldr	r2, [pc, #212]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e460:	430b      	orrs	r3, r1
 800e462:	6513      	str	r3, [r2, #80]	@ 0x50
 800e464:	e003      	b.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e466:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e46a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e476:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e47a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e47e:	2300      	movs	r3, #0
 800e480:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e484:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e488:	460b      	mov	r3, r1
 800e48a:	4313      	orrs	r3, r2
 800e48c:	d058      	beq.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e492:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e49a:	d033      	beq.n	800e504 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800e49c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e4a0:	d82c      	bhi.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4a6:	d02f      	beq.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800e4a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4ac:	d826      	bhi.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e4ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e4b2:	d02b      	beq.n	800e50c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800e4b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e4b8:	d820      	bhi.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e4ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4be:	d012      	beq.n	800e4e6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800e4c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4c4:	d81a      	bhi.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d022      	beq.n	800e510 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e4ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e4ce:	d115      	bne.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4d4:	3308      	adds	r3, #8
 800e4d6:	2101      	movs	r1, #1
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f001 ffb1 	bl	8010440 <RCCEx_PLL2_Config>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e4e4:	e015      	b.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4ea:	3328      	adds	r3, #40	@ 0x28
 800e4ec:	2101      	movs	r1, #1
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f002 f858 	bl	80105a4 <RCCEx_PLL3_Config>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e4fa:	e00a      	b.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e502:	e006      	b.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e504:	bf00      	nop
 800e506:	e004      	b.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e508:	bf00      	nop
 800e50a:	e002      	b.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e50c:	bf00      	nop
 800e50e:	e000      	b.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e510:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e512:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e516:	2b00      	cmp	r3, #0
 800e518:	d10e      	bne.n	800e538 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e51a:	4b06      	ldr	r3, [pc, #24]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e51c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e51e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e526:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e52a:	4a02      	ldr	r2, [pc, #8]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e52c:	430b      	orrs	r3, r1
 800e52e:	6593      	str	r3, [r2, #88]	@ 0x58
 800e530:	e006      	b.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e532:	bf00      	nop
 800e534:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e53c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e548:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e54c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e550:	2300      	movs	r3, #0
 800e552:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e556:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e55a:	460b      	mov	r3, r1
 800e55c:	4313      	orrs	r3, r2
 800e55e:	d037      	beq.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e56a:	d00e      	beq.n	800e58a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800e56c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e570:	d816      	bhi.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800e572:	2b00      	cmp	r3, #0
 800e574:	d018      	beq.n	800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800e576:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e57a:	d111      	bne.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e57c:	4bc4      	ldr	r3, [pc, #784]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e580:	4ac3      	ldr	r2, [pc, #780]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e588:	e00f      	b.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e58e:	3308      	adds	r3, #8
 800e590:	2101      	movs	r1, #1
 800e592:	4618      	mov	r0, r3
 800e594:	f001 ff54 	bl	8010440 <RCCEx_PLL2_Config>
 800e598:	4603      	mov	r3, r0
 800e59a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e59e:	e004      	b.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e5a6:	e000      	b.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800e5a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d10a      	bne.n	800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e5b2:	4bb7      	ldr	r3, [pc, #732]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e5b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5b6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5c0:	4ab3      	ldr	r2, [pc, #716]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e5c2:	430b      	orrs	r3, r1
 800e5c4:	6513      	str	r3, [r2, #80]	@ 0x50
 800e5c6:	e003      	b.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e5cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e5dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e5e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	d039      	beq.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5f6:	2b03      	cmp	r3, #3
 800e5f8:	d81c      	bhi.n	800e634 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800e5fa:	a201      	add	r2, pc, #4	@ (adr r2, 800e600 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800e5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e600:	0800e63d 	.word	0x0800e63d
 800e604:	0800e611 	.word	0x0800e611
 800e608:	0800e61f 	.word	0x0800e61f
 800e60c:	0800e63d 	.word	0x0800e63d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e610:	4b9f      	ldr	r3, [pc, #636]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e614:	4a9e      	ldr	r2, [pc, #632]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e61a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e61c:	e00f      	b.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e622:	3308      	adds	r3, #8
 800e624:	2102      	movs	r1, #2
 800e626:	4618      	mov	r0, r3
 800e628:	f001 ff0a 	bl	8010440 <RCCEx_PLL2_Config>
 800e62c:	4603      	mov	r3, r0
 800e62e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e632:	e004      	b.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e634:	2301      	movs	r3, #1
 800e636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e63a:	e000      	b.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800e63c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e63e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e642:	2b00      	cmp	r3, #0
 800e644:	d10a      	bne.n	800e65c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e646:	4b92      	ldr	r3, [pc, #584]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e64a:	f023 0103 	bic.w	r1, r3, #3
 800e64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e654:	4a8e      	ldr	r2, [pc, #568]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e656:	430b      	orrs	r3, r1
 800e658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e65a:	e003      	b.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e65c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e660:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e670:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e674:	2300      	movs	r3, #0
 800e676:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e67a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e67e:	460b      	mov	r3, r1
 800e680:	4313      	orrs	r3, r2
 800e682:	f000 8099 	beq.w	800e7b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e686:	4b83      	ldr	r3, [pc, #524]	@ (800e894 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a82      	ldr	r2, [pc, #520]	@ (800e894 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e68c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e690:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e692:	f7f8 fe25 	bl	80072e0 <HAL_GetTick>
 800e696:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e69a:	e00b      	b.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e69c:	f7f8 fe20 	bl	80072e0 <HAL_GetTick>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e6a6:	1ad3      	subs	r3, r2, r3
 800e6a8:	2b64      	cmp	r3, #100	@ 0x64
 800e6aa:	d903      	bls.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800e6ac:	2303      	movs	r3, #3
 800e6ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e6b2:	e005      	b.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e6b4:	4b77      	ldr	r3, [pc, #476]	@ (800e894 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d0ed      	beq.n	800e69c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800e6c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d173      	bne.n	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e6c8:	4b71      	ldr	r3, [pc, #452]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e6ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e6d4:	4053      	eors	r3, r2
 800e6d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d015      	beq.n	800e70a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e6de:	4b6c      	ldr	r3, [pc, #432]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e6e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e6e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e6ea:	4b69      	ldr	r3, [pc, #420]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e6ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6ee:	4a68      	ldr	r2, [pc, #416]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e6f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e6f4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e6f6:	4b66      	ldr	r3, [pc, #408]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e6f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6fa:	4a65      	ldr	r2, [pc, #404]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e6fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e700:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e702:	4a63      	ldr	r2, [pc, #396]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e708:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e70e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e716:	d118      	bne.n	800e74a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e718:	f7f8 fde2 	bl	80072e0 <HAL_GetTick>
 800e71c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e720:	e00d      	b.n	800e73e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e722:	f7f8 fddd 	bl	80072e0 <HAL_GetTick>
 800e726:	4602      	mov	r2, r0
 800e728:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e72c:	1ad2      	subs	r2, r2, r3
 800e72e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e732:	429a      	cmp	r2, r3
 800e734:	d903      	bls.n	800e73e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800e736:	2303      	movs	r3, #3
 800e738:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800e73c:	e005      	b.n	800e74a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e73e:	4b54      	ldr	r3, [pc, #336]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e742:	f003 0302 	and.w	r3, r3, #2
 800e746:	2b00      	cmp	r3, #0
 800e748:	d0eb      	beq.n	800e722 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800e74a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d129      	bne.n	800e7a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e756:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e75a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e75e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e762:	d10e      	bne.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800e764:	4b4a      	ldr	r3, [pc, #296]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e766:	691b      	ldr	r3, [r3, #16]
 800e768:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e770:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e774:	091a      	lsrs	r2, r3, #4
 800e776:	4b48      	ldr	r3, [pc, #288]	@ (800e898 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800e778:	4013      	ands	r3, r2
 800e77a:	4a45      	ldr	r2, [pc, #276]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e77c:	430b      	orrs	r3, r1
 800e77e:	6113      	str	r3, [r2, #16]
 800e780:	e005      	b.n	800e78e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800e782:	4b43      	ldr	r3, [pc, #268]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e784:	691b      	ldr	r3, [r3, #16]
 800e786:	4a42      	ldr	r2, [pc, #264]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e788:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e78c:	6113      	str	r3, [r2, #16]
 800e78e:	4b40      	ldr	r3, [pc, #256]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e790:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e796:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e79a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e79e:	4a3c      	ldr	r2, [pc, #240]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e7a0:	430b      	orrs	r3, r1
 800e7a2:	6713      	str	r3, [r2, #112]	@ 0x70
 800e7a4:	e008      	b.n	800e7b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e7a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e7aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e7ae:	e003      	b.n	800e7b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e7b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c0:	f002 0301 	and.w	r3, r2, #1
 800e7c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e7ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	f000 808f 	beq.w	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7e0:	2b28      	cmp	r3, #40	@ 0x28
 800e7e2:	d871      	bhi.n	800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e7e4:	a201      	add	r2, pc, #4	@ (adr r2, 800e7ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ea:	bf00      	nop
 800e7ec:	0800e8d1 	.word	0x0800e8d1
 800e7f0:	0800e8c9 	.word	0x0800e8c9
 800e7f4:	0800e8c9 	.word	0x0800e8c9
 800e7f8:	0800e8c9 	.word	0x0800e8c9
 800e7fc:	0800e8c9 	.word	0x0800e8c9
 800e800:	0800e8c9 	.word	0x0800e8c9
 800e804:	0800e8c9 	.word	0x0800e8c9
 800e808:	0800e8c9 	.word	0x0800e8c9
 800e80c:	0800e89d 	.word	0x0800e89d
 800e810:	0800e8c9 	.word	0x0800e8c9
 800e814:	0800e8c9 	.word	0x0800e8c9
 800e818:	0800e8c9 	.word	0x0800e8c9
 800e81c:	0800e8c9 	.word	0x0800e8c9
 800e820:	0800e8c9 	.word	0x0800e8c9
 800e824:	0800e8c9 	.word	0x0800e8c9
 800e828:	0800e8c9 	.word	0x0800e8c9
 800e82c:	0800e8b3 	.word	0x0800e8b3
 800e830:	0800e8c9 	.word	0x0800e8c9
 800e834:	0800e8c9 	.word	0x0800e8c9
 800e838:	0800e8c9 	.word	0x0800e8c9
 800e83c:	0800e8c9 	.word	0x0800e8c9
 800e840:	0800e8c9 	.word	0x0800e8c9
 800e844:	0800e8c9 	.word	0x0800e8c9
 800e848:	0800e8c9 	.word	0x0800e8c9
 800e84c:	0800e8d1 	.word	0x0800e8d1
 800e850:	0800e8c9 	.word	0x0800e8c9
 800e854:	0800e8c9 	.word	0x0800e8c9
 800e858:	0800e8c9 	.word	0x0800e8c9
 800e85c:	0800e8c9 	.word	0x0800e8c9
 800e860:	0800e8c9 	.word	0x0800e8c9
 800e864:	0800e8c9 	.word	0x0800e8c9
 800e868:	0800e8c9 	.word	0x0800e8c9
 800e86c:	0800e8d1 	.word	0x0800e8d1
 800e870:	0800e8c9 	.word	0x0800e8c9
 800e874:	0800e8c9 	.word	0x0800e8c9
 800e878:	0800e8c9 	.word	0x0800e8c9
 800e87c:	0800e8c9 	.word	0x0800e8c9
 800e880:	0800e8c9 	.word	0x0800e8c9
 800e884:	0800e8c9 	.word	0x0800e8c9
 800e888:	0800e8c9 	.word	0x0800e8c9
 800e88c:	0800e8d1 	.word	0x0800e8d1
 800e890:	58024400 	.word	0x58024400
 800e894:	58024800 	.word	0x58024800
 800e898:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8a0:	3308      	adds	r3, #8
 800e8a2:	2101      	movs	r1, #1
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f001 fdcb 	bl	8010440 <RCCEx_PLL2_Config>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e8b0:	e00f      	b.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8b6:	3328      	adds	r3, #40	@ 0x28
 800e8b8:	2101      	movs	r1, #1
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f001 fe72 	bl	80105a4 <RCCEx_PLL3_Config>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e8c6:	e004      	b.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e8ce:	e000      	b.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800e8d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d10a      	bne.n	800e8f0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e8da:	4bbf      	ldr	r3, [pc, #764]	@ (800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e8dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8de:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8e8:	4abb      	ldr	r2, [pc, #748]	@ (800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e8ea:	430b      	orrs	r3, r1
 800e8ec:	6553      	str	r3, [r2, #84]	@ 0x54
 800e8ee:	e003      	b.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e900:	f002 0302 	and.w	r3, r2, #2
 800e904:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e908:	2300      	movs	r3, #0
 800e90a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e90e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e912:	460b      	mov	r3, r1
 800e914:	4313      	orrs	r3, r2
 800e916:	d041      	beq.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e91c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e91e:	2b05      	cmp	r3, #5
 800e920:	d824      	bhi.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800e922:	a201      	add	r2, pc, #4	@ (adr r2, 800e928 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800e924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e928:	0800e975 	.word	0x0800e975
 800e92c:	0800e941 	.word	0x0800e941
 800e930:	0800e957 	.word	0x0800e957
 800e934:	0800e975 	.word	0x0800e975
 800e938:	0800e975 	.word	0x0800e975
 800e93c:	0800e975 	.word	0x0800e975
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e944:	3308      	adds	r3, #8
 800e946:	2101      	movs	r1, #1
 800e948:	4618      	mov	r0, r3
 800e94a:	f001 fd79 	bl	8010440 <RCCEx_PLL2_Config>
 800e94e:	4603      	mov	r3, r0
 800e950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e954:	e00f      	b.n	800e976 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e95a:	3328      	adds	r3, #40	@ 0x28
 800e95c:	2101      	movs	r1, #1
 800e95e:	4618      	mov	r0, r3
 800e960:	f001 fe20 	bl	80105a4 <RCCEx_PLL3_Config>
 800e964:	4603      	mov	r3, r0
 800e966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e96a:	e004      	b.n	800e976 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e96c:	2301      	movs	r3, #1
 800e96e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e972:	e000      	b.n	800e976 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800e974:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d10a      	bne.n	800e994 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e97e:	4b96      	ldr	r3, [pc, #600]	@ (800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e982:	f023 0107 	bic.w	r1, r3, #7
 800e986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e98a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e98c:	4a92      	ldr	r2, [pc, #584]	@ (800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e98e:	430b      	orrs	r3, r1
 800e990:	6553      	str	r3, [r2, #84]	@ 0x54
 800e992:	e003      	b.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e998:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a4:	f002 0304 	and.w	r3, r2, #4
 800e9a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e9b2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	4313      	orrs	r3, r2
 800e9ba:	d044      	beq.n	800ea46 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9c4:	2b05      	cmp	r3, #5
 800e9c6:	d825      	bhi.n	800ea14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800e9c8:	a201      	add	r2, pc, #4	@ (adr r2, 800e9d0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800e9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ce:	bf00      	nop
 800e9d0:	0800ea1d 	.word	0x0800ea1d
 800e9d4:	0800e9e9 	.word	0x0800e9e9
 800e9d8:	0800e9ff 	.word	0x0800e9ff
 800e9dc:	0800ea1d 	.word	0x0800ea1d
 800e9e0:	0800ea1d 	.word	0x0800ea1d
 800e9e4:	0800ea1d 	.word	0x0800ea1d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9ec:	3308      	adds	r3, #8
 800e9ee:	2101      	movs	r1, #1
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f001 fd25 	bl	8010440 <RCCEx_PLL2_Config>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e9fc:	e00f      	b.n	800ea1e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea02:	3328      	adds	r3, #40	@ 0x28
 800ea04:	2101      	movs	r1, #1
 800ea06:	4618      	mov	r0, r3
 800ea08:	f001 fdcc 	bl	80105a4 <RCCEx_PLL3_Config>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ea12:	e004      	b.n	800ea1e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea14:	2301      	movs	r3, #1
 800ea16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ea1a:	e000      	b.n	800ea1e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800ea1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d10b      	bne.n	800ea3e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ea26:	4b6c      	ldr	r3, [pc, #432]	@ (800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ea28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea2a:	f023 0107 	bic.w	r1, r3, #7
 800ea2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea36:	4a68      	ldr	r2, [pc, #416]	@ (800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ea38:	430b      	orrs	r3, r1
 800ea3a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ea3c:	e003      	b.n	800ea46 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ea46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4e:	f002 0320 	and.w	r3, r2, #32
 800ea52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ea56:	2300      	movs	r3, #0
 800ea58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ea5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ea60:	460b      	mov	r3, r1
 800ea62:	4313      	orrs	r3, r2
 800ea64:	d055      	beq.n	800eb12 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ea66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ea72:	d033      	beq.n	800eadc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800ea74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ea78:	d82c      	bhi.n	800ead4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ea7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea7e:	d02f      	beq.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ea80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea84:	d826      	bhi.n	800ead4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ea86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ea8a:	d02b      	beq.n	800eae4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800ea8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ea90:	d820      	bhi.n	800ead4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ea92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea96:	d012      	beq.n	800eabe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800ea98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea9c:	d81a      	bhi.n	800ead4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d022      	beq.n	800eae8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800eaa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eaa6:	d115      	bne.n	800ead4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eaa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaac:	3308      	adds	r3, #8
 800eaae:	2100      	movs	r1, #0
 800eab0:	4618      	mov	r0, r3
 800eab2:	f001 fcc5 	bl	8010440 <RCCEx_PLL2_Config>
 800eab6:	4603      	mov	r3, r0
 800eab8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800eabc:	e015      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eac2:	3328      	adds	r3, #40	@ 0x28
 800eac4:	2102      	movs	r1, #2
 800eac6:	4618      	mov	r0, r3
 800eac8:	f001 fd6c 	bl	80105a4 <RCCEx_PLL3_Config>
 800eacc:	4603      	mov	r3, r0
 800eace:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ead2:	e00a      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ead4:	2301      	movs	r3, #1
 800ead6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eada:	e006      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800eadc:	bf00      	nop
 800eade:	e004      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800eae0:	bf00      	nop
 800eae2:	e002      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800eae4:	bf00      	nop
 800eae6:	e000      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800eae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eaea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d10b      	bne.n	800eb0a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800eaf2:	4b39      	ldr	r3, [pc, #228]	@ (800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eaf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaf6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800eafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eafe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eb02:	4a35      	ldr	r2, [pc, #212]	@ (800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eb04:	430b      	orrs	r3, r1
 800eb06:	6553      	str	r3, [r2, #84]	@ 0x54
 800eb08:	e003      	b.n	800eb12 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800eb12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800eb1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb22:	2300      	movs	r3, #0
 800eb24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800eb28:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	d058      	beq.n	800ebe4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800eb32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800eb3a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800eb3e:	d033      	beq.n	800eba8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800eb40:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800eb44:	d82c      	bhi.n	800eba0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800eb46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb4a:	d02f      	beq.n	800ebac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800eb4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb50:	d826      	bhi.n	800eba0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800eb52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800eb56:	d02b      	beq.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800eb58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800eb5c:	d820      	bhi.n	800eba0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800eb5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb62:	d012      	beq.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800eb64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb68:	d81a      	bhi.n	800eba0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d022      	beq.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800eb6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb72:	d115      	bne.n	800eba0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb78:	3308      	adds	r3, #8
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f001 fc5f 	bl	8010440 <RCCEx_PLL2_Config>
 800eb82:	4603      	mov	r3, r0
 800eb84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800eb88:	e015      	b.n	800ebb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eb8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb8e:	3328      	adds	r3, #40	@ 0x28
 800eb90:	2102      	movs	r1, #2
 800eb92:	4618      	mov	r0, r3
 800eb94:	f001 fd06 	bl	80105a4 <RCCEx_PLL3_Config>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800eb9e:	e00a      	b.n	800ebb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eba0:	2301      	movs	r3, #1
 800eba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eba6:	e006      	b.n	800ebb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800eba8:	bf00      	nop
 800ebaa:	e004      	b.n	800ebb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ebac:	bf00      	nop
 800ebae:	e002      	b.n	800ebb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ebb0:	bf00      	nop
 800ebb2:	e000      	b.n	800ebb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ebb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10e      	bne.n	800ebdc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ebbe:	4b06      	ldr	r3, [pc, #24]	@ (800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ebc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebc2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ebc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ebce:	4a02      	ldr	r2, [pc, #8]	@ (800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ebd0:	430b      	orrs	r3, r1
 800ebd2:	6593      	str	r3, [r2, #88]	@ 0x58
 800ebd4:	e006      	b.n	800ebe4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ebd6:	bf00      	nop
 800ebd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebe0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ebe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ebf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ebfa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ebfe:	460b      	mov	r3, r1
 800ec00:	4313      	orrs	r3, r2
 800ec02:	d055      	beq.n	800ecb0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ec04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ec0c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ec10:	d033      	beq.n	800ec7a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ec12:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ec16:	d82c      	bhi.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ec18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec1c:	d02f      	beq.n	800ec7e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ec1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec22:	d826      	bhi.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ec24:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ec28:	d02b      	beq.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ec2a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ec2e:	d820      	bhi.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ec30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ec34:	d012      	beq.n	800ec5c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ec36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ec3a:	d81a      	bhi.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d022      	beq.n	800ec86 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ec40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ec44:	d115      	bne.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec4a:	3308      	adds	r3, #8
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f001 fbf6 	bl	8010440 <RCCEx_PLL2_Config>
 800ec54:	4603      	mov	r3, r0
 800ec56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ec5a:	e015      	b.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec60:	3328      	adds	r3, #40	@ 0x28
 800ec62:	2102      	movs	r1, #2
 800ec64:	4618      	mov	r0, r3
 800ec66:	f001 fc9d 	bl	80105a4 <RCCEx_PLL3_Config>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ec70:	e00a      	b.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec72:	2301      	movs	r3, #1
 800ec74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ec78:	e006      	b.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ec7a:	bf00      	nop
 800ec7c:	e004      	b.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ec7e:	bf00      	nop
 800ec80:	e002      	b.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ec82:	bf00      	nop
 800ec84:	e000      	b.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ec86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d10b      	bne.n	800eca8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ec90:	4ba0      	ldr	r3, [pc, #640]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ec92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec94:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ec98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eca0:	4a9c      	ldr	r2, [pc, #624]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eca2:	430b      	orrs	r3, r1
 800eca4:	6593      	str	r3, [r2, #88]	@ 0x58
 800eca6:	e003      	b.n	800ecb0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eca8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ecb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb8:	f002 0308 	and.w	r3, r2, #8
 800ecbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ecc6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ecca:	460b      	mov	r3, r1
 800eccc:	4313      	orrs	r3, r2
 800ecce:	d01e      	beq.n	800ed0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ecd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ecd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ecdc:	d10c      	bne.n	800ecf8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ecde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ece2:	3328      	adds	r3, #40	@ 0x28
 800ece4:	2102      	movs	r1, #2
 800ece6:	4618      	mov	r0, r3
 800ece8:	f001 fc5c 	bl	80105a4 <RCCEx_PLL3_Config>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d002      	beq.n	800ecf8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ecf8:	4b86      	ldr	r3, [pc, #536]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ecfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecfc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ed00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed08:	4a82      	ldr	r2, [pc, #520]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ed0a:	430b      	orrs	r3, r1
 800ed0c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ed0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed16:	f002 0310 	and.w	r3, r2, #16
 800ed1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ed1e:	2300      	movs	r3, #0
 800ed20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ed24:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ed28:	460b      	mov	r3, r1
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	d01e      	beq.n	800ed6c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ed2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ed36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed3a:	d10c      	bne.n	800ed56 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ed3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed40:	3328      	adds	r3, #40	@ 0x28
 800ed42:	2102      	movs	r1, #2
 800ed44:	4618      	mov	r0, r3
 800ed46:	f001 fc2d 	bl	80105a4 <RCCEx_PLL3_Config>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d002      	beq.n	800ed56 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ed50:	2301      	movs	r3, #1
 800ed52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ed56:	4b6f      	ldr	r3, [pc, #444]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ed58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ed5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ed66:	4a6b      	ldr	r2, [pc, #428]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ed68:	430b      	orrs	r3, r1
 800ed6a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ed6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed74:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ed78:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ed7e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ed82:	460b      	mov	r3, r1
 800ed84:	4313      	orrs	r3, r2
 800ed86:	d03e      	beq.n	800ee06 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ed88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ed94:	d022      	beq.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ed96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ed9a:	d81b      	bhi.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d003      	beq.n	800eda8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800eda0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eda4:	d00b      	beq.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800eda6:	e015      	b.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edac:	3308      	adds	r3, #8
 800edae:	2100      	movs	r1, #0
 800edb0:	4618      	mov	r0, r3
 800edb2:	f001 fb45 	bl	8010440 <RCCEx_PLL2_Config>
 800edb6:	4603      	mov	r3, r0
 800edb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800edbc:	e00f      	b.n	800edde <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800edbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edc2:	3328      	adds	r3, #40	@ 0x28
 800edc4:	2102      	movs	r1, #2
 800edc6:	4618      	mov	r0, r3
 800edc8:	f001 fbec 	bl	80105a4 <RCCEx_PLL3_Config>
 800edcc:	4603      	mov	r3, r0
 800edce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800edd2:	e004      	b.n	800edde <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800edd4:	2301      	movs	r3, #1
 800edd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800edda:	e000      	b.n	800edde <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800eddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d10b      	bne.n	800edfe <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ede6:	4b4b      	ldr	r3, [pc, #300]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ede8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800edee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800edf6:	4a47      	ldr	r2, [pc, #284]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800edf8:	430b      	orrs	r3, r1
 800edfa:	6593      	str	r3, [r2, #88]	@ 0x58
 800edfc:	e003      	b.n	800ee06 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ee06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ee12:	673b      	str	r3, [r7, #112]	@ 0x70
 800ee14:	2300      	movs	r3, #0
 800ee16:	677b      	str	r3, [r7, #116]	@ 0x74
 800ee18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	d03b      	beq.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ee22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ee2e:	d01f      	beq.n	800ee70 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ee30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ee34:	d818      	bhi.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ee36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ee3a:	d003      	beq.n	800ee44 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ee3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ee40:	d007      	beq.n	800ee52 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ee42:	e011      	b.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee44:	4b33      	ldr	r3, [pc, #204]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ee46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee48:	4a32      	ldr	r2, [pc, #200]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ee4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ee4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ee50:	e00f      	b.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee56:	3328      	adds	r3, #40	@ 0x28
 800ee58:	2101      	movs	r1, #1
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f001 fba2 	bl	80105a4 <RCCEx_PLL3_Config>
 800ee60:	4603      	mov	r3, r0
 800ee62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ee66:	e004      	b.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ee6e:	e000      	b.n	800ee72 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ee70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d10b      	bne.n	800ee92 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ee7a:	4b26      	ldr	r3, [pc, #152]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ee7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ee82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee8a:	4a22      	ldr	r2, [pc, #136]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ee8c:	430b      	orrs	r3, r1
 800ee8e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ee90:	e003      	b.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ee9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800eea6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eea8:	2300      	movs	r3, #0
 800eeaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eeac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	d034      	beq.n	800ef20 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800eeb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d003      	beq.n	800eec8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800eec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eec4:	d007      	beq.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800eec6:	e011      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eec8:	4b12      	ldr	r3, [pc, #72]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eeca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eecc:	4a11      	ldr	r2, [pc, #68]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eed4:	e00e      	b.n	800eef4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeda:	3308      	adds	r3, #8
 800eedc:	2102      	movs	r1, #2
 800eede:	4618      	mov	r0, r3
 800eee0:	f001 faae 	bl	8010440 <RCCEx_PLL2_Config>
 800eee4:	4603      	mov	r3, r0
 800eee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eeea:	e003      	b.n	800eef4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800eeec:	2301      	movs	r3, #1
 800eeee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d10d      	bne.n	800ef18 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800eefc:	4b05      	ldr	r3, [pc, #20]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eefe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef00:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ef04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef0a:	4a02      	ldr	r2, [pc, #8]	@ (800ef14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ef0c:	430b      	orrs	r3, r1
 800ef0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ef10:	e006      	b.n	800ef20 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ef12:	bf00      	nop
 800ef14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ef20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef28:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ef2c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef2e:	2300      	movs	r3, #0
 800ef30:	667b      	str	r3, [r7, #100]	@ 0x64
 800ef32:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ef36:	460b      	mov	r3, r1
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	d00c      	beq.n	800ef56 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ef3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef40:	3328      	adds	r3, #40	@ 0x28
 800ef42:	2102      	movs	r1, #2
 800ef44:	4618      	mov	r0, r3
 800ef46:	f001 fb2d 	bl	80105a4 <RCCEx_PLL3_Config>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d002      	beq.n	800ef56 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ef50:	2301      	movs	r3, #1
 800ef52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ef56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ef62:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ef64:	2300      	movs	r3, #0
 800ef66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ef68:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	d036      	beq.n	800efe0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ef72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ef78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ef7c:	d018      	beq.n	800efb0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ef7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ef82:	d811      	bhi.n	800efa8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ef84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef88:	d014      	beq.n	800efb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ef8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef8e:	d80b      	bhi.n	800efa8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d011      	beq.n	800efb8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ef94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef98:	d106      	bne.n	800efa8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef9a:	4bb7      	ldr	r3, [pc, #732]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ef9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef9e:	4ab6      	ldr	r2, [pc, #728]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800efa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800efa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800efa6:	e008      	b.n	800efba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800efa8:	2301      	movs	r3, #1
 800efaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800efae:	e004      	b.n	800efba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800efb0:	bf00      	nop
 800efb2:	e002      	b.n	800efba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800efb4:	bf00      	nop
 800efb6:	e000      	b.n	800efba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800efb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800efba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d10a      	bne.n	800efd8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800efc2:	4bad      	ldr	r3, [pc, #692]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800efc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800efca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800efd0:	4aa9      	ldr	r2, [pc, #676]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800efd2:	430b      	orrs	r3, r1
 800efd4:	6553      	str	r3, [r2, #84]	@ 0x54
 800efd6:	e003      	b.n	800efe0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800efdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800efe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800efec:	653b      	str	r3, [r7, #80]	@ 0x50
 800efee:	2300      	movs	r3, #0
 800eff0:	657b      	str	r3, [r7, #84]	@ 0x54
 800eff2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800eff6:	460b      	mov	r3, r1
 800eff8:	4313      	orrs	r3, r2
 800effa:	d009      	beq.n	800f010 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800effc:	4b9e      	ldr	r3, [pc, #632]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800effe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f000:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f00a:	4a9b      	ldr	r2, [pc, #620]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f00c:	430b      	orrs	r3, r1
 800f00e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f018:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f01c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f01e:	2300      	movs	r3, #0
 800f020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f022:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f026:	460b      	mov	r3, r1
 800f028:	4313      	orrs	r3, r2
 800f02a:	d009      	beq.n	800f040 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f02c:	4b92      	ldr	r3, [pc, #584]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f02e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f030:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800f034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f03a:	4a8f      	ldr	r2, [pc, #572]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f03c:	430b      	orrs	r3, r1
 800f03e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f048:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800f04c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f04e:	2300      	movs	r3, #0
 800f050:	647b      	str	r3, [r7, #68]	@ 0x44
 800f052:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800f056:	460b      	mov	r3, r1
 800f058:	4313      	orrs	r3, r2
 800f05a:	d00e      	beq.n	800f07a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f05c:	4b86      	ldr	r3, [pc, #536]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f05e:	691b      	ldr	r3, [r3, #16]
 800f060:	4a85      	ldr	r2, [pc, #532]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f062:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f066:	6113      	str	r3, [r2, #16]
 800f068:	4b83      	ldr	r3, [pc, #524]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f06a:	6919      	ldr	r1, [r3, #16]
 800f06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f070:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f074:	4a80      	ldr	r2, [pc, #512]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f076:	430b      	orrs	r3, r1
 800f078:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f082:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800f086:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f088:	2300      	movs	r3, #0
 800f08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f08c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800f090:	460b      	mov	r3, r1
 800f092:	4313      	orrs	r3, r2
 800f094:	d009      	beq.n	800f0aa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f096:	4b78      	ldr	r3, [pc, #480]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f09a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0a4:	4a74      	ldr	r2, [pc, #464]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f0a6:	430b      	orrs	r3, r1
 800f0a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800f0b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	d00a      	beq.n	800f0dc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f0c6:	4b6c      	ldr	r3, [pc, #432]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f0c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0ca:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f0d6:	4a68      	ldr	r2, [pc, #416]	@ (800f278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f0d8:	430b      	orrs	r3, r1
 800f0da:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e4:	2100      	movs	r1, #0
 800f0e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f0e8:	f003 0301 	and.w	r3, r3, #1
 800f0ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0ee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	d011      	beq.n	800f11c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0fc:	3308      	adds	r3, #8
 800f0fe:	2100      	movs	r1, #0
 800f100:	4618      	mov	r0, r3
 800f102:	f001 f99d 	bl	8010440 <RCCEx_PLL2_Config>
 800f106:	4603      	mov	r3, r0
 800f108:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f10c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f110:	2b00      	cmp	r3, #0
 800f112:	d003      	beq.n	800f11c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f118:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f124:	2100      	movs	r1, #0
 800f126:	6239      	str	r1, [r7, #32]
 800f128:	f003 0302 	and.w	r3, r3, #2
 800f12c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f12e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f132:	460b      	mov	r3, r1
 800f134:	4313      	orrs	r3, r2
 800f136:	d011      	beq.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f13c:	3308      	adds	r3, #8
 800f13e:	2101      	movs	r1, #1
 800f140:	4618      	mov	r0, r3
 800f142:	f001 f97d 	bl	8010440 <RCCEx_PLL2_Config>
 800f146:	4603      	mov	r3, r0
 800f148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f14c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f150:	2b00      	cmp	r3, #0
 800f152:	d003      	beq.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f158:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f164:	2100      	movs	r1, #0
 800f166:	61b9      	str	r1, [r7, #24]
 800f168:	f003 0304 	and.w	r3, r3, #4
 800f16c:	61fb      	str	r3, [r7, #28]
 800f16e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f172:	460b      	mov	r3, r1
 800f174:	4313      	orrs	r3, r2
 800f176:	d011      	beq.n	800f19c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f17c:	3308      	adds	r3, #8
 800f17e:	2102      	movs	r1, #2
 800f180:	4618      	mov	r0, r3
 800f182:	f001 f95d 	bl	8010440 <RCCEx_PLL2_Config>
 800f186:	4603      	mov	r3, r0
 800f188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f18c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f190:	2b00      	cmp	r3, #0
 800f192:	d003      	beq.n	800f19c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f198:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	6139      	str	r1, [r7, #16]
 800f1a8:	f003 0308 	and.w	r3, r3, #8
 800f1ac:	617b      	str	r3, [r7, #20]
 800f1ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	d011      	beq.n	800f1dc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1bc:	3328      	adds	r3, #40	@ 0x28
 800f1be:	2100      	movs	r1, #0
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f001 f9ef 	bl	80105a4 <RCCEx_PLL3_Config>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800f1cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d003      	beq.n	800f1dc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f1d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	60b9      	str	r1, [r7, #8]
 800f1e8:	f003 0310 	and.w	r3, r3, #16
 800f1ec:	60fb      	str	r3, [r7, #12]
 800f1ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	d011      	beq.n	800f21c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1fc:	3328      	adds	r3, #40	@ 0x28
 800f1fe:	2101      	movs	r1, #1
 800f200:	4618      	mov	r0, r3
 800f202:	f001 f9cf 	bl	80105a4 <RCCEx_PLL3_Config>
 800f206:	4603      	mov	r3, r0
 800f208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f20c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f210:	2b00      	cmp	r3, #0
 800f212:	d003      	beq.n	800f21c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f214:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f218:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f224:	2100      	movs	r1, #0
 800f226:	6039      	str	r1, [r7, #0]
 800f228:	f003 0320 	and.w	r3, r3, #32
 800f22c:	607b      	str	r3, [r7, #4]
 800f22e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f232:	460b      	mov	r3, r1
 800f234:	4313      	orrs	r3, r2
 800f236:	d011      	beq.n	800f25c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f23c:	3328      	adds	r3, #40	@ 0x28
 800f23e:	2102      	movs	r1, #2
 800f240:	4618      	mov	r0, r3
 800f242:	f001 f9af 	bl	80105a4 <RCCEx_PLL3_Config>
 800f246:	4603      	mov	r3, r0
 800f248:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f24c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f250:	2b00      	cmp	r3, #0
 800f252:	d003      	beq.n	800f25c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f254:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f258:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800f25c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800f260:	2b00      	cmp	r3, #0
 800f262:	d101      	bne.n	800f268 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800f264:	2300      	movs	r3, #0
 800f266:	e000      	b.n	800f26a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800f268:	2301      	movs	r3, #1
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800f270:	46bd      	mov	sp, r7
 800f272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f276:	bf00      	nop
 800f278:	58024400 	.word	0x58024400

0800f27c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b090      	sub	sp, #64	@ 0x40
 800f280:	af00      	add	r7, sp, #0
 800f282:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f28a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800f28e:	430b      	orrs	r3, r1
 800f290:	f040 8094 	bne.w	800f3bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f294:	4b9b      	ldr	r3, [pc, #620]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f298:	f003 0307 	and.w	r3, r3, #7
 800f29c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2a0:	2b04      	cmp	r3, #4
 800f2a2:	f200 8087 	bhi.w	800f3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f2a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f2ac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ac:	0800f2c1 	.word	0x0800f2c1
 800f2b0:	0800f2e9 	.word	0x0800f2e9
 800f2b4:	0800f311 	.word	0x0800f311
 800f2b8:	0800f3ad 	.word	0x0800f3ad
 800f2bc:	0800f339 	.word	0x0800f339
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f2c0:	4b90      	ldr	r3, [pc, #576]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f2c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f2cc:	d108      	bne.n	800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f2ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f000 ff62 	bl	801019c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2dc:	f000 bc93 	b.w	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2e4:	f000 bc8f 	b.w	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f2e8:	4b86      	ldr	r3, [pc, #536]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f2f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f2f4:	d108      	bne.n	800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2f6:	f107 0318 	add.w	r3, r7, #24
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f000 fca6 	bl	800fc4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f304:	f000 bc7f 	b.w	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f308:	2300      	movs	r3, #0
 800f30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f30c:	f000 bc7b 	b.w	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f310:	4b7c      	ldr	r3, [pc, #496]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f31c:	d108      	bne.n	800f330 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f31e:	f107 030c 	add.w	r3, r7, #12
 800f322:	4618      	mov	r0, r3
 800f324:	f000 fde6 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f32c:	f000 bc6b 	b.w	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f330:	2300      	movs	r3, #0
 800f332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f334:	f000 bc67 	b.w	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f338:	4b72      	ldr	r3, [pc, #456]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f33a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f33c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f340:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f342:	4b70      	ldr	r3, [pc, #448]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f003 0304 	and.w	r3, r3, #4
 800f34a:	2b04      	cmp	r3, #4
 800f34c:	d10c      	bne.n	800f368 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f34e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f350:	2b00      	cmp	r3, #0
 800f352:	d109      	bne.n	800f368 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f354:	4b6b      	ldr	r3, [pc, #428]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	08db      	lsrs	r3, r3, #3
 800f35a:	f003 0303 	and.w	r3, r3, #3
 800f35e:	4a6a      	ldr	r2, [pc, #424]	@ (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f360:	fa22 f303 	lsr.w	r3, r2, r3
 800f364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f366:	e01f      	b.n	800f3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f368:	4b66      	ldr	r3, [pc, #408]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f374:	d106      	bne.n	800f384 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f378:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f37c:	d102      	bne.n	800f384 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f37e:	4b63      	ldr	r3, [pc, #396]	@ (800f50c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f382:	e011      	b.n	800f3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f384:	4b5f      	ldr	r3, [pc, #380]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f38c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f390:	d106      	bne.n	800f3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f398:	d102      	bne.n	800f3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f39a:	4b5d      	ldr	r3, [pc, #372]	@ (800f510 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f39e:	e003      	b.n	800f3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f3a4:	f000 bc2f 	b.w	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f3a8:	f000 bc2d 	b.w	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f3ac:	4b59      	ldr	r3, [pc, #356]	@ (800f514 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3b0:	f000 bc29 	b.w	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3b8:	f000 bc25 	b.w	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f3bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3c0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800f3c4:	430b      	orrs	r3, r1
 800f3c6:	f040 80a7 	bne.w	800f518 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f3ca:	4b4e      	ldr	r3, [pc, #312]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f3cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3ce:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800f3d2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f3da:	d054      	beq.n	800f486 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800f3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f3e2:	f200 808b 	bhi.w	800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f3ec:	f000 8083 	beq.w	800f4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800f3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f3f6:	f200 8081 	bhi.w	800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f400:	d02f      	beq.n	800f462 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f404:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f408:	d878      	bhi.n	800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d004      	beq.n	800f41a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800f410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f412:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f416:	d012      	beq.n	800f43e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800f418:	e070      	b.n	800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f41a:	4b3a      	ldr	r3, [pc, #232]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f422:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f426:	d107      	bne.n	800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f428:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f42c:	4618      	mov	r0, r3
 800f42e:	f000 feb5 	bl	801019c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f436:	e3e6      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f438:	2300      	movs	r3, #0
 800f43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f43c:	e3e3      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f43e:	4b31      	ldr	r3, [pc, #196]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f44a:	d107      	bne.n	800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f44c:	f107 0318 	add.w	r3, r7, #24
 800f450:	4618      	mov	r0, r3
 800f452:	f000 fbfb 	bl	800fc4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f45a:	e3d4      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f45c:	2300      	movs	r3, #0
 800f45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f460:	e3d1      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f462:	4b28      	ldr	r3, [pc, #160]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f46a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f46e:	d107      	bne.n	800f480 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f470:	f107 030c 	add.w	r3, r7, #12
 800f474:	4618      	mov	r0, r3
 800f476:	f000 fd3d 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f47e:	e3c2      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f480:	2300      	movs	r3, #0
 800f482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f484:	e3bf      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f486:	4b1f      	ldr	r3, [pc, #124]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f48a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f48e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f490:	4b1c      	ldr	r3, [pc, #112]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f003 0304 	and.w	r3, r3, #4
 800f498:	2b04      	cmp	r3, #4
 800f49a:	d10c      	bne.n	800f4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800f49c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d109      	bne.n	800f4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f4a2:	4b18      	ldr	r3, [pc, #96]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	08db      	lsrs	r3, r3, #3
 800f4a8:	f003 0303 	and.w	r3, r3, #3
 800f4ac:	4a16      	ldr	r2, [pc, #88]	@ (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f4ae:	fa22 f303 	lsr.w	r3, r2, r3
 800f4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4b4:	e01e      	b.n	800f4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f4b6:	4b13      	ldr	r3, [pc, #76]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f4be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4c2:	d106      	bne.n	800f4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800f4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4ca:	d102      	bne.n	800f4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f4cc:	4b0f      	ldr	r3, [pc, #60]	@ (800f50c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4d0:	e010      	b.n	800f4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f4d2:	4b0c      	ldr	r3, [pc, #48]	@ (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f4da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f4de:	d106      	bne.n	800f4ee <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800f4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4e6:	d102      	bne.n	800f4ee <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f4e8:	4b09      	ldr	r3, [pc, #36]	@ (800f510 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4ec:	e002      	b.n	800f4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f4f2:	e388      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f4f4:	e387      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f4f6:	4b07      	ldr	r3, [pc, #28]	@ (800f514 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4fa:	e384      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f500:	e381      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f502:	bf00      	nop
 800f504:	58024400 	.word	0x58024400
 800f508:	03d09000 	.word	0x03d09000
 800f50c:	003d0900 	.word	0x003d0900
 800f510:	016e3600 	.word	0x016e3600
 800f514:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f51c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f520:	430b      	orrs	r3, r1
 800f522:	f040 809c 	bne.w	800f65e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f526:	4b9e      	ldr	r3, [pc, #632]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f52a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800f52e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f532:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f536:	d054      	beq.n	800f5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800f538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f53a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f53e:	f200 808b 	bhi.w	800f658 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f544:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f548:	f000 8083 	beq.w	800f652 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800f54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f54e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f552:	f200 8081 	bhi.w	800f658 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f558:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f55c:	d02f      	beq.n	800f5be <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800f55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f560:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f564:	d878      	bhi.n	800f658 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d004      	beq.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800f56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f56e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f572:	d012      	beq.n	800f59a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f574:	e070      	b.n	800f658 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f576:	4b8a      	ldr	r3, [pc, #552]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f57e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f582:	d107      	bne.n	800f594 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f588:	4618      	mov	r0, r3
 800f58a:	f000 fe07 	bl	801019c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f592:	e338      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f594:	2300      	movs	r3, #0
 800f596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f598:	e335      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f59a:	4b81      	ldr	r3, [pc, #516]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f5a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f5a6:	d107      	bne.n	800f5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5a8:	f107 0318 	add.w	r3, r7, #24
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f000 fb4d 	bl	800fc4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5b6:	e326      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5bc:	e323      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f5be:	4b78      	ldr	r3, [pc, #480]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f5c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5ca:	d107      	bne.n	800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5cc:	f107 030c 	add.w	r3, r7, #12
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f000 fc8f 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5da:	e314      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5e0:	e311      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f5e2:	4b6f      	ldr	r3, [pc, #444]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f5e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f5e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f5ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f5ec:	4b6c      	ldr	r3, [pc, #432]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	f003 0304 	and.w	r3, r3, #4
 800f5f4:	2b04      	cmp	r3, #4
 800f5f6:	d10c      	bne.n	800f612 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800f5f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d109      	bne.n	800f612 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f5fe:	4b68      	ldr	r3, [pc, #416]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	08db      	lsrs	r3, r3, #3
 800f604:	f003 0303 	and.w	r3, r3, #3
 800f608:	4a66      	ldr	r2, [pc, #408]	@ (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f60a:	fa22 f303 	lsr.w	r3, r2, r3
 800f60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f610:	e01e      	b.n	800f650 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f612:	4b63      	ldr	r3, [pc, #396]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f61a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f61e:	d106      	bne.n	800f62e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f626:	d102      	bne.n	800f62e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f628:	4b5f      	ldr	r3, [pc, #380]	@ (800f7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f62c:	e010      	b.n	800f650 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f62e:	4b5c      	ldr	r3, [pc, #368]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f63a:	d106      	bne.n	800f64a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800f63c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f63e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f642:	d102      	bne.n	800f64a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f644:	4b59      	ldr	r3, [pc, #356]	@ (800f7ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f648:	e002      	b.n	800f650 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f64a:	2300      	movs	r3, #0
 800f64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f64e:	e2da      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f650:	e2d9      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f652:	4b57      	ldr	r3, [pc, #348]	@ (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f656:	e2d6      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f658:	2300      	movs	r3, #0
 800f65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f65c:	e2d3      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f65e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f662:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f666:	430b      	orrs	r3, r1
 800f668:	f040 80a7 	bne.w	800f7ba <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f66c:	4b4c      	ldr	r3, [pc, #304]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f66e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f670:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f674:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f678:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f67c:	d055      	beq.n	800f72a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800f67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f684:	f200 8096 	bhi.w	800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f68a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f68e:	f000 8084 	beq.w	800f79a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800f692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f694:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f698:	f200 808c 	bhi.w	800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f69e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f6a2:	d030      	beq.n	800f706 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800f6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f6aa:	f200 8083 	bhi.w	800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d004      	beq.n	800f6be <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800f6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f6ba:	d012      	beq.n	800f6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800f6bc:	e07a      	b.n	800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f6be:	4b38      	ldr	r3, [pc, #224]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f6c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f6ca:	d107      	bne.n	800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f6cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f000 fd63 	bl	801019c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6da:	e294      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6e0:	e291      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f6e2:	4b2f      	ldr	r3, [pc, #188]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f6ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f6ee:	d107      	bne.n	800f700 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6f0:	f107 0318 	add.w	r3, r7, #24
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f000 faa9 	bl	800fc4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6fe:	e282      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f700:	2300      	movs	r3, #0
 800f702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f704:	e27f      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f706:	4b26      	ldr	r3, [pc, #152]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f70e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f712:	d107      	bne.n	800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f714:	f107 030c 	add.w	r3, r7, #12
 800f718:	4618      	mov	r0, r3
 800f71a:	f000 fbeb 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f722:	e270      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f724:	2300      	movs	r3, #0
 800f726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f728:	e26d      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f72a:	4b1d      	ldr	r3, [pc, #116]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f72c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f72e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f732:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f734:	4b1a      	ldr	r3, [pc, #104]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f003 0304 	and.w	r3, r3, #4
 800f73c:	2b04      	cmp	r3, #4
 800f73e:	d10c      	bne.n	800f75a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800f740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f742:	2b00      	cmp	r3, #0
 800f744:	d109      	bne.n	800f75a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f746:	4b16      	ldr	r3, [pc, #88]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	08db      	lsrs	r3, r3, #3
 800f74c:	f003 0303 	and.w	r3, r3, #3
 800f750:	4a14      	ldr	r2, [pc, #80]	@ (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f752:	fa22 f303 	lsr.w	r3, r2, r3
 800f756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f758:	e01e      	b.n	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f75a:	4b11      	ldr	r3, [pc, #68]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f766:	d106      	bne.n	800f776 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f76a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f76e:	d102      	bne.n	800f776 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f770:	4b0d      	ldr	r3, [pc, #52]	@ (800f7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f774:	e010      	b.n	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f776:	4b0a      	ldr	r3, [pc, #40]	@ (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f77e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f782:	d106      	bne.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800f784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f78a:	d102      	bne.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f78c:	4b07      	ldr	r3, [pc, #28]	@ (800f7ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f790:	e002      	b.n	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f792:	2300      	movs	r3, #0
 800f794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f796:	e236      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f798:	e235      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f79a:	4b05      	ldr	r3, [pc, #20]	@ (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f79e:	e232      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f7a0:	58024400 	.word	0x58024400
 800f7a4:	03d09000 	.word	0x03d09000
 800f7a8:	003d0900 	.word	0x003d0900
 800f7ac:	016e3600 	.word	0x016e3600
 800f7b0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f7b8:	e225      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f7ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7be:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f7c2:	430b      	orrs	r3, r1
 800f7c4:	f040 8085 	bne.w	800f8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f7c8:	4b9c      	ldr	r3, [pc, #624]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f7ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7cc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f7d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800f7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f7d8:	d06b      	beq.n	800f8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800f7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f7e0:	d874      	bhi.n	800f8cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f7e8:	d056      	beq.n	800f898 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800f7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f7f0:	d86c      	bhi.n	800f8cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f7f8:	d03b      	beq.n	800f872 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f800:	d864      	bhi.n	800f8cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f808:	d021      	beq.n	800f84e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f80c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f810:	d85c      	bhi.n	800f8cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f814:	2b00      	cmp	r3, #0
 800f816:	d004      	beq.n	800f822 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800f818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f81e:	d004      	beq.n	800f82a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800f820:	e054      	b.n	800f8cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f822:	f7fe fb5f 	bl	800dee4 <HAL_RCC_GetPCLK1Freq>
 800f826:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f828:	e1ed      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f82a:	4b84      	ldr	r3, [pc, #528]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f836:	d107      	bne.n	800f848 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f838:	f107 0318 	add.w	r3, r7, #24
 800f83c:	4618      	mov	r0, r3
 800f83e:	f000 fa05 	bl	800fc4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f846:	e1de      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f848:	2300      	movs	r3, #0
 800f84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f84c:	e1db      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f84e:	4b7b      	ldr	r3, [pc, #492]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f85a:	d107      	bne.n	800f86c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f85c:	f107 030c 	add.w	r3, r7, #12
 800f860:	4618      	mov	r0, r3
 800f862:	f000 fb47 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f86a:	e1cc      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f86c:	2300      	movs	r3, #0
 800f86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f870:	e1c9      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f872:	4b72      	ldr	r3, [pc, #456]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f003 0304 	and.w	r3, r3, #4
 800f87a:	2b04      	cmp	r3, #4
 800f87c:	d109      	bne.n	800f892 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f87e:	4b6f      	ldr	r3, [pc, #444]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	08db      	lsrs	r3, r3, #3
 800f884:	f003 0303 	and.w	r3, r3, #3
 800f888:	4a6d      	ldr	r2, [pc, #436]	@ (800fa40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f88a:	fa22 f303 	lsr.w	r3, r2, r3
 800f88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f890:	e1b9      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f892:	2300      	movs	r3, #0
 800f894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f896:	e1b6      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f898:	4b68      	ldr	r3, [pc, #416]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f8a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f8a4:	d102      	bne.n	800f8ac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800f8a6:	4b67      	ldr	r3, [pc, #412]	@ (800fa44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8aa:	e1ac      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8b0:	e1a9      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f8b2:	4b62      	ldr	r3, [pc, #392]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f8ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f8be:	d102      	bne.n	800f8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800f8c0:	4b61      	ldr	r3, [pc, #388]	@ (800fa48 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8c4:	e19f      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8ca:	e19c      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8d0:	e199      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f8d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8d6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f8da:	430b      	orrs	r3, r1
 800f8dc:	d173      	bne.n	800f9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f8de:	4b57      	ldr	r3, [pc, #348]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f8e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f8e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f8ee:	d02f      	beq.n	800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f8f6:	d863      	bhi.n	800f9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800f8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d004      	beq.n	800f908 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800f8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f904:	d012      	beq.n	800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800f906:	e05b      	b.n	800f9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f908:	4b4c      	ldr	r3, [pc, #304]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f914:	d107      	bne.n	800f926 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f916:	f107 0318 	add.w	r3, r7, #24
 800f91a:	4618      	mov	r0, r3
 800f91c:	f000 f996 	bl	800fc4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f924:	e16f      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f926:	2300      	movs	r3, #0
 800f928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f92a:	e16c      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f92c:	4b43      	ldr	r3, [pc, #268]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f938:	d107      	bne.n	800f94a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f93a:	f107 030c 	add.w	r3, r7, #12
 800f93e:	4618      	mov	r0, r3
 800f940:	f000 fad8 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f948:	e15d      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f94a:	2300      	movs	r3, #0
 800f94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f94e:	e15a      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f950:	4b3a      	ldr	r3, [pc, #232]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f954:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f958:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f95a:	4b38      	ldr	r3, [pc, #224]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f003 0304 	and.w	r3, r3, #4
 800f962:	2b04      	cmp	r3, #4
 800f964:	d10c      	bne.n	800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d109      	bne.n	800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f96c:	4b33      	ldr	r3, [pc, #204]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	08db      	lsrs	r3, r3, #3
 800f972:	f003 0303 	and.w	r3, r3, #3
 800f976:	4a32      	ldr	r2, [pc, #200]	@ (800fa40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f978:	fa22 f303 	lsr.w	r3, r2, r3
 800f97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f97e:	e01e      	b.n	800f9be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f980:	4b2e      	ldr	r3, [pc, #184]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f98c:	d106      	bne.n	800f99c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800f98e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f994:	d102      	bne.n	800f99c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f996:	4b2b      	ldr	r3, [pc, #172]	@ (800fa44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f998:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f99a:	e010      	b.n	800f9be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f99c:	4b27      	ldr	r3, [pc, #156]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f9a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f9a8:	d106      	bne.n	800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800f9aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f9b0:	d102      	bne.n	800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f9b2:	4b25      	ldr	r3, [pc, #148]	@ (800fa48 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f9b6:	e002      	b.n	800f9be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f9bc:	e123      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f9be:	e122      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9c4:	e11f      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f9c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9ca:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f9ce:	430b      	orrs	r3, r1
 800f9d0:	d13c      	bne.n	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f9d2:	4b1a      	ldr	r3, [pc, #104]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f9d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f9d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f9da:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d004      	beq.n	800f9ec <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800f9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f9e8:	d012      	beq.n	800fa10 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800f9ea:	e023      	b.n	800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f9ec:	4b13      	ldr	r3, [pc, #76]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f9f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f9f8:	d107      	bne.n	800fa0a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f9fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f000 fbcc 	bl	801019c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa08:	e0fd      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa0e:	e0fa      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fa10:	4b0a      	ldr	r3, [pc, #40]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fa18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fa1c:	d107      	bne.n	800fa2e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa1e:	f107 0318 	add.w	r3, r7, #24
 800fa22:	4618      	mov	r0, r3
 800fa24:	f000 f912 	bl	800fc4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800fa28:	6a3b      	ldr	r3, [r7, #32]
 800fa2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa2c:	e0eb      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa32:	e0e8      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800fa34:	2300      	movs	r3, #0
 800fa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa38:	e0e5      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fa3a:	bf00      	nop
 800fa3c:	58024400 	.word	0x58024400
 800fa40:	03d09000 	.word	0x03d09000
 800fa44:	003d0900 	.word	0x003d0900
 800fa48:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800fa4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa50:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800fa54:	430b      	orrs	r3, r1
 800fa56:	f040 8085 	bne.w	800fb64 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800fa5a:	4b6d      	ldr	r3, [pc, #436]	@ (800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fa5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa5e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800fa62:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fa64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fa6a:	d06b      	beq.n	800fb44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800fa6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fa72:	d874      	bhi.n	800fb5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fa74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa7a:	d056      	beq.n	800fb2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800fa7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa82:	d86c      	bhi.n	800fb5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fa84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fa8a:	d03b      	beq.n	800fb04 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800fa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fa92:	d864      	bhi.n	800fb5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fa94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa9a:	d021      	beq.n	800fae0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800fa9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800faa2:	d85c      	bhi.n	800fb5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800faa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d004      	beq.n	800fab4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800faaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fab0:	d004      	beq.n	800fabc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800fab2:	e054      	b.n	800fb5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800fab4:	f000 f8b4 	bl	800fc20 <HAL_RCCEx_GetD3PCLK1Freq>
 800fab8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800faba:	e0a4      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fabc:	4b54      	ldr	r3, [pc, #336]	@ (800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fac4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fac8:	d107      	bne.n	800fada <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800faca:	f107 0318 	add.w	r3, r7, #24
 800face:	4618      	mov	r0, r3
 800fad0:	f000 f8bc 	bl	800fc4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fad8:	e095      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fada:	2300      	movs	r3, #0
 800fadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fade:	e092      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fae0:	4b4b      	ldr	r3, [pc, #300]	@ (800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800faec:	d107      	bne.n	800fafe <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800faee:	f107 030c 	add.w	r3, r7, #12
 800faf2:	4618      	mov	r0, r3
 800faf4:	f000 f9fe 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fafc:	e083      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fafe:	2300      	movs	r3, #0
 800fb00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb02:	e080      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fb04:	4b42      	ldr	r3, [pc, #264]	@ (800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f003 0304 	and.w	r3, r3, #4
 800fb0c:	2b04      	cmp	r3, #4
 800fb0e:	d109      	bne.n	800fb24 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fb10:	4b3f      	ldr	r3, [pc, #252]	@ (800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	08db      	lsrs	r3, r3, #3
 800fb16:	f003 0303 	and.w	r3, r3, #3
 800fb1a:	4a3e      	ldr	r2, [pc, #248]	@ (800fc14 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800fb1c:	fa22 f303 	lsr.w	r3, r2, r3
 800fb20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb22:	e070      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fb24:	2300      	movs	r3, #0
 800fb26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb28:	e06d      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fb2a:	4b39      	ldr	r3, [pc, #228]	@ (800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb36:	d102      	bne.n	800fb3e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800fb38:	4b37      	ldr	r3, [pc, #220]	@ (800fc18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800fb3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb3c:	e063      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb42:	e060      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fb44:	4b32      	ldr	r3, [pc, #200]	@ (800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb50:	d102      	bne.n	800fb58 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800fb52:	4b32      	ldr	r3, [pc, #200]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800fb54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb56:	e056      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb5c:	e053      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb62:	e050      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800fb64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb68:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800fb6c:	430b      	orrs	r3, r1
 800fb6e:	d148      	bne.n	800fc02 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800fb70:	4b27      	ldr	r3, [pc, #156]	@ (800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fb72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fb78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb80:	d02a      	beq.n	800fbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800fb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb88:	d838      	bhi.n	800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800fb8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d004      	beq.n	800fb9a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800fb90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fb96:	d00d      	beq.n	800fbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800fb98:	e030      	b.n	800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fb9a:	4b1d      	ldr	r3, [pc, #116]	@ (800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fba6:	d102      	bne.n	800fbae <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800fba8:	4b1c      	ldr	r3, [pc, #112]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800fbaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fbac:	e02b      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbb2:	e028      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fbb4:	4b16      	ldr	r3, [pc, #88]	@ (800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fbbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fbc0:	d107      	bne.n	800fbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fbc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f000 fae8 	bl	801019c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fbd0:	e019      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbd6:	e016      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fbd8:	4b0d      	ldr	r3, [pc, #52]	@ (800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fbe0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fbe4:	d107      	bne.n	800fbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbe6:	f107 0318 	add.w	r3, r7, #24
 800fbea:	4618      	mov	r0, r3
 800fbec:	f000 f82e 	bl	800fc4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fbf4:	e007      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbfa:	e004      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc00:	e001      	b.n	800fc06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800fc02:	2300      	movs	r3, #0
 800fc04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800fc06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3740      	adds	r7, #64	@ 0x40
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}
 800fc10:	58024400 	.word	0x58024400
 800fc14:	03d09000 	.word	0x03d09000
 800fc18:	003d0900 	.word	0x003d0900
 800fc1c:	016e3600 	.word	0x016e3600

0800fc20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fc24:	f7fe f92e 	bl	800de84 <HAL_RCC_GetHCLKFreq>
 800fc28:	4602      	mov	r2, r0
 800fc2a:	4b06      	ldr	r3, [pc, #24]	@ (800fc44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fc2c:	6a1b      	ldr	r3, [r3, #32]
 800fc2e:	091b      	lsrs	r3, r3, #4
 800fc30:	f003 0307 	and.w	r3, r3, #7
 800fc34:	4904      	ldr	r1, [pc, #16]	@ (800fc48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fc36:	5ccb      	ldrb	r3, [r1, r3]
 800fc38:	f003 031f 	and.w	r3, r3, #31
 800fc3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	58024400 	.word	0x58024400
 800fc48:	0801d860 	.word	0x0801d860

0800fc4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b089      	sub	sp, #36	@ 0x24
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fc54:	4ba1      	ldr	r3, [pc, #644]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc58:	f003 0303 	and.w	r3, r3, #3
 800fc5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fc5e:	4b9f      	ldr	r3, [pc, #636]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc62:	0b1b      	lsrs	r3, r3, #12
 800fc64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fc6a:	4b9c      	ldr	r3, [pc, #624]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc6e:	091b      	lsrs	r3, r3, #4
 800fc70:	f003 0301 	and.w	r3, r3, #1
 800fc74:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fc76:	4b99      	ldr	r3, [pc, #612]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc7a:	08db      	lsrs	r3, r3, #3
 800fc7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc80:	693a      	ldr	r2, [r7, #16]
 800fc82:	fb02 f303 	mul.w	r3, r2, r3
 800fc86:	ee07 3a90 	vmov	s15, r3
 800fc8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f000 8111 	beq.w	800febc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	2b02      	cmp	r3, #2
 800fc9e:	f000 8083 	beq.w	800fda8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	2b02      	cmp	r3, #2
 800fca6:	f200 80a1 	bhi.w	800fdec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d003      	beq.n	800fcb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d056      	beq.n	800fd64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fcb6:	e099      	b.n	800fdec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fcb8:	4b88      	ldr	r3, [pc, #544]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f003 0320 	and.w	r3, r3, #32
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d02d      	beq.n	800fd20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fcc4:	4b85      	ldr	r3, [pc, #532]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	08db      	lsrs	r3, r3, #3
 800fcca:	f003 0303 	and.w	r3, r3, #3
 800fcce:	4a84      	ldr	r2, [pc, #528]	@ (800fee0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fcd0:	fa22 f303 	lsr.w	r3, r2, r3
 800fcd4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	ee07 3a90 	vmov	s15, r3
 800fcdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	ee07 3a90 	vmov	s15, r3
 800fce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fcee:	4b7b      	ldr	r3, [pc, #492]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fcf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcf6:	ee07 3a90 	vmov	s15, r3
 800fcfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fcfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fd06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fd1e:	e087      	b.n	800fe30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	ee07 3a90 	vmov	s15, r3
 800fd26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fee8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fd2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd32:	4b6a      	ldr	r3, [pc, #424]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fd34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd3a:	ee07 3a90 	vmov	s15, r3
 800fd3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd42:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fd4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd62:	e065      	b.n	800fe30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	ee07 3a90 	vmov	s15, r3
 800fd6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800feec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fd72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd76:	4b59      	ldr	r3, [pc, #356]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fd78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd7e:	ee07 3a90 	vmov	s15, r3
 800fd82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd86:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fd8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fda2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fda6:	e043      	b.n	800fe30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	ee07 3a90 	vmov	s15, r3
 800fdae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fef0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800fdb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdba:	4b48      	ldr	r3, [pc, #288]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fdbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdc2:	ee07 3a90 	vmov	s15, r3
 800fdc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdca:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fdd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fdde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fde6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fdea:	e021      	b.n	800fe30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	ee07 3a90 	vmov	s15, r3
 800fdf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdf6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800feec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fdfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdfe:	4b37      	ldr	r3, [pc, #220]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe06:	ee07 3a90 	vmov	s15, r3
 800fe0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fee4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fe16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800fe30:	4b2a      	ldr	r3, [pc, #168]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe34:	0a5b      	lsrs	r3, r3, #9
 800fe36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe3a:	ee07 3a90 	vmov	s15, r3
 800fe3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe56:	ee17 2a90 	vmov	r2, s15
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800fe5e:	4b1f      	ldr	r3, [pc, #124]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe62:	0c1b      	lsrs	r3, r3, #16
 800fe64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe68:	ee07 3a90 	vmov	s15, r3
 800fe6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe78:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe84:	ee17 2a90 	vmov	r2, s15
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800fe8c:	4b13      	ldr	r3, [pc, #76]	@ (800fedc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe90:	0e1b      	lsrs	r3, r3, #24
 800fe92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe96:	ee07 3a90 	vmov	s15, r3
 800fe9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fea6:	edd7 6a07 	vldr	s13, [r7, #28]
 800feaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800feae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800feb2:	ee17 2a90 	vmov	r2, s15
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800feba:	e008      	b.n	800fece <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2200      	movs	r2, #0
 800fec6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2200      	movs	r2, #0
 800fecc:	609a      	str	r2, [r3, #8]
}
 800fece:	bf00      	nop
 800fed0:	3724      	adds	r7, #36	@ 0x24
 800fed2:	46bd      	mov	sp, r7
 800fed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed8:	4770      	bx	lr
 800feda:	bf00      	nop
 800fedc:	58024400 	.word	0x58024400
 800fee0:	03d09000 	.word	0x03d09000
 800fee4:	46000000 	.word	0x46000000
 800fee8:	4c742400 	.word	0x4c742400
 800feec:	4a742400 	.word	0x4a742400
 800fef0:	4bb71b00 	.word	0x4bb71b00

0800fef4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b089      	sub	sp, #36	@ 0x24
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fefc:	4ba1      	ldr	r3, [pc, #644]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fefe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff00:	f003 0303 	and.w	r3, r3, #3
 800ff04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ff06:	4b9f      	ldr	r3, [pc, #636]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff0a:	0d1b      	lsrs	r3, r3, #20
 800ff0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ff10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ff12:	4b9c      	ldr	r3, [pc, #624]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff16:	0a1b      	lsrs	r3, r3, #8
 800ff18:	f003 0301 	and.w	r3, r3, #1
 800ff1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ff1e:	4b99      	ldr	r3, [pc, #612]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff22:	08db      	lsrs	r3, r3, #3
 800ff24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ff28:	693a      	ldr	r2, [r7, #16]
 800ff2a:	fb02 f303 	mul.w	r3, r2, r3
 800ff2e:	ee07 3a90 	vmov	s15, r3
 800ff32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	f000 8111 	beq.w	8010164 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ff42:	69bb      	ldr	r3, [r7, #24]
 800ff44:	2b02      	cmp	r3, #2
 800ff46:	f000 8083 	beq.w	8010050 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	2b02      	cmp	r3, #2
 800ff4e:	f200 80a1 	bhi.w	8010094 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d003      	beq.n	800ff60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ff58:	69bb      	ldr	r3, [r7, #24]
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d056      	beq.n	801000c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ff5e:	e099      	b.n	8010094 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff60:	4b88      	ldr	r3, [pc, #544]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f003 0320 	and.w	r3, r3, #32
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d02d      	beq.n	800ffc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff6c:	4b85      	ldr	r3, [pc, #532]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	08db      	lsrs	r3, r3, #3
 800ff72:	f003 0303 	and.w	r3, r3, #3
 800ff76:	4a84      	ldr	r2, [pc, #528]	@ (8010188 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ff78:	fa22 f303 	lsr.w	r3, r2, r3
 800ff7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	ee07 3a90 	vmov	s15, r3
 800ff84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	ee07 3a90 	vmov	s15, r3
 800ff8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff96:	4b7b      	ldr	r3, [pc, #492]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff9e:	ee07 3a90 	vmov	s15, r3
 800ffa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ffaa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801018c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ffae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ffba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ffc6:	e087      	b.n	80100d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	ee07 3a90 	vmov	s15, r3
 800ffce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffd2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010190 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ffd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffda:	4b6a      	ldr	r3, [pc, #424]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ffdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffe2:	ee07 3a90 	vmov	s15, r3
 800ffe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffea:	ed97 6a03 	vldr	s12, [r7, #12]
 800ffee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801018c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801000a:	e065      	b.n	80100d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	ee07 3a90 	vmov	s15, r3
 8010012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010016:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801001a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801001e:	4b59      	ldr	r3, [pc, #356]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010026:	ee07 3a90 	vmov	s15, r3
 801002a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801002e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010032:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801018c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801003a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801003e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010046:	ee67 7a27 	vmul.f32	s15, s14, s15
 801004a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801004e:	e043      	b.n	80100d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	ee07 3a90 	vmov	s15, r3
 8010056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801005a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010198 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801005e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010062:	4b48      	ldr	r3, [pc, #288]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801006a:	ee07 3a90 	vmov	s15, r3
 801006e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010072:	ed97 6a03 	vldr	s12, [r7, #12]
 8010076:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801018c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801007a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801007e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801008a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801008e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010092:	e021      	b.n	80100d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	ee07 3a90 	vmov	s15, r3
 801009a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801009e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80100a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100a6:	4b37      	ldr	r3, [pc, #220]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100ae:	ee07 3a90 	vmov	s15, r3
 80100b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80100ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801018c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80100be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80100ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80100d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80100d8:	4b2a      	ldr	r3, [pc, #168]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100dc:	0a5b      	lsrs	r3, r3, #9
 80100de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100e2:	ee07 3a90 	vmov	s15, r3
 80100e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80100ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80100f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80100f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100fe:	ee17 2a90 	vmov	r2, s15
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010106:	4b1f      	ldr	r3, [pc, #124]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801010a:	0c1b      	lsrs	r3, r3, #16
 801010c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010110:	ee07 3a90 	vmov	s15, r3
 8010114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010118:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801011c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010120:	edd7 6a07 	vldr	s13, [r7, #28]
 8010124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801012c:	ee17 2a90 	vmov	r2, s15
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010134:	4b13      	ldr	r3, [pc, #76]	@ (8010184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010138:	0e1b      	lsrs	r3, r3, #24
 801013a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801013e:	ee07 3a90 	vmov	s15, r3
 8010142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010146:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801014a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801014e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801015a:	ee17 2a90 	vmov	r2, s15
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010162:	e008      	b.n	8010176 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2200      	movs	r2, #0
 8010168:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2200      	movs	r2, #0
 801016e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2200      	movs	r2, #0
 8010174:	609a      	str	r2, [r3, #8]
}
 8010176:	bf00      	nop
 8010178:	3724      	adds	r7, #36	@ 0x24
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop
 8010184:	58024400 	.word	0x58024400
 8010188:	03d09000 	.word	0x03d09000
 801018c:	46000000 	.word	0x46000000
 8010190:	4c742400 	.word	0x4c742400
 8010194:	4a742400 	.word	0x4a742400
 8010198:	4bb71b00 	.word	0x4bb71b00

0801019c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801019c:	b480      	push	{r7}
 801019e:	b089      	sub	sp, #36	@ 0x24
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80101a4:	4ba0      	ldr	r3, [pc, #640]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101a8:	f003 0303 	and.w	r3, r3, #3
 80101ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80101ae:	4b9e      	ldr	r3, [pc, #632]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101b2:	091b      	lsrs	r3, r3, #4
 80101b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80101b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80101ba:	4b9b      	ldr	r3, [pc, #620]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101be:	f003 0301 	and.w	r3, r3, #1
 80101c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80101c4:	4b98      	ldr	r3, [pc, #608]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101c8:	08db      	lsrs	r3, r3, #3
 80101ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80101ce:	693a      	ldr	r2, [r7, #16]
 80101d0:	fb02 f303 	mul.w	r3, r2, r3
 80101d4:	ee07 3a90 	vmov	s15, r3
 80101d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	f000 8111 	beq.w	801040a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80101e8:	69bb      	ldr	r3, [r7, #24]
 80101ea:	2b02      	cmp	r3, #2
 80101ec:	f000 8083 	beq.w	80102f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	2b02      	cmp	r3, #2
 80101f4:	f200 80a1 	bhi.w	801033a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d003      	beq.n	8010206 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80101fe:	69bb      	ldr	r3, [r7, #24]
 8010200:	2b01      	cmp	r3, #1
 8010202:	d056      	beq.n	80102b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010204:	e099      	b.n	801033a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010206:	4b88      	ldr	r3, [pc, #544]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f003 0320 	and.w	r3, r3, #32
 801020e:	2b00      	cmp	r3, #0
 8010210:	d02d      	beq.n	801026e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010212:	4b85      	ldr	r3, [pc, #532]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	08db      	lsrs	r3, r3, #3
 8010218:	f003 0303 	and.w	r3, r3, #3
 801021c:	4a83      	ldr	r2, [pc, #524]	@ (801042c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801021e:	fa22 f303 	lsr.w	r3, r2, r3
 8010222:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	ee07 3a90 	vmov	s15, r3
 801022a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	ee07 3a90 	vmov	s15, r3
 8010234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801023c:	4b7a      	ldr	r3, [pc, #488]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801023e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010244:	ee07 3a90 	vmov	s15, r3
 8010248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801024c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010250:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8010430 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801025c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010268:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801026c:	e087      	b.n	801037e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	ee07 3a90 	vmov	s15, r3
 8010274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010278:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8010434 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801027c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010280:	4b69      	ldr	r3, [pc, #420]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010288:	ee07 3a90 	vmov	s15, r3
 801028c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010290:	ed97 6a03 	vldr	s12, [r7, #12]
 8010294:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8010430 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801029c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80102a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80102a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80102b0:	e065      	b.n	801037e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	ee07 3a90 	vmov	s15, r3
 80102b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102bc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8010438 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80102c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80102c4:	4b58      	ldr	r3, [pc, #352]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80102c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102cc:	ee07 3a90 	vmov	s15, r3
 80102d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80102d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80102d8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8010430 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80102dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80102e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80102e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80102e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80102f4:	e043      	b.n	801037e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	ee07 3a90 	vmov	s15, r3
 80102fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010300:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 801043c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010308:	4b47      	ldr	r3, [pc, #284]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801030a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801030c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010310:	ee07 3a90 	vmov	s15, r3
 8010314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010318:	ed97 6a03 	vldr	s12, [r7, #12]
 801031c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010430 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010320:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010328:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801032c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010334:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010338:	e021      	b.n	801037e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	ee07 3a90 	vmov	s15, r3
 8010340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010344:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010434 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801034c:	4b36      	ldr	r3, [pc, #216]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801034e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010354:	ee07 3a90 	vmov	s15, r3
 8010358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801035c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010360:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010430 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801036c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010378:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801037c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801037e:	4b2a      	ldr	r3, [pc, #168]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010382:	0a5b      	lsrs	r3, r3, #9
 8010384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010388:	ee07 3a90 	vmov	s15, r3
 801038c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010390:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010394:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010398:	edd7 6a07 	vldr	s13, [r7, #28]
 801039c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80103a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80103a4:	ee17 2a90 	vmov	r2, s15
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80103ac:	4b1e      	ldr	r3, [pc, #120]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103b0:	0c1b      	lsrs	r3, r3, #16
 80103b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80103b6:	ee07 3a90 	vmov	s15, r3
 80103ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80103c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80103c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80103ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80103ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80103d2:	ee17 2a90 	vmov	r2, s15
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80103da:	4b13      	ldr	r3, [pc, #76]	@ (8010428 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103de:	0e1b      	lsrs	r3, r3, #24
 80103e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80103e4:	ee07 3a90 	vmov	s15, r3
 80103e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80103f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80103f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80103f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80103fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010400:	ee17 2a90 	vmov	r2, s15
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010408:	e008      	b.n	801041c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2200      	movs	r2, #0
 801040e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2200      	movs	r2, #0
 8010414:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2200      	movs	r2, #0
 801041a:	609a      	str	r2, [r3, #8]
}
 801041c:	bf00      	nop
 801041e:	3724      	adds	r7, #36	@ 0x24
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr
 8010428:	58024400 	.word	0x58024400
 801042c:	03d09000 	.word	0x03d09000
 8010430:	46000000 	.word	0x46000000
 8010434:	4c742400 	.word	0x4c742400
 8010438:	4a742400 	.word	0x4a742400
 801043c:	4bb71b00 	.word	0x4bb71b00

08010440 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b084      	sub	sp, #16
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801044a:	2300      	movs	r3, #0
 801044c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801044e:	4b53      	ldr	r3, [pc, #332]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010452:	f003 0303 	and.w	r3, r3, #3
 8010456:	2b03      	cmp	r3, #3
 8010458:	d101      	bne.n	801045e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801045a:	2301      	movs	r3, #1
 801045c:	e099      	b.n	8010592 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801045e:	4b4f      	ldr	r3, [pc, #316]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4a4e      	ldr	r2, [pc, #312]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010464:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801046a:	f7f6 ff39 	bl	80072e0 <HAL_GetTick>
 801046e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010470:	e008      	b.n	8010484 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010472:	f7f6 ff35 	bl	80072e0 <HAL_GetTick>
 8010476:	4602      	mov	r2, r0
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	1ad3      	subs	r3, r2, r3
 801047c:	2b02      	cmp	r3, #2
 801047e:	d901      	bls.n	8010484 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010480:	2303      	movs	r3, #3
 8010482:	e086      	b.n	8010592 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010484:	4b45      	ldr	r3, [pc, #276]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801048c:	2b00      	cmp	r3, #0
 801048e:	d1f0      	bne.n	8010472 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010490:	4b42      	ldr	r3, [pc, #264]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010494:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	031b      	lsls	r3, r3, #12
 801049e:	493f      	ldr	r1, [pc, #252]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 80104a0:	4313      	orrs	r3, r2
 80104a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	3b01      	subs	r3, #1
 80104aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	689b      	ldr	r3, [r3, #8]
 80104b2:	3b01      	subs	r3, #1
 80104b4:	025b      	lsls	r3, r3, #9
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	431a      	orrs	r2, r3
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	3b01      	subs	r3, #1
 80104c0:	041b      	lsls	r3, r3, #16
 80104c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80104c6:	431a      	orrs	r2, r3
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	691b      	ldr	r3, [r3, #16]
 80104cc:	3b01      	subs	r3, #1
 80104ce:	061b      	lsls	r3, r3, #24
 80104d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80104d4:	4931      	ldr	r1, [pc, #196]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 80104d6:	4313      	orrs	r3, r2
 80104d8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80104da:	4b30      	ldr	r3, [pc, #192]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 80104dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	695b      	ldr	r3, [r3, #20]
 80104e6:	492d      	ldr	r1, [pc, #180]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 80104e8:	4313      	orrs	r3, r2
 80104ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80104ec:	4b2b      	ldr	r3, [pc, #172]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 80104ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104f0:	f023 0220 	bic.w	r2, r3, #32
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	699b      	ldr	r3, [r3, #24]
 80104f8:	4928      	ldr	r1, [pc, #160]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 80104fa:	4313      	orrs	r3, r2
 80104fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80104fe:	4b27      	ldr	r3, [pc, #156]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010502:	4a26      	ldr	r2, [pc, #152]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010504:	f023 0310 	bic.w	r3, r3, #16
 8010508:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801050a:	4b24      	ldr	r3, [pc, #144]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 801050c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801050e:	4b24      	ldr	r3, [pc, #144]	@ (80105a0 <RCCEx_PLL2_Config+0x160>)
 8010510:	4013      	ands	r3, r2
 8010512:	687a      	ldr	r2, [r7, #4]
 8010514:	69d2      	ldr	r2, [r2, #28]
 8010516:	00d2      	lsls	r2, r2, #3
 8010518:	4920      	ldr	r1, [pc, #128]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 801051a:	4313      	orrs	r3, r2
 801051c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801051e:	4b1f      	ldr	r3, [pc, #124]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010522:	4a1e      	ldr	r2, [pc, #120]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010524:	f043 0310 	orr.w	r3, r3, #16
 8010528:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d106      	bne.n	801053e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010530:	4b1a      	ldr	r3, [pc, #104]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010534:	4a19      	ldr	r2, [pc, #100]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010536:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801053a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801053c:	e00f      	b.n	801055e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	2b01      	cmp	r3, #1
 8010542:	d106      	bne.n	8010552 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010544:	4b15      	ldr	r3, [pc, #84]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010548:	4a14      	ldr	r2, [pc, #80]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 801054a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801054e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010550:	e005      	b.n	801055e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010552:	4b12      	ldr	r3, [pc, #72]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010556:	4a11      	ldr	r2, [pc, #68]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010558:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801055c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801055e:	4b0f      	ldr	r3, [pc, #60]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	4a0e      	ldr	r2, [pc, #56]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010564:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801056a:	f7f6 feb9 	bl	80072e0 <HAL_GetTick>
 801056e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010570:	e008      	b.n	8010584 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010572:	f7f6 feb5 	bl	80072e0 <HAL_GetTick>
 8010576:	4602      	mov	r2, r0
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	2b02      	cmp	r3, #2
 801057e:	d901      	bls.n	8010584 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010580:	2303      	movs	r3, #3
 8010582:	e006      	b.n	8010592 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010584:	4b05      	ldr	r3, [pc, #20]	@ (801059c <RCCEx_PLL2_Config+0x15c>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801058c:	2b00      	cmp	r3, #0
 801058e:	d0f0      	beq.n	8010572 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010590:	7bfb      	ldrb	r3, [r7, #15]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	58024400 	.word	0x58024400
 80105a0:	ffff0007 	.word	0xffff0007

080105a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80105ae:	2300      	movs	r3, #0
 80105b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80105b2:	4b53      	ldr	r3, [pc, #332]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 80105b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105b6:	f003 0303 	and.w	r3, r3, #3
 80105ba:	2b03      	cmp	r3, #3
 80105bc:	d101      	bne.n	80105c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80105be:	2301      	movs	r3, #1
 80105c0:	e099      	b.n	80106f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80105c2:	4b4f      	ldr	r3, [pc, #316]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	4a4e      	ldr	r2, [pc, #312]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 80105c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80105cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80105ce:	f7f6 fe87 	bl	80072e0 <HAL_GetTick>
 80105d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80105d4:	e008      	b.n	80105e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80105d6:	f7f6 fe83 	bl	80072e0 <HAL_GetTick>
 80105da:	4602      	mov	r2, r0
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	1ad3      	subs	r3, r2, r3
 80105e0:	2b02      	cmp	r3, #2
 80105e2:	d901      	bls.n	80105e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80105e4:	2303      	movs	r3, #3
 80105e6:	e086      	b.n	80106f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80105e8:	4b45      	ldr	r3, [pc, #276]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d1f0      	bne.n	80105d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80105f4:	4b42      	ldr	r3, [pc, #264]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 80105f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	051b      	lsls	r3, r3, #20
 8010602:	493f      	ldr	r1, [pc, #252]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 8010604:	4313      	orrs	r3, r2
 8010606:	628b      	str	r3, [r1, #40]	@ 0x28
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	3b01      	subs	r3, #1
 801060e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	689b      	ldr	r3, [r3, #8]
 8010616:	3b01      	subs	r3, #1
 8010618:	025b      	lsls	r3, r3, #9
 801061a:	b29b      	uxth	r3, r3
 801061c:	431a      	orrs	r2, r3
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	3b01      	subs	r3, #1
 8010624:	041b      	lsls	r3, r3, #16
 8010626:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801062a:	431a      	orrs	r2, r3
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	691b      	ldr	r3, [r3, #16]
 8010630:	3b01      	subs	r3, #1
 8010632:	061b      	lsls	r3, r3, #24
 8010634:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010638:	4931      	ldr	r1, [pc, #196]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 801063a:	4313      	orrs	r3, r2
 801063c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801063e:	4b30      	ldr	r3, [pc, #192]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 8010640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010642:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	695b      	ldr	r3, [r3, #20]
 801064a:	492d      	ldr	r1, [pc, #180]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 801064c:	4313      	orrs	r3, r2
 801064e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010650:	4b2b      	ldr	r3, [pc, #172]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 8010652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010654:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	699b      	ldr	r3, [r3, #24]
 801065c:	4928      	ldr	r1, [pc, #160]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 801065e:	4313      	orrs	r3, r2
 8010660:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010662:	4b27      	ldr	r3, [pc, #156]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 8010664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010666:	4a26      	ldr	r2, [pc, #152]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 8010668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801066c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801066e:	4b24      	ldr	r3, [pc, #144]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 8010670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010672:	4b24      	ldr	r3, [pc, #144]	@ (8010704 <RCCEx_PLL3_Config+0x160>)
 8010674:	4013      	ands	r3, r2
 8010676:	687a      	ldr	r2, [r7, #4]
 8010678:	69d2      	ldr	r2, [r2, #28]
 801067a:	00d2      	lsls	r2, r2, #3
 801067c:	4920      	ldr	r1, [pc, #128]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 801067e:	4313      	orrs	r3, r2
 8010680:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010682:	4b1f      	ldr	r3, [pc, #124]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 8010684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010686:	4a1e      	ldr	r2, [pc, #120]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 8010688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801068c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d106      	bne.n	80106a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010694:	4b1a      	ldr	r3, [pc, #104]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 8010696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010698:	4a19      	ldr	r2, [pc, #100]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 801069a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801069e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80106a0:	e00f      	b.n	80106c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d106      	bne.n	80106b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80106a8:	4b15      	ldr	r3, [pc, #84]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 80106aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106ac:	4a14      	ldr	r2, [pc, #80]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 80106ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80106b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80106b4:	e005      	b.n	80106c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80106b6:	4b12      	ldr	r3, [pc, #72]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 80106b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106ba:	4a11      	ldr	r2, [pc, #68]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 80106bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80106c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80106c2:	4b0f      	ldr	r3, [pc, #60]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	4a0e      	ldr	r2, [pc, #56]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 80106c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80106cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80106ce:	f7f6 fe07 	bl	80072e0 <HAL_GetTick>
 80106d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80106d4:	e008      	b.n	80106e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80106d6:	f7f6 fe03 	bl	80072e0 <HAL_GetTick>
 80106da:	4602      	mov	r2, r0
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	2b02      	cmp	r3, #2
 80106e2:	d901      	bls.n	80106e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80106e4:	2303      	movs	r3, #3
 80106e6:	e006      	b.n	80106f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80106e8:	4b05      	ldr	r3, [pc, #20]	@ (8010700 <RCCEx_PLL3_Config+0x15c>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d0f0      	beq.n	80106d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80106f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3710      	adds	r7, #16
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	58024400 	.word	0x58024400
 8010704:	ffff0007 	.word	0xffff0007

08010708 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d101      	bne.n	801071a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010716:	2301      	movs	r3, #1
 8010718:	e10f      	b.n	801093a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2200      	movs	r2, #0
 801071e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	4a87      	ldr	r2, [pc, #540]	@ (8010944 <HAL_SPI_Init+0x23c>)
 8010726:	4293      	cmp	r3, r2
 8010728:	d00f      	beq.n	801074a <HAL_SPI_Init+0x42>
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	4a86      	ldr	r2, [pc, #536]	@ (8010948 <HAL_SPI_Init+0x240>)
 8010730:	4293      	cmp	r3, r2
 8010732:	d00a      	beq.n	801074a <HAL_SPI_Init+0x42>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	4a84      	ldr	r2, [pc, #528]	@ (801094c <HAL_SPI_Init+0x244>)
 801073a:	4293      	cmp	r3, r2
 801073c:	d005      	beq.n	801074a <HAL_SPI_Init+0x42>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	68db      	ldr	r3, [r3, #12]
 8010742:	2b0f      	cmp	r3, #15
 8010744:	d901      	bls.n	801074a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010746:	2301      	movs	r3, #1
 8010748:	e0f7      	b.n	801093a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 fef6 	bl	801153c <SPI_GetPacketSize>
 8010750:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4a7b      	ldr	r2, [pc, #492]	@ (8010944 <HAL_SPI_Init+0x23c>)
 8010758:	4293      	cmp	r3, r2
 801075a:	d00c      	beq.n	8010776 <HAL_SPI_Init+0x6e>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4a79      	ldr	r2, [pc, #484]	@ (8010948 <HAL_SPI_Init+0x240>)
 8010762:	4293      	cmp	r3, r2
 8010764:	d007      	beq.n	8010776 <HAL_SPI_Init+0x6e>
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4a78      	ldr	r2, [pc, #480]	@ (801094c <HAL_SPI_Init+0x244>)
 801076c:	4293      	cmp	r3, r2
 801076e:	d002      	beq.n	8010776 <HAL_SPI_Init+0x6e>
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2b08      	cmp	r3, #8
 8010774:	d811      	bhi.n	801079a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801077a:	4a72      	ldr	r2, [pc, #456]	@ (8010944 <HAL_SPI_Init+0x23c>)
 801077c:	4293      	cmp	r3, r2
 801077e:	d009      	beq.n	8010794 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4a70      	ldr	r2, [pc, #448]	@ (8010948 <HAL_SPI_Init+0x240>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d004      	beq.n	8010794 <HAL_SPI_Init+0x8c>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	4a6f      	ldr	r2, [pc, #444]	@ (801094c <HAL_SPI_Init+0x244>)
 8010790:	4293      	cmp	r3, r2
 8010792:	d104      	bne.n	801079e <HAL_SPI_Init+0x96>
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2b10      	cmp	r3, #16
 8010798:	d901      	bls.n	801079e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801079a:	2301      	movs	r3, #1
 801079c:	e0cd      	b.n	801093a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d106      	bne.n	80107b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f7f1 ff38 	bl	8002628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2202      	movs	r2, #2
 80107bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f022 0201 	bic.w	r2, r2, #1
 80107ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	689b      	ldr	r3, [r3, #8]
 80107d6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80107da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	699b      	ldr	r3, [r3, #24]
 80107e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80107e4:	d119      	bne.n	801081a <HAL_SPI_Init+0x112>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	685b      	ldr	r3, [r3, #4]
 80107ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80107ee:	d103      	bne.n	80107f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d008      	beq.n	801080a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d10c      	bne.n	801081a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010808:	d107      	bne.n	801081a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	681a      	ldr	r2, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010818:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010822:	2b00      	cmp	r3, #0
 8010824:	d00f      	beq.n	8010846 <HAL_SPI_Init+0x13e>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	68db      	ldr	r3, [r3, #12]
 801082a:	2b06      	cmp	r3, #6
 801082c:	d90b      	bls.n	8010846 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	430a      	orrs	r2, r1
 8010842:	601a      	str	r2, [r3, #0]
 8010844:	e007      	b.n	8010856 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010854:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	69da      	ldr	r2, [r3, #28]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801085e:	431a      	orrs	r2, r3
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	431a      	orrs	r2, r3
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010868:	ea42 0103 	orr.w	r1, r2, r3
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	68da      	ldr	r2, [r3, #12]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	430a      	orrs	r2, r1
 8010876:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010880:	431a      	orrs	r2, r3
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010886:	431a      	orrs	r2, r3
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	699b      	ldr	r3, [r3, #24]
 801088c:	431a      	orrs	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	691b      	ldr	r3, [r3, #16]
 8010892:	431a      	orrs	r2, r3
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	695b      	ldr	r3, [r3, #20]
 8010898:	431a      	orrs	r2, r3
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6a1b      	ldr	r3, [r3, #32]
 801089e:	431a      	orrs	r2, r3
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	431a      	orrs	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80108aa:	431a      	orrs	r2, r3
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	689b      	ldr	r3, [r3, #8]
 80108b0:	431a      	orrs	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80108b6:	ea42 0103 	orr.w	r1, r2, r3
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	430a      	orrs	r2, r1
 80108c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d113      	bne.n	80108f6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80108e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	689b      	ldr	r3, [r3, #8]
 80108e8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80108f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f022 0201 	bic.w	r2, r2, #1
 8010904:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00a      	beq.n	8010928 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	430a      	orrs	r2, r1
 8010926:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2200      	movs	r2, #0
 801092c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2201      	movs	r2, #1
 8010934:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	3710      	adds	r7, #16
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}
 8010942:	bf00      	nop
 8010944:	40013000 	.word	0x40013000
 8010948:	40003800 	.word	0x40003800
 801094c:	40003c00 	.word	0x40003c00

08010950 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b088      	sub	sp, #32
 8010954:	af02      	add	r7, sp, #8
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	603b      	str	r3, [r7, #0]
 801095c:	4613      	mov	r3, r2
 801095e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	3320      	adds	r3, #32
 8010966:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010968:	f7f6 fcba 	bl	80072e0 <HAL_GetTick>
 801096c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010974:	b2db      	uxtb	r3, r3
 8010976:	2b01      	cmp	r3, #1
 8010978:	d001      	beq.n	801097e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 801097a:	2302      	movs	r3, #2
 801097c:	e1d1      	b.n	8010d22 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d002      	beq.n	801098a <HAL_SPI_Transmit+0x3a>
 8010984:	88fb      	ldrh	r3, [r7, #6]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d101      	bne.n	801098e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 801098a:	2301      	movs	r3, #1
 801098c:	e1c9      	b.n	8010d22 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010994:	2b01      	cmp	r3, #1
 8010996:	d101      	bne.n	801099c <HAL_SPI_Transmit+0x4c>
 8010998:	2302      	movs	r3, #2
 801099a:	e1c2      	b.n	8010d22 <HAL_SPI_Transmit+0x3d2>
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	2201      	movs	r2, #1
 80109a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2203      	movs	r2, #3
 80109a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2200      	movs	r2, #0
 80109b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	68ba      	ldr	r2, [r7, #8]
 80109b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	88fa      	ldrh	r2, [r7, #6]
 80109be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	88fa      	ldrh	r2, [r7, #6]
 80109c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	2200      	movs	r2, #0
 80109ce:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2200      	movs	r2, #0
 80109d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	2200      	movs	r2, #0
 80109dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	2200      	movs	r2, #0
 80109e4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	2200      	movs	r2, #0
 80109ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	689b      	ldr	r3, [r3, #8]
 80109f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80109f4:	d108      	bne.n	8010a08 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010a04:	601a      	str	r2, [r3, #0]
 8010a06:	e009      	b.n	8010a1c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	68db      	ldr	r3, [r3, #12]
 8010a0e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010a1a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	685a      	ldr	r2, [r3, #4]
 8010a22:	4b96      	ldr	r3, [pc, #600]	@ (8010c7c <HAL_SPI_Transmit+0x32c>)
 8010a24:	4013      	ands	r3, r2
 8010a26:	88f9      	ldrh	r1, [r7, #6]
 8010a28:	68fa      	ldr	r2, [r7, #12]
 8010a2a:	6812      	ldr	r2, [r2, #0]
 8010a2c:	430b      	orrs	r3, r1
 8010a2e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f042 0201 	orr.w	r2, r2, #1
 8010a3e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010a48:	d107      	bne.n	8010a5a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	681a      	ldr	r2, [r3, #0]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010a58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	68db      	ldr	r3, [r3, #12]
 8010a5e:	2b0f      	cmp	r3, #15
 8010a60:	d947      	bls.n	8010af2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010a62:	e03f      	b.n	8010ae4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	695b      	ldr	r3, [r3, #20]
 8010a6a:	f003 0302 	and.w	r3, r3, #2
 8010a6e:	2b02      	cmp	r3, #2
 8010a70:	d114      	bne.n	8010a9c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	6812      	ldr	r2, [r2, #0]
 8010a7c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a82:	1d1a      	adds	r2, r3, #4
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	3b01      	subs	r3, #1
 8010a92:	b29a      	uxth	r2, r3
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010a9a:	e023      	b.n	8010ae4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010a9c:	f7f6 fc20 	bl	80072e0 <HAL_GetTick>
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	1ad3      	subs	r3, r2, r3
 8010aa6:	683a      	ldr	r2, [r7, #0]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d803      	bhi.n	8010ab4 <HAL_SPI_Transmit+0x164>
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ab2:	d102      	bne.n	8010aba <HAL_SPI_Transmit+0x16a>
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d114      	bne.n	8010ae4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010aba:	68f8      	ldr	r0, [r7, #12]
 8010abc:	f000 fc70 	bl	80113a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ac6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010ae0:	2303      	movs	r3, #3
 8010ae2:	e11e      	b.n	8010d22 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d1b9      	bne.n	8010a64 <HAL_SPI_Transmit+0x114>
 8010af0:	e0f1      	b.n	8010cd6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	68db      	ldr	r3, [r3, #12]
 8010af6:	2b07      	cmp	r3, #7
 8010af8:	f240 80e6 	bls.w	8010cc8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010afc:	e05d      	b.n	8010bba <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	695b      	ldr	r3, [r3, #20]
 8010b04:	f003 0302 	and.w	r3, r3, #2
 8010b08:	2b02      	cmp	r3, #2
 8010b0a:	d132      	bne.n	8010b72 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010b12:	b29b      	uxth	r3, r3
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d918      	bls.n	8010b4a <HAL_SPI_Transmit+0x1fa>
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d014      	beq.n	8010b4a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	6812      	ldr	r2, [r2, #0]
 8010b2a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010b30:	1d1a      	adds	r2, r3, #4
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	3b02      	subs	r3, #2
 8010b40:	b29a      	uxth	r2, r3
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010b48:	e037      	b.n	8010bba <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010b4e:	881a      	ldrh	r2, [r3, #0]
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010b58:	1c9a      	adds	r2, r3, #2
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	3b01      	subs	r3, #1
 8010b68:	b29a      	uxth	r2, r3
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010b70:	e023      	b.n	8010bba <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010b72:	f7f6 fbb5 	bl	80072e0 <HAL_GetTick>
 8010b76:	4602      	mov	r2, r0
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	683a      	ldr	r2, [r7, #0]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d803      	bhi.n	8010b8a <HAL_SPI_Transmit+0x23a>
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b88:	d102      	bne.n	8010b90 <HAL_SPI_Transmit+0x240>
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d114      	bne.n	8010bba <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f000 fc05 	bl	80113a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010b9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2201      	movs	r2, #1
 8010baa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010bb6:	2303      	movs	r3, #3
 8010bb8:	e0b3      	b.n	8010d22 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d19b      	bne.n	8010afe <HAL_SPI_Transmit+0x1ae>
 8010bc6:	e086      	b.n	8010cd6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	695b      	ldr	r3, [r3, #20]
 8010bce:	f003 0302 	and.w	r3, r3, #2
 8010bd2:	2b02      	cmp	r3, #2
 8010bd4:	d154      	bne.n	8010c80 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	2b03      	cmp	r3, #3
 8010be0:	d918      	bls.n	8010c14 <HAL_SPI_Transmit+0x2c4>
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010be6:	2b40      	cmp	r3, #64	@ 0x40
 8010be8:	d914      	bls.n	8010c14 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	6812      	ldr	r2, [r2, #0]
 8010bf4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010bfa:	1d1a      	adds	r2, r3, #4
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	3b04      	subs	r3, #4
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010c12:	e059      	b.n	8010cc8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c1a:	b29b      	uxth	r3, r3
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d917      	bls.n	8010c50 <HAL_SPI_Transmit+0x300>
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d013      	beq.n	8010c50 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c2c:	881a      	ldrh	r2, [r3, #0]
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c36:	1c9a      	adds	r2, r3, #2
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	3b02      	subs	r3, #2
 8010c46:	b29a      	uxth	r2, r3
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010c4e:	e03b      	b.n	8010cc8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	3320      	adds	r3, #32
 8010c5a:	7812      	ldrb	r2, [r2, #0]
 8010c5c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c62:	1c5a      	adds	r2, r3, #1
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c6e:	b29b      	uxth	r3, r3
 8010c70:	3b01      	subs	r3, #1
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010c7a:	e025      	b.n	8010cc8 <HAL_SPI_Transmit+0x378>
 8010c7c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010c80:	f7f6 fb2e 	bl	80072e0 <HAL_GetTick>
 8010c84:	4602      	mov	r2, r0
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	1ad3      	subs	r3, r2, r3
 8010c8a:	683a      	ldr	r2, [r7, #0]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d803      	bhi.n	8010c98 <HAL_SPI_Transmit+0x348>
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c96:	d102      	bne.n	8010c9e <HAL_SPI_Transmit+0x34e>
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d114      	bne.n	8010cc8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010c9e:	68f8      	ldr	r0, [r7, #12]
 8010ca0:	f000 fb7e 	bl	80113a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010caa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010cc4:	2303      	movs	r3, #3
 8010cc6:	e02c      	b.n	8010d22 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	f47f af79 	bne.w	8010bc8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	9300      	str	r3, [sp, #0]
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	2108      	movs	r1, #8
 8010ce0:	68f8      	ldr	r0, [r7, #12]
 8010ce2:	f000 fbfd 	bl	80114e0 <SPI_WaitOnFlagUntilTimeout>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d007      	beq.n	8010cfc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010cf2:	f043 0220 	orr.w	r2, r3, #32
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010cfc:	68f8      	ldr	r0, [r7, #12]
 8010cfe:	f000 fb4f 	bl	80113a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2201      	movs	r2, #1
 8010d06:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d001      	beq.n	8010d20 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e000      	b.n	8010d22 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8010d20:	2300      	movs	r3, #0
  }
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3718      	adds	r7, #24
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop

08010d2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b08e      	sub	sp, #56	@ 0x38
 8010d30:	af02      	add	r7, sp, #8
 8010d32:	60f8      	str	r0, [r7, #12]
 8010d34:	60b9      	str	r1, [r7, #8]
 8010d36:	607a      	str	r2, [r7, #4]
 8010d38:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	3320      	adds	r3, #32
 8010d40:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	3330      	adds	r3, #48	@ 0x30
 8010d48:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d4e:	095b      	lsrs	r3, r3, #5
 8010d50:	b29b      	uxth	r3, r3
 8010d52:	3301      	adds	r3, #1
 8010d54:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010d56:	f7f6 fac3 	bl	80072e0 <HAL_GetTick>
 8010d5a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8010d5c:	887b      	ldrh	r3, [r7, #2]
 8010d5e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8010d60:	887b      	ldrh	r3, [r7, #2]
 8010d62:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	d001      	beq.n	8010d74 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8010d70:	2302      	movs	r3, #2
 8010d72:	e310      	b.n	8011396 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d005      	beq.n	8010d86 <HAL_SPI_TransmitReceive+0x5a>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d002      	beq.n	8010d86 <HAL_SPI_TransmitReceive+0x5a>
 8010d80:	887b      	ldrh	r3, [r7, #2]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d101      	bne.n	8010d8a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8010d86:	2301      	movs	r3, #1
 8010d88:	e305      	b.n	8011396 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d101      	bne.n	8010d98 <HAL_SPI_TransmitReceive+0x6c>
 8010d94:	2302      	movs	r3, #2
 8010d96:	e2fe      	b.n	8011396 <HAL_SPI_TransmitReceive+0x66a>
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2205      	movs	r2, #5
 8010da4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2200      	movs	r2, #0
 8010dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	687a      	ldr	r2, [r7, #4]
 8010db4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	887a      	ldrh	r2, [r7, #2]
 8010dba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	887a      	ldrh	r2, [r7, #2]
 8010dc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	68ba      	ldr	r2, [r7, #8]
 8010dca:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	887a      	ldrh	r2, [r7, #2]
 8010dd0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	887a      	ldrh	r2, [r7, #2]
 8010dd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	2200      	movs	r2, #0
 8010de0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2200      	movs	r2, #0
 8010de6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	68da      	ldr	r2, [r3, #12]
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8010df6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	4a70      	ldr	r2, [pc, #448]	@ (8010fc0 <HAL_SPI_TransmitReceive+0x294>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d009      	beq.n	8010e16 <HAL_SPI_TransmitReceive+0xea>
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4a6f      	ldr	r2, [pc, #444]	@ (8010fc4 <HAL_SPI_TransmitReceive+0x298>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d004      	beq.n	8010e16 <HAL_SPI_TransmitReceive+0xea>
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4a6d      	ldr	r2, [pc, #436]	@ (8010fc8 <HAL_SPI_TransmitReceive+0x29c>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d102      	bne.n	8010e1c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8010e16:	2310      	movs	r3, #16
 8010e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e1a:	e001      	b.n	8010e20 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8010e1c:	2308      	movs	r3, #8
 8010e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	685a      	ldr	r2, [r3, #4]
 8010e26:	4b69      	ldr	r3, [pc, #420]	@ (8010fcc <HAL_SPI_TransmitReceive+0x2a0>)
 8010e28:	4013      	ands	r3, r2
 8010e2a:	8879      	ldrh	r1, [r7, #2]
 8010e2c:	68fa      	ldr	r2, [r7, #12]
 8010e2e:	6812      	ldr	r2, [r2, #0]
 8010e30:	430b      	orrs	r3, r1
 8010e32:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	681a      	ldr	r2, [r3, #0]
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f042 0201 	orr.w	r2, r2, #1
 8010e42:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	685b      	ldr	r3, [r3, #4]
 8010e48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010e4c:	d107      	bne.n	8010e5e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	681a      	ldr	r2, [r3, #0]
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010e5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	2b0f      	cmp	r3, #15
 8010e64:	f240 80a2 	bls.w	8010fac <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8010e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e6a:	089b      	lsrs	r3, r3, #2
 8010e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010e6e:	e094      	b.n	8010f9a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	695b      	ldr	r3, [r3, #20]
 8010e76:	f003 0302 	and.w	r3, r3, #2
 8010e7a:	2b02      	cmp	r3, #2
 8010e7c:	d120      	bne.n	8010ec0 <HAL_SPI_TransmitReceive+0x194>
 8010e7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d01d      	beq.n	8010ec0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8010e84:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010e86:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8010e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e8a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d217      	bcs.n	8010ec0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	6812      	ldr	r2, [r2, #0]
 8010e9a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ea0:	1d1a      	adds	r2, r3, #4
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	3b01      	subs	r3, #1
 8010eb0:	b29a      	uxth	r2, r3
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010ebe:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	695b      	ldr	r3, [r3, #20]
 8010ec6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8010ec8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d065      	beq.n	8010f9a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	695b      	ldr	r3, [r3, #20]
 8010ed4:	f003 0301 	and.w	r3, r3, #1
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d118      	bne.n	8010f0e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	681a      	ldr	r2, [r3, #0]
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ee4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010ee6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010eec:	1d1a      	adds	r2, r3, #4
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	3b01      	subs	r3, #1
 8010efc:	b29a      	uxth	r2, r3
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010f0a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010f0c:	e045      	b.n	8010f9a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010f0e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010f10:	8bfb      	ldrh	r3, [r7, #30]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d21d      	bcs.n	8010f52 <HAL_SPI_TransmitReceive+0x226>
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d018      	beq.n	8010f52 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	681a      	ldr	r2, [r3, #0]
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010f2a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f30:	1d1a      	adds	r2, r3, #4
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	3b01      	subs	r3, #1
 8010f40:	b29a      	uxth	r2, r3
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010f4e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010f50:	e023      	b.n	8010f9a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f52:	f7f6 f9c5 	bl	80072e0 <HAL_GetTick>
 8010f56:	4602      	mov	r2, r0
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	1ad3      	subs	r3, r2, r3
 8010f5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d803      	bhi.n	8010f6a <HAL_SPI_TransmitReceive+0x23e>
 8010f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f68:	d102      	bne.n	8010f70 <HAL_SPI_TransmitReceive+0x244>
 8010f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d114      	bne.n	8010f9a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	f000 fa15 	bl	80113a0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2200      	movs	r2, #0
 8010f92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8010f96:	2303      	movs	r3, #3
 8010f98:	e1fd      	b.n	8011396 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010f9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f47f af67 	bne.w	8010e70 <HAL_SPI_TransmitReceive+0x144>
 8010fa2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f47f af63 	bne.w	8010e70 <HAL_SPI_TransmitReceive+0x144>
 8010faa:	e1ce      	b.n	801134a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	68db      	ldr	r3, [r3, #12]
 8010fb0:	2b07      	cmp	r3, #7
 8010fb2:	f240 81c2 	bls.w	801133a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8010fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fb8:	085b      	lsrs	r3, r3, #1
 8010fba:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010fbc:	e0c9      	b.n	8011152 <HAL_SPI_TransmitReceive+0x426>
 8010fbe:	bf00      	nop
 8010fc0:	40013000 	.word	0x40013000
 8010fc4:	40003800 	.word	0x40003800
 8010fc8:	40003c00 	.word	0x40003c00
 8010fcc:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	695b      	ldr	r3, [r3, #20]
 8010fd6:	f003 0302 	and.w	r3, r3, #2
 8010fda:	2b02      	cmp	r3, #2
 8010fdc:	d11f      	bne.n	801101e <HAL_SPI_TransmitReceive+0x2f2>
 8010fde:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d01c      	beq.n	801101e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8010fe4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010fe6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8010fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fea:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d216      	bcs.n	801101e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ff4:	881a      	ldrh	r2, [r3, #0]
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ffe:	1c9a      	adds	r2, r3, #2
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801100a:	b29b      	uxth	r3, r3
 801100c:	3b01      	subs	r3, #1
 801100e:	b29a      	uxth	r2, r3
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801101c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	695b      	ldr	r3, [r3, #20]
 8011024:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011026:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011028:	2b00      	cmp	r3, #0
 801102a:	f000 8092 	beq.w	8011152 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	695b      	ldr	r3, [r3, #20]
 8011034:	f003 0301 	and.w	r3, r3, #1
 8011038:	2b01      	cmp	r3, #1
 801103a:	d118      	bne.n	801106e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011040:	6a3a      	ldr	r2, [r7, #32]
 8011042:	8812      	ldrh	r2, [r2, #0]
 8011044:	b292      	uxth	r2, r2
 8011046:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801104c:	1c9a      	adds	r2, r3, #2
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011058:	b29b      	uxth	r3, r3
 801105a:	3b01      	subs	r3, #1
 801105c:	b29a      	uxth	r2, r3
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801106a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801106c:	e071      	b.n	8011152 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801106e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011070:	8bfb      	ldrh	r3, [r7, #30]
 8011072:	429a      	cmp	r2, r3
 8011074:	d228      	bcs.n	80110c8 <HAL_SPI_TransmitReceive+0x39c>
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801107c:	2b00      	cmp	r3, #0
 801107e:	d023      	beq.n	80110c8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011084:	6a3a      	ldr	r2, [r7, #32]
 8011086:	8812      	ldrh	r2, [r2, #0]
 8011088:	b292      	uxth	r2, r2
 801108a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011090:	1c9a      	adds	r2, r3, #2
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801109a:	6a3a      	ldr	r2, [r7, #32]
 801109c:	8812      	ldrh	r2, [r2, #0]
 801109e:	b292      	uxth	r2, r2
 80110a0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110a6:	1c9a      	adds	r2, r3, #2
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	3b02      	subs	r3, #2
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110c4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80110c6:	e044      	b.n	8011152 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80110c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80110ca:	2b01      	cmp	r3, #1
 80110cc:	d11d      	bne.n	801110a <HAL_SPI_TransmitReceive+0x3de>
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d018      	beq.n	801110a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110dc:	6a3a      	ldr	r2, [r7, #32]
 80110de:	8812      	ldrh	r2, [r2, #0]
 80110e0:	b292      	uxth	r2, r2
 80110e2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110e8:	1c9a      	adds	r2, r3, #2
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110f4:	b29b      	uxth	r3, r3
 80110f6:	3b01      	subs	r3, #1
 80110f8:	b29a      	uxth	r2, r3
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011106:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011108:	e023      	b.n	8011152 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801110a:	f7f6 f8e9 	bl	80072e0 <HAL_GetTick>
 801110e:	4602      	mov	r2, r0
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	1ad3      	subs	r3, r2, r3
 8011114:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011116:	429a      	cmp	r2, r3
 8011118:	d803      	bhi.n	8011122 <HAL_SPI_TransmitReceive+0x3f6>
 801111a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011120:	d102      	bne.n	8011128 <HAL_SPI_TransmitReceive+0x3fc>
 8011122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011124:	2b00      	cmp	r3, #0
 8011126:	d114      	bne.n	8011152 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f000 f939 	bl	80113a0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011134:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2201      	movs	r2, #1
 8011142:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2200      	movs	r2, #0
 801114a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801114e:	2303      	movs	r3, #3
 8011150:	e121      	b.n	8011396 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011152:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011154:	2b00      	cmp	r3, #0
 8011156:	f47f af3b 	bne.w	8010fd0 <HAL_SPI_TransmitReceive+0x2a4>
 801115a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801115c:	2b00      	cmp	r3, #0
 801115e:	f47f af37 	bne.w	8010fd0 <HAL_SPI_TransmitReceive+0x2a4>
 8011162:	e0f2      	b.n	801134a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	695b      	ldr	r3, [r3, #20]
 801116a:	f003 0302 	and.w	r3, r3, #2
 801116e:	2b02      	cmp	r3, #2
 8011170:	d121      	bne.n	80111b6 <HAL_SPI_TransmitReceive+0x48a>
 8011172:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011174:	2b00      	cmp	r3, #0
 8011176:	d01e      	beq.n	80111b6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011178:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801117a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 801117c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801117e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011180:	429a      	cmp	r2, r3
 8011182:	d218      	bcs.n	80111b6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	3320      	adds	r3, #32
 801118e:	7812      	ldrb	r2, [r2, #0]
 8011190:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011196:	1c5a      	adds	r2, r3, #1
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	3b01      	subs	r3, #1
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80111b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	695b      	ldr	r3, [r3, #20]
 80111bc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80111be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	f000 80ba 	beq.w	801133a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	695b      	ldr	r3, [r3, #20]
 80111cc:	f003 0301 	and.w	r3, r3, #1
 80111d0:	2b01      	cmp	r3, #1
 80111d2:	d11b      	bne.n	801120c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111e0:	7812      	ldrb	r2, [r2, #0]
 80111e2:	b2d2      	uxtb	r2, r2
 80111e4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111ea:	1c5a      	adds	r2, r3, #1
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	3b01      	subs	r3, #1
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011208:	853b      	strh	r3, [r7, #40]	@ 0x28
 801120a:	e096      	b.n	801133a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801120c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801120e:	8bfb      	ldrh	r3, [r7, #30]
 8011210:	429a      	cmp	r2, r3
 8011212:	d24a      	bcs.n	80112aa <HAL_SPI_TransmitReceive+0x57e>
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801121a:	2b00      	cmp	r3, #0
 801121c:	d045      	beq.n	80112aa <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801122a:	7812      	ldrb	r2, [r2, #0]
 801122c:	b2d2      	uxtb	r2, r2
 801122e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011234:	1c5a      	adds	r2, r3, #1
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011246:	7812      	ldrb	r2, [r2, #0]
 8011248:	b2d2      	uxtb	r2, r2
 801124a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011250:	1c5a      	adds	r2, r3, #1
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011262:	7812      	ldrb	r2, [r2, #0]
 8011264:	b2d2      	uxtb	r2, r2
 8011266:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801126c:	1c5a      	adds	r2, r3, #1
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801127e:	7812      	ldrb	r2, [r2, #0]
 8011280:	b2d2      	uxtb	r2, r2
 8011282:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011288:	1c5a      	adds	r2, r3, #1
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011294:	b29b      	uxth	r3, r3
 8011296:	3b04      	subs	r3, #4
 8011298:	b29a      	uxth	r2, r3
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80112a8:	e047      	b.n	801133a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80112aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80112ac:	2b03      	cmp	r3, #3
 80112ae:	d820      	bhi.n	80112f2 <HAL_SPI_TransmitReceive+0x5c6>
 80112b0:	697b      	ldr	r3, [r7, #20]
 80112b2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d01b      	beq.n	80112f2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80112c6:	7812      	ldrb	r2, [r2, #0]
 80112c8:	b2d2      	uxtb	r2, r2
 80112ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80112d0:	1c5a      	adds	r2, r3, #1
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112dc:	b29b      	uxth	r3, r3
 80112de:	3b01      	subs	r3, #1
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 80112f0:	e023      	b.n	801133a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80112f2:	f7f5 fff5 	bl	80072e0 <HAL_GetTick>
 80112f6:	4602      	mov	r2, r0
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	1ad3      	subs	r3, r2, r3
 80112fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112fe:	429a      	cmp	r2, r3
 8011300:	d803      	bhi.n	801130a <HAL_SPI_TransmitReceive+0x5de>
 8011302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011308:	d102      	bne.n	8011310 <HAL_SPI_TransmitReceive+0x5e4>
 801130a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801130c:	2b00      	cmp	r3, #0
 801130e:	d114      	bne.n	801133a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011310:	68f8      	ldr	r0, [r7, #12]
 8011312:	f000 f845 	bl	80113a0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801131c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	2201      	movs	r2, #1
 801132a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	2200      	movs	r2, #0
 8011332:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8011336:	2303      	movs	r3, #3
 8011338:	e02d      	b.n	8011396 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801133a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801133c:	2b00      	cmp	r3, #0
 801133e:	f47f af11 	bne.w	8011164 <HAL_SPI_TransmitReceive+0x438>
 8011342:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011344:	2b00      	cmp	r3, #0
 8011346:	f47f af0d 	bne.w	8011164 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801134a:	69bb      	ldr	r3, [r7, #24]
 801134c:	9300      	str	r3, [sp, #0]
 801134e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011350:	2200      	movs	r2, #0
 8011352:	2108      	movs	r1, #8
 8011354:	68f8      	ldr	r0, [r7, #12]
 8011356:	f000 f8c3 	bl	80114e0 <SPI_WaitOnFlagUntilTimeout>
 801135a:	4603      	mov	r3, r0
 801135c:	2b00      	cmp	r3, #0
 801135e:	d007      	beq.n	8011370 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011366:	f043 0220 	orr.w	r2, r3, #32
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011370:	68f8      	ldr	r0, [r7, #12]
 8011372:	f000 f815 	bl	80113a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2201      	movs	r2, #1
 801137a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	2200      	movs	r2, #0
 8011382:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801138c:	2b00      	cmp	r3, #0
 801138e:	d001      	beq.n	8011394 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8011390:	2301      	movs	r3, #1
 8011392:	e000      	b.n	8011396 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8011394:	2300      	movs	r3, #0
  }
}
 8011396:	4618      	mov	r0, r3
 8011398:	3730      	adds	r7, #48	@ 0x30
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop

080113a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80113a0:	b480      	push	{r7}
 80113a2:	b085      	sub	sp, #20
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	695b      	ldr	r3, [r3, #20]
 80113ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	699a      	ldr	r2, [r3, #24]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f042 0208 	orr.w	r2, r2, #8
 80113be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	699a      	ldr	r2, [r3, #24]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	f042 0210 	orr.w	r2, r2, #16
 80113ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f022 0201 	bic.w	r2, r2, #1
 80113de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	6919      	ldr	r1, [r3, #16]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	4b3c      	ldr	r3, [pc, #240]	@ (80114dc <SPI_CloseTransfer+0x13c>)
 80113ec:	400b      	ands	r3, r1
 80113ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	689a      	ldr	r2, [r3, #8]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80113fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011406:	b2db      	uxtb	r3, r3
 8011408:	2b04      	cmp	r3, #4
 801140a:	d014      	beq.n	8011436 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f003 0320 	and.w	r3, r3, #32
 8011412:	2b00      	cmp	r3, #0
 8011414:	d00f      	beq.n	8011436 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801141c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	699a      	ldr	r2, [r3, #24]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f042 0220 	orr.w	r2, r2, #32
 8011434:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801143c:	b2db      	uxtb	r3, r3
 801143e:	2b03      	cmp	r3, #3
 8011440:	d014      	beq.n	801146c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00f      	beq.n	801146c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011452:	f043 0204 	orr.w	r2, r3, #4
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	699a      	ldr	r2, [r3, #24]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801146a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011472:	2b00      	cmp	r3, #0
 8011474:	d00f      	beq.n	8011496 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801147c:	f043 0201 	orr.w	r2, r3, #1
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	699a      	ldr	r2, [r3, #24]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011494:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801149c:	2b00      	cmp	r3, #0
 801149e:	d00f      	beq.n	80114c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80114a6:	f043 0208 	orr.w	r2, r3, #8
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	699a      	ldr	r2, [r3, #24]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80114be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80114d0:	bf00      	nop
 80114d2:	3714      	adds	r7, #20
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr
 80114dc:	fffffc90 	.word	0xfffffc90

080114e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	603b      	str	r3, [r7, #0]
 80114ec:	4613      	mov	r3, r2
 80114ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80114f0:	e010      	b.n	8011514 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80114f2:	f7f5 fef5 	bl	80072e0 <HAL_GetTick>
 80114f6:	4602      	mov	r2, r0
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	1ad3      	subs	r3, r2, r3
 80114fc:	683a      	ldr	r2, [r7, #0]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d803      	bhi.n	801150a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011508:	d102      	bne.n	8011510 <SPI_WaitOnFlagUntilTimeout+0x30>
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d101      	bne.n	8011514 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011510:	2303      	movs	r3, #3
 8011512:	e00f      	b.n	8011534 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	695a      	ldr	r2, [r3, #20]
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	4013      	ands	r3, r2
 801151e:	68ba      	ldr	r2, [r7, #8]
 8011520:	429a      	cmp	r2, r3
 8011522:	bf0c      	ite	eq
 8011524:	2301      	moveq	r3, #1
 8011526:	2300      	movne	r3, #0
 8011528:	b2db      	uxtb	r3, r3
 801152a:	461a      	mov	r2, r3
 801152c:	79fb      	ldrb	r3, [r7, #7]
 801152e:	429a      	cmp	r2, r3
 8011530:	d0df      	beq.n	80114f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011532:	2300      	movs	r3, #0
}
 8011534:	4618      	mov	r0, r3
 8011536:	3710      	adds	r7, #16
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801153c:	b480      	push	{r7}
 801153e:	b085      	sub	sp, #20
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011548:	095b      	lsrs	r3, r3, #5
 801154a:	3301      	adds	r3, #1
 801154c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	68db      	ldr	r3, [r3, #12]
 8011552:	3301      	adds	r3, #1
 8011554:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	3307      	adds	r3, #7
 801155a:	08db      	lsrs	r3, r3, #3
 801155c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	68fa      	ldr	r2, [r7, #12]
 8011562:	fb02 f303 	mul.w	r3, r2, r3
}
 8011566:	4618      	mov	r0, r3
 8011568:	3714      	adds	r7, #20
 801156a:	46bd      	mov	sp, r7
 801156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011570:	4770      	bx	lr

08011572 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011572:	b580      	push	{r7, lr}
 8011574:	b082      	sub	sp, #8
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d101      	bne.n	8011584 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011580:	2301      	movs	r3, #1
 8011582:	e049      	b.n	8011618 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801158a:	b2db      	uxtb	r3, r3
 801158c:	2b00      	cmp	r3, #0
 801158e:	d106      	bne.n	801159e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f7f1 f94d 	bl	8002838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2202      	movs	r2, #2
 80115a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	3304      	adds	r3, #4
 80115ae:	4619      	mov	r1, r3
 80115b0:	4610      	mov	r0, r2
 80115b2:	f001 f9a3 	bl	80128fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2201      	movs	r2, #1
 80115ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2201      	movs	r2, #1
 80115c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2201      	movs	r2, #1
 80115ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2201      	movs	r2, #1
 80115d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2201      	movs	r2, #1
 80115da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2201      	movs	r2, #1
 80115e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2201      	movs	r2, #1
 80115ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2201      	movs	r2, #1
 80115f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2201      	movs	r2, #1
 80115fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2201      	movs	r2, #1
 8011602:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2201      	movs	r2, #1
 801160a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2201      	movs	r2, #1
 8011612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011616:	2300      	movs	r3, #0
}
 8011618:	4618      	mov	r0, r3
 801161a:	3708      	adds	r7, #8
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011620:	b480      	push	{r7}
 8011622:	b085      	sub	sp, #20
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801162e:	b2db      	uxtb	r3, r3
 8011630:	2b01      	cmp	r3, #1
 8011632:	d001      	beq.n	8011638 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8011634:	2301      	movs	r3, #1
 8011636:	e056      	b.n	80116e6 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2202      	movs	r2, #2
 801163c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	4a2b      	ldr	r2, [pc, #172]	@ (80116f4 <HAL_TIM_Base_Start+0xd4>)
 8011646:	4293      	cmp	r3, r2
 8011648:	d02c      	beq.n	80116a4 <HAL_TIM_Base_Start+0x84>
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011652:	d027      	beq.n	80116a4 <HAL_TIM_Base_Start+0x84>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	4a27      	ldr	r2, [pc, #156]	@ (80116f8 <HAL_TIM_Base_Start+0xd8>)
 801165a:	4293      	cmp	r3, r2
 801165c:	d022      	beq.n	80116a4 <HAL_TIM_Base_Start+0x84>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	4a26      	ldr	r2, [pc, #152]	@ (80116fc <HAL_TIM_Base_Start+0xdc>)
 8011664:	4293      	cmp	r3, r2
 8011666:	d01d      	beq.n	80116a4 <HAL_TIM_Base_Start+0x84>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	4a24      	ldr	r2, [pc, #144]	@ (8011700 <HAL_TIM_Base_Start+0xe0>)
 801166e:	4293      	cmp	r3, r2
 8011670:	d018      	beq.n	80116a4 <HAL_TIM_Base_Start+0x84>
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	4a23      	ldr	r2, [pc, #140]	@ (8011704 <HAL_TIM_Base_Start+0xe4>)
 8011678:	4293      	cmp	r3, r2
 801167a:	d013      	beq.n	80116a4 <HAL_TIM_Base_Start+0x84>
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	4a21      	ldr	r2, [pc, #132]	@ (8011708 <HAL_TIM_Base_Start+0xe8>)
 8011682:	4293      	cmp	r3, r2
 8011684:	d00e      	beq.n	80116a4 <HAL_TIM_Base_Start+0x84>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	4a20      	ldr	r2, [pc, #128]	@ (801170c <HAL_TIM_Base_Start+0xec>)
 801168c:	4293      	cmp	r3, r2
 801168e:	d009      	beq.n	80116a4 <HAL_TIM_Base_Start+0x84>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4a1e      	ldr	r2, [pc, #120]	@ (8011710 <HAL_TIM_Base_Start+0xf0>)
 8011696:	4293      	cmp	r3, r2
 8011698:	d004      	beq.n	80116a4 <HAL_TIM_Base_Start+0x84>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	4a1d      	ldr	r2, [pc, #116]	@ (8011714 <HAL_TIM_Base_Start+0xf4>)
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d115      	bne.n	80116d0 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	689a      	ldr	r2, [r3, #8]
 80116aa:	4b1b      	ldr	r3, [pc, #108]	@ (8011718 <HAL_TIM_Base_Start+0xf8>)
 80116ac:	4013      	ands	r3, r2
 80116ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2b06      	cmp	r3, #6
 80116b4:	d015      	beq.n	80116e2 <HAL_TIM_Base_Start+0xc2>
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80116bc:	d011      	beq.n	80116e2 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	f042 0201 	orr.w	r2, r2, #1
 80116cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80116ce:	e008      	b.n	80116e2 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	681a      	ldr	r2, [r3, #0]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	f042 0201 	orr.w	r2, r2, #1
 80116de:	601a      	str	r2, [r3, #0]
 80116e0:	e000      	b.n	80116e4 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80116e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80116e4:	2300      	movs	r3, #0
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3714      	adds	r7, #20
 80116ea:	46bd      	mov	sp, r7
 80116ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f0:	4770      	bx	lr
 80116f2:	bf00      	nop
 80116f4:	40010000 	.word	0x40010000
 80116f8:	40000400 	.word	0x40000400
 80116fc:	40000800 	.word	0x40000800
 8011700:	40000c00 	.word	0x40000c00
 8011704:	40010400 	.word	0x40010400
 8011708:	40001800 	.word	0x40001800
 801170c:	40014000 	.word	0x40014000
 8011710:	4000e000 	.word	0x4000e000
 8011714:	4000e400 	.word	0x4000e400
 8011718:	00010007 	.word	0x00010007

0801171c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801171c:	b480      	push	{r7}
 801171e:	b085      	sub	sp, #20
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801172a:	b2db      	uxtb	r3, r3
 801172c:	2b01      	cmp	r3, #1
 801172e:	d001      	beq.n	8011734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011730:	2301      	movs	r3, #1
 8011732:	e05e      	b.n	80117f2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2202      	movs	r2, #2
 8011738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	68da      	ldr	r2, [r3, #12]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f042 0201 	orr.w	r2, r2, #1
 801174a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	4a2b      	ldr	r2, [pc, #172]	@ (8011800 <HAL_TIM_Base_Start_IT+0xe4>)
 8011752:	4293      	cmp	r3, r2
 8011754:	d02c      	beq.n	80117b0 <HAL_TIM_Base_Start_IT+0x94>
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801175e:	d027      	beq.n	80117b0 <HAL_TIM_Base_Start_IT+0x94>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	4a27      	ldr	r2, [pc, #156]	@ (8011804 <HAL_TIM_Base_Start_IT+0xe8>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d022      	beq.n	80117b0 <HAL_TIM_Base_Start_IT+0x94>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	4a26      	ldr	r2, [pc, #152]	@ (8011808 <HAL_TIM_Base_Start_IT+0xec>)
 8011770:	4293      	cmp	r3, r2
 8011772:	d01d      	beq.n	80117b0 <HAL_TIM_Base_Start_IT+0x94>
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	4a24      	ldr	r2, [pc, #144]	@ (801180c <HAL_TIM_Base_Start_IT+0xf0>)
 801177a:	4293      	cmp	r3, r2
 801177c:	d018      	beq.n	80117b0 <HAL_TIM_Base_Start_IT+0x94>
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	4a23      	ldr	r2, [pc, #140]	@ (8011810 <HAL_TIM_Base_Start_IT+0xf4>)
 8011784:	4293      	cmp	r3, r2
 8011786:	d013      	beq.n	80117b0 <HAL_TIM_Base_Start_IT+0x94>
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	4a21      	ldr	r2, [pc, #132]	@ (8011814 <HAL_TIM_Base_Start_IT+0xf8>)
 801178e:	4293      	cmp	r3, r2
 8011790:	d00e      	beq.n	80117b0 <HAL_TIM_Base_Start_IT+0x94>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	4a20      	ldr	r2, [pc, #128]	@ (8011818 <HAL_TIM_Base_Start_IT+0xfc>)
 8011798:	4293      	cmp	r3, r2
 801179a:	d009      	beq.n	80117b0 <HAL_TIM_Base_Start_IT+0x94>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	4a1e      	ldr	r2, [pc, #120]	@ (801181c <HAL_TIM_Base_Start_IT+0x100>)
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d004      	beq.n	80117b0 <HAL_TIM_Base_Start_IT+0x94>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	4a1d      	ldr	r2, [pc, #116]	@ (8011820 <HAL_TIM_Base_Start_IT+0x104>)
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d115      	bne.n	80117dc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	689a      	ldr	r2, [r3, #8]
 80117b6:	4b1b      	ldr	r3, [pc, #108]	@ (8011824 <HAL_TIM_Base_Start_IT+0x108>)
 80117b8:	4013      	ands	r3, r2
 80117ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2b06      	cmp	r3, #6
 80117c0:	d015      	beq.n	80117ee <HAL_TIM_Base_Start_IT+0xd2>
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80117c8:	d011      	beq.n	80117ee <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	681a      	ldr	r2, [r3, #0]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f042 0201 	orr.w	r2, r2, #1
 80117d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80117da:	e008      	b.n	80117ee <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	f042 0201 	orr.w	r2, r2, #1
 80117ea:	601a      	str	r2, [r3, #0]
 80117ec:	e000      	b.n	80117f0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80117ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80117f0:	2300      	movs	r3, #0
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3714      	adds	r7, #20
 80117f6:	46bd      	mov	sp, r7
 80117f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fc:	4770      	bx	lr
 80117fe:	bf00      	nop
 8011800:	40010000 	.word	0x40010000
 8011804:	40000400 	.word	0x40000400
 8011808:	40000800 	.word	0x40000800
 801180c:	40000c00 	.word	0x40000c00
 8011810:	40010400 	.word	0x40010400
 8011814:	40001800 	.word	0x40001800
 8011818:	40014000 	.word	0x40014000
 801181c:	4000e000 	.word	0x4000e000
 8011820:	4000e400 	.word	0x4000e400
 8011824:	00010007 	.word	0x00010007

08011828 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d101      	bne.n	801183a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011836:	2301      	movs	r3, #1
 8011838:	e049      	b.n	80118ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011840:	b2db      	uxtb	r3, r3
 8011842:	2b00      	cmp	r3, #0
 8011844:	d106      	bne.n	8011854 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2200      	movs	r2, #0
 801184a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f000 f841 	bl	80118d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2202      	movs	r2, #2
 8011858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681a      	ldr	r2, [r3, #0]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	3304      	adds	r3, #4
 8011864:	4619      	mov	r1, r3
 8011866:	4610      	mov	r0, r2
 8011868:	f001 f848 	bl	80128fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2201      	movs	r2, #1
 8011870:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2201      	movs	r2, #1
 8011878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2201      	movs	r2, #1
 8011880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2201      	movs	r2, #1
 8011888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2201      	movs	r2, #1
 8011890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2201      	movs	r2, #1
 8011898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2201      	movs	r2, #1
 80118a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2201      	movs	r2, #1
 80118a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2201      	movs	r2, #1
 80118b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2201      	movs	r2, #1
 80118b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2201      	movs	r2, #1
 80118c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2201      	movs	r2, #1
 80118c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80118cc:	2300      	movs	r3, #0
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	3708      	adds	r7, #8
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}

080118d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80118d6:	b480      	push	{r7}
 80118d8:	b083      	sub	sp, #12
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80118de:	bf00      	nop
 80118e0:	370c      	adds	r7, #12
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr
	...

080118ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d109      	bne.n	8011910 <HAL_TIM_PWM_Start+0x24>
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011902:	b2db      	uxtb	r3, r3
 8011904:	2b01      	cmp	r3, #1
 8011906:	bf14      	ite	ne
 8011908:	2301      	movne	r3, #1
 801190a:	2300      	moveq	r3, #0
 801190c:	b2db      	uxtb	r3, r3
 801190e:	e03c      	b.n	801198a <HAL_TIM_PWM_Start+0x9e>
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	2b04      	cmp	r3, #4
 8011914:	d109      	bne.n	801192a <HAL_TIM_PWM_Start+0x3e>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801191c:	b2db      	uxtb	r3, r3
 801191e:	2b01      	cmp	r3, #1
 8011920:	bf14      	ite	ne
 8011922:	2301      	movne	r3, #1
 8011924:	2300      	moveq	r3, #0
 8011926:	b2db      	uxtb	r3, r3
 8011928:	e02f      	b.n	801198a <HAL_TIM_PWM_Start+0x9e>
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	2b08      	cmp	r3, #8
 801192e:	d109      	bne.n	8011944 <HAL_TIM_PWM_Start+0x58>
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011936:	b2db      	uxtb	r3, r3
 8011938:	2b01      	cmp	r3, #1
 801193a:	bf14      	ite	ne
 801193c:	2301      	movne	r3, #1
 801193e:	2300      	moveq	r3, #0
 8011940:	b2db      	uxtb	r3, r3
 8011942:	e022      	b.n	801198a <HAL_TIM_PWM_Start+0x9e>
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	2b0c      	cmp	r3, #12
 8011948:	d109      	bne.n	801195e <HAL_TIM_PWM_Start+0x72>
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011950:	b2db      	uxtb	r3, r3
 8011952:	2b01      	cmp	r3, #1
 8011954:	bf14      	ite	ne
 8011956:	2301      	movne	r3, #1
 8011958:	2300      	moveq	r3, #0
 801195a:	b2db      	uxtb	r3, r3
 801195c:	e015      	b.n	801198a <HAL_TIM_PWM_Start+0x9e>
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	2b10      	cmp	r3, #16
 8011962:	d109      	bne.n	8011978 <HAL_TIM_PWM_Start+0x8c>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801196a:	b2db      	uxtb	r3, r3
 801196c:	2b01      	cmp	r3, #1
 801196e:	bf14      	ite	ne
 8011970:	2301      	movne	r3, #1
 8011972:	2300      	moveq	r3, #0
 8011974:	b2db      	uxtb	r3, r3
 8011976:	e008      	b.n	801198a <HAL_TIM_PWM_Start+0x9e>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801197e:	b2db      	uxtb	r3, r3
 8011980:	2b01      	cmp	r3, #1
 8011982:	bf14      	ite	ne
 8011984:	2301      	movne	r3, #1
 8011986:	2300      	moveq	r3, #0
 8011988:	b2db      	uxtb	r3, r3
 801198a:	2b00      	cmp	r3, #0
 801198c:	d001      	beq.n	8011992 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801198e:	2301      	movs	r3, #1
 8011990:	e0ab      	b.n	8011aea <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d104      	bne.n	80119a2 <HAL_TIM_PWM_Start+0xb6>
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2202      	movs	r2, #2
 801199c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80119a0:	e023      	b.n	80119ea <HAL_TIM_PWM_Start+0xfe>
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	2b04      	cmp	r3, #4
 80119a6:	d104      	bne.n	80119b2 <HAL_TIM_PWM_Start+0xc6>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2202      	movs	r2, #2
 80119ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80119b0:	e01b      	b.n	80119ea <HAL_TIM_PWM_Start+0xfe>
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	2b08      	cmp	r3, #8
 80119b6:	d104      	bne.n	80119c2 <HAL_TIM_PWM_Start+0xd6>
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2202      	movs	r2, #2
 80119bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80119c0:	e013      	b.n	80119ea <HAL_TIM_PWM_Start+0xfe>
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	2b0c      	cmp	r3, #12
 80119c6:	d104      	bne.n	80119d2 <HAL_TIM_PWM_Start+0xe6>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2202      	movs	r2, #2
 80119cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80119d0:	e00b      	b.n	80119ea <HAL_TIM_PWM_Start+0xfe>
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	2b10      	cmp	r3, #16
 80119d6:	d104      	bne.n	80119e2 <HAL_TIM_PWM_Start+0xf6>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2202      	movs	r2, #2
 80119dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80119e0:	e003      	b.n	80119ea <HAL_TIM_PWM_Start+0xfe>
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2202      	movs	r2, #2
 80119e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	2201      	movs	r2, #1
 80119f0:	6839      	ldr	r1, [r7, #0]
 80119f2:	4618      	mov	r0, r3
 80119f4:	f001 fba8 	bl	8013148 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4a3d      	ldr	r2, [pc, #244]	@ (8011af4 <HAL_TIM_PWM_Start+0x208>)
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d013      	beq.n	8011a2a <HAL_TIM_PWM_Start+0x13e>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	4a3c      	ldr	r2, [pc, #240]	@ (8011af8 <HAL_TIM_PWM_Start+0x20c>)
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	d00e      	beq.n	8011a2a <HAL_TIM_PWM_Start+0x13e>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	4a3a      	ldr	r2, [pc, #232]	@ (8011afc <HAL_TIM_PWM_Start+0x210>)
 8011a12:	4293      	cmp	r3, r2
 8011a14:	d009      	beq.n	8011a2a <HAL_TIM_PWM_Start+0x13e>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	4a39      	ldr	r2, [pc, #228]	@ (8011b00 <HAL_TIM_PWM_Start+0x214>)
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	d004      	beq.n	8011a2a <HAL_TIM_PWM_Start+0x13e>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	4a37      	ldr	r2, [pc, #220]	@ (8011b04 <HAL_TIM_PWM_Start+0x218>)
 8011a26:	4293      	cmp	r3, r2
 8011a28:	d101      	bne.n	8011a2e <HAL_TIM_PWM_Start+0x142>
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	e000      	b.n	8011a30 <HAL_TIM_PWM_Start+0x144>
 8011a2e:	2300      	movs	r3, #0
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d007      	beq.n	8011a44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011a42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	4a2a      	ldr	r2, [pc, #168]	@ (8011af4 <HAL_TIM_PWM_Start+0x208>)
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	d02c      	beq.n	8011aa8 <HAL_TIM_PWM_Start+0x1bc>
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a56:	d027      	beq.n	8011aa8 <HAL_TIM_PWM_Start+0x1bc>
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8011b08 <HAL_TIM_PWM_Start+0x21c>)
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	d022      	beq.n	8011aa8 <HAL_TIM_PWM_Start+0x1bc>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	4a29      	ldr	r2, [pc, #164]	@ (8011b0c <HAL_TIM_PWM_Start+0x220>)
 8011a68:	4293      	cmp	r3, r2
 8011a6a:	d01d      	beq.n	8011aa8 <HAL_TIM_PWM_Start+0x1bc>
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	4a27      	ldr	r2, [pc, #156]	@ (8011b10 <HAL_TIM_PWM_Start+0x224>)
 8011a72:	4293      	cmp	r3, r2
 8011a74:	d018      	beq.n	8011aa8 <HAL_TIM_PWM_Start+0x1bc>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8011af8 <HAL_TIM_PWM_Start+0x20c>)
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	d013      	beq.n	8011aa8 <HAL_TIM_PWM_Start+0x1bc>
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	4a23      	ldr	r2, [pc, #140]	@ (8011b14 <HAL_TIM_PWM_Start+0x228>)
 8011a86:	4293      	cmp	r3, r2
 8011a88:	d00e      	beq.n	8011aa8 <HAL_TIM_PWM_Start+0x1bc>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8011afc <HAL_TIM_PWM_Start+0x210>)
 8011a90:	4293      	cmp	r3, r2
 8011a92:	d009      	beq.n	8011aa8 <HAL_TIM_PWM_Start+0x1bc>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	4a1f      	ldr	r2, [pc, #124]	@ (8011b18 <HAL_TIM_PWM_Start+0x22c>)
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d004      	beq.n	8011aa8 <HAL_TIM_PWM_Start+0x1bc>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8011b1c <HAL_TIM_PWM_Start+0x230>)
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	d115      	bne.n	8011ad4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	689a      	ldr	r2, [r3, #8]
 8011aae:	4b1c      	ldr	r3, [pc, #112]	@ (8011b20 <HAL_TIM_PWM_Start+0x234>)
 8011ab0:	4013      	ands	r3, r2
 8011ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	2b06      	cmp	r3, #6
 8011ab8:	d015      	beq.n	8011ae6 <HAL_TIM_PWM_Start+0x1fa>
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011ac0:	d011      	beq.n	8011ae6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	681a      	ldr	r2, [r3, #0]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f042 0201 	orr.w	r2, r2, #1
 8011ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011ad2:	e008      	b.n	8011ae6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	f042 0201 	orr.w	r2, r2, #1
 8011ae2:	601a      	str	r2, [r3, #0]
 8011ae4:	e000      	b.n	8011ae8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011ae6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011ae8:	2300      	movs	r3, #0
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3710      	adds	r7, #16
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
 8011af2:	bf00      	nop
 8011af4:	40010000 	.word	0x40010000
 8011af8:	40010400 	.word	0x40010400
 8011afc:	40014000 	.word	0x40014000
 8011b00:	40014400 	.word	0x40014400
 8011b04:	40014800 	.word	0x40014800
 8011b08:	40000400 	.word	0x40000400
 8011b0c:	40000800 	.word	0x40000800
 8011b10:	40000c00 	.word	0x40000c00
 8011b14:	40001800 	.word	0x40001800
 8011b18:	4000e000 	.word	0x4000e000
 8011b1c:	4000e400 	.word	0x4000e400
 8011b20:	00010007 	.word	0x00010007

08011b24 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	2200      	movs	r2, #0
 8011b34:	6839      	ldr	r1, [r7, #0]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f001 fb06 	bl	8013148 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	4a3e      	ldr	r2, [pc, #248]	@ (8011c3c <HAL_TIM_PWM_Stop+0x118>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d013      	beq.n	8011b6e <HAL_TIM_PWM_Stop+0x4a>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	4a3d      	ldr	r2, [pc, #244]	@ (8011c40 <HAL_TIM_PWM_Stop+0x11c>)
 8011b4c:	4293      	cmp	r3, r2
 8011b4e:	d00e      	beq.n	8011b6e <HAL_TIM_PWM_Stop+0x4a>
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4a3b      	ldr	r2, [pc, #236]	@ (8011c44 <HAL_TIM_PWM_Stop+0x120>)
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d009      	beq.n	8011b6e <HAL_TIM_PWM_Stop+0x4a>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	4a3a      	ldr	r2, [pc, #232]	@ (8011c48 <HAL_TIM_PWM_Stop+0x124>)
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d004      	beq.n	8011b6e <HAL_TIM_PWM_Stop+0x4a>
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	4a38      	ldr	r2, [pc, #224]	@ (8011c4c <HAL_TIM_PWM_Stop+0x128>)
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d101      	bne.n	8011b72 <HAL_TIM_PWM_Stop+0x4e>
 8011b6e:	2301      	movs	r3, #1
 8011b70:	e000      	b.n	8011b74 <HAL_TIM_PWM_Stop+0x50>
 8011b72:	2300      	movs	r3, #0
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d017      	beq.n	8011ba8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	6a1a      	ldr	r2, [r3, #32]
 8011b7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011b82:	4013      	ands	r3, r2
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d10f      	bne.n	8011ba8 <HAL_TIM_PWM_Stop+0x84>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	6a1a      	ldr	r2, [r3, #32]
 8011b8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8011b92:	4013      	ands	r3, r2
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d107      	bne.n	8011ba8 <HAL_TIM_PWM_Stop+0x84>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011ba6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	6a1a      	ldr	r2, [r3, #32]
 8011bae:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011bb2:	4013      	ands	r3, r2
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d10f      	bne.n	8011bd8 <HAL_TIM_PWM_Stop+0xb4>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	6a1a      	ldr	r2, [r3, #32]
 8011bbe:	f240 4344 	movw	r3, #1092	@ 0x444
 8011bc2:	4013      	ands	r3, r2
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d107      	bne.n	8011bd8 <HAL_TIM_PWM_Stop+0xb4>
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	681a      	ldr	r2, [r3, #0]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	f022 0201 	bic.w	r2, r2, #1
 8011bd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d104      	bne.n	8011be8 <HAL_TIM_PWM_Stop+0xc4>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2201      	movs	r2, #1
 8011be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011be6:	e023      	b.n	8011c30 <HAL_TIM_PWM_Stop+0x10c>
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	2b04      	cmp	r3, #4
 8011bec:	d104      	bne.n	8011bf8 <HAL_TIM_PWM_Stop+0xd4>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2201      	movs	r2, #1
 8011bf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011bf6:	e01b      	b.n	8011c30 <HAL_TIM_PWM_Stop+0x10c>
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	2b08      	cmp	r3, #8
 8011bfc:	d104      	bne.n	8011c08 <HAL_TIM_PWM_Stop+0xe4>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2201      	movs	r2, #1
 8011c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011c06:	e013      	b.n	8011c30 <HAL_TIM_PWM_Stop+0x10c>
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	2b0c      	cmp	r3, #12
 8011c0c:	d104      	bne.n	8011c18 <HAL_TIM_PWM_Stop+0xf4>
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2201      	movs	r2, #1
 8011c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011c16:	e00b      	b.n	8011c30 <HAL_TIM_PWM_Stop+0x10c>
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	2b10      	cmp	r3, #16
 8011c1c:	d104      	bne.n	8011c28 <HAL_TIM_PWM_Stop+0x104>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2201      	movs	r2, #1
 8011c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011c26:	e003      	b.n	8011c30 <HAL_TIM_PWM_Stop+0x10c>
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8011c30:	2300      	movs	r3, #0
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3708      	adds	r7, #8
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	40010000 	.word	0x40010000
 8011c40:	40010400 	.word	0x40010400
 8011c44:	40014000 	.word	0x40014000
 8011c48:	40014400 	.word	0x40014400
 8011c4c:	40014800 	.word	0x40014800

08011c50 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b086      	sub	sp, #24
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	60f8      	str	r0, [r7, #12]
 8011c58:	60b9      	str	r1, [r7, #8]
 8011c5a:	607a      	str	r2, [r7, #4]
 8011c5c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d109      	bne.n	8011c7c <HAL_TIM_PWM_Start_DMA+0x2c>
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011c6e:	b2db      	uxtb	r3, r3
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	bf0c      	ite	eq
 8011c74:	2301      	moveq	r3, #1
 8011c76:	2300      	movne	r3, #0
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	e03c      	b.n	8011cf6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	2b04      	cmp	r3, #4
 8011c80:	d109      	bne.n	8011c96 <HAL_TIM_PWM_Start_DMA+0x46>
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011c88:	b2db      	uxtb	r3, r3
 8011c8a:	2b02      	cmp	r3, #2
 8011c8c:	bf0c      	ite	eq
 8011c8e:	2301      	moveq	r3, #1
 8011c90:	2300      	movne	r3, #0
 8011c92:	b2db      	uxtb	r3, r3
 8011c94:	e02f      	b.n	8011cf6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	2b08      	cmp	r3, #8
 8011c9a:	d109      	bne.n	8011cb0 <HAL_TIM_PWM_Start_DMA+0x60>
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ca2:	b2db      	uxtb	r3, r3
 8011ca4:	2b02      	cmp	r3, #2
 8011ca6:	bf0c      	ite	eq
 8011ca8:	2301      	moveq	r3, #1
 8011caa:	2300      	movne	r3, #0
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	e022      	b.n	8011cf6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	2b0c      	cmp	r3, #12
 8011cb4:	d109      	bne.n	8011cca <HAL_TIM_PWM_Start_DMA+0x7a>
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011cbc:	b2db      	uxtb	r3, r3
 8011cbe:	2b02      	cmp	r3, #2
 8011cc0:	bf0c      	ite	eq
 8011cc2:	2301      	moveq	r3, #1
 8011cc4:	2300      	movne	r3, #0
 8011cc6:	b2db      	uxtb	r3, r3
 8011cc8:	e015      	b.n	8011cf6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	2b10      	cmp	r3, #16
 8011cce:	d109      	bne.n	8011ce4 <HAL_TIM_PWM_Start_DMA+0x94>
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011cd6:	b2db      	uxtb	r3, r3
 8011cd8:	2b02      	cmp	r3, #2
 8011cda:	bf0c      	ite	eq
 8011cdc:	2301      	moveq	r3, #1
 8011cde:	2300      	movne	r3, #0
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	e008      	b.n	8011cf6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	2b02      	cmp	r3, #2
 8011cee:	bf0c      	ite	eq
 8011cf0:	2301      	moveq	r3, #1
 8011cf2:	2300      	movne	r3, #0
 8011cf4:	b2db      	uxtb	r3, r3
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d001      	beq.n	8011cfe <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8011cfa:	2302      	movs	r3, #2
 8011cfc:	e1ba      	b.n	8012074 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d109      	bne.n	8011d18 <HAL_TIM_PWM_Start_DMA+0xc8>
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011d0a:	b2db      	uxtb	r3, r3
 8011d0c:	2b01      	cmp	r3, #1
 8011d0e:	bf0c      	ite	eq
 8011d10:	2301      	moveq	r3, #1
 8011d12:	2300      	movne	r3, #0
 8011d14:	b2db      	uxtb	r3, r3
 8011d16:	e03c      	b.n	8011d92 <HAL_TIM_PWM_Start_DMA+0x142>
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	2b04      	cmp	r3, #4
 8011d1c:	d109      	bne.n	8011d32 <HAL_TIM_PWM_Start_DMA+0xe2>
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011d24:	b2db      	uxtb	r3, r3
 8011d26:	2b01      	cmp	r3, #1
 8011d28:	bf0c      	ite	eq
 8011d2a:	2301      	moveq	r3, #1
 8011d2c:	2300      	movne	r3, #0
 8011d2e:	b2db      	uxtb	r3, r3
 8011d30:	e02f      	b.n	8011d92 <HAL_TIM_PWM_Start_DMA+0x142>
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	2b08      	cmp	r3, #8
 8011d36:	d109      	bne.n	8011d4c <HAL_TIM_PWM_Start_DMA+0xfc>
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	2b01      	cmp	r3, #1
 8011d42:	bf0c      	ite	eq
 8011d44:	2301      	moveq	r3, #1
 8011d46:	2300      	movne	r3, #0
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	e022      	b.n	8011d92 <HAL_TIM_PWM_Start_DMA+0x142>
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	2b0c      	cmp	r3, #12
 8011d50:	d109      	bne.n	8011d66 <HAL_TIM_PWM_Start_DMA+0x116>
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011d58:	b2db      	uxtb	r3, r3
 8011d5a:	2b01      	cmp	r3, #1
 8011d5c:	bf0c      	ite	eq
 8011d5e:	2301      	moveq	r3, #1
 8011d60:	2300      	movne	r3, #0
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	e015      	b.n	8011d92 <HAL_TIM_PWM_Start_DMA+0x142>
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	2b10      	cmp	r3, #16
 8011d6a:	d109      	bne.n	8011d80 <HAL_TIM_PWM_Start_DMA+0x130>
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011d72:	b2db      	uxtb	r3, r3
 8011d74:	2b01      	cmp	r3, #1
 8011d76:	bf0c      	ite	eq
 8011d78:	2301      	moveq	r3, #1
 8011d7a:	2300      	movne	r3, #0
 8011d7c:	b2db      	uxtb	r3, r3
 8011d7e:	e008      	b.n	8011d92 <HAL_TIM_PWM_Start_DMA+0x142>
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	bf0c      	ite	eq
 8011d8c:	2301      	moveq	r3, #1
 8011d8e:	2300      	movne	r3, #0
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d034      	beq.n	8011e00 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d002      	beq.n	8011da2 <HAL_TIM_PWM_Start_DMA+0x152>
 8011d9c:	887b      	ldrh	r3, [r7, #2]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d101      	bne.n	8011da6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8011da2:	2301      	movs	r3, #1
 8011da4:	e166      	b.n	8012074 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d104      	bne.n	8011db6 <HAL_TIM_PWM_Start_DMA+0x166>
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	2202      	movs	r2, #2
 8011db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011db4:	e026      	b.n	8011e04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	2b04      	cmp	r3, #4
 8011dba:	d104      	bne.n	8011dc6 <HAL_TIM_PWM_Start_DMA+0x176>
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	2202      	movs	r2, #2
 8011dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011dc4:	e01e      	b.n	8011e04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	2b08      	cmp	r3, #8
 8011dca:	d104      	bne.n	8011dd6 <HAL_TIM_PWM_Start_DMA+0x186>
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2202      	movs	r2, #2
 8011dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011dd4:	e016      	b.n	8011e04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	2b0c      	cmp	r3, #12
 8011dda:	d104      	bne.n	8011de6 <HAL_TIM_PWM_Start_DMA+0x196>
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	2202      	movs	r2, #2
 8011de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011de4:	e00e      	b.n	8011e04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	2b10      	cmp	r3, #16
 8011dea:	d104      	bne.n	8011df6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	2202      	movs	r2, #2
 8011df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011df4:	e006      	b.n	8011e04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	2202      	movs	r2, #2
 8011dfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011dfe:	e001      	b.n	8011e04 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8011e00:	2301      	movs	r3, #1
 8011e02:	e137      	b.n	8012074 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	2b0c      	cmp	r3, #12
 8011e08:	f200 80ae 	bhi.w	8011f68 <HAL_TIM_PWM_Start_DMA+0x318>
 8011e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8011e14 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8011e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e12:	bf00      	nop
 8011e14:	08011e49 	.word	0x08011e49
 8011e18:	08011f69 	.word	0x08011f69
 8011e1c:	08011f69 	.word	0x08011f69
 8011e20:	08011f69 	.word	0x08011f69
 8011e24:	08011e91 	.word	0x08011e91
 8011e28:	08011f69 	.word	0x08011f69
 8011e2c:	08011f69 	.word	0x08011f69
 8011e30:	08011f69 	.word	0x08011f69
 8011e34:	08011ed9 	.word	0x08011ed9
 8011e38:	08011f69 	.word	0x08011f69
 8011e3c:	08011f69 	.word	0x08011f69
 8011e40:	08011f69 	.word	0x08011f69
 8011e44:	08011f21 	.word	0x08011f21
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e4c:	4a8b      	ldr	r2, [pc, #556]	@ (801207c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8011e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e54:	4a8a      	ldr	r2, [pc, #552]	@ (8012080 <HAL_TIM_PWM_Start_DMA+0x430>)
 8011e56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e5c:	4a89      	ldr	r2, [pc, #548]	@ (8012084 <HAL_TIM_PWM_Start_DMA+0x434>)
 8011e5e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011e64:	6879      	ldr	r1, [r7, #4]
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	3334      	adds	r3, #52	@ 0x34
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	887b      	ldrh	r3, [r7, #2]
 8011e70:	f7f7 fd72 	bl	8009958 <HAL_DMA_Start_IT>
 8011e74:	4603      	mov	r3, r0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d001      	beq.n	8011e7e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	e0fa      	b.n	8012074 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	68da      	ldr	r2, [r3, #12]
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011e8c:	60da      	str	r2, [r3, #12]
      break;
 8011e8e:	e06e      	b.n	8011f6e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e94:	4a79      	ldr	r2, [pc, #484]	@ (801207c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8011e96:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e9c:	4a78      	ldr	r2, [pc, #480]	@ (8012080 <HAL_TIM_PWM_Start_DMA+0x430>)
 8011e9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ea4:	4a77      	ldr	r2, [pc, #476]	@ (8012084 <HAL_TIM_PWM_Start_DMA+0x434>)
 8011ea6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8011eac:	6879      	ldr	r1, [r7, #4]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	3338      	adds	r3, #56	@ 0x38
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	887b      	ldrh	r3, [r7, #2]
 8011eb8:	f7f7 fd4e 	bl	8009958 <HAL_DMA_Start_IT>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d001      	beq.n	8011ec6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	e0d6      	b.n	8012074 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	68da      	ldr	r2, [r3, #12]
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011ed4:	60da      	str	r2, [r3, #12]
      break;
 8011ed6:	e04a      	b.n	8011f6e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011edc:	4a67      	ldr	r2, [pc, #412]	@ (801207c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8011ede:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ee4:	4a66      	ldr	r2, [pc, #408]	@ (8012080 <HAL_TIM_PWM_Start_DMA+0x430>)
 8011ee6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011eec:	4a65      	ldr	r2, [pc, #404]	@ (8012084 <HAL_TIM_PWM_Start_DMA+0x434>)
 8011eee:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011ef4:	6879      	ldr	r1, [r7, #4]
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	333c      	adds	r3, #60	@ 0x3c
 8011efc:	461a      	mov	r2, r3
 8011efe:	887b      	ldrh	r3, [r7, #2]
 8011f00:	f7f7 fd2a 	bl	8009958 <HAL_DMA_Start_IT>
 8011f04:	4603      	mov	r3, r0
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d001      	beq.n	8011f0e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	e0b2      	b.n	8012074 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	68da      	ldr	r2, [r3, #12]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011f1c:	60da      	str	r2, [r3, #12]
      break;
 8011f1e:	e026      	b.n	8011f6e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f24:	4a55      	ldr	r2, [pc, #340]	@ (801207c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8011f26:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f2c:	4a54      	ldr	r2, [pc, #336]	@ (8012080 <HAL_TIM_PWM_Start_DMA+0x430>)
 8011f2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f34:	4a53      	ldr	r2, [pc, #332]	@ (8012084 <HAL_TIM_PWM_Start_DMA+0x434>)
 8011f36:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011f3c:	6879      	ldr	r1, [r7, #4]
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	3340      	adds	r3, #64	@ 0x40
 8011f44:	461a      	mov	r2, r3
 8011f46:	887b      	ldrh	r3, [r7, #2]
 8011f48:	f7f7 fd06 	bl	8009958 <HAL_DMA_Start_IT>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d001      	beq.n	8011f56 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011f52:	2301      	movs	r3, #1
 8011f54:	e08e      	b.n	8012074 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	68da      	ldr	r2, [r3, #12]
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011f64:	60da      	str	r2, [r3, #12]
      break;
 8011f66:	e002      	b.n	8011f6e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8011f68:	2301      	movs	r3, #1
 8011f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8011f6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8011f6e:	7dfb      	ldrb	r3, [r7, #23]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d17e      	bne.n	8012072 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	2201      	movs	r2, #1
 8011f7a:	68b9      	ldr	r1, [r7, #8]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f001 f8e3 	bl	8013148 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	4a40      	ldr	r2, [pc, #256]	@ (8012088 <HAL_TIM_PWM_Start_DMA+0x438>)
 8011f88:	4293      	cmp	r3, r2
 8011f8a:	d013      	beq.n	8011fb4 <HAL_TIM_PWM_Start_DMA+0x364>
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	4a3e      	ldr	r2, [pc, #248]	@ (801208c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8011f92:	4293      	cmp	r3, r2
 8011f94:	d00e      	beq.n	8011fb4 <HAL_TIM_PWM_Start_DMA+0x364>
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8012090 <HAL_TIM_PWM_Start_DMA+0x440>)
 8011f9c:	4293      	cmp	r3, r2
 8011f9e:	d009      	beq.n	8011fb4 <HAL_TIM_PWM_Start_DMA+0x364>
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	4a3b      	ldr	r2, [pc, #236]	@ (8012094 <HAL_TIM_PWM_Start_DMA+0x444>)
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d004      	beq.n	8011fb4 <HAL_TIM_PWM_Start_DMA+0x364>
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4a3a      	ldr	r2, [pc, #232]	@ (8012098 <HAL_TIM_PWM_Start_DMA+0x448>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d101      	bne.n	8011fb8 <HAL_TIM_PWM_Start_DMA+0x368>
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	e000      	b.n	8011fba <HAL_TIM_PWM_Start_DMA+0x36a>
 8011fb8:	2300      	movs	r3, #0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d007      	beq.n	8011fce <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8012088 <HAL_TIM_PWM_Start_DMA+0x438>)
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d02c      	beq.n	8012032 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011fe0:	d027      	beq.n	8012032 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	4a2d      	ldr	r2, [pc, #180]	@ (801209c <HAL_TIM_PWM_Start_DMA+0x44c>)
 8011fe8:	4293      	cmp	r3, r2
 8011fea:	d022      	beq.n	8012032 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80120a0 <HAL_TIM_PWM_Start_DMA+0x450>)
 8011ff2:	4293      	cmp	r3, r2
 8011ff4:	d01d      	beq.n	8012032 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80120a4 <HAL_TIM_PWM_Start_DMA+0x454>)
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d018      	beq.n	8012032 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	4a21      	ldr	r2, [pc, #132]	@ (801208c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012006:	4293      	cmp	r3, r2
 8012008:	d013      	beq.n	8012032 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	4a26      	ldr	r2, [pc, #152]	@ (80120a8 <HAL_TIM_PWM_Start_DMA+0x458>)
 8012010:	4293      	cmp	r3, r2
 8012012:	d00e      	beq.n	8012032 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	4a1d      	ldr	r2, [pc, #116]	@ (8012090 <HAL_TIM_PWM_Start_DMA+0x440>)
 801201a:	4293      	cmp	r3, r2
 801201c:	d009      	beq.n	8012032 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	4a22      	ldr	r2, [pc, #136]	@ (80120ac <HAL_TIM_PWM_Start_DMA+0x45c>)
 8012024:	4293      	cmp	r3, r2
 8012026:	d004      	beq.n	8012032 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	4a20      	ldr	r2, [pc, #128]	@ (80120b0 <HAL_TIM_PWM_Start_DMA+0x460>)
 801202e:	4293      	cmp	r3, r2
 8012030:	d115      	bne.n	801205e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	689a      	ldr	r2, [r3, #8]
 8012038:	4b1e      	ldr	r3, [pc, #120]	@ (80120b4 <HAL_TIM_PWM_Start_DMA+0x464>)
 801203a:	4013      	ands	r3, r2
 801203c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	2b06      	cmp	r3, #6
 8012042:	d015      	beq.n	8012070 <HAL_TIM_PWM_Start_DMA+0x420>
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801204a:	d011      	beq.n	8012070 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	681a      	ldr	r2, [r3, #0]
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	f042 0201 	orr.w	r2, r2, #1
 801205a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801205c:	e008      	b.n	8012070 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	681a      	ldr	r2, [r3, #0]
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	f042 0201 	orr.w	r2, r2, #1
 801206c:	601a      	str	r2, [r3, #0]
 801206e:	e000      	b.n	8012072 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012070:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012072:	7dfb      	ldrb	r3, [r7, #23]
}
 8012074:	4618      	mov	r0, r3
 8012076:	3718      	adds	r7, #24
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}
 801207c:	080127eb 	.word	0x080127eb
 8012080:	08012893 	.word	0x08012893
 8012084:	08012759 	.word	0x08012759
 8012088:	40010000 	.word	0x40010000
 801208c:	40010400 	.word	0x40010400
 8012090:	40014000 	.word	0x40014000
 8012094:	40014400 	.word	0x40014400
 8012098:	40014800 	.word	0x40014800
 801209c:	40000400 	.word	0x40000400
 80120a0:	40000800 	.word	0x40000800
 80120a4:	40000c00 	.word	0x40000c00
 80120a8:	40001800 	.word	0x40001800
 80120ac:	4000e000 	.word	0x4000e000
 80120b0:	4000e400 	.word	0x4000e400
 80120b4:	00010007 	.word	0x00010007

080120b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b084      	sub	sp, #16
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	691b      	ldr	r3, [r3, #16]
 80120ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	f003 0302 	and.w	r3, r3, #2
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d020      	beq.n	801211c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	f003 0302 	and.w	r3, r3, #2
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d01b      	beq.n	801211c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	f06f 0202 	mvn.w	r2, #2
 80120ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2201      	movs	r2, #1
 80120f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	699b      	ldr	r3, [r3, #24]
 80120fa:	f003 0303 	and.w	r3, r3, #3
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d003      	beq.n	801210a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f000 faf6 	bl	80126f4 <HAL_TIM_IC_CaptureCallback>
 8012108:	e005      	b.n	8012116 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f000 fae8 	bl	80126e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f000 faf9 	bl	8012708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2200      	movs	r2, #0
 801211a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	f003 0304 	and.w	r3, r3, #4
 8012122:	2b00      	cmp	r3, #0
 8012124:	d020      	beq.n	8012168 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f003 0304 	and.w	r3, r3, #4
 801212c:	2b00      	cmp	r3, #0
 801212e:	d01b      	beq.n	8012168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	f06f 0204 	mvn.w	r2, #4
 8012138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2202      	movs	r2, #2
 801213e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	699b      	ldr	r3, [r3, #24]
 8012146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801214a:	2b00      	cmp	r3, #0
 801214c:	d003      	beq.n	8012156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f000 fad0 	bl	80126f4 <HAL_TIM_IC_CaptureCallback>
 8012154:	e005      	b.n	8012162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f000 fac2 	bl	80126e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f000 fad3 	bl	8012708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2200      	movs	r2, #0
 8012166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	f003 0308 	and.w	r3, r3, #8
 801216e:	2b00      	cmp	r3, #0
 8012170:	d020      	beq.n	80121b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	f003 0308 	and.w	r3, r3, #8
 8012178:	2b00      	cmp	r3, #0
 801217a:	d01b      	beq.n	80121b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	f06f 0208 	mvn.w	r2, #8
 8012184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2204      	movs	r2, #4
 801218a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	69db      	ldr	r3, [r3, #28]
 8012192:	f003 0303 	and.w	r3, r3, #3
 8012196:	2b00      	cmp	r3, #0
 8012198:	d003      	beq.n	80121a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f000 faaa 	bl	80126f4 <HAL_TIM_IC_CaptureCallback>
 80121a0:	e005      	b.n	80121ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f000 fa9c 	bl	80126e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f000 faad 	bl	8012708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2200      	movs	r2, #0
 80121b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	f003 0310 	and.w	r3, r3, #16
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d020      	beq.n	8012200 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	f003 0310 	and.w	r3, r3, #16
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d01b      	beq.n	8012200 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	f06f 0210 	mvn.w	r2, #16
 80121d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2208      	movs	r2, #8
 80121d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	69db      	ldr	r3, [r3, #28]
 80121de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d003      	beq.n	80121ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f000 fa84 	bl	80126f4 <HAL_TIM_IC_CaptureCallback>
 80121ec:	e005      	b.n	80121fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f000 fa76 	bl	80126e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f000 fa87 	bl	8012708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2200      	movs	r2, #0
 80121fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	f003 0301 	and.w	r3, r3, #1
 8012206:	2b00      	cmp	r3, #0
 8012208:	d00c      	beq.n	8012224 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	f003 0301 	and.w	r3, r3, #1
 8012210:	2b00      	cmp	r3, #0
 8012212:	d007      	beq.n	8012224 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f06f 0201 	mvn.w	r2, #1
 801221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f7ef f80c 	bl	800123c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801222a:	2b00      	cmp	r3, #0
 801222c:	d104      	bne.n	8012238 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012234:	2b00      	cmp	r3, #0
 8012236:	d00c      	beq.n	8012252 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801223e:	2b00      	cmp	r3, #0
 8012240:	d007      	beq.n	8012252 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801224a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f001 f847 	bl	80132e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012258:	2b00      	cmp	r3, #0
 801225a:	d00c      	beq.n	8012276 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012262:	2b00      	cmp	r3, #0
 8012264:	d007      	beq.n	8012276 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801226e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f001 f83f 	bl	80132f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801227c:	2b00      	cmp	r3, #0
 801227e:	d00c      	beq.n	801229a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012286:	2b00      	cmp	r3, #0
 8012288:	d007      	beq.n	801229a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8012292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f000 fa4b 	bl	8012730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	f003 0320 	and.w	r3, r3, #32
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d00c      	beq.n	80122be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	f003 0320 	and.w	r3, r3, #32
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d007      	beq.n	80122be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	f06f 0220 	mvn.w	r2, #32
 80122b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f001 f807 	bl	80132cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80122be:	bf00      	nop
 80122c0:	3710      	adds	r7, #16
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
	...

080122c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b086      	sub	sp, #24
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	60f8      	str	r0, [r7, #12]
 80122d0:	60b9      	str	r1, [r7, #8]
 80122d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80122d4:	2300      	movs	r3, #0
 80122d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80122de:	2b01      	cmp	r3, #1
 80122e0:	d101      	bne.n	80122e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80122e2:	2302      	movs	r3, #2
 80122e4:	e0ff      	b.n	80124e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2201      	movs	r2, #1
 80122ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2b14      	cmp	r3, #20
 80122f2:	f200 80f0 	bhi.w	80124d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80122f6:	a201      	add	r2, pc, #4	@ (adr r2, 80122fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80122f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122fc:	08012351 	.word	0x08012351
 8012300:	080124d7 	.word	0x080124d7
 8012304:	080124d7 	.word	0x080124d7
 8012308:	080124d7 	.word	0x080124d7
 801230c:	08012391 	.word	0x08012391
 8012310:	080124d7 	.word	0x080124d7
 8012314:	080124d7 	.word	0x080124d7
 8012318:	080124d7 	.word	0x080124d7
 801231c:	080123d3 	.word	0x080123d3
 8012320:	080124d7 	.word	0x080124d7
 8012324:	080124d7 	.word	0x080124d7
 8012328:	080124d7 	.word	0x080124d7
 801232c:	08012413 	.word	0x08012413
 8012330:	080124d7 	.word	0x080124d7
 8012334:	080124d7 	.word	0x080124d7
 8012338:	080124d7 	.word	0x080124d7
 801233c:	08012455 	.word	0x08012455
 8012340:	080124d7 	.word	0x080124d7
 8012344:	080124d7 	.word	0x080124d7
 8012348:	080124d7 	.word	0x080124d7
 801234c:	08012495 	.word	0x08012495
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	68b9      	ldr	r1, [r7, #8]
 8012356:	4618      	mov	r0, r3
 8012358:	f000 fb82 	bl	8012a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	699a      	ldr	r2, [r3, #24]
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	f042 0208 	orr.w	r2, r2, #8
 801236a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	699a      	ldr	r2, [r3, #24]
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	f022 0204 	bic.w	r2, r2, #4
 801237a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	6999      	ldr	r1, [r3, #24]
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	691a      	ldr	r2, [r3, #16]
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	430a      	orrs	r2, r1
 801238c:	619a      	str	r2, [r3, #24]
      break;
 801238e:	e0a5      	b.n	80124dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	68b9      	ldr	r1, [r7, #8]
 8012396:	4618      	mov	r0, r3
 8012398:	f000 fbf2 	bl	8012b80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	699a      	ldr	r2, [r3, #24]
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80123aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	699a      	ldr	r2, [r3, #24]
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80123ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	6999      	ldr	r1, [r3, #24]
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	691b      	ldr	r3, [r3, #16]
 80123c6:	021a      	lsls	r2, r3, #8
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	430a      	orrs	r2, r1
 80123ce:	619a      	str	r2, [r3, #24]
      break;
 80123d0:	e084      	b.n	80124dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	68b9      	ldr	r1, [r7, #8]
 80123d8:	4618      	mov	r0, r3
 80123da:	f000 fc5b 	bl	8012c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	69da      	ldr	r2, [r3, #28]
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	f042 0208 	orr.w	r2, r2, #8
 80123ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	69da      	ldr	r2, [r3, #28]
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	f022 0204 	bic.w	r2, r2, #4
 80123fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	69d9      	ldr	r1, [r3, #28]
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	691a      	ldr	r2, [r3, #16]
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	430a      	orrs	r2, r1
 801240e:	61da      	str	r2, [r3, #28]
      break;
 8012410:	e064      	b.n	80124dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	68b9      	ldr	r1, [r7, #8]
 8012418:	4618      	mov	r0, r3
 801241a:	f000 fcc3 	bl	8012da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	69da      	ldr	r2, [r3, #28]
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801242c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	69da      	ldr	r2, [r3, #28]
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801243c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	69d9      	ldr	r1, [r3, #28]
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	691b      	ldr	r3, [r3, #16]
 8012448:	021a      	lsls	r2, r3, #8
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	430a      	orrs	r2, r1
 8012450:	61da      	str	r2, [r3, #28]
      break;
 8012452:	e043      	b.n	80124dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	68b9      	ldr	r1, [r7, #8]
 801245a:	4618      	mov	r0, r3
 801245c:	f000 fd0c 	bl	8012e78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	f042 0208 	orr.w	r2, r2, #8
 801246e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	f022 0204 	bic.w	r2, r2, #4
 801247e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	691a      	ldr	r2, [r3, #16]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	430a      	orrs	r2, r1
 8012490:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012492:	e023      	b.n	80124dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	68b9      	ldr	r1, [r7, #8]
 801249a:	4618      	mov	r0, r3
 801249c:	f000 fd50 	bl	8012f40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80124ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80124be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	691b      	ldr	r3, [r3, #16]
 80124ca:	021a      	lsls	r2, r3, #8
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	430a      	orrs	r2, r1
 80124d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80124d4:	e002      	b.n	80124dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80124d6:	2301      	movs	r3, #1
 80124d8:	75fb      	strb	r3, [r7, #23]
      break;
 80124da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	2200      	movs	r2, #0
 80124e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80124e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3718      	adds	r7, #24
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop

080124f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b084      	sub	sp, #16
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80124fa:	2300      	movs	r3, #0
 80124fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012504:	2b01      	cmp	r3, #1
 8012506:	d101      	bne.n	801250c <HAL_TIM_ConfigClockSource+0x1c>
 8012508:	2302      	movs	r3, #2
 801250a:	e0dc      	b.n	80126c6 <HAL_TIM_ConfigClockSource+0x1d6>
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2201      	movs	r2, #1
 8012510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2202      	movs	r2, #2
 8012518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	689b      	ldr	r3, [r3, #8]
 8012522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012524:	68ba      	ldr	r2, [r7, #8]
 8012526:	4b6a      	ldr	r3, [pc, #424]	@ (80126d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012528:	4013      	ands	r3, r2
 801252a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	68ba      	ldr	r2, [r7, #8]
 801253a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	4a64      	ldr	r2, [pc, #400]	@ (80126d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012542:	4293      	cmp	r3, r2
 8012544:	f000 80a9 	beq.w	801269a <HAL_TIM_ConfigClockSource+0x1aa>
 8012548:	4a62      	ldr	r2, [pc, #392]	@ (80126d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801254a:	4293      	cmp	r3, r2
 801254c:	f200 80ae 	bhi.w	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 8012550:	4a61      	ldr	r2, [pc, #388]	@ (80126d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012552:	4293      	cmp	r3, r2
 8012554:	f000 80a1 	beq.w	801269a <HAL_TIM_ConfigClockSource+0x1aa>
 8012558:	4a5f      	ldr	r2, [pc, #380]	@ (80126d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801255a:	4293      	cmp	r3, r2
 801255c:	f200 80a6 	bhi.w	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 8012560:	4a5e      	ldr	r2, [pc, #376]	@ (80126dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8012562:	4293      	cmp	r3, r2
 8012564:	f000 8099 	beq.w	801269a <HAL_TIM_ConfigClockSource+0x1aa>
 8012568:	4a5c      	ldr	r2, [pc, #368]	@ (80126dc <HAL_TIM_ConfigClockSource+0x1ec>)
 801256a:	4293      	cmp	r3, r2
 801256c:	f200 809e 	bhi.w	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 8012570:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012574:	f000 8091 	beq.w	801269a <HAL_TIM_ConfigClockSource+0x1aa>
 8012578:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801257c:	f200 8096 	bhi.w	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 8012580:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012584:	f000 8089 	beq.w	801269a <HAL_TIM_ConfigClockSource+0x1aa>
 8012588:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801258c:	f200 808e 	bhi.w	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 8012590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012594:	d03e      	beq.n	8012614 <HAL_TIM_ConfigClockSource+0x124>
 8012596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801259a:	f200 8087 	bhi.w	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 801259e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80125a2:	f000 8086 	beq.w	80126b2 <HAL_TIM_ConfigClockSource+0x1c2>
 80125a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80125aa:	d87f      	bhi.n	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 80125ac:	2b70      	cmp	r3, #112	@ 0x70
 80125ae:	d01a      	beq.n	80125e6 <HAL_TIM_ConfigClockSource+0xf6>
 80125b0:	2b70      	cmp	r3, #112	@ 0x70
 80125b2:	d87b      	bhi.n	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 80125b4:	2b60      	cmp	r3, #96	@ 0x60
 80125b6:	d050      	beq.n	801265a <HAL_TIM_ConfigClockSource+0x16a>
 80125b8:	2b60      	cmp	r3, #96	@ 0x60
 80125ba:	d877      	bhi.n	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 80125bc:	2b50      	cmp	r3, #80	@ 0x50
 80125be:	d03c      	beq.n	801263a <HAL_TIM_ConfigClockSource+0x14a>
 80125c0:	2b50      	cmp	r3, #80	@ 0x50
 80125c2:	d873      	bhi.n	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 80125c4:	2b40      	cmp	r3, #64	@ 0x40
 80125c6:	d058      	beq.n	801267a <HAL_TIM_ConfigClockSource+0x18a>
 80125c8:	2b40      	cmp	r3, #64	@ 0x40
 80125ca:	d86f      	bhi.n	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 80125cc:	2b30      	cmp	r3, #48	@ 0x30
 80125ce:	d064      	beq.n	801269a <HAL_TIM_ConfigClockSource+0x1aa>
 80125d0:	2b30      	cmp	r3, #48	@ 0x30
 80125d2:	d86b      	bhi.n	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 80125d4:	2b20      	cmp	r3, #32
 80125d6:	d060      	beq.n	801269a <HAL_TIM_ConfigClockSource+0x1aa>
 80125d8:	2b20      	cmp	r3, #32
 80125da:	d867      	bhi.n	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d05c      	beq.n	801269a <HAL_TIM_ConfigClockSource+0x1aa>
 80125e0:	2b10      	cmp	r3, #16
 80125e2:	d05a      	beq.n	801269a <HAL_TIM_ConfigClockSource+0x1aa>
 80125e4:	e062      	b.n	80126ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80125f6:	f000 fd87 	bl	8013108 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	689b      	ldr	r3, [r3, #8]
 8012600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	68ba      	ldr	r2, [r7, #8]
 8012610:	609a      	str	r2, [r3, #8]
      break;
 8012612:	e04f      	b.n	80126b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012624:	f000 fd70 	bl	8013108 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	689a      	ldr	r2, [r3, #8]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012636:	609a      	str	r2, [r3, #8]
      break;
 8012638:	e03c      	b.n	80126b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012646:	461a      	mov	r2, r3
 8012648:	f000 fce0 	bl	801300c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	2150      	movs	r1, #80	@ 0x50
 8012652:	4618      	mov	r0, r3
 8012654:	f000 fd3a 	bl	80130cc <TIM_ITRx_SetConfig>
      break;
 8012658:	e02c      	b.n	80126b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012666:	461a      	mov	r2, r3
 8012668:	f000 fcff 	bl	801306a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	2160      	movs	r1, #96	@ 0x60
 8012672:	4618      	mov	r0, r3
 8012674:	f000 fd2a 	bl	80130cc <TIM_ITRx_SetConfig>
      break;
 8012678:	e01c      	b.n	80126b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012686:	461a      	mov	r2, r3
 8012688:	f000 fcc0 	bl	801300c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	2140      	movs	r1, #64	@ 0x40
 8012692:	4618      	mov	r0, r3
 8012694:	f000 fd1a 	bl	80130cc <TIM_ITRx_SetConfig>
      break;
 8012698:	e00c      	b.n	80126b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	4619      	mov	r1, r3
 80126a4:	4610      	mov	r0, r2
 80126a6:	f000 fd11 	bl	80130cc <TIM_ITRx_SetConfig>
      break;
 80126aa:	e003      	b.n	80126b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80126ac:	2301      	movs	r3, #1
 80126ae:	73fb      	strb	r3, [r7, #15]
      break;
 80126b0:	e000      	b.n	80126b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80126b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2201      	movs	r2, #1
 80126b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2200      	movs	r2, #0
 80126c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80126c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3710      	adds	r7, #16
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop
 80126d0:	ffceff88 	.word	0xffceff88
 80126d4:	00100040 	.word	0x00100040
 80126d8:	00100030 	.word	0x00100030
 80126dc:	00100020 	.word	0x00100020

080126e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80126e0:	b480      	push	{r7}
 80126e2:	b083      	sub	sp, #12
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80126e8:	bf00      	nop
 80126ea:	370c      	adds	r7, #12
 80126ec:	46bd      	mov	sp, r7
 80126ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f2:	4770      	bx	lr

080126f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80126f4:	b480      	push	{r7}
 80126f6:	b083      	sub	sp, #12
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80126fc:	bf00      	nop
 80126fe:	370c      	adds	r7, #12
 8012700:	46bd      	mov	sp, r7
 8012702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012706:	4770      	bx	lr

08012708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012708:	b480      	push	{r7}
 801270a:	b083      	sub	sp, #12
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012710:	bf00      	nop
 8012712:	370c      	adds	r7, #12
 8012714:	46bd      	mov	sp, r7
 8012716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271a:	4770      	bx	lr

0801271c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801271c:	b480      	push	{r7}
 801271e:	b083      	sub	sp, #12
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8012724:	bf00      	nop
 8012726:	370c      	adds	r7, #12
 8012728:	46bd      	mov	sp, r7
 801272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272e:	4770      	bx	lr

08012730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012730:	b480      	push	{r7}
 8012732:	b083      	sub	sp, #12
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012738:	bf00      	nop
 801273a:	370c      	adds	r7, #12
 801273c:	46bd      	mov	sp, r7
 801273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012742:	4770      	bx	lr

08012744 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8012744:	b480      	push	{r7}
 8012746:	b083      	sub	sp, #12
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 801274c:	bf00      	nop
 801274e:	370c      	adds	r7, #12
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr

08012758 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b084      	sub	sp, #16
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012764:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801276a:	687a      	ldr	r2, [r7, #4]
 801276c:	429a      	cmp	r2, r3
 801276e:	d107      	bne.n	8012780 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	2201      	movs	r2, #1
 8012774:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2201      	movs	r2, #1
 801277a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801277e:	e02a      	b.n	80127d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012784:	687a      	ldr	r2, [r7, #4]
 8012786:	429a      	cmp	r2, r3
 8012788:	d107      	bne.n	801279a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	2202      	movs	r2, #2
 801278e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	2201      	movs	r2, #1
 8012794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012798:	e01d      	b.n	80127d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801279e:	687a      	ldr	r2, [r7, #4]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d107      	bne.n	80127b4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	2204      	movs	r2, #4
 80127a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	2201      	movs	r2, #1
 80127ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80127b2:	e010      	b.n	80127d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d107      	bne.n	80127ce <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2208      	movs	r2, #8
 80127c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	2201      	movs	r2, #1
 80127c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80127cc:	e003      	b.n	80127d6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	2201      	movs	r2, #1
 80127d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80127d6:	68f8      	ldr	r0, [r7, #12]
 80127d8:	f7ff ffb4 	bl	8012744 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	2200      	movs	r2, #0
 80127e0:	771a      	strb	r2, [r3, #28]
}
 80127e2:	bf00      	nop
 80127e4:	3710      	adds	r7, #16
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}

080127ea <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80127ea:	b580      	push	{r7, lr}
 80127ec:	b084      	sub	sp, #16
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127f6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127fc:	687a      	ldr	r2, [r7, #4]
 80127fe:	429a      	cmp	r2, r3
 8012800:	d10b      	bne.n	801281a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2201      	movs	r2, #1
 8012806:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	69db      	ldr	r3, [r3, #28]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d136      	bne.n	801287e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	2201      	movs	r2, #1
 8012814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012818:	e031      	b.n	801287e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	429a      	cmp	r2, r3
 8012822:	d10b      	bne.n	801283c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	2202      	movs	r2, #2
 8012828:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	69db      	ldr	r3, [r3, #28]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d125      	bne.n	801287e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	2201      	movs	r2, #1
 8012836:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801283a:	e020      	b.n	801287e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012840:	687a      	ldr	r2, [r7, #4]
 8012842:	429a      	cmp	r2, r3
 8012844:	d10b      	bne.n	801285e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	2204      	movs	r2, #4
 801284a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	69db      	ldr	r3, [r3, #28]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d114      	bne.n	801287e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2201      	movs	r2, #1
 8012858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801285c:	e00f      	b.n	801287e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012862:	687a      	ldr	r2, [r7, #4]
 8012864:	429a      	cmp	r2, r3
 8012866:	d10a      	bne.n	801287e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	2208      	movs	r2, #8
 801286c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	69db      	ldr	r3, [r3, #28]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d103      	bne.n	801287e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	2201      	movs	r2, #1
 801287a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801287e:	68f8      	ldr	r0, [r7, #12]
 8012880:	f7ff ff42 	bl	8012708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	2200      	movs	r2, #0
 8012888:	771a      	strb	r2, [r3, #28]
}
 801288a:	bf00      	nop
 801288c:	3710      	adds	r7, #16
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}

08012892 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012892:	b580      	push	{r7, lr}
 8012894:	b084      	sub	sp, #16
 8012896:	af00      	add	r7, sp, #0
 8012898:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801289e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128a4:	687a      	ldr	r2, [r7, #4]
 80128a6:	429a      	cmp	r2, r3
 80128a8:	d103      	bne.n	80128b2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	2201      	movs	r2, #1
 80128ae:	771a      	strb	r2, [r3, #28]
 80128b0:	e019      	b.n	80128e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128b6:	687a      	ldr	r2, [r7, #4]
 80128b8:	429a      	cmp	r2, r3
 80128ba:	d103      	bne.n	80128c4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	2202      	movs	r2, #2
 80128c0:	771a      	strb	r2, [r3, #28]
 80128c2:	e010      	b.n	80128e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128c8:	687a      	ldr	r2, [r7, #4]
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d103      	bne.n	80128d6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2204      	movs	r2, #4
 80128d2:	771a      	strb	r2, [r3, #28]
 80128d4:	e007      	b.n	80128e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	429a      	cmp	r2, r3
 80128de:	d102      	bne.n	80128e6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	2208      	movs	r2, #8
 80128e4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80128e6:	68f8      	ldr	r0, [r7, #12]
 80128e8:	f7ff ff18 	bl	801271c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	2200      	movs	r2, #0
 80128f0:	771a      	strb	r2, [r3, #28]
}
 80128f2:	bf00      	nop
 80128f4:	3710      	adds	r7, #16
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}
	...

080128fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80128fc:	b480      	push	{r7}
 80128fe:	b085      	sub	sp, #20
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	4a4a      	ldr	r2, [pc, #296]	@ (8012a38 <TIM_Base_SetConfig+0x13c>)
 8012910:	4293      	cmp	r3, r2
 8012912:	d013      	beq.n	801293c <TIM_Base_SetConfig+0x40>
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801291a:	d00f      	beq.n	801293c <TIM_Base_SetConfig+0x40>
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	4a47      	ldr	r2, [pc, #284]	@ (8012a3c <TIM_Base_SetConfig+0x140>)
 8012920:	4293      	cmp	r3, r2
 8012922:	d00b      	beq.n	801293c <TIM_Base_SetConfig+0x40>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	4a46      	ldr	r2, [pc, #280]	@ (8012a40 <TIM_Base_SetConfig+0x144>)
 8012928:	4293      	cmp	r3, r2
 801292a:	d007      	beq.n	801293c <TIM_Base_SetConfig+0x40>
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	4a45      	ldr	r2, [pc, #276]	@ (8012a44 <TIM_Base_SetConfig+0x148>)
 8012930:	4293      	cmp	r3, r2
 8012932:	d003      	beq.n	801293c <TIM_Base_SetConfig+0x40>
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	4a44      	ldr	r2, [pc, #272]	@ (8012a48 <TIM_Base_SetConfig+0x14c>)
 8012938:	4293      	cmp	r3, r2
 801293a:	d108      	bne.n	801294e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	685b      	ldr	r3, [r3, #4]
 8012948:	68fa      	ldr	r2, [r7, #12]
 801294a:	4313      	orrs	r3, r2
 801294c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	4a39      	ldr	r2, [pc, #228]	@ (8012a38 <TIM_Base_SetConfig+0x13c>)
 8012952:	4293      	cmp	r3, r2
 8012954:	d027      	beq.n	80129a6 <TIM_Base_SetConfig+0xaa>
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801295c:	d023      	beq.n	80129a6 <TIM_Base_SetConfig+0xaa>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	4a36      	ldr	r2, [pc, #216]	@ (8012a3c <TIM_Base_SetConfig+0x140>)
 8012962:	4293      	cmp	r3, r2
 8012964:	d01f      	beq.n	80129a6 <TIM_Base_SetConfig+0xaa>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	4a35      	ldr	r2, [pc, #212]	@ (8012a40 <TIM_Base_SetConfig+0x144>)
 801296a:	4293      	cmp	r3, r2
 801296c:	d01b      	beq.n	80129a6 <TIM_Base_SetConfig+0xaa>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	4a34      	ldr	r2, [pc, #208]	@ (8012a44 <TIM_Base_SetConfig+0x148>)
 8012972:	4293      	cmp	r3, r2
 8012974:	d017      	beq.n	80129a6 <TIM_Base_SetConfig+0xaa>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	4a33      	ldr	r2, [pc, #204]	@ (8012a48 <TIM_Base_SetConfig+0x14c>)
 801297a:	4293      	cmp	r3, r2
 801297c:	d013      	beq.n	80129a6 <TIM_Base_SetConfig+0xaa>
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	4a32      	ldr	r2, [pc, #200]	@ (8012a4c <TIM_Base_SetConfig+0x150>)
 8012982:	4293      	cmp	r3, r2
 8012984:	d00f      	beq.n	80129a6 <TIM_Base_SetConfig+0xaa>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	4a31      	ldr	r2, [pc, #196]	@ (8012a50 <TIM_Base_SetConfig+0x154>)
 801298a:	4293      	cmp	r3, r2
 801298c:	d00b      	beq.n	80129a6 <TIM_Base_SetConfig+0xaa>
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	4a30      	ldr	r2, [pc, #192]	@ (8012a54 <TIM_Base_SetConfig+0x158>)
 8012992:	4293      	cmp	r3, r2
 8012994:	d007      	beq.n	80129a6 <TIM_Base_SetConfig+0xaa>
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	4a2f      	ldr	r2, [pc, #188]	@ (8012a58 <TIM_Base_SetConfig+0x15c>)
 801299a:	4293      	cmp	r3, r2
 801299c:	d003      	beq.n	80129a6 <TIM_Base_SetConfig+0xaa>
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	4a2e      	ldr	r2, [pc, #184]	@ (8012a5c <TIM_Base_SetConfig+0x160>)
 80129a2:	4293      	cmp	r3, r2
 80129a4:	d108      	bne.n	80129b8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80129ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	68db      	ldr	r3, [r3, #12]
 80129b2:	68fa      	ldr	r2, [r7, #12]
 80129b4:	4313      	orrs	r3, r2
 80129b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	695b      	ldr	r3, [r3, #20]
 80129c2:	4313      	orrs	r3, r2
 80129c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	68fa      	ldr	r2, [r7, #12]
 80129ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	689a      	ldr	r2, [r3, #8]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	681a      	ldr	r2, [r3, #0]
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	4a16      	ldr	r2, [pc, #88]	@ (8012a38 <TIM_Base_SetConfig+0x13c>)
 80129e0:	4293      	cmp	r3, r2
 80129e2:	d00f      	beq.n	8012a04 <TIM_Base_SetConfig+0x108>
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	4a18      	ldr	r2, [pc, #96]	@ (8012a48 <TIM_Base_SetConfig+0x14c>)
 80129e8:	4293      	cmp	r3, r2
 80129ea:	d00b      	beq.n	8012a04 <TIM_Base_SetConfig+0x108>
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	4a17      	ldr	r2, [pc, #92]	@ (8012a4c <TIM_Base_SetConfig+0x150>)
 80129f0:	4293      	cmp	r3, r2
 80129f2:	d007      	beq.n	8012a04 <TIM_Base_SetConfig+0x108>
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	4a16      	ldr	r2, [pc, #88]	@ (8012a50 <TIM_Base_SetConfig+0x154>)
 80129f8:	4293      	cmp	r3, r2
 80129fa:	d003      	beq.n	8012a04 <TIM_Base_SetConfig+0x108>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	4a15      	ldr	r2, [pc, #84]	@ (8012a54 <TIM_Base_SetConfig+0x158>)
 8012a00:	4293      	cmp	r3, r2
 8012a02:	d103      	bne.n	8012a0c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	691a      	ldr	r2, [r3, #16]
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2201      	movs	r2, #1
 8012a10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	691b      	ldr	r3, [r3, #16]
 8012a16:	f003 0301 	and.w	r3, r3, #1
 8012a1a:	2b01      	cmp	r3, #1
 8012a1c:	d105      	bne.n	8012a2a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	691b      	ldr	r3, [r3, #16]
 8012a22:	f023 0201 	bic.w	r2, r3, #1
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	611a      	str	r2, [r3, #16]
  }
}
 8012a2a:	bf00      	nop
 8012a2c:	3714      	adds	r7, #20
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a34:	4770      	bx	lr
 8012a36:	bf00      	nop
 8012a38:	40010000 	.word	0x40010000
 8012a3c:	40000400 	.word	0x40000400
 8012a40:	40000800 	.word	0x40000800
 8012a44:	40000c00 	.word	0x40000c00
 8012a48:	40010400 	.word	0x40010400
 8012a4c:	40014000 	.word	0x40014000
 8012a50:	40014400 	.word	0x40014400
 8012a54:	40014800 	.word	0x40014800
 8012a58:	4000e000 	.word	0x4000e000
 8012a5c:	4000e400 	.word	0x4000e400

08012a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012a60:	b480      	push	{r7}
 8012a62:	b087      	sub	sp, #28
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
 8012a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6a1b      	ldr	r3, [r3, #32]
 8012a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6a1b      	ldr	r3, [r3, #32]
 8012a74:	f023 0201 	bic.w	r2, r3, #1
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	699b      	ldr	r3, [r3, #24]
 8012a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012a88:	68fa      	ldr	r2, [r7, #12]
 8012a8a:	4b37      	ldr	r3, [pc, #220]	@ (8012b68 <TIM_OC1_SetConfig+0x108>)
 8012a8c:	4013      	ands	r3, r2
 8012a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	f023 0303 	bic.w	r3, r3, #3
 8012a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	68fa      	ldr	r2, [r7, #12]
 8012a9e:	4313      	orrs	r3, r2
 8012aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	f023 0302 	bic.w	r3, r3, #2
 8012aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	689b      	ldr	r3, [r3, #8]
 8012aae:	697a      	ldr	r2, [r7, #20]
 8012ab0:	4313      	orrs	r3, r2
 8012ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8012b6c <TIM_OC1_SetConfig+0x10c>)
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d00f      	beq.n	8012adc <TIM_OC1_SetConfig+0x7c>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	4a2c      	ldr	r2, [pc, #176]	@ (8012b70 <TIM_OC1_SetConfig+0x110>)
 8012ac0:	4293      	cmp	r3, r2
 8012ac2:	d00b      	beq.n	8012adc <TIM_OC1_SetConfig+0x7c>
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	4a2b      	ldr	r2, [pc, #172]	@ (8012b74 <TIM_OC1_SetConfig+0x114>)
 8012ac8:	4293      	cmp	r3, r2
 8012aca:	d007      	beq.n	8012adc <TIM_OC1_SetConfig+0x7c>
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	4a2a      	ldr	r2, [pc, #168]	@ (8012b78 <TIM_OC1_SetConfig+0x118>)
 8012ad0:	4293      	cmp	r3, r2
 8012ad2:	d003      	beq.n	8012adc <TIM_OC1_SetConfig+0x7c>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	4a29      	ldr	r2, [pc, #164]	@ (8012b7c <TIM_OC1_SetConfig+0x11c>)
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	d10c      	bne.n	8012af6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	f023 0308 	bic.w	r3, r3, #8
 8012ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	68db      	ldr	r3, [r3, #12]
 8012ae8:	697a      	ldr	r2, [r7, #20]
 8012aea:	4313      	orrs	r3, r2
 8012aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012aee:	697b      	ldr	r3, [r7, #20]
 8012af0:	f023 0304 	bic.w	r3, r3, #4
 8012af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	4a1c      	ldr	r2, [pc, #112]	@ (8012b6c <TIM_OC1_SetConfig+0x10c>)
 8012afa:	4293      	cmp	r3, r2
 8012afc:	d00f      	beq.n	8012b1e <TIM_OC1_SetConfig+0xbe>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	4a1b      	ldr	r2, [pc, #108]	@ (8012b70 <TIM_OC1_SetConfig+0x110>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d00b      	beq.n	8012b1e <TIM_OC1_SetConfig+0xbe>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	4a1a      	ldr	r2, [pc, #104]	@ (8012b74 <TIM_OC1_SetConfig+0x114>)
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d007      	beq.n	8012b1e <TIM_OC1_SetConfig+0xbe>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	4a19      	ldr	r2, [pc, #100]	@ (8012b78 <TIM_OC1_SetConfig+0x118>)
 8012b12:	4293      	cmp	r3, r2
 8012b14:	d003      	beq.n	8012b1e <TIM_OC1_SetConfig+0xbe>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	4a18      	ldr	r2, [pc, #96]	@ (8012b7c <TIM_OC1_SetConfig+0x11c>)
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d111      	bne.n	8012b42 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	695b      	ldr	r3, [r3, #20]
 8012b32:	693a      	ldr	r2, [r7, #16]
 8012b34:	4313      	orrs	r3, r2
 8012b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	699b      	ldr	r3, [r3, #24]
 8012b3c:	693a      	ldr	r2, [r7, #16]
 8012b3e:	4313      	orrs	r3, r2
 8012b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	693a      	ldr	r2, [r7, #16]
 8012b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	68fa      	ldr	r2, [r7, #12]
 8012b4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	685a      	ldr	r2, [r3, #4]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	697a      	ldr	r2, [r7, #20]
 8012b5a:	621a      	str	r2, [r3, #32]
}
 8012b5c:	bf00      	nop
 8012b5e:	371c      	adds	r7, #28
 8012b60:	46bd      	mov	sp, r7
 8012b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b66:	4770      	bx	lr
 8012b68:	fffeff8f 	.word	0xfffeff8f
 8012b6c:	40010000 	.word	0x40010000
 8012b70:	40010400 	.word	0x40010400
 8012b74:	40014000 	.word	0x40014000
 8012b78:	40014400 	.word	0x40014400
 8012b7c:	40014800 	.word	0x40014800

08012b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012b80:	b480      	push	{r7}
 8012b82:	b087      	sub	sp, #28
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	6a1b      	ldr	r3, [r3, #32]
 8012b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6a1b      	ldr	r3, [r3, #32]
 8012b94:	f023 0210 	bic.w	r2, r3, #16
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	685b      	ldr	r3, [r3, #4]
 8012ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	699b      	ldr	r3, [r3, #24]
 8012ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	4b34      	ldr	r3, [pc, #208]	@ (8012c7c <TIM_OC2_SetConfig+0xfc>)
 8012bac:	4013      	ands	r3, r2
 8012bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	021b      	lsls	r3, r3, #8
 8012bbe:	68fa      	ldr	r2, [r7, #12]
 8012bc0:	4313      	orrs	r3, r2
 8012bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	f023 0320 	bic.w	r3, r3, #32
 8012bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	689b      	ldr	r3, [r3, #8]
 8012bd0:	011b      	lsls	r3, r3, #4
 8012bd2:	697a      	ldr	r2, [r7, #20]
 8012bd4:	4313      	orrs	r3, r2
 8012bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	4a29      	ldr	r2, [pc, #164]	@ (8012c80 <TIM_OC2_SetConfig+0x100>)
 8012bdc:	4293      	cmp	r3, r2
 8012bde:	d003      	beq.n	8012be8 <TIM_OC2_SetConfig+0x68>
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	4a28      	ldr	r2, [pc, #160]	@ (8012c84 <TIM_OC2_SetConfig+0x104>)
 8012be4:	4293      	cmp	r3, r2
 8012be6:	d10d      	bne.n	8012c04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	68db      	ldr	r3, [r3, #12]
 8012bf4:	011b      	lsls	r3, r3, #4
 8012bf6:	697a      	ldr	r2, [r7, #20]
 8012bf8:	4313      	orrs	r3, r2
 8012bfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012c02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	4a1e      	ldr	r2, [pc, #120]	@ (8012c80 <TIM_OC2_SetConfig+0x100>)
 8012c08:	4293      	cmp	r3, r2
 8012c0a:	d00f      	beq.n	8012c2c <TIM_OC2_SetConfig+0xac>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8012c84 <TIM_OC2_SetConfig+0x104>)
 8012c10:	4293      	cmp	r3, r2
 8012c12:	d00b      	beq.n	8012c2c <TIM_OC2_SetConfig+0xac>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	4a1c      	ldr	r2, [pc, #112]	@ (8012c88 <TIM_OC2_SetConfig+0x108>)
 8012c18:	4293      	cmp	r3, r2
 8012c1a:	d007      	beq.n	8012c2c <TIM_OC2_SetConfig+0xac>
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8012c8c <TIM_OC2_SetConfig+0x10c>)
 8012c20:	4293      	cmp	r3, r2
 8012c22:	d003      	beq.n	8012c2c <TIM_OC2_SetConfig+0xac>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	4a1a      	ldr	r2, [pc, #104]	@ (8012c90 <TIM_OC2_SetConfig+0x110>)
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	d113      	bne.n	8012c54 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	695b      	ldr	r3, [r3, #20]
 8012c40:	009b      	lsls	r3, r3, #2
 8012c42:	693a      	ldr	r2, [r7, #16]
 8012c44:	4313      	orrs	r3, r2
 8012c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	699b      	ldr	r3, [r3, #24]
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	693a      	ldr	r2, [r7, #16]
 8012c50:	4313      	orrs	r3, r2
 8012c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	693a      	ldr	r2, [r7, #16]
 8012c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	68fa      	ldr	r2, [r7, #12]
 8012c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	685a      	ldr	r2, [r3, #4]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	697a      	ldr	r2, [r7, #20]
 8012c6c:	621a      	str	r2, [r3, #32]
}
 8012c6e:	bf00      	nop
 8012c70:	371c      	adds	r7, #28
 8012c72:	46bd      	mov	sp, r7
 8012c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c78:	4770      	bx	lr
 8012c7a:	bf00      	nop
 8012c7c:	feff8fff 	.word	0xfeff8fff
 8012c80:	40010000 	.word	0x40010000
 8012c84:	40010400 	.word	0x40010400
 8012c88:	40014000 	.word	0x40014000
 8012c8c:	40014400 	.word	0x40014400
 8012c90:	40014800 	.word	0x40014800

08012c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012c94:	b480      	push	{r7}
 8012c96:	b087      	sub	sp, #28
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	6a1b      	ldr	r3, [r3, #32]
 8012ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6a1b      	ldr	r3, [r3, #32]
 8012ca8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	69db      	ldr	r3, [r3, #28]
 8012cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012cbc:	68fa      	ldr	r2, [r7, #12]
 8012cbe:	4b33      	ldr	r3, [pc, #204]	@ (8012d8c <TIM_OC3_SetConfig+0xf8>)
 8012cc0:	4013      	ands	r3, r2
 8012cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	f023 0303 	bic.w	r3, r3, #3
 8012cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	68fa      	ldr	r2, [r7, #12]
 8012cd2:	4313      	orrs	r3, r2
 8012cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	689b      	ldr	r3, [r3, #8]
 8012ce2:	021b      	lsls	r3, r3, #8
 8012ce4:	697a      	ldr	r2, [r7, #20]
 8012ce6:	4313      	orrs	r3, r2
 8012ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	4a28      	ldr	r2, [pc, #160]	@ (8012d90 <TIM_OC3_SetConfig+0xfc>)
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	d003      	beq.n	8012cfa <TIM_OC3_SetConfig+0x66>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4a27      	ldr	r2, [pc, #156]	@ (8012d94 <TIM_OC3_SetConfig+0x100>)
 8012cf6:	4293      	cmp	r3, r2
 8012cf8:	d10d      	bne.n	8012d16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012d00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	68db      	ldr	r3, [r3, #12]
 8012d06:	021b      	lsls	r3, r3, #8
 8012d08:	697a      	ldr	r2, [r7, #20]
 8012d0a:	4313      	orrs	r3, r2
 8012d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	4a1d      	ldr	r2, [pc, #116]	@ (8012d90 <TIM_OC3_SetConfig+0xfc>)
 8012d1a:	4293      	cmp	r3, r2
 8012d1c:	d00f      	beq.n	8012d3e <TIM_OC3_SetConfig+0xaa>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	4a1c      	ldr	r2, [pc, #112]	@ (8012d94 <TIM_OC3_SetConfig+0x100>)
 8012d22:	4293      	cmp	r3, r2
 8012d24:	d00b      	beq.n	8012d3e <TIM_OC3_SetConfig+0xaa>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	4a1b      	ldr	r2, [pc, #108]	@ (8012d98 <TIM_OC3_SetConfig+0x104>)
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	d007      	beq.n	8012d3e <TIM_OC3_SetConfig+0xaa>
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	4a1a      	ldr	r2, [pc, #104]	@ (8012d9c <TIM_OC3_SetConfig+0x108>)
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d003      	beq.n	8012d3e <TIM_OC3_SetConfig+0xaa>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	4a19      	ldr	r2, [pc, #100]	@ (8012da0 <TIM_OC3_SetConfig+0x10c>)
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	d113      	bne.n	8012d66 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012d46:	693b      	ldr	r3, [r7, #16]
 8012d48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	695b      	ldr	r3, [r3, #20]
 8012d52:	011b      	lsls	r3, r3, #4
 8012d54:	693a      	ldr	r2, [r7, #16]
 8012d56:	4313      	orrs	r3, r2
 8012d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	699b      	ldr	r3, [r3, #24]
 8012d5e:	011b      	lsls	r3, r3, #4
 8012d60:	693a      	ldr	r2, [r7, #16]
 8012d62:	4313      	orrs	r3, r2
 8012d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	693a      	ldr	r2, [r7, #16]
 8012d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	68fa      	ldr	r2, [r7, #12]
 8012d70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	685a      	ldr	r2, [r3, #4]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	697a      	ldr	r2, [r7, #20]
 8012d7e:	621a      	str	r2, [r3, #32]
}
 8012d80:	bf00      	nop
 8012d82:	371c      	adds	r7, #28
 8012d84:	46bd      	mov	sp, r7
 8012d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8a:	4770      	bx	lr
 8012d8c:	fffeff8f 	.word	0xfffeff8f
 8012d90:	40010000 	.word	0x40010000
 8012d94:	40010400 	.word	0x40010400
 8012d98:	40014000 	.word	0x40014000
 8012d9c:	40014400 	.word	0x40014400
 8012da0:	40014800 	.word	0x40014800

08012da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b087      	sub	sp, #28
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	6a1b      	ldr	r3, [r3, #32]
 8012db2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	6a1b      	ldr	r3, [r3, #32]
 8012db8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	685b      	ldr	r3, [r3, #4]
 8012dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	69db      	ldr	r3, [r3, #28]
 8012dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012dcc:	68fa      	ldr	r2, [r7, #12]
 8012dce:	4b24      	ldr	r3, [pc, #144]	@ (8012e60 <TIM_OC4_SetConfig+0xbc>)
 8012dd0:	4013      	ands	r3, r2
 8012dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	021b      	lsls	r3, r3, #8
 8012de2:	68fa      	ldr	r2, [r7, #12]
 8012de4:	4313      	orrs	r3, r2
 8012de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	689b      	ldr	r3, [r3, #8]
 8012df4:	031b      	lsls	r3, r3, #12
 8012df6:	693a      	ldr	r2, [r7, #16]
 8012df8:	4313      	orrs	r3, r2
 8012dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	4a19      	ldr	r2, [pc, #100]	@ (8012e64 <TIM_OC4_SetConfig+0xc0>)
 8012e00:	4293      	cmp	r3, r2
 8012e02:	d00f      	beq.n	8012e24 <TIM_OC4_SetConfig+0x80>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	4a18      	ldr	r2, [pc, #96]	@ (8012e68 <TIM_OC4_SetConfig+0xc4>)
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	d00b      	beq.n	8012e24 <TIM_OC4_SetConfig+0x80>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	4a17      	ldr	r2, [pc, #92]	@ (8012e6c <TIM_OC4_SetConfig+0xc8>)
 8012e10:	4293      	cmp	r3, r2
 8012e12:	d007      	beq.n	8012e24 <TIM_OC4_SetConfig+0x80>
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	4a16      	ldr	r2, [pc, #88]	@ (8012e70 <TIM_OC4_SetConfig+0xcc>)
 8012e18:	4293      	cmp	r3, r2
 8012e1a:	d003      	beq.n	8012e24 <TIM_OC4_SetConfig+0x80>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	4a15      	ldr	r2, [pc, #84]	@ (8012e74 <TIM_OC4_SetConfig+0xd0>)
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d109      	bne.n	8012e38 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	695b      	ldr	r3, [r3, #20]
 8012e30:	019b      	lsls	r3, r3, #6
 8012e32:	697a      	ldr	r2, [r7, #20]
 8012e34:	4313      	orrs	r3, r2
 8012e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	697a      	ldr	r2, [r7, #20]
 8012e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	68fa      	ldr	r2, [r7, #12]
 8012e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	685a      	ldr	r2, [r3, #4]
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	693a      	ldr	r2, [r7, #16]
 8012e50:	621a      	str	r2, [r3, #32]
}
 8012e52:	bf00      	nop
 8012e54:	371c      	adds	r7, #28
 8012e56:	46bd      	mov	sp, r7
 8012e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5c:	4770      	bx	lr
 8012e5e:	bf00      	nop
 8012e60:	feff8fff 	.word	0xfeff8fff
 8012e64:	40010000 	.word	0x40010000
 8012e68:	40010400 	.word	0x40010400
 8012e6c:	40014000 	.word	0x40014000
 8012e70:	40014400 	.word	0x40014400
 8012e74:	40014800 	.word	0x40014800

08012e78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b087      	sub	sp, #28
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
 8012e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6a1b      	ldr	r3, [r3, #32]
 8012e86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	6a1b      	ldr	r3, [r3, #32]
 8012e8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012ea0:	68fa      	ldr	r2, [r7, #12]
 8012ea2:	4b21      	ldr	r3, [pc, #132]	@ (8012f28 <TIM_OC5_SetConfig+0xb0>)
 8012ea4:	4013      	ands	r3, r2
 8012ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	68fa      	ldr	r2, [r7, #12]
 8012eae:	4313      	orrs	r3, r2
 8012eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8012eb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	689b      	ldr	r3, [r3, #8]
 8012ebe:	041b      	lsls	r3, r3, #16
 8012ec0:	693a      	ldr	r2, [r7, #16]
 8012ec2:	4313      	orrs	r3, r2
 8012ec4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4a18      	ldr	r2, [pc, #96]	@ (8012f2c <TIM_OC5_SetConfig+0xb4>)
 8012eca:	4293      	cmp	r3, r2
 8012ecc:	d00f      	beq.n	8012eee <TIM_OC5_SetConfig+0x76>
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	4a17      	ldr	r2, [pc, #92]	@ (8012f30 <TIM_OC5_SetConfig+0xb8>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d00b      	beq.n	8012eee <TIM_OC5_SetConfig+0x76>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	4a16      	ldr	r2, [pc, #88]	@ (8012f34 <TIM_OC5_SetConfig+0xbc>)
 8012eda:	4293      	cmp	r3, r2
 8012edc:	d007      	beq.n	8012eee <TIM_OC5_SetConfig+0x76>
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	4a15      	ldr	r2, [pc, #84]	@ (8012f38 <TIM_OC5_SetConfig+0xc0>)
 8012ee2:	4293      	cmp	r3, r2
 8012ee4:	d003      	beq.n	8012eee <TIM_OC5_SetConfig+0x76>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	4a14      	ldr	r2, [pc, #80]	@ (8012f3c <TIM_OC5_SetConfig+0xc4>)
 8012eea:	4293      	cmp	r3, r2
 8012eec:	d109      	bne.n	8012f02 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	695b      	ldr	r3, [r3, #20]
 8012efa:	021b      	lsls	r3, r3, #8
 8012efc:	697a      	ldr	r2, [r7, #20]
 8012efe:	4313      	orrs	r3, r2
 8012f00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	697a      	ldr	r2, [r7, #20]
 8012f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	68fa      	ldr	r2, [r7, #12]
 8012f0c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	685a      	ldr	r2, [r3, #4]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	693a      	ldr	r2, [r7, #16]
 8012f1a:	621a      	str	r2, [r3, #32]
}
 8012f1c:	bf00      	nop
 8012f1e:	371c      	adds	r7, #28
 8012f20:	46bd      	mov	sp, r7
 8012f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f26:	4770      	bx	lr
 8012f28:	fffeff8f 	.word	0xfffeff8f
 8012f2c:	40010000 	.word	0x40010000
 8012f30:	40010400 	.word	0x40010400
 8012f34:	40014000 	.word	0x40014000
 8012f38:	40014400 	.word	0x40014400
 8012f3c:	40014800 	.word	0x40014800

08012f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012f40:	b480      	push	{r7}
 8012f42:	b087      	sub	sp, #28
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
 8012f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6a1b      	ldr	r3, [r3, #32]
 8012f4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6a1b      	ldr	r3, [r3, #32]
 8012f54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012f68:	68fa      	ldr	r2, [r7, #12]
 8012f6a:	4b22      	ldr	r3, [pc, #136]	@ (8012ff4 <TIM_OC6_SetConfig+0xb4>)
 8012f6c:	4013      	ands	r3, r2
 8012f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012f70:	683b      	ldr	r3, [r7, #0]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	021b      	lsls	r3, r3, #8
 8012f76:	68fa      	ldr	r2, [r7, #12]
 8012f78:	4313      	orrs	r3, r2
 8012f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	689b      	ldr	r3, [r3, #8]
 8012f88:	051b      	lsls	r3, r3, #20
 8012f8a:	693a      	ldr	r2, [r7, #16]
 8012f8c:	4313      	orrs	r3, r2
 8012f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	4a19      	ldr	r2, [pc, #100]	@ (8012ff8 <TIM_OC6_SetConfig+0xb8>)
 8012f94:	4293      	cmp	r3, r2
 8012f96:	d00f      	beq.n	8012fb8 <TIM_OC6_SetConfig+0x78>
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	4a18      	ldr	r2, [pc, #96]	@ (8012ffc <TIM_OC6_SetConfig+0xbc>)
 8012f9c:	4293      	cmp	r3, r2
 8012f9e:	d00b      	beq.n	8012fb8 <TIM_OC6_SetConfig+0x78>
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	4a17      	ldr	r2, [pc, #92]	@ (8013000 <TIM_OC6_SetConfig+0xc0>)
 8012fa4:	4293      	cmp	r3, r2
 8012fa6:	d007      	beq.n	8012fb8 <TIM_OC6_SetConfig+0x78>
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	4a16      	ldr	r2, [pc, #88]	@ (8013004 <TIM_OC6_SetConfig+0xc4>)
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d003      	beq.n	8012fb8 <TIM_OC6_SetConfig+0x78>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	4a15      	ldr	r2, [pc, #84]	@ (8013008 <TIM_OC6_SetConfig+0xc8>)
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d109      	bne.n	8012fcc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	695b      	ldr	r3, [r3, #20]
 8012fc4:	029b      	lsls	r3, r3, #10
 8012fc6:	697a      	ldr	r2, [r7, #20]
 8012fc8:	4313      	orrs	r3, r2
 8012fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	697a      	ldr	r2, [r7, #20]
 8012fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	68fa      	ldr	r2, [r7, #12]
 8012fd6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	685a      	ldr	r2, [r3, #4]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	693a      	ldr	r2, [r7, #16]
 8012fe4:	621a      	str	r2, [r3, #32]
}
 8012fe6:	bf00      	nop
 8012fe8:	371c      	adds	r7, #28
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr
 8012ff2:	bf00      	nop
 8012ff4:	feff8fff 	.word	0xfeff8fff
 8012ff8:	40010000 	.word	0x40010000
 8012ffc:	40010400 	.word	0x40010400
 8013000:	40014000 	.word	0x40014000
 8013004:	40014400 	.word	0x40014400
 8013008:	40014800 	.word	0x40014800

0801300c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801300c:	b480      	push	{r7}
 801300e:	b087      	sub	sp, #28
 8013010:	af00      	add	r7, sp, #0
 8013012:	60f8      	str	r0, [r7, #12]
 8013014:	60b9      	str	r1, [r7, #8]
 8013016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	6a1b      	ldr	r3, [r3, #32]
 801301c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	6a1b      	ldr	r3, [r3, #32]
 8013022:	f023 0201 	bic.w	r2, r3, #1
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	699b      	ldr	r3, [r3, #24]
 801302e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	011b      	lsls	r3, r3, #4
 801303c:	693a      	ldr	r2, [r7, #16]
 801303e:	4313      	orrs	r3, r2
 8013040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	f023 030a 	bic.w	r3, r3, #10
 8013048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801304a:	697a      	ldr	r2, [r7, #20]
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	4313      	orrs	r3, r2
 8013050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	693a      	ldr	r2, [r7, #16]
 8013056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	697a      	ldr	r2, [r7, #20]
 801305c:	621a      	str	r2, [r3, #32]
}
 801305e:	bf00      	nop
 8013060:	371c      	adds	r7, #28
 8013062:	46bd      	mov	sp, r7
 8013064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013068:	4770      	bx	lr

0801306a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801306a:	b480      	push	{r7}
 801306c:	b087      	sub	sp, #28
 801306e:	af00      	add	r7, sp, #0
 8013070:	60f8      	str	r0, [r7, #12]
 8013072:	60b9      	str	r1, [r7, #8]
 8013074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	6a1b      	ldr	r3, [r3, #32]
 801307a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	6a1b      	ldr	r3, [r3, #32]
 8013080:	f023 0210 	bic.w	r2, r3, #16
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	699b      	ldr	r3, [r3, #24]
 801308c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	031b      	lsls	r3, r3, #12
 801309a:	693a      	ldr	r2, [r7, #16]
 801309c:	4313      	orrs	r3, r2
 801309e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80130a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	011b      	lsls	r3, r3, #4
 80130ac:	697a      	ldr	r2, [r7, #20]
 80130ae:	4313      	orrs	r3, r2
 80130b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	693a      	ldr	r2, [r7, #16]
 80130b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	697a      	ldr	r2, [r7, #20]
 80130bc:	621a      	str	r2, [r3, #32]
}
 80130be:	bf00      	nop
 80130c0:	371c      	adds	r7, #28
 80130c2:	46bd      	mov	sp, r7
 80130c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c8:	4770      	bx	lr
	...

080130cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80130cc:	b480      	push	{r7}
 80130ce:	b085      	sub	sp, #20
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	689b      	ldr	r3, [r3, #8]
 80130da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80130dc:	68fa      	ldr	r2, [r7, #12]
 80130de:	4b09      	ldr	r3, [pc, #36]	@ (8013104 <TIM_ITRx_SetConfig+0x38>)
 80130e0:	4013      	ands	r3, r2
 80130e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80130e4:	683a      	ldr	r2, [r7, #0]
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	4313      	orrs	r3, r2
 80130ea:	f043 0307 	orr.w	r3, r3, #7
 80130ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	68fa      	ldr	r2, [r7, #12]
 80130f4:	609a      	str	r2, [r3, #8]
}
 80130f6:	bf00      	nop
 80130f8:	3714      	adds	r7, #20
 80130fa:	46bd      	mov	sp, r7
 80130fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013100:	4770      	bx	lr
 8013102:	bf00      	nop
 8013104:	ffcfff8f 	.word	0xffcfff8f

08013108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013108:	b480      	push	{r7}
 801310a:	b087      	sub	sp, #28
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	607a      	str	r2, [r7, #4]
 8013114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	689b      	ldr	r3, [r3, #8]
 801311a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	021a      	lsls	r2, r3, #8
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	431a      	orrs	r2, r3
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	4313      	orrs	r3, r2
 8013130:	697a      	ldr	r2, [r7, #20]
 8013132:	4313      	orrs	r3, r2
 8013134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	697a      	ldr	r2, [r7, #20]
 801313a:	609a      	str	r2, [r3, #8]
}
 801313c:	bf00      	nop
 801313e:	371c      	adds	r7, #28
 8013140:	46bd      	mov	sp, r7
 8013142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013146:	4770      	bx	lr

08013148 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013148:	b480      	push	{r7}
 801314a:	b087      	sub	sp, #28
 801314c:	af00      	add	r7, sp, #0
 801314e:	60f8      	str	r0, [r7, #12]
 8013150:	60b9      	str	r1, [r7, #8]
 8013152:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	f003 031f 	and.w	r3, r3, #31
 801315a:	2201      	movs	r2, #1
 801315c:	fa02 f303 	lsl.w	r3, r2, r3
 8013160:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	6a1a      	ldr	r2, [r3, #32]
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	43db      	mvns	r3, r3
 801316a:	401a      	ands	r2, r3
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	6a1a      	ldr	r2, [r3, #32]
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	f003 031f 	and.w	r3, r3, #31
 801317a:	6879      	ldr	r1, [r7, #4]
 801317c:	fa01 f303 	lsl.w	r3, r1, r3
 8013180:	431a      	orrs	r2, r3
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	621a      	str	r2, [r3, #32]
}
 8013186:	bf00      	nop
 8013188:	371c      	adds	r7, #28
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr
	...

08013194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013194:	b480      	push	{r7}
 8013196:	b085      	sub	sp, #20
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80131a4:	2b01      	cmp	r3, #1
 80131a6:	d101      	bne.n	80131ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80131a8:	2302      	movs	r3, #2
 80131aa:	e077      	b.n	801329c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2201      	movs	r2, #1
 80131b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2202      	movs	r2, #2
 80131b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	689b      	ldr	r3, [r3, #8]
 80131ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	4a35      	ldr	r2, [pc, #212]	@ (80132a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80131d2:	4293      	cmp	r3, r2
 80131d4:	d004      	beq.n	80131e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	4a34      	ldr	r2, [pc, #208]	@ (80132ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80131dc:	4293      	cmp	r3, r2
 80131de:	d108      	bne.n	80131f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80131e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	68fa      	ldr	r2, [r7, #12]
 80131ee:	4313      	orrs	r3, r2
 80131f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80131f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	68fa      	ldr	r2, [r7, #12]
 8013200:	4313      	orrs	r3, r2
 8013202:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	68fa      	ldr	r2, [r7, #12]
 801320a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	4a25      	ldr	r2, [pc, #148]	@ (80132a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013212:	4293      	cmp	r3, r2
 8013214:	d02c      	beq.n	8013270 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801321e:	d027      	beq.n	8013270 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	4a22      	ldr	r2, [pc, #136]	@ (80132b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8013226:	4293      	cmp	r3, r2
 8013228:	d022      	beq.n	8013270 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	4a21      	ldr	r2, [pc, #132]	@ (80132b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8013230:	4293      	cmp	r3, r2
 8013232:	d01d      	beq.n	8013270 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	4a1f      	ldr	r2, [pc, #124]	@ (80132b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801323a:	4293      	cmp	r3, r2
 801323c:	d018      	beq.n	8013270 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	4a1a      	ldr	r2, [pc, #104]	@ (80132ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013244:	4293      	cmp	r3, r2
 8013246:	d013      	beq.n	8013270 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	4a1b      	ldr	r2, [pc, #108]	@ (80132bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801324e:	4293      	cmp	r3, r2
 8013250:	d00e      	beq.n	8013270 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	4a1a      	ldr	r2, [pc, #104]	@ (80132c0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8013258:	4293      	cmp	r3, r2
 801325a:	d009      	beq.n	8013270 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	4a18      	ldr	r2, [pc, #96]	@ (80132c4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8013262:	4293      	cmp	r3, r2
 8013264:	d004      	beq.n	8013270 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	4a17      	ldr	r2, [pc, #92]	@ (80132c8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 801326c:	4293      	cmp	r3, r2
 801326e:	d10c      	bne.n	801328a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013276:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	689b      	ldr	r3, [r3, #8]
 801327c:	68ba      	ldr	r2, [r7, #8]
 801327e:	4313      	orrs	r3, r2
 8013280:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	68ba      	ldr	r2, [r7, #8]
 8013288:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2201      	movs	r2, #1
 801328e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2200      	movs	r2, #0
 8013296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801329a:	2300      	movs	r3, #0
}
 801329c:	4618      	mov	r0, r3
 801329e:	3714      	adds	r7, #20
 80132a0:	46bd      	mov	sp, r7
 80132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a6:	4770      	bx	lr
 80132a8:	40010000 	.word	0x40010000
 80132ac:	40010400 	.word	0x40010400
 80132b0:	40000400 	.word	0x40000400
 80132b4:	40000800 	.word	0x40000800
 80132b8:	40000c00 	.word	0x40000c00
 80132bc:	40001800 	.word	0x40001800
 80132c0:	40014000 	.word	0x40014000
 80132c4:	4000e000 	.word	0x4000e000
 80132c8:	4000e400 	.word	0x4000e400

080132cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80132cc:	b480      	push	{r7}
 80132ce:	b083      	sub	sp, #12
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80132d4:	bf00      	nop
 80132d6:	370c      	adds	r7, #12
 80132d8:	46bd      	mov	sp, r7
 80132da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132de:	4770      	bx	lr

080132e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80132e0:	b480      	push	{r7}
 80132e2:	b083      	sub	sp, #12
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80132e8:	bf00      	nop
 80132ea:	370c      	adds	r7, #12
 80132ec:	46bd      	mov	sp, r7
 80132ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f2:	4770      	bx	lr

080132f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80132f4:	b480      	push	{r7}
 80132f6:	b083      	sub	sp, #12
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80132fc:	bf00      	nop
 80132fe:	370c      	adds	r7, #12
 8013300:	46bd      	mov	sp, r7
 8013302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013306:	4770      	bx	lr

08013308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d101      	bne.n	801331a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013316:	2301      	movs	r3, #1
 8013318:	e042      	b.n	80133a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013320:	2b00      	cmp	r3, #0
 8013322:	d106      	bne.n	8013332 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2200      	movs	r2, #0
 8013328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f7ef fb87 	bl	8002a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	2224      	movs	r2, #36	@ 0x24
 8013336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	681a      	ldr	r2, [r3, #0]
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	f022 0201 	bic.w	r2, r2, #1
 8013348:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801334e:	2b00      	cmp	r3, #0
 8013350:	d002      	beq.n	8013358 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013352:	6878      	ldr	r0, [r7, #4]
 8013354:	f000 fe94 	bl	8014080 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f000 f825 	bl	80133a8 <UART_SetConfig>
 801335e:	4603      	mov	r3, r0
 8013360:	2b01      	cmp	r3, #1
 8013362:	d101      	bne.n	8013368 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013364:	2301      	movs	r3, #1
 8013366:	e01b      	b.n	80133a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	685a      	ldr	r2, [r3, #4]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	689a      	ldr	r2, [r3, #8]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	681a      	ldr	r2, [r3, #0]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f042 0201 	orr.w	r2, r2, #1
 8013396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f000 ff13 	bl	80141c4 <UART_CheckIdleState>
 801339e:	4603      	mov	r3, r0
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3708      	adds	r7, #8
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}

080133a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80133a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80133ac:	b092      	sub	sp, #72	@ 0x48
 80133ae:	af00      	add	r7, sp, #0
 80133b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80133b2:	2300      	movs	r3, #0
 80133b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	689a      	ldr	r2, [r3, #8]
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	691b      	ldr	r3, [r3, #16]
 80133c0:	431a      	orrs	r2, r3
 80133c2:	697b      	ldr	r3, [r7, #20]
 80133c4:	695b      	ldr	r3, [r3, #20]
 80133c6:	431a      	orrs	r2, r3
 80133c8:	697b      	ldr	r3, [r7, #20]
 80133ca:	69db      	ldr	r3, [r3, #28]
 80133cc:	4313      	orrs	r3, r2
 80133ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	681a      	ldr	r2, [r3, #0]
 80133d6:	4bbe      	ldr	r3, [pc, #760]	@ (80136d0 <UART_SetConfig+0x328>)
 80133d8:	4013      	ands	r3, r2
 80133da:	697a      	ldr	r2, [r7, #20]
 80133dc:	6812      	ldr	r2, [r2, #0]
 80133de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80133e0:	430b      	orrs	r3, r1
 80133e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	68da      	ldr	r2, [r3, #12]
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	430a      	orrs	r2, r1
 80133f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	699b      	ldr	r3, [r3, #24]
 80133fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4ab3      	ldr	r2, [pc, #716]	@ (80136d4 <UART_SetConfig+0x32c>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d004      	beq.n	8013414 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	6a1b      	ldr	r3, [r3, #32]
 801340e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013410:	4313      	orrs	r3, r2
 8013412:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	689a      	ldr	r2, [r3, #8]
 801341a:	4baf      	ldr	r3, [pc, #700]	@ (80136d8 <UART_SetConfig+0x330>)
 801341c:	4013      	ands	r3, r2
 801341e:	697a      	ldr	r2, [r7, #20]
 8013420:	6812      	ldr	r2, [r2, #0]
 8013422:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013424:	430b      	orrs	r3, r1
 8013426:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801342e:	f023 010f 	bic.w	r1, r3, #15
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	430a      	orrs	r2, r1
 801343c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	4aa6      	ldr	r2, [pc, #664]	@ (80136dc <UART_SetConfig+0x334>)
 8013444:	4293      	cmp	r3, r2
 8013446:	d177      	bne.n	8013538 <UART_SetConfig+0x190>
 8013448:	4ba5      	ldr	r3, [pc, #660]	@ (80136e0 <UART_SetConfig+0x338>)
 801344a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801344c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013450:	2b28      	cmp	r3, #40	@ 0x28
 8013452:	d86d      	bhi.n	8013530 <UART_SetConfig+0x188>
 8013454:	a201      	add	r2, pc, #4	@ (adr r2, 801345c <UART_SetConfig+0xb4>)
 8013456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801345a:	bf00      	nop
 801345c:	08013501 	.word	0x08013501
 8013460:	08013531 	.word	0x08013531
 8013464:	08013531 	.word	0x08013531
 8013468:	08013531 	.word	0x08013531
 801346c:	08013531 	.word	0x08013531
 8013470:	08013531 	.word	0x08013531
 8013474:	08013531 	.word	0x08013531
 8013478:	08013531 	.word	0x08013531
 801347c:	08013509 	.word	0x08013509
 8013480:	08013531 	.word	0x08013531
 8013484:	08013531 	.word	0x08013531
 8013488:	08013531 	.word	0x08013531
 801348c:	08013531 	.word	0x08013531
 8013490:	08013531 	.word	0x08013531
 8013494:	08013531 	.word	0x08013531
 8013498:	08013531 	.word	0x08013531
 801349c:	08013511 	.word	0x08013511
 80134a0:	08013531 	.word	0x08013531
 80134a4:	08013531 	.word	0x08013531
 80134a8:	08013531 	.word	0x08013531
 80134ac:	08013531 	.word	0x08013531
 80134b0:	08013531 	.word	0x08013531
 80134b4:	08013531 	.word	0x08013531
 80134b8:	08013531 	.word	0x08013531
 80134bc:	08013519 	.word	0x08013519
 80134c0:	08013531 	.word	0x08013531
 80134c4:	08013531 	.word	0x08013531
 80134c8:	08013531 	.word	0x08013531
 80134cc:	08013531 	.word	0x08013531
 80134d0:	08013531 	.word	0x08013531
 80134d4:	08013531 	.word	0x08013531
 80134d8:	08013531 	.word	0x08013531
 80134dc:	08013521 	.word	0x08013521
 80134e0:	08013531 	.word	0x08013531
 80134e4:	08013531 	.word	0x08013531
 80134e8:	08013531 	.word	0x08013531
 80134ec:	08013531 	.word	0x08013531
 80134f0:	08013531 	.word	0x08013531
 80134f4:	08013531 	.word	0x08013531
 80134f8:	08013531 	.word	0x08013531
 80134fc:	08013529 	.word	0x08013529
 8013500:	2301      	movs	r3, #1
 8013502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013506:	e326      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013508:	2304      	movs	r3, #4
 801350a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801350e:	e322      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013510:	2308      	movs	r3, #8
 8013512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013516:	e31e      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013518:	2310      	movs	r3, #16
 801351a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801351e:	e31a      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013520:	2320      	movs	r3, #32
 8013522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013526:	e316      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013528:	2340      	movs	r3, #64	@ 0x40
 801352a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801352e:	e312      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013530:	2380      	movs	r3, #128	@ 0x80
 8013532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013536:	e30e      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013538:	697b      	ldr	r3, [r7, #20]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	4a69      	ldr	r2, [pc, #420]	@ (80136e4 <UART_SetConfig+0x33c>)
 801353e:	4293      	cmp	r3, r2
 8013540:	d130      	bne.n	80135a4 <UART_SetConfig+0x1fc>
 8013542:	4b67      	ldr	r3, [pc, #412]	@ (80136e0 <UART_SetConfig+0x338>)
 8013544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013546:	f003 0307 	and.w	r3, r3, #7
 801354a:	2b05      	cmp	r3, #5
 801354c:	d826      	bhi.n	801359c <UART_SetConfig+0x1f4>
 801354e:	a201      	add	r2, pc, #4	@ (adr r2, 8013554 <UART_SetConfig+0x1ac>)
 8013550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013554:	0801356d 	.word	0x0801356d
 8013558:	08013575 	.word	0x08013575
 801355c:	0801357d 	.word	0x0801357d
 8013560:	08013585 	.word	0x08013585
 8013564:	0801358d 	.word	0x0801358d
 8013568:	08013595 	.word	0x08013595
 801356c:	2300      	movs	r3, #0
 801356e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013572:	e2f0      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013574:	2304      	movs	r3, #4
 8013576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801357a:	e2ec      	b.n	8013b56 <UART_SetConfig+0x7ae>
 801357c:	2308      	movs	r3, #8
 801357e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013582:	e2e8      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013584:	2310      	movs	r3, #16
 8013586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801358a:	e2e4      	b.n	8013b56 <UART_SetConfig+0x7ae>
 801358c:	2320      	movs	r3, #32
 801358e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013592:	e2e0      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013594:	2340      	movs	r3, #64	@ 0x40
 8013596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801359a:	e2dc      	b.n	8013b56 <UART_SetConfig+0x7ae>
 801359c:	2380      	movs	r3, #128	@ 0x80
 801359e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80135a2:	e2d8      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	4a4f      	ldr	r2, [pc, #316]	@ (80136e8 <UART_SetConfig+0x340>)
 80135aa:	4293      	cmp	r3, r2
 80135ac:	d130      	bne.n	8013610 <UART_SetConfig+0x268>
 80135ae:	4b4c      	ldr	r3, [pc, #304]	@ (80136e0 <UART_SetConfig+0x338>)
 80135b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80135b2:	f003 0307 	and.w	r3, r3, #7
 80135b6:	2b05      	cmp	r3, #5
 80135b8:	d826      	bhi.n	8013608 <UART_SetConfig+0x260>
 80135ba:	a201      	add	r2, pc, #4	@ (adr r2, 80135c0 <UART_SetConfig+0x218>)
 80135bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135c0:	080135d9 	.word	0x080135d9
 80135c4:	080135e1 	.word	0x080135e1
 80135c8:	080135e9 	.word	0x080135e9
 80135cc:	080135f1 	.word	0x080135f1
 80135d0:	080135f9 	.word	0x080135f9
 80135d4:	08013601 	.word	0x08013601
 80135d8:	2300      	movs	r3, #0
 80135da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80135de:	e2ba      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80135e0:	2304      	movs	r3, #4
 80135e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80135e6:	e2b6      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80135e8:	2308      	movs	r3, #8
 80135ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80135ee:	e2b2      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80135f0:	2310      	movs	r3, #16
 80135f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80135f6:	e2ae      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80135f8:	2320      	movs	r3, #32
 80135fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80135fe:	e2aa      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013600:	2340      	movs	r3, #64	@ 0x40
 8013602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013606:	e2a6      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013608:	2380      	movs	r3, #128	@ 0x80
 801360a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801360e:	e2a2      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	4a35      	ldr	r2, [pc, #212]	@ (80136ec <UART_SetConfig+0x344>)
 8013616:	4293      	cmp	r3, r2
 8013618:	d130      	bne.n	801367c <UART_SetConfig+0x2d4>
 801361a:	4b31      	ldr	r3, [pc, #196]	@ (80136e0 <UART_SetConfig+0x338>)
 801361c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801361e:	f003 0307 	and.w	r3, r3, #7
 8013622:	2b05      	cmp	r3, #5
 8013624:	d826      	bhi.n	8013674 <UART_SetConfig+0x2cc>
 8013626:	a201      	add	r2, pc, #4	@ (adr r2, 801362c <UART_SetConfig+0x284>)
 8013628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801362c:	08013645 	.word	0x08013645
 8013630:	0801364d 	.word	0x0801364d
 8013634:	08013655 	.word	0x08013655
 8013638:	0801365d 	.word	0x0801365d
 801363c:	08013665 	.word	0x08013665
 8013640:	0801366d 	.word	0x0801366d
 8013644:	2300      	movs	r3, #0
 8013646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801364a:	e284      	b.n	8013b56 <UART_SetConfig+0x7ae>
 801364c:	2304      	movs	r3, #4
 801364e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013652:	e280      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013654:	2308      	movs	r3, #8
 8013656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801365a:	e27c      	b.n	8013b56 <UART_SetConfig+0x7ae>
 801365c:	2310      	movs	r3, #16
 801365e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013662:	e278      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013664:	2320      	movs	r3, #32
 8013666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801366a:	e274      	b.n	8013b56 <UART_SetConfig+0x7ae>
 801366c:	2340      	movs	r3, #64	@ 0x40
 801366e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013672:	e270      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013674:	2380      	movs	r3, #128	@ 0x80
 8013676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801367a:	e26c      	b.n	8013b56 <UART_SetConfig+0x7ae>
 801367c:	697b      	ldr	r3, [r7, #20]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	4a1b      	ldr	r2, [pc, #108]	@ (80136f0 <UART_SetConfig+0x348>)
 8013682:	4293      	cmp	r3, r2
 8013684:	d142      	bne.n	801370c <UART_SetConfig+0x364>
 8013686:	4b16      	ldr	r3, [pc, #88]	@ (80136e0 <UART_SetConfig+0x338>)
 8013688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801368a:	f003 0307 	and.w	r3, r3, #7
 801368e:	2b05      	cmp	r3, #5
 8013690:	d838      	bhi.n	8013704 <UART_SetConfig+0x35c>
 8013692:	a201      	add	r2, pc, #4	@ (adr r2, 8013698 <UART_SetConfig+0x2f0>)
 8013694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013698:	080136b1 	.word	0x080136b1
 801369c:	080136b9 	.word	0x080136b9
 80136a0:	080136c1 	.word	0x080136c1
 80136a4:	080136c9 	.word	0x080136c9
 80136a8:	080136f5 	.word	0x080136f5
 80136ac:	080136fd 	.word	0x080136fd
 80136b0:	2300      	movs	r3, #0
 80136b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136b6:	e24e      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80136b8:	2304      	movs	r3, #4
 80136ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136be:	e24a      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80136c0:	2308      	movs	r3, #8
 80136c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136c6:	e246      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80136c8:	2310      	movs	r3, #16
 80136ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136ce:	e242      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80136d0:	cfff69f3 	.word	0xcfff69f3
 80136d4:	58000c00 	.word	0x58000c00
 80136d8:	11fff4ff 	.word	0x11fff4ff
 80136dc:	40011000 	.word	0x40011000
 80136e0:	58024400 	.word	0x58024400
 80136e4:	40004400 	.word	0x40004400
 80136e8:	40004800 	.word	0x40004800
 80136ec:	40004c00 	.word	0x40004c00
 80136f0:	40005000 	.word	0x40005000
 80136f4:	2320      	movs	r3, #32
 80136f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136fa:	e22c      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80136fc:	2340      	movs	r3, #64	@ 0x40
 80136fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013702:	e228      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013704:	2380      	movs	r3, #128	@ 0x80
 8013706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801370a:	e224      	b.n	8013b56 <UART_SetConfig+0x7ae>
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	4ab1      	ldr	r2, [pc, #708]	@ (80139d8 <UART_SetConfig+0x630>)
 8013712:	4293      	cmp	r3, r2
 8013714:	d176      	bne.n	8013804 <UART_SetConfig+0x45c>
 8013716:	4bb1      	ldr	r3, [pc, #708]	@ (80139dc <UART_SetConfig+0x634>)
 8013718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801371a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801371e:	2b28      	cmp	r3, #40	@ 0x28
 8013720:	d86c      	bhi.n	80137fc <UART_SetConfig+0x454>
 8013722:	a201      	add	r2, pc, #4	@ (adr r2, 8013728 <UART_SetConfig+0x380>)
 8013724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013728:	080137cd 	.word	0x080137cd
 801372c:	080137fd 	.word	0x080137fd
 8013730:	080137fd 	.word	0x080137fd
 8013734:	080137fd 	.word	0x080137fd
 8013738:	080137fd 	.word	0x080137fd
 801373c:	080137fd 	.word	0x080137fd
 8013740:	080137fd 	.word	0x080137fd
 8013744:	080137fd 	.word	0x080137fd
 8013748:	080137d5 	.word	0x080137d5
 801374c:	080137fd 	.word	0x080137fd
 8013750:	080137fd 	.word	0x080137fd
 8013754:	080137fd 	.word	0x080137fd
 8013758:	080137fd 	.word	0x080137fd
 801375c:	080137fd 	.word	0x080137fd
 8013760:	080137fd 	.word	0x080137fd
 8013764:	080137fd 	.word	0x080137fd
 8013768:	080137dd 	.word	0x080137dd
 801376c:	080137fd 	.word	0x080137fd
 8013770:	080137fd 	.word	0x080137fd
 8013774:	080137fd 	.word	0x080137fd
 8013778:	080137fd 	.word	0x080137fd
 801377c:	080137fd 	.word	0x080137fd
 8013780:	080137fd 	.word	0x080137fd
 8013784:	080137fd 	.word	0x080137fd
 8013788:	080137e5 	.word	0x080137e5
 801378c:	080137fd 	.word	0x080137fd
 8013790:	080137fd 	.word	0x080137fd
 8013794:	080137fd 	.word	0x080137fd
 8013798:	080137fd 	.word	0x080137fd
 801379c:	080137fd 	.word	0x080137fd
 80137a0:	080137fd 	.word	0x080137fd
 80137a4:	080137fd 	.word	0x080137fd
 80137a8:	080137ed 	.word	0x080137ed
 80137ac:	080137fd 	.word	0x080137fd
 80137b0:	080137fd 	.word	0x080137fd
 80137b4:	080137fd 	.word	0x080137fd
 80137b8:	080137fd 	.word	0x080137fd
 80137bc:	080137fd 	.word	0x080137fd
 80137c0:	080137fd 	.word	0x080137fd
 80137c4:	080137fd 	.word	0x080137fd
 80137c8:	080137f5 	.word	0x080137f5
 80137cc:	2301      	movs	r3, #1
 80137ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137d2:	e1c0      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80137d4:	2304      	movs	r3, #4
 80137d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137da:	e1bc      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80137dc:	2308      	movs	r3, #8
 80137de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137e2:	e1b8      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80137e4:	2310      	movs	r3, #16
 80137e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137ea:	e1b4      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80137ec:	2320      	movs	r3, #32
 80137ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137f2:	e1b0      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80137f4:	2340      	movs	r3, #64	@ 0x40
 80137f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137fa:	e1ac      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80137fc:	2380      	movs	r3, #128	@ 0x80
 80137fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013802:	e1a8      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	4a75      	ldr	r2, [pc, #468]	@ (80139e0 <UART_SetConfig+0x638>)
 801380a:	4293      	cmp	r3, r2
 801380c:	d130      	bne.n	8013870 <UART_SetConfig+0x4c8>
 801380e:	4b73      	ldr	r3, [pc, #460]	@ (80139dc <UART_SetConfig+0x634>)
 8013810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013812:	f003 0307 	and.w	r3, r3, #7
 8013816:	2b05      	cmp	r3, #5
 8013818:	d826      	bhi.n	8013868 <UART_SetConfig+0x4c0>
 801381a:	a201      	add	r2, pc, #4	@ (adr r2, 8013820 <UART_SetConfig+0x478>)
 801381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013820:	08013839 	.word	0x08013839
 8013824:	08013841 	.word	0x08013841
 8013828:	08013849 	.word	0x08013849
 801382c:	08013851 	.word	0x08013851
 8013830:	08013859 	.word	0x08013859
 8013834:	08013861 	.word	0x08013861
 8013838:	2300      	movs	r3, #0
 801383a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801383e:	e18a      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013840:	2304      	movs	r3, #4
 8013842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013846:	e186      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013848:	2308      	movs	r3, #8
 801384a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801384e:	e182      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013850:	2310      	movs	r3, #16
 8013852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013856:	e17e      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013858:	2320      	movs	r3, #32
 801385a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801385e:	e17a      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013860:	2340      	movs	r3, #64	@ 0x40
 8013862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013866:	e176      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013868:	2380      	movs	r3, #128	@ 0x80
 801386a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801386e:	e172      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	4a5b      	ldr	r2, [pc, #364]	@ (80139e4 <UART_SetConfig+0x63c>)
 8013876:	4293      	cmp	r3, r2
 8013878:	d130      	bne.n	80138dc <UART_SetConfig+0x534>
 801387a:	4b58      	ldr	r3, [pc, #352]	@ (80139dc <UART_SetConfig+0x634>)
 801387c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801387e:	f003 0307 	and.w	r3, r3, #7
 8013882:	2b05      	cmp	r3, #5
 8013884:	d826      	bhi.n	80138d4 <UART_SetConfig+0x52c>
 8013886:	a201      	add	r2, pc, #4	@ (adr r2, 801388c <UART_SetConfig+0x4e4>)
 8013888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801388c:	080138a5 	.word	0x080138a5
 8013890:	080138ad 	.word	0x080138ad
 8013894:	080138b5 	.word	0x080138b5
 8013898:	080138bd 	.word	0x080138bd
 801389c:	080138c5 	.word	0x080138c5
 80138a0:	080138cd 	.word	0x080138cd
 80138a4:	2300      	movs	r3, #0
 80138a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138aa:	e154      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80138ac:	2304      	movs	r3, #4
 80138ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138b2:	e150      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80138b4:	2308      	movs	r3, #8
 80138b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138ba:	e14c      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80138bc:	2310      	movs	r3, #16
 80138be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138c2:	e148      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80138c4:	2320      	movs	r3, #32
 80138c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138ca:	e144      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80138cc:	2340      	movs	r3, #64	@ 0x40
 80138ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138d2:	e140      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80138d4:	2380      	movs	r3, #128	@ 0x80
 80138d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138da:	e13c      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	4a41      	ldr	r2, [pc, #260]	@ (80139e8 <UART_SetConfig+0x640>)
 80138e2:	4293      	cmp	r3, r2
 80138e4:	f040 8082 	bne.w	80139ec <UART_SetConfig+0x644>
 80138e8:	4b3c      	ldr	r3, [pc, #240]	@ (80139dc <UART_SetConfig+0x634>)
 80138ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80138f0:	2b28      	cmp	r3, #40	@ 0x28
 80138f2:	d86d      	bhi.n	80139d0 <UART_SetConfig+0x628>
 80138f4:	a201      	add	r2, pc, #4	@ (adr r2, 80138fc <UART_SetConfig+0x554>)
 80138f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138fa:	bf00      	nop
 80138fc:	080139a1 	.word	0x080139a1
 8013900:	080139d1 	.word	0x080139d1
 8013904:	080139d1 	.word	0x080139d1
 8013908:	080139d1 	.word	0x080139d1
 801390c:	080139d1 	.word	0x080139d1
 8013910:	080139d1 	.word	0x080139d1
 8013914:	080139d1 	.word	0x080139d1
 8013918:	080139d1 	.word	0x080139d1
 801391c:	080139a9 	.word	0x080139a9
 8013920:	080139d1 	.word	0x080139d1
 8013924:	080139d1 	.word	0x080139d1
 8013928:	080139d1 	.word	0x080139d1
 801392c:	080139d1 	.word	0x080139d1
 8013930:	080139d1 	.word	0x080139d1
 8013934:	080139d1 	.word	0x080139d1
 8013938:	080139d1 	.word	0x080139d1
 801393c:	080139b1 	.word	0x080139b1
 8013940:	080139d1 	.word	0x080139d1
 8013944:	080139d1 	.word	0x080139d1
 8013948:	080139d1 	.word	0x080139d1
 801394c:	080139d1 	.word	0x080139d1
 8013950:	080139d1 	.word	0x080139d1
 8013954:	080139d1 	.word	0x080139d1
 8013958:	080139d1 	.word	0x080139d1
 801395c:	080139b9 	.word	0x080139b9
 8013960:	080139d1 	.word	0x080139d1
 8013964:	080139d1 	.word	0x080139d1
 8013968:	080139d1 	.word	0x080139d1
 801396c:	080139d1 	.word	0x080139d1
 8013970:	080139d1 	.word	0x080139d1
 8013974:	080139d1 	.word	0x080139d1
 8013978:	080139d1 	.word	0x080139d1
 801397c:	080139c1 	.word	0x080139c1
 8013980:	080139d1 	.word	0x080139d1
 8013984:	080139d1 	.word	0x080139d1
 8013988:	080139d1 	.word	0x080139d1
 801398c:	080139d1 	.word	0x080139d1
 8013990:	080139d1 	.word	0x080139d1
 8013994:	080139d1 	.word	0x080139d1
 8013998:	080139d1 	.word	0x080139d1
 801399c:	080139c9 	.word	0x080139c9
 80139a0:	2301      	movs	r3, #1
 80139a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139a6:	e0d6      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80139a8:	2304      	movs	r3, #4
 80139aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139ae:	e0d2      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80139b0:	2308      	movs	r3, #8
 80139b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139b6:	e0ce      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80139b8:	2310      	movs	r3, #16
 80139ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139be:	e0ca      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80139c0:	2320      	movs	r3, #32
 80139c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139c6:	e0c6      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80139c8:	2340      	movs	r3, #64	@ 0x40
 80139ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139ce:	e0c2      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80139d0:	2380      	movs	r3, #128	@ 0x80
 80139d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139d6:	e0be      	b.n	8013b56 <UART_SetConfig+0x7ae>
 80139d8:	40011400 	.word	0x40011400
 80139dc:	58024400 	.word	0x58024400
 80139e0:	40007800 	.word	0x40007800
 80139e4:	40007c00 	.word	0x40007c00
 80139e8:	40011800 	.word	0x40011800
 80139ec:	697b      	ldr	r3, [r7, #20]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	4aad      	ldr	r2, [pc, #692]	@ (8013ca8 <UART_SetConfig+0x900>)
 80139f2:	4293      	cmp	r3, r2
 80139f4:	d176      	bne.n	8013ae4 <UART_SetConfig+0x73c>
 80139f6:	4bad      	ldr	r3, [pc, #692]	@ (8013cac <UART_SetConfig+0x904>)
 80139f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80139fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80139fe:	2b28      	cmp	r3, #40	@ 0x28
 8013a00:	d86c      	bhi.n	8013adc <UART_SetConfig+0x734>
 8013a02:	a201      	add	r2, pc, #4	@ (adr r2, 8013a08 <UART_SetConfig+0x660>)
 8013a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a08:	08013aad 	.word	0x08013aad
 8013a0c:	08013add 	.word	0x08013add
 8013a10:	08013add 	.word	0x08013add
 8013a14:	08013add 	.word	0x08013add
 8013a18:	08013add 	.word	0x08013add
 8013a1c:	08013add 	.word	0x08013add
 8013a20:	08013add 	.word	0x08013add
 8013a24:	08013add 	.word	0x08013add
 8013a28:	08013ab5 	.word	0x08013ab5
 8013a2c:	08013add 	.word	0x08013add
 8013a30:	08013add 	.word	0x08013add
 8013a34:	08013add 	.word	0x08013add
 8013a38:	08013add 	.word	0x08013add
 8013a3c:	08013add 	.word	0x08013add
 8013a40:	08013add 	.word	0x08013add
 8013a44:	08013add 	.word	0x08013add
 8013a48:	08013abd 	.word	0x08013abd
 8013a4c:	08013add 	.word	0x08013add
 8013a50:	08013add 	.word	0x08013add
 8013a54:	08013add 	.word	0x08013add
 8013a58:	08013add 	.word	0x08013add
 8013a5c:	08013add 	.word	0x08013add
 8013a60:	08013add 	.word	0x08013add
 8013a64:	08013add 	.word	0x08013add
 8013a68:	08013ac5 	.word	0x08013ac5
 8013a6c:	08013add 	.word	0x08013add
 8013a70:	08013add 	.word	0x08013add
 8013a74:	08013add 	.word	0x08013add
 8013a78:	08013add 	.word	0x08013add
 8013a7c:	08013add 	.word	0x08013add
 8013a80:	08013add 	.word	0x08013add
 8013a84:	08013add 	.word	0x08013add
 8013a88:	08013acd 	.word	0x08013acd
 8013a8c:	08013add 	.word	0x08013add
 8013a90:	08013add 	.word	0x08013add
 8013a94:	08013add 	.word	0x08013add
 8013a98:	08013add 	.word	0x08013add
 8013a9c:	08013add 	.word	0x08013add
 8013aa0:	08013add 	.word	0x08013add
 8013aa4:	08013add 	.word	0x08013add
 8013aa8:	08013ad5 	.word	0x08013ad5
 8013aac:	2301      	movs	r3, #1
 8013aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ab2:	e050      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013ab4:	2304      	movs	r3, #4
 8013ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013aba:	e04c      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013abc:	2308      	movs	r3, #8
 8013abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ac2:	e048      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013ac4:	2310      	movs	r3, #16
 8013ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013aca:	e044      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013acc:	2320      	movs	r3, #32
 8013ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ad2:	e040      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013ad4:	2340      	movs	r3, #64	@ 0x40
 8013ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ada:	e03c      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013adc:	2380      	movs	r3, #128	@ 0x80
 8013ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ae2:	e038      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013ae4:	697b      	ldr	r3, [r7, #20]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	4a71      	ldr	r2, [pc, #452]	@ (8013cb0 <UART_SetConfig+0x908>)
 8013aea:	4293      	cmp	r3, r2
 8013aec:	d130      	bne.n	8013b50 <UART_SetConfig+0x7a8>
 8013aee:	4b6f      	ldr	r3, [pc, #444]	@ (8013cac <UART_SetConfig+0x904>)
 8013af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013af2:	f003 0307 	and.w	r3, r3, #7
 8013af6:	2b05      	cmp	r3, #5
 8013af8:	d826      	bhi.n	8013b48 <UART_SetConfig+0x7a0>
 8013afa:	a201      	add	r2, pc, #4	@ (adr r2, 8013b00 <UART_SetConfig+0x758>)
 8013afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b00:	08013b19 	.word	0x08013b19
 8013b04:	08013b21 	.word	0x08013b21
 8013b08:	08013b29 	.word	0x08013b29
 8013b0c:	08013b31 	.word	0x08013b31
 8013b10:	08013b39 	.word	0x08013b39
 8013b14:	08013b41 	.word	0x08013b41
 8013b18:	2302      	movs	r3, #2
 8013b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b1e:	e01a      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013b20:	2304      	movs	r3, #4
 8013b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b26:	e016      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013b28:	2308      	movs	r3, #8
 8013b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b2e:	e012      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013b30:	2310      	movs	r3, #16
 8013b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b36:	e00e      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013b38:	2320      	movs	r3, #32
 8013b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b3e:	e00a      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013b40:	2340      	movs	r3, #64	@ 0x40
 8013b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b46:	e006      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013b48:	2380      	movs	r3, #128	@ 0x80
 8013b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b4e:	e002      	b.n	8013b56 <UART_SetConfig+0x7ae>
 8013b50:	2380      	movs	r3, #128	@ 0x80
 8013b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	4a55      	ldr	r2, [pc, #340]	@ (8013cb0 <UART_SetConfig+0x908>)
 8013b5c:	4293      	cmp	r3, r2
 8013b5e:	f040 80f8 	bne.w	8013d52 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013b62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013b66:	2b20      	cmp	r3, #32
 8013b68:	dc46      	bgt.n	8013bf8 <UART_SetConfig+0x850>
 8013b6a:	2b02      	cmp	r3, #2
 8013b6c:	db75      	blt.n	8013c5a <UART_SetConfig+0x8b2>
 8013b6e:	3b02      	subs	r3, #2
 8013b70:	2b1e      	cmp	r3, #30
 8013b72:	d872      	bhi.n	8013c5a <UART_SetConfig+0x8b2>
 8013b74:	a201      	add	r2, pc, #4	@ (adr r2, 8013b7c <UART_SetConfig+0x7d4>)
 8013b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b7a:	bf00      	nop
 8013b7c:	08013bff 	.word	0x08013bff
 8013b80:	08013c5b 	.word	0x08013c5b
 8013b84:	08013c07 	.word	0x08013c07
 8013b88:	08013c5b 	.word	0x08013c5b
 8013b8c:	08013c5b 	.word	0x08013c5b
 8013b90:	08013c5b 	.word	0x08013c5b
 8013b94:	08013c17 	.word	0x08013c17
 8013b98:	08013c5b 	.word	0x08013c5b
 8013b9c:	08013c5b 	.word	0x08013c5b
 8013ba0:	08013c5b 	.word	0x08013c5b
 8013ba4:	08013c5b 	.word	0x08013c5b
 8013ba8:	08013c5b 	.word	0x08013c5b
 8013bac:	08013c5b 	.word	0x08013c5b
 8013bb0:	08013c5b 	.word	0x08013c5b
 8013bb4:	08013c27 	.word	0x08013c27
 8013bb8:	08013c5b 	.word	0x08013c5b
 8013bbc:	08013c5b 	.word	0x08013c5b
 8013bc0:	08013c5b 	.word	0x08013c5b
 8013bc4:	08013c5b 	.word	0x08013c5b
 8013bc8:	08013c5b 	.word	0x08013c5b
 8013bcc:	08013c5b 	.word	0x08013c5b
 8013bd0:	08013c5b 	.word	0x08013c5b
 8013bd4:	08013c5b 	.word	0x08013c5b
 8013bd8:	08013c5b 	.word	0x08013c5b
 8013bdc:	08013c5b 	.word	0x08013c5b
 8013be0:	08013c5b 	.word	0x08013c5b
 8013be4:	08013c5b 	.word	0x08013c5b
 8013be8:	08013c5b 	.word	0x08013c5b
 8013bec:	08013c5b 	.word	0x08013c5b
 8013bf0:	08013c5b 	.word	0x08013c5b
 8013bf4:	08013c4d 	.word	0x08013c4d
 8013bf8:	2b40      	cmp	r3, #64	@ 0x40
 8013bfa:	d02a      	beq.n	8013c52 <UART_SetConfig+0x8aa>
 8013bfc:	e02d      	b.n	8013c5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013bfe:	f7fc f80f 	bl	800fc20 <HAL_RCCEx_GetD3PCLK1Freq>
 8013c02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013c04:	e02f      	b.n	8013c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fc f81e 	bl	800fc4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c14:	e027      	b.n	8013c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013c16:	f107 0318 	add.w	r3, r7, #24
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f7fc f96a 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013c20:	69fb      	ldr	r3, [r7, #28]
 8013c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c24:	e01f      	b.n	8013c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013c26:	4b21      	ldr	r3, [pc, #132]	@ (8013cac <UART_SetConfig+0x904>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	f003 0320 	and.w	r3, r3, #32
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d009      	beq.n	8013c46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013c32:	4b1e      	ldr	r3, [pc, #120]	@ (8013cac <UART_SetConfig+0x904>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	08db      	lsrs	r3, r3, #3
 8013c38:	f003 0303 	and.w	r3, r3, #3
 8013c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8013cb4 <UART_SetConfig+0x90c>)
 8013c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8013c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013c44:	e00f      	b.n	8013c66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013c46:	4b1b      	ldr	r3, [pc, #108]	@ (8013cb4 <UART_SetConfig+0x90c>)
 8013c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c4a:	e00c      	b.n	8013c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8013cb8 <UART_SetConfig+0x910>)
 8013c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c50:	e009      	b.n	8013c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c58:	e005      	b.n	8013c66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013c5e:	2301      	movs	r3, #1
 8013c60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013c64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	f000 81ee 	beq.w	801404a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013c6e:	697b      	ldr	r3, [r7, #20]
 8013c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c72:	4a12      	ldr	r2, [pc, #72]	@ (8013cbc <UART_SetConfig+0x914>)
 8013c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c78:	461a      	mov	r2, r3
 8013c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c80:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	685a      	ldr	r2, [r3, #4]
 8013c86:	4613      	mov	r3, r2
 8013c88:	005b      	lsls	r3, r3, #1
 8013c8a:	4413      	add	r3, r2
 8013c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	d305      	bcc.n	8013c9e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	685b      	ldr	r3, [r3, #4]
 8013c96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013c98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	d910      	bls.n	8013cc0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013ca4:	e1d1      	b.n	801404a <UART_SetConfig+0xca2>
 8013ca6:	bf00      	nop
 8013ca8:	40011c00 	.word	0x40011c00
 8013cac:	58024400 	.word	0x58024400
 8013cb0:	58000c00 	.word	0x58000c00
 8013cb4:	03d09000 	.word	0x03d09000
 8013cb8:	003d0900 	.word	0x003d0900
 8013cbc:	0801de60 	.word	0x0801de60
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	60bb      	str	r3, [r7, #8]
 8013cc6:	60fa      	str	r2, [r7, #12]
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ccc:	4ac0      	ldr	r2, [pc, #768]	@ (8013fd0 <UART_SetConfig+0xc28>)
 8013cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	603b      	str	r3, [r7, #0]
 8013cd8:	607a      	str	r2, [r7, #4]
 8013cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013cde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013ce2:	f7ec fd39 	bl	8000758 <__aeabi_uldivmod>
 8013ce6:	4602      	mov	r2, r0
 8013ce8:	460b      	mov	r3, r1
 8013cea:	4610      	mov	r0, r2
 8013cec:	4619      	mov	r1, r3
 8013cee:	f04f 0200 	mov.w	r2, #0
 8013cf2:	f04f 0300 	mov.w	r3, #0
 8013cf6:	020b      	lsls	r3, r1, #8
 8013cf8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013cfc:	0202      	lsls	r2, r0, #8
 8013cfe:	6979      	ldr	r1, [r7, #20]
 8013d00:	6849      	ldr	r1, [r1, #4]
 8013d02:	0849      	lsrs	r1, r1, #1
 8013d04:	2000      	movs	r0, #0
 8013d06:	460c      	mov	r4, r1
 8013d08:	4605      	mov	r5, r0
 8013d0a:	eb12 0804 	adds.w	r8, r2, r4
 8013d0e:	eb43 0905 	adc.w	r9, r3, r5
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	2200      	movs	r2, #0
 8013d18:	469a      	mov	sl, r3
 8013d1a:	4693      	mov	fp, r2
 8013d1c:	4652      	mov	r2, sl
 8013d1e:	465b      	mov	r3, fp
 8013d20:	4640      	mov	r0, r8
 8013d22:	4649      	mov	r1, r9
 8013d24:	f7ec fd18 	bl	8000758 <__aeabi_uldivmod>
 8013d28:	4602      	mov	r2, r0
 8013d2a:	460b      	mov	r3, r1
 8013d2c:	4613      	mov	r3, r2
 8013d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013d36:	d308      	bcc.n	8013d4a <UART_SetConfig+0x9a2>
 8013d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013d3e:	d204      	bcs.n	8013d4a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8013d40:	697b      	ldr	r3, [r7, #20]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013d46:	60da      	str	r2, [r3, #12]
 8013d48:	e17f      	b.n	801404a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013d50:	e17b      	b.n	801404a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d52:	697b      	ldr	r3, [r7, #20]
 8013d54:	69db      	ldr	r3, [r3, #28]
 8013d56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013d5a:	f040 80bd 	bne.w	8013ed8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8013d5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013d62:	2b20      	cmp	r3, #32
 8013d64:	dc48      	bgt.n	8013df8 <UART_SetConfig+0xa50>
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	db7b      	blt.n	8013e62 <UART_SetConfig+0xaba>
 8013d6a:	2b20      	cmp	r3, #32
 8013d6c:	d879      	bhi.n	8013e62 <UART_SetConfig+0xaba>
 8013d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8013d74 <UART_SetConfig+0x9cc>)
 8013d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d74:	08013dff 	.word	0x08013dff
 8013d78:	08013e07 	.word	0x08013e07
 8013d7c:	08013e63 	.word	0x08013e63
 8013d80:	08013e63 	.word	0x08013e63
 8013d84:	08013e0f 	.word	0x08013e0f
 8013d88:	08013e63 	.word	0x08013e63
 8013d8c:	08013e63 	.word	0x08013e63
 8013d90:	08013e63 	.word	0x08013e63
 8013d94:	08013e1f 	.word	0x08013e1f
 8013d98:	08013e63 	.word	0x08013e63
 8013d9c:	08013e63 	.word	0x08013e63
 8013da0:	08013e63 	.word	0x08013e63
 8013da4:	08013e63 	.word	0x08013e63
 8013da8:	08013e63 	.word	0x08013e63
 8013dac:	08013e63 	.word	0x08013e63
 8013db0:	08013e63 	.word	0x08013e63
 8013db4:	08013e2f 	.word	0x08013e2f
 8013db8:	08013e63 	.word	0x08013e63
 8013dbc:	08013e63 	.word	0x08013e63
 8013dc0:	08013e63 	.word	0x08013e63
 8013dc4:	08013e63 	.word	0x08013e63
 8013dc8:	08013e63 	.word	0x08013e63
 8013dcc:	08013e63 	.word	0x08013e63
 8013dd0:	08013e63 	.word	0x08013e63
 8013dd4:	08013e63 	.word	0x08013e63
 8013dd8:	08013e63 	.word	0x08013e63
 8013ddc:	08013e63 	.word	0x08013e63
 8013de0:	08013e63 	.word	0x08013e63
 8013de4:	08013e63 	.word	0x08013e63
 8013de8:	08013e63 	.word	0x08013e63
 8013dec:	08013e63 	.word	0x08013e63
 8013df0:	08013e63 	.word	0x08013e63
 8013df4:	08013e55 	.word	0x08013e55
 8013df8:	2b40      	cmp	r3, #64	@ 0x40
 8013dfa:	d02e      	beq.n	8013e5a <UART_SetConfig+0xab2>
 8013dfc:	e031      	b.n	8013e62 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013dfe:	f7fa f871 	bl	800dee4 <HAL_RCC_GetPCLK1Freq>
 8013e02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013e04:	e033      	b.n	8013e6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013e06:	f7fa f883 	bl	800df10 <HAL_RCC_GetPCLK2Freq>
 8013e0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013e0c:	e02f      	b.n	8013e6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7fb ff1a 	bl	800fc4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e1c:	e027      	b.n	8013e6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013e1e:	f107 0318 	add.w	r3, r7, #24
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7fc f866 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013e28:	69fb      	ldr	r3, [r7, #28]
 8013e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e2c:	e01f      	b.n	8013e6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013e2e:	4b69      	ldr	r3, [pc, #420]	@ (8013fd4 <UART_SetConfig+0xc2c>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	f003 0320 	and.w	r3, r3, #32
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d009      	beq.n	8013e4e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013e3a:	4b66      	ldr	r3, [pc, #408]	@ (8013fd4 <UART_SetConfig+0xc2c>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	08db      	lsrs	r3, r3, #3
 8013e40:	f003 0303 	and.w	r3, r3, #3
 8013e44:	4a64      	ldr	r2, [pc, #400]	@ (8013fd8 <UART_SetConfig+0xc30>)
 8013e46:	fa22 f303 	lsr.w	r3, r2, r3
 8013e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013e4c:	e00f      	b.n	8013e6e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8013e4e:	4b62      	ldr	r3, [pc, #392]	@ (8013fd8 <UART_SetConfig+0xc30>)
 8013e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e52:	e00c      	b.n	8013e6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013e54:	4b61      	ldr	r3, [pc, #388]	@ (8013fdc <UART_SetConfig+0xc34>)
 8013e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e58:	e009      	b.n	8013e6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e60:	e005      	b.n	8013e6e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8013e62:	2300      	movs	r3, #0
 8013e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013e66:	2301      	movs	r3, #1
 8013e68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013e6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	f000 80ea 	beq.w	801404a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013e76:	697b      	ldr	r3, [r7, #20]
 8013e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e7a:	4a55      	ldr	r2, [pc, #340]	@ (8013fd0 <UART_SetConfig+0xc28>)
 8013e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e80:	461a      	mov	r2, r3
 8013e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e88:	005a      	lsls	r2, r3, #1
 8013e8a:	697b      	ldr	r3, [r7, #20]
 8013e8c:	685b      	ldr	r3, [r3, #4]
 8013e8e:	085b      	lsrs	r3, r3, #1
 8013e90:	441a      	add	r2, r3
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	685b      	ldr	r3, [r3, #4]
 8013e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e9e:	2b0f      	cmp	r3, #15
 8013ea0:	d916      	bls.n	8013ed0 <UART_SetConfig+0xb28>
 8013ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013ea8:	d212      	bcs.n	8013ed0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	f023 030f 	bic.w	r3, r3, #15
 8013eb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eb6:	085b      	lsrs	r3, r3, #1
 8013eb8:	b29b      	uxth	r3, r3
 8013eba:	f003 0307 	and.w	r3, r3, #7
 8013ebe:	b29a      	uxth	r2, r3
 8013ec0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013ec2:	4313      	orrs	r3, r2
 8013ec4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013ecc:	60da      	str	r2, [r3, #12]
 8013ece:	e0bc      	b.n	801404a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013ed6:	e0b8      	b.n	801404a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013ed8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013edc:	2b20      	cmp	r3, #32
 8013ede:	dc4b      	bgt.n	8013f78 <UART_SetConfig+0xbd0>
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	f2c0 8087 	blt.w	8013ff4 <UART_SetConfig+0xc4c>
 8013ee6:	2b20      	cmp	r3, #32
 8013ee8:	f200 8084 	bhi.w	8013ff4 <UART_SetConfig+0xc4c>
 8013eec:	a201      	add	r2, pc, #4	@ (adr r2, 8013ef4 <UART_SetConfig+0xb4c>)
 8013eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ef2:	bf00      	nop
 8013ef4:	08013f7f 	.word	0x08013f7f
 8013ef8:	08013f87 	.word	0x08013f87
 8013efc:	08013ff5 	.word	0x08013ff5
 8013f00:	08013ff5 	.word	0x08013ff5
 8013f04:	08013f8f 	.word	0x08013f8f
 8013f08:	08013ff5 	.word	0x08013ff5
 8013f0c:	08013ff5 	.word	0x08013ff5
 8013f10:	08013ff5 	.word	0x08013ff5
 8013f14:	08013f9f 	.word	0x08013f9f
 8013f18:	08013ff5 	.word	0x08013ff5
 8013f1c:	08013ff5 	.word	0x08013ff5
 8013f20:	08013ff5 	.word	0x08013ff5
 8013f24:	08013ff5 	.word	0x08013ff5
 8013f28:	08013ff5 	.word	0x08013ff5
 8013f2c:	08013ff5 	.word	0x08013ff5
 8013f30:	08013ff5 	.word	0x08013ff5
 8013f34:	08013faf 	.word	0x08013faf
 8013f38:	08013ff5 	.word	0x08013ff5
 8013f3c:	08013ff5 	.word	0x08013ff5
 8013f40:	08013ff5 	.word	0x08013ff5
 8013f44:	08013ff5 	.word	0x08013ff5
 8013f48:	08013ff5 	.word	0x08013ff5
 8013f4c:	08013ff5 	.word	0x08013ff5
 8013f50:	08013ff5 	.word	0x08013ff5
 8013f54:	08013ff5 	.word	0x08013ff5
 8013f58:	08013ff5 	.word	0x08013ff5
 8013f5c:	08013ff5 	.word	0x08013ff5
 8013f60:	08013ff5 	.word	0x08013ff5
 8013f64:	08013ff5 	.word	0x08013ff5
 8013f68:	08013ff5 	.word	0x08013ff5
 8013f6c:	08013ff5 	.word	0x08013ff5
 8013f70:	08013ff5 	.word	0x08013ff5
 8013f74:	08013fe7 	.word	0x08013fe7
 8013f78:	2b40      	cmp	r3, #64	@ 0x40
 8013f7a:	d037      	beq.n	8013fec <UART_SetConfig+0xc44>
 8013f7c:	e03a      	b.n	8013ff4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013f7e:	f7f9 ffb1 	bl	800dee4 <HAL_RCC_GetPCLK1Freq>
 8013f82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013f84:	e03c      	b.n	8014000 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013f86:	f7f9 ffc3 	bl	800df10 <HAL_RCC_GetPCLK2Freq>
 8013f8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013f8c:	e038      	b.n	8014000 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7fb fe5a 	bl	800fc4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013f9c:	e030      	b.n	8014000 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013f9e:	f107 0318 	add.w	r3, r7, #24
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7fb ffa6 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013fa8:	69fb      	ldr	r3, [r7, #28]
 8013faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013fac:	e028      	b.n	8014000 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013fae:	4b09      	ldr	r3, [pc, #36]	@ (8013fd4 <UART_SetConfig+0xc2c>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	f003 0320 	and.w	r3, r3, #32
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d012      	beq.n	8013fe0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013fba:	4b06      	ldr	r3, [pc, #24]	@ (8013fd4 <UART_SetConfig+0xc2c>)
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	08db      	lsrs	r3, r3, #3
 8013fc0:	f003 0303 	and.w	r3, r3, #3
 8013fc4:	4a04      	ldr	r2, [pc, #16]	@ (8013fd8 <UART_SetConfig+0xc30>)
 8013fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8013fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013fcc:	e018      	b.n	8014000 <UART_SetConfig+0xc58>
 8013fce:	bf00      	nop
 8013fd0:	0801de60 	.word	0x0801de60
 8013fd4:	58024400 	.word	0x58024400
 8013fd8:	03d09000 	.word	0x03d09000
 8013fdc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8013fe0:	4b24      	ldr	r3, [pc, #144]	@ (8014074 <UART_SetConfig+0xccc>)
 8013fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013fe4:	e00c      	b.n	8014000 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013fe6:	4b24      	ldr	r3, [pc, #144]	@ (8014078 <UART_SetConfig+0xcd0>)
 8013fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013fea:	e009      	b.n	8014000 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ff2:	e005      	b.n	8014000 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013ffe:	bf00      	nop
    }

    if (pclk != 0U)
 8014000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014002:	2b00      	cmp	r3, #0
 8014004:	d021      	beq.n	801404a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801400a:	4a1c      	ldr	r2, [pc, #112]	@ (801407c <UART_SetConfig+0xcd4>)
 801400c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014010:	461a      	mov	r2, r3
 8014012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014014:	fbb3 f2f2 	udiv	r2, r3, r2
 8014018:	697b      	ldr	r3, [r7, #20]
 801401a:	685b      	ldr	r3, [r3, #4]
 801401c:	085b      	lsrs	r3, r3, #1
 801401e:	441a      	add	r2, r3
 8014020:	697b      	ldr	r3, [r7, #20]
 8014022:	685b      	ldr	r3, [r3, #4]
 8014024:	fbb2 f3f3 	udiv	r3, r2, r3
 8014028:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801402a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801402c:	2b0f      	cmp	r3, #15
 801402e:	d909      	bls.n	8014044 <UART_SetConfig+0xc9c>
 8014030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014036:	d205      	bcs.n	8014044 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801403a:	b29a      	uxth	r2, r3
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	60da      	str	r2, [r3, #12]
 8014042:	e002      	b.n	801404a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014044:	2301      	movs	r3, #1
 8014046:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	2201      	movs	r2, #1
 801404e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	2201      	movs	r2, #1
 8014056:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801405a:	697b      	ldr	r3, [r7, #20]
 801405c:	2200      	movs	r2, #0
 801405e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	2200      	movs	r2, #0
 8014064:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8014066:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801406a:	4618      	mov	r0, r3
 801406c:	3748      	adds	r7, #72	@ 0x48
 801406e:	46bd      	mov	sp, r7
 8014070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014074:	03d09000 	.word	0x03d09000
 8014078:	003d0900 	.word	0x003d0900
 801407c:	0801de60 	.word	0x0801de60

08014080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014080:	b480      	push	{r7}
 8014082:	b083      	sub	sp, #12
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801408c:	f003 0308 	and.w	r3, r3, #8
 8014090:	2b00      	cmp	r3, #0
 8014092:	d00a      	beq.n	80140aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	685b      	ldr	r3, [r3, #4]
 801409a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	430a      	orrs	r2, r1
 80140a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140ae:	f003 0301 	and.w	r3, r3, #1
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d00a      	beq.n	80140cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	685b      	ldr	r3, [r3, #4]
 80140bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	430a      	orrs	r2, r1
 80140ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140d0:	f003 0302 	and.w	r3, r3, #2
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d00a      	beq.n	80140ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	685b      	ldr	r3, [r3, #4]
 80140de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	430a      	orrs	r2, r1
 80140ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140f2:	f003 0304 	and.w	r3, r3, #4
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d00a      	beq.n	8014110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	685b      	ldr	r3, [r3, #4]
 8014100:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	430a      	orrs	r2, r1
 801410e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014114:	f003 0310 	and.w	r3, r3, #16
 8014118:	2b00      	cmp	r3, #0
 801411a:	d00a      	beq.n	8014132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	689b      	ldr	r3, [r3, #8]
 8014122:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	430a      	orrs	r2, r1
 8014130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014136:	f003 0320 	and.w	r3, r3, #32
 801413a:	2b00      	cmp	r3, #0
 801413c:	d00a      	beq.n	8014154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	689b      	ldr	r3, [r3, #8]
 8014144:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	430a      	orrs	r2, r1
 8014152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801415c:	2b00      	cmp	r3, #0
 801415e:	d01a      	beq.n	8014196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	685b      	ldr	r3, [r3, #4]
 8014166:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	430a      	orrs	r2, r1
 8014174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801417a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801417e:	d10a      	bne.n	8014196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	685b      	ldr	r3, [r3, #4]
 8014186:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	430a      	orrs	r2, r1
 8014194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801419a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d00a      	beq.n	80141b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	430a      	orrs	r2, r1
 80141b6:	605a      	str	r2, [r3, #4]
  }
}
 80141b8:	bf00      	nop
 80141ba:	370c      	adds	r7, #12
 80141bc:	46bd      	mov	sp, r7
 80141be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c2:	4770      	bx	lr

080141c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b098      	sub	sp, #96	@ 0x60
 80141c8:	af02      	add	r7, sp, #8
 80141ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2200      	movs	r2, #0
 80141d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80141d4:	f7f3 f884 	bl	80072e0 <HAL_GetTick>
 80141d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	f003 0308 	and.w	r3, r3, #8
 80141e4:	2b08      	cmp	r3, #8
 80141e6:	d12f      	bne.n	8014248 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80141e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80141ec:	9300      	str	r3, [sp, #0]
 80141ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141f0:	2200      	movs	r2, #0
 80141f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f000 f88e 	bl	8014318 <UART_WaitOnFlagUntilTimeout>
 80141fc:	4603      	mov	r3, r0
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d022      	beq.n	8014248 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801420a:	e853 3f00 	ldrex	r3, [r3]
 801420e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014216:	653b      	str	r3, [r7, #80]	@ 0x50
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	461a      	mov	r2, r3
 801421e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014220:	647b      	str	r3, [r7, #68]	@ 0x44
 8014222:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014224:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014228:	e841 2300 	strex	r3, r2, [r1]
 801422c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801422e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014230:	2b00      	cmp	r3, #0
 8014232:	d1e6      	bne.n	8014202 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2220      	movs	r2, #32
 8014238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2200      	movs	r2, #0
 8014240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014244:	2303      	movs	r3, #3
 8014246:	e063      	b.n	8014310 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	f003 0304 	and.w	r3, r3, #4
 8014252:	2b04      	cmp	r3, #4
 8014254:	d149      	bne.n	80142ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014256:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801425a:	9300      	str	r3, [sp, #0]
 801425c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801425e:	2200      	movs	r2, #0
 8014260:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f000 f857 	bl	8014318 <UART_WaitOnFlagUntilTimeout>
 801426a:	4603      	mov	r3, r0
 801426c:	2b00      	cmp	r3, #0
 801426e:	d03c      	beq.n	80142ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014278:	e853 3f00 	ldrex	r3, [r3]
 801427c:	623b      	str	r3, [r7, #32]
   return(result);
 801427e:	6a3b      	ldr	r3, [r7, #32]
 8014280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014284:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	461a      	mov	r2, r3
 801428c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801428e:	633b      	str	r3, [r7, #48]	@ 0x30
 8014290:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014292:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014296:	e841 2300 	strex	r3, r2, [r1]
 801429a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801429c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d1e6      	bne.n	8014270 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	3308      	adds	r3, #8
 80142a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142aa:	693b      	ldr	r3, [r7, #16]
 80142ac:	e853 3f00 	ldrex	r3, [r3]
 80142b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	f023 0301 	bic.w	r3, r3, #1
 80142b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	3308      	adds	r3, #8
 80142c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80142c2:	61fa      	str	r2, [r7, #28]
 80142c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142c6:	69b9      	ldr	r1, [r7, #24]
 80142c8:	69fa      	ldr	r2, [r7, #28]
 80142ca:	e841 2300 	strex	r3, r2, [r1]
 80142ce:	617b      	str	r3, [r7, #20]
   return(result);
 80142d0:	697b      	ldr	r3, [r7, #20]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d1e5      	bne.n	80142a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	2220      	movs	r2, #32
 80142da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2200      	movs	r2, #0
 80142e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80142e6:	2303      	movs	r3, #3
 80142e8:	e012      	b.n	8014310 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2220      	movs	r2, #32
 80142ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2220      	movs	r2, #32
 80142f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2200      	movs	r2, #0
 80142fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2200      	movs	r2, #0
 8014304:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2200      	movs	r2, #0
 801430a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801430e:	2300      	movs	r3, #0
}
 8014310:	4618      	mov	r0, r3
 8014312:	3758      	adds	r7, #88	@ 0x58
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}

08014318 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b084      	sub	sp, #16
 801431c:	af00      	add	r7, sp, #0
 801431e:	60f8      	str	r0, [r7, #12]
 8014320:	60b9      	str	r1, [r7, #8]
 8014322:	603b      	str	r3, [r7, #0]
 8014324:	4613      	mov	r3, r2
 8014326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014328:	e04f      	b.n	80143ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801432a:	69bb      	ldr	r3, [r7, #24]
 801432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014330:	d04b      	beq.n	80143ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014332:	f7f2 ffd5 	bl	80072e0 <HAL_GetTick>
 8014336:	4602      	mov	r2, r0
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	1ad3      	subs	r3, r2, r3
 801433c:	69ba      	ldr	r2, [r7, #24]
 801433e:	429a      	cmp	r2, r3
 8014340:	d302      	bcc.n	8014348 <UART_WaitOnFlagUntilTimeout+0x30>
 8014342:	69bb      	ldr	r3, [r7, #24]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d101      	bne.n	801434c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014348:	2303      	movs	r3, #3
 801434a:	e04e      	b.n	80143ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	f003 0304 	and.w	r3, r3, #4
 8014356:	2b00      	cmp	r3, #0
 8014358:	d037      	beq.n	80143ca <UART_WaitOnFlagUntilTimeout+0xb2>
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	2b80      	cmp	r3, #128	@ 0x80
 801435e:	d034      	beq.n	80143ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	2b40      	cmp	r3, #64	@ 0x40
 8014364:	d031      	beq.n	80143ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	69db      	ldr	r3, [r3, #28]
 801436c:	f003 0308 	and.w	r3, r3, #8
 8014370:	2b08      	cmp	r3, #8
 8014372:	d110      	bne.n	8014396 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	2208      	movs	r2, #8
 801437a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801437c:	68f8      	ldr	r0, [r7, #12]
 801437e:	f000 f839 	bl	80143f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	2208      	movs	r2, #8
 8014386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	2200      	movs	r2, #0
 801438e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8014392:	2301      	movs	r3, #1
 8014394:	e029      	b.n	80143ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	69db      	ldr	r3, [r3, #28]
 801439c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80143a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80143a4:	d111      	bne.n	80143ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80143ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80143b0:	68f8      	ldr	r0, [r7, #12]
 80143b2:	f000 f81f 	bl	80143f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	2220      	movs	r2, #32
 80143ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	2200      	movs	r2, #0
 80143c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80143c6:	2303      	movs	r3, #3
 80143c8:	e00f      	b.n	80143ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	69da      	ldr	r2, [r3, #28]
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	4013      	ands	r3, r2
 80143d4:	68ba      	ldr	r2, [r7, #8]
 80143d6:	429a      	cmp	r2, r3
 80143d8:	bf0c      	ite	eq
 80143da:	2301      	moveq	r3, #1
 80143dc:	2300      	movne	r3, #0
 80143de:	b2db      	uxtb	r3, r3
 80143e0:	461a      	mov	r2, r3
 80143e2:	79fb      	ldrb	r3, [r7, #7]
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d0a0      	beq.n	801432a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80143e8:	2300      	movs	r3, #0
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3710      	adds	r7, #16
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}
	...

080143f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80143f4:	b480      	push	{r7}
 80143f6:	b095      	sub	sp, #84	@ 0x54
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014404:	e853 3f00 	ldrex	r3, [r3]
 8014408:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801440a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801440c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014410:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	461a      	mov	r2, r3
 8014418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801441a:	643b      	str	r3, [r7, #64]	@ 0x40
 801441c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801441e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014420:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014422:	e841 2300 	strex	r3, r2, [r1]
 8014426:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801442a:	2b00      	cmp	r3, #0
 801442c:	d1e6      	bne.n	80143fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	3308      	adds	r3, #8
 8014434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014436:	6a3b      	ldr	r3, [r7, #32]
 8014438:	e853 3f00 	ldrex	r3, [r3]
 801443c:	61fb      	str	r3, [r7, #28]
   return(result);
 801443e:	69fa      	ldr	r2, [r7, #28]
 8014440:	4b1e      	ldr	r3, [pc, #120]	@ (80144bc <UART_EndRxTransfer+0xc8>)
 8014442:	4013      	ands	r3, r2
 8014444:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	3308      	adds	r3, #8
 801444c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801444e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014450:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014452:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014456:	e841 2300 	strex	r3, r2, [r1]
 801445a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801445e:	2b00      	cmp	r3, #0
 8014460:	d1e5      	bne.n	801442e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014466:	2b01      	cmp	r3, #1
 8014468:	d118      	bne.n	801449c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	e853 3f00 	ldrex	r3, [r3]
 8014476:	60bb      	str	r3, [r7, #8]
   return(result);
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	f023 0310 	bic.w	r3, r3, #16
 801447e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	461a      	mov	r2, r3
 8014486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014488:	61bb      	str	r3, [r7, #24]
 801448a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801448c:	6979      	ldr	r1, [r7, #20]
 801448e:	69ba      	ldr	r2, [r7, #24]
 8014490:	e841 2300 	strex	r3, r2, [r1]
 8014494:	613b      	str	r3, [r7, #16]
   return(result);
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d1e6      	bne.n	801446a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2220      	movs	r2, #32
 80144a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2200      	movs	r2, #0
 80144a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	2200      	movs	r2, #0
 80144ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80144b0:	bf00      	nop
 80144b2:	3754      	adds	r7, #84	@ 0x54
 80144b4:	46bd      	mov	sp, r7
 80144b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ba:	4770      	bx	lr
 80144bc:	effffffe 	.word	0xeffffffe

080144c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80144c0:	b480      	push	{r7}
 80144c2:	b085      	sub	sp, #20
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80144ce:	2b01      	cmp	r3, #1
 80144d0:	d101      	bne.n	80144d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80144d2:	2302      	movs	r3, #2
 80144d4:	e027      	b.n	8014526 <HAL_UARTEx_DisableFifoMode+0x66>
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2201      	movs	r2, #1
 80144da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2224      	movs	r2, #36	@ 0x24
 80144e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	681a      	ldr	r2, [r3, #0]
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	f022 0201 	bic.w	r2, r2, #1
 80144fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8014504:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	2200      	movs	r2, #0
 801450a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	68fa      	ldr	r2, [r7, #12]
 8014512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2220      	movs	r2, #32
 8014518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2200      	movs	r2, #0
 8014520:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014524:	2300      	movs	r3, #0
}
 8014526:	4618      	mov	r0, r3
 8014528:	3714      	adds	r7, #20
 801452a:	46bd      	mov	sp, r7
 801452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014530:	4770      	bx	lr

08014532 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014532:	b580      	push	{r7, lr}
 8014534:	b084      	sub	sp, #16
 8014536:	af00      	add	r7, sp, #0
 8014538:	6078      	str	r0, [r7, #4]
 801453a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014542:	2b01      	cmp	r3, #1
 8014544:	d101      	bne.n	801454a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014546:	2302      	movs	r3, #2
 8014548:	e02d      	b.n	80145a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2201      	movs	r2, #1
 801454e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	2224      	movs	r2, #36	@ 0x24
 8014556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	681a      	ldr	r2, [r3, #0]
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	f022 0201 	bic.w	r2, r2, #1
 8014570:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	689b      	ldr	r3, [r3, #8]
 8014578:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	683a      	ldr	r2, [r7, #0]
 8014582:	430a      	orrs	r2, r1
 8014584:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f000 f850 	bl	801462c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	68fa      	ldr	r2, [r7, #12]
 8014592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2220      	movs	r2, #32
 8014598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2200      	movs	r2, #0
 80145a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80145a4:	2300      	movs	r3, #0
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	3710      	adds	r7, #16
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}

080145ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80145ae:	b580      	push	{r7, lr}
 80145b0:	b084      	sub	sp, #16
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	6078      	str	r0, [r7, #4]
 80145b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80145be:	2b01      	cmp	r3, #1
 80145c0:	d101      	bne.n	80145c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80145c2:	2302      	movs	r3, #2
 80145c4:	e02d      	b.n	8014622 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2201      	movs	r2, #1
 80145ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2224      	movs	r2, #36	@ 0x24
 80145d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	681a      	ldr	r2, [r3, #0]
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	f022 0201 	bic.w	r2, r2, #1
 80145ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	689b      	ldr	r3, [r3, #8]
 80145f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	683a      	ldr	r2, [r7, #0]
 80145fe:	430a      	orrs	r2, r1
 8014600:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014602:	6878      	ldr	r0, [r7, #4]
 8014604:	f000 f812 	bl	801462c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	68fa      	ldr	r2, [r7, #12]
 801460e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2220      	movs	r2, #32
 8014614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2200      	movs	r2, #0
 801461c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014620:	2300      	movs	r3, #0
}
 8014622:	4618      	mov	r0, r3
 8014624:	3710      	adds	r7, #16
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
	...

0801462c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801462c:	b480      	push	{r7}
 801462e:	b085      	sub	sp, #20
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014638:	2b00      	cmp	r3, #0
 801463a:	d108      	bne.n	801464e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2201      	movs	r2, #1
 8014640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2201      	movs	r2, #1
 8014648:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801464c:	e031      	b.n	80146b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801464e:	2310      	movs	r3, #16
 8014650:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014652:	2310      	movs	r3, #16
 8014654:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	689b      	ldr	r3, [r3, #8]
 801465c:	0e5b      	lsrs	r3, r3, #25
 801465e:	b2db      	uxtb	r3, r3
 8014660:	f003 0307 	and.w	r3, r3, #7
 8014664:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	689b      	ldr	r3, [r3, #8]
 801466c:	0f5b      	lsrs	r3, r3, #29
 801466e:	b2db      	uxtb	r3, r3
 8014670:	f003 0307 	and.w	r3, r3, #7
 8014674:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014676:	7bbb      	ldrb	r3, [r7, #14]
 8014678:	7b3a      	ldrb	r2, [r7, #12]
 801467a:	4911      	ldr	r1, [pc, #68]	@ (80146c0 <UARTEx_SetNbDataToProcess+0x94>)
 801467c:	5c8a      	ldrb	r2, [r1, r2]
 801467e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014682:	7b3a      	ldrb	r2, [r7, #12]
 8014684:	490f      	ldr	r1, [pc, #60]	@ (80146c4 <UARTEx_SetNbDataToProcess+0x98>)
 8014686:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014688:	fb93 f3f2 	sdiv	r3, r3, r2
 801468c:	b29a      	uxth	r2, r3
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014694:	7bfb      	ldrb	r3, [r7, #15]
 8014696:	7b7a      	ldrb	r2, [r7, #13]
 8014698:	4909      	ldr	r1, [pc, #36]	@ (80146c0 <UARTEx_SetNbDataToProcess+0x94>)
 801469a:	5c8a      	ldrb	r2, [r1, r2]
 801469c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80146a0:	7b7a      	ldrb	r2, [r7, #13]
 80146a2:	4908      	ldr	r1, [pc, #32]	@ (80146c4 <UARTEx_SetNbDataToProcess+0x98>)
 80146a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80146a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80146aa:	b29a      	uxth	r2, r3
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80146b2:	bf00      	nop
 80146b4:	3714      	adds	r7, #20
 80146b6:	46bd      	mov	sp, r7
 80146b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146bc:	4770      	bx	lr
 80146be:	bf00      	nop
 80146c0:	0801de78 	.word	0x0801de78
 80146c4:	0801de80 	.word	0x0801de80

080146c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80146c8:	b084      	sub	sp, #16
 80146ca:	b580      	push	{r7, lr}
 80146cc:	b084      	sub	sp, #16
 80146ce:	af00      	add	r7, sp, #0
 80146d0:	6078      	str	r0, [r7, #4]
 80146d2:	f107 001c 	add.w	r0, r7, #28
 80146d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80146da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80146de:	2b01      	cmp	r3, #1
 80146e0:	d121      	bne.n	8014726 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	68da      	ldr	r2, [r3, #12]
 80146f2:	4b2c      	ldr	r3, [pc, #176]	@ (80147a4 <USB_CoreInit+0xdc>)
 80146f4:	4013      	ands	r3, r2
 80146f6:	687a      	ldr	r2, [r7, #4]
 80146f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	68db      	ldr	r3, [r3, #12]
 80146fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014706:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801470a:	2b01      	cmp	r3, #1
 801470c:	d105      	bne.n	801471a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	68db      	ldr	r3, [r3, #12]
 8014712:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f001 faf6 	bl	8015d0c <USB_CoreReset>
 8014720:	4603      	mov	r3, r0
 8014722:	73fb      	strb	r3, [r7, #15]
 8014724:	e01b      	b.n	801475e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	68db      	ldr	r3, [r3, #12]
 801472a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f001 faea 	bl	8015d0c <USB_CoreReset>
 8014738:	4603      	mov	r3, r0
 801473a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801473c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8014740:	2b00      	cmp	r3, #0
 8014742:	d106      	bne.n	8014752 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014748:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	639a      	str	r2, [r3, #56]	@ 0x38
 8014750:	e005      	b.n	801475e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014756:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801475e:	7fbb      	ldrb	r3, [r7, #30]
 8014760:	2b01      	cmp	r3, #1
 8014762:	d116      	bne.n	8014792 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014768:	b29a      	uxth	r2, r3
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014772:	4b0d      	ldr	r3, [pc, #52]	@ (80147a8 <USB_CoreInit+0xe0>)
 8014774:	4313      	orrs	r3, r2
 8014776:	687a      	ldr	r2, [r7, #4]
 8014778:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	689b      	ldr	r3, [r3, #8]
 801477e:	f043 0206 	orr.w	r2, r3, #6
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	689b      	ldr	r3, [r3, #8]
 801478a:	f043 0220 	orr.w	r2, r3, #32
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014792:	7bfb      	ldrb	r3, [r7, #15]
}
 8014794:	4618      	mov	r0, r3
 8014796:	3710      	adds	r7, #16
 8014798:	46bd      	mov	sp, r7
 801479a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801479e:	b004      	add	sp, #16
 80147a0:	4770      	bx	lr
 80147a2:	bf00      	nop
 80147a4:	ffbdffbf 	.word	0xffbdffbf
 80147a8:	03ee0000 	.word	0x03ee0000

080147ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80147ac:	b480      	push	{r7}
 80147ae:	b087      	sub	sp, #28
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	60f8      	str	r0, [r7, #12]
 80147b4:	60b9      	str	r1, [r7, #8]
 80147b6:	4613      	mov	r3, r2
 80147b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80147ba:	79fb      	ldrb	r3, [r7, #7]
 80147bc:	2b02      	cmp	r3, #2
 80147be:	d165      	bne.n	801488c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	4a41      	ldr	r2, [pc, #260]	@ (80148c8 <USB_SetTurnaroundTime+0x11c>)
 80147c4:	4293      	cmp	r3, r2
 80147c6:	d906      	bls.n	80147d6 <USB_SetTurnaroundTime+0x2a>
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	4a40      	ldr	r2, [pc, #256]	@ (80148cc <USB_SetTurnaroundTime+0x120>)
 80147cc:	4293      	cmp	r3, r2
 80147ce:	d202      	bcs.n	80147d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80147d0:	230f      	movs	r3, #15
 80147d2:	617b      	str	r3, [r7, #20]
 80147d4:	e062      	b.n	801489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	4a3c      	ldr	r2, [pc, #240]	@ (80148cc <USB_SetTurnaroundTime+0x120>)
 80147da:	4293      	cmp	r3, r2
 80147dc:	d306      	bcc.n	80147ec <USB_SetTurnaroundTime+0x40>
 80147de:	68bb      	ldr	r3, [r7, #8]
 80147e0:	4a3b      	ldr	r2, [pc, #236]	@ (80148d0 <USB_SetTurnaroundTime+0x124>)
 80147e2:	4293      	cmp	r3, r2
 80147e4:	d202      	bcs.n	80147ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80147e6:	230e      	movs	r3, #14
 80147e8:	617b      	str	r3, [r7, #20]
 80147ea:	e057      	b.n	801489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	4a38      	ldr	r2, [pc, #224]	@ (80148d0 <USB_SetTurnaroundTime+0x124>)
 80147f0:	4293      	cmp	r3, r2
 80147f2:	d306      	bcc.n	8014802 <USB_SetTurnaroundTime+0x56>
 80147f4:	68bb      	ldr	r3, [r7, #8]
 80147f6:	4a37      	ldr	r2, [pc, #220]	@ (80148d4 <USB_SetTurnaroundTime+0x128>)
 80147f8:	4293      	cmp	r3, r2
 80147fa:	d202      	bcs.n	8014802 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80147fc:	230d      	movs	r3, #13
 80147fe:	617b      	str	r3, [r7, #20]
 8014800:	e04c      	b.n	801489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014802:	68bb      	ldr	r3, [r7, #8]
 8014804:	4a33      	ldr	r2, [pc, #204]	@ (80148d4 <USB_SetTurnaroundTime+0x128>)
 8014806:	4293      	cmp	r3, r2
 8014808:	d306      	bcc.n	8014818 <USB_SetTurnaroundTime+0x6c>
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	4a32      	ldr	r2, [pc, #200]	@ (80148d8 <USB_SetTurnaroundTime+0x12c>)
 801480e:	4293      	cmp	r3, r2
 8014810:	d802      	bhi.n	8014818 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014812:	230c      	movs	r3, #12
 8014814:	617b      	str	r3, [r7, #20]
 8014816:	e041      	b.n	801489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	4a2f      	ldr	r2, [pc, #188]	@ (80148d8 <USB_SetTurnaroundTime+0x12c>)
 801481c:	4293      	cmp	r3, r2
 801481e:	d906      	bls.n	801482e <USB_SetTurnaroundTime+0x82>
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	4a2e      	ldr	r2, [pc, #184]	@ (80148dc <USB_SetTurnaroundTime+0x130>)
 8014824:	4293      	cmp	r3, r2
 8014826:	d802      	bhi.n	801482e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014828:	230b      	movs	r3, #11
 801482a:	617b      	str	r3, [r7, #20]
 801482c:	e036      	b.n	801489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	4a2a      	ldr	r2, [pc, #168]	@ (80148dc <USB_SetTurnaroundTime+0x130>)
 8014832:	4293      	cmp	r3, r2
 8014834:	d906      	bls.n	8014844 <USB_SetTurnaroundTime+0x98>
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	4a29      	ldr	r2, [pc, #164]	@ (80148e0 <USB_SetTurnaroundTime+0x134>)
 801483a:	4293      	cmp	r3, r2
 801483c:	d802      	bhi.n	8014844 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801483e:	230a      	movs	r3, #10
 8014840:	617b      	str	r3, [r7, #20]
 8014842:	e02b      	b.n	801489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	4a26      	ldr	r2, [pc, #152]	@ (80148e0 <USB_SetTurnaroundTime+0x134>)
 8014848:	4293      	cmp	r3, r2
 801484a:	d906      	bls.n	801485a <USB_SetTurnaroundTime+0xae>
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	4a25      	ldr	r2, [pc, #148]	@ (80148e4 <USB_SetTurnaroundTime+0x138>)
 8014850:	4293      	cmp	r3, r2
 8014852:	d202      	bcs.n	801485a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014854:	2309      	movs	r3, #9
 8014856:	617b      	str	r3, [r7, #20]
 8014858:	e020      	b.n	801489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	4a21      	ldr	r2, [pc, #132]	@ (80148e4 <USB_SetTurnaroundTime+0x138>)
 801485e:	4293      	cmp	r3, r2
 8014860:	d306      	bcc.n	8014870 <USB_SetTurnaroundTime+0xc4>
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	4a20      	ldr	r2, [pc, #128]	@ (80148e8 <USB_SetTurnaroundTime+0x13c>)
 8014866:	4293      	cmp	r3, r2
 8014868:	d802      	bhi.n	8014870 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801486a:	2308      	movs	r3, #8
 801486c:	617b      	str	r3, [r7, #20]
 801486e:	e015      	b.n	801489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	4a1d      	ldr	r2, [pc, #116]	@ (80148e8 <USB_SetTurnaroundTime+0x13c>)
 8014874:	4293      	cmp	r3, r2
 8014876:	d906      	bls.n	8014886 <USB_SetTurnaroundTime+0xda>
 8014878:	68bb      	ldr	r3, [r7, #8]
 801487a:	4a1c      	ldr	r2, [pc, #112]	@ (80148ec <USB_SetTurnaroundTime+0x140>)
 801487c:	4293      	cmp	r3, r2
 801487e:	d202      	bcs.n	8014886 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014880:	2307      	movs	r3, #7
 8014882:	617b      	str	r3, [r7, #20]
 8014884:	e00a      	b.n	801489c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014886:	2306      	movs	r3, #6
 8014888:	617b      	str	r3, [r7, #20]
 801488a:	e007      	b.n	801489c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801488c:	79fb      	ldrb	r3, [r7, #7]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d102      	bne.n	8014898 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014892:	2309      	movs	r3, #9
 8014894:	617b      	str	r3, [r7, #20]
 8014896:	e001      	b.n	801489c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014898:	2309      	movs	r3, #9
 801489a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	68db      	ldr	r3, [r3, #12]
 80148a0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	68da      	ldr	r2, [r3, #12]
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	029b      	lsls	r3, r3, #10
 80148b0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80148b4:	431a      	orrs	r2, r3
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80148ba:	2300      	movs	r3, #0
}
 80148bc:	4618      	mov	r0, r3
 80148be:	371c      	adds	r7, #28
 80148c0:	46bd      	mov	sp, r7
 80148c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c6:	4770      	bx	lr
 80148c8:	00d8acbf 	.word	0x00d8acbf
 80148cc:	00e4e1c0 	.word	0x00e4e1c0
 80148d0:	00f42400 	.word	0x00f42400
 80148d4:	01067380 	.word	0x01067380
 80148d8:	011a499f 	.word	0x011a499f
 80148dc:	01312cff 	.word	0x01312cff
 80148e0:	014ca43f 	.word	0x014ca43f
 80148e4:	016e3600 	.word	0x016e3600
 80148e8:	01a6ab1f 	.word	0x01a6ab1f
 80148ec:	01e84800 	.word	0x01e84800

080148f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80148f0:	b480      	push	{r7}
 80148f2:	b083      	sub	sp, #12
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	689b      	ldr	r3, [r3, #8]
 80148fc:	f043 0201 	orr.w	r2, r3, #1
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014904:	2300      	movs	r3, #0
}
 8014906:	4618      	mov	r0, r3
 8014908:	370c      	adds	r7, #12
 801490a:	46bd      	mov	sp, r7
 801490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014910:	4770      	bx	lr

08014912 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014912:	b480      	push	{r7}
 8014914:	b083      	sub	sp, #12
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	689b      	ldr	r3, [r3, #8]
 801491e:	f023 0201 	bic.w	r2, r3, #1
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014926:	2300      	movs	r3, #0
}
 8014928:	4618      	mov	r0, r3
 801492a:	370c      	adds	r7, #12
 801492c:	46bd      	mov	sp, r7
 801492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014932:	4770      	bx	lr

08014934 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b084      	sub	sp, #16
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	460b      	mov	r3, r1
 801493e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014940:	2300      	movs	r3, #0
 8014942:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	68db      	ldr	r3, [r3, #12]
 8014948:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014950:	78fb      	ldrb	r3, [r7, #3]
 8014952:	2b01      	cmp	r3, #1
 8014954:	d115      	bne.n	8014982 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	68db      	ldr	r3, [r3, #12]
 801495a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014962:	200a      	movs	r0, #10
 8014964:	f7f2 fcc8 	bl	80072f8 <HAL_Delay>
      ms += 10U;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	330a      	adds	r3, #10
 801496c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f001 f93b 	bl	8015bea <USB_GetMode>
 8014974:	4603      	mov	r3, r0
 8014976:	2b01      	cmp	r3, #1
 8014978:	d01e      	beq.n	80149b8 <USB_SetCurrentMode+0x84>
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	2bc7      	cmp	r3, #199	@ 0xc7
 801497e:	d9f0      	bls.n	8014962 <USB_SetCurrentMode+0x2e>
 8014980:	e01a      	b.n	80149b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014982:	78fb      	ldrb	r3, [r7, #3]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d115      	bne.n	80149b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	68db      	ldr	r3, [r3, #12]
 801498c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014994:	200a      	movs	r0, #10
 8014996:	f7f2 fcaf 	bl	80072f8 <HAL_Delay>
      ms += 10U;
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	330a      	adds	r3, #10
 801499e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f001 f922 	bl	8015bea <USB_GetMode>
 80149a6:	4603      	mov	r3, r0
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d005      	beq.n	80149b8 <USB_SetCurrentMode+0x84>
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80149b0:	d9f0      	bls.n	8014994 <USB_SetCurrentMode+0x60>
 80149b2:	e001      	b.n	80149b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80149b4:	2301      	movs	r3, #1
 80149b6:	e005      	b.n	80149c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80149bc:	d101      	bne.n	80149c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80149be:	2301      	movs	r3, #1
 80149c0:	e000      	b.n	80149c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80149c2:	2300      	movs	r3, #0
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3710      	adds	r7, #16
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}

080149cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80149cc:	b084      	sub	sp, #16
 80149ce:	b580      	push	{r7, lr}
 80149d0:	b086      	sub	sp, #24
 80149d2:	af00      	add	r7, sp, #0
 80149d4:	6078      	str	r0, [r7, #4]
 80149d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80149da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80149de:	2300      	movs	r3, #0
 80149e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80149e6:	2300      	movs	r3, #0
 80149e8:	613b      	str	r3, [r7, #16]
 80149ea:	e009      	b.n	8014a00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80149ec:	687a      	ldr	r2, [r7, #4]
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	3340      	adds	r3, #64	@ 0x40
 80149f2:	009b      	lsls	r3, r3, #2
 80149f4:	4413      	add	r3, r2
 80149f6:	2200      	movs	r2, #0
 80149f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80149fa:	693b      	ldr	r3, [r7, #16]
 80149fc:	3301      	adds	r3, #1
 80149fe:	613b      	str	r3, [r7, #16]
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	2b0e      	cmp	r3, #14
 8014a04:	d9f2      	bls.n	80149ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014a06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d11c      	bne.n	8014a48 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a14:	685b      	ldr	r3, [r3, #4]
 8014a16:	68fa      	ldr	r2, [r7, #12]
 8014a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014a1c:	f043 0302 	orr.w	r3, r3, #2
 8014a20:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a26:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	601a      	str	r2, [r3, #0]
 8014a46:	e005      	b.n	8014a54 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a4c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014a5a:	461a      	mov	r2, r3
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014a60:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8014a64:	2b01      	cmp	r3, #1
 8014a66:	d10d      	bne.n	8014a84 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014a68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d104      	bne.n	8014a7a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014a70:	2100      	movs	r1, #0
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f000 f968 	bl	8014d48 <USB_SetDevSpeed>
 8014a78:	e008      	b.n	8014a8c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014a7a:	2101      	movs	r1, #1
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f000 f963 	bl	8014d48 <USB_SetDevSpeed>
 8014a82:	e003      	b.n	8014a8c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014a84:	2103      	movs	r1, #3
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f000 f95e 	bl	8014d48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014a8c:	2110      	movs	r1, #16
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f000 f8fa 	bl	8014c88 <USB_FlushTxFifo>
 8014a94:	4603      	mov	r3, r0
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d001      	beq.n	8014a9e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f000 f924 	bl	8014cec <USB_FlushRxFifo>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d001      	beq.n	8014aae <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8014aaa:	2301      	movs	r3, #1
 8014aac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014ab4:	461a      	mov	r2, r3
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014acc:	461a      	mov	r2, r3
 8014ace:	2300      	movs	r3, #0
 8014ad0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	613b      	str	r3, [r7, #16]
 8014ad6:	e043      	b.n	8014b60 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014ad8:	693b      	ldr	r3, [r7, #16]
 8014ada:	015a      	lsls	r2, r3, #5
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	4413      	add	r3, r2
 8014ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014aea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014aee:	d118      	bne.n	8014b22 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014af0:	693b      	ldr	r3, [r7, #16]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d10a      	bne.n	8014b0c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014af6:	693b      	ldr	r3, [r7, #16]
 8014af8:	015a      	lsls	r2, r3, #5
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	4413      	add	r3, r2
 8014afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b02:	461a      	mov	r2, r3
 8014b04:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014b08:	6013      	str	r3, [r2, #0]
 8014b0a:	e013      	b.n	8014b34 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014b0c:	693b      	ldr	r3, [r7, #16]
 8014b0e:	015a      	lsls	r2, r3, #5
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	4413      	add	r3, r2
 8014b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b18:	461a      	mov	r2, r3
 8014b1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014b1e:	6013      	str	r3, [r2, #0]
 8014b20:	e008      	b.n	8014b34 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014b22:	693b      	ldr	r3, [r7, #16]
 8014b24:	015a      	lsls	r2, r3, #5
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	4413      	add	r3, r2
 8014b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b2e:	461a      	mov	r2, r3
 8014b30:	2300      	movs	r3, #0
 8014b32:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	015a      	lsls	r2, r3, #5
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	4413      	add	r3, r2
 8014b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b40:	461a      	mov	r2, r3
 8014b42:	2300      	movs	r3, #0
 8014b44:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014b46:	693b      	ldr	r3, [r7, #16]
 8014b48:	015a      	lsls	r2, r3, #5
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	4413      	add	r3, r2
 8014b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b52:	461a      	mov	r2, r3
 8014b54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014b58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014b5a:	693b      	ldr	r3, [r7, #16]
 8014b5c:	3301      	adds	r3, #1
 8014b5e:	613b      	str	r3, [r7, #16]
 8014b60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014b64:	461a      	mov	r2, r3
 8014b66:	693b      	ldr	r3, [r7, #16]
 8014b68:	4293      	cmp	r3, r2
 8014b6a:	d3b5      	bcc.n	8014ad8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	613b      	str	r3, [r7, #16]
 8014b70:	e043      	b.n	8014bfa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	015a      	lsls	r2, r3, #5
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	4413      	add	r3, r2
 8014b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014b84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014b88:	d118      	bne.n	8014bbc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8014b8a:	693b      	ldr	r3, [r7, #16]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d10a      	bne.n	8014ba6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014b90:	693b      	ldr	r3, [r7, #16]
 8014b92:	015a      	lsls	r2, r3, #5
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	4413      	add	r3, r2
 8014b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b9c:	461a      	mov	r2, r3
 8014b9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014ba2:	6013      	str	r3, [r2, #0]
 8014ba4:	e013      	b.n	8014bce <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	015a      	lsls	r2, r3, #5
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	4413      	add	r3, r2
 8014bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bb2:	461a      	mov	r2, r3
 8014bb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014bb8:	6013      	str	r3, [r2, #0]
 8014bba:	e008      	b.n	8014bce <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014bbc:	693b      	ldr	r3, [r7, #16]
 8014bbe:	015a      	lsls	r2, r3, #5
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	4413      	add	r3, r2
 8014bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bc8:	461a      	mov	r2, r3
 8014bca:	2300      	movs	r3, #0
 8014bcc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014bce:	693b      	ldr	r3, [r7, #16]
 8014bd0:	015a      	lsls	r2, r3, #5
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	4413      	add	r3, r2
 8014bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bda:	461a      	mov	r2, r3
 8014bdc:	2300      	movs	r3, #0
 8014bde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	015a      	lsls	r2, r3, #5
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	4413      	add	r3, r2
 8014be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bec:	461a      	mov	r2, r3
 8014bee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014bf2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014bf4:	693b      	ldr	r3, [r7, #16]
 8014bf6:	3301      	adds	r3, #1
 8014bf8:	613b      	str	r3, [r7, #16]
 8014bfa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014bfe:	461a      	mov	r2, r3
 8014c00:	693b      	ldr	r3, [r7, #16]
 8014c02:	4293      	cmp	r3, r2
 8014c04:	d3b5      	bcc.n	8014b72 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c0c:	691b      	ldr	r3, [r3, #16]
 8014c0e:	68fa      	ldr	r2, [r7, #12]
 8014c10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014c18:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8014c26:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014c28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d105      	bne.n	8014c3c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	699b      	ldr	r3, [r3, #24]
 8014c34:	f043 0210 	orr.w	r2, r3, #16
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	699a      	ldr	r2, [r3, #24]
 8014c40:	4b0f      	ldr	r3, [pc, #60]	@ (8014c80 <USB_DevInit+0x2b4>)
 8014c42:	4313      	orrs	r3, r2
 8014c44:	687a      	ldr	r2, [r7, #4]
 8014c46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014c48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d005      	beq.n	8014c5c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	699b      	ldr	r3, [r3, #24]
 8014c54:	f043 0208 	orr.w	r2, r3, #8
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8014c5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014c60:	2b01      	cmp	r3, #1
 8014c62:	d105      	bne.n	8014c70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	699a      	ldr	r2, [r3, #24]
 8014c68:	4b06      	ldr	r3, [pc, #24]	@ (8014c84 <USB_DevInit+0x2b8>)
 8014c6a:	4313      	orrs	r3, r2
 8014c6c:	687a      	ldr	r2, [r7, #4]
 8014c6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3718      	adds	r7, #24
 8014c76:	46bd      	mov	sp, r7
 8014c78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014c7c:	b004      	add	sp, #16
 8014c7e:	4770      	bx	lr
 8014c80:	803c3800 	.word	0x803c3800
 8014c84:	40000004 	.word	0x40000004

08014c88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014c88:	b480      	push	{r7}
 8014c8a:	b085      	sub	sp, #20
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
 8014c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014c92:	2300      	movs	r3, #0
 8014c94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	3301      	adds	r3, #1
 8014c9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014ca2:	d901      	bls.n	8014ca8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014ca4:	2303      	movs	r3, #3
 8014ca6:	e01b      	b.n	8014ce0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	691b      	ldr	r3, [r3, #16]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	daf2      	bge.n	8014c96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	019b      	lsls	r3, r3, #6
 8014cb8:	f043 0220 	orr.w	r2, r3, #32
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	3301      	adds	r3, #1
 8014cc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014ccc:	d901      	bls.n	8014cd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014cce:	2303      	movs	r3, #3
 8014cd0:	e006      	b.n	8014ce0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	691b      	ldr	r3, [r3, #16]
 8014cd6:	f003 0320 	and.w	r3, r3, #32
 8014cda:	2b20      	cmp	r3, #32
 8014cdc:	d0f0      	beq.n	8014cc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014cde:	2300      	movs	r3, #0
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	3714      	adds	r7, #20
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cea:	4770      	bx	lr

08014cec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014cec:	b480      	push	{r7}
 8014cee:	b085      	sub	sp, #20
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	3301      	adds	r3, #1
 8014cfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014d04:	d901      	bls.n	8014d0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014d06:	2303      	movs	r3, #3
 8014d08:	e018      	b.n	8014d3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	691b      	ldr	r3, [r3, #16]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	daf2      	bge.n	8014cf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014d12:	2300      	movs	r3, #0
 8014d14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	2210      	movs	r2, #16
 8014d1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	3301      	adds	r3, #1
 8014d20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014d28:	d901      	bls.n	8014d2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014d2a:	2303      	movs	r3, #3
 8014d2c:	e006      	b.n	8014d3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	691b      	ldr	r3, [r3, #16]
 8014d32:	f003 0310 	and.w	r3, r3, #16
 8014d36:	2b10      	cmp	r3, #16
 8014d38:	d0f0      	beq.n	8014d1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014d3a:	2300      	movs	r3, #0
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3714      	adds	r7, #20
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr

08014d48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014d48:	b480      	push	{r7}
 8014d4a:	b085      	sub	sp, #20
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	460b      	mov	r3, r1
 8014d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d5e:	681a      	ldr	r2, [r3, #0]
 8014d60:	78fb      	ldrb	r3, [r7, #3]
 8014d62:	68f9      	ldr	r1, [r7, #12]
 8014d64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014d68:	4313      	orrs	r3, r2
 8014d6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014d6c:	2300      	movs	r3, #0
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3714      	adds	r7, #20
 8014d72:	46bd      	mov	sp, r7
 8014d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d78:	4770      	bx	lr

08014d7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8014d7a:	b480      	push	{r7}
 8014d7c:	b087      	sub	sp, #28
 8014d7e:	af00      	add	r7, sp, #0
 8014d80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d8c:	689b      	ldr	r3, [r3, #8]
 8014d8e:	f003 0306 	and.w	r3, r3, #6
 8014d92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d102      	bne.n	8014da0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	75fb      	strb	r3, [r7, #23]
 8014d9e:	e00a      	b.n	8014db6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	2b02      	cmp	r3, #2
 8014da4:	d002      	beq.n	8014dac <USB_GetDevSpeed+0x32>
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	2b06      	cmp	r3, #6
 8014daa:	d102      	bne.n	8014db2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014dac:	2302      	movs	r3, #2
 8014dae:	75fb      	strb	r3, [r7, #23]
 8014db0:	e001      	b.n	8014db6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014db2:	230f      	movs	r3, #15
 8014db4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	371c      	adds	r7, #28
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc2:	4770      	bx	lr

08014dc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014dc4:	b480      	push	{r7}
 8014dc6:	b085      	sub	sp, #20
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	785b      	ldrb	r3, [r3, #1]
 8014ddc:	2b01      	cmp	r3, #1
 8014dde:	d139      	bne.n	8014e54 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014de6:	69da      	ldr	r2, [r3, #28]
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	f003 030f 	and.w	r3, r3, #15
 8014df0:	2101      	movs	r1, #1
 8014df2:	fa01 f303 	lsl.w	r3, r1, r3
 8014df6:	b29b      	uxth	r3, r3
 8014df8:	68f9      	ldr	r1, [r7, #12]
 8014dfa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014dfe:	4313      	orrs	r3, r2
 8014e00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	015a      	lsls	r2, r3, #5
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	4413      	add	r3, r2
 8014e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d153      	bne.n	8014ec0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	015a      	lsls	r2, r3, #5
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	4413      	add	r3, r2
 8014e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e24:	681a      	ldr	r2, [r3, #0]
 8014e26:	683b      	ldr	r3, [r7, #0]
 8014e28:	689b      	ldr	r3, [r3, #8]
 8014e2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	791b      	ldrb	r3, [r3, #4]
 8014e32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014e34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	059b      	lsls	r3, r3, #22
 8014e3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014e3c:	431a      	orrs	r2, r3
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	0159      	lsls	r1, r3, #5
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	440b      	add	r3, r1
 8014e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e4a:	4619      	mov	r1, r3
 8014e4c:	4b20      	ldr	r3, [pc, #128]	@ (8014ed0 <USB_ActivateEndpoint+0x10c>)
 8014e4e:	4313      	orrs	r3, r2
 8014e50:	600b      	str	r3, [r1, #0]
 8014e52:	e035      	b.n	8014ec0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014e5a:	69da      	ldr	r2, [r3, #28]
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	781b      	ldrb	r3, [r3, #0]
 8014e60:	f003 030f 	and.w	r3, r3, #15
 8014e64:	2101      	movs	r1, #1
 8014e66:	fa01 f303 	lsl.w	r3, r1, r3
 8014e6a:	041b      	lsls	r3, r3, #16
 8014e6c:	68f9      	ldr	r1, [r7, #12]
 8014e6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014e72:	4313      	orrs	r3, r2
 8014e74:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014e76:	68bb      	ldr	r3, [r7, #8]
 8014e78:	015a      	lsls	r2, r3, #5
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	4413      	add	r3, r2
 8014e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d119      	bne.n	8014ec0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014e8c:	68bb      	ldr	r3, [r7, #8]
 8014e8e:	015a      	lsls	r2, r3, #5
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	4413      	add	r3, r2
 8014e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e98:	681a      	ldr	r2, [r3, #0]
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	689b      	ldr	r3, [r3, #8]
 8014e9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	791b      	ldrb	r3, [r3, #4]
 8014ea6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014ea8:	430b      	orrs	r3, r1
 8014eaa:	431a      	orrs	r2, r3
 8014eac:	68bb      	ldr	r3, [r7, #8]
 8014eae:	0159      	lsls	r1, r3, #5
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	440b      	add	r3, r1
 8014eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014eb8:	4619      	mov	r1, r3
 8014eba:	4b05      	ldr	r3, [pc, #20]	@ (8014ed0 <USB_ActivateEndpoint+0x10c>)
 8014ebc:	4313      	orrs	r3, r2
 8014ebe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014ec0:	2300      	movs	r3, #0
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3714      	adds	r7, #20
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr
 8014ece:	bf00      	nop
 8014ed0:	10008000 	.word	0x10008000

08014ed4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014ed4:	b480      	push	{r7}
 8014ed6:	b085      	sub	sp, #20
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	781b      	ldrb	r3, [r3, #0]
 8014ee6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	785b      	ldrb	r3, [r3, #1]
 8014eec:	2b01      	cmp	r3, #1
 8014eee:	d161      	bne.n	8014fb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	015a      	lsls	r2, r3, #5
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	4413      	add	r3, r2
 8014ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014f02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014f06:	d11f      	bne.n	8014f48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	015a      	lsls	r2, r3, #5
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	4413      	add	r3, r2
 8014f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	68ba      	ldr	r2, [r7, #8]
 8014f18:	0151      	lsls	r1, r2, #5
 8014f1a:	68fa      	ldr	r2, [r7, #12]
 8014f1c:	440a      	add	r2, r1
 8014f1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014f22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014f26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014f28:	68bb      	ldr	r3, [r7, #8]
 8014f2a:	015a      	lsls	r2, r3, #5
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	4413      	add	r3, r2
 8014f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	68ba      	ldr	r2, [r7, #8]
 8014f38:	0151      	lsls	r1, r2, #5
 8014f3a:	68fa      	ldr	r2, [r7, #12]
 8014f3c:	440a      	add	r2, r1
 8014f3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014f42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014f46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	781b      	ldrb	r3, [r3, #0]
 8014f54:	f003 030f 	and.w	r3, r3, #15
 8014f58:	2101      	movs	r1, #1
 8014f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8014f5e:	b29b      	uxth	r3, r3
 8014f60:	43db      	mvns	r3, r3
 8014f62:	68f9      	ldr	r1, [r7, #12]
 8014f64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014f68:	4013      	ands	r3, r2
 8014f6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f72:	69da      	ldr	r2, [r3, #28]
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	781b      	ldrb	r3, [r3, #0]
 8014f78:	f003 030f 	and.w	r3, r3, #15
 8014f7c:	2101      	movs	r1, #1
 8014f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8014f82:	b29b      	uxth	r3, r3
 8014f84:	43db      	mvns	r3, r3
 8014f86:	68f9      	ldr	r1, [r7, #12]
 8014f88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014f8c:	4013      	ands	r3, r2
 8014f8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	015a      	lsls	r2, r3, #5
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	4413      	add	r3, r2
 8014f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f9c:	681a      	ldr	r2, [r3, #0]
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	0159      	lsls	r1, r3, #5
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	440b      	add	r3, r1
 8014fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014faa:	4619      	mov	r1, r3
 8014fac:	4b35      	ldr	r3, [pc, #212]	@ (8015084 <USB_DeactivateEndpoint+0x1b0>)
 8014fae:	4013      	ands	r3, r2
 8014fb0:	600b      	str	r3, [r1, #0]
 8014fb2:	e060      	b.n	8015076 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014fb4:	68bb      	ldr	r3, [r7, #8]
 8014fb6:	015a      	lsls	r2, r3, #5
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	4413      	add	r3, r2
 8014fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014fca:	d11f      	bne.n	801500c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	015a      	lsls	r2, r3, #5
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	4413      	add	r3, r2
 8014fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	68ba      	ldr	r2, [r7, #8]
 8014fdc:	0151      	lsls	r1, r2, #5
 8014fde:	68fa      	ldr	r2, [r7, #12]
 8014fe0:	440a      	add	r2, r1
 8014fe2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014fe6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014fea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	015a      	lsls	r2, r3, #5
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	4413      	add	r3, r2
 8014ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	68ba      	ldr	r2, [r7, #8]
 8014ffc:	0151      	lsls	r1, r2, #5
 8014ffe:	68fa      	ldr	r2, [r7, #12]
 8015000:	440a      	add	r2, r1
 8015002:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015006:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801500a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	781b      	ldrb	r3, [r3, #0]
 8015018:	f003 030f 	and.w	r3, r3, #15
 801501c:	2101      	movs	r1, #1
 801501e:	fa01 f303 	lsl.w	r3, r1, r3
 8015022:	041b      	lsls	r3, r3, #16
 8015024:	43db      	mvns	r3, r3
 8015026:	68f9      	ldr	r1, [r7, #12]
 8015028:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801502c:	4013      	ands	r3, r2
 801502e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015036:	69da      	ldr	r2, [r3, #28]
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	781b      	ldrb	r3, [r3, #0]
 801503c:	f003 030f 	and.w	r3, r3, #15
 8015040:	2101      	movs	r1, #1
 8015042:	fa01 f303 	lsl.w	r3, r1, r3
 8015046:	041b      	lsls	r3, r3, #16
 8015048:	43db      	mvns	r3, r3
 801504a:	68f9      	ldr	r1, [r7, #12]
 801504c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015050:	4013      	ands	r3, r2
 8015052:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	015a      	lsls	r2, r3, #5
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	4413      	add	r3, r2
 801505c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015060:	681a      	ldr	r2, [r3, #0]
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	0159      	lsls	r1, r3, #5
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	440b      	add	r3, r1
 801506a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801506e:	4619      	mov	r1, r3
 8015070:	4b05      	ldr	r3, [pc, #20]	@ (8015088 <USB_DeactivateEndpoint+0x1b4>)
 8015072:	4013      	ands	r3, r2
 8015074:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8015076:	2300      	movs	r3, #0
}
 8015078:	4618      	mov	r0, r3
 801507a:	3714      	adds	r7, #20
 801507c:	46bd      	mov	sp, r7
 801507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015082:	4770      	bx	lr
 8015084:	ec337800 	.word	0xec337800
 8015088:	eff37800 	.word	0xeff37800

0801508c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b08a      	sub	sp, #40	@ 0x28
 8015090:	af02      	add	r7, sp, #8
 8015092:	60f8      	str	r0, [r7, #12]
 8015094:	60b9      	str	r1, [r7, #8]
 8015096:	4613      	mov	r3, r2
 8015098:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801509e:	68bb      	ldr	r3, [r7, #8]
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	785b      	ldrb	r3, [r3, #1]
 80150a8:	2b01      	cmp	r3, #1
 80150aa:	f040 8181 	bne.w	80153b0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80150ae:	68bb      	ldr	r3, [r7, #8]
 80150b0:	691b      	ldr	r3, [r3, #16]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d132      	bne.n	801511c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80150b6:	69bb      	ldr	r3, [r7, #24]
 80150b8:	015a      	lsls	r2, r3, #5
 80150ba:	69fb      	ldr	r3, [r7, #28]
 80150bc:	4413      	add	r3, r2
 80150be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150c2:	691a      	ldr	r2, [r3, #16]
 80150c4:	69bb      	ldr	r3, [r7, #24]
 80150c6:	0159      	lsls	r1, r3, #5
 80150c8:	69fb      	ldr	r3, [r7, #28]
 80150ca:	440b      	add	r3, r1
 80150cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150d0:	4619      	mov	r1, r3
 80150d2:	4ba5      	ldr	r3, [pc, #660]	@ (8015368 <USB_EPStartXfer+0x2dc>)
 80150d4:	4013      	ands	r3, r2
 80150d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80150d8:	69bb      	ldr	r3, [r7, #24]
 80150da:	015a      	lsls	r2, r3, #5
 80150dc:	69fb      	ldr	r3, [r7, #28]
 80150de:	4413      	add	r3, r2
 80150e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150e4:	691b      	ldr	r3, [r3, #16]
 80150e6:	69ba      	ldr	r2, [r7, #24]
 80150e8:	0151      	lsls	r1, r2, #5
 80150ea:	69fa      	ldr	r2, [r7, #28]
 80150ec:	440a      	add	r2, r1
 80150ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80150f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80150f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80150f8:	69bb      	ldr	r3, [r7, #24]
 80150fa:	015a      	lsls	r2, r3, #5
 80150fc:	69fb      	ldr	r3, [r7, #28]
 80150fe:	4413      	add	r3, r2
 8015100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015104:	691a      	ldr	r2, [r3, #16]
 8015106:	69bb      	ldr	r3, [r7, #24]
 8015108:	0159      	lsls	r1, r3, #5
 801510a:	69fb      	ldr	r3, [r7, #28]
 801510c:	440b      	add	r3, r1
 801510e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015112:	4619      	mov	r1, r3
 8015114:	4b95      	ldr	r3, [pc, #596]	@ (801536c <USB_EPStartXfer+0x2e0>)
 8015116:	4013      	ands	r3, r2
 8015118:	610b      	str	r3, [r1, #16]
 801511a:	e092      	b.n	8015242 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801511c:	69bb      	ldr	r3, [r7, #24]
 801511e:	015a      	lsls	r2, r3, #5
 8015120:	69fb      	ldr	r3, [r7, #28]
 8015122:	4413      	add	r3, r2
 8015124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015128:	691a      	ldr	r2, [r3, #16]
 801512a:	69bb      	ldr	r3, [r7, #24]
 801512c:	0159      	lsls	r1, r3, #5
 801512e:	69fb      	ldr	r3, [r7, #28]
 8015130:	440b      	add	r3, r1
 8015132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015136:	4619      	mov	r1, r3
 8015138:	4b8c      	ldr	r3, [pc, #560]	@ (801536c <USB_EPStartXfer+0x2e0>)
 801513a:	4013      	ands	r3, r2
 801513c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801513e:	69bb      	ldr	r3, [r7, #24]
 8015140:	015a      	lsls	r2, r3, #5
 8015142:	69fb      	ldr	r3, [r7, #28]
 8015144:	4413      	add	r3, r2
 8015146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801514a:	691a      	ldr	r2, [r3, #16]
 801514c:	69bb      	ldr	r3, [r7, #24]
 801514e:	0159      	lsls	r1, r3, #5
 8015150:	69fb      	ldr	r3, [r7, #28]
 8015152:	440b      	add	r3, r1
 8015154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015158:	4619      	mov	r1, r3
 801515a:	4b83      	ldr	r3, [pc, #524]	@ (8015368 <USB_EPStartXfer+0x2dc>)
 801515c:	4013      	ands	r3, r2
 801515e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8015160:	69bb      	ldr	r3, [r7, #24]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d11a      	bne.n	801519c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8015166:	68bb      	ldr	r3, [r7, #8]
 8015168:	691a      	ldr	r2, [r3, #16]
 801516a:	68bb      	ldr	r3, [r7, #8]
 801516c:	689b      	ldr	r3, [r3, #8]
 801516e:	429a      	cmp	r2, r3
 8015170:	d903      	bls.n	801517a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8015172:	68bb      	ldr	r3, [r7, #8]
 8015174:	689a      	ldr	r2, [r3, #8]
 8015176:	68bb      	ldr	r3, [r7, #8]
 8015178:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801517a:	69bb      	ldr	r3, [r7, #24]
 801517c:	015a      	lsls	r2, r3, #5
 801517e:	69fb      	ldr	r3, [r7, #28]
 8015180:	4413      	add	r3, r2
 8015182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015186:	691b      	ldr	r3, [r3, #16]
 8015188:	69ba      	ldr	r2, [r7, #24]
 801518a:	0151      	lsls	r1, r2, #5
 801518c:	69fa      	ldr	r2, [r7, #28]
 801518e:	440a      	add	r2, r1
 8015190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015194:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015198:	6113      	str	r3, [r2, #16]
 801519a:	e01b      	b.n	80151d4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801519c:	69bb      	ldr	r3, [r7, #24]
 801519e:	015a      	lsls	r2, r3, #5
 80151a0:	69fb      	ldr	r3, [r7, #28]
 80151a2:	4413      	add	r3, r2
 80151a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80151a8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	6919      	ldr	r1, [r3, #16]
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	689b      	ldr	r3, [r3, #8]
 80151b2:	440b      	add	r3, r1
 80151b4:	1e59      	subs	r1, r3, #1
 80151b6:	68bb      	ldr	r3, [r7, #8]
 80151b8:	689b      	ldr	r3, [r3, #8]
 80151ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80151be:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80151c0:	4b6b      	ldr	r3, [pc, #428]	@ (8015370 <USB_EPStartXfer+0x2e4>)
 80151c2:	400b      	ands	r3, r1
 80151c4:	69b9      	ldr	r1, [r7, #24]
 80151c6:	0148      	lsls	r0, r1, #5
 80151c8:	69f9      	ldr	r1, [r7, #28]
 80151ca:	4401      	add	r1, r0
 80151cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80151d0:	4313      	orrs	r3, r2
 80151d2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80151d4:	69bb      	ldr	r3, [r7, #24]
 80151d6:	015a      	lsls	r2, r3, #5
 80151d8:	69fb      	ldr	r3, [r7, #28]
 80151da:	4413      	add	r3, r2
 80151dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80151e0:	691a      	ldr	r2, [r3, #16]
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	691b      	ldr	r3, [r3, #16]
 80151e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80151ea:	69b9      	ldr	r1, [r7, #24]
 80151ec:	0148      	lsls	r0, r1, #5
 80151ee:	69f9      	ldr	r1, [r7, #28]
 80151f0:	4401      	add	r1, r0
 80151f2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80151f6:	4313      	orrs	r3, r2
 80151f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80151fa:	68bb      	ldr	r3, [r7, #8]
 80151fc:	791b      	ldrb	r3, [r3, #4]
 80151fe:	2b01      	cmp	r3, #1
 8015200:	d11f      	bne.n	8015242 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8015202:	69bb      	ldr	r3, [r7, #24]
 8015204:	015a      	lsls	r2, r3, #5
 8015206:	69fb      	ldr	r3, [r7, #28]
 8015208:	4413      	add	r3, r2
 801520a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801520e:	691b      	ldr	r3, [r3, #16]
 8015210:	69ba      	ldr	r2, [r7, #24]
 8015212:	0151      	lsls	r1, r2, #5
 8015214:	69fa      	ldr	r2, [r7, #28]
 8015216:	440a      	add	r2, r1
 8015218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801521c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8015220:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8015222:	69bb      	ldr	r3, [r7, #24]
 8015224:	015a      	lsls	r2, r3, #5
 8015226:	69fb      	ldr	r3, [r7, #28]
 8015228:	4413      	add	r3, r2
 801522a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801522e:	691b      	ldr	r3, [r3, #16]
 8015230:	69ba      	ldr	r2, [r7, #24]
 8015232:	0151      	lsls	r1, r2, #5
 8015234:	69fa      	ldr	r2, [r7, #28]
 8015236:	440a      	add	r2, r1
 8015238:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801523c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015240:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8015242:	79fb      	ldrb	r3, [r7, #7]
 8015244:	2b01      	cmp	r3, #1
 8015246:	d14b      	bne.n	80152e0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8015248:	68bb      	ldr	r3, [r7, #8]
 801524a:	69db      	ldr	r3, [r3, #28]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d009      	beq.n	8015264 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8015250:	69bb      	ldr	r3, [r7, #24]
 8015252:	015a      	lsls	r2, r3, #5
 8015254:	69fb      	ldr	r3, [r7, #28]
 8015256:	4413      	add	r3, r2
 8015258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801525c:	461a      	mov	r2, r3
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	69db      	ldr	r3, [r3, #28]
 8015262:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8015264:	68bb      	ldr	r3, [r7, #8]
 8015266:	791b      	ldrb	r3, [r3, #4]
 8015268:	2b01      	cmp	r3, #1
 801526a:	d128      	bne.n	80152be <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801526c:	69fb      	ldr	r3, [r7, #28]
 801526e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015272:	689b      	ldr	r3, [r3, #8]
 8015274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015278:	2b00      	cmp	r3, #0
 801527a:	d110      	bne.n	801529e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801527c:	69bb      	ldr	r3, [r7, #24]
 801527e:	015a      	lsls	r2, r3, #5
 8015280:	69fb      	ldr	r3, [r7, #28]
 8015282:	4413      	add	r3, r2
 8015284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	69ba      	ldr	r2, [r7, #24]
 801528c:	0151      	lsls	r1, r2, #5
 801528e:	69fa      	ldr	r2, [r7, #28]
 8015290:	440a      	add	r2, r1
 8015292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015296:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801529a:	6013      	str	r3, [r2, #0]
 801529c:	e00f      	b.n	80152be <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801529e:	69bb      	ldr	r3, [r7, #24]
 80152a0:	015a      	lsls	r2, r3, #5
 80152a2:	69fb      	ldr	r3, [r7, #28]
 80152a4:	4413      	add	r3, r2
 80152a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	69ba      	ldr	r2, [r7, #24]
 80152ae:	0151      	lsls	r1, r2, #5
 80152b0:	69fa      	ldr	r2, [r7, #28]
 80152b2:	440a      	add	r2, r1
 80152b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80152b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80152bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80152be:	69bb      	ldr	r3, [r7, #24]
 80152c0:	015a      	lsls	r2, r3, #5
 80152c2:	69fb      	ldr	r3, [r7, #28]
 80152c4:	4413      	add	r3, r2
 80152c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	69ba      	ldr	r2, [r7, #24]
 80152ce:	0151      	lsls	r1, r2, #5
 80152d0:	69fa      	ldr	r2, [r7, #28]
 80152d2:	440a      	add	r2, r1
 80152d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80152d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80152dc:	6013      	str	r3, [r2, #0]
 80152de:	e16a      	b.n	80155b6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80152e0:	69bb      	ldr	r3, [r7, #24]
 80152e2:	015a      	lsls	r2, r3, #5
 80152e4:	69fb      	ldr	r3, [r7, #28]
 80152e6:	4413      	add	r3, r2
 80152e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	69ba      	ldr	r2, [r7, #24]
 80152f0:	0151      	lsls	r1, r2, #5
 80152f2:	69fa      	ldr	r2, [r7, #28]
 80152f4:	440a      	add	r2, r1
 80152f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80152fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80152fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015300:	68bb      	ldr	r3, [r7, #8]
 8015302:	791b      	ldrb	r3, [r3, #4]
 8015304:	2b01      	cmp	r3, #1
 8015306:	d015      	beq.n	8015334 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	691b      	ldr	r3, [r3, #16]
 801530c:	2b00      	cmp	r3, #0
 801530e:	f000 8152 	beq.w	80155b6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015318:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	781b      	ldrb	r3, [r3, #0]
 801531e:	f003 030f 	and.w	r3, r3, #15
 8015322:	2101      	movs	r1, #1
 8015324:	fa01 f303 	lsl.w	r3, r1, r3
 8015328:	69f9      	ldr	r1, [r7, #28]
 801532a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801532e:	4313      	orrs	r3, r2
 8015330:	634b      	str	r3, [r1, #52]	@ 0x34
 8015332:	e140      	b.n	80155b6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015334:	69fb      	ldr	r3, [r7, #28]
 8015336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801533a:	689b      	ldr	r3, [r3, #8]
 801533c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015340:	2b00      	cmp	r3, #0
 8015342:	d117      	bne.n	8015374 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015344:	69bb      	ldr	r3, [r7, #24]
 8015346:	015a      	lsls	r2, r3, #5
 8015348:	69fb      	ldr	r3, [r7, #28]
 801534a:	4413      	add	r3, r2
 801534c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	69ba      	ldr	r2, [r7, #24]
 8015354:	0151      	lsls	r1, r2, #5
 8015356:	69fa      	ldr	r2, [r7, #28]
 8015358:	440a      	add	r2, r1
 801535a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801535e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015362:	6013      	str	r3, [r2, #0]
 8015364:	e016      	b.n	8015394 <USB_EPStartXfer+0x308>
 8015366:	bf00      	nop
 8015368:	e007ffff 	.word	0xe007ffff
 801536c:	fff80000 	.word	0xfff80000
 8015370:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015374:	69bb      	ldr	r3, [r7, #24]
 8015376:	015a      	lsls	r2, r3, #5
 8015378:	69fb      	ldr	r3, [r7, #28]
 801537a:	4413      	add	r3, r2
 801537c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	69ba      	ldr	r2, [r7, #24]
 8015384:	0151      	lsls	r1, r2, #5
 8015386:	69fa      	ldr	r2, [r7, #28]
 8015388:	440a      	add	r2, r1
 801538a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801538e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015392:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8015394:	68bb      	ldr	r3, [r7, #8]
 8015396:	68d9      	ldr	r1, [r3, #12]
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	781a      	ldrb	r2, [r3, #0]
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	691b      	ldr	r3, [r3, #16]
 80153a0:	b298      	uxth	r0, r3
 80153a2:	79fb      	ldrb	r3, [r7, #7]
 80153a4:	9300      	str	r3, [sp, #0]
 80153a6:	4603      	mov	r3, r0
 80153a8:	68f8      	ldr	r0, [r7, #12]
 80153aa:	f000 f9b9 	bl	8015720 <USB_WritePacket>
 80153ae:	e102      	b.n	80155b6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80153b0:	69bb      	ldr	r3, [r7, #24]
 80153b2:	015a      	lsls	r2, r3, #5
 80153b4:	69fb      	ldr	r3, [r7, #28]
 80153b6:	4413      	add	r3, r2
 80153b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153bc:	691a      	ldr	r2, [r3, #16]
 80153be:	69bb      	ldr	r3, [r7, #24]
 80153c0:	0159      	lsls	r1, r3, #5
 80153c2:	69fb      	ldr	r3, [r7, #28]
 80153c4:	440b      	add	r3, r1
 80153c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153ca:	4619      	mov	r1, r3
 80153cc:	4b7c      	ldr	r3, [pc, #496]	@ (80155c0 <USB_EPStartXfer+0x534>)
 80153ce:	4013      	ands	r3, r2
 80153d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80153d2:	69bb      	ldr	r3, [r7, #24]
 80153d4:	015a      	lsls	r2, r3, #5
 80153d6:	69fb      	ldr	r3, [r7, #28]
 80153d8:	4413      	add	r3, r2
 80153da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153de:	691a      	ldr	r2, [r3, #16]
 80153e0:	69bb      	ldr	r3, [r7, #24]
 80153e2:	0159      	lsls	r1, r3, #5
 80153e4:	69fb      	ldr	r3, [r7, #28]
 80153e6:	440b      	add	r3, r1
 80153e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80153ec:	4619      	mov	r1, r3
 80153ee:	4b75      	ldr	r3, [pc, #468]	@ (80155c4 <USB_EPStartXfer+0x538>)
 80153f0:	4013      	ands	r3, r2
 80153f2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80153f4:	69bb      	ldr	r3, [r7, #24]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d12f      	bne.n	801545a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	691b      	ldr	r3, [r3, #16]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d003      	beq.n	801540a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	689a      	ldr	r2, [r3, #8]
 8015406:	68bb      	ldr	r3, [r7, #8]
 8015408:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801540a:	68bb      	ldr	r3, [r7, #8]
 801540c:	689a      	ldr	r2, [r3, #8]
 801540e:	68bb      	ldr	r3, [r7, #8]
 8015410:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8015412:	69bb      	ldr	r3, [r7, #24]
 8015414:	015a      	lsls	r2, r3, #5
 8015416:	69fb      	ldr	r3, [r7, #28]
 8015418:	4413      	add	r3, r2
 801541a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801541e:	691a      	ldr	r2, [r3, #16]
 8015420:	68bb      	ldr	r3, [r7, #8]
 8015422:	6a1b      	ldr	r3, [r3, #32]
 8015424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015428:	69b9      	ldr	r1, [r7, #24]
 801542a:	0148      	lsls	r0, r1, #5
 801542c:	69f9      	ldr	r1, [r7, #28]
 801542e:	4401      	add	r1, r0
 8015430:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015434:	4313      	orrs	r3, r2
 8015436:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015438:	69bb      	ldr	r3, [r7, #24]
 801543a:	015a      	lsls	r2, r3, #5
 801543c:	69fb      	ldr	r3, [r7, #28]
 801543e:	4413      	add	r3, r2
 8015440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015444:	691b      	ldr	r3, [r3, #16]
 8015446:	69ba      	ldr	r2, [r7, #24]
 8015448:	0151      	lsls	r1, r2, #5
 801544a:	69fa      	ldr	r2, [r7, #28]
 801544c:	440a      	add	r2, r1
 801544e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015452:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015456:	6113      	str	r3, [r2, #16]
 8015458:	e05f      	b.n	801551a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801545a:	68bb      	ldr	r3, [r7, #8]
 801545c:	691b      	ldr	r3, [r3, #16]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d123      	bne.n	80154aa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015462:	69bb      	ldr	r3, [r7, #24]
 8015464:	015a      	lsls	r2, r3, #5
 8015466:	69fb      	ldr	r3, [r7, #28]
 8015468:	4413      	add	r3, r2
 801546a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801546e:	691a      	ldr	r2, [r3, #16]
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	689b      	ldr	r3, [r3, #8]
 8015474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015478:	69b9      	ldr	r1, [r7, #24]
 801547a:	0148      	lsls	r0, r1, #5
 801547c:	69f9      	ldr	r1, [r7, #28]
 801547e:	4401      	add	r1, r0
 8015480:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015484:	4313      	orrs	r3, r2
 8015486:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015488:	69bb      	ldr	r3, [r7, #24]
 801548a:	015a      	lsls	r2, r3, #5
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	4413      	add	r3, r2
 8015490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015494:	691b      	ldr	r3, [r3, #16]
 8015496:	69ba      	ldr	r2, [r7, #24]
 8015498:	0151      	lsls	r1, r2, #5
 801549a:	69fa      	ldr	r2, [r7, #28]
 801549c:	440a      	add	r2, r1
 801549e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80154a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80154a6:	6113      	str	r3, [r2, #16]
 80154a8:	e037      	b.n	801551a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	691a      	ldr	r2, [r3, #16]
 80154ae:	68bb      	ldr	r3, [r7, #8]
 80154b0:	689b      	ldr	r3, [r3, #8]
 80154b2:	4413      	add	r3, r2
 80154b4:	1e5a      	subs	r2, r3, #1
 80154b6:	68bb      	ldr	r3, [r7, #8]
 80154b8:	689b      	ldr	r3, [r3, #8]
 80154ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80154be:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	689b      	ldr	r3, [r3, #8]
 80154c4:	8afa      	ldrh	r2, [r7, #22]
 80154c6:	fb03 f202 	mul.w	r2, r3, r2
 80154ca:	68bb      	ldr	r3, [r7, #8]
 80154cc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80154ce:	69bb      	ldr	r3, [r7, #24]
 80154d0:	015a      	lsls	r2, r3, #5
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	4413      	add	r3, r2
 80154d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80154da:	691a      	ldr	r2, [r3, #16]
 80154dc:	8afb      	ldrh	r3, [r7, #22]
 80154de:	04d9      	lsls	r1, r3, #19
 80154e0:	4b39      	ldr	r3, [pc, #228]	@ (80155c8 <USB_EPStartXfer+0x53c>)
 80154e2:	400b      	ands	r3, r1
 80154e4:	69b9      	ldr	r1, [r7, #24]
 80154e6:	0148      	lsls	r0, r1, #5
 80154e8:	69f9      	ldr	r1, [r7, #28]
 80154ea:	4401      	add	r1, r0
 80154ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80154f0:	4313      	orrs	r3, r2
 80154f2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80154f4:	69bb      	ldr	r3, [r7, #24]
 80154f6:	015a      	lsls	r2, r3, #5
 80154f8:	69fb      	ldr	r3, [r7, #28]
 80154fa:	4413      	add	r3, r2
 80154fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015500:	691a      	ldr	r2, [r3, #16]
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	6a1b      	ldr	r3, [r3, #32]
 8015506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801550a:	69b9      	ldr	r1, [r7, #24]
 801550c:	0148      	lsls	r0, r1, #5
 801550e:	69f9      	ldr	r1, [r7, #28]
 8015510:	4401      	add	r1, r0
 8015512:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015516:	4313      	orrs	r3, r2
 8015518:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801551a:	79fb      	ldrb	r3, [r7, #7]
 801551c:	2b01      	cmp	r3, #1
 801551e:	d10d      	bne.n	801553c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	68db      	ldr	r3, [r3, #12]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d009      	beq.n	801553c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	68d9      	ldr	r1, [r3, #12]
 801552c:	69bb      	ldr	r3, [r7, #24]
 801552e:	015a      	lsls	r2, r3, #5
 8015530:	69fb      	ldr	r3, [r7, #28]
 8015532:	4413      	add	r3, r2
 8015534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015538:	460a      	mov	r2, r1
 801553a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801553c:	68bb      	ldr	r3, [r7, #8]
 801553e:	791b      	ldrb	r3, [r3, #4]
 8015540:	2b01      	cmp	r3, #1
 8015542:	d128      	bne.n	8015596 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015544:	69fb      	ldr	r3, [r7, #28]
 8015546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801554a:	689b      	ldr	r3, [r3, #8]
 801554c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015550:	2b00      	cmp	r3, #0
 8015552:	d110      	bne.n	8015576 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8015554:	69bb      	ldr	r3, [r7, #24]
 8015556:	015a      	lsls	r2, r3, #5
 8015558:	69fb      	ldr	r3, [r7, #28]
 801555a:	4413      	add	r3, r2
 801555c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	69ba      	ldr	r2, [r7, #24]
 8015564:	0151      	lsls	r1, r2, #5
 8015566:	69fa      	ldr	r2, [r7, #28]
 8015568:	440a      	add	r2, r1
 801556a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801556e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015572:	6013      	str	r3, [r2, #0]
 8015574:	e00f      	b.n	8015596 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015576:	69bb      	ldr	r3, [r7, #24]
 8015578:	015a      	lsls	r2, r3, #5
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	4413      	add	r3, r2
 801557e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	69ba      	ldr	r2, [r7, #24]
 8015586:	0151      	lsls	r1, r2, #5
 8015588:	69fa      	ldr	r2, [r7, #28]
 801558a:	440a      	add	r2, r1
 801558c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015594:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015596:	69bb      	ldr	r3, [r7, #24]
 8015598:	015a      	lsls	r2, r3, #5
 801559a:	69fb      	ldr	r3, [r7, #28]
 801559c:	4413      	add	r3, r2
 801559e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	69ba      	ldr	r2, [r7, #24]
 80155a6:	0151      	lsls	r1, r2, #5
 80155a8:	69fa      	ldr	r2, [r7, #28]
 80155aa:	440a      	add	r2, r1
 80155ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80155b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80155b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80155b6:	2300      	movs	r3, #0
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3720      	adds	r7, #32
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}
 80155c0:	fff80000 	.word	0xfff80000
 80155c4:	e007ffff 	.word	0xe007ffff
 80155c8:	1ff80000 	.word	0x1ff80000

080155cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80155cc:	b480      	push	{r7}
 80155ce:	b087      	sub	sp, #28
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
 80155d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80155d6:	2300      	movs	r3, #0
 80155d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80155da:	2300      	movs	r3, #0
 80155dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	785b      	ldrb	r3, [r3, #1]
 80155e6:	2b01      	cmp	r3, #1
 80155e8:	d14a      	bne.n	8015680 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	781b      	ldrb	r3, [r3, #0]
 80155ee:	015a      	lsls	r2, r3, #5
 80155f0:	693b      	ldr	r3, [r7, #16]
 80155f2:	4413      	add	r3, r2
 80155f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80155fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015602:	f040 8086 	bne.w	8015712 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	781b      	ldrb	r3, [r3, #0]
 801560a:	015a      	lsls	r2, r3, #5
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	4413      	add	r3, r2
 8015610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	683a      	ldr	r2, [r7, #0]
 8015618:	7812      	ldrb	r2, [r2, #0]
 801561a:	0151      	lsls	r1, r2, #5
 801561c:	693a      	ldr	r2, [r7, #16]
 801561e:	440a      	add	r2, r1
 8015620:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015624:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015628:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	015a      	lsls	r2, r3, #5
 8015630:	693b      	ldr	r3, [r7, #16]
 8015632:	4413      	add	r3, r2
 8015634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	683a      	ldr	r2, [r7, #0]
 801563c:	7812      	ldrb	r2, [r2, #0]
 801563e:	0151      	lsls	r1, r2, #5
 8015640:	693a      	ldr	r2, [r7, #16]
 8015642:	440a      	add	r2, r1
 8015644:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015648:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801564c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	3301      	adds	r3, #1
 8015652:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	f242 7210 	movw	r2, #10000	@ 0x2710
 801565a:	4293      	cmp	r3, r2
 801565c:	d902      	bls.n	8015664 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801565e:	2301      	movs	r3, #1
 8015660:	75fb      	strb	r3, [r7, #23]
          break;
 8015662:	e056      	b.n	8015712 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	015a      	lsls	r2, r3, #5
 801566a:	693b      	ldr	r3, [r7, #16]
 801566c:	4413      	add	r3, r2
 801566e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015678:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801567c:	d0e7      	beq.n	801564e <USB_EPStopXfer+0x82>
 801567e:	e048      	b.n	8015712 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	781b      	ldrb	r3, [r3, #0]
 8015684:	015a      	lsls	r2, r3, #5
 8015686:	693b      	ldr	r3, [r7, #16]
 8015688:	4413      	add	r3, r2
 801568a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015694:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015698:	d13b      	bne.n	8015712 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	015a      	lsls	r2, r3, #5
 80156a0:	693b      	ldr	r3, [r7, #16]
 80156a2:	4413      	add	r3, r2
 80156a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	683a      	ldr	r2, [r7, #0]
 80156ac:	7812      	ldrb	r2, [r2, #0]
 80156ae:	0151      	lsls	r1, r2, #5
 80156b0:	693a      	ldr	r2, [r7, #16]
 80156b2:	440a      	add	r2, r1
 80156b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80156b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80156bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80156be:	683b      	ldr	r3, [r7, #0]
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	015a      	lsls	r2, r3, #5
 80156c4:	693b      	ldr	r3, [r7, #16]
 80156c6:	4413      	add	r3, r2
 80156c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	683a      	ldr	r2, [r7, #0]
 80156d0:	7812      	ldrb	r2, [r2, #0]
 80156d2:	0151      	lsls	r1, r2, #5
 80156d4:	693a      	ldr	r2, [r7, #16]
 80156d6:	440a      	add	r2, r1
 80156d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80156dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80156e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	3301      	adds	r3, #1
 80156e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80156ee:	4293      	cmp	r3, r2
 80156f0:	d902      	bls.n	80156f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80156f2:	2301      	movs	r3, #1
 80156f4:	75fb      	strb	r3, [r7, #23]
          break;
 80156f6:	e00c      	b.n	8015712 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	015a      	lsls	r2, r3, #5
 80156fe:	693b      	ldr	r3, [r7, #16]
 8015700:	4413      	add	r3, r2
 8015702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801570c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015710:	d0e7      	beq.n	80156e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8015712:	7dfb      	ldrb	r3, [r7, #23]
}
 8015714:	4618      	mov	r0, r3
 8015716:	371c      	adds	r7, #28
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr

08015720 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015720:	b480      	push	{r7}
 8015722:	b089      	sub	sp, #36	@ 0x24
 8015724:	af00      	add	r7, sp, #0
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	60b9      	str	r1, [r7, #8]
 801572a:	4611      	mov	r1, r2
 801572c:	461a      	mov	r2, r3
 801572e:	460b      	mov	r3, r1
 8015730:	71fb      	strb	r3, [r7, #7]
 8015732:	4613      	mov	r3, r2
 8015734:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801573e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015742:	2b00      	cmp	r3, #0
 8015744:	d123      	bne.n	801578e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8015746:	88bb      	ldrh	r3, [r7, #4]
 8015748:	3303      	adds	r3, #3
 801574a:	089b      	lsrs	r3, r3, #2
 801574c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801574e:	2300      	movs	r3, #0
 8015750:	61bb      	str	r3, [r7, #24]
 8015752:	e018      	b.n	8015786 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015754:	79fb      	ldrb	r3, [r7, #7]
 8015756:	031a      	lsls	r2, r3, #12
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	4413      	add	r3, r2
 801575c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015760:	461a      	mov	r2, r3
 8015762:	69fb      	ldr	r3, [r7, #28]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015768:	69fb      	ldr	r3, [r7, #28]
 801576a:	3301      	adds	r3, #1
 801576c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801576e:	69fb      	ldr	r3, [r7, #28]
 8015770:	3301      	adds	r3, #1
 8015772:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015774:	69fb      	ldr	r3, [r7, #28]
 8015776:	3301      	adds	r3, #1
 8015778:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801577a:	69fb      	ldr	r3, [r7, #28]
 801577c:	3301      	adds	r3, #1
 801577e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015780:	69bb      	ldr	r3, [r7, #24]
 8015782:	3301      	adds	r3, #1
 8015784:	61bb      	str	r3, [r7, #24]
 8015786:	69ba      	ldr	r2, [r7, #24]
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	429a      	cmp	r2, r3
 801578c:	d3e2      	bcc.n	8015754 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801578e:	2300      	movs	r3, #0
}
 8015790:	4618      	mov	r0, r3
 8015792:	3724      	adds	r7, #36	@ 0x24
 8015794:	46bd      	mov	sp, r7
 8015796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579a:	4770      	bx	lr

0801579c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801579c:	b480      	push	{r7}
 801579e:	b08b      	sub	sp, #44	@ 0x2c
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	60f8      	str	r0, [r7, #12]
 80157a4:	60b9      	str	r1, [r7, #8]
 80157a6:	4613      	mov	r3, r2
 80157a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80157b2:	88fb      	ldrh	r3, [r7, #6]
 80157b4:	089b      	lsrs	r3, r3, #2
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80157ba:	88fb      	ldrh	r3, [r7, #6]
 80157bc:	f003 0303 	and.w	r3, r3, #3
 80157c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80157c2:	2300      	movs	r3, #0
 80157c4:	623b      	str	r3, [r7, #32]
 80157c6:	e014      	b.n	80157f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80157c8:	69bb      	ldr	r3, [r7, #24]
 80157ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80157ce:	681a      	ldr	r2, [r3, #0]
 80157d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80157d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d6:	3301      	adds	r3, #1
 80157d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80157da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157dc:	3301      	adds	r3, #1
 80157de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80157e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157e2:	3301      	adds	r3, #1
 80157e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80157e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157e8:	3301      	adds	r3, #1
 80157ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80157ec:	6a3b      	ldr	r3, [r7, #32]
 80157ee:	3301      	adds	r3, #1
 80157f0:	623b      	str	r3, [r7, #32]
 80157f2:	6a3a      	ldr	r2, [r7, #32]
 80157f4:	697b      	ldr	r3, [r7, #20]
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d3e6      	bcc.n	80157c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80157fa:	8bfb      	ldrh	r3, [r7, #30]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d01e      	beq.n	801583e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015800:	2300      	movs	r3, #0
 8015802:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015804:	69bb      	ldr	r3, [r7, #24]
 8015806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801580a:	461a      	mov	r2, r3
 801580c:	f107 0310 	add.w	r3, r7, #16
 8015810:	6812      	ldr	r2, [r2, #0]
 8015812:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015814:	693a      	ldr	r2, [r7, #16]
 8015816:	6a3b      	ldr	r3, [r7, #32]
 8015818:	b2db      	uxtb	r3, r3
 801581a:	00db      	lsls	r3, r3, #3
 801581c:	fa22 f303 	lsr.w	r3, r2, r3
 8015820:	b2da      	uxtb	r2, r3
 8015822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015824:	701a      	strb	r2, [r3, #0]
      i++;
 8015826:	6a3b      	ldr	r3, [r7, #32]
 8015828:	3301      	adds	r3, #1
 801582a:	623b      	str	r3, [r7, #32]
      pDest++;
 801582c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801582e:	3301      	adds	r3, #1
 8015830:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8015832:	8bfb      	ldrh	r3, [r7, #30]
 8015834:	3b01      	subs	r3, #1
 8015836:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015838:	8bfb      	ldrh	r3, [r7, #30]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d1ea      	bne.n	8015814 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015840:	4618      	mov	r0, r3
 8015842:	372c      	adds	r7, #44	@ 0x2c
 8015844:	46bd      	mov	sp, r7
 8015846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584a:	4770      	bx	lr

0801584c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801584c:	b480      	push	{r7}
 801584e:	b085      	sub	sp, #20
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015860:	683b      	ldr	r3, [r7, #0]
 8015862:	785b      	ldrb	r3, [r3, #1]
 8015864:	2b01      	cmp	r3, #1
 8015866:	d12c      	bne.n	80158c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	015a      	lsls	r2, r3, #5
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	4413      	add	r3, r2
 8015870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	2b00      	cmp	r3, #0
 8015878:	db12      	blt.n	80158a0 <USB_EPSetStall+0x54>
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d00f      	beq.n	80158a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015880:	68bb      	ldr	r3, [r7, #8]
 8015882:	015a      	lsls	r2, r3, #5
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	4413      	add	r3, r2
 8015888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	68ba      	ldr	r2, [r7, #8]
 8015890:	0151      	lsls	r1, r2, #5
 8015892:	68fa      	ldr	r2, [r7, #12]
 8015894:	440a      	add	r2, r1
 8015896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801589a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801589e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80158a0:	68bb      	ldr	r3, [r7, #8]
 80158a2:	015a      	lsls	r2, r3, #5
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	4413      	add	r3, r2
 80158a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	68ba      	ldr	r2, [r7, #8]
 80158b0:	0151      	lsls	r1, r2, #5
 80158b2:	68fa      	ldr	r2, [r7, #12]
 80158b4:	440a      	add	r2, r1
 80158b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80158ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80158be:	6013      	str	r3, [r2, #0]
 80158c0:	e02b      	b.n	801591a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	015a      	lsls	r2, r3, #5
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	4413      	add	r3, r2
 80158ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	db12      	blt.n	80158fa <USB_EPSetStall+0xae>
 80158d4:	68bb      	ldr	r3, [r7, #8]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d00f      	beq.n	80158fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80158da:	68bb      	ldr	r3, [r7, #8]
 80158dc:	015a      	lsls	r2, r3, #5
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	4413      	add	r3, r2
 80158e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	68ba      	ldr	r2, [r7, #8]
 80158ea:	0151      	lsls	r1, r2, #5
 80158ec:	68fa      	ldr	r2, [r7, #12]
 80158ee:	440a      	add	r2, r1
 80158f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80158f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80158f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80158fa:	68bb      	ldr	r3, [r7, #8]
 80158fc:	015a      	lsls	r2, r3, #5
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	4413      	add	r3, r2
 8015902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	68ba      	ldr	r2, [r7, #8]
 801590a:	0151      	lsls	r1, r2, #5
 801590c:	68fa      	ldr	r2, [r7, #12]
 801590e:	440a      	add	r2, r1
 8015910:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015914:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015918:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801591a:	2300      	movs	r3, #0
}
 801591c:	4618      	mov	r0, r3
 801591e:	3714      	adds	r7, #20
 8015920:	46bd      	mov	sp, r7
 8015922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015926:	4770      	bx	lr

08015928 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015928:	b480      	push	{r7}
 801592a:	b085      	sub	sp, #20
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	781b      	ldrb	r3, [r3, #0]
 801593a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801593c:	683b      	ldr	r3, [r7, #0]
 801593e:	785b      	ldrb	r3, [r3, #1]
 8015940:	2b01      	cmp	r3, #1
 8015942:	d128      	bne.n	8015996 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	015a      	lsls	r2, r3, #5
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	4413      	add	r3, r2
 801594c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	68ba      	ldr	r2, [r7, #8]
 8015954:	0151      	lsls	r1, r2, #5
 8015956:	68fa      	ldr	r2, [r7, #12]
 8015958:	440a      	add	r2, r1
 801595a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801595e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015962:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	791b      	ldrb	r3, [r3, #4]
 8015968:	2b03      	cmp	r3, #3
 801596a:	d003      	beq.n	8015974 <USB_EPClearStall+0x4c>
 801596c:	683b      	ldr	r3, [r7, #0]
 801596e:	791b      	ldrb	r3, [r3, #4]
 8015970:	2b02      	cmp	r3, #2
 8015972:	d138      	bne.n	80159e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	015a      	lsls	r2, r3, #5
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	4413      	add	r3, r2
 801597c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	68ba      	ldr	r2, [r7, #8]
 8015984:	0151      	lsls	r1, r2, #5
 8015986:	68fa      	ldr	r2, [r7, #12]
 8015988:	440a      	add	r2, r1
 801598a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801598e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015992:	6013      	str	r3, [r2, #0]
 8015994:	e027      	b.n	80159e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015996:	68bb      	ldr	r3, [r7, #8]
 8015998:	015a      	lsls	r2, r3, #5
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	4413      	add	r3, r2
 801599e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	68ba      	ldr	r2, [r7, #8]
 80159a6:	0151      	lsls	r1, r2, #5
 80159a8:	68fa      	ldr	r2, [r7, #12]
 80159aa:	440a      	add	r2, r1
 80159ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80159b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80159b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80159b6:	683b      	ldr	r3, [r7, #0]
 80159b8:	791b      	ldrb	r3, [r3, #4]
 80159ba:	2b03      	cmp	r3, #3
 80159bc:	d003      	beq.n	80159c6 <USB_EPClearStall+0x9e>
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	791b      	ldrb	r3, [r3, #4]
 80159c2:	2b02      	cmp	r3, #2
 80159c4:	d10f      	bne.n	80159e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80159c6:	68bb      	ldr	r3, [r7, #8]
 80159c8:	015a      	lsls	r2, r3, #5
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	4413      	add	r3, r2
 80159ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	68ba      	ldr	r2, [r7, #8]
 80159d6:	0151      	lsls	r1, r2, #5
 80159d8:	68fa      	ldr	r2, [r7, #12]
 80159da:	440a      	add	r2, r1
 80159dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80159e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80159e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80159e6:	2300      	movs	r3, #0
}
 80159e8:	4618      	mov	r0, r3
 80159ea:	3714      	adds	r7, #20
 80159ec:	46bd      	mov	sp, r7
 80159ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f2:	4770      	bx	lr

080159f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80159f4:	b480      	push	{r7}
 80159f6:	b085      	sub	sp, #20
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
 80159fc:	460b      	mov	r3, r1
 80159fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	68fa      	ldr	r2, [r7, #12]
 8015a0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015a12:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8015a16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015a1e:	681a      	ldr	r2, [r3, #0]
 8015a20:	78fb      	ldrb	r3, [r7, #3]
 8015a22:	011b      	lsls	r3, r3, #4
 8015a24:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015a28:	68f9      	ldr	r1, [r7, #12]
 8015a2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015a2e:	4313      	orrs	r3, r2
 8015a30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8015a32:	2300      	movs	r3, #0
}
 8015a34:	4618      	mov	r0, r3
 8015a36:	3714      	adds	r7, #20
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3e:	4770      	bx	lr

08015a40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015a40:	b480      	push	{r7}
 8015a42:	b085      	sub	sp, #20
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	68fa      	ldr	r2, [r7, #12]
 8015a56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015a5a:	f023 0303 	bic.w	r3, r3, #3
 8015a5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015a66:	685b      	ldr	r3, [r3, #4]
 8015a68:	68fa      	ldr	r2, [r7, #12]
 8015a6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015a6e:	f023 0302 	bic.w	r3, r3, #2
 8015a72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015a74:	2300      	movs	r3, #0
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3714      	adds	r7, #20
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a80:	4770      	bx	lr

08015a82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015a82:	b480      	push	{r7}
 8015a84:	b085      	sub	sp, #20
 8015a86:	af00      	add	r7, sp, #0
 8015a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	68fa      	ldr	r2, [r7, #12]
 8015a98:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015a9c:	f023 0303 	bic.w	r3, r3, #3
 8015aa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015aa8:	685b      	ldr	r3, [r3, #4]
 8015aaa:	68fa      	ldr	r2, [r7, #12]
 8015aac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015ab0:	f043 0302 	orr.w	r3, r3, #2
 8015ab4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015ab6:	2300      	movs	r3, #0
}
 8015ab8:	4618      	mov	r0, r3
 8015aba:	3714      	adds	r7, #20
 8015abc:	46bd      	mov	sp, r7
 8015abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac2:	4770      	bx	lr

08015ac4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8015ac4:	b480      	push	{r7}
 8015ac6:	b085      	sub	sp, #20
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	695b      	ldr	r3, [r3, #20]
 8015ad0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	699b      	ldr	r3, [r3, #24]
 8015ad6:	68fa      	ldr	r2, [r7, #12]
 8015ad8:	4013      	ands	r3, r2
 8015ada:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015adc:	68fb      	ldr	r3, [r7, #12]
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3714      	adds	r7, #20
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae8:	4770      	bx	lr

08015aea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015aea:	b480      	push	{r7}
 8015aec:	b085      	sub	sp, #20
 8015aee:	af00      	add	r7, sp, #0
 8015af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015afc:	699b      	ldr	r3, [r3, #24]
 8015afe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015b06:	69db      	ldr	r3, [r3, #28]
 8015b08:	68ba      	ldr	r2, [r7, #8]
 8015b0a:	4013      	ands	r3, r2
 8015b0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015b0e:	68bb      	ldr	r3, [r7, #8]
 8015b10:	0c1b      	lsrs	r3, r3, #16
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	3714      	adds	r7, #20
 8015b16:	46bd      	mov	sp, r7
 8015b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1c:	4770      	bx	lr

08015b1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015b1e:	b480      	push	{r7}
 8015b20:	b085      	sub	sp, #20
 8015b22:	af00      	add	r7, sp, #0
 8015b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015b30:	699b      	ldr	r3, [r3, #24]
 8015b32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015b3a:	69db      	ldr	r3, [r3, #28]
 8015b3c:	68ba      	ldr	r2, [r7, #8]
 8015b3e:	4013      	ands	r3, r2
 8015b40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8015b42:	68bb      	ldr	r3, [r7, #8]
 8015b44:	b29b      	uxth	r3, r3
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	3714      	adds	r7, #20
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b50:	4770      	bx	lr

08015b52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015b52:	b480      	push	{r7}
 8015b54:	b085      	sub	sp, #20
 8015b56:	af00      	add	r7, sp, #0
 8015b58:	6078      	str	r0, [r7, #4]
 8015b5a:	460b      	mov	r3, r1
 8015b5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8015b62:	78fb      	ldrb	r3, [r7, #3]
 8015b64:	015a      	lsls	r2, r3, #5
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	4413      	add	r3, r2
 8015b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b6e:	689b      	ldr	r3, [r3, #8]
 8015b70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015b78:	695b      	ldr	r3, [r3, #20]
 8015b7a:	68ba      	ldr	r2, [r7, #8]
 8015b7c:	4013      	ands	r3, r2
 8015b7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015b80:	68bb      	ldr	r3, [r7, #8]
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	3714      	adds	r7, #20
 8015b86:	46bd      	mov	sp, r7
 8015b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8c:	4770      	bx	lr

08015b8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015b8e:	b480      	push	{r7}
 8015b90:	b087      	sub	sp, #28
 8015b92:	af00      	add	r7, sp, #0
 8015b94:	6078      	str	r0, [r7, #4]
 8015b96:	460b      	mov	r3, r1
 8015b98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015ba4:	691b      	ldr	r3, [r3, #16]
 8015ba6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015bb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015bb2:	78fb      	ldrb	r3, [r7, #3]
 8015bb4:	f003 030f 	and.w	r3, r3, #15
 8015bb8:	68fa      	ldr	r2, [r7, #12]
 8015bba:	fa22 f303 	lsr.w	r3, r2, r3
 8015bbe:	01db      	lsls	r3, r3, #7
 8015bc0:	b2db      	uxtb	r3, r3
 8015bc2:	693a      	ldr	r2, [r7, #16]
 8015bc4:	4313      	orrs	r3, r2
 8015bc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015bc8:	78fb      	ldrb	r3, [r7, #3]
 8015bca:	015a      	lsls	r2, r3, #5
 8015bcc:	697b      	ldr	r3, [r7, #20]
 8015bce:	4413      	add	r3, r2
 8015bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015bd4:	689b      	ldr	r3, [r3, #8]
 8015bd6:	693a      	ldr	r2, [r7, #16]
 8015bd8:	4013      	ands	r3, r2
 8015bda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015bdc:	68bb      	ldr	r3, [r7, #8]
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	371c      	adds	r7, #28
 8015be2:	46bd      	mov	sp, r7
 8015be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be8:	4770      	bx	lr

08015bea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8015bea:	b480      	push	{r7}
 8015bec:	b083      	sub	sp, #12
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	695b      	ldr	r3, [r3, #20]
 8015bf6:	f003 0301 	and.w	r3, r3, #1
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	370c      	adds	r7, #12
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c04:	4770      	bx	lr
	...

08015c08 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8015c08:	b480      	push	{r7}
 8015c0a:	b085      	sub	sp, #20
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015c1a:	681a      	ldr	r2, [r3, #0]
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015c22:	4619      	mov	r1, r3
 8015c24:	4b09      	ldr	r3, [pc, #36]	@ (8015c4c <USB_ActivateSetup+0x44>)
 8015c26:	4013      	ands	r3, r2
 8015c28:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	68fa      	ldr	r2, [r7, #12]
 8015c34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015c3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015c3e:	2300      	movs	r3, #0
}
 8015c40:	4618      	mov	r0, r3
 8015c42:	3714      	adds	r7, #20
 8015c44:	46bd      	mov	sp, r7
 8015c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4a:	4770      	bx	lr
 8015c4c:	fffff800 	.word	0xfffff800

08015c50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8015c50:	b480      	push	{r7}
 8015c52:	b087      	sub	sp, #28
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	460b      	mov	r3, r1
 8015c5a:	607a      	str	r2, [r7, #4]
 8015c5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	333c      	adds	r3, #60	@ 0x3c
 8015c66:	3304      	adds	r3, #4
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	4a26      	ldr	r2, [pc, #152]	@ (8015d08 <USB_EP0_OutStart+0xb8>)
 8015c70:	4293      	cmp	r3, r2
 8015c72:	d90a      	bls.n	8015c8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015c80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015c84:	d101      	bne.n	8015c8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8015c86:	2300      	movs	r3, #0
 8015c88:	e037      	b.n	8015cfa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015c8a:	697b      	ldr	r3, [r7, #20]
 8015c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015c90:	461a      	mov	r2, r3
 8015c92:	2300      	movs	r3, #0
 8015c94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015c96:	697b      	ldr	r3, [r7, #20]
 8015c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015c9c:	691b      	ldr	r3, [r3, #16]
 8015c9e:	697a      	ldr	r2, [r7, #20]
 8015ca0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015ca4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015ca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015cb0:	691b      	ldr	r3, [r3, #16]
 8015cb2:	697a      	ldr	r2, [r7, #20]
 8015cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015cb8:	f043 0318 	orr.w	r3, r3, #24
 8015cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015cbe:	697b      	ldr	r3, [r7, #20]
 8015cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015cc4:	691b      	ldr	r3, [r3, #16]
 8015cc6:	697a      	ldr	r2, [r7, #20]
 8015cc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015ccc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015cd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015cd2:	7afb      	ldrb	r3, [r7, #11]
 8015cd4:	2b01      	cmp	r3, #1
 8015cd6:	d10f      	bne.n	8015cf8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015cd8:	697b      	ldr	r3, [r7, #20]
 8015cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015cde:	461a      	mov	r2, r3
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015ce4:	697b      	ldr	r3, [r7, #20]
 8015ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	697a      	ldr	r2, [r7, #20]
 8015cee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015cf2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8015cf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015cf8:	2300      	movs	r3, #0
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	371c      	adds	r7, #28
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d04:	4770      	bx	lr
 8015d06:	bf00      	nop
 8015d08:	4f54300a 	.word	0x4f54300a

08015d0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015d0c:	b480      	push	{r7}
 8015d0e:	b085      	sub	sp, #20
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015d14:	2300      	movs	r3, #0
 8015d16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	3301      	adds	r3, #1
 8015d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015d24:	d901      	bls.n	8015d2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015d26:	2303      	movs	r3, #3
 8015d28:	e01b      	b.n	8015d62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	691b      	ldr	r3, [r3, #16]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	daf2      	bge.n	8015d18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015d32:	2300      	movs	r3, #0
 8015d34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	691b      	ldr	r3, [r3, #16]
 8015d3a:	f043 0201 	orr.w	r2, r3, #1
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	3301      	adds	r3, #1
 8015d46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015d4e:	d901      	bls.n	8015d54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015d50:	2303      	movs	r3, #3
 8015d52:	e006      	b.n	8015d62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	691b      	ldr	r3, [r3, #16]
 8015d58:	f003 0301 	and.w	r3, r3, #1
 8015d5c:	2b01      	cmp	r3, #1
 8015d5e:	d0f0      	beq.n	8015d42 <USB_CoreReset+0x36>

  return HAL_OK;
 8015d60:	2300      	movs	r3, #0
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3714      	adds	r7, #20
 8015d66:	46bd      	mov	sp, r7
 8015d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6c:	4770      	bx	lr
	...

08015d70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b084      	sub	sp, #16
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
 8015d78:	460b      	mov	r3, r1
 8015d7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015d7c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015d80:	f002 fcca 	bl	8018718 <USBD_static_malloc>
 8015d84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d109      	bne.n	8015da0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	32b0      	adds	r2, #176	@ 0xb0
 8015d96:	2100      	movs	r1, #0
 8015d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015d9c:	2302      	movs	r3, #2
 8015d9e:	e0d4      	b.n	8015f4a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015da0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015da4:	2100      	movs	r1, #0
 8015da6:	68f8      	ldr	r0, [r7, #12]
 8015da8:	f004 f89f 	bl	8019eea <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	32b0      	adds	r2, #176	@ 0xb0
 8015db6:	68f9      	ldr	r1, [r7, #12]
 8015db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	32b0      	adds	r2, #176	@ 0xb0
 8015dc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	7c1b      	ldrb	r3, [r3, #16]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d138      	bne.n	8015e4a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8015f54 <USBD_CDC_Init+0x1e4>)
 8015dda:	7819      	ldrb	r1, [r3, #0]
 8015ddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015de0:	2202      	movs	r2, #2
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	f002 fb75 	bl	80184d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015de8:	4b5a      	ldr	r3, [pc, #360]	@ (8015f54 <USBD_CDC_Init+0x1e4>)
 8015dea:	781b      	ldrb	r3, [r3, #0]
 8015dec:	f003 020f 	and.w	r2, r3, #15
 8015df0:	6879      	ldr	r1, [r7, #4]
 8015df2:	4613      	mov	r3, r2
 8015df4:	009b      	lsls	r3, r3, #2
 8015df6:	4413      	add	r3, r2
 8015df8:	009b      	lsls	r3, r3, #2
 8015dfa:	440b      	add	r3, r1
 8015dfc:	3324      	adds	r3, #36	@ 0x24
 8015dfe:	2201      	movs	r2, #1
 8015e00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015e02:	4b55      	ldr	r3, [pc, #340]	@ (8015f58 <USBD_CDC_Init+0x1e8>)
 8015e04:	7819      	ldrb	r1, [r3, #0]
 8015e06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015e0a:	2202      	movs	r2, #2
 8015e0c:	6878      	ldr	r0, [r7, #4]
 8015e0e:	f002 fb60 	bl	80184d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015e12:	4b51      	ldr	r3, [pc, #324]	@ (8015f58 <USBD_CDC_Init+0x1e8>)
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	f003 020f 	and.w	r2, r3, #15
 8015e1a:	6879      	ldr	r1, [r7, #4]
 8015e1c:	4613      	mov	r3, r2
 8015e1e:	009b      	lsls	r3, r3, #2
 8015e20:	4413      	add	r3, r2
 8015e22:	009b      	lsls	r3, r3, #2
 8015e24:	440b      	add	r3, r1
 8015e26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015e2a:	2201      	movs	r2, #1
 8015e2c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8015f5c <USBD_CDC_Init+0x1ec>)
 8015e30:	781b      	ldrb	r3, [r3, #0]
 8015e32:	f003 020f 	and.w	r2, r3, #15
 8015e36:	6879      	ldr	r1, [r7, #4]
 8015e38:	4613      	mov	r3, r2
 8015e3a:	009b      	lsls	r3, r3, #2
 8015e3c:	4413      	add	r3, r2
 8015e3e:	009b      	lsls	r3, r3, #2
 8015e40:	440b      	add	r3, r1
 8015e42:	3326      	adds	r3, #38	@ 0x26
 8015e44:	2210      	movs	r2, #16
 8015e46:	801a      	strh	r2, [r3, #0]
 8015e48:	e035      	b.n	8015eb6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015e4a:	4b42      	ldr	r3, [pc, #264]	@ (8015f54 <USBD_CDC_Init+0x1e4>)
 8015e4c:	7819      	ldrb	r1, [r3, #0]
 8015e4e:	2340      	movs	r3, #64	@ 0x40
 8015e50:	2202      	movs	r2, #2
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f002 fb3d 	bl	80184d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015e58:	4b3e      	ldr	r3, [pc, #248]	@ (8015f54 <USBD_CDC_Init+0x1e4>)
 8015e5a:	781b      	ldrb	r3, [r3, #0]
 8015e5c:	f003 020f 	and.w	r2, r3, #15
 8015e60:	6879      	ldr	r1, [r7, #4]
 8015e62:	4613      	mov	r3, r2
 8015e64:	009b      	lsls	r3, r3, #2
 8015e66:	4413      	add	r3, r2
 8015e68:	009b      	lsls	r3, r3, #2
 8015e6a:	440b      	add	r3, r1
 8015e6c:	3324      	adds	r3, #36	@ 0x24
 8015e6e:	2201      	movs	r2, #1
 8015e70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015e72:	4b39      	ldr	r3, [pc, #228]	@ (8015f58 <USBD_CDC_Init+0x1e8>)
 8015e74:	7819      	ldrb	r1, [r3, #0]
 8015e76:	2340      	movs	r3, #64	@ 0x40
 8015e78:	2202      	movs	r2, #2
 8015e7a:	6878      	ldr	r0, [r7, #4]
 8015e7c:	f002 fb29 	bl	80184d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015e80:	4b35      	ldr	r3, [pc, #212]	@ (8015f58 <USBD_CDC_Init+0x1e8>)
 8015e82:	781b      	ldrb	r3, [r3, #0]
 8015e84:	f003 020f 	and.w	r2, r3, #15
 8015e88:	6879      	ldr	r1, [r7, #4]
 8015e8a:	4613      	mov	r3, r2
 8015e8c:	009b      	lsls	r3, r3, #2
 8015e8e:	4413      	add	r3, r2
 8015e90:	009b      	lsls	r3, r3, #2
 8015e92:	440b      	add	r3, r1
 8015e94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015e98:	2201      	movs	r2, #1
 8015e9a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8015f5c <USBD_CDC_Init+0x1ec>)
 8015e9e:	781b      	ldrb	r3, [r3, #0]
 8015ea0:	f003 020f 	and.w	r2, r3, #15
 8015ea4:	6879      	ldr	r1, [r7, #4]
 8015ea6:	4613      	mov	r3, r2
 8015ea8:	009b      	lsls	r3, r3, #2
 8015eaa:	4413      	add	r3, r2
 8015eac:	009b      	lsls	r3, r3, #2
 8015eae:	440b      	add	r3, r1
 8015eb0:	3326      	adds	r3, #38	@ 0x26
 8015eb2:	2210      	movs	r2, #16
 8015eb4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015eb6:	4b29      	ldr	r3, [pc, #164]	@ (8015f5c <USBD_CDC_Init+0x1ec>)
 8015eb8:	7819      	ldrb	r1, [r3, #0]
 8015eba:	2308      	movs	r3, #8
 8015ebc:	2203      	movs	r2, #3
 8015ebe:	6878      	ldr	r0, [r7, #4]
 8015ec0:	f002 fb07 	bl	80184d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015ec4:	4b25      	ldr	r3, [pc, #148]	@ (8015f5c <USBD_CDC_Init+0x1ec>)
 8015ec6:	781b      	ldrb	r3, [r3, #0]
 8015ec8:	f003 020f 	and.w	r2, r3, #15
 8015ecc:	6879      	ldr	r1, [r7, #4]
 8015ece:	4613      	mov	r3, r2
 8015ed0:	009b      	lsls	r3, r3, #2
 8015ed2:	4413      	add	r3, r2
 8015ed4:	009b      	lsls	r3, r3, #2
 8015ed6:	440b      	add	r3, r1
 8015ed8:	3324      	adds	r3, #36	@ 0x24
 8015eda:	2201      	movs	r2, #1
 8015edc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015eec:	687a      	ldr	r2, [r7, #4]
 8015eee:	33b0      	adds	r3, #176	@ 0xb0
 8015ef0:	009b      	lsls	r3, r3, #2
 8015ef2:	4413      	add	r3, r2
 8015ef4:	685b      	ldr	r3, [r3, #4]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	2200      	movs	r2, #0
 8015efe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2200      	movs	r2, #0
 8015f06:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d101      	bne.n	8015f18 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015f14:	2302      	movs	r3, #2
 8015f16:	e018      	b.n	8015f4a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	7c1b      	ldrb	r3, [r3, #16]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d10a      	bne.n	8015f36 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015f20:	4b0d      	ldr	r3, [pc, #52]	@ (8015f58 <USBD_CDC_Init+0x1e8>)
 8015f22:	7819      	ldrb	r1, [r3, #0]
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015f2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f002 fbbe 	bl	80186b0 <USBD_LL_PrepareReceive>
 8015f34:	e008      	b.n	8015f48 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015f36:	4b08      	ldr	r3, [pc, #32]	@ (8015f58 <USBD_CDC_Init+0x1e8>)
 8015f38:	7819      	ldrb	r1, [r3, #0]
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015f40:	2340      	movs	r3, #64	@ 0x40
 8015f42:	6878      	ldr	r0, [r7, #4]
 8015f44:	f002 fbb4 	bl	80186b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015f48:	2300      	movs	r3, #0
}
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	3710      	adds	r7, #16
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}
 8015f52:	bf00      	nop
 8015f54:	24000097 	.word	0x24000097
 8015f58:	24000098 	.word	0x24000098
 8015f5c:	24000099 	.word	0x24000099

08015f60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b082      	sub	sp, #8
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	460b      	mov	r3, r1
 8015f6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8016058 <USBD_CDC_DeInit+0xf8>)
 8015f6e:	781b      	ldrb	r3, [r3, #0]
 8015f70:	4619      	mov	r1, r3
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	f002 fad3 	bl	801851e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015f78:	4b37      	ldr	r3, [pc, #220]	@ (8016058 <USBD_CDC_DeInit+0xf8>)
 8015f7a:	781b      	ldrb	r3, [r3, #0]
 8015f7c:	f003 020f 	and.w	r2, r3, #15
 8015f80:	6879      	ldr	r1, [r7, #4]
 8015f82:	4613      	mov	r3, r2
 8015f84:	009b      	lsls	r3, r3, #2
 8015f86:	4413      	add	r3, r2
 8015f88:	009b      	lsls	r3, r3, #2
 8015f8a:	440b      	add	r3, r1
 8015f8c:	3324      	adds	r3, #36	@ 0x24
 8015f8e:	2200      	movs	r2, #0
 8015f90:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015f92:	4b32      	ldr	r3, [pc, #200]	@ (801605c <USBD_CDC_DeInit+0xfc>)
 8015f94:	781b      	ldrb	r3, [r3, #0]
 8015f96:	4619      	mov	r1, r3
 8015f98:	6878      	ldr	r0, [r7, #4]
 8015f9a:	f002 fac0 	bl	801851e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015f9e:	4b2f      	ldr	r3, [pc, #188]	@ (801605c <USBD_CDC_DeInit+0xfc>)
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	f003 020f 	and.w	r2, r3, #15
 8015fa6:	6879      	ldr	r1, [r7, #4]
 8015fa8:	4613      	mov	r3, r2
 8015faa:	009b      	lsls	r3, r3, #2
 8015fac:	4413      	add	r3, r2
 8015fae:	009b      	lsls	r3, r3, #2
 8015fb0:	440b      	add	r3, r1
 8015fb2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015fba:	4b29      	ldr	r3, [pc, #164]	@ (8016060 <USBD_CDC_DeInit+0x100>)
 8015fbc:	781b      	ldrb	r3, [r3, #0]
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	f002 faac 	bl	801851e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015fc6:	4b26      	ldr	r3, [pc, #152]	@ (8016060 <USBD_CDC_DeInit+0x100>)
 8015fc8:	781b      	ldrb	r3, [r3, #0]
 8015fca:	f003 020f 	and.w	r2, r3, #15
 8015fce:	6879      	ldr	r1, [r7, #4]
 8015fd0:	4613      	mov	r3, r2
 8015fd2:	009b      	lsls	r3, r3, #2
 8015fd4:	4413      	add	r3, r2
 8015fd6:	009b      	lsls	r3, r3, #2
 8015fd8:	440b      	add	r3, r1
 8015fda:	3324      	adds	r3, #36	@ 0x24
 8015fdc:	2200      	movs	r2, #0
 8015fde:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8016060 <USBD_CDC_DeInit+0x100>)
 8015fe2:	781b      	ldrb	r3, [r3, #0]
 8015fe4:	f003 020f 	and.w	r2, r3, #15
 8015fe8:	6879      	ldr	r1, [r7, #4]
 8015fea:	4613      	mov	r3, r2
 8015fec:	009b      	lsls	r3, r3, #2
 8015fee:	4413      	add	r3, r2
 8015ff0:	009b      	lsls	r3, r3, #2
 8015ff2:	440b      	add	r3, r1
 8015ff4:	3326      	adds	r3, #38	@ 0x26
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	32b0      	adds	r2, #176	@ 0xb0
 8016004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d01f      	beq.n	801604c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016012:	687a      	ldr	r2, [r7, #4]
 8016014:	33b0      	adds	r3, #176	@ 0xb0
 8016016:	009b      	lsls	r3, r3, #2
 8016018:	4413      	add	r3, r2
 801601a:	685b      	ldr	r3, [r3, #4]
 801601c:	685b      	ldr	r3, [r3, #4]
 801601e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	32b0      	adds	r2, #176	@ 0xb0
 801602a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801602e:	4618      	mov	r0, r3
 8016030:	f002 fb80 	bl	8018734 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	32b0      	adds	r2, #176	@ 0xb0
 801603e:	2100      	movs	r1, #0
 8016040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2200      	movs	r2, #0
 8016048:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801604c:	2300      	movs	r3, #0
}
 801604e:	4618      	mov	r0, r3
 8016050:	3708      	adds	r7, #8
 8016052:	46bd      	mov	sp, r7
 8016054:	bd80      	pop	{r7, pc}
 8016056:	bf00      	nop
 8016058:	24000097 	.word	0x24000097
 801605c:	24000098 	.word	0x24000098
 8016060:	24000099 	.word	0x24000099

08016064 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b086      	sub	sp, #24
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
 801606c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	32b0      	adds	r2, #176	@ 0xb0
 8016078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801607c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801607e:	2300      	movs	r3, #0
 8016080:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8016082:	2300      	movs	r3, #0
 8016084:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8016086:	2300      	movs	r3, #0
 8016088:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801608a:	693b      	ldr	r3, [r7, #16]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d101      	bne.n	8016094 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8016090:	2303      	movs	r3, #3
 8016092:	e0bf      	b.n	8016214 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016094:	683b      	ldr	r3, [r7, #0]
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801609c:	2b00      	cmp	r3, #0
 801609e:	d050      	beq.n	8016142 <USBD_CDC_Setup+0xde>
 80160a0:	2b20      	cmp	r3, #32
 80160a2:	f040 80af 	bne.w	8016204 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	88db      	ldrh	r3, [r3, #6]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d03a      	beq.n	8016124 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	781b      	ldrb	r3, [r3, #0]
 80160b2:	b25b      	sxtb	r3, r3
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	da1b      	bge.n	80160f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80160be:	687a      	ldr	r2, [r7, #4]
 80160c0:	33b0      	adds	r3, #176	@ 0xb0
 80160c2:	009b      	lsls	r3, r3, #2
 80160c4:	4413      	add	r3, r2
 80160c6:	685b      	ldr	r3, [r3, #4]
 80160c8:	689b      	ldr	r3, [r3, #8]
 80160ca:	683a      	ldr	r2, [r7, #0]
 80160cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80160ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80160d0:	683a      	ldr	r2, [r7, #0]
 80160d2:	88d2      	ldrh	r2, [r2, #6]
 80160d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	88db      	ldrh	r3, [r3, #6]
 80160da:	2b07      	cmp	r3, #7
 80160dc:	bf28      	it	cs
 80160de:	2307      	movcs	r3, #7
 80160e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80160e2:	693b      	ldr	r3, [r7, #16]
 80160e4:	89fa      	ldrh	r2, [r7, #14]
 80160e6:	4619      	mov	r1, r3
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f001 fdbd 	bl	8017c68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80160ee:	e090      	b.n	8016212 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80160f0:	683b      	ldr	r3, [r7, #0]
 80160f2:	785a      	ldrb	r2, [r3, #1]
 80160f4:	693b      	ldr	r3, [r7, #16]
 80160f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	88db      	ldrh	r3, [r3, #6]
 80160fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8016100:	d803      	bhi.n	801610a <USBD_CDC_Setup+0xa6>
 8016102:	683b      	ldr	r3, [r7, #0]
 8016104:	88db      	ldrh	r3, [r3, #6]
 8016106:	b2da      	uxtb	r2, r3
 8016108:	e000      	b.n	801610c <USBD_CDC_Setup+0xa8>
 801610a:	2240      	movs	r2, #64	@ 0x40
 801610c:	693b      	ldr	r3, [r7, #16]
 801610e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8016112:	6939      	ldr	r1, [r7, #16]
 8016114:	693b      	ldr	r3, [r7, #16]
 8016116:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801611a:	461a      	mov	r2, r3
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f001 fdcf 	bl	8017cc0 <USBD_CtlPrepareRx>
      break;
 8016122:	e076      	b.n	8016212 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801612a:	687a      	ldr	r2, [r7, #4]
 801612c:	33b0      	adds	r3, #176	@ 0xb0
 801612e:	009b      	lsls	r3, r3, #2
 8016130:	4413      	add	r3, r2
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	689b      	ldr	r3, [r3, #8]
 8016136:	683a      	ldr	r2, [r7, #0]
 8016138:	7850      	ldrb	r0, [r2, #1]
 801613a:	2200      	movs	r2, #0
 801613c:	6839      	ldr	r1, [r7, #0]
 801613e:	4798      	blx	r3
      break;
 8016140:	e067      	b.n	8016212 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016142:	683b      	ldr	r3, [r7, #0]
 8016144:	785b      	ldrb	r3, [r3, #1]
 8016146:	2b0b      	cmp	r3, #11
 8016148:	d851      	bhi.n	80161ee <USBD_CDC_Setup+0x18a>
 801614a:	a201      	add	r2, pc, #4	@ (adr r2, 8016150 <USBD_CDC_Setup+0xec>)
 801614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016150:	08016181 	.word	0x08016181
 8016154:	080161fd 	.word	0x080161fd
 8016158:	080161ef 	.word	0x080161ef
 801615c:	080161ef 	.word	0x080161ef
 8016160:	080161ef 	.word	0x080161ef
 8016164:	080161ef 	.word	0x080161ef
 8016168:	080161ef 	.word	0x080161ef
 801616c:	080161ef 	.word	0x080161ef
 8016170:	080161ef 	.word	0x080161ef
 8016174:	080161ef 	.word	0x080161ef
 8016178:	080161ab 	.word	0x080161ab
 801617c:	080161d5 	.word	0x080161d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016186:	b2db      	uxtb	r3, r3
 8016188:	2b03      	cmp	r3, #3
 801618a:	d107      	bne.n	801619c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801618c:	f107 030a 	add.w	r3, r7, #10
 8016190:	2202      	movs	r2, #2
 8016192:	4619      	mov	r1, r3
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f001 fd67 	bl	8017c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801619a:	e032      	b.n	8016202 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801619c:	6839      	ldr	r1, [r7, #0]
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f001 fce5 	bl	8017b6e <USBD_CtlError>
            ret = USBD_FAIL;
 80161a4:	2303      	movs	r3, #3
 80161a6:	75fb      	strb	r3, [r7, #23]
          break;
 80161a8:	e02b      	b.n	8016202 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80161b0:	b2db      	uxtb	r3, r3
 80161b2:	2b03      	cmp	r3, #3
 80161b4:	d107      	bne.n	80161c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80161b6:	f107 030d 	add.w	r3, r7, #13
 80161ba:	2201      	movs	r2, #1
 80161bc:	4619      	mov	r1, r3
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f001 fd52 	bl	8017c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80161c4:	e01d      	b.n	8016202 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80161c6:	6839      	ldr	r1, [r7, #0]
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f001 fcd0 	bl	8017b6e <USBD_CtlError>
            ret = USBD_FAIL;
 80161ce:	2303      	movs	r3, #3
 80161d0:	75fb      	strb	r3, [r7, #23]
          break;
 80161d2:	e016      	b.n	8016202 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80161da:	b2db      	uxtb	r3, r3
 80161dc:	2b03      	cmp	r3, #3
 80161de:	d00f      	beq.n	8016200 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80161e0:	6839      	ldr	r1, [r7, #0]
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f001 fcc3 	bl	8017b6e <USBD_CtlError>
            ret = USBD_FAIL;
 80161e8:	2303      	movs	r3, #3
 80161ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80161ec:	e008      	b.n	8016200 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80161ee:	6839      	ldr	r1, [r7, #0]
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f001 fcbc 	bl	8017b6e <USBD_CtlError>
          ret = USBD_FAIL;
 80161f6:	2303      	movs	r3, #3
 80161f8:	75fb      	strb	r3, [r7, #23]
          break;
 80161fa:	e002      	b.n	8016202 <USBD_CDC_Setup+0x19e>
          break;
 80161fc:	bf00      	nop
 80161fe:	e008      	b.n	8016212 <USBD_CDC_Setup+0x1ae>
          break;
 8016200:	bf00      	nop
      }
      break;
 8016202:	e006      	b.n	8016212 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8016204:	6839      	ldr	r1, [r7, #0]
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f001 fcb1 	bl	8017b6e <USBD_CtlError>
      ret = USBD_FAIL;
 801620c:	2303      	movs	r3, #3
 801620e:	75fb      	strb	r3, [r7, #23]
      break;
 8016210:	bf00      	nop
  }

  return (uint8_t)ret;
 8016212:	7dfb      	ldrb	r3, [r7, #23]
}
 8016214:	4618      	mov	r0, r3
 8016216:	3718      	adds	r7, #24
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}

0801621c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b084      	sub	sp, #16
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
 8016224:	460b      	mov	r3, r1
 8016226:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801622e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	32b0      	adds	r2, #176	@ 0xb0
 801623a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d101      	bne.n	8016246 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8016242:	2303      	movs	r3, #3
 8016244:	e065      	b.n	8016312 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	32b0      	adds	r2, #176	@ 0xb0
 8016250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016254:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016256:	78fb      	ldrb	r3, [r7, #3]
 8016258:	f003 020f 	and.w	r2, r3, #15
 801625c:	6879      	ldr	r1, [r7, #4]
 801625e:	4613      	mov	r3, r2
 8016260:	009b      	lsls	r3, r3, #2
 8016262:	4413      	add	r3, r2
 8016264:	009b      	lsls	r3, r3, #2
 8016266:	440b      	add	r3, r1
 8016268:	3318      	adds	r3, #24
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d02f      	beq.n	80162d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8016270:	78fb      	ldrb	r3, [r7, #3]
 8016272:	f003 020f 	and.w	r2, r3, #15
 8016276:	6879      	ldr	r1, [r7, #4]
 8016278:	4613      	mov	r3, r2
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	4413      	add	r3, r2
 801627e:	009b      	lsls	r3, r3, #2
 8016280:	440b      	add	r3, r1
 8016282:	3318      	adds	r3, #24
 8016284:	681a      	ldr	r2, [r3, #0]
 8016286:	78fb      	ldrb	r3, [r7, #3]
 8016288:	f003 010f 	and.w	r1, r3, #15
 801628c:	68f8      	ldr	r0, [r7, #12]
 801628e:	460b      	mov	r3, r1
 8016290:	00db      	lsls	r3, r3, #3
 8016292:	440b      	add	r3, r1
 8016294:	009b      	lsls	r3, r3, #2
 8016296:	4403      	add	r3, r0
 8016298:	331c      	adds	r3, #28
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	fbb2 f1f3 	udiv	r1, r2, r3
 80162a0:	fb01 f303 	mul.w	r3, r1, r3
 80162a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d112      	bne.n	80162d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80162aa:	78fb      	ldrb	r3, [r7, #3]
 80162ac:	f003 020f 	and.w	r2, r3, #15
 80162b0:	6879      	ldr	r1, [r7, #4]
 80162b2:	4613      	mov	r3, r2
 80162b4:	009b      	lsls	r3, r3, #2
 80162b6:	4413      	add	r3, r2
 80162b8:	009b      	lsls	r3, r3, #2
 80162ba:	440b      	add	r3, r1
 80162bc:	3318      	adds	r3, #24
 80162be:	2200      	movs	r2, #0
 80162c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80162c2:	78f9      	ldrb	r1, [r7, #3]
 80162c4:	2300      	movs	r3, #0
 80162c6:	2200      	movs	r2, #0
 80162c8:	6878      	ldr	r0, [r7, #4]
 80162ca:	f002 f9d0 	bl	801866e <USBD_LL_Transmit>
 80162ce:	e01f      	b.n	8016310 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80162d0:	68bb      	ldr	r3, [r7, #8]
 80162d2:	2200      	movs	r2, #0
 80162d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80162de:	687a      	ldr	r2, [r7, #4]
 80162e0:	33b0      	adds	r3, #176	@ 0xb0
 80162e2:	009b      	lsls	r3, r3, #2
 80162e4:	4413      	add	r3, r2
 80162e6:	685b      	ldr	r3, [r3, #4]
 80162e8:	691b      	ldr	r3, [r3, #16]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d010      	beq.n	8016310 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80162f4:	687a      	ldr	r2, [r7, #4]
 80162f6:	33b0      	adds	r3, #176	@ 0xb0
 80162f8:	009b      	lsls	r3, r3, #2
 80162fa:	4413      	add	r3, r2
 80162fc:	685b      	ldr	r3, [r3, #4]
 80162fe:	691b      	ldr	r3, [r3, #16]
 8016300:	68ba      	ldr	r2, [r7, #8]
 8016302:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8016306:	68ba      	ldr	r2, [r7, #8]
 8016308:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 801630c:	78fa      	ldrb	r2, [r7, #3]
 801630e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016310:	2300      	movs	r3, #0
}
 8016312:	4618      	mov	r0, r3
 8016314:	3710      	adds	r7, #16
 8016316:	46bd      	mov	sp, r7
 8016318:	bd80      	pop	{r7, pc}

0801631a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801631a:	b580      	push	{r7, lr}
 801631c:	b084      	sub	sp, #16
 801631e:	af00      	add	r7, sp, #0
 8016320:	6078      	str	r0, [r7, #4]
 8016322:	460b      	mov	r3, r1
 8016324:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	32b0      	adds	r2, #176	@ 0xb0
 8016330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016334:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	32b0      	adds	r2, #176	@ 0xb0
 8016340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d101      	bne.n	801634c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8016348:	2303      	movs	r3, #3
 801634a:	e01a      	b.n	8016382 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801634c:	78fb      	ldrb	r3, [r7, #3]
 801634e:	4619      	mov	r1, r3
 8016350:	6878      	ldr	r0, [r7, #4]
 8016352:	f002 f9ce 	bl	80186f2 <USBD_LL_GetRxDataSize>
 8016356:	4602      	mov	r2, r0
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016364:	687a      	ldr	r2, [r7, #4]
 8016366:	33b0      	adds	r3, #176	@ 0xb0
 8016368:	009b      	lsls	r3, r3, #2
 801636a:	4413      	add	r3, r2
 801636c:	685b      	ldr	r3, [r3, #4]
 801636e:	68db      	ldr	r3, [r3, #12]
 8016370:	68fa      	ldr	r2, [r7, #12]
 8016372:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8016376:	68fa      	ldr	r2, [r7, #12]
 8016378:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801637c:	4611      	mov	r1, r2
 801637e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016380:	2300      	movs	r3, #0
}
 8016382:	4618      	mov	r0, r3
 8016384:	3710      	adds	r7, #16
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}

0801638a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801638a:	b580      	push	{r7, lr}
 801638c:	b084      	sub	sp, #16
 801638e:	af00      	add	r7, sp, #0
 8016390:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	32b0      	adds	r2, #176	@ 0xb0
 801639c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d101      	bne.n	80163ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80163a8:	2303      	movs	r3, #3
 80163aa:	e024      	b.n	80163f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80163b2:	687a      	ldr	r2, [r7, #4]
 80163b4:	33b0      	adds	r3, #176	@ 0xb0
 80163b6:	009b      	lsls	r3, r3, #2
 80163b8:	4413      	add	r3, r2
 80163ba:	685b      	ldr	r3, [r3, #4]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d019      	beq.n	80163f4 <USBD_CDC_EP0_RxReady+0x6a>
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80163c6:	2bff      	cmp	r3, #255	@ 0xff
 80163c8:	d014      	beq.n	80163f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80163d0:	687a      	ldr	r2, [r7, #4]
 80163d2:	33b0      	adds	r3, #176	@ 0xb0
 80163d4:	009b      	lsls	r3, r3, #2
 80163d6:	4413      	add	r3, r2
 80163d8:	685b      	ldr	r3, [r3, #4]
 80163da:	689b      	ldr	r3, [r3, #8]
 80163dc:	68fa      	ldr	r2, [r7, #12]
 80163de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80163e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80163e4:	68fa      	ldr	r2, [r7, #12]
 80163e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80163ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	22ff      	movs	r2, #255	@ 0xff
 80163f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80163f4:	2300      	movs	r3, #0
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	3710      	adds	r7, #16
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd80      	pop	{r7, pc}
	...

08016400 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b086      	sub	sp, #24
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016408:	2182      	movs	r1, #130	@ 0x82
 801640a:	4818      	ldr	r0, [pc, #96]	@ (801646c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801640c:	f000 fd4f 	bl	8016eae <USBD_GetEpDesc>
 8016410:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016412:	2101      	movs	r1, #1
 8016414:	4815      	ldr	r0, [pc, #84]	@ (801646c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016416:	f000 fd4a 	bl	8016eae <USBD_GetEpDesc>
 801641a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801641c:	2181      	movs	r1, #129	@ 0x81
 801641e:	4813      	ldr	r0, [pc, #76]	@ (801646c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016420:	f000 fd45 	bl	8016eae <USBD_GetEpDesc>
 8016424:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016426:	697b      	ldr	r3, [r7, #20]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d002      	beq.n	8016432 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801642c:	697b      	ldr	r3, [r7, #20]
 801642e:	2210      	movs	r2, #16
 8016430:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016432:	693b      	ldr	r3, [r7, #16]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d006      	beq.n	8016446 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016438:	693b      	ldr	r3, [r7, #16]
 801643a:	2200      	movs	r2, #0
 801643c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016440:	711a      	strb	r2, [r3, #4]
 8016442:	2200      	movs	r2, #0
 8016444:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d006      	beq.n	801645a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	2200      	movs	r2, #0
 8016450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016454:	711a      	strb	r2, [r3, #4]
 8016456:	2200      	movs	r2, #0
 8016458:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	2243      	movs	r2, #67	@ 0x43
 801645e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016460:	4b02      	ldr	r3, [pc, #8]	@ (801646c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8016462:	4618      	mov	r0, r3
 8016464:	3718      	adds	r7, #24
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}
 801646a:	bf00      	nop
 801646c:	24000054 	.word	0x24000054

08016470 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b086      	sub	sp, #24
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016478:	2182      	movs	r1, #130	@ 0x82
 801647a:	4818      	ldr	r0, [pc, #96]	@ (80164dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 801647c:	f000 fd17 	bl	8016eae <USBD_GetEpDesc>
 8016480:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016482:	2101      	movs	r1, #1
 8016484:	4815      	ldr	r0, [pc, #84]	@ (80164dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016486:	f000 fd12 	bl	8016eae <USBD_GetEpDesc>
 801648a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801648c:	2181      	movs	r1, #129	@ 0x81
 801648e:	4813      	ldr	r0, [pc, #76]	@ (80164dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016490:	f000 fd0d 	bl	8016eae <USBD_GetEpDesc>
 8016494:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016496:	697b      	ldr	r3, [r7, #20]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d002      	beq.n	80164a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801649c:	697b      	ldr	r3, [r7, #20]
 801649e:	2210      	movs	r2, #16
 80164a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80164a2:	693b      	ldr	r3, [r7, #16]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d006      	beq.n	80164b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80164a8:	693b      	ldr	r3, [r7, #16]
 80164aa:	2200      	movs	r2, #0
 80164ac:	711a      	strb	r2, [r3, #4]
 80164ae:	2200      	movs	r2, #0
 80164b0:	f042 0202 	orr.w	r2, r2, #2
 80164b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d006      	beq.n	80164ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	2200      	movs	r2, #0
 80164c0:	711a      	strb	r2, [r3, #4]
 80164c2:	2200      	movs	r2, #0
 80164c4:	f042 0202 	orr.w	r2, r2, #2
 80164c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	2243      	movs	r2, #67	@ 0x43
 80164ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80164d0:	4b02      	ldr	r3, [pc, #8]	@ (80164dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3718      	adds	r7, #24
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}
 80164da:	bf00      	nop
 80164dc:	24000054 	.word	0x24000054

080164e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b086      	sub	sp, #24
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80164e8:	2182      	movs	r1, #130	@ 0x82
 80164ea:	4818      	ldr	r0, [pc, #96]	@ (801654c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80164ec:	f000 fcdf 	bl	8016eae <USBD_GetEpDesc>
 80164f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80164f2:	2101      	movs	r1, #1
 80164f4:	4815      	ldr	r0, [pc, #84]	@ (801654c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80164f6:	f000 fcda 	bl	8016eae <USBD_GetEpDesc>
 80164fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80164fc:	2181      	movs	r1, #129	@ 0x81
 80164fe:	4813      	ldr	r0, [pc, #76]	@ (801654c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016500:	f000 fcd5 	bl	8016eae <USBD_GetEpDesc>
 8016504:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016506:	697b      	ldr	r3, [r7, #20]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d002      	beq.n	8016512 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	2210      	movs	r2, #16
 8016510:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d006      	beq.n	8016526 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016518:	693b      	ldr	r3, [r7, #16]
 801651a:	2200      	movs	r2, #0
 801651c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016520:	711a      	strb	r2, [r3, #4]
 8016522:	2200      	movs	r2, #0
 8016524:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d006      	beq.n	801653a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	2200      	movs	r2, #0
 8016530:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016534:	711a      	strb	r2, [r3, #4]
 8016536:	2200      	movs	r2, #0
 8016538:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	2243      	movs	r2, #67	@ 0x43
 801653e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016540:	4b02      	ldr	r3, [pc, #8]	@ (801654c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8016542:	4618      	mov	r0, r3
 8016544:	3718      	adds	r7, #24
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}
 801654a:	bf00      	nop
 801654c:	24000054 	.word	0x24000054

08016550 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016550:	b480      	push	{r7}
 8016552:	b083      	sub	sp, #12
 8016554:	af00      	add	r7, sp, #0
 8016556:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	220a      	movs	r2, #10
 801655c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801655e:	4b03      	ldr	r3, [pc, #12]	@ (801656c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016560:	4618      	mov	r0, r3
 8016562:	370c      	adds	r7, #12
 8016564:	46bd      	mov	sp, r7
 8016566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656a:	4770      	bx	lr
 801656c:	24000010 	.word	0x24000010

08016570 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016570:	b480      	push	{r7}
 8016572:	b083      	sub	sp, #12
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801657a:	683b      	ldr	r3, [r7, #0]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d101      	bne.n	8016584 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016580:	2303      	movs	r3, #3
 8016582:	e009      	b.n	8016598 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801658a:	687a      	ldr	r2, [r7, #4]
 801658c:	33b0      	adds	r3, #176	@ 0xb0
 801658e:	009b      	lsls	r3, r3, #2
 8016590:	4413      	add	r3, r2
 8016592:	683a      	ldr	r2, [r7, #0]
 8016594:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8016596:	2300      	movs	r3, #0
}
 8016598:	4618      	mov	r0, r3
 801659a:	370c      	adds	r7, #12
 801659c:	46bd      	mov	sp, r7
 801659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a2:	4770      	bx	lr

080165a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80165a4:	b480      	push	{r7}
 80165a6:	b087      	sub	sp, #28
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	60f8      	str	r0, [r7, #12]
 80165ac:	60b9      	str	r1, [r7, #8]
 80165ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	32b0      	adds	r2, #176	@ 0xb0
 80165ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80165c0:	697b      	ldr	r3, [r7, #20]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d101      	bne.n	80165ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80165c6:	2303      	movs	r3, #3
 80165c8:	e008      	b.n	80165dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80165ca:	697b      	ldr	r3, [r7, #20]
 80165cc:	68ba      	ldr	r2, [r7, #8]
 80165ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80165d2:	697b      	ldr	r3, [r7, #20]
 80165d4:	687a      	ldr	r2, [r7, #4]
 80165d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80165da:	2300      	movs	r3, #0
}
 80165dc:	4618      	mov	r0, r3
 80165de:	371c      	adds	r7, #28
 80165e0:	46bd      	mov	sp, r7
 80165e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e6:	4770      	bx	lr

080165e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80165e8:	b480      	push	{r7}
 80165ea:	b085      	sub	sp, #20
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
 80165f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	32b0      	adds	r2, #176	@ 0xb0
 80165fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016600:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d101      	bne.n	801660c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8016608:	2303      	movs	r3, #3
 801660a:	e004      	b.n	8016616 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	683a      	ldr	r2, [r7, #0]
 8016610:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8016614:	2300      	movs	r3, #0
}
 8016616:	4618      	mov	r0, r3
 8016618:	3714      	adds	r7, #20
 801661a:	46bd      	mov	sp, r7
 801661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016620:	4770      	bx	lr
	...

08016624 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b084      	sub	sp, #16
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	32b0      	adds	r2, #176	@ 0xb0
 8016636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801663a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801663c:	2301      	movs	r3, #1
 801663e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016640:	68bb      	ldr	r3, [r7, #8]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d101      	bne.n	801664a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8016646:	2303      	movs	r3, #3
 8016648:	e025      	b.n	8016696 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801664a:	68bb      	ldr	r3, [r7, #8]
 801664c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016650:	2b00      	cmp	r3, #0
 8016652:	d11f      	bne.n	8016694 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	2201      	movs	r2, #1
 8016658:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801665c:	4b10      	ldr	r3, [pc, #64]	@ (80166a0 <USBD_CDC_TransmitPacket+0x7c>)
 801665e:	781b      	ldrb	r3, [r3, #0]
 8016660:	f003 020f 	and.w	r2, r3, #15
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801666a:	6878      	ldr	r0, [r7, #4]
 801666c:	4613      	mov	r3, r2
 801666e:	009b      	lsls	r3, r3, #2
 8016670:	4413      	add	r3, r2
 8016672:	009b      	lsls	r3, r3, #2
 8016674:	4403      	add	r3, r0
 8016676:	3318      	adds	r3, #24
 8016678:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801667a:	4b09      	ldr	r3, [pc, #36]	@ (80166a0 <USBD_CDC_TransmitPacket+0x7c>)
 801667c:	7819      	ldrb	r1, [r3, #0]
 801667e:	68bb      	ldr	r3, [r7, #8]
 8016680:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8016684:	68bb      	ldr	r3, [r7, #8]
 8016686:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801668a:	6878      	ldr	r0, [r7, #4]
 801668c:	f001 ffef 	bl	801866e <USBD_LL_Transmit>

    ret = USBD_OK;
 8016690:	2300      	movs	r3, #0
 8016692:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8016694:	7bfb      	ldrb	r3, [r7, #15]
}
 8016696:	4618      	mov	r0, r3
 8016698:	3710      	adds	r7, #16
 801669a:	46bd      	mov	sp, r7
 801669c:	bd80      	pop	{r7, pc}
 801669e:	bf00      	nop
 80166a0:	24000097 	.word	0x24000097

080166a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b084      	sub	sp, #16
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	32b0      	adds	r2, #176	@ 0xb0
 80166b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	32b0      	adds	r2, #176	@ 0xb0
 80166c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d101      	bne.n	80166d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80166ce:	2303      	movs	r3, #3
 80166d0:	e018      	b.n	8016704 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	7c1b      	ldrb	r3, [r3, #16]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d10a      	bne.n	80166f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80166da:	4b0c      	ldr	r3, [pc, #48]	@ (801670c <USBD_CDC_ReceivePacket+0x68>)
 80166dc:	7819      	ldrb	r1, [r3, #0]
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80166e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f001 ffe1 	bl	80186b0 <USBD_LL_PrepareReceive>
 80166ee:	e008      	b.n	8016702 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80166f0:	4b06      	ldr	r3, [pc, #24]	@ (801670c <USBD_CDC_ReceivePacket+0x68>)
 80166f2:	7819      	ldrb	r1, [r3, #0]
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80166fa:	2340      	movs	r3, #64	@ 0x40
 80166fc:	6878      	ldr	r0, [r7, #4]
 80166fe:	f001 ffd7 	bl	80186b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016702:	2300      	movs	r3, #0
}
 8016704:	4618      	mov	r0, r3
 8016706:	3710      	adds	r7, #16
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}
 801670c:	24000098 	.word	0x24000098

08016710 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b086      	sub	sp, #24
 8016714:	af00      	add	r7, sp, #0
 8016716:	60f8      	str	r0, [r7, #12]
 8016718:	60b9      	str	r1, [r7, #8]
 801671a:	4613      	mov	r3, r2
 801671c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d101      	bne.n	8016728 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016724:	2303      	movs	r3, #3
 8016726:	e01f      	b.n	8016768 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	2200      	movs	r2, #0
 801672c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	2200      	movs	r2, #0
 8016734:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	2200      	movs	r2, #0
 801673c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016740:	68bb      	ldr	r3, [r7, #8]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d003      	beq.n	801674e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	68ba      	ldr	r2, [r7, #8]
 801674a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	2201      	movs	r2, #1
 8016752:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	79fa      	ldrb	r2, [r7, #7]
 801675a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801675c:	68f8      	ldr	r0, [r7, #12]
 801675e:	f001 fe4b 	bl	80183f8 <USBD_LL_Init>
 8016762:	4603      	mov	r3, r0
 8016764:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016766:	7dfb      	ldrb	r3, [r7, #23]
}
 8016768:	4618      	mov	r0, r3
 801676a:	3718      	adds	r7, #24
 801676c:	46bd      	mov	sp, r7
 801676e:	bd80      	pop	{r7, pc}

08016770 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b084      	sub	sp, #16
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
 8016778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801677a:	2300      	movs	r3, #0
 801677c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801677e:	683b      	ldr	r3, [r7, #0]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d101      	bne.n	8016788 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016784:	2303      	movs	r3, #3
 8016786:	e025      	b.n	80167d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	683a      	ldr	r2, [r7, #0]
 801678c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	32ae      	adds	r2, #174	@ 0xae
 801679a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801679e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d00f      	beq.n	80167c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	32ae      	adds	r2, #174	@ 0xae
 80167ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167b4:	f107 020e 	add.w	r2, r7, #14
 80167b8:	4610      	mov	r0, r2
 80167ba:	4798      	blx	r3
 80167bc:	4602      	mov	r2, r0
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80167ca:	1c5a      	adds	r2, r3, #1
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80167d2:	2300      	movs	r3, #0
}
 80167d4:	4618      	mov	r0, r3
 80167d6:	3710      	adds	r7, #16
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}

080167dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b082      	sub	sp, #8
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80167e4:	6878      	ldr	r0, [r7, #4]
 80167e6:	f001 fe59 	bl	801849c <USBD_LL_Start>
 80167ea:	4603      	mov	r3, r0
}
 80167ec:	4618      	mov	r0, r3
 80167ee:	3708      	adds	r7, #8
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}

080167f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80167f4:	b480      	push	{r7}
 80167f6:	b083      	sub	sp, #12
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80167fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80167fe:	4618      	mov	r0, r3
 8016800:	370c      	adds	r7, #12
 8016802:	46bd      	mov	sp, r7
 8016804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016808:	4770      	bx	lr

0801680a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801680a:	b580      	push	{r7, lr}
 801680c:	b084      	sub	sp, #16
 801680e:	af00      	add	r7, sp, #0
 8016810:	6078      	str	r0, [r7, #4]
 8016812:	460b      	mov	r3, r1
 8016814:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016816:	2300      	movs	r3, #0
 8016818:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016820:	2b00      	cmp	r3, #0
 8016822:	d009      	beq.n	8016838 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	78fa      	ldrb	r2, [r7, #3]
 801682e:	4611      	mov	r1, r2
 8016830:	6878      	ldr	r0, [r7, #4]
 8016832:	4798      	blx	r3
 8016834:	4603      	mov	r3, r0
 8016836:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016838:	7bfb      	ldrb	r3, [r7, #15]
}
 801683a:	4618      	mov	r0, r3
 801683c:	3710      	adds	r7, #16
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}

08016842 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016842:	b580      	push	{r7, lr}
 8016844:	b084      	sub	sp, #16
 8016846:	af00      	add	r7, sp, #0
 8016848:	6078      	str	r0, [r7, #4]
 801684a:	460b      	mov	r3, r1
 801684c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801684e:	2300      	movs	r3, #0
 8016850:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	78fa      	ldrb	r2, [r7, #3]
 801685c:	4611      	mov	r1, r2
 801685e:	6878      	ldr	r0, [r7, #4]
 8016860:	4798      	blx	r3
 8016862:	4603      	mov	r3, r0
 8016864:	2b00      	cmp	r3, #0
 8016866:	d001      	beq.n	801686c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016868:	2303      	movs	r3, #3
 801686a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801686c:	7bfb      	ldrb	r3, [r7, #15]
}
 801686e:	4618      	mov	r0, r3
 8016870:	3710      	adds	r7, #16
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}

08016876 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016876:	b580      	push	{r7, lr}
 8016878:	b084      	sub	sp, #16
 801687a:	af00      	add	r7, sp, #0
 801687c:	6078      	str	r0, [r7, #4]
 801687e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016886:	6839      	ldr	r1, [r7, #0]
 8016888:	4618      	mov	r0, r3
 801688a:	f001 f936 	bl	8017afa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	2201      	movs	r2, #1
 8016892:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801689c:	461a      	mov	r2, r3
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80168aa:	f003 031f 	and.w	r3, r3, #31
 80168ae:	2b02      	cmp	r3, #2
 80168b0:	d01a      	beq.n	80168e8 <USBD_LL_SetupStage+0x72>
 80168b2:	2b02      	cmp	r3, #2
 80168b4:	d822      	bhi.n	80168fc <USBD_LL_SetupStage+0x86>
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d002      	beq.n	80168c0 <USBD_LL_SetupStage+0x4a>
 80168ba:	2b01      	cmp	r3, #1
 80168bc:	d00a      	beq.n	80168d4 <USBD_LL_SetupStage+0x5e>
 80168be:	e01d      	b.n	80168fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80168c6:	4619      	mov	r1, r3
 80168c8:	6878      	ldr	r0, [r7, #4]
 80168ca:	f000 fb63 	bl	8016f94 <USBD_StdDevReq>
 80168ce:	4603      	mov	r3, r0
 80168d0:	73fb      	strb	r3, [r7, #15]
      break;
 80168d2:	e020      	b.n	8016916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80168da:	4619      	mov	r1, r3
 80168dc:	6878      	ldr	r0, [r7, #4]
 80168de:	f000 fbcb 	bl	8017078 <USBD_StdItfReq>
 80168e2:	4603      	mov	r3, r0
 80168e4:	73fb      	strb	r3, [r7, #15]
      break;
 80168e6:	e016      	b.n	8016916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80168ee:	4619      	mov	r1, r3
 80168f0:	6878      	ldr	r0, [r7, #4]
 80168f2:	f000 fc2d 	bl	8017150 <USBD_StdEPReq>
 80168f6:	4603      	mov	r3, r0
 80168f8:	73fb      	strb	r3, [r7, #15]
      break;
 80168fa:	e00c      	b.n	8016916 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016902:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8016906:	b2db      	uxtb	r3, r3
 8016908:	4619      	mov	r1, r3
 801690a:	6878      	ldr	r0, [r7, #4]
 801690c:	f001 fe26 	bl	801855c <USBD_LL_StallEP>
 8016910:	4603      	mov	r3, r0
 8016912:	73fb      	strb	r3, [r7, #15]
      break;
 8016914:	bf00      	nop
  }

  return ret;
 8016916:	7bfb      	ldrb	r3, [r7, #15]
}
 8016918:	4618      	mov	r0, r3
 801691a:	3710      	adds	r7, #16
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}

08016920 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b086      	sub	sp, #24
 8016924:	af00      	add	r7, sp, #0
 8016926:	60f8      	str	r0, [r7, #12]
 8016928:	460b      	mov	r3, r1
 801692a:	607a      	str	r2, [r7, #4]
 801692c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801692e:	2300      	movs	r3, #0
 8016930:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016932:	7afb      	ldrb	r3, [r7, #11]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d16e      	bne.n	8016a16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801693e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016946:	2b03      	cmp	r3, #3
 8016948:	f040 8098 	bne.w	8016a7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801694c:	693b      	ldr	r3, [r7, #16]
 801694e:	689a      	ldr	r2, [r3, #8]
 8016950:	693b      	ldr	r3, [r7, #16]
 8016952:	68db      	ldr	r3, [r3, #12]
 8016954:	429a      	cmp	r2, r3
 8016956:	d913      	bls.n	8016980 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016958:	693b      	ldr	r3, [r7, #16]
 801695a:	689a      	ldr	r2, [r3, #8]
 801695c:	693b      	ldr	r3, [r7, #16]
 801695e:	68db      	ldr	r3, [r3, #12]
 8016960:	1ad2      	subs	r2, r2, r3
 8016962:	693b      	ldr	r3, [r7, #16]
 8016964:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016966:	693b      	ldr	r3, [r7, #16]
 8016968:	68da      	ldr	r2, [r3, #12]
 801696a:	693b      	ldr	r3, [r7, #16]
 801696c:	689b      	ldr	r3, [r3, #8]
 801696e:	4293      	cmp	r3, r2
 8016970:	bf28      	it	cs
 8016972:	4613      	movcs	r3, r2
 8016974:	461a      	mov	r2, r3
 8016976:	6879      	ldr	r1, [r7, #4]
 8016978:	68f8      	ldr	r0, [r7, #12]
 801697a:	f001 f9be 	bl	8017cfa <USBD_CtlContinueRx>
 801697e:	e07d      	b.n	8016a7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016986:	f003 031f 	and.w	r3, r3, #31
 801698a:	2b02      	cmp	r3, #2
 801698c:	d014      	beq.n	80169b8 <USBD_LL_DataOutStage+0x98>
 801698e:	2b02      	cmp	r3, #2
 8016990:	d81d      	bhi.n	80169ce <USBD_LL_DataOutStage+0xae>
 8016992:	2b00      	cmp	r3, #0
 8016994:	d002      	beq.n	801699c <USBD_LL_DataOutStage+0x7c>
 8016996:	2b01      	cmp	r3, #1
 8016998:	d003      	beq.n	80169a2 <USBD_LL_DataOutStage+0x82>
 801699a:	e018      	b.n	80169ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801699c:	2300      	movs	r3, #0
 801699e:	75bb      	strb	r3, [r7, #22]
            break;
 80169a0:	e018      	b.n	80169d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80169a8:	b2db      	uxtb	r3, r3
 80169aa:	4619      	mov	r1, r3
 80169ac:	68f8      	ldr	r0, [r7, #12]
 80169ae:	f000 fa64 	bl	8016e7a <USBD_CoreFindIF>
 80169b2:	4603      	mov	r3, r0
 80169b4:	75bb      	strb	r3, [r7, #22]
            break;
 80169b6:	e00d      	b.n	80169d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80169be:	b2db      	uxtb	r3, r3
 80169c0:	4619      	mov	r1, r3
 80169c2:	68f8      	ldr	r0, [r7, #12]
 80169c4:	f000 fa66 	bl	8016e94 <USBD_CoreFindEP>
 80169c8:	4603      	mov	r3, r0
 80169ca:	75bb      	strb	r3, [r7, #22]
            break;
 80169cc:	e002      	b.n	80169d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80169ce:	2300      	movs	r3, #0
 80169d0:	75bb      	strb	r3, [r7, #22]
            break;
 80169d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80169d4:	7dbb      	ldrb	r3, [r7, #22]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d119      	bne.n	8016a0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80169e0:	b2db      	uxtb	r3, r3
 80169e2:	2b03      	cmp	r3, #3
 80169e4:	d113      	bne.n	8016a0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80169e6:	7dba      	ldrb	r2, [r7, #22]
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	32ae      	adds	r2, #174	@ 0xae
 80169ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169f0:	691b      	ldr	r3, [r3, #16]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d00b      	beq.n	8016a0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80169f6:	7dba      	ldrb	r2, [r7, #22]
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80169fe:	7dba      	ldrb	r2, [r7, #22]
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	32ae      	adds	r2, #174	@ 0xae
 8016a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a08:	691b      	ldr	r3, [r3, #16]
 8016a0a:	68f8      	ldr	r0, [r7, #12]
 8016a0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016a0e:	68f8      	ldr	r0, [r7, #12]
 8016a10:	f001 f984 	bl	8017d1c <USBD_CtlSendStatus>
 8016a14:	e032      	b.n	8016a7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016a16:	7afb      	ldrb	r3, [r7, #11]
 8016a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016a1c:	b2db      	uxtb	r3, r3
 8016a1e:	4619      	mov	r1, r3
 8016a20:	68f8      	ldr	r0, [r7, #12]
 8016a22:	f000 fa37 	bl	8016e94 <USBD_CoreFindEP>
 8016a26:	4603      	mov	r3, r0
 8016a28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016a2a:	7dbb      	ldrb	r3, [r7, #22]
 8016a2c:	2bff      	cmp	r3, #255	@ 0xff
 8016a2e:	d025      	beq.n	8016a7c <USBD_LL_DataOutStage+0x15c>
 8016a30:	7dbb      	ldrb	r3, [r7, #22]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d122      	bne.n	8016a7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a3c:	b2db      	uxtb	r3, r3
 8016a3e:	2b03      	cmp	r3, #3
 8016a40:	d117      	bne.n	8016a72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016a42:	7dba      	ldrb	r2, [r7, #22]
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	32ae      	adds	r2, #174	@ 0xae
 8016a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a4c:	699b      	ldr	r3, [r3, #24]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d00f      	beq.n	8016a72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016a52:	7dba      	ldrb	r2, [r7, #22]
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016a5a:	7dba      	ldrb	r2, [r7, #22]
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	32ae      	adds	r2, #174	@ 0xae
 8016a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a64:	699b      	ldr	r3, [r3, #24]
 8016a66:	7afa      	ldrb	r2, [r7, #11]
 8016a68:	4611      	mov	r1, r2
 8016a6a:	68f8      	ldr	r0, [r7, #12]
 8016a6c:	4798      	blx	r3
 8016a6e:	4603      	mov	r3, r0
 8016a70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016a72:	7dfb      	ldrb	r3, [r7, #23]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d001      	beq.n	8016a7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016a78:	7dfb      	ldrb	r3, [r7, #23]
 8016a7a:	e000      	b.n	8016a7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016a7c:	2300      	movs	r3, #0
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3718      	adds	r7, #24
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}

08016a86 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016a86:	b580      	push	{r7, lr}
 8016a88:	b086      	sub	sp, #24
 8016a8a:	af00      	add	r7, sp, #0
 8016a8c:	60f8      	str	r0, [r7, #12]
 8016a8e:	460b      	mov	r3, r1
 8016a90:	607a      	str	r2, [r7, #4]
 8016a92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016a94:	7afb      	ldrb	r3, [r7, #11]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d16f      	bne.n	8016b7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	3314      	adds	r3, #20
 8016a9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016aa6:	2b02      	cmp	r3, #2
 8016aa8:	d15a      	bne.n	8016b60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016aaa:	693b      	ldr	r3, [r7, #16]
 8016aac:	689a      	ldr	r2, [r3, #8]
 8016aae:	693b      	ldr	r3, [r7, #16]
 8016ab0:	68db      	ldr	r3, [r3, #12]
 8016ab2:	429a      	cmp	r2, r3
 8016ab4:	d914      	bls.n	8016ae0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016ab6:	693b      	ldr	r3, [r7, #16]
 8016ab8:	689a      	ldr	r2, [r3, #8]
 8016aba:	693b      	ldr	r3, [r7, #16]
 8016abc:	68db      	ldr	r3, [r3, #12]
 8016abe:	1ad2      	subs	r2, r2, r3
 8016ac0:	693b      	ldr	r3, [r7, #16]
 8016ac2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	689b      	ldr	r3, [r3, #8]
 8016ac8:	461a      	mov	r2, r3
 8016aca:	6879      	ldr	r1, [r7, #4]
 8016acc:	68f8      	ldr	r0, [r7, #12]
 8016ace:	f001 f8e6 	bl	8017c9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	2100      	movs	r1, #0
 8016ad8:	68f8      	ldr	r0, [r7, #12]
 8016ada:	f001 fde9 	bl	80186b0 <USBD_LL_PrepareReceive>
 8016ade:	e03f      	b.n	8016b60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016ae0:	693b      	ldr	r3, [r7, #16]
 8016ae2:	68da      	ldr	r2, [r3, #12]
 8016ae4:	693b      	ldr	r3, [r7, #16]
 8016ae6:	689b      	ldr	r3, [r3, #8]
 8016ae8:	429a      	cmp	r2, r3
 8016aea:	d11c      	bne.n	8016b26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016aec:	693b      	ldr	r3, [r7, #16]
 8016aee:	685a      	ldr	r2, [r3, #4]
 8016af0:	693b      	ldr	r3, [r7, #16]
 8016af2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016af4:	429a      	cmp	r2, r3
 8016af6:	d316      	bcc.n	8016b26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	685a      	ldr	r2, [r3, #4]
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016b02:	429a      	cmp	r2, r3
 8016b04:	d20f      	bcs.n	8016b26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016b06:	2200      	movs	r2, #0
 8016b08:	2100      	movs	r1, #0
 8016b0a:	68f8      	ldr	r0, [r7, #12]
 8016b0c:	f001 f8c7 	bl	8017c9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	2200      	movs	r2, #0
 8016b14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016b18:	2300      	movs	r3, #0
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	2100      	movs	r1, #0
 8016b1e:	68f8      	ldr	r0, [r7, #12]
 8016b20:	f001 fdc6 	bl	80186b0 <USBD_LL_PrepareReceive>
 8016b24:	e01c      	b.n	8016b60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b2c:	b2db      	uxtb	r3, r3
 8016b2e:	2b03      	cmp	r3, #3
 8016b30:	d10f      	bne.n	8016b52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016b38:	68db      	ldr	r3, [r3, #12]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d009      	beq.n	8016b52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	2200      	movs	r2, #0
 8016b42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016b4c:	68db      	ldr	r3, [r3, #12]
 8016b4e:	68f8      	ldr	r0, [r7, #12]
 8016b50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016b52:	2180      	movs	r1, #128	@ 0x80
 8016b54:	68f8      	ldr	r0, [r7, #12]
 8016b56:	f001 fd01 	bl	801855c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016b5a:	68f8      	ldr	r0, [r7, #12]
 8016b5c:	f001 f8f1 	bl	8017d42 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d03a      	beq.n	8016be0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016b6a:	68f8      	ldr	r0, [r7, #12]
 8016b6c:	f7ff fe42 	bl	80167f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	2200      	movs	r2, #0
 8016b74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8016b78:	e032      	b.n	8016be0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016b7a:	7afb      	ldrb	r3, [r7, #11]
 8016b7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016b80:	b2db      	uxtb	r3, r3
 8016b82:	4619      	mov	r1, r3
 8016b84:	68f8      	ldr	r0, [r7, #12]
 8016b86:	f000 f985 	bl	8016e94 <USBD_CoreFindEP>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016b8e:	7dfb      	ldrb	r3, [r7, #23]
 8016b90:	2bff      	cmp	r3, #255	@ 0xff
 8016b92:	d025      	beq.n	8016be0 <USBD_LL_DataInStage+0x15a>
 8016b94:	7dfb      	ldrb	r3, [r7, #23]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d122      	bne.n	8016be0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ba0:	b2db      	uxtb	r3, r3
 8016ba2:	2b03      	cmp	r3, #3
 8016ba4:	d11c      	bne.n	8016be0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016ba6:	7dfa      	ldrb	r2, [r7, #23]
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	32ae      	adds	r2, #174	@ 0xae
 8016bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bb0:	695b      	ldr	r3, [r3, #20]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d014      	beq.n	8016be0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016bb6:	7dfa      	ldrb	r2, [r7, #23]
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016bbe:	7dfa      	ldrb	r2, [r7, #23]
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	32ae      	adds	r2, #174	@ 0xae
 8016bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bc8:	695b      	ldr	r3, [r3, #20]
 8016bca:	7afa      	ldrb	r2, [r7, #11]
 8016bcc:	4611      	mov	r1, r2
 8016bce:	68f8      	ldr	r0, [r7, #12]
 8016bd0:	4798      	blx	r3
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016bd6:	7dbb      	ldrb	r3, [r7, #22]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d001      	beq.n	8016be0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016bdc:	7dbb      	ldrb	r3, [r7, #22]
 8016bde:	e000      	b.n	8016be2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016be0:	2300      	movs	r3, #0
}
 8016be2:	4618      	mov	r0, r3
 8016be4:	3718      	adds	r7, #24
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd80      	pop	{r7, pc}

08016bea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016bea:	b580      	push	{r7, lr}
 8016bec:	b084      	sub	sp, #16
 8016bee:	af00      	add	r7, sp, #0
 8016bf0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	2201      	movs	r2, #1
 8016bfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	2200      	movs	r2, #0
 8016c02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	2200      	movs	r2, #0
 8016c0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	2200      	movs	r2, #0
 8016c10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	2200      	movs	r2, #0
 8016c18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d014      	beq.n	8016c50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016c2c:	685b      	ldr	r3, [r3, #4]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d00e      	beq.n	8016c50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016c38:	685b      	ldr	r3, [r3, #4]
 8016c3a:	687a      	ldr	r2, [r7, #4]
 8016c3c:	6852      	ldr	r2, [r2, #4]
 8016c3e:	b2d2      	uxtb	r2, r2
 8016c40:	4611      	mov	r1, r2
 8016c42:	6878      	ldr	r0, [r7, #4]
 8016c44:	4798      	blx	r3
 8016c46:	4603      	mov	r3, r0
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d001      	beq.n	8016c50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016c4c:	2303      	movs	r3, #3
 8016c4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016c50:	2340      	movs	r3, #64	@ 0x40
 8016c52:	2200      	movs	r2, #0
 8016c54:	2100      	movs	r1, #0
 8016c56:	6878      	ldr	r0, [r7, #4]
 8016c58:	f001 fc3b 	bl	80184d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	2201      	movs	r2, #1
 8016c60:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	2240      	movs	r2, #64	@ 0x40
 8016c68:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016c6c:	2340      	movs	r3, #64	@ 0x40
 8016c6e:	2200      	movs	r2, #0
 8016c70:	2180      	movs	r1, #128	@ 0x80
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	f001 fc2d 	bl	80184d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	2201      	movs	r2, #1
 8016c7c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	2240      	movs	r2, #64	@ 0x40
 8016c82:	621a      	str	r2, [r3, #32]

  return ret;
 8016c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c86:	4618      	mov	r0, r3
 8016c88:	3710      	adds	r7, #16
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}

08016c8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016c8e:	b480      	push	{r7}
 8016c90:	b083      	sub	sp, #12
 8016c92:	af00      	add	r7, sp, #0
 8016c94:	6078      	str	r0, [r7, #4]
 8016c96:	460b      	mov	r3, r1
 8016c98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	78fa      	ldrb	r2, [r7, #3]
 8016c9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016ca0:	2300      	movs	r3, #0
}
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	370c      	adds	r7, #12
 8016ca6:	46bd      	mov	sp, r7
 8016ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cac:	4770      	bx	lr

08016cae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016cae:	b480      	push	{r7}
 8016cb0:	b083      	sub	sp, #12
 8016cb2:	af00      	add	r7, sp, #0
 8016cb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016cbc:	b2db      	uxtb	r3, r3
 8016cbe:	2b04      	cmp	r3, #4
 8016cc0:	d006      	beq.n	8016cd0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016cc8:	b2da      	uxtb	r2, r3
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	2204      	movs	r2, #4
 8016cd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016cd8:	2300      	movs	r3, #0
}
 8016cda:	4618      	mov	r0, r3
 8016cdc:	370c      	adds	r7, #12
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce4:	4770      	bx	lr

08016ce6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016ce6:	b480      	push	{r7}
 8016ce8:	b083      	sub	sp, #12
 8016cea:	af00      	add	r7, sp, #0
 8016cec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016cf4:	b2db      	uxtb	r3, r3
 8016cf6:	2b04      	cmp	r3, #4
 8016cf8:	d106      	bne.n	8016d08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016d00:	b2da      	uxtb	r2, r3
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016d08:	2300      	movs	r3, #0
}
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	370c      	adds	r7, #12
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d14:	4770      	bx	lr

08016d16 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016d16:	b580      	push	{r7, lr}
 8016d18:	b082      	sub	sp, #8
 8016d1a:	af00      	add	r7, sp, #0
 8016d1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d24:	b2db      	uxtb	r3, r3
 8016d26:	2b03      	cmp	r3, #3
 8016d28:	d110      	bne.n	8016d4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d00b      	beq.n	8016d4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d3a:	69db      	ldr	r3, [r3, #28]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d005      	beq.n	8016d4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d46:	69db      	ldr	r3, [r3, #28]
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016d4c:	2300      	movs	r3, #0
}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3708      	adds	r7, #8
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}

08016d56 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016d56:	b580      	push	{r7, lr}
 8016d58:	b082      	sub	sp, #8
 8016d5a:	af00      	add	r7, sp, #0
 8016d5c:	6078      	str	r0, [r7, #4]
 8016d5e:	460b      	mov	r3, r1
 8016d60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	32ae      	adds	r2, #174	@ 0xae
 8016d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d101      	bne.n	8016d78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016d74:	2303      	movs	r3, #3
 8016d76:	e01c      	b.n	8016db2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d7e:	b2db      	uxtb	r3, r3
 8016d80:	2b03      	cmp	r3, #3
 8016d82:	d115      	bne.n	8016db0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	32ae      	adds	r2, #174	@ 0xae
 8016d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d92:	6a1b      	ldr	r3, [r3, #32]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d00b      	beq.n	8016db0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	32ae      	adds	r2, #174	@ 0xae
 8016da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016da6:	6a1b      	ldr	r3, [r3, #32]
 8016da8:	78fa      	ldrb	r2, [r7, #3]
 8016daa:	4611      	mov	r1, r2
 8016dac:	6878      	ldr	r0, [r7, #4]
 8016dae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016db0:	2300      	movs	r3, #0
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3708      	adds	r7, #8
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}

08016dba <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016dba:	b580      	push	{r7, lr}
 8016dbc:	b082      	sub	sp, #8
 8016dbe:	af00      	add	r7, sp, #0
 8016dc0:	6078      	str	r0, [r7, #4]
 8016dc2:	460b      	mov	r3, r1
 8016dc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	32ae      	adds	r2, #174	@ 0xae
 8016dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d101      	bne.n	8016ddc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016dd8:	2303      	movs	r3, #3
 8016dda:	e01c      	b.n	8016e16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016de2:	b2db      	uxtb	r3, r3
 8016de4:	2b03      	cmp	r3, #3
 8016de6:	d115      	bne.n	8016e14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	32ae      	adds	r2, #174	@ 0xae
 8016df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d00b      	beq.n	8016e14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	32ae      	adds	r2, #174	@ 0xae
 8016e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e0c:	78fa      	ldrb	r2, [r7, #3]
 8016e0e:	4611      	mov	r1, r2
 8016e10:	6878      	ldr	r0, [r7, #4]
 8016e12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016e14:	2300      	movs	r3, #0
}
 8016e16:	4618      	mov	r0, r3
 8016e18:	3708      	adds	r7, #8
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}

08016e1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016e1e:	b480      	push	{r7}
 8016e20:	b083      	sub	sp, #12
 8016e22:	af00      	add	r7, sp, #0
 8016e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016e26:	2300      	movs	r3, #0
}
 8016e28:	4618      	mov	r0, r3
 8016e2a:	370c      	adds	r7, #12
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e32:	4770      	bx	lr

08016e34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b084      	sub	sp, #16
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	2201      	movs	r2, #1
 8016e44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d00e      	beq.n	8016e70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016e58:	685b      	ldr	r3, [r3, #4]
 8016e5a:	687a      	ldr	r2, [r7, #4]
 8016e5c:	6852      	ldr	r2, [r2, #4]
 8016e5e:	b2d2      	uxtb	r2, r2
 8016e60:	4611      	mov	r1, r2
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	4798      	blx	r3
 8016e66:	4603      	mov	r3, r0
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d001      	beq.n	8016e70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016e6c:	2303      	movs	r3, #3
 8016e6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e72:	4618      	mov	r0, r3
 8016e74:	3710      	adds	r7, #16
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bd80      	pop	{r7, pc}

08016e7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016e7a:	b480      	push	{r7}
 8016e7c:	b083      	sub	sp, #12
 8016e7e:	af00      	add	r7, sp, #0
 8016e80:	6078      	str	r0, [r7, #4]
 8016e82:	460b      	mov	r3, r1
 8016e84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016e86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	370c      	adds	r7, #12
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e92:	4770      	bx	lr

08016e94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016e94:	b480      	push	{r7}
 8016e96:	b083      	sub	sp, #12
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	460b      	mov	r3, r1
 8016e9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016ea0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	370c      	adds	r7, #12
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eac:	4770      	bx	lr

08016eae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016eae:	b580      	push	{r7, lr}
 8016eb0:	b086      	sub	sp, #24
 8016eb2:	af00      	add	r7, sp, #0
 8016eb4:	6078      	str	r0, [r7, #4]
 8016eb6:	460b      	mov	r3, r1
 8016eb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	885b      	ldrh	r3, [r3, #2]
 8016eca:	b29b      	uxth	r3, r3
 8016ecc:	68fa      	ldr	r2, [r7, #12]
 8016ece:	7812      	ldrb	r2, [r2, #0]
 8016ed0:	4293      	cmp	r3, r2
 8016ed2:	d91f      	bls.n	8016f14 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	781b      	ldrb	r3, [r3, #0]
 8016ed8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016eda:	e013      	b.n	8016f04 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016edc:	f107 030a 	add.w	r3, r7, #10
 8016ee0:	4619      	mov	r1, r3
 8016ee2:	6978      	ldr	r0, [r7, #20]
 8016ee4:	f000 f81b 	bl	8016f1e <USBD_GetNextDesc>
 8016ee8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016eea:	697b      	ldr	r3, [r7, #20]
 8016eec:	785b      	ldrb	r3, [r3, #1]
 8016eee:	2b05      	cmp	r3, #5
 8016ef0:	d108      	bne.n	8016f04 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016ef2:	697b      	ldr	r3, [r7, #20]
 8016ef4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016ef6:	693b      	ldr	r3, [r7, #16]
 8016ef8:	789b      	ldrb	r3, [r3, #2]
 8016efa:	78fa      	ldrb	r2, [r7, #3]
 8016efc:	429a      	cmp	r2, r3
 8016efe:	d008      	beq.n	8016f12 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016f00:	2300      	movs	r3, #0
 8016f02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	885b      	ldrh	r3, [r3, #2]
 8016f08:	b29a      	uxth	r2, r3
 8016f0a:	897b      	ldrh	r3, [r7, #10]
 8016f0c:	429a      	cmp	r2, r3
 8016f0e:	d8e5      	bhi.n	8016edc <USBD_GetEpDesc+0x2e>
 8016f10:	e000      	b.n	8016f14 <USBD_GetEpDesc+0x66>
          break;
 8016f12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016f14:	693b      	ldr	r3, [r7, #16]
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3718      	adds	r7, #24
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}

08016f1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016f1e:	b480      	push	{r7}
 8016f20:	b085      	sub	sp, #20
 8016f22:	af00      	add	r7, sp, #0
 8016f24:	6078      	str	r0, [r7, #4]
 8016f26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	881b      	ldrh	r3, [r3, #0]
 8016f30:	68fa      	ldr	r2, [r7, #12]
 8016f32:	7812      	ldrb	r2, [r2, #0]
 8016f34:	4413      	add	r3, r2
 8016f36:	b29a      	uxth	r2, r3
 8016f38:	683b      	ldr	r3, [r7, #0]
 8016f3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	781b      	ldrb	r3, [r3, #0]
 8016f40:	461a      	mov	r2, r3
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	4413      	add	r3, r2
 8016f46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016f48:	68fb      	ldr	r3, [r7, #12]
}
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	3714      	adds	r7, #20
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f54:	4770      	bx	lr

08016f56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016f56:	b480      	push	{r7}
 8016f58:	b087      	sub	sp, #28
 8016f5a:	af00      	add	r7, sp, #0
 8016f5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016f62:	697b      	ldr	r3, [r7, #20]
 8016f64:	781b      	ldrb	r3, [r3, #0]
 8016f66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016f68:	697b      	ldr	r3, [r7, #20]
 8016f6a:	3301      	adds	r3, #1
 8016f6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016f6e:	697b      	ldr	r3, [r7, #20]
 8016f70:	781b      	ldrb	r3, [r3, #0]
 8016f72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016f74:	8a3b      	ldrh	r3, [r7, #16]
 8016f76:	021b      	lsls	r3, r3, #8
 8016f78:	b21a      	sxth	r2, r3
 8016f7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016f7e:	4313      	orrs	r3, r2
 8016f80:	b21b      	sxth	r3, r3
 8016f82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016f84:	89fb      	ldrh	r3, [r7, #14]
}
 8016f86:	4618      	mov	r0, r3
 8016f88:	371c      	adds	r7, #28
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f90:	4770      	bx	lr
	...

08016f94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b084      	sub	sp, #16
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
 8016f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016faa:	2b40      	cmp	r3, #64	@ 0x40
 8016fac:	d005      	beq.n	8016fba <USBD_StdDevReq+0x26>
 8016fae:	2b40      	cmp	r3, #64	@ 0x40
 8016fb0:	d857      	bhi.n	8017062 <USBD_StdDevReq+0xce>
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d00f      	beq.n	8016fd6 <USBD_StdDevReq+0x42>
 8016fb6:	2b20      	cmp	r3, #32
 8016fb8:	d153      	bne.n	8017062 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	32ae      	adds	r2, #174	@ 0xae
 8016fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fc8:	689b      	ldr	r3, [r3, #8]
 8016fca:	6839      	ldr	r1, [r7, #0]
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	4798      	blx	r3
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8016fd4:	e04a      	b.n	801706c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016fd6:	683b      	ldr	r3, [r7, #0]
 8016fd8:	785b      	ldrb	r3, [r3, #1]
 8016fda:	2b09      	cmp	r3, #9
 8016fdc:	d83b      	bhi.n	8017056 <USBD_StdDevReq+0xc2>
 8016fde:	a201      	add	r2, pc, #4	@ (adr r2, 8016fe4 <USBD_StdDevReq+0x50>)
 8016fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fe4:	08017039 	.word	0x08017039
 8016fe8:	0801704d 	.word	0x0801704d
 8016fec:	08017057 	.word	0x08017057
 8016ff0:	08017043 	.word	0x08017043
 8016ff4:	08017057 	.word	0x08017057
 8016ff8:	08017017 	.word	0x08017017
 8016ffc:	0801700d 	.word	0x0801700d
 8017000:	08017057 	.word	0x08017057
 8017004:	0801702f 	.word	0x0801702f
 8017008:	08017021 	.word	0x08017021
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801700c:	6839      	ldr	r1, [r7, #0]
 801700e:	6878      	ldr	r0, [r7, #4]
 8017010:	f000 fa3c 	bl	801748c <USBD_GetDescriptor>
          break;
 8017014:	e024      	b.n	8017060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8017016:	6839      	ldr	r1, [r7, #0]
 8017018:	6878      	ldr	r0, [r7, #4]
 801701a:	f000 fbcb 	bl	80177b4 <USBD_SetAddress>
          break;
 801701e:	e01f      	b.n	8017060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017020:	6839      	ldr	r1, [r7, #0]
 8017022:	6878      	ldr	r0, [r7, #4]
 8017024:	f000 fc0a 	bl	801783c <USBD_SetConfig>
 8017028:	4603      	mov	r3, r0
 801702a:	73fb      	strb	r3, [r7, #15]
          break;
 801702c:	e018      	b.n	8017060 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801702e:	6839      	ldr	r1, [r7, #0]
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	f000 fcad 	bl	8017990 <USBD_GetConfig>
          break;
 8017036:	e013      	b.n	8017060 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017038:	6839      	ldr	r1, [r7, #0]
 801703a:	6878      	ldr	r0, [r7, #4]
 801703c:	f000 fcde 	bl	80179fc <USBD_GetStatus>
          break;
 8017040:	e00e      	b.n	8017060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017042:	6839      	ldr	r1, [r7, #0]
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f000 fd0d 	bl	8017a64 <USBD_SetFeature>
          break;
 801704a:	e009      	b.n	8017060 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801704c:	6839      	ldr	r1, [r7, #0]
 801704e:	6878      	ldr	r0, [r7, #4]
 8017050:	f000 fd31 	bl	8017ab6 <USBD_ClrFeature>
          break;
 8017054:	e004      	b.n	8017060 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8017056:	6839      	ldr	r1, [r7, #0]
 8017058:	6878      	ldr	r0, [r7, #4]
 801705a:	f000 fd88 	bl	8017b6e <USBD_CtlError>
          break;
 801705e:	bf00      	nop
      }
      break;
 8017060:	e004      	b.n	801706c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8017062:	6839      	ldr	r1, [r7, #0]
 8017064:	6878      	ldr	r0, [r7, #4]
 8017066:	f000 fd82 	bl	8017b6e <USBD_CtlError>
      break;
 801706a:	bf00      	nop
  }

  return ret;
 801706c:	7bfb      	ldrb	r3, [r7, #15]
}
 801706e:	4618      	mov	r0, r3
 8017070:	3710      	adds	r7, #16
 8017072:	46bd      	mov	sp, r7
 8017074:	bd80      	pop	{r7, pc}
 8017076:	bf00      	nop

08017078 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b084      	sub	sp, #16
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
 8017080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017082:	2300      	movs	r3, #0
 8017084:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	781b      	ldrb	r3, [r3, #0]
 801708a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801708e:	2b40      	cmp	r3, #64	@ 0x40
 8017090:	d005      	beq.n	801709e <USBD_StdItfReq+0x26>
 8017092:	2b40      	cmp	r3, #64	@ 0x40
 8017094:	d852      	bhi.n	801713c <USBD_StdItfReq+0xc4>
 8017096:	2b00      	cmp	r3, #0
 8017098:	d001      	beq.n	801709e <USBD_StdItfReq+0x26>
 801709a:	2b20      	cmp	r3, #32
 801709c:	d14e      	bne.n	801713c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80170a4:	b2db      	uxtb	r3, r3
 80170a6:	3b01      	subs	r3, #1
 80170a8:	2b02      	cmp	r3, #2
 80170aa:	d840      	bhi.n	801712e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80170ac:	683b      	ldr	r3, [r7, #0]
 80170ae:	889b      	ldrh	r3, [r3, #4]
 80170b0:	b2db      	uxtb	r3, r3
 80170b2:	2b01      	cmp	r3, #1
 80170b4:	d836      	bhi.n	8017124 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80170b6:	683b      	ldr	r3, [r7, #0]
 80170b8:	889b      	ldrh	r3, [r3, #4]
 80170ba:	b2db      	uxtb	r3, r3
 80170bc:	4619      	mov	r1, r3
 80170be:	6878      	ldr	r0, [r7, #4]
 80170c0:	f7ff fedb 	bl	8016e7a <USBD_CoreFindIF>
 80170c4:	4603      	mov	r3, r0
 80170c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80170c8:	7bbb      	ldrb	r3, [r7, #14]
 80170ca:	2bff      	cmp	r3, #255	@ 0xff
 80170cc:	d01d      	beq.n	801710a <USBD_StdItfReq+0x92>
 80170ce:	7bbb      	ldrb	r3, [r7, #14]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d11a      	bne.n	801710a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80170d4:	7bba      	ldrb	r2, [r7, #14]
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	32ae      	adds	r2, #174	@ 0xae
 80170da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170de:	689b      	ldr	r3, [r3, #8]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d00f      	beq.n	8017104 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80170e4:	7bba      	ldrb	r2, [r7, #14]
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80170ec:	7bba      	ldrb	r2, [r7, #14]
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	32ae      	adds	r2, #174	@ 0xae
 80170f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170f6:	689b      	ldr	r3, [r3, #8]
 80170f8:	6839      	ldr	r1, [r7, #0]
 80170fa:	6878      	ldr	r0, [r7, #4]
 80170fc:	4798      	blx	r3
 80170fe:	4603      	mov	r3, r0
 8017100:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8017102:	e004      	b.n	801710e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8017104:	2303      	movs	r3, #3
 8017106:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8017108:	e001      	b.n	801710e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801710a:	2303      	movs	r3, #3
 801710c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	88db      	ldrh	r3, [r3, #6]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d110      	bne.n	8017138 <USBD_StdItfReq+0xc0>
 8017116:	7bfb      	ldrb	r3, [r7, #15]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d10d      	bne.n	8017138 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801711c:	6878      	ldr	r0, [r7, #4]
 801711e:	f000 fdfd 	bl	8017d1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017122:	e009      	b.n	8017138 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8017124:	6839      	ldr	r1, [r7, #0]
 8017126:	6878      	ldr	r0, [r7, #4]
 8017128:	f000 fd21 	bl	8017b6e <USBD_CtlError>
          break;
 801712c:	e004      	b.n	8017138 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801712e:	6839      	ldr	r1, [r7, #0]
 8017130:	6878      	ldr	r0, [r7, #4]
 8017132:	f000 fd1c 	bl	8017b6e <USBD_CtlError>
          break;
 8017136:	e000      	b.n	801713a <USBD_StdItfReq+0xc2>
          break;
 8017138:	bf00      	nop
      }
      break;
 801713a:	e004      	b.n	8017146 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801713c:	6839      	ldr	r1, [r7, #0]
 801713e:	6878      	ldr	r0, [r7, #4]
 8017140:	f000 fd15 	bl	8017b6e <USBD_CtlError>
      break;
 8017144:	bf00      	nop
  }

  return ret;
 8017146:	7bfb      	ldrb	r3, [r7, #15]
}
 8017148:	4618      	mov	r0, r3
 801714a:	3710      	adds	r7, #16
 801714c:	46bd      	mov	sp, r7
 801714e:	bd80      	pop	{r7, pc}

08017150 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b084      	sub	sp, #16
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801715a:	2300      	movs	r3, #0
 801715c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	889b      	ldrh	r3, [r3, #4]
 8017162:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	781b      	ldrb	r3, [r3, #0]
 8017168:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801716c:	2b40      	cmp	r3, #64	@ 0x40
 801716e:	d007      	beq.n	8017180 <USBD_StdEPReq+0x30>
 8017170:	2b40      	cmp	r3, #64	@ 0x40
 8017172:	f200 817f 	bhi.w	8017474 <USBD_StdEPReq+0x324>
 8017176:	2b00      	cmp	r3, #0
 8017178:	d02a      	beq.n	80171d0 <USBD_StdEPReq+0x80>
 801717a:	2b20      	cmp	r3, #32
 801717c:	f040 817a 	bne.w	8017474 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8017180:	7bbb      	ldrb	r3, [r7, #14]
 8017182:	4619      	mov	r1, r3
 8017184:	6878      	ldr	r0, [r7, #4]
 8017186:	f7ff fe85 	bl	8016e94 <USBD_CoreFindEP>
 801718a:	4603      	mov	r3, r0
 801718c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801718e:	7b7b      	ldrb	r3, [r7, #13]
 8017190:	2bff      	cmp	r3, #255	@ 0xff
 8017192:	f000 8174 	beq.w	801747e <USBD_StdEPReq+0x32e>
 8017196:	7b7b      	ldrb	r3, [r7, #13]
 8017198:	2b00      	cmp	r3, #0
 801719a:	f040 8170 	bne.w	801747e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801719e:	7b7a      	ldrb	r2, [r7, #13]
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80171a6:	7b7a      	ldrb	r2, [r7, #13]
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	32ae      	adds	r2, #174	@ 0xae
 80171ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171b0:	689b      	ldr	r3, [r3, #8]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	f000 8163 	beq.w	801747e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80171b8:	7b7a      	ldrb	r2, [r7, #13]
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	32ae      	adds	r2, #174	@ 0xae
 80171be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171c2:	689b      	ldr	r3, [r3, #8]
 80171c4:	6839      	ldr	r1, [r7, #0]
 80171c6:	6878      	ldr	r0, [r7, #4]
 80171c8:	4798      	blx	r3
 80171ca:	4603      	mov	r3, r0
 80171cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80171ce:	e156      	b.n	801747e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80171d0:	683b      	ldr	r3, [r7, #0]
 80171d2:	785b      	ldrb	r3, [r3, #1]
 80171d4:	2b03      	cmp	r3, #3
 80171d6:	d008      	beq.n	80171ea <USBD_StdEPReq+0x9a>
 80171d8:	2b03      	cmp	r3, #3
 80171da:	f300 8145 	bgt.w	8017468 <USBD_StdEPReq+0x318>
 80171de:	2b00      	cmp	r3, #0
 80171e0:	f000 809b 	beq.w	801731a <USBD_StdEPReq+0x1ca>
 80171e4:	2b01      	cmp	r3, #1
 80171e6:	d03c      	beq.n	8017262 <USBD_StdEPReq+0x112>
 80171e8:	e13e      	b.n	8017468 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80171f0:	b2db      	uxtb	r3, r3
 80171f2:	2b02      	cmp	r3, #2
 80171f4:	d002      	beq.n	80171fc <USBD_StdEPReq+0xac>
 80171f6:	2b03      	cmp	r3, #3
 80171f8:	d016      	beq.n	8017228 <USBD_StdEPReq+0xd8>
 80171fa:	e02c      	b.n	8017256 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80171fc:	7bbb      	ldrb	r3, [r7, #14]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d00d      	beq.n	801721e <USBD_StdEPReq+0xce>
 8017202:	7bbb      	ldrb	r3, [r7, #14]
 8017204:	2b80      	cmp	r3, #128	@ 0x80
 8017206:	d00a      	beq.n	801721e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017208:	7bbb      	ldrb	r3, [r7, #14]
 801720a:	4619      	mov	r1, r3
 801720c:	6878      	ldr	r0, [r7, #4]
 801720e:	f001 f9a5 	bl	801855c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017212:	2180      	movs	r1, #128	@ 0x80
 8017214:	6878      	ldr	r0, [r7, #4]
 8017216:	f001 f9a1 	bl	801855c <USBD_LL_StallEP>
 801721a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801721c:	e020      	b.n	8017260 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801721e:	6839      	ldr	r1, [r7, #0]
 8017220:	6878      	ldr	r0, [r7, #4]
 8017222:	f000 fca4 	bl	8017b6e <USBD_CtlError>
              break;
 8017226:	e01b      	b.n	8017260 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	885b      	ldrh	r3, [r3, #2]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d10e      	bne.n	801724e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017230:	7bbb      	ldrb	r3, [r7, #14]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d00b      	beq.n	801724e <USBD_StdEPReq+0xfe>
 8017236:	7bbb      	ldrb	r3, [r7, #14]
 8017238:	2b80      	cmp	r3, #128	@ 0x80
 801723a:	d008      	beq.n	801724e <USBD_StdEPReq+0xfe>
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	88db      	ldrh	r3, [r3, #6]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d104      	bne.n	801724e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017244:	7bbb      	ldrb	r3, [r7, #14]
 8017246:	4619      	mov	r1, r3
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	f001 f987 	bl	801855c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801724e:	6878      	ldr	r0, [r7, #4]
 8017250:	f000 fd64 	bl	8017d1c <USBD_CtlSendStatus>

              break;
 8017254:	e004      	b.n	8017260 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8017256:	6839      	ldr	r1, [r7, #0]
 8017258:	6878      	ldr	r0, [r7, #4]
 801725a:	f000 fc88 	bl	8017b6e <USBD_CtlError>
              break;
 801725e:	bf00      	nop
          }
          break;
 8017260:	e107      	b.n	8017472 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017268:	b2db      	uxtb	r3, r3
 801726a:	2b02      	cmp	r3, #2
 801726c:	d002      	beq.n	8017274 <USBD_StdEPReq+0x124>
 801726e:	2b03      	cmp	r3, #3
 8017270:	d016      	beq.n	80172a0 <USBD_StdEPReq+0x150>
 8017272:	e04b      	b.n	801730c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017274:	7bbb      	ldrb	r3, [r7, #14]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d00d      	beq.n	8017296 <USBD_StdEPReq+0x146>
 801727a:	7bbb      	ldrb	r3, [r7, #14]
 801727c:	2b80      	cmp	r3, #128	@ 0x80
 801727e:	d00a      	beq.n	8017296 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017280:	7bbb      	ldrb	r3, [r7, #14]
 8017282:	4619      	mov	r1, r3
 8017284:	6878      	ldr	r0, [r7, #4]
 8017286:	f001 f969 	bl	801855c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801728a:	2180      	movs	r1, #128	@ 0x80
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	f001 f965 	bl	801855c <USBD_LL_StallEP>
 8017292:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017294:	e040      	b.n	8017318 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8017296:	6839      	ldr	r1, [r7, #0]
 8017298:	6878      	ldr	r0, [r7, #4]
 801729a:	f000 fc68 	bl	8017b6e <USBD_CtlError>
              break;
 801729e:	e03b      	b.n	8017318 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	885b      	ldrh	r3, [r3, #2]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d136      	bne.n	8017316 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80172a8:	7bbb      	ldrb	r3, [r7, #14]
 80172aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d004      	beq.n	80172bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80172b2:	7bbb      	ldrb	r3, [r7, #14]
 80172b4:	4619      	mov	r1, r3
 80172b6:	6878      	ldr	r0, [r7, #4]
 80172b8:	f001 f96f 	bl	801859a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80172bc:	6878      	ldr	r0, [r7, #4]
 80172be:	f000 fd2d 	bl	8017d1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80172c2:	7bbb      	ldrb	r3, [r7, #14]
 80172c4:	4619      	mov	r1, r3
 80172c6:	6878      	ldr	r0, [r7, #4]
 80172c8:	f7ff fde4 	bl	8016e94 <USBD_CoreFindEP>
 80172cc:	4603      	mov	r3, r0
 80172ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80172d0:	7b7b      	ldrb	r3, [r7, #13]
 80172d2:	2bff      	cmp	r3, #255	@ 0xff
 80172d4:	d01f      	beq.n	8017316 <USBD_StdEPReq+0x1c6>
 80172d6:	7b7b      	ldrb	r3, [r7, #13]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d11c      	bne.n	8017316 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80172dc:	7b7a      	ldrb	r2, [r7, #13]
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80172e4:	7b7a      	ldrb	r2, [r7, #13]
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	32ae      	adds	r2, #174	@ 0xae
 80172ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172ee:	689b      	ldr	r3, [r3, #8]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d010      	beq.n	8017316 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80172f4:	7b7a      	ldrb	r2, [r7, #13]
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	32ae      	adds	r2, #174	@ 0xae
 80172fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172fe:	689b      	ldr	r3, [r3, #8]
 8017300:	6839      	ldr	r1, [r7, #0]
 8017302:	6878      	ldr	r0, [r7, #4]
 8017304:	4798      	blx	r3
 8017306:	4603      	mov	r3, r0
 8017308:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801730a:	e004      	b.n	8017316 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801730c:	6839      	ldr	r1, [r7, #0]
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	f000 fc2d 	bl	8017b6e <USBD_CtlError>
              break;
 8017314:	e000      	b.n	8017318 <USBD_StdEPReq+0x1c8>
              break;
 8017316:	bf00      	nop
          }
          break;
 8017318:	e0ab      	b.n	8017472 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017320:	b2db      	uxtb	r3, r3
 8017322:	2b02      	cmp	r3, #2
 8017324:	d002      	beq.n	801732c <USBD_StdEPReq+0x1dc>
 8017326:	2b03      	cmp	r3, #3
 8017328:	d032      	beq.n	8017390 <USBD_StdEPReq+0x240>
 801732a:	e097      	b.n	801745c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801732c:	7bbb      	ldrb	r3, [r7, #14]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d007      	beq.n	8017342 <USBD_StdEPReq+0x1f2>
 8017332:	7bbb      	ldrb	r3, [r7, #14]
 8017334:	2b80      	cmp	r3, #128	@ 0x80
 8017336:	d004      	beq.n	8017342 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8017338:	6839      	ldr	r1, [r7, #0]
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	f000 fc17 	bl	8017b6e <USBD_CtlError>
                break;
 8017340:	e091      	b.n	8017466 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017346:	2b00      	cmp	r3, #0
 8017348:	da0b      	bge.n	8017362 <USBD_StdEPReq+0x212>
 801734a:	7bbb      	ldrb	r3, [r7, #14]
 801734c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017350:	4613      	mov	r3, r2
 8017352:	009b      	lsls	r3, r3, #2
 8017354:	4413      	add	r3, r2
 8017356:	009b      	lsls	r3, r3, #2
 8017358:	3310      	adds	r3, #16
 801735a:	687a      	ldr	r2, [r7, #4]
 801735c:	4413      	add	r3, r2
 801735e:	3304      	adds	r3, #4
 8017360:	e00b      	b.n	801737a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017362:	7bbb      	ldrb	r3, [r7, #14]
 8017364:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017368:	4613      	mov	r3, r2
 801736a:	009b      	lsls	r3, r3, #2
 801736c:	4413      	add	r3, r2
 801736e:	009b      	lsls	r3, r3, #2
 8017370:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017374:	687a      	ldr	r2, [r7, #4]
 8017376:	4413      	add	r3, r2
 8017378:	3304      	adds	r3, #4
 801737a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	2200      	movs	r2, #0
 8017380:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	2202      	movs	r2, #2
 8017386:	4619      	mov	r1, r3
 8017388:	6878      	ldr	r0, [r7, #4]
 801738a:	f000 fc6d 	bl	8017c68 <USBD_CtlSendData>
              break;
 801738e:	e06a      	b.n	8017466 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017394:	2b00      	cmp	r3, #0
 8017396:	da11      	bge.n	80173bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017398:	7bbb      	ldrb	r3, [r7, #14]
 801739a:	f003 020f 	and.w	r2, r3, #15
 801739e:	6879      	ldr	r1, [r7, #4]
 80173a0:	4613      	mov	r3, r2
 80173a2:	009b      	lsls	r3, r3, #2
 80173a4:	4413      	add	r3, r2
 80173a6:	009b      	lsls	r3, r3, #2
 80173a8:	440b      	add	r3, r1
 80173aa:	3324      	adds	r3, #36	@ 0x24
 80173ac:	881b      	ldrh	r3, [r3, #0]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d117      	bne.n	80173e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80173b2:	6839      	ldr	r1, [r7, #0]
 80173b4:	6878      	ldr	r0, [r7, #4]
 80173b6:	f000 fbda 	bl	8017b6e <USBD_CtlError>
                  break;
 80173ba:	e054      	b.n	8017466 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80173bc:	7bbb      	ldrb	r3, [r7, #14]
 80173be:	f003 020f 	and.w	r2, r3, #15
 80173c2:	6879      	ldr	r1, [r7, #4]
 80173c4:	4613      	mov	r3, r2
 80173c6:	009b      	lsls	r3, r3, #2
 80173c8:	4413      	add	r3, r2
 80173ca:	009b      	lsls	r3, r3, #2
 80173cc:	440b      	add	r3, r1
 80173ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80173d2:	881b      	ldrh	r3, [r3, #0]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d104      	bne.n	80173e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80173d8:	6839      	ldr	r1, [r7, #0]
 80173da:	6878      	ldr	r0, [r7, #4]
 80173dc:	f000 fbc7 	bl	8017b6e <USBD_CtlError>
                  break;
 80173e0:	e041      	b.n	8017466 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80173e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	da0b      	bge.n	8017402 <USBD_StdEPReq+0x2b2>
 80173ea:	7bbb      	ldrb	r3, [r7, #14]
 80173ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80173f0:	4613      	mov	r3, r2
 80173f2:	009b      	lsls	r3, r3, #2
 80173f4:	4413      	add	r3, r2
 80173f6:	009b      	lsls	r3, r3, #2
 80173f8:	3310      	adds	r3, #16
 80173fa:	687a      	ldr	r2, [r7, #4]
 80173fc:	4413      	add	r3, r2
 80173fe:	3304      	adds	r3, #4
 8017400:	e00b      	b.n	801741a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017402:	7bbb      	ldrb	r3, [r7, #14]
 8017404:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017408:	4613      	mov	r3, r2
 801740a:	009b      	lsls	r3, r3, #2
 801740c:	4413      	add	r3, r2
 801740e:	009b      	lsls	r3, r3, #2
 8017410:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017414:	687a      	ldr	r2, [r7, #4]
 8017416:	4413      	add	r3, r2
 8017418:	3304      	adds	r3, #4
 801741a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801741c:	7bbb      	ldrb	r3, [r7, #14]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d002      	beq.n	8017428 <USBD_StdEPReq+0x2d8>
 8017422:	7bbb      	ldrb	r3, [r7, #14]
 8017424:	2b80      	cmp	r3, #128	@ 0x80
 8017426:	d103      	bne.n	8017430 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8017428:	68bb      	ldr	r3, [r7, #8]
 801742a:	2200      	movs	r2, #0
 801742c:	601a      	str	r2, [r3, #0]
 801742e:	e00e      	b.n	801744e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017430:	7bbb      	ldrb	r3, [r7, #14]
 8017432:	4619      	mov	r1, r3
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	f001 f8cf 	bl	80185d8 <USBD_LL_IsStallEP>
 801743a:	4603      	mov	r3, r0
 801743c:	2b00      	cmp	r3, #0
 801743e:	d003      	beq.n	8017448 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017440:	68bb      	ldr	r3, [r7, #8]
 8017442:	2201      	movs	r2, #1
 8017444:	601a      	str	r2, [r3, #0]
 8017446:	e002      	b.n	801744e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8017448:	68bb      	ldr	r3, [r7, #8]
 801744a:	2200      	movs	r2, #0
 801744c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801744e:	68bb      	ldr	r3, [r7, #8]
 8017450:	2202      	movs	r2, #2
 8017452:	4619      	mov	r1, r3
 8017454:	6878      	ldr	r0, [r7, #4]
 8017456:	f000 fc07 	bl	8017c68 <USBD_CtlSendData>
              break;
 801745a:	e004      	b.n	8017466 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801745c:	6839      	ldr	r1, [r7, #0]
 801745e:	6878      	ldr	r0, [r7, #4]
 8017460:	f000 fb85 	bl	8017b6e <USBD_CtlError>
              break;
 8017464:	bf00      	nop
          }
          break;
 8017466:	e004      	b.n	8017472 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8017468:	6839      	ldr	r1, [r7, #0]
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	f000 fb7f 	bl	8017b6e <USBD_CtlError>
          break;
 8017470:	bf00      	nop
      }
      break;
 8017472:	e005      	b.n	8017480 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8017474:	6839      	ldr	r1, [r7, #0]
 8017476:	6878      	ldr	r0, [r7, #4]
 8017478:	f000 fb79 	bl	8017b6e <USBD_CtlError>
      break;
 801747c:	e000      	b.n	8017480 <USBD_StdEPReq+0x330>
      break;
 801747e:	bf00      	nop
  }

  return ret;
 8017480:	7bfb      	ldrb	r3, [r7, #15]
}
 8017482:	4618      	mov	r0, r3
 8017484:	3710      	adds	r7, #16
 8017486:	46bd      	mov	sp, r7
 8017488:	bd80      	pop	{r7, pc}
	...

0801748c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b084      	sub	sp, #16
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
 8017494:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017496:	2300      	movs	r3, #0
 8017498:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801749a:	2300      	movs	r3, #0
 801749c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801749e:	2300      	movs	r3, #0
 80174a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80174a2:	683b      	ldr	r3, [r7, #0]
 80174a4:	885b      	ldrh	r3, [r3, #2]
 80174a6:	0a1b      	lsrs	r3, r3, #8
 80174a8:	b29b      	uxth	r3, r3
 80174aa:	3b01      	subs	r3, #1
 80174ac:	2b0e      	cmp	r3, #14
 80174ae:	f200 8152 	bhi.w	8017756 <USBD_GetDescriptor+0x2ca>
 80174b2:	a201      	add	r2, pc, #4	@ (adr r2, 80174b8 <USBD_GetDescriptor+0x2c>)
 80174b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174b8:	08017529 	.word	0x08017529
 80174bc:	08017541 	.word	0x08017541
 80174c0:	08017581 	.word	0x08017581
 80174c4:	08017757 	.word	0x08017757
 80174c8:	08017757 	.word	0x08017757
 80174cc:	080176f7 	.word	0x080176f7
 80174d0:	08017723 	.word	0x08017723
 80174d4:	08017757 	.word	0x08017757
 80174d8:	08017757 	.word	0x08017757
 80174dc:	08017757 	.word	0x08017757
 80174e0:	08017757 	.word	0x08017757
 80174e4:	08017757 	.word	0x08017757
 80174e8:	08017757 	.word	0x08017757
 80174ec:	08017757 	.word	0x08017757
 80174f0:	080174f5 	.word	0x080174f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80174fa:	69db      	ldr	r3, [r3, #28]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d00b      	beq.n	8017518 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017506:	69db      	ldr	r3, [r3, #28]
 8017508:	687a      	ldr	r2, [r7, #4]
 801750a:	7c12      	ldrb	r2, [r2, #16]
 801750c:	f107 0108 	add.w	r1, r7, #8
 8017510:	4610      	mov	r0, r2
 8017512:	4798      	blx	r3
 8017514:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017516:	e126      	b.n	8017766 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017518:	6839      	ldr	r1, [r7, #0]
 801751a:	6878      	ldr	r0, [r7, #4]
 801751c:	f000 fb27 	bl	8017b6e <USBD_CtlError>
        err++;
 8017520:	7afb      	ldrb	r3, [r7, #11]
 8017522:	3301      	adds	r3, #1
 8017524:	72fb      	strb	r3, [r7, #11]
      break;
 8017526:	e11e      	b.n	8017766 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	687a      	ldr	r2, [r7, #4]
 8017532:	7c12      	ldrb	r2, [r2, #16]
 8017534:	f107 0108 	add.w	r1, r7, #8
 8017538:	4610      	mov	r0, r2
 801753a:	4798      	blx	r3
 801753c:	60f8      	str	r0, [r7, #12]
      break;
 801753e:	e112      	b.n	8017766 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	7c1b      	ldrb	r3, [r3, #16]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d10d      	bne.n	8017564 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801754e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017550:	f107 0208 	add.w	r2, r7, #8
 8017554:	4610      	mov	r0, r2
 8017556:	4798      	blx	r3
 8017558:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	3301      	adds	r3, #1
 801755e:	2202      	movs	r2, #2
 8017560:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017562:	e100      	b.n	8017766 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801756c:	f107 0208 	add.w	r2, r7, #8
 8017570:	4610      	mov	r0, r2
 8017572:	4798      	blx	r3
 8017574:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	3301      	adds	r3, #1
 801757a:	2202      	movs	r2, #2
 801757c:	701a      	strb	r2, [r3, #0]
      break;
 801757e:	e0f2      	b.n	8017766 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017580:	683b      	ldr	r3, [r7, #0]
 8017582:	885b      	ldrh	r3, [r3, #2]
 8017584:	b2db      	uxtb	r3, r3
 8017586:	2b05      	cmp	r3, #5
 8017588:	f200 80ac 	bhi.w	80176e4 <USBD_GetDescriptor+0x258>
 801758c:	a201      	add	r2, pc, #4	@ (adr r2, 8017594 <USBD_GetDescriptor+0x108>)
 801758e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017592:	bf00      	nop
 8017594:	080175ad 	.word	0x080175ad
 8017598:	080175e1 	.word	0x080175e1
 801759c:	08017615 	.word	0x08017615
 80175a0:	08017649 	.word	0x08017649
 80175a4:	0801767d 	.word	0x0801767d
 80175a8:	080176b1 	.word	0x080176b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80175b2:	685b      	ldr	r3, [r3, #4]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d00b      	beq.n	80175d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80175be:	685b      	ldr	r3, [r3, #4]
 80175c0:	687a      	ldr	r2, [r7, #4]
 80175c2:	7c12      	ldrb	r2, [r2, #16]
 80175c4:	f107 0108 	add.w	r1, r7, #8
 80175c8:	4610      	mov	r0, r2
 80175ca:	4798      	blx	r3
 80175cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80175ce:	e091      	b.n	80176f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80175d0:	6839      	ldr	r1, [r7, #0]
 80175d2:	6878      	ldr	r0, [r7, #4]
 80175d4:	f000 facb 	bl	8017b6e <USBD_CtlError>
            err++;
 80175d8:	7afb      	ldrb	r3, [r7, #11]
 80175da:	3301      	adds	r3, #1
 80175dc:	72fb      	strb	r3, [r7, #11]
          break;
 80175de:	e089      	b.n	80176f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80175e6:	689b      	ldr	r3, [r3, #8]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d00b      	beq.n	8017604 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80175f2:	689b      	ldr	r3, [r3, #8]
 80175f4:	687a      	ldr	r2, [r7, #4]
 80175f6:	7c12      	ldrb	r2, [r2, #16]
 80175f8:	f107 0108 	add.w	r1, r7, #8
 80175fc:	4610      	mov	r0, r2
 80175fe:	4798      	blx	r3
 8017600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017602:	e077      	b.n	80176f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017604:	6839      	ldr	r1, [r7, #0]
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	f000 fab1 	bl	8017b6e <USBD_CtlError>
            err++;
 801760c:	7afb      	ldrb	r3, [r7, #11]
 801760e:	3301      	adds	r3, #1
 8017610:	72fb      	strb	r3, [r7, #11]
          break;
 8017612:	e06f      	b.n	80176f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801761a:	68db      	ldr	r3, [r3, #12]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d00b      	beq.n	8017638 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017626:	68db      	ldr	r3, [r3, #12]
 8017628:	687a      	ldr	r2, [r7, #4]
 801762a:	7c12      	ldrb	r2, [r2, #16]
 801762c:	f107 0108 	add.w	r1, r7, #8
 8017630:	4610      	mov	r0, r2
 8017632:	4798      	blx	r3
 8017634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017636:	e05d      	b.n	80176f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017638:	6839      	ldr	r1, [r7, #0]
 801763a:	6878      	ldr	r0, [r7, #4]
 801763c:	f000 fa97 	bl	8017b6e <USBD_CtlError>
            err++;
 8017640:	7afb      	ldrb	r3, [r7, #11]
 8017642:	3301      	adds	r3, #1
 8017644:	72fb      	strb	r3, [r7, #11]
          break;
 8017646:	e055      	b.n	80176f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801764e:	691b      	ldr	r3, [r3, #16]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d00b      	beq.n	801766c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801765a:	691b      	ldr	r3, [r3, #16]
 801765c:	687a      	ldr	r2, [r7, #4]
 801765e:	7c12      	ldrb	r2, [r2, #16]
 8017660:	f107 0108 	add.w	r1, r7, #8
 8017664:	4610      	mov	r0, r2
 8017666:	4798      	blx	r3
 8017668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801766a:	e043      	b.n	80176f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801766c:	6839      	ldr	r1, [r7, #0]
 801766e:	6878      	ldr	r0, [r7, #4]
 8017670:	f000 fa7d 	bl	8017b6e <USBD_CtlError>
            err++;
 8017674:	7afb      	ldrb	r3, [r7, #11]
 8017676:	3301      	adds	r3, #1
 8017678:	72fb      	strb	r3, [r7, #11]
          break;
 801767a:	e03b      	b.n	80176f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017682:	695b      	ldr	r3, [r3, #20]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d00b      	beq.n	80176a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801768e:	695b      	ldr	r3, [r3, #20]
 8017690:	687a      	ldr	r2, [r7, #4]
 8017692:	7c12      	ldrb	r2, [r2, #16]
 8017694:	f107 0108 	add.w	r1, r7, #8
 8017698:	4610      	mov	r0, r2
 801769a:	4798      	blx	r3
 801769c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801769e:	e029      	b.n	80176f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80176a0:	6839      	ldr	r1, [r7, #0]
 80176a2:	6878      	ldr	r0, [r7, #4]
 80176a4:	f000 fa63 	bl	8017b6e <USBD_CtlError>
            err++;
 80176a8:	7afb      	ldrb	r3, [r7, #11]
 80176aa:	3301      	adds	r3, #1
 80176ac:	72fb      	strb	r3, [r7, #11]
          break;
 80176ae:	e021      	b.n	80176f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80176b6:	699b      	ldr	r3, [r3, #24]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d00b      	beq.n	80176d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80176c2:	699b      	ldr	r3, [r3, #24]
 80176c4:	687a      	ldr	r2, [r7, #4]
 80176c6:	7c12      	ldrb	r2, [r2, #16]
 80176c8:	f107 0108 	add.w	r1, r7, #8
 80176cc:	4610      	mov	r0, r2
 80176ce:	4798      	blx	r3
 80176d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80176d2:	e00f      	b.n	80176f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80176d4:	6839      	ldr	r1, [r7, #0]
 80176d6:	6878      	ldr	r0, [r7, #4]
 80176d8:	f000 fa49 	bl	8017b6e <USBD_CtlError>
            err++;
 80176dc:	7afb      	ldrb	r3, [r7, #11]
 80176de:	3301      	adds	r3, #1
 80176e0:	72fb      	strb	r3, [r7, #11]
          break;
 80176e2:	e007      	b.n	80176f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80176e4:	6839      	ldr	r1, [r7, #0]
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f000 fa41 	bl	8017b6e <USBD_CtlError>
          err++;
 80176ec:	7afb      	ldrb	r3, [r7, #11]
 80176ee:	3301      	adds	r3, #1
 80176f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80176f2:	bf00      	nop
      }
      break;
 80176f4:	e037      	b.n	8017766 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	7c1b      	ldrb	r3, [r3, #16]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d109      	bne.n	8017712 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017706:	f107 0208 	add.w	r2, r7, #8
 801770a:	4610      	mov	r0, r2
 801770c:	4798      	blx	r3
 801770e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017710:	e029      	b.n	8017766 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017712:	6839      	ldr	r1, [r7, #0]
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f000 fa2a 	bl	8017b6e <USBD_CtlError>
        err++;
 801771a:	7afb      	ldrb	r3, [r7, #11]
 801771c:	3301      	adds	r3, #1
 801771e:	72fb      	strb	r3, [r7, #11]
      break;
 8017720:	e021      	b.n	8017766 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	7c1b      	ldrb	r3, [r3, #16]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d10d      	bne.n	8017746 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017732:	f107 0208 	add.w	r2, r7, #8
 8017736:	4610      	mov	r0, r2
 8017738:	4798      	blx	r3
 801773a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	3301      	adds	r3, #1
 8017740:	2207      	movs	r2, #7
 8017742:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017744:	e00f      	b.n	8017766 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017746:	6839      	ldr	r1, [r7, #0]
 8017748:	6878      	ldr	r0, [r7, #4]
 801774a:	f000 fa10 	bl	8017b6e <USBD_CtlError>
        err++;
 801774e:	7afb      	ldrb	r3, [r7, #11]
 8017750:	3301      	adds	r3, #1
 8017752:	72fb      	strb	r3, [r7, #11]
      break;
 8017754:	e007      	b.n	8017766 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8017756:	6839      	ldr	r1, [r7, #0]
 8017758:	6878      	ldr	r0, [r7, #4]
 801775a:	f000 fa08 	bl	8017b6e <USBD_CtlError>
      err++;
 801775e:	7afb      	ldrb	r3, [r7, #11]
 8017760:	3301      	adds	r3, #1
 8017762:	72fb      	strb	r3, [r7, #11]
      break;
 8017764:	bf00      	nop
  }

  if (err != 0U)
 8017766:	7afb      	ldrb	r3, [r7, #11]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d11e      	bne.n	80177aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801776c:	683b      	ldr	r3, [r7, #0]
 801776e:	88db      	ldrh	r3, [r3, #6]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d016      	beq.n	80177a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8017774:	893b      	ldrh	r3, [r7, #8]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d00e      	beq.n	8017798 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	88da      	ldrh	r2, [r3, #6]
 801777e:	893b      	ldrh	r3, [r7, #8]
 8017780:	4293      	cmp	r3, r2
 8017782:	bf28      	it	cs
 8017784:	4613      	movcs	r3, r2
 8017786:	b29b      	uxth	r3, r3
 8017788:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801778a:	893b      	ldrh	r3, [r7, #8]
 801778c:	461a      	mov	r2, r3
 801778e:	68f9      	ldr	r1, [r7, #12]
 8017790:	6878      	ldr	r0, [r7, #4]
 8017792:	f000 fa69 	bl	8017c68 <USBD_CtlSendData>
 8017796:	e009      	b.n	80177ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017798:	6839      	ldr	r1, [r7, #0]
 801779a:	6878      	ldr	r0, [r7, #4]
 801779c:	f000 f9e7 	bl	8017b6e <USBD_CtlError>
 80177a0:	e004      	b.n	80177ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	f000 faba 	bl	8017d1c <USBD_CtlSendStatus>
 80177a8:	e000      	b.n	80177ac <USBD_GetDescriptor+0x320>
    return;
 80177aa:	bf00      	nop
  }
}
 80177ac:	3710      	adds	r7, #16
 80177ae:	46bd      	mov	sp, r7
 80177b0:	bd80      	pop	{r7, pc}
 80177b2:	bf00      	nop

080177b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b084      	sub	sp, #16
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
 80177bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	889b      	ldrh	r3, [r3, #4]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d131      	bne.n	801782a <USBD_SetAddress+0x76>
 80177c6:	683b      	ldr	r3, [r7, #0]
 80177c8:	88db      	ldrh	r3, [r3, #6]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d12d      	bne.n	801782a <USBD_SetAddress+0x76>
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	885b      	ldrh	r3, [r3, #2]
 80177d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80177d4:	d829      	bhi.n	801782a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80177d6:	683b      	ldr	r3, [r7, #0]
 80177d8:	885b      	ldrh	r3, [r3, #2]
 80177da:	b2db      	uxtb	r3, r3
 80177dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80177e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80177e8:	b2db      	uxtb	r3, r3
 80177ea:	2b03      	cmp	r3, #3
 80177ec:	d104      	bne.n	80177f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80177ee:	6839      	ldr	r1, [r7, #0]
 80177f0:	6878      	ldr	r0, [r7, #4]
 80177f2:	f000 f9bc 	bl	8017b6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80177f6:	e01d      	b.n	8017834 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	7bfa      	ldrb	r2, [r7, #15]
 80177fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017800:	7bfb      	ldrb	r3, [r7, #15]
 8017802:	4619      	mov	r1, r3
 8017804:	6878      	ldr	r0, [r7, #4]
 8017806:	f000 ff13 	bl	8018630 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	f000 fa86 	bl	8017d1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017810:	7bfb      	ldrb	r3, [r7, #15]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d004      	beq.n	8017820 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	2202      	movs	r2, #2
 801781a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801781e:	e009      	b.n	8017834 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2201      	movs	r2, #1
 8017824:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017828:	e004      	b.n	8017834 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801782a:	6839      	ldr	r1, [r7, #0]
 801782c:	6878      	ldr	r0, [r7, #4]
 801782e:	f000 f99e 	bl	8017b6e <USBD_CtlError>
  }
}
 8017832:	bf00      	nop
 8017834:	bf00      	nop
 8017836:	3710      	adds	r7, #16
 8017838:	46bd      	mov	sp, r7
 801783a:	bd80      	pop	{r7, pc}

0801783c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b084      	sub	sp, #16
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017846:	2300      	movs	r3, #0
 8017848:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801784a:	683b      	ldr	r3, [r7, #0]
 801784c:	885b      	ldrh	r3, [r3, #2]
 801784e:	b2da      	uxtb	r2, r3
 8017850:	4b4e      	ldr	r3, [pc, #312]	@ (801798c <USBD_SetConfig+0x150>)
 8017852:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017854:	4b4d      	ldr	r3, [pc, #308]	@ (801798c <USBD_SetConfig+0x150>)
 8017856:	781b      	ldrb	r3, [r3, #0]
 8017858:	2b01      	cmp	r3, #1
 801785a:	d905      	bls.n	8017868 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801785c:	6839      	ldr	r1, [r7, #0]
 801785e:	6878      	ldr	r0, [r7, #4]
 8017860:	f000 f985 	bl	8017b6e <USBD_CtlError>
    return USBD_FAIL;
 8017864:	2303      	movs	r3, #3
 8017866:	e08c      	b.n	8017982 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801786e:	b2db      	uxtb	r3, r3
 8017870:	2b02      	cmp	r3, #2
 8017872:	d002      	beq.n	801787a <USBD_SetConfig+0x3e>
 8017874:	2b03      	cmp	r3, #3
 8017876:	d029      	beq.n	80178cc <USBD_SetConfig+0x90>
 8017878:	e075      	b.n	8017966 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801787a:	4b44      	ldr	r3, [pc, #272]	@ (801798c <USBD_SetConfig+0x150>)
 801787c:	781b      	ldrb	r3, [r3, #0]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d020      	beq.n	80178c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8017882:	4b42      	ldr	r3, [pc, #264]	@ (801798c <USBD_SetConfig+0x150>)
 8017884:	781b      	ldrb	r3, [r3, #0]
 8017886:	461a      	mov	r2, r3
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801788c:	4b3f      	ldr	r3, [pc, #252]	@ (801798c <USBD_SetConfig+0x150>)
 801788e:	781b      	ldrb	r3, [r3, #0]
 8017890:	4619      	mov	r1, r3
 8017892:	6878      	ldr	r0, [r7, #4]
 8017894:	f7fe ffb9 	bl	801680a <USBD_SetClassConfig>
 8017898:	4603      	mov	r3, r0
 801789a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801789c:	7bfb      	ldrb	r3, [r7, #15]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d008      	beq.n	80178b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80178a2:	6839      	ldr	r1, [r7, #0]
 80178a4:	6878      	ldr	r0, [r7, #4]
 80178a6:	f000 f962 	bl	8017b6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	2202      	movs	r2, #2
 80178ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80178b2:	e065      	b.n	8017980 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80178b4:	6878      	ldr	r0, [r7, #4]
 80178b6:	f000 fa31 	bl	8017d1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	2203      	movs	r2, #3
 80178be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80178c2:	e05d      	b.n	8017980 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80178c4:	6878      	ldr	r0, [r7, #4]
 80178c6:	f000 fa29 	bl	8017d1c <USBD_CtlSendStatus>
      break;
 80178ca:	e059      	b.n	8017980 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80178cc:	4b2f      	ldr	r3, [pc, #188]	@ (801798c <USBD_SetConfig+0x150>)
 80178ce:	781b      	ldrb	r3, [r3, #0]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d112      	bne.n	80178fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	2202      	movs	r2, #2
 80178d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80178dc:	4b2b      	ldr	r3, [pc, #172]	@ (801798c <USBD_SetConfig+0x150>)
 80178de:	781b      	ldrb	r3, [r3, #0]
 80178e0:	461a      	mov	r2, r3
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80178e6:	4b29      	ldr	r3, [pc, #164]	@ (801798c <USBD_SetConfig+0x150>)
 80178e8:	781b      	ldrb	r3, [r3, #0]
 80178ea:	4619      	mov	r1, r3
 80178ec:	6878      	ldr	r0, [r7, #4]
 80178ee:	f7fe ffa8 	bl	8016842 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f000 fa12 	bl	8017d1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80178f8:	e042      	b.n	8017980 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80178fa:	4b24      	ldr	r3, [pc, #144]	@ (801798c <USBD_SetConfig+0x150>)
 80178fc:	781b      	ldrb	r3, [r3, #0]
 80178fe:	461a      	mov	r2, r3
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	685b      	ldr	r3, [r3, #4]
 8017904:	429a      	cmp	r2, r3
 8017906:	d02a      	beq.n	801795e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	685b      	ldr	r3, [r3, #4]
 801790c:	b2db      	uxtb	r3, r3
 801790e:	4619      	mov	r1, r3
 8017910:	6878      	ldr	r0, [r7, #4]
 8017912:	f7fe ff96 	bl	8016842 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017916:	4b1d      	ldr	r3, [pc, #116]	@ (801798c <USBD_SetConfig+0x150>)
 8017918:	781b      	ldrb	r3, [r3, #0]
 801791a:	461a      	mov	r2, r3
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017920:	4b1a      	ldr	r3, [pc, #104]	@ (801798c <USBD_SetConfig+0x150>)
 8017922:	781b      	ldrb	r3, [r3, #0]
 8017924:	4619      	mov	r1, r3
 8017926:	6878      	ldr	r0, [r7, #4]
 8017928:	f7fe ff6f 	bl	801680a <USBD_SetClassConfig>
 801792c:	4603      	mov	r3, r0
 801792e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017930:	7bfb      	ldrb	r3, [r7, #15]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d00f      	beq.n	8017956 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8017936:	6839      	ldr	r1, [r7, #0]
 8017938:	6878      	ldr	r0, [r7, #4]
 801793a:	f000 f918 	bl	8017b6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	685b      	ldr	r3, [r3, #4]
 8017942:	b2db      	uxtb	r3, r3
 8017944:	4619      	mov	r1, r3
 8017946:	6878      	ldr	r0, [r7, #4]
 8017948:	f7fe ff7b 	bl	8016842 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	2202      	movs	r2, #2
 8017950:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017954:	e014      	b.n	8017980 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017956:	6878      	ldr	r0, [r7, #4]
 8017958:	f000 f9e0 	bl	8017d1c <USBD_CtlSendStatus>
      break;
 801795c:	e010      	b.n	8017980 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801795e:	6878      	ldr	r0, [r7, #4]
 8017960:	f000 f9dc 	bl	8017d1c <USBD_CtlSendStatus>
      break;
 8017964:	e00c      	b.n	8017980 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8017966:	6839      	ldr	r1, [r7, #0]
 8017968:	6878      	ldr	r0, [r7, #4]
 801796a:	f000 f900 	bl	8017b6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801796e:	4b07      	ldr	r3, [pc, #28]	@ (801798c <USBD_SetConfig+0x150>)
 8017970:	781b      	ldrb	r3, [r3, #0]
 8017972:	4619      	mov	r1, r3
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	f7fe ff64 	bl	8016842 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801797a:	2303      	movs	r3, #3
 801797c:	73fb      	strb	r3, [r7, #15]
      break;
 801797e:	bf00      	nop
  }

  return ret;
 8017980:	7bfb      	ldrb	r3, [r7, #15]
}
 8017982:	4618      	mov	r0, r3
 8017984:	3710      	adds	r7, #16
 8017986:	46bd      	mov	sp, r7
 8017988:	bd80      	pop	{r7, pc}
 801798a:	bf00      	nop
 801798c:	24013688 	.word	0x24013688

08017990 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b082      	sub	sp, #8
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
 8017998:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801799a:	683b      	ldr	r3, [r7, #0]
 801799c:	88db      	ldrh	r3, [r3, #6]
 801799e:	2b01      	cmp	r3, #1
 80179a0:	d004      	beq.n	80179ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80179a2:	6839      	ldr	r1, [r7, #0]
 80179a4:	6878      	ldr	r0, [r7, #4]
 80179a6:	f000 f8e2 	bl	8017b6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80179aa:	e023      	b.n	80179f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80179b2:	b2db      	uxtb	r3, r3
 80179b4:	2b02      	cmp	r3, #2
 80179b6:	dc02      	bgt.n	80179be <USBD_GetConfig+0x2e>
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	dc03      	bgt.n	80179c4 <USBD_GetConfig+0x34>
 80179bc:	e015      	b.n	80179ea <USBD_GetConfig+0x5a>
 80179be:	2b03      	cmp	r3, #3
 80179c0:	d00b      	beq.n	80179da <USBD_GetConfig+0x4a>
 80179c2:	e012      	b.n	80179ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	2200      	movs	r2, #0
 80179c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	3308      	adds	r3, #8
 80179ce:	2201      	movs	r2, #1
 80179d0:	4619      	mov	r1, r3
 80179d2:	6878      	ldr	r0, [r7, #4]
 80179d4:	f000 f948 	bl	8017c68 <USBD_CtlSendData>
        break;
 80179d8:	e00c      	b.n	80179f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	3304      	adds	r3, #4
 80179de:	2201      	movs	r2, #1
 80179e0:	4619      	mov	r1, r3
 80179e2:	6878      	ldr	r0, [r7, #4]
 80179e4:	f000 f940 	bl	8017c68 <USBD_CtlSendData>
        break;
 80179e8:	e004      	b.n	80179f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80179ea:	6839      	ldr	r1, [r7, #0]
 80179ec:	6878      	ldr	r0, [r7, #4]
 80179ee:	f000 f8be 	bl	8017b6e <USBD_CtlError>
        break;
 80179f2:	bf00      	nop
}
 80179f4:	bf00      	nop
 80179f6:	3708      	adds	r7, #8
 80179f8:	46bd      	mov	sp, r7
 80179fa:	bd80      	pop	{r7, pc}

080179fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b082      	sub	sp, #8
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
 8017a04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017a0c:	b2db      	uxtb	r3, r3
 8017a0e:	3b01      	subs	r3, #1
 8017a10:	2b02      	cmp	r3, #2
 8017a12:	d81e      	bhi.n	8017a52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	88db      	ldrh	r3, [r3, #6]
 8017a18:	2b02      	cmp	r3, #2
 8017a1a:	d004      	beq.n	8017a26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017a1c:	6839      	ldr	r1, [r7, #0]
 8017a1e:	6878      	ldr	r0, [r7, #4]
 8017a20:	f000 f8a5 	bl	8017b6e <USBD_CtlError>
        break;
 8017a24:	e01a      	b.n	8017a5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	2201      	movs	r2, #1
 8017a2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d005      	beq.n	8017a42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	68db      	ldr	r3, [r3, #12]
 8017a3a:	f043 0202 	orr.w	r2, r3, #2
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	330c      	adds	r3, #12
 8017a46:	2202      	movs	r2, #2
 8017a48:	4619      	mov	r1, r3
 8017a4a:	6878      	ldr	r0, [r7, #4]
 8017a4c:	f000 f90c 	bl	8017c68 <USBD_CtlSendData>
      break;
 8017a50:	e004      	b.n	8017a5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017a52:	6839      	ldr	r1, [r7, #0]
 8017a54:	6878      	ldr	r0, [r7, #4]
 8017a56:	f000 f88a 	bl	8017b6e <USBD_CtlError>
      break;
 8017a5a:	bf00      	nop
  }
}
 8017a5c:	bf00      	nop
 8017a5e:	3708      	adds	r7, #8
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd80      	pop	{r7, pc}

08017a64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b082      	sub	sp, #8
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017a6e:	683b      	ldr	r3, [r7, #0]
 8017a70:	885b      	ldrh	r3, [r3, #2]
 8017a72:	2b01      	cmp	r3, #1
 8017a74:	d107      	bne.n	8017a86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	2201      	movs	r2, #1
 8017a7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017a7e:	6878      	ldr	r0, [r7, #4]
 8017a80:	f000 f94c 	bl	8017d1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017a84:	e013      	b.n	8017aae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017a86:	683b      	ldr	r3, [r7, #0]
 8017a88:	885b      	ldrh	r3, [r3, #2]
 8017a8a:	2b02      	cmp	r3, #2
 8017a8c:	d10b      	bne.n	8017aa6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8017a8e:	683b      	ldr	r3, [r7, #0]
 8017a90:	889b      	ldrh	r3, [r3, #4]
 8017a92:	0a1b      	lsrs	r3, r3, #8
 8017a94:	b29b      	uxth	r3, r3
 8017a96:	b2da      	uxtb	r2, r3
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017a9e:	6878      	ldr	r0, [r7, #4]
 8017aa0:	f000 f93c 	bl	8017d1c <USBD_CtlSendStatus>
}
 8017aa4:	e003      	b.n	8017aae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017aa6:	6839      	ldr	r1, [r7, #0]
 8017aa8:	6878      	ldr	r0, [r7, #4]
 8017aaa:	f000 f860 	bl	8017b6e <USBD_CtlError>
}
 8017aae:	bf00      	nop
 8017ab0:	3708      	adds	r7, #8
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	bd80      	pop	{r7, pc}

08017ab6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017ab6:	b580      	push	{r7, lr}
 8017ab8:	b082      	sub	sp, #8
 8017aba:	af00      	add	r7, sp, #0
 8017abc:	6078      	str	r0, [r7, #4]
 8017abe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017ac6:	b2db      	uxtb	r3, r3
 8017ac8:	3b01      	subs	r3, #1
 8017aca:	2b02      	cmp	r3, #2
 8017acc:	d80b      	bhi.n	8017ae6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	885b      	ldrh	r3, [r3, #2]
 8017ad2:	2b01      	cmp	r3, #1
 8017ad4:	d10c      	bne.n	8017af0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	2200      	movs	r2, #0
 8017ada:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017ade:	6878      	ldr	r0, [r7, #4]
 8017ae0:	f000 f91c 	bl	8017d1c <USBD_CtlSendStatus>
      }
      break;
 8017ae4:	e004      	b.n	8017af0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017ae6:	6839      	ldr	r1, [r7, #0]
 8017ae8:	6878      	ldr	r0, [r7, #4]
 8017aea:	f000 f840 	bl	8017b6e <USBD_CtlError>
      break;
 8017aee:	e000      	b.n	8017af2 <USBD_ClrFeature+0x3c>
      break;
 8017af0:	bf00      	nop
  }
}
 8017af2:	bf00      	nop
 8017af4:	3708      	adds	r7, #8
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}

08017afa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017afa:	b580      	push	{r7, lr}
 8017afc:	b084      	sub	sp, #16
 8017afe:	af00      	add	r7, sp, #0
 8017b00:	6078      	str	r0, [r7, #4]
 8017b02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017b04:	683b      	ldr	r3, [r7, #0]
 8017b06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	781a      	ldrb	r2, [r3, #0]
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	3301      	adds	r3, #1
 8017b14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	781a      	ldrb	r2, [r3, #0]
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	3301      	adds	r3, #1
 8017b22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017b24:	68f8      	ldr	r0, [r7, #12]
 8017b26:	f7ff fa16 	bl	8016f56 <SWAPBYTE>
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	461a      	mov	r2, r3
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	3301      	adds	r3, #1
 8017b36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	3301      	adds	r3, #1
 8017b3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017b3e:	68f8      	ldr	r0, [r7, #12]
 8017b40:	f7ff fa09 	bl	8016f56 <SWAPBYTE>
 8017b44:	4603      	mov	r3, r0
 8017b46:	461a      	mov	r2, r3
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	3301      	adds	r3, #1
 8017b50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	3301      	adds	r3, #1
 8017b56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017b58:	68f8      	ldr	r0, [r7, #12]
 8017b5a:	f7ff f9fc 	bl	8016f56 <SWAPBYTE>
 8017b5e:	4603      	mov	r3, r0
 8017b60:	461a      	mov	r2, r3
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	80da      	strh	r2, [r3, #6]
}
 8017b66:	bf00      	nop
 8017b68:	3710      	adds	r7, #16
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	bd80      	pop	{r7, pc}

08017b6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017b6e:	b580      	push	{r7, lr}
 8017b70:	b082      	sub	sp, #8
 8017b72:	af00      	add	r7, sp, #0
 8017b74:	6078      	str	r0, [r7, #4]
 8017b76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017b78:	2180      	movs	r1, #128	@ 0x80
 8017b7a:	6878      	ldr	r0, [r7, #4]
 8017b7c:	f000 fcee 	bl	801855c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017b80:	2100      	movs	r1, #0
 8017b82:	6878      	ldr	r0, [r7, #4]
 8017b84:	f000 fcea 	bl	801855c <USBD_LL_StallEP>
}
 8017b88:	bf00      	nop
 8017b8a:	3708      	adds	r7, #8
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}

08017b90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b086      	sub	sp, #24
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	60f8      	str	r0, [r7, #12]
 8017b98:	60b9      	str	r1, [r7, #8]
 8017b9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d042      	beq.n	8017c2c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8017baa:	6938      	ldr	r0, [r7, #16]
 8017bac:	f000 f842 	bl	8017c34 <USBD_GetLen>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	3301      	adds	r3, #1
 8017bb4:	005b      	lsls	r3, r3, #1
 8017bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017bba:	d808      	bhi.n	8017bce <USBD_GetString+0x3e>
 8017bbc:	6938      	ldr	r0, [r7, #16]
 8017bbe:	f000 f839 	bl	8017c34 <USBD_GetLen>
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	3301      	adds	r3, #1
 8017bc6:	b29b      	uxth	r3, r3
 8017bc8:	005b      	lsls	r3, r3, #1
 8017bca:	b29a      	uxth	r2, r3
 8017bcc:	e001      	b.n	8017bd2 <USBD_GetString+0x42>
 8017bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017bd6:	7dfb      	ldrb	r3, [r7, #23]
 8017bd8:	68ba      	ldr	r2, [r7, #8]
 8017bda:	4413      	add	r3, r2
 8017bdc:	687a      	ldr	r2, [r7, #4]
 8017bde:	7812      	ldrb	r2, [r2, #0]
 8017be0:	701a      	strb	r2, [r3, #0]
  idx++;
 8017be2:	7dfb      	ldrb	r3, [r7, #23]
 8017be4:	3301      	adds	r3, #1
 8017be6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017be8:	7dfb      	ldrb	r3, [r7, #23]
 8017bea:	68ba      	ldr	r2, [r7, #8]
 8017bec:	4413      	add	r3, r2
 8017bee:	2203      	movs	r2, #3
 8017bf0:	701a      	strb	r2, [r3, #0]
  idx++;
 8017bf2:	7dfb      	ldrb	r3, [r7, #23]
 8017bf4:	3301      	adds	r3, #1
 8017bf6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017bf8:	e013      	b.n	8017c22 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8017bfa:	7dfb      	ldrb	r3, [r7, #23]
 8017bfc:	68ba      	ldr	r2, [r7, #8]
 8017bfe:	4413      	add	r3, r2
 8017c00:	693a      	ldr	r2, [r7, #16]
 8017c02:	7812      	ldrb	r2, [r2, #0]
 8017c04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017c06:	693b      	ldr	r3, [r7, #16]
 8017c08:	3301      	adds	r3, #1
 8017c0a:	613b      	str	r3, [r7, #16]
    idx++;
 8017c0c:	7dfb      	ldrb	r3, [r7, #23]
 8017c0e:	3301      	adds	r3, #1
 8017c10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017c12:	7dfb      	ldrb	r3, [r7, #23]
 8017c14:	68ba      	ldr	r2, [r7, #8]
 8017c16:	4413      	add	r3, r2
 8017c18:	2200      	movs	r2, #0
 8017c1a:	701a      	strb	r2, [r3, #0]
    idx++;
 8017c1c:	7dfb      	ldrb	r3, [r7, #23]
 8017c1e:	3301      	adds	r3, #1
 8017c20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017c22:	693b      	ldr	r3, [r7, #16]
 8017c24:	781b      	ldrb	r3, [r3, #0]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d1e7      	bne.n	8017bfa <USBD_GetString+0x6a>
 8017c2a:	e000      	b.n	8017c2e <USBD_GetString+0x9e>
    return;
 8017c2c:	bf00      	nop
  }
}
 8017c2e:	3718      	adds	r7, #24
 8017c30:	46bd      	mov	sp, r7
 8017c32:	bd80      	pop	{r7, pc}

08017c34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017c34:	b480      	push	{r7}
 8017c36:	b085      	sub	sp, #20
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017c44:	e005      	b.n	8017c52 <USBD_GetLen+0x1e>
  {
    len++;
 8017c46:	7bfb      	ldrb	r3, [r7, #15]
 8017c48:	3301      	adds	r3, #1
 8017c4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017c4c:	68bb      	ldr	r3, [r7, #8]
 8017c4e:	3301      	adds	r3, #1
 8017c50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017c52:	68bb      	ldr	r3, [r7, #8]
 8017c54:	781b      	ldrb	r3, [r3, #0]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d1f5      	bne.n	8017c46 <USBD_GetLen+0x12>
  }

  return len;
 8017c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	3714      	adds	r7, #20
 8017c60:	46bd      	mov	sp, r7
 8017c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c66:	4770      	bx	lr

08017c68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b084      	sub	sp, #16
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	60f8      	str	r0, [r7, #12]
 8017c70:	60b9      	str	r1, [r7, #8]
 8017c72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	2202      	movs	r2, #2
 8017c78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	687a      	ldr	r2, [r7, #4]
 8017c80:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	687a      	ldr	r2, [r7, #4]
 8017c86:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	68ba      	ldr	r2, [r7, #8]
 8017c8c:	2100      	movs	r1, #0
 8017c8e:	68f8      	ldr	r0, [r7, #12]
 8017c90:	f000 fced 	bl	801866e <USBD_LL_Transmit>

  return USBD_OK;
 8017c94:	2300      	movs	r3, #0
}
 8017c96:	4618      	mov	r0, r3
 8017c98:	3710      	adds	r7, #16
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	bd80      	pop	{r7, pc}

08017c9e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017c9e:	b580      	push	{r7, lr}
 8017ca0:	b084      	sub	sp, #16
 8017ca2:	af00      	add	r7, sp, #0
 8017ca4:	60f8      	str	r0, [r7, #12]
 8017ca6:	60b9      	str	r1, [r7, #8]
 8017ca8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	68ba      	ldr	r2, [r7, #8]
 8017cae:	2100      	movs	r1, #0
 8017cb0:	68f8      	ldr	r0, [r7, #12]
 8017cb2:	f000 fcdc 	bl	801866e <USBD_LL_Transmit>

  return USBD_OK;
 8017cb6:	2300      	movs	r3, #0
}
 8017cb8:	4618      	mov	r0, r3
 8017cba:	3710      	adds	r7, #16
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}

08017cc0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b084      	sub	sp, #16
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	60f8      	str	r0, [r7, #12]
 8017cc8:	60b9      	str	r1, [r7, #8]
 8017cca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	2203      	movs	r2, #3
 8017cd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	687a      	ldr	r2, [r7, #4]
 8017cd8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	687a      	ldr	r2, [r7, #4]
 8017ce0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	68ba      	ldr	r2, [r7, #8]
 8017ce8:	2100      	movs	r1, #0
 8017cea:	68f8      	ldr	r0, [r7, #12]
 8017cec:	f000 fce0 	bl	80186b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017cf0:	2300      	movs	r3, #0
}
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	3710      	adds	r7, #16
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bd80      	pop	{r7, pc}

08017cfa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017cfa:	b580      	push	{r7, lr}
 8017cfc:	b084      	sub	sp, #16
 8017cfe:	af00      	add	r7, sp, #0
 8017d00:	60f8      	str	r0, [r7, #12]
 8017d02:	60b9      	str	r1, [r7, #8]
 8017d04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	68ba      	ldr	r2, [r7, #8]
 8017d0a:	2100      	movs	r1, #0
 8017d0c:	68f8      	ldr	r0, [r7, #12]
 8017d0e:	f000 fccf 	bl	80186b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017d12:	2300      	movs	r3, #0
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3710      	adds	r7, #16
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	2204      	movs	r2, #4
 8017d28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	2200      	movs	r2, #0
 8017d30:	2100      	movs	r1, #0
 8017d32:	6878      	ldr	r0, [r7, #4]
 8017d34:	f000 fc9b 	bl	801866e <USBD_LL_Transmit>

  return USBD_OK;
 8017d38:	2300      	movs	r3, #0
}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	3708      	adds	r7, #8
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}

08017d42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017d42:	b580      	push	{r7, lr}
 8017d44:	b082      	sub	sp, #8
 8017d46:	af00      	add	r7, sp, #0
 8017d48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	2205      	movs	r2, #5
 8017d4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017d52:	2300      	movs	r3, #0
 8017d54:	2200      	movs	r2, #0
 8017d56:	2100      	movs	r1, #0
 8017d58:	6878      	ldr	r0, [r7, #4]
 8017d5a:	f000 fca9 	bl	80186b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017d5e:	2300      	movs	r3, #0
}
 8017d60:	4618      	mov	r0, r3
 8017d62:	3708      	adds	r7, #8
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}

08017d68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8017d6c:	2201      	movs	r2, #1
 8017d6e:	4913      	ldr	r1, [pc, #76]	@ (8017dbc <MX_USB_DEVICE_Init+0x54>)
 8017d70:	4813      	ldr	r0, [pc, #76]	@ (8017dc0 <MX_USB_DEVICE_Init+0x58>)
 8017d72:	f7fe fccd 	bl	8016710 <USBD_Init>
 8017d76:	4603      	mov	r3, r0
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d001      	beq.n	8017d80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017d7c:	f7ea f9ec 	bl	8002158 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8017d80:	4910      	ldr	r1, [pc, #64]	@ (8017dc4 <MX_USB_DEVICE_Init+0x5c>)
 8017d82:	480f      	ldr	r0, [pc, #60]	@ (8017dc0 <MX_USB_DEVICE_Init+0x58>)
 8017d84:	f7fe fcf4 	bl	8016770 <USBD_RegisterClass>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d001      	beq.n	8017d92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017d8e:	f7ea f9e3 	bl	8002158 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8017d92:	490d      	ldr	r1, [pc, #52]	@ (8017dc8 <MX_USB_DEVICE_Init+0x60>)
 8017d94:	480a      	ldr	r0, [pc, #40]	@ (8017dc0 <MX_USB_DEVICE_Init+0x58>)
 8017d96:	f7fe fbeb 	bl	8016570 <USBD_CDC_RegisterInterface>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d001      	beq.n	8017da4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017da0:	f7ea f9da 	bl	8002158 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8017da4:	4806      	ldr	r0, [pc, #24]	@ (8017dc0 <MX_USB_DEVICE_Init+0x58>)
 8017da6:	f7fe fd19 	bl	80167dc <USBD_Start>
 8017daa:	4603      	mov	r3, r0
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d001      	beq.n	8017db4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017db0:	f7ea f9d2 	bl	8002158 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017db4:	f7f5 f94c 	bl	800d050 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017db8:	bf00      	nop
 8017dba:	bd80      	pop	{r7, pc}
 8017dbc:	240000b0 	.word	0x240000b0
 8017dc0:	2401368c 	.word	0x2401368c
 8017dc4:	2400001c 	.word	0x2400001c
 8017dc8:	2400009c 	.word	0x2400009c

08017dcc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8017dd0:	2200      	movs	r2, #0
 8017dd2:	4905      	ldr	r1, [pc, #20]	@ (8017de8 <CDC_Init_HS+0x1c>)
 8017dd4:	4805      	ldr	r0, [pc, #20]	@ (8017dec <CDC_Init_HS+0x20>)
 8017dd6:	f7fe fbe5 	bl	80165a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8017dda:	4905      	ldr	r1, [pc, #20]	@ (8017df0 <CDC_Init_HS+0x24>)
 8017ddc:	4803      	ldr	r0, [pc, #12]	@ (8017dec <CDC_Init_HS+0x20>)
 8017dde:	f7fe fc03 	bl	80165e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017de2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017de4:	4618      	mov	r0, r3
 8017de6:	bd80      	pop	{r7, pc}
 8017de8:	24014168 	.word	0x24014168
 8017dec:	2401368c 	.word	0x2401368c
 8017df0:	24013968 	.word	0x24013968

08017df4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8017df4:	b480      	push	{r7}
 8017df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8017df8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e02:	4770      	bx	lr

08017e04 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017e04:	b480      	push	{r7}
 8017e06:	b083      	sub	sp, #12
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	6039      	str	r1, [r7, #0]
 8017e0e:	71fb      	strb	r3, [r7, #7]
 8017e10:	4613      	mov	r3, r2
 8017e12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8017e14:	79fb      	ldrb	r3, [r7, #7]
 8017e16:	2b23      	cmp	r3, #35	@ 0x23
 8017e18:	d84a      	bhi.n	8017eb0 <CDC_Control_HS+0xac>
 8017e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8017e20 <CDC_Control_HS+0x1c>)
 8017e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e20:	08017eb1 	.word	0x08017eb1
 8017e24:	08017eb1 	.word	0x08017eb1
 8017e28:	08017eb1 	.word	0x08017eb1
 8017e2c:	08017eb1 	.word	0x08017eb1
 8017e30:	08017eb1 	.word	0x08017eb1
 8017e34:	08017eb1 	.word	0x08017eb1
 8017e38:	08017eb1 	.word	0x08017eb1
 8017e3c:	08017eb1 	.word	0x08017eb1
 8017e40:	08017eb1 	.word	0x08017eb1
 8017e44:	08017eb1 	.word	0x08017eb1
 8017e48:	08017eb1 	.word	0x08017eb1
 8017e4c:	08017eb1 	.word	0x08017eb1
 8017e50:	08017eb1 	.word	0x08017eb1
 8017e54:	08017eb1 	.word	0x08017eb1
 8017e58:	08017eb1 	.word	0x08017eb1
 8017e5c:	08017eb1 	.word	0x08017eb1
 8017e60:	08017eb1 	.word	0x08017eb1
 8017e64:	08017eb1 	.word	0x08017eb1
 8017e68:	08017eb1 	.word	0x08017eb1
 8017e6c:	08017eb1 	.word	0x08017eb1
 8017e70:	08017eb1 	.word	0x08017eb1
 8017e74:	08017eb1 	.word	0x08017eb1
 8017e78:	08017eb1 	.word	0x08017eb1
 8017e7c:	08017eb1 	.word	0x08017eb1
 8017e80:	08017eb1 	.word	0x08017eb1
 8017e84:	08017eb1 	.word	0x08017eb1
 8017e88:	08017eb1 	.word	0x08017eb1
 8017e8c:	08017eb1 	.word	0x08017eb1
 8017e90:	08017eb1 	.word	0x08017eb1
 8017e94:	08017eb1 	.word	0x08017eb1
 8017e98:	08017eb1 	.word	0x08017eb1
 8017e9c:	08017eb1 	.word	0x08017eb1
 8017ea0:	08017eb1 	.word	0x08017eb1
 8017ea4:	08017eb1 	.word	0x08017eb1
 8017ea8:	08017eb1 	.word	0x08017eb1
 8017eac:	08017eb1 	.word	0x08017eb1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017eb0:	bf00      	nop
  }

  return (USBD_OK);
 8017eb2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	370c      	adds	r7, #12
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ebe:	4770      	bx	lr

08017ec0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b082      	sub	sp, #8
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
 8017ec8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8017eca:	6879      	ldr	r1, [r7, #4]
 8017ecc:	4808      	ldr	r0, [pc, #32]	@ (8017ef0 <CDC_Receive_HS+0x30>)
 8017ece:	f7fe fb8b 	bl	80165e8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8017ed2:	4807      	ldr	r0, [pc, #28]	@ (8017ef0 <CDC_Receive_HS+0x30>)
 8017ed4:	f7fe fbe6 	bl	80166a4 <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	461a      	mov	r2, r3
 8017ede:	6879      	ldr	r1, [r7, #4]
 8017ee0:	4804      	ldr	r0, [pc, #16]	@ (8017ef4 <CDC_Receive_HS+0x34>)
 8017ee2:	f7ed fc03 	bl	80056ec <VibeCheckShell_PutInput>

	return (USBD_OK);
 8017ee6:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8017ee8:	4618      	mov	r0, r3
 8017eea:	3708      	adds	r7, #8
 8017eec:	46bd      	mov	sp, r7
 8017eee:	bd80      	pop	{r7, pc}
 8017ef0:	2401368c 	.word	0x2401368c
 8017ef4:	24000988 	.word	0x24000988

08017ef8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b084      	sub	sp, #16
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
 8017f00:	460b      	mov	r3, r1
 8017f02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017f04:	2300      	movs	r3, #0
 8017f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8017f08:	4b0d      	ldr	r3, [pc, #52]	@ (8017f40 <CDC_Transmit_HS+0x48>)
 8017f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017f0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017f10:	68bb      	ldr	r3, [r7, #8]
 8017f12:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d001      	beq.n	8017f1e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8017f1a:	2301      	movs	r3, #1
 8017f1c:	e00b      	b.n	8017f36 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8017f1e:	887b      	ldrh	r3, [r7, #2]
 8017f20:	461a      	mov	r2, r3
 8017f22:	6879      	ldr	r1, [r7, #4]
 8017f24:	4806      	ldr	r0, [pc, #24]	@ (8017f40 <CDC_Transmit_HS+0x48>)
 8017f26:	f7fe fb3d 	bl	80165a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8017f2a:	4805      	ldr	r0, [pc, #20]	@ (8017f40 <CDC_Transmit_HS+0x48>)
 8017f2c:	f7fe fb7a 	bl	8016624 <USBD_CDC_TransmitPacket>
 8017f30:	4603      	mov	r3, r0
 8017f32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8017f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3710      	adds	r7, #16
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	2401368c 	.word	0x2401368c

08017f44 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017f44:	b480      	push	{r7}
 8017f46:	b087      	sub	sp, #28
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	60f8      	str	r0, [r7, #12]
 8017f4c:	60b9      	str	r1, [r7, #8]
 8017f4e:	4613      	mov	r3, r2
 8017f50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017f52:	2300      	movs	r3, #0
 8017f54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8017f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	371c      	adds	r7, #28
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f64:	4770      	bx	lr
	...

08017f68 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f68:	b480      	push	{r7}
 8017f6a:	b083      	sub	sp, #12
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	4603      	mov	r3, r0
 8017f70:	6039      	str	r1, [r7, #0]
 8017f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	2212      	movs	r2, #18
 8017f78:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8017f7a:	4b03      	ldr	r3, [pc, #12]	@ (8017f88 <USBD_HS_DeviceDescriptor+0x20>)
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	370c      	adds	r7, #12
 8017f80:	46bd      	mov	sp, r7
 8017f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f86:	4770      	bx	lr
 8017f88:	240000d0 	.word	0x240000d0

08017f8c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f8c:	b480      	push	{r7}
 8017f8e:	b083      	sub	sp, #12
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	4603      	mov	r3, r0
 8017f94:	6039      	str	r1, [r7, #0]
 8017f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017f98:	683b      	ldr	r3, [r7, #0]
 8017f9a:	2204      	movs	r2, #4
 8017f9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017f9e:	4b03      	ldr	r3, [pc, #12]	@ (8017fac <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	370c      	adds	r7, #12
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017faa:	4770      	bx	lr
 8017fac:	240000e4 	.word	0x240000e4

08017fb0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b082      	sub	sp, #8
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	6039      	str	r1, [r7, #0]
 8017fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017fbc:	79fb      	ldrb	r3, [r7, #7]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d105      	bne.n	8017fce <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8017fc2:	683a      	ldr	r2, [r7, #0]
 8017fc4:	4907      	ldr	r1, [pc, #28]	@ (8017fe4 <USBD_HS_ProductStrDescriptor+0x34>)
 8017fc6:	4808      	ldr	r0, [pc, #32]	@ (8017fe8 <USBD_HS_ProductStrDescriptor+0x38>)
 8017fc8:	f7ff fde2 	bl	8017b90 <USBD_GetString>
 8017fcc:	e004      	b.n	8017fd8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8017fce:	683a      	ldr	r2, [r7, #0]
 8017fd0:	4904      	ldr	r1, [pc, #16]	@ (8017fe4 <USBD_HS_ProductStrDescriptor+0x34>)
 8017fd2:	4805      	ldr	r0, [pc, #20]	@ (8017fe8 <USBD_HS_ProductStrDescriptor+0x38>)
 8017fd4:	f7ff fddc 	bl	8017b90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017fd8:	4b02      	ldr	r3, [pc, #8]	@ (8017fe4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8017fda:	4618      	mov	r0, r3
 8017fdc:	3708      	adds	r7, #8
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	bd80      	pop	{r7, pc}
 8017fe2:	bf00      	nop
 8017fe4:	24014968 	.word	0x24014968
 8017fe8:	0801d82c 	.word	0x0801d82c

08017fec <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b082      	sub	sp, #8
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	6039      	str	r1, [r7, #0]
 8017ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017ff8:	683a      	ldr	r2, [r7, #0]
 8017ffa:	4904      	ldr	r1, [pc, #16]	@ (801800c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8017ffc:	4804      	ldr	r0, [pc, #16]	@ (8018010 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8017ffe:	f7ff fdc7 	bl	8017b90 <USBD_GetString>
  return USBD_StrDesc;
 8018002:	4b02      	ldr	r3, [pc, #8]	@ (801800c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8018004:	4618      	mov	r0, r3
 8018006:	3708      	adds	r7, #8
 8018008:	46bd      	mov	sp, r7
 801800a:	bd80      	pop	{r7, pc}
 801800c:	24014968 	.word	0x24014968
 8018010:	0801d838 	.word	0x0801d838

08018014 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b082      	sub	sp, #8
 8018018:	af00      	add	r7, sp, #0
 801801a:	4603      	mov	r3, r0
 801801c:	6039      	str	r1, [r7, #0]
 801801e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018020:	683b      	ldr	r3, [r7, #0]
 8018022:	221a      	movs	r2, #26
 8018024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018026:	f000 f843 	bl	80180b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801802a:	4b02      	ldr	r3, [pc, #8]	@ (8018034 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801802c:	4618      	mov	r0, r3
 801802e:	3708      	adds	r7, #8
 8018030:	46bd      	mov	sp, r7
 8018032:	bd80      	pop	{r7, pc}
 8018034:	240000e8 	.word	0x240000e8

08018038 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018038:	b580      	push	{r7, lr}
 801803a:	b082      	sub	sp, #8
 801803c:	af00      	add	r7, sp, #0
 801803e:	4603      	mov	r3, r0
 8018040:	6039      	str	r1, [r7, #0]
 8018042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018044:	79fb      	ldrb	r3, [r7, #7]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d105      	bne.n	8018056 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801804a:	683a      	ldr	r2, [r7, #0]
 801804c:	4907      	ldr	r1, [pc, #28]	@ (801806c <USBD_HS_ConfigStrDescriptor+0x34>)
 801804e:	4808      	ldr	r0, [pc, #32]	@ (8018070 <USBD_HS_ConfigStrDescriptor+0x38>)
 8018050:	f7ff fd9e 	bl	8017b90 <USBD_GetString>
 8018054:	e004      	b.n	8018060 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8018056:	683a      	ldr	r2, [r7, #0]
 8018058:	4904      	ldr	r1, [pc, #16]	@ (801806c <USBD_HS_ConfigStrDescriptor+0x34>)
 801805a:	4805      	ldr	r0, [pc, #20]	@ (8018070 <USBD_HS_ConfigStrDescriptor+0x38>)
 801805c:	f7ff fd98 	bl	8017b90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018060:	4b02      	ldr	r3, [pc, #8]	@ (801806c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8018062:	4618      	mov	r0, r3
 8018064:	3708      	adds	r7, #8
 8018066:	46bd      	mov	sp, r7
 8018068:	bd80      	pop	{r7, pc}
 801806a:	bf00      	nop
 801806c:	24014968 	.word	0x24014968
 8018070:	0801d844 	.word	0x0801d844

08018074 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018074:	b580      	push	{r7, lr}
 8018076:	b082      	sub	sp, #8
 8018078:	af00      	add	r7, sp, #0
 801807a:	4603      	mov	r3, r0
 801807c:	6039      	str	r1, [r7, #0]
 801807e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018080:	79fb      	ldrb	r3, [r7, #7]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d105      	bne.n	8018092 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8018086:	683a      	ldr	r2, [r7, #0]
 8018088:	4907      	ldr	r1, [pc, #28]	@ (80180a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801808a:	4808      	ldr	r0, [pc, #32]	@ (80180ac <USBD_HS_InterfaceStrDescriptor+0x38>)
 801808c:	f7ff fd80 	bl	8017b90 <USBD_GetString>
 8018090:	e004      	b.n	801809c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8018092:	683a      	ldr	r2, [r7, #0]
 8018094:	4904      	ldr	r1, [pc, #16]	@ (80180a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8018096:	4805      	ldr	r0, [pc, #20]	@ (80180ac <USBD_HS_InterfaceStrDescriptor+0x38>)
 8018098:	f7ff fd7a 	bl	8017b90 <USBD_GetString>
  }
  return USBD_StrDesc;
 801809c:	4b02      	ldr	r3, [pc, #8]	@ (80180a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801809e:	4618      	mov	r0, r3
 80180a0:	3708      	adds	r7, #8
 80180a2:	46bd      	mov	sp, r7
 80180a4:	bd80      	pop	{r7, pc}
 80180a6:	bf00      	nop
 80180a8:	24014968 	.word	0x24014968
 80180ac:	0801d850 	.word	0x0801d850

080180b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b084      	sub	sp, #16
 80180b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80180b6:	4b0f      	ldr	r3, [pc, #60]	@ (80180f4 <Get_SerialNum+0x44>)
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80180bc:	4b0e      	ldr	r3, [pc, #56]	@ (80180f8 <Get_SerialNum+0x48>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80180c2:	4b0e      	ldr	r3, [pc, #56]	@ (80180fc <Get_SerialNum+0x4c>)
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80180c8:	68fa      	ldr	r2, [r7, #12]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	4413      	add	r3, r2
 80180ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d009      	beq.n	80180ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80180d6:	2208      	movs	r2, #8
 80180d8:	4909      	ldr	r1, [pc, #36]	@ (8018100 <Get_SerialNum+0x50>)
 80180da:	68f8      	ldr	r0, [r7, #12]
 80180dc:	f000 f814 	bl	8018108 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80180e0:	2204      	movs	r2, #4
 80180e2:	4908      	ldr	r1, [pc, #32]	@ (8018104 <Get_SerialNum+0x54>)
 80180e4:	68b8      	ldr	r0, [r7, #8]
 80180e6:	f000 f80f 	bl	8018108 <IntToUnicode>
  }
}
 80180ea:	bf00      	nop
 80180ec:	3710      	adds	r7, #16
 80180ee:	46bd      	mov	sp, r7
 80180f0:	bd80      	pop	{r7, pc}
 80180f2:	bf00      	nop
 80180f4:	1ff1e800 	.word	0x1ff1e800
 80180f8:	1ff1e804 	.word	0x1ff1e804
 80180fc:	1ff1e808 	.word	0x1ff1e808
 8018100:	240000ea 	.word	0x240000ea
 8018104:	240000fa 	.word	0x240000fa

08018108 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018108:	b480      	push	{r7}
 801810a:	b087      	sub	sp, #28
 801810c:	af00      	add	r7, sp, #0
 801810e:	60f8      	str	r0, [r7, #12]
 8018110:	60b9      	str	r1, [r7, #8]
 8018112:	4613      	mov	r3, r2
 8018114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018116:	2300      	movs	r3, #0
 8018118:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801811a:	2300      	movs	r3, #0
 801811c:	75fb      	strb	r3, [r7, #23]
 801811e:	e027      	b.n	8018170 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	0f1b      	lsrs	r3, r3, #28
 8018124:	2b09      	cmp	r3, #9
 8018126:	d80b      	bhi.n	8018140 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	0f1b      	lsrs	r3, r3, #28
 801812c:	b2da      	uxtb	r2, r3
 801812e:	7dfb      	ldrb	r3, [r7, #23]
 8018130:	005b      	lsls	r3, r3, #1
 8018132:	4619      	mov	r1, r3
 8018134:	68bb      	ldr	r3, [r7, #8]
 8018136:	440b      	add	r3, r1
 8018138:	3230      	adds	r2, #48	@ 0x30
 801813a:	b2d2      	uxtb	r2, r2
 801813c:	701a      	strb	r2, [r3, #0]
 801813e:	e00a      	b.n	8018156 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	0f1b      	lsrs	r3, r3, #28
 8018144:	b2da      	uxtb	r2, r3
 8018146:	7dfb      	ldrb	r3, [r7, #23]
 8018148:	005b      	lsls	r3, r3, #1
 801814a:	4619      	mov	r1, r3
 801814c:	68bb      	ldr	r3, [r7, #8]
 801814e:	440b      	add	r3, r1
 8018150:	3237      	adds	r2, #55	@ 0x37
 8018152:	b2d2      	uxtb	r2, r2
 8018154:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	011b      	lsls	r3, r3, #4
 801815a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801815c:	7dfb      	ldrb	r3, [r7, #23]
 801815e:	005b      	lsls	r3, r3, #1
 8018160:	3301      	adds	r3, #1
 8018162:	68ba      	ldr	r2, [r7, #8]
 8018164:	4413      	add	r3, r2
 8018166:	2200      	movs	r2, #0
 8018168:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801816a:	7dfb      	ldrb	r3, [r7, #23]
 801816c:	3301      	adds	r3, #1
 801816e:	75fb      	strb	r3, [r7, #23]
 8018170:	7dfa      	ldrb	r2, [r7, #23]
 8018172:	79fb      	ldrb	r3, [r7, #7]
 8018174:	429a      	cmp	r2, r3
 8018176:	d3d3      	bcc.n	8018120 <IntToUnicode+0x18>
  }
}
 8018178:	bf00      	nop
 801817a:	bf00      	nop
 801817c:	371c      	adds	r7, #28
 801817e:	46bd      	mov	sp, r7
 8018180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018184:	4770      	bx	lr
	...

08018188 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b0b2      	sub	sp, #200	@ 0xc8
 801818c:	af00      	add	r7, sp, #0
 801818e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018190:	f107 0310 	add.w	r3, r7, #16
 8018194:	22b8      	movs	r2, #184	@ 0xb8
 8018196:	2100      	movs	r1, #0
 8018198:	4618      	mov	r0, r3
 801819a:	f001 fea6 	bl	8019eea <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	4a1a      	ldr	r2, [pc, #104]	@ (801820c <HAL_PCD_MspInit+0x84>)
 80181a4:	4293      	cmp	r3, r2
 80181a6:	d12c      	bne.n	8018202 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80181a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80181ac:	f04f 0300 	mov.w	r3, #0
 80181b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80181b4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80181b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80181bc:	f107 0310 	add.w	r3, r7, #16
 80181c0:	4618      	mov	r0, r3
 80181c2:	f7f5 febb 	bl	800df3c <HAL_RCCEx_PeriphCLKConfig>
 80181c6:	4603      	mov	r3, r0
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d001      	beq.n	80181d0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80181cc:	f7e9 ffc4 	bl	8002158 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80181d0:	f7f4 ff3e 	bl	800d050 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80181d4:	4b0e      	ldr	r3, [pc, #56]	@ (8018210 <HAL_PCD_MspInit+0x88>)
 80181d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80181da:	4a0d      	ldr	r2, [pc, #52]	@ (8018210 <HAL_PCD_MspInit+0x88>)
 80181dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80181e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80181e4:	4b0a      	ldr	r3, [pc, #40]	@ (8018210 <HAL_PCD_MspInit+0x88>)
 80181e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80181ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80181ee:	60fb      	str	r3, [r7, #12]
 80181f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80181f2:	2200      	movs	r2, #0
 80181f4:	2100      	movs	r1, #0
 80181f6:	204d      	movs	r0, #77	@ 0x4d
 80181f8:	f7f0 fcf1 	bl	8008bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80181fc:	204d      	movs	r0, #77	@ 0x4d
 80181fe:	f7f0 fd08 	bl	8008c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8018202:	bf00      	nop
 8018204:	37c8      	adds	r7, #200	@ 0xc8
 8018206:	46bd      	mov	sp, r7
 8018208:	bd80      	pop	{r7, pc}
 801820a:	bf00      	nop
 801820c:	40040000 	.word	0x40040000
 8018210:	58024400 	.word	0x58024400

08018214 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b082      	sub	sp, #8
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8018228:	4619      	mov	r1, r3
 801822a:	4610      	mov	r0, r2
 801822c:	f7fe fb23 	bl	8016876 <USBD_LL_SetupStage>
}
 8018230:	bf00      	nop
 8018232:	3708      	adds	r7, #8
 8018234:	46bd      	mov	sp, r7
 8018236:	bd80      	pop	{r7, pc}

08018238 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018238:	b580      	push	{r7, lr}
 801823a:	b082      	sub	sp, #8
 801823c:	af00      	add	r7, sp, #0
 801823e:	6078      	str	r0, [r7, #4]
 8018240:	460b      	mov	r3, r1
 8018242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801824a:	78fa      	ldrb	r2, [r7, #3]
 801824c:	6879      	ldr	r1, [r7, #4]
 801824e:	4613      	mov	r3, r2
 8018250:	00db      	lsls	r3, r3, #3
 8018252:	4413      	add	r3, r2
 8018254:	009b      	lsls	r3, r3, #2
 8018256:	440b      	add	r3, r1
 8018258:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801825c:	681a      	ldr	r2, [r3, #0]
 801825e:	78fb      	ldrb	r3, [r7, #3]
 8018260:	4619      	mov	r1, r3
 8018262:	f7fe fb5d 	bl	8016920 <USBD_LL_DataOutStage>
}
 8018266:	bf00      	nop
 8018268:	3708      	adds	r7, #8
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}

0801826e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801826e:	b580      	push	{r7, lr}
 8018270:	b082      	sub	sp, #8
 8018272:	af00      	add	r7, sp, #0
 8018274:	6078      	str	r0, [r7, #4]
 8018276:	460b      	mov	r3, r1
 8018278:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018280:	78fa      	ldrb	r2, [r7, #3]
 8018282:	6879      	ldr	r1, [r7, #4]
 8018284:	4613      	mov	r3, r2
 8018286:	00db      	lsls	r3, r3, #3
 8018288:	4413      	add	r3, r2
 801828a:	009b      	lsls	r3, r3, #2
 801828c:	440b      	add	r3, r1
 801828e:	3320      	adds	r3, #32
 8018290:	681a      	ldr	r2, [r3, #0]
 8018292:	78fb      	ldrb	r3, [r7, #3]
 8018294:	4619      	mov	r1, r3
 8018296:	f7fe fbf6 	bl	8016a86 <USBD_LL_DataInStage>
}
 801829a:	bf00      	nop
 801829c:	3708      	adds	r7, #8
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}

080182a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182a2:	b580      	push	{r7, lr}
 80182a4:	b082      	sub	sp, #8
 80182a6:	af00      	add	r7, sp, #0
 80182a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80182b0:	4618      	mov	r0, r3
 80182b2:	f7fe fd30 	bl	8016d16 <USBD_LL_SOF>
}
 80182b6:	bf00      	nop
 80182b8:	3708      	adds	r7, #8
 80182ba:	46bd      	mov	sp, r7
 80182bc:	bd80      	pop	{r7, pc}

080182be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182be:	b580      	push	{r7, lr}
 80182c0:	b084      	sub	sp, #16
 80182c2:	af00      	add	r7, sp, #0
 80182c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80182c6:	2301      	movs	r3, #1
 80182c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	79db      	ldrb	r3, [r3, #7]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d102      	bne.n	80182d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80182d2:	2300      	movs	r3, #0
 80182d4:	73fb      	strb	r3, [r7, #15]
 80182d6:	e008      	b.n	80182ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	79db      	ldrb	r3, [r3, #7]
 80182dc:	2b02      	cmp	r3, #2
 80182de:	d102      	bne.n	80182e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80182e0:	2301      	movs	r3, #1
 80182e2:	73fb      	strb	r3, [r7, #15]
 80182e4:	e001      	b.n	80182ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80182e6:	f7e9 ff37 	bl	8002158 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80182f0:	7bfa      	ldrb	r2, [r7, #15]
 80182f2:	4611      	mov	r1, r2
 80182f4:	4618      	mov	r0, r3
 80182f6:	f7fe fcca 	bl	8016c8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018300:	4618      	mov	r0, r3
 8018302:	f7fe fc72 	bl	8016bea <USBD_LL_Reset>
}
 8018306:	bf00      	nop
 8018308:	3710      	adds	r7, #16
 801830a:	46bd      	mov	sp, r7
 801830c:	bd80      	pop	{r7, pc}
	...

08018310 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018310:	b580      	push	{r7, lr}
 8018312:	b082      	sub	sp, #8
 8018314:	af00      	add	r7, sp, #0
 8018316:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801831e:	4618      	mov	r0, r3
 8018320:	f7fe fcc5 	bl	8016cae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	687a      	ldr	r2, [r7, #4]
 8018330:	6812      	ldr	r2, [r2, #0]
 8018332:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8018336:	f043 0301 	orr.w	r3, r3, #1
 801833a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	7adb      	ldrb	r3, [r3, #11]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d005      	beq.n	8018350 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018344:	4b04      	ldr	r3, [pc, #16]	@ (8018358 <HAL_PCD_SuspendCallback+0x48>)
 8018346:	691b      	ldr	r3, [r3, #16]
 8018348:	4a03      	ldr	r2, [pc, #12]	@ (8018358 <HAL_PCD_SuspendCallback+0x48>)
 801834a:	f043 0306 	orr.w	r3, r3, #6
 801834e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018350:	bf00      	nop
 8018352:	3708      	adds	r7, #8
 8018354:	46bd      	mov	sp, r7
 8018356:	bd80      	pop	{r7, pc}
 8018358:	e000ed00 	.word	0xe000ed00

0801835c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b082      	sub	sp, #8
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801836a:	4618      	mov	r0, r3
 801836c:	f7fe fcbb 	bl	8016ce6 <USBD_LL_Resume>
}
 8018370:	bf00      	nop
 8018372:	3708      	adds	r7, #8
 8018374:	46bd      	mov	sp, r7
 8018376:	bd80      	pop	{r7, pc}

08018378 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b082      	sub	sp, #8
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
 8018380:	460b      	mov	r3, r1
 8018382:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801838a:	78fa      	ldrb	r2, [r7, #3]
 801838c:	4611      	mov	r1, r2
 801838e:	4618      	mov	r0, r3
 8018390:	f7fe fd13 	bl	8016dba <USBD_LL_IsoOUTIncomplete>
}
 8018394:	bf00      	nop
 8018396:	3708      	adds	r7, #8
 8018398:	46bd      	mov	sp, r7
 801839a:	bd80      	pop	{r7, pc}

0801839c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801839c:	b580      	push	{r7, lr}
 801839e:	b082      	sub	sp, #8
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	6078      	str	r0, [r7, #4]
 80183a4:	460b      	mov	r3, r1
 80183a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80183ae:	78fa      	ldrb	r2, [r7, #3]
 80183b0:	4611      	mov	r1, r2
 80183b2:	4618      	mov	r0, r3
 80183b4:	f7fe fccf 	bl	8016d56 <USBD_LL_IsoINIncomplete>
}
 80183b8:	bf00      	nop
 80183ba:	3708      	adds	r7, #8
 80183bc:	46bd      	mov	sp, r7
 80183be:	bd80      	pop	{r7, pc}

080183c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b082      	sub	sp, #8
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7fe fd25 	bl	8016e1e <USBD_LL_DevConnected>
}
 80183d4:	bf00      	nop
 80183d6:	3708      	adds	r7, #8
 80183d8:	46bd      	mov	sp, r7
 80183da:	bd80      	pop	{r7, pc}

080183dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183dc:	b580      	push	{r7, lr}
 80183de:	b082      	sub	sp, #8
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80183ea:	4618      	mov	r0, r3
 80183ec:	f7fe fd22 	bl	8016e34 <USBD_LL_DevDisconnected>
}
 80183f0:	bf00      	nop
 80183f2:	3708      	adds	r7, #8
 80183f4:	46bd      	mov	sp, r7
 80183f6:	bd80      	pop	{r7, pc}

080183f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b082      	sub	sp, #8
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	781b      	ldrb	r3, [r3, #0]
 8018404:	2b01      	cmp	r3, #1
 8018406:	d140      	bne.n	801848a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8018408:	4a22      	ldr	r2, [pc, #136]	@ (8018494 <USBD_LL_Init+0x9c>)
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	4a20      	ldr	r2, [pc, #128]	@ (8018494 <USBD_LL_Init+0x9c>)
 8018414:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8018418:	4b1e      	ldr	r3, [pc, #120]	@ (8018494 <USBD_LL_Init+0x9c>)
 801841a:	4a1f      	ldr	r2, [pc, #124]	@ (8018498 <USBD_LL_Init+0xa0>)
 801841c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801841e:	4b1d      	ldr	r3, [pc, #116]	@ (8018494 <USBD_LL_Init+0x9c>)
 8018420:	2209      	movs	r2, #9
 8018422:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8018424:	4b1b      	ldr	r3, [pc, #108]	@ (8018494 <USBD_LL_Init+0x9c>)
 8018426:	2202      	movs	r2, #2
 8018428:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801842a:	4b1a      	ldr	r3, [pc, #104]	@ (8018494 <USBD_LL_Init+0x9c>)
 801842c:	2200      	movs	r2, #0
 801842e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8018430:	4b18      	ldr	r3, [pc, #96]	@ (8018494 <USBD_LL_Init+0x9c>)
 8018432:	2202      	movs	r2, #2
 8018434:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8018436:	4b17      	ldr	r3, [pc, #92]	@ (8018494 <USBD_LL_Init+0x9c>)
 8018438:	2200      	movs	r2, #0
 801843a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801843c:	4b15      	ldr	r3, [pc, #84]	@ (8018494 <USBD_LL_Init+0x9c>)
 801843e:	2200      	movs	r2, #0
 8018440:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8018442:	4b14      	ldr	r3, [pc, #80]	@ (8018494 <USBD_LL_Init+0x9c>)
 8018444:	2200      	movs	r2, #0
 8018446:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8018448:	4b12      	ldr	r3, [pc, #72]	@ (8018494 <USBD_LL_Init+0x9c>)
 801844a:	2200      	movs	r2, #0
 801844c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801844e:	4b11      	ldr	r3, [pc, #68]	@ (8018494 <USBD_LL_Init+0x9c>)
 8018450:	2200      	movs	r2, #0
 8018452:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8018454:	4b0f      	ldr	r3, [pc, #60]	@ (8018494 <USBD_LL_Init+0x9c>)
 8018456:	2200      	movs	r2, #0
 8018458:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801845a:	480e      	ldr	r0, [pc, #56]	@ (8018494 <USBD_LL_Init+0x9c>)
 801845c:	f7f3 fb1f 	bl	800ba9e <HAL_PCD_Init>
 8018460:	4603      	mov	r3, r0
 8018462:	2b00      	cmp	r3, #0
 8018464:	d001      	beq.n	801846a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8018466:	f7e9 fe77 	bl	8002158 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801846a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801846e:	4809      	ldr	r0, [pc, #36]	@ (8018494 <USBD_LL_Init+0x9c>)
 8018470:	f7f4 fd73 	bl	800cf5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8018474:	2280      	movs	r2, #128	@ 0x80
 8018476:	2100      	movs	r1, #0
 8018478:	4806      	ldr	r0, [pc, #24]	@ (8018494 <USBD_LL_Init+0x9c>)
 801847a:	f7f4 fd27 	bl	800cecc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801847e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8018482:	2101      	movs	r1, #1
 8018484:	4803      	ldr	r0, [pc, #12]	@ (8018494 <USBD_LL_Init+0x9c>)
 8018486:	f7f4 fd21 	bl	800cecc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801848a:	2300      	movs	r3, #0
}
 801848c:	4618      	mov	r0, r3
 801848e:	3708      	adds	r7, #8
 8018490:	46bd      	mov	sp, r7
 8018492:	bd80      	pop	{r7, pc}
 8018494:	24014b68 	.word	0x24014b68
 8018498:	40040000 	.word	0x40040000

0801849c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801849c:	b580      	push	{r7, lr}
 801849e:	b084      	sub	sp, #16
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184a4:	2300      	movs	r3, #0
 80184a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184a8:	2300      	movs	r3, #0
 80184aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80184b2:	4618      	mov	r0, r3
 80184b4:	f7f3 fbff 	bl	800bcb6 <HAL_PCD_Start>
 80184b8:	4603      	mov	r3, r0
 80184ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184bc:	7bfb      	ldrb	r3, [r7, #15]
 80184be:	4618      	mov	r0, r3
 80184c0:	f000 f942 	bl	8018748 <USBD_Get_USB_Status>
 80184c4:	4603      	mov	r3, r0
 80184c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80184c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80184ca:	4618      	mov	r0, r3
 80184cc:	3710      	adds	r7, #16
 80184ce:	46bd      	mov	sp, r7
 80184d0:	bd80      	pop	{r7, pc}

080184d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80184d2:	b580      	push	{r7, lr}
 80184d4:	b084      	sub	sp, #16
 80184d6:	af00      	add	r7, sp, #0
 80184d8:	6078      	str	r0, [r7, #4]
 80184da:	4608      	mov	r0, r1
 80184dc:	4611      	mov	r1, r2
 80184de:	461a      	mov	r2, r3
 80184e0:	4603      	mov	r3, r0
 80184e2:	70fb      	strb	r3, [r7, #3]
 80184e4:	460b      	mov	r3, r1
 80184e6:	70bb      	strb	r3, [r7, #2]
 80184e8:	4613      	mov	r3, r2
 80184ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184ec:	2300      	movs	r3, #0
 80184ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184f0:	2300      	movs	r3, #0
 80184f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80184fa:	78bb      	ldrb	r3, [r7, #2]
 80184fc:	883a      	ldrh	r2, [r7, #0]
 80184fe:	78f9      	ldrb	r1, [r7, #3]
 8018500:	f7f4 f900 	bl	800c704 <HAL_PCD_EP_Open>
 8018504:	4603      	mov	r3, r0
 8018506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018508:	7bfb      	ldrb	r3, [r7, #15]
 801850a:	4618      	mov	r0, r3
 801850c:	f000 f91c 	bl	8018748 <USBD_Get_USB_Status>
 8018510:	4603      	mov	r3, r0
 8018512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018514:	7bbb      	ldrb	r3, [r7, #14]
}
 8018516:	4618      	mov	r0, r3
 8018518:	3710      	adds	r7, #16
 801851a:	46bd      	mov	sp, r7
 801851c:	bd80      	pop	{r7, pc}

0801851e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801851e:	b580      	push	{r7, lr}
 8018520:	b084      	sub	sp, #16
 8018522:	af00      	add	r7, sp, #0
 8018524:	6078      	str	r0, [r7, #4]
 8018526:	460b      	mov	r3, r1
 8018528:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801852a:	2300      	movs	r3, #0
 801852c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801852e:	2300      	movs	r3, #0
 8018530:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018538:	78fa      	ldrb	r2, [r7, #3]
 801853a:	4611      	mov	r1, r2
 801853c:	4618      	mov	r0, r3
 801853e:	f7f4 f949 	bl	800c7d4 <HAL_PCD_EP_Close>
 8018542:	4603      	mov	r3, r0
 8018544:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018546:	7bfb      	ldrb	r3, [r7, #15]
 8018548:	4618      	mov	r0, r3
 801854a:	f000 f8fd 	bl	8018748 <USBD_Get_USB_Status>
 801854e:	4603      	mov	r3, r0
 8018550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018552:	7bbb      	ldrb	r3, [r7, #14]
}
 8018554:	4618      	mov	r0, r3
 8018556:	3710      	adds	r7, #16
 8018558:	46bd      	mov	sp, r7
 801855a:	bd80      	pop	{r7, pc}

0801855c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b084      	sub	sp, #16
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
 8018564:	460b      	mov	r3, r1
 8018566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018568:	2300      	movs	r3, #0
 801856a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801856c:	2300      	movs	r3, #0
 801856e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018576:	78fa      	ldrb	r2, [r7, #3]
 8018578:	4611      	mov	r1, r2
 801857a:	4618      	mov	r0, r3
 801857c:	f7f4 fa01 	bl	800c982 <HAL_PCD_EP_SetStall>
 8018580:	4603      	mov	r3, r0
 8018582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018584:	7bfb      	ldrb	r3, [r7, #15]
 8018586:	4618      	mov	r0, r3
 8018588:	f000 f8de 	bl	8018748 <USBD_Get_USB_Status>
 801858c:	4603      	mov	r3, r0
 801858e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018590:	7bbb      	ldrb	r3, [r7, #14]
}
 8018592:	4618      	mov	r0, r3
 8018594:	3710      	adds	r7, #16
 8018596:	46bd      	mov	sp, r7
 8018598:	bd80      	pop	{r7, pc}

0801859a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801859a:	b580      	push	{r7, lr}
 801859c:	b084      	sub	sp, #16
 801859e:	af00      	add	r7, sp, #0
 80185a0:	6078      	str	r0, [r7, #4]
 80185a2:	460b      	mov	r3, r1
 80185a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185a6:	2300      	movs	r3, #0
 80185a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185aa:	2300      	movs	r3, #0
 80185ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80185b4:	78fa      	ldrb	r2, [r7, #3]
 80185b6:	4611      	mov	r1, r2
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7f4 fa45 	bl	800ca48 <HAL_PCD_EP_ClrStall>
 80185be:	4603      	mov	r3, r0
 80185c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185c2:	7bfb      	ldrb	r3, [r7, #15]
 80185c4:	4618      	mov	r0, r3
 80185c6:	f000 f8bf 	bl	8018748 <USBD_Get_USB_Status>
 80185ca:	4603      	mov	r3, r0
 80185cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80185ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80185d0:	4618      	mov	r0, r3
 80185d2:	3710      	adds	r7, #16
 80185d4:	46bd      	mov	sp, r7
 80185d6:	bd80      	pop	{r7, pc}

080185d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80185d8:	b480      	push	{r7}
 80185da:	b085      	sub	sp, #20
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
 80185e0:	460b      	mov	r3, r1
 80185e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80185ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80185ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	da0b      	bge.n	801860c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80185f4:	78fb      	ldrb	r3, [r7, #3]
 80185f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80185fa:	68f9      	ldr	r1, [r7, #12]
 80185fc:	4613      	mov	r3, r2
 80185fe:	00db      	lsls	r3, r3, #3
 8018600:	4413      	add	r3, r2
 8018602:	009b      	lsls	r3, r3, #2
 8018604:	440b      	add	r3, r1
 8018606:	3316      	adds	r3, #22
 8018608:	781b      	ldrb	r3, [r3, #0]
 801860a:	e00b      	b.n	8018624 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801860c:	78fb      	ldrb	r3, [r7, #3]
 801860e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018612:	68f9      	ldr	r1, [r7, #12]
 8018614:	4613      	mov	r3, r2
 8018616:	00db      	lsls	r3, r3, #3
 8018618:	4413      	add	r3, r2
 801861a:	009b      	lsls	r3, r3, #2
 801861c:	440b      	add	r3, r1
 801861e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8018622:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018624:	4618      	mov	r0, r3
 8018626:	3714      	adds	r7, #20
 8018628:	46bd      	mov	sp, r7
 801862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801862e:	4770      	bx	lr

08018630 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b084      	sub	sp, #16
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
 8018638:	460b      	mov	r3, r1
 801863a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801863c:	2300      	movs	r3, #0
 801863e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018640:	2300      	movs	r3, #0
 8018642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801864a:	78fa      	ldrb	r2, [r7, #3]
 801864c:	4611      	mov	r1, r2
 801864e:	4618      	mov	r0, r3
 8018650:	f7f4 f834 	bl	800c6bc <HAL_PCD_SetAddress>
 8018654:	4603      	mov	r3, r0
 8018656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018658:	7bfb      	ldrb	r3, [r7, #15]
 801865a:	4618      	mov	r0, r3
 801865c:	f000 f874 	bl	8018748 <USBD_Get_USB_Status>
 8018660:	4603      	mov	r3, r0
 8018662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018664:	7bbb      	ldrb	r3, [r7, #14]
}
 8018666:	4618      	mov	r0, r3
 8018668:	3710      	adds	r7, #16
 801866a:	46bd      	mov	sp, r7
 801866c:	bd80      	pop	{r7, pc}

0801866e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801866e:	b580      	push	{r7, lr}
 8018670:	b086      	sub	sp, #24
 8018672:	af00      	add	r7, sp, #0
 8018674:	60f8      	str	r0, [r7, #12]
 8018676:	607a      	str	r2, [r7, #4]
 8018678:	603b      	str	r3, [r7, #0]
 801867a:	460b      	mov	r3, r1
 801867c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801867e:	2300      	movs	r3, #0
 8018680:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018682:	2300      	movs	r3, #0
 8018684:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801868c:	7af9      	ldrb	r1, [r7, #11]
 801868e:	683b      	ldr	r3, [r7, #0]
 8018690:	687a      	ldr	r2, [r7, #4]
 8018692:	f7f4 f93c 	bl	800c90e <HAL_PCD_EP_Transmit>
 8018696:	4603      	mov	r3, r0
 8018698:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801869a:	7dfb      	ldrb	r3, [r7, #23]
 801869c:	4618      	mov	r0, r3
 801869e:	f000 f853 	bl	8018748 <USBD_Get_USB_Status>
 80186a2:	4603      	mov	r3, r0
 80186a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80186a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80186a8:	4618      	mov	r0, r3
 80186aa:	3718      	adds	r7, #24
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd80      	pop	{r7, pc}

080186b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b086      	sub	sp, #24
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	60f8      	str	r0, [r7, #12]
 80186b8:	607a      	str	r2, [r7, #4]
 80186ba:	603b      	str	r3, [r7, #0]
 80186bc:	460b      	mov	r3, r1
 80186be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80186c0:	2300      	movs	r3, #0
 80186c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80186c4:	2300      	movs	r3, #0
 80186c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80186ce:	7af9      	ldrb	r1, [r7, #11]
 80186d0:	683b      	ldr	r3, [r7, #0]
 80186d2:	687a      	ldr	r2, [r7, #4]
 80186d4:	f7f4 f8c8 	bl	800c868 <HAL_PCD_EP_Receive>
 80186d8:	4603      	mov	r3, r0
 80186da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186dc:	7dfb      	ldrb	r3, [r7, #23]
 80186de:	4618      	mov	r0, r3
 80186e0:	f000 f832 	bl	8018748 <USBD_Get_USB_Status>
 80186e4:	4603      	mov	r3, r0
 80186e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80186e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80186ea:	4618      	mov	r0, r3
 80186ec:	3718      	adds	r7, #24
 80186ee:	46bd      	mov	sp, r7
 80186f0:	bd80      	pop	{r7, pc}

080186f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186f2:	b580      	push	{r7, lr}
 80186f4:	b082      	sub	sp, #8
 80186f6:	af00      	add	r7, sp, #0
 80186f8:	6078      	str	r0, [r7, #4]
 80186fa:	460b      	mov	r3, r1
 80186fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018704:	78fa      	ldrb	r2, [r7, #3]
 8018706:	4611      	mov	r1, r2
 8018708:	4618      	mov	r0, r3
 801870a:	f7f4 f8e8 	bl	800c8de <HAL_PCD_EP_GetRxCount>
 801870e:	4603      	mov	r3, r0
}
 8018710:	4618      	mov	r0, r3
 8018712:	3708      	adds	r7, #8
 8018714:	46bd      	mov	sp, r7
 8018716:	bd80      	pop	{r7, pc}

08018718 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018718:	b480      	push	{r7}
 801871a:	b083      	sub	sp, #12
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018720:	4b03      	ldr	r3, [pc, #12]	@ (8018730 <USBD_static_malloc+0x18>)
}
 8018722:	4618      	mov	r0, r3
 8018724:	370c      	adds	r7, #12
 8018726:	46bd      	mov	sp, r7
 8018728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801872c:	4770      	bx	lr
 801872e:	bf00      	nop
 8018730:	2401504c 	.word	0x2401504c

08018734 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018734:	b480      	push	{r7}
 8018736:	b083      	sub	sp, #12
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801873c:	bf00      	nop
 801873e:	370c      	adds	r7, #12
 8018740:	46bd      	mov	sp, r7
 8018742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018746:	4770      	bx	lr

08018748 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018748:	b480      	push	{r7}
 801874a:	b085      	sub	sp, #20
 801874c:	af00      	add	r7, sp, #0
 801874e:	4603      	mov	r3, r0
 8018750:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018752:	2300      	movs	r3, #0
 8018754:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018756:	79fb      	ldrb	r3, [r7, #7]
 8018758:	2b03      	cmp	r3, #3
 801875a:	d817      	bhi.n	801878c <USBD_Get_USB_Status+0x44>
 801875c:	a201      	add	r2, pc, #4	@ (adr r2, 8018764 <USBD_Get_USB_Status+0x1c>)
 801875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018762:	bf00      	nop
 8018764:	08018775 	.word	0x08018775
 8018768:	0801877b 	.word	0x0801877b
 801876c:	08018781 	.word	0x08018781
 8018770:	08018787 	.word	0x08018787
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018774:	2300      	movs	r3, #0
 8018776:	73fb      	strb	r3, [r7, #15]
    break;
 8018778:	e00b      	b.n	8018792 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801877a:	2303      	movs	r3, #3
 801877c:	73fb      	strb	r3, [r7, #15]
    break;
 801877e:	e008      	b.n	8018792 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018780:	2301      	movs	r3, #1
 8018782:	73fb      	strb	r3, [r7, #15]
    break;
 8018784:	e005      	b.n	8018792 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018786:	2303      	movs	r3, #3
 8018788:	73fb      	strb	r3, [r7, #15]
    break;
 801878a:	e002      	b.n	8018792 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801878c:	2303      	movs	r3, #3
 801878e:	73fb      	strb	r3, [r7, #15]
    break;
 8018790:	bf00      	nop
  }
  return usb_status;
 8018792:	7bfb      	ldrb	r3, [r7, #15]
}
 8018794:	4618      	mov	r0, r3
 8018796:	3714      	adds	r7, #20
 8018798:	46bd      	mov	sp, r7
 801879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801879e:	4770      	bx	lr

080187a0 <atof>:
 80187a0:	2100      	movs	r1, #0
 80187a2:	f000 bdb7 	b.w	8019314 <strtod>

080187a6 <atoi>:
 80187a6:	220a      	movs	r2, #10
 80187a8:	2100      	movs	r1, #0
 80187aa:	f000 be39 	b.w	8019420 <strtol>

080187ae <sulp>:
 80187ae:	b570      	push	{r4, r5, r6, lr}
 80187b0:	4604      	mov	r4, r0
 80187b2:	460d      	mov	r5, r1
 80187b4:	4616      	mov	r6, r2
 80187b6:	ec45 4b10 	vmov	d0, r4, r5
 80187ba:	f003 f9eb 	bl	801bb94 <__ulp>
 80187be:	b17e      	cbz	r6, 80187e0 <sulp+0x32>
 80187c0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80187c4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	dd09      	ble.n	80187e0 <sulp+0x32>
 80187cc:	051b      	lsls	r3, r3, #20
 80187ce:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80187d2:	2000      	movs	r0, #0
 80187d4:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80187d8:	ec41 0b17 	vmov	d7, r0, r1
 80187dc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80187e0:	bd70      	pop	{r4, r5, r6, pc}
 80187e2:	0000      	movs	r0, r0
 80187e4:	0000      	movs	r0, r0
	...

080187e8 <_strtod_l>:
 80187e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187ec:	ed2d 8b0a 	vpush	{d8-d12}
 80187f0:	b097      	sub	sp, #92	@ 0x5c
 80187f2:	4688      	mov	r8, r1
 80187f4:	920e      	str	r2, [sp, #56]	@ 0x38
 80187f6:	2200      	movs	r2, #0
 80187f8:	9212      	str	r2, [sp, #72]	@ 0x48
 80187fa:	9005      	str	r0, [sp, #20]
 80187fc:	f04f 0a00 	mov.w	sl, #0
 8018800:	f04f 0b00 	mov.w	fp, #0
 8018804:	460a      	mov	r2, r1
 8018806:	9211      	str	r2, [sp, #68]	@ 0x44
 8018808:	7811      	ldrb	r1, [r2, #0]
 801880a:	292b      	cmp	r1, #43	@ 0x2b
 801880c:	d04c      	beq.n	80188a8 <_strtod_l+0xc0>
 801880e:	d839      	bhi.n	8018884 <_strtod_l+0x9c>
 8018810:	290d      	cmp	r1, #13
 8018812:	d833      	bhi.n	801887c <_strtod_l+0x94>
 8018814:	2908      	cmp	r1, #8
 8018816:	d833      	bhi.n	8018880 <_strtod_l+0x98>
 8018818:	2900      	cmp	r1, #0
 801881a:	d03c      	beq.n	8018896 <_strtod_l+0xae>
 801881c:	2200      	movs	r2, #0
 801881e:	9208      	str	r2, [sp, #32]
 8018820:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018822:	782a      	ldrb	r2, [r5, #0]
 8018824:	2a30      	cmp	r2, #48	@ 0x30
 8018826:	f040 80b5 	bne.w	8018994 <_strtod_l+0x1ac>
 801882a:	786a      	ldrb	r2, [r5, #1]
 801882c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018830:	2a58      	cmp	r2, #88	@ 0x58
 8018832:	d170      	bne.n	8018916 <_strtod_l+0x12e>
 8018834:	9302      	str	r3, [sp, #8]
 8018836:	9b08      	ldr	r3, [sp, #32]
 8018838:	9301      	str	r3, [sp, #4]
 801883a:	ab12      	add	r3, sp, #72	@ 0x48
 801883c:	9300      	str	r3, [sp, #0]
 801883e:	4a8b      	ldr	r2, [pc, #556]	@ (8018a6c <_strtod_l+0x284>)
 8018840:	9805      	ldr	r0, [sp, #20]
 8018842:	ab13      	add	r3, sp, #76	@ 0x4c
 8018844:	a911      	add	r1, sp, #68	@ 0x44
 8018846:	f002 fa97 	bl	801ad78 <__gethex>
 801884a:	f010 060f 	ands.w	r6, r0, #15
 801884e:	4604      	mov	r4, r0
 8018850:	d005      	beq.n	801885e <_strtod_l+0x76>
 8018852:	2e06      	cmp	r6, #6
 8018854:	d12a      	bne.n	80188ac <_strtod_l+0xc4>
 8018856:	3501      	adds	r5, #1
 8018858:	2300      	movs	r3, #0
 801885a:	9511      	str	r5, [sp, #68]	@ 0x44
 801885c:	9308      	str	r3, [sp, #32]
 801885e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018860:	2b00      	cmp	r3, #0
 8018862:	f040 852f 	bne.w	80192c4 <_strtod_l+0xadc>
 8018866:	9b08      	ldr	r3, [sp, #32]
 8018868:	ec4b ab10 	vmov	d0, sl, fp
 801886c:	b1cb      	cbz	r3, 80188a2 <_strtod_l+0xba>
 801886e:	eeb1 0b40 	vneg.f64	d0, d0
 8018872:	b017      	add	sp, #92	@ 0x5c
 8018874:	ecbd 8b0a 	vpop	{d8-d12}
 8018878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801887c:	2920      	cmp	r1, #32
 801887e:	d1cd      	bne.n	801881c <_strtod_l+0x34>
 8018880:	3201      	adds	r2, #1
 8018882:	e7c0      	b.n	8018806 <_strtod_l+0x1e>
 8018884:	292d      	cmp	r1, #45	@ 0x2d
 8018886:	d1c9      	bne.n	801881c <_strtod_l+0x34>
 8018888:	2101      	movs	r1, #1
 801888a:	9108      	str	r1, [sp, #32]
 801888c:	1c51      	adds	r1, r2, #1
 801888e:	9111      	str	r1, [sp, #68]	@ 0x44
 8018890:	7852      	ldrb	r2, [r2, #1]
 8018892:	2a00      	cmp	r2, #0
 8018894:	d1c4      	bne.n	8018820 <_strtod_l+0x38>
 8018896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018898:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801889c:	2b00      	cmp	r3, #0
 801889e:	f040 850f 	bne.w	80192c0 <_strtod_l+0xad8>
 80188a2:	ec4b ab10 	vmov	d0, sl, fp
 80188a6:	e7e4      	b.n	8018872 <_strtod_l+0x8a>
 80188a8:	2100      	movs	r1, #0
 80188aa:	e7ee      	b.n	801888a <_strtod_l+0xa2>
 80188ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80188ae:	b13a      	cbz	r2, 80188c0 <_strtod_l+0xd8>
 80188b0:	2135      	movs	r1, #53	@ 0x35
 80188b2:	a814      	add	r0, sp, #80	@ 0x50
 80188b4:	f003 fa65 	bl	801bd82 <__copybits>
 80188b8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80188ba:	9805      	ldr	r0, [sp, #20]
 80188bc:	f002 fe36 	bl	801b52c <_Bfree>
 80188c0:	1e73      	subs	r3, r6, #1
 80188c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80188c4:	2b04      	cmp	r3, #4
 80188c6:	d806      	bhi.n	80188d6 <_strtod_l+0xee>
 80188c8:	e8df f003 	tbb	[pc, r3]
 80188cc:	201d0314 	.word	0x201d0314
 80188d0:	14          	.byte	0x14
 80188d1:	00          	.byte	0x00
 80188d2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80188d6:	05e3      	lsls	r3, r4, #23
 80188d8:	bf48      	it	mi
 80188da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80188de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80188e2:	0d1b      	lsrs	r3, r3, #20
 80188e4:	051b      	lsls	r3, r3, #20
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d1b9      	bne.n	801885e <_strtod_l+0x76>
 80188ea:	f001 fb6f 	bl	8019fcc <__errno>
 80188ee:	2322      	movs	r3, #34	@ 0x22
 80188f0:	6003      	str	r3, [r0, #0]
 80188f2:	e7b4      	b.n	801885e <_strtod_l+0x76>
 80188f4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80188f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80188fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8018900:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018904:	e7e7      	b.n	80188d6 <_strtod_l+0xee>
 8018906:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8018a74 <_strtod_l+0x28c>
 801890a:	e7e4      	b.n	80188d6 <_strtod_l+0xee>
 801890c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8018910:	f04f 3aff 	mov.w	sl, #4294967295
 8018914:	e7df      	b.n	80188d6 <_strtod_l+0xee>
 8018916:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018918:	1c5a      	adds	r2, r3, #1
 801891a:	9211      	str	r2, [sp, #68]	@ 0x44
 801891c:	785b      	ldrb	r3, [r3, #1]
 801891e:	2b30      	cmp	r3, #48	@ 0x30
 8018920:	d0f9      	beq.n	8018916 <_strtod_l+0x12e>
 8018922:	2b00      	cmp	r3, #0
 8018924:	d09b      	beq.n	801885e <_strtod_l+0x76>
 8018926:	2301      	movs	r3, #1
 8018928:	2600      	movs	r6, #0
 801892a:	9307      	str	r3, [sp, #28]
 801892c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801892e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018930:	46b1      	mov	r9, r6
 8018932:	4635      	mov	r5, r6
 8018934:	220a      	movs	r2, #10
 8018936:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018938:	7804      	ldrb	r4, [r0, #0]
 801893a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801893e:	b2d9      	uxtb	r1, r3
 8018940:	2909      	cmp	r1, #9
 8018942:	d929      	bls.n	8018998 <_strtod_l+0x1b0>
 8018944:	494a      	ldr	r1, [pc, #296]	@ (8018a70 <_strtod_l+0x288>)
 8018946:	2201      	movs	r2, #1
 8018948:	f001 fae4 	bl	8019f14 <strncmp>
 801894c:	b378      	cbz	r0, 80189ae <_strtod_l+0x1c6>
 801894e:	2000      	movs	r0, #0
 8018950:	4622      	mov	r2, r4
 8018952:	462b      	mov	r3, r5
 8018954:	4607      	mov	r7, r0
 8018956:	9006      	str	r0, [sp, #24]
 8018958:	2a65      	cmp	r2, #101	@ 0x65
 801895a:	d001      	beq.n	8018960 <_strtod_l+0x178>
 801895c:	2a45      	cmp	r2, #69	@ 0x45
 801895e:	d117      	bne.n	8018990 <_strtod_l+0x1a8>
 8018960:	b91b      	cbnz	r3, 801896a <_strtod_l+0x182>
 8018962:	9b07      	ldr	r3, [sp, #28]
 8018964:	4303      	orrs	r3, r0
 8018966:	d096      	beq.n	8018896 <_strtod_l+0xae>
 8018968:	2300      	movs	r3, #0
 801896a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801896e:	f108 0201 	add.w	r2, r8, #1
 8018972:	9211      	str	r2, [sp, #68]	@ 0x44
 8018974:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018978:	2a2b      	cmp	r2, #43	@ 0x2b
 801897a:	d06b      	beq.n	8018a54 <_strtod_l+0x26c>
 801897c:	2a2d      	cmp	r2, #45	@ 0x2d
 801897e:	d071      	beq.n	8018a64 <_strtod_l+0x27c>
 8018980:	f04f 0e00 	mov.w	lr, #0
 8018984:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018988:	2c09      	cmp	r4, #9
 801898a:	d979      	bls.n	8018a80 <_strtod_l+0x298>
 801898c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8018990:	2400      	movs	r4, #0
 8018992:	e094      	b.n	8018abe <_strtod_l+0x2d6>
 8018994:	2300      	movs	r3, #0
 8018996:	e7c7      	b.n	8018928 <_strtod_l+0x140>
 8018998:	2d08      	cmp	r5, #8
 801899a:	f100 0001 	add.w	r0, r0, #1
 801899e:	bfd4      	ite	le
 80189a0:	fb02 3909 	mlale	r9, r2, r9, r3
 80189a4:	fb02 3606 	mlagt	r6, r2, r6, r3
 80189a8:	3501      	adds	r5, #1
 80189aa:	9011      	str	r0, [sp, #68]	@ 0x44
 80189ac:	e7c3      	b.n	8018936 <_strtod_l+0x14e>
 80189ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80189b0:	1c5a      	adds	r2, r3, #1
 80189b2:	9211      	str	r2, [sp, #68]	@ 0x44
 80189b4:	785a      	ldrb	r2, [r3, #1]
 80189b6:	b375      	cbz	r5, 8018a16 <_strtod_l+0x22e>
 80189b8:	4607      	mov	r7, r0
 80189ba:	462b      	mov	r3, r5
 80189bc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80189c0:	2909      	cmp	r1, #9
 80189c2:	d913      	bls.n	80189ec <_strtod_l+0x204>
 80189c4:	2101      	movs	r1, #1
 80189c6:	9106      	str	r1, [sp, #24]
 80189c8:	e7c6      	b.n	8018958 <_strtod_l+0x170>
 80189ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80189cc:	1c5a      	adds	r2, r3, #1
 80189ce:	9211      	str	r2, [sp, #68]	@ 0x44
 80189d0:	785a      	ldrb	r2, [r3, #1]
 80189d2:	3001      	adds	r0, #1
 80189d4:	2a30      	cmp	r2, #48	@ 0x30
 80189d6:	d0f8      	beq.n	80189ca <_strtod_l+0x1e2>
 80189d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80189dc:	2b08      	cmp	r3, #8
 80189de:	f200 8476 	bhi.w	80192ce <_strtod_l+0xae6>
 80189e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80189e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80189e6:	4607      	mov	r7, r0
 80189e8:	2000      	movs	r0, #0
 80189ea:	4603      	mov	r3, r0
 80189ec:	3a30      	subs	r2, #48	@ 0x30
 80189ee:	f100 0101 	add.w	r1, r0, #1
 80189f2:	d023      	beq.n	8018a3c <_strtod_l+0x254>
 80189f4:	440f      	add	r7, r1
 80189f6:	eb00 0c03 	add.w	ip, r0, r3
 80189fa:	4619      	mov	r1, r3
 80189fc:	240a      	movs	r4, #10
 80189fe:	4561      	cmp	r1, ip
 8018a00:	d10b      	bne.n	8018a1a <_strtod_l+0x232>
 8018a02:	1c5c      	adds	r4, r3, #1
 8018a04:	4403      	add	r3, r0
 8018a06:	2b08      	cmp	r3, #8
 8018a08:	4404      	add	r4, r0
 8018a0a:	dc11      	bgt.n	8018a30 <_strtod_l+0x248>
 8018a0c:	230a      	movs	r3, #10
 8018a0e:	fb03 2909 	mla	r9, r3, r9, r2
 8018a12:	2100      	movs	r1, #0
 8018a14:	e013      	b.n	8018a3e <_strtod_l+0x256>
 8018a16:	4628      	mov	r0, r5
 8018a18:	e7dc      	b.n	80189d4 <_strtod_l+0x1ec>
 8018a1a:	2908      	cmp	r1, #8
 8018a1c:	f101 0101 	add.w	r1, r1, #1
 8018a20:	dc02      	bgt.n	8018a28 <_strtod_l+0x240>
 8018a22:	fb04 f909 	mul.w	r9, r4, r9
 8018a26:	e7ea      	b.n	80189fe <_strtod_l+0x216>
 8018a28:	2910      	cmp	r1, #16
 8018a2a:	bfd8      	it	le
 8018a2c:	4366      	mulle	r6, r4
 8018a2e:	e7e6      	b.n	80189fe <_strtod_l+0x216>
 8018a30:	2b0f      	cmp	r3, #15
 8018a32:	dcee      	bgt.n	8018a12 <_strtod_l+0x22a>
 8018a34:	230a      	movs	r3, #10
 8018a36:	fb03 2606 	mla	r6, r3, r6, r2
 8018a3a:	e7ea      	b.n	8018a12 <_strtod_l+0x22a>
 8018a3c:	461c      	mov	r4, r3
 8018a3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018a40:	1c5a      	adds	r2, r3, #1
 8018a42:	9211      	str	r2, [sp, #68]	@ 0x44
 8018a44:	785a      	ldrb	r2, [r3, #1]
 8018a46:	4608      	mov	r0, r1
 8018a48:	4623      	mov	r3, r4
 8018a4a:	e7b7      	b.n	80189bc <_strtod_l+0x1d4>
 8018a4c:	2301      	movs	r3, #1
 8018a4e:	2700      	movs	r7, #0
 8018a50:	9306      	str	r3, [sp, #24]
 8018a52:	e786      	b.n	8018962 <_strtod_l+0x17a>
 8018a54:	f04f 0e00 	mov.w	lr, #0
 8018a58:	f108 0202 	add.w	r2, r8, #2
 8018a5c:	9211      	str	r2, [sp, #68]	@ 0x44
 8018a5e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8018a62:	e78f      	b.n	8018984 <_strtod_l+0x19c>
 8018a64:	f04f 0e01 	mov.w	lr, #1
 8018a68:	e7f6      	b.n	8018a58 <_strtod_l+0x270>
 8018a6a:	bf00      	nop
 8018a6c:	0801dea0 	.word	0x0801dea0
 8018a70:	0801de88 	.word	0x0801de88
 8018a74:	7ff00000 	.word	0x7ff00000
 8018a78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018a7a:	1c54      	adds	r4, r2, #1
 8018a7c:	9411      	str	r4, [sp, #68]	@ 0x44
 8018a7e:	7852      	ldrb	r2, [r2, #1]
 8018a80:	2a30      	cmp	r2, #48	@ 0x30
 8018a82:	d0f9      	beq.n	8018a78 <_strtod_l+0x290>
 8018a84:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8018a88:	2c08      	cmp	r4, #8
 8018a8a:	d881      	bhi.n	8018990 <_strtod_l+0x1a8>
 8018a8c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8018a90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018a92:	9209      	str	r2, [sp, #36]	@ 0x24
 8018a94:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018a96:	1c51      	adds	r1, r2, #1
 8018a98:	9111      	str	r1, [sp, #68]	@ 0x44
 8018a9a:	7852      	ldrb	r2, [r2, #1]
 8018a9c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018aa0:	2c09      	cmp	r4, #9
 8018aa2:	d938      	bls.n	8018b16 <_strtod_l+0x32e>
 8018aa4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018aa6:	1b0c      	subs	r4, r1, r4
 8018aa8:	2c08      	cmp	r4, #8
 8018aaa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8018aae:	dc02      	bgt.n	8018ab6 <_strtod_l+0x2ce>
 8018ab0:	4564      	cmp	r4, ip
 8018ab2:	bfa8      	it	ge
 8018ab4:	4664      	movge	r4, ip
 8018ab6:	f1be 0f00 	cmp.w	lr, #0
 8018aba:	d000      	beq.n	8018abe <_strtod_l+0x2d6>
 8018abc:	4264      	negs	r4, r4
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d14e      	bne.n	8018b60 <_strtod_l+0x378>
 8018ac2:	9b07      	ldr	r3, [sp, #28]
 8018ac4:	4318      	orrs	r0, r3
 8018ac6:	f47f aeca 	bne.w	801885e <_strtod_l+0x76>
 8018aca:	9b06      	ldr	r3, [sp, #24]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	f47f aee2 	bne.w	8018896 <_strtod_l+0xae>
 8018ad2:	2a69      	cmp	r2, #105	@ 0x69
 8018ad4:	d027      	beq.n	8018b26 <_strtod_l+0x33e>
 8018ad6:	dc24      	bgt.n	8018b22 <_strtod_l+0x33a>
 8018ad8:	2a49      	cmp	r2, #73	@ 0x49
 8018ada:	d024      	beq.n	8018b26 <_strtod_l+0x33e>
 8018adc:	2a4e      	cmp	r2, #78	@ 0x4e
 8018ade:	f47f aeda 	bne.w	8018896 <_strtod_l+0xae>
 8018ae2:	4997      	ldr	r1, [pc, #604]	@ (8018d40 <_strtod_l+0x558>)
 8018ae4:	a811      	add	r0, sp, #68	@ 0x44
 8018ae6:	f002 fb69 	bl	801b1bc <__match>
 8018aea:	2800      	cmp	r0, #0
 8018aec:	f43f aed3 	beq.w	8018896 <_strtod_l+0xae>
 8018af0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018af2:	781b      	ldrb	r3, [r3, #0]
 8018af4:	2b28      	cmp	r3, #40	@ 0x28
 8018af6:	d12d      	bne.n	8018b54 <_strtod_l+0x36c>
 8018af8:	4992      	ldr	r1, [pc, #584]	@ (8018d44 <_strtod_l+0x55c>)
 8018afa:	aa14      	add	r2, sp, #80	@ 0x50
 8018afc:	a811      	add	r0, sp, #68	@ 0x44
 8018afe:	f002 fb71 	bl	801b1e4 <__hexnan>
 8018b02:	2805      	cmp	r0, #5
 8018b04:	d126      	bne.n	8018b54 <_strtod_l+0x36c>
 8018b06:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018b08:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8018b0c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8018b10:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8018b14:	e6a3      	b.n	801885e <_strtod_l+0x76>
 8018b16:	240a      	movs	r4, #10
 8018b18:	fb04 2c0c 	mla	ip, r4, ip, r2
 8018b1c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8018b20:	e7b8      	b.n	8018a94 <_strtod_l+0x2ac>
 8018b22:	2a6e      	cmp	r2, #110	@ 0x6e
 8018b24:	e7db      	b.n	8018ade <_strtod_l+0x2f6>
 8018b26:	4988      	ldr	r1, [pc, #544]	@ (8018d48 <_strtod_l+0x560>)
 8018b28:	a811      	add	r0, sp, #68	@ 0x44
 8018b2a:	f002 fb47 	bl	801b1bc <__match>
 8018b2e:	2800      	cmp	r0, #0
 8018b30:	f43f aeb1 	beq.w	8018896 <_strtod_l+0xae>
 8018b34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018b36:	4985      	ldr	r1, [pc, #532]	@ (8018d4c <_strtod_l+0x564>)
 8018b38:	3b01      	subs	r3, #1
 8018b3a:	a811      	add	r0, sp, #68	@ 0x44
 8018b3c:	9311      	str	r3, [sp, #68]	@ 0x44
 8018b3e:	f002 fb3d 	bl	801b1bc <__match>
 8018b42:	b910      	cbnz	r0, 8018b4a <_strtod_l+0x362>
 8018b44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018b46:	3301      	adds	r3, #1
 8018b48:	9311      	str	r3, [sp, #68]	@ 0x44
 8018b4a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8018d60 <_strtod_l+0x578>
 8018b4e:	f04f 0a00 	mov.w	sl, #0
 8018b52:	e684      	b.n	801885e <_strtod_l+0x76>
 8018b54:	487e      	ldr	r0, [pc, #504]	@ (8018d50 <_strtod_l+0x568>)
 8018b56:	f001 fa77 	bl	801a048 <nan>
 8018b5a:	ec5b ab10 	vmov	sl, fp, d0
 8018b5e:	e67e      	b.n	801885e <_strtod_l+0x76>
 8018b60:	ee07 9a90 	vmov	s15, r9
 8018b64:	1be2      	subs	r2, r4, r7
 8018b66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018b6a:	2d00      	cmp	r5, #0
 8018b6c:	bf08      	it	eq
 8018b6e:	461d      	moveq	r5, r3
 8018b70:	2b10      	cmp	r3, #16
 8018b72:	9209      	str	r2, [sp, #36]	@ 0x24
 8018b74:	461a      	mov	r2, r3
 8018b76:	bfa8      	it	ge
 8018b78:	2210      	movge	r2, #16
 8018b7a:	2b09      	cmp	r3, #9
 8018b7c:	ec5b ab17 	vmov	sl, fp, d7
 8018b80:	dc15      	bgt.n	8018bae <_strtod_l+0x3c6>
 8018b82:	1be1      	subs	r1, r4, r7
 8018b84:	2900      	cmp	r1, #0
 8018b86:	f43f ae6a 	beq.w	801885e <_strtod_l+0x76>
 8018b8a:	eba4 0107 	sub.w	r1, r4, r7
 8018b8e:	dd72      	ble.n	8018c76 <_strtod_l+0x48e>
 8018b90:	2916      	cmp	r1, #22
 8018b92:	dc59      	bgt.n	8018c48 <_strtod_l+0x460>
 8018b94:	4b6f      	ldr	r3, [pc, #444]	@ (8018d54 <_strtod_l+0x56c>)
 8018b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018b9c:	ed93 7b00 	vldr	d7, [r3]
 8018ba0:	ec4b ab16 	vmov	d6, sl, fp
 8018ba4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018ba8:	ec5b ab17 	vmov	sl, fp, d7
 8018bac:	e657      	b.n	801885e <_strtod_l+0x76>
 8018bae:	4969      	ldr	r1, [pc, #420]	@ (8018d54 <_strtod_l+0x56c>)
 8018bb0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018bb4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8018bb8:	ee06 6a90 	vmov	s13, r6
 8018bbc:	2b0f      	cmp	r3, #15
 8018bbe:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8018bc2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018bc6:	ec5b ab16 	vmov	sl, fp, d6
 8018bca:	ddda      	ble.n	8018b82 <_strtod_l+0x39a>
 8018bcc:	1a9a      	subs	r2, r3, r2
 8018bce:	1be1      	subs	r1, r4, r7
 8018bd0:	440a      	add	r2, r1
 8018bd2:	2a00      	cmp	r2, #0
 8018bd4:	f340 8094 	ble.w	8018d00 <_strtod_l+0x518>
 8018bd8:	f012 000f 	ands.w	r0, r2, #15
 8018bdc:	d00a      	beq.n	8018bf4 <_strtod_l+0x40c>
 8018bde:	495d      	ldr	r1, [pc, #372]	@ (8018d54 <_strtod_l+0x56c>)
 8018be0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018be4:	ed91 7b00 	vldr	d7, [r1]
 8018be8:	ec4b ab16 	vmov	d6, sl, fp
 8018bec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018bf0:	ec5b ab17 	vmov	sl, fp, d7
 8018bf4:	f032 020f 	bics.w	r2, r2, #15
 8018bf8:	d073      	beq.n	8018ce2 <_strtod_l+0x4fa>
 8018bfa:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8018bfe:	dd47      	ble.n	8018c90 <_strtod_l+0x4a8>
 8018c00:	2400      	movs	r4, #0
 8018c02:	4625      	mov	r5, r4
 8018c04:	9407      	str	r4, [sp, #28]
 8018c06:	4626      	mov	r6, r4
 8018c08:	9a05      	ldr	r2, [sp, #20]
 8018c0a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8018d60 <_strtod_l+0x578>
 8018c0e:	2322      	movs	r3, #34	@ 0x22
 8018c10:	6013      	str	r3, [r2, #0]
 8018c12:	f04f 0a00 	mov.w	sl, #0
 8018c16:	9b07      	ldr	r3, [sp, #28]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	f43f ae20 	beq.w	801885e <_strtod_l+0x76>
 8018c1e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018c20:	9805      	ldr	r0, [sp, #20]
 8018c22:	f002 fc83 	bl	801b52c <_Bfree>
 8018c26:	9805      	ldr	r0, [sp, #20]
 8018c28:	4631      	mov	r1, r6
 8018c2a:	f002 fc7f 	bl	801b52c <_Bfree>
 8018c2e:	9805      	ldr	r0, [sp, #20]
 8018c30:	4629      	mov	r1, r5
 8018c32:	f002 fc7b 	bl	801b52c <_Bfree>
 8018c36:	9907      	ldr	r1, [sp, #28]
 8018c38:	9805      	ldr	r0, [sp, #20]
 8018c3a:	f002 fc77 	bl	801b52c <_Bfree>
 8018c3e:	9805      	ldr	r0, [sp, #20]
 8018c40:	4621      	mov	r1, r4
 8018c42:	f002 fc73 	bl	801b52c <_Bfree>
 8018c46:	e60a      	b.n	801885e <_strtod_l+0x76>
 8018c48:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8018c4c:	1be0      	subs	r0, r4, r7
 8018c4e:	4281      	cmp	r1, r0
 8018c50:	dbbc      	blt.n	8018bcc <_strtod_l+0x3e4>
 8018c52:	4a40      	ldr	r2, [pc, #256]	@ (8018d54 <_strtod_l+0x56c>)
 8018c54:	f1c3 030f 	rsb	r3, r3, #15
 8018c58:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018c5c:	ed91 7b00 	vldr	d7, [r1]
 8018c60:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018c62:	ec4b ab16 	vmov	d6, sl, fp
 8018c66:	1acb      	subs	r3, r1, r3
 8018c68:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018c6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018c70:	ed92 6b00 	vldr	d6, [r2]
 8018c74:	e796      	b.n	8018ba4 <_strtod_l+0x3bc>
 8018c76:	3116      	adds	r1, #22
 8018c78:	dba8      	blt.n	8018bcc <_strtod_l+0x3e4>
 8018c7a:	4b36      	ldr	r3, [pc, #216]	@ (8018d54 <_strtod_l+0x56c>)
 8018c7c:	1b3c      	subs	r4, r7, r4
 8018c7e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8018c82:	ed94 7b00 	vldr	d7, [r4]
 8018c86:	ec4b ab16 	vmov	d6, sl, fp
 8018c8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018c8e:	e78b      	b.n	8018ba8 <_strtod_l+0x3c0>
 8018c90:	2000      	movs	r0, #0
 8018c92:	ec4b ab17 	vmov	d7, sl, fp
 8018c96:	4e30      	ldr	r6, [pc, #192]	@ (8018d58 <_strtod_l+0x570>)
 8018c98:	1112      	asrs	r2, r2, #4
 8018c9a:	4601      	mov	r1, r0
 8018c9c:	2a01      	cmp	r2, #1
 8018c9e:	dc23      	bgt.n	8018ce8 <_strtod_l+0x500>
 8018ca0:	b108      	cbz	r0, 8018ca6 <_strtod_l+0x4be>
 8018ca2:	ec5b ab17 	vmov	sl, fp, d7
 8018ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8018d58 <_strtod_l+0x570>)
 8018ca8:	482c      	ldr	r0, [pc, #176]	@ (8018d5c <_strtod_l+0x574>)
 8018caa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018cae:	ed92 7b00 	vldr	d7, [r2]
 8018cb2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8018cb6:	ec4b ab16 	vmov	d6, sl, fp
 8018cba:	4a29      	ldr	r2, [pc, #164]	@ (8018d60 <_strtod_l+0x578>)
 8018cbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018cc0:	ee17 1a90 	vmov	r1, s15
 8018cc4:	400a      	ands	r2, r1
 8018cc6:	4282      	cmp	r2, r0
 8018cc8:	ec5b ab17 	vmov	sl, fp, d7
 8018ccc:	d898      	bhi.n	8018c00 <_strtod_l+0x418>
 8018cce:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8018cd2:	4282      	cmp	r2, r0
 8018cd4:	bf86      	itte	hi
 8018cd6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8018d64 <_strtod_l+0x57c>
 8018cda:	f04f 3aff 	movhi.w	sl, #4294967295
 8018cde:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	9206      	str	r2, [sp, #24]
 8018ce6:	e076      	b.n	8018dd6 <_strtod_l+0x5ee>
 8018ce8:	f012 0f01 	tst.w	r2, #1
 8018cec:	d004      	beq.n	8018cf8 <_strtod_l+0x510>
 8018cee:	ed96 6b00 	vldr	d6, [r6]
 8018cf2:	2001      	movs	r0, #1
 8018cf4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018cf8:	3101      	adds	r1, #1
 8018cfa:	1052      	asrs	r2, r2, #1
 8018cfc:	3608      	adds	r6, #8
 8018cfe:	e7cd      	b.n	8018c9c <_strtod_l+0x4b4>
 8018d00:	d0ef      	beq.n	8018ce2 <_strtod_l+0x4fa>
 8018d02:	4252      	negs	r2, r2
 8018d04:	f012 000f 	ands.w	r0, r2, #15
 8018d08:	d00a      	beq.n	8018d20 <_strtod_l+0x538>
 8018d0a:	4912      	ldr	r1, [pc, #72]	@ (8018d54 <_strtod_l+0x56c>)
 8018d0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018d10:	ed91 7b00 	vldr	d7, [r1]
 8018d14:	ec4b ab16 	vmov	d6, sl, fp
 8018d18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018d1c:	ec5b ab17 	vmov	sl, fp, d7
 8018d20:	1112      	asrs	r2, r2, #4
 8018d22:	d0de      	beq.n	8018ce2 <_strtod_l+0x4fa>
 8018d24:	2a1f      	cmp	r2, #31
 8018d26:	dd1f      	ble.n	8018d68 <_strtod_l+0x580>
 8018d28:	2400      	movs	r4, #0
 8018d2a:	4625      	mov	r5, r4
 8018d2c:	9407      	str	r4, [sp, #28]
 8018d2e:	4626      	mov	r6, r4
 8018d30:	9a05      	ldr	r2, [sp, #20]
 8018d32:	2322      	movs	r3, #34	@ 0x22
 8018d34:	f04f 0a00 	mov.w	sl, #0
 8018d38:	f04f 0b00 	mov.w	fp, #0
 8018d3c:	6013      	str	r3, [r2, #0]
 8018d3e:	e76a      	b.n	8018c16 <_strtod_l+0x42e>
 8018d40:	0801dfee 	.word	0x0801dfee
 8018d44:	0801de8c 	.word	0x0801de8c
 8018d48:	0801dfe6 	.word	0x0801dfe6
 8018d4c:	0801e020 	.word	0x0801e020
 8018d50:	0801e2ac 	.word	0x0801e2ac
 8018d54:	0801e198 	.word	0x0801e198
 8018d58:	0801e170 	.word	0x0801e170
 8018d5c:	7ca00000 	.word	0x7ca00000
 8018d60:	7ff00000 	.word	0x7ff00000
 8018d64:	7fefffff 	.word	0x7fefffff
 8018d68:	f012 0110 	ands.w	r1, r2, #16
 8018d6c:	bf18      	it	ne
 8018d6e:	216a      	movne	r1, #106	@ 0x6a
 8018d70:	9106      	str	r1, [sp, #24]
 8018d72:	ec4b ab17 	vmov	d7, sl, fp
 8018d76:	49b0      	ldr	r1, [pc, #704]	@ (8019038 <_strtod_l+0x850>)
 8018d78:	2000      	movs	r0, #0
 8018d7a:	07d6      	lsls	r6, r2, #31
 8018d7c:	d504      	bpl.n	8018d88 <_strtod_l+0x5a0>
 8018d7e:	ed91 6b00 	vldr	d6, [r1]
 8018d82:	2001      	movs	r0, #1
 8018d84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018d88:	1052      	asrs	r2, r2, #1
 8018d8a:	f101 0108 	add.w	r1, r1, #8
 8018d8e:	d1f4      	bne.n	8018d7a <_strtod_l+0x592>
 8018d90:	b108      	cbz	r0, 8018d96 <_strtod_l+0x5ae>
 8018d92:	ec5b ab17 	vmov	sl, fp, d7
 8018d96:	9a06      	ldr	r2, [sp, #24]
 8018d98:	b1b2      	cbz	r2, 8018dc8 <_strtod_l+0x5e0>
 8018d9a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8018d9e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8018da2:	2a00      	cmp	r2, #0
 8018da4:	4658      	mov	r0, fp
 8018da6:	dd0f      	ble.n	8018dc8 <_strtod_l+0x5e0>
 8018da8:	2a1f      	cmp	r2, #31
 8018daa:	dd55      	ble.n	8018e58 <_strtod_l+0x670>
 8018dac:	2a34      	cmp	r2, #52	@ 0x34
 8018dae:	bfde      	ittt	le
 8018db0:	f04f 32ff 	movle.w	r2, #4294967295
 8018db4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8018db8:	408a      	lslle	r2, r1
 8018dba:	f04f 0a00 	mov.w	sl, #0
 8018dbe:	bfcc      	ite	gt
 8018dc0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8018dc4:	ea02 0b00 	andle.w	fp, r2, r0
 8018dc8:	ec4b ab17 	vmov	d7, sl, fp
 8018dcc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dd4:	d0a8      	beq.n	8018d28 <_strtod_l+0x540>
 8018dd6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018dd8:	9805      	ldr	r0, [sp, #20]
 8018dda:	f8cd 9000 	str.w	r9, [sp]
 8018dde:	462a      	mov	r2, r5
 8018de0:	f002 fc0c 	bl	801b5fc <__s2b>
 8018de4:	9007      	str	r0, [sp, #28]
 8018de6:	2800      	cmp	r0, #0
 8018de8:	f43f af0a 	beq.w	8018c00 <_strtod_l+0x418>
 8018dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018dee:	1b3f      	subs	r7, r7, r4
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	bfb4      	ite	lt
 8018df4:	463b      	movlt	r3, r7
 8018df6:	2300      	movge	r3, #0
 8018df8:	930a      	str	r3, [sp, #40]	@ 0x28
 8018dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018dfc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8019028 <_strtod_l+0x840>
 8018e00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018e04:	2400      	movs	r4, #0
 8018e06:	930d      	str	r3, [sp, #52]	@ 0x34
 8018e08:	4625      	mov	r5, r4
 8018e0a:	9b07      	ldr	r3, [sp, #28]
 8018e0c:	9805      	ldr	r0, [sp, #20]
 8018e0e:	6859      	ldr	r1, [r3, #4]
 8018e10:	f002 fb4c 	bl	801b4ac <_Balloc>
 8018e14:	4606      	mov	r6, r0
 8018e16:	2800      	cmp	r0, #0
 8018e18:	f43f aef6 	beq.w	8018c08 <_strtod_l+0x420>
 8018e1c:	9b07      	ldr	r3, [sp, #28]
 8018e1e:	691a      	ldr	r2, [r3, #16]
 8018e20:	ec4b ab19 	vmov	d9, sl, fp
 8018e24:	3202      	adds	r2, #2
 8018e26:	f103 010c 	add.w	r1, r3, #12
 8018e2a:	0092      	lsls	r2, r2, #2
 8018e2c:	300c      	adds	r0, #12
 8018e2e:	f001 f8fa 	bl	801a026 <memcpy>
 8018e32:	eeb0 0b49 	vmov.f64	d0, d9
 8018e36:	9805      	ldr	r0, [sp, #20]
 8018e38:	aa14      	add	r2, sp, #80	@ 0x50
 8018e3a:	a913      	add	r1, sp, #76	@ 0x4c
 8018e3c:	f002 ff1a 	bl	801bc74 <__d2b>
 8018e40:	9012      	str	r0, [sp, #72]	@ 0x48
 8018e42:	2800      	cmp	r0, #0
 8018e44:	f43f aee0 	beq.w	8018c08 <_strtod_l+0x420>
 8018e48:	9805      	ldr	r0, [sp, #20]
 8018e4a:	2101      	movs	r1, #1
 8018e4c:	f002 fc6c 	bl	801b728 <__i2b>
 8018e50:	4605      	mov	r5, r0
 8018e52:	b940      	cbnz	r0, 8018e66 <_strtod_l+0x67e>
 8018e54:	2500      	movs	r5, #0
 8018e56:	e6d7      	b.n	8018c08 <_strtod_l+0x420>
 8018e58:	f04f 31ff 	mov.w	r1, #4294967295
 8018e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8018e60:	ea02 0a0a 	and.w	sl, r2, sl
 8018e64:	e7b0      	b.n	8018dc8 <_strtod_l+0x5e0>
 8018e66:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8018e68:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018e6a:	2f00      	cmp	r7, #0
 8018e6c:	bfab      	itete	ge
 8018e6e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8018e70:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8018e72:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8018e76:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8018e7a:	bfac      	ite	ge
 8018e7c:	eb07 0903 	addge.w	r9, r7, r3
 8018e80:	eba3 0807 	sublt.w	r8, r3, r7
 8018e84:	9b06      	ldr	r3, [sp, #24]
 8018e86:	1aff      	subs	r7, r7, r3
 8018e88:	4417      	add	r7, r2
 8018e8a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8018e8e:	4a6b      	ldr	r2, [pc, #428]	@ (801903c <_strtod_l+0x854>)
 8018e90:	3f01      	subs	r7, #1
 8018e92:	4297      	cmp	r7, r2
 8018e94:	da51      	bge.n	8018f3a <_strtod_l+0x752>
 8018e96:	1bd1      	subs	r1, r2, r7
 8018e98:	291f      	cmp	r1, #31
 8018e9a:	eba3 0301 	sub.w	r3, r3, r1
 8018e9e:	f04f 0201 	mov.w	r2, #1
 8018ea2:	dc3e      	bgt.n	8018f22 <_strtod_l+0x73a>
 8018ea4:	408a      	lsls	r2, r1
 8018ea6:	920c      	str	r2, [sp, #48]	@ 0x30
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018eac:	eb09 0703 	add.w	r7, r9, r3
 8018eb0:	4498      	add	r8, r3
 8018eb2:	9b06      	ldr	r3, [sp, #24]
 8018eb4:	45b9      	cmp	r9, r7
 8018eb6:	4498      	add	r8, r3
 8018eb8:	464b      	mov	r3, r9
 8018eba:	bfa8      	it	ge
 8018ebc:	463b      	movge	r3, r7
 8018ebe:	4543      	cmp	r3, r8
 8018ec0:	bfa8      	it	ge
 8018ec2:	4643      	movge	r3, r8
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	bfc2      	ittt	gt
 8018ec8:	1aff      	subgt	r7, r7, r3
 8018eca:	eba8 0803 	subgt.w	r8, r8, r3
 8018ece:	eba9 0903 	subgt.w	r9, r9, r3
 8018ed2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	dd16      	ble.n	8018f06 <_strtod_l+0x71e>
 8018ed8:	4629      	mov	r1, r5
 8018eda:	9805      	ldr	r0, [sp, #20]
 8018edc:	461a      	mov	r2, r3
 8018ede:	f002 fce3 	bl	801b8a8 <__pow5mult>
 8018ee2:	4605      	mov	r5, r0
 8018ee4:	2800      	cmp	r0, #0
 8018ee6:	d0b5      	beq.n	8018e54 <_strtod_l+0x66c>
 8018ee8:	4601      	mov	r1, r0
 8018eea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018eec:	9805      	ldr	r0, [sp, #20]
 8018eee:	f002 fc31 	bl	801b754 <__multiply>
 8018ef2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8018ef4:	2800      	cmp	r0, #0
 8018ef6:	f43f ae87 	beq.w	8018c08 <_strtod_l+0x420>
 8018efa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018efc:	9805      	ldr	r0, [sp, #20]
 8018efe:	f002 fb15 	bl	801b52c <_Bfree>
 8018f02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f04:	9312      	str	r3, [sp, #72]	@ 0x48
 8018f06:	2f00      	cmp	r7, #0
 8018f08:	dc1b      	bgt.n	8018f42 <_strtod_l+0x75a>
 8018f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	dd21      	ble.n	8018f54 <_strtod_l+0x76c>
 8018f10:	4631      	mov	r1, r6
 8018f12:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018f14:	9805      	ldr	r0, [sp, #20]
 8018f16:	f002 fcc7 	bl	801b8a8 <__pow5mult>
 8018f1a:	4606      	mov	r6, r0
 8018f1c:	b9d0      	cbnz	r0, 8018f54 <_strtod_l+0x76c>
 8018f1e:	2600      	movs	r6, #0
 8018f20:	e672      	b.n	8018c08 <_strtod_l+0x420>
 8018f22:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8018f26:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8018f2a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8018f2e:	37e2      	adds	r7, #226	@ 0xe2
 8018f30:	fa02 f107 	lsl.w	r1, r2, r7
 8018f34:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018f36:	920c      	str	r2, [sp, #48]	@ 0x30
 8018f38:	e7b8      	b.n	8018eac <_strtod_l+0x6c4>
 8018f3a:	2200      	movs	r2, #0
 8018f3c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018f3e:	2201      	movs	r2, #1
 8018f40:	e7f9      	b.n	8018f36 <_strtod_l+0x74e>
 8018f42:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018f44:	9805      	ldr	r0, [sp, #20]
 8018f46:	463a      	mov	r2, r7
 8018f48:	f002 fd08 	bl	801b95c <__lshift>
 8018f4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8018f4e:	2800      	cmp	r0, #0
 8018f50:	d1db      	bne.n	8018f0a <_strtod_l+0x722>
 8018f52:	e659      	b.n	8018c08 <_strtod_l+0x420>
 8018f54:	f1b8 0f00 	cmp.w	r8, #0
 8018f58:	dd07      	ble.n	8018f6a <_strtod_l+0x782>
 8018f5a:	4631      	mov	r1, r6
 8018f5c:	9805      	ldr	r0, [sp, #20]
 8018f5e:	4642      	mov	r2, r8
 8018f60:	f002 fcfc 	bl	801b95c <__lshift>
 8018f64:	4606      	mov	r6, r0
 8018f66:	2800      	cmp	r0, #0
 8018f68:	d0d9      	beq.n	8018f1e <_strtod_l+0x736>
 8018f6a:	f1b9 0f00 	cmp.w	r9, #0
 8018f6e:	dd08      	ble.n	8018f82 <_strtod_l+0x79a>
 8018f70:	4629      	mov	r1, r5
 8018f72:	9805      	ldr	r0, [sp, #20]
 8018f74:	464a      	mov	r2, r9
 8018f76:	f002 fcf1 	bl	801b95c <__lshift>
 8018f7a:	4605      	mov	r5, r0
 8018f7c:	2800      	cmp	r0, #0
 8018f7e:	f43f ae43 	beq.w	8018c08 <_strtod_l+0x420>
 8018f82:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018f84:	9805      	ldr	r0, [sp, #20]
 8018f86:	4632      	mov	r2, r6
 8018f88:	f002 fd70 	bl	801ba6c <__mdiff>
 8018f8c:	4604      	mov	r4, r0
 8018f8e:	2800      	cmp	r0, #0
 8018f90:	f43f ae3a 	beq.w	8018c08 <_strtod_l+0x420>
 8018f94:	2300      	movs	r3, #0
 8018f96:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8018f9a:	60c3      	str	r3, [r0, #12]
 8018f9c:	4629      	mov	r1, r5
 8018f9e:	f002 fd49 	bl	801ba34 <__mcmp>
 8018fa2:	2800      	cmp	r0, #0
 8018fa4:	da4e      	bge.n	8019044 <_strtod_l+0x85c>
 8018fa6:	ea58 080a 	orrs.w	r8, r8, sl
 8018faa:	d174      	bne.n	8019096 <_strtod_l+0x8ae>
 8018fac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d170      	bne.n	8019096 <_strtod_l+0x8ae>
 8018fb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018fb8:	0d1b      	lsrs	r3, r3, #20
 8018fba:	051b      	lsls	r3, r3, #20
 8018fbc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018fc0:	d969      	bls.n	8019096 <_strtod_l+0x8ae>
 8018fc2:	6963      	ldr	r3, [r4, #20]
 8018fc4:	b913      	cbnz	r3, 8018fcc <_strtod_l+0x7e4>
 8018fc6:	6923      	ldr	r3, [r4, #16]
 8018fc8:	2b01      	cmp	r3, #1
 8018fca:	dd64      	ble.n	8019096 <_strtod_l+0x8ae>
 8018fcc:	4621      	mov	r1, r4
 8018fce:	2201      	movs	r2, #1
 8018fd0:	9805      	ldr	r0, [sp, #20]
 8018fd2:	f002 fcc3 	bl	801b95c <__lshift>
 8018fd6:	4629      	mov	r1, r5
 8018fd8:	4604      	mov	r4, r0
 8018fda:	f002 fd2b 	bl	801ba34 <__mcmp>
 8018fde:	2800      	cmp	r0, #0
 8018fe0:	dd59      	ble.n	8019096 <_strtod_l+0x8ae>
 8018fe2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018fe6:	9a06      	ldr	r2, [sp, #24]
 8018fe8:	0d1b      	lsrs	r3, r3, #20
 8018fea:	051b      	lsls	r3, r3, #20
 8018fec:	2a00      	cmp	r2, #0
 8018fee:	d070      	beq.n	80190d2 <_strtod_l+0x8ea>
 8018ff0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018ff4:	d86d      	bhi.n	80190d2 <_strtod_l+0x8ea>
 8018ff6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8018ffa:	f67f ae99 	bls.w	8018d30 <_strtod_l+0x548>
 8018ffe:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8019030 <_strtod_l+0x848>
 8019002:	ec4b ab16 	vmov	d6, sl, fp
 8019006:	4b0e      	ldr	r3, [pc, #56]	@ (8019040 <_strtod_l+0x858>)
 8019008:	ee26 7b07 	vmul.f64	d7, d6, d7
 801900c:	ee17 2a90 	vmov	r2, s15
 8019010:	4013      	ands	r3, r2
 8019012:	ec5b ab17 	vmov	sl, fp, d7
 8019016:	2b00      	cmp	r3, #0
 8019018:	f47f ae01 	bne.w	8018c1e <_strtod_l+0x436>
 801901c:	9a05      	ldr	r2, [sp, #20]
 801901e:	2322      	movs	r3, #34	@ 0x22
 8019020:	6013      	str	r3, [r2, #0]
 8019022:	e5fc      	b.n	8018c1e <_strtod_l+0x436>
 8019024:	f3af 8000 	nop.w
 8019028:	ffc00000 	.word	0xffc00000
 801902c:	41dfffff 	.word	0x41dfffff
 8019030:	00000000 	.word	0x00000000
 8019034:	39500000 	.word	0x39500000
 8019038:	0801deb8 	.word	0x0801deb8
 801903c:	fffffc02 	.word	0xfffffc02
 8019040:	7ff00000 	.word	0x7ff00000
 8019044:	46d9      	mov	r9, fp
 8019046:	d15d      	bne.n	8019104 <_strtod_l+0x91c>
 8019048:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801904c:	f1b8 0f00 	cmp.w	r8, #0
 8019050:	d02a      	beq.n	80190a8 <_strtod_l+0x8c0>
 8019052:	4aab      	ldr	r2, [pc, #684]	@ (8019300 <_strtod_l+0xb18>)
 8019054:	4293      	cmp	r3, r2
 8019056:	d12a      	bne.n	80190ae <_strtod_l+0x8c6>
 8019058:	9b06      	ldr	r3, [sp, #24]
 801905a:	4652      	mov	r2, sl
 801905c:	b1fb      	cbz	r3, 801909e <_strtod_l+0x8b6>
 801905e:	4ba9      	ldr	r3, [pc, #676]	@ (8019304 <_strtod_l+0xb1c>)
 8019060:	ea0b 0303 	and.w	r3, fp, r3
 8019064:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019068:	f04f 31ff 	mov.w	r1, #4294967295
 801906c:	d81a      	bhi.n	80190a4 <_strtod_l+0x8bc>
 801906e:	0d1b      	lsrs	r3, r3, #20
 8019070:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019074:	fa01 f303 	lsl.w	r3, r1, r3
 8019078:	429a      	cmp	r2, r3
 801907a:	d118      	bne.n	80190ae <_strtod_l+0x8c6>
 801907c:	4ba2      	ldr	r3, [pc, #648]	@ (8019308 <_strtod_l+0xb20>)
 801907e:	4599      	cmp	r9, r3
 8019080:	d102      	bne.n	8019088 <_strtod_l+0x8a0>
 8019082:	3201      	adds	r2, #1
 8019084:	f43f adc0 	beq.w	8018c08 <_strtod_l+0x420>
 8019088:	4b9e      	ldr	r3, [pc, #632]	@ (8019304 <_strtod_l+0xb1c>)
 801908a:	ea09 0303 	and.w	r3, r9, r3
 801908e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8019092:	f04f 0a00 	mov.w	sl, #0
 8019096:	9b06      	ldr	r3, [sp, #24]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d1b0      	bne.n	8018ffe <_strtod_l+0x816>
 801909c:	e5bf      	b.n	8018c1e <_strtod_l+0x436>
 801909e:	f04f 33ff 	mov.w	r3, #4294967295
 80190a2:	e7e9      	b.n	8019078 <_strtod_l+0x890>
 80190a4:	460b      	mov	r3, r1
 80190a6:	e7e7      	b.n	8019078 <_strtod_l+0x890>
 80190a8:	ea53 030a 	orrs.w	r3, r3, sl
 80190ac:	d099      	beq.n	8018fe2 <_strtod_l+0x7fa>
 80190ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80190b0:	b1c3      	cbz	r3, 80190e4 <_strtod_l+0x8fc>
 80190b2:	ea13 0f09 	tst.w	r3, r9
 80190b6:	d0ee      	beq.n	8019096 <_strtod_l+0x8ae>
 80190b8:	9a06      	ldr	r2, [sp, #24]
 80190ba:	4650      	mov	r0, sl
 80190bc:	4659      	mov	r1, fp
 80190be:	f1b8 0f00 	cmp.w	r8, #0
 80190c2:	d013      	beq.n	80190ec <_strtod_l+0x904>
 80190c4:	f7ff fb73 	bl	80187ae <sulp>
 80190c8:	ee39 7b00 	vadd.f64	d7, d9, d0
 80190cc:	ec5b ab17 	vmov	sl, fp, d7
 80190d0:	e7e1      	b.n	8019096 <_strtod_l+0x8ae>
 80190d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80190d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80190da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80190de:	f04f 3aff 	mov.w	sl, #4294967295
 80190e2:	e7d8      	b.n	8019096 <_strtod_l+0x8ae>
 80190e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80190e6:	ea13 0f0a 	tst.w	r3, sl
 80190ea:	e7e4      	b.n	80190b6 <_strtod_l+0x8ce>
 80190ec:	f7ff fb5f 	bl	80187ae <sulp>
 80190f0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80190f4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80190f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190fc:	ec5b ab10 	vmov	sl, fp, d0
 8019100:	d1c9      	bne.n	8019096 <_strtod_l+0x8ae>
 8019102:	e615      	b.n	8018d30 <_strtod_l+0x548>
 8019104:	4629      	mov	r1, r5
 8019106:	4620      	mov	r0, r4
 8019108:	f002 fe0c 	bl	801bd24 <__ratio>
 801910c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8019110:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019118:	d85d      	bhi.n	80191d6 <_strtod_l+0x9ee>
 801911a:	f1b8 0f00 	cmp.w	r8, #0
 801911e:	d164      	bne.n	80191ea <_strtod_l+0xa02>
 8019120:	f1ba 0f00 	cmp.w	sl, #0
 8019124:	d14b      	bne.n	80191be <_strtod_l+0x9d6>
 8019126:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801912a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801912e:	2b00      	cmp	r3, #0
 8019130:	d160      	bne.n	80191f4 <_strtod_l+0xa0c>
 8019132:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8019136:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801913a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801913e:	d401      	bmi.n	8019144 <_strtod_l+0x95c>
 8019140:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019144:	eeb1 ab48 	vneg.f64	d10, d8
 8019148:	486e      	ldr	r0, [pc, #440]	@ (8019304 <_strtod_l+0xb1c>)
 801914a:	4970      	ldr	r1, [pc, #448]	@ (801930c <_strtod_l+0xb24>)
 801914c:	ea09 0700 	and.w	r7, r9, r0
 8019150:	428f      	cmp	r7, r1
 8019152:	ec53 2b1a 	vmov	r2, r3, d10
 8019156:	d17d      	bne.n	8019254 <_strtod_l+0xa6c>
 8019158:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801915c:	ec4b ab1c 	vmov	d12, sl, fp
 8019160:	eeb0 0b4c 	vmov.f64	d0, d12
 8019164:	f002 fd16 	bl	801bb94 <__ulp>
 8019168:	4866      	ldr	r0, [pc, #408]	@ (8019304 <_strtod_l+0xb1c>)
 801916a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801916e:	ee1c 3a90 	vmov	r3, s25
 8019172:	4a67      	ldr	r2, [pc, #412]	@ (8019310 <_strtod_l+0xb28>)
 8019174:	ea03 0100 	and.w	r1, r3, r0
 8019178:	4291      	cmp	r1, r2
 801917a:	ec5b ab1c 	vmov	sl, fp, d12
 801917e:	d93c      	bls.n	80191fa <_strtod_l+0xa12>
 8019180:	ee19 2a90 	vmov	r2, s19
 8019184:	4b60      	ldr	r3, [pc, #384]	@ (8019308 <_strtod_l+0xb20>)
 8019186:	429a      	cmp	r2, r3
 8019188:	d104      	bne.n	8019194 <_strtod_l+0x9ac>
 801918a:	ee19 3a10 	vmov	r3, s18
 801918e:	3301      	adds	r3, #1
 8019190:	f43f ad3a 	beq.w	8018c08 <_strtod_l+0x420>
 8019194:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8019308 <_strtod_l+0xb20>
 8019198:	f04f 3aff 	mov.w	sl, #4294967295
 801919c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801919e:	9805      	ldr	r0, [sp, #20]
 80191a0:	f002 f9c4 	bl	801b52c <_Bfree>
 80191a4:	9805      	ldr	r0, [sp, #20]
 80191a6:	4631      	mov	r1, r6
 80191a8:	f002 f9c0 	bl	801b52c <_Bfree>
 80191ac:	9805      	ldr	r0, [sp, #20]
 80191ae:	4629      	mov	r1, r5
 80191b0:	f002 f9bc 	bl	801b52c <_Bfree>
 80191b4:	9805      	ldr	r0, [sp, #20]
 80191b6:	4621      	mov	r1, r4
 80191b8:	f002 f9b8 	bl	801b52c <_Bfree>
 80191bc:	e625      	b.n	8018e0a <_strtod_l+0x622>
 80191be:	f1ba 0f01 	cmp.w	sl, #1
 80191c2:	d103      	bne.n	80191cc <_strtod_l+0x9e4>
 80191c4:	f1bb 0f00 	cmp.w	fp, #0
 80191c8:	f43f adb2 	beq.w	8018d30 <_strtod_l+0x548>
 80191cc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80191d0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80191d4:	e7b8      	b.n	8019148 <_strtod_l+0x960>
 80191d6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80191da:	ee20 8b08 	vmul.f64	d8, d0, d8
 80191de:	f1b8 0f00 	cmp.w	r8, #0
 80191e2:	d0af      	beq.n	8019144 <_strtod_l+0x95c>
 80191e4:	eeb0 ab48 	vmov.f64	d10, d8
 80191e8:	e7ae      	b.n	8019148 <_strtod_l+0x960>
 80191ea:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80191ee:	eeb0 8b4a 	vmov.f64	d8, d10
 80191f2:	e7a9      	b.n	8019148 <_strtod_l+0x960>
 80191f4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80191f8:	e7a6      	b.n	8019148 <_strtod_l+0x960>
 80191fa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80191fe:	9b06      	ldr	r3, [sp, #24]
 8019200:	46d9      	mov	r9, fp
 8019202:	2b00      	cmp	r3, #0
 8019204:	d1ca      	bne.n	801919c <_strtod_l+0x9b4>
 8019206:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801920a:	0d1b      	lsrs	r3, r3, #20
 801920c:	051b      	lsls	r3, r3, #20
 801920e:	429f      	cmp	r7, r3
 8019210:	d1c4      	bne.n	801919c <_strtod_l+0x9b4>
 8019212:	ec51 0b18 	vmov	r0, r1, d8
 8019216:	f7e7 fab7 	bl	8000788 <__aeabi_d2lz>
 801921a:	f7e7 fa6f 	bl	80006fc <__aeabi_l2d>
 801921e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8019222:	ec41 0b17 	vmov	d7, r0, r1
 8019226:	ea49 090a 	orr.w	r9, r9, sl
 801922a:	ea59 0908 	orrs.w	r9, r9, r8
 801922e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8019232:	d03c      	beq.n	80192ae <_strtod_l+0xac6>
 8019234:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80192e8 <_strtod_l+0xb00>
 8019238:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801923c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019240:	f53f aced 	bmi.w	8018c1e <_strtod_l+0x436>
 8019244:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80192f0 <_strtod_l+0xb08>
 8019248:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801924c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019250:	dda4      	ble.n	801919c <_strtod_l+0x9b4>
 8019252:	e4e4      	b.n	8018c1e <_strtod_l+0x436>
 8019254:	9906      	ldr	r1, [sp, #24]
 8019256:	b1e1      	cbz	r1, 8019292 <_strtod_l+0xaaa>
 8019258:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801925c:	d819      	bhi.n	8019292 <_strtod_l+0xaaa>
 801925e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8019262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019266:	d811      	bhi.n	801928c <_strtod_l+0xaa4>
 8019268:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801926c:	ee18 3a10 	vmov	r3, s16
 8019270:	2b01      	cmp	r3, #1
 8019272:	bf38      	it	cc
 8019274:	2301      	movcc	r3, #1
 8019276:	ee08 3a10 	vmov	s16, r3
 801927a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801927e:	f1b8 0f00 	cmp.w	r8, #0
 8019282:	d111      	bne.n	80192a8 <_strtod_l+0xac0>
 8019284:	eeb1 7b48 	vneg.f64	d7, d8
 8019288:	ec53 2b17 	vmov	r2, r3, d7
 801928c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8019290:	1bcb      	subs	r3, r1, r7
 8019292:	eeb0 0b49 	vmov.f64	d0, d9
 8019296:	ec43 2b1a 	vmov	d10, r2, r3
 801929a:	f002 fc7b 	bl	801bb94 <__ulp>
 801929e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80192a2:	ec5b ab19 	vmov	sl, fp, d9
 80192a6:	e7aa      	b.n	80191fe <_strtod_l+0xa16>
 80192a8:	eeb0 7b48 	vmov.f64	d7, d8
 80192ac:	e7ec      	b.n	8019288 <_strtod_l+0xaa0>
 80192ae:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80192f8 <_strtod_l+0xb10>
 80192b2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80192b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192ba:	f57f af6f 	bpl.w	801919c <_strtod_l+0x9b4>
 80192be:	e4ae      	b.n	8018c1e <_strtod_l+0x436>
 80192c0:	2300      	movs	r3, #0
 80192c2:	9308      	str	r3, [sp, #32]
 80192c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80192c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80192c8:	6013      	str	r3, [r2, #0]
 80192ca:	f7ff bacc 	b.w	8018866 <_strtod_l+0x7e>
 80192ce:	2a65      	cmp	r2, #101	@ 0x65
 80192d0:	f43f abbc 	beq.w	8018a4c <_strtod_l+0x264>
 80192d4:	2a45      	cmp	r2, #69	@ 0x45
 80192d6:	f43f abb9 	beq.w	8018a4c <_strtod_l+0x264>
 80192da:	2301      	movs	r3, #1
 80192dc:	9306      	str	r3, [sp, #24]
 80192de:	f7ff bbf0 	b.w	8018ac2 <_strtod_l+0x2da>
 80192e2:	bf00      	nop
 80192e4:	f3af 8000 	nop.w
 80192e8:	94a03595 	.word	0x94a03595
 80192ec:	3fdfffff 	.word	0x3fdfffff
 80192f0:	35afe535 	.word	0x35afe535
 80192f4:	3fe00000 	.word	0x3fe00000
 80192f8:	94a03595 	.word	0x94a03595
 80192fc:	3fcfffff 	.word	0x3fcfffff
 8019300:	000fffff 	.word	0x000fffff
 8019304:	7ff00000 	.word	0x7ff00000
 8019308:	7fefffff 	.word	0x7fefffff
 801930c:	7fe00000 	.word	0x7fe00000
 8019310:	7c9fffff 	.word	0x7c9fffff

08019314 <strtod>:
 8019314:	460a      	mov	r2, r1
 8019316:	4601      	mov	r1, r0
 8019318:	4802      	ldr	r0, [pc, #8]	@ (8019324 <strtod+0x10>)
 801931a:	4b03      	ldr	r3, [pc, #12]	@ (8019328 <strtod+0x14>)
 801931c:	6800      	ldr	r0, [r0, #0]
 801931e:	f7ff ba63 	b.w	80187e8 <_strtod_l>
 8019322:	bf00      	nop
 8019324:	2400027c 	.word	0x2400027c
 8019328:	24000110 	.word	0x24000110

0801932c <_strtol_l.constprop.0>:
 801932c:	2b24      	cmp	r3, #36	@ 0x24
 801932e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019332:	4686      	mov	lr, r0
 8019334:	4690      	mov	r8, r2
 8019336:	d801      	bhi.n	801933c <_strtol_l.constprop.0+0x10>
 8019338:	2b01      	cmp	r3, #1
 801933a:	d106      	bne.n	801934a <_strtol_l.constprop.0+0x1e>
 801933c:	f000 fe46 	bl	8019fcc <__errno>
 8019340:	2316      	movs	r3, #22
 8019342:	6003      	str	r3, [r0, #0]
 8019344:	2000      	movs	r0, #0
 8019346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801934a:	4834      	ldr	r0, [pc, #208]	@ (801941c <_strtol_l.constprop.0+0xf0>)
 801934c:	460d      	mov	r5, r1
 801934e:	462a      	mov	r2, r5
 8019350:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019354:	5d06      	ldrb	r6, [r0, r4]
 8019356:	f016 0608 	ands.w	r6, r6, #8
 801935a:	d1f8      	bne.n	801934e <_strtol_l.constprop.0+0x22>
 801935c:	2c2d      	cmp	r4, #45	@ 0x2d
 801935e:	d12d      	bne.n	80193bc <_strtol_l.constprop.0+0x90>
 8019360:	782c      	ldrb	r4, [r5, #0]
 8019362:	2601      	movs	r6, #1
 8019364:	1c95      	adds	r5, r2, #2
 8019366:	f033 0210 	bics.w	r2, r3, #16
 801936a:	d109      	bne.n	8019380 <_strtol_l.constprop.0+0x54>
 801936c:	2c30      	cmp	r4, #48	@ 0x30
 801936e:	d12a      	bne.n	80193c6 <_strtol_l.constprop.0+0x9a>
 8019370:	782a      	ldrb	r2, [r5, #0]
 8019372:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019376:	2a58      	cmp	r2, #88	@ 0x58
 8019378:	d125      	bne.n	80193c6 <_strtol_l.constprop.0+0x9a>
 801937a:	786c      	ldrb	r4, [r5, #1]
 801937c:	2310      	movs	r3, #16
 801937e:	3502      	adds	r5, #2
 8019380:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8019384:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019388:	2200      	movs	r2, #0
 801938a:	fbbc f9f3 	udiv	r9, ip, r3
 801938e:	4610      	mov	r0, r2
 8019390:	fb03 ca19 	mls	sl, r3, r9, ip
 8019394:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8019398:	2f09      	cmp	r7, #9
 801939a:	d81b      	bhi.n	80193d4 <_strtol_l.constprop.0+0xa8>
 801939c:	463c      	mov	r4, r7
 801939e:	42a3      	cmp	r3, r4
 80193a0:	dd27      	ble.n	80193f2 <_strtol_l.constprop.0+0xc6>
 80193a2:	1c57      	adds	r7, r2, #1
 80193a4:	d007      	beq.n	80193b6 <_strtol_l.constprop.0+0x8a>
 80193a6:	4581      	cmp	r9, r0
 80193a8:	d320      	bcc.n	80193ec <_strtol_l.constprop.0+0xc0>
 80193aa:	d101      	bne.n	80193b0 <_strtol_l.constprop.0+0x84>
 80193ac:	45a2      	cmp	sl, r4
 80193ae:	db1d      	blt.n	80193ec <_strtol_l.constprop.0+0xc0>
 80193b0:	fb00 4003 	mla	r0, r0, r3, r4
 80193b4:	2201      	movs	r2, #1
 80193b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80193ba:	e7eb      	b.n	8019394 <_strtol_l.constprop.0+0x68>
 80193bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80193be:	bf04      	itt	eq
 80193c0:	782c      	ldrbeq	r4, [r5, #0]
 80193c2:	1c95      	addeq	r5, r2, #2
 80193c4:	e7cf      	b.n	8019366 <_strtol_l.constprop.0+0x3a>
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d1da      	bne.n	8019380 <_strtol_l.constprop.0+0x54>
 80193ca:	2c30      	cmp	r4, #48	@ 0x30
 80193cc:	bf0c      	ite	eq
 80193ce:	2308      	moveq	r3, #8
 80193d0:	230a      	movne	r3, #10
 80193d2:	e7d5      	b.n	8019380 <_strtol_l.constprop.0+0x54>
 80193d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80193d8:	2f19      	cmp	r7, #25
 80193da:	d801      	bhi.n	80193e0 <_strtol_l.constprop.0+0xb4>
 80193dc:	3c37      	subs	r4, #55	@ 0x37
 80193de:	e7de      	b.n	801939e <_strtol_l.constprop.0+0x72>
 80193e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80193e4:	2f19      	cmp	r7, #25
 80193e6:	d804      	bhi.n	80193f2 <_strtol_l.constprop.0+0xc6>
 80193e8:	3c57      	subs	r4, #87	@ 0x57
 80193ea:	e7d8      	b.n	801939e <_strtol_l.constprop.0+0x72>
 80193ec:	f04f 32ff 	mov.w	r2, #4294967295
 80193f0:	e7e1      	b.n	80193b6 <_strtol_l.constprop.0+0x8a>
 80193f2:	1c53      	adds	r3, r2, #1
 80193f4:	d108      	bne.n	8019408 <_strtol_l.constprop.0+0xdc>
 80193f6:	2322      	movs	r3, #34	@ 0x22
 80193f8:	f8ce 3000 	str.w	r3, [lr]
 80193fc:	4660      	mov	r0, ip
 80193fe:	f1b8 0f00 	cmp.w	r8, #0
 8019402:	d0a0      	beq.n	8019346 <_strtol_l.constprop.0+0x1a>
 8019404:	1e69      	subs	r1, r5, #1
 8019406:	e006      	b.n	8019416 <_strtol_l.constprop.0+0xea>
 8019408:	b106      	cbz	r6, 801940c <_strtol_l.constprop.0+0xe0>
 801940a:	4240      	negs	r0, r0
 801940c:	f1b8 0f00 	cmp.w	r8, #0
 8019410:	d099      	beq.n	8019346 <_strtol_l.constprop.0+0x1a>
 8019412:	2a00      	cmp	r2, #0
 8019414:	d1f6      	bne.n	8019404 <_strtol_l.constprop.0+0xd8>
 8019416:	f8c8 1000 	str.w	r1, [r8]
 801941a:	e794      	b.n	8019346 <_strtol_l.constprop.0+0x1a>
 801941c:	0801dee1 	.word	0x0801dee1

08019420 <strtol>:
 8019420:	4613      	mov	r3, r2
 8019422:	460a      	mov	r2, r1
 8019424:	4601      	mov	r1, r0
 8019426:	4802      	ldr	r0, [pc, #8]	@ (8019430 <strtol+0x10>)
 8019428:	6800      	ldr	r0, [r0, #0]
 801942a:	f7ff bf7f 	b.w	801932c <_strtol_l.constprop.0>
 801942e:	bf00      	nop
 8019430:	2400027c 	.word	0x2400027c

08019434 <__cvt>:
 8019434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019436:	ed2d 8b02 	vpush	{d8}
 801943a:	eeb0 8b40 	vmov.f64	d8, d0
 801943e:	b085      	sub	sp, #20
 8019440:	4617      	mov	r7, r2
 8019442:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019444:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019446:	ee18 2a90 	vmov	r2, s17
 801944a:	f025 0520 	bic.w	r5, r5, #32
 801944e:	2a00      	cmp	r2, #0
 8019450:	bfb6      	itet	lt
 8019452:	222d      	movlt	r2, #45	@ 0x2d
 8019454:	2200      	movge	r2, #0
 8019456:	eeb1 8b40 	vneglt.f64	d8, d0
 801945a:	2d46      	cmp	r5, #70	@ 0x46
 801945c:	460c      	mov	r4, r1
 801945e:	701a      	strb	r2, [r3, #0]
 8019460:	d004      	beq.n	801946c <__cvt+0x38>
 8019462:	2d45      	cmp	r5, #69	@ 0x45
 8019464:	d100      	bne.n	8019468 <__cvt+0x34>
 8019466:	3401      	adds	r4, #1
 8019468:	2102      	movs	r1, #2
 801946a:	e000      	b.n	801946e <__cvt+0x3a>
 801946c:	2103      	movs	r1, #3
 801946e:	ab03      	add	r3, sp, #12
 8019470:	9301      	str	r3, [sp, #4]
 8019472:	ab02      	add	r3, sp, #8
 8019474:	9300      	str	r3, [sp, #0]
 8019476:	4622      	mov	r2, r4
 8019478:	4633      	mov	r3, r6
 801947a:	eeb0 0b48 	vmov.f64	d0, d8
 801947e:	f000 fe73 	bl	801a168 <_dtoa_r>
 8019482:	2d47      	cmp	r5, #71	@ 0x47
 8019484:	d114      	bne.n	80194b0 <__cvt+0x7c>
 8019486:	07fb      	lsls	r3, r7, #31
 8019488:	d50a      	bpl.n	80194a0 <__cvt+0x6c>
 801948a:	1902      	adds	r2, r0, r4
 801948c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019494:	bf08      	it	eq
 8019496:	9203      	streq	r2, [sp, #12]
 8019498:	2130      	movs	r1, #48	@ 0x30
 801949a:	9b03      	ldr	r3, [sp, #12]
 801949c:	4293      	cmp	r3, r2
 801949e:	d319      	bcc.n	80194d4 <__cvt+0xa0>
 80194a0:	9b03      	ldr	r3, [sp, #12]
 80194a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80194a4:	1a1b      	subs	r3, r3, r0
 80194a6:	6013      	str	r3, [r2, #0]
 80194a8:	b005      	add	sp, #20
 80194aa:	ecbd 8b02 	vpop	{d8}
 80194ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194b0:	2d46      	cmp	r5, #70	@ 0x46
 80194b2:	eb00 0204 	add.w	r2, r0, r4
 80194b6:	d1e9      	bne.n	801948c <__cvt+0x58>
 80194b8:	7803      	ldrb	r3, [r0, #0]
 80194ba:	2b30      	cmp	r3, #48	@ 0x30
 80194bc:	d107      	bne.n	80194ce <__cvt+0x9a>
 80194be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80194c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194c6:	bf1c      	itt	ne
 80194c8:	f1c4 0401 	rsbne	r4, r4, #1
 80194cc:	6034      	strne	r4, [r6, #0]
 80194ce:	6833      	ldr	r3, [r6, #0]
 80194d0:	441a      	add	r2, r3
 80194d2:	e7db      	b.n	801948c <__cvt+0x58>
 80194d4:	1c5c      	adds	r4, r3, #1
 80194d6:	9403      	str	r4, [sp, #12]
 80194d8:	7019      	strb	r1, [r3, #0]
 80194da:	e7de      	b.n	801949a <__cvt+0x66>

080194dc <__exponent>:
 80194dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80194de:	2900      	cmp	r1, #0
 80194e0:	bfba      	itte	lt
 80194e2:	4249      	neglt	r1, r1
 80194e4:	232d      	movlt	r3, #45	@ 0x2d
 80194e6:	232b      	movge	r3, #43	@ 0x2b
 80194e8:	2909      	cmp	r1, #9
 80194ea:	7002      	strb	r2, [r0, #0]
 80194ec:	7043      	strb	r3, [r0, #1]
 80194ee:	dd29      	ble.n	8019544 <__exponent+0x68>
 80194f0:	f10d 0307 	add.w	r3, sp, #7
 80194f4:	461d      	mov	r5, r3
 80194f6:	270a      	movs	r7, #10
 80194f8:	461a      	mov	r2, r3
 80194fa:	fbb1 f6f7 	udiv	r6, r1, r7
 80194fe:	fb07 1416 	mls	r4, r7, r6, r1
 8019502:	3430      	adds	r4, #48	@ 0x30
 8019504:	f802 4c01 	strb.w	r4, [r2, #-1]
 8019508:	460c      	mov	r4, r1
 801950a:	2c63      	cmp	r4, #99	@ 0x63
 801950c:	f103 33ff 	add.w	r3, r3, #4294967295
 8019510:	4631      	mov	r1, r6
 8019512:	dcf1      	bgt.n	80194f8 <__exponent+0x1c>
 8019514:	3130      	adds	r1, #48	@ 0x30
 8019516:	1e94      	subs	r4, r2, #2
 8019518:	f803 1c01 	strb.w	r1, [r3, #-1]
 801951c:	1c41      	adds	r1, r0, #1
 801951e:	4623      	mov	r3, r4
 8019520:	42ab      	cmp	r3, r5
 8019522:	d30a      	bcc.n	801953a <__exponent+0x5e>
 8019524:	f10d 0309 	add.w	r3, sp, #9
 8019528:	1a9b      	subs	r3, r3, r2
 801952a:	42ac      	cmp	r4, r5
 801952c:	bf88      	it	hi
 801952e:	2300      	movhi	r3, #0
 8019530:	3302      	adds	r3, #2
 8019532:	4403      	add	r3, r0
 8019534:	1a18      	subs	r0, r3, r0
 8019536:	b003      	add	sp, #12
 8019538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801953a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801953e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8019542:	e7ed      	b.n	8019520 <__exponent+0x44>
 8019544:	2330      	movs	r3, #48	@ 0x30
 8019546:	3130      	adds	r1, #48	@ 0x30
 8019548:	7083      	strb	r3, [r0, #2]
 801954a:	70c1      	strb	r1, [r0, #3]
 801954c:	1d03      	adds	r3, r0, #4
 801954e:	e7f1      	b.n	8019534 <__exponent+0x58>

08019550 <_printf_float>:
 8019550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019554:	b08d      	sub	sp, #52	@ 0x34
 8019556:	460c      	mov	r4, r1
 8019558:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801955c:	4616      	mov	r6, r2
 801955e:	461f      	mov	r7, r3
 8019560:	4605      	mov	r5, r0
 8019562:	f000 fce9 	bl	8019f38 <_localeconv_r>
 8019566:	f8d0 b000 	ldr.w	fp, [r0]
 801956a:	4658      	mov	r0, fp
 801956c:	f7e6 ff30 	bl	80003d0 <strlen>
 8019570:	2300      	movs	r3, #0
 8019572:	930a      	str	r3, [sp, #40]	@ 0x28
 8019574:	f8d8 3000 	ldr.w	r3, [r8]
 8019578:	f894 9018 	ldrb.w	r9, [r4, #24]
 801957c:	6822      	ldr	r2, [r4, #0]
 801957e:	9005      	str	r0, [sp, #20]
 8019580:	3307      	adds	r3, #7
 8019582:	f023 0307 	bic.w	r3, r3, #7
 8019586:	f103 0108 	add.w	r1, r3, #8
 801958a:	f8c8 1000 	str.w	r1, [r8]
 801958e:	ed93 0b00 	vldr	d0, [r3]
 8019592:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80197f0 <_printf_float+0x2a0>
 8019596:	eeb0 7bc0 	vabs.f64	d7, d0
 801959a:	eeb4 7b46 	vcmp.f64	d7, d6
 801959e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195a2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80195a6:	dd24      	ble.n	80195f2 <_printf_float+0xa2>
 80195a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80195ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195b0:	d502      	bpl.n	80195b8 <_printf_float+0x68>
 80195b2:	232d      	movs	r3, #45	@ 0x2d
 80195b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80195b8:	498f      	ldr	r1, [pc, #572]	@ (80197f8 <_printf_float+0x2a8>)
 80195ba:	4b90      	ldr	r3, [pc, #576]	@ (80197fc <_printf_float+0x2ac>)
 80195bc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80195c0:	bf94      	ite	ls
 80195c2:	4688      	movls	r8, r1
 80195c4:	4698      	movhi	r8, r3
 80195c6:	f022 0204 	bic.w	r2, r2, #4
 80195ca:	2303      	movs	r3, #3
 80195cc:	6123      	str	r3, [r4, #16]
 80195ce:	6022      	str	r2, [r4, #0]
 80195d0:	f04f 0a00 	mov.w	sl, #0
 80195d4:	9700      	str	r7, [sp, #0]
 80195d6:	4633      	mov	r3, r6
 80195d8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80195da:	4621      	mov	r1, r4
 80195dc:	4628      	mov	r0, r5
 80195de:	f000 f9d1 	bl	8019984 <_printf_common>
 80195e2:	3001      	adds	r0, #1
 80195e4:	f040 8089 	bne.w	80196fa <_printf_float+0x1aa>
 80195e8:	f04f 30ff 	mov.w	r0, #4294967295
 80195ec:	b00d      	add	sp, #52	@ 0x34
 80195ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195f2:	eeb4 0b40 	vcmp.f64	d0, d0
 80195f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195fa:	d709      	bvc.n	8019610 <_printf_float+0xc0>
 80195fc:	ee10 3a90 	vmov	r3, s1
 8019600:	2b00      	cmp	r3, #0
 8019602:	bfbc      	itt	lt
 8019604:	232d      	movlt	r3, #45	@ 0x2d
 8019606:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801960a:	497d      	ldr	r1, [pc, #500]	@ (8019800 <_printf_float+0x2b0>)
 801960c:	4b7d      	ldr	r3, [pc, #500]	@ (8019804 <_printf_float+0x2b4>)
 801960e:	e7d5      	b.n	80195bc <_printf_float+0x6c>
 8019610:	6863      	ldr	r3, [r4, #4]
 8019612:	1c59      	adds	r1, r3, #1
 8019614:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8019618:	d139      	bne.n	801968e <_printf_float+0x13e>
 801961a:	2306      	movs	r3, #6
 801961c:	6063      	str	r3, [r4, #4]
 801961e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8019622:	2300      	movs	r3, #0
 8019624:	6022      	str	r2, [r4, #0]
 8019626:	9303      	str	r3, [sp, #12]
 8019628:	ab0a      	add	r3, sp, #40	@ 0x28
 801962a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801962e:	ab09      	add	r3, sp, #36	@ 0x24
 8019630:	9300      	str	r3, [sp, #0]
 8019632:	6861      	ldr	r1, [r4, #4]
 8019634:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8019638:	4628      	mov	r0, r5
 801963a:	f7ff fefb 	bl	8019434 <__cvt>
 801963e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019642:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019644:	4680      	mov	r8, r0
 8019646:	d129      	bne.n	801969c <_printf_float+0x14c>
 8019648:	1cc8      	adds	r0, r1, #3
 801964a:	db02      	blt.n	8019652 <_printf_float+0x102>
 801964c:	6863      	ldr	r3, [r4, #4]
 801964e:	4299      	cmp	r1, r3
 8019650:	dd41      	ble.n	80196d6 <_printf_float+0x186>
 8019652:	f1a9 0902 	sub.w	r9, r9, #2
 8019656:	fa5f f989 	uxtb.w	r9, r9
 801965a:	3901      	subs	r1, #1
 801965c:	464a      	mov	r2, r9
 801965e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019662:	9109      	str	r1, [sp, #36]	@ 0x24
 8019664:	f7ff ff3a 	bl	80194dc <__exponent>
 8019668:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801966a:	1813      	adds	r3, r2, r0
 801966c:	2a01      	cmp	r2, #1
 801966e:	4682      	mov	sl, r0
 8019670:	6123      	str	r3, [r4, #16]
 8019672:	dc02      	bgt.n	801967a <_printf_float+0x12a>
 8019674:	6822      	ldr	r2, [r4, #0]
 8019676:	07d2      	lsls	r2, r2, #31
 8019678:	d501      	bpl.n	801967e <_printf_float+0x12e>
 801967a:	3301      	adds	r3, #1
 801967c:	6123      	str	r3, [r4, #16]
 801967e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019682:	2b00      	cmp	r3, #0
 8019684:	d0a6      	beq.n	80195d4 <_printf_float+0x84>
 8019686:	232d      	movs	r3, #45	@ 0x2d
 8019688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801968c:	e7a2      	b.n	80195d4 <_printf_float+0x84>
 801968e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019692:	d1c4      	bne.n	801961e <_printf_float+0xce>
 8019694:	2b00      	cmp	r3, #0
 8019696:	d1c2      	bne.n	801961e <_printf_float+0xce>
 8019698:	2301      	movs	r3, #1
 801969a:	e7bf      	b.n	801961c <_printf_float+0xcc>
 801969c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80196a0:	d9db      	bls.n	801965a <_printf_float+0x10a>
 80196a2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80196a6:	d118      	bne.n	80196da <_printf_float+0x18a>
 80196a8:	2900      	cmp	r1, #0
 80196aa:	6863      	ldr	r3, [r4, #4]
 80196ac:	dd0b      	ble.n	80196c6 <_printf_float+0x176>
 80196ae:	6121      	str	r1, [r4, #16]
 80196b0:	b913      	cbnz	r3, 80196b8 <_printf_float+0x168>
 80196b2:	6822      	ldr	r2, [r4, #0]
 80196b4:	07d0      	lsls	r0, r2, #31
 80196b6:	d502      	bpl.n	80196be <_printf_float+0x16e>
 80196b8:	3301      	adds	r3, #1
 80196ba:	440b      	add	r3, r1
 80196bc:	6123      	str	r3, [r4, #16]
 80196be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80196c0:	f04f 0a00 	mov.w	sl, #0
 80196c4:	e7db      	b.n	801967e <_printf_float+0x12e>
 80196c6:	b913      	cbnz	r3, 80196ce <_printf_float+0x17e>
 80196c8:	6822      	ldr	r2, [r4, #0]
 80196ca:	07d2      	lsls	r2, r2, #31
 80196cc:	d501      	bpl.n	80196d2 <_printf_float+0x182>
 80196ce:	3302      	adds	r3, #2
 80196d0:	e7f4      	b.n	80196bc <_printf_float+0x16c>
 80196d2:	2301      	movs	r3, #1
 80196d4:	e7f2      	b.n	80196bc <_printf_float+0x16c>
 80196d6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80196da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80196dc:	4299      	cmp	r1, r3
 80196de:	db05      	blt.n	80196ec <_printf_float+0x19c>
 80196e0:	6823      	ldr	r3, [r4, #0]
 80196e2:	6121      	str	r1, [r4, #16]
 80196e4:	07d8      	lsls	r0, r3, #31
 80196e6:	d5ea      	bpl.n	80196be <_printf_float+0x16e>
 80196e8:	1c4b      	adds	r3, r1, #1
 80196ea:	e7e7      	b.n	80196bc <_printf_float+0x16c>
 80196ec:	2900      	cmp	r1, #0
 80196ee:	bfd4      	ite	le
 80196f0:	f1c1 0202 	rsble	r2, r1, #2
 80196f4:	2201      	movgt	r2, #1
 80196f6:	4413      	add	r3, r2
 80196f8:	e7e0      	b.n	80196bc <_printf_float+0x16c>
 80196fa:	6823      	ldr	r3, [r4, #0]
 80196fc:	055a      	lsls	r2, r3, #21
 80196fe:	d407      	bmi.n	8019710 <_printf_float+0x1c0>
 8019700:	6923      	ldr	r3, [r4, #16]
 8019702:	4642      	mov	r2, r8
 8019704:	4631      	mov	r1, r6
 8019706:	4628      	mov	r0, r5
 8019708:	47b8      	blx	r7
 801970a:	3001      	adds	r0, #1
 801970c:	d12a      	bne.n	8019764 <_printf_float+0x214>
 801970e:	e76b      	b.n	80195e8 <_printf_float+0x98>
 8019710:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019714:	f240 80e0 	bls.w	80198d8 <_printf_float+0x388>
 8019718:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801971c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019724:	d133      	bne.n	801978e <_printf_float+0x23e>
 8019726:	4a38      	ldr	r2, [pc, #224]	@ (8019808 <_printf_float+0x2b8>)
 8019728:	2301      	movs	r3, #1
 801972a:	4631      	mov	r1, r6
 801972c:	4628      	mov	r0, r5
 801972e:	47b8      	blx	r7
 8019730:	3001      	adds	r0, #1
 8019732:	f43f af59 	beq.w	80195e8 <_printf_float+0x98>
 8019736:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801973a:	4543      	cmp	r3, r8
 801973c:	db02      	blt.n	8019744 <_printf_float+0x1f4>
 801973e:	6823      	ldr	r3, [r4, #0]
 8019740:	07d8      	lsls	r0, r3, #31
 8019742:	d50f      	bpl.n	8019764 <_printf_float+0x214>
 8019744:	9b05      	ldr	r3, [sp, #20]
 8019746:	465a      	mov	r2, fp
 8019748:	4631      	mov	r1, r6
 801974a:	4628      	mov	r0, r5
 801974c:	47b8      	blx	r7
 801974e:	3001      	adds	r0, #1
 8019750:	f43f af4a 	beq.w	80195e8 <_printf_float+0x98>
 8019754:	f04f 0900 	mov.w	r9, #0
 8019758:	f108 38ff 	add.w	r8, r8, #4294967295
 801975c:	f104 0a1a 	add.w	sl, r4, #26
 8019760:	45c8      	cmp	r8, r9
 8019762:	dc09      	bgt.n	8019778 <_printf_float+0x228>
 8019764:	6823      	ldr	r3, [r4, #0]
 8019766:	079b      	lsls	r3, r3, #30
 8019768:	f100 8107 	bmi.w	801997a <_printf_float+0x42a>
 801976c:	68e0      	ldr	r0, [r4, #12]
 801976e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019770:	4298      	cmp	r0, r3
 8019772:	bfb8      	it	lt
 8019774:	4618      	movlt	r0, r3
 8019776:	e739      	b.n	80195ec <_printf_float+0x9c>
 8019778:	2301      	movs	r3, #1
 801977a:	4652      	mov	r2, sl
 801977c:	4631      	mov	r1, r6
 801977e:	4628      	mov	r0, r5
 8019780:	47b8      	blx	r7
 8019782:	3001      	adds	r0, #1
 8019784:	f43f af30 	beq.w	80195e8 <_printf_float+0x98>
 8019788:	f109 0901 	add.w	r9, r9, #1
 801978c:	e7e8      	b.n	8019760 <_printf_float+0x210>
 801978e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019790:	2b00      	cmp	r3, #0
 8019792:	dc3b      	bgt.n	801980c <_printf_float+0x2bc>
 8019794:	4a1c      	ldr	r2, [pc, #112]	@ (8019808 <_printf_float+0x2b8>)
 8019796:	2301      	movs	r3, #1
 8019798:	4631      	mov	r1, r6
 801979a:	4628      	mov	r0, r5
 801979c:	47b8      	blx	r7
 801979e:	3001      	adds	r0, #1
 80197a0:	f43f af22 	beq.w	80195e8 <_printf_float+0x98>
 80197a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80197a8:	ea59 0303 	orrs.w	r3, r9, r3
 80197ac:	d102      	bne.n	80197b4 <_printf_float+0x264>
 80197ae:	6823      	ldr	r3, [r4, #0]
 80197b0:	07d9      	lsls	r1, r3, #31
 80197b2:	d5d7      	bpl.n	8019764 <_printf_float+0x214>
 80197b4:	9b05      	ldr	r3, [sp, #20]
 80197b6:	465a      	mov	r2, fp
 80197b8:	4631      	mov	r1, r6
 80197ba:	4628      	mov	r0, r5
 80197bc:	47b8      	blx	r7
 80197be:	3001      	adds	r0, #1
 80197c0:	f43f af12 	beq.w	80195e8 <_printf_float+0x98>
 80197c4:	f04f 0a00 	mov.w	sl, #0
 80197c8:	f104 0b1a 	add.w	fp, r4, #26
 80197cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80197ce:	425b      	negs	r3, r3
 80197d0:	4553      	cmp	r3, sl
 80197d2:	dc01      	bgt.n	80197d8 <_printf_float+0x288>
 80197d4:	464b      	mov	r3, r9
 80197d6:	e794      	b.n	8019702 <_printf_float+0x1b2>
 80197d8:	2301      	movs	r3, #1
 80197da:	465a      	mov	r2, fp
 80197dc:	4631      	mov	r1, r6
 80197de:	4628      	mov	r0, r5
 80197e0:	47b8      	blx	r7
 80197e2:	3001      	adds	r0, #1
 80197e4:	f43f af00 	beq.w	80195e8 <_printf_float+0x98>
 80197e8:	f10a 0a01 	add.w	sl, sl, #1
 80197ec:	e7ee      	b.n	80197cc <_printf_float+0x27c>
 80197ee:	bf00      	nop
 80197f0:	ffffffff 	.word	0xffffffff
 80197f4:	7fefffff 	.word	0x7fefffff
 80197f8:	0801dfe1 	.word	0x0801dfe1
 80197fc:	0801dfe5 	.word	0x0801dfe5
 8019800:	0801dfe9 	.word	0x0801dfe9
 8019804:	0801dfed 	.word	0x0801dfed
 8019808:	0801dff1 	.word	0x0801dff1
 801980c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801980e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019812:	4553      	cmp	r3, sl
 8019814:	bfa8      	it	ge
 8019816:	4653      	movge	r3, sl
 8019818:	2b00      	cmp	r3, #0
 801981a:	4699      	mov	r9, r3
 801981c:	dc37      	bgt.n	801988e <_printf_float+0x33e>
 801981e:	2300      	movs	r3, #0
 8019820:	9307      	str	r3, [sp, #28]
 8019822:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019826:	f104 021a 	add.w	r2, r4, #26
 801982a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801982c:	9907      	ldr	r1, [sp, #28]
 801982e:	9306      	str	r3, [sp, #24]
 8019830:	eba3 0309 	sub.w	r3, r3, r9
 8019834:	428b      	cmp	r3, r1
 8019836:	dc31      	bgt.n	801989c <_printf_float+0x34c>
 8019838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801983a:	459a      	cmp	sl, r3
 801983c:	dc3b      	bgt.n	80198b6 <_printf_float+0x366>
 801983e:	6823      	ldr	r3, [r4, #0]
 8019840:	07da      	lsls	r2, r3, #31
 8019842:	d438      	bmi.n	80198b6 <_printf_float+0x366>
 8019844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019846:	ebaa 0903 	sub.w	r9, sl, r3
 801984a:	9b06      	ldr	r3, [sp, #24]
 801984c:	ebaa 0303 	sub.w	r3, sl, r3
 8019850:	4599      	cmp	r9, r3
 8019852:	bfa8      	it	ge
 8019854:	4699      	movge	r9, r3
 8019856:	f1b9 0f00 	cmp.w	r9, #0
 801985a:	dc34      	bgt.n	80198c6 <_printf_float+0x376>
 801985c:	f04f 0800 	mov.w	r8, #0
 8019860:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019864:	f104 0b1a 	add.w	fp, r4, #26
 8019868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801986a:	ebaa 0303 	sub.w	r3, sl, r3
 801986e:	eba3 0309 	sub.w	r3, r3, r9
 8019872:	4543      	cmp	r3, r8
 8019874:	f77f af76 	ble.w	8019764 <_printf_float+0x214>
 8019878:	2301      	movs	r3, #1
 801987a:	465a      	mov	r2, fp
 801987c:	4631      	mov	r1, r6
 801987e:	4628      	mov	r0, r5
 8019880:	47b8      	blx	r7
 8019882:	3001      	adds	r0, #1
 8019884:	f43f aeb0 	beq.w	80195e8 <_printf_float+0x98>
 8019888:	f108 0801 	add.w	r8, r8, #1
 801988c:	e7ec      	b.n	8019868 <_printf_float+0x318>
 801988e:	4642      	mov	r2, r8
 8019890:	4631      	mov	r1, r6
 8019892:	4628      	mov	r0, r5
 8019894:	47b8      	blx	r7
 8019896:	3001      	adds	r0, #1
 8019898:	d1c1      	bne.n	801981e <_printf_float+0x2ce>
 801989a:	e6a5      	b.n	80195e8 <_printf_float+0x98>
 801989c:	2301      	movs	r3, #1
 801989e:	4631      	mov	r1, r6
 80198a0:	4628      	mov	r0, r5
 80198a2:	9206      	str	r2, [sp, #24]
 80198a4:	47b8      	blx	r7
 80198a6:	3001      	adds	r0, #1
 80198a8:	f43f ae9e 	beq.w	80195e8 <_printf_float+0x98>
 80198ac:	9b07      	ldr	r3, [sp, #28]
 80198ae:	9a06      	ldr	r2, [sp, #24]
 80198b0:	3301      	adds	r3, #1
 80198b2:	9307      	str	r3, [sp, #28]
 80198b4:	e7b9      	b.n	801982a <_printf_float+0x2da>
 80198b6:	9b05      	ldr	r3, [sp, #20]
 80198b8:	465a      	mov	r2, fp
 80198ba:	4631      	mov	r1, r6
 80198bc:	4628      	mov	r0, r5
 80198be:	47b8      	blx	r7
 80198c0:	3001      	adds	r0, #1
 80198c2:	d1bf      	bne.n	8019844 <_printf_float+0x2f4>
 80198c4:	e690      	b.n	80195e8 <_printf_float+0x98>
 80198c6:	9a06      	ldr	r2, [sp, #24]
 80198c8:	464b      	mov	r3, r9
 80198ca:	4442      	add	r2, r8
 80198cc:	4631      	mov	r1, r6
 80198ce:	4628      	mov	r0, r5
 80198d0:	47b8      	blx	r7
 80198d2:	3001      	adds	r0, #1
 80198d4:	d1c2      	bne.n	801985c <_printf_float+0x30c>
 80198d6:	e687      	b.n	80195e8 <_printf_float+0x98>
 80198d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80198dc:	f1b9 0f01 	cmp.w	r9, #1
 80198e0:	dc01      	bgt.n	80198e6 <_printf_float+0x396>
 80198e2:	07db      	lsls	r3, r3, #31
 80198e4:	d536      	bpl.n	8019954 <_printf_float+0x404>
 80198e6:	2301      	movs	r3, #1
 80198e8:	4642      	mov	r2, r8
 80198ea:	4631      	mov	r1, r6
 80198ec:	4628      	mov	r0, r5
 80198ee:	47b8      	blx	r7
 80198f0:	3001      	adds	r0, #1
 80198f2:	f43f ae79 	beq.w	80195e8 <_printf_float+0x98>
 80198f6:	9b05      	ldr	r3, [sp, #20]
 80198f8:	465a      	mov	r2, fp
 80198fa:	4631      	mov	r1, r6
 80198fc:	4628      	mov	r0, r5
 80198fe:	47b8      	blx	r7
 8019900:	3001      	adds	r0, #1
 8019902:	f43f ae71 	beq.w	80195e8 <_printf_float+0x98>
 8019906:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801990a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801990e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019912:	f109 39ff 	add.w	r9, r9, #4294967295
 8019916:	d018      	beq.n	801994a <_printf_float+0x3fa>
 8019918:	464b      	mov	r3, r9
 801991a:	f108 0201 	add.w	r2, r8, #1
 801991e:	4631      	mov	r1, r6
 8019920:	4628      	mov	r0, r5
 8019922:	47b8      	blx	r7
 8019924:	3001      	adds	r0, #1
 8019926:	d10c      	bne.n	8019942 <_printf_float+0x3f2>
 8019928:	e65e      	b.n	80195e8 <_printf_float+0x98>
 801992a:	2301      	movs	r3, #1
 801992c:	465a      	mov	r2, fp
 801992e:	4631      	mov	r1, r6
 8019930:	4628      	mov	r0, r5
 8019932:	47b8      	blx	r7
 8019934:	3001      	adds	r0, #1
 8019936:	f43f ae57 	beq.w	80195e8 <_printf_float+0x98>
 801993a:	f108 0801 	add.w	r8, r8, #1
 801993e:	45c8      	cmp	r8, r9
 8019940:	dbf3      	blt.n	801992a <_printf_float+0x3da>
 8019942:	4653      	mov	r3, sl
 8019944:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019948:	e6dc      	b.n	8019704 <_printf_float+0x1b4>
 801994a:	f04f 0800 	mov.w	r8, #0
 801994e:	f104 0b1a 	add.w	fp, r4, #26
 8019952:	e7f4      	b.n	801993e <_printf_float+0x3ee>
 8019954:	2301      	movs	r3, #1
 8019956:	4642      	mov	r2, r8
 8019958:	e7e1      	b.n	801991e <_printf_float+0x3ce>
 801995a:	2301      	movs	r3, #1
 801995c:	464a      	mov	r2, r9
 801995e:	4631      	mov	r1, r6
 8019960:	4628      	mov	r0, r5
 8019962:	47b8      	blx	r7
 8019964:	3001      	adds	r0, #1
 8019966:	f43f ae3f 	beq.w	80195e8 <_printf_float+0x98>
 801996a:	f108 0801 	add.w	r8, r8, #1
 801996e:	68e3      	ldr	r3, [r4, #12]
 8019970:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019972:	1a5b      	subs	r3, r3, r1
 8019974:	4543      	cmp	r3, r8
 8019976:	dcf0      	bgt.n	801995a <_printf_float+0x40a>
 8019978:	e6f8      	b.n	801976c <_printf_float+0x21c>
 801997a:	f04f 0800 	mov.w	r8, #0
 801997e:	f104 0919 	add.w	r9, r4, #25
 8019982:	e7f4      	b.n	801996e <_printf_float+0x41e>

08019984 <_printf_common>:
 8019984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019988:	4616      	mov	r6, r2
 801998a:	4698      	mov	r8, r3
 801998c:	688a      	ldr	r2, [r1, #8]
 801998e:	690b      	ldr	r3, [r1, #16]
 8019990:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019994:	4293      	cmp	r3, r2
 8019996:	bfb8      	it	lt
 8019998:	4613      	movlt	r3, r2
 801999a:	6033      	str	r3, [r6, #0]
 801999c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80199a0:	4607      	mov	r7, r0
 80199a2:	460c      	mov	r4, r1
 80199a4:	b10a      	cbz	r2, 80199aa <_printf_common+0x26>
 80199a6:	3301      	adds	r3, #1
 80199a8:	6033      	str	r3, [r6, #0]
 80199aa:	6823      	ldr	r3, [r4, #0]
 80199ac:	0699      	lsls	r1, r3, #26
 80199ae:	bf42      	ittt	mi
 80199b0:	6833      	ldrmi	r3, [r6, #0]
 80199b2:	3302      	addmi	r3, #2
 80199b4:	6033      	strmi	r3, [r6, #0]
 80199b6:	6825      	ldr	r5, [r4, #0]
 80199b8:	f015 0506 	ands.w	r5, r5, #6
 80199bc:	d106      	bne.n	80199cc <_printf_common+0x48>
 80199be:	f104 0a19 	add.w	sl, r4, #25
 80199c2:	68e3      	ldr	r3, [r4, #12]
 80199c4:	6832      	ldr	r2, [r6, #0]
 80199c6:	1a9b      	subs	r3, r3, r2
 80199c8:	42ab      	cmp	r3, r5
 80199ca:	dc26      	bgt.n	8019a1a <_printf_common+0x96>
 80199cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80199d0:	6822      	ldr	r2, [r4, #0]
 80199d2:	3b00      	subs	r3, #0
 80199d4:	bf18      	it	ne
 80199d6:	2301      	movne	r3, #1
 80199d8:	0692      	lsls	r2, r2, #26
 80199da:	d42b      	bmi.n	8019a34 <_printf_common+0xb0>
 80199dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80199e0:	4641      	mov	r1, r8
 80199e2:	4638      	mov	r0, r7
 80199e4:	47c8      	blx	r9
 80199e6:	3001      	adds	r0, #1
 80199e8:	d01e      	beq.n	8019a28 <_printf_common+0xa4>
 80199ea:	6823      	ldr	r3, [r4, #0]
 80199ec:	6922      	ldr	r2, [r4, #16]
 80199ee:	f003 0306 	and.w	r3, r3, #6
 80199f2:	2b04      	cmp	r3, #4
 80199f4:	bf02      	ittt	eq
 80199f6:	68e5      	ldreq	r5, [r4, #12]
 80199f8:	6833      	ldreq	r3, [r6, #0]
 80199fa:	1aed      	subeq	r5, r5, r3
 80199fc:	68a3      	ldr	r3, [r4, #8]
 80199fe:	bf0c      	ite	eq
 8019a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019a04:	2500      	movne	r5, #0
 8019a06:	4293      	cmp	r3, r2
 8019a08:	bfc4      	itt	gt
 8019a0a:	1a9b      	subgt	r3, r3, r2
 8019a0c:	18ed      	addgt	r5, r5, r3
 8019a0e:	2600      	movs	r6, #0
 8019a10:	341a      	adds	r4, #26
 8019a12:	42b5      	cmp	r5, r6
 8019a14:	d11a      	bne.n	8019a4c <_printf_common+0xc8>
 8019a16:	2000      	movs	r0, #0
 8019a18:	e008      	b.n	8019a2c <_printf_common+0xa8>
 8019a1a:	2301      	movs	r3, #1
 8019a1c:	4652      	mov	r2, sl
 8019a1e:	4641      	mov	r1, r8
 8019a20:	4638      	mov	r0, r7
 8019a22:	47c8      	blx	r9
 8019a24:	3001      	adds	r0, #1
 8019a26:	d103      	bne.n	8019a30 <_printf_common+0xac>
 8019a28:	f04f 30ff 	mov.w	r0, #4294967295
 8019a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a30:	3501      	adds	r5, #1
 8019a32:	e7c6      	b.n	80199c2 <_printf_common+0x3e>
 8019a34:	18e1      	adds	r1, r4, r3
 8019a36:	1c5a      	adds	r2, r3, #1
 8019a38:	2030      	movs	r0, #48	@ 0x30
 8019a3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019a3e:	4422      	add	r2, r4
 8019a40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019a44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019a48:	3302      	adds	r3, #2
 8019a4a:	e7c7      	b.n	80199dc <_printf_common+0x58>
 8019a4c:	2301      	movs	r3, #1
 8019a4e:	4622      	mov	r2, r4
 8019a50:	4641      	mov	r1, r8
 8019a52:	4638      	mov	r0, r7
 8019a54:	47c8      	blx	r9
 8019a56:	3001      	adds	r0, #1
 8019a58:	d0e6      	beq.n	8019a28 <_printf_common+0xa4>
 8019a5a:	3601      	adds	r6, #1
 8019a5c:	e7d9      	b.n	8019a12 <_printf_common+0x8e>
	...

08019a60 <_printf_i>:
 8019a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019a64:	7e0f      	ldrb	r7, [r1, #24]
 8019a66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019a68:	2f78      	cmp	r7, #120	@ 0x78
 8019a6a:	4691      	mov	r9, r2
 8019a6c:	4680      	mov	r8, r0
 8019a6e:	460c      	mov	r4, r1
 8019a70:	469a      	mov	sl, r3
 8019a72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019a76:	d807      	bhi.n	8019a88 <_printf_i+0x28>
 8019a78:	2f62      	cmp	r7, #98	@ 0x62
 8019a7a:	d80a      	bhi.n	8019a92 <_printf_i+0x32>
 8019a7c:	2f00      	cmp	r7, #0
 8019a7e:	f000 80d2 	beq.w	8019c26 <_printf_i+0x1c6>
 8019a82:	2f58      	cmp	r7, #88	@ 0x58
 8019a84:	f000 80b9 	beq.w	8019bfa <_printf_i+0x19a>
 8019a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019a8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019a90:	e03a      	b.n	8019b08 <_printf_i+0xa8>
 8019a92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019a96:	2b15      	cmp	r3, #21
 8019a98:	d8f6      	bhi.n	8019a88 <_printf_i+0x28>
 8019a9a:	a101      	add	r1, pc, #4	@ (adr r1, 8019aa0 <_printf_i+0x40>)
 8019a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019aa0:	08019af9 	.word	0x08019af9
 8019aa4:	08019b0d 	.word	0x08019b0d
 8019aa8:	08019a89 	.word	0x08019a89
 8019aac:	08019a89 	.word	0x08019a89
 8019ab0:	08019a89 	.word	0x08019a89
 8019ab4:	08019a89 	.word	0x08019a89
 8019ab8:	08019b0d 	.word	0x08019b0d
 8019abc:	08019a89 	.word	0x08019a89
 8019ac0:	08019a89 	.word	0x08019a89
 8019ac4:	08019a89 	.word	0x08019a89
 8019ac8:	08019a89 	.word	0x08019a89
 8019acc:	08019c0d 	.word	0x08019c0d
 8019ad0:	08019b37 	.word	0x08019b37
 8019ad4:	08019bc7 	.word	0x08019bc7
 8019ad8:	08019a89 	.word	0x08019a89
 8019adc:	08019a89 	.word	0x08019a89
 8019ae0:	08019c2f 	.word	0x08019c2f
 8019ae4:	08019a89 	.word	0x08019a89
 8019ae8:	08019b37 	.word	0x08019b37
 8019aec:	08019a89 	.word	0x08019a89
 8019af0:	08019a89 	.word	0x08019a89
 8019af4:	08019bcf 	.word	0x08019bcf
 8019af8:	6833      	ldr	r3, [r6, #0]
 8019afa:	1d1a      	adds	r2, r3, #4
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	6032      	str	r2, [r6, #0]
 8019b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019b04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019b08:	2301      	movs	r3, #1
 8019b0a:	e09d      	b.n	8019c48 <_printf_i+0x1e8>
 8019b0c:	6833      	ldr	r3, [r6, #0]
 8019b0e:	6820      	ldr	r0, [r4, #0]
 8019b10:	1d19      	adds	r1, r3, #4
 8019b12:	6031      	str	r1, [r6, #0]
 8019b14:	0606      	lsls	r6, r0, #24
 8019b16:	d501      	bpl.n	8019b1c <_printf_i+0xbc>
 8019b18:	681d      	ldr	r5, [r3, #0]
 8019b1a:	e003      	b.n	8019b24 <_printf_i+0xc4>
 8019b1c:	0645      	lsls	r5, r0, #25
 8019b1e:	d5fb      	bpl.n	8019b18 <_printf_i+0xb8>
 8019b20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019b24:	2d00      	cmp	r5, #0
 8019b26:	da03      	bge.n	8019b30 <_printf_i+0xd0>
 8019b28:	232d      	movs	r3, #45	@ 0x2d
 8019b2a:	426d      	negs	r5, r5
 8019b2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019b30:	4859      	ldr	r0, [pc, #356]	@ (8019c98 <_printf_i+0x238>)
 8019b32:	230a      	movs	r3, #10
 8019b34:	e011      	b.n	8019b5a <_printf_i+0xfa>
 8019b36:	6821      	ldr	r1, [r4, #0]
 8019b38:	6833      	ldr	r3, [r6, #0]
 8019b3a:	0608      	lsls	r0, r1, #24
 8019b3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019b40:	d402      	bmi.n	8019b48 <_printf_i+0xe8>
 8019b42:	0649      	lsls	r1, r1, #25
 8019b44:	bf48      	it	mi
 8019b46:	b2ad      	uxthmi	r5, r5
 8019b48:	2f6f      	cmp	r7, #111	@ 0x6f
 8019b4a:	4853      	ldr	r0, [pc, #332]	@ (8019c98 <_printf_i+0x238>)
 8019b4c:	6033      	str	r3, [r6, #0]
 8019b4e:	bf14      	ite	ne
 8019b50:	230a      	movne	r3, #10
 8019b52:	2308      	moveq	r3, #8
 8019b54:	2100      	movs	r1, #0
 8019b56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019b5a:	6866      	ldr	r6, [r4, #4]
 8019b5c:	60a6      	str	r6, [r4, #8]
 8019b5e:	2e00      	cmp	r6, #0
 8019b60:	bfa2      	ittt	ge
 8019b62:	6821      	ldrge	r1, [r4, #0]
 8019b64:	f021 0104 	bicge.w	r1, r1, #4
 8019b68:	6021      	strge	r1, [r4, #0]
 8019b6a:	b90d      	cbnz	r5, 8019b70 <_printf_i+0x110>
 8019b6c:	2e00      	cmp	r6, #0
 8019b6e:	d04b      	beq.n	8019c08 <_printf_i+0x1a8>
 8019b70:	4616      	mov	r6, r2
 8019b72:	fbb5 f1f3 	udiv	r1, r5, r3
 8019b76:	fb03 5711 	mls	r7, r3, r1, r5
 8019b7a:	5dc7      	ldrb	r7, [r0, r7]
 8019b7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019b80:	462f      	mov	r7, r5
 8019b82:	42bb      	cmp	r3, r7
 8019b84:	460d      	mov	r5, r1
 8019b86:	d9f4      	bls.n	8019b72 <_printf_i+0x112>
 8019b88:	2b08      	cmp	r3, #8
 8019b8a:	d10b      	bne.n	8019ba4 <_printf_i+0x144>
 8019b8c:	6823      	ldr	r3, [r4, #0]
 8019b8e:	07df      	lsls	r7, r3, #31
 8019b90:	d508      	bpl.n	8019ba4 <_printf_i+0x144>
 8019b92:	6923      	ldr	r3, [r4, #16]
 8019b94:	6861      	ldr	r1, [r4, #4]
 8019b96:	4299      	cmp	r1, r3
 8019b98:	bfde      	ittt	le
 8019b9a:	2330      	movle	r3, #48	@ 0x30
 8019b9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019ba0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019ba4:	1b92      	subs	r2, r2, r6
 8019ba6:	6122      	str	r2, [r4, #16]
 8019ba8:	f8cd a000 	str.w	sl, [sp]
 8019bac:	464b      	mov	r3, r9
 8019bae:	aa03      	add	r2, sp, #12
 8019bb0:	4621      	mov	r1, r4
 8019bb2:	4640      	mov	r0, r8
 8019bb4:	f7ff fee6 	bl	8019984 <_printf_common>
 8019bb8:	3001      	adds	r0, #1
 8019bba:	d14a      	bne.n	8019c52 <_printf_i+0x1f2>
 8019bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8019bc0:	b004      	add	sp, #16
 8019bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bc6:	6823      	ldr	r3, [r4, #0]
 8019bc8:	f043 0320 	orr.w	r3, r3, #32
 8019bcc:	6023      	str	r3, [r4, #0]
 8019bce:	4833      	ldr	r0, [pc, #204]	@ (8019c9c <_printf_i+0x23c>)
 8019bd0:	2778      	movs	r7, #120	@ 0x78
 8019bd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019bd6:	6823      	ldr	r3, [r4, #0]
 8019bd8:	6831      	ldr	r1, [r6, #0]
 8019bda:	061f      	lsls	r7, r3, #24
 8019bdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8019be0:	d402      	bmi.n	8019be8 <_printf_i+0x188>
 8019be2:	065f      	lsls	r7, r3, #25
 8019be4:	bf48      	it	mi
 8019be6:	b2ad      	uxthmi	r5, r5
 8019be8:	6031      	str	r1, [r6, #0]
 8019bea:	07d9      	lsls	r1, r3, #31
 8019bec:	bf44      	itt	mi
 8019bee:	f043 0320 	orrmi.w	r3, r3, #32
 8019bf2:	6023      	strmi	r3, [r4, #0]
 8019bf4:	b11d      	cbz	r5, 8019bfe <_printf_i+0x19e>
 8019bf6:	2310      	movs	r3, #16
 8019bf8:	e7ac      	b.n	8019b54 <_printf_i+0xf4>
 8019bfa:	4827      	ldr	r0, [pc, #156]	@ (8019c98 <_printf_i+0x238>)
 8019bfc:	e7e9      	b.n	8019bd2 <_printf_i+0x172>
 8019bfe:	6823      	ldr	r3, [r4, #0]
 8019c00:	f023 0320 	bic.w	r3, r3, #32
 8019c04:	6023      	str	r3, [r4, #0]
 8019c06:	e7f6      	b.n	8019bf6 <_printf_i+0x196>
 8019c08:	4616      	mov	r6, r2
 8019c0a:	e7bd      	b.n	8019b88 <_printf_i+0x128>
 8019c0c:	6833      	ldr	r3, [r6, #0]
 8019c0e:	6825      	ldr	r5, [r4, #0]
 8019c10:	6961      	ldr	r1, [r4, #20]
 8019c12:	1d18      	adds	r0, r3, #4
 8019c14:	6030      	str	r0, [r6, #0]
 8019c16:	062e      	lsls	r6, r5, #24
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	d501      	bpl.n	8019c20 <_printf_i+0x1c0>
 8019c1c:	6019      	str	r1, [r3, #0]
 8019c1e:	e002      	b.n	8019c26 <_printf_i+0x1c6>
 8019c20:	0668      	lsls	r0, r5, #25
 8019c22:	d5fb      	bpl.n	8019c1c <_printf_i+0x1bc>
 8019c24:	8019      	strh	r1, [r3, #0]
 8019c26:	2300      	movs	r3, #0
 8019c28:	6123      	str	r3, [r4, #16]
 8019c2a:	4616      	mov	r6, r2
 8019c2c:	e7bc      	b.n	8019ba8 <_printf_i+0x148>
 8019c2e:	6833      	ldr	r3, [r6, #0]
 8019c30:	1d1a      	adds	r2, r3, #4
 8019c32:	6032      	str	r2, [r6, #0]
 8019c34:	681e      	ldr	r6, [r3, #0]
 8019c36:	6862      	ldr	r2, [r4, #4]
 8019c38:	2100      	movs	r1, #0
 8019c3a:	4630      	mov	r0, r6
 8019c3c:	f7e6 fb78 	bl	8000330 <memchr>
 8019c40:	b108      	cbz	r0, 8019c46 <_printf_i+0x1e6>
 8019c42:	1b80      	subs	r0, r0, r6
 8019c44:	6060      	str	r0, [r4, #4]
 8019c46:	6863      	ldr	r3, [r4, #4]
 8019c48:	6123      	str	r3, [r4, #16]
 8019c4a:	2300      	movs	r3, #0
 8019c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019c50:	e7aa      	b.n	8019ba8 <_printf_i+0x148>
 8019c52:	6923      	ldr	r3, [r4, #16]
 8019c54:	4632      	mov	r2, r6
 8019c56:	4649      	mov	r1, r9
 8019c58:	4640      	mov	r0, r8
 8019c5a:	47d0      	blx	sl
 8019c5c:	3001      	adds	r0, #1
 8019c5e:	d0ad      	beq.n	8019bbc <_printf_i+0x15c>
 8019c60:	6823      	ldr	r3, [r4, #0]
 8019c62:	079b      	lsls	r3, r3, #30
 8019c64:	d413      	bmi.n	8019c8e <_printf_i+0x22e>
 8019c66:	68e0      	ldr	r0, [r4, #12]
 8019c68:	9b03      	ldr	r3, [sp, #12]
 8019c6a:	4298      	cmp	r0, r3
 8019c6c:	bfb8      	it	lt
 8019c6e:	4618      	movlt	r0, r3
 8019c70:	e7a6      	b.n	8019bc0 <_printf_i+0x160>
 8019c72:	2301      	movs	r3, #1
 8019c74:	4632      	mov	r2, r6
 8019c76:	4649      	mov	r1, r9
 8019c78:	4640      	mov	r0, r8
 8019c7a:	47d0      	blx	sl
 8019c7c:	3001      	adds	r0, #1
 8019c7e:	d09d      	beq.n	8019bbc <_printf_i+0x15c>
 8019c80:	3501      	adds	r5, #1
 8019c82:	68e3      	ldr	r3, [r4, #12]
 8019c84:	9903      	ldr	r1, [sp, #12]
 8019c86:	1a5b      	subs	r3, r3, r1
 8019c88:	42ab      	cmp	r3, r5
 8019c8a:	dcf2      	bgt.n	8019c72 <_printf_i+0x212>
 8019c8c:	e7eb      	b.n	8019c66 <_printf_i+0x206>
 8019c8e:	2500      	movs	r5, #0
 8019c90:	f104 0619 	add.w	r6, r4, #25
 8019c94:	e7f5      	b.n	8019c82 <_printf_i+0x222>
 8019c96:	bf00      	nop
 8019c98:	0801dff3 	.word	0x0801dff3
 8019c9c:	0801e004 	.word	0x0801e004

08019ca0 <std>:
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	b510      	push	{r4, lr}
 8019ca4:	4604      	mov	r4, r0
 8019ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8019caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019cae:	6083      	str	r3, [r0, #8]
 8019cb0:	8181      	strh	r1, [r0, #12]
 8019cb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8019cb4:	81c2      	strh	r2, [r0, #14]
 8019cb6:	6183      	str	r3, [r0, #24]
 8019cb8:	4619      	mov	r1, r3
 8019cba:	2208      	movs	r2, #8
 8019cbc:	305c      	adds	r0, #92	@ 0x5c
 8019cbe:	f000 f914 	bl	8019eea <memset>
 8019cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8019cf8 <std+0x58>)
 8019cc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8019cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8019cfc <std+0x5c>)
 8019cc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019cca:	4b0d      	ldr	r3, [pc, #52]	@ (8019d00 <std+0x60>)
 8019ccc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019cce:	4b0d      	ldr	r3, [pc, #52]	@ (8019d04 <std+0x64>)
 8019cd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8019cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8019d08 <std+0x68>)
 8019cd4:	6224      	str	r4, [r4, #32]
 8019cd6:	429c      	cmp	r4, r3
 8019cd8:	d006      	beq.n	8019ce8 <std+0x48>
 8019cda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019cde:	4294      	cmp	r4, r2
 8019ce0:	d002      	beq.n	8019ce8 <std+0x48>
 8019ce2:	33d0      	adds	r3, #208	@ 0xd0
 8019ce4:	429c      	cmp	r4, r3
 8019ce6:	d105      	bne.n	8019cf4 <std+0x54>
 8019ce8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cf0:	f000 b996 	b.w	801a020 <__retarget_lock_init_recursive>
 8019cf4:	bd10      	pop	{r4, pc}
 8019cf6:	bf00      	nop
 8019cf8:	08019e65 	.word	0x08019e65
 8019cfc:	08019e87 	.word	0x08019e87
 8019d00:	08019ebf 	.word	0x08019ebf
 8019d04:	08019ee3 	.word	0x08019ee3
 8019d08:	2401526c 	.word	0x2401526c

08019d0c <stdio_exit_handler>:
 8019d0c:	4a02      	ldr	r2, [pc, #8]	@ (8019d18 <stdio_exit_handler+0xc>)
 8019d0e:	4903      	ldr	r1, [pc, #12]	@ (8019d1c <stdio_exit_handler+0x10>)
 8019d10:	4803      	ldr	r0, [pc, #12]	@ (8019d20 <stdio_exit_handler+0x14>)
 8019d12:	f000 b869 	b.w	8019de8 <_fwalk_sglue>
 8019d16:	bf00      	nop
 8019d18:	24000104 	.word	0x24000104
 8019d1c:	0801c1dd 	.word	0x0801c1dd
 8019d20:	24000280 	.word	0x24000280

08019d24 <cleanup_stdio>:
 8019d24:	6841      	ldr	r1, [r0, #4]
 8019d26:	4b0c      	ldr	r3, [pc, #48]	@ (8019d58 <cleanup_stdio+0x34>)
 8019d28:	4299      	cmp	r1, r3
 8019d2a:	b510      	push	{r4, lr}
 8019d2c:	4604      	mov	r4, r0
 8019d2e:	d001      	beq.n	8019d34 <cleanup_stdio+0x10>
 8019d30:	f002 fa54 	bl	801c1dc <_fflush_r>
 8019d34:	68a1      	ldr	r1, [r4, #8]
 8019d36:	4b09      	ldr	r3, [pc, #36]	@ (8019d5c <cleanup_stdio+0x38>)
 8019d38:	4299      	cmp	r1, r3
 8019d3a:	d002      	beq.n	8019d42 <cleanup_stdio+0x1e>
 8019d3c:	4620      	mov	r0, r4
 8019d3e:	f002 fa4d 	bl	801c1dc <_fflush_r>
 8019d42:	68e1      	ldr	r1, [r4, #12]
 8019d44:	4b06      	ldr	r3, [pc, #24]	@ (8019d60 <cleanup_stdio+0x3c>)
 8019d46:	4299      	cmp	r1, r3
 8019d48:	d004      	beq.n	8019d54 <cleanup_stdio+0x30>
 8019d4a:	4620      	mov	r0, r4
 8019d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d50:	f002 ba44 	b.w	801c1dc <_fflush_r>
 8019d54:	bd10      	pop	{r4, pc}
 8019d56:	bf00      	nop
 8019d58:	2401526c 	.word	0x2401526c
 8019d5c:	240152d4 	.word	0x240152d4
 8019d60:	2401533c 	.word	0x2401533c

08019d64 <global_stdio_init.part.0>:
 8019d64:	b510      	push	{r4, lr}
 8019d66:	4b0b      	ldr	r3, [pc, #44]	@ (8019d94 <global_stdio_init.part.0+0x30>)
 8019d68:	4c0b      	ldr	r4, [pc, #44]	@ (8019d98 <global_stdio_init.part.0+0x34>)
 8019d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8019d9c <global_stdio_init.part.0+0x38>)
 8019d6c:	601a      	str	r2, [r3, #0]
 8019d6e:	4620      	mov	r0, r4
 8019d70:	2200      	movs	r2, #0
 8019d72:	2104      	movs	r1, #4
 8019d74:	f7ff ff94 	bl	8019ca0 <std>
 8019d78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019d7c:	2201      	movs	r2, #1
 8019d7e:	2109      	movs	r1, #9
 8019d80:	f7ff ff8e 	bl	8019ca0 <std>
 8019d84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019d88:	2202      	movs	r2, #2
 8019d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d8e:	2112      	movs	r1, #18
 8019d90:	f7ff bf86 	b.w	8019ca0 <std>
 8019d94:	240153a4 	.word	0x240153a4
 8019d98:	2401526c 	.word	0x2401526c
 8019d9c:	08019d0d 	.word	0x08019d0d

08019da0 <__sfp_lock_acquire>:
 8019da0:	4801      	ldr	r0, [pc, #4]	@ (8019da8 <__sfp_lock_acquire+0x8>)
 8019da2:	f000 b93e 	b.w	801a022 <__retarget_lock_acquire_recursive>
 8019da6:	bf00      	nop
 8019da8:	240153ad 	.word	0x240153ad

08019dac <__sfp_lock_release>:
 8019dac:	4801      	ldr	r0, [pc, #4]	@ (8019db4 <__sfp_lock_release+0x8>)
 8019dae:	f000 b939 	b.w	801a024 <__retarget_lock_release_recursive>
 8019db2:	bf00      	nop
 8019db4:	240153ad 	.word	0x240153ad

08019db8 <__sinit>:
 8019db8:	b510      	push	{r4, lr}
 8019dba:	4604      	mov	r4, r0
 8019dbc:	f7ff fff0 	bl	8019da0 <__sfp_lock_acquire>
 8019dc0:	6a23      	ldr	r3, [r4, #32]
 8019dc2:	b11b      	cbz	r3, 8019dcc <__sinit+0x14>
 8019dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019dc8:	f7ff bff0 	b.w	8019dac <__sfp_lock_release>
 8019dcc:	4b04      	ldr	r3, [pc, #16]	@ (8019de0 <__sinit+0x28>)
 8019dce:	6223      	str	r3, [r4, #32]
 8019dd0:	4b04      	ldr	r3, [pc, #16]	@ (8019de4 <__sinit+0x2c>)
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d1f5      	bne.n	8019dc4 <__sinit+0xc>
 8019dd8:	f7ff ffc4 	bl	8019d64 <global_stdio_init.part.0>
 8019ddc:	e7f2      	b.n	8019dc4 <__sinit+0xc>
 8019dde:	bf00      	nop
 8019de0:	08019d25 	.word	0x08019d25
 8019de4:	240153a4 	.word	0x240153a4

08019de8 <_fwalk_sglue>:
 8019de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019dec:	4607      	mov	r7, r0
 8019dee:	4688      	mov	r8, r1
 8019df0:	4614      	mov	r4, r2
 8019df2:	2600      	movs	r6, #0
 8019df4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019df8:	f1b9 0901 	subs.w	r9, r9, #1
 8019dfc:	d505      	bpl.n	8019e0a <_fwalk_sglue+0x22>
 8019dfe:	6824      	ldr	r4, [r4, #0]
 8019e00:	2c00      	cmp	r4, #0
 8019e02:	d1f7      	bne.n	8019df4 <_fwalk_sglue+0xc>
 8019e04:	4630      	mov	r0, r6
 8019e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e0a:	89ab      	ldrh	r3, [r5, #12]
 8019e0c:	2b01      	cmp	r3, #1
 8019e0e:	d907      	bls.n	8019e20 <_fwalk_sglue+0x38>
 8019e10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e14:	3301      	adds	r3, #1
 8019e16:	d003      	beq.n	8019e20 <_fwalk_sglue+0x38>
 8019e18:	4629      	mov	r1, r5
 8019e1a:	4638      	mov	r0, r7
 8019e1c:	47c0      	blx	r8
 8019e1e:	4306      	orrs	r6, r0
 8019e20:	3568      	adds	r5, #104	@ 0x68
 8019e22:	e7e9      	b.n	8019df8 <_fwalk_sglue+0x10>

08019e24 <siprintf>:
 8019e24:	b40e      	push	{r1, r2, r3}
 8019e26:	b500      	push	{lr}
 8019e28:	b09c      	sub	sp, #112	@ 0x70
 8019e2a:	ab1d      	add	r3, sp, #116	@ 0x74
 8019e2c:	9002      	str	r0, [sp, #8]
 8019e2e:	9006      	str	r0, [sp, #24]
 8019e30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019e34:	4809      	ldr	r0, [pc, #36]	@ (8019e5c <siprintf+0x38>)
 8019e36:	9107      	str	r1, [sp, #28]
 8019e38:	9104      	str	r1, [sp, #16]
 8019e3a:	4909      	ldr	r1, [pc, #36]	@ (8019e60 <siprintf+0x3c>)
 8019e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e40:	9105      	str	r1, [sp, #20]
 8019e42:	6800      	ldr	r0, [r0, #0]
 8019e44:	9301      	str	r3, [sp, #4]
 8019e46:	a902      	add	r1, sp, #8
 8019e48:	f002 f848 	bl	801bedc <_svfiprintf_r>
 8019e4c:	9b02      	ldr	r3, [sp, #8]
 8019e4e:	2200      	movs	r2, #0
 8019e50:	701a      	strb	r2, [r3, #0]
 8019e52:	b01c      	add	sp, #112	@ 0x70
 8019e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e58:	b003      	add	sp, #12
 8019e5a:	4770      	bx	lr
 8019e5c:	2400027c 	.word	0x2400027c
 8019e60:	ffff0208 	.word	0xffff0208

08019e64 <__sread>:
 8019e64:	b510      	push	{r4, lr}
 8019e66:	460c      	mov	r4, r1
 8019e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e6c:	f000 f88a 	bl	8019f84 <_read_r>
 8019e70:	2800      	cmp	r0, #0
 8019e72:	bfab      	itete	ge
 8019e74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019e76:	89a3      	ldrhlt	r3, [r4, #12]
 8019e78:	181b      	addge	r3, r3, r0
 8019e7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019e7e:	bfac      	ite	ge
 8019e80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019e82:	81a3      	strhlt	r3, [r4, #12]
 8019e84:	bd10      	pop	{r4, pc}

08019e86 <__swrite>:
 8019e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e8a:	461f      	mov	r7, r3
 8019e8c:	898b      	ldrh	r3, [r1, #12]
 8019e8e:	05db      	lsls	r3, r3, #23
 8019e90:	4605      	mov	r5, r0
 8019e92:	460c      	mov	r4, r1
 8019e94:	4616      	mov	r6, r2
 8019e96:	d505      	bpl.n	8019ea4 <__swrite+0x1e>
 8019e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e9c:	2302      	movs	r3, #2
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	f000 f85e 	bl	8019f60 <_lseek_r>
 8019ea4:	89a3      	ldrh	r3, [r4, #12]
 8019ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019eaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019eae:	81a3      	strh	r3, [r4, #12]
 8019eb0:	4632      	mov	r2, r6
 8019eb2:	463b      	mov	r3, r7
 8019eb4:	4628      	mov	r0, r5
 8019eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019eba:	f000 b875 	b.w	8019fa8 <_write_r>

08019ebe <__sseek>:
 8019ebe:	b510      	push	{r4, lr}
 8019ec0:	460c      	mov	r4, r1
 8019ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ec6:	f000 f84b 	bl	8019f60 <_lseek_r>
 8019eca:	1c43      	adds	r3, r0, #1
 8019ecc:	89a3      	ldrh	r3, [r4, #12]
 8019ece:	bf15      	itete	ne
 8019ed0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019ed2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019ed6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019eda:	81a3      	strheq	r3, [r4, #12]
 8019edc:	bf18      	it	ne
 8019ede:	81a3      	strhne	r3, [r4, #12]
 8019ee0:	bd10      	pop	{r4, pc}

08019ee2 <__sclose>:
 8019ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ee6:	f000 b82b 	b.w	8019f40 <_close_r>

08019eea <memset>:
 8019eea:	4402      	add	r2, r0
 8019eec:	4603      	mov	r3, r0
 8019eee:	4293      	cmp	r3, r2
 8019ef0:	d100      	bne.n	8019ef4 <memset+0xa>
 8019ef2:	4770      	bx	lr
 8019ef4:	f803 1b01 	strb.w	r1, [r3], #1
 8019ef8:	e7f9      	b.n	8019eee <memset+0x4>

08019efa <strchr>:
 8019efa:	b2c9      	uxtb	r1, r1
 8019efc:	4603      	mov	r3, r0
 8019efe:	4618      	mov	r0, r3
 8019f00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f04:	b112      	cbz	r2, 8019f0c <strchr+0x12>
 8019f06:	428a      	cmp	r2, r1
 8019f08:	d1f9      	bne.n	8019efe <strchr+0x4>
 8019f0a:	4770      	bx	lr
 8019f0c:	2900      	cmp	r1, #0
 8019f0e:	bf18      	it	ne
 8019f10:	2000      	movne	r0, #0
 8019f12:	4770      	bx	lr

08019f14 <strncmp>:
 8019f14:	b510      	push	{r4, lr}
 8019f16:	b16a      	cbz	r2, 8019f34 <strncmp+0x20>
 8019f18:	3901      	subs	r1, #1
 8019f1a:	1884      	adds	r4, r0, r2
 8019f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019f24:	429a      	cmp	r2, r3
 8019f26:	d103      	bne.n	8019f30 <strncmp+0x1c>
 8019f28:	42a0      	cmp	r0, r4
 8019f2a:	d001      	beq.n	8019f30 <strncmp+0x1c>
 8019f2c:	2a00      	cmp	r2, #0
 8019f2e:	d1f5      	bne.n	8019f1c <strncmp+0x8>
 8019f30:	1ad0      	subs	r0, r2, r3
 8019f32:	bd10      	pop	{r4, pc}
 8019f34:	4610      	mov	r0, r2
 8019f36:	e7fc      	b.n	8019f32 <strncmp+0x1e>

08019f38 <_localeconv_r>:
 8019f38:	4800      	ldr	r0, [pc, #0]	@ (8019f3c <_localeconv_r+0x4>)
 8019f3a:	4770      	bx	lr
 8019f3c:	24000200 	.word	0x24000200

08019f40 <_close_r>:
 8019f40:	b538      	push	{r3, r4, r5, lr}
 8019f42:	4d06      	ldr	r5, [pc, #24]	@ (8019f5c <_close_r+0x1c>)
 8019f44:	2300      	movs	r3, #0
 8019f46:	4604      	mov	r4, r0
 8019f48:	4608      	mov	r0, r1
 8019f4a:	602b      	str	r3, [r5, #0]
 8019f4c:	f7e8 ff18 	bl	8002d80 <_close>
 8019f50:	1c43      	adds	r3, r0, #1
 8019f52:	d102      	bne.n	8019f5a <_close_r+0x1a>
 8019f54:	682b      	ldr	r3, [r5, #0]
 8019f56:	b103      	cbz	r3, 8019f5a <_close_r+0x1a>
 8019f58:	6023      	str	r3, [r4, #0]
 8019f5a:	bd38      	pop	{r3, r4, r5, pc}
 8019f5c:	240153a8 	.word	0x240153a8

08019f60 <_lseek_r>:
 8019f60:	b538      	push	{r3, r4, r5, lr}
 8019f62:	4d07      	ldr	r5, [pc, #28]	@ (8019f80 <_lseek_r+0x20>)
 8019f64:	4604      	mov	r4, r0
 8019f66:	4608      	mov	r0, r1
 8019f68:	4611      	mov	r1, r2
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	602a      	str	r2, [r5, #0]
 8019f6e:	461a      	mov	r2, r3
 8019f70:	f7e8 ff2d 	bl	8002dce <_lseek>
 8019f74:	1c43      	adds	r3, r0, #1
 8019f76:	d102      	bne.n	8019f7e <_lseek_r+0x1e>
 8019f78:	682b      	ldr	r3, [r5, #0]
 8019f7a:	b103      	cbz	r3, 8019f7e <_lseek_r+0x1e>
 8019f7c:	6023      	str	r3, [r4, #0]
 8019f7e:	bd38      	pop	{r3, r4, r5, pc}
 8019f80:	240153a8 	.word	0x240153a8

08019f84 <_read_r>:
 8019f84:	b538      	push	{r3, r4, r5, lr}
 8019f86:	4d07      	ldr	r5, [pc, #28]	@ (8019fa4 <_read_r+0x20>)
 8019f88:	4604      	mov	r4, r0
 8019f8a:	4608      	mov	r0, r1
 8019f8c:	4611      	mov	r1, r2
 8019f8e:	2200      	movs	r2, #0
 8019f90:	602a      	str	r2, [r5, #0]
 8019f92:	461a      	mov	r2, r3
 8019f94:	f7e8 febb 	bl	8002d0e <_read>
 8019f98:	1c43      	adds	r3, r0, #1
 8019f9a:	d102      	bne.n	8019fa2 <_read_r+0x1e>
 8019f9c:	682b      	ldr	r3, [r5, #0]
 8019f9e:	b103      	cbz	r3, 8019fa2 <_read_r+0x1e>
 8019fa0:	6023      	str	r3, [r4, #0]
 8019fa2:	bd38      	pop	{r3, r4, r5, pc}
 8019fa4:	240153a8 	.word	0x240153a8

08019fa8 <_write_r>:
 8019fa8:	b538      	push	{r3, r4, r5, lr}
 8019faa:	4d07      	ldr	r5, [pc, #28]	@ (8019fc8 <_write_r+0x20>)
 8019fac:	4604      	mov	r4, r0
 8019fae:	4608      	mov	r0, r1
 8019fb0:	4611      	mov	r1, r2
 8019fb2:	2200      	movs	r2, #0
 8019fb4:	602a      	str	r2, [r5, #0]
 8019fb6:	461a      	mov	r2, r3
 8019fb8:	f7e8 fec6 	bl	8002d48 <_write>
 8019fbc:	1c43      	adds	r3, r0, #1
 8019fbe:	d102      	bne.n	8019fc6 <_write_r+0x1e>
 8019fc0:	682b      	ldr	r3, [r5, #0]
 8019fc2:	b103      	cbz	r3, 8019fc6 <_write_r+0x1e>
 8019fc4:	6023      	str	r3, [r4, #0]
 8019fc6:	bd38      	pop	{r3, r4, r5, pc}
 8019fc8:	240153a8 	.word	0x240153a8

08019fcc <__errno>:
 8019fcc:	4b01      	ldr	r3, [pc, #4]	@ (8019fd4 <__errno+0x8>)
 8019fce:	6818      	ldr	r0, [r3, #0]
 8019fd0:	4770      	bx	lr
 8019fd2:	bf00      	nop
 8019fd4:	2400027c 	.word	0x2400027c

08019fd8 <__libc_init_array>:
 8019fd8:	b570      	push	{r4, r5, r6, lr}
 8019fda:	4d0d      	ldr	r5, [pc, #52]	@ (801a010 <__libc_init_array+0x38>)
 8019fdc:	4c0d      	ldr	r4, [pc, #52]	@ (801a014 <__libc_init_array+0x3c>)
 8019fde:	1b64      	subs	r4, r4, r5
 8019fe0:	10a4      	asrs	r4, r4, #2
 8019fe2:	2600      	movs	r6, #0
 8019fe4:	42a6      	cmp	r6, r4
 8019fe6:	d109      	bne.n	8019ffc <__libc_init_array+0x24>
 8019fe8:	4d0b      	ldr	r5, [pc, #44]	@ (801a018 <__libc_init_array+0x40>)
 8019fea:	4c0c      	ldr	r4, [pc, #48]	@ (801a01c <__libc_init_array+0x44>)
 8019fec:	f003 fb18 	bl	801d620 <_init>
 8019ff0:	1b64      	subs	r4, r4, r5
 8019ff2:	10a4      	asrs	r4, r4, #2
 8019ff4:	2600      	movs	r6, #0
 8019ff6:	42a6      	cmp	r6, r4
 8019ff8:	d105      	bne.n	801a006 <__libc_init_array+0x2e>
 8019ffa:	bd70      	pop	{r4, r5, r6, pc}
 8019ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a000:	4798      	blx	r3
 801a002:	3601      	adds	r6, #1
 801a004:	e7ee      	b.n	8019fe4 <__libc_init_array+0xc>
 801a006:	f855 3b04 	ldr.w	r3, [r5], #4
 801a00a:	4798      	blx	r3
 801a00c:	3601      	adds	r6, #1
 801a00e:	e7f2      	b.n	8019ff6 <__libc_init_array+0x1e>
 801a010:	0801e5d0 	.word	0x0801e5d0
 801a014:	0801e5d0 	.word	0x0801e5d0
 801a018:	0801e5d0 	.word	0x0801e5d0
 801a01c:	0801e5d4 	.word	0x0801e5d4

0801a020 <__retarget_lock_init_recursive>:
 801a020:	4770      	bx	lr

0801a022 <__retarget_lock_acquire_recursive>:
 801a022:	4770      	bx	lr

0801a024 <__retarget_lock_release_recursive>:
 801a024:	4770      	bx	lr

0801a026 <memcpy>:
 801a026:	440a      	add	r2, r1
 801a028:	4291      	cmp	r1, r2
 801a02a:	f100 33ff 	add.w	r3, r0, #4294967295
 801a02e:	d100      	bne.n	801a032 <memcpy+0xc>
 801a030:	4770      	bx	lr
 801a032:	b510      	push	{r4, lr}
 801a034:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a038:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a03c:	4291      	cmp	r1, r2
 801a03e:	d1f9      	bne.n	801a034 <memcpy+0xe>
 801a040:	bd10      	pop	{r4, pc}
 801a042:	0000      	movs	r0, r0
 801a044:	0000      	movs	r0, r0
	...

0801a048 <nan>:
 801a048:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a050 <nan+0x8>
 801a04c:	4770      	bx	lr
 801a04e:	bf00      	nop
 801a050:	00000000 	.word	0x00000000
 801a054:	7ff80000 	.word	0x7ff80000

0801a058 <quorem>:
 801a058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a05c:	6903      	ldr	r3, [r0, #16]
 801a05e:	690c      	ldr	r4, [r1, #16]
 801a060:	42a3      	cmp	r3, r4
 801a062:	4607      	mov	r7, r0
 801a064:	db7e      	blt.n	801a164 <quorem+0x10c>
 801a066:	3c01      	subs	r4, #1
 801a068:	f101 0814 	add.w	r8, r1, #20
 801a06c:	00a3      	lsls	r3, r4, #2
 801a06e:	f100 0514 	add.w	r5, r0, #20
 801a072:	9300      	str	r3, [sp, #0]
 801a074:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a078:	9301      	str	r3, [sp, #4]
 801a07a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a07e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a082:	3301      	adds	r3, #1
 801a084:	429a      	cmp	r2, r3
 801a086:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a08a:	fbb2 f6f3 	udiv	r6, r2, r3
 801a08e:	d32e      	bcc.n	801a0ee <quorem+0x96>
 801a090:	f04f 0a00 	mov.w	sl, #0
 801a094:	46c4      	mov	ip, r8
 801a096:	46ae      	mov	lr, r5
 801a098:	46d3      	mov	fp, sl
 801a09a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a09e:	b298      	uxth	r0, r3
 801a0a0:	fb06 a000 	mla	r0, r6, r0, sl
 801a0a4:	0c02      	lsrs	r2, r0, #16
 801a0a6:	0c1b      	lsrs	r3, r3, #16
 801a0a8:	fb06 2303 	mla	r3, r6, r3, r2
 801a0ac:	f8de 2000 	ldr.w	r2, [lr]
 801a0b0:	b280      	uxth	r0, r0
 801a0b2:	b292      	uxth	r2, r2
 801a0b4:	1a12      	subs	r2, r2, r0
 801a0b6:	445a      	add	r2, fp
 801a0b8:	f8de 0000 	ldr.w	r0, [lr]
 801a0bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a0c0:	b29b      	uxth	r3, r3
 801a0c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a0c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a0ca:	b292      	uxth	r2, r2
 801a0cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a0d0:	45e1      	cmp	r9, ip
 801a0d2:	f84e 2b04 	str.w	r2, [lr], #4
 801a0d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a0da:	d2de      	bcs.n	801a09a <quorem+0x42>
 801a0dc:	9b00      	ldr	r3, [sp, #0]
 801a0de:	58eb      	ldr	r3, [r5, r3]
 801a0e0:	b92b      	cbnz	r3, 801a0ee <quorem+0x96>
 801a0e2:	9b01      	ldr	r3, [sp, #4]
 801a0e4:	3b04      	subs	r3, #4
 801a0e6:	429d      	cmp	r5, r3
 801a0e8:	461a      	mov	r2, r3
 801a0ea:	d32f      	bcc.n	801a14c <quorem+0xf4>
 801a0ec:	613c      	str	r4, [r7, #16]
 801a0ee:	4638      	mov	r0, r7
 801a0f0:	f001 fca0 	bl	801ba34 <__mcmp>
 801a0f4:	2800      	cmp	r0, #0
 801a0f6:	db25      	blt.n	801a144 <quorem+0xec>
 801a0f8:	4629      	mov	r1, r5
 801a0fa:	2000      	movs	r0, #0
 801a0fc:	f858 2b04 	ldr.w	r2, [r8], #4
 801a100:	f8d1 c000 	ldr.w	ip, [r1]
 801a104:	fa1f fe82 	uxth.w	lr, r2
 801a108:	fa1f f38c 	uxth.w	r3, ip
 801a10c:	eba3 030e 	sub.w	r3, r3, lr
 801a110:	4403      	add	r3, r0
 801a112:	0c12      	lsrs	r2, r2, #16
 801a114:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a118:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a11c:	b29b      	uxth	r3, r3
 801a11e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a122:	45c1      	cmp	r9, r8
 801a124:	f841 3b04 	str.w	r3, [r1], #4
 801a128:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a12c:	d2e6      	bcs.n	801a0fc <quorem+0xa4>
 801a12e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a132:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a136:	b922      	cbnz	r2, 801a142 <quorem+0xea>
 801a138:	3b04      	subs	r3, #4
 801a13a:	429d      	cmp	r5, r3
 801a13c:	461a      	mov	r2, r3
 801a13e:	d30b      	bcc.n	801a158 <quorem+0x100>
 801a140:	613c      	str	r4, [r7, #16]
 801a142:	3601      	adds	r6, #1
 801a144:	4630      	mov	r0, r6
 801a146:	b003      	add	sp, #12
 801a148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a14c:	6812      	ldr	r2, [r2, #0]
 801a14e:	3b04      	subs	r3, #4
 801a150:	2a00      	cmp	r2, #0
 801a152:	d1cb      	bne.n	801a0ec <quorem+0x94>
 801a154:	3c01      	subs	r4, #1
 801a156:	e7c6      	b.n	801a0e6 <quorem+0x8e>
 801a158:	6812      	ldr	r2, [r2, #0]
 801a15a:	3b04      	subs	r3, #4
 801a15c:	2a00      	cmp	r2, #0
 801a15e:	d1ef      	bne.n	801a140 <quorem+0xe8>
 801a160:	3c01      	subs	r4, #1
 801a162:	e7ea      	b.n	801a13a <quorem+0xe2>
 801a164:	2000      	movs	r0, #0
 801a166:	e7ee      	b.n	801a146 <quorem+0xee>

0801a168 <_dtoa_r>:
 801a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a16c:	ed2d 8b02 	vpush	{d8}
 801a170:	69c7      	ldr	r7, [r0, #28]
 801a172:	b091      	sub	sp, #68	@ 0x44
 801a174:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a178:	ec55 4b10 	vmov	r4, r5, d0
 801a17c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801a17e:	9107      	str	r1, [sp, #28]
 801a180:	4681      	mov	r9, r0
 801a182:	9209      	str	r2, [sp, #36]	@ 0x24
 801a184:	930d      	str	r3, [sp, #52]	@ 0x34
 801a186:	b97f      	cbnz	r7, 801a1a8 <_dtoa_r+0x40>
 801a188:	2010      	movs	r0, #16
 801a18a:	f001 f8c7 	bl	801b31c <malloc>
 801a18e:	4602      	mov	r2, r0
 801a190:	f8c9 001c 	str.w	r0, [r9, #28]
 801a194:	b920      	cbnz	r0, 801a1a0 <_dtoa_r+0x38>
 801a196:	4ba0      	ldr	r3, [pc, #640]	@ (801a418 <_dtoa_r+0x2b0>)
 801a198:	21ef      	movs	r1, #239	@ 0xef
 801a19a:	48a0      	ldr	r0, [pc, #640]	@ (801a41c <_dtoa_r+0x2b4>)
 801a19c:	f002 f870 	bl	801c280 <__assert_func>
 801a1a0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a1a4:	6007      	str	r7, [r0, #0]
 801a1a6:	60c7      	str	r7, [r0, #12]
 801a1a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a1ac:	6819      	ldr	r1, [r3, #0]
 801a1ae:	b159      	cbz	r1, 801a1c8 <_dtoa_r+0x60>
 801a1b0:	685a      	ldr	r2, [r3, #4]
 801a1b2:	604a      	str	r2, [r1, #4]
 801a1b4:	2301      	movs	r3, #1
 801a1b6:	4093      	lsls	r3, r2
 801a1b8:	608b      	str	r3, [r1, #8]
 801a1ba:	4648      	mov	r0, r9
 801a1bc:	f001 f9b6 	bl	801b52c <_Bfree>
 801a1c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	601a      	str	r2, [r3, #0]
 801a1c8:	1e2b      	subs	r3, r5, #0
 801a1ca:	bfbb      	ittet	lt
 801a1cc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a1d0:	9303      	strlt	r3, [sp, #12]
 801a1d2:	2300      	movge	r3, #0
 801a1d4:	2201      	movlt	r2, #1
 801a1d6:	bfac      	ite	ge
 801a1d8:	6033      	strge	r3, [r6, #0]
 801a1da:	6032      	strlt	r2, [r6, #0]
 801a1dc:	4b90      	ldr	r3, [pc, #576]	@ (801a420 <_dtoa_r+0x2b8>)
 801a1de:	9e03      	ldr	r6, [sp, #12]
 801a1e0:	43b3      	bics	r3, r6
 801a1e2:	d110      	bne.n	801a206 <_dtoa_r+0x9e>
 801a1e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a1e6:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a1ea:	6013      	str	r3, [r2, #0]
 801a1ec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801a1f0:	4323      	orrs	r3, r4
 801a1f2:	f000 84de 	beq.w	801abb2 <_dtoa_r+0xa4a>
 801a1f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a1f8:	4f8a      	ldr	r7, [pc, #552]	@ (801a424 <_dtoa_r+0x2bc>)
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	f000 84e0 	beq.w	801abc0 <_dtoa_r+0xa58>
 801a200:	1cfb      	adds	r3, r7, #3
 801a202:	f000 bcdb 	b.w	801abbc <_dtoa_r+0xa54>
 801a206:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a20a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a212:	d10a      	bne.n	801a22a <_dtoa_r+0xc2>
 801a214:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a216:	2301      	movs	r3, #1
 801a218:	6013      	str	r3, [r2, #0]
 801a21a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a21c:	b113      	cbz	r3, 801a224 <_dtoa_r+0xbc>
 801a21e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a220:	4b81      	ldr	r3, [pc, #516]	@ (801a428 <_dtoa_r+0x2c0>)
 801a222:	6013      	str	r3, [r2, #0]
 801a224:	4f81      	ldr	r7, [pc, #516]	@ (801a42c <_dtoa_r+0x2c4>)
 801a226:	f000 bccb 	b.w	801abc0 <_dtoa_r+0xa58>
 801a22a:	aa0e      	add	r2, sp, #56	@ 0x38
 801a22c:	a90f      	add	r1, sp, #60	@ 0x3c
 801a22e:	4648      	mov	r0, r9
 801a230:	eeb0 0b48 	vmov.f64	d0, d8
 801a234:	f001 fd1e 	bl	801bc74 <__d2b>
 801a238:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801a23c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a23e:	9001      	str	r0, [sp, #4]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d045      	beq.n	801a2d0 <_dtoa_r+0x168>
 801a244:	eeb0 7b48 	vmov.f64	d7, d8
 801a248:	ee18 1a90 	vmov	r1, s17
 801a24c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a250:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801a254:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801a258:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801a25c:	2500      	movs	r5, #0
 801a25e:	ee07 1a90 	vmov	s15, r1
 801a262:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801a266:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a400 <_dtoa_r+0x298>
 801a26a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a26e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801a408 <_dtoa_r+0x2a0>
 801a272:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a276:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a410 <_dtoa_r+0x2a8>
 801a27a:	ee07 3a90 	vmov	s15, r3
 801a27e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a282:	eeb0 7b46 	vmov.f64	d7, d6
 801a286:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a28a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a28e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a296:	ee16 8a90 	vmov	r8, s13
 801a29a:	d508      	bpl.n	801a2ae <_dtoa_r+0x146>
 801a29c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a2a0:	eeb4 6b47 	vcmp.f64	d6, d7
 801a2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2a8:	bf18      	it	ne
 801a2aa:	f108 38ff 	addne.w	r8, r8, #4294967295
 801a2ae:	f1b8 0f16 	cmp.w	r8, #22
 801a2b2:	d82b      	bhi.n	801a30c <_dtoa_r+0x1a4>
 801a2b4:	495e      	ldr	r1, [pc, #376]	@ (801a430 <_dtoa_r+0x2c8>)
 801a2b6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801a2ba:	ed91 7b00 	vldr	d7, [r1]
 801a2be:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2c6:	d501      	bpl.n	801a2cc <_dtoa_r+0x164>
 801a2c8:	f108 38ff 	add.w	r8, r8, #4294967295
 801a2cc:	2100      	movs	r1, #0
 801a2ce:	e01e      	b.n	801a30e <_dtoa_r+0x1a6>
 801a2d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a2d2:	4413      	add	r3, r2
 801a2d4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801a2d8:	2920      	cmp	r1, #32
 801a2da:	bfc1      	itttt	gt
 801a2dc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801a2e0:	408e      	lslgt	r6, r1
 801a2e2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801a2e6:	fa24 f101 	lsrgt.w	r1, r4, r1
 801a2ea:	bfd6      	itet	le
 801a2ec:	f1c1 0120 	rsble	r1, r1, #32
 801a2f0:	4331      	orrgt	r1, r6
 801a2f2:	fa04 f101 	lslle.w	r1, r4, r1
 801a2f6:	ee07 1a90 	vmov	s15, r1
 801a2fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a2fe:	3b01      	subs	r3, #1
 801a300:	ee17 1a90 	vmov	r1, s15
 801a304:	2501      	movs	r5, #1
 801a306:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801a30a:	e7a8      	b.n	801a25e <_dtoa_r+0xf6>
 801a30c:	2101      	movs	r1, #1
 801a30e:	1ad2      	subs	r2, r2, r3
 801a310:	1e53      	subs	r3, r2, #1
 801a312:	9306      	str	r3, [sp, #24]
 801a314:	bf45      	ittet	mi
 801a316:	f1c2 0301 	rsbmi	r3, r2, #1
 801a31a:	9305      	strmi	r3, [sp, #20]
 801a31c:	2300      	movpl	r3, #0
 801a31e:	2300      	movmi	r3, #0
 801a320:	bf4c      	ite	mi
 801a322:	9306      	strmi	r3, [sp, #24]
 801a324:	9305      	strpl	r3, [sp, #20]
 801a326:	f1b8 0f00 	cmp.w	r8, #0
 801a32a:	910c      	str	r1, [sp, #48]	@ 0x30
 801a32c:	db18      	blt.n	801a360 <_dtoa_r+0x1f8>
 801a32e:	9b06      	ldr	r3, [sp, #24]
 801a330:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801a334:	4443      	add	r3, r8
 801a336:	9306      	str	r3, [sp, #24]
 801a338:	2300      	movs	r3, #0
 801a33a:	9a07      	ldr	r2, [sp, #28]
 801a33c:	2a09      	cmp	r2, #9
 801a33e:	d849      	bhi.n	801a3d4 <_dtoa_r+0x26c>
 801a340:	2a05      	cmp	r2, #5
 801a342:	bfc4      	itt	gt
 801a344:	3a04      	subgt	r2, #4
 801a346:	9207      	strgt	r2, [sp, #28]
 801a348:	9a07      	ldr	r2, [sp, #28]
 801a34a:	f1a2 0202 	sub.w	r2, r2, #2
 801a34e:	bfcc      	ite	gt
 801a350:	2400      	movgt	r4, #0
 801a352:	2401      	movle	r4, #1
 801a354:	2a03      	cmp	r2, #3
 801a356:	d848      	bhi.n	801a3ea <_dtoa_r+0x282>
 801a358:	e8df f002 	tbb	[pc, r2]
 801a35c:	3a2c2e0b 	.word	0x3a2c2e0b
 801a360:	9b05      	ldr	r3, [sp, #20]
 801a362:	2200      	movs	r2, #0
 801a364:	eba3 0308 	sub.w	r3, r3, r8
 801a368:	9305      	str	r3, [sp, #20]
 801a36a:	920a      	str	r2, [sp, #40]	@ 0x28
 801a36c:	f1c8 0300 	rsb	r3, r8, #0
 801a370:	e7e3      	b.n	801a33a <_dtoa_r+0x1d2>
 801a372:	2200      	movs	r2, #0
 801a374:	9208      	str	r2, [sp, #32]
 801a376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a378:	2a00      	cmp	r2, #0
 801a37a:	dc39      	bgt.n	801a3f0 <_dtoa_r+0x288>
 801a37c:	f04f 0b01 	mov.w	fp, #1
 801a380:	46da      	mov	sl, fp
 801a382:	465a      	mov	r2, fp
 801a384:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801a388:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801a38c:	2100      	movs	r1, #0
 801a38e:	2004      	movs	r0, #4
 801a390:	f100 0614 	add.w	r6, r0, #20
 801a394:	4296      	cmp	r6, r2
 801a396:	d930      	bls.n	801a3fa <_dtoa_r+0x292>
 801a398:	6079      	str	r1, [r7, #4]
 801a39a:	4648      	mov	r0, r9
 801a39c:	9304      	str	r3, [sp, #16]
 801a39e:	f001 f885 	bl	801b4ac <_Balloc>
 801a3a2:	9b04      	ldr	r3, [sp, #16]
 801a3a4:	4607      	mov	r7, r0
 801a3a6:	2800      	cmp	r0, #0
 801a3a8:	d146      	bne.n	801a438 <_dtoa_r+0x2d0>
 801a3aa:	4b22      	ldr	r3, [pc, #136]	@ (801a434 <_dtoa_r+0x2cc>)
 801a3ac:	4602      	mov	r2, r0
 801a3ae:	f240 11af 	movw	r1, #431	@ 0x1af
 801a3b2:	e6f2      	b.n	801a19a <_dtoa_r+0x32>
 801a3b4:	2201      	movs	r2, #1
 801a3b6:	e7dd      	b.n	801a374 <_dtoa_r+0x20c>
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	9208      	str	r2, [sp, #32]
 801a3bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a3be:	eb08 0b02 	add.w	fp, r8, r2
 801a3c2:	f10b 0a01 	add.w	sl, fp, #1
 801a3c6:	4652      	mov	r2, sl
 801a3c8:	2a01      	cmp	r2, #1
 801a3ca:	bfb8      	it	lt
 801a3cc:	2201      	movlt	r2, #1
 801a3ce:	e7db      	b.n	801a388 <_dtoa_r+0x220>
 801a3d0:	2201      	movs	r2, #1
 801a3d2:	e7f2      	b.n	801a3ba <_dtoa_r+0x252>
 801a3d4:	2401      	movs	r4, #1
 801a3d6:	2200      	movs	r2, #0
 801a3d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801a3dc:	f04f 3bff 	mov.w	fp, #4294967295
 801a3e0:	2100      	movs	r1, #0
 801a3e2:	46da      	mov	sl, fp
 801a3e4:	2212      	movs	r2, #18
 801a3e6:	9109      	str	r1, [sp, #36]	@ 0x24
 801a3e8:	e7ce      	b.n	801a388 <_dtoa_r+0x220>
 801a3ea:	2201      	movs	r2, #1
 801a3ec:	9208      	str	r2, [sp, #32]
 801a3ee:	e7f5      	b.n	801a3dc <_dtoa_r+0x274>
 801a3f0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801a3f4:	46da      	mov	sl, fp
 801a3f6:	465a      	mov	r2, fp
 801a3f8:	e7c6      	b.n	801a388 <_dtoa_r+0x220>
 801a3fa:	3101      	adds	r1, #1
 801a3fc:	0040      	lsls	r0, r0, #1
 801a3fe:	e7c7      	b.n	801a390 <_dtoa_r+0x228>
 801a400:	636f4361 	.word	0x636f4361
 801a404:	3fd287a7 	.word	0x3fd287a7
 801a408:	8b60c8b3 	.word	0x8b60c8b3
 801a40c:	3fc68a28 	.word	0x3fc68a28
 801a410:	509f79fb 	.word	0x509f79fb
 801a414:	3fd34413 	.word	0x3fd34413
 801a418:	0801e02a 	.word	0x0801e02a
 801a41c:	0801e041 	.word	0x0801e041
 801a420:	7ff00000 	.word	0x7ff00000
 801a424:	0801e026 	.word	0x0801e026
 801a428:	0801dff2 	.word	0x0801dff2
 801a42c:	0801dff1 	.word	0x0801dff1
 801a430:	0801e198 	.word	0x0801e198
 801a434:	0801e099 	.word	0x0801e099
 801a438:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801a43c:	f1ba 0f0e 	cmp.w	sl, #14
 801a440:	6010      	str	r0, [r2, #0]
 801a442:	d86f      	bhi.n	801a524 <_dtoa_r+0x3bc>
 801a444:	2c00      	cmp	r4, #0
 801a446:	d06d      	beq.n	801a524 <_dtoa_r+0x3bc>
 801a448:	f1b8 0f00 	cmp.w	r8, #0
 801a44c:	f340 80c2 	ble.w	801a5d4 <_dtoa_r+0x46c>
 801a450:	4aca      	ldr	r2, [pc, #808]	@ (801a77c <_dtoa_r+0x614>)
 801a452:	f008 010f 	and.w	r1, r8, #15
 801a456:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a45a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801a45e:	ed92 7b00 	vldr	d7, [r2]
 801a462:	ea4f 1128 	mov.w	r1, r8, asr #4
 801a466:	f000 80a9 	beq.w	801a5bc <_dtoa_r+0x454>
 801a46a:	4ac5      	ldr	r2, [pc, #788]	@ (801a780 <_dtoa_r+0x618>)
 801a46c:	ed92 6b08 	vldr	d6, [r2, #32]
 801a470:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a474:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a478:	f001 010f 	and.w	r1, r1, #15
 801a47c:	2203      	movs	r2, #3
 801a47e:	48c0      	ldr	r0, [pc, #768]	@ (801a780 <_dtoa_r+0x618>)
 801a480:	2900      	cmp	r1, #0
 801a482:	f040 809d 	bne.w	801a5c0 <_dtoa_r+0x458>
 801a486:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a48a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a48e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a492:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a494:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a498:	2900      	cmp	r1, #0
 801a49a:	f000 80c1 	beq.w	801a620 <_dtoa_r+0x4b8>
 801a49e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801a4a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4aa:	f140 80b9 	bpl.w	801a620 <_dtoa_r+0x4b8>
 801a4ae:	f1ba 0f00 	cmp.w	sl, #0
 801a4b2:	f000 80b5 	beq.w	801a620 <_dtoa_r+0x4b8>
 801a4b6:	f1bb 0f00 	cmp.w	fp, #0
 801a4ba:	dd31      	ble.n	801a520 <_dtoa_r+0x3b8>
 801a4bc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801a4c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a4c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a4c8:	f108 31ff 	add.w	r1, r8, #4294967295
 801a4cc:	9104      	str	r1, [sp, #16]
 801a4ce:	3201      	adds	r2, #1
 801a4d0:	465c      	mov	r4, fp
 801a4d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a4d6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801a4da:	ee07 2a90 	vmov	s15, r2
 801a4de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a4e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a4e6:	ee15 2a90 	vmov	r2, s11
 801a4ea:	ec51 0b15 	vmov	r0, r1, d5
 801a4ee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801a4f2:	2c00      	cmp	r4, #0
 801a4f4:	f040 8098 	bne.w	801a628 <_dtoa_r+0x4c0>
 801a4f8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a4fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a500:	ec41 0b17 	vmov	d7, r0, r1
 801a504:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a50c:	f300 8261 	bgt.w	801a9d2 <_dtoa_r+0x86a>
 801a510:	eeb1 7b47 	vneg.f64	d7, d7
 801a514:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a51c:	f100 80f5 	bmi.w	801a70a <_dtoa_r+0x5a2>
 801a520:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a524:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a526:	2a00      	cmp	r2, #0
 801a528:	f2c0 812c 	blt.w	801a784 <_dtoa_r+0x61c>
 801a52c:	f1b8 0f0e 	cmp.w	r8, #14
 801a530:	f300 8128 	bgt.w	801a784 <_dtoa_r+0x61c>
 801a534:	4b91      	ldr	r3, [pc, #580]	@ (801a77c <_dtoa_r+0x614>)
 801a536:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a53a:	ed93 6b00 	vldr	d6, [r3]
 801a53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a540:	2b00      	cmp	r3, #0
 801a542:	da03      	bge.n	801a54c <_dtoa_r+0x3e4>
 801a544:	f1ba 0f00 	cmp.w	sl, #0
 801a548:	f340 80d2 	ble.w	801a6f0 <_dtoa_r+0x588>
 801a54c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801a550:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a554:	463e      	mov	r6, r7
 801a556:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a55a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a55e:	ee15 3a10 	vmov	r3, s10
 801a562:	3330      	adds	r3, #48	@ 0x30
 801a564:	f806 3b01 	strb.w	r3, [r6], #1
 801a568:	1bf3      	subs	r3, r6, r7
 801a56a:	459a      	cmp	sl, r3
 801a56c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a570:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a574:	f040 80f8 	bne.w	801a768 <_dtoa_r+0x600>
 801a578:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a57c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a584:	f300 80dd 	bgt.w	801a742 <_dtoa_r+0x5da>
 801a588:	eeb4 7b46 	vcmp.f64	d7, d6
 801a58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a590:	d104      	bne.n	801a59c <_dtoa_r+0x434>
 801a592:	ee15 3a10 	vmov	r3, s10
 801a596:	07db      	lsls	r3, r3, #31
 801a598:	f100 80d3 	bmi.w	801a742 <_dtoa_r+0x5da>
 801a59c:	9901      	ldr	r1, [sp, #4]
 801a59e:	4648      	mov	r0, r9
 801a5a0:	f000 ffc4 	bl	801b52c <_Bfree>
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a5a8:	7033      	strb	r3, [r6, #0]
 801a5aa:	f108 0301 	add.w	r3, r8, #1
 801a5ae:	6013      	str	r3, [r2, #0]
 801a5b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	f000 8304 	beq.w	801abc0 <_dtoa_r+0xa58>
 801a5b8:	601e      	str	r6, [r3, #0]
 801a5ba:	e301      	b.n	801abc0 <_dtoa_r+0xa58>
 801a5bc:	2202      	movs	r2, #2
 801a5be:	e75e      	b.n	801a47e <_dtoa_r+0x316>
 801a5c0:	07cc      	lsls	r4, r1, #31
 801a5c2:	d504      	bpl.n	801a5ce <_dtoa_r+0x466>
 801a5c4:	ed90 6b00 	vldr	d6, [r0]
 801a5c8:	3201      	adds	r2, #1
 801a5ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a5ce:	1049      	asrs	r1, r1, #1
 801a5d0:	3008      	adds	r0, #8
 801a5d2:	e755      	b.n	801a480 <_dtoa_r+0x318>
 801a5d4:	d022      	beq.n	801a61c <_dtoa_r+0x4b4>
 801a5d6:	f1c8 0100 	rsb	r1, r8, #0
 801a5da:	4a68      	ldr	r2, [pc, #416]	@ (801a77c <_dtoa_r+0x614>)
 801a5dc:	f001 000f 	and.w	r0, r1, #15
 801a5e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a5e4:	ed92 7b00 	vldr	d7, [r2]
 801a5e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a5ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a5f0:	4863      	ldr	r0, [pc, #396]	@ (801a780 <_dtoa_r+0x618>)
 801a5f2:	1109      	asrs	r1, r1, #4
 801a5f4:	2400      	movs	r4, #0
 801a5f6:	2202      	movs	r2, #2
 801a5f8:	b929      	cbnz	r1, 801a606 <_dtoa_r+0x49e>
 801a5fa:	2c00      	cmp	r4, #0
 801a5fc:	f43f af49 	beq.w	801a492 <_dtoa_r+0x32a>
 801a600:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a604:	e745      	b.n	801a492 <_dtoa_r+0x32a>
 801a606:	07ce      	lsls	r6, r1, #31
 801a608:	d505      	bpl.n	801a616 <_dtoa_r+0x4ae>
 801a60a:	ed90 6b00 	vldr	d6, [r0]
 801a60e:	3201      	adds	r2, #1
 801a610:	2401      	movs	r4, #1
 801a612:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a616:	1049      	asrs	r1, r1, #1
 801a618:	3008      	adds	r0, #8
 801a61a:	e7ed      	b.n	801a5f8 <_dtoa_r+0x490>
 801a61c:	2202      	movs	r2, #2
 801a61e:	e738      	b.n	801a492 <_dtoa_r+0x32a>
 801a620:	f8cd 8010 	str.w	r8, [sp, #16]
 801a624:	4654      	mov	r4, sl
 801a626:	e754      	b.n	801a4d2 <_dtoa_r+0x36a>
 801a628:	4a54      	ldr	r2, [pc, #336]	@ (801a77c <_dtoa_r+0x614>)
 801a62a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a62e:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a632:	9a08      	ldr	r2, [sp, #32]
 801a634:	ec41 0b17 	vmov	d7, r0, r1
 801a638:	443c      	add	r4, r7
 801a63a:	b34a      	cbz	r2, 801a690 <_dtoa_r+0x528>
 801a63c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801a640:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801a644:	463e      	mov	r6, r7
 801a646:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a64a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a64e:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a652:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a656:	ee14 2a90 	vmov	r2, s9
 801a65a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a65e:	3230      	adds	r2, #48	@ 0x30
 801a660:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a664:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a66c:	f806 2b01 	strb.w	r2, [r6], #1
 801a670:	d438      	bmi.n	801a6e4 <_dtoa_r+0x57c>
 801a672:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a676:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a67e:	d462      	bmi.n	801a746 <_dtoa_r+0x5de>
 801a680:	42a6      	cmp	r6, r4
 801a682:	f43f af4d 	beq.w	801a520 <_dtoa_r+0x3b8>
 801a686:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a68a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a68e:	e7e0      	b.n	801a652 <_dtoa_r+0x4ea>
 801a690:	4621      	mov	r1, r4
 801a692:	463e      	mov	r6, r7
 801a694:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a698:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a69c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a6a0:	ee14 2a90 	vmov	r2, s9
 801a6a4:	3230      	adds	r2, #48	@ 0x30
 801a6a6:	f806 2b01 	strb.w	r2, [r6], #1
 801a6aa:	42a6      	cmp	r6, r4
 801a6ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a6b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a6b4:	d119      	bne.n	801a6ea <_dtoa_r+0x582>
 801a6b6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801a6ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a6be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6c6:	dc3e      	bgt.n	801a746 <_dtoa_r+0x5de>
 801a6c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a6cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6d4:	f57f af24 	bpl.w	801a520 <_dtoa_r+0x3b8>
 801a6d8:	460e      	mov	r6, r1
 801a6da:	3901      	subs	r1, #1
 801a6dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a6e0:	2b30      	cmp	r3, #48	@ 0x30
 801a6e2:	d0f9      	beq.n	801a6d8 <_dtoa_r+0x570>
 801a6e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a6e8:	e758      	b.n	801a59c <_dtoa_r+0x434>
 801a6ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a6ee:	e7d5      	b.n	801a69c <_dtoa_r+0x534>
 801a6f0:	d10b      	bne.n	801a70a <_dtoa_r+0x5a2>
 801a6f2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a6f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a6fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a6fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a706:	f2c0 8161 	blt.w	801a9cc <_dtoa_r+0x864>
 801a70a:	2400      	movs	r4, #0
 801a70c:	4625      	mov	r5, r4
 801a70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a710:	43db      	mvns	r3, r3
 801a712:	9304      	str	r3, [sp, #16]
 801a714:	463e      	mov	r6, r7
 801a716:	f04f 0800 	mov.w	r8, #0
 801a71a:	4621      	mov	r1, r4
 801a71c:	4648      	mov	r0, r9
 801a71e:	f000 ff05 	bl	801b52c <_Bfree>
 801a722:	2d00      	cmp	r5, #0
 801a724:	d0de      	beq.n	801a6e4 <_dtoa_r+0x57c>
 801a726:	f1b8 0f00 	cmp.w	r8, #0
 801a72a:	d005      	beq.n	801a738 <_dtoa_r+0x5d0>
 801a72c:	45a8      	cmp	r8, r5
 801a72e:	d003      	beq.n	801a738 <_dtoa_r+0x5d0>
 801a730:	4641      	mov	r1, r8
 801a732:	4648      	mov	r0, r9
 801a734:	f000 fefa 	bl	801b52c <_Bfree>
 801a738:	4629      	mov	r1, r5
 801a73a:	4648      	mov	r0, r9
 801a73c:	f000 fef6 	bl	801b52c <_Bfree>
 801a740:	e7d0      	b.n	801a6e4 <_dtoa_r+0x57c>
 801a742:	f8cd 8010 	str.w	r8, [sp, #16]
 801a746:	4633      	mov	r3, r6
 801a748:	461e      	mov	r6, r3
 801a74a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a74e:	2a39      	cmp	r2, #57	@ 0x39
 801a750:	d106      	bne.n	801a760 <_dtoa_r+0x5f8>
 801a752:	429f      	cmp	r7, r3
 801a754:	d1f8      	bne.n	801a748 <_dtoa_r+0x5e0>
 801a756:	9a04      	ldr	r2, [sp, #16]
 801a758:	3201      	adds	r2, #1
 801a75a:	9204      	str	r2, [sp, #16]
 801a75c:	2230      	movs	r2, #48	@ 0x30
 801a75e:	703a      	strb	r2, [r7, #0]
 801a760:	781a      	ldrb	r2, [r3, #0]
 801a762:	3201      	adds	r2, #1
 801a764:	701a      	strb	r2, [r3, #0]
 801a766:	e7bd      	b.n	801a6e4 <_dtoa_r+0x57c>
 801a768:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a76c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a774:	f47f aeef 	bne.w	801a556 <_dtoa_r+0x3ee>
 801a778:	e710      	b.n	801a59c <_dtoa_r+0x434>
 801a77a:	bf00      	nop
 801a77c:	0801e198 	.word	0x0801e198
 801a780:	0801e170 	.word	0x0801e170
 801a784:	9908      	ldr	r1, [sp, #32]
 801a786:	2900      	cmp	r1, #0
 801a788:	f000 80e3 	beq.w	801a952 <_dtoa_r+0x7ea>
 801a78c:	9907      	ldr	r1, [sp, #28]
 801a78e:	2901      	cmp	r1, #1
 801a790:	f300 80c8 	bgt.w	801a924 <_dtoa_r+0x7bc>
 801a794:	2d00      	cmp	r5, #0
 801a796:	f000 80c1 	beq.w	801a91c <_dtoa_r+0x7b4>
 801a79a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a79e:	9e05      	ldr	r6, [sp, #20]
 801a7a0:	461c      	mov	r4, r3
 801a7a2:	9304      	str	r3, [sp, #16]
 801a7a4:	9b05      	ldr	r3, [sp, #20]
 801a7a6:	4413      	add	r3, r2
 801a7a8:	9305      	str	r3, [sp, #20]
 801a7aa:	9b06      	ldr	r3, [sp, #24]
 801a7ac:	2101      	movs	r1, #1
 801a7ae:	4413      	add	r3, r2
 801a7b0:	4648      	mov	r0, r9
 801a7b2:	9306      	str	r3, [sp, #24]
 801a7b4:	f000 ffb8 	bl	801b728 <__i2b>
 801a7b8:	9b04      	ldr	r3, [sp, #16]
 801a7ba:	4605      	mov	r5, r0
 801a7bc:	b166      	cbz	r6, 801a7d8 <_dtoa_r+0x670>
 801a7be:	9a06      	ldr	r2, [sp, #24]
 801a7c0:	2a00      	cmp	r2, #0
 801a7c2:	dd09      	ble.n	801a7d8 <_dtoa_r+0x670>
 801a7c4:	42b2      	cmp	r2, r6
 801a7c6:	9905      	ldr	r1, [sp, #20]
 801a7c8:	bfa8      	it	ge
 801a7ca:	4632      	movge	r2, r6
 801a7cc:	1a89      	subs	r1, r1, r2
 801a7ce:	9105      	str	r1, [sp, #20]
 801a7d0:	9906      	ldr	r1, [sp, #24]
 801a7d2:	1ab6      	subs	r6, r6, r2
 801a7d4:	1a8a      	subs	r2, r1, r2
 801a7d6:	9206      	str	r2, [sp, #24]
 801a7d8:	b1fb      	cbz	r3, 801a81a <_dtoa_r+0x6b2>
 801a7da:	9a08      	ldr	r2, [sp, #32]
 801a7dc:	2a00      	cmp	r2, #0
 801a7de:	f000 80bc 	beq.w	801a95a <_dtoa_r+0x7f2>
 801a7e2:	b19c      	cbz	r4, 801a80c <_dtoa_r+0x6a4>
 801a7e4:	4629      	mov	r1, r5
 801a7e6:	4622      	mov	r2, r4
 801a7e8:	4648      	mov	r0, r9
 801a7ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a7ec:	f001 f85c 	bl	801b8a8 <__pow5mult>
 801a7f0:	9a01      	ldr	r2, [sp, #4]
 801a7f2:	4601      	mov	r1, r0
 801a7f4:	4605      	mov	r5, r0
 801a7f6:	4648      	mov	r0, r9
 801a7f8:	f000 ffac 	bl	801b754 <__multiply>
 801a7fc:	9901      	ldr	r1, [sp, #4]
 801a7fe:	9004      	str	r0, [sp, #16]
 801a800:	4648      	mov	r0, r9
 801a802:	f000 fe93 	bl	801b52c <_Bfree>
 801a806:	9a04      	ldr	r2, [sp, #16]
 801a808:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a80a:	9201      	str	r2, [sp, #4]
 801a80c:	1b1a      	subs	r2, r3, r4
 801a80e:	d004      	beq.n	801a81a <_dtoa_r+0x6b2>
 801a810:	9901      	ldr	r1, [sp, #4]
 801a812:	4648      	mov	r0, r9
 801a814:	f001 f848 	bl	801b8a8 <__pow5mult>
 801a818:	9001      	str	r0, [sp, #4]
 801a81a:	2101      	movs	r1, #1
 801a81c:	4648      	mov	r0, r9
 801a81e:	f000 ff83 	bl	801b728 <__i2b>
 801a822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a824:	4604      	mov	r4, r0
 801a826:	2b00      	cmp	r3, #0
 801a828:	f000 81d0 	beq.w	801abcc <_dtoa_r+0xa64>
 801a82c:	461a      	mov	r2, r3
 801a82e:	4601      	mov	r1, r0
 801a830:	4648      	mov	r0, r9
 801a832:	f001 f839 	bl	801b8a8 <__pow5mult>
 801a836:	9b07      	ldr	r3, [sp, #28]
 801a838:	2b01      	cmp	r3, #1
 801a83a:	4604      	mov	r4, r0
 801a83c:	f300 8095 	bgt.w	801a96a <_dtoa_r+0x802>
 801a840:	9b02      	ldr	r3, [sp, #8]
 801a842:	2b00      	cmp	r3, #0
 801a844:	f040 808b 	bne.w	801a95e <_dtoa_r+0x7f6>
 801a848:	9b03      	ldr	r3, [sp, #12]
 801a84a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a84e:	2a00      	cmp	r2, #0
 801a850:	f040 8087 	bne.w	801a962 <_dtoa_r+0x7fa>
 801a854:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a858:	0d12      	lsrs	r2, r2, #20
 801a85a:	0512      	lsls	r2, r2, #20
 801a85c:	2a00      	cmp	r2, #0
 801a85e:	f000 8082 	beq.w	801a966 <_dtoa_r+0x7fe>
 801a862:	9b05      	ldr	r3, [sp, #20]
 801a864:	3301      	adds	r3, #1
 801a866:	9305      	str	r3, [sp, #20]
 801a868:	9b06      	ldr	r3, [sp, #24]
 801a86a:	3301      	adds	r3, #1
 801a86c:	9306      	str	r3, [sp, #24]
 801a86e:	2301      	movs	r3, #1
 801a870:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a874:	2b00      	cmp	r3, #0
 801a876:	f000 81af 	beq.w	801abd8 <_dtoa_r+0xa70>
 801a87a:	6922      	ldr	r2, [r4, #16]
 801a87c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a880:	6910      	ldr	r0, [r2, #16]
 801a882:	f000 ff05 	bl	801b690 <__hi0bits>
 801a886:	f1c0 0020 	rsb	r0, r0, #32
 801a88a:	9b06      	ldr	r3, [sp, #24]
 801a88c:	4418      	add	r0, r3
 801a88e:	f010 001f 	ands.w	r0, r0, #31
 801a892:	d076      	beq.n	801a982 <_dtoa_r+0x81a>
 801a894:	f1c0 0220 	rsb	r2, r0, #32
 801a898:	2a04      	cmp	r2, #4
 801a89a:	dd69      	ble.n	801a970 <_dtoa_r+0x808>
 801a89c:	9b05      	ldr	r3, [sp, #20]
 801a89e:	f1c0 001c 	rsb	r0, r0, #28
 801a8a2:	4403      	add	r3, r0
 801a8a4:	9305      	str	r3, [sp, #20]
 801a8a6:	9b06      	ldr	r3, [sp, #24]
 801a8a8:	4406      	add	r6, r0
 801a8aa:	4403      	add	r3, r0
 801a8ac:	9306      	str	r3, [sp, #24]
 801a8ae:	9b05      	ldr	r3, [sp, #20]
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	dd05      	ble.n	801a8c0 <_dtoa_r+0x758>
 801a8b4:	9901      	ldr	r1, [sp, #4]
 801a8b6:	461a      	mov	r2, r3
 801a8b8:	4648      	mov	r0, r9
 801a8ba:	f001 f84f 	bl	801b95c <__lshift>
 801a8be:	9001      	str	r0, [sp, #4]
 801a8c0:	9b06      	ldr	r3, [sp, #24]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	dd05      	ble.n	801a8d2 <_dtoa_r+0x76a>
 801a8c6:	4621      	mov	r1, r4
 801a8c8:	461a      	mov	r2, r3
 801a8ca:	4648      	mov	r0, r9
 801a8cc:	f001 f846 	bl	801b95c <__lshift>
 801a8d0:	4604      	mov	r4, r0
 801a8d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d056      	beq.n	801a986 <_dtoa_r+0x81e>
 801a8d8:	9801      	ldr	r0, [sp, #4]
 801a8da:	4621      	mov	r1, r4
 801a8dc:	f001 f8aa 	bl	801ba34 <__mcmp>
 801a8e0:	2800      	cmp	r0, #0
 801a8e2:	da50      	bge.n	801a986 <_dtoa_r+0x81e>
 801a8e4:	f108 33ff 	add.w	r3, r8, #4294967295
 801a8e8:	9304      	str	r3, [sp, #16]
 801a8ea:	9901      	ldr	r1, [sp, #4]
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	220a      	movs	r2, #10
 801a8f0:	4648      	mov	r0, r9
 801a8f2:	f000 fe3d 	bl	801b570 <__multadd>
 801a8f6:	9b08      	ldr	r3, [sp, #32]
 801a8f8:	9001      	str	r0, [sp, #4]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	f000 816e 	beq.w	801abdc <_dtoa_r+0xa74>
 801a900:	4629      	mov	r1, r5
 801a902:	2300      	movs	r3, #0
 801a904:	220a      	movs	r2, #10
 801a906:	4648      	mov	r0, r9
 801a908:	f000 fe32 	bl	801b570 <__multadd>
 801a90c:	f1bb 0f00 	cmp.w	fp, #0
 801a910:	4605      	mov	r5, r0
 801a912:	dc64      	bgt.n	801a9de <_dtoa_r+0x876>
 801a914:	9b07      	ldr	r3, [sp, #28]
 801a916:	2b02      	cmp	r3, #2
 801a918:	dc3e      	bgt.n	801a998 <_dtoa_r+0x830>
 801a91a:	e060      	b.n	801a9de <_dtoa_r+0x876>
 801a91c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a91e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801a922:	e73c      	b.n	801a79e <_dtoa_r+0x636>
 801a924:	f10a 34ff 	add.w	r4, sl, #4294967295
 801a928:	42a3      	cmp	r3, r4
 801a92a:	bfbf      	itttt	lt
 801a92c:	1ae2      	sublt	r2, r4, r3
 801a92e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801a930:	189b      	addlt	r3, r3, r2
 801a932:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801a934:	bfae      	itee	ge
 801a936:	1b1c      	subge	r4, r3, r4
 801a938:	4623      	movlt	r3, r4
 801a93a:	2400      	movlt	r4, #0
 801a93c:	f1ba 0f00 	cmp.w	sl, #0
 801a940:	bfb5      	itete	lt
 801a942:	9a05      	ldrlt	r2, [sp, #20]
 801a944:	9e05      	ldrge	r6, [sp, #20]
 801a946:	eba2 060a 	sublt.w	r6, r2, sl
 801a94a:	4652      	movge	r2, sl
 801a94c:	bfb8      	it	lt
 801a94e:	2200      	movlt	r2, #0
 801a950:	e727      	b.n	801a7a2 <_dtoa_r+0x63a>
 801a952:	9e05      	ldr	r6, [sp, #20]
 801a954:	9d08      	ldr	r5, [sp, #32]
 801a956:	461c      	mov	r4, r3
 801a958:	e730      	b.n	801a7bc <_dtoa_r+0x654>
 801a95a:	461a      	mov	r2, r3
 801a95c:	e758      	b.n	801a810 <_dtoa_r+0x6a8>
 801a95e:	2300      	movs	r3, #0
 801a960:	e786      	b.n	801a870 <_dtoa_r+0x708>
 801a962:	9b02      	ldr	r3, [sp, #8]
 801a964:	e784      	b.n	801a870 <_dtoa_r+0x708>
 801a966:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a968:	e783      	b.n	801a872 <_dtoa_r+0x70a>
 801a96a:	2300      	movs	r3, #0
 801a96c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a96e:	e784      	b.n	801a87a <_dtoa_r+0x712>
 801a970:	d09d      	beq.n	801a8ae <_dtoa_r+0x746>
 801a972:	9b05      	ldr	r3, [sp, #20]
 801a974:	321c      	adds	r2, #28
 801a976:	4413      	add	r3, r2
 801a978:	9305      	str	r3, [sp, #20]
 801a97a:	9b06      	ldr	r3, [sp, #24]
 801a97c:	4416      	add	r6, r2
 801a97e:	4413      	add	r3, r2
 801a980:	e794      	b.n	801a8ac <_dtoa_r+0x744>
 801a982:	4602      	mov	r2, r0
 801a984:	e7f5      	b.n	801a972 <_dtoa_r+0x80a>
 801a986:	f1ba 0f00 	cmp.w	sl, #0
 801a98a:	f8cd 8010 	str.w	r8, [sp, #16]
 801a98e:	46d3      	mov	fp, sl
 801a990:	dc21      	bgt.n	801a9d6 <_dtoa_r+0x86e>
 801a992:	9b07      	ldr	r3, [sp, #28]
 801a994:	2b02      	cmp	r3, #2
 801a996:	dd1e      	ble.n	801a9d6 <_dtoa_r+0x86e>
 801a998:	f1bb 0f00 	cmp.w	fp, #0
 801a99c:	f47f aeb7 	bne.w	801a70e <_dtoa_r+0x5a6>
 801a9a0:	4621      	mov	r1, r4
 801a9a2:	465b      	mov	r3, fp
 801a9a4:	2205      	movs	r2, #5
 801a9a6:	4648      	mov	r0, r9
 801a9a8:	f000 fde2 	bl	801b570 <__multadd>
 801a9ac:	4601      	mov	r1, r0
 801a9ae:	4604      	mov	r4, r0
 801a9b0:	9801      	ldr	r0, [sp, #4]
 801a9b2:	f001 f83f 	bl	801ba34 <__mcmp>
 801a9b6:	2800      	cmp	r0, #0
 801a9b8:	f77f aea9 	ble.w	801a70e <_dtoa_r+0x5a6>
 801a9bc:	463e      	mov	r6, r7
 801a9be:	2331      	movs	r3, #49	@ 0x31
 801a9c0:	f806 3b01 	strb.w	r3, [r6], #1
 801a9c4:	9b04      	ldr	r3, [sp, #16]
 801a9c6:	3301      	adds	r3, #1
 801a9c8:	9304      	str	r3, [sp, #16]
 801a9ca:	e6a4      	b.n	801a716 <_dtoa_r+0x5ae>
 801a9cc:	f8cd 8010 	str.w	r8, [sp, #16]
 801a9d0:	4654      	mov	r4, sl
 801a9d2:	4625      	mov	r5, r4
 801a9d4:	e7f2      	b.n	801a9bc <_dtoa_r+0x854>
 801a9d6:	9b08      	ldr	r3, [sp, #32]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	f000 8103 	beq.w	801abe4 <_dtoa_r+0xa7c>
 801a9de:	2e00      	cmp	r6, #0
 801a9e0:	dd05      	ble.n	801a9ee <_dtoa_r+0x886>
 801a9e2:	4629      	mov	r1, r5
 801a9e4:	4632      	mov	r2, r6
 801a9e6:	4648      	mov	r0, r9
 801a9e8:	f000 ffb8 	bl	801b95c <__lshift>
 801a9ec:	4605      	mov	r5, r0
 801a9ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d058      	beq.n	801aaa6 <_dtoa_r+0x93e>
 801a9f4:	6869      	ldr	r1, [r5, #4]
 801a9f6:	4648      	mov	r0, r9
 801a9f8:	f000 fd58 	bl	801b4ac <_Balloc>
 801a9fc:	4606      	mov	r6, r0
 801a9fe:	b928      	cbnz	r0, 801aa0c <_dtoa_r+0x8a4>
 801aa00:	4b82      	ldr	r3, [pc, #520]	@ (801ac0c <_dtoa_r+0xaa4>)
 801aa02:	4602      	mov	r2, r0
 801aa04:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801aa08:	f7ff bbc7 	b.w	801a19a <_dtoa_r+0x32>
 801aa0c:	692a      	ldr	r2, [r5, #16]
 801aa0e:	3202      	adds	r2, #2
 801aa10:	0092      	lsls	r2, r2, #2
 801aa12:	f105 010c 	add.w	r1, r5, #12
 801aa16:	300c      	adds	r0, #12
 801aa18:	f7ff fb05 	bl	801a026 <memcpy>
 801aa1c:	2201      	movs	r2, #1
 801aa1e:	4631      	mov	r1, r6
 801aa20:	4648      	mov	r0, r9
 801aa22:	f000 ff9b 	bl	801b95c <__lshift>
 801aa26:	1c7b      	adds	r3, r7, #1
 801aa28:	9305      	str	r3, [sp, #20]
 801aa2a:	eb07 030b 	add.w	r3, r7, fp
 801aa2e:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa30:	9b02      	ldr	r3, [sp, #8]
 801aa32:	f003 0301 	and.w	r3, r3, #1
 801aa36:	46a8      	mov	r8, r5
 801aa38:	9308      	str	r3, [sp, #32]
 801aa3a:	4605      	mov	r5, r0
 801aa3c:	9b05      	ldr	r3, [sp, #20]
 801aa3e:	9801      	ldr	r0, [sp, #4]
 801aa40:	4621      	mov	r1, r4
 801aa42:	f103 3bff 	add.w	fp, r3, #4294967295
 801aa46:	f7ff fb07 	bl	801a058 <quorem>
 801aa4a:	4641      	mov	r1, r8
 801aa4c:	9002      	str	r0, [sp, #8]
 801aa4e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801aa52:	9801      	ldr	r0, [sp, #4]
 801aa54:	f000 ffee 	bl	801ba34 <__mcmp>
 801aa58:	462a      	mov	r2, r5
 801aa5a:	9006      	str	r0, [sp, #24]
 801aa5c:	4621      	mov	r1, r4
 801aa5e:	4648      	mov	r0, r9
 801aa60:	f001 f804 	bl	801ba6c <__mdiff>
 801aa64:	68c2      	ldr	r2, [r0, #12]
 801aa66:	4606      	mov	r6, r0
 801aa68:	b9fa      	cbnz	r2, 801aaaa <_dtoa_r+0x942>
 801aa6a:	4601      	mov	r1, r0
 801aa6c:	9801      	ldr	r0, [sp, #4]
 801aa6e:	f000 ffe1 	bl	801ba34 <__mcmp>
 801aa72:	4602      	mov	r2, r0
 801aa74:	4631      	mov	r1, r6
 801aa76:	4648      	mov	r0, r9
 801aa78:	920a      	str	r2, [sp, #40]	@ 0x28
 801aa7a:	f000 fd57 	bl	801b52c <_Bfree>
 801aa7e:	9b07      	ldr	r3, [sp, #28]
 801aa80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aa82:	9e05      	ldr	r6, [sp, #20]
 801aa84:	ea43 0102 	orr.w	r1, r3, r2
 801aa88:	9b08      	ldr	r3, [sp, #32]
 801aa8a:	4319      	orrs	r1, r3
 801aa8c:	d10f      	bne.n	801aaae <_dtoa_r+0x946>
 801aa8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801aa92:	d028      	beq.n	801aae6 <_dtoa_r+0x97e>
 801aa94:	9b06      	ldr	r3, [sp, #24]
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	dd02      	ble.n	801aaa0 <_dtoa_r+0x938>
 801aa9a:	9b02      	ldr	r3, [sp, #8]
 801aa9c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801aaa0:	f88b a000 	strb.w	sl, [fp]
 801aaa4:	e639      	b.n	801a71a <_dtoa_r+0x5b2>
 801aaa6:	4628      	mov	r0, r5
 801aaa8:	e7bd      	b.n	801aa26 <_dtoa_r+0x8be>
 801aaaa:	2201      	movs	r2, #1
 801aaac:	e7e2      	b.n	801aa74 <_dtoa_r+0x90c>
 801aaae:	9b06      	ldr	r3, [sp, #24]
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	db04      	blt.n	801aabe <_dtoa_r+0x956>
 801aab4:	9907      	ldr	r1, [sp, #28]
 801aab6:	430b      	orrs	r3, r1
 801aab8:	9908      	ldr	r1, [sp, #32]
 801aaba:	430b      	orrs	r3, r1
 801aabc:	d120      	bne.n	801ab00 <_dtoa_r+0x998>
 801aabe:	2a00      	cmp	r2, #0
 801aac0:	ddee      	ble.n	801aaa0 <_dtoa_r+0x938>
 801aac2:	9901      	ldr	r1, [sp, #4]
 801aac4:	2201      	movs	r2, #1
 801aac6:	4648      	mov	r0, r9
 801aac8:	f000 ff48 	bl	801b95c <__lshift>
 801aacc:	4621      	mov	r1, r4
 801aace:	9001      	str	r0, [sp, #4]
 801aad0:	f000 ffb0 	bl	801ba34 <__mcmp>
 801aad4:	2800      	cmp	r0, #0
 801aad6:	dc03      	bgt.n	801aae0 <_dtoa_r+0x978>
 801aad8:	d1e2      	bne.n	801aaa0 <_dtoa_r+0x938>
 801aada:	f01a 0f01 	tst.w	sl, #1
 801aade:	d0df      	beq.n	801aaa0 <_dtoa_r+0x938>
 801aae0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801aae4:	d1d9      	bne.n	801aa9a <_dtoa_r+0x932>
 801aae6:	2339      	movs	r3, #57	@ 0x39
 801aae8:	f88b 3000 	strb.w	r3, [fp]
 801aaec:	4633      	mov	r3, r6
 801aaee:	461e      	mov	r6, r3
 801aaf0:	3b01      	subs	r3, #1
 801aaf2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801aaf6:	2a39      	cmp	r2, #57	@ 0x39
 801aaf8:	d053      	beq.n	801aba2 <_dtoa_r+0xa3a>
 801aafa:	3201      	adds	r2, #1
 801aafc:	701a      	strb	r2, [r3, #0]
 801aafe:	e60c      	b.n	801a71a <_dtoa_r+0x5b2>
 801ab00:	2a00      	cmp	r2, #0
 801ab02:	dd07      	ble.n	801ab14 <_dtoa_r+0x9ac>
 801ab04:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801ab08:	d0ed      	beq.n	801aae6 <_dtoa_r+0x97e>
 801ab0a:	f10a 0301 	add.w	r3, sl, #1
 801ab0e:	f88b 3000 	strb.w	r3, [fp]
 801ab12:	e602      	b.n	801a71a <_dtoa_r+0x5b2>
 801ab14:	9b05      	ldr	r3, [sp, #20]
 801ab16:	9a05      	ldr	r2, [sp, #20]
 801ab18:	f803 ac01 	strb.w	sl, [r3, #-1]
 801ab1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab1e:	4293      	cmp	r3, r2
 801ab20:	d029      	beq.n	801ab76 <_dtoa_r+0xa0e>
 801ab22:	9901      	ldr	r1, [sp, #4]
 801ab24:	2300      	movs	r3, #0
 801ab26:	220a      	movs	r2, #10
 801ab28:	4648      	mov	r0, r9
 801ab2a:	f000 fd21 	bl	801b570 <__multadd>
 801ab2e:	45a8      	cmp	r8, r5
 801ab30:	9001      	str	r0, [sp, #4]
 801ab32:	f04f 0300 	mov.w	r3, #0
 801ab36:	f04f 020a 	mov.w	r2, #10
 801ab3a:	4641      	mov	r1, r8
 801ab3c:	4648      	mov	r0, r9
 801ab3e:	d107      	bne.n	801ab50 <_dtoa_r+0x9e8>
 801ab40:	f000 fd16 	bl	801b570 <__multadd>
 801ab44:	4680      	mov	r8, r0
 801ab46:	4605      	mov	r5, r0
 801ab48:	9b05      	ldr	r3, [sp, #20]
 801ab4a:	3301      	adds	r3, #1
 801ab4c:	9305      	str	r3, [sp, #20]
 801ab4e:	e775      	b.n	801aa3c <_dtoa_r+0x8d4>
 801ab50:	f000 fd0e 	bl	801b570 <__multadd>
 801ab54:	4629      	mov	r1, r5
 801ab56:	4680      	mov	r8, r0
 801ab58:	2300      	movs	r3, #0
 801ab5a:	220a      	movs	r2, #10
 801ab5c:	4648      	mov	r0, r9
 801ab5e:	f000 fd07 	bl	801b570 <__multadd>
 801ab62:	4605      	mov	r5, r0
 801ab64:	e7f0      	b.n	801ab48 <_dtoa_r+0x9e0>
 801ab66:	f1bb 0f00 	cmp.w	fp, #0
 801ab6a:	bfcc      	ite	gt
 801ab6c:	465e      	movgt	r6, fp
 801ab6e:	2601      	movle	r6, #1
 801ab70:	443e      	add	r6, r7
 801ab72:	f04f 0800 	mov.w	r8, #0
 801ab76:	9901      	ldr	r1, [sp, #4]
 801ab78:	2201      	movs	r2, #1
 801ab7a:	4648      	mov	r0, r9
 801ab7c:	f000 feee 	bl	801b95c <__lshift>
 801ab80:	4621      	mov	r1, r4
 801ab82:	9001      	str	r0, [sp, #4]
 801ab84:	f000 ff56 	bl	801ba34 <__mcmp>
 801ab88:	2800      	cmp	r0, #0
 801ab8a:	dcaf      	bgt.n	801aaec <_dtoa_r+0x984>
 801ab8c:	d102      	bne.n	801ab94 <_dtoa_r+0xa2c>
 801ab8e:	f01a 0f01 	tst.w	sl, #1
 801ab92:	d1ab      	bne.n	801aaec <_dtoa_r+0x984>
 801ab94:	4633      	mov	r3, r6
 801ab96:	461e      	mov	r6, r3
 801ab98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ab9c:	2a30      	cmp	r2, #48	@ 0x30
 801ab9e:	d0fa      	beq.n	801ab96 <_dtoa_r+0xa2e>
 801aba0:	e5bb      	b.n	801a71a <_dtoa_r+0x5b2>
 801aba2:	429f      	cmp	r7, r3
 801aba4:	d1a3      	bne.n	801aaee <_dtoa_r+0x986>
 801aba6:	9b04      	ldr	r3, [sp, #16]
 801aba8:	3301      	adds	r3, #1
 801abaa:	9304      	str	r3, [sp, #16]
 801abac:	2331      	movs	r3, #49	@ 0x31
 801abae:	703b      	strb	r3, [r7, #0]
 801abb0:	e5b3      	b.n	801a71a <_dtoa_r+0x5b2>
 801abb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801abb4:	4f16      	ldr	r7, [pc, #88]	@ (801ac10 <_dtoa_r+0xaa8>)
 801abb6:	b11b      	cbz	r3, 801abc0 <_dtoa_r+0xa58>
 801abb8:	f107 0308 	add.w	r3, r7, #8
 801abbc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801abbe:	6013      	str	r3, [r2, #0]
 801abc0:	4638      	mov	r0, r7
 801abc2:	b011      	add	sp, #68	@ 0x44
 801abc4:	ecbd 8b02 	vpop	{d8}
 801abc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abcc:	9b07      	ldr	r3, [sp, #28]
 801abce:	2b01      	cmp	r3, #1
 801abd0:	f77f ae36 	ble.w	801a840 <_dtoa_r+0x6d8>
 801abd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801abd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801abd8:	2001      	movs	r0, #1
 801abda:	e656      	b.n	801a88a <_dtoa_r+0x722>
 801abdc:	f1bb 0f00 	cmp.w	fp, #0
 801abe0:	f77f aed7 	ble.w	801a992 <_dtoa_r+0x82a>
 801abe4:	463e      	mov	r6, r7
 801abe6:	9801      	ldr	r0, [sp, #4]
 801abe8:	4621      	mov	r1, r4
 801abea:	f7ff fa35 	bl	801a058 <quorem>
 801abee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801abf2:	f806 ab01 	strb.w	sl, [r6], #1
 801abf6:	1bf2      	subs	r2, r6, r7
 801abf8:	4593      	cmp	fp, r2
 801abfa:	ddb4      	ble.n	801ab66 <_dtoa_r+0x9fe>
 801abfc:	9901      	ldr	r1, [sp, #4]
 801abfe:	2300      	movs	r3, #0
 801ac00:	220a      	movs	r2, #10
 801ac02:	4648      	mov	r0, r9
 801ac04:	f000 fcb4 	bl	801b570 <__multadd>
 801ac08:	9001      	str	r0, [sp, #4]
 801ac0a:	e7ec      	b.n	801abe6 <_dtoa_r+0xa7e>
 801ac0c:	0801e099 	.word	0x0801e099
 801ac10:	0801e01d 	.word	0x0801e01d

0801ac14 <_free_r>:
 801ac14:	b538      	push	{r3, r4, r5, lr}
 801ac16:	4605      	mov	r5, r0
 801ac18:	2900      	cmp	r1, #0
 801ac1a:	d041      	beq.n	801aca0 <_free_r+0x8c>
 801ac1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ac20:	1f0c      	subs	r4, r1, #4
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	bfb8      	it	lt
 801ac26:	18e4      	addlt	r4, r4, r3
 801ac28:	f000 fc34 	bl	801b494 <__malloc_lock>
 801ac2c:	4a1d      	ldr	r2, [pc, #116]	@ (801aca4 <_free_r+0x90>)
 801ac2e:	6813      	ldr	r3, [r2, #0]
 801ac30:	b933      	cbnz	r3, 801ac40 <_free_r+0x2c>
 801ac32:	6063      	str	r3, [r4, #4]
 801ac34:	6014      	str	r4, [r2, #0]
 801ac36:	4628      	mov	r0, r5
 801ac38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac3c:	f000 bc30 	b.w	801b4a0 <__malloc_unlock>
 801ac40:	42a3      	cmp	r3, r4
 801ac42:	d908      	bls.n	801ac56 <_free_r+0x42>
 801ac44:	6820      	ldr	r0, [r4, #0]
 801ac46:	1821      	adds	r1, r4, r0
 801ac48:	428b      	cmp	r3, r1
 801ac4a:	bf01      	itttt	eq
 801ac4c:	6819      	ldreq	r1, [r3, #0]
 801ac4e:	685b      	ldreq	r3, [r3, #4]
 801ac50:	1809      	addeq	r1, r1, r0
 801ac52:	6021      	streq	r1, [r4, #0]
 801ac54:	e7ed      	b.n	801ac32 <_free_r+0x1e>
 801ac56:	461a      	mov	r2, r3
 801ac58:	685b      	ldr	r3, [r3, #4]
 801ac5a:	b10b      	cbz	r3, 801ac60 <_free_r+0x4c>
 801ac5c:	42a3      	cmp	r3, r4
 801ac5e:	d9fa      	bls.n	801ac56 <_free_r+0x42>
 801ac60:	6811      	ldr	r1, [r2, #0]
 801ac62:	1850      	adds	r0, r2, r1
 801ac64:	42a0      	cmp	r0, r4
 801ac66:	d10b      	bne.n	801ac80 <_free_r+0x6c>
 801ac68:	6820      	ldr	r0, [r4, #0]
 801ac6a:	4401      	add	r1, r0
 801ac6c:	1850      	adds	r0, r2, r1
 801ac6e:	4283      	cmp	r3, r0
 801ac70:	6011      	str	r1, [r2, #0]
 801ac72:	d1e0      	bne.n	801ac36 <_free_r+0x22>
 801ac74:	6818      	ldr	r0, [r3, #0]
 801ac76:	685b      	ldr	r3, [r3, #4]
 801ac78:	6053      	str	r3, [r2, #4]
 801ac7a:	4408      	add	r0, r1
 801ac7c:	6010      	str	r0, [r2, #0]
 801ac7e:	e7da      	b.n	801ac36 <_free_r+0x22>
 801ac80:	d902      	bls.n	801ac88 <_free_r+0x74>
 801ac82:	230c      	movs	r3, #12
 801ac84:	602b      	str	r3, [r5, #0]
 801ac86:	e7d6      	b.n	801ac36 <_free_r+0x22>
 801ac88:	6820      	ldr	r0, [r4, #0]
 801ac8a:	1821      	adds	r1, r4, r0
 801ac8c:	428b      	cmp	r3, r1
 801ac8e:	bf04      	itt	eq
 801ac90:	6819      	ldreq	r1, [r3, #0]
 801ac92:	685b      	ldreq	r3, [r3, #4]
 801ac94:	6063      	str	r3, [r4, #4]
 801ac96:	bf04      	itt	eq
 801ac98:	1809      	addeq	r1, r1, r0
 801ac9a:	6021      	streq	r1, [r4, #0]
 801ac9c:	6054      	str	r4, [r2, #4]
 801ac9e:	e7ca      	b.n	801ac36 <_free_r+0x22>
 801aca0:	bd38      	pop	{r3, r4, r5, pc}
 801aca2:	bf00      	nop
 801aca4:	240153b4 	.word	0x240153b4

0801aca8 <rshift>:
 801aca8:	6903      	ldr	r3, [r0, #16]
 801acaa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801acae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801acb2:	ea4f 1261 	mov.w	r2, r1, asr #5
 801acb6:	f100 0414 	add.w	r4, r0, #20
 801acba:	dd45      	ble.n	801ad48 <rshift+0xa0>
 801acbc:	f011 011f 	ands.w	r1, r1, #31
 801acc0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801acc4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801acc8:	d10c      	bne.n	801ace4 <rshift+0x3c>
 801acca:	f100 0710 	add.w	r7, r0, #16
 801acce:	4629      	mov	r1, r5
 801acd0:	42b1      	cmp	r1, r6
 801acd2:	d334      	bcc.n	801ad3e <rshift+0x96>
 801acd4:	1a9b      	subs	r3, r3, r2
 801acd6:	009b      	lsls	r3, r3, #2
 801acd8:	1eea      	subs	r2, r5, #3
 801acda:	4296      	cmp	r6, r2
 801acdc:	bf38      	it	cc
 801acde:	2300      	movcc	r3, #0
 801ace0:	4423      	add	r3, r4
 801ace2:	e015      	b.n	801ad10 <rshift+0x68>
 801ace4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ace8:	f1c1 0820 	rsb	r8, r1, #32
 801acec:	40cf      	lsrs	r7, r1
 801acee:	f105 0e04 	add.w	lr, r5, #4
 801acf2:	46a1      	mov	r9, r4
 801acf4:	4576      	cmp	r6, lr
 801acf6:	46f4      	mov	ip, lr
 801acf8:	d815      	bhi.n	801ad26 <rshift+0x7e>
 801acfa:	1a9a      	subs	r2, r3, r2
 801acfc:	0092      	lsls	r2, r2, #2
 801acfe:	3a04      	subs	r2, #4
 801ad00:	3501      	adds	r5, #1
 801ad02:	42ae      	cmp	r6, r5
 801ad04:	bf38      	it	cc
 801ad06:	2200      	movcc	r2, #0
 801ad08:	18a3      	adds	r3, r4, r2
 801ad0a:	50a7      	str	r7, [r4, r2]
 801ad0c:	b107      	cbz	r7, 801ad10 <rshift+0x68>
 801ad0e:	3304      	adds	r3, #4
 801ad10:	1b1a      	subs	r2, r3, r4
 801ad12:	42a3      	cmp	r3, r4
 801ad14:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ad18:	bf08      	it	eq
 801ad1a:	2300      	moveq	r3, #0
 801ad1c:	6102      	str	r2, [r0, #16]
 801ad1e:	bf08      	it	eq
 801ad20:	6143      	streq	r3, [r0, #20]
 801ad22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ad26:	f8dc c000 	ldr.w	ip, [ip]
 801ad2a:	fa0c fc08 	lsl.w	ip, ip, r8
 801ad2e:	ea4c 0707 	orr.w	r7, ip, r7
 801ad32:	f849 7b04 	str.w	r7, [r9], #4
 801ad36:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ad3a:	40cf      	lsrs	r7, r1
 801ad3c:	e7da      	b.n	801acf4 <rshift+0x4c>
 801ad3e:	f851 cb04 	ldr.w	ip, [r1], #4
 801ad42:	f847 cf04 	str.w	ip, [r7, #4]!
 801ad46:	e7c3      	b.n	801acd0 <rshift+0x28>
 801ad48:	4623      	mov	r3, r4
 801ad4a:	e7e1      	b.n	801ad10 <rshift+0x68>

0801ad4c <__hexdig_fun>:
 801ad4c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801ad50:	2b09      	cmp	r3, #9
 801ad52:	d802      	bhi.n	801ad5a <__hexdig_fun+0xe>
 801ad54:	3820      	subs	r0, #32
 801ad56:	b2c0      	uxtb	r0, r0
 801ad58:	4770      	bx	lr
 801ad5a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ad5e:	2b05      	cmp	r3, #5
 801ad60:	d801      	bhi.n	801ad66 <__hexdig_fun+0x1a>
 801ad62:	3847      	subs	r0, #71	@ 0x47
 801ad64:	e7f7      	b.n	801ad56 <__hexdig_fun+0xa>
 801ad66:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801ad6a:	2b05      	cmp	r3, #5
 801ad6c:	d801      	bhi.n	801ad72 <__hexdig_fun+0x26>
 801ad6e:	3827      	subs	r0, #39	@ 0x27
 801ad70:	e7f1      	b.n	801ad56 <__hexdig_fun+0xa>
 801ad72:	2000      	movs	r0, #0
 801ad74:	4770      	bx	lr
	...

0801ad78 <__gethex>:
 801ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad7c:	b085      	sub	sp, #20
 801ad7e:	468a      	mov	sl, r1
 801ad80:	9302      	str	r3, [sp, #8]
 801ad82:	680b      	ldr	r3, [r1, #0]
 801ad84:	9001      	str	r0, [sp, #4]
 801ad86:	4690      	mov	r8, r2
 801ad88:	1c9c      	adds	r4, r3, #2
 801ad8a:	46a1      	mov	r9, r4
 801ad8c:	f814 0b01 	ldrb.w	r0, [r4], #1
 801ad90:	2830      	cmp	r0, #48	@ 0x30
 801ad92:	d0fa      	beq.n	801ad8a <__gethex+0x12>
 801ad94:	eba9 0303 	sub.w	r3, r9, r3
 801ad98:	f1a3 0b02 	sub.w	fp, r3, #2
 801ad9c:	f7ff ffd6 	bl	801ad4c <__hexdig_fun>
 801ada0:	4605      	mov	r5, r0
 801ada2:	2800      	cmp	r0, #0
 801ada4:	d168      	bne.n	801ae78 <__gethex+0x100>
 801ada6:	49a0      	ldr	r1, [pc, #640]	@ (801b028 <__gethex+0x2b0>)
 801ada8:	2201      	movs	r2, #1
 801adaa:	4648      	mov	r0, r9
 801adac:	f7ff f8b2 	bl	8019f14 <strncmp>
 801adb0:	4607      	mov	r7, r0
 801adb2:	2800      	cmp	r0, #0
 801adb4:	d167      	bne.n	801ae86 <__gethex+0x10e>
 801adb6:	f899 0001 	ldrb.w	r0, [r9, #1]
 801adba:	4626      	mov	r6, r4
 801adbc:	f7ff ffc6 	bl	801ad4c <__hexdig_fun>
 801adc0:	2800      	cmp	r0, #0
 801adc2:	d062      	beq.n	801ae8a <__gethex+0x112>
 801adc4:	4623      	mov	r3, r4
 801adc6:	7818      	ldrb	r0, [r3, #0]
 801adc8:	2830      	cmp	r0, #48	@ 0x30
 801adca:	4699      	mov	r9, r3
 801adcc:	f103 0301 	add.w	r3, r3, #1
 801add0:	d0f9      	beq.n	801adc6 <__gethex+0x4e>
 801add2:	f7ff ffbb 	bl	801ad4c <__hexdig_fun>
 801add6:	fab0 f580 	clz	r5, r0
 801adda:	096d      	lsrs	r5, r5, #5
 801addc:	f04f 0b01 	mov.w	fp, #1
 801ade0:	464a      	mov	r2, r9
 801ade2:	4616      	mov	r6, r2
 801ade4:	3201      	adds	r2, #1
 801ade6:	7830      	ldrb	r0, [r6, #0]
 801ade8:	f7ff ffb0 	bl	801ad4c <__hexdig_fun>
 801adec:	2800      	cmp	r0, #0
 801adee:	d1f8      	bne.n	801ade2 <__gethex+0x6a>
 801adf0:	498d      	ldr	r1, [pc, #564]	@ (801b028 <__gethex+0x2b0>)
 801adf2:	2201      	movs	r2, #1
 801adf4:	4630      	mov	r0, r6
 801adf6:	f7ff f88d 	bl	8019f14 <strncmp>
 801adfa:	2800      	cmp	r0, #0
 801adfc:	d13f      	bne.n	801ae7e <__gethex+0x106>
 801adfe:	b944      	cbnz	r4, 801ae12 <__gethex+0x9a>
 801ae00:	1c74      	adds	r4, r6, #1
 801ae02:	4622      	mov	r2, r4
 801ae04:	4616      	mov	r6, r2
 801ae06:	3201      	adds	r2, #1
 801ae08:	7830      	ldrb	r0, [r6, #0]
 801ae0a:	f7ff ff9f 	bl	801ad4c <__hexdig_fun>
 801ae0e:	2800      	cmp	r0, #0
 801ae10:	d1f8      	bne.n	801ae04 <__gethex+0x8c>
 801ae12:	1ba4      	subs	r4, r4, r6
 801ae14:	00a7      	lsls	r7, r4, #2
 801ae16:	7833      	ldrb	r3, [r6, #0]
 801ae18:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801ae1c:	2b50      	cmp	r3, #80	@ 0x50
 801ae1e:	d13e      	bne.n	801ae9e <__gethex+0x126>
 801ae20:	7873      	ldrb	r3, [r6, #1]
 801ae22:	2b2b      	cmp	r3, #43	@ 0x2b
 801ae24:	d033      	beq.n	801ae8e <__gethex+0x116>
 801ae26:	2b2d      	cmp	r3, #45	@ 0x2d
 801ae28:	d034      	beq.n	801ae94 <__gethex+0x11c>
 801ae2a:	1c71      	adds	r1, r6, #1
 801ae2c:	2400      	movs	r4, #0
 801ae2e:	7808      	ldrb	r0, [r1, #0]
 801ae30:	f7ff ff8c 	bl	801ad4c <__hexdig_fun>
 801ae34:	1e43      	subs	r3, r0, #1
 801ae36:	b2db      	uxtb	r3, r3
 801ae38:	2b18      	cmp	r3, #24
 801ae3a:	d830      	bhi.n	801ae9e <__gethex+0x126>
 801ae3c:	f1a0 0210 	sub.w	r2, r0, #16
 801ae40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ae44:	f7ff ff82 	bl	801ad4c <__hexdig_fun>
 801ae48:	f100 3cff 	add.w	ip, r0, #4294967295
 801ae4c:	fa5f fc8c 	uxtb.w	ip, ip
 801ae50:	f1bc 0f18 	cmp.w	ip, #24
 801ae54:	f04f 030a 	mov.w	r3, #10
 801ae58:	d91e      	bls.n	801ae98 <__gethex+0x120>
 801ae5a:	b104      	cbz	r4, 801ae5e <__gethex+0xe6>
 801ae5c:	4252      	negs	r2, r2
 801ae5e:	4417      	add	r7, r2
 801ae60:	f8ca 1000 	str.w	r1, [sl]
 801ae64:	b1ed      	cbz	r5, 801aea2 <__gethex+0x12a>
 801ae66:	f1bb 0f00 	cmp.w	fp, #0
 801ae6a:	bf0c      	ite	eq
 801ae6c:	2506      	moveq	r5, #6
 801ae6e:	2500      	movne	r5, #0
 801ae70:	4628      	mov	r0, r5
 801ae72:	b005      	add	sp, #20
 801ae74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae78:	2500      	movs	r5, #0
 801ae7a:	462c      	mov	r4, r5
 801ae7c:	e7b0      	b.n	801ade0 <__gethex+0x68>
 801ae7e:	2c00      	cmp	r4, #0
 801ae80:	d1c7      	bne.n	801ae12 <__gethex+0x9a>
 801ae82:	4627      	mov	r7, r4
 801ae84:	e7c7      	b.n	801ae16 <__gethex+0x9e>
 801ae86:	464e      	mov	r6, r9
 801ae88:	462f      	mov	r7, r5
 801ae8a:	2501      	movs	r5, #1
 801ae8c:	e7c3      	b.n	801ae16 <__gethex+0x9e>
 801ae8e:	2400      	movs	r4, #0
 801ae90:	1cb1      	adds	r1, r6, #2
 801ae92:	e7cc      	b.n	801ae2e <__gethex+0xb6>
 801ae94:	2401      	movs	r4, #1
 801ae96:	e7fb      	b.n	801ae90 <__gethex+0x118>
 801ae98:	fb03 0002 	mla	r0, r3, r2, r0
 801ae9c:	e7ce      	b.n	801ae3c <__gethex+0xc4>
 801ae9e:	4631      	mov	r1, r6
 801aea0:	e7de      	b.n	801ae60 <__gethex+0xe8>
 801aea2:	eba6 0309 	sub.w	r3, r6, r9
 801aea6:	3b01      	subs	r3, #1
 801aea8:	4629      	mov	r1, r5
 801aeaa:	2b07      	cmp	r3, #7
 801aeac:	dc0a      	bgt.n	801aec4 <__gethex+0x14c>
 801aeae:	9801      	ldr	r0, [sp, #4]
 801aeb0:	f000 fafc 	bl	801b4ac <_Balloc>
 801aeb4:	4604      	mov	r4, r0
 801aeb6:	b940      	cbnz	r0, 801aeca <__gethex+0x152>
 801aeb8:	4b5c      	ldr	r3, [pc, #368]	@ (801b02c <__gethex+0x2b4>)
 801aeba:	4602      	mov	r2, r0
 801aebc:	21e4      	movs	r1, #228	@ 0xe4
 801aebe:	485c      	ldr	r0, [pc, #368]	@ (801b030 <__gethex+0x2b8>)
 801aec0:	f001 f9de 	bl	801c280 <__assert_func>
 801aec4:	3101      	adds	r1, #1
 801aec6:	105b      	asrs	r3, r3, #1
 801aec8:	e7ef      	b.n	801aeaa <__gethex+0x132>
 801aeca:	f100 0a14 	add.w	sl, r0, #20
 801aece:	2300      	movs	r3, #0
 801aed0:	4655      	mov	r5, sl
 801aed2:	469b      	mov	fp, r3
 801aed4:	45b1      	cmp	r9, r6
 801aed6:	d337      	bcc.n	801af48 <__gethex+0x1d0>
 801aed8:	f845 bb04 	str.w	fp, [r5], #4
 801aedc:	eba5 050a 	sub.w	r5, r5, sl
 801aee0:	10ad      	asrs	r5, r5, #2
 801aee2:	6125      	str	r5, [r4, #16]
 801aee4:	4658      	mov	r0, fp
 801aee6:	f000 fbd3 	bl	801b690 <__hi0bits>
 801aeea:	016d      	lsls	r5, r5, #5
 801aeec:	f8d8 6000 	ldr.w	r6, [r8]
 801aef0:	1a2d      	subs	r5, r5, r0
 801aef2:	42b5      	cmp	r5, r6
 801aef4:	dd54      	ble.n	801afa0 <__gethex+0x228>
 801aef6:	1bad      	subs	r5, r5, r6
 801aef8:	4629      	mov	r1, r5
 801aefa:	4620      	mov	r0, r4
 801aefc:	f000 ff64 	bl	801bdc8 <__any_on>
 801af00:	4681      	mov	r9, r0
 801af02:	b178      	cbz	r0, 801af24 <__gethex+0x1ac>
 801af04:	1e6b      	subs	r3, r5, #1
 801af06:	1159      	asrs	r1, r3, #5
 801af08:	f003 021f 	and.w	r2, r3, #31
 801af0c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801af10:	f04f 0901 	mov.w	r9, #1
 801af14:	fa09 f202 	lsl.w	r2, r9, r2
 801af18:	420a      	tst	r2, r1
 801af1a:	d003      	beq.n	801af24 <__gethex+0x1ac>
 801af1c:	454b      	cmp	r3, r9
 801af1e:	dc36      	bgt.n	801af8e <__gethex+0x216>
 801af20:	f04f 0902 	mov.w	r9, #2
 801af24:	4629      	mov	r1, r5
 801af26:	4620      	mov	r0, r4
 801af28:	f7ff febe 	bl	801aca8 <rshift>
 801af2c:	442f      	add	r7, r5
 801af2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801af32:	42bb      	cmp	r3, r7
 801af34:	da42      	bge.n	801afbc <__gethex+0x244>
 801af36:	9801      	ldr	r0, [sp, #4]
 801af38:	4621      	mov	r1, r4
 801af3a:	f000 faf7 	bl	801b52c <_Bfree>
 801af3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801af40:	2300      	movs	r3, #0
 801af42:	6013      	str	r3, [r2, #0]
 801af44:	25a3      	movs	r5, #163	@ 0xa3
 801af46:	e793      	b.n	801ae70 <__gethex+0xf8>
 801af48:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801af4c:	2a2e      	cmp	r2, #46	@ 0x2e
 801af4e:	d012      	beq.n	801af76 <__gethex+0x1fe>
 801af50:	2b20      	cmp	r3, #32
 801af52:	d104      	bne.n	801af5e <__gethex+0x1e6>
 801af54:	f845 bb04 	str.w	fp, [r5], #4
 801af58:	f04f 0b00 	mov.w	fp, #0
 801af5c:	465b      	mov	r3, fp
 801af5e:	7830      	ldrb	r0, [r6, #0]
 801af60:	9303      	str	r3, [sp, #12]
 801af62:	f7ff fef3 	bl	801ad4c <__hexdig_fun>
 801af66:	9b03      	ldr	r3, [sp, #12]
 801af68:	f000 000f 	and.w	r0, r0, #15
 801af6c:	4098      	lsls	r0, r3
 801af6e:	ea4b 0b00 	orr.w	fp, fp, r0
 801af72:	3304      	adds	r3, #4
 801af74:	e7ae      	b.n	801aed4 <__gethex+0x15c>
 801af76:	45b1      	cmp	r9, r6
 801af78:	d8ea      	bhi.n	801af50 <__gethex+0x1d8>
 801af7a:	492b      	ldr	r1, [pc, #172]	@ (801b028 <__gethex+0x2b0>)
 801af7c:	9303      	str	r3, [sp, #12]
 801af7e:	2201      	movs	r2, #1
 801af80:	4630      	mov	r0, r6
 801af82:	f7fe ffc7 	bl	8019f14 <strncmp>
 801af86:	9b03      	ldr	r3, [sp, #12]
 801af88:	2800      	cmp	r0, #0
 801af8a:	d1e1      	bne.n	801af50 <__gethex+0x1d8>
 801af8c:	e7a2      	b.n	801aed4 <__gethex+0x15c>
 801af8e:	1ea9      	subs	r1, r5, #2
 801af90:	4620      	mov	r0, r4
 801af92:	f000 ff19 	bl	801bdc8 <__any_on>
 801af96:	2800      	cmp	r0, #0
 801af98:	d0c2      	beq.n	801af20 <__gethex+0x1a8>
 801af9a:	f04f 0903 	mov.w	r9, #3
 801af9e:	e7c1      	b.n	801af24 <__gethex+0x1ac>
 801afa0:	da09      	bge.n	801afb6 <__gethex+0x23e>
 801afa2:	1b75      	subs	r5, r6, r5
 801afa4:	4621      	mov	r1, r4
 801afa6:	9801      	ldr	r0, [sp, #4]
 801afa8:	462a      	mov	r2, r5
 801afaa:	f000 fcd7 	bl	801b95c <__lshift>
 801afae:	1b7f      	subs	r7, r7, r5
 801afb0:	4604      	mov	r4, r0
 801afb2:	f100 0a14 	add.w	sl, r0, #20
 801afb6:	f04f 0900 	mov.w	r9, #0
 801afba:	e7b8      	b.n	801af2e <__gethex+0x1b6>
 801afbc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801afc0:	42bd      	cmp	r5, r7
 801afc2:	dd6f      	ble.n	801b0a4 <__gethex+0x32c>
 801afc4:	1bed      	subs	r5, r5, r7
 801afc6:	42ae      	cmp	r6, r5
 801afc8:	dc34      	bgt.n	801b034 <__gethex+0x2bc>
 801afca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801afce:	2b02      	cmp	r3, #2
 801afd0:	d022      	beq.n	801b018 <__gethex+0x2a0>
 801afd2:	2b03      	cmp	r3, #3
 801afd4:	d024      	beq.n	801b020 <__gethex+0x2a8>
 801afd6:	2b01      	cmp	r3, #1
 801afd8:	d115      	bne.n	801b006 <__gethex+0x28e>
 801afda:	42ae      	cmp	r6, r5
 801afdc:	d113      	bne.n	801b006 <__gethex+0x28e>
 801afde:	2e01      	cmp	r6, #1
 801afe0:	d10b      	bne.n	801affa <__gethex+0x282>
 801afe2:	9a02      	ldr	r2, [sp, #8]
 801afe4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801afe8:	6013      	str	r3, [r2, #0]
 801afea:	2301      	movs	r3, #1
 801afec:	6123      	str	r3, [r4, #16]
 801afee:	f8ca 3000 	str.w	r3, [sl]
 801aff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aff4:	2562      	movs	r5, #98	@ 0x62
 801aff6:	601c      	str	r4, [r3, #0]
 801aff8:	e73a      	b.n	801ae70 <__gethex+0xf8>
 801affa:	1e71      	subs	r1, r6, #1
 801affc:	4620      	mov	r0, r4
 801affe:	f000 fee3 	bl	801bdc8 <__any_on>
 801b002:	2800      	cmp	r0, #0
 801b004:	d1ed      	bne.n	801afe2 <__gethex+0x26a>
 801b006:	9801      	ldr	r0, [sp, #4]
 801b008:	4621      	mov	r1, r4
 801b00a:	f000 fa8f 	bl	801b52c <_Bfree>
 801b00e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b010:	2300      	movs	r3, #0
 801b012:	6013      	str	r3, [r2, #0]
 801b014:	2550      	movs	r5, #80	@ 0x50
 801b016:	e72b      	b.n	801ae70 <__gethex+0xf8>
 801b018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d1f3      	bne.n	801b006 <__gethex+0x28e>
 801b01e:	e7e0      	b.n	801afe2 <__gethex+0x26a>
 801b020:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b022:	2b00      	cmp	r3, #0
 801b024:	d1dd      	bne.n	801afe2 <__gethex+0x26a>
 801b026:	e7ee      	b.n	801b006 <__gethex+0x28e>
 801b028:	0801de88 	.word	0x0801de88
 801b02c:	0801e099 	.word	0x0801e099
 801b030:	0801e0aa 	.word	0x0801e0aa
 801b034:	1e6f      	subs	r7, r5, #1
 801b036:	f1b9 0f00 	cmp.w	r9, #0
 801b03a:	d130      	bne.n	801b09e <__gethex+0x326>
 801b03c:	b127      	cbz	r7, 801b048 <__gethex+0x2d0>
 801b03e:	4639      	mov	r1, r7
 801b040:	4620      	mov	r0, r4
 801b042:	f000 fec1 	bl	801bdc8 <__any_on>
 801b046:	4681      	mov	r9, r0
 801b048:	117a      	asrs	r2, r7, #5
 801b04a:	2301      	movs	r3, #1
 801b04c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b050:	f007 071f 	and.w	r7, r7, #31
 801b054:	40bb      	lsls	r3, r7
 801b056:	4213      	tst	r3, r2
 801b058:	4629      	mov	r1, r5
 801b05a:	4620      	mov	r0, r4
 801b05c:	bf18      	it	ne
 801b05e:	f049 0902 	orrne.w	r9, r9, #2
 801b062:	f7ff fe21 	bl	801aca8 <rshift>
 801b066:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801b06a:	1b76      	subs	r6, r6, r5
 801b06c:	2502      	movs	r5, #2
 801b06e:	f1b9 0f00 	cmp.w	r9, #0
 801b072:	d047      	beq.n	801b104 <__gethex+0x38c>
 801b074:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b078:	2b02      	cmp	r3, #2
 801b07a:	d015      	beq.n	801b0a8 <__gethex+0x330>
 801b07c:	2b03      	cmp	r3, #3
 801b07e:	d017      	beq.n	801b0b0 <__gethex+0x338>
 801b080:	2b01      	cmp	r3, #1
 801b082:	d109      	bne.n	801b098 <__gethex+0x320>
 801b084:	f019 0f02 	tst.w	r9, #2
 801b088:	d006      	beq.n	801b098 <__gethex+0x320>
 801b08a:	f8da 3000 	ldr.w	r3, [sl]
 801b08e:	ea49 0903 	orr.w	r9, r9, r3
 801b092:	f019 0f01 	tst.w	r9, #1
 801b096:	d10e      	bne.n	801b0b6 <__gethex+0x33e>
 801b098:	f045 0510 	orr.w	r5, r5, #16
 801b09c:	e032      	b.n	801b104 <__gethex+0x38c>
 801b09e:	f04f 0901 	mov.w	r9, #1
 801b0a2:	e7d1      	b.n	801b048 <__gethex+0x2d0>
 801b0a4:	2501      	movs	r5, #1
 801b0a6:	e7e2      	b.n	801b06e <__gethex+0x2f6>
 801b0a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b0aa:	f1c3 0301 	rsb	r3, r3, #1
 801b0ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b0b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d0f0      	beq.n	801b098 <__gethex+0x320>
 801b0b6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b0ba:	f104 0314 	add.w	r3, r4, #20
 801b0be:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b0c2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b0c6:	f04f 0c00 	mov.w	ip, #0
 801b0ca:	4618      	mov	r0, r3
 801b0cc:	f853 2b04 	ldr.w	r2, [r3], #4
 801b0d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b0d4:	d01b      	beq.n	801b10e <__gethex+0x396>
 801b0d6:	3201      	adds	r2, #1
 801b0d8:	6002      	str	r2, [r0, #0]
 801b0da:	2d02      	cmp	r5, #2
 801b0dc:	f104 0314 	add.w	r3, r4, #20
 801b0e0:	d13c      	bne.n	801b15c <__gethex+0x3e4>
 801b0e2:	f8d8 2000 	ldr.w	r2, [r8]
 801b0e6:	3a01      	subs	r2, #1
 801b0e8:	42b2      	cmp	r2, r6
 801b0ea:	d109      	bne.n	801b100 <__gethex+0x388>
 801b0ec:	1171      	asrs	r1, r6, #5
 801b0ee:	2201      	movs	r2, #1
 801b0f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b0f4:	f006 061f 	and.w	r6, r6, #31
 801b0f8:	fa02 f606 	lsl.w	r6, r2, r6
 801b0fc:	421e      	tst	r6, r3
 801b0fe:	d13a      	bne.n	801b176 <__gethex+0x3fe>
 801b100:	f045 0520 	orr.w	r5, r5, #32
 801b104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b106:	601c      	str	r4, [r3, #0]
 801b108:	9b02      	ldr	r3, [sp, #8]
 801b10a:	601f      	str	r7, [r3, #0]
 801b10c:	e6b0      	b.n	801ae70 <__gethex+0xf8>
 801b10e:	4299      	cmp	r1, r3
 801b110:	f843 cc04 	str.w	ip, [r3, #-4]
 801b114:	d8d9      	bhi.n	801b0ca <__gethex+0x352>
 801b116:	68a3      	ldr	r3, [r4, #8]
 801b118:	459b      	cmp	fp, r3
 801b11a:	db17      	blt.n	801b14c <__gethex+0x3d4>
 801b11c:	6861      	ldr	r1, [r4, #4]
 801b11e:	9801      	ldr	r0, [sp, #4]
 801b120:	3101      	adds	r1, #1
 801b122:	f000 f9c3 	bl	801b4ac <_Balloc>
 801b126:	4681      	mov	r9, r0
 801b128:	b918      	cbnz	r0, 801b132 <__gethex+0x3ba>
 801b12a:	4b1a      	ldr	r3, [pc, #104]	@ (801b194 <__gethex+0x41c>)
 801b12c:	4602      	mov	r2, r0
 801b12e:	2184      	movs	r1, #132	@ 0x84
 801b130:	e6c5      	b.n	801aebe <__gethex+0x146>
 801b132:	6922      	ldr	r2, [r4, #16]
 801b134:	3202      	adds	r2, #2
 801b136:	f104 010c 	add.w	r1, r4, #12
 801b13a:	0092      	lsls	r2, r2, #2
 801b13c:	300c      	adds	r0, #12
 801b13e:	f7fe ff72 	bl	801a026 <memcpy>
 801b142:	4621      	mov	r1, r4
 801b144:	9801      	ldr	r0, [sp, #4]
 801b146:	f000 f9f1 	bl	801b52c <_Bfree>
 801b14a:	464c      	mov	r4, r9
 801b14c:	6923      	ldr	r3, [r4, #16]
 801b14e:	1c5a      	adds	r2, r3, #1
 801b150:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b154:	6122      	str	r2, [r4, #16]
 801b156:	2201      	movs	r2, #1
 801b158:	615a      	str	r2, [r3, #20]
 801b15a:	e7be      	b.n	801b0da <__gethex+0x362>
 801b15c:	6922      	ldr	r2, [r4, #16]
 801b15e:	455a      	cmp	r2, fp
 801b160:	dd0b      	ble.n	801b17a <__gethex+0x402>
 801b162:	2101      	movs	r1, #1
 801b164:	4620      	mov	r0, r4
 801b166:	f7ff fd9f 	bl	801aca8 <rshift>
 801b16a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b16e:	3701      	adds	r7, #1
 801b170:	42bb      	cmp	r3, r7
 801b172:	f6ff aee0 	blt.w	801af36 <__gethex+0x1be>
 801b176:	2501      	movs	r5, #1
 801b178:	e7c2      	b.n	801b100 <__gethex+0x388>
 801b17a:	f016 061f 	ands.w	r6, r6, #31
 801b17e:	d0fa      	beq.n	801b176 <__gethex+0x3fe>
 801b180:	4453      	add	r3, sl
 801b182:	f1c6 0620 	rsb	r6, r6, #32
 801b186:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b18a:	f000 fa81 	bl	801b690 <__hi0bits>
 801b18e:	42b0      	cmp	r0, r6
 801b190:	dbe7      	blt.n	801b162 <__gethex+0x3ea>
 801b192:	e7f0      	b.n	801b176 <__gethex+0x3fe>
 801b194:	0801e099 	.word	0x0801e099

0801b198 <L_shift>:
 801b198:	f1c2 0208 	rsb	r2, r2, #8
 801b19c:	0092      	lsls	r2, r2, #2
 801b19e:	b570      	push	{r4, r5, r6, lr}
 801b1a0:	f1c2 0620 	rsb	r6, r2, #32
 801b1a4:	6843      	ldr	r3, [r0, #4]
 801b1a6:	6804      	ldr	r4, [r0, #0]
 801b1a8:	fa03 f506 	lsl.w	r5, r3, r6
 801b1ac:	432c      	orrs	r4, r5
 801b1ae:	40d3      	lsrs	r3, r2
 801b1b0:	6004      	str	r4, [r0, #0]
 801b1b2:	f840 3f04 	str.w	r3, [r0, #4]!
 801b1b6:	4288      	cmp	r0, r1
 801b1b8:	d3f4      	bcc.n	801b1a4 <L_shift+0xc>
 801b1ba:	bd70      	pop	{r4, r5, r6, pc}

0801b1bc <__match>:
 801b1bc:	b530      	push	{r4, r5, lr}
 801b1be:	6803      	ldr	r3, [r0, #0]
 801b1c0:	3301      	adds	r3, #1
 801b1c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b1c6:	b914      	cbnz	r4, 801b1ce <__match+0x12>
 801b1c8:	6003      	str	r3, [r0, #0]
 801b1ca:	2001      	movs	r0, #1
 801b1cc:	bd30      	pop	{r4, r5, pc}
 801b1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b1d2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801b1d6:	2d19      	cmp	r5, #25
 801b1d8:	bf98      	it	ls
 801b1da:	3220      	addls	r2, #32
 801b1dc:	42a2      	cmp	r2, r4
 801b1de:	d0f0      	beq.n	801b1c2 <__match+0x6>
 801b1e0:	2000      	movs	r0, #0
 801b1e2:	e7f3      	b.n	801b1cc <__match+0x10>

0801b1e4 <__hexnan>:
 801b1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1e8:	680b      	ldr	r3, [r1, #0]
 801b1ea:	6801      	ldr	r1, [r0, #0]
 801b1ec:	115e      	asrs	r6, r3, #5
 801b1ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b1f2:	f013 031f 	ands.w	r3, r3, #31
 801b1f6:	b087      	sub	sp, #28
 801b1f8:	bf18      	it	ne
 801b1fa:	3604      	addne	r6, #4
 801b1fc:	2500      	movs	r5, #0
 801b1fe:	1f37      	subs	r7, r6, #4
 801b200:	4682      	mov	sl, r0
 801b202:	4690      	mov	r8, r2
 801b204:	9301      	str	r3, [sp, #4]
 801b206:	f846 5c04 	str.w	r5, [r6, #-4]
 801b20a:	46b9      	mov	r9, r7
 801b20c:	463c      	mov	r4, r7
 801b20e:	9502      	str	r5, [sp, #8]
 801b210:	46ab      	mov	fp, r5
 801b212:	784a      	ldrb	r2, [r1, #1]
 801b214:	1c4b      	adds	r3, r1, #1
 801b216:	9303      	str	r3, [sp, #12]
 801b218:	b342      	cbz	r2, 801b26c <__hexnan+0x88>
 801b21a:	4610      	mov	r0, r2
 801b21c:	9105      	str	r1, [sp, #20]
 801b21e:	9204      	str	r2, [sp, #16]
 801b220:	f7ff fd94 	bl	801ad4c <__hexdig_fun>
 801b224:	2800      	cmp	r0, #0
 801b226:	d151      	bne.n	801b2cc <__hexnan+0xe8>
 801b228:	9a04      	ldr	r2, [sp, #16]
 801b22a:	9905      	ldr	r1, [sp, #20]
 801b22c:	2a20      	cmp	r2, #32
 801b22e:	d818      	bhi.n	801b262 <__hexnan+0x7e>
 801b230:	9b02      	ldr	r3, [sp, #8]
 801b232:	459b      	cmp	fp, r3
 801b234:	dd13      	ble.n	801b25e <__hexnan+0x7a>
 801b236:	454c      	cmp	r4, r9
 801b238:	d206      	bcs.n	801b248 <__hexnan+0x64>
 801b23a:	2d07      	cmp	r5, #7
 801b23c:	dc04      	bgt.n	801b248 <__hexnan+0x64>
 801b23e:	462a      	mov	r2, r5
 801b240:	4649      	mov	r1, r9
 801b242:	4620      	mov	r0, r4
 801b244:	f7ff ffa8 	bl	801b198 <L_shift>
 801b248:	4544      	cmp	r4, r8
 801b24a:	d952      	bls.n	801b2f2 <__hexnan+0x10e>
 801b24c:	2300      	movs	r3, #0
 801b24e:	f1a4 0904 	sub.w	r9, r4, #4
 801b252:	f844 3c04 	str.w	r3, [r4, #-4]
 801b256:	f8cd b008 	str.w	fp, [sp, #8]
 801b25a:	464c      	mov	r4, r9
 801b25c:	461d      	mov	r5, r3
 801b25e:	9903      	ldr	r1, [sp, #12]
 801b260:	e7d7      	b.n	801b212 <__hexnan+0x2e>
 801b262:	2a29      	cmp	r2, #41	@ 0x29
 801b264:	d157      	bne.n	801b316 <__hexnan+0x132>
 801b266:	3102      	adds	r1, #2
 801b268:	f8ca 1000 	str.w	r1, [sl]
 801b26c:	f1bb 0f00 	cmp.w	fp, #0
 801b270:	d051      	beq.n	801b316 <__hexnan+0x132>
 801b272:	454c      	cmp	r4, r9
 801b274:	d206      	bcs.n	801b284 <__hexnan+0xa0>
 801b276:	2d07      	cmp	r5, #7
 801b278:	dc04      	bgt.n	801b284 <__hexnan+0xa0>
 801b27a:	462a      	mov	r2, r5
 801b27c:	4649      	mov	r1, r9
 801b27e:	4620      	mov	r0, r4
 801b280:	f7ff ff8a 	bl	801b198 <L_shift>
 801b284:	4544      	cmp	r4, r8
 801b286:	d936      	bls.n	801b2f6 <__hexnan+0x112>
 801b288:	f1a8 0204 	sub.w	r2, r8, #4
 801b28c:	4623      	mov	r3, r4
 801b28e:	f853 1b04 	ldr.w	r1, [r3], #4
 801b292:	f842 1f04 	str.w	r1, [r2, #4]!
 801b296:	429f      	cmp	r7, r3
 801b298:	d2f9      	bcs.n	801b28e <__hexnan+0xaa>
 801b29a:	1b3b      	subs	r3, r7, r4
 801b29c:	f023 0303 	bic.w	r3, r3, #3
 801b2a0:	3304      	adds	r3, #4
 801b2a2:	3401      	adds	r4, #1
 801b2a4:	3e03      	subs	r6, #3
 801b2a6:	42b4      	cmp	r4, r6
 801b2a8:	bf88      	it	hi
 801b2aa:	2304      	movhi	r3, #4
 801b2ac:	4443      	add	r3, r8
 801b2ae:	2200      	movs	r2, #0
 801b2b0:	f843 2b04 	str.w	r2, [r3], #4
 801b2b4:	429f      	cmp	r7, r3
 801b2b6:	d2fb      	bcs.n	801b2b0 <__hexnan+0xcc>
 801b2b8:	683b      	ldr	r3, [r7, #0]
 801b2ba:	b91b      	cbnz	r3, 801b2c4 <__hexnan+0xe0>
 801b2bc:	4547      	cmp	r7, r8
 801b2be:	d128      	bne.n	801b312 <__hexnan+0x12e>
 801b2c0:	2301      	movs	r3, #1
 801b2c2:	603b      	str	r3, [r7, #0]
 801b2c4:	2005      	movs	r0, #5
 801b2c6:	b007      	add	sp, #28
 801b2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2cc:	3501      	adds	r5, #1
 801b2ce:	2d08      	cmp	r5, #8
 801b2d0:	f10b 0b01 	add.w	fp, fp, #1
 801b2d4:	dd06      	ble.n	801b2e4 <__hexnan+0x100>
 801b2d6:	4544      	cmp	r4, r8
 801b2d8:	d9c1      	bls.n	801b25e <__hexnan+0x7a>
 801b2da:	2300      	movs	r3, #0
 801b2dc:	f844 3c04 	str.w	r3, [r4, #-4]
 801b2e0:	2501      	movs	r5, #1
 801b2e2:	3c04      	subs	r4, #4
 801b2e4:	6822      	ldr	r2, [r4, #0]
 801b2e6:	f000 000f 	and.w	r0, r0, #15
 801b2ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b2ee:	6020      	str	r0, [r4, #0]
 801b2f0:	e7b5      	b.n	801b25e <__hexnan+0x7a>
 801b2f2:	2508      	movs	r5, #8
 801b2f4:	e7b3      	b.n	801b25e <__hexnan+0x7a>
 801b2f6:	9b01      	ldr	r3, [sp, #4]
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d0dd      	beq.n	801b2b8 <__hexnan+0xd4>
 801b2fc:	f1c3 0320 	rsb	r3, r3, #32
 801b300:	f04f 32ff 	mov.w	r2, #4294967295
 801b304:	40da      	lsrs	r2, r3
 801b306:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801b30a:	4013      	ands	r3, r2
 801b30c:	f846 3c04 	str.w	r3, [r6, #-4]
 801b310:	e7d2      	b.n	801b2b8 <__hexnan+0xd4>
 801b312:	3f04      	subs	r7, #4
 801b314:	e7d0      	b.n	801b2b8 <__hexnan+0xd4>
 801b316:	2004      	movs	r0, #4
 801b318:	e7d5      	b.n	801b2c6 <__hexnan+0xe2>
	...

0801b31c <malloc>:
 801b31c:	4b02      	ldr	r3, [pc, #8]	@ (801b328 <malloc+0xc>)
 801b31e:	4601      	mov	r1, r0
 801b320:	6818      	ldr	r0, [r3, #0]
 801b322:	f000 b825 	b.w	801b370 <_malloc_r>
 801b326:	bf00      	nop
 801b328:	2400027c 	.word	0x2400027c

0801b32c <sbrk_aligned>:
 801b32c:	b570      	push	{r4, r5, r6, lr}
 801b32e:	4e0f      	ldr	r6, [pc, #60]	@ (801b36c <sbrk_aligned+0x40>)
 801b330:	460c      	mov	r4, r1
 801b332:	6831      	ldr	r1, [r6, #0]
 801b334:	4605      	mov	r5, r0
 801b336:	b911      	cbnz	r1, 801b33e <sbrk_aligned+0x12>
 801b338:	f000 ff92 	bl	801c260 <_sbrk_r>
 801b33c:	6030      	str	r0, [r6, #0]
 801b33e:	4621      	mov	r1, r4
 801b340:	4628      	mov	r0, r5
 801b342:	f000 ff8d 	bl	801c260 <_sbrk_r>
 801b346:	1c43      	adds	r3, r0, #1
 801b348:	d103      	bne.n	801b352 <sbrk_aligned+0x26>
 801b34a:	f04f 34ff 	mov.w	r4, #4294967295
 801b34e:	4620      	mov	r0, r4
 801b350:	bd70      	pop	{r4, r5, r6, pc}
 801b352:	1cc4      	adds	r4, r0, #3
 801b354:	f024 0403 	bic.w	r4, r4, #3
 801b358:	42a0      	cmp	r0, r4
 801b35a:	d0f8      	beq.n	801b34e <sbrk_aligned+0x22>
 801b35c:	1a21      	subs	r1, r4, r0
 801b35e:	4628      	mov	r0, r5
 801b360:	f000 ff7e 	bl	801c260 <_sbrk_r>
 801b364:	3001      	adds	r0, #1
 801b366:	d1f2      	bne.n	801b34e <sbrk_aligned+0x22>
 801b368:	e7ef      	b.n	801b34a <sbrk_aligned+0x1e>
 801b36a:	bf00      	nop
 801b36c:	240153b0 	.word	0x240153b0

0801b370 <_malloc_r>:
 801b370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b374:	1ccd      	adds	r5, r1, #3
 801b376:	f025 0503 	bic.w	r5, r5, #3
 801b37a:	3508      	adds	r5, #8
 801b37c:	2d0c      	cmp	r5, #12
 801b37e:	bf38      	it	cc
 801b380:	250c      	movcc	r5, #12
 801b382:	2d00      	cmp	r5, #0
 801b384:	4606      	mov	r6, r0
 801b386:	db01      	blt.n	801b38c <_malloc_r+0x1c>
 801b388:	42a9      	cmp	r1, r5
 801b38a:	d904      	bls.n	801b396 <_malloc_r+0x26>
 801b38c:	230c      	movs	r3, #12
 801b38e:	6033      	str	r3, [r6, #0]
 801b390:	2000      	movs	r0, #0
 801b392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b396:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b46c <_malloc_r+0xfc>
 801b39a:	f000 f87b 	bl	801b494 <__malloc_lock>
 801b39e:	f8d8 3000 	ldr.w	r3, [r8]
 801b3a2:	461c      	mov	r4, r3
 801b3a4:	bb44      	cbnz	r4, 801b3f8 <_malloc_r+0x88>
 801b3a6:	4629      	mov	r1, r5
 801b3a8:	4630      	mov	r0, r6
 801b3aa:	f7ff ffbf 	bl	801b32c <sbrk_aligned>
 801b3ae:	1c43      	adds	r3, r0, #1
 801b3b0:	4604      	mov	r4, r0
 801b3b2:	d158      	bne.n	801b466 <_malloc_r+0xf6>
 801b3b4:	f8d8 4000 	ldr.w	r4, [r8]
 801b3b8:	4627      	mov	r7, r4
 801b3ba:	2f00      	cmp	r7, #0
 801b3bc:	d143      	bne.n	801b446 <_malloc_r+0xd6>
 801b3be:	2c00      	cmp	r4, #0
 801b3c0:	d04b      	beq.n	801b45a <_malloc_r+0xea>
 801b3c2:	6823      	ldr	r3, [r4, #0]
 801b3c4:	4639      	mov	r1, r7
 801b3c6:	4630      	mov	r0, r6
 801b3c8:	eb04 0903 	add.w	r9, r4, r3
 801b3cc:	f000 ff48 	bl	801c260 <_sbrk_r>
 801b3d0:	4581      	cmp	r9, r0
 801b3d2:	d142      	bne.n	801b45a <_malloc_r+0xea>
 801b3d4:	6821      	ldr	r1, [r4, #0]
 801b3d6:	1a6d      	subs	r5, r5, r1
 801b3d8:	4629      	mov	r1, r5
 801b3da:	4630      	mov	r0, r6
 801b3dc:	f7ff ffa6 	bl	801b32c <sbrk_aligned>
 801b3e0:	3001      	adds	r0, #1
 801b3e2:	d03a      	beq.n	801b45a <_malloc_r+0xea>
 801b3e4:	6823      	ldr	r3, [r4, #0]
 801b3e6:	442b      	add	r3, r5
 801b3e8:	6023      	str	r3, [r4, #0]
 801b3ea:	f8d8 3000 	ldr.w	r3, [r8]
 801b3ee:	685a      	ldr	r2, [r3, #4]
 801b3f0:	bb62      	cbnz	r2, 801b44c <_malloc_r+0xdc>
 801b3f2:	f8c8 7000 	str.w	r7, [r8]
 801b3f6:	e00f      	b.n	801b418 <_malloc_r+0xa8>
 801b3f8:	6822      	ldr	r2, [r4, #0]
 801b3fa:	1b52      	subs	r2, r2, r5
 801b3fc:	d420      	bmi.n	801b440 <_malloc_r+0xd0>
 801b3fe:	2a0b      	cmp	r2, #11
 801b400:	d917      	bls.n	801b432 <_malloc_r+0xc2>
 801b402:	1961      	adds	r1, r4, r5
 801b404:	42a3      	cmp	r3, r4
 801b406:	6025      	str	r5, [r4, #0]
 801b408:	bf18      	it	ne
 801b40a:	6059      	strne	r1, [r3, #4]
 801b40c:	6863      	ldr	r3, [r4, #4]
 801b40e:	bf08      	it	eq
 801b410:	f8c8 1000 	streq.w	r1, [r8]
 801b414:	5162      	str	r2, [r4, r5]
 801b416:	604b      	str	r3, [r1, #4]
 801b418:	4630      	mov	r0, r6
 801b41a:	f000 f841 	bl	801b4a0 <__malloc_unlock>
 801b41e:	f104 000b 	add.w	r0, r4, #11
 801b422:	1d23      	adds	r3, r4, #4
 801b424:	f020 0007 	bic.w	r0, r0, #7
 801b428:	1ac2      	subs	r2, r0, r3
 801b42a:	bf1c      	itt	ne
 801b42c:	1a1b      	subne	r3, r3, r0
 801b42e:	50a3      	strne	r3, [r4, r2]
 801b430:	e7af      	b.n	801b392 <_malloc_r+0x22>
 801b432:	6862      	ldr	r2, [r4, #4]
 801b434:	42a3      	cmp	r3, r4
 801b436:	bf0c      	ite	eq
 801b438:	f8c8 2000 	streq.w	r2, [r8]
 801b43c:	605a      	strne	r2, [r3, #4]
 801b43e:	e7eb      	b.n	801b418 <_malloc_r+0xa8>
 801b440:	4623      	mov	r3, r4
 801b442:	6864      	ldr	r4, [r4, #4]
 801b444:	e7ae      	b.n	801b3a4 <_malloc_r+0x34>
 801b446:	463c      	mov	r4, r7
 801b448:	687f      	ldr	r7, [r7, #4]
 801b44a:	e7b6      	b.n	801b3ba <_malloc_r+0x4a>
 801b44c:	461a      	mov	r2, r3
 801b44e:	685b      	ldr	r3, [r3, #4]
 801b450:	42a3      	cmp	r3, r4
 801b452:	d1fb      	bne.n	801b44c <_malloc_r+0xdc>
 801b454:	2300      	movs	r3, #0
 801b456:	6053      	str	r3, [r2, #4]
 801b458:	e7de      	b.n	801b418 <_malloc_r+0xa8>
 801b45a:	230c      	movs	r3, #12
 801b45c:	6033      	str	r3, [r6, #0]
 801b45e:	4630      	mov	r0, r6
 801b460:	f000 f81e 	bl	801b4a0 <__malloc_unlock>
 801b464:	e794      	b.n	801b390 <_malloc_r+0x20>
 801b466:	6005      	str	r5, [r0, #0]
 801b468:	e7d6      	b.n	801b418 <_malloc_r+0xa8>
 801b46a:	bf00      	nop
 801b46c:	240153b4 	.word	0x240153b4

0801b470 <__ascii_mbtowc>:
 801b470:	b082      	sub	sp, #8
 801b472:	b901      	cbnz	r1, 801b476 <__ascii_mbtowc+0x6>
 801b474:	a901      	add	r1, sp, #4
 801b476:	b142      	cbz	r2, 801b48a <__ascii_mbtowc+0x1a>
 801b478:	b14b      	cbz	r3, 801b48e <__ascii_mbtowc+0x1e>
 801b47a:	7813      	ldrb	r3, [r2, #0]
 801b47c:	600b      	str	r3, [r1, #0]
 801b47e:	7812      	ldrb	r2, [r2, #0]
 801b480:	1e10      	subs	r0, r2, #0
 801b482:	bf18      	it	ne
 801b484:	2001      	movne	r0, #1
 801b486:	b002      	add	sp, #8
 801b488:	4770      	bx	lr
 801b48a:	4610      	mov	r0, r2
 801b48c:	e7fb      	b.n	801b486 <__ascii_mbtowc+0x16>
 801b48e:	f06f 0001 	mvn.w	r0, #1
 801b492:	e7f8      	b.n	801b486 <__ascii_mbtowc+0x16>

0801b494 <__malloc_lock>:
 801b494:	4801      	ldr	r0, [pc, #4]	@ (801b49c <__malloc_lock+0x8>)
 801b496:	f7fe bdc4 	b.w	801a022 <__retarget_lock_acquire_recursive>
 801b49a:	bf00      	nop
 801b49c:	240153ac 	.word	0x240153ac

0801b4a0 <__malloc_unlock>:
 801b4a0:	4801      	ldr	r0, [pc, #4]	@ (801b4a8 <__malloc_unlock+0x8>)
 801b4a2:	f7fe bdbf 	b.w	801a024 <__retarget_lock_release_recursive>
 801b4a6:	bf00      	nop
 801b4a8:	240153ac 	.word	0x240153ac

0801b4ac <_Balloc>:
 801b4ac:	b570      	push	{r4, r5, r6, lr}
 801b4ae:	69c6      	ldr	r6, [r0, #28]
 801b4b0:	4604      	mov	r4, r0
 801b4b2:	460d      	mov	r5, r1
 801b4b4:	b976      	cbnz	r6, 801b4d4 <_Balloc+0x28>
 801b4b6:	2010      	movs	r0, #16
 801b4b8:	f7ff ff30 	bl	801b31c <malloc>
 801b4bc:	4602      	mov	r2, r0
 801b4be:	61e0      	str	r0, [r4, #28]
 801b4c0:	b920      	cbnz	r0, 801b4cc <_Balloc+0x20>
 801b4c2:	4b18      	ldr	r3, [pc, #96]	@ (801b524 <_Balloc+0x78>)
 801b4c4:	4818      	ldr	r0, [pc, #96]	@ (801b528 <_Balloc+0x7c>)
 801b4c6:	216b      	movs	r1, #107	@ 0x6b
 801b4c8:	f000 feda 	bl	801c280 <__assert_func>
 801b4cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b4d0:	6006      	str	r6, [r0, #0]
 801b4d2:	60c6      	str	r6, [r0, #12]
 801b4d4:	69e6      	ldr	r6, [r4, #28]
 801b4d6:	68f3      	ldr	r3, [r6, #12]
 801b4d8:	b183      	cbz	r3, 801b4fc <_Balloc+0x50>
 801b4da:	69e3      	ldr	r3, [r4, #28]
 801b4dc:	68db      	ldr	r3, [r3, #12]
 801b4de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b4e2:	b9b8      	cbnz	r0, 801b514 <_Balloc+0x68>
 801b4e4:	2101      	movs	r1, #1
 801b4e6:	fa01 f605 	lsl.w	r6, r1, r5
 801b4ea:	1d72      	adds	r2, r6, #5
 801b4ec:	0092      	lsls	r2, r2, #2
 801b4ee:	4620      	mov	r0, r4
 801b4f0:	f000 fee4 	bl	801c2bc <_calloc_r>
 801b4f4:	b160      	cbz	r0, 801b510 <_Balloc+0x64>
 801b4f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b4fa:	e00e      	b.n	801b51a <_Balloc+0x6e>
 801b4fc:	2221      	movs	r2, #33	@ 0x21
 801b4fe:	2104      	movs	r1, #4
 801b500:	4620      	mov	r0, r4
 801b502:	f000 fedb 	bl	801c2bc <_calloc_r>
 801b506:	69e3      	ldr	r3, [r4, #28]
 801b508:	60f0      	str	r0, [r6, #12]
 801b50a:	68db      	ldr	r3, [r3, #12]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d1e4      	bne.n	801b4da <_Balloc+0x2e>
 801b510:	2000      	movs	r0, #0
 801b512:	bd70      	pop	{r4, r5, r6, pc}
 801b514:	6802      	ldr	r2, [r0, #0]
 801b516:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b51a:	2300      	movs	r3, #0
 801b51c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b520:	e7f7      	b.n	801b512 <_Balloc+0x66>
 801b522:	bf00      	nop
 801b524:	0801e02a 	.word	0x0801e02a
 801b528:	0801e10a 	.word	0x0801e10a

0801b52c <_Bfree>:
 801b52c:	b570      	push	{r4, r5, r6, lr}
 801b52e:	69c6      	ldr	r6, [r0, #28]
 801b530:	4605      	mov	r5, r0
 801b532:	460c      	mov	r4, r1
 801b534:	b976      	cbnz	r6, 801b554 <_Bfree+0x28>
 801b536:	2010      	movs	r0, #16
 801b538:	f7ff fef0 	bl	801b31c <malloc>
 801b53c:	4602      	mov	r2, r0
 801b53e:	61e8      	str	r0, [r5, #28]
 801b540:	b920      	cbnz	r0, 801b54c <_Bfree+0x20>
 801b542:	4b09      	ldr	r3, [pc, #36]	@ (801b568 <_Bfree+0x3c>)
 801b544:	4809      	ldr	r0, [pc, #36]	@ (801b56c <_Bfree+0x40>)
 801b546:	218f      	movs	r1, #143	@ 0x8f
 801b548:	f000 fe9a 	bl	801c280 <__assert_func>
 801b54c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b550:	6006      	str	r6, [r0, #0]
 801b552:	60c6      	str	r6, [r0, #12]
 801b554:	b13c      	cbz	r4, 801b566 <_Bfree+0x3a>
 801b556:	69eb      	ldr	r3, [r5, #28]
 801b558:	6862      	ldr	r2, [r4, #4]
 801b55a:	68db      	ldr	r3, [r3, #12]
 801b55c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b560:	6021      	str	r1, [r4, #0]
 801b562:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b566:	bd70      	pop	{r4, r5, r6, pc}
 801b568:	0801e02a 	.word	0x0801e02a
 801b56c:	0801e10a 	.word	0x0801e10a

0801b570 <__multadd>:
 801b570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b574:	690d      	ldr	r5, [r1, #16]
 801b576:	4607      	mov	r7, r0
 801b578:	460c      	mov	r4, r1
 801b57a:	461e      	mov	r6, r3
 801b57c:	f101 0c14 	add.w	ip, r1, #20
 801b580:	2000      	movs	r0, #0
 801b582:	f8dc 3000 	ldr.w	r3, [ip]
 801b586:	b299      	uxth	r1, r3
 801b588:	fb02 6101 	mla	r1, r2, r1, r6
 801b58c:	0c1e      	lsrs	r6, r3, #16
 801b58e:	0c0b      	lsrs	r3, r1, #16
 801b590:	fb02 3306 	mla	r3, r2, r6, r3
 801b594:	b289      	uxth	r1, r1
 801b596:	3001      	adds	r0, #1
 801b598:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b59c:	4285      	cmp	r5, r0
 801b59e:	f84c 1b04 	str.w	r1, [ip], #4
 801b5a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b5a6:	dcec      	bgt.n	801b582 <__multadd+0x12>
 801b5a8:	b30e      	cbz	r6, 801b5ee <__multadd+0x7e>
 801b5aa:	68a3      	ldr	r3, [r4, #8]
 801b5ac:	42ab      	cmp	r3, r5
 801b5ae:	dc19      	bgt.n	801b5e4 <__multadd+0x74>
 801b5b0:	6861      	ldr	r1, [r4, #4]
 801b5b2:	4638      	mov	r0, r7
 801b5b4:	3101      	adds	r1, #1
 801b5b6:	f7ff ff79 	bl	801b4ac <_Balloc>
 801b5ba:	4680      	mov	r8, r0
 801b5bc:	b928      	cbnz	r0, 801b5ca <__multadd+0x5a>
 801b5be:	4602      	mov	r2, r0
 801b5c0:	4b0c      	ldr	r3, [pc, #48]	@ (801b5f4 <__multadd+0x84>)
 801b5c2:	480d      	ldr	r0, [pc, #52]	@ (801b5f8 <__multadd+0x88>)
 801b5c4:	21ba      	movs	r1, #186	@ 0xba
 801b5c6:	f000 fe5b 	bl	801c280 <__assert_func>
 801b5ca:	6922      	ldr	r2, [r4, #16]
 801b5cc:	3202      	adds	r2, #2
 801b5ce:	f104 010c 	add.w	r1, r4, #12
 801b5d2:	0092      	lsls	r2, r2, #2
 801b5d4:	300c      	adds	r0, #12
 801b5d6:	f7fe fd26 	bl	801a026 <memcpy>
 801b5da:	4621      	mov	r1, r4
 801b5dc:	4638      	mov	r0, r7
 801b5de:	f7ff ffa5 	bl	801b52c <_Bfree>
 801b5e2:	4644      	mov	r4, r8
 801b5e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b5e8:	3501      	adds	r5, #1
 801b5ea:	615e      	str	r6, [r3, #20]
 801b5ec:	6125      	str	r5, [r4, #16]
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5f4:	0801e099 	.word	0x0801e099
 801b5f8:	0801e10a 	.word	0x0801e10a

0801b5fc <__s2b>:
 801b5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b600:	460c      	mov	r4, r1
 801b602:	4615      	mov	r5, r2
 801b604:	461f      	mov	r7, r3
 801b606:	2209      	movs	r2, #9
 801b608:	3308      	adds	r3, #8
 801b60a:	4606      	mov	r6, r0
 801b60c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b610:	2100      	movs	r1, #0
 801b612:	2201      	movs	r2, #1
 801b614:	429a      	cmp	r2, r3
 801b616:	db09      	blt.n	801b62c <__s2b+0x30>
 801b618:	4630      	mov	r0, r6
 801b61a:	f7ff ff47 	bl	801b4ac <_Balloc>
 801b61e:	b940      	cbnz	r0, 801b632 <__s2b+0x36>
 801b620:	4602      	mov	r2, r0
 801b622:	4b19      	ldr	r3, [pc, #100]	@ (801b688 <__s2b+0x8c>)
 801b624:	4819      	ldr	r0, [pc, #100]	@ (801b68c <__s2b+0x90>)
 801b626:	21d3      	movs	r1, #211	@ 0xd3
 801b628:	f000 fe2a 	bl	801c280 <__assert_func>
 801b62c:	0052      	lsls	r2, r2, #1
 801b62e:	3101      	adds	r1, #1
 801b630:	e7f0      	b.n	801b614 <__s2b+0x18>
 801b632:	9b08      	ldr	r3, [sp, #32]
 801b634:	6143      	str	r3, [r0, #20]
 801b636:	2d09      	cmp	r5, #9
 801b638:	f04f 0301 	mov.w	r3, #1
 801b63c:	6103      	str	r3, [r0, #16]
 801b63e:	dd16      	ble.n	801b66e <__s2b+0x72>
 801b640:	f104 0909 	add.w	r9, r4, #9
 801b644:	46c8      	mov	r8, r9
 801b646:	442c      	add	r4, r5
 801b648:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b64c:	4601      	mov	r1, r0
 801b64e:	3b30      	subs	r3, #48	@ 0x30
 801b650:	220a      	movs	r2, #10
 801b652:	4630      	mov	r0, r6
 801b654:	f7ff ff8c 	bl	801b570 <__multadd>
 801b658:	45a0      	cmp	r8, r4
 801b65a:	d1f5      	bne.n	801b648 <__s2b+0x4c>
 801b65c:	f1a5 0408 	sub.w	r4, r5, #8
 801b660:	444c      	add	r4, r9
 801b662:	1b2d      	subs	r5, r5, r4
 801b664:	1963      	adds	r3, r4, r5
 801b666:	42bb      	cmp	r3, r7
 801b668:	db04      	blt.n	801b674 <__s2b+0x78>
 801b66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b66e:	340a      	adds	r4, #10
 801b670:	2509      	movs	r5, #9
 801b672:	e7f6      	b.n	801b662 <__s2b+0x66>
 801b674:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b678:	4601      	mov	r1, r0
 801b67a:	3b30      	subs	r3, #48	@ 0x30
 801b67c:	220a      	movs	r2, #10
 801b67e:	4630      	mov	r0, r6
 801b680:	f7ff ff76 	bl	801b570 <__multadd>
 801b684:	e7ee      	b.n	801b664 <__s2b+0x68>
 801b686:	bf00      	nop
 801b688:	0801e099 	.word	0x0801e099
 801b68c:	0801e10a 	.word	0x0801e10a

0801b690 <__hi0bits>:
 801b690:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b694:	4603      	mov	r3, r0
 801b696:	bf36      	itet	cc
 801b698:	0403      	lslcc	r3, r0, #16
 801b69a:	2000      	movcs	r0, #0
 801b69c:	2010      	movcc	r0, #16
 801b69e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b6a2:	bf3c      	itt	cc
 801b6a4:	021b      	lslcc	r3, r3, #8
 801b6a6:	3008      	addcc	r0, #8
 801b6a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b6ac:	bf3c      	itt	cc
 801b6ae:	011b      	lslcc	r3, r3, #4
 801b6b0:	3004      	addcc	r0, #4
 801b6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b6b6:	bf3c      	itt	cc
 801b6b8:	009b      	lslcc	r3, r3, #2
 801b6ba:	3002      	addcc	r0, #2
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	db05      	blt.n	801b6cc <__hi0bits+0x3c>
 801b6c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b6c4:	f100 0001 	add.w	r0, r0, #1
 801b6c8:	bf08      	it	eq
 801b6ca:	2020      	moveq	r0, #32
 801b6cc:	4770      	bx	lr

0801b6ce <__lo0bits>:
 801b6ce:	6803      	ldr	r3, [r0, #0]
 801b6d0:	4602      	mov	r2, r0
 801b6d2:	f013 0007 	ands.w	r0, r3, #7
 801b6d6:	d00b      	beq.n	801b6f0 <__lo0bits+0x22>
 801b6d8:	07d9      	lsls	r1, r3, #31
 801b6da:	d421      	bmi.n	801b720 <__lo0bits+0x52>
 801b6dc:	0798      	lsls	r0, r3, #30
 801b6de:	bf49      	itett	mi
 801b6e0:	085b      	lsrmi	r3, r3, #1
 801b6e2:	089b      	lsrpl	r3, r3, #2
 801b6e4:	2001      	movmi	r0, #1
 801b6e6:	6013      	strmi	r3, [r2, #0]
 801b6e8:	bf5c      	itt	pl
 801b6ea:	6013      	strpl	r3, [r2, #0]
 801b6ec:	2002      	movpl	r0, #2
 801b6ee:	4770      	bx	lr
 801b6f0:	b299      	uxth	r1, r3
 801b6f2:	b909      	cbnz	r1, 801b6f8 <__lo0bits+0x2a>
 801b6f4:	0c1b      	lsrs	r3, r3, #16
 801b6f6:	2010      	movs	r0, #16
 801b6f8:	b2d9      	uxtb	r1, r3
 801b6fa:	b909      	cbnz	r1, 801b700 <__lo0bits+0x32>
 801b6fc:	3008      	adds	r0, #8
 801b6fe:	0a1b      	lsrs	r3, r3, #8
 801b700:	0719      	lsls	r1, r3, #28
 801b702:	bf04      	itt	eq
 801b704:	091b      	lsreq	r3, r3, #4
 801b706:	3004      	addeq	r0, #4
 801b708:	0799      	lsls	r1, r3, #30
 801b70a:	bf04      	itt	eq
 801b70c:	089b      	lsreq	r3, r3, #2
 801b70e:	3002      	addeq	r0, #2
 801b710:	07d9      	lsls	r1, r3, #31
 801b712:	d403      	bmi.n	801b71c <__lo0bits+0x4e>
 801b714:	085b      	lsrs	r3, r3, #1
 801b716:	f100 0001 	add.w	r0, r0, #1
 801b71a:	d003      	beq.n	801b724 <__lo0bits+0x56>
 801b71c:	6013      	str	r3, [r2, #0]
 801b71e:	4770      	bx	lr
 801b720:	2000      	movs	r0, #0
 801b722:	4770      	bx	lr
 801b724:	2020      	movs	r0, #32
 801b726:	4770      	bx	lr

0801b728 <__i2b>:
 801b728:	b510      	push	{r4, lr}
 801b72a:	460c      	mov	r4, r1
 801b72c:	2101      	movs	r1, #1
 801b72e:	f7ff febd 	bl	801b4ac <_Balloc>
 801b732:	4602      	mov	r2, r0
 801b734:	b928      	cbnz	r0, 801b742 <__i2b+0x1a>
 801b736:	4b05      	ldr	r3, [pc, #20]	@ (801b74c <__i2b+0x24>)
 801b738:	4805      	ldr	r0, [pc, #20]	@ (801b750 <__i2b+0x28>)
 801b73a:	f240 1145 	movw	r1, #325	@ 0x145
 801b73e:	f000 fd9f 	bl	801c280 <__assert_func>
 801b742:	2301      	movs	r3, #1
 801b744:	6144      	str	r4, [r0, #20]
 801b746:	6103      	str	r3, [r0, #16]
 801b748:	bd10      	pop	{r4, pc}
 801b74a:	bf00      	nop
 801b74c:	0801e099 	.word	0x0801e099
 801b750:	0801e10a 	.word	0x0801e10a

0801b754 <__multiply>:
 801b754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b758:	4614      	mov	r4, r2
 801b75a:	690a      	ldr	r2, [r1, #16]
 801b75c:	6923      	ldr	r3, [r4, #16]
 801b75e:	429a      	cmp	r2, r3
 801b760:	bfa8      	it	ge
 801b762:	4623      	movge	r3, r4
 801b764:	460f      	mov	r7, r1
 801b766:	bfa4      	itt	ge
 801b768:	460c      	movge	r4, r1
 801b76a:	461f      	movge	r7, r3
 801b76c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b770:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b774:	68a3      	ldr	r3, [r4, #8]
 801b776:	6861      	ldr	r1, [r4, #4]
 801b778:	eb0a 0609 	add.w	r6, sl, r9
 801b77c:	42b3      	cmp	r3, r6
 801b77e:	b085      	sub	sp, #20
 801b780:	bfb8      	it	lt
 801b782:	3101      	addlt	r1, #1
 801b784:	f7ff fe92 	bl	801b4ac <_Balloc>
 801b788:	b930      	cbnz	r0, 801b798 <__multiply+0x44>
 801b78a:	4602      	mov	r2, r0
 801b78c:	4b44      	ldr	r3, [pc, #272]	@ (801b8a0 <__multiply+0x14c>)
 801b78e:	4845      	ldr	r0, [pc, #276]	@ (801b8a4 <__multiply+0x150>)
 801b790:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b794:	f000 fd74 	bl	801c280 <__assert_func>
 801b798:	f100 0514 	add.w	r5, r0, #20
 801b79c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b7a0:	462b      	mov	r3, r5
 801b7a2:	2200      	movs	r2, #0
 801b7a4:	4543      	cmp	r3, r8
 801b7a6:	d321      	bcc.n	801b7ec <__multiply+0x98>
 801b7a8:	f107 0114 	add.w	r1, r7, #20
 801b7ac:	f104 0214 	add.w	r2, r4, #20
 801b7b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801b7b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801b7b8:	9302      	str	r3, [sp, #8]
 801b7ba:	1b13      	subs	r3, r2, r4
 801b7bc:	3b15      	subs	r3, #21
 801b7be:	f023 0303 	bic.w	r3, r3, #3
 801b7c2:	3304      	adds	r3, #4
 801b7c4:	f104 0715 	add.w	r7, r4, #21
 801b7c8:	42ba      	cmp	r2, r7
 801b7ca:	bf38      	it	cc
 801b7cc:	2304      	movcc	r3, #4
 801b7ce:	9301      	str	r3, [sp, #4]
 801b7d0:	9b02      	ldr	r3, [sp, #8]
 801b7d2:	9103      	str	r1, [sp, #12]
 801b7d4:	428b      	cmp	r3, r1
 801b7d6:	d80c      	bhi.n	801b7f2 <__multiply+0x9e>
 801b7d8:	2e00      	cmp	r6, #0
 801b7da:	dd03      	ble.n	801b7e4 <__multiply+0x90>
 801b7dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d05b      	beq.n	801b89c <__multiply+0x148>
 801b7e4:	6106      	str	r6, [r0, #16]
 801b7e6:	b005      	add	sp, #20
 801b7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7ec:	f843 2b04 	str.w	r2, [r3], #4
 801b7f0:	e7d8      	b.n	801b7a4 <__multiply+0x50>
 801b7f2:	f8b1 a000 	ldrh.w	sl, [r1]
 801b7f6:	f1ba 0f00 	cmp.w	sl, #0
 801b7fa:	d024      	beq.n	801b846 <__multiply+0xf2>
 801b7fc:	f104 0e14 	add.w	lr, r4, #20
 801b800:	46a9      	mov	r9, r5
 801b802:	f04f 0c00 	mov.w	ip, #0
 801b806:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b80a:	f8d9 3000 	ldr.w	r3, [r9]
 801b80e:	fa1f fb87 	uxth.w	fp, r7
 801b812:	b29b      	uxth	r3, r3
 801b814:	fb0a 330b 	mla	r3, sl, fp, r3
 801b818:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801b81c:	f8d9 7000 	ldr.w	r7, [r9]
 801b820:	4463      	add	r3, ip
 801b822:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b826:	fb0a c70b 	mla	r7, sl, fp, ip
 801b82a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801b82e:	b29b      	uxth	r3, r3
 801b830:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b834:	4572      	cmp	r2, lr
 801b836:	f849 3b04 	str.w	r3, [r9], #4
 801b83a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b83e:	d8e2      	bhi.n	801b806 <__multiply+0xb2>
 801b840:	9b01      	ldr	r3, [sp, #4]
 801b842:	f845 c003 	str.w	ip, [r5, r3]
 801b846:	9b03      	ldr	r3, [sp, #12]
 801b848:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b84c:	3104      	adds	r1, #4
 801b84e:	f1b9 0f00 	cmp.w	r9, #0
 801b852:	d021      	beq.n	801b898 <__multiply+0x144>
 801b854:	682b      	ldr	r3, [r5, #0]
 801b856:	f104 0c14 	add.w	ip, r4, #20
 801b85a:	46ae      	mov	lr, r5
 801b85c:	f04f 0a00 	mov.w	sl, #0
 801b860:	f8bc b000 	ldrh.w	fp, [ip]
 801b864:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801b868:	fb09 770b 	mla	r7, r9, fp, r7
 801b86c:	4457      	add	r7, sl
 801b86e:	b29b      	uxth	r3, r3
 801b870:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b874:	f84e 3b04 	str.w	r3, [lr], #4
 801b878:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b87c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b880:	f8be 3000 	ldrh.w	r3, [lr]
 801b884:	fb09 330a 	mla	r3, r9, sl, r3
 801b888:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801b88c:	4562      	cmp	r2, ip
 801b88e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b892:	d8e5      	bhi.n	801b860 <__multiply+0x10c>
 801b894:	9f01      	ldr	r7, [sp, #4]
 801b896:	51eb      	str	r3, [r5, r7]
 801b898:	3504      	adds	r5, #4
 801b89a:	e799      	b.n	801b7d0 <__multiply+0x7c>
 801b89c:	3e01      	subs	r6, #1
 801b89e:	e79b      	b.n	801b7d8 <__multiply+0x84>
 801b8a0:	0801e099 	.word	0x0801e099
 801b8a4:	0801e10a 	.word	0x0801e10a

0801b8a8 <__pow5mult>:
 801b8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8ac:	4615      	mov	r5, r2
 801b8ae:	f012 0203 	ands.w	r2, r2, #3
 801b8b2:	4607      	mov	r7, r0
 801b8b4:	460e      	mov	r6, r1
 801b8b6:	d007      	beq.n	801b8c8 <__pow5mult+0x20>
 801b8b8:	4c25      	ldr	r4, [pc, #148]	@ (801b950 <__pow5mult+0xa8>)
 801b8ba:	3a01      	subs	r2, #1
 801b8bc:	2300      	movs	r3, #0
 801b8be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b8c2:	f7ff fe55 	bl	801b570 <__multadd>
 801b8c6:	4606      	mov	r6, r0
 801b8c8:	10ad      	asrs	r5, r5, #2
 801b8ca:	d03d      	beq.n	801b948 <__pow5mult+0xa0>
 801b8cc:	69fc      	ldr	r4, [r7, #28]
 801b8ce:	b97c      	cbnz	r4, 801b8f0 <__pow5mult+0x48>
 801b8d0:	2010      	movs	r0, #16
 801b8d2:	f7ff fd23 	bl	801b31c <malloc>
 801b8d6:	4602      	mov	r2, r0
 801b8d8:	61f8      	str	r0, [r7, #28]
 801b8da:	b928      	cbnz	r0, 801b8e8 <__pow5mult+0x40>
 801b8dc:	4b1d      	ldr	r3, [pc, #116]	@ (801b954 <__pow5mult+0xac>)
 801b8de:	481e      	ldr	r0, [pc, #120]	@ (801b958 <__pow5mult+0xb0>)
 801b8e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801b8e4:	f000 fccc 	bl	801c280 <__assert_func>
 801b8e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b8ec:	6004      	str	r4, [r0, #0]
 801b8ee:	60c4      	str	r4, [r0, #12]
 801b8f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801b8f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b8f8:	b94c      	cbnz	r4, 801b90e <__pow5mult+0x66>
 801b8fa:	f240 2171 	movw	r1, #625	@ 0x271
 801b8fe:	4638      	mov	r0, r7
 801b900:	f7ff ff12 	bl	801b728 <__i2b>
 801b904:	2300      	movs	r3, #0
 801b906:	f8c8 0008 	str.w	r0, [r8, #8]
 801b90a:	4604      	mov	r4, r0
 801b90c:	6003      	str	r3, [r0, #0]
 801b90e:	f04f 0900 	mov.w	r9, #0
 801b912:	07eb      	lsls	r3, r5, #31
 801b914:	d50a      	bpl.n	801b92c <__pow5mult+0x84>
 801b916:	4631      	mov	r1, r6
 801b918:	4622      	mov	r2, r4
 801b91a:	4638      	mov	r0, r7
 801b91c:	f7ff ff1a 	bl	801b754 <__multiply>
 801b920:	4631      	mov	r1, r6
 801b922:	4680      	mov	r8, r0
 801b924:	4638      	mov	r0, r7
 801b926:	f7ff fe01 	bl	801b52c <_Bfree>
 801b92a:	4646      	mov	r6, r8
 801b92c:	106d      	asrs	r5, r5, #1
 801b92e:	d00b      	beq.n	801b948 <__pow5mult+0xa0>
 801b930:	6820      	ldr	r0, [r4, #0]
 801b932:	b938      	cbnz	r0, 801b944 <__pow5mult+0x9c>
 801b934:	4622      	mov	r2, r4
 801b936:	4621      	mov	r1, r4
 801b938:	4638      	mov	r0, r7
 801b93a:	f7ff ff0b 	bl	801b754 <__multiply>
 801b93e:	6020      	str	r0, [r4, #0]
 801b940:	f8c0 9000 	str.w	r9, [r0]
 801b944:	4604      	mov	r4, r0
 801b946:	e7e4      	b.n	801b912 <__pow5mult+0x6a>
 801b948:	4630      	mov	r0, r6
 801b94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b94e:	bf00      	nop
 801b950:	0801e164 	.word	0x0801e164
 801b954:	0801e02a 	.word	0x0801e02a
 801b958:	0801e10a 	.word	0x0801e10a

0801b95c <__lshift>:
 801b95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b960:	460c      	mov	r4, r1
 801b962:	6849      	ldr	r1, [r1, #4]
 801b964:	6923      	ldr	r3, [r4, #16]
 801b966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b96a:	68a3      	ldr	r3, [r4, #8]
 801b96c:	4607      	mov	r7, r0
 801b96e:	4691      	mov	r9, r2
 801b970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b974:	f108 0601 	add.w	r6, r8, #1
 801b978:	42b3      	cmp	r3, r6
 801b97a:	db0b      	blt.n	801b994 <__lshift+0x38>
 801b97c:	4638      	mov	r0, r7
 801b97e:	f7ff fd95 	bl	801b4ac <_Balloc>
 801b982:	4605      	mov	r5, r0
 801b984:	b948      	cbnz	r0, 801b99a <__lshift+0x3e>
 801b986:	4602      	mov	r2, r0
 801b988:	4b28      	ldr	r3, [pc, #160]	@ (801ba2c <__lshift+0xd0>)
 801b98a:	4829      	ldr	r0, [pc, #164]	@ (801ba30 <__lshift+0xd4>)
 801b98c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801b990:	f000 fc76 	bl	801c280 <__assert_func>
 801b994:	3101      	adds	r1, #1
 801b996:	005b      	lsls	r3, r3, #1
 801b998:	e7ee      	b.n	801b978 <__lshift+0x1c>
 801b99a:	2300      	movs	r3, #0
 801b99c:	f100 0114 	add.w	r1, r0, #20
 801b9a0:	f100 0210 	add.w	r2, r0, #16
 801b9a4:	4618      	mov	r0, r3
 801b9a6:	4553      	cmp	r3, sl
 801b9a8:	db33      	blt.n	801ba12 <__lshift+0xb6>
 801b9aa:	6920      	ldr	r0, [r4, #16]
 801b9ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b9b0:	f104 0314 	add.w	r3, r4, #20
 801b9b4:	f019 091f 	ands.w	r9, r9, #31
 801b9b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b9bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b9c0:	d02b      	beq.n	801ba1a <__lshift+0xbe>
 801b9c2:	f1c9 0e20 	rsb	lr, r9, #32
 801b9c6:	468a      	mov	sl, r1
 801b9c8:	2200      	movs	r2, #0
 801b9ca:	6818      	ldr	r0, [r3, #0]
 801b9cc:	fa00 f009 	lsl.w	r0, r0, r9
 801b9d0:	4310      	orrs	r0, r2
 801b9d2:	f84a 0b04 	str.w	r0, [sl], #4
 801b9d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b9da:	459c      	cmp	ip, r3
 801b9dc:	fa22 f20e 	lsr.w	r2, r2, lr
 801b9e0:	d8f3      	bhi.n	801b9ca <__lshift+0x6e>
 801b9e2:	ebac 0304 	sub.w	r3, ip, r4
 801b9e6:	3b15      	subs	r3, #21
 801b9e8:	f023 0303 	bic.w	r3, r3, #3
 801b9ec:	3304      	adds	r3, #4
 801b9ee:	f104 0015 	add.w	r0, r4, #21
 801b9f2:	4584      	cmp	ip, r0
 801b9f4:	bf38      	it	cc
 801b9f6:	2304      	movcc	r3, #4
 801b9f8:	50ca      	str	r2, [r1, r3]
 801b9fa:	b10a      	cbz	r2, 801ba00 <__lshift+0xa4>
 801b9fc:	f108 0602 	add.w	r6, r8, #2
 801ba00:	3e01      	subs	r6, #1
 801ba02:	4638      	mov	r0, r7
 801ba04:	612e      	str	r6, [r5, #16]
 801ba06:	4621      	mov	r1, r4
 801ba08:	f7ff fd90 	bl	801b52c <_Bfree>
 801ba0c:	4628      	mov	r0, r5
 801ba0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba12:	f842 0f04 	str.w	r0, [r2, #4]!
 801ba16:	3301      	adds	r3, #1
 801ba18:	e7c5      	b.n	801b9a6 <__lshift+0x4a>
 801ba1a:	3904      	subs	r1, #4
 801ba1c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba20:	f841 2f04 	str.w	r2, [r1, #4]!
 801ba24:	459c      	cmp	ip, r3
 801ba26:	d8f9      	bhi.n	801ba1c <__lshift+0xc0>
 801ba28:	e7ea      	b.n	801ba00 <__lshift+0xa4>
 801ba2a:	bf00      	nop
 801ba2c:	0801e099 	.word	0x0801e099
 801ba30:	0801e10a 	.word	0x0801e10a

0801ba34 <__mcmp>:
 801ba34:	690a      	ldr	r2, [r1, #16]
 801ba36:	4603      	mov	r3, r0
 801ba38:	6900      	ldr	r0, [r0, #16]
 801ba3a:	1a80      	subs	r0, r0, r2
 801ba3c:	b530      	push	{r4, r5, lr}
 801ba3e:	d10e      	bne.n	801ba5e <__mcmp+0x2a>
 801ba40:	3314      	adds	r3, #20
 801ba42:	3114      	adds	r1, #20
 801ba44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ba48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ba4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ba50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ba54:	4295      	cmp	r5, r2
 801ba56:	d003      	beq.n	801ba60 <__mcmp+0x2c>
 801ba58:	d205      	bcs.n	801ba66 <__mcmp+0x32>
 801ba5a:	f04f 30ff 	mov.w	r0, #4294967295
 801ba5e:	bd30      	pop	{r4, r5, pc}
 801ba60:	42a3      	cmp	r3, r4
 801ba62:	d3f3      	bcc.n	801ba4c <__mcmp+0x18>
 801ba64:	e7fb      	b.n	801ba5e <__mcmp+0x2a>
 801ba66:	2001      	movs	r0, #1
 801ba68:	e7f9      	b.n	801ba5e <__mcmp+0x2a>
	...

0801ba6c <__mdiff>:
 801ba6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba70:	4689      	mov	r9, r1
 801ba72:	4606      	mov	r6, r0
 801ba74:	4611      	mov	r1, r2
 801ba76:	4648      	mov	r0, r9
 801ba78:	4614      	mov	r4, r2
 801ba7a:	f7ff ffdb 	bl	801ba34 <__mcmp>
 801ba7e:	1e05      	subs	r5, r0, #0
 801ba80:	d112      	bne.n	801baa8 <__mdiff+0x3c>
 801ba82:	4629      	mov	r1, r5
 801ba84:	4630      	mov	r0, r6
 801ba86:	f7ff fd11 	bl	801b4ac <_Balloc>
 801ba8a:	4602      	mov	r2, r0
 801ba8c:	b928      	cbnz	r0, 801ba9a <__mdiff+0x2e>
 801ba8e:	4b3f      	ldr	r3, [pc, #252]	@ (801bb8c <__mdiff+0x120>)
 801ba90:	f240 2137 	movw	r1, #567	@ 0x237
 801ba94:	483e      	ldr	r0, [pc, #248]	@ (801bb90 <__mdiff+0x124>)
 801ba96:	f000 fbf3 	bl	801c280 <__assert_func>
 801ba9a:	2301      	movs	r3, #1
 801ba9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801baa0:	4610      	mov	r0, r2
 801baa2:	b003      	add	sp, #12
 801baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801baa8:	bfbc      	itt	lt
 801baaa:	464b      	movlt	r3, r9
 801baac:	46a1      	movlt	r9, r4
 801baae:	4630      	mov	r0, r6
 801bab0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bab4:	bfba      	itte	lt
 801bab6:	461c      	movlt	r4, r3
 801bab8:	2501      	movlt	r5, #1
 801baba:	2500      	movge	r5, #0
 801babc:	f7ff fcf6 	bl	801b4ac <_Balloc>
 801bac0:	4602      	mov	r2, r0
 801bac2:	b918      	cbnz	r0, 801bacc <__mdiff+0x60>
 801bac4:	4b31      	ldr	r3, [pc, #196]	@ (801bb8c <__mdiff+0x120>)
 801bac6:	f240 2145 	movw	r1, #581	@ 0x245
 801baca:	e7e3      	b.n	801ba94 <__mdiff+0x28>
 801bacc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bad0:	6926      	ldr	r6, [r4, #16]
 801bad2:	60c5      	str	r5, [r0, #12]
 801bad4:	f109 0310 	add.w	r3, r9, #16
 801bad8:	f109 0514 	add.w	r5, r9, #20
 801badc:	f104 0e14 	add.w	lr, r4, #20
 801bae0:	f100 0b14 	add.w	fp, r0, #20
 801bae4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801bae8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801baec:	9301      	str	r3, [sp, #4]
 801baee:	46d9      	mov	r9, fp
 801baf0:	f04f 0c00 	mov.w	ip, #0
 801baf4:	9b01      	ldr	r3, [sp, #4]
 801baf6:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bafa:	f853 af04 	ldr.w	sl, [r3, #4]!
 801bafe:	9301      	str	r3, [sp, #4]
 801bb00:	fa1f f38a 	uxth.w	r3, sl
 801bb04:	4619      	mov	r1, r3
 801bb06:	b283      	uxth	r3, r0
 801bb08:	1acb      	subs	r3, r1, r3
 801bb0a:	0c00      	lsrs	r0, r0, #16
 801bb0c:	4463      	add	r3, ip
 801bb0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801bb12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801bb16:	b29b      	uxth	r3, r3
 801bb18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801bb1c:	4576      	cmp	r6, lr
 801bb1e:	f849 3b04 	str.w	r3, [r9], #4
 801bb22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bb26:	d8e5      	bhi.n	801baf4 <__mdiff+0x88>
 801bb28:	1b33      	subs	r3, r6, r4
 801bb2a:	3b15      	subs	r3, #21
 801bb2c:	f023 0303 	bic.w	r3, r3, #3
 801bb30:	3415      	adds	r4, #21
 801bb32:	3304      	adds	r3, #4
 801bb34:	42a6      	cmp	r6, r4
 801bb36:	bf38      	it	cc
 801bb38:	2304      	movcc	r3, #4
 801bb3a:	441d      	add	r5, r3
 801bb3c:	445b      	add	r3, fp
 801bb3e:	461e      	mov	r6, r3
 801bb40:	462c      	mov	r4, r5
 801bb42:	4544      	cmp	r4, r8
 801bb44:	d30e      	bcc.n	801bb64 <__mdiff+0xf8>
 801bb46:	f108 0103 	add.w	r1, r8, #3
 801bb4a:	1b49      	subs	r1, r1, r5
 801bb4c:	f021 0103 	bic.w	r1, r1, #3
 801bb50:	3d03      	subs	r5, #3
 801bb52:	45a8      	cmp	r8, r5
 801bb54:	bf38      	it	cc
 801bb56:	2100      	movcc	r1, #0
 801bb58:	440b      	add	r3, r1
 801bb5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bb5e:	b191      	cbz	r1, 801bb86 <__mdiff+0x11a>
 801bb60:	6117      	str	r7, [r2, #16]
 801bb62:	e79d      	b.n	801baa0 <__mdiff+0x34>
 801bb64:	f854 1b04 	ldr.w	r1, [r4], #4
 801bb68:	46e6      	mov	lr, ip
 801bb6a:	0c08      	lsrs	r0, r1, #16
 801bb6c:	fa1c fc81 	uxtah	ip, ip, r1
 801bb70:	4471      	add	r1, lr
 801bb72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801bb76:	b289      	uxth	r1, r1
 801bb78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bb7c:	f846 1b04 	str.w	r1, [r6], #4
 801bb80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bb84:	e7dd      	b.n	801bb42 <__mdiff+0xd6>
 801bb86:	3f01      	subs	r7, #1
 801bb88:	e7e7      	b.n	801bb5a <__mdiff+0xee>
 801bb8a:	bf00      	nop
 801bb8c:	0801e099 	.word	0x0801e099
 801bb90:	0801e10a 	.word	0x0801e10a

0801bb94 <__ulp>:
 801bb94:	b082      	sub	sp, #8
 801bb96:	ed8d 0b00 	vstr	d0, [sp]
 801bb9a:	9a01      	ldr	r2, [sp, #4]
 801bb9c:	4b0f      	ldr	r3, [pc, #60]	@ (801bbdc <__ulp+0x48>)
 801bb9e:	4013      	ands	r3, r2
 801bba0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	dc08      	bgt.n	801bbba <__ulp+0x26>
 801bba8:	425b      	negs	r3, r3
 801bbaa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801bbae:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bbb2:	da04      	bge.n	801bbbe <__ulp+0x2a>
 801bbb4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801bbb8:	4113      	asrs	r3, r2
 801bbba:	2200      	movs	r2, #0
 801bbbc:	e008      	b.n	801bbd0 <__ulp+0x3c>
 801bbbe:	f1a2 0314 	sub.w	r3, r2, #20
 801bbc2:	2b1e      	cmp	r3, #30
 801bbc4:	bfda      	itte	le
 801bbc6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801bbca:	40da      	lsrle	r2, r3
 801bbcc:	2201      	movgt	r2, #1
 801bbce:	2300      	movs	r3, #0
 801bbd0:	4619      	mov	r1, r3
 801bbd2:	4610      	mov	r0, r2
 801bbd4:	ec41 0b10 	vmov	d0, r0, r1
 801bbd8:	b002      	add	sp, #8
 801bbda:	4770      	bx	lr
 801bbdc:	7ff00000 	.word	0x7ff00000

0801bbe0 <__b2d>:
 801bbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbe4:	6906      	ldr	r6, [r0, #16]
 801bbe6:	f100 0814 	add.w	r8, r0, #20
 801bbea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801bbee:	1f37      	subs	r7, r6, #4
 801bbf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801bbf4:	4610      	mov	r0, r2
 801bbf6:	f7ff fd4b 	bl	801b690 <__hi0bits>
 801bbfa:	f1c0 0320 	rsb	r3, r0, #32
 801bbfe:	280a      	cmp	r0, #10
 801bc00:	600b      	str	r3, [r1, #0]
 801bc02:	491b      	ldr	r1, [pc, #108]	@ (801bc70 <__b2d+0x90>)
 801bc04:	dc15      	bgt.n	801bc32 <__b2d+0x52>
 801bc06:	f1c0 0c0b 	rsb	ip, r0, #11
 801bc0a:	fa22 f30c 	lsr.w	r3, r2, ip
 801bc0e:	45b8      	cmp	r8, r7
 801bc10:	ea43 0501 	orr.w	r5, r3, r1
 801bc14:	bf34      	ite	cc
 801bc16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bc1a:	2300      	movcs	r3, #0
 801bc1c:	3015      	adds	r0, #21
 801bc1e:	fa02 f000 	lsl.w	r0, r2, r0
 801bc22:	fa23 f30c 	lsr.w	r3, r3, ip
 801bc26:	4303      	orrs	r3, r0
 801bc28:	461c      	mov	r4, r3
 801bc2a:	ec45 4b10 	vmov	d0, r4, r5
 801bc2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc32:	45b8      	cmp	r8, r7
 801bc34:	bf3a      	itte	cc
 801bc36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bc3a:	f1a6 0708 	subcc.w	r7, r6, #8
 801bc3e:	2300      	movcs	r3, #0
 801bc40:	380b      	subs	r0, #11
 801bc42:	d012      	beq.n	801bc6a <__b2d+0x8a>
 801bc44:	f1c0 0120 	rsb	r1, r0, #32
 801bc48:	fa23 f401 	lsr.w	r4, r3, r1
 801bc4c:	4082      	lsls	r2, r0
 801bc4e:	4322      	orrs	r2, r4
 801bc50:	4547      	cmp	r7, r8
 801bc52:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801bc56:	bf8c      	ite	hi
 801bc58:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801bc5c:	2200      	movls	r2, #0
 801bc5e:	4083      	lsls	r3, r0
 801bc60:	40ca      	lsrs	r2, r1
 801bc62:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801bc66:	4313      	orrs	r3, r2
 801bc68:	e7de      	b.n	801bc28 <__b2d+0x48>
 801bc6a:	ea42 0501 	orr.w	r5, r2, r1
 801bc6e:	e7db      	b.n	801bc28 <__b2d+0x48>
 801bc70:	3ff00000 	.word	0x3ff00000

0801bc74 <__d2b>:
 801bc74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bc78:	460f      	mov	r7, r1
 801bc7a:	2101      	movs	r1, #1
 801bc7c:	ec59 8b10 	vmov	r8, r9, d0
 801bc80:	4616      	mov	r6, r2
 801bc82:	f7ff fc13 	bl	801b4ac <_Balloc>
 801bc86:	4604      	mov	r4, r0
 801bc88:	b930      	cbnz	r0, 801bc98 <__d2b+0x24>
 801bc8a:	4602      	mov	r2, r0
 801bc8c:	4b23      	ldr	r3, [pc, #140]	@ (801bd1c <__d2b+0xa8>)
 801bc8e:	4824      	ldr	r0, [pc, #144]	@ (801bd20 <__d2b+0xac>)
 801bc90:	f240 310f 	movw	r1, #783	@ 0x30f
 801bc94:	f000 faf4 	bl	801c280 <__assert_func>
 801bc98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bc9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bca0:	b10d      	cbz	r5, 801bca6 <__d2b+0x32>
 801bca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801bca6:	9301      	str	r3, [sp, #4]
 801bca8:	f1b8 0300 	subs.w	r3, r8, #0
 801bcac:	d023      	beq.n	801bcf6 <__d2b+0x82>
 801bcae:	4668      	mov	r0, sp
 801bcb0:	9300      	str	r3, [sp, #0]
 801bcb2:	f7ff fd0c 	bl	801b6ce <__lo0bits>
 801bcb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801bcba:	b1d0      	cbz	r0, 801bcf2 <__d2b+0x7e>
 801bcbc:	f1c0 0320 	rsb	r3, r0, #32
 801bcc0:	fa02 f303 	lsl.w	r3, r2, r3
 801bcc4:	430b      	orrs	r3, r1
 801bcc6:	40c2      	lsrs	r2, r0
 801bcc8:	6163      	str	r3, [r4, #20]
 801bcca:	9201      	str	r2, [sp, #4]
 801bccc:	9b01      	ldr	r3, [sp, #4]
 801bcce:	61a3      	str	r3, [r4, #24]
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	bf0c      	ite	eq
 801bcd4:	2201      	moveq	r2, #1
 801bcd6:	2202      	movne	r2, #2
 801bcd8:	6122      	str	r2, [r4, #16]
 801bcda:	b1a5      	cbz	r5, 801bd06 <__d2b+0x92>
 801bcdc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801bce0:	4405      	add	r5, r0
 801bce2:	603d      	str	r5, [r7, #0]
 801bce4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801bce8:	6030      	str	r0, [r6, #0]
 801bcea:	4620      	mov	r0, r4
 801bcec:	b003      	add	sp, #12
 801bcee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bcf2:	6161      	str	r1, [r4, #20]
 801bcf4:	e7ea      	b.n	801bccc <__d2b+0x58>
 801bcf6:	a801      	add	r0, sp, #4
 801bcf8:	f7ff fce9 	bl	801b6ce <__lo0bits>
 801bcfc:	9b01      	ldr	r3, [sp, #4]
 801bcfe:	6163      	str	r3, [r4, #20]
 801bd00:	3020      	adds	r0, #32
 801bd02:	2201      	movs	r2, #1
 801bd04:	e7e8      	b.n	801bcd8 <__d2b+0x64>
 801bd06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bd0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801bd0e:	6038      	str	r0, [r7, #0]
 801bd10:	6918      	ldr	r0, [r3, #16]
 801bd12:	f7ff fcbd 	bl	801b690 <__hi0bits>
 801bd16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bd1a:	e7e5      	b.n	801bce8 <__d2b+0x74>
 801bd1c:	0801e099 	.word	0x0801e099
 801bd20:	0801e10a 	.word	0x0801e10a

0801bd24 <__ratio>:
 801bd24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd28:	4688      	mov	r8, r1
 801bd2a:	4669      	mov	r1, sp
 801bd2c:	4681      	mov	r9, r0
 801bd2e:	f7ff ff57 	bl	801bbe0 <__b2d>
 801bd32:	a901      	add	r1, sp, #4
 801bd34:	4640      	mov	r0, r8
 801bd36:	ec55 4b10 	vmov	r4, r5, d0
 801bd3a:	f7ff ff51 	bl	801bbe0 <__b2d>
 801bd3e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801bd42:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801bd46:	1ad2      	subs	r2, r2, r3
 801bd48:	e9dd 3100 	ldrd	r3, r1, [sp]
 801bd4c:	1a5b      	subs	r3, r3, r1
 801bd4e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801bd52:	ec57 6b10 	vmov	r6, r7, d0
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	bfd6      	itet	le
 801bd5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bd5e:	462a      	movgt	r2, r5
 801bd60:	463a      	movle	r2, r7
 801bd62:	46ab      	mov	fp, r5
 801bd64:	46a2      	mov	sl, r4
 801bd66:	bfce      	itee	gt
 801bd68:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801bd6c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801bd70:	ee00 3a90 	vmovle	s1, r3
 801bd74:	ec4b ab17 	vmov	d7, sl, fp
 801bd78:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801bd7c:	b003      	add	sp, #12
 801bd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd82 <__copybits>:
 801bd82:	3901      	subs	r1, #1
 801bd84:	b570      	push	{r4, r5, r6, lr}
 801bd86:	1149      	asrs	r1, r1, #5
 801bd88:	6914      	ldr	r4, [r2, #16]
 801bd8a:	3101      	adds	r1, #1
 801bd8c:	f102 0314 	add.w	r3, r2, #20
 801bd90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bd94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bd98:	1f05      	subs	r5, r0, #4
 801bd9a:	42a3      	cmp	r3, r4
 801bd9c:	d30c      	bcc.n	801bdb8 <__copybits+0x36>
 801bd9e:	1aa3      	subs	r3, r4, r2
 801bda0:	3b11      	subs	r3, #17
 801bda2:	f023 0303 	bic.w	r3, r3, #3
 801bda6:	3211      	adds	r2, #17
 801bda8:	42a2      	cmp	r2, r4
 801bdaa:	bf88      	it	hi
 801bdac:	2300      	movhi	r3, #0
 801bdae:	4418      	add	r0, r3
 801bdb0:	2300      	movs	r3, #0
 801bdb2:	4288      	cmp	r0, r1
 801bdb4:	d305      	bcc.n	801bdc2 <__copybits+0x40>
 801bdb6:	bd70      	pop	{r4, r5, r6, pc}
 801bdb8:	f853 6b04 	ldr.w	r6, [r3], #4
 801bdbc:	f845 6f04 	str.w	r6, [r5, #4]!
 801bdc0:	e7eb      	b.n	801bd9a <__copybits+0x18>
 801bdc2:	f840 3b04 	str.w	r3, [r0], #4
 801bdc6:	e7f4      	b.n	801bdb2 <__copybits+0x30>

0801bdc8 <__any_on>:
 801bdc8:	f100 0214 	add.w	r2, r0, #20
 801bdcc:	6900      	ldr	r0, [r0, #16]
 801bdce:	114b      	asrs	r3, r1, #5
 801bdd0:	4298      	cmp	r0, r3
 801bdd2:	b510      	push	{r4, lr}
 801bdd4:	db11      	blt.n	801bdfa <__any_on+0x32>
 801bdd6:	dd0a      	ble.n	801bdee <__any_on+0x26>
 801bdd8:	f011 011f 	ands.w	r1, r1, #31
 801bddc:	d007      	beq.n	801bdee <__any_on+0x26>
 801bdde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bde2:	fa24 f001 	lsr.w	r0, r4, r1
 801bde6:	fa00 f101 	lsl.w	r1, r0, r1
 801bdea:	428c      	cmp	r4, r1
 801bdec:	d10b      	bne.n	801be06 <__any_on+0x3e>
 801bdee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bdf2:	4293      	cmp	r3, r2
 801bdf4:	d803      	bhi.n	801bdfe <__any_on+0x36>
 801bdf6:	2000      	movs	r0, #0
 801bdf8:	bd10      	pop	{r4, pc}
 801bdfa:	4603      	mov	r3, r0
 801bdfc:	e7f7      	b.n	801bdee <__any_on+0x26>
 801bdfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801be02:	2900      	cmp	r1, #0
 801be04:	d0f5      	beq.n	801bdf2 <__any_on+0x2a>
 801be06:	2001      	movs	r0, #1
 801be08:	e7f6      	b.n	801bdf8 <__any_on+0x30>

0801be0a <__ascii_wctomb>:
 801be0a:	4603      	mov	r3, r0
 801be0c:	4608      	mov	r0, r1
 801be0e:	b141      	cbz	r1, 801be22 <__ascii_wctomb+0x18>
 801be10:	2aff      	cmp	r2, #255	@ 0xff
 801be12:	d904      	bls.n	801be1e <__ascii_wctomb+0x14>
 801be14:	228a      	movs	r2, #138	@ 0x8a
 801be16:	601a      	str	r2, [r3, #0]
 801be18:	f04f 30ff 	mov.w	r0, #4294967295
 801be1c:	4770      	bx	lr
 801be1e:	700a      	strb	r2, [r1, #0]
 801be20:	2001      	movs	r0, #1
 801be22:	4770      	bx	lr

0801be24 <__ssputs_r>:
 801be24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be28:	688e      	ldr	r6, [r1, #8]
 801be2a:	461f      	mov	r7, r3
 801be2c:	42be      	cmp	r6, r7
 801be2e:	680b      	ldr	r3, [r1, #0]
 801be30:	4682      	mov	sl, r0
 801be32:	460c      	mov	r4, r1
 801be34:	4690      	mov	r8, r2
 801be36:	d82d      	bhi.n	801be94 <__ssputs_r+0x70>
 801be38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801be3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801be40:	d026      	beq.n	801be90 <__ssputs_r+0x6c>
 801be42:	6965      	ldr	r5, [r4, #20]
 801be44:	6909      	ldr	r1, [r1, #16]
 801be46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801be4a:	eba3 0901 	sub.w	r9, r3, r1
 801be4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801be52:	1c7b      	adds	r3, r7, #1
 801be54:	444b      	add	r3, r9
 801be56:	106d      	asrs	r5, r5, #1
 801be58:	429d      	cmp	r5, r3
 801be5a:	bf38      	it	cc
 801be5c:	461d      	movcc	r5, r3
 801be5e:	0553      	lsls	r3, r2, #21
 801be60:	d527      	bpl.n	801beb2 <__ssputs_r+0x8e>
 801be62:	4629      	mov	r1, r5
 801be64:	f7ff fa84 	bl	801b370 <_malloc_r>
 801be68:	4606      	mov	r6, r0
 801be6a:	b360      	cbz	r0, 801bec6 <__ssputs_r+0xa2>
 801be6c:	6921      	ldr	r1, [r4, #16]
 801be6e:	464a      	mov	r2, r9
 801be70:	f7fe f8d9 	bl	801a026 <memcpy>
 801be74:	89a3      	ldrh	r3, [r4, #12]
 801be76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801be7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801be7e:	81a3      	strh	r3, [r4, #12]
 801be80:	6126      	str	r6, [r4, #16]
 801be82:	6165      	str	r5, [r4, #20]
 801be84:	444e      	add	r6, r9
 801be86:	eba5 0509 	sub.w	r5, r5, r9
 801be8a:	6026      	str	r6, [r4, #0]
 801be8c:	60a5      	str	r5, [r4, #8]
 801be8e:	463e      	mov	r6, r7
 801be90:	42be      	cmp	r6, r7
 801be92:	d900      	bls.n	801be96 <__ssputs_r+0x72>
 801be94:	463e      	mov	r6, r7
 801be96:	6820      	ldr	r0, [r4, #0]
 801be98:	4632      	mov	r2, r6
 801be9a:	4641      	mov	r1, r8
 801be9c:	f000 f9c6 	bl	801c22c <memmove>
 801bea0:	68a3      	ldr	r3, [r4, #8]
 801bea2:	1b9b      	subs	r3, r3, r6
 801bea4:	60a3      	str	r3, [r4, #8]
 801bea6:	6823      	ldr	r3, [r4, #0]
 801bea8:	4433      	add	r3, r6
 801beaa:	6023      	str	r3, [r4, #0]
 801beac:	2000      	movs	r0, #0
 801beae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801beb2:	462a      	mov	r2, r5
 801beb4:	f000 fa16 	bl	801c2e4 <_realloc_r>
 801beb8:	4606      	mov	r6, r0
 801beba:	2800      	cmp	r0, #0
 801bebc:	d1e0      	bne.n	801be80 <__ssputs_r+0x5c>
 801bebe:	6921      	ldr	r1, [r4, #16]
 801bec0:	4650      	mov	r0, sl
 801bec2:	f7fe fea7 	bl	801ac14 <_free_r>
 801bec6:	230c      	movs	r3, #12
 801bec8:	f8ca 3000 	str.w	r3, [sl]
 801becc:	89a3      	ldrh	r3, [r4, #12]
 801bece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bed2:	81a3      	strh	r3, [r4, #12]
 801bed4:	f04f 30ff 	mov.w	r0, #4294967295
 801bed8:	e7e9      	b.n	801beae <__ssputs_r+0x8a>
	...

0801bedc <_svfiprintf_r>:
 801bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bee0:	4698      	mov	r8, r3
 801bee2:	898b      	ldrh	r3, [r1, #12]
 801bee4:	061b      	lsls	r3, r3, #24
 801bee6:	b09d      	sub	sp, #116	@ 0x74
 801bee8:	4607      	mov	r7, r0
 801beea:	460d      	mov	r5, r1
 801beec:	4614      	mov	r4, r2
 801beee:	d510      	bpl.n	801bf12 <_svfiprintf_r+0x36>
 801bef0:	690b      	ldr	r3, [r1, #16]
 801bef2:	b973      	cbnz	r3, 801bf12 <_svfiprintf_r+0x36>
 801bef4:	2140      	movs	r1, #64	@ 0x40
 801bef6:	f7ff fa3b 	bl	801b370 <_malloc_r>
 801befa:	6028      	str	r0, [r5, #0]
 801befc:	6128      	str	r0, [r5, #16]
 801befe:	b930      	cbnz	r0, 801bf0e <_svfiprintf_r+0x32>
 801bf00:	230c      	movs	r3, #12
 801bf02:	603b      	str	r3, [r7, #0]
 801bf04:	f04f 30ff 	mov.w	r0, #4294967295
 801bf08:	b01d      	add	sp, #116	@ 0x74
 801bf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf0e:	2340      	movs	r3, #64	@ 0x40
 801bf10:	616b      	str	r3, [r5, #20]
 801bf12:	2300      	movs	r3, #0
 801bf14:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf16:	2320      	movs	r3, #32
 801bf18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bf1c:	f8cd 800c 	str.w	r8, [sp, #12]
 801bf20:	2330      	movs	r3, #48	@ 0x30
 801bf22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c0c0 <_svfiprintf_r+0x1e4>
 801bf26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bf2a:	f04f 0901 	mov.w	r9, #1
 801bf2e:	4623      	mov	r3, r4
 801bf30:	469a      	mov	sl, r3
 801bf32:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bf36:	b10a      	cbz	r2, 801bf3c <_svfiprintf_r+0x60>
 801bf38:	2a25      	cmp	r2, #37	@ 0x25
 801bf3a:	d1f9      	bne.n	801bf30 <_svfiprintf_r+0x54>
 801bf3c:	ebba 0b04 	subs.w	fp, sl, r4
 801bf40:	d00b      	beq.n	801bf5a <_svfiprintf_r+0x7e>
 801bf42:	465b      	mov	r3, fp
 801bf44:	4622      	mov	r2, r4
 801bf46:	4629      	mov	r1, r5
 801bf48:	4638      	mov	r0, r7
 801bf4a:	f7ff ff6b 	bl	801be24 <__ssputs_r>
 801bf4e:	3001      	adds	r0, #1
 801bf50:	f000 80a7 	beq.w	801c0a2 <_svfiprintf_r+0x1c6>
 801bf54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bf56:	445a      	add	r2, fp
 801bf58:	9209      	str	r2, [sp, #36]	@ 0x24
 801bf5a:	f89a 3000 	ldrb.w	r3, [sl]
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	f000 809f 	beq.w	801c0a2 <_svfiprintf_r+0x1c6>
 801bf64:	2300      	movs	r3, #0
 801bf66:	f04f 32ff 	mov.w	r2, #4294967295
 801bf6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bf6e:	f10a 0a01 	add.w	sl, sl, #1
 801bf72:	9304      	str	r3, [sp, #16]
 801bf74:	9307      	str	r3, [sp, #28]
 801bf76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bf7a:	931a      	str	r3, [sp, #104]	@ 0x68
 801bf7c:	4654      	mov	r4, sl
 801bf7e:	2205      	movs	r2, #5
 801bf80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf84:	484e      	ldr	r0, [pc, #312]	@ (801c0c0 <_svfiprintf_r+0x1e4>)
 801bf86:	f7e4 f9d3 	bl	8000330 <memchr>
 801bf8a:	9a04      	ldr	r2, [sp, #16]
 801bf8c:	b9d8      	cbnz	r0, 801bfc6 <_svfiprintf_r+0xea>
 801bf8e:	06d0      	lsls	r0, r2, #27
 801bf90:	bf44      	itt	mi
 801bf92:	2320      	movmi	r3, #32
 801bf94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bf98:	0711      	lsls	r1, r2, #28
 801bf9a:	bf44      	itt	mi
 801bf9c:	232b      	movmi	r3, #43	@ 0x2b
 801bf9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bfa2:	f89a 3000 	ldrb.w	r3, [sl]
 801bfa6:	2b2a      	cmp	r3, #42	@ 0x2a
 801bfa8:	d015      	beq.n	801bfd6 <_svfiprintf_r+0xfa>
 801bfaa:	9a07      	ldr	r2, [sp, #28]
 801bfac:	4654      	mov	r4, sl
 801bfae:	2000      	movs	r0, #0
 801bfb0:	f04f 0c0a 	mov.w	ip, #10
 801bfb4:	4621      	mov	r1, r4
 801bfb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bfba:	3b30      	subs	r3, #48	@ 0x30
 801bfbc:	2b09      	cmp	r3, #9
 801bfbe:	d94b      	bls.n	801c058 <_svfiprintf_r+0x17c>
 801bfc0:	b1b0      	cbz	r0, 801bff0 <_svfiprintf_r+0x114>
 801bfc2:	9207      	str	r2, [sp, #28]
 801bfc4:	e014      	b.n	801bff0 <_svfiprintf_r+0x114>
 801bfc6:	eba0 0308 	sub.w	r3, r0, r8
 801bfca:	fa09 f303 	lsl.w	r3, r9, r3
 801bfce:	4313      	orrs	r3, r2
 801bfd0:	9304      	str	r3, [sp, #16]
 801bfd2:	46a2      	mov	sl, r4
 801bfd4:	e7d2      	b.n	801bf7c <_svfiprintf_r+0xa0>
 801bfd6:	9b03      	ldr	r3, [sp, #12]
 801bfd8:	1d19      	adds	r1, r3, #4
 801bfda:	681b      	ldr	r3, [r3, #0]
 801bfdc:	9103      	str	r1, [sp, #12]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	bfbb      	ittet	lt
 801bfe2:	425b      	neglt	r3, r3
 801bfe4:	f042 0202 	orrlt.w	r2, r2, #2
 801bfe8:	9307      	strge	r3, [sp, #28]
 801bfea:	9307      	strlt	r3, [sp, #28]
 801bfec:	bfb8      	it	lt
 801bfee:	9204      	strlt	r2, [sp, #16]
 801bff0:	7823      	ldrb	r3, [r4, #0]
 801bff2:	2b2e      	cmp	r3, #46	@ 0x2e
 801bff4:	d10a      	bne.n	801c00c <_svfiprintf_r+0x130>
 801bff6:	7863      	ldrb	r3, [r4, #1]
 801bff8:	2b2a      	cmp	r3, #42	@ 0x2a
 801bffa:	d132      	bne.n	801c062 <_svfiprintf_r+0x186>
 801bffc:	9b03      	ldr	r3, [sp, #12]
 801bffe:	1d1a      	adds	r2, r3, #4
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	9203      	str	r2, [sp, #12]
 801c004:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c008:	3402      	adds	r4, #2
 801c00a:	9305      	str	r3, [sp, #20]
 801c00c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c0d0 <_svfiprintf_r+0x1f4>
 801c010:	7821      	ldrb	r1, [r4, #0]
 801c012:	2203      	movs	r2, #3
 801c014:	4650      	mov	r0, sl
 801c016:	f7e4 f98b 	bl	8000330 <memchr>
 801c01a:	b138      	cbz	r0, 801c02c <_svfiprintf_r+0x150>
 801c01c:	9b04      	ldr	r3, [sp, #16]
 801c01e:	eba0 000a 	sub.w	r0, r0, sl
 801c022:	2240      	movs	r2, #64	@ 0x40
 801c024:	4082      	lsls	r2, r0
 801c026:	4313      	orrs	r3, r2
 801c028:	3401      	adds	r4, #1
 801c02a:	9304      	str	r3, [sp, #16]
 801c02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c030:	4824      	ldr	r0, [pc, #144]	@ (801c0c4 <_svfiprintf_r+0x1e8>)
 801c032:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c036:	2206      	movs	r2, #6
 801c038:	f7e4 f97a 	bl	8000330 <memchr>
 801c03c:	2800      	cmp	r0, #0
 801c03e:	d036      	beq.n	801c0ae <_svfiprintf_r+0x1d2>
 801c040:	4b21      	ldr	r3, [pc, #132]	@ (801c0c8 <_svfiprintf_r+0x1ec>)
 801c042:	bb1b      	cbnz	r3, 801c08c <_svfiprintf_r+0x1b0>
 801c044:	9b03      	ldr	r3, [sp, #12]
 801c046:	3307      	adds	r3, #7
 801c048:	f023 0307 	bic.w	r3, r3, #7
 801c04c:	3308      	adds	r3, #8
 801c04e:	9303      	str	r3, [sp, #12]
 801c050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c052:	4433      	add	r3, r6
 801c054:	9309      	str	r3, [sp, #36]	@ 0x24
 801c056:	e76a      	b.n	801bf2e <_svfiprintf_r+0x52>
 801c058:	fb0c 3202 	mla	r2, ip, r2, r3
 801c05c:	460c      	mov	r4, r1
 801c05e:	2001      	movs	r0, #1
 801c060:	e7a8      	b.n	801bfb4 <_svfiprintf_r+0xd8>
 801c062:	2300      	movs	r3, #0
 801c064:	3401      	adds	r4, #1
 801c066:	9305      	str	r3, [sp, #20]
 801c068:	4619      	mov	r1, r3
 801c06a:	f04f 0c0a 	mov.w	ip, #10
 801c06e:	4620      	mov	r0, r4
 801c070:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c074:	3a30      	subs	r2, #48	@ 0x30
 801c076:	2a09      	cmp	r2, #9
 801c078:	d903      	bls.n	801c082 <_svfiprintf_r+0x1a6>
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d0c6      	beq.n	801c00c <_svfiprintf_r+0x130>
 801c07e:	9105      	str	r1, [sp, #20]
 801c080:	e7c4      	b.n	801c00c <_svfiprintf_r+0x130>
 801c082:	fb0c 2101 	mla	r1, ip, r1, r2
 801c086:	4604      	mov	r4, r0
 801c088:	2301      	movs	r3, #1
 801c08a:	e7f0      	b.n	801c06e <_svfiprintf_r+0x192>
 801c08c:	ab03      	add	r3, sp, #12
 801c08e:	9300      	str	r3, [sp, #0]
 801c090:	462a      	mov	r2, r5
 801c092:	4b0e      	ldr	r3, [pc, #56]	@ (801c0cc <_svfiprintf_r+0x1f0>)
 801c094:	a904      	add	r1, sp, #16
 801c096:	4638      	mov	r0, r7
 801c098:	f7fd fa5a 	bl	8019550 <_printf_float>
 801c09c:	1c42      	adds	r2, r0, #1
 801c09e:	4606      	mov	r6, r0
 801c0a0:	d1d6      	bne.n	801c050 <_svfiprintf_r+0x174>
 801c0a2:	89ab      	ldrh	r3, [r5, #12]
 801c0a4:	065b      	lsls	r3, r3, #25
 801c0a6:	f53f af2d 	bmi.w	801bf04 <_svfiprintf_r+0x28>
 801c0aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c0ac:	e72c      	b.n	801bf08 <_svfiprintf_r+0x2c>
 801c0ae:	ab03      	add	r3, sp, #12
 801c0b0:	9300      	str	r3, [sp, #0]
 801c0b2:	462a      	mov	r2, r5
 801c0b4:	4b05      	ldr	r3, [pc, #20]	@ (801c0cc <_svfiprintf_r+0x1f0>)
 801c0b6:	a904      	add	r1, sp, #16
 801c0b8:	4638      	mov	r0, r7
 801c0ba:	f7fd fcd1 	bl	8019a60 <_printf_i>
 801c0be:	e7ed      	b.n	801c09c <_svfiprintf_r+0x1c0>
 801c0c0:	0801e260 	.word	0x0801e260
 801c0c4:	0801e26a 	.word	0x0801e26a
 801c0c8:	08019551 	.word	0x08019551
 801c0cc:	0801be25 	.word	0x0801be25
 801c0d0:	0801e266 	.word	0x0801e266

0801c0d4 <__sflush_r>:
 801c0d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0dc:	0716      	lsls	r6, r2, #28
 801c0de:	4605      	mov	r5, r0
 801c0e0:	460c      	mov	r4, r1
 801c0e2:	d454      	bmi.n	801c18e <__sflush_r+0xba>
 801c0e4:	684b      	ldr	r3, [r1, #4]
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	dc02      	bgt.n	801c0f0 <__sflush_r+0x1c>
 801c0ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	dd48      	ble.n	801c182 <__sflush_r+0xae>
 801c0f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c0f2:	2e00      	cmp	r6, #0
 801c0f4:	d045      	beq.n	801c182 <__sflush_r+0xae>
 801c0f6:	2300      	movs	r3, #0
 801c0f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c0fc:	682f      	ldr	r7, [r5, #0]
 801c0fe:	6a21      	ldr	r1, [r4, #32]
 801c100:	602b      	str	r3, [r5, #0]
 801c102:	d030      	beq.n	801c166 <__sflush_r+0x92>
 801c104:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c106:	89a3      	ldrh	r3, [r4, #12]
 801c108:	0759      	lsls	r1, r3, #29
 801c10a:	d505      	bpl.n	801c118 <__sflush_r+0x44>
 801c10c:	6863      	ldr	r3, [r4, #4]
 801c10e:	1ad2      	subs	r2, r2, r3
 801c110:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c112:	b10b      	cbz	r3, 801c118 <__sflush_r+0x44>
 801c114:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c116:	1ad2      	subs	r2, r2, r3
 801c118:	2300      	movs	r3, #0
 801c11a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c11c:	6a21      	ldr	r1, [r4, #32]
 801c11e:	4628      	mov	r0, r5
 801c120:	47b0      	blx	r6
 801c122:	1c43      	adds	r3, r0, #1
 801c124:	89a3      	ldrh	r3, [r4, #12]
 801c126:	d106      	bne.n	801c136 <__sflush_r+0x62>
 801c128:	6829      	ldr	r1, [r5, #0]
 801c12a:	291d      	cmp	r1, #29
 801c12c:	d82b      	bhi.n	801c186 <__sflush_r+0xb2>
 801c12e:	4a2a      	ldr	r2, [pc, #168]	@ (801c1d8 <__sflush_r+0x104>)
 801c130:	410a      	asrs	r2, r1
 801c132:	07d6      	lsls	r6, r2, #31
 801c134:	d427      	bmi.n	801c186 <__sflush_r+0xb2>
 801c136:	2200      	movs	r2, #0
 801c138:	6062      	str	r2, [r4, #4]
 801c13a:	04d9      	lsls	r1, r3, #19
 801c13c:	6922      	ldr	r2, [r4, #16]
 801c13e:	6022      	str	r2, [r4, #0]
 801c140:	d504      	bpl.n	801c14c <__sflush_r+0x78>
 801c142:	1c42      	adds	r2, r0, #1
 801c144:	d101      	bne.n	801c14a <__sflush_r+0x76>
 801c146:	682b      	ldr	r3, [r5, #0]
 801c148:	b903      	cbnz	r3, 801c14c <__sflush_r+0x78>
 801c14a:	6560      	str	r0, [r4, #84]	@ 0x54
 801c14c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c14e:	602f      	str	r7, [r5, #0]
 801c150:	b1b9      	cbz	r1, 801c182 <__sflush_r+0xae>
 801c152:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c156:	4299      	cmp	r1, r3
 801c158:	d002      	beq.n	801c160 <__sflush_r+0x8c>
 801c15a:	4628      	mov	r0, r5
 801c15c:	f7fe fd5a 	bl	801ac14 <_free_r>
 801c160:	2300      	movs	r3, #0
 801c162:	6363      	str	r3, [r4, #52]	@ 0x34
 801c164:	e00d      	b.n	801c182 <__sflush_r+0xae>
 801c166:	2301      	movs	r3, #1
 801c168:	4628      	mov	r0, r5
 801c16a:	47b0      	blx	r6
 801c16c:	4602      	mov	r2, r0
 801c16e:	1c50      	adds	r0, r2, #1
 801c170:	d1c9      	bne.n	801c106 <__sflush_r+0x32>
 801c172:	682b      	ldr	r3, [r5, #0]
 801c174:	2b00      	cmp	r3, #0
 801c176:	d0c6      	beq.n	801c106 <__sflush_r+0x32>
 801c178:	2b1d      	cmp	r3, #29
 801c17a:	d001      	beq.n	801c180 <__sflush_r+0xac>
 801c17c:	2b16      	cmp	r3, #22
 801c17e:	d11e      	bne.n	801c1be <__sflush_r+0xea>
 801c180:	602f      	str	r7, [r5, #0]
 801c182:	2000      	movs	r0, #0
 801c184:	e022      	b.n	801c1cc <__sflush_r+0xf8>
 801c186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c18a:	b21b      	sxth	r3, r3
 801c18c:	e01b      	b.n	801c1c6 <__sflush_r+0xf2>
 801c18e:	690f      	ldr	r7, [r1, #16]
 801c190:	2f00      	cmp	r7, #0
 801c192:	d0f6      	beq.n	801c182 <__sflush_r+0xae>
 801c194:	0793      	lsls	r3, r2, #30
 801c196:	680e      	ldr	r6, [r1, #0]
 801c198:	bf08      	it	eq
 801c19a:	694b      	ldreq	r3, [r1, #20]
 801c19c:	600f      	str	r7, [r1, #0]
 801c19e:	bf18      	it	ne
 801c1a0:	2300      	movne	r3, #0
 801c1a2:	eba6 0807 	sub.w	r8, r6, r7
 801c1a6:	608b      	str	r3, [r1, #8]
 801c1a8:	f1b8 0f00 	cmp.w	r8, #0
 801c1ac:	dde9      	ble.n	801c182 <__sflush_r+0xae>
 801c1ae:	6a21      	ldr	r1, [r4, #32]
 801c1b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c1b2:	4643      	mov	r3, r8
 801c1b4:	463a      	mov	r2, r7
 801c1b6:	4628      	mov	r0, r5
 801c1b8:	47b0      	blx	r6
 801c1ba:	2800      	cmp	r0, #0
 801c1bc:	dc08      	bgt.n	801c1d0 <__sflush_r+0xfc>
 801c1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c1c6:	81a3      	strh	r3, [r4, #12]
 801c1c8:	f04f 30ff 	mov.w	r0, #4294967295
 801c1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1d0:	4407      	add	r7, r0
 801c1d2:	eba8 0800 	sub.w	r8, r8, r0
 801c1d6:	e7e7      	b.n	801c1a8 <__sflush_r+0xd4>
 801c1d8:	dfbffffe 	.word	0xdfbffffe

0801c1dc <_fflush_r>:
 801c1dc:	b538      	push	{r3, r4, r5, lr}
 801c1de:	690b      	ldr	r3, [r1, #16]
 801c1e0:	4605      	mov	r5, r0
 801c1e2:	460c      	mov	r4, r1
 801c1e4:	b913      	cbnz	r3, 801c1ec <_fflush_r+0x10>
 801c1e6:	2500      	movs	r5, #0
 801c1e8:	4628      	mov	r0, r5
 801c1ea:	bd38      	pop	{r3, r4, r5, pc}
 801c1ec:	b118      	cbz	r0, 801c1f6 <_fflush_r+0x1a>
 801c1ee:	6a03      	ldr	r3, [r0, #32]
 801c1f0:	b90b      	cbnz	r3, 801c1f6 <_fflush_r+0x1a>
 801c1f2:	f7fd fde1 	bl	8019db8 <__sinit>
 801c1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	d0f3      	beq.n	801c1e6 <_fflush_r+0xa>
 801c1fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c200:	07d0      	lsls	r0, r2, #31
 801c202:	d404      	bmi.n	801c20e <_fflush_r+0x32>
 801c204:	0599      	lsls	r1, r3, #22
 801c206:	d402      	bmi.n	801c20e <_fflush_r+0x32>
 801c208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c20a:	f7fd ff0a 	bl	801a022 <__retarget_lock_acquire_recursive>
 801c20e:	4628      	mov	r0, r5
 801c210:	4621      	mov	r1, r4
 801c212:	f7ff ff5f 	bl	801c0d4 <__sflush_r>
 801c216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c218:	07da      	lsls	r2, r3, #31
 801c21a:	4605      	mov	r5, r0
 801c21c:	d4e4      	bmi.n	801c1e8 <_fflush_r+0xc>
 801c21e:	89a3      	ldrh	r3, [r4, #12]
 801c220:	059b      	lsls	r3, r3, #22
 801c222:	d4e1      	bmi.n	801c1e8 <_fflush_r+0xc>
 801c224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c226:	f7fd fefd 	bl	801a024 <__retarget_lock_release_recursive>
 801c22a:	e7dd      	b.n	801c1e8 <_fflush_r+0xc>

0801c22c <memmove>:
 801c22c:	4288      	cmp	r0, r1
 801c22e:	b510      	push	{r4, lr}
 801c230:	eb01 0402 	add.w	r4, r1, r2
 801c234:	d902      	bls.n	801c23c <memmove+0x10>
 801c236:	4284      	cmp	r4, r0
 801c238:	4623      	mov	r3, r4
 801c23a:	d807      	bhi.n	801c24c <memmove+0x20>
 801c23c:	1e43      	subs	r3, r0, #1
 801c23e:	42a1      	cmp	r1, r4
 801c240:	d008      	beq.n	801c254 <memmove+0x28>
 801c242:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c246:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c24a:	e7f8      	b.n	801c23e <memmove+0x12>
 801c24c:	4402      	add	r2, r0
 801c24e:	4601      	mov	r1, r0
 801c250:	428a      	cmp	r2, r1
 801c252:	d100      	bne.n	801c256 <memmove+0x2a>
 801c254:	bd10      	pop	{r4, pc}
 801c256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c25a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c25e:	e7f7      	b.n	801c250 <memmove+0x24>

0801c260 <_sbrk_r>:
 801c260:	b538      	push	{r3, r4, r5, lr}
 801c262:	4d06      	ldr	r5, [pc, #24]	@ (801c27c <_sbrk_r+0x1c>)
 801c264:	2300      	movs	r3, #0
 801c266:	4604      	mov	r4, r0
 801c268:	4608      	mov	r0, r1
 801c26a:	602b      	str	r3, [r5, #0]
 801c26c:	f7e6 fdbc 	bl	8002de8 <_sbrk>
 801c270:	1c43      	adds	r3, r0, #1
 801c272:	d102      	bne.n	801c27a <_sbrk_r+0x1a>
 801c274:	682b      	ldr	r3, [r5, #0]
 801c276:	b103      	cbz	r3, 801c27a <_sbrk_r+0x1a>
 801c278:	6023      	str	r3, [r4, #0]
 801c27a:	bd38      	pop	{r3, r4, r5, pc}
 801c27c:	240153a8 	.word	0x240153a8

0801c280 <__assert_func>:
 801c280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c282:	4614      	mov	r4, r2
 801c284:	461a      	mov	r2, r3
 801c286:	4b09      	ldr	r3, [pc, #36]	@ (801c2ac <__assert_func+0x2c>)
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	4605      	mov	r5, r0
 801c28c:	68d8      	ldr	r0, [r3, #12]
 801c28e:	b954      	cbnz	r4, 801c2a6 <__assert_func+0x26>
 801c290:	4b07      	ldr	r3, [pc, #28]	@ (801c2b0 <__assert_func+0x30>)
 801c292:	461c      	mov	r4, r3
 801c294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c298:	9100      	str	r1, [sp, #0]
 801c29a:	462b      	mov	r3, r5
 801c29c:	4905      	ldr	r1, [pc, #20]	@ (801c2b4 <__assert_func+0x34>)
 801c29e:	f000 f84f 	bl	801c340 <fiprintf>
 801c2a2:	f000 f85f 	bl	801c364 <abort>
 801c2a6:	4b04      	ldr	r3, [pc, #16]	@ (801c2b8 <__assert_func+0x38>)
 801c2a8:	e7f4      	b.n	801c294 <__assert_func+0x14>
 801c2aa:	bf00      	nop
 801c2ac:	2400027c 	.word	0x2400027c
 801c2b0:	0801e2ac 	.word	0x0801e2ac
 801c2b4:	0801e27e 	.word	0x0801e27e
 801c2b8:	0801e271 	.word	0x0801e271

0801c2bc <_calloc_r>:
 801c2bc:	b570      	push	{r4, r5, r6, lr}
 801c2be:	fba1 5402 	umull	r5, r4, r1, r2
 801c2c2:	b93c      	cbnz	r4, 801c2d4 <_calloc_r+0x18>
 801c2c4:	4629      	mov	r1, r5
 801c2c6:	f7ff f853 	bl	801b370 <_malloc_r>
 801c2ca:	4606      	mov	r6, r0
 801c2cc:	b928      	cbnz	r0, 801c2da <_calloc_r+0x1e>
 801c2ce:	2600      	movs	r6, #0
 801c2d0:	4630      	mov	r0, r6
 801c2d2:	bd70      	pop	{r4, r5, r6, pc}
 801c2d4:	220c      	movs	r2, #12
 801c2d6:	6002      	str	r2, [r0, #0]
 801c2d8:	e7f9      	b.n	801c2ce <_calloc_r+0x12>
 801c2da:	462a      	mov	r2, r5
 801c2dc:	4621      	mov	r1, r4
 801c2de:	f7fd fe04 	bl	8019eea <memset>
 801c2e2:	e7f5      	b.n	801c2d0 <_calloc_r+0x14>

0801c2e4 <_realloc_r>:
 801c2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2e8:	4680      	mov	r8, r0
 801c2ea:	4615      	mov	r5, r2
 801c2ec:	460c      	mov	r4, r1
 801c2ee:	b921      	cbnz	r1, 801c2fa <_realloc_r+0x16>
 801c2f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2f4:	4611      	mov	r1, r2
 801c2f6:	f7ff b83b 	b.w	801b370 <_malloc_r>
 801c2fa:	b92a      	cbnz	r2, 801c308 <_realloc_r+0x24>
 801c2fc:	f7fe fc8a 	bl	801ac14 <_free_r>
 801c300:	2400      	movs	r4, #0
 801c302:	4620      	mov	r0, r4
 801c304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c308:	f000 f833 	bl	801c372 <_malloc_usable_size_r>
 801c30c:	4285      	cmp	r5, r0
 801c30e:	4606      	mov	r6, r0
 801c310:	d802      	bhi.n	801c318 <_realloc_r+0x34>
 801c312:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c316:	d8f4      	bhi.n	801c302 <_realloc_r+0x1e>
 801c318:	4629      	mov	r1, r5
 801c31a:	4640      	mov	r0, r8
 801c31c:	f7ff f828 	bl	801b370 <_malloc_r>
 801c320:	4607      	mov	r7, r0
 801c322:	2800      	cmp	r0, #0
 801c324:	d0ec      	beq.n	801c300 <_realloc_r+0x1c>
 801c326:	42b5      	cmp	r5, r6
 801c328:	462a      	mov	r2, r5
 801c32a:	4621      	mov	r1, r4
 801c32c:	bf28      	it	cs
 801c32e:	4632      	movcs	r2, r6
 801c330:	f7fd fe79 	bl	801a026 <memcpy>
 801c334:	4621      	mov	r1, r4
 801c336:	4640      	mov	r0, r8
 801c338:	f7fe fc6c 	bl	801ac14 <_free_r>
 801c33c:	463c      	mov	r4, r7
 801c33e:	e7e0      	b.n	801c302 <_realloc_r+0x1e>

0801c340 <fiprintf>:
 801c340:	b40e      	push	{r1, r2, r3}
 801c342:	b503      	push	{r0, r1, lr}
 801c344:	4601      	mov	r1, r0
 801c346:	ab03      	add	r3, sp, #12
 801c348:	4805      	ldr	r0, [pc, #20]	@ (801c360 <fiprintf+0x20>)
 801c34a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c34e:	6800      	ldr	r0, [r0, #0]
 801c350:	9301      	str	r3, [sp, #4]
 801c352:	f000 f83f 	bl	801c3d4 <_vfiprintf_r>
 801c356:	b002      	add	sp, #8
 801c358:	f85d eb04 	ldr.w	lr, [sp], #4
 801c35c:	b003      	add	sp, #12
 801c35e:	4770      	bx	lr
 801c360:	2400027c 	.word	0x2400027c

0801c364 <abort>:
 801c364:	b508      	push	{r3, lr}
 801c366:	2006      	movs	r0, #6
 801c368:	f000 fa08 	bl	801c77c <raise>
 801c36c:	2001      	movs	r0, #1
 801c36e:	f7e6 fcc3 	bl	8002cf8 <_exit>

0801c372 <_malloc_usable_size_r>:
 801c372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c376:	1f18      	subs	r0, r3, #4
 801c378:	2b00      	cmp	r3, #0
 801c37a:	bfbc      	itt	lt
 801c37c:	580b      	ldrlt	r3, [r1, r0]
 801c37e:	18c0      	addlt	r0, r0, r3
 801c380:	4770      	bx	lr

0801c382 <__sfputc_r>:
 801c382:	6893      	ldr	r3, [r2, #8]
 801c384:	3b01      	subs	r3, #1
 801c386:	2b00      	cmp	r3, #0
 801c388:	b410      	push	{r4}
 801c38a:	6093      	str	r3, [r2, #8]
 801c38c:	da08      	bge.n	801c3a0 <__sfputc_r+0x1e>
 801c38e:	6994      	ldr	r4, [r2, #24]
 801c390:	42a3      	cmp	r3, r4
 801c392:	db01      	blt.n	801c398 <__sfputc_r+0x16>
 801c394:	290a      	cmp	r1, #10
 801c396:	d103      	bne.n	801c3a0 <__sfputc_r+0x1e>
 801c398:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c39c:	f000 b932 	b.w	801c604 <__swbuf_r>
 801c3a0:	6813      	ldr	r3, [r2, #0]
 801c3a2:	1c58      	adds	r0, r3, #1
 801c3a4:	6010      	str	r0, [r2, #0]
 801c3a6:	7019      	strb	r1, [r3, #0]
 801c3a8:	4608      	mov	r0, r1
 801c3aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c3ae:	4770      	bx	lr

0801c3b0 <__sfputs_r>:
 801c3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3b2:	4606      	mov	r6, r0
 801c3b4:	460f      	mov	r7, r1
 801c3b6:	4614      	mov	r4, r2
 801c3b8:	18d5      	adds	r5, r2, r3
 801c3ba:	42ac      	cmp	r4, r5
 801c3bc:	d101      	bne.n	801c3c2 <__sfputs_r+0x12>
 801c3be:	2000      	movs	r0, #0
 801c3c0:	e007      	b.n	801c3d2 <__sfputs_r+0x22>
 801c3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3c6:	463a      	mov	r2, r7
 801c3c8:	4630      	mov	r0, r6
 801c3ca:	f7ff ffda 	bl	801c382 <__sfputc_r>
 801c3ce:	1c43      	adds	r3, r0, #1
 801c3d0:	d1f3      	bne.n	801c3ba <__sfputs_r+0xa>
 801c3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c3d4 <_vfiprintf_r>:
 801c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3d8:	460d      	mov	r5, r1
 801c3da:	b09d      	sub	sp, #116	@ 0x74
 801c3dc:	4614      	mov	r4, r2
 801c3de:	4698      	mov	r8, r3
 801c3e0:	4606      	mov	r6, r0
 801c3e2:	b118      	cbz	r0, 801c3ec <_vfiprintf_r+0x18>
 801c3e4:	6a03      	ldr	r3, [r0, #32]
 801c3e6:	b90b      	cbnz	r3, 801c3ec <_vfiprintf_r+0x18>
 801c3e8:	f7fd fce6 	bl	8019db8 <__sinit>
 801c3ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c3ee:	07d9      	lsls	r1, r3, #31
 801c3f0:	d405      	bmi.n	801c3fe <_vfiprintf_r+0x2a>
 801c3f2:	89ab      	ldrh	r3, [r5, #12]
 801c3f4:	059a      	lsls	r2, r3, #22
 801c3f6:	d402      	bmi.n	801c3fe <_vfiprintf_r+0x2a>
 801c3f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c3fa:	f7fd fe12 	bl	801a022 <__retarget_lock_acquire_recursive>
 801c3fe:	89ab      	ldrh	r3, [r5, #12]
 801c400:	071b      	lsls	r3, r3, #28
 801c402:	d501      	bpl.n	801c408 <_vfiprintf_r+0x34>
 801c404:	692b      	ldr	r3, [r5, #16]
 801c406:	b99b      	cbnz	r3, 801c430 <_vfiprintf_r+0x5c>
 801c408:	4629      	mov	r1, r5
 801c40a:	4630      	mov	r0, r6
 801c40c:	f000 f938 	bl	801c680 <__swsetup_r>
 801c410:	b170      	cbz	r0, 801c430 <_vfiprintf_r+0x5c>
 801c412:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c414:	07dc      	lsls	r4, r3, #31
 801c416:	d504      	bpl.n	801c422 <_vfiprintf_r+0x4e>
 801c418:	f04f 30ff 	mov.w	r0, #4294967295
 801c41c:	b01d      	add	sp, #116	@ 0x74
 801c41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c422:	89ab      	ldrh	r3, [r5, #12]
 801c424:	0598      	lsls	r0, r3, #22
 801c426:	d4f7      	bmi.n	801c418 <_vfiprintf_r+0x44>
 801c428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c42a:	f7fd fdfb 	bl	801a024 <__retarget_lock_release_recursive>
 801c42e:	e7f3      	b.n	801c418 <_vfiprintf_r+0x44>
 801c430:	2300      	movs	r3, #0
 801c432:	9309      	str	r3, [sp, #36]	@ 0x24
 801c434:	2320      	movs	r3, #32
 801c436:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c43a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c43e:	2330      	movs	r3, #48	@ 0x30
 801c440:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c5f0 <_vfiprintf_r+0x21c>
 801c444:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c448:	f04f 0901 	mov.w	r9, #1
 801c44c:	4623      	mov	r3, r4
 801c44e:	469a      	mov	sl, r3
 801c450:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c454:	b10a      	cbz	r2, 801c45a <_vfiprintf_r+0x86>
 801c456:	2a25      	cmp	r2, #37	@ 0x25
 801c458:	d1f9      	bne.n	801c44e <_vfiprintf_r+0x7a>
 801c45a:	ebba 0b04 	subs.w	fp, sl, r4
 801c45e:	d00b      	beq.n	801c478 <_vfiprintf_r+0xa4>
 801c460:	465b      	mov	r3, fp
 801c462:	4622      	mov	r2, r4
 801c464:	4629      	mov	r1, r5
 801c466:	4630      	mov	r0, r6
 801c468:	f7ff ffa2 	bl	801c3b0 <__sfputs_r>
 801c46c:	3001      	adds	r0, #1
 801c46e:	f000 80a7 	beq.w	801c5c0 <_vfiprintf_r+0x1ec>
 801c472:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c474:	445a      	add	r2, fp
 801c476:	9209      	str	r2, [sp, #36]	@ 0x24
 801c478:	f89a 3000 	ldrb.w	r3, [sl]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	f000 809f 	beq.w	801c5c0 <_vfiprintf_r+0x1ec>
 801c482:	2300      	movs	r3, #0
 801c484:	f04f 32ff 	mov.w	r2, #4294967295
 801c488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c48c:	f10a 0a01 	add.w	sl, sl, #1
 801c490:	9304      	str	r3, [sp, #16]
 801c492:	9307      	str	r3, [sp, #28]
 801c494:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c498:	931a      	str	r3, [sp, #104]	@ 0x68
 801c49a:	4654      	mov	r4, sl
 801c49c:	2205      	movs	r2, #5
 801c49e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c4a2:	4853      	ldr	r0, [pc, #332]	@ (801c5f0 <_vfiprintf_r+0x21c>)
 801c4a4:	f7e3 ff44 	bl	8000330 <memchr>
 801c4a8:	9a04      	ldr	r2, [sp, #16]
 801c4aa:	b9d8      	cbnz	r0, 801c4e4 <_vfiprintf_r+0x110>
 801c4ac:	06d1      	lsls	r1, r2, #27
 801c4ae:	bf44      	itt	mi
 801c4b0:	2320      	movmi	r3, #32
 801c4b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c4b6:	0713      	lsls	r3, r2, #28
 801c4b8:	bf44      	itt	mi
 801c4ba:	232b      	movmi	r3, #43	@ 0x2b
 801c4bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c4c0:	f89a 3000 	ldrb.w	r3, [sl]
 801c4c4:	2b2a      	cmp	r3, #42	@ 0x2a
 801c4c6:	d015      	beq.n	801c4f4 <_vfiprintf_r+0x120>
 801c4c8:	9a07      	ldr	r2, [sp, #28]
 801c4ca:	4654      	mov	r4, sl
 801c4cc:	2000      	movs	r0, #0
 801c4ce:	f04f 0c0a 	mov.w	ip, #10
 801c4d2:	4621      	mov	r1, r4
 801c4d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c4d8:	3b30      	subs	r3, #48	@ 0x30
 801c4da:	2b09      	cmp	r3, #9
 801c4dc:	d94b      	bls.n	801c576 <_vfiprintf_r+0x1a2>
 801c4de:	b1b0      	cbz	r0, 801c50e <_vfiprintf_r+0x13a>
 801c4e0:	9207      	str	r2, [sp, #28]
 801c4e2:	e014      	b.n	801c50e <_vfiprintf_r+0x13a>
 801c4e4:	eba0 0308 	sub.w	r3, r0, r8
 801c4e8:	fa09 f303 	lsl.w	r3, r9, r3
 801c4ec:	4313      	orrs	r3, r2
 801c4ee:	9304      	str	r3, [sp, #16]
 801c4f0:	46a2      	mov	sl, r4
 801c4f2:	e7d2      	b.n	801c49a <_vfiprintf_r+0xc6>
 801c4f4:	9b03      	ldr	r3, [sp, #12]
 801c4f6:	1d19      	adds	r1, r3, #4
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	9103      	str	r1, [sp, #12]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	bfbb      	ittet	lt
 801c500:	425b      	neglt	r3, r3
 801c502:	f042 0202 	orrlt.w	r2, r2, #2
 801c506:	9307      	strge	r3, [sp, #28]
 801c508:	9307      	strlt	r3, [sp, #28]
 801c50a:	bfb8      	it	lt
 801c50c:	9204      	strlt	r2, [sp, #16]
 801c50e:	7823      	ldrb	r3, [r4, #0]
 801c510:	2b2e      	cmp	r3, #46	@ 0x2e
 801c512:	d10a      	bne.n	801c52a <_vfiprintf_r+0x156>
 801c514:	7863      	ldrb	r3, [r4, #1]
 801c516:	2b2a      	cmp	r3, #42	@ 0x2a
 801c518:	d132      	bne.n	801c580 <_vfiprintf_r+0x1ac>
 801c51a:	9b03      	ldr	r3, [sp, #12]
 801c51c:	1d1a      	adds	r2, r3, #4
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	9203      	str	r2, [sp, #12]
 801c522:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c526:	3402      	adds	r4, #2
 801c528:	9305      	str	r3, [sp, #20]
 801c52a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c600 <_vfiprintf_r+0x22c>
 801c52e:	7821      	ldrb	r1, [r4, #0]
 801c530:	2203      	movs	r2, #3
 801c532:	4650      	mov	r0, sl
 801c534:	f7e3 fefc 	bl	8000330 <memchr>
 801c538:	b138      	cbz	r0, 801c54a <_vfiprintf_r+0x176>
 801c53a:	9b04      	ldr	r3, [sp, #16]
 801c53c:	eba0 000a 	sub.w	r0, r0, sl
 801c540:	2240      	movs	r2, #64	@ 0x40
 801c542:	4082      	lsls	r2, r0
 801c544:	4313      	orrs	r3, r2
 801c546:	3401      	adds	r4, #1
 801c548:	9304      	str	r3, [sp, #16]
 801c54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c54e:	4829      	ldr	r0, [pc, #164]	@ (801c5f4 <_vfiprintf_r+0x220>)
 801c550:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c554:	2206      	movs	r2, #6
 801c556:	f7e3 feeb 	bl	8000330 <memchr>
 801c55a:	2800      	cmp	r0, #0
 801c55c:	d03f      	beq.n	801c5de <_vfiprintf_r+0x20a>
 801c55e:	4b26      	ldr	r3, [pc, #152]	@ (801c5f8 <_vfiprintf_r+0x224>)
 801c560:	bb1b      	cbnz	r3, 801c5aa <_vfiprintf_r+0x1d6>
 801c562:	9b03      	ldr	r3, [sp, #12]
 801c564:	3307      	adds	r3, #7
 801c566:	f023 0307 	bic.w	r3, r3, #7
 801c56a:	3308      	adds	r3, #8
 801c56c:	9303      	str	r3, [sp, #12]
 801c56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c570:	443b      	add	r3, r7
 801c572:	9309      	str	r3, [sp, #36]	@ 0x24
 801c574:	e76a      	b.n	801c44c <_vfiprintf_r+0x78>
 801c576:	fb0c 3202 	mla	r2, ip, r2, r3
 801c57a:	460c      	mov	r4, r1
 801c57c:	2001      	movs	r0, #1
 801c57e:	e7a8      	b.n	801c4d2 <_vfiprintf_r+0xfe>
 801c580:	2300      	movs	r3, #0
 801c582:	3401      	adds	r4, #1
 801c584:	9305      	str	r3, [sp, #20]
 801c586:	4619      	mov	r1, r3
 801c588:	f04f 0c0a 	mov.w	ip, #10
 801c58c:	4620      	mov	r0, r4
 801c58e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c592:	3a30      	subs	r2, #48	@ 0x30
 801c594:	2a09      	cmp	r2, #9
 801c596:	d903      	bls.n	801c5a0 <_vfiprintf_r+0x1cc>
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d0c6      	beq.n	801c52a <_vfiprintf_r+0x156>
 801c59c:	9105      	str	r1, [sp, #20]
 801c59e:	e7c4      	b.n	801c52a <_vfiprintf_r+0x156>
 801c5a0:	fb0c 2101 	mla	r1, ip, r1, r2
 801c5a4:	4604      	mov	r4, r0
 801c5a6:	2301      	movs	r3, #1
 801c5a8:	e7f0      	b.n	801c58c <_vfiprintf_r+0x1b8>
 801c5aa:	ab03      	add	r3, sp, #12
 801c5ac:	9300      	str	r3, [sp, #0]
 801c5ae:	462a      	mov	r2, r5
 801c5b0:	4b12      	ldr	r3, [pc, #72]	@ (801c5fc <_vfiprintf_r+0x228>)
 801c5b2:	a904      	add	r1, sp, #16
 801c5b4:	4630      	mov	r0, r6
 801c5b6:	f7fc ffcb 	bl	8019550 <_printf_float>
 801c5ba:	4607      	mov	r7, r0
 801c5bc:	1c78      	adds	r0, r7, #1
 801c5be:	d1d6      	bne.n	801c56e <_vfiprintf_r+0x19a>
 801c5c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c5c2:	07d9      	lsls	r1, r3, #31
 801c5c4:	d405      	bmi.n	801c5d2 <_vfiprintf_r+0x1fe>
 801c5c6:	89ab      	ldrh	r3, [r5, #12]
 801c5c8:	059a      	lsls	r2, r3, #22
 801c5ca:	d402      	bmi.n	801c5d2 <_vfiprintf_r+0x1fe>
 801c5cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c5ce:	f7fd fd29 	bl	801a024 <__retarget_lock_release_recursive>
 801c5d2:	89ab      	ldrh	r3, [r5, #12]
 801c5d4:	065b      	lsls	r3, r3, #25
 801c5d6:	f53f af1f 	bmi.w	801c418 <_vfiprintf_r+0x44>
 801c5da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c5dc:	e71e      	b.n	801c41c <_vfiprintf_r+0x48>
 801c5de:	ab03      	add	r3, sp, #12
 801c5e0:	9300      	str	r3, [sp, #0]
 801c5e2:	462a      	mov	r2, r5
 801c5e4:	4b05      	ldr	r3, [pc, #20]	@ (801c5fc <_vfiprintf_r+0x228>)
 801c5e6:	a904      	add	r1, sp, #16
 801c5e8:	4630      	mov	r0, r6
 801c5ea:	f7fd fa39 	bl	8019a60 <_printf_i>
 801c5ee:	e7e4      	b.n	801c5ba <_vfiprintf_r+0x1e6>
 801c5f0:	0801e260 	.word	0x0801e260
 801c5f4:	0801e26a 	.word	0x0801e26a
 801c5f8:	08019551 	.word	0x08019551
 801c5fc:	0801c3b1 	.word	0x0801c3b1
 801c600:	0801e266 	.word	0x0801e266

0801c604 <__swbuf_r>:
 801c604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c606:	460e      	mov	r6, r1
 801c608:	4614      	mov	r4, r2
 801c60a:	4605      	mov	r5, r0
 801c60c:	b118      	cbz	r0, 801c616 <__swbuf_r+0x12>
 801c60e:	6a03      	ldr	r3, [r0, #32]
 801c610:	b90b      	cbnz	r3, 801c616 <__swbuf_r+0x12>
 801c612:	f7fd fbd1 	bl	8019db8 <__sinit>
 801c616:	69a3      	ldr	r3, [r4, #24]
 801c618:	60a3      	str	r3, [r4, #8]
 801c61a:	89a3      	ldrh	r3, [r4, #12]
 801c61c:	071a      	lsls	r2, r3, #28
 801c61e:	d501      	bpl.n	801c624 <__swbuf_r+0x20>
 801c620:	6923      	ldr	r3, [r4, #16]
 801c622:	b943      	cbnz	r3, 801c636 <__swbuf_r+0x32>
 801c624:	4621      	mov	r1, r4
 801c626:	4628      	mov	r0, r5
 801c628:	f000 f82a 	bl	801c680 <__swsetup_r>
 801c62c:	b118      	cbz	r0, 801c636 <__swbuf_r+0x32>
 801c62e:	f04f 37ff 	mov.w	r7, #4294967295
 801c632:	4638      	mov	r0, r7
 801c634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c636:	6823      	ldr	r3, [r4, #0]
 801c638:	6922      	ldr	r2, [r4, #16]
 801c63a:	1a98      	subs	r0, r3, r2
 801c63c:	6963      	ldr	r3, [r4, #20]
 801c63e:	b2f6      	uxtb	r6, r6
 801c640:	4283      	cmp	r3, r0
 801c642:	4637      	mov	r7, r6
 801c644:	dc05      	bgt.n	801c652 <__swbuf_r+0x4e>
 801c646:	4621      	mov	r1, r4
 801c648:	4628      	mov	r0, r5
 801c64a:	f7ff fdc7 	bl	801c1dc <_fflush_r>
 801c64e:	2800      	cmp	r0, #0
 801c650:	d1ed      	bne.n	801c62e <__swbuf_r+0x2a>
 801c652:	68a3      	ldr	r3, [r4, #8]
 801c654:	3b01      	subs	r3, #1
 801c656:	60a3      	str	r3, [r4, #8]
 801c658:	6823      	ldr	r3, [r4, #0]
 801c65a:	1c5a      	adds	r2, r3, #1
 801c65c:	6022      	str	r2, [r4, #0]
 801c65e:	701e      	strb	r6, [r3, #0]
 801c660:	6962      	ldr	r2, [r4, #20]
 801c662:	1c43      	adds	r3, r0, #1
 801c664:	429a      	cmp	r2, r3
 801c666:	d004      	beq.n	801c672 <__swbuf_r+0x6e>
 801c668:	89a3      	ldrh	r3, [r4, #12]
 801c66a:	07db      	lsls	r3, r3, #31
 801c66c:	d5e1      	bpl.n	801c632 <__swbuf_r+0x2e>
 801c66e:	2e0a      	cmp	r6, #10
 801c670:	d1df      	bne.n	801c632 <__swbuf_r+0x2e>
 801c672:	4621      	mov	r1, r4
 801c674:	4628      	mov	r0, r5
 801c676:	f7ff fdb1 	bl	801c1dc <_fflush_r>
 801c67a:	2800      	cmp	r0, #0
 801c67c:	d0d9      	beq.n	801c632 <__swbuf_r+0x2e>
 801c67e:	e7d6      	b.n	801c62e <__swbuf_r+0x2a>

0801c680 <__swsetup_r>:
 801c680:	b538      	push	{r3, r4, r5, lr}
 801c682:	4b29      	ldr	r3, [pc, #164]	@ (801c728 <__swsetup_r+0xa8>)
 801c684:	4605      	mov	r5, r0
 801c686:	6818      	ldr	r0, [r3, #0]
 801c688:	460c      	mov	r4, r1
 801c68a:	b118      	cbz	r0, 801c694 <__swsetup_r+0x14>
 801c68c:	6a03      	ldr	r3, [r0, #32]
 801c68e:	b90b      	cbnz	r3, 801c694 <__swsetup_r+0x14>
 801c690:	f7fd fb92 	bl	8019db8 <__sinit>
 801c694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c698:	0719      	lsls	r1, r3, #28
 801c69a:	d422      	bmi.n	801c6e2 <__swsetup_r+0x62>
 801c69c:	06da      	lsls	r2, r3, #27
 801c69e:	d407      	bmi.n	801c6b0 <__swsetup_r+0x30>
 801c6a0:	2209      	movs	r2, #9
 801c6a2:	602a      	str	r2, [r5, #0]
 801c6a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c6a8:	81a3      	strh	r3, [r4, #12]
 801c6aa:	f04f 30ff 	mov.w	r0, #4294967295
 801c6ae:	e033      	b.n	801c718 <__swsetup_r+0x98>
 801c6b0:	0758      	lsls	r0, r3, #29
 801c6b2:	d512      	bpl.n	801c6da <__swsetup_r+0x5a>
 801c6b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c6b6:	b141      	cbz	r1, 801c6ca <__swsetup_r+0x4a>
 801c6b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c6bc:	4299      	cmp	r1, r3
 801c6be:	d002      	beq.n	801c6c6 <__swsetup_r+0x46>
 801c6c0:	4628      	mov	r0, r5
 801c6c2:	f7fe faa7 	bl	801ac14 <_free_r>
 801c6c6:	2300      	movs	r3, #0
 801c6c8:	6363      	str	r3, [r4, #52]	@ 0x34
 801c6ca:	89a3      	ldrh	r3, [r4, #12]
 801c6cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c6d0:	81a3      	strh	r3, [r4, #12]
 801c6d2:	2300      	movs	r3, #0
 801c6d4:	6063      	str	r3, [r4, #4]
 801c6d6:	6923      	ldr	r3, [r4, #16]
 801c6d8:	6023      	str	r3, [r4, #0]
 801c6da:	89a3      	ldrh	r3, [r4, #12]
 801c6dc:	f043 0308 	orr.w	r3, r3, #8
 801c6e0:	81a3      	strh	r3, [r4, #12]
 801c6e2:	6923      	ldr	r3, [r4, #16]
 801c6e4:	b94b      	cbnz	r3, 801c6fa <__swsetup_r+0x7a>
 801c6e6:	89a3      	ldrh	r3, [r4, #12]
 801c6e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c6ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c6f0:	d003      	beq.n	801c6fa <__swsetup_r+0x7a>
 801c6f2:	4621      	mov	r1, r4
 801c6f4:	4628      	mov	r0, r5
 801c6f6:	f000 f883 	bl	801c800 <__smakebuf_r>
 801c6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c6fe:	f013 0201 	ands.w	r2, r3, #1
 801c702:	d00a      	beq.n	801c71a <__swsetup_r+0x9a>
 801c704:	2200      	movs	r2, #0
 801c706:	60a2      	str	r2, [r4, #8]
 801c708:	6962      	ldr	r2, [r4, #20]
 801c70a:	4252      	negs	r2, r2
 801c70c:	61a2      	str	r2, [r4, #24]
 801c70e:	6922      	ldr	r2, [r4, #16]
 801c710:	b942      	cbnz	r2, 801c724 <__swsetup_r+0xa4>
 801c712:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c716:	d1c5      	bne.n	801c6a4 <__swsetup_r+0x24>
 801c718:	bd38      	pop	{r3, r4, r5, pc}
 801c71a:	0799      	lsls	r1, r3, #30
 801c71c:	bf58      	it	pl
 801c71e:	6962      	ldrpl	r2, [r4, #20]
 801c720:	60a2      	str	r2, [r4, #8]
 801c722:	e7f4      	b.n	801c70e <__swsetup_r+0x8e>
 801c724:	2000      	movs	r0, #0
 801c726:	e7f7      	b.n	801c718 <__swsetup_r+0x98>
 801c728:	2400027c 	.word	0x2400027c

0801c72c <_raise_r>:
 801c72c:	291f      	cmp	r1, #31
 801c72e:	b538      	push	{r3, r4, r5, lr}
 801c730:	4605      	mov	r5, r0
 801c732:	460c      	mov	r4, r1
 801c734:	d904      	bls.n	801c740 <_raise_r+0x14>
 801c736:	2316      	movs	r3, #22
 801c738:	6003      	str	r3, [r0, #0]
 801c73a:	f04f 30ff 	mov.w	r0, #4294967295
 801c73e:	bd38      	pop	{r3, r4, r5, pc}
 801c740:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c742:	b112      	cbz	r2, 801c74a <_raise_r+0x1e>
 801c744:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c748:	b94b      	cbnz	r3, 801c75e <_raise_r+0x32>
 801c74a:	4628      	mov	r0, r5
 801c74c:	f000 f830 	bl	801c7b0 <_getpid_r>
 801c750:	4622      	mov	r2, r4
 801c752:	4601      	mov	r1, r0
 801c754:	4628      	mov	r0, r5
 801c756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c75a:	f000 b817 	b.w	801c78c <_kill_r>
 801c75e:	2b01      	cmp	r3, #1
 801c760:	d00a      	beq.n	801c778 <_raise_r+0x4c>
 801c762:	1c59      	adds	r1, r3, #1
 801c764:	d103      	bne.n	801c76e <_raise_r+0x42>
 801c766:	2316      	movs	r3, #22
 801c768:	6003      	str	r3, [r0, #0]
 801c76a:	2001      	movs	r0, #1
 801c76c:	e7e7      	b.n	801c73e <_raise_r+0x12>
 801c76e:	2100      	movs	r1, #0
 801c770:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c774:	4620      	mov	r0, r4
 801c776:	4798      	blx	r3
 801c778:	2000      	movs	r0, #0
 801c77a:	e7e0      	b.n	801c73e <_raise_r+0x12>

0801c77c <raise>:
 801c77c:	4b02      	ldr	r3, [pc, #8]	@ (801c788 <raise+0xc>)
 801c77e:	4601      	mov	r1, r0
 801c780:	6818      	ldr	r0, [r3, #0]
 801c782:	f7ff bfd3 	b.w	801c72c <_raise_r>
 801c786:	bf00      	nop
 801c788:	2400027c 	.word	0x2400027c

0801c78c <_kill_r>:
 801c78c:	b538      	push	{r3, r4, r5, lr}
 801c78e:	4d07      	ldr	r5, [pc, #28]	@ (801c7ac <_kill_r+0x20>)
 801c790:	2300      	movs	r3, #0
 801c792:	4604      	mov	r4, r0
 801c794:	4608      	mov	r0, r1
 801c796:	4611      	mov	r1, r2
 801c798:	602b      	str	r3, [r5, #0]
 801c79a:	f7e6 fa9d 	bl	8002cd8 <_kill>
 801c79e:	1c43      	adds	r3, r0, #1
 801c7a0:	d102      	bne.n	801c7a8 <_kill_r+0x1c>
 801c7a2:	682b      	ldr	r3, [r5, #0]
 801c7a4:	b103      	cbz	r3, 801c7a8 <_kill_r+0x1c>
 801c7a6:	6023      	str	r3, [r4, #0]
 801c7a8:	bd38      	pop	{r3, r4, r5, pc}
 801c7aa:	bf00      	nop
 801c7ac:	240153a8 	.word	0x240153a8

0801c7b0 <_getpid_r>:
 801c7b0:	f7e6 ba8a 	b.w	8002cc8 <_getpid>

0801c7b4 <__swhatbuf_r>:
 801c7b4:	b570      	push	{r4, r5, r6, lr}
 801c7b6:	460c      	mov	r4, r1
 801c7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7bc:	2900      	cmp	r1, #0
 801c7be:	b096      	sub	sp, #88	@ 0x58
 801c7c0:	4615      	mov	r5, r2
 801c7c2:	461e      	mov	r6, r3
 801c7c4:	da0d      	bge.n	801c7e2 <__swhatbuf_r+0x2e>
 801c7c6:	89a3      	ldrh	r3, [r4, #12]
 801c7c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c7cc:	f04f 0100 	mov.w	r1, #0
 801c7d0:	bf14      	ite	ne
 801c7d2:	2340      	movne	r3, #64	@ 0x40
 801c7d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c7d8:	2000      	movs	r0, #0
 801c7da:	6031      	str	r1, [r6, #0]
 801c7dc:	602b      	str	r3, [r5, #0]
 801c7de:	b016      	add	sp, #88	@ 0x58
 801c7e0:	bd70      	pop	{r4, r5, r6, pc}
 801c7e2:	466a      	mov	r2, sp
 801c7e4:	f000 f848 	bl	801c878 <_fstat_r>
 801c7e8:	2800      	cmp	r0, #0
 801c7ea:	dbec      	blt.n	801c7c6 <__swhatbuf_r+0x12>
 801c7ec:	9901      	ldr	r1, [sp, #4]
 801c7ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c7f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c7f6:	4259      	negs	r1, r3
 801c7f8:	4159      	adcs	r1, r3
 801c7fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c7fe:	e7eb      	b.n	801c7d8 <__swhatbuf_r+0x24>

0801c800 <__smakebuf_r>:
 801c800:	898b      	ldrh	r3, [r1, #12]
 801c802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c804:	079d      	lsls	r5, r3, #30
 801c806:	4606      	mov	r6, r0
 801c808:	460c      	mov	r4, r1
 801c80a:	d507      	bpl.n	801c81c <__smakebuf_r+0x1c>
 801c80c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c810:	6023      	str	r3, [r4, #0]
 801c812:	6123      	str	r3, [r4, #16]
 801c814:	2301      	movs	r3, #1
 801c816:	6163      	str	r3, [r4, #20]
 801c818:	b003      	add	sp, #12
 801c81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c81c:	ab01      	add	r3, sp, #4
 801c81e:	466a      	mov	r2, sp
 801c820:	f7ff ffc8 	bl	801c7b4 <__swhatbuf_r>
 801c824:	9f00      	ldr	r7, [sp, #0]
 801c826:	4605      	mov	r5, r0
 801c828:	4639      	mov	r1, r7
 801c82a:	4630      	mov	r0, r6
 801c82c:	f7fe fda0 	bl	801b370 <_malloc_r>
 801c830:	b948      	cbnz	r0, 801c846 <__smakebuf_r+0x46>
 801c832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c836:	059a      	lsls	r2, r3, #22
 801c838:	d4ee      	bmi.n	801c818 <__smakebuf_r+0x18>
 801c83a:	f023 0303 	bic.w	r3, r3, #3
 801c83e:	f043 0302 	orr.w	r3, r3, #2
 801c842:	81a3      	strh	r3, [r4, #12]
 801c844:	e7e2      	b.n	801c80c <__smakebuf_r+0xc>
 801c846:	89a3      	ldrh	r3, [r4, #12]
 801c848:	6020      	str	r0, [r4, #0]
 801c84a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c84e:	81a3      	strh	r3, [r4, #12]
 801c850:	9b01      	ldr	r3, [sp, #4]
 801c852:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c856:	b15b      	cbz	r3, 801c870 <__smakebuf_r+0x70>
 801c858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c85c:	4630      	mov	r0, r6
 801c85e:	f000 f81d 	bl	801c89c <_isatty_r>
 801c862:	b128      	cbz	r0, 801c870 <__smakebuf_r+0x70>
 801c864:	89a3      	ldrh	r3, [r4, #12]
 801c866:	f023 0303 	bic.w	r3, r3, #3
 801c86a:	f043 0301 	orr.w	r3, r3, #1
 801c86e:	81a3      	strh	r3, [r4, #12]
 801c870:	89a3      	ldrh	r3, [r4, #12]
 801c872:	431d      	orrs	r5, r3
 801c874:	81a5      	strh	r5, [r4, #12]
 801c876:	e7cf      	b.n	801c818 <__smakebuf_r+0x18>

0801c878 <_fstat_r>:
 801c878:	b538      	push	{r3, r4, r5, lr}
 801c87a:	4d07      	ldr	r5, [pc, #28]	@ (801c898 <_fstat_r+0x20>)
 801c87c:	2300      	movs	r3, #0
 801c87e:	4604      	mov	r4, r0
 801c880:	4608      	mov	r0, r1
 801c882:	4611      	mov	r1, r2
 801c884:	602b      	str	r3, [r5, #0]
 801c886:	f7e6 fa87 	bl	8002d98 <_fstat>
 801c88a:	1c43      	adds	r3, r0, #1
 801c88c:	d102      	bne.n	801c894 <_fstat_r+0x1c>
 801c88e:	682b      	ldr	r3, [r5, #0]
 801c890:	b103      	cbz	r3, 801c894 <_fstat_r+0x1c>
 801c892:	6023      	str	r3, [r4, #0]
 801c894:	bd38      	pop	{r3, r4, r5, pc}
 801c896:	bf00      	nop
 801c898:	240153a8 	.word	0x240153a8

0801c89c <_isatty_r>:
 801c89c:	b538      	push	{r3, r4, r5, lr}
 801c89e:	4d06      	ldr	r5, [pc, #24]	@ (801c8b8 <_isatty_r+0x1c>)
 801c8a0:	2300      	movs	r3, #0
 801c8a2:	4604      	mov	r4, r0
 801c8a4:	4608      	mov	r0, r1
 801c8a6:	602b      	str	r3, [r5, #0]
 801c8a8:	f7e6 fa86 	bl	8002db8 <_isatty>
 801c8ac:	1c43      	adds	r3, r0, #1
 801c8ae:	d102      	bne.n	801c8b6 <_isatty_r+0x1a>
 801c8b0:	682b      	ldr	r3, [r5, #0]
 801c8b2:	b103      	cbz	r3, 801c8b6 <_isatty_r+0x1a>
 801c8b4:	6023      	str	r3, [r4, #0]
 801c8b6:	bd38      	pop	{r3, r4, r5, pc}
 801c8b8:	240153a8 	.word	0x240153a8
 801c8bc:	00000000 	.word	0x00000000

0801c8c0 <sin>:
 801c8c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c8c2:	eeb0 7b40 	vmov.f64	d7, d0
 801c8c6:	ee17 3a90 	vmov	r3, s15
 801c8ca:	4a21      	ldr	r2, [pc, #132]	@ (801c950 <sin+0x90>)
 801c8cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c8d0:	4293      	cmp	r3, r2
 801c8d2:	d807      	bhi.n	801c8e4 <sin+0x24>
 801c8d4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801c948 <sin+0x88>
 801c8d8:	2000      	movs	r0, #0
 801c8da:	b005      	add	sp, #20
 801c8dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801c8e0:	f000 b986 	b.w	801cbf0 <__kernel_sin>
 801c8e4:	4a1b      	ldr	r2, [pc, #108]	@ (801c954 <sin+0x94>)
 801c8e6:	4293      	cmp	r3, r2
 801c8e8:	d904      	bls.n	801c8f4 <sin+0x34>
 801c8ea:	ee30 0b40 	vsub.f64	d0, d0, d0
 801c8ee:	b005      	add	sp, #20
 801c8f0:	f85d fb04 	ldr.w	pc, [sp], #4
 801c8f4:	4668      	mov	r0, sp
 801c8f6:	f000 f9d3 	bl	801cca0 <__ieee754_rem_pio2>
 801c8fa:	f000 0003 	and.w	r0, r0, #3
 801c8fe:	2801      	cmp	r0, #1
 801c900:	d00a      	beq.n	801c918 <sin+0x58>
 801c902:	2802      	cmp	r0, #2
 801c904:	d00f      	beq.n	801c926 <sin+0x66>
 801c906:	b9c0      	cbnz	r0, 801c93a <sin+0x7a>
 801c908:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c90c:	ed9d 0b00 	vldr	d0, [sp]
 801c910:	2001      	movs	r0, #1
 801c912:	f000 f96d 	bl	801cbf0 <__kernel_sin>
 801c916:	e7ea      	b.n	801c8ee <sin+0x2e>
 801c918:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c91c:	ed9d 0b00 	vldr	d0, [sp]
 801c920:	f000 f8fe 	bl	801cb20 <__kernel_cos>
 801c924:	e7e3      	b.n	801c8ee <sin+0x2e>
 801c926:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c92a:	ed9d 0b00 	vldr	d0, [sp]
 801c92e:	2001      	movs	r0, #1
 801c930:	f000 f95e 	bl	801cbf0 <__kernel_sin>
 801c934:	eeb1 0b40 	vneg.f64	d0, d0
 801c938:	e7d9      	b.n	801c8ee <sin+0x2e>
 801c93a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c93e:	ed9d 0b00 	vldr	d0, [sp]
 801c942:	f000 f8ed 	bl	801cb20 <__kernel_cos>
 801c946:	e7f5      	b.n	801c934 <sin+0x74>
	...
 801c950:	3fe921fb 	.word	0x3fe921fb
 801c954:	7fefffff 	.word	0x7fefffff

0801c958 <sinf_poly>:
 801c958:	07cb      	lsls	r3, r1, #31
 801c95a:	d412      	bmi.n	801c982 <sinf_poly+0x2a>
 801c95c:	ee21 5b00 	vmul.f64	d5, d1, d0
 801c960:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801c964:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801c968:	eea6 7b01 	vfma.f64	d7, d6, d1
 801c96c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801c970:	ee21 1b05 	vmul.f64	d1, d1, d5
 801c974:	eea6 0b05 	vfma.f64	d0, d6, d5
 801c978:	eea7 0b01 	vfma.f64	d0, d7, d1
 801c97c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c980:	4770      	bx	lr
 801c982:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801c986:	ee21 5b01 	vmul.f64	d5, d1, d1
 801c98a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801c98e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801c992:	eea1 7b06 	vfma.f64	d7, d1, d6
 801c996:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801c99a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801c99e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801c9a2:	ee21 1b05 	vmul.f64	d1, d1, d5
 801c9a6:	eea5 0b06 	vfma.f64	d0, d5, d6
 801c9aa:	e7e5      	b.n	801c978 <sinf_poly+0x20>
 801c9ac:	0000      	movs	r0, r0
	...

0801c9b0 <sinf>:
 801c9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c9b2:	ee10 4a10 	vmov	r4, s0
 801c9b6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c9ba:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801c9be:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801c9c2:	eef0 7a40 	vmov.f32	s15, s0
 801c9c6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801c9ca:	d218      	bcs.n	801c9fe <sinf+0x4e>
 801c9cc:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c9d0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801c9d4:	d20a      	bcs.n	801c9ec <sinf+0x3c>
 801c9d6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801c9da:	d103      	bne.n	801c9e4 <sinf+0x34>
 801c9dc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801c9e0:	ed8d 1a01 	vstr	s2, [sp, #4]
 801c9e4:	eeb0 0a67 	vmov.f32	s0, s15
 801c9e8:	b003      	add	sp, #12
 801c9ea:	bd30      	pop	{r4, r5, pc}
 801c9ec:	483a      	ldr	r0, [pc, #232]	@ (801cad8 <sinf+0x128>)
 801c9ee:	eeb0 0b46 	vmov.f64	d0, d6
 801c9f2:	2100      	movs	r1, #0
 801c9f4:	b003      	add	sp, #12
 801c9f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c9fa:	f7ff bfad 	b.w	801c958 <sinf_poly>
 801c9fe:	f240 422e 	movw	r2, #1070	@ 0x42e
 801ca02:	4293      	cmp	r3, r2
 801ca04:	d824      	bhi.n	801ca50 <sinf+0xa0>
 801ca06:	4b34      	ldr	r3, [pc, #208]	@ (801cad8 <sinf+0x128>)
 801ca08:	ed93 7b08 	vldr	d7, [r3, #32]
 801ca0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ca10:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801ca14:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801ca18:	ee17 1a90 	vmov	r1, s15
 801ca1c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801ca20:	1609      	asrs	r1, r1, #24
 801ca22:	ee07 1a90 	vmov	s15, r1
 801ca26:	f001 0203 	and.w	r2, r1, #3
 801ca2a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801ca2e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801ca32:	ed92 0b00 	vldr	d0, [r2]
 801ca36:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801ca3a:	f011 0f02 	tst.w	r1, #2
 801ca3e:	eea5 6b47 	vfms.f64	d6, d5, d7
 801ca42:	bf08      	it	eq
 801ca44:	4618      	moveq	r0, r3
 801ca46:	ee26 1b06 	vmul.f64	d1, d6, d6
 801ca4a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801ca4e:	e7d1      	b.n	801c9f4 <sinf+0x44>
 801ca50:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801ca54:	d237      	bcs.n	801cac6 <sinf+0x116>
 801ca56:	4921      	ldr	r1, [pc, #132]	@ (801cadc <sinf+0x12c>)
 801ca58:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801ca5c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801ca60:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801ca64:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801ca68:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801ca6c:	6a10      	ldr	r0, [r2, #32]
 801ca6e:	6912      	ldr	r2, [r2, #16]
 801ca70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801ca74:	40ab      	lsls	r3, r5
 801ca76:	fba0 5003 	umull	r5, r0, r0, r3
 801ca7a:	4359      	muls	r1, r3
 801ca7c:	fbe3 0102 	umlal	r0, r1, r3, r2
 801ca80:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801ca84:	0f9d      	lsrs	r5, r3, #30
 801ca86:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801ca8a:	1ac9      	subs	r1, r1, r3
 801ca8c:	f7e3 fe36 	bl	80006fc <__aeabi_l2d>
 801ca90:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801ca94:	4b10      	ldr	r3, [pc, #64]	@ (801cad8 <sinf+0x128>)
 801ca96:	f004 0203 	and.w	r2, r4, #3
 801ca9a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801ca9e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801cad0 <sinf+0x120>
 801caa2:	ed92 0b00 	vldr	d0, [r2]
 801caa6:	ec41 0b17 	vmov	d7, r0, r1
 801caaa:	f014 0f02 	tst.w	r4, #2
 801caae:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cab2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801cab6:	4629      	mov	r1, r5
 801cab8:	bf08      	it	eq
 801caba:	4618      	moveq	r0, r3
 801cabc:	ee27 1b07 	vmul.f64	d1, d7, d7
 801cac0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cac4:	e796      	b.n	801c9f4 <sinf+0x44>
 801cac6:	b003      	add	sp, #12
 801cac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cacc:	f000 b816 	b.w	801cafc <__math_invalidf>
 801cad0:	54442d18 	.word	0x54442d18
 801cad4:	3c1921fb 	.word	0x3c1921fb
 801cad8:	0801e310 	.word	0x0801e310
 801cadc:	0801e2b0 	.word	0x0801e2b0

0801cae0 <with_errnof>:
 801cae0:	b510      	push	{r4, lr}
 801cae2:	ed2d 8b02 	vpush	{d8}
 801cae6:	eeb0 8a40 	vmov.f32	s16, s0
 801caea:	4604      	mov	r4, r0
 801caec:	f7fd fa6e 	bl	8019fcc <__errno>
 801caf0:	eeb0 0a48 	vmov.f32	s0, s16
 801caf4:	ecbd 8b02 	vpop	{d8}
 801caf8:	6004      	str	r4, [r0, #0]
 801cafa:	bd10      	pop	{r4, pc}

0801cafc <__math_invalidf>:
 801cafc:	eef0 7a40 	vmov.f32	s15, s0
 801cb00:	ee30 7a40 	vsub.f32	s14, s0, s0
 801cb04:	eef4 7a67 	vcmp.f32	s15, s15
 801cb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb0c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801cb10:	d602      	bvs.n	801cb18 <__math_invalidf+0x1c>
 801cb12:	2021      	movs	r0, #33	@ 0x21
 801cb14:	f7ff bfe4 	b.w	801cae0 <with_errnof>
 801cb18:	4770      	bx	lr
 801cb1a:	0000      	movs	r0, r0
 801cb1c:	0000      	movs	r0, r0
	...

0801cb20 <__kernel_cos>:
 801cb20:	eeb0 5b40 	vmov.f64	d5, d0
 801cb24:	ee15 1a90 	vmov	r1, s11
 801cb28:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801cb2c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801cb30:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801cb34:	d204      	bcs.n	801cb40 <__kernel_cos+0x20>
 801cb36:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801cb3a:	ee17 3a90 	vmov	r3, s15
 801cb3e:	b343      	cbz	r3, 801cb92 <__kernel_cos+0x72>
 801cb40:	ee25 6b05 	vmul.f64	d6, d5, d5
 801cb44:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801cb48:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801cbb8 <__kernel_cos+0x98>
 801cb4c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cbc0 <__kernel_cos+0xa0>
 801cb50:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cb54:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801cbc8 <__kernel_cos+0xa8>
 801cb58:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cb5c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cbd0 <__kernel_cos+0xb0>
 801cb60:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cb64:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801cbd8 <__kernel_cos+0xb8>
 801cb68:	4b1f      	ldr	r3, [pc, #124]	@ (801cbe8 <__kernel_cos+0xc8>)
 801cb6a:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cb6e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cbe0 <__kernel_cos+0xc0>
 801cb72:	4299      	cmp	r1, r3
 801cb74:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cb78:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801cb7c:	ee24 4b06 	vmul.f64	d4, d4, d6
 801cb80:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cb84:	eea6 1b04 	vfma.f64	d1, d6, d4
 801cb88:	d804      	bhi.n	801cb94 <__kernel_cos+0x74>
 801cb8a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801cb8e:	ee30 0b47 	vsub.f64	d0, d0, d7
 801cb92:	4770      	bx	lr
 801cb94:	4b15      	ldr	r3, [pc, #84]	@ (801cbec <__kernel_cos+0xcc>)
 801cb96:	4299      	cmp	r1, r3
 801cb98:	d809      	bhi.n	801cbae <__kernel_cos+0x8e>
 801cb9a:	2200      	movs	r2, #0
 801cb9c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801cba0:	ec43 2b16 	vmov	d6, r2, r3
 801cba4:	ee30 0b46 	vsub.f64	d0, d0, d6
 801cba8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cbac:	e7ed      	b.n	801cb8a <__kernel_cos+0x6a>
 801cbae:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801cbb2:	e7f7      	b.n	801cba4 <__kernel_cos+0x84>
 801cbb4:	f3af 8000 	nop.w
 801cbb8:	be8838d4 	.word	0xbe8838d4
 801cbbc:	bda8fae9 	.word	0xbda8fae9
 801cbc0:	bdb4b1c4 	.word	0xbdb4b1c4
 801cbc4:	3e21ee9e 	.word	0x3e21ee9e
 801cbc8:	809c52ad 	.word	0x809c52ad
 801cbcc:	be927e4f 	.word	0xbe927e4f
 801cbd0:	19cb1590 	.word	0x19cb1590
 801cbd4:	3efa01a0 	.word	0x3efa01a0
 801cbd8:	16c15177 	.word	0x16c15177
 801cbdc:	bf56c16c 	.word	0xbf56c16c
 801cbe0:	5555554c 	.word	0x5555554c
 801cbe4:	3fa55555 	.word	0x3fa55555
 801cbe8:	3fd33332 	.word	0x3fd33332
 801cbec:	3fe90000 	.word	0x3fe90000

0801cbf0 <__kernel_sin>:
 801cbf0:	ee10 3a90 	vmov	r3, s1
 801cbf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cbf8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801cbfc:	d204      	bcs.n	801cc08 <__kernel_sin+0x18>
 801cbfe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801cc02:	ee17 3a90 	vmov	r3, s15
 801cc06:	b35b      	cbz	r3, 801cc60 <__kernel_sin+0x70>
 801cc08:	ee20 6b00 	vmul.f64	d6, d0, d0
 801cc0c:	ee20 5b06 	vmul.f64	d5, d0, d6
 801cc10:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801cc68 <__kernel_sin+0x78>
 801cc14:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801cc70 <__kernel_sin+0x80>
 801cc18:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cc1c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801cc78 <__kernel_sin+0x88>
 801cc20:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cc24:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801cc80 <__kernel_sin+0x90>
 801cc28:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cc2c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801cc88 <__kernel_sin+0x98>
 801cc30:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cc34:	b930      	cbnz	r0, 801cc44 <__kernel_sin+0x54>
 801cc36:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801cc90 <__kernel_sin+0xa0>
 801cc3a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cc3e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801cc42:	4770      	bx	lr
 801cc44:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801cc48:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801cc4c:	eea1 7b04 	vfma.f64	d7, d1, d4
 801cc50:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801cc54:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801cc98 <__kernel_sin+0xa8>
 801cc58:	eea5 1b07 	vfma.f64	d1, d5, d7
 801cc5c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801cc60:	4770      	bx	lr
 801cc62:	bf00      	nop
 801cc64:	f3af 8000 	nop.w
 801cc68:	5acfd57c 	.word	0x5acfd57c
 801cc6c:	3de5d93a 	.word	0x3de5d93a
 801cc70:	8a2b9ceb 	.word	0x8a2b9ceb
 801cc74:	be5ae5e6 	.word	0xbe5ae5e6
 801cc78:	57b1fe7d 	.word	0x57b1fe7d
 801cc7c:	3ec71de3 	.word	0x3ec71de3
 801cc80:	19c161d5 	.word	0x19c161d5
 801cc84:	bf2a01a0 	.word	0xbf2a01a0
 801cc88:	1110f8a6 	.word	0x1110f8a6
 801cc8c:	3f811111 	.word	0x3f811111
 801cc90:	55555549 	.word	0x55555549
 801cc94:	bfc55555 	.word	0xbfc55555
 801cc98:	55555549 	.word	0x55555549
 801cc9c:	3fc55555 	.word	0x3fc55555

0801cca0 <__ieee754_rem_pio2>:
 801cca0:	b570      	push	{r4, r5, r6, lr}
 801cca2:	eeb0 7b40 	vmov.f64	d7, d0
 801cca6:	ee17 5a90 	vmov	r5, s15
 801ccaa:	4b99      	ldr	r3, [pc, #612]	@ (801cf10 <__ieee754_rem_pio2+0x270>)
 801ccac:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801ccb0:	429e      	cmp	r6, r3
 801ccb2:	b088      	sub	sp, #32
 801ccb4:	4604      	mov	r4, r0
 801ccb6:	d807      	bhi.n	801ccc8 <__ieee754_rem_pio2+0x28>
 801ccb8:	2200      	movs	r2, #0
 801ccba:	2300      	movs	r3, #0
 801ccbc:	ed84 0b00 	vstr	d0, [r4]
 801ccc0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ccc4:	2000      	movs	r0, #0
 801ccc6:	e01b      	b.n	801cd00 <__ieee754_rem_pio2+0x60>
 801ccc8:	4b92      	ldr	r3, [pc, #584]	@ (801cf14 <__ieee754_rem_pio2+0x274>)
 801ccca:	429e      	cmp	r6, r3
 801cccc:	d83b      	bhi.n	801cd46 <__ieee754_rem_pio2+0xa6>
 801ccce:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801ccd2:	2d00      	cmp	r5, #0
 801ccd4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801ced0 <__ieee754_rem_pio2+0x230>
 801ccd8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801ccdc:	dd19      	ble.n	801cd12 <__ieee754_rem_pio2+0x72>
 801ccde:	ee30 7b46 	vsub.f64	d7, d0, d6
 801cce2:	429e      	cmp	r6, r3
 801cce4:	d00e      	beq.n	801cd04 <__ieee754_rem_pio2+0x64>
 801cce6:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801ced8 <__ieee754_rem_pio2+0x238>
 801ccea:	ee37 6b45 	vsub.f64	d6, d7, d5
 801ccee:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ccf2:	ed84 6b00 	vstr	d6, [r4]
 801ccf6:	ee37 7b45 	vsub.f64	d7, d7, d5
 801ccfa:	ed84 7b02 	vstr	d7, [r4, #8]
 801ccfe:	2001      	movs	r0, #1
 801cd00:	b008      	add	sp, #32
 801cd02:	bd70      	pop	{r4, r5, r6, pc}
 801cd04:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801cee0 <__ieee754_rem_pio2+0x240>
 801cd08:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801cee8 <__ieee754_rem_pio2+0x248>
 801cd0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cd10:	e7eb      	b.n	801ccea <__ieee754_rem_pio2+0x4a>
 801cd12:	429e      	cmp	r6, r3
 801cd14:	ee30 7b06 	vadd.f64	d7, d0, d6
 801cd18:	d00e      	beq.n	801cd38 <__ieee754_rem_pio2+0x98>
 801cd1a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801ced8 <__ieee754_rem_pio2+0x238>
 801cd1e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801cd22:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cd26:	ed84 6b00 	vstr	d6, [r4]
 801cd2a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801cd2e:	f04f 30ff 	mov.w	r0, #4294967295
 801cd32:	ed84 7b02 	vstr	d7, [r4, #8]
 801cd36:	e7e3      	b.n	801cd00 <__ieee754_rem_pio2+0x60>
 801cd38:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801cee0 <__ieee754_rem_pio2+0x240>
 801cd3c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801cee8 <__ieee754_rem_pio2+0x248>
 801cd40:	ee37 7b06 	vadd.f64	d7, d7, d6
 801cd44:	e7eb      	b.n	801cd1e <__ieee754_rem_pio2+0x7e>
 801cd46:	4b74      	ldr	r3, [pc, #464]	@ (801cf18 <__ieee754_rem_pio2+0x278>)
 801cd48:	429e      	cmp	r6, r3
 801cd4a:	d870      	bhi.n	801ce2e <__ieee754_rem_pio2+0x18e>
 801cd4c:	f000 f8ec 	bl	801cf28 <fabs>
 801cd50:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801cd54:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801cef0 <__ieee754_rem_pio2+0x250>
 801cd58:	eea0 7b06 	vfma.f64	d7, d0, d6
 801cd5c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801cd60:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801cd64:	ee17 0a90 	vmov	r0, s15
 801cd68:	eeb1 4b45 	vneg.f64	d4, d5
 801cd6c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801ced0 <__ieee754_rem_pio2+0x230>
 801cd70:	eea5 0b47 	vfms.f64	d0, d5, d7
 801cd74:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801ced8 <__ieee754_rem_pio2+0x238>
 801cd78:	281f      	cmp	r0, #31
 801cd7a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801cd7e:	ee30 6b47 	vsub.f64	d6, d0, d7
 801cd82:	dc05      	bgt.n	801cd90 <__ieee754_rem_pio2+0xf0>
 801cd84:	4b65      	ldr	r3, [pc, #404]	@ (801cf1c <__ieee754_rem_pio2+0x27c>)
 801cd86:	1e42      	subs	r2, r0, #1
 801cd88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cd8c:	42b3      	cmp	r3, r6
 801cd8e:	d109      	bne.n	801cda4 <__ieee754_rem_pio2+0x104>
 801cd90:	ee16 3a90 	vmov	r3, s13
 801cd94:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801cd98:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801cd9c:	2b10      	cmp	r3, #16
 801cd9e:	ea4f 5226 	mov.w	r2, r6, asr #20
 801cda2:	dc02      	bgt.n	801cdaa <__ieee754_rem_pio2+0x10a>
 801cda4:	ed84 6b00 	vstr	d6, [r4]
 801cda8:	e01a      	b.n	801cde0 <__ieee754_rem_pio2+0x140>
 801cdaa:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801cee0 <__ieee754_rem_pio2+0x240>
 801cdae:	eeb0 6b40 	vmov.f64	d6, d0
 801cdb2:	eea4 6b03 	vfma.f64	d6, d4, d3
 801cdb6:	ee30 7b46 	vsub.f64	d7, d0, d6
 801cdba:	eea4 7b03 	vfma.f64	d7, d4, d3
 801cdbe:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801cee8 <__ieee754_rem_pio2+0x248>
 801cdc2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801cdc6:	ee36 3b47 	vsub.f64	d3, d6, d7
 801cdca:	ee13 3a90 	vmov	r3, s7
 801cdce:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801cdd2:	1ad3      	subs	r3, r2, r3
 801cdd4:	2b31      	cmp	r3, #49	@ 0x31
 801cdd6:	dc17      	bgt.n	801ce08 <__ieee754_rem_pio2+0x168>
 801cdd8:	eeb0 0b46 	vmov.f64	d0, d6
 801cddc:	ed84 3b00 	vstr	d3, [r4]
 801cde0:	ed94 6b00 	vldr	d6, [r4]
 801cde4:	2d00      	cmp	r5, #0
 801cde6:	ee30 0b46 	vsub.f64	d0, d0, d6
 801cdea:	ee30 0b47 	vsub.f64	d0, d0, d7
 801cdee:	ed84 0b02 	vstr	d0, [r4, #8]
 801cdf2:	da85      	bge.n	801cd00 <__ieee754_rem_pio2+0x60>
 801cdf4:	eeb1 6b46 	vneg.f64	d6, d6
 801cdf8:	eeb1 0b40 	vneg.f64	d0, d0
 801cdfc:	ed84 6b00 	vstr	d6, [r4]
 801ce00:	ed84 0b02 	vstr	d0, [r4, #8]
 801ce04:	4240      	negs	r0, r0
 801ce06:	e77b      	b.n	801cd00 <__ieee754_rem_pio2+0x60>
 801ce08:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801cef8 <__ieee754_rem_pio2+0x258>
 801ce0c:	eeb0 0b46 	vmov.f64	d0, d6
 801ce10:	eea4 0b07 	vfma.f64	d0, d4, d7
 801ce14:	ee36 6b40 	vsub.f64	d6, d6, d0
 801ce18:	eea4 6b07 	vfma.f64	d6, d4, d7
 801ce1c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801cf00 <__ieee754_rem_pio2+0x260>
 801ce20:	eeb0 7b46 	vmov.f64	d7, d6
 801ce24:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801ce28:	ee30 6b47 	vsub.f64	d6, d0, d7
 801ce2c:	e7ba      	b.n	801cda4 <__ieee754_rem_pio2+0x104>
 801ce2e:	4b3c      	ldr	r3, [pc, #240]	@ (801cf20 <__ieee754_rem_pio2+0x280>)
 801ce30:	429e      	cmp	r6, r3
 801ce32:	d906      	bls.n	801ce42 <__ieee754_rem_pio2+0x1a2>
 801ce34:	ee30 7b40 	vsub.f64	d7, d0, d0
 801ce38:	ed80 7b02 	vstr	d7, [r0, #8]
 801ce3c:	ed80 7b00 	vstr	d7, [r0]
 801ce40:	e740      	b.n	801ccc4 <__ieee754_rem_pio2+0x24>
 801ce42:	ee10 3a10 	vmov	r3, s0
 801ce46:	1532      	asrs	r2, r6, #20
 801ce48:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801ce4c:	4618      	mov	r0, r3
 801ce4e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801ce52:	ec41 0b17 	vmov	d7, r0, r1
 801ce56:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801ce5a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801cf08 <__ieee754_rem_pio2+0x268>
 801ce5e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801ce62:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ce66:	ed8d 6b02 	vstr	d6, [sp, #8]
 801ce6a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801ce6e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801ce72:	a808      	add	r0, sp, #32
 801ce74:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801ce78:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ce7c:	ed8d 6b04 	vstr	d6, [sp, #16]
 801ce80:	ee27 7b05 	vmul.f64	d7, d7, d5
 801ce84:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ce88:	2103      	movs	r1, #3
 801ce8a:	ed30 7b02 	vldmdb	r0!, {d7}
 801ce8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ce92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce96:	460b      	mov	r3, r1
 801ce98:	f101 31ff 	add.w	r1, r1, #4294967295
 801ce9c:	d0f5      	beq.n	801ce8a <__ieee754_rem_pio2+0x1ea>
 801ce9e:	4921      	ldr	r1, [pc, #132]	@ (801cf24 <__ieee754_rem_pio2+0x284>)
 801cea0:	9101      	str	r1, [sp, #4]
 801cea2:	2102      	movs	r1, #2
 801cea4:	9100      	str	r1, [sp, #0]
 801cea6:	a802      	add	r0, sp, #8
 801cea8:	4621      	mov	r1, r4
 801ceaa:	f000 f845 	bl	801cf38 <__kernel_rem_pio2>
 801ceae:	2d00      	cmp	r5, #0
 801ceb0:	f6bf af26 	bge.w	801cd00 <__ieee754_rem_pio2+0x60>
 801ceb4:	ed94 7b00 	vldr	d7, [r4]
 801ceb8:	eeb1 7b47 	vneg.f64	d7, d7
 801cebc:	ed84 7b00 	vstr	d7, [r4]
 801cec0:	ed94 7b02 	vldr	d7, [r4, #8]
 801cec4:	eeb1 7b47 	vneg.f64	d7, d7
 801cec8:	ed84 7b02 	vstr	d7, [r4, #8]
 801cecc:	e79a      	b.n	801ce04 <__ieee754_rem_pio2+0x164>
 801cece:	bf00      	nop
 801ced0:	54400000 	.word	0x54400000
 801ced4:	3ff921fb 	.word	0x3ff921fb
 801ced8:	1a626331 	.word	0x1a626331
 801cedc:	3dd0b461 	.word	0x3dd0b461
 801cee0:	1a600000 	.word	0x1a600000
 801cee4:	3dd0b461 	.word	0x3dd0b461
 801cee8:	2e037073 	.word	0x2e037073
 801ceec:	3ba3198a 	.word	0x3ba3198a
 801cef0:	6dc9c883 	.word	0x6dc9c883
 801cef4:	3fe45f30 	.word	0x3fe45f30
 801cef8:	2e000000 	.word	0x2e000000
 801cefc:	3ba3198a 	.word	0x3ba3198a
 801cf00:	252049c1 	.word	0x252049c1
 801cf04:	397b839a 	.word	0x397b839a
 801cf08:	00000000 	.word	0x00000000
 801cf0c:	41700000 	.word	0x41700000
 801cf10:	3fe921fb 	.word	0x3fe921fb
 801cf14:	4002d97b 	.word	0x4002d97b
 801cf18:	413921fb 	.word	0x413921fb
 801cf1c:	0801e3f0 	.word	0x0801e3f0
 801cf20:	7fefffff 	.word	0x7fefffff
 801cf24:	0801e470 	.word	0x0801e470

0801cf28 <fabs>:
 801cf28:	ec51 0b10 	vmov	r0, r1, d0
 801cf2c:	4602      	mov	r2, r0
 801cf2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801cf32:	ec43 2b10 	vmov	d0, r2, r3
 801cf36:	4770      	bx	lr

0801cf38 <__kernel_rem_pio2>:
 801cf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf3c:	ed2d 8b06 	vpush	{d8-d10}
 801cf40:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801cf44:	469b      	mov	fp, r3
 801cf46:	9001      	str	r0, [sp, #4]
 801cf48:	4bbb      	ldr	r3, [pc, #748]	@ (801d238 <__kernel_rem_pio2+0x300>)
 801cf4a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801cf4c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801cf50:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801cf54:	f112 0f14 	cmn.w	r2, #20
 801cf58:	bfa8      	it	ge
 801cf5a:	1ed3      	subge	r3, r2, #3
 801cf5c:	f10b 3aff 	add.w	sl, fp, #4294967295
 801cf60:	bfb8      	it	lt
 801cf62:	2300      	movlt	r3, #0
 801cf64:	f06f 0517 	mvn.w	r5, #23
 801cf68:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801d220 <__kernel_rem_pio2+0x2e8>
 801cf6c:	bfa4      	itt	ge
 801cf6e:	2018      	movge	r0, #24
 801cf70:	fb93 f3f0 	sdivge	r3, r3, r0
 801cf74:	fb03 5505 	mla	r5, r3, r5, r5
 801cf78:	eba3 040a 	sub.w	r4, r3, sl
 801cf7c:	4415      	add	r5, r2
 801cf7e:	460f      	mov	r7, r1
 801cf80:	eb09 060a 	add.w	r6, r9, sl
 801cf84:	a81a      	add	r0, sp, #104	@ 0x68
 801cf86:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801cf8a:	2200      	movs	r2, #0
 801cf8c:	42b2      	cmp	r2, r6
 801cf8e:	dd0e      	ble.n	801cfae <__kernel_rem_pio2+0x76>
 801cf90:	aa1a      	add	r2, sp, #104	@ 0x68
 801cf92:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801cf96:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801cf9a:	2600      	movs	r6, #0
 801cf9c:	454e      	cmp	r6, r9
 801cf9e:	dc25      	bgt.n	801cfec <__kernel_rem_pio2+0xb4>
 801cfa0:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801d220 <__kernel_rem_pio2+0x2e8>
 801cfa4:	f8dd c004 	ldr.w	ip, [sp, #4]
 801cfa8:	4614      	mov	r4, r2
 801cfaa:	2000      	movs	r0, #0
 801cfac:	e015      	b.n	801cfda <__kernel_rem_pio2+0xa2>
 801cfae:	42d4      	cmn	r4, r2
 801cfb0:	d409      	bmi.n	801cfc6 <__kernel_rem_pio2+0x8e>
 801cfb2:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801cfb6:	ee07 1a90 	vmov	s15, r1
 801cfba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cfbe:	eca0 7b02 	vstmia	r0!, {d7}
 801cfc2:	3201      	adds	r2, #1
 801cfc4:	e7e2      	b.n	801cf8c <__kernel_rem_pio2+0x54>
 801cfc6:	eeb0 7b46 	vmov.f64	d7, d6
 801cfca:	e7f8      	b.n	801cfbe <__kernel_rem_pio2+0x86>
 801cfcc:	ecbc 5b02 	vldmia	ip!, {d5}
 801cfd0:	ed94 6b00 	vldr	d6, [r4]
 801cfd4:	3001      	adds	r0, #1
 801cfd6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801cfda:	4550      	cmp	r0, sl
 801cfdc:	f1a4 0408 	sub.w	r4, r4, #8
 801cfe0:	ddf4      	ble.n	801cfcc <__kernel_rem_pio2+0x94>
 801cfe2:	ecae 7b02 	vstmia	lr!, {d7}
 801cfe6:	3601      	adds	r6, #1
 801cfe8:	3208      	adds	r2, #8
 801cfea:	e7d7      	b.n	801cf9c <__kernel_rem_pio2+0x64>
 801cfec:	aa06      	add	r2, sp, #24
 801cfee:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801d228 <__kernel_rem_pio2+0x2f0>
 801cff2:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801d230 <__kernel_rem_pio2+0x2f8>
 801cff6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801cffa:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801cffe:	9203      	str	r2, [sp, #12]
 801d000:	9302      	str	r3, [sp, #8]
 801d002:	464c      	mov	r4, r9
 801d004:	00e3      	lsls	r3, r4, #3
 801d006:	9304      	str	r3, [sp, #16]
 801d008:	ab92      	add	r3, sp, #584	@ 0x248
 801d00a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d00e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801d012:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801d014:	ab06      	add	r3, sp, #24
 801d016:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801d01a:	461e      	mov	r6, r3
 801d01c:	4620      	mov	r0, r4
 801d01e:	2800      	cmp	r0, #0
 801d020:	f1a2 0208 	sub.w	r2, r2, #8
 801d024:	dc4a      	bgt.n	801d0bc <__kernel_rem_pio2+0x184>
 801d026:	4628      	mov	r0, r5
 801d028:	9305      	str	r3, [sp, #20]
 801d02a:	f000 fa01 	bl	801d430 <scalbn>
 801d02e:	eeb0 8b40 	vmov.f64	d8, d0
 801d032:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801d036:	ee28 0b00 	vmul.f64	d0, d8, d0
 801d03a:	f000 fa79 	bl	801d530 <floor>
 801d03e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801d042:	eea0 8b47 	vfms.f64	d8, d0, d7
 801d046:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801d04a:	2d00      	cmp	r5, #0
 801d04c:	ee17 8a90 	vmov	r8, s15
 801d050:	9b05      	ldr	r3, [sp, #20]
 801d052:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d056:	ee38 8b47 	vsub.f64	d8, d8, d7
 801d05a:	dd41      	ble.n	801d0e0 <__kernel_rem_pio2+0x1a8>
 801d05c:	1e60      	subs	r0, r4, #1
 801d05e:	aa06      	add	r2, sp, #24
 801d060:	f1c5 0c18 	rsb	ip, r5, #24
 801d064:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801d068:	fa46 f20c 	asr.w	r2, r6, ip
 801d06c:	4490      	add	r8, r2
 801d06e:	fa02 f20c 	lsl.w	r2, r2, ip
 801d072:	1ab6      	subs	r6, r6, r2
 801d074:	aa06      	add	r2, sp, #24
 801d076:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801d07a:	f1c5 0217 	rsb	r2, r5, #23
 801d07e:	4116      	asrs	r6, r2
 801d080:	2e00      	cmp	r6, #0
 801d082:	dd3c      	ble.n	801d0fe <__kernel_rem_pio2+0x1c6>
 801d084:	f04f 0c00 	mov.w	ip, #0
 801d088:	f108 0801 	add.w	r8, r8, #1
 801d08c:	4660      	mov	r0, ip
 801d08e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801d092:	4564      	cmp	r4, ip
 801d094:	dc66      	bgt.n	801d164 <__kernel_rem_pio2+0x22c>
 801d096:	2d00      	cmp	r5, #0
 801d098:	dd03      	ble.n	801d0a2 <__kernel_rem_pio2+0x16a>
 801d09a:	2d01      	cmp	r5, #1
 801d09c:	d072      	beq.n	801d184 <__kernel_rem_pio2+0x24c>
 801d09e:	2d02      	cmp	r5, #2
 801d0a0:	d07a      	beq.n	801d198 <__kernel_rem_pio2+0x260>
 801d0a2:	2e02      	cmp	r6, #2
 801d0a4:	d12b      	bne.n	801d0fe <__kernel_rem_pio2+0x1c6>
 801d0a6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d0aa:	ee30 8b48 	vsub.f64	d8, d0, d8
 801d0ae:	b330      	cbz	r0, 801d0fe <__kernel_rem_pio2+0x1c6>
 801d0b0:	4628      	mov	r0, r5
 801d0b2:	f000 f9bd 	bl	801d430 <scalbn>
 801d0b6:	ee38 8b40 	vsub.f64	d8, d8, d0
 801d0ba:	e020      	b.n	801d0fe <__kernel_rem_pio2+0x1c6>
 801d0bc:	ee20 7b09 	vmul.f64	d7, d0, d9
 801d0c0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801d0c4:	3801      	subs	r0, #1
 801d0c6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801d0ca:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801d0ce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d0d2:	eca6 0a01 	vstmia	r6!, {s0}
 801d0d6:	ed92 0b00 	vldr	d0, [r2]
 801d0da:	ee37 0b00 	vadd.f64	d0, d7, d0
 801d0de:	e79e      	b.n	801d01e <__kernel_rem_pio2+0xe6>
 801d0e0:	d105      	bne.n	801d0ee <__kernel_rem_pio2+0x1b6>
 801d0e2:	1e62      	subs	r2, r4, #1
 801d0e4:	a906      	add	r1, sp, #24
 801d0e6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801d0ea:	15f6      	asrs	r6, r6, #23
 801d0ec:	e7c8      	b.n	801d080 <__kernel_rem_pio2+0x148>
 801d0ee:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d0f2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801d0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0fa:	da31      	bge.n	801d160 <__kernel_rem_pio2+0x228>
 801d0fc:	2600      	movs	r6, #0
 801d0fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801d102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d106:	f040 809b 	bne.w	801d240 <__kernel_rem_pio2+0x308>
 801d10a:	1e62      	subs	r2, r4, #1
 801d10c:	2000      	movs	r0, #0
 801d10e:	454a      	cmp	r2, r9
 801d110:	da49      	bge.n	801d1a6 <__kernel_rem_pio2+0x26e>
 801d112:	2800      	cmp	r0, #0
 801d114:	d062      	beq.n	801d1dc <__kernel_rem_pio2+0x2a4>
 801d116:	3c01      	subs	r4, #1
 801d118:	ab06      	add	r3, sp, #24
 801d11a:	3d18      	subs	r5, #24
 801d11c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d120:	2b00      	cmp	r3, #0
 801d122:	d0f8      	beq.n	801d116 <__kernel_rem_pio2+0x1de>
 801d124:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d128:	4628      	mov	r0, r5
 801d12a:	f000 f981 	bl	801d430 <scalbn>
 801d12e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801d228 <__kernel_rem_pio2+0x2f0>
 801d132:	1c62      	adds	r2, r4, #1
 801d134:	a96a      	add	r1, sp, #424	@ 0x1a8
 801d136:	00d3      	lsls	r3, r2, #3
 801d138:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801d13c:	4622      	mov	r2, r4
 801d13e:	2a00      	cmp	r2, #0
 801d140:	f280 80a8 	bge.w	801d294 <__kernel_rem_pio2+0x35c>
 801d144:	4622      	mov	r2, r4
 801d146:	2a00      	cmp	r2, #0
 801d148:	f2c0 80c6 	blt.w	801d2d8 <__kernel_rem_pio2+0x3a0>
 801d14c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801d14e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801d152:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801d220 <__kernel_rem_pio2+0x2e8>
 801d156:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801d23c <__kernel_rem_pio2+0x304>
 801d15a:	2000      	movs	r0, #0
 801d15c:	1aa1      	subs	r1, r4, r2
 801d15e:	e0b0      	b.n	801d2c2 <__kernel_rem_pio2+0x38a>
 801d160:	2602      	movs	r6, #2
 801d162:	e78f      	b.n	801d084 <__kernel_rem_pio2+0x14c>
 801d164:	f853 2b04 	ldr.w	r2, [r3], #4
 801d168:	b948      	cbnz	r0, 801d17e <__kernel_rem_pio2+0x246>
 801d16a:	b122      	cbz	r2, 801d176 <__kernel_rem_pio2+0x23e>
 801d16c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801d170:	f843 2c04 	str.w	r2, [r3, #-4]
 801d174:	2201      	movs	r2, #1
 801d176:	f10c 0c01 	add.w	ip, ip, #1
 801d17a:	4610      	mov	r0, r2
 801d17c:	e789      	b.n	801d092 <__kernel_rem_pio2+0x15a>
 801d17e:	ebae 0202 	sub.w	r2, lr, r2
 801d182:	e7f5      	b.n	801d170 <__kernel_rem_pio2+0x238>
 801d184:	1e62      	subs	r2, r4, #1
 801d186:	ab06      	add	r3, sp, #24
 801d188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d18c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801d190:	a906      	add	r1, sp, #24
 801d192:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801d196:	e784      	b.n	801d0a2 <__kernel_rem_pio2+0x16a>
 801d198:	1e62      	subs	r2, r4, #1
 801d19a:	ab06      	add	r3, sp, #24
 801d19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d1a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801d1a4:	e7f4      	b.n	801d190 <__kernel_rem_pio2+0x258>
 801d1a6:	ab06      	add	r3, sp, #24
 801d1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d1ac:	3a01      	subs	r2, #1
 801d1ae:	4318      	orrs	r0, r3
 801d1b0:	e7ad      	b.n	801d10e <__kernel_rem_pio2+0x1d6>
 801d1b2:	3301      	adds	r3, #1
 801d1b4:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801d1b8:	2800      	cmp	r0, #0
 801d1ba:	d0fa      	beq.n	801d1b2 <__kernel_rem_pio2+0x27a>
 801d1bc:	9a04      	ldr	r2, [sp, #16]
 801d1be:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801d1c2:	446a      	add	r2, sp
 801d1c4:	eb04 000b 	add.w	r0, r4, fp
 801d1c8:	a91a      	add	r1, sp, #104	@ 0x68
 801d1ca:	1c66      	adds	r6, r4, #1
 801d1cc:	3a98      	subs	r2, #152	@ 0x98
 801d1ce:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801d1d2:	4423      	add	r3, r4
 801d1d4:	42b3      	cmp	r3, r6
 801d1d6:	da04      	bge.n	801d1e2 <__kernel_rem_pio2+0x2aa>
 801d1d8:	461c      	mov	r4, r3
 801d1da:	e713      	b.n	801d004 <__kernel_rem_pio2+0xcc>
 801d1dc:	9a03      	ldr	r2, [sp, #12]
 801d1de:	2301      	movs	r3, #1
 801d1e0:	e7e8      	b.n	801d1b4 <__kernel_rem_pio2+0x27c>
 801d1e2:	9902      	ldr	r1, [sp, #8]
 801d1e4:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d1e8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801d1ec:	9104      	str	r1, [sp, #16]
 801d1ee:	ee07 1a90 	vmov	s15, r1
 801d1f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d1f6:	2400      	movs	r4, #0
 801d1f8:	eca0 7b02 	vstmia	r0!, {d7}
 801d1fc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801d220 <__kernel_rem_pio2+0x2e8>
 801d200:	4686      	mov	lr, r0
 801d202:	4554      	cmp	r4, sl
 801d204:	dd03      	ble.n	801d20e <__kernel_rem_pio2+0x2d6>
 801d206:	eca2 7b02 	vstmia	r2!, {d7}
 801d20a:	3601      	adds	r6, #1
 801d20c:	e7e2      	b.n	801d1d4 <__kernel_rem_pio2+0x29c>
 801d20e:	ecbc 5b02 	vldmia	ip!, {d5}
 801d212:	ed3e 6b02 	vldmdb	lr!, {d6}
 801d216:	3401      	adds	r4, #1
 801d218:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d21c:	e7f1      	b.n	801d202 <__kernel_rem_pio2+0x2ca>
 801d21e:	bf00      	nop
	...
 801d22c:	3e700000 	.word	0x3e700000
 801d230:	00000000 	.word	0x00000000
 801d234:	41700000 	.word	0x41700000
 801d238:	0801e5b8 	.word	0x0801e5b8
 801d23c:	0801e578 	.word	0x0801e578
 801d240:	4268      	negs	r0, r5
 801d242:	eeb0 0b48 	vmov.f64	d0, d8
 801d246:	f000 f8f3 	bl	801d430 <scalbn>
 801d24a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801d418 <__kernel_rem_pio2+0x4e0>
 801d24e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801d252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d256:	db17      	blt.n	801d288 <__kernel_rem_pio2+0x350>
 801d258:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801d420 <__kernel_rem_pio2+0x4e8>
 801d25c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801d260:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801d264:	aa06      	add	r2, sp, #24
 801d266:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801d26a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801d26e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d272:	3518      	adds	r5, #24
 801d274:	ee10 3a10 	vmov	r3, s0
 801d278:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d27c:	ee17 3a10 	vmov	r3, s14
 801d280:	3401      	adds	r4, #1
 801d282:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d286:	e74d      	b.n	801d124 <__kernel_rem_pio2+0x1ec>
 801d288:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d28c:	aa06      	add	r2, sp, #24
 801d28e:	ee10 3a10 	vmov	r3, s0
 801d292:	e7f6      	b.n	801d282 <__kernel_rem_pio2+0x34a>
 801d294:	a806      	add	r0, sp, #24
 801d296:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801d29a:	9001      	str	r0, [sp, #4]
 801d29c:	ee07 0a90 	vmov	s15, r0
 801d2a0:	3a01      	subs	r2, #1
 801d2a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d2a6:	ee27 7b00 	vmul.f64	d7, d7, d0
 801d2aa:	ee20 0b06 	vmul.f64	d0, d0, d6
 801d2ae:	ed21 7b02 	vstmdb	r1!, {d7}
 801d2b2:	e744      	b.n	801d13e <__kernel_rem_pio2+0x206>
 801d2b4:	ecbc 5b02 	vldmia	ip!, {d5}
 801d2b8:	ecb5 6b02 	vldmia	r5!, {d6}
 801d2bc:	3001      	adds	r0, #1
 801d2be:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d2c2:	4548      	cmp	r0, r9
 801d2c4:	dc01      	bgt.n	801d2ca <__kernel_rem_pio2+0x392>
 801d2c6:	4281      	cmp	r1, r0
 801d2c8:	daf4      	bge.n	801d2b4 <__kernel_rem_pio2+0x37c>
 801d2ca:	a842      	add	r0, sp, #264	@ 0x108
 801d2cc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801d2d0:	ed81 7b00 	vstr	d7, [r1]
 801d2d4:	3a01      	subs	r2, #1
 801d2d6:	e736      	b.n	801d146 <__kernel_rem_pio2+0x20e>
 801d2d8:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801d2da:	2a02      	cmp	r2, #2
 801d2dc:	dc0a      	bgt.n	801d2f4 <__kernel_rem_pio2+0x3bc>
 801d2de:	2a00      	cmp	r2, #0
 801d2e0:	dc2d      	bgt.n	801d33e <__kernel_rem_pio2+0x406>
 801d2e2:	d046      	beq.n	801d372 <__kernel_rem_pio2+0x43a>
 801d2e4:	f008 0007 	and.w	r0, r8, #7
 801d2e8:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801d2ec:	ecbd 8b06 	vpop	{d8-d10}
 801d2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2f4:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801d2f6:	2a03      	cmp	r2, #3
 801d2f8:	d1f4      	bne.n	801d2e4 <__kernel_rem_pio2+0x3ac>
 801d2fa:	a942      	add	r1, sp, #264	@ 0x108
 801d2fc:	f1a3 0208 	sub.w	r2, r3, #8
 801d300:	440a      	add	r2, r1
 801d302:	4611      	mov	r1, r2
 801d304:	4620      	mov	r0, r4
 801d306:	2800      	cmp	r0, #0
 801d308:	f1a1 0108 	sub.w	r1, r1, #8
 801d30c:	dc52      	bgt.n	801d3b4 <__kernel_rem_pio2+0x47c>
 801d30e:	4621      	mov	r1, r4
 801d310:	2901      	cmp	r1, #1
 801d312:	f1a2 0208 	sub.w	r2, r2, #8
 801d316:	dc5d      	bgt.n	801d3d4 <__kernel_rem_pio2+0x49c>
 801d318:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801d428 <__kernel_rem_pio2+0x4f0>
 801d31c:	aa42      	add	r2, sp, #264	@ 0x108
 801d31e:	4413      	add	r3, r2
 801d320:	2c01      	cmp	r4, #1
 801d322:	dc67      	bgt.n	801d3f4 <__kernel_rem_pio2+0x4bc>
 801d324:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801d328:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801d32c:	2e00      	cmp	r6, #0
 801d32e:	d167      	bne.n	801d400 <__kernel_rem_pio2+0x4c8>
 801d330:	ed87 5b00 	vstr	d5, [r7]
 801d334:	ed87 6b02 	vstr	d6, [r7, #8]
 801d338:	ed87 7b04 	vstr	d7, [r7, #16]
 801d33c:	e7d2      	b.n	801d2e4 <__kernel_rem_pio2+0x3ac>
 801d33e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801d428 <__kernel_rem_pio2+0x4f0>
 801d342:	aa42      	add	r2, sp, #264	@ 0x108
 801d344:	4413      	add	r3, r2
 801d346:	4622      	mov	r2, r4
 801d348:	2a00      	cmp	r2, #0
 801d34a:	da24      	bge.n	801d396 <__kernel_rem_pio2+0x45e>
 801d34c:	b34e      	cbz	r6, 801d3a2 <__kernel_rem_pio2+0x46a>
 801d34e:	eeb1 7b46 	vneg.f64	d7, d6
 801d352:	ed87 7b00 	vstr	d7, [r7]
 801d356:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801d35a:	aa44      	add	r2, sp, #272	@ 0x110
 801d35c:	2301      	movs	r3, #1
 801d35e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d362:	429c      	cmp	r4, r3
 801d364:	da20      	bge.n	801d3a8 <__kernel_rem_pio2+0x470>
 801d366:	b10e      	cbz	r6, 801d36c <__kernel_rem_pio2+0x434>
 801d368:	eeb1 7b47 	vneg.f64	d7, d7
 801d36c:	ed87 7b02 	vstr	d7, [r7, #8]
 801d370:	e7b8      	b.n	801d2e4 <__kernel_rem_pio2+0x3ac>
 801d372:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801d428 <__kernel_rem_pio2+0x4f0>
 801d376:	aa42      	add	r2, sp, #264	@ 0x108
 801d378:	4413      	add	r3, r2
 801d37a:	2c00      	cmp	r4, #0
 801d37c:	da05      	bge.n	801d38a <__kernel_rem_pio2+0x452>
 801d37e:	b10e      	cbz	r6, 801d384 <__kernel_rem_pio2+0x44c>
 801d380:	eeb1 7b47 	vneg.f64	d7, d7
 801d384:	ed87 7b00 	vstr	d7, [r7]
 801d388:	e7ac      	b.n	801d2e4 <__kernel_rem_pio2+0x3ac>
 801d38a:	ed33 6b02 	vldmdb	r3!, {d6}
 801d38e:	3c01      	subs	r4, #1
 801d390:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d394:	e7f1      	b.n	801d37a <__kernel_rem_pio2+0x442>
 801d396:	ed33 7b02 	vldmdb	r3!, {d7}
 801d39a:	3a01      	subs	r2, #1
 801d39c:	ee36 6b07 	vadd.f64	d6, d6, d7
 801d3a0:	e7d2      	b.n	801d348 <__kernel_rem_pio2+0x410>
 801d3a2:	eeb0 7b46 	vmov.f64	d7, d6
 801d3a6:	e7d4      	b.n	801d352 <__kernel_rem_pio2+0x41a>
 801d3a8:	ecb2 6b02 	vldmia	r2!, {d6}
 801d3ac:	3301      	adds	r3, #1
 801d3ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d3b2:	e7d6      	b.n	801d362 <__kernel_rem_pio2+0x42a>
 801d3b4:	ed91 7b00 	vldr	d7, [r1]
 801d3b8:	ed91 5b02 	vldr	d5, [r1, #8]
 801d3bc:	3801      	subs	r0, #1
 801d3be:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d3c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d3c6:	ed81 6b00 	vstr	d6, [r1]
 801d3ca:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d3ce:	ed81 7b02 	vstr	d7, [r1, #8]
 801d3d2:	e798      	b.n	801d306 <__kernel_rem_pio2+0x3ce>
 801d3d4:	ed92 7b00 	vldr	d7, [r2]
 801d3d8:	ed92 5b02 	vldr	d5, [r2, #8]
 801d3dc:	3901      	subs	r1, #1
 801d3de:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d3e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d3e6:	ed82 6b00 	vstr	d6, [r2]
 801d3ea:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d3ee:	ed82 7b02 	vstr	d7, [r2, #8]
 801d3f2:	e78d      	b.n	801d310 <__kernel_rem_pio2+0x3d8>
 801d3f4:	ed33 6b02 	vldmdb	r3!, {d6}
 801d3f8:	3c01      	subs	r4, #1
 801d3fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d3fe:	e78f      	b.n	801d320 <__kernel_rem_pio2+0x3e8>
 801d400:	eeb1 5b45 	vneg.f64	d5, d5
 801d404:	eeb1 6b46 	vneg.f64	d6, d6
 801d408:	ed87 5b00 	vstr	d5, [r7]
 801d40c:	eeb1 7b47 	vneg.f64	d7, d7
 801d410:	ed87 6b02 	vstr	d6, [r7, #8]
 801d414:	e790      	b.n	801d338 <__kernel_rem_pio2+0x400>
 801d416:	bf00      	nop
 801d418:	00000000 	.word	0x00000000
 801d41c:	41700000 	.word	0x41700000
 801d420:	00000000 	.word	0x00000000
 801d424:	3e700000 	.word	0x3e700000
	...

0801d430 <scalbn>:
 801d430:	ee10 1a90 	vmov	r1, s1
 801d434:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d438:	b98b      	cbnz	r3, 801d45e <scalbn+0x2e>
 801d43a:	ee10 3a10 	vmov	r3, s0
 801d43e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801d442:	4319      	orrs	r1, r3
 801d444:	d00a      	beq.n	801d45c <scalbn+0x2c>
 801d446:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801d4f8 <scalbn+0xc8>
 801d44a:	4b37      	ldr	r3, [pc, #220]	@ (801d528 <scalbn+0xf8>)
 801d44c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d450:	4298      	cmp	r0, r3
 801d452:	da0b      	bge.n	801d46c <scalbn+0x3c>
 801d454:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801d500 <scalbn+0xd0>
 801d458:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d45c:	4770      	bx	lr
 801d45e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801d462:	4293      	cmp	r3, r2
 801d464:	d107      	bne.n	801d476 <scalbn+0x46>
 801d466:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d46a:	4770      	bx	lr
 801d46c:	ee10 1a90 	vmov	r1, s1
 801d470:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d474:	3b36      	subs	r3, #54	@ 0x36
 801d476:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801d47a:	4290      	cmp	r0, r2
 801d47c:	dd0d      	ble.n	801d49a <scalbn+0x6a>
 801d47e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801d508 <scalbn+0xd8>
 801d482:	ee10 3a90 	vmov	r3, s1
 801d486:	eeb0 6b47 	vmov.f64	d6, d7
 801d48a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801d510 <scalbn+0xe0>
 801d48e:	2b00      	cmp	r3, #0
 801d490:	fe27 7b05 	vselge.f64	d7, d7, d5
 801d494:	ee27 0b06 	vmul.f64	d0, d7, d6
 801d498:	4770      	bx	lr
 801d49a:	4418      	add	r0, r3
 801d49c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801d4a0:	4298      	cmp	r0, r3
 801d4a2:	dcec      	bgt.n	801d47e <scalbn+0x4e>
 801d4a4:	2800      	cmp	r0, #0
 801d4a6:	dd0a      	ble.n	801d4be <scalbn+0x8e>
 801d4a8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801d4ac:	ec53 2b10 	vmov	r2, r3, d0
 801d4b0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801d4b4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801d4b8:	ec43 2b10 	vmov	d0, r2, r3
 801d4bc:	4770      	bx	lr
 801d4be:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801d4c2:	da09      	bge.n	801d4d8 <scalbn+0xa8>
 801d4c4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801d500 <scalbn+0xd0>
 801d4c8:	ee10 3a90 	vmov	r3, s1
 801d4cc:	eeb0 6b47 	vmov.f64	d6, d7
 801d4d0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801d518 <scalbn+0xe8>
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	e7db      	b.n	801d490 <scalbn+0x60>
 801d4d8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801d4dc:	ec53 2b10 	vmov	r2, r3, d0
 801d4e0:	3036      	adds	r0, #54	@ 0x36
 801d4e2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801d4e6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801d4ea:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801d520 <scalbn+0xf0>
 801d4ee:	ec43 2b10 	vmov	d0, r2, r3
 801d4f2:	e7b1      	b.n	801d458 <scalbn+0x28>
 801d4f4:	f3af 8000 	nop.w
 801d4f8:	00000000 	.word	0x00000000
 801d4fc:	43500000 	.word	0x43500000
 801d500:	c2f8f359 	.word	0xc2f8f359
 801d504:	01a56e1f 	.word	0x01a56e1f
 801d508:	8800759c 	.word	0x8800759c
 801d50c:	7e37e43c 	.word	0x7e37e43c
 801d510:	8800759c 	.word	0x8800759c
 801d514:	fe37e43c 	.word	0xfe37e43c
 801d518:	c2f8f359 	.word	0xc2f8f359
 801d51c:	81a56e1f 	.word	0x81a56e1f
 801d520:	00000000 	.word	0x00000000
 801d524:	3c900000 	.word	0x3c900000
 801d528:	ffff3cb0 	.word	0xffff3cb0
 801d52c:	00000000 	.word	0x00000000

0801d530 <floor>:
 801d530:	ee10 3a90 	vmov	r3, s1
 801d534:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801d538:	ee10 2a10 	vmov	r2, s0
 801d53c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801d540:	2913      	cmp	r1, #19
 801d542:	b530      	push	{r4, r5, lr}
 801d544:	4615      	mov	r5, r2
 801d546:	dc33      	bgt.n	801d5b0 <floor+0x80>
 801d548:	2900      	cmp	r1, #0
 801d54a:	da18      	bge.n	801d57e <floor+0x4e>
 801d54c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801d610 <floor+0xe0>
 801d550:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d554:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d55c:	dd0a      	ble.n	801d574 <floor+0x44>
 801d55e:	2b00      	cmp	r3, #0
 801d560:	da50      	bge.n	801d604 <floor+0xd4>
 801d562:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d566:	4313      	orrs	r3, r2
 801d568:	2200      	movs	r2, #0
 801d56a:	4293      	cmp	r3, r2
 801d56c:	4b2a      	ldr	r3, [pc, #168]	@ (801d618 <floor+0xe8>)
 801d56e:	bf08      	it	eq
 801d570:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801d574:	4619      	mov	r1, r3
 801d576:	4610      	mov	r0, r2
 801d578:	ec41 0b10 	vmov	d0, r0, r1
 801d57c:	e01f      	b.n	801d5be <floor+0x8e>
 801d57e:	4827      	ldr	r0, [pc, #156]	@ (801d61c <floor+0xec>)
 801d580:	4108      	asrs	r0, r1
 801d582:	ea03 0400 	and.w	r4, r3, r0
 801d586:	4314      	orrs	r4, r2
 801d588:	d019      	beq.n	801d5be <floor+0x8e>
 801d58a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801d610 <floor+0xe0>
 801d58e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d592:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d59a:	ddeb      	ble.n	801d574 <floor+0x44>
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	bfbe      	ittt	lt
 801d5a0:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801d5a4:	410a      	asrlt	r2, r1
 801d5a6:	189b      	addlt	r3, r3, r2
 801d5a8:	ea23 0300 	bic.w	r3, r3, r0
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	e7e1      	b.n	801d574 <floor+0x44>
 801d5b0:	2933      	cmp	r1, #51	@ 0x33
 801d5b2:	dd05      	ble.n	801d5c0 <floor+0x90>
 801d5b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d5b8:	d101      	bne.n	801d5be <floor+0x8e>
 801d5ba:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d5be:	bd30      	pop	{r4, r5, pc}
 801d5c0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801d5c4:	f04f 30ff 	mov.w	r0, #4294967295
 801d5c8:	40e0      	lsrs	r0, r4
 801d5ca:	4210      	tst	r0, r2
 801d5cc:	d0f7      	beq.n	801d5be <floor+0x8e>
 801d5ce:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d610 <floor+0xe0>
 801d5d2:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d5d6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5de:	ddc9      	ble.n	801d574 <floor+0x44>
 801d5e0:	2b00      	cmp	r3, #0
 801d5e2:	da02      	bge.n	801d5ea <floor+0xba>
 801d5e4:	2914      	cmp	r1, #20
 801d5e6:	d103      	bne.n	801d5f0 <floor+0xc0>
 801d5e8:	3301      	adds	r3, #1
 801d5ea:	ea22 0200 	bic.w	r2, r2, r0
 801d5ee:	e7c1      	b.n	801d574 <floor+0x44>
 801d5f0:	2401      	movs	r4, #1
 801d5f2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801d5f6:	fa04 f101 	lsl.w	r1, r4, r1
 801d5fa:	440a      	add	r2, r1
 801d5fc:	42aa      	cmp	r2, r5
 801d5fe:	bf38      	it	cc
 801d600:	191b      	addcc	r3, r3, r4
 801d602:	e7f2      	b.n	801d5ea <floor+0xba>
 801d604:	2200      	movs	r2, #0
 801d606:	4613      	mov	r3, r2
 801d608:	e7b4      	b.n	801d574 <floor+0x44>
 801d60a:	bf00      	nop
 801d60c:	f3af 8000 	nop.w
 801d610:	8800759c 	.word	0x8800759c
 801d614:	7e37e43c 	.word	0x7e37e43c
 801d618:	bff00000 	.word	0xbff00000
 801d61c:	000fffff 	.word	0x000fffff

0801d620 <_init>:
 801d620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d622:	bf00      	nop
 801d624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d626:	bc08      	pop	{r3}
 801d628:	469e      	mov	lr, r3
 801d62a:	4770      	bx	lr

0801d62c <_fini>:
 801d62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d62e:	bf00      	nop
 801d630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d632:	bc08      	pop	{r3}
 801d634:	469e      	mov	lr, r3
 801d636:	4770      	bx	lr
